{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81f3ee2bcb543b0b78a808a8acf5c513e9cc0a62",
      "candidate_info": {
        "commit_hash": "81f3ee2bcb543b0b78a808a8acf5c513e9cc0a62",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/81f3ee2bcb543b0b78a808a8acf5c513e9cc0a62",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c"
        ],
        "message": "2.3.7rc5: call child cleanup on pool destruction\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   }",
          "2211:   sp = sp->next;",
          "2212:  }",
          "2214: }",
          "",
          "[Removed Lines]",
          "2213:  apr_pool_cleanup_register(p, s, apr_pool_cleanup_null, oidc_cleanup_child);",
          "",
          "[Added Lines]",
          "2213:  apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe507911af83b7e46cff898a0b8e69de9bd420c4",
      "candidate_info": {
        "commit_hash": "fe507911af83b7e46cff898a0b8e69de9bd420c4",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/fe507911af83b7e46cff898a0b8e69de9bd420c4",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.3.6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49896833e8867a4ee89069096c08fa8fe8d3271e",
      "candidate_info": {
        "commit_hash": "49896833e8867a4ee89069096c08fa8fe8d3271e",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/49896833e8867a4ee89069096c08fa8fe8d3271e",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h"
        ],
        "message": "add support for refreshing an access token ahead of expiry\n\nas part of an OIDC session using OIDCRefreshAccessTokenBeforeExpiry\nbump to 2.3.10rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "786: # When not defined no claims are whitelisted and all claims are stored except when blacklisted with OIDCBlackListedClaims.",
          "787: #OIDCWhiteListedClaims [<claim>]+",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "789: # Specify the minimum time-to-live for the access token stored in the OIDC session.",
          "790: # When the access token expiry timestamp (or at tleast the hint given to that) is less than this value,",
          "791: # an attempt will be made to refresh the access token using the refresh token grant type with the OP.",
          "792: # This only has effect if a refresh token was actually returned from the OP and an \"expires_in\" hint",
          "793: # was returned as part of the authorization response (and subsequent refresh token responses).",
          "794: # When not defined no attempt is made to refresh the access token (unless implicitly with OIDCUserInfoRefreshInterval)",
          "795: #OIDCRefreshAccessTokenBeforeExpiry <seconds>",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: #define OIDC_DEFAULT_AUTH_REQUEST_METHOD OIDC_AUTH_REQUEST_METHOD_GET",
          "168: #define OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI 0",
          "170: #define OIDCProviderMetadataURL                \"OIDCProviderMetadataURL\"",
          "171: #define OIDCProviderIssuer                     \"OIDCProviderIssuer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: #define OIDC_DEFAULT_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY -1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263: #define OIDCBlackListedClaims                  \"OIDCBlackListedClaims\"",
          "264: #define OIDCOAuthServerMetadataURL             \"OIDCOAuthServerMetadataURL\"",
          "265: #define OIDCOAuthAccessTokenBindingPolicy      \"OIDCOAuthAccessTokenBindingPolicy\"",
          "267: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268: #define OIDCRefreshAccessTokenBeforeExpiry     \"OIDCRefreshAccessTokenBeforeExpiry\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:  int pass_refresh_token;",
          "288:  char *path_auth_request_params;",
          "289:  char *path_scope;",
          "290: } oidc_dir_cfg;",
          "292: #define OIDC_CONFIG_DIR_RV(cmd, rv) rv != NULL ? apr_psprintf(cmd->pool, \"Invalid value for directive '%s': %s\", cmd->directive->directive, rv) : NULL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:  int refresh_access_token_before_expiry;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1024:  return cfg->max_number_of_state_cookies;",
          "1025: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034: static const char * oidc_set_refresh_access_token_before_expiry(cmd_parms *cmd,",
          "1035:   void *m, const char *arg) {",
          "1036:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg *) m;",
          "1037:  const char *rv = oidc_parse_refresh_access_token_before_expiry(cmd->pool,",
          "1038:    arg, &dir_cfg->refresh_access_token_before_expiry);",
          "1039:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1040: }",
          "1042: int oidc_cfg_dir_refresh_access_token_before_expiry(request_rec *r) {",
          "1043:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1044:    &auth_openidc_module);",
          "1045:  if (dir_cfg->refresh_access_token_before_expiry == OIDC_CONFIG_POS_INT_UNSET)",
          "1046:   return OIDC_DEFAULT_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY;",
          "1047:  return dir_cfg->refresh_access_token_before_expiry;",
          "1048: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1662:  c->pass_refresh_token = OIDC_CONFIG_POS_INT_UNSET;",
          "1663:  c->path_auth_request_params = NULL;",
          "1664:  c->path_scope = NULL;",
          "1665:  return (c);",
          "1666: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1688:  c->refresh_access_token_before_expiry = OIDC_CONFIG_POS_INT_UNSET;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1864:  c->path_scope =",
          "1865:    add->path_scope != NULL ? add->path_scope : base->path_scope;",
          "1867:  return (c);",
          "1868: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1891:  c->refresh_access_token_before_expiry =",
          "1892:    add->refresh_access_token_before_expiry != OIDC_CONFIG_POS_INT_UNSET ?",
          "1893:      add->refresh_access_token_before_expiry :",
          "1894:      base->refresh_access_token_before_expiry;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2881:     RSRC_CONF,",
          "2882:     \"The token binding policy used for access tokens; must be one of [disabled|optional|required|enforced]\"),",
          "2884:   { NULL }",
          "2885: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2913:   AP_INIT_TAKE1(OIDCRefreshAccessTokenBeforeExpiry,",
          "2914:     oidc_set_refresh_access_token_before_expiry,",
          "2915:     (void *)APR_OFFSETOF(oidc_dir_cfg, refresh_access_token_before_expiry),",
          "2916:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "2917:     \"Ensure the access token is valid for at least <x> seconds by refreshing it if required.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1410:  return TRUE;",
          "1411: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1413: static apr_byte_t oidc_refresh_access_token_before_expiry(request_rec *r,",
          "1414:   oidc_cfg *cfg, oidc_session_t *session, int ttl_minimum) {",
          "1416:  const char *s_access_token_expires = NULL;",
          "1417:  apr_time_t t_expires = -1;",
          "1418:  oidc_provider_t *provider = NULL;",
          "1420:  oidc_debug(r, \"ttl_minimum=%d\", ttl_minimum);",
          "1422:  if (ttl_minimum < 0)",
          "1423:   return FALSE;",
          "1425:  s_access_token_expires = oidc_session_get_access_token_expires(r, session);",
          "1426:  if (s_access_token_expires == NULL) {",
          "1427:   oidc_debug(r,",
          "1428:     \"no access token expires_in stored in the session (i.e. returned from in the authorization response), so cannot refresh the access token based on TTL requirement\");",
          "1429:   return FALSE;",
          "1430:  }",
          "1432:  if (oidc_session_get_refresh_token(r, session) == NULL) {",
          "1433:   oidc_debug(r,",
          "1434:     \"no refresh token stored in the session, so cannot refresh the access token based on TTL requirement\");",
          "1435:   return FALSE;",
          "1436:  }",
          "1438:  if (sscanf(s_access_token_expires, \"%\" APR_TIME_T_FMT, &t_expires) != 1) {",
          "1439:   oidc_error(r, \"could not parse s_access_token_expires %s\",",
          "1440:     s_access_token_expires);",
          "1441:   return FALSE;",
          "1442:  }",
          "1444:  t_expires = apr_time_from_sec(t_expires - ttl_minimum);",
          "1446:  oidc_debug(r, \"refresh needed in: %\" APR_TIME_T_FMT \" seconds\",",
          "1447:    apr_time_sec(t_expires - apr_time_now()));",
          "1449:  if (t_expires > apr_time_now())",
          "1450:   return FALSE;",
          "1452:  if (oidc_get_provider_from_session(r, cfg, session, &provider) == FALSE)",
          "1453:   return FALSE;",
          "1455:  if (oidc_refresh_access_token(r, cfg, session, provider,",
          "1456:    NULL) == FALSE) {",
          "1457:   oidc_warn(r, \"access_token could not be refreshed\");",
          "1458:   return FALSE;",
          "1459:  }",
          "1461:  return TRUE;",
          "1462: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1419:  oidc_debug(r, \"enter\");",
          "1422:  r->user = apr_pstrdup(r->pool, session->remote_user);",
          "1423:  oidc_debug(r, \"set remote_user to \\\"%s\\\"\", r->user);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1473:  apr_byte_t needs_save = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1436:  if (rc != OK)",
          "1437:   return rc;",
          "",
          "[Removed Lines]",
          "1440:  apr_byte_t needs_save = oidc_refresh_claims_from_userinfo_endpoint(r, cfg,",
          "1441:    session);",
          "",
          "[Added Lines]",
          "1494:  if (oidc_refresh_access_token_before_expiry(r, cfg, session,",
          "1495:    oidc_cfg_dir_refresh_access_token_before_expiry(r)) == TRUE)",
          "1496:   needs_save = TRUE;",
          "1499:  if (oidc_refresh_claims_from_userinfo_endpoint(r, cfg, session) == TRUE)",
          "1500:   needs_save = TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1787:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r));",
          "1789:  char *sid = NULL;",
          "1791:  if (provider->backchannel_logout_supported > 0) {",
          "1792:   oidc_jose_get_string(r->pool, id_token_jwt->payload.value.json,",
          "1793:     OIDC_CLAIM_SID, FALSE, &sid, NULL);",
          "",
          "[Removed Lines]",
          "1790:  oidc_debug(r, \"provider->backchannel_logout_supported=%d\", provider->backchannel_logout_supported);",
          "",
          "[Added Lines]",
          "1849:  oidc_debug(r, \"provider->backchannel_logout_supported=%d\",",
          "1850:    provider->backchannel_logout_supported);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: const char *oidc_parse_pkce_type(apr_pool_t *pool, const char *arg, oidc_proto_pkce_t **type);",
          "706: const char *oidc_cfg_claim_prefix(request_rec *r);",
          "707: int oidc_cfg_max_number_of_state_cookies(oidc_cfg *cfg);",
          "710: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: int oidc_cfg_dir_refresh_access_token_before_expiry(request_rec *r);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:  int len = apr_base64_decode_len(input);",
          "",
          "[Removed Lines]",
          "567: char *oidc_parse_base64(apr_pool_t *pool, const char *input,",
          "568:   char **output, int *output_len) {",
          "",
          "[Added Lines]",
          "566: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output,",
          "567:   int *output_len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "872:  if (v == OIDC_OAUTH_ACCEPT_TOKEN_IN_COOKIE) {",
          "874:     APR_HASH_KEY_STRING, p);",
          "875:  }",
          "",
          "[Removed Lines]",
          "873:   apr_hash_set(list_options, OIDC_OAUTH_ACCEPT_TOKEN_IN_OPTION_COOKIE_NAME,",
          "",
          "[Added Lines]",
          "872:   apr_hash_set(list_options,",
          "873:     OIDC_OAUTH_ACCEPT_TOKEN_IN_OPTION_COOKIE_NAME,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1252:  return oidc_parse_int_valid(pool, arg, int_value,",
          "1253:    oidc_valid_max_number_of_state_cookies);",
          "1254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256: #define OIDC_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY_MIN 0",
          "1257: #define OIDC_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY_MAX 3600 * 24 * 365",
          "1262: const char *oidc_valid_refresh_access_token_before_expiry(apr_pool_t *pool,",
          "1263:   int v) {",
          "1264:  return oidc_valid_int_min_max(pool, v,",
          "1265:    OIDC_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY_MIN,",
          "1266:    OIDC_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY_MAX);",
          "1267: }",
          "1272: const char *oidc_parse_refresh_access_token_before_expiry(apr_pool_t *pool,",
          "1273:   const char *arg, int *int_value) {",
          "1274:  return oidc_parse_int_valid(pool, arg, int_value,",
          "1275:    oidc_valid_refresh_access_token_before_expiry);",
          "1276: }",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: const char *oidc_token_binding_policy2str(apr_pool_t *pool, int v);",
          "119: const char *oidc_parse_auth_request_method(apr_pool_t *pool, const char *arg, int *method);",
          "120: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool, const char *arg, int *int_value);",
          "122: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "123: typedef const char *(*oidc_valid_function_t)(apr_pool_t *, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: const char *oidc_parse_refresh_access_token_before_expiry(apr_pool_t *pool, const char *arg, int *int_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46758a75eef8e3c91f2917fc7c6302136eb18809",
      "candidate_info": {
        "commit_hash": "46758a75eef8e3c91f2917fc7c6302136eb18809",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/46758a75eef8e3c91f2917fc7c6302136eb18809",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h"
        ],
        "message": "optionally delete the oldest state cookie(s); see #399\n\nbump to 2.3.10rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: # authentication requests. See: https://github.com/zmartzone/mod_auth_openidc/issues/331",
          "467: # Setting this to 0 means unlimited, until the browser or server gives up which is the",
          "468: # behavior of mod_auth_openidc < 2.3.8, which did not have this configuration option.",
          "472: ########################################################################################",
          "473: #",
          "",
          "[Removed Lines]",
          "469: # When not defined, the default is 7.",
          "470: #OIDCStateMaxNumberOfCookies <number>",
          "",
          "[Added Lines]",
          "469: #",
          "470: # The optional second boolean parameter if the oldest state cookie(s) will be deleted,",
          "471: # even if still valid; see #399.",
          "472: #",
          "473: # When not defined, the default is 7 and \"false\", thus the oldest cookie(s) will not be deleted.",
          "474: #OIDCStateMaxNumberOfCookies <number> [false|true]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #define OIDC_DEFAULT_STATE_TIMEOUT 300",
          "108: #define OIDC_DEFAULT_MAX_NUMBER_OF_STATE_COOKIES 7",
          "110: #define OIDC_DEFAULT_SESSION_INACTIVITY_TIMEOUT 300",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: #define OIDC_DEFAULT_DELETE_OLDEST_STATE_COOKIES 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1013: static const char *oidc_set_max_number_of_state_cookies(cmd_parms *cmd,",
          "1015:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "1016:    cmd->server->module_config, &auth_openidc_module);",
          "1019:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1020: }",
          "",
          "[Removed Lines]",
          "1014:   void *struct_ptr, const char *arg) {",
          "1017:  const char *rv = oidc_parse_max_number_of_state_cookies(cmd->pool, arg,",
          "1018:    &cfg->max_number_of_state_cookies);",
          "",
          "[Added Lines]",
          "1016:   void *struct_ptr, const char *arg1, const char *arg2) {",
          "1019:  const char *rv = oidc_parse_max_number_of_state_cookies(cmd->pool, arg1,",
          "1020:    arg2, &cfg->max_number_of_state_cookies,",
          "1021:    &cfg->delete_oldest_state_cookies);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1028:  return cfg->max_number_of_state_cookies;",
          "1029: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1037: int oidc_cfg_delete_oldest_state_cookies(oidc_cfg *cfg) {",
          "1038:  if (cfg->delete_oldest_state_cookies == OIDC_CONFIG_POS_INT_UNSET)",
          "1039:   return OIDC_DEFAULT_DELETE_OLDEST_STATE_COOKIES;",
          "1040:  return cfg->delete_oldest_state_cookies;",
          "1041: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1160:  c->http_timeout_short = OIDC_DEFAULT_HTTP_TIMEOUT_SHORT;",
          "1161:  c->state_timeout = OIDC_DEFAULT_STATE_TIMEOUT;",
          "1162:  c->max_number_of_state_cookies = OIDC_CONFIG_POS_INT_UNSET;",
          "1163:  c->session_inactivity_timeout = OIDC_DEFAULT_SESSION_INACTIVITY_TIMEOUT;",
          "1165:  c->cookie_domain = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1175:  c->delete_oldest_state_cookies = OIDC_CONFIG_POS_INT_UNSET;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1489:    add->max_number_of_state_cookies != OIDC_CONFIG_POS_INT_UNSET ?",
          "1490:      add->max_number_of_state_cookies :",
          "1491:      base->max_number_of_state_cookies;",
          "1492:  c->session_inactivity_timeout =",
          "1493:    add->session_inactivity_timeout",
          "1494:    != OIDC_DEFAULT_SESSION_INACTIVITY_TIMEOUT ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1505:  c->delete_oldest_state_cookies =",
          "1506:    add->delete_oldest_state_cookies != OIDC_CONFIG_POS_INT_UNSET ?",
          "1507:      add->delete_oldest_state_cookies :",
          "1508:      base->delete_oldest_state_cookies;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2711:     (void*)APR_OFFSETOF(oidc_cfg, state_timeout),",
          "2712:     RSRC_CONF,",
          "2713:     \"Time to live in seconds for state parameter (cq. interval in which the authorization request and the corresponding response need to be completed).\"),",
          "2715:     oidc_set_max_number_of_state_cookies,",
          "2716:     (void*)APR_OFFSETOF(oidc_cfg, max_number_of_state_cookies),",
          "2717:     RSRC_CONF,",
          "2719:   AP_INIT_TAKE1(OIDCSessionInactivityTimeout,",
          "2720:     oidc_set_session_inactivity_timeout,",
          "2721:     (void*)APR_OFFSETOF(oidc_cfg, session_inactivity_timeout),",
          "",
          "[Removed Lines]",
          "2714:   AP_INIT_TAKE1(OIDCStateMaxNumberOfCookies,",
          "2718:     \"Maximun number of parallel state cookies i.e. outstanding authorization requests.\"),",
          "",
          "[Added Lines]",
          "2731:   AP_INIT_TAKE12(OIDCStateMaxNumberOfCookies,",
          "2735:     \"Maximun number of parallel state cookies i.e. outstanding authorization requests and whether to delete the oldest cookie(s).\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:  return TRUE;",
          "688: }",
          "695: static int oidc_clean_expired_state_cookies(request_rec *r, oidc_cfg *c,",
          "697:  int number_of_valid_state_cookies = 0;",
          "699:  char *cookies = apr_pstrdup(r->pool, oidc_util_hdr_in_cookie_get(r));",
          "700:  if (cookies != NULL) {",
          "701:   cookie = apr_strtok(cookies, OIDC_STR_SEMI_COLON, &tokenizerCtx);",
          "",
          "[Removed Lines]",
          "696:   const char *currentCookieName) {",
          "698:  char *cookie, *tokenizerCtx;",
          "",
          "[Added Lines]",
          "690: typedef struct oidc_state_cookies_t {",
          "691:  char *name;",
          "692:  apr_time_t timestamp;",
          "693:  struct oidc_state_cookies_t *next;",
          "694: } oidc_state_cookies_t;",
          "696: static int oidc_delete_oldest_state_cookies(request_rec *r,",
          "697:   int number_of_valid_state_cookies, int max_number_of_state_cookies,",
          "698:   oidc_state_cookies_t *first) {",
          "699:  oidc_state_cookies_t *cur = NULL, *prev = NULL, *prev_oldest = NULL,",
          "701:  while (number_of_valid_state_cookies >= max_number_of_state_cookies) {",
          "702:   oldest = first;",
          "703:   prev_oldest = NULL;",
          "704:   prev = first;",
          "705:   cur = first->next;",
          "706:   while (cur) {",
          "707:    if ((cur->timestamp < oldest->timestamp)) {",
          "708:     oldest = cur;",
          "709:     prev_oldest = prev;",
          "710:    }",
          "711:    prev = cur;",
          "712:    cur = cur->next;",
          "713:   }",
          "714:   oidc_warn(r,",
          "715:     \"deleting oldest state cookie: %s (time until expiry \" APR_TIME_T_FMT \" seconds)\",",
          "716:     oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "717:   oidc_util_set_cookie(r, oldest->name, \"\", 0, NULL);",
          "718:   if (prev_oldest)",
          "719:    prev_oldest->next = oldest->next;",
          "720:   else",
          "721:    first = first->next;",
          "722:   number_of_valid_state_cookies--;",
          "723:  }",
          "724:  return number_of_valid_state_cookies;",
          "725: }",
          "733:   const char *currentCookieName, int delete_oldest) {",
          "735:  oidc_state_cookies_t *first = NULL, *last = NULL;",
          "736:  char *cookie, *tokenizerCtx = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:         oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "724:           NULL);",
          "725:        } else {",
          "726:         number_of_valid_state_cookies++;",
          "727:        }",
          "728:        oidc_proto_state_destroy(proto_state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:         if (first == NULL) {",
          "765:          first = apr_pcalloc(r->pool,",
          "766:            sizeof(oidc_state_cookies_t));",
          "767:          last = first;",
          "768:         } else {",
          "769:          last->next = apr_pcalloc(r->pool,",
          "770:            sizeof(oidc_state_cookies_t));",
          "771:          last = last->next;",
          "772:         }",
          "773:         last->name = cookieName;",
          "774:         last->timestamp = ts;",
          "775:         last->next = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:    cookie = apr_strtok(NULL, OIDC_STR_SEMI_COLON, &tokenizerCtx);",
          "734:   }",
          "735:  }",
          "736:  return number_of_valid_state_cookies;",
          "737: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:  if (delete_oldest > 0)",
          "788:   number_of_valid_state_cookies = oidc_delete_oldest_state_cookies(r,",
          "789:     number_of_valid_state_cookies, c->max_number_of_state_cookies,",
          "790:     first);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "747:  const char *cookieName = oidc_get_state_cookie_name(r, state);",
          "753:  char *cookieValue = oidc_util_get_cookie(r, cookieName);",
          "",
          "[Removed Lines]",
          "750:  oidc_clean_expired_state_cookies(r, c, cookieName);",
          "",
          "[Added Lines]",
          "806:  oidc_clean_expired_state_cookies(r, c, cookieName, FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "825:  int max_number_of_cookies = oidc_cfg_max_number_of_state_cookies(c);",
          "826:  if ((max_number_of_cookies > 0)",
          "827:    && (number_of_cookies >= max_number_of_cookies)) {",
          "828:   oidc_warn(r,",
          "829:     \"the number of existing, valid state cookies (%d) has exceeded the limit (%d), no additional authorization request + state cookie can be generated, aborting the request\",",
          "830:     number_of_cookies, max_number_of_cookies);",
          "",
          "[Removed Lines]",
          "824:  int number_of_cookies = oidc_clean_expired_state_cookies(r, c, NULL);",
          "",
          "[Added Lines]",
          "880:  int number_of_cookies = oidc_clean_expired_state_cookies(r, c, NULL,",
          "881:    oidc_cfg_delete_oldest_state_cookies(c));",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:  int http_timeout_short;",
          "388:  int state_timeout;",
          "389:  int max_number_of_state_cookies;",
          "390:  int session_inactivity_timeout;",
          "391:  int session_cache_fallback_to_cookie;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:  int delete_oldest_state_cookies;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706: const char *oidc_cfg_claim_prefix(request_rec *r);",
          "707: int oidc_cfg_max_number_of_state_cookies(oidc_cfg *cfg);",
          "708: int oidc_cfg_dir_refresh_access_token_before_expiry(request_rec *r);",
          "711: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710: int oidc_cfg_delete_oldest_state_cookies(oidc_cfg *cfg);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool,",
          "1253:    oidc_valid_max_number_of_state_cookies);",
          "1254: }",
          "1256: #define OIDC_REFRESH_ACCESS_TOKEN_BEFORE_EXPIRY_MIN 0",
          "",
          "[Removed Lines]",
          "1251:   const char *arg, int *int_value) {",
          "1252:  return oidc_parse_int_valid(pool, arg, int_value,",
          "",
          "[Added Lines]",
          "1251:   const char *arg1, const char *arg2, int *int_value, int *bool_value) {",
          "1252:  const char *rv = NULL;",
          "1254:  rv = oidc_parse_int_valid(pool, arg1, int_value,",
          "1256:  if ((rv == NULL) && (arg2 != NULL))",
          "1257:   rv = oidc_parse_boolean(pool, arg2, bool_value);",
          "1258:  return rv;",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: const char *oidc_parse_token_binding_policy(apr_pool_t *pool, const char *arg, int *int_value);",
          "118: const char *oidc_token_binding_policy2str(apr_pool_t *pool, int v);",
          "119: const char *oidc_parse_auth_request_method(apr_pool_t *pool, const char *arg, int *method);",
          "121: const char *oidc_parse_refresh_access_token_before_expiry(apr_pool_t *pool, const char *arg, int *int_value);",
          "123: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "",
          "[Removed Lines]",
          "120: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool, const char *arg, int *int_value);",
          "",
          "[Added Lines]",
          "120: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool, const char *arg1, const char *arg2, int *int_value, int *bool_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5cdf589eb0aeaa6ad67fe7bb1fe380a7e31f7e9",
      "candidate_info": {
        "commit_hash": "a5cdf589eb0aeaa6ad67fe7bb1fe380a7e31f7e9",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/a5cdf589eb0aeaa6ad67fe7bb1fe380a7e31f7e9",
        "files": [
          "ChangeLog",
          "README.md",
          "configure.ac",
          "src/mod_auth_openidc.h",
          "src/util.c"
        ],
        "message": "add support for OAuth 2.0 Client Certificate Bound Access Tokens\n\nsee:\nhttps://www.ietf.org/id/draft-ietf-oauth-mtls-12.txt:\npickup an environment variable TB_SSL_CLIENT_CERT_FINGERPRINT with the\nbase64url encoded value of the SHA256 hash of the DER representation of\nthe certificate and compare it against the cnf[x5t#S256] claim value.\n\naka. poor Torsten's Token Binding :-)\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "221: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Sec-Provided-Token-Binding-ID\"",
          "223: #define OIDC_TOKEN_BINDING_POLICY_DISABLED  0",
          "224: #define OIDC_TOKEN_BINDING_POLICY_OPTIONAL  1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: #define OIDC_TB_CFG_FINGERPRINT_ENV_VAR  \"TB_SSL_CLIENT_CERT_FINGERPRINT\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521: #define OIDC_CLAIM_TARGET_LINK_URI \"target_link_uri\"",
          "522: #define OIDC_CLAIM_CNF             \"cnf\"",
          "523: #define OIDC_CLAIM_CNF_TBH         \"tbh\"",
          "524: #define OIDC_CLAIM_SID             \"sid\"",
          "525: #define OIDC_CLAIM_EVENTS          \"events\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526: #define OIDC_CLAIM_CNF_X5T_S256    \"x5t#S256\"",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2386:  return result;",
          "2387: }",
          "2397:  const char *tbp_str = NULL;",
          "2398:  char *tbp = NULL;",
          "2399:  int tbp_len = -1;",
          "2400:  unsigned char *tbp_hash = NULL;",
          "2401:  unsigned int tbp_hash_len = -1;",
          "2409:  tbp_str = oidc_util_get_provided_token_binding_id(r);",
          "2410:  if (tbp_str == NULL) {",
          "",
          "[Removed Lines]",
          "2392: apr_byte_t oidc_util_json_validate_cnf(request_rec *r, json_t *jwt,",
          "2393:   int token_binding_policy) {",
          "2394:  char *tbh_str = NULL;",
          "2395:  char *tbh = NULL;",
          "2396:  int tbh_len = -1;",
          "2403:  oidc_debug(r, \"enter: policy=%s\",",
          "2404:    oidc_token_binding_policy2str(r->pool, token_binding_policy));",
          "2406:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_DISABLED)",
          "2407:   return TRUE;",
          "",
          "[Added Lines]",
          "2389: const char *oidc_util_get_client_cert_fingerprint(request_rec *r) {",
          "2390:  const char *fingerprint = NULL;",
          "2392:  if (r->subprocess_env == NULL)",
          "2393:   goto end;",
          "2395:  fingerprint = apr_table_get(r->subprocess_env,",
          "2396:    OIDC_TB_CFG_FINGERPRINT_ENV_VAR);",
          "2397:  if (fingerprint == NULL) {",
          "2398:   oidc_debug(r, \"no %s environment variable found\",",
          "2399:     OIDC_TB_CFG_FINGERPRINT_ENV_VAR);",
          "2400:   goto end;",
          "2401:  }",
          "2403: end:",
          "2405:  return fingerprint;",
          "2406: }",
          "2408: apr_byte_t oidc_util_json_validate_cnf_tbh(request_rec *r,",
          "2409:   int token_binding_policy, const char *tbh_str) {",
          "2415:  char *tbh = NULL;",
          "2416:  int tbh_len = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2417:  if (tbp_len <= 0) {",
          "2418:   oidc_warn(r,",
          "2419:     \"Provided Token Binding ID environment variable could not be decoded\");",
          "2421:  }",
          "2423:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
          "",
          "[Removed Lines]",
          "2420:   return FALSE;",
          "",
          "[Added Lines]",
          "2429:   goto out_err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2425:    NULL) == FALSE) {",
          "2426:   oidc_warn(r,",
          "2427:     \"hashing Provided Token Binding ID environment variable failed\");",
          "2442:   goto out_err;",
          "2443:  }",
          "2445:  tbh_len = oidc_base64url_decode(r->pool, &tbh, tbh_str);",
          "2446:  if (tbh_len <= 0) {",
          "2447:   oidc_warn(r, \"cnf[\\\"tbh\\\"] provided but it could not be decoded\");",
          "2449:  }",
          "2451:  if (tbp_hash_len != tbh_len) {",
          "2452:   oidc_warn(r,",
          "2453:     \"hash length of provided token binding ID environment variable: %d does not match length of cnf[\\\"tbh\\\"]: %d\",",
          "2454:     tbp_hash_len, tbh_len);",
          "2456:  }",
          "2458:  if (memcmp(tbp_hash, tbh, tbh_len) != 0) {",
          "2459:   oidc_warn(r,",
          "2460:     \"hash of provided token binding ID environment variable does not match cnf[\\\"tbh\\\"]\");",
          "2462:  }",
          "2464:  oidc_debug(r,",
          "",
          "[Removed Lines]",
          "2428:   return FALSE;",
          "2429:  }",
          "2431:  json_t *cnf = json_object_get(jwt, OIDC_CLAIM_CNF);",
          "2432:  if (cnf == NULL) {",
          "2433:   oidc_debug(r, \"no \\\"cnf\\\" claim found in the token\");",
          "2434:   goto out_err;",
          "2435:  }",
          "2437:  oidc_jose_get_string(r->pool, cnf, OIDC_CLAIM_CNF_TBH, FALSE, &tbh_str,",
          "2438:    NULL);",
          "2439:  if (tbh_str == NULL) {",
          "2440:   oidc_debug(r,",
          "2441:     \" \\\"cnf\\\" claim found in the token but no \\\"tbh\\\" claim inside found\");",
          "2448:   return FALSE;",
          "2455:   return FALSE;",
          "2461:   return FALSE;",
          "",
          "[Added Lines]",
          "2443:   goto out_err;",
          "2450:   goto out_err;",
          "2456:   goto out_err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2477:  return (tbp_str == NULL);",
          "2478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2475: apr_byte_t oidc_util_json_validate_cnf_x5t_s256(request_rec *r,",
          "2476:   int token_binding_policy, const char *x5t_256_str) {",
          "2477:  const char *fingerprint = NULL;",
          "2479:  fingerprint = oidc_util_get_client_cert_fingerprint(r);",
          "2480:  if (fingerprint == NULL) {",
          "2481:   oidc_debug(r, \"no certificate (fingerprint) provided\");",
          "2482:   goto out_err;",
          "2483:  }",
          "2485:  if (apr_strnatcmp(fingerprint, x5t_256_str) != 0) {",
          "2486:   oidc_warn(r,",
          "2487:     \"fingerprint of provided cert (%s) does not match cnf[\\\"x5t#S256\\\"] (%s)\",",
          "2488:     fingerprint, x5t_256_str);",
          "2489:   goto out_err;",
          "2490:  }",
          "2492:  oidc_debug(r, \"fingerprint of provided cert (%s) matches cnf[\\\"x5t#S256\\\"]\",",
          "2493:    fingerprint);",
          "2495:  return TRUE;",
          "2497:  out_err:",
          "2499:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_OPTIONAL)",
          "2500:   return TRUE;",
          "2501:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_ENFORCED)",
          "2502:   return FALSE;",
          "2505:  return (fingerprint == NULL);",
          "2506: }",
          "2511: apr_byte_t oidc_util_json_validate_cnf(request_rec *r, json_t *jwt,",
          "2512:   int token_binding_policy) {",
          "2513:  char *tbh_str = NULL;",
          "2515:  oidc_debug(r, \"enter: policy=%s\",",
          "2516:    oidc_token_binding_policy2str(r->pool, token_binding_policy));",
          "2518:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_DISABLED)",
          "2519:   return TRUE;",
          "2521:  json_t *cnf = json_object_get(jwt, OIDC_CLAIM_CNF);",
          "2522:  if (cnf == NULL) {",
          "2523:   oidc_debug(r, \"no \\\"%s\\\" claim found in the token\", OIDC_CLAIM_CNF);",
          "2524:   goto out_err;",
          "2525:  }",
          "2527:  oidc_jose_get_string(r->pool, cnf, OIDC_CLAIM_CNF_TBH, FALSE, &tbh_str,",
          "2528:    NULL);",
          "2529:  if (tbh_str != NULL)",
          "2530:   return oidc_util_json_validate_cnf_tbh(r, token_binding_policy, tbh_str);",
          "2532:  oidc_jose_get_string(r->pool, cnf, OIDC_CLAIM_CNF_X5T_S256, FALSE, &tbh_str,",
          "2533:    NULL);",
          "2534:  if (tbh_str != NULL)",
          "2535:   return oidc_util_json_validate_cnf_x5t_s256(r, token_binding_policy,",
          "2536:     tbh_str);",
          "2538:  oidc_debug(r,",
          "2539:    \" \\\"%s\\\" claim found in the token but no \\\"%s\\\" or \\\"%s\\\" key found inside\",",
          "2540:    OIDC_CLAIM_CNF, OIDC_CLAIM_CNF_TBH, OIDC_CLAIM_CNF_X5T_S256);",
          "2542: out_err:",
          "2544:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_OPTIONAL)",
          "2545:   return TRUE;",
          "2546:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_ENFORCED)",
          "2547:   return FALSE;",
          "2551:  return FALSE;",
          "2552: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}