{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bdc828972a24fea1da229ab5f92bc5598cc54415",
      "candidate_info": {
        "commit_hash": "bdc828972a24fea1da229ab5f92bc5598cc54415",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bdc828972a24fea1da229ab5f92bc5598cc54415",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows: fix flags assignment in uv_fs_readdir()",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1672:     return uv_translate_sys_error(err);",
          "1673:   }",
          "1677:   if (cb) {",
          "1678:     QUEUE_FS_TP_JOB(loop, req);",
          "",
          "[Removed Lines]",
          "1675:   req->file_flags;",
          "",
          "[Added Lines]",
          "1675:   req->file_flags = flags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "431b535a519e91260e9a643cbf4dad59a98961bb",
      "candidate_info": {
        "commit_hash": "431b535a519e91260e9a643cbf4dad59a98961bb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/431b535a519e91260e9a643cbf4dad59a98961bb",
        "files": [
          "src/win/tcp.c",
          "test/test-tcp-write-queue-order.c"
        ],
        "message": "windows: use UV_ECANCELED for aborted TCP writes\n\nFor consistency with Unix",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c",
          "test/test-tcp-write-queue-order.c||test/test-tcp-write-queue-order.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1024:   }",
          "1026:   if (req->cb) {",
          "1029:   }",
          "1031:   handle->write_reqs_pending--;",
          "",
          "[Removed Lines]",
          "1027:     err = GET_REQ_SOCK_ERROR(req);",
          "1028:     req->cb(req, uv_translate_sys_error(err));",
          "",
          "[Added Lines]",
          "1027:     err = uv_translate_sys_error(GET_REQ_SOCK_ERROR(req));",
          "1028:     if (err == UV_ECONNABORTED) {",
          "1030:       err = UV_ECANCELED;",
          "1031:     }",
          "1032:     req->cb(req, err);",
          "",
          "---------------"
        ],
        "test/test-tcp-write-queue-order.c||test/test-tcp-write-queue-order.c": [
          "File: test/test-tcp-write-queue-order.c -> test/test-tcp-write-queue-order.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   ASSERT(connect_cb_called == 1);",
          "127:   ASSERT(connection_cb_called == 1);",
          "128:   ASSERT(write_callbacks > 0);",
          "131:   ASSERT(write_cancelled_callbacks > 0);",
          "133:   ASSERT(write_callbacks +",
          "134:          write_error_callbacks +",
          "135:          write_cancelled_callbacks == REQ_COUNT);",
          "",
          "[Removed Lines]",
          "129: #ifndef _WIN32",
          "132: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fceccc535911a28121c7984e46e7c670a00a386",
      "candidate_info": {
        "commit_hash": "5fceccc535911a28121c7984e46e7c670a00a386",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5fceccc535911a28121c7984e46e7c670a00a386",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c",
          "test/blackhole-server.c",
          "test/dns-server.c",
          "test/echo-server.c",
          "test/test-connection-fail.c",
          "test/test-delayed-accept.c",
          "test/test-getsockname.c",
          "test/test-ipc-send-recv.c",
          "test/test-ipc.c",
          "test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c",
          "test/test-tcp-close.c",
          "test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c"
        ],
        "message": "include: merge uv_tcp_bind and uv_tcp_bind6\n\nMerge uv_tcp_bind6() into uv_tcp_bind().  uv_tcp_bind() now takes a\nconst struct sockaddr*.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/blackhole-server.c||test/blackhole-server.c",
          "test/dns-server.c||test/dns-server.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-connection-fail.c||test/test-connection-fail.c",
          "test/test-delayed-accept.c||test/test-delayed-accept.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-multiple-listen.c||test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c",
          "test/test-tcp-close.c||test/test-tcp-close.c",
          "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "767: UV_EXTERN int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);",
          "772: UV_EXTERN int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,",
          "773:     int* namelen);",
          "",
          "[Removed Lines]",
          "769: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr_in* addr);",
          "770: UV_EXTERN int uv_tcp_bind6(uv_tcp_t* handle, const struct sockaddr_in6* addr);",
          "",
          "[Added Lines]",
          "773: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr* addr);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191: }",
          "205:   else",
          "206:     return UV_EINVAL;",
          "207: }",
          "",
          "[Removed Lines]",
          "194: int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr_in* addr) {",
          "195:   if (handle->type == UV_TCP && addr->sin_family == AF_INET)",
          "196:     return uv__tcp_bind(handle, (const struct sockaddr*) addr, sizeof(*addr));",
          "197:   else",
          "198:     return UV_EINVAL;",
          "199: }",
          "202: int uv_tcp_bind6(uv_tcp_t* handle, const struct sockaddr_in6* addr) {",
          "203:   if (handle->type == UV_TCP && addr->sin6_family == AF_INET6)",
          "204:     return uv__tcp_bind(handle, (const struct sockaddr*) addr, sizeof(*addr));",
          "",
          "[Added Lines]",
          "194: int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr* addr) {",
          "195:   unsigned int addrlen;",
          "197:   if (handle->type != UV_TCP)",
          "198:     return UV_EINVAL;",
          "200:   if (addr->sa_family == AF_INET)",
          "201:     addrlen = sizeof(struct sockaddr_in);",
          "202:   else if (addr->sa_family == AF_INET6)",
          "203:     addrlen = sizeof(struct sockaddr_in6);",
          "207:   return uv__tcp_bind(handle, addr, addrlen);",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   if (type == UV_TCP) {",
          "211:     ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) &ctx.server_handle));",
          "213:   }",
          "214:   else",
          "215:     ASSERT(0);",
          "",
          "[Removed Lines]",
          "212:     ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, &listen_addr));",
          "",
          "[Added Lines]",
          "212:     ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle,",
          "213:                             (const struct sockaddr*) &listen_addr));",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   pinger->tcp.data = pinger;",
          "196:   r = uv_tcp_connect(&pinger->connect_req,",
          "197:                      &pinger->tcp,",
          "",
          "[Removed Lines]",
          "194:   uv_tcp_bind(&pinger->tcp, &client_addr);",
          "",
          "[Added Lines]",
          "194:   ASSERT(0 == uv_tcp_bind(&pinger->tcp, (const struct sockaddr*) &client_addr));",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   server = (uv_stream_t*)&tcpServer;",
          "367:   r = uv_tcp_init(loop, &tcpServer);",
          "368:   ASSERT(r == 0);",
          "370:   ASSERT(r == 0);",
          "371:   r = uv_listen((uv_stream_t*)&tcpServer, MAX_WRITE_HANDLES, connection_cb);",
          "372:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "369:   r = uv_tcp_bind(&tcpServer, &listen_addr);",
          "",
          "[Added Lines]",
          "369:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &listen_addr);",
          "",
          "---------------"
        ],
        "test/blackhole-server.c||test/blackhole-server.c": [
          "File: test/blackhole-server.c -> test/blackhole-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   r = uv_tcp_init(loop, &tcp_server);",
          "109:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)&tcp_server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/dns-server.c||test/dns-server.c": [
          "File: test/dns-server.c -> test/dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     return 1;",
          "306:   }",
          "309:   if (r) {",
          "311:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "308:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "308:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     return 1;",
          "237:   }",
          "240:   if (r) {",
          "242:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "239:   r = uv_tcp_bind(&tcpServer, &addr);",
          "",
          "[Added Lines]",
          "239:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:   }",
          "275:   if (r) {",
          "277:     fprintf(stderr, \"IPv6 not supported\\n\");",
          "",
          "[Removed Lines]",
          "274:   r = uv_tcp_bind6(&tcpServer, &addr6);",
          "",
          "[Added Lines]",
          "274:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr6);",
          "",
          "---------------"
        ],
        "test/test-connection-fail.c||test/test-connection-fail.c": [
          "File: test/test-connection-fail.c -> test/test-connection-fail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   r = uv_tcp_connect(&req, &tcp, &server_addr, connect_cb);",
          "106:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "104:   uv_tcp_bind(&tcp, &client_addr);",
          "",
          "[Added Lines]",
          "104:   ASSERT(0 == uv_tcp_bind(&tcp, (const struct sockaddr*) &client_addr));",
          "",
          "---------------"
        ],
        "test/test-delayed-accept.c||test/test-delayed-accept.c": [
          "File: test/test-delayed-accept.c -> test/test-delayed-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   r = uv_tcp_init(uv_default_loop(), server);",
          "110:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(server, &addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     return 1;",
          "181:   }",
          "184:   if (r) {",
          "185:     fprintf(stderr, \"Bind error\\n\");",
          "186:     return 1;",
          "",
          "[Removed Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, &addr);",
          "",
          "[Added Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c": [
          "File: test/test-ipc-send-recv.c -> test/test-ipc-send-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   r = uv_tcp_init(uv_default_loop(), &ctx.send.tcp);",
          "146:   ASSERT(r == 0);",
          "149:   ASSERT(r == 0);",
          "151:   r = run_test();",
          "",
          "[Removed Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, &addr);",
          "",
          "[Added Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:   r = uv_tcp_init(uv_default_loop(), &server);",
          "376:   ASSERT(r == 0);",
          "379:   ASSERT(r == 0);",
          "381:   r = uv_tcp_simultaneous_accepts(&server, 1);",
          "",
          "[Removed Lines]",
          "378:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "378:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:   r = uv_tcp_init(uv_default_loop(), &server);",
          "401:   ASSERT(r == 0);",
          "404:   ASSERT(r == 0);",
          "406:   r = uv_tcp_simultaneous_accepts(&server, 0);",
          "",
          "[Removed Lines]",
          "403:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "403:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   r = uv_tcp_init(uv_default_loop(), &tcp_server);",
          "567:   ASSERT(r == 0);",
          "570:   ASSERT(r == 0);",
          "572:   if (!listen_after_write) {",
          "",
          "[Removed Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "[Added Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "619:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "622:   ASSERT(r == 0);",
          "624:   r = uv_listen((uv_stream_t*)&tcp_server, 12, ipc_on_connection_tcp_conn);",
          "",
          "[Removed Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "[Added Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-multiple-listen.c||test/test-multiple-listen.c": [
          "File: test/test-multiple-listen.c -> test/test-multiple-listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   r = uv_tcp_init(uv_default_loop(), &server);",
          "54:   ASSERT(r == 0);",
          "57:   ASSERT(r == 0);",
          "59:   r = uv_listen((uv_stream_t*)&server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "56:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "56:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c": [
          "File: test/test-tcp-bind-error.c -> test/test-tcp-bind-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "43:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "44:   ASSERT(r == 0);",
          "46:   ASSERT(r == 0);",
          "48:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "49:   ASSERT(r == 0);",
          "51:   ASSERT(r == 0);",
          "53:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "45:   r = uv_tcp_bind(&server1, &addr);",
          "50:   r = uv_tcp_bind(&server2, &addr);",
          "",
          "[Added Lines]",
          "45:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr);",
          "50:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   ASSERT(r == 0);",
          "82:   ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);",
          "84:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "81:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "81:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   r = uv_tcp_init(uv_default_loop(), &server);",
          "103:   ASSERT(r == 0);",
          "105:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "107:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "104:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "104:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:   r = uv_tcp_init(uv_default_loop(), &server);",
          "127:   ASSERT(r == 0);",
          "129:   ASSERT(r == UV_EINVAL);",
          "131:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "128:   r = uv_tcp_bind(&server, garbage_addr);",
          "",
          "[Added Lines]",
          "128:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:   r = uv_tcp_init(uv_default_loop(), &server);",
          "153:   ASSERT(r == 0);",
          "155:   ASSERT(r == 0);",
          "157:   ASSERT(r == UV_EINVAL);",
          "159:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "154:   r = uv_tcp_bind(&server, &addr1);",
          "156:   r = uv_tcp_bind(&server, &addr2);",
          "",
          "[Added Lines]",
          "154:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1);",
          "156:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "177:   r = uv_tcp_init(uv_default_loop(), &server);",
          "178:   ASSERT(r == 0);",
          "180:   ASSERT(r == 0);",
          "182:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "179:   r = uv_tcp_bind(&server, &addr);",
          "",
          "[Added Lines]",
          "179:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c": [
          "File: test/test-tcp-bind6-error.c -> test/test-tcp-bind6-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "45:   ASSERT(r == 0);",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "50:   ASSERT(r == 0);",
          "52:   ASSERT(r == 0);",
          "54:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "46:   r = uv_tcp_bind6(&server1, &addr);",
          "51:   r = uv_tcp_bind6(&server2, &addr);",
          "",
          "[Added Lines]",
          "46:   r = uv_tcp_bind(&server1, (const struct sockaddr*) &addr);",
          "51:   r = uv_tcp_bind(&server2, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   r = uv_tcp_init(uv_default_loop(), &server);",
          "79:   ASSERT(r == 0);",
          "81:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "83:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "80:   r = uv_tcp_bind6(&server, &addr);",
          "",
          "[Added Lines]",
          "80:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   r = uv_tcp_init(uv_default_loop(), &server);",
          "103:   ASSERT(r == 0);",
          "105:   ASSERT(r == UV_EINVAL);",
          "107:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "104:   r = uv_tcp_bind6(&server, garbage_addr);",
          "",
          "[Added Lines]",
          "104:   r = uv_tcp_bind(&server, (const struct sockaddr*) garbage_addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:   r = uv_tcp_init(uv_default_loop(), &server);",
          "129:   ASSERT(r == 0);",
          "131:   ASSERT(r == 0);",
          "133:   ASSERT(r == UV_EINVAL);",
          "135:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "130:   r = uv_tcp_bind6(&server, &addr1);",
          "132:   r = uv_tcp_bind6(&server, &addr2);",
          "",
          "[Added Lines]",
          "130:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr1);",
          "132:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   r = uv_tcp_init(uv_default_loop(), &server);",
          "154:   ASSERT(r == 0);",
          "156:   ASSERT(r == 0);",
          "158:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "155:   r = uv_tcp_bind6(&server, &addr);",
          "",
          "[Added Lines]",
          "155:   r = uv_tcp_bind(&server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-close.c||test/test-tcp-close.c": [
          "File: test/test-tcp-close.c -> test/test-tcp-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   r = uv_tcp_init(loop, handle);",
          "86:   ASSERT(r == 0);",
          "89:   ASSERT(r == 0);",
          "91:   r = uv_listen((uv_stream_t*)handle, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "88:   r = uv_tcp_bind(handle, &addr);",
          "",
          "[Added Lines]",
          "88:   r = uv_tcp_bind(handle, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c": [
          "File: test/test-tcp-unexpected-read.c -> test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "99:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "100:   ASSERT(0 == uv_tcp_init(loop, &peer_handle));",
          "102:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));",
          "103:   ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, &addr, connect_cb));",
          "104:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "",
          "[Removed Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, &addr));",
          "",
          "[Added Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr));",
          "",
          "---------------"
        ],
        "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c": [
          "File: test/test-tcp-write-to-half-open-connection.c -> test/test-tcp-write-to-half-open-connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   r = uv_tcp_init(loop, &tcp_server);",
          "116:   ASSERT(r == 0);",
          "119:   ASSERT(r == 0);",
          "121:   r = uv_listen((uv_stream_t*)&tcp_server, 1, connection_cb);",
          "",
          "[Removed Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "[Added Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, (const struct sockaddr*) &addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e002340e508af36e50615182785130a6320b08e8",
      "candidate_info": {
        "commit_hash": "e002340e508af36e50615182785130a6320b08e8",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e002340e508af36e50615182785130a6320b08e8",
        "files": [
          "src/heap-inl.h"
        ],
        "message": "heap: fix `heap_remove()`\n\nRemove should shuffle items in both directions, not just down. It is\nrequired, because `max` node could be not the actual maximum value in\nthe tree.\n\nfix #1267\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "src/heap-inl.h||src/heap-inl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/heap-inl.h||src/heap-inl.h": [
          "File: src/heap-inl.h -> src/heap-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:       break;",
          "228:     heap_node_swap(heap, child, smallest);",
          "229:   }",
          "230: }",
          "232: HEAP_EXPORT(void heap_dequeue(struct heap* heap, heap_compare_fn less_than)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:   while (child->parent != NULL && less_than(child, child->parent))",
          "236:     heap_node_swap(heap, child->parent, child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6d8ba3c9a445578baa08267128228ebfa2bc7e3",
      "candidate_info": {
        "commit_hash": "f6d8ba3c9a445578baa08267128228ebfa2bc7e3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f6d8ba3c9a445578baa08267128228ebfa2bc7e3",
        "files": [
          "src/unix/core.c",
          "src/win/core.c",
          "test/test-list.h",
          "test/test-timer.c"
        ],
        "message": "unix, windows: run expired timers in run-once mode\n\nBefore this commit, creating an event loop, starting a timer and\ncalling uv_run(UV_RUN_ONCE) blocked in uv_run() until the timer\nexpired - but didn't actually run the timer.",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c",
          "src/win/core.c||src/win/core.c",
          "test/test-list.h||test/test-list.h",
          "test/test-timer.c||test/test-timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:     uv__io_poll(loop, timeout);",
          "318:     uv__run_check(loop);",
          "319:     uv__run_closing_handles(loop);",
          "322:     UV_TICK_STOP(loop, mode);",
          "324:     if (mode & (UV_RUN_ONCE | UV_RUN_NOWAIT))",
          "",
          "[Removed Lines]",
          "320:     r = uv__loop_alive(loop);",
          "",
          "[Added Lines]",
          "321:     if (mode == UV_RUN_ONCE) {",
          "330:       uv__update_time(loop);",
          "331:       uv__run_timers(loop);",
          "332:     }",
          "334:     r = uv__loop_alive(loop);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:                   !(mode & UV_RUN_NOWAIT));",
          "300:     uv_check_invoke(loop);",
          "301:     r = uv__loop_alive(loop);",
          "302:     if (mode & (UV_RUN_ONCE | UV_RUN_NOWAIT))",
          "303:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     if (mode == UV_RUN_ONCE) {",
          "311:       uv_update_time(loop);",
          "312:       uv_process_timers(loop);",
          "313:     }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: TEST_DECLARE   (timer_order)",
          "102: TEST_DECLARE   (timer_huge_timeout)",
          "103: TEST_DECLARE   (timer_huge_repeat)",
          "104: TEST_DECLARE   (idle_starvation)",
          "105: TEST_DECLARE   (loop_handles)",
          "106: TEST_DECLARE   (get_loadavg)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: TEST_DECLARE   (timer_run_once)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:   TEST_ENTRY  (timer_order)",
          "351:   TEST_ENTRY  (timer_huge_timeout)",
          "352:   TEST_ENTRY  (timer_huge_repeat)",
          "354:   TEST_ENTRY  (idle_starvation)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:   TEST_ENTRY  (timer_run_once)",
          "",
          "---------------"
        ],
        "test/test-timer.c||test/test-timer.c": [
          "File: test/test-timer.c -> test/test-timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   MAKE_VALGRIND_HAPPY();",
          "265:   return 0;",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: static unsigned int timer_run_once_timer_cb_called;",
          "272: static void timer_run_once_timer_cb(uv_timer_t* handle, int status) {",
          "273:   timer_run_once_timer_cb_called++;",
          "274: }",
          "277: TEST_IMPL(timer_run_once) {",
          "278:   uv_timer_t timer_handle;",
          "280:   ASSERT(0 == uv_timer_init(uv_default_loop(), &timer_handle));",
          "281:   ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 0, 0));",
          "282:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));",
          "283:   ASSERT(1 == timer_run_once_timer_cb_called);",
          "285:   ASSERT(0 == uv_timer_start(&timer_handle, timer_run_once_timer_cb, 1, 0));",
          "286:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));",
          "287:   ASSERT(2 == timer_run_once_timer_cb_called);",
          "289:   uv_close((uv_handle_t*) &timer_handle, NULL);",
          "290:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));",
          "292:   MAKE_VALGRIND_HAPPY();",
          "293:   return 0;",
          "294: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}