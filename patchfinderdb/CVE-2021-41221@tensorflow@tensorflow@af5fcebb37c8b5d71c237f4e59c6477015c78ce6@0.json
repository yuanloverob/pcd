{
  "cve_id": "CVE-2021-41221",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for the `Cudnn*` operations in TensorFlow can be tricked into accessing invalid memory, via a heap buffer overflow. This occurs because the ranks of the `input`, `input_h` and `input_c` parameters are not validated, but code assumes they have certain values. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "af5fcebb37c8b5d71c237f4e59c6477015c78ce6",
  "patch_info": {
    "commit_hash": "af5fcebb37c8b5d71c237f4e59c6477015c78ce6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6",
    "files": [
      "tensorflow/core/ops/cudnn_rnn_ops.cc",
      "tensorflow/core/ops/cudnn_rnn_ops_test.cc"
    ],
    "message": "Fix access to undefined memory during shape inference of Cudnn*.\n\nPiperOrigin-RevId: 400324259\nChange-Id: Ie3b7859d19ae24ee9ac2adf413bdc1e851bbc604",
    "before_after_code_files": [
      "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
      "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc": [
      "File: tensorflow/core/ops/cudnn_rnn_ops.cc -> tensorflow/core/ops/cudnn_rnn_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:     .Attr(\"seed2: int = 0\")",
      "82:     .Attr(\"is_training: bool = true\")",
      "83:     .SetShapeFn([](InferenceContext* c) {",
      "84:       auto input_shape = c->input(0);",
      "85:       auto input_h_shape = c->input(1);",
      "86:       auto seq_length = c->Dim(input_shape, 0);",
      "87:       auto batch_size = c->Dim(input_shape, 1);",
      "88:       auto num_units = c->Dim(input_h_shape, 2);",
      "89:       string direction;",
      "90:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
      "91:       string rnn_mode;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:       ShapeHandle unused;",
      "87:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
      "88:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
      "89:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124:     .Attr(\"seed2: int = 0\")",
      "125:     .Attr(\"is_training: bool = true\")",
      "126:     .SetShapeFn([](InferenceContext* c) {",
      "127:       auto input_shape = c->input(0);",
      "128:       auto input_h_shape = c->input(1);",
      "129:       auto seq_length = c->Dim(input_shape, 0);",
      "130:       auto batch_size = c->Dim(input_shape, 1);",
      "131:       auto num_units = c->Dim(input_h_shape, 2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:       ShapeHandle unused;",
      "136:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
      "137:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
      "138:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     .Attr(\"is_training: bool = true\")",
      "172:     .Attr(\"time_major: bool = true\")",
      "173:     .SetShapeFn([](InferenceContext* c) {",
      "174:       auto input_shape = c->input(0);",
      "175:       auto input_h_shape = c->input(1);",
      "176:       auto input_c_shape = c->input(2);",
      "177:       auto max_seq_length = c->Dim(input_shape, 0);",
      "178:       auto batch_size = c->Dim(input_shape, 1);",
      "179:       auto num_units = c->Dim(input_h_shape, 2);",
      "180:       string direction;",
      "181:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
      "182:       string rnn_mode;",
      "183:       TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));",
      "184:       int dir_count = (direction == \"bidirectional\") ? 2 : 1;",
      "185:       DimensionHandle output_size;",
      "186:       TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "185:       ShapeHandle unused;",
      "189:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
      "190:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
      "191:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
      "192:       TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));",
      "202:       if (rnn_mode == \"lstm\") {",
      "203:         TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));",
      "204:       }",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc": [
      "File: tensorflow/core/ops/cudnn_rnn_ops_test.cc -> tensorflow/core/ops/cudnn_rnn_ops_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:                    .Attr(\"direction\", \"unidirectional\")",
      "69:                    .Finalize(&op.node_def));",
      "70:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
      "71: }",
      "73: TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
      "72:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
      "75:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "100:                    .Attr(\"direction\", \"unidirectional\")",
      "101:                    .Finalize(&op.node_def));",
      "102:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
      "103: }",
      "105: TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
      "109:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
      "112:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "137:                    .Attr(\"direction\", \"unidirectional\")",
      "138:                    .Finalize(&op.node_def));",
      "139:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
      "140: }",
      "142: }  // end namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");",
      "151:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");",
      "152:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");",
      "153:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");",
      "154:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");",
      "155: }",
      "157: TEST(CudnnRNNOpsTest, ForwardV3Gru) {",
      "158:   int max_seq_length = 2;",
      "159:   int batch_size = 3;",
      "160:   int num_units = 4;",
      "161:   int num_layers = 5;",
      "162:   int dir_count = 1;",
      "163:   std::vector<int> input_shape = {max_seq_length, batch_size, num_units};",
      "164:   std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,",
      "165:                                     num_units};",
      "166:   std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,",
      "167:                                     num_units};",
      "168:   std::vector<int> output_shape = {max_seq_length, batch_size,",
      "169:                                    num_units * dir_count};",
      "170:   std::vector<int> seq_lengths_shape = {batch_size};",
      "171:   auto shape_to_str = [](const std::vector<int>& v) {",
      "172:     return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");",
      "173:   };",
      "174:   string input_shapes_desc = strings::StrCat(",
      "175:       shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",",
      "176:       shape_to_str(input_c_shape), \";\", \"[?]\", \";\",",
      "177:       shape_to_str(seq_lengths_shape));",
      "178:   string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";",
      "180:   ShapeInferenceTestOp op(\"CudnnRNNV3\");",
      "181:   TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")",
      "182:                    .Input({\"input\", 0, DT_FLOAT})",
      "183:                    .Input({\"input_h\", 0, DT_FLOAT})",
      "184:                    .Input({\"input_c\", 0, DT_FLOAT})",
      "185:                    .Input({\"params\", 0, DT_FLOAT})",
      "186:                    .Input({\"sequence_lengths\", 0, DT_INT32})",
      "187:                    .Attr(\"rnn_mode\", \"gru\")",
      "188:                    .Attr(\"input_mode\", \"auto_select\")",
      "189:                    .Attr(\"direction\", \"unidirectional\")",
      "190:                    .Finalize(&op.node_def));",
      "191:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
      "192:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");",
      "193:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");",
      "194:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");",
      "195:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6ea8f5c8e986c843e790294eb2dfcd22ab96214",
      "candidate_info": {
        "commit_hash": "a6ea8f5c8e986c843e790294eb2dfcd22ab96214",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a6ea8f5c8e986c843e790294eb2dfcd22ab96214",
        "files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ],
        "message": "Fix access to undefined memory during shape inference of Cudnn*.\n\nPiperOrigin-RevId: 400324259\nChange-Id: Ie3b7859d19ae24ee9ac2adf413bdc1e851bbc604",
        "before_after_code_files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops.cc -> tensorflow/core/ops/cudnn_rnn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     .Attr(\"seed2: int = 0\")",
          "82:     .Attr(\"is_training: bool = true\")",
          "83:     .SetShapeFn([](InferenceContext* c) {",
          "84:       auto input_shape = c->input(0);",
          "85:       auto input_h_shape = c->input(1);",
          "86:       auto seq_length = c->Dim(input_shape, 0);",
          "87:       auto batch_size = c->Dim(input_shape, 1);",
          "88:       auto num_units = c->Dim(input_h_shape, 2);",
          "89:       string direction;",
          "90:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "91:       string rnn_mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:       ShapeHandle unused;",
          "87:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "88:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "89:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     .Attr(\"seed2: int = 0\")",
          "125:     .Attr(\"is_training: bool = true\")",
          "126:     .SetShapeFn([](InferenceContext* c) {",
          "127:       auto input_shape = c->input(0);",
          "128:       auto input_h_shape = c->input(1);",
          "129:       auto seq_length = c->Dim(input_shape, 0);",
          "130:       auto batch_size = c->Dim(input_shape, 1);",
          "131:       auto num_units = c->Dim(input_h_shape, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:       ShapeHandle unused;",
          "136:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "137:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "138:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     .Attr(\"is_training: bool = true\")",
          "172:     .Attr(\"time_major: bool = true\")",
          "173:     .SetShapeFn([](InferenceContext* c) {",
          "174:       auto input_shape = c->input(0);",
          "175:       auto input_h_shape = c->input(1);",
          "176:       auto input_c_shape = c->input(2);",
          "177:       auto max_seq_length = c->Dim(input_shape, 0);",
          "178:       auto batch_size = c->Dim(input_shape, 1);",
          "179:       auto num_units = c->Dim(input_h_shape, 2);",
          "180:       string direction;",
          "181:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "182:       string rnn_mode;",
          "183:       TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));",
          "184:       int dir_count = (direction == \"bidirectional\") ? 2 : 1;",
          "185:       DimensionHandle output_size;",
          "186:       TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:       ShapeHandle unused;",
          "189:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "190:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "191:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "192:       TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));",
          "202:       if (rnn_mode == \"lstm\") {",
          "203:         TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));",
          "204:       }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops_test.cc -> tensorflow/core/ops/cudnn_rnn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                    .Attr(\"direction\", \"unidirectional\")",
          "69:                    .Finalize(&op.node_def));",
          "70:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "71: }",
          "73: TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "72:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "75:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:                    .Attr(\"direction\", \"unidirectional\")",
          "101:                    .Finalize(&op.node_def));",
          "102:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "103: }",
          "105: TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "109:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "112:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                    .Attr(\"direction\", \"unidirectional\")",
          "138:                    .Finalize(&op.node_def));",
          "139:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "140: }",
          "142: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");",
          "151:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");",
          "152:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");",
          "153:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");",
          "154:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");",
          "155: }",
          "157: TEST(CudnnRNNOpsTest, ForwardV3Gru) {",
          "158:   int max_seq_length = 2;",
          "159:   int batch_size = 3;",
          "160:   int num_units = 4;",
          "161:   int num_layers = 5;",
          "162:   int dir_count = 1;",
          "163:   std::vector<int> input_shape = {max_seq_length, batch_size, num_units};",
          "164:   std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,",
          "165:                                     num_units};",
          "166:   std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,",
          "167:                                     num_units};",
          "168:   std::vector<int> output_shape = {max_seq_length, batch_size,",
          "169:                                    num_units * dir_count};",
          "170:   std::vector<int> seq_lengths_shape = {batch_size};",
          "171:   auto shape_to_str = [](const std::vector<int>& v) {",
          "172:     return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");",
          "173:   };",
          "174:   string input_shapes_desc = strings::StrCat(",
          "175:       shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",",
          "176:       shape_to_str(input_c_shape), \";\", \"[?]\", \";\",",
          "177:       shape_to_str(seq_lengths_shape));",
          "178:   string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";",
          "180:   ShapeInferenceTestOp op(\"CudnnRNNV3\");",
          "181:   TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")",
          "182:                    .Input({\"input\", 0, DT_FLOAT})",
          "183:                    .Input({\"input_h\", 0, DT_FLOAT})",
          "184:                    .Input({\"input_c\", 0, DT_FLOAT})",
          "185:                    .Input({\"params\", 0, DT_FLOAT})",
          "186:                    .Input({\"sequence_lengths\", 0, DT_INT32})",
          "187:                    .Attr(\"rnn_mode\", \"gru\")",
          "188:                    .Attr(\"input_mode\", \"auto_select\")",
          "189:                    .Attr(\"direction\", \"unidirectional\")",
          "190:                    .Finalize(&op.node_def));",
          "191:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "192:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");",
          "193:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");",
          "194:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");",
          "195:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b0945c5841c5d1c0f175e6744c9c902b3cd58f3",
      "candidate_info": {
        "commit_hash": "3b0945c5841c5d1c0f175e6744c9c902b3cd58f3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3b0945c5841c5d1c0f175e6744c9c902b3cd58f3",
        "files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ],
        "message": "Fix access to undefined memory during shape inference of Cudnn*.\n\nPiperOrigin-RevId: 400324259\nChange-Id: Ie3b7859d19ae24ee9ac2adf413bdc1e851bbc604",
        "before_after_code_files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops.cc -> tensorflow/core/ops/cudnn_rnn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     .Attr(\"seed2: int = 0\")",
          "82:     .Attr(\"is_training: bool = true\")",
          "83:     .SetShapeFn([](InferenceContext* c) {",
          "84:       auto input_shape = c->input(0);",
          "85:       auto input_h_shape = c->input(1);",
          "86:       auto seq_length = c->Dim(input_shape, 0);",
          "87:       auto batch_size = c->Dim(input_shape, 1);",
          "88:       auto num_units = c->Dim(input_h_shape, 2);",
          "89:       string direction;",
          "90:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "91:       string rnn_mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:       ShapeHandle unused;",
          "87:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "88:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "89:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     .Attr(\"seed2: int = 0\")",
          "125:     .Attr(\"is_training: bool = true\")",
          "126:     .SetShapeFn([](InferenceContext* c) {",
          "127:       auto input_shape = c->input(0);",
          "128:       auto input_h_shape = c->input(1);",
          "129:       auto seq_length = c->Dim(input_shape, 0);",
          "130:       auto batch_size = c->Dim(input_shape, 1);",
          "131:       auto num_units = c->Dim(input_h_shape, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:       ShapeHandle unused;",
          "136:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "137:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "138:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     .Attr(\"is_training: bool = true\")",
          "172:     .Attr(\"time_major: bool = true\")",
          "173:     .SetShapeFn([](InferenceContext* c) {",
          "174:       auto input_shape = c->input(0);",
          "175:       auto input_h_shape = c->input(1);",
          "176:       auto input_c_shape = c->input(2);",
          "177:       auto max_seq_length = c->Dim(input_shape, 0);",
          "178:       auto batch_size = c->Dim(input_shape, 1);",
          "179:       auto num_units = c->Dim(input_h_shape, 2);",
          "180:       string direction;",
          "181:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "182:       string rnn_mode;",
          "183:       TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));",
          "184:       int dir_count = (direction == \"bidirectional\") ? 2 : 1;",
          "185:       DimensionHandle output_size;",
          "186:       TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:       ShapeHandle unused;",
          "189:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "190:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "191:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "192:       TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));",
          "202:       if (rnn_mode == \"lstm\") {",
          "203:         TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));",
          "204:       }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops_test.cc -> tensorflow/core/ops/cudnn_rnn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                    .Attr(\"direction\", \"unidirectional\")",
          "69:                    .Finalize(&op.node_def));",
          "70:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "71: }",
          "73: TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "72:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "75:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:                    .Attr(\"direction\", \"unidirectional\")",
          "101:                    .Finalize(&op.node_def));",
          "102:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "103: }",
          "105: TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "109:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "112:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                    .Attr(\"direction\", \"unidirectional\")",
          "138:                    .Finalize(&op.node_def));",
          "139:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "140: }",
          "142: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");",
          "151:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");",
          "152:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");",
          "153:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");",
          "154:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");",
          "155: }",
          "157: TEST(CudnnRNNOpsTest, ForwardV3Gru) {",
          "158:   int max_seq_length = 2;",
          "159:   int batch_size = 3;",
          "160:   int num_units = 4;",
          "161:   int num_layers = 5;",
          "162:   int dir_count = 1;",
          "163:   std::vector<int> input_shape = {max_seq_length, batch_size, num_units};",
          "164:   std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,",
          "165:                                     num_units};",
          "166:   std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,",
          "167:                                     num_units};",
          "168:   std::vector<int> output_shape = {max_seq_length, batch_size,",
          "169:                                    num_units * dir_count};",
          "170:   std::vector<int> seq_lengths_shape = {batch_size};",
          "171:   auto shape_to_str = [](const std::vector<int>& v) {",
          "172:     return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");",
          "173:   };",
          "174:   string input_shapes_desc = strings::StrCat(",
          "175:       shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",",
          "176:       shape_to_str(input_c_shape), \";\", \"[?]\", \";\",",
          "177:       shape_to_str(seq_lengths_shape));",
          "178:   string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";",
          "180:   ShapeInferenceTestOp op(\"CudnnRNNV3\");",
          "181:   TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")",
          "182:                    .Input({\"input\", 0, DT_FLOAT})",
          "183:                    .Input({\"input_h\", 0, DT_FLOAT})",
          "184:                    .Input({\"input_c\", 0, DT_FLOAT})",
          "185:                    .Input({\"params\", 0, DT_FLOAT})",
          "186:                    .Input({\"sequence_lengths\", 0, DT_INT32})",
          "187:                    .Attr(\"rnn_mode\", \"gru\")",
          "188:                    .Attr(\"input_mode\", \"auto_select\")",
          "189:                    .Attr(\"direction\", \"unidirectional\")",
          "190:                    .Finalize(&op.node_def));",
          "191:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "192:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");",
          "193:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");",
          "194:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");",
          "195:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cde87f2b796131e15cf5410b6bca444afd94df49",
      "candidate_info": {
        "commit_hash": "cde87f2b796131e15cf5410b6bca444afd94df49",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cde87f2b796131e15cf5410b6bca444afd94df49",
        "files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ],
        "message": "Fix access to undefined memory during shape inference of Cudnn*.\n\nPiperOrigin-RevId: 400324259\nChange-Id: Ie3b7859d19ae24ee9ac2adf413bdc1e851bbc604",
        "before_after_code_files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops.cc -> tensorflow/core/ops/cudnn_rnn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     .Attr(\"seed2: int = 0\")",
          "82:     .Attr(\"is_training: bool = true\")",
          "83:     .SetShapeFn([](InferenceContext* c) {",
          "84:       auto input_shape = c->input(0);",
          "85:       auto input_h_shape = c->input(1);",
          "86:       auto seq_length = c->Dim(input_shape, 0);",
          "87:       auto batch_size = c->Dim(input_shape, 1);",
          "88:       auto num_units = c->Dim(input_h_shape, 2);",
          "89:       string direction;",
          "90:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "91:       string rnn_mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:       ShapeHandle unused;",
          "87:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "88:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "89:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     .Attr(\"seed2: int = 0\")",
          "125:     .Attr(\"is_training: bool = true\")",
          "126:     .SetShapeFn([](InferenceContext* c) {",
          "127:       auto input_shape = c->input(0);",
          "128:       auto input_h_shape = c->input(1);",
          "129:       auto seq_length = c->Dim(input_shape, 0);",
          "130:       auto batch_size = c->Dim(input_shape, 1);",
          "131:       auto num_units = c->Dim(input_h_shape, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:       ShapeHandle unused;",
          "136:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "137:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "138:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     .Attr(\"is_training: bool = true\")",
          "172:     .Attr(\"time_major: bool = true\")",
          "173:     .SetShapeFn([](InferenceContext* c) {",
          "174:       auto input_shape = c->input(0);",
          "175:       auto input_h_shape = c->input(1);",
          "176:       auto input_c_shape = c->input(2);",
          "177:       auto max_seq_length = c->Dim(input_shape, 0);",
          "178:       auto batch_size = c->Dim(input_shape, 1);",
          "179:       auto num_units = c->Dim(input_h_shape, 2);",
          "180:       string direction;",
          "181:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "182:       string rnn_mode;",
          "183:       TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));",
          "184:       int dir_count = (direction == \"bidirectional\") ? 2 : 1;",
          "185:       DimensionHandle output_size;",
          "186:       TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:       ShapeHandle unused;",
          "189:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "190:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "191:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "192:       TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));",
          "202:       if (rnn_mode == \"lstm\") {",
          "203:         TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));",
          "204:       }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops_test.cc -> tensorflow/core/ops/cudnn_rnn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                    .Attr(\"direction\", \"unidirectional\")",
          "69:                    .Finalize(&op.node_def));",
          "70:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "71: }",
          "73: TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "72:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "75:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:                    .Attr(\"direction\", \"unidirectional\")",
          "101:                    .Finalize(&op.node_def));",
          "102:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "103: }",
          "105: TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "109:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "112:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                    .Attr(\"direction\", \"unidirectional\")",
          "138:                    .Finalize(&op.node_def));",
          "139:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "140: }",
          "142: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");",
          "151:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");",
          "152:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");",
          "153:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");",
          "154:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");",
          "155: }",
          "157: TEST(CudnnRNNOpsTest, ForwardV3Gru) {",
          "158:   int max_seq_length = 2;",
          "159:   int batch_size = 3;",
          "160:   int num_units = 4;",
          "161:   int num_layers = 5;",
          "162:   int dir_count = 1;",
          "163:   std::vector<int> input_shape = {max_seq_length, batch_size, num_units};",
          "164:   std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,",
          "165:                                     num_units};",
          "166:   std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,",
          "167:                                     num_units};",
          "168:   std::vector<int> output_shape = {max_seq_length, batch_size,",
          "169:                                    num_units * dir_count};",
          "170:   std::vector<int> seq_lengths_shape = {batch_size};",
          "171:   auto shape_to_str = [](const std::vector<int>& v) {",
          "172:     return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");",
          "173:   };",
          "174:   string input_shapes_desc = strings::StrCat(",
          "175:       shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",",
          "176:       shape_to_str(input_c_shape), \";\", \"[?]\", \";\",",
          "177:       shape_to_str(seq_lengths_shape));",
          "178:   string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";",
          "180:   ShapeInferenceTestOp op(\"CudnnRNNV3\");",
          "181:   TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")",
          "182:                    .Input({\"input\", 0, DT_FLOAT})",
          "183:                    .Input({\"input_h\", 0, DT_FLOAT})",
          "184:                    .Input({\"input_c\", 0, DT_FLOAT})",
          "185:                    .Input({\"params\", 0, DT_FLOAT})",
          "186:                    .Input({\"sequence_lengths\", 0, DT_INT32})",
          "187:                    .Attr(\"rnn_mode\", \"gru\")",
          "188:                    .Attr(\"input_mode\", \"auto_select\")",
          "189:                    .Attr(\"direction\", \"unidirectional\")",
          "190:                    .Finalize(&op.node_def));",
          "191:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "192:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");",
          "193:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");",
          "194:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");",
          "195:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3e3694a902ce4eddc20dfb282c016b73fac1528",
      "candidate_info": {
        "commit_hash": "c3e3694a902ce4eddc20dfb282c016b73fac1528",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c3e3694a902ce4eddc20dfb282c016b73fac1528",
        "files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ],
        "message": "Fix access to undefined memory during shape inference of Cudnn*.\n\nPiperOrigin-RevId: 400324259\nChange-Id: Ie3b7859d19ae24ee9ac2adf413bdc1e851bbc604",
        "before_after_code_files": [
          "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
          "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc",
            "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/cudnn_rnn_ops.cc||tensorflow/core/ops/cudnn_rnn_ops.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops.cc -> tensorflow/core/ops/cudnn_rnn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     .Attr(\"seed2: int = 0\")",
          "82:     .Attr(\"is_training: bool = true\")",
          "83:     .SetShapeFn([](InferenceContext* c) {",
          "84:       auto input_shape = c->input(0);",
          "85:       auto input_h_shape = c->input(1);",
          "86:       auto seq_length = c->Dim(input_shape, 0);",
          "87:       auto batch_size = c->Dim(input_shape, 1);",
          "88:       auto num_units = c->Dim(input_h_shape, 2);",
          "89:       string direction;",
          "90:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "91:       string rnn_mode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:       ShapeHandle unused;",
          "87:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "88:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "89:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     .Attr(\"seed2: int = 0\")",
          "125:     .Attr(\"is_training: bool = true\")",
          "126:     .SetShapeFn([](InferenceContext* c) {",
          "127:       auto input_shape = c->input(0);",
          "128:       auto input_h_shape = c->input(1);",
          "129:       auto seq_length = c->Dim(input_shape, 0);",
          "130:       auto batch_size = c->Dim(input_shape, 1);",
          "131:       auto num_units = c->Dim(input_h_shape, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:       ShapeHandle unused;",
          "136:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "137:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "138:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     .Attr(\"is_training: bool = true\")",
          "172:     .Attr(\"time_major: bool = true\")",
          "173:     .SetShapeFn([](InferenceContext* c) {",
          "174:       auto input_shape = c->input(0);",
          "175:       auto input_h_shape = c->input(1);",
          "176:       auto input_c_shape = c->input(2);",
          "177:       auto max_seq_length = c->Dim(input_shape, 0);",
          "178:       auto batch_size = c->Dim(input_shape, 1);",
          "179:       auto num_units = c->Dim(input_h_shape, 2);",
          "180:       string direction;",
          "181:       TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));",
          "182:       string rnn_mode;",
          "183:       TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));",
          "184:       int dir_count = (direction == \"bidirectional\") ? 2 : 1;",
          "185:       DimensionHandle output_size;",
          "186:       TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:       ShapeHandle unused;",
          "189:       TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));",
          "190:       TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));",
          "191:       TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));",
          "192:       TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));",
          "202:       if (rnn_mode == \"lstm\") {",
          "203:         TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));",
          "204:       }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/cudnn_rnn_ops_test.cc||tensorflow/core/ops/cudnn_rnn_ops_test.cc": [
          "File: tensorflow/core/ops/cudnn_rnn_ops_test.cc -> tensorflow/core/ops/cudnn_rnn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                    .Attr(\"direction\", \"unidirectional\")",
          "69:                    .Finalize(&op.node_def));",
          "70:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "71: }",
          "73: TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "72:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "75:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:                    .Attr(\"direction\", \"unidirectional\")",
          "101:                    .Finalize(&op.node_def));",
          "102:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "103: }",
          "105: TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");",
          "109:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");",
          "112:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                    .Attr(\"direction\", \"unidirectional\")",
          "138:                    .Finalize(&op.node_def));",
          "139:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "140: }",
          "142: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");",
          "151:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");",
          "152:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");",
          "153:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");",
          "154:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");",
          "155: }",
          "157: TEST(CudnnRNNOpsTest, ForwardV3Gru) {",
          "158:   int max_seq_length = 2;",
          "159:   int batch_size = 3;",
          "160:   int num_units = 4;",
          "161:   int num_layers = 5;",
          "162:   int dir_count = 1;",
          "163:   std::vector<int> input_shape = {max_seq_length, batch_size, num_units};",
          "164:   std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,",
          "165:                                     num_units};",
          "166:   std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,",
          "167:                                     num_units};",
          "168:   std::vector<int> output_shape = {max_seq_length, batch_size,",
          "169:                                    num_units * dir_count};",
          "170:   std::vector<int> seq_lengths_shape = {batch_size};",
          "171:   auto shape_to_str = [](const std::vector<int>& v) {",
          "172:     return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");",
          "173:   };",
          "174:   string input_shapes_desc = strings::StrCat(",
          "175:       shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",",
          "176:       shape_to_str(input_c_shape), \";\", \"[?]\", \";\",",
          "177:       shape_to_str(seq_lengths_shape));",
          "178:   string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";",
          "180:   ShapeInferenceTestOp op(\"CudnnRNNV3\");",
          "181:   TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")",
          "182:                    .Input({\"input\", 0, DT_FLOAT})",
          "183:                    .Input({\"input_h\", 0, DT_FLOAT})",
          "184:                    .Input({\"input_c\", 0, DT_FLOAT})",
          "185:                    .Input({\"params\", 0, DT_FLOAT})",
          "186:                    .Input({\"sequence_lengths\", 0, DT_INT32})",
          "187:                    .Attr(\"rnn_mode\", \"gru\")",
          "188:                    .Attr(\"input_mode\", \"auto_select\")",
          "189:                    .Attr(\"direction\", \"unidirectional\")",
          "190:                    .Finalize(&op.node_def));",
          "191:   INFER_OK(op, input_shapes_desc, output_shapes_desc);",
          "192:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");",
          "193:   INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");",
          "194:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");",
          "195:   INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}