{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ac9a5e7cf9d720c35a13d52e12d0c50ce2d2f14",
      "candidate_info": {
        "commit_hash": "2ac9a5e7cf9d720c35a13d52e12d0c50ce2d2f14",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ac9a5e7cf9d720c35a13d52e12d0c50ce2d2f14",
        "files": [
          "CHANGES",
          "crypto/o_time.c"
        ],
        "message": "Code cleanup: remove the VMS specific reimplementation of gmtime\n\nThis reimplementation was necessary before VMS C V7.1.  Since that's\nthe minimum version we support in this OpenSSL version, the\nreimplementation is no longer needed.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2762)\n(cherry picked from commit 9d70ac97d9d8720e6ed280609c844da403b80440)",
        "before_after_code_files": [
          "crypto/o_time.c||crypto/o_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_time.c||crypto/o_time.c": [
          "File: crypto/o_time.c -> crypto/o_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <string.h>",
          "12: #include <openssl/crypto.h>",
          "50: struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result)",
          "51: {",
          "52:     struct tm *ts = NULL;",
          "55:     if (gmtime_r(timer, result) == NULL)",
          "56:         return NULL;",
          "57:     ts = result;",
          "59:     ts = gmtime(timer);",
          "60:     if (ts == NULL)",
          "61:         return NULL;",
          "63:     memcpy(result, ts, sizeof(struct tm));",
          "64:     ts = result;",
          "215: #endif",
          "216:     return ts;",
          "217: }",
          "",
          "[Removed Lines]",
          "14: #ifdef OPENSSL_SYS_VMS",
          "15: # if __CRTL_VER >= 70000000 && \\",
          "16:      (defined _POSIX_C_SOURCE || !defined _ANSI_C_SOURCE)",
          "17: #  define VMS_GMTIME_OK",
          "18: # endif",
          "19: # ifndef VMS_GMTIME_OK",
          "20: #  include <libdtdef.h>",
          "21: #  include <lib$routines.h>",
          "22: #  include <lnmdef.h>",
          "23: #  include <starlet.h>",
          "24: #  include <descrip.h>",
          "25: #  include <stdlib.h>",
          "33: # define __NEW_STARLET 1",
          "35: # if (defined(__alpha) || defined(__ia64))",
          "36: #  include <iledef.h>",
          "37: # else",
          "41: #  pragma __nomember_alignment",
          "46: } ILE3;",
          "54: #if defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && (!defined(OPENSSL_SYS_VMS) || defined(gmtime_r)) && !defined(OPENSSL_SYS_MACOSX)",
          "58: #elif !defined(OPENSSL_SYS_VMS) || defined(VMS_GMTIME_OK)",
          "65: #endif",
          "66: #if defined( OPENSSL_SYS_VMS) && !defined( VMS_GMTIME_OK)",
          "67:     if (ts == NULL) {",
          "68:         static $DESCRIPTOR(tabnam, \"LNM$DCL_LOGICAL\");",
          "69:         static $DESCRIPTOR(lognam, \"SYS$TIMEZONE_DIFFERENTIAL\");",
          "70:         char logvalue[256];",
          "71:         unsigned int reslen = 0;",
          "72: # if __INITIAL_POINTER_SIZE == 64",
          "73:         ILEB_64 itemlist[2], *pitem;",
          "74: # else",
          "75:         ILE3 itemlist[2], *pitem;",
          "76: # endif",
          "77:         int status;",
          "78:         time_t t;",
          "84:         pitem = itemlist;",
          "86: # if __INITIAL_POINTER_SIZE == 64",
          "87:         pitem->ileb_64$w_mbo = 1;",
          "88:         pitem->ileb_64$w_code = LNM$_STRING;",
          "89:         pitem->ileb_64$l_mbmo = -1;",
          "90:         pitem->ileb_64$q_length = sizeof (logvalue);",
          "91:         pitem->ileb_64$pq_bufaddr = logvalue;",
          "92:         pitem->ileb_64$pq_retlen_addr = (unsigned __int64 *) &reslen;",
          "93:         pitem++;",
          "95:         pitem->ileb_64$q_length = pitem->ileb_64$w_code = 0;",
          "96: # else",
          "97:         pitem->ile3$w_length = sizeof (logvalue);",
          "98:         pitem->ile3$w_code = LNM$_STRING;",
          "99:         pitem->ile3$ps_bufaddr = logvalue;",
          "100:         pitem->ile3$ps_retlen_addr = (unsigned short int *) &reslen;",
          "101:         pitem++;",
          "103:         pitem->ile3$w_length = pitem->ile3$w_code = 0;",
          "104: # endif",
          "108:         status = sys$trnlnm(0, &tabnam, &lognam, 0, itemlist);",
          "109:         if (!(status & 1))",
          "110:             return NULL;",
          "111:         logvalue[reslen] = '\\0';",
          "113:         t = *timer;",
          "127: # if __CRTL_VER < 70000000 || defined _VMS_V6_SOURCE",
          "129:         status = atoi(logvalue);",
          "132:         t -= status;",
          "133: # endif",
          "141:         {",
          "144:                if I remember correctly, which is November 17, 1858.",
          "145:                Furthermore, time is measure in tenths of microseconds",
          "146:                and stored in quadwords (64 bit integers).  unix_epoch",
          "147:                below is January 1st 1970 expressed as a VMS time.  The",
          "148:                following code was used to get this number:",
          "150:                #include <stdio.h>",
          "151:                #include <stdlib.h>",
          "152:                #include <lib$routines.h>",
          "153:                #include <starlet.h>",
          "155:                main()",
          "156:                {",
          "157:                  unsigned long systime[2];",
          "158:                  unsigned short epoch_values[7] =",
          "159:                    { 1970, 1, 1, 0, 0, 0, 0 };",
          "161:                  lib$cvt_vectim(epoch_values, systime);",
          "163:                  printf(\"%u %u\", systime[0], systime[1]);",
          "164:                }",
          "166:             unsigned long unix_epoch[2] = { 1273708544, 8164711 };",
          "167:             unsigned long deltatime[2];",
          "168:             unsigned long systime[2];",
          "169:             struct vms_vectime {",
          "170:                 short year, month, day, hour, minute, second, centi_second;",
          "171:             } time_values;",
          "172:             long operation;",
          "180:             operation = LIB$K_DELTA_SECONDS;",
          "181:             status = lib$cvt_to_internal_time(&operation, &t, deltatime);",
          "187:             status = lib$add_times(unix_epoch, deltatime, systime);",
          "190:             status = sys$numtim(&time_values, systime);",
          "193:             result->tm_sec = time_values.second;",
          "194:             result->tm_min = time_values.minute;",
          "195:             result->tm_hour = time_values.hour;",
          "196:             result->tm_mday = time_values.day;",
          "197:             result->tm_mon = time_values.month - 1;",
          "198:             result->tm_year = time_values.year - 1900;",
          "200:             operation = LIB$K_DAY_OF_WEEK;",
          "201:             status = lib$cvt_from_internal_time(&operation,",
          "202:                                                 &result->tm_wday, systime);",
          "203:             result->tm_wday %= 7;",
          "205:             operation = LIB$K_DAY_OF_YEAR;",
          "206:             status = lib$cvt_from_internal_time(&operation,",
          "207:                                                 &result->tm_yday, systime);",
          "208:             result->tm_yday--;",
          "212:             ts = result;",
          "213:         }",
          "214:     }",
          "",
          "[Added Lines]",
          "18: #if defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && !defined(OPENSSL_SYS_MACOSX)",
          "22: #else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c74be80027e30201e176f3fa7ace64e5e8ad4691",
      "candidate_info": {
        "commit_hash": "c74be80027e30201e176f3fa7ace64e5e8ad4691",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c74be80027e30201e176f3fa7ace64e5e8ad4691",
        "files": [
          "crypto/asn1/x_long.c"
        ],
        "message": "asn1/x_long.c: remove conditions in inner loops and dependency on BN.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3152)\n\n(cherry picked from commit e128f891de71bbdba8391355af8d6d47d20b1969)",
        "before_after_code_files": [
          "crypto/asn1/x_long.c||crypto/asn1/x_long.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/x_long.c||crypto/asn1/x_long.c": [
          "File: crypto/asn1/x_long.c -> crypto/asn1/x_long.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdio.h>",
          "11: #include \"internal/cryptlib.h\"",
          "12: #include <openssl/asn1t.h>",
          "",
          "[Removed Lines]",
          "13: #include <openssl/bn.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: }",
          "59: static int long_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,",
          "60:                     const ASN1_ITEM *it)",
          "61: {",
          "62:     long ltmp;",
          "64:     int clen, pad, i;",
          "66:     char *cp = (char *)pval;",
          "",
          "[Removed Lines]",
          "63:     unsigned long utmp;",
          "",
          "[Added Lines]",
          "64: static int num_bits_ulong(unsigned long value)",
          "65: {",
          "66:     size_t i;",
          "67:     unsigned long ret = 0;",
          "75:     for (i = 0; i < sizeof(value) * 8; i++) {",
          "76:         ret += (value != 0);",
          "77:         value >>= 1;",
          "78:     }",
          "80:     return (int)ret;",
          "81: }",
          "87:     unsigned long utmp, sign;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         utmp = 0 - (unsigned long)ltmp - 1;",
          "81:         utmp = ltmp;",
          "84:     if (!(clen & 0x7))",
          "85:         pad = 1;",
          "",
          "[Removed Lines]",
          "78:     if (ltmp < 0)",
          "80:     else",
          "82:     clen = BN_num_bits_word(utmp);",
          "",
          "[Added Lines]",
          "102:     if (ltmp < 0) {",
          "103:         sign = 0xff;",
          "105:     } else {",
          "106:         sign = 0;",
          "108:     }",
          "109:     clen = num_bits_ulong(utmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     clen = (clen + 7) >> 3;",
          "93:         if (pad)",
          "95:         for (i = clen - 1; i >= 0; i--) {",
          "99:             utmp >>= 8;",
          "100:         }",
          "101:     }",
          "",
          "[Removed Lines]",
          "92:     if (cont) {",
          "96:             cont[i] = (unsigned char)(utmp & 0xff);",
          "97:             if (ltmp < 0)",
          "98:                 cont[i] ^= 0xff;",
          "",
          "[Added Lines]",
          "119:     if (cont != NULL) {",
          "123:             cont[i] = (unsigned char)(utmp ^ sign);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105: static int long_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,",
          "106:                     int utype, char *free_cont, const ASN1_ITEM *it)",
          "107: {",
          "109:     long ltmp;",
          "111:     char *cp = (char *)pval;",
          "113:     if (len > 1) {",
          "",
          "[Removed Lines]",
          "108:     int neg = -1, i;",
          "110:     unsigned long utmp = 0;",
          "",
          "[Added Lines]",
          "133:     int i;",
          "135:     unsigned long utmp = 0, sign = 0x100;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:         case 0xff:",
          "121:             cont++;",
          "122:             len--;",
          "124:             break;",
          "125:         case 0:",
          "126:             cont++;",
          "127:             len--;",
          "129:             break;",
          "130:         }",
          "131:     }",
          "",
          "[Removed Lines]",
          "123:             neg = 0x80;",
          "128:             neg = 0;",
          "",
          "[Added Lines]",
          "148:             sign = 0xff;",
          "153:             sign = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:         ASN1err(ASN1_F_LONG_C2I, ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);",
          "134:         return 0;",
          "135:     }",
          "138:         if (len && (cont[0] & 0x80))",
          "140:         else",
          "143:         ASN1err(ASN1_F_LONG_C2I, ASN1_R_ILLEGAL_PADDING);",
          "144:         return 0;",
          "145:     }",
          "146:     utmp = 0;",
          "147:     for (i = 0; i < len; i++) {",
          "148:         utmp <<= 8;",
          "153:     }",
          "154:     ltmp = (long)utmp;",
          "155:     if (ltmp < 0) {",
          "156:         ASN1err(ASN1_F_LONG_C2I, ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);",
          "157:         return 0;",
          "158:     }",
          "163:     if (ltmp == it->size) {",
          "164:         ASN1err(ASN1_F_LONG_C2I, ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);",
          "165:         return 0;",
          "",
          "[Removed Lines]",
          "136:     if (neg == -1) {",
          "139:             neg = 1;",
          "141:             neg = 0;",
          "142:     } else if (neg == (cont[0] & 0x80)) {",
          "149:         if (neg)",
          "150:             utmp |= cont[i] ^ 0xff;",
          "151:         else",
          "152:             utmp |= cont[i];",
          "159:     if (neg) {",
          "160:         ltmp = -ltmp;",
          "161:         ltmp--;",
          "162:     }",
          "",
          "[Added Lines]",
          "162:     if (sign == 0x100) {",
          "165:             sign = 0xff;",
          "167:             sign = 0;",
          "175:         utmp |= cont[i] ^ sign;",
          "182:     if (sign)",
          "183:         ltmp = -ltmp - 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "177b4225baac56336e04fd97d0c993fd45d3e45e",
      "candidate_info": {
        "commit_hash": "177b4225baac56336e04fd97d0c993fd45d3e45e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/177b4225baac56336e04fd97d0c993fd45d3e45e",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Use TLSEXT_KEYNAME_LENGTH in tls_decrypt_ticket.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2618)\n(cherry picked from commit 57b0d651f052ed86528da916397acbcce035fb21)",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3151:     }",
          "3156:     sdec = OPENSSL_malloc(eticklen);",
          "3157:     if (sdec == NULL || EVP_DecryptUpdate(ctx, sdec, &slen, p, eticklen) <= 0) {",
          "3158:         EVP_CIPHER_CTX_free(ctx);",
          "",
          "[Removed Lines]",
          "3154:     p = etick + 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "3155:     eticklen -= 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "",
          "[Added Lines]",
          "3154:     p = etick + TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx);",
          "3155:     eticklen -= TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0a05a39bddee66b39928124dff806e2a80d4752",
      "candidate_info": {
        "commit_hash": "b0a05a39bddee66b39928124dff806e2a80d4752",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b0a05a39bddee66b39928124dff806e2a80d4752",
        "files": [
          "crypto/asn1/x_int64.c"
        ],
        "message": "ASN.1: change INTxx, UINTxx and Z variants to be embedable\n\nFixes #3191\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3200)",
        "before_after_code_files": [
          "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/x_int64.c||crypto/asn1/x_int64.c": [
          "File: crypto/asn1/x_int64.c -> crypto/asn1/x_int64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static int uint64_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "30: {",
          "32:     return 1;",
          "33: }",
          "35: static void uint64_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "36: {",
          "38: }",
          "40: static int uint64_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     if (*pval == NULL)",
          "33:         return 0;",
          "39:     OPENSSL_free(*pval);",
          "41: }",
          "43: static void uint64_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "44: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     uint64_t utmp;",
          "44:     int neg = 0;",
          "49:     memcpy(&utmp, cp, sizeof(utmp));",
          "",
          "[Removed Lines]",
          "46:     char *cp = (char *)pval;",
          "",
          "[Added Lines]",
          "54:     char *cp = (char *)*pval;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:                     int utype, char *free_cont, const ASN1_ITEM *it)",
          "66: {",
          "67:     uint64_t utmp = 0;",
          "69:     int neg = 0;",
          "71:     if (!c2i_uint64_int(&utmp, &neg, &cont, len))",
          "72:         return 0;",
          "73:     if ((it->size & INTxx_FLAG_SIGNED) == 0 && neg) {",
          "",
          "[Removed Lines]",
          "68:     char *cp = (char *)pval;",
          "",
          "[Added Lines]",
          "76:     char *cp;",
          "79:     if (*pval == NULL && !uint64_new(pval, it))",
          "80:         return 0;",
          "82:     cp = (char *)*pval;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:                         int indent, const ASN1_PCTX *pctx)",
          "91: {",
          "92:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED)",
          "95: }",
          "99: static int uint32_new(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "100: {",
          "102:     return 1;",
          "103: }",
          "105: static void uint32_free(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "106: {",
          "108: }",
          "110: static int uint32_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,",
          "",
          "[Removed Lines]",
          "93:         return BIO_printf(out, \"%\"BIO_PRI64\"d\\n\", *(int64_t *)pval);",
          "94:     return BIO_printf(out, \"%\"BIO_PRI64\"u\\n\", *(uint64_t *)pval);",
          "",
          "[Added Lines]",
          "105:         return BIO_printf(out, \"%\"BIO_PRI64\"d\\n\", **(int64_t **)pval);",
          "106:     return BIO_printf(out, \"%\"BIO_PRI64\"u\\n\", **(uint64_t **)pval);",
          "114:     if (*pval == NULL)",
          "115:         return 0;",
          "121:     OPENSSL_free(*pval);",
          "123: }",
          "125: static void uint32_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)",
          "126: {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:     uint32_t utmp;",
          "114:     int neg = 0;",
          "119:     memcpy(&utmp, cp, sizeof(utmp));",
          "",
          "[Removed Lines]",
          "116:     char *cp = (char *)pval;",
          "",
          "[Added Lines]",
          "136:     char *cp = (char *)*pval;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143: {",
          "144:     uint64_t utmp = 0;",
          "145:     uint32_t utmp2 = 0;",
          "147:     int neg = 0;",
          "149:     if (!c2i_uint64_int(&utmp, &neg, &cont, len))",
          "150:         return 0;",
          "151:     if ((it->size & INTxx_FLAG_SIGNED) == 0 && neg) {",
          "",
          "[Removed Lines]",
          "146:     char *cp = (char *)pval;",
          "",
          "[Added Lines]",
          "166:     char *cp;",
          "169:     if (*pval == NULL && !uint64_new(pval, it))",
          "170:         return 0;",
          "172:     cp = (char *)*pval;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "174:                         int indent, const ASN1_PCTX *pctx)",
          "175: {",
          "176:     if ((it->size & INTxx_FLAG_SIGNED) == INTxx_FLAG_SIGNED)",
          "179: }",
          "",
          "[Removed Lines]",
          "177:         return BIO_printf(out, \"%d\\n\", *(int32_t *)pval);",
          "178:     return BIO_printf(out, \"%u\\n\", *(uint32_t *)pval);",
          "",
          "[Added Lines]",
          "201:         return BIO_printf(out, \"%d\\n\", **(int32_t **)pval);",
          "202:     return BIO_printf(out, \"%u\\n\", **(uint32_t **)pval);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "185:     NULL, 0,",
          "186:     uint32_new,",
          "187:     uint32_free,",
          "189:     uint32_c2i,",
          "190:     uint32_i2c,",
          "191:     uint32_print",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     uint32_clear,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:     NULL, 0,",
          "196:     uint64_new,",
          "197:     uint64_free,",
          "199:     uint64_c2i,",
          "200:     uint64_i2c,",
          "201:     uint64_print",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     uint64_clear,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e653b6cd74f70c04b0b96b07df00680b427603af",
      "candidate_info": {
        "commit_hash": "e653b6cd74f70c04b0b96b07df00680b427603af",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e653b6cd74f70c04b0b96b07df00680b427603af",
        "files": [
          "crypto/rsa/rsa_pss.c"
        ],
        "message": "Fix a crash or unbounded allocation in RSA_padding_add_PKCS1_PSS_mgf1 and RSA_verify_PKCS1_PSS_mgf1 with 512-bit RSA vs. sha-512.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2881)",
        "before_after_code_files": [
          "crypto/rsrsa_pss.c||crypto/rsa/rsa_pss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_pss.c||crypto/rsa/rsa_pss.c": [
          "File: crypto/rsrsa_pss.c -> crypto/rsa/rsa_pss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     if (emLen < hLen + 2) {",
          "80:         RSAerr(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1, RSA_R_DATA_TOO_LARGE);",
          "81:         goto err;",
          "82:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     if (emLen < hLen + 2) {",
          "183:         RSAerr(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1,",
          "184:                RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);",
          "185:         goto err;",
          "186:     }",
          "189:     } else if (sLen > emLen - hLen - 2) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}