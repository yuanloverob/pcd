{
  "cve_id": "CVE-2018-7492",
  "cve_desc": "A NULL pointer dereference was found in the net/rds/rdma.c __rds_rdma_map() function in the Linux kernel before 4.14.7 allowing local attackers to cause a system panic and a denial-of-service, related to RDS_GET_MR and RDS_GET_MR_FOR_DEST.",
  "repo": "torvalds/linux",
  "patch_hash": "f3069c6d33f6ae63a1668737bc78aaaa51bff7ca",
  "patch_info": {
    "commit_hash": "f3069c6d33f6ae63a1668737bc78aaaa51bff7ca",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f3069c6d33f6ae63a1668737bc78aaaa51bff7ca",
    "files": [
      "net/rds/rdma.c"
    ],
    "message": "rds: Fix NULL pointer dereference in __rds_rdma_map\n\nThis is a fix for syzkaller719569, where memory registration was\nattempted without any underlying transport being loaded.\n\nAnalysis of the case reveals that it is the setsockopt() RDS_GET_MR\n(2) and RDS_GET_MR_FOR_DEST (7) that are vulnerable.\n\nHere is an example stack trace when the bug is hit:\n\nBUG: unable to handle kernel NULL pointer dereference at 00000000000000c0\nIP: __rds_rdma_map+0x36/0x440 [rds]\nPGD 2f93d03067 P4D 2f93d03067 PUD 2f93d02067 PMD 0\nOops: 0000 [#1] SMP\nModules linked in: bridge stp llc tun rpcsec_gss_krb5 nfsv4\ndns_resolver nfs fscache rds binfmt_misc sb_edac intel_powerclamp\ncoretemp kvm_intel kvm irqbypass crct10dif_pclmul c rc32_pclmul\nghash_clmulni_intel pcbc aesni_intel crypto_simd glue_helper cryptd\niTCO_wdt mei_me sg iTCO_vendor_support ipmi_si mei ipmi_devintf nfsd\nshpchp pcspkr i2c_i801 ioatd ma ipmi_msghandler wmi lpc_ich mfd_core\nauth_rpcgss nfs_acl lockd grace sunrpc ip_tables ext4 mbcache jbd2\nmgag200 i2c_algo_bit drm_kms_helper ixgbe syscopyarea ahci sysfillrect\nsysimgblt libahci mdio fb_sys_fops ttm ptp libata sd_mod mlx4_core drm\ncrc32c_intel pps_core megaraid_sas i2c_core dca dm_mirror\ndm_region_hash dm_log dm_mod\nCPU: 48 PID: 45787 Comm: repro_set2 Not tainted 4.14.2-3.el7uek.x86_64 #2\nHardware name: Oracle Corporation ORACLE SERVER X5-2L/ASM,MOBO TRAY,2U, BIOS 31110000 03/03/2017\ntask: ffff882f9190db00 task.stack: ffffc9002b994000\nRIP: 0010:__rds_rdma_map+0x36/0x440 [rds]\nRSP: 0018:ffffc9002b997df0 EFLAGS: 00010202\nRAX: 0000000000000000 RBX: ffff882fa2182580 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffffc9002b997e40 RDI: ffff882fa2182580\nRBP: ffffc9002b997e30 R08: 0000000000000000 R09: 0000000000000002\nR10: ffff885fb29e3838 R11: 0000000000000000 R12: ffff882fa2182580\nR13: ffff882fa2182580 R14: 0000000000000002 R15: 0000000020000ffc\nFS:  00007fbffa20b700(0000) GS:ffff882fbfb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000000000c0 CR3: 0000002f98a66006 CR4: 00000000001606e0\nCall Trace:\n rds_get_mr+0x56/0x80 [rds]\n rds_setsockopt+0x172/0x340 [rds]\n ? __fget_light+0x25/0x60\n ? __fdget+0x13/0x20\n SyS_setsockopt+0x80/0xe0\n do_syscall_64+0x67/0x1b0\n entry_SYSCALL64_slow_path+0x25/0x25\nRIP: 0033:0x7fbff9b117f9\nRSP: 002b:00007fbffa20aed8 EFLAGS: 00000293 ORIG_RAX: 0000000000000036\nRAX: ffffffffffffffda RBX: 00000000000c84a4 RCX: 00007fbff9b117f9\nRDX: 0000000000000002 RSI: 0000400000000114 RDI: 000000000000109b\nRBP: 00007fbffa20af10 R08: 0000000000000020 R09: 00007fbff9dd7860\nR10: 0000000020000ffc R11: 0000000000000293 R12: 0000000000000000\nR13: 00007fbffa20b9c0 R14: 00007fbffa20b700 R15: 0000000000000021\n\nCode: 41 56 41 55 49 89 fd 41 54 53 48 83 ec 18 8b 87 f0 02 00 00 48\n89 55 d0 48 89 4d c8 85 c0 0f 84 2d 03 00 00 48 8b 87 00 03 00 00 <48>\n83 b8 c0 00 00 00 00 0f 84 25 03 00 0 0 48 8b 06 48 8b 56 08\n\nThe fix is to check the existence of an underlying transport in\n__rds_rdma_map().\n\nSigned-off-by: H\u00e5kon Bugge <haakon.bugge@oracle.com>\nReported-by: syzbot <syzkaller@googlegroups.com>\nAcked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/rds/rdma.c||net/rds/rdma.c"
    ]
  },
  "patch_diff": {
    "net/rds/rdma.c||net/rds/rdma.c": [
      "File: net/rds/rdma.c -> net/rds/rdma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "183:  long i;",
      "184:  int ret;",
      "188:   goto out;",
      "189:  }",
      "",
      "[Removed Lines]",
      "186:  if (rs->rs_bound_addr == 0) {",
      "",
      "[Added Lines]",
      "186:  if (rs->rs_bound_addr == 0 || !rs->rs_transport) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "588fb54b0cc5be5fd2e12bb04810534ffc3d49cc",
      "candidate_info": {
        "commit_hash": "588fb54b0cc5be5fd2e12bb04810534ffc3d49cc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/588fb54b0cc5be5fd2e12bb04810534ffc3d49cc",
        "files": [
          "drivers/clk/clk.c"
        ],
        "message": "clk: Manage proper runtime PM state in clk_change_rate()\n\nclk_change_rate() propagates rate change down to all its children. Such\noperation requires managing proper runtime PM state of each child, what\nwas missing. Add needed calls to clk_pm_runtime*() to ensure that\nset_rate() clock callback is called on runtime active clock.\n\nThis fixes following issue found on Exynos5433 TM2 board with devfreq\nenabled:\n\nSynchronous External Abort: synchronous external abort (0x96000210) at 0xffffff80093f5600\nInternal error: : 96000210 [#1] PREEMPT SMP\nModules linked in:\nCPU: 0 PID: 5 Comm: kworker/u16:0 Not tainted 4.15.0-rc1-next-20171129+ #4\nHardware name: Samsung TM2 board (DT)\nWorkqueue: devfreq_wq devfreq_monitor\ntask: ffffffc0ca96b600 task.stack: ffffff80093a8000\npstate: a0000085 (NzCv daIf -PAN -UAO)\npc : clk_divider_set_rate+0x54/0x118\nlr : clk_divider_set_rate+0x44/0x118\n...\nProcess kworker/u16:0 (pid: 5, stack limit = 0xffffff80093a8000)\nCall trace:\n clk_divider_set_rate+0x54/0x118\n clk_change_rate+0xfc/0x4e0\n clk_change_rate+0x1f0/0x4e0\n clk_change_rate+0x1f0/0x4e0\n clk_change_rate+0x1f0/0x4e0\n clk_core_set_rate_nolock+0x138/0x148\n clk_set_rate+0x28/0x50\n exynos_bus_passive_target+0x6c/0x11c\n update_devfreq_passive+0x58/0xb4\n devfreq_passive_notifier_call+0x50/0x5c\n notifier_call_chain+0x4c/0x88\n __srcu_notifier_call_chain+0x54/0x80\n srcu_notifier_call_chain+0x14/0x1c\n update_devfreq+0x100/0x1b4\n devfreq_monitor+0x2c/0x88\n process_one_work+0x148/0x3d8\n worker_thread+0x13c/0x3f8\n kthread+0x100/0x12c\n ret_from_fork+0x10/0x18\n\nReported-by: Chanwoo Choi <cw00.choi@samsung.com>\nFixes: 9a34b45397e5 (\"clk: Add support for runtime PM\")\nSigned-off-by: Marek Szyprowski <m.szyprowski@samsung.com>\nReviewed-by: Ulf Hansson <ulf.hansson@linaro.org>\nTested-by: Chanwoo Choi <cw00.choi@samsung.com>\nReviewed-by: Chanwoo Choi <cw00.choi@samsung.com>\nSigned-off-by: Stephen Boyd <sboyd@codeaurora.org>",
        "before_after_code_files": [
          "drivers/clk/clk.c||drivers/clk/clk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/clk/clk.c||drivers/clk/clk.c": [
          "File: drivers/clk/clk.c -> drivers/clk/clk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:   best_parent_rate = core->parent->rate;",
          "1565:  }",
          "1567:  if (core->flags & CLK_SET_RATE_UNGATE) {",
          "1568:   unsigned long flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567:  if (clk_pm_runtime_get(core))",
          "1568:   return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1635:  if (core->new_child)",
          "1636:   clk_change_rate(core->new_child);",
          "1637: }",
          "1639: static int clk_core_set_rate_nolock(struct clk_core *core,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1641:  clk_pm_runtime_put(core);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ecbd7170d6579a1ee389a37bf1f0437ea01a388",
      "candidate_info": {
        "commit_hash": "1ecbd7170d6579a1ee389a37bf1f0437ea01a388",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1ecbd7170d6579a1ee389a37bf1f0437ea01a388",
        "files": [
          "drivers/acpi/cppc_acpi.c"
        ],
        "message": "ACPI / CPPC: Fix KASAN global out of bounds warning\n\nDefault value of pcc_subspace_idx is -1.\nMake sure to check pcc_subspace_idx before using the same as array index.\nThis will avoid following KASAN warnings too.\n\n[   15.113449] ==================================================================\n[   15.116983] BUG: KASAN: global-out-of-bounds in cppc_get_perf_caps+0xf3/0x3b0\n[   15.116983] Read of size 8 at addr ffffffffb9a5c0d8 by task swapper/0/1\n[   15.116983] CPU: 3 PID: 1 Comm: swapper/0 Not tainted 4.15.0-rc2+ #2\n[   15.116983] Hardware name: Dell Inc. OptiPlex 7040/0Y7WYT, BIOS 1.2.8 01/26/2016\n[   15.116983] Call Trace:\n[   15.116983]  dump_stack+0x7c/0xbb\n[   15.116983]  print_address_description+0x1df/0x290\n[   15.116983]  kasan_report+0x28a/0x370\n[   15.116983]  ? cppc_get_perf_caps+0xf3/0x3b0\n[   15.116983]  cppc_get_perf_caps+0xf3/0x3b0\n[   15.116983]  ? cpc_read+0x210/0x210\n[   15.116983]  ? __rdmsr_on_cpu+0x90/0x90\n[   15.116983]  ? rdmsrl_on_cpu+0xa9/0xe0\n[   15.116983]  ? rdmsr_on_cpu+0x100/0x100\n[   15.116983]  ? wrmsrl_on_cpu+0x9c/0xd0\n[   15.116983]  ? wrmsrl_on_cpu+0x9c/0xd0\n[   15.116983]  ? wrmsr_on_cpu+0xe0/0xe0\n[   15.116983]  __intel_pstate_cpu_init.part.16+0x3a2/0x530\n[   15.116983]  ? intel_pstate_init_cpu+0x197/0x390\n[   15.116983]  ? show_no_turbo+0xe0/0xe0\n[   15.116983]  ? __lockdep_init_map+0xa0/0x290\n[   15.116983]  intel_pstate_cpu_init+0x30/0x60\n[   15.116983]  cpufreq_online+0x155/0xac0\n[   15.116983]  cpufreq_add_dev+0x9b/0xb0\n[   15.116983]  subsys_interface_register+0x1ae/0x290\n[   15.116983]  ? bus_unregister_notifier+0x40/0x40\n[   15.116983]  ? mark_held_locks+0x83/0xb0\n[   15.116983]  ? _raw_write_unlock_irqrestore+0x32/0x60\n[   15.116983]  ? intel_pstate_setup+0xc/0x104\n[   15.116983]  ? intel_pstate_setup+0xc/0x104\n[   15.116983]  ? cpufreq_register_driver+0x1ce/0x2b0\n[   15.116983]  cpufreq_register_driver+0x1ce/0x2b0\n[   15.116983]  ? intel_pstate_setup+0x104/0x104\n[   15.116983]  intel_pstate_register_driver+0x3a/0xa0\n[   15.116983]  intel_pstate_init+0x3c4/0x434\n[   15.116983]  ? intel_pstate_setup+0x104/0x104\n[   15.116983]  ? intel_pstate_setup+0x104/0x104\n[   15.116983]  do_one_initcall+0x9c/0x206\n[   15.116983]  ? parameq+0xa0/0xa0\n[   15.116983]  ? initcall_blacklisted+0x150/0x150\n[   15.116983]  ? lock_downgrade+0x2c0/0x2c0\n[   15.116983]  kernel_init_freeable+0x327/0x3f0\n[   15.116983]  ? start_kernel+0x612/0x612\n[   15.116983]  ? _raw_spin_unlock_irq+0x29/0x40\n[   15.116983]  ? finish_task_switch+0xdd/0x320\n[   15.116983]  ? finish_task_switch+0x8e/0x320\n[   15.116983]  ? rest_init+0xd0/0xd0\n[   15.116983]  kernel_init+0xf/0x11a\n[   15.116983]  ? rest_init+0xd0/0xd0\n[   15.116983]  ret_from_fork+0x24/0x30\n\n[   15.116983] The buggy address belongs to the variable:\n[   15.116983]  __key.36299+0x38/0x40\n\n[   15.116983] Memory state around the buggy address:\n[   15.116983]  ffffffffb9a5bf80: fa fa fa fa 00 fa fa fa fa fa fa fa 00 fa fa fa\n[   15.116983]  ffffffffb9a5c000: fa fa fa fa 00 fa fa fa fa fa fa fa 00 fa fa fa\n[   15.116983] >ffffffffb9a5c080: fa fa fa fa 00 fa fa fa fa fa fa fa 00 00 00 00\n[   15.116983]                                                     ^\n[   15.116983]  ffffffffb9a5c100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   15.116983]  ffffffffb9a5c180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   15.116983] ==================================================================\n\nFixes: 85b1407bf6d2 (ACPI / CPPC: Make CPPC ACPI driver aware of PCC subspace IDs)\nReported-by: Changbin Du <changbin.du@intel.com>\nSigned-off-by: George Cherian <george.cherian@cavium.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
        "before_after_code_files": [
          "drivers/acpi/cppc_acpi.c||drivers/acpi/cppc_acpi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/acpi/cppc_acpi.c||drivers/acpi/cppc_acpi.c": [
          "File: drivers/acpi/cppc_acpi.c -> drivers/acpi/cppc_acpi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:  }",
          "953:   vaddr = GET_PCC_VADDR(reg->address, pcc_ss_id);",
          "954:  else if (reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)",
          "955:   vaddr = reg_res->sys_mem_vaddr;",
          "",
          "[Removed Lines]",
          "952:  if (reg->space_id == ACPI_ADR_SPACE_PLATFORM_COMM)",
          "",
          "[Added Lines]",
          "952:  if (reg->space_id == ACPI_ADR_SPACE_PLATFORM_COMM && pcc_ss_id >= 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:  int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpu);",
          "989:  struct cpc_reg *reg = &reg_res->cpc_entry.reg;",
          "992:   vaddr = GET_PCC_VADDR(reg->address, pcc_ss_id);",
          "993:  else if (reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)",
          "994:   vaddr = reg_res->sys_mem_vaddr;",
          "",
          "[Removed Lines]",
          "991:  if (reg->space_id == ACPI_ADR_SPACE_PLATFORM_COMM)",
          "",
          "[Added Lines]",
          "991:  if (reg->space_id == ACPI_ADR_SPACE_PLATFORM_COMM && pcc_ss_id >= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1036:  u64 high, low, nom, min_nonlinear;",
          "1037:  int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpunum);",
          "1039:  int ret = 0, regs_in_pcc = 0;",
          "1042:   pr_debug(\"No CPC descriptor for CPU:%d\\n\", cpunum);",
          "1043:   return -ENODEV;",
          "1044:  }",
          "1046:  highest_reg = &cpc_desc->cpc_regs[HIGHEST_PERF];",
          "1047:  lowest_reg = &cpc_desc->cpc_regs[LOWEST_PERF];",
          "1048:  lowest_non_linear_reg = &cpc_desc->cpc_regs[LOW_NON_LINEAR_PERF];",
          "",
          "[Removed Lines]",
          "1038:  struct cppc_pcc_data *pcc_ss_data = pcc_data[pcc_ss_id];",
          "1041:  if (!cpc_desc) {",
          "",
          "[Added Lines]",
          "1038:  struct cppc_pcc_data *pcc_ss_data;",
          "1041:  if (!cpc_desc || pcc_ss_id < 0) {",
          "1046:  pcc_ss_data = pcc_data[pcc_ss_id];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1095:  struct cpc_register_resource *delivered_reg, *reference_reg,",
          "1097:  int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpunum);",
          "1099:  u64 delivered, reference, ref_perf, ctr_wrap_time;",
          "1100:  int ret = 0, regs_in_pcc = 0;",
          "1103:   pr_debug(\"No CPC descriptor for CPU:%d\\n\", cpunum);",
          "1104:   return -ENODEV;",
          "1105:  }",
          "1107:  delivered_reg = &cpc_desc->cpc_regs[DELIVERED_CTR];",
          "1108:  reference_reg = &cpc_desc->cpc_regs[REFERENCE_CTR];",
          "1109:  ref_perf_reg = &cpc_desc->cpc_regs[REFERENCE_PERF];",
          "",
          "[Removed Lines]",
          "1098:  struct cppc_pcc_data *pcc_ss_data = pcc_data[pcc_ss_id];",
          "1102:  if (!cpc_desc) {",
          "",
          "[Added Lines]",
          "1099:  struct cppc_pcc_data *pcc_ss_data;",
          "1103:  if (!cpc_desc || pcc_ss_id < 0) {",
          "1108:  pcc_ss_data = pcc_data[pcc_ss_id];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1172:  struct cppc_pcc_data *pcc_ss_data = pcc_data[pcc_ss_id];",
          "1173:  int ret = 0;",
          "1176:   pr_debug(\"No CPC descriptor for CPU:%d\\n\", cpu);",
          "1177:   return -ENODEV;",
          "1178:  }",
          "1180:  desired_reg = &cpc_desc->cpc_regs[DESIRED_PERF];",
          "",
          "[Removed Lines]",
          "1175:  if (!cpc_desc) {",
          "",
          "[Added Lines]",
          "1177:  if (!cpc_desc || pcc_ss_id < 0) {",
          "1182:  pcc_ss_data = pcc_data[pcc_ss_id];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1301:  struct cpc_desc *cpc_desc;",
          "1302:  struct cpc_register_resource *desired_reg;",
          "1303:  int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpu_num);",
          "1306:  cpc_desc = per_cpu(cpc_desc_ptr, cpu_num);",
          "1307:  if (!cpc_desc)",
          "",
          "[Removed Lines]",
          "1304:  struct cppc_pcc_data *pcc_ss_data = pcc_data[pcc_ss_id];",
          "",
          "[Added Lines]",
          "1307:  struct cppc_pcc_data *pcc_ss_data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1311:  if (!CPC_IN_PCC(desired_reg))",
          "1312:   return CPUFREQ_ETERNAL;",
          "1314:  if (pcc_ss_data->pcc_mpar)",
          "1315:   latency_ns = 60 * (1000 * 1000 * 1000 / pcc_ss_data->pcc_mpar);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:  if (pcc_ss_id < 0)",
          "1318:   return CPUFREQ_ETERNAL;",
          "1320:  pcc_ss_data = pcc_data[pcc_ss_id];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eee2fa6ab3225192d6d894c54a6fb02ac9efdff6",
      "candidate_info": {
        "commit_hash": "eee2fa6ab3225192d6d894c54a6fb02ac9efdff6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/eee2fa6ab3225192d6d894c54a6fb02ac9efdff6",
        "files": [
          "net/rds/af_rds.c",
          "net/rds/bind.c",
          "net/rds/cong.c",
          "net/rds/connection.c",
          "net/rds/ib.c",
          "net/rds/ib.h",
          "net/rds/ib_cm.c",
          "net/rds/ib_rdma.c",
          "net/rds/ib_recv.c",
          "net/rds/ib_send.c",
          "net/rds/loop.c",
          "net/rds/rdma.c",
          "net/rds/rdma_transport.c",
          "net/rds/rds.h",
          "net/rds/recv.c",
          "net/rds/send.c",
          "net/rds/tcp.c",
          "net/rds/tcp_connect.c",
          "net/rds/tcp_listen.c",
          "net/rds/tcp_recv.c",
          "net/rds/tcp_send.c",
          "net/rds/threads.c",
          "net/rds/transport.c"
        ],
        "message": "rds: Changing IP address internal representation to struct in6_addr\n\nThis patch changes the internal representation of an IP address to use\nstruct in6_addr.  IPv4 address is stored as an IPv4 mapped address.\nAll the functions which take an IP address as argument are also\nchanged to use struct in6_addr.  But RDS socket layer is not modified\nsuch that it still does not accept IPv6 address from an application.\nAnd RDS layer does not accept nor initiate IPv6 connections.\n\nv2: Fixed sparse warnings.\n\nSigned-off-by: Ka-Cheong Poon <ka-cheong.poon@oracle.com>\nAcked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/rds/af_rds.c||net/rds/af_rds.c",
          "net/rds/bind.c||net/rds/bind.c",
          "net/rds/cong.c||net/rds/cong.c",
          "net/rds/connection.c||net/rds/connection.c",
          "net/rds/ib.c||net/rds/ib.c",
          "net/rds/ib.h||net/rds/ib.h",
          "net/rds/ib_cm.c||net/rds/ib_cm.c",
          "net/rds/ib_rdma.c||net/rds/ib_rdma.c",
          "net/rds/ib_recv.c||net/rds/ib_recv.c",
          "net/rds/ib_send.c||net/rds/ib_send.c",
          "net/rds/loop.c||net/rds/loop.c",
          "net/rds/rdma.c||net/rds/rdma.c",
          "net/rds/rdma_transport.c||net/rds/rdma_transport.c",
          "net/rds/rds.h||net/rds/rds.h",
          "net/rds/recv.c||net/rds/recv.c",
          "net/rds/send.c||net/rds/send.c",
          "net/rds/tcp.c||net/rds/tcp.c",
          "net/rds/tcp_connect.c||net/rds/tcp_connect.c",
          "net/rds/tcp_listen.c||net/rds/tcp_listen.c",
          "net/rds/tcp_recv.c||net/rds/tcp_recv.c",
          "net/rds/tcp_send.c||net/rds/tcp_send.c",
          "net/rds/threads.c||net/rds/threads.c",
          "net/rds/transport.c||net/rds/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rds/rdma.c||net/rds/rdma.c"
          ],
          "candidate": [
            "net/rds/rdma.c||net/rds/rdma.c"
          ]
        }
      },
      "candidate_diff": {
        "net/rds/af_rds.c||net/rds/af_rds.c": [
          "File: net/rds/af_rds.c -> net/rds/af_rds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <linux/kernel.h>",
          "36: #include <linux/gfp.h>",
          "37: #include <linux/in.h>",
          "38: #include <linux/poll.h>",
          "39: #include <net/sock.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <linux/ipv6.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: static int rds_getname(struct socket *sock, struct sockaddr *uaddr,",
          "114:          int peer)",
          "115: {",
          "117:  struct rds_sock *rs = rds_sk_to_rs(sock->sk);",
          "122:  if (peer) {",
          "124:    return -ENOTCONN;",
          "128:  } else {",
          "131:  }",
          "136: }",
          "",
          "[Removed Lines]",
          "116:  struct sockaddr_in *sin = (struct sockaddr_in *)uaddr;",
          "119:  memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "123:   if (!rs->rs_conn_addr)",
          "126:   sin->sin_port = rs->rs_conn_port;",
          "127:   sin->sin_addr.s_addr = rs->rs_conn_addr;",
          "129:   sin->sin_port = rs->rs_bound_port;",
          "130:   sin->sin_addr.s_addr = rs->rs_bound_addr;",
          "133:  sin->sin_family = AF_INET;",
          "135:  return sizeof(*sin);",
          "",
          "[Added Lines]",
          "118:  struct sockaddr_in6 *sin6;",
          "119:  struct sockaddr_in *sin;",
          "120:  int uaddr_len;",
          "124:   if (ipv6_addr_any(&rs->rs_conn_addr))",
          "127:   if (ipv6_addr_v4mapped(&rs->rs_conn_addr)) {",
          "128:    sin = (struct sockaddr_in *)uaddr;",
          "129:    memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "130:    sin->sin_family = AF_INET;",
          "131:    sin->sin_port = rs->rs_conn_port;",
          "132:    sin->sin_addr.s_addr = rs->rs_conn_addr_v4;",
          "133:    uaddr_len = sizeof(*sin);",
          "134:   } else {",
          "135:    sin6 = (struct sockaddr_in6 *)uaddr;",
          "136:    sin6->sin6_family = AF_INET6;",
          "137:    sin6->sin6_port = rs->rs_conn_port;",
          "138:    sin6->sin6_addr = rs->rs_conn_addr;",
          "139:    sin6->sin6_flowinfo = 0;",
          "141:    sin6->sin6_scope_id = rs->rs_bound_scope_id;",
          "142:    uaddr_len = sizeof(*sin6);",
          "143:   }",
          "149:   if (ipv6_addr_any(&rs->rs_bound_addr)) {",
          "150:    sin = (struct sockaddr_in *)uaddr;",
          "151:    memset(sin, 0, sizeof(*sin));",
          "152:    sin->sin_family = AF_UNSPEC;",
          "153:    return sizeof(*sin);",
          "154:   }",
          "155:   if (ipv6_addr_v4mapped(&rs->rs_bound_addr)) {",
          "156:    sin = (struct sockaddr_in *)uaddr;",
          "157:    memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "158:    sin->sin_family = AF_INET;",
          "159:    sin->sin_port = rs->rs_bound_port;",
          "160:    sin->sin_addr.s_addr = rs->rs_bound_addr_v4;",
          "161:    uaddr_len = sizeof(*sin);",
          "162:   } else {",
          "163:    sin6 = (struct sockaddr_in6 *)uaddr;",
          "164:    sin6->sin6_family = AF_INET6;",
          "165:    sin6->sin6_port = rs->rs_bound_port;",
          "166:    sin6->sin6_addr = rs->rs_bound_addr;",
          "167:    sin6->sin6_flowinfo = 0;",
          "168:    sin6->sin6_scope_id = rs->rs_bound_scope_id;",
          "169:    uaddr_len = sizeof(*sin6);",
          "170:   }",
          "173:  return uaddr_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: static int rds_cancel_sent_to(struct rds_sock *rs, char __user *optval,",
          "204:          int len)",
          "205: {",
          "206:  struct sockaddr_in sin;",
          "207:  int ret = 0;",
          "212:   goto out;",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:  if (rs->rs_bound_addr == 0) {",
          "",
          "[Added Lines]",
          "244:  struct sockaddr_in6 sin6;",
          "249:  if (ipv6_addr_any(&rs->rs_bound_addr)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:  if (len < sizeof(struct sockaddr_in)) {",
          "216:   ret = -EINVAL;",
          "217:   goto out;",
          "218:  }",
          "226: out:",
          "227:  return ret;",
          "228: }",
          "",
          "[Removed Lines]",
          "220:  if (copy_from_user(&sin, optval, sizeof(sin))) {",
          "221:   ret = -EFAULT;",
          "222:   goto out;",
          "223:  }",
          "225:  rds_send_drop_to(rs, &sin);",
          "",
          "[Added Lines]",
          "257:  } else if (len < sizeof(struct sockaddr_in6)) {",
          "259:   if (copy_from_user(&sin, optval, sizeof(struct sockaddr_in))) {",
          "260:    ret = -EFAULT;",
          "261:    goto out;",
          "262:   }",
          "263:   ipv6_addr_set_v4mapped(sin.sin_addr.s_addr, &sin6.sin6_addr);",
          "264:   sin6.sin6_port = sin.sin_port;",
          "265:  } else {",
          "266:   if (copy_from_user(&sin6, optval,",
          "267:        sizeof(struct sockaddr_in6))) {",
          "268:    ret = -EFAULT;",
          "269:    goto out;",
          "270:   }",
          "273:  rds_send_drop_to(rs, &sin6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "435:          int addr_len, int flags)",
          "436: {",
          "437:  struct sock *sk = sock->sk;",
          "439:  struct rds_sock *rs = rds_sk_to_rs(sk);",
          "440:  int ret = 0;",
          "442:  lock_sock(sk);",
          "457:  }",
          "463:  release_sock(sk);",
          "464:  return ret;",
          "465: }",
          "",
          "[Removed Lines]",
          "438:  struct sockaddr_in *sin = (struct sockaddr_in *)uaddr;",
          "444:  if (addr_len != sizeof(struct sockaddr_in)) {",
          "445:   ret = -EINVAL;",
          "446:   goto out;",
          "447:  }",
          "449:  if (sin->sin_family != AF_INET) {",
          "450:   ret = -EAFNOSUPPORT;",
          "451:   goto out;",
          "452:  }",
          "454:  if (sin->sin_addr.s_addr == htonl(INADDR_ANY)) {",
          "455:   ret = -EDESTADDRREQ;",
          "456:   goto out;",
          "459:  rs->rs_conn_addr = sin->sin_addr.s_addr;",
          "460:  rs->rs_conn_port = sin->sin_port;",
          "462: out:",
          "",
          "[Added Lines]",
          "486:  struct sockaddr_in *sin;",
          "492:  switch (addr_len) {",
          "493:  case sizeof(struct sockaddr_in):",
          "494:   sin = (struct sockaddr_in *)uaddr;",
          "495:   if (sin->sin_family != AF_INET) {",
          "496:    ret = -EAFNOSUPPORT;",
          "497:    break;",
          "498:   }",
          "499:   if (sin->sin_addr.s_addr == htonl(INADDR_ANY)) {",
          "500:    ret = -EDESTADDRREQ;",
          "501:    break;",
          "502:   }",
          "503:   if (IN_MULTICAST(ntohl(sin->sin_addr.s_addr)) ||",
          "504:       sin->sin_addr.s_addr == htonl(INADDR_BROADCAST)) {",
          "505:    ret = -EINVAL;",
          "506:    break;",
          "507:   }",
          "508:   ipv6_addr_set_v4mapped(sin->sin_addr.s_addr, &rs->rs_conn_addr);",
          "509:   rs->rs_conn_port = sin->sin_port;",
          "510:   break;",
          "512:  case sizeof(struct sockaddr_in6):",
          "513:   ret = -EPROTONOSUPPORT;",
          "514:   break;",
          "516:  default:",
          "517:   ret = -EINVAL;",
          "518:   break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "578:   list_for_each_entry(inc, &rs->rs_recv_queue, i_item) {",
          "579:    total++;",
          "580:    if (total <= len)",
          "583:   }",
          "585:   read_unlock(&rs->rs_recv_lock);",
          "",
          "[Removed Lines]",
          "581:     rds_inc_info_copy(inc, iter, inc->i_saddr,",
          "582:         rs->rs_bound_addr, 1);",
          "",
          "[Added Lines]",
          "639:     rds_inc_info_copy(inc, iter,",
          "640:         inc->i_saddr.s6_addr32[3],",
          "641:         rs->rs_bound_addr_v4,",
          "642:         1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "608:  list_for_each_entry(rs, &rds_sock_list, rs_item) {",
          "609:   sinfo.sndbuf = rds_sk_sndbuf(rs);",
          "610:   sinfo.rcvbuf = rds_sk_rcvbuf(rs);",
          "613:   sinfo.bound_port = rs->rs_bound_port;",
          "614:   sinfo.connected_port = rs->rs_conn_port;",
          "615:   sinfo.inum = sock_i_ino(rds_rs_to_sk(rs));",
          "",
          "[Removed Lines]",
          "611:   sinfo.bound_addr = rs->rs_bound_addr;",
          "612:   sinfo.connected_addr = rs->rs_conn_addr;",
          "",
          "[Added Lines]",
          "671:   sinfo.bound_addr = rs->rs_bound_addr_v4;",
          "672:   sinfo.connected_addr = rs->rs_conn_addr_v4;",
          "",
          "---------------"
        ],
        "net/rds/bind.c||net/rds/bind.c": [
          "File: net/rds/bind.c -> net/rds/bind.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <linux/kernel.h>",
          "34: #include <net/sock.h>",
          "35: #include <linux/in.h>",
          "36: #include <linux/if_arp.h>",
          "37: #include <linux/jhash.h>",
          "38: #include <linux/ratelimit.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <linux/ipv6.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: static const struct rhashtable_params ht_parms = {",
          "44:  .nelem_hint = 768,",
          "46:  .key_offset = offsetof(struct rds_sock, rs_bound_key),",
          "47:  .head_offset = offsetof(struct rds_sock, rs_bound_node),",
          "48:  .max_size = 16384,",
          "49:  .min_size = 1024,",
          "50: };",
          "59: {",
          "61:  struct rds_sock *rs;",
          "64:  if (rs && !sock_flag(rds_rs_to_sk(rs), SOCK_DEAD))",
          "65:   rds_sock_addref(rs);",
          "66:  else",
          "67:   rs = NULL;",
          "72:  return rs;",
          "73: }",
          "77: {",
          "78:  int ret = -EADDRINUSE;",
          "79:  u16 rover, last;",
          "82:  if (*port != 0) {",
          "83:   rover = be16_to_cpu(*port);",
          "",
          "[Removed Lines]",
          "45:  .key_len = sizeof(u64),",
          "58: struct rds_sock *rds_find_bound(__be32 addr, __be16 port)",
          "60:  u64 key = ((u64)addr << 32) | port;",
          "63:  rs = rhashtable_lookup_fast(&bind_hash_table, &key, ht_parms);",
          "69:  rdsdebug(\"returning rs %p for %pI4:%u\\n\", rs, &addr,",
          "70:   ntohs(port));",
          "76: static int rds_add_bound(struct rds_sock *rs, __be32 addr, __be16 *port)",
          "80:  u64 key;",
          "",
          "[Added Lines]",
          "46:  .key_len = RDS_BOUND_KEY_LEN,",
          "56: static inline void __rds_create_bind_key(u8 *key, const struct in6_addr *addr,",
          "57:       __be16 port, __u32 scope_id)",
          "58: {",
          "59:  memcpy(key, addr, sizeof(*addr));",
          "60:  key += sizeof(*addr);",
          "61:  memcpy(key, &port, sizeof(port));",
          "62:  key += sizeof(port);",
          "63:  memcpy(key, &scope_id, sizeof(scope_id));",
          "64: }",
          "72: struct rds_sock *rds_find_bound(const struct in6_addr *addr, __be16 port,",
          "73:     __u32 scope_id)",
          "75:  u8 key[RDS_BOUND_KEY_LEN];",
          "78:  __rds_create_bind_key(key, addr, port, scope_id);",
          "79:  rs = rhashtable_lookup_fast(&bind_hash_table, key, ht_parms);",
          "85:  rdsdebug(\"returning rs %p for %pI6c:%u\\n\", rs, addr,",
          "86:    ntohs(port));",
          "92: static int rds_add_bound(struct rds_sock *rs, const struct in6_addr *addr,",
          "93:     __be16 *port, __u32 scope_id)",
          "97:  u8 key[RDS_BOUND_KEY_LEN];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:   if (rover == RDS_FLAG_PROBE_PORT)",
          "97:    continue;",
          "100:    continue;",
          "104:   net_get_random_once(&rs->rs_hash_initval,",
          "105:         sizeof(rs->rs_hash_initval));",
          "106:   rs->rs_bound_port = cpu_to_be16(rover);",
          "",
          "[Removed Lines]",
          "98:   key = ((u64)addr << 32) | cpu_to_be16(rover);",
          "99:   if (rhashtable_lookup_fast(&bind_hash_table, &key, ht_parms))",
          "102:   rs->rs_bound_key = key;",
          "103:   rs->rs_bound_addr = addr;",
          "",
          "[Added Lines]",
          "115:   __rds_create_bind_key(key, addr, cpu_to_be16(rover),",
          "116:           scope_id);",
          "117:   if (rhashtable_lookup_fast(&bind_hash_table, key, ht_parms))",
          "120:   memcpy(rs->rs_bound_key, key, sizeof(rs->rs_bound_key));",
          "121:   rs->rs_bound_addr = *addr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:      rs, &addr, (int)ntohs(*port));",
          "115:    break;",
          "116:   } else {",
          "118:    rds_sock_put(rs);",
          "119:    ret = -ENOMEM;",
          "120:    break;",
          "",
          "[Removed Lines]",
          "117:    rs->rs_bound_addr = 0;",
          "",
          "[Added Lines]",
          "135:    rs->rs_bound_addr = in6addr_any;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127: void rds_remove_bound(struct rds_sock *rs)",
          "128: {",
          "131:   return;",
          "134:    rs, &rs->rs_bound_addr,",
          "135:    ntohs(rs->rs_bound_port));",
          "137:  rhashtable_remove_fast(&bind_hash_table, &rs->rs_bound_node, ht_parms);",
          "138:  rds_sock_put(rs);",
          "140: }",
          "142: int rds_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)",
          "143: {",
          "144:  struct sock *sk = sock->sk;",
          "146:  struct rds_sock *rs = rds_sk_to_rs(sk);",
          "147:  struct rds_transport *trans;",
          "148:  int ret = 0;",
          "150:  lock_sock(sk);",
          "156:   ret = -EINVAL;",
          "157:   goto out;",
          "158:  }",
          "161:  if (ret)",
          "162:   goto out;",
          "165:   trans = rs->rs_transport;",
          "166:   if (trans->laddr_check(sock_net(sock->sk),",
          "168:    ret = -ENOPROTOOPT;",
          "169:    rds_remove_bound(rs);",
          "170:   } else {",
          "",
          "[Removed Lines]",
          "130:  if (!rs->rs_bound_addr)",
          "133:  rdsdebug(\"rs %p unbinding from %pI4:%d\\n\",",
          "139:  rs->rs_bound_addr = 0;",
          "145:  struct sockaddr_in *sin = (struct sockaddr_in *)uaddr;",
          "152:  if (addr_len != sizeof(struct sockaddr_in) ||",
          "153:      sin->sin_family != AF_INET ||",
          "154:      rs->rs_bound_addr ||",
          "155:      sin->sin_addr.s_addr == htonl(INADDR_ANY)) {",
          "160:  ret = rds_add_bound(rs, sin->sin_addr.s_addr, &sin->sin_port);",
          "167:            sin->sin_addr.s_addr) != 0) {",
          "",
          "[Added Lines]",
          "148:  if (ipv6_addr_any(&rs->rs_bound_addr))",
          "151:  rdsdebug(\"rs %p unbinding from %pI6c:%d\\n\",",
          "157:  rs->rs_bound_addr = in6addr_any;",
          "164:  struct in6_addr v6addr, *binding_addr;",
          "166:  __u32 scope_id = 0;",
          "168:  __be16 port;",
          "173:  if (addr_len == sizeof(struct sockaddr_in)) {",
          "174:   struct sockaddr_in *sin = (struct sockaddr_in *)uaddr;",
          "176:   if (sin->sin_family != AF_INET ||",
          "177:       sin->sin_addr.s_addr == htonl(INADDR_ANY))",
          "178:    return -EINVAL;",
          "179:   ipv6_addr_set_v4mapped(sin->sin_addr.s_addr, &v6addr);",
          "180:   binding_addr = &v6addr;",
          "181:   port = sin->sin_port;",
          "182:  } else if (addr_len == sizeof(struct sockaddr_in6)) {",
          "183:   return -EPROTONOSUPPORT;",
          "184:  } else {",
          "185:   return -EINVAL;",
          "186:  }",
          "190:  if (!ipv6_addr_any(&rs->rs_bound_addr)) {",
          "195:  ret = rds_add_bound(rs, binding_addr, &port, scope_id);",
          "202:            binding_addr, scope_id) != 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:   }",
          "173:   goto out;",
          "174:  }",
          "177:  if (!trans) {",
          "178:   ret = -EADDRNOTAVAIL;",
          "179:   rds_remove_bound(rs);",
          "182:   goto out;",
          "183:  }",
          "",
          "[Removed Lines]",
          "175:  trans = rds_trans_get_preferred(sock_net(sock->sk),",
          "176:      sin->sin_addr.s_addr);",
          "180:   pr_info_ratelimited(\"RDS: %s could not find a transport for %pI4, load rds_tcp or rds_rdma?\\n\",",
          "181:         __func__, &sin->sin_addr.s_addr);",
          "",
          "[Added Lines]",
          "210:  trans = rds_trans_get_preferred(sock_net(sock->sk), binding_addr,",
          "211:      scope_id);",
          "215:   pr_info_ratelimited(\"RDS: %s could not find a transport for %pI6c, load rds_tcp or rds_rdma?\\n\",",
          "216:         __func__, binding_addr);",
          "",
          "---------------"
        ],
        "net/rds/cong.c||net/rds/cong.c": [
          "File: net/rds/cong.c -> net/rds/cong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static DEFINE_SPINLOCK(rds_cong_lock);",
          "102: static struct rb_root rds_cong_tree = RB_ROOT;",
          "105:             struct rds_cong_map *insert)",
          "106: {",
          "107:  struct rb_node **p = &rds_cong_tree.rb_node;",
          "",
          "[Removed Lines]",
          "104: static struct rds_cong_map *rds_cong_tree_walk(__be32 addr,",
          "",
          "[Added Lines]",
          "104: static struct rds_cong_map *rds_cong_tree_walk(const struct in6_addr *addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  struct rds_cong_map *map;",
          "111:  while (*p) {",
          "112:   parent = *p;",
          "113:   map = rb_entry(parent, struct rds_cong_map, m_rb_node);",
          "116:    p = &(*p)->rb_left;",
          "118:    p = &(*p)->rb_right;",
          "119:   else",
          "120:    return map;",
          "",
          "[Removed Lines]",
          "115:   if (addr < map->m_addr)",
          "117:   else if (addr > map->m_addr)",
          "",
          "[Added Lines]",
          "112:   int diff;",
          "117:   diff = rds_addr_cmp(addr, &map->m_addr);",
          "118:   if (diff < 0)",
          "120:   else if (diff > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: {",
          "137:  struct rds_cong_map *map;",
          "138:  struct rds_cong_map *ret = NULL;",
          "",
          "[Removed Lines]",
          "135: static struct rds_cong_map *rds_cong_from_addr(__be32 addr)",
          "",
          "[Added Lines]",
          "138: static struct rds_cong_map *rds_cong_from_addr(const struct in6_addr *addr)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:  if (!map)",
          "145:   return NULL;",
          "148:  init_waitqueue_head(&map->m_waitq);",
          "149:  INIT_LIST_HEAD(&map->m_conn_list);",
          "",
          "[Removed Lines]",
          "147:  map->m_addr = addr;",
          "",
          "[Added Lines]",
          "150:  map->m_addr = *addr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:   kfree(map);",
          "172:  }",
          "176:  return ret;",
          "177: }",
          "",
          "[Removed Lines]",
          "174:  rdsdebug(\"map %p for addr %x\\n\", ret, be32_to_cpu(addr));",
          "",
          "[Added Lines]",
          "177:  rdsdebug(\"map %p for addr %pI6c\\n\", ret, addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203: int rds_cong_get_maps(struct rds_connection *conn)",
          "204: {",
          "208:  if (!(conn->c_lcong && conn->c_fcong))",
          "209:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "205:  conn->c_lcong = rds_cong_from_addr(conn->c_laddr);",
          "206:  conn->c_fcong = rds_cong_from_addr(conn->c_faddr);",
          "",
          "[Added Lines]",
          "208:  conn->c_lcong = rds_cong_from_addr(&conn->c_laddr);",
          "209:  conn->c_fcong = rds_cong_from_addr(&conn->c_faddr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "355:  spin_lock_irqsave(&rds_cong_lock, flags);",
          "357:  spin_unlock_irqrestore(&rds_cong_lock, flags);",
          "359:  if (map && rds_cong_test_bit(map, rs->rs_bound_port)) {",
          "",
          "[Removed Lines]",
          "356:  map = rds_cong_tree_walk(rs->rs_bound_addr, NULL);",
          "",
          "[Added Lines]",
          "359:  map = rds_cong_tree_walk(&rs->rs_bound_addr, NULL);",
          "",
          "---------------"
        ],
        "net/rds/connection.c||net/rds/connection.c": [
          "File: net/rds/connection.c -> net/rds/connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <linux/list.h>",
          "35: #include <linux/slab.h>",
          "36: #include <linux/export.h>",
          "39: #include \"rds.h\"",
          "40: #include \"loop.h\"",
          "",
          "[Removed Lines]",
          "37: #include <net/inet_hashtables.h>",
          "",
          "[Added Lines]",
          "37: #include <net/ipv6.h>",
          "38: #include <net/inet6_hashtables.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: static struct hlist_head rds_conn_hash[RDS_CONNECTION_HASH_ENTRIES];",
          "50: static struct kmem_cache *rds_conn_slab;",
          "53: {",
          "54:  static u32 rds_hash_secret __read_mostly;",
          "58:  net_get_random_once(&rds_hash_secret, sizeof(rds_hash_secret));",
          "64:  return &rds_conn_hash[hash & RDS_CONNECTION_HASH_MASK];",
          "65: }",
          "",
          "[Removed Lines]",
          "52: static struct hlist_head *rds_conn_bucket(__be32 laddr, __be32 faddr)",
          "56:  unsigned long hash;",
          "61:  hash = __inet_ehashfn(be32_to_cpu(laddr), 0,",
          "62:          be32_to_cpu(faddr), 0,",
          "63:          rds_hash_secret);",
          "",
          "[Added Lines]",
          "53: static struct hlist_head *rds_conn_bucket(const struct in6_addr *laddr,",
          "54:        const struct in6_addr *faddr)",
          "56:  static u32 rds6_hash_secret __read_mostly;",
          "59:  u32 lhash, fhash, hash;",
          "62:  net_get_random_once(&rds6_hash_secret, sizeof(rds6_hash_secret));",
          "64:  lhash = (__force u32)laddr->s6_addr32[3];",
          "65:  fhash = __ipv6_addr_jhash(faddr, rds6_hash_secret);",
          "66:  hash = __inet6_ehashfn(lhash, 0, fhash, 0, rds_hash_secret);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: static struct rds_connection *rds_conn_lookup(struct net *net,",
          "74:            struct hlist_head *head,",
          "77: {",
          "78:  struct rds_connection *conn, *ret = NULL;",
          "80:  hlist_for_each_entry_rcu(conn, head, c_hash_node) {",
          "83:    ret = conn;",
          "84:    break;",
          "85:   }",
          "86:  }",
          "89:  return ret;",
          "90: }",
          "",
          "[Removed Lines]",
          "75:            __be32 laddr, __be32 faddr,",
          "76:            struct rds_transport *trans)",
          "81:   if (conn->c_faddr == faddr && conn->c_laddr == laddr &&",
          "82:       conn->c_trans == trans && net == rds_conn_net(conn)) {",
          "87:  rdsdebug(\"returning conn %p for %pI4 -> %pI4\\n\", ret,",
          "88:    &laddr, &faddr);",
          "",
          "[Added Lines]",
          "79:            const struct in6_addr *laddr,",
          "80:            const struct in6_addr *faddr,",
          "81:            struct rds_transport *trans,",
          "82:            int dev_if)",
          "87:   if (ipv6_addr_equal(&conn->c_faddr, faddr) &&",
          "88:       ipv6_addr_equal(&conn->c_laddr, laddr) &&",
          "89:       conn->c_trans == trans &&",
          "90:       net == rds_conn_net(conn) &&",
          "91:       conn->c_dev_if == dev_if) {",
          "96:  rdsdebug(\"returning conn %p for %pI6c -> %pI6c\\n\", ret,",
          "97:    laddr, faddr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99: {",
          "100:  struct rds_connection *conn = cp->cp_conn;",
          "105:  rds_stats_inc(s_conn_reset);",
          "106:  rds_send_path_reset(cp);",
          "",
          "[Removed Lines]",
          "102:  rdsdebug(\"connection %pI4 to %pI4 reset\\n\",",
          "103:    &conn->c_laddr, &conn->c_faddr);",
          "",
          "[Added Lines]",
          "111:  rdsdebug(\"connection %pI6c to %pI6c reset\\n\",",
          "112:    &conn->c_laddr, &conn->c_faddr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144: static struct rds_connection *__rds_conn_create(struct net *net,",
          "148: {",
          "149:  struct rds_connection *conn, *parent = NULL;",
          "150:  struct hlist_head *head = rds_conn_bucket(laddr, faddr);",
          "",
          "[Removed Lines]",
          "145:       __be32 laddr, __be32 faddr,",
          "146:            struct rds_transport *trans, gfp_t gfp,",
          "147:            int is_outgoing)",
          "",
          "[Added Lines]",
          "154:       const struct in6_addr *laddr,",
          "155:       const struct in6_addr *faddr,",
          "156:       struct rds_transport *trans,",
          "157:       gfp_t gfp,",
          "158:       int is_outgoing,",
          "159:       int dev_if)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:  int npaths = (trans->t_mp_capable ? RDS_MPATH_WORKERS : 1);",
          "156:  rcu_read_lock();",
          "",
          "[Removed Lines]",
          "157:  conn = rds_conn_lookup(net, head, laddr, faddr, trans);",
          "158:  if (conn && conn->c_loopback && conn->c_trans != &rds_loop_transport &&",
          "159:      laddr == faddr && !is_outgoing) {",
          "",
          "[Added Lines]",
          "169:  conn = rds_conn_lookup(net, head, laddr, faddr, trans, dev_if);",
          "170:  if (conn &&",
          "171:      conn->c_loopback &&",
          "172:      conn->c_trans != &rds_loop_transport &&",
          "173:      ipv6_addr_equal(laddr, faddr) &&",
          "174:      !is_outgoing) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "181:  }",
          "183:  INIT_HLIST_NODE(&conn->c_hash_node);",
          "187:  rds_conn_net_set(conn, net);",
          "",
          "[Removed Lines]",
          "184:  conn->c_laddr = laddr;",
          "185:  conn->c_faddr = faddr;",
          "",
          "[Added Lines]",
          "199:  conn->c_laddr = *laddr;",
          "200:  conn->c_isv6 = !ipv6_addr_v4mapped(laddr);",
          "201:  conn->c_faddr = *faddr;",
          "202:  conn->c_dev_if = dev_if;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "203:  if (loop_trans) {",
          "204:   rds_trans_put(loop_trans);",
          "205:   conn->c_loopback = 1;",
          "",
          "[Removed Lines]",
          "202:  loop_trans = rds_trans_get_preferred(net, faddr);",
          "",
          "[Added Lines]",
          "219:  loop_trans = rds_trans_get_preferred(net, faddr, conn->c_dev_if);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233:   goto out;",
          "234:  }",
          "",
          "[Removed Lines]",
          "236:  rdsdebug(\"allocated conn %p for %pI4 -> %pI4 over %s %s\\n\",",
          "237:    conn, &laddr, &faddr,",
          "238:    strnlen(trans->t_name, sizeof(trans->t_name)) ? trans->t_name :",
          "239:    \"[unknown]\", is_outgoing ? \"(outgoing)\" : \"\");",
          "",
          "[Added Lines]",
          "253:  rdsdebug(\"allocated conn %p for %pI6c -> %pI6c over %s %s\\n\",",
          "254:    conn, laddr, faddr,",
          "255:    strnlen(trans->t_name, sizeof(trans->t_name)) ?",
          "256:    trans->t_name : \"[unknown]\", is_outgoing ? \"(outgoing)\" : \"\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "263:   struct rds_connection *found;",
          "266:   if (found) {",
          "267:    struct rds_conn_path *cp;",
          "268:    int i;",
          "",
          "[Removed Lines]",
          "265:   found = rds_conn_lookup(net, head, laddr, faddr, trans);",
          "",
          "[Added Lines]",
          "282:   found = rds_conn_lookup(net, head, laddr, faddr, trans,",
          "283:      dev_if);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "295: }",
          "297: struct rds_connection *rds_conn_create(struct net *net,",
          "300: {",
          "302: }",
          "303: EXPORT_SYMBOL_GPL(rds_conn_create);",
          "305: struct rds_connection *rds_conn_create_outgoing(struct net *net,",
          "308: {",
          "310: }",
          "311: EXPORT_SYMBOL_GPL(rds_conn_create_outgoing);",
          "",
          "[Removed Lines]",
          "298:            __be32 laddr, __be32 faddr,",
          "299:            struct rds_transport *trans, gfp_t gfp)",
          "301:  return __rds_conn_create(net, laddr, faddr, trans, gfp, 0);",
          "306:       __be32 laddr, __be32 faddr,",
          "307:            struct rds_transport *trans, gfp_t gfp)",
          "309:  return __rds_conn_create(net, laddr, faddr, trans, gfp, 1);",
          "",
          "[Added Lines]",
          "316:            const struct in6_addr *laddr,",
          "317:            const struct in6_addr *faddr,",
          "318:            struct rds_transport *trans, gfp_t gfp,",
          "319:            int dev_if)",
          "321:  return __rds_conn_create(net, laddr, faddr, trans, gfp, 0, dev_if);",
          "326:       const struct in6_addr *laddr,",
          "327:       const struct in6_addr *faddr,",
          "328:       struct rds_transport *trans,",
          "329:       gfp_t gfp, int dev_if)",
          "331:  return __rds_conn_create(net, laddr, faddr, trans, gfp, 1, dev_if);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "504:     list_for_each_entry(rm, list, m_conn_item) {",
          "505:      total++;",
          "506:      if (total <= len)",
          "507:       rds_inc_info_copy(&rm->m_inc,",
          "508:           iter,",
          "511:           0);",
          "512:     }",
          "",
          "[Removed Lines]",
          "509:           conn->c_laddr,",
          "510:           conn->c_faddr,",
          "",
          "[Added Lines]",
          "527:      __be32 laddr;",
          "528:      __be32 faddr;",
          "531:      laddr = conn->c_laddr.s6_addr32[3];",
          "532:      faddr = conn->c_faddr.s6_addr32[3];",
          "536:           laddr,",
          "537:           faddr,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "584:  struct hlist_head *head;",
          "585:  struct rds_connection *conn;",
          "586:  size_t i;",
          "589:  rcu_read_lock();",
          "",
          "[Removed Lines]",
          "587:  int j;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "595:       i++, head++) {",
          "596:   hlist_for_each_entry_rcu(conn, head, c_hash_node) {",
          "597:    struct rds_conn_path *cp;",
          "",
          "[Removed Lines]",
          "598:    int npaths;",
          "600:    npaths = (conn->c_trans->t_mp_capable ?",
          "601:      RDS_MPATH_WORKERS : 1);",
          "602:    for (j = 0; j < npaths; j++) {",
          "603:     cp = &conn->c_path[j];",
          "606:     if (!visitor(cp, buffer))",
          "607:      continue;",
          "608:    }",
          "",
          "[Added Lines]",
          "633:    cp = conn->c_path;",
          "636:    if (!visitor(cp, buffer))",
          "637:     continue;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "624: static int rds_conn_info_visitor(struct rds_conn_path *cp, void *buffer)",
          "625: {",
          "626:  struct rds_info_connection *cinfo = buffer;",
          "628:  cinfo->next_tx_seq = cp->cp_next_tx_seq;",
          "629:  cinfo->next_rx_seq = cp->cp_next_rx_seq;",
          "633:   sizeof(cinfo->transport));",
          "634:  cinfo->flags = 0;",
          "",
          "[Removed Lines]",
          "630:  cinfo->laddr = cp->cp_conn->c_laddr;",
          "631:  cinfo->faddr = cp->cp_conn->c_faddr;",
          "632:  strncpy(cinfo->transport, cp->cp_conn->c_trans->t_name,",
          "",
          "[Added Lines]",
          "656:  struct rds_connection *conn = cp->cp_conn;",
          "660:  cinfo->laddr = conn->c_laddr.s6_addr32[3];",
          "661:  cinfo->faddr = conn->c_faddr.s6_addr32[3];",
          "662:  strncpy(cinfo->transport, conn->c_trans->t_name,",
          "",
          "---------------"
        ],
        "net/rds/ib.c||net/rds/ib.c": [
          "File: net/rds/ib.c -> net/rds/ib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:  if (conn->c_trans != &rds_ib_transport)",
          "297:   return 0;",
          "302:  memset(&iinfo->src_gid, 0, sizeof(iinfo->src_gid));",
          "303:  memset(&iinfo->dst_gid, 0, sizeof(iinfo->dst_gid));",
          "",
          "[Removed Lines]",
          "299:  iinfo->src_addr = conn->c_laddr;",
          "300:  iinfo->dst_addr = conn->c_faddr;",
          "",
          "[Added Lines]",
          "299:  iinfo->src_addr = conn->c_laddr.s6_addr32[3];",
          "300:  iinfo->dst_addr = conn->c_faddr.s6_addr32[3];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: {",
          "346:  int ret;",
          "347:  struct rdma_cm_id *cm_id;",
          "",
          "[Removed Lines]",
          "344: static int rds_ib_laddr_check(struct net *net, __be32 addr)",
          "",
          "[Added Lines]",
          "344: static int rds_ib_laddr_check(struct net *net, const struct in6_addr *addr,",
          "345:          __u32 scope_id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:  memset(&sin, 0, sizeof(sin));",
          "359:  sin.sin_family = AF_INET;",
          "363:  ret = rdma_bind_addr(cm_id, (struct sockaddr *)&sin);",
          "",
          "[Removed Lines]",
          "360:  sin.sin_addr.s_addr = addr;",
          "",
          "[Added Lines]",
          "361:  sin.sin_addr.s_addr = addr->s6_addr32[3];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "367:      cm_id->device->node_type != RDMA_NODE_IB_CA)",
          "368:   ret = -EADDRNOTAVAIL;",
          "374:  rdma_destroy_id(cm_id);",
          "",
          "[Removed Lines]",
          "370:  rdsdebug(\"addr %pI4 ret %d node type %d\\n\",",
          "371:   &addr, ret,",
          "372:   cm_id->device ? cm_id->device->node_type : -1);",
          "",
          "[Added Lines]",
          "371:  rdsdebug(\"addr %pI6c ret %d node type %d\\n\",",
          "372:    addr, ret,",
          "373:    cm_id->device ? cm_id->device->node_type : -1);",
          "",
          "---------------"
        ],
        "net/rds/ib.h||net/rds/ib.h": [
          "File: net/rds/ib.h -> net/rds/ib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  struct list_head  *ready;",
          "58: };",
          "60: struct rds_ib_connect_private {",
          "70: };",
          "72: struct rds_ib_send_work {",
          "",
          "[Removed Lines]",
          "62:  __be32   dp_saddr;",
          "63:  __be32   dp_daddr;",
          "64:  u8   dp_protocol_major;",
          "65:  u8   dp_protocol_minor;",
          "67:  __be32   dp_reserved1;",
          "68:  __be64   dp_ack_seq;",
          "",
          "[Added Lines]",
          "66: struct rds_ib_conn_priv_cmn {",
          "67:  u8   ricpc_protocol_major;",
          "68:  u8   ricpc_protocol_minor;",
          "70:  __be32   ricpc_reserved1;",
          "71:  __be64   ricpc_ack_seq;",
          "73: };",
          "77:  __be32    dp_saddr;",
          "78:  __be32    dp_daddr;",
          "79:  struct rds_ib_conn_priv_cmn dp_cmn;",
          "80: };",
          "82: struct rds6_ib_connect_private {",
          "84:  struct in6_addr   dp_saddr;",
          "85:  struct in6_addr   dp_daddr;",
          "86:  struct rds_ib_conn_priv_cmn dp_cmn;",
          "87: };",
          "89: #define dp_protocol_major dp_cmn.ricpc_protocol_major",
          "90: #define dp_protocol_minor dp_cmn.ricpc_protocol_minor",
          "91: #define dp_protocol_minor_mask dp_cmn.ricpc_protocol_minor_mask",
          "92: #define dp_ack_seq  dp_cmn.ricpc_ack_seq",
          "93: #define dp_credit  dp_cmn.ricpc_credit",
          "95: union rds_ib_conn_priv {",
          "96:  struct rds_ib_connect_private ricp_v4;",
          "97:  struct rds6_ib_connect_private ricp_v6;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "351: __printf(2, 3)",
          "352: void __rds_ib_conn_error(struct rds_connection *conn, const char *, ...);",
          "353: int rds_ib_cm_handle_connect(struct rdma_cm_id *cm_id,",
          "356: void rds_ib_cm_connect_complete(struct rds_connection *conn,",
          "357:     struct rdma_cm_event *event);",
          "",
          "[Removed Lines]",
          "354:         struct rdma_cm_event *event);",
          "355: int rds_ib_cm_initiate_connect(struct rdma_cm_id *cm_id);",
          "",
          "[Added Lines]",
          "382:         struct rdma_cm_event *event, bool isv6);",
          "383: int rds_ib_cm_initiate_connect(struct rdma_cm_id *cm_id, bool isv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:  __rds_ib_conn_error(conn, KERN_WARNING \"RDS/IB: \" fmt)",
          "365: void rds_ib_add_conn(struct rds_ib_device *rds_ibdev, struct rds_connection *conn);",
          "366: void rds_ib_remove_conn(struct rds_ib_device *rds_ibdev, struct rds_connection *conn);",
          "367: void rds_ib_destroy_nodev_conns(void);",
          "",
          "[Removed Lines]",
          "364: int rds_ib_update_ipaddr(struct rds_ib_device *rds_ibdev, __be32 ipaddr);",
          "",
          "[Added Lines]",
          "392: int rds_ib_update_ipaddr(struct rds_ib_device *rds_ibdev,",
          "393:     struct in6_addr *ipaddr);",
          "",
          "---------------"
        ],
        "net/rds/ib_cm.c||net/rds/ib_cm.c": [
          "File: net/rds/ib_cm.c -> net/rds/ib_cm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <linux/slab.h>",
          "36: #include <linux/vmalloc.h>",
          "37: #include <linux/ratelimit.h>",
          "39: #include \"rds_single_path.h\"",
          "40: #include \"rds.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <net/addrconf.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: void rds_ib_cm_connect_complete(struct rds_connection *conn, struct rdma_cm_event *event)",
          "97: {",
          "99:  struct rds_ib_connection *ic = conn->c_transport_data;",
          "100:  struct ib_qp_attr qp_attr;",
          "101:  int err;",
          "112:   }",
          "113:  }",
          "115:  if (conn->c_version < RDS_PROTOCOL(3, 1)) {",
          "117:      &conn->c_laddr, &conn->c_faddr,",
          "118:      RDS_PROTOCOL_MAJOR(conn->c_version),",
          "119:      RDS_PROTOCOL_MINOR(conn->c_version));",
          "",
          "[Removed Lines]",
          "98:  const struct rds_ib_connect_private *dp = NULL;",
          "103:  if (event->param.conn.private_data_len >= sizeof(*dp)) {",
          "104:   dp = event->param.conn.private_data;",
          "107:   if (dp->dp_protocol_major) {",
          "108:    rds_ib_set_protocol(conn,",
          "109:     RDS_PROTOCOL(dp->dp_protocol_major,",
          "110:     dp->dp_protocol_minor));",
          "111:    rds_ib_set_flow_control(conn, be32_to_cpu(dp->dp_credit));",
          "116:   pr_notice(\"RDS/IB: Connection <%pI4,%pI4> version %u.%u no longer supported\\n\",",
          "",
          "[Added Lines]",
          "100:  const union rds_ib_conn_priv *dp = NULL;",
          "102:  __be64 ack_seq = 0;",
          "103:  __be32 credit = 0;",
          "104:  u8 major = 0;",
          "105:  u8 minor = 0;",
          "108:  dp = event->param.conn.private_data;",
          "109:  if (conn->c_isv6) {",
          "110:   if (event->param.conn.private_data_len >=",
          "111:       sizeof(struct rds6_ib_connect_private)) {",
          "112:    major = dp->ricp_v6.dp_protocol_major;",
          "113:    minor = dp->ricp_v6.dp_protocol_minor;",
          "114:    credit = dp->ricp_v6.dp_credit;",
          "120:    ack_seq = get_unaligned(&dp->ricp_v6.dp_ack_seq);",
          "122:  } else if (event->param.conn.private_data_len >=",
          "123:      sizeof(struct rds_ib_connect_private)) {",
          "124:   major = dp->ricp_v4.dp_protocol_major;",
          "125:   minor = dp->ricp_v4.dp_protocol_minor;",
          "126:   credit = dp->ricp_v4.dp_credit;",
          "127:   ack_seq = get_unaligned(&dp->ricp_v4.dp_ack_seq);",
          "128:  }",
          "131:  if (major) {",
          "132:   rds_ib_set_protocol(conn, RDS_PROTOCOL(major, minor));",
          "133:   rds_ib_set_flow_control(conn, be32_to_cpu(credit));",
          "137:   pr_notice(\"RDS/IB: Connection <%pI6c,%pI6c> version %u.%u no longer supported\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:   rds_conn_destroy(conn);",
          "122:   return;",
          "123:  } else {",
          "125:      ic->i_active_side ? \"Active\" : \"Passive\",",
          "126:      &conn->c_laddr, &conn->c_faddr,",
          "127:      RDS_PROTOCOL_MAJOR(conn->c_version),",
          "",
          "[Removed Lines]",
          "124:   pr_notice(\"RDS/IB: %s conn connected <%pI4,%pI4> version %u.%u%s\\n\",",
          "",
          "[Added Lines]",
          "145:   pr_notice(\"RDS/IB: %s conn connected <%pI6c,%pI6c> version %u.%u%s\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:   printk(KERN_NOTICE \"ib_modify_qp(IB_QP_STATE, RTS): err=%d\\n\", err);",
          "154:  if (err)",
          "155:   printk(KERN_ERR \"rds_ib_update_ipaddr failed (%d)\\n\",",
          "156:    err);",
          "",
          "[Removed Lines]",
          "153:  err = rds_ib_update_ipaddr(ic->rds_ibdev, conn->c_laddr);",
          "",
          "[Added Lines]",
          "174:  err = rds_ib_update_ipaddr(ic->rds_ibdev, &conn->c_laddr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:  if (dp) {",
          "169:          NULL);",
          "170:  }",
          "",
          "[Removed Lines]",
          "165:   __be64 dp_ack_seq = get_unaligned(&dp->dp_ack_seq);",
          "167:   if (dp_ack_seq)",
          "168:    rds_send_drop_acked(conn, be64_to_cpu(dp_ack_seq),",
          "",
          "[Added Lines]",
          "182:   if (ack_seq)",
          "183:    rds_send_drop_acked(conn, be64_to_cpu(ack_seq),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "173: }",
          "175: static void rds_ib_cm_fill_conn_param(struct rds_connection *conn,",
          "181: {",
          "182:  struct rds_ib_connection *ic = conn->c_transport_data;",
          "183:  struct rds_ib_device *rds_ibdev = ic->rds_ibdev;",
          "",
          "[Removed Lines]",
          "176:    struct rdma_conn_param *conn_param,",
          "177:    struct rds_ib_connect_private *dp,",
          "178:    u32 protocol_version,",
          "179:    u32 max_responder_resources,",
          "180:    u32 max_initiator_depth)",
          "",
          "[Added Lines]",
          "191:           struct rdma_conn_param *conn_param,",
          "192:           union rds_ib_conn_priv *dp,",
          "193:           u32 protocol_version,",
          "194:           u32 max_responder_resources,",
          "195:           u32 max_initiator_depth,",
          "196:           bool isv6)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "194:  if (dp) {",
          "195:   memset(dp, 0, sizeof(*dp));",
          "204:   if (ic->i_flowctl) {",
          "205:    unsigned int credits;",
          "210:   }",
          "214:  }",
          "215: }",
          "",
          "[Removed Lines]",
          "196:   dp->dp_saddr = conn->c_laddr;",
          "197:   dp->dp_daddr = conn->c_faddr;",
          "198:   dp->dp_protocol_major = RDS_PROTOCOL_MAJOR(protocol_version);",
          "199:   dp->dp_protocol_minor = RDS_PROTOCOL_MINOR(protocol_version);",
          "200:   dp->dp_protocol_minor_mask = cpu_to_be16(RDS_IB_SUPPORTED_PROTOCOLS);",
          "201:   dp->dp_ack_seq = cpu_to_be64(rds_ib_piggyb_ack(ic));",
          "207:    credits = IB_GET_POST_CREDITS(atomic_read(&ic->i_credits));",
          "208:    dp->dp_credit = cpu_to_be32(credits);",
          "209:    atomic_sub(IB_SET_POST_CREDITS(credits), &ic->i_credits);",
          "212:   conn_param->private_data = dp;",
          "213:   conn_param->private_data_len = sizeof(*dp);",
          "",
          "[Added Lines]",
          "212:   if (isv6) {",
          "213:    dp->ricp_v6.dp_saddr = conn->c_laddr;",
          "214:    dp->ricp_v6.dp_daddr = conn->c_faddr;",
          "215:    dp->ricp_v6.dp_protocol_major =",
          "216:        RDS_PROTOCOL_MAJOR(protocol_version);",
          "217:    dp->ricp_v6.dp_protocol_minor =",
          "218:        RDS_PROTOCOL_MINOR(protocol_version);",
          "219:    dp->ricp_v6.dp_protocol_minor_mask =",
          "220:        cpu_to_be16(RDS_IB_SUPPORTED_PROTOCOLS);",
          "221:    dp->ricp_v6.dp_ack_seq =",
          "222:        cpu_to_be64(rds_ib_piggyb_ack(ic));",
          "224:    conn_param->private_data = &dp->ricp_v6;",
          "225:    conn_param->private_data_len = sizeof(dp->ricp_v6);",
          "226:   } else {",
          "227:    dp->ricp_v4.dp_saddr = conn->c_laddr.s6_addr32[3];",
          "228:    dp->ricp_v4.dp_daddr = conn->c_faddr.s6_addr32[3];",
          "229:    dp->ricp_v4.dp_protocol_major =",
          "230:        RDS_PROTOCOL_MAJOR(protocol_version);",
          "231:    dp->ricp_v4.dp_protocol_minor =",
          "232:        RDS_PROTOCOL_MINOR(protocol_version);",
          "233:    dp->ricp_v4.dp_protocol_minor_mask =",
          "234:        cpu_to_be16(RDS_IB_SUPPORTED_PROTOCOLS);",
          "235:    dp->ricp_v4.dp_ack_seq =",
          "236:        cpu_to_be64(rds_ib_piggyb_ack(ic));",
          "238:    conn_param->private_data = &dp->ricp_v4;",
          "239:    conn_param->private_data_len = sizeof(dp->ricp_v4);",
          "240:   }",
          "246:    credits = IB_GET_POST_CREDITS",
          "247:     (atomic_read(&ic->i_credits));",
          "248:    if (isv6)",
          "249:     dp->ricp_v6.dp_credit = cpu_to_be32(credits);",
          "250:    else",
          "251:     dp->ricp_v4.dp_credit = cpu_to_be32(credits);",
          "252:    atomic_sub(IB_SET_POST_CREDITS(credits),",
          "253:        &ic->i_credits);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:   break;",
          "350:  default:",
          "351:   rdsdebug(\"Fatal QP Event %u (%s) \"",
          "353:    event->event, ib_event_msg(event->event),",
          "354:    &conn->c_laddr, &conn->c_faddr);",
          "355:   rds_conn_drop(conn);",
          "",
          "[Removed Lines]",
          "352:    \"- connection %pI4->%pI4, reconnecting\\n\",",
          "",
          "[Added Lines]",
          "393:    \"- connection %pI6c->%pI6c, reconnecting\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "580:  return ret;",
          "581: }",
          "584: {",
          "587:  u32 version = 0;",
          "",
          "[Removed Lines]",
          "583: static u32 rds_ib_protocol_compatible(struct rdma_cm_event *event)",
          "585:  const struct rds_ib_connect_private *dp = event->param.conn.private_data;",
          "586:  u16 common;",
          "",
          "[Added Lines]",
          "624: static u32 rds_ib_protocol_compatible(struct rdma_cm_event *event, bool isv6)",
          "626:  const union rds_ib_conn_priv *dp = event->param.conn.private_data;",
          "627:  u8 data_len, major, minor;",
          "629:  __be16 mask;",
          "630:  u16 common;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "603:   return 0;",
          "604:  }",
          "609:   return RDS_PROTOCOL_3_0;",
          "613:   version = RDS_PROTOCOL_3_0;",
          "614:   while ((common >>= 1) != 0)",
          "615:    version++;",
          "621:  return version;",
          "622: }",
          "624: int rds_ib_cm_handle_connect(struct rdma_cm_id *cm_id,",
          "626: {",
          "627:  __be64 lguid = cm_id->route.path_rec->sgid.global.interface_id;",
          "628:  __be64 fguid = cm_id->route.path_rec->dgid.global.interface_id;",
          "631:  struct rds_connection *conn = NULL;",
          "632:  struct rds_ib_connection *ic = NULL;",
          "633:  struct rdma_conn_param conn_param;",
          "634:  u32 version;",
          "639:  if (!version)",
          "640:   goto out;",
          "644:    RDS_PROTOCOL_MAJOR(version), RDS_PROTOCOL_MINOR(version),",
          "645:    (unsigned long long)be64_to_cpu(lguid),",
          "646:    (unsigned long long)be64_to_cpu(fguid));",
          "651:  if (IS_ERR(conn)) {",
          "652:   rdsdebug(\"rds_conn_create failed (%ld)\\n\", PTR_ERR(conn));",
          "653:   conn = NULL;",
          "",
          "[Removed Lines]",
          "607:  if (event->param.conn.private_data_len < sizeof (*dp) ||",
          "608:      dp->dp_protocol_major == 0)",
          "611:  common = be16_to_cpu(dp->dp_protocol_minor_mask) & RDS_IB_SUPPORTED_PROTOCOLS;",
          "612:  if (dp->dp_protocol_major == 3 && common) {",
          "616:  } else",
          "617:   printk_ratelimited(KERN_NOTICE \"RDS: Connection from %pI4 using incompatible protocol version %u.%u\\n\",",
          "618:     &dp->dp_saddr,",
          "619:     dp->dp_protocol_major,",
          "620:     dp->dp_protocol_minor);",
          "625:         struct rdma_cm_event *event)",
          "629:  const struct rds_ib_connect_private *dp = event->param.conn.private_data;",
          "630:  struct rds_ib_connect_private dp_rep;",
          "635:  int err = 1, destroy = 1;",
          "638:  version = rds_ib_protocol_compatible(event);",
          "642:  rdsdebug(\"saddr %pI4 daddr %pI4 RDSv%u.%u lguid 0x%llx fguid \"",
          "643:    \"0x%llx\\n\", &dp->dp_saddr, &dp->dp_daddr,",
          "649:  conn = rds_conn_create(&init_net, dp->dp_daddr, dp->dp_saddr,",
          "650:           &rds_ib_transport, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "649:  if (isv6) {",
          "650:   data_len = sizeof(struct rds6_ib_connect_private);",
          "651:   major = dp->ricp_v6.dp_protocol_major;",
          "652:   minor = dp->ricp_v6.dp_protocol_minor;",
          "653:   mask = dp->ricp_v6.dp_protocol_minor_mask;",
          "654:  } else {",
          "655:   data_len = sizeof(struct rds_ib_connect_private);",
          "656:   major = dp->ricp_v4.dp_protocol_major;",
          "657:   minor = dp->ricp_v4.dp_protocol_minor;",
          "658:   mask = dp->ricp_v4.dp_protocol_minor_mask;",
          "659:  }",
          "662:  if (event->param.conn.private_data_len < data_len || major == 0)",
          "665:  common = be16_to_cpu(mask) & RDS_IB_SUPPORTED_PROTOCOLS;",
          "666:  if (major == 3 && common) {",
          "670:  } else {",
          "671:   if (isv6)",
          "672:    printk_ratelimited(KERN_NOTICE \"RDS: Connection from %pI6c using incompatible protocol version %u.%u\\n\",",
          "673:         &dp->ricp_v6.dp_saddr, major, minor);",
          "674:   else",
          "675:    printk_ratelimited(KERN_NOTICE \"RDS: Connection from %pI4 using incompatible protocol version %u.%u\\n\",",
          "676:         &dp->ricp_v4.dp_saddr, major, minor);",
          "677:  }",
          "691: static u32 __rds_find_ifindex(struct net *net, const struct in6_addr *addr)",
          "692: {",
          "693:  struct net_device *dev;",
          "694:  int idx = 0;",
          "696:  rcu_read_lock();",
          "697:  for_each_netdev_rcu(net, dev) {",
          "698:   if (dev->type == ARPHRD_INFINIBAND &&",
          "699:       ipv6_chk_addr(net, addr, dev, 0)) {",
          "700:    idx = dev->ifindex;",
          "701:    break;",
          "702:   }",
          "703:  }",
          "704:  rcu_read_unlock();",
          "706:  return idx;",
          "707: }",
          "710:         struct rdma_cm_event *event, bool isv6)",
          "714:  const struct rds_ib_conn_priv_cmn *dp_cmn;",
          "718:  const union rds_ib_conn_priv *dp;",
          "719:  union rds_ib_conn_priv dp_rep;",
          "720:  struct in6_addr s_mapped_addr;",
          "721:  struct in6_addr d_mapped_addr;",
          "722:  const struct in6_addr *saddr6;",
          "723:  const struct in6_addr *daddr6;",
          "724:  int destroy = 1;",
          "725:  u32 ifindex = 0;",
          "727:  int err = 1;",
          "730:  version = rds_ib_protocol_compatible(event, isv6);",
          "734:  dp = event->param.conn.private_data;",
          "735:  if (isv6) {",
          "736:   dp_cmn = &dp->ricp_v6.dp_cmn;",
          "737:   saddr6 = &dp->ricp_v6.dp_saddr;",
          "738:   daddr6 = &dp->ricp_v6.dp_daddr;",
          "743:   if (ipv6_addr_type(daddr6) & IPV6_ADDR_LINKLOCAL) {",
          "745:    ifindex = __rds_find_ifindex(&init_net, daddr6);",
          "747:    if (ifindex == 0) {",
          "748:     err = -EOPNOTSUPP;",
          "749:     goto out;",
          "750:    }",
          "751:   }",
          "752:  } else {",
          "753:   dp_cmn = &dp->ricp_v4.dp_cmn;",
          "754:   ipv6_addr_set_v4mapped(dp->ricp_v4.dp_saddr, &s_mapped_addr);",
          "755:   ipv6_addr_set_v4mapped(dp->ricp_v4.dp_daddr, &d_mapped_addr);",
          "756:   saddr6 = &s_mapped_addr;",
          "757:   daddr6 = &d_mapped_addr;",
          "758:  }",
          "760:  rdsdebug(\"saddr %pI6c daddr %pI6c RDSv%u.%u lguid 0x%llx fguid \"",
          "761:    \"0x%llx\\n\", saddr6, daddr6,",
          "767:  conn = rds_conn_create(&init_net, daddr6, saddr6,",
          "768:           &rds_ib_transport, GFP_KERNEL, ifindex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "678:  ic = conn->c_transport_data;",
          "680:  rds_ib_set_protocol(conn, version);",
          "688:  BUG_ON(cm_id->context);",
          "689:  BUG_ON(ic->i_cm_id);",
          "",
          "[Removed Lines]",
          "681:  rds_ib_set_flow_control(conn, be32_to_cpu(dp->dp_credit));",
          "685:  if (dp->dp_ack_seq)",
          "686:   rds_send_drop_acked(conn, be64_to_cpu(dp->dp_ack_seq), NULL);",
          "",
          "[Added Lines]",
          "799:  rds_ib_set_flow_control(conn, be32_to_cpu(dp_cmn->ricpc_credit));",
          "803:  if (dp_cmn->ricpc_ack_seq)",
          "804:   rds_send_drop_acked(conn, be64_to_cpu(dp_cmn->ricpc_ack_seq),",
          "805:         NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "702:  }",
          "704:  rds_ib_cm_fill_conn_param(conn, &conn_param, &dp_rep, version,",
          "709:  if (rdma_accept(cm_id, &conn_param))",
          "",
          "[Removed Lines]",
          "705:   event->param.conn.responder_resources,",
          "706:   event->param.conn.initiator_depth);",
          "",
          "[Added Lines]",
          "824:       event->param.conn.responder_resources,",
          "825:       event->param.conn.initiator_depth, isv6);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "718: }",
          "722: {",
          "723:  struct rds_connection *conn = cm_id->context;",
          "724:  struct rds_ib_connection *ic = conn->c_transport_data;",
          "725:  struct rdma_conn_param conn_param;",
          "727:  int ret;",
          "",
          "[Removed Lines]",
          "721: int rds_ib_cm_initiate_connect(struct rdma_cm_id *cm_id)",
          "726:  struct rds_ib_connect_private dp;",
          "",
          "[Added Lines]",
          "840: int rds_ib_cm_initiate_connect(struct rdma_cm_id *cm_id, bool isv6)",
          "845:  union rds_ib_conn_priv dp;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "738:  }",
          "740:  rds_ib_cm_fill_conn_param(conn, &conn_param, &dp, RDS_PROTOCOL_VERSION,",
          "742:  ret = rdma_connect(cm_id, &conn_param);",
          "743:  if (ret)",
          "744:   rds_ib_conn_error(conn, \"rdma_connect failed (%d)\\n\", ret);",
          "",
          "[Removed Lines]",
          "741:   UINT_MAX, UINT_MAX);",
          "",
          "[Added Lines]",
          "860:       UINT_MAX, UINT_MAX, isv6);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "758: int rds_ib_conn_path_connect(struct rds_conn_path *cp)",
          "759: {",
          "760:  struct rds_connection *conn = cp->cp_conn;",
          "763:  int ret;",
          "768:          RDMA_PS_TCP, IB_QPT_RC);",
          "769:  if (IS_ERR(ic->i_cm_id)) {",
          "770:   ret = PTR_ERR(ic->i_cm_id);",
          "",
          "[Removed Lines]",
          "761:  struct rds_ib_connection *ic = conn->c_transport_data;",
          "762:  struct sockaddr_in src, dest;",
          "767:  ic->i_cm_id = rdma_create_id(&init_net, rds_rdma_cm_event_handler, conn,",
          "",
          "[Added Lines]",
          "880:  struct sockaddr_storage src, dest;",
          "881:  rdma_cm_event_handler handler;",
          "882:  struct rds_ib_connection *ic;",
          "885:  ic = conn->c_transport_data;",
          "889:  handler = rds_rdma_cm_event_handler;",
          "890:  ic->i_cm_id = rdma_create_id(&init_net, handler, conn,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "776:  rdsdebug(\"created cm id %p for conn %p\\n\", ic->i_cm_id, conn);",
          "786:  ret = rdma_resolve_addr(ic->i_cm_id, (struct sockaddr *)&src,",
          "787:     (struct sockaddr *)&dest,",
          "",
          "[Removed Lines]",
          "778:  src.sin_family = AF_INET;",
          "779:  src.sin_addr.s_addr = (__force u32)conn->c_laddr;",
          "780:  src.sin_port = (__force u16)htons(0);",
          "782:  dest.sin_family = AF_INET;",
          "783:  dest.sin_addr.s_addr = (__force u32)conn->c_faddr;",
          "784:  dest.sin_port = (__force u16)htons(RDS_PORT);",
          "",
          "[Added Lines]",
          "901:  if (ipv6_addr_v4mapped(&conn->c_faddr)) {",
          "902:   struct sockaddr_in *sin;",
          "904:   sin = (struct sockaddr_in *)&src;",
          "905:   sin->sin_family = AF_INET;",
          "906:   sin->sin_addr.s_addr = conn->c_laddr.s6_addr32[3];",
          "907:   sin->sin_port = 0;",
          "909:   sin = (struct sockaddr_in *)&dest;",
          "910:   sin->sin_family = AF_INET;",
          "911:   sin->sin_addr.s_addr = conn->c_faddr.s6_addr32[3];",
          "912:   sin->sin_port = htons(RDS_PORT);",
          "913:  } else {",
          "914:   struct sockaddr_in6 *sin6;",
          "916:   sin6 = (struct sockaddr_in6 *)&src;",
          "917:   sin6->sin6_family = AF_INET6;",
          "918:   sin6->sin6_addr = conn->c_laddr;",
          "919:   sin6->sin6_port = 0;",
          "920:   sin6->sin6_scope_id = conn->c_dev_if;",
          "922:   sin6 = (struct sockaddr_in6 *)&dest;",
          "923:   sin6->sin6_family = AF_INET6;",
          "924:   sin6->sin6_addr = conn->c_faddr;",
          "925:   sin6->sin6_port = htons(RDS_CM_PORT);",
          "926:   sin6->sin6_scope_id = conn->c_dev_if;",
          "927:  }",
          "",
          "---------------"
        ],
        "net/rds/ib_rdma.c||net/rds/ib_rdma.c": [
          "File: net/rds/ib_rdma.c -> net/rds/ib_rdma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   kfree_rcu(to_free, rcu);",
          "101: }",
          "104: {",
          "105:  struct rds_ib_device *rds_ibdev_old;",
          "108:  if (!rds_ibdev_old)",
          "111:  if (rds_ibdev_old != rds_ibdev) {",
          "113:   rds_ib_dev_put(rds_ibdev_old);",
          "115:  }",
          "116:  rds_ib_dev_put(rds_ibdev_old);",
          "",
          "[Removed Lines]",
          "103: int rds_ib_update_ipaddr(struct rds_ib_device *rds_ibdev, __be32 ipaddr)",
          "107:  rds_ibdev_old = rds_ib_get_device(ipaddr);",
          "109:   return rds_ib_add_ipaddr(rds_ibdev, ipaddr);",
          "112:   rds_ib_remove_ipaddr(rds_ibdev_old, ipaddr);",
          "114:   return rds_ib_add_ipaddr(rds_ibdev, ipaddr);",
          "",
          "[Added Lines]",
          "103: int rds_ib_update_ipaddr(struct rds_ib_device *rds_ibdev,",
          "104:     struct in6_addr *ipaddr)",
          "108:  rds_ibdev_old = rds_ib_get_device(ipaddr->s6_addr32[3]);",
          "110:   return rds_ib_add_ipaddr(rds_ibdev, ipaddr->s6_addr32[3]);",
          "113:   rds_ib_remove_ipaddr(rds_ibdev_old, ipaddr->s6_addr32[3]);",
          "115:   return rds_ib_add_ipaddr(rds_ibdev, ipaddr->s6_addr32[3]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:  struct rds_ib_connection *ic = rs->rs_conn->c_transport_data;",
          "545:  int ret;",
          "548:  if (!rds_ibdev) {",
          "549:   ret = -ENODEV;",
          "550:   goto out;",
          "",
          "[Removed Lines]",
          "547:  rds_ibdev = rds_ib_get_device(rs->rs_bound_addr);",
          "",
          "[Added Lines]",
          "548:  rds_ibdev = rds_ib_get_device(rs->rs_bound_addr.s6_addr32[3]);",
          "",
          "---------------"
        ],
        "net/rds/ib_recv.c||net/rds/ib_recv.c": [
          "File: net/rds/ib_recv.c -> net/rds/ib_recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   rds_ib_stats_inc(s_ib_rx_total_incs);",
          "267:  }",
          "268:  INIT_LIST_HEAD(&ibinc->ii_frags);",
          "271:  return ibinc;",
          "272: }",
          "",
          "[Removed Lines]",
          "269:  rds_inc_init(&ibinc->ii_inc, ic->conn, ic->conn->c_faddr);",
          "",
          "[Added Lines]",
          "269:  rds_inc_init(&ibinc->ii_inc, ic->conn, &ic->conn->c_faddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "418:   ret = ib_post_recv(ic->i_cm_id->qp, &recv->r_wr, &failed_wr);",
          "419:   if (ret) {",
          "420:    rds_ib_conn_error(conn, \"recv post on \"",
          "422:           \"reconnecting\\n\", &conn->c_faddr,",
          "423:           ret);",
          "424:    break;",
          "",
          "[Removed Lines]",
          "421:           \"%pI4 returned %d, disconnecting and \"",
          "",
          "[Added Lines]",
          "421:           \"%pI6c returned %d, disconnecting and \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:  if (data_len < sizeof(struct rds_header)) {",
          "850:   rds_ib_conn_error(conn, \"incoming message \"",
          "852:          \"header, disconnecting and \"",
          "853:          \"reconnecting\\n\",",
          "854:          &conn->c_faddr);",
          "",
          "[Removed Lines]",
          "851:          \"from %pI4 didn't include a \"",
          "",
          "[Added Lines]",
          "851:          \"from %pI6c didn't include a \"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "862:  if (!rds_message_verify_checksum(ihdr)) {",
          "863:   rds_ib_conn_error(conn, \"incoming message \"",
          "865:          \"forcing a reconnect\\n\",",
          "866:          &conn->c_faddr);",
          "867:   rds_stats_inc(s_recv_drop_bad_checksum);",
          "",
          "[Removed Lines]",
          "864:          \"from %pI4 has corrupted header - \"",
          "",
          "[Added Lines]",
          "864:          \"from %pI6c has corrupted header - \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "941:   ic->i_recv_data_rem = 0;",
          "942:   ic->i_ibinc = NULL;",
          "945:    rds_ib_cong_recv(conn, ibinc);",
          "948:        &ibinc->ii_inc, GFP_ATOMIC);",
          "949:    state->ack_next = be64_to_cpu(hdr->h_sequence);",
          "950:    state->ack_next_valid = 1;",
          "",
          "[Removed Lines]",
          "944:   if (ibinc->ii_inc.i_hdr.h_flags == RDS_FLAG_CONG_BITMAP)",
          "946:   else {",
          "947:    rds_recv_incoming(conn, conn->c_faddr, conn->c_laddr,",
          "",
          "[Added Lines]",
          "944:   if (ibinc->ii_inc.i_hdr.h_flags == RDS_FLAG_CONG_BITMAP) {",
          "946:   } else {",
          "947:    rds_recv_incoming(conn, &conn->c_faddr, &conn->c_laddr,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "988:  } else {",
          "990:   if (rds_conn_up(conn) || rds_conn_connecting(conn))",
          "992:        &conn->c_laddr, &conn->c_faddr,",
          "993:        wc->status,",
          "994:        ib_wc_status_msg(wc->status));",
          "",
          "[Removed Lines]",
          "991:    rds_ib_conn_error(conn, \"recv completion on <%pI4,%pI4> had status %u (%s), disconnecting and reconnecting\\n\",",
          "",
          "[Added Lines]",
          "991:    rds_ib_conn_error(conn, \"recv completion on <%pI6c,%pI6c> had status %u (%s), disconnecting and reconnecting\\n\",",
          "",
          "---------------"
        ],
        "net/rds/ib_send.c||net/rds/ib_send.c": [
          "File: net/rds/ib_send.c -> net/rds/ib_send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:  if (wc->status != IB_WC_SUCCESS && rds_conn_up(conn)) {",
          "309:       &conn->c_laddr, &conn->c_faddr, wc->status,",
          "310:       ib_wc_status_msg(wc->status));",
          "311:  }",
          "",
          "[Removed Lines]",
          "308:   rds_ib_conn_error(conn, \"send completion on <%pI4,%pI4> had status %u (%s), disconnecting and reconnecting\\n\",",
          "",
          "[Added Lines]",
          "308:   rds_ib_conn_error(conn, \"send completion on <%pI6c,%pI6c> had status %u (%s), disconnecting and reconnecting\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730:    first, &first->s_wr, ret, failed_wr);",
          "731:  BUG_ON(failed_wr != &first->s_wr);",
          "732:  if (ret) {",
          "734:          \"returned %d\\n\", &conn->c_faddr, ret);",
          "735:   rds_ib_ring_unalloc(&ic->i_send_ring, work_alloc);",
          "736:   rds_ib_sub_signaled(ic, nr_sig);",
          "",
          "[Removed Lines]",
          "733:   printk(KERN_WARNING \"RDS/IB: ib_post_send to %pI4 \"",
          "",
          "[Added Lines]",
          "733:   printk(KERN_WARNING \"RDS/IB: ib_post_send to %pI6c \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827:    send, &send->s_atomic_wr, ret, failed_wr);",
          "828:  BUG_ON(failed_wr != &send->s_atomic_wr.wr);",
          "829:  if (ret) {",
          "831:          \"returned %d\\n\", &conn->c_faddr, ret);",
          "832:   rds_ib_ring_unalloc(&ic->i_send_ring, work_alloc);",
          "833:   rds_ib_sub_signaled(ic, nr_sig);",
          "",
          "[Removed Lines]",
          "830:   printk(KERN_WARNING \"RDS/IB: atomic ib_post_send to %pI4 \"",
          "",
          "[Added Lines]",
          "830:   printk(KERN_WARNING \"RDS/IB: atomic ib_post_send to %pI6c \"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "967:    first, &first->s_rdma_wr.wr, ret, failed_wr);",
          "968:  BUG_ON(failed_wr != &first->s_rdma_wr.wr);",
          "969:  if (ret) {",
          "971:          \"returned %d\\n\", &conn->c_faddr, ret);",
          "972:   rds_ib_ring_unalloc(&ic->i_send_ring, work_alloc);",
          "973:   rds_ib_sub_signaled(ic, nr_sig);",
          "",
          "[Removed Lines]",
          "970:   printk(KERN_WARNING \"RDS/IB: rdma ib_post_send to %pI4 \"",
          "",
          "[Added Lines]",
          "970:   printk(KERN_WARNING \"RDS/IB: rdma ib_post_send to %pI6c \"",
          "",
          "---------------"
        ],
        "net/rds/loop.c||net/rds/loop.c": [
          "File: net/rds/loop.c -> net/rds/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <linux/in.h>",
          "36: #include <net/net_namespace.h>",
          "37: #include <net/netns/generic.h>",
          "39: #include \"rds_single_path.h\"",
          "40: #include \"rds.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <linux/ipv6.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  BUG_ON(hdr_off || sg || off);",
          "93:  rds_message_addref(rm);",
          "96:      GFP_KERNEL);",
          "98:  rds_send_drop_acked(conn, be64_to_cpu(rm->m_inc.i_hdr.h_sequence),",
          "",
          "[Removed Lines]",
          "91:  rds_inc_init(&rm->m_inc, conn, conn->c_laddr);",
          "95:  rds_recv_incoming(conn, conn->c_laddr, conn->c_faddr, &rm->m_inc,",
          "",
          "[Added Lines]",
          "92:  rds_inc_init(&rm->m_inc, conn, &conn->c_laddr);",
          "96:  rds_recv_incoming(conn, &conn->c_laddr, &conn->c_faddr, &rm->m_inc,",
          "",
          "---------------"
        ],
        "net/rds/rdma.c||net/rds/rdma.c": [
          "File: net/rds/rdma.c -> net/rds/rdma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  long i;",
          "184:  int ret;",
          "188:   goto out;",
          "189:  }",
          "",
          "[Removed Lines]",
          "186:  if (rs->rs_bound_addr == 0 || !rs->rs_transport) {",
          "",
          "[Added Lines]",
          "186:  if (ipv6_addr_any(&rs->rs_bound_addr) || !rs->rs_transport) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575:  args = CMSG_DATA(cmsg);",
          "579:   goto out_ret;",
          "580:  }",
          "",
          "[Removed Lines]",
          "577:  if (rs->rs_bound_addr == 0) {",
          "",
          "[Added Lines]",
          "577:  if (ipv6_addr_any(&rs->rs_bound_addr)) {",
          "",
          "---------------"
        ],
        "net/rds/rdma_transport.c||net/rds/rdma_transport.c": [
          "File: net/rds/rdma_transport.c -> net/rds/rdma_transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: static struct rdma_cm_id *rds_rdma_listen_id;",
          "44: {",
          "46:  struct rds_connection *conn = cm_id->context;",
          "",
          "[Removed Lines]",
          "42: int rds_rdma_cm_event_handler(struct rdma_cm_id *cm_id,",
          "43:          struct rdma_cm_event *event)",
          "",
          "[Added Lines]",
          "42: static int rds_rdma_cm_event_handler_cmn(struct rdma_cm_id *cm_id,",
          "43:       struct rdma_cm_event *event,",
          "44:       bool isv6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  switch (event->event) {",
          "74:  case RDMA_CM_EVENT_CONNECT_REQUEST:",
          "76:   break;",
          "78:  case RDMA_CM_EVENT_ADDR_RESOLVED:",
          "",
          "[Removed Lines]",
          "75:   ret = trans->cm_handle_connect(cm_id, event);",
          "",
          "[Added Lines]",
          "76:   ret = trans->cm_handle_connect(cm_id, event, isv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:    ibic = conn->c_transport_data;",
          "92:    if (ibic && ibic->i_cm_id == cm_id)",
          "94:    else",
          "95:     rds_conn_drop(conn);",
          "96:   }",
          "",
          "[Removed Lines]",
          "93:     ret = trans->cm_initiate_connect(cm_id);",
          "",
          "[Added Lines]",
          "94:     ret = trans->cm_initiate_connect(cm_id, isv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:  case RDMA_CM_EVENT_DISCONNECTED:",
          "118:   rdsdebug(\"DISCONNECT event - dropping connection \"",
          "120:     &conn->c_faddr);",
          "121:   rds_conn_drop(conn);",
          "122:   break;",
          "124:  case RDMA_CM_EVENT_TIMEWAIT_EXIT:",
          "125:   if (conn) {",
          "127:     &conn->c_laddr, &conn->c_faddr);",
          "128:    rds_conn_drop(conn);",
          "129:   }",
          "",
          "[Removed Lines]",
          "119:    \"%pI4->%pI4\\n\", &conn->c_laddr,",
          "126:    pr_info(\"RDS: RDMA_CM_EVENT_TIMEWAIT_EXIT event: dropping connection %pI4->%pI4\\n\",",
          "",
          "[Added Lines]",
          "120:     \"%pI6c->%pI6c\\n\", &conn->c_laddr,",
          "127:    pr_info(\"RDS: RDMA_CM_EVENT_TIMEWAIT_EXIT event: dropping connection %pI6c->%pI6c\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:  return ret;",
          "147: }",
          "150: {",
          "152:  struct rdma_cm_id *cm_id;",
          "153:  int ret;",
          "156:           RDMA_PS_TCP, IB_QPT_RC);",
          "157:  if (IS_ERR(cm_id)) {",
          "158:   ret = PTR_ERR(cm_id);",
          "",
          "[Removed Lines]",
          "149: static int rds_rdma_listen_init(void)",
          "151:  struct sockaddr_in sin;",
          "155:  cm_id = rdma_create_id(&init_net, rds_rdma_cm_event_handler, NULL,",
          "",
          "[Added Lines]",
          "150: int rds_rdma_cm_event_handler(struct rdma_cm_id *cm_id,",
          "151:          struct rdma_cm_event *event)",
          "152: {",
          "153:  return rds_rdma_cm_event_handler_cmn(cm_id, event, false);",
          "154: }",
          "156: static int rds_rdma_listen_init_common(rdma_cm_event_handler handler,",
          "157:            struct sockaddr *sa,",
          "158:            struct rdma_cm_id **ret_cm_id)",
          "163:  cm_id = rdma_create_id(&init_net, handler, NULL,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:   return ret;",
          "162:  }",
          "173:  if (ret) {",
          "174:   printk(KERN_ERR \"RDS/RDMA: failed to setup listener, \"",
          "175:          \"rdma_bind_addr() returned %d\\n\", ret);",
          "",
          "[Removed Lines]",
          "164:  sin.sin_family = AF_INET;",
          "165:  sin.sin_addr.s_addr = (__force u32)htonl(INADDR_ANY);",
          "166:  sin.sin_port = (__force u16)htons(RDS_PORT);",
          "172:  ret = rdma_bind_addr(cm_id, (struct sockaddr *)&sin);",
          "",
          "[Added Lines]",
          "176:  ret = rdma_bind_addr(cm_id, sa);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:  rdsdebug(\"cm %p listening on port %u\\n\", cm_id, RDS_PORT);",
          "189:  cm_id = NULL;",
          "190: out:",
          "191:  if (cm_id)",
          "",
          "[Removed Lines]",
          "188:  rds_rdma_listen_id = cm_id;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "193:  return ret;",
          "194: }",
          "196: static void rds_rdma_listen_stop(void)",
          "197: {",
          "198:  if (rds_rdma_listen_id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: static int rds_rdma_listen_init(void)",
          "207: {",
          "208:  int ret;",
          "209:  struct sockaddr_in sin;",
          "211:  sin.sin_family = PF_INET;",
          "212:  sin.sin_addr.s_addr = htonl(INADDR_ANY);",
          "213:  sin.sin_port = htons(RDS_PORT);",
          "214:  ret = rds_rdma_listen_init_common(rds_rdma_cm_event_handler,",
          "215:        (struct sockaddr *)&sin,",
          "216:        &rds_rdma_listen_id);",
          "217:  return ret;",
          "218: }",
          "",
          "---------------"
        ],
        "net/rds/rds.h||net/rds/rds.h": [
          "File: net/rds/rds.h -> net/rds/rds.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <linux/rds.h>",
          "11: #include <linux/rhashtable.h>",
          "12: #include <linux/refcount.h>",
          "14: #include \"info.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <linux/in6.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #define RDS_PORT 18634",
          "34: #ifdef ATOMIC64_INIT",
          "35: #define KERNEL_HAS_ATOMIC64",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #define RDS_CM_PORT 16385",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: struct rds_cong_map {",
          "63:  struct rb_node  m_rb_node;",
          "65:  wait_queue_head_t m_waitq;",
          "66:  struct list_head m_conn_list;",
          "67:  unsigned long  m_page_addrs[RDS_CONG_MAP_PAGES];",
          "",
          "[Removed Lines]",
          "64:  __be32   m_addr;",
          "",
          "[Added Lines]",
          "66:  struct in6_addr  m_addr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137: struct rds_connection {",
          "138:  struct hlist_node c_hash_node;",
          "141:  unsigned int  c_loopback:1,",
          "142:     c_ping_triggered:1,",
          "144:  int   c_npaths;",
          "145:  struct rds_connection *c_passive;",
          "146:  struct rds_transport *c_trans;",
          "",
          "[Removed Lines]",
          "139:  __be32   c_laddr;",
          "140:  __be32   c_faddr;",
          "143:     c_pad_to_32:30;",
          "",
          "[Added Lines]",
          "141:  struct in6_addr  c_laddr;",
          "142:  struct in6_addr  c_faddr;",
          "145:     c_isv6:1,",
          "147:     c_pad_to_32:29;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:  struct rds_conn_path *i_conn_path;",
          "270:  struct rds_header i_hdr;",
          "271:  unsigned long  i_rx_jiffies;",
          "274:  rds_rdma_cookie_t i_rdma_cookie;",
          "275:  struct timeval  i_rx_tstamp;",
          "",
          "[Removed Lines]",
          "272:  __be32   i_saddr;",
          "",
          "[Added Lines]",
          "276:  struct in6_addr  i_saddr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "386:  struct list_head m_conn_item;",
          "387:  struct rds_incoming m_inc;",
          "388:  u64   m_ack_seq;",
          "390:  unsigned long  m_flags;",
          "",
          "[Removed Lines]",
          "389:  __be32   m_daddr;",
          "",
          "[Added Lines]",
          "393:  struct in6_addr  m_daddr;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "519:     t_mp_capable:1;",
          "520:  unsigned int  t_type;",
          "523:  int (*conn_alloc)(struct rds_connection *conn, gfp_t gfp);",
          "524:  void (*conn_free)(void *data);",
          "525:  int (*conn_path_connect)(struct rds_conn_path *cp);",
          "",
          "[Removed Lines]",
          "522:  int (*laddr_check)(struct net *net, __be32 addr);",
          "",
          "[Added Lines]",
          "526:  int (*laddr_check)(struct net *net, const struct in6_addr *addr,",
          "527:       __u32 scope_id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "535:  void (*inc_free)(struct rds_incoming *inc);",
          "537:  int (*cm_handle_connect)(struct rdma_cm_id *cm_id,",
          "540:  void (*cm_connect_complete)(struct rds_connection *conn,",
          "541:         struct rdma_cm_event *event);",
          "",
          "[Removed Lines]",
          "538:      struct rdma_cm_event *event);",
          "539:  int (*cm_initiate_connect)(struct rdma_cm_id *cm_id);",
          "",
          "[Added Lines]",
          "543:      struct rdma_cm_event *event, bool isv6);",
          "544:  int (*cm_initiate_connect)(struct rdma_cm_id *cm_id, bool isv6);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "551:  bool (*t_unloading)(struct rds_connection *conn);",
          "552: };",
          "554: struct rds_sock {",
          "555:  struct sock  rs_sk;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562: #define RDS_BOUND_KEY_LEN \\",
          "563:  (sizeof(struct in6_addr) + sizeof(__u32) + sizeof(__be16))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "564:  struct rhash_head rs_bound_node;",
          "569:  __be16   rs_conn_port;",
          "570:  struct rds_transport    *rs_transport;",
          "",
          "[Removed Lines]",
          "565:  u64   rs_bound_key;",
          "566:  __be32   rs_bound_addr;",
          "567:  __be32   rs_conn_addr;",
          "568:  __be16   rs_bound_port;",
          "",
          "[Added Lines]",
          "576:  u8   rs_bound_key[RDS_BOUND_KEY_LEN];",
          "577:  struct sockaddr_in6 rs_bound_sin6;",
          "578: #define rs_bound_addr  rs_bound_sin6.sin6_addr",
          "579: #define rs_bound_addr_v4 rs_bound_sin6.sin6_addr.s6_addr32[3]",
          "580: #define rs_bound_port  rs_bound_sin6.sin6_port",
          "581: #define rs_bound_scope_id rs_bound_sin6.sin6_scope_id",
          "582:  struct in6_addr  rs_conn_addr;",
          "583: #define rs_conn_addr_v4  rs_conn_addr.s6_addr32[3]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "702: int rds_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len);",
          "703: void rds_remove_bound(struct rds_sock *rs);",
          "705: int rds_bind_lock_init(void);",
          "706: void rds_bind_lock_destroy(void);",
          "",
          "[Removed Lines]",
          "704: struct rds_sock *rds_find_bound(__be32 addr, __be16 port);",
          "",
          "[Added Lines]",
          "719: struct rds_sock *rds_find_bound(const struct in6_addr *addr, __be16 port,",
          "720:     __u32 scope_id);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "725: int rds_conn_init(void);",
          "726: void rds_conn_exit(void);",
          "727: struct rds_connection *rds_conn_create(struct net *net,",
          "730: struct rds_connection *rds_conn_create_outgoing(struct net *net,",
          "733: void rds_conn_shutdown(struct rds_conn_path *cpath);",
          "734: void rds_conn_destroy(struct rds_connection *conn);",
          "735: void rds_conn_drop(struct rds_connection *conn);",
          "",
          "[Removed Lines]",
          "728:            __be32 laddr, __be32 faddr,",
          "729:            struct rds_transport *trans, gfp_t gfp);",
          "731:       __be32 laddr, __be32 faddr,",
          "732:           struct rds_transport *trans, gfp_t gfp);",
          "",
          "[Added Lines]",
          "744:            const struct in6_addr *laddr,",
          "745:            const struct in6_addr *faddr,",
          "746:            struct rds_transport *trans, gfp_t gfp,",
          "747:            int dev_if);",
          "749:       const struct in6_addr *laddr,",
          "750:       const struct in6_addr *faddr,",
          "751:       struct rds_transport *trans,",
          "752:       gfp_t gfp, int dev_if);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842: void rds_inc_init(struct rds_incoming *inc, struct rds_connection *conn,",
          "844: void rds_inc_path_init(struct rds_incoming *inc, struct rds_conn_path *conn,",
          "846: void rds_inc_put(struct rds_incoming *inc);",
          "848:          struct rds_incoming *inc, gfp_t gfp);",
          "849: int rds_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,",
          "850:   int msg_flags);",
          "",
          "[Removed Lines]",
          "843:     __be32 saddr);",
          "845:          __be32 saddr);",
          "847: void rds_recv_incoming(struct rds_connection *conn, __be32 saddr, __be32 daddr,",
          "",
          "[Added Lines]",
          "863:     struct in6_addr *saddr);",
          "865:          struct in6_addr *saddr);",
          "867: void rds_recv_incoming(struct rds_connection *conn, struct in6_addr *saddr,",
          "868:          struct in6_addr *daddr,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "859: void rds_send_path_reset(struct rds_conn_path *conn);",
          "860: int rds_send_xmit(struct rds_conn_path *cp);",
          "861: struct sockaddr_in;",
          "863: typedef int (*is_acked_func)(struct rds_message *rm, uint64_t ack);",
          "864: void rds_send_drop_acked(struct rds_connection *conn, u64 ack,",
          "865:     is_acked_func is_acked);",
          "",
          "[Removed Lines]",
          "862: void rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in *dest);",
          "",
          "[Added Lines]",
          "883: void rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in6 *dest);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "946: void rds_recv_worker(struct work_struct *);",
          "947: void rds_connect_path_complete(struct rds_conn_path *conn, int curr);",
          "948: void rds_connect_complete(struct rds_connection *conn);",
          "951: void rds_trans_register(struct rds_transport *trans);",
          "952: void rds_trans_unregister(struct rds_transport *trans);",
          "954: void rds_trans_put(struct rds_transport *trans);",
          "955: unsigned int rds_trans_stats_info_copy(struct rds_info_iterator *iter,",
          "956:            unsigned int avail);",
          "",
          "[Removed Lines]",
          "953: struct rds_transport *rds_trans_get_preferred(struct net *net, __be32 addr);",
          "",
          "[Added Lines]",
          "970: int rds_addr_cmp(const struct in6_addr *a1, const struct in6_addr *a2);",
          "975: struct rds_transport *rds_trans_get_preferred(struct net *net,",
          "976:            const struct in6_addr *addr,",
          "977:            __u32 scope_id);",
          "",
          "---------------"
        ],
        "net/rds/recv.c||net/rds/recv.c": [
          "File: net/rds/recv.c -> net/rds/recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"rds.h\"",
          "43: void rds_inc_init(struct rds_incoming *inc, struct rds_connection *conn,",
          "45: {",
          "46:  int i;",
          "48:  refcount_set(&inc->i_refcount, 1);",
          "49:  INIT_LIST_HEAD(&inc->i_item);",
          "50:  inc->i_conn = conn;",
          "52:  inc->i_rdma_cookie = 0;",
          "53:  inc->i_rx_tstamp.tv_sec = 0;",
          "54:  inc->i_rx_tstamp.tv_usec = 0;",
          "",
          "[Removed Lines]",
          "44:     __be32 saddr)",
          "51:  inc->i_saddr = saddr;",
          "",
          "[Added Lines]",
          "44:    struct in6_addr *saddr)",
          "51:  inc->i_saddr = *saddr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: EXPORT_SYMBOL_GPL(rds_inc_init);",
          "61: void rds_inc_path_init(struct rds_incoming *inc, struct rds_conn_path *cp,",
          "63: {",
          "64:  refcount_set(&inc->i_refcount, 1);",
          "65:  INIT_LIST_HEAD(&inc->i_item);",
          "66:  inc->i_conn = cp->cp_conn;",
          "67:  inc->i_conn_path = cp;",
          "69:  inc->i_rdma_cookie = 0;",
          "70:  inc->i_rx_tstamp.tv_sec = 0;",
          "71:  inc->i_rx_tstamp.tv_usec = 0;",
          "",
          "[Removed Lines]",
          "62:          __be32 saddr)",
          "68:  inc->i_saddr = saddr;",
          "",
          "[Added Lines]",
          "62:          struct in6_addr  *saddr)",
          "68:  inc->i_saddr = *saddr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:  now_congested = rs->rs_rcv_bytes > rds_sk_rcvbuf(rs);",
          "114:    \"now_cong %d delta %d\\n\",",
          "115:    rs, &rs->rs_bound_addr,",
          "116:    ntohs(rs->rs_bound_port), rs->rs_rcv_bytes,",
          "",
          "[Removed Lines]",
          "113:  rdsdebug(\"rs %p (%pI4:%u) recv bytes %d buf %d \"",
          "",
          "[Added Lines]",
          "113:  rdsdebug(\"rs %p (%pI6c:%u) recv bytes %d buf %d \"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:  struct rds_conn_path *cp;",
          "262:  if (conn->c_npaths > 1 &&",
          "264:   for (i = 0; i < conn->c_npaths; i++) {",
          "265:    cp = &conn->c_path[i];",
          "266:    rds_conn_path_connect_if_down(cp);",
          "",
          "[Removed Lines]",
          "263:      IS_CANONICAL(conn->c_laddr, conn->c_faddr)) {",
          "",
          "[Added Lines]",
          "263:      rds_addr_cmp(&conn->c_laddr, &conn->c_faddr) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:          struct rds_incoming *inc, gfp_t gfp)",
          "289: {",
          "290:  struct rds_sock *rs = NULL;",
          "",
          "[Removed Lines]",
          "287: void rds_recv_incoming(struct rds_connection *conn, __be32 saddr, __be32 daddr,",
          "",
          "[Added Lines]",
          "287: void rds_recv_incoming(struct rds_connection *conn, struct in6_addr *saddr,",
          "288:          struct in6_addr *daddr,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "340:  if (rds_sysctl_ping_enable && inc->i_hdr.h_dport == 0) {",
          "341:   if (inc->i_hdr.h_sport == 0) {",
          "343:    goto out;",
          "344:   }",
          "345:   rds_stats_inc(s_recv_ping);",
          "",
          "[Removed Lines]",
          "342:    rdsdebug(\"ignore ping with 0 sport from 0x%x\\n\", saddr);",
          "",
          "[Added Lines]",
          "343:    rdsdebug(\"ignore ping with 0 sport from %pI6c\\n\",",
          "344:      saddr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "362:   goto out;",
          "363:  }",
          "366:  if (!rs) {",
          "367:   rds_stats_inc(s_recv_drop_no_sock);",
          "368:   goto out;",
          "",
          "[Removed Lines]",
          "365:  rs = rds_find_bound(daddr, inc->i_hdr.h_dport);",
          "",
          "[Added Lines]",
          "367:  rs = rds_find_bound(daddr, inc->i_hdr.h_dport, conn->c_dev_if);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "625:  struct rds_sock *rs = rds_sk_to_rs(sk);",
          "626:  long timeo;",
          "627:  int ret = 0, nonblock = msg_flags & MSG_DONTWAIT;",
          "628:  DECLARE_SOCKADDR(struct sockaddr_in *, sin, msg->msg_name);",
          "629:  struct rds_incoming *inc = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "673:    break;",
          "674:   }",
          "677:     &inc->i_conn->c_faddr,",
          "678:     ntohs(inc->i_hdr.h_sport));",
          "679:   ret = inc->i_conn->c_trans->inc_copy_to_user(inc, &msg->msg_iter);",
          "",
          "[Removed Lines]",
          "676:   rdsdebug(\"copying inc %p from %pI4:%u to user\\n\", inc,",
          "",
          "[Added Lines]",
          "679:   rdsdebug(\"copying inc %p from %pI6c:%u to user\\n\", inc,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "708:   rds_stats_inc(s_recv_delivered);",
          "716:   }",
          "717:   break;",
          "718:  }",
          "",
          "[Removed Lines]",
          "710:   if (sin) {",
          "711:    sin->sin_family = AF_INET;",
          "712:    sin->sin_port = inc->i_hdr.h_sport;",
          "713:    sin->sin_addr.s_addr = inc->i_saddr;",
          "714:    memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "715:    msg->msg_namelen = sizeof(*sin);",
          "",
          "[Added Lines]",
          "713:   if (msg->msg_name) {",
          "714:    if (ipv6_addr_v4mapped(&inc->i_saddr)) {",
          "715:     sin = (struct sockaddr_in *)msg->msg_name;",
          "717:     sin->sin_family = AF_INET;",
          "718:     sin->sin_port = inc->i_hdr.h_sport;",
          "719:     sin->sin_addr.s_addr =",
          "720:         inc->i_saddr.s6_addr32[3];",
          "721:     memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "722:     msg->msg_namelen = sizeof(*sin);",
          "723:    } else {",
          "724:     sin6 = (struct sockaddr_in6 *)msg->msg_name;",
          "726:     sin6->sin6_family = AF_INET6;",
          "727:     sin6->sin6_port = inc->i_hdr.h_sport;",
          "728:     sin6->sin6_addr = inc->i_saddr;",
          "729:     sin6->sin6_flowinfo = 0;",
          "730:     sin6->sin6_scope_id = rs->rs_bound_scope_id;",
          "731:     msg->msg_namelen = sizeof(*sin6);",
          "732:    }",
          "",
          "---------------"
        ],
        "net/rds/send.c||net/rds/send.c": [
          "File: net/rds/send.c -> net/rds/send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709: }",
          "710: EXPORT_SYMBOL_GPL(rds_send_drop_acked);",
          "713: {",
          "714:  struct rds_message *rm, *tmp;",
          "715:  struct rds_connection *conn;",
          "",
          "[Removed Lines]",
          "712: void rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in *dest)",
          "",
          "[Added Lines]",
          "712: void rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in6 *dest)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:  spin_lock_irqsave(&rs->rs_lock, flags);",
          "723:  list_for_each_entry_safe(rm, tmp, &rs->rs_send_queue, m_sock_item) {",
          "726:    continue;",
          "728:   list_move(&rm->m_sock_item, &list);",
          "",
          "[Removed Lines]",
          "724:   if (dest && (dest->sin_addr.s_addr != rm->m_daddr ||",
          "725:         dest->sin_port != rm->m_inc.i_hdr.h_dport))",
          "",
          "[Added Lines]",
          "724:   if (dest &&",
          "725:       (!ipv6_addr_equal(&dest->sin6_addr, &rm->m_daddr) ||",
          "726:        dest->sin6_port != rm->m_inc.i_hdr.h_dport))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1059: {",
          "1060:  struct sock *sk = sock->sk;",
          "1061:  struct rds_sock *rs = rds_sk_to_rs(sk);",
          "1062:  DECLARE_SOCKADDR(struct sockaddr_in *, usin, msg->msg_name);",
          "1064:  __be16 dport;",
          "1065:  struct rds_message *rm = NULL;",
          "1066:  struct rds_connection *conn;",
          "",
          "[Removed Lines]",
          "1063:  __be32 daddr;",
          "",
          "[Added Lines]",
          "1063:  DECLARE_SOCKADDR(struct sockaddr_in6 *, sin6, msg->msg_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1069:  int nonblock = msg->msg_flags & MSG_DONTWAIT;",
          "1070:  long timeo = sock_sndtimeo(sk, nonblock);",
          "1071:  struct rds_conn_path *cpath;",
          "1072:  size_t total_payload_len = payload_len, rdma_payload_len = 0;",
          "1073:  bool zcopy = ((msg->msg_flags & MSG_ZEROCOPY) &&",
          "1074:         sock_flag(rds_rs_to_sk(rs), SOCK_ZEROCOPY));",
          "1075:  int num_sgs = ceil(payload_len, PAGE_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1073:  struct in6_addr daddr;",
          "1074:  __u32 scope_id = 0;",
          "1079:  int namelen;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1081:   goto out;",
          "1082:  }",
          "1087:    ret = -EINVAL;",
          "1088:    goto out;",
          "1089:   }",
          "1092:  } else {",
          "1094:   lock_sock(sk);",
          "1095:   daddr = rs->rs_conn_addr;",
          "1096:   dport = rs->rs_conn_port;",
          "1097:   release_sock(sk);",
          "1098:  }",
          "1100:  lock_sock(sk);",
          "1102:   release_sock(sk);",
          "1104:   goto out;",
          "1105:  }",
          "1106:  release_sock(sk);",
          "",
          "[Removed Lines]",
          "1084:  if (msg->msg_namelen) {",
          "1086:   if (msg->msg_namelen < sizeof(*usin) || usin->sin_family != AF_INET) {",
          "1090:   daddr = usin->sin_addr.s_addr;",
          "1091:   dport = usin->sin_port;",
          "1101:  if (daddr == 0 || rs->rs_bound_addr == 0) {",
          "",
          "[Added Lines]",
          "1088:  namelen = msg->msg_namelen;",
          "1089:  if (namelen != 0) {",
          "1090:   if (namelen < sizeof(*usin)) {",
          "1091:    ret = -EINVAL;",
          "1092:    goto out;",
          "1093:   }",
          "1094:   switch (namelen) {",
          "1095:   case sizeof(*usin):",
          "1096:    if (usin->sin_family != AF_INET ||",
          "1097:        usin->sin_addr.s_addr == htonl(INADDR_ANY) ||",
          "1098:        usin->sin_addr.s_addr == htonl(INADDR_BROADCAST) ||",
          "1099:        IN_MULTICAST(ntohl(usin->sin_addr.s_addr))) {",
          "1100:     ret = -EINVAL;",
          "1101:     goto out;",
          "1102:    }",
          "1103:    ipv6_addr_set_v4mapped(usin->sin_addr.s_addr, &daddr);",
          "1104:    dport = usin->sin_port;",
          "1105:    break;",
          "1107:   case sizeof(*sin6): {",
          "1108:    ret = -EPROTONOSUPPORT;",
          "1109:    goto out;",
          "1110:   }",
          "1112:   default:",
          "1121:   scope_id = rs->rs_bound_scope_id;",
          "1126:  if (ipv6_addr_any(&rs->rs_bound_addr) || ipv6_addr_any(&daddr)) {",
          "1128:   ret = -ENOTCONN;",
          "1130:  } else if (namelen != 0) {",
          "1135:   if (ipv6_addr_v4mapped(&daddr) ^",
          "1136:       ipv6_addr_v4mapped(&rs->rs_bound_addr)) {",
          "1137:    release_sock(sk);",
          "1138:    ret = -EOPNOTSUPP;",
          "1139:    goto out;",
          "1140:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1159:   conn = rs->rs_conn;",
          "1160:  else {",
          "1161:   conn = rds_conn_create_outgoing(sock_net(sock->sk),",
          "1165:   if (IS_ERR(conn)) {",
          "1166:    ret = PTR_ERR(conn);",
          "1167:    goto out;",
          "",
          "[Removed Lines]",
          "1158:  if (rs->rs_conn && rs->rs_conn->c_faddr == daddr)",
          "1162:       rs->rs_bound_addr, daddr,",
          "1163:      rs->rs_transport,",
          "1164:      sock->sk->sk_allocation);",
          "",
          "[Added Lines]",
          "1194:  if (rs->rs_conn && ipv6_addr_equal(&rs->rs_conn->c_faddr, &daddr))",
          "1198:       &rs->rs_bound_addr, &daddr,",
          "1199:       rs->rs_transport,",
          "1200:       sock->sk->sk_allocation,",
          "1201:       scope_id);",
          "",
          "---------------"
        ],
        "net/rds/tcp.c||net/rds/tcp.c": [
          "File: net/rds/tcp.c -> net/rds/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <net/tcp.h>",
          "38: #include <net/net_namespace.h>",
          "39: #include <net/netns/generic.h>",
          "41: #include \"rds.h\"",
          "42: #include \"tcp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <net/tcp.h>",
          "41: #include <net/addrconf.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:  spin_unlock_irqrestore(&rds_tcp_tc_list_lock, flags);",
          "263: }",
          "266: {",
          "268:   return 0;",
          "269:  return -EADDRNOTAVAIL;",
          "270: }",
          "",
          "[Removed Lines]",
          "265: static int rds_tcp_laddr_check(struct net *net, __be32 addr)",
          "267:  if (inet_addr_type(net, addr) == RTN_LOCAL)",
          "",
          "[Added Lines]",
          "267: static int rds_tcp_laddr_check(struct net *net, const struct in6_addr *addr,",
          "268:           __u32 scope_id)",
          "270:  struct net_device *dev = NULL;",
          "271:  int ret;",
          "273:  if (ipv6_addr_v4mapped(addr)) {",
          "274:   if (inet_addr_type(net, addr->s6_addr32[3]) == RTN_LOCAL)",
          "275:    return 0;",
          "276:   return -EADDRNOTAVAIL;",
          "277:  }",
          "282:  if (scope_id != 0) {",
          "283:   rcu_read_lock();",
          "284:   dev = dev_get_by_index_rcu(net, scope_id);",
          "286:   if (!dev) {",
          "287:    rcu_read_unlock();",
          "288:    return -EADDRNOTAVAIL;",
          "289:   }",
          "290:   rcu_read_unlock();",
          "291:  }",
          "292:  ret = ipv6_chk_addr(net, addr, dev, 0);",
          "293:  if (ret)",
          "",
          "---------------"
        ],
        "net/rds/tcp_connect.c||net/rds/tcp_connect.c": [
          "File: net/rds/tcp_connect.c -> net/rds/tcp_connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:       rds_conn_path_transition(cp, RDS_CONN_CONNECTING,",
          "71:           RDS_CONN_ERROR)) {",
          "72:    rds_conn_path_drop(cp, false);",
          "",
          "[Removed Lines]",
          "69:   if (!IS_CANONICAL(cp->cp_conn->c_laddr, cp->cp_conn->c_faddr) &&",
          "",
          "[Added Lines]",
          "69:   if (rds_addr_cmp(&cp->cp_conn->c_laddr,",
          "70:      &cp->cp_conn->c_faddr) >= 0 &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: int rds_tcp_conn_path_connect(struct rds_conn_path *cp)",
          "89: {",
          "90:  struct socket *sock = NULL;",
          "92:  int ret;",
          "93:  struct rds_connection *conn = cp->cp_conn;",
          "94:  struct rds_tcp_connection *tc = cp->cp_transport_data;",
          "",
          "[Removed Lines]",
          "91:  struct sockaddr_in src, dest;",
          "",
          "[Added Lines]",
          "92:  struct sockaddr_in sin;",
          "93:  struct sockaddr *addr;",
          "94:  int addrlen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  rds_tcp_tune(sock);",
          "120:  if (ret) {",
          "122:     ret, &conn->c_laddr);",
          "123:   goto out;",
          "124:  }",
          "134:  rds_tcp_set_callbacks(sock, cp);",
          "139:  if (ret == -EINPROGRESS)",
          "140:   ret = 0;",
          "141:  if (ret == 0) {",
          "",
          "[Removed Lines]",
          "115:  src.sin_family = AF_INET;",
          "116:  src.sin_addr.s_addr = (__force u32)conn->c_laddr;",
          "117:  src.sin_port = (__force u16)htons(0);",
          "119:  ret = sock->ops->bind(sock, (struct sockaddr *)&src, sizeof(src));",
          "121:   rdsdebug(\"bind failed with %d at address %pI4\\n\",",
          "126:  dest.sin_family = AF_INET;",
          "127:  dest.sin_addr.s_addr = (__force u32)conn->c_faddr;",
          "128:  dest.sin_port = (__force u16)htons(RDS_TCP_PORT);",
          "135:  ret = sock->ops->connect(sock, (struct sockaddr *)&dest, sizeof(dest),",
          "136:      O_NONBLOCK);",
          "138:  rdsdebug(\"connect to address %pI4 returned %d\\n\", &conn->c_faddr, ret);",
          "",
          "[Added Lines]",
          "118:  sin.sin_family = AF_INET;",
          "119:  sin.sin_addr.s_addr = conn->c_laddr.s6_addr32[3];",
          "120:  sin.sin_port = 0;",
          "121:  addr = (struct sockaddr *)&sin;",
          "122:  addrlen = sizeof(sin);",
          "124:  ret = sock->ops->bind(sock, addr, addrlen);",
          "126:   rdsdebug(\"bind failed with %d at address %pI6c\\n\",",
          "131:  sin.sin_family = AF_INET;",
          "132:  sin.sin_addr.s_addr = conn->c_faddr.s6_addr32[3];",
          "133:  sin.sin_port = htons(RDS_TCP_PORT);",
          "134:  addr = (struct sockaddr *)&sin;",
          "135:  addrlen = sizeof(sin);",
          "142:  ret = sock->ops->connect(sock, addr, addrlen, O_NONBLOCK);",
          "144:  rdsdebug(\"connect to address %pI6c returned %d\\n\", &conn->c_faddr, ret);",
          "",
          "---------------"
        ],
        "net/rds/tcp_listen.c||net/rds/tcp_listen.c": [
          "File: net/rds/tcp_listen.c -> net/rds/tcp_listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: struct rds_tcp_connection *rds_tcp_accept_one_path(struct rds_connection *conn)",
          "84: {",
          "85:  int i;",
          "87:  int npaths = max_t(int, 1, conn->c_npaths);",
          "",
          "[Removed Lines]",
          "86:  bool peer_is_smaller = IS_CANONICAL(conn->c_faddr, conn->c_laddr);",
          "92:  if (!peer_is_smaller) {",
          "",
          "[Added Lines]",
          "91:  if (rds_addr_cmp(&conn->c_faddr, &conn->c_laddr) >= 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:  inet = inet_sk(new_sock->sk);",
          "171:  conn = rds_conn_create(sock_net(sock->sk),",
          "174:  if (IS_ERR(conn)) {",
          "175:   ret = PTR_ERR(conn);",
          "176:   goto out;",
          "",
          "[Removed Lines]",
          "167:  rdsdebug(\"accepted tcp %pI4:%u -> %pI4:%u\\n\",",
          "168:    &inet->inet_saddr, ntohs(inet->inet_sport),",
          "169:    &inet->inet_daddr, ntohs(inet->inet_dport));",
          "172:           inet->inet_saddr, inet->inet_daddr,",
          "173:           &rds_tcp_transport, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "166:  rdsdebug(\"accepted tcp %pI6c:%u -> %pI6c:%u\\n\",",
          "167:    &new_sock->sk->sk_v6_rcv_saddr, ntohs(inet->inet_sport),",
          "168:    &new_sock->sk->sk_v6_daddr, ntohs(inet->inet_dport));",
          "171:           &new_sock->sk->sk_v6_rcv_saddr,",
          "172:           &new_sock->sk->sk_v6_daddr,",
          "173:           &rds_tcp_transport, GFP_KERNEL,",
          "174:           new_sock->sk->sk_bound_dev_if);",
          "",
          "---------------"
        ],
        "net/rds/tcp_recv.c||net/rds/tcp_recv.c": [
          "File: net/rds/tcp_recv.c -> net/rds/tcp_recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:    tc->t_tinc = tinc;",
          "180:    rdsdebug(\"alloced tinc %p\\n\", tinc);",
          "181:    rds_inc_path_init(&tinc->ti_inc, cp,",
          "183:    tinc->ti_inc.i_rx_lat_trace[RDS_MSG_RX_HDR] =",
          "184:      local_clock();",
          "",
          "[Removed Lines]",
          "182:        cp->cp_conn->c_faddr);",
          "",
          "[Added Lines]",
          "182:        &cp->cp_conn->c_faddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:    if (tinc->ti_inc.i_hdr.h_flags == RDS_FLAG_CONG_BITMAP)",
          "240:     rds_tcp_cong_recv(conn, tinc);",
          "241:    else",
          "244:         arg->gfp);",
          "246:    tc->t_tinc_hdr_rem = sizeof(struct rds_header);",
          "",
          "[Removed Lines]",
          "242:     rds_recv_incoming(conn, conn->c_faddr,",
          "243:         conn->c_laddr, &tinc->ti_inc,",
          "",
          "[Added Lines]",
          "242:     rds_recv_incoming(conn, &conn->c_faddr,",
          "243:         &conn->c_laddr,",
          "244:         &tinc->ti_inc,",
          "",
          "---------------"
        ],
        "net/rds/tcp_send.c||net/rds/tcp_send.c": [
          "File: net/rds/tcp_send.c -> net/rds/tcp_send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:    if (rds_conn_path_up(cp)) {",
          "157:      \"returned %d, \"",
          "158:      \"disconnecting and reconnecting\\n\",",
          "159:      &conn->c_faddr, cp->cp_index, ret);",
          "",
          "[Removed Lines]",
          "156:     pr_warn(\"RDS/tcp: send to %pI4 on cp [%d]\"",
          "",
          "[Added Lines]",
          "156:     pr_warn(\"RDS/tcp: send to %pI6c on cp [%d]\"",
          "",
          "---------------"
        ],
        "net/rds/threads.c||net/rds/threads.c": [
          "File: net/rds/threads.c -> net/rds/threads.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   return;",
          "83:  }",
          "88:  cp->cp_reconnect_jiffies = 0;",
          "89:  set_bit(0, &cp->cp_conn->c_map_queued);",
          "",
          "[Removed Lines]",
          "85:  rdsdebug(\"conn %p for %pI4 to %pI4 complete\\n\",",
          "86:    cp->cp_conn, &cp->cp_conn->c_laddr, &cp->cp_conn->c_faddr);",
          "",
          "[Added Lines]",
          "85:  rdsdebug(\"conn %p for %pI6c to %pI6c complete\\n\",",
          "86:    cp->cp_conn, &cp->cp_conn->c_laddr, &cp->cp_conn->c_faddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:  unsigned long rand;",
          "126:  struct rds_connection *conn = cp->cp_conn;",
          "133:  if (conn->c_trans->t_type == RDS_TRANS_TCP &&",
          "135:   return;",
          "137:  set_bit(RDS_RECONNECT_PENDING, &cp->cp_flags);",
          "",
          "[Removed Lines]",
          "128:  rdsdebug(\"conn %p for %pI4 to %pI4 reconnect jiffies %lu\\n\",",
          "129:    conn, &conn->c_laddr, &conn->c_faddr,",
          "130:    cp->cp_reconnect_jiffies);",
          "134:      !IS_CANONICAL(conn->c_laddr, conn->c_faddr))",
          "",
          "[Added Lines]",
          "128:  rdsdebug(\"conn %p for %pI6c to %pI6c reconnect jiffies %lu\\n\",",
          "129:    conn, &conn->c_laddr, &conn->c_faddr,",
          "130:    cp->cp_reconnect_jiffies);",
          "134:      rds_addr_cmp(&conn->c_laddr, &conn->c_faddr) >= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:  }",
          "147:  get_random_bytes(&rand, sizeof(rand));",
          "149:    rand % cp->cp_reconnect_jiffies, cp->cp_reconnect_jiffies,",
          "150:    conn, &conn->c_laddr, &conn->c_faddr);",
          "151:  rcu_read_lock();",
          "",
          "[Removed Lines]",
          "148:  rdsdebug(\"%lu delay %lu ceil conn %p for %pI4 -> %pI4\\n\",",
          "",
          "[Added Lines]",
          "148:  rdsdebug(\"%lu delay %lu ceil conn %p for %pI6c -> %pI6c\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:  int ret;",
          "169:  if (cp->cp_index > 0 &&",
          "171:   return;",
          "172:  clear_bit(RDS_RECONNECT_PENDING, &cp->cp_flags);",
          "173:  ret = rds_conn_path_transition(cp, RDS_CONN_DOWN, RDS_CONN_CONNECTING);",
          "174:  if (ret) {",
          "175:   ret = conn->c_trans->conn_path_connect(cp);",
          "179:   if (ret) {",
          "180:    if (rds_conn_path_transition(cp,",
          "",
          "[Removed Lines]",
          "170:      !IS_CANONICAL(cp->cp_conn->c_laddr, cp->cp_conn->c_faddr))",
          "176:   rdsdebug(\"conn %p for %pI4 to %pI4 dispatched, ret %d\\n\",",
          "177:    conn, &conn->c_laddr, &conn->c_faddr, ret);",
          "",
          "[Added Lines]",
          "170:      rds_addr_cmp(&cp->cp_conn->c_laddr, &cp->cp_conn->c_faddr) >= 0)",
          "176:   rdsdebug(\"conn %p for %pI6c to %pI6c dispatched, ret %d\\n\",",
          "177:     conn, &conn->c_laddr, &conn->c_faddr, ret);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:  return 0;",
          "261: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: int rds_addr_cmp(const struct in6_addr *addr1,",
          "267:    const struct in6_addr *addr2)",
          "268: {",
          "269: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS) && BITS_PER_LONG == 64",
          "270:  const __be64 *a1, *a2;",
          "271:  u64 x, y;",
          "273:  a1 = (__be64 *)addr1;",
          "274:  a2 = (__be64 *)addr2;",
          "276:  if (*a1 != *a2) {",
          "277:   if (be64_to_cpu(*a1) < be64_to_cpu(*a2))",
          "278:    return -1;",
          "279:   else",
          "280:    return 1;",
          "281:  } else {",
          "282:   x = be64_to_cpu(*++a1);",
          "283:   y = be64_to_cpu(*++a2);",
          "284:   if (x < y)",
          "285:    return -1;",
          "286:   else if (x > y)",
          "287:    return 1;",
          "288:   else",
          "289:    return 0;",
          "290:  }",
          "291: #else",
          "292:  u32 a, b;",
          "293:  int i;",
          "295:  for (i = 0; i < 4; i++) {",
          "296:   if (addr1->s6_addr32[i] != addr2->s6_addr32[i]) {",
          "297:    a = ntohl(addr1->s6_addr32[i]);",
          "298:    b = ntohl(addr2->s6_addr32[i]);",
          "299:    if (a < b)",
          "300:     return -1;",
          "301:    else if (a > b)",
          "302:     return 1;",
          "303:   }",
          "304:  }",
          "305:  return 0;",
          "306: #endif",
          "307: }",
          "308: EXPORT_SYMBOL_GPL(rds_addr_cmp);",
          "",
          "---------------"
        ],
        "net/rds/transport.c||net/rds/transport.c": [
          "File: net/rds/transport.c -> net/rds/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <linux/kernel.h>",
          "34: #include <linux/module.h>",
          "35: #include <linux/in.h>",
          "37: #include \"rds.h\"",
          "38: #include \"loop.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <linux/ipv6.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   module_put(trans->t_owner);",
          "76: }",
          "79: {",
          "80:  struct rds_transport *ret = NULL;",
          "81:  struct rds_transport *trans;",
          "82:  unsigned int i;",
          "85:   return &rds_loop_transport;",
          "87:  down_read(&rds_trans_sem);",
          "88:  for (i = 0; i < RDS_TRANS_COUNT; i++) {",
          "89:   trans = transports[i];",
          "92:       (!trans->t_owner || try_module_get(trans->t_owner))) {",
          "93:    ret = trans;",
          "94:    break;",
          "",
          "[Removed Lines]",
          "78: struct rds_transport *rds_trans_get_preferred(struct net *net, __be32 addr)",
          "84:  if (IN_LOOPBACK(ntohl(addr)))",
          "91:   if (trans && (trans->laddr_check(net, addr) == 0) &&",
          "",
          "[Added Lines]",
          "79: struct rds_transport *rds_trans_get_preferred(struct net *net,",
          "80:            const struct in6_addr *addr,",
          "81:            __u32 scope_id)",
          "87:  if (ipv6_addr_v4mapped(addr)) {",
          "88:   if (*(u_int8_t *)&addr->s6_addr32[3] == IN_LOOPBACKNET)",
          "89:    return &rds_loop_transport;",
          "90:  } else if (ipv6_addr_loopback(addr)) {",
          "92:  }",
          "98:   if (trans && (trans->laddr_check(net, addr, scope_id) == 0) &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}