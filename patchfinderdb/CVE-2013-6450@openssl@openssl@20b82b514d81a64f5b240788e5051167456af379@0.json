{
  "cve_id": "CVE-2013-6450",
  "cve_desc": "The DTLS retransmission implementation in OpenSSL 1.0.0 before 1.0.0l and 1.0.1 before 1.0.1f does not properly maintain data structures for digest and encryption contexts, which might allow man-in-the-middle attackers to trigger the use of a different context and cause a denial of service (application crash) by interfering with packet delivery, related to ssl/d1_both.c and ssl/t1_enc.c.",
  "repo": "openssl/openssl",
  "patch_hash": "20b82b514d81a64f5b240788e5051167456af379",
  "patch_info": {
    "commit_hash": "20b82b514d81a64f5b240788e5051167456af379",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/20b82b514d81a64f5b240788e5051167456af379",
    "files": [
      "CHANGES",
      "ssl/d1_both.c",
      "ssl/t1_enc.c"
    ],
    "message": "Fix DTLS retransmission from previous session.\n\nFor DTLS we might need to retransmit messages from the previous session\nso keep a copy of write context in DTLS retransmission buffers instead\nof replacing it after sending CCS. CVE-2013-6450.\n(cherry picked from commit 34628967f1e65dc8f34e000f0f5518e21afbfc7b)",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c",
      "ssl/t1_enc.c||ssl/t1_enc.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "214: static void",
      "215: dtls1_hm_fragment_free(hm_fragment *frag)",
      "216:  {",
      "217:  if (frag->fragment) OPENSSL_free(frag->fragment);",
      "218:  if (frag->reassembly) OPENSSL_free(frag->reassembly);",
      "219:  OPENSSL_free(frag);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "218:  if (frag->msg_header.is_ccs)",
      "219:   {",
      "220:   EVP_CIPHER_CTX_free(frag->msg_header.saved_retransmit_state.enc_write_ctx);",
      "221:   EVP_MD_CTX_destroy(frag->msg_header.saved_retransmit_state.write_hash);",
      "222:   }",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:    s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "415:    else",
      "416:    s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "418:    reuse_dd = 1;",
      "420:    goto err;",
      "424:   dd= s->enc_write_ctx;",
      "426: #ifndef OPENSSL_NO_COMP",
      "427:   if (s->compress != NULL)",
      "428:    {",
      "",
      "[Removed Lines]",
      "417:   if (s->enc_write_ctx != NULL)",
      "419:   else if ((s->enc_write_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)",
      "421:   else",
      "423:    EVP_CIPHER_CTX_init(s->enc_write_ctx);",
      "425:   mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
      "",
      "[Added Lines]",
      "417:   if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))",
      "419:   else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)",
      "422:   if (SSL_IS_DTLS(s))",
      "423:    {",
      "424:    mac_ctx = EVP_MD_CTX_create();",
      "425:    if (!mac_ctx)",
      "426:     goto err;",
      "427:    s->write_hash = mac_ctx;",
      "428:    }",
      "429:   else",
      "430:    mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80b6d97585511931d7e5d1cbf24bd19f34d88bda",
      "candidate_info": {
        "commit_hash": "80b6d97585511931d7e5d1cbf24bd19f34d88bda",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/80b6d97585511931d7e5d1cbf24bd19f34d88bda",
        "files": [
          "ssl/d1_both.c",
          "ssl/t1_enc.c"
        ],
        "message": "Fix DTLS retransmission from previous session.\n\nFor DTLS we might need to retransmit messages from the previous session\nso keep a copy of write context in DTLS retransmission buffers instead\nof replacing it after sending CCS. CVE-2013-6450.\n(cherry picked from commit 34628967f1e65dc8f34e000f0f5518e21afbfc7b)",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c",
          "ssl/t1_enc.c||ssl/t1_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: static void",
          "215: dtls1_hm_fragment_free(hm_fragment *frag)",
          "216:  {",
          "217:  if (frag->fragment) OPENSSL_free(frag->fragment);",
          "218:  if (frag->reassembly) OPENSSL_free(frag->reassembly);",
          "219:  OPENSSL_free(frag);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:  if (frag->msg_header.is_ccs)",
          "219:   {",
          "220:   EVP_CIPHER_CTX_free(frag->msg_header.saved_retransmit_state.enc_write_ctx);",
          "221:   EVP_MD_CTX_destroy(frag->msg_header.saved_retransmit_state.write_hash);",
          "222:   }",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:    s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "415:    else",
          "416:    s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "418:    reuse_dd = 1;",
          "420:    goto err;",
          "424:   dd= s->enc_write_ctx;",
          "426: #ifndef OPENSSL_NO_COMP",
          "427:   if (s->compress != NULL)",
          "428:    {",
          "",
          "[Removed Lines]",
          "417:   if (s->enc_write_ctx != NULL)",
          "419:   else if ((s->enc_write_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)",
          "421:   else",
          "423:    EVP_CIPHER_CTX_init(s->enc_write_ctx);",
          "425:   mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "[Added Lines]",
          "417:   if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))",
          "419:   else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)",
          "422:   if (SSL_IS_DTLS(s))",
          "423:    {",
          "424:    mac_ctx = EVP_MD_CTX_create();",
          "425:    if (!mac_ctx)",
          "426:     goto err;",
          "427:    s->write_hash = mac_ctx;",
          "428:    }",
          "429:   else",
          "430:    mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d64b51d20375dbf52ca9cd45b5fea9772605935",
      "candidate_info": {
        "commit_hash": "2d64b51d20375dbf52ca9cd45b5fea9772605935",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2d64b51d20375dbf52ca9cd45b5fea9772605935",
        "files": [
          "CHANGES",
          "ssl/d1_both.c",
          "ssl/ssl_locl.h",
          "ssl/t1_enc.c"
        ],
        "message": "Fix DTLS retransmission from previous session.\n\nFor DTLS we might need to retransmit messages from the previous session\nso keep a copy of write context in DTLS retransmission buffers instead\nof replacing it after sending CCS. CVE-2013-6450.\n(cherry picked from commit 34628967f1e65dc8f34e000f0f5518e21afbfc7b)\n\nConflicts:\n\n\tssl/ssl_locl.h",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/t1_enc.c||ssl/t1_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: static void",
          "215: dtls1_hm_fragment_free(hm_fragment *frag)",
          "216:  {",
          "217:  if (frag->fragment) OPENSSL_free(frag->fragment);",
          "218:  if (frag->reassembly) OPENSSL_free(frag->reassembly);",
          "219:  OPENSSL_free(frag);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:  if (frag->msg_header.is_ccs)",
          "219:   {",
          "220:   EVP_CIPHER_CTX_free(frag->msg_header.saved_retransmit_state.enc_write_ctx);",
          "221:   EVP_MD_CTX_destroy(frag->msg_header.saved_retransmit_state.write_hash);",
          "222:   }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "600: extern SSL3_ENC_METHOD SSLv3_enc_data;",
          "601: extern SSL3_ENC_METHOD DTLSv1_enc_data;",
          "603: #define IMPLEMENT_tls1_meth_func(func_name, s_accept, s_connect, s_get_meth) \\",
          "604: const SSL_METHOD *func_name(void)  \\",
          "605:  { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: #define SSL_IS_DTLS(s) (s->method->version == DTLS1_VERSION)",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:    s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "404:    else",
          "405:    s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "407:    reuse_dd = 1;",
          "409:    goto err;",
          "413:   dd= s->enc_write_ctx;",
          "415: #ifndef OPENSSL_NO_COMP",
          "416:   if (s->compress != NULL)",
          "417:    {",
          "",
          "[Removed Lines]",
          "406:   if (s->enc_write_ctx != NULL)",
          "408:   else if ((s->enc_write_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)",
          "410:   else",
          "412:    EVP_CIPHER_CTX_init(s->enc_write_ctx);",
          "414:   mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "[Added Lines]",
          "406:   if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))",
          "408:   else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)",
          "411:   if (SSL_IS_DTLS(s))",
          "412:    {",
          "413:    mac_ctx = EVP_MD_CTX_create();",
          "414:    if (!mac_ctx)",
          "415:     goto err;",
          "416:    s->write_hash = mac_ctx;",
          "417:    }",
          "418:   else",
          "419:    mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34628967f1e65dc8f34e000f0f5518e21afbfc7b",
      "candidate_info": {
        "commit_hash": "34628967f1e65dc8f34e000f0f5518e21afbfc7b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/34628967f1e65dc8f34e000f0f5518e21afbfc7b",
        "files": [
          "CHANGES",
          "ssl/d1_both.c",
          "ssl/ssl_locl.h",
          "ssl/t1_enc.c"
        ],
        "message": "Fix DTLS retransmission from previous session.\n\nFor DTLS we might need to retransmit messages from the previous session\nso keep a copy of write context in DTLS retransmission buffers instead\nof replacing it after sending CCS. CVE-2013-6450.",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/t1_enc.c||ssl/t1_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: static void",
          "215: dtls1_hm_fragment_free(hm_fragment *frag)",
          "216:  {",
          "217:  if (frag->fragment) OPENSSL_free(frag->fragment);",
          "218:  if (frag->reassembly) OPENSSL_free(frag->reassembly);",
          "219:  OPENSSL_free(frag);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:  if (frag->msg_header.is_ccs)",
          "219:   {",
          "220:   EVP_CIPHER_CTX_free(frag->msg_header.saved_retransmit_state.enc_write_ctx);",
          "221:   EVP_MD_CTX_destroy(frag->msg_header.saved_retransmit_state.write_hash);",
          "222:   }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "621: extern SSL3_ENC_METHOD SSLv3_enc_data;",
          "622: extern SSL3_ENC_METHOD DTLSv1_enc_data;",
          "624: #define IMPLEMENT_tls_meth_func(version, func_name, s_accept, s_connect, \\",
          "625:     s_get_meth) \\",
          "626: const SSL_METHOD *func_name(void)  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: #define SSL_IS_DTLS(s) (s->method->version == DTLS1_VERSION)",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:    s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "415:    else",
          "416:    s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "418:    reuse_dd = 1;",
          "420:    goto err;",
          "424:   dd= s->enc_write_ctx;",
          "426: #ifndef OPENSSL_NO_COMP",
          "427:   if (s->compress != NULL)",
          "428:    {",
          "",
          "[Removed Lines]",
          "417:   if (s->enc_write_ctx != NULL)",
          "419:   else if ((s->enc_write_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)",
          "421:   else",
          "423:    EVP_CIPHER_CTX_init(s->enc_write_ctx);",
          "425:   mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "[Added Lines]",
          "417:   if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))",
          "419:   else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)",
          "422:   if (SSL_IS_DTLS(s))",
          "423:    {",
          "424:    mac_ctx = EVP_MD_CTX_create();",
          "425:    if (!mac_ctx)",
          "426:     goto err;",
          "427:    s->write_hash = mac_ctx;",
          "428:    }",
          "429:   else",
          "430:    mac_ctx = ssl_replace_hash(&s->write_hash,NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}