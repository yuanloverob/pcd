{
  "cve_id": "CVE-2021-41206",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. We have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues. These fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "e7f497570abb6b4ae5af4970620cd880e4c0c904",
  "patch_info": {
    "commit_hash": "e7f497570abb6b4ae5af4970620cd880e4c0c904",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904",
    "files": [
      "tensorflow/core/kernels/conv_ops.cc"
    ],
    "message": "Fix segfault on OOM in Conv2D.\n\nPiperOrigin-RevId: 404655317\nChange-Id: I33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
      "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "183:     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };",
      "187:     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
      "188:         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);",
      "192:     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
      "193:         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);",
      "",
      "[Removed Lines]",
      "186:     Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));",
      "191:     Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));",
      "",
      "[Added Lines]",
      "186:     Tensor input_shuffled;",
      "187:     OP_REQUIRES_OK(",
      "188:         ctx, ctx->allocate_temp(input.dtype(), TensorShape(post_shuffle(input)),",
      "189:                                 &input_shuffled));",
      "194:     Tensor filter_shuffled;",
      "195:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(filter.dtype(),",
      "196:                                            TensorShape(post_shuffle(filter)),",
      "197:                                            &filter_shuffled));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "196:     shuffles_completed.Wait();",
      "201:     for (int64_t i = 0; i < num_groups; ++i) {",
      "",
      "[Removed Lines]",
      "199:     Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));",
      "",
      "[Added Lines]",
      "205:     Tensor output_shuffled;",
      "206:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(output->dtype(),",
      "207:                                            TensorShape(post_shuffle(*output)),",
      "208:                                            &output_shuffled));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b8db6083b34520688dbc71f341f7aeaf156bf17",
      "candidate_info": {
        "commit_hash": "7b8db6083b34520688dbc71f341f7aeaf156bf17",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7b8db6083b34520688dbc71f341f7aeaf156bf17",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/conv_2d.h",
          "tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/conv_ops_test.py"
        ],
        "message": "Implement grouped convolution on CPU\n\nTo get better compute resources utilization group-compute loop has to be parallelized, but it involves a lot of changes in Conv2D primitives. Will address that later if it will be critical for some of the users.\n\nFix for: https://github.com/tensorflow/tensorflow/issues/29005\n\nPiperOrigin-RevId: 363991782\nChange-Id: I97f375b1133833c4de5181199316be7cbf4ebee0",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_2d.h||tensorflow/core/kernels/conv_2d.h",
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc",
          "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_2d.h||tensorflow/core/kernels/conv_2d.h": [
          "File: tensorflow/core/kernels/conv_2d.h -> tensorflow/core/kernels/conv_2d.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     SpatialConvolutionFunc(d, output, input, filter, row_stride, col_stride,",
          "56:                            row_dilation, col_dilation, padding, output_kernel);",
          "57:   }",
          "58:   void operator()(const Device& d, typename TTypes<T, 4>::Tensor output,",
          "59:                   typename TTypes<T, 4>::ConstTensor input,",
          "60:                   typename TTypes<T, 4>::ConstTensor filter, int row_stride,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   template <typename Input, typename Filter, typename Output>",
          "63:   void operator()(const Device& d, Output output, Input input, Filter filter,",
          "64:                   int row_stride, int col_stride, int row_dilation,",
          "65:                   int col_dilation, const Eigen::PaddingType& padding,",
          "66:                   const OutputKernel& output_kernel = OutputKernel()) {",
          "67:     SpatialConvolutionFunc(d, output, input, filter, row_stride, col_stride,",
          "68:                            row_dilation, col_dilation, padding, output_kernel);",
          "69:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         col_dilation, Eigen::PaddingType::PADDING_VALID, output_kernel,",
          "68:         padding_top, padding_bottom, padding_left, padding_right);",
          "69:   }",
          "70: };",
          "72: template <typename Device, typename OutputKernel>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   template <typename Input, typename Filter, typename Output>",
          "85:   void operator()(const Device& d, Output output, Input input, Filter filter,",
          "86:                   int row_stride, int col_stride, int row_dilation,",
          "87:                   int col_dilation, int padding_top, int padding_bottom,",
          "88:                   int padding_left, int padding_right,",
          "89:                   const OutputKernel& output_kernel = OutputKernel()) {",
          "90:     SpatialConvolutionFunc(",
          "91:         d, output, input, filter, row_stride, col_stride, row_dilation,",
          "92:         col_dilation, Eigen::PaddingType::PADDING_VALID, output_kernel,",
          "93:         padding_top, padding_bottom, padding_left, padding_right);",
          "94:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:                                   row_dilation, output_kernel)",
          "85:             .template cast<Eigen::half>();",
          "86:   }",
          "87:   void operator()(const Device& d,",
          "88:                   typename TTypes<Eigen::half, 4>::Tensor output,",
          "89:                   typename TTypes<Eigen::half, 4>::ConstTensor input,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   template <typename Input, typename Filter, typename Output>",
          "114:   void operator()(const Device& d, Output output, Input input, Filter filter,",
          "115:                   int row_stride, int col_stride, int row_dilation,",
          "116:                   int col_dilation, const Eigen::PaddingType& padding,",
          "117:                   const OutputKernel& output_kernel = OutputKernel()) {",
          "118:     output.device(d) =",
          "119:         Eigen::SpatialConvolution(input.template cast<float>(),",
          "120:                                   filter.template cast<float>(), col_stride,",
          "121:                                   row_stride, padding, col_dilation,",
          "122:                                   row_dilation, output_kernel)",
          "123:             .template cast<Eigen::half>();",
          "124:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:             padding_bottom)",
          "101:             .template cast<Eigen::half>();",
          "102:   }",
          "103: };",
          "105: template <typename Device, typename T>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:   template <typename Input, typename Filter, typename Output>",
          "144:   void operator()(const Device& d, Output output, Input input, Filter filter,",
          "145:                   int row_stride, int col_stride, int row_dilation,",
          "146:                   int col_dilation, int padding_top, int padding_bottom,",
          "147:                   int padding_left, int padding_right,",
          "148:                   const OutputKernel& output_kernel = OutputKernel()) {",
          "149:     output.device(d) =",
          "150:         Eigen::SpatialConvolution(",
          "151:             input.template cast<float>(), filter.template cast<float>(),",
          "152:             col_stride, row_stride, Eigen::PaddingType::PADDING_VALID,",
          "153:             col_dilation, row_dilation, output_kernel, padding_left,",
          "154:             padding_right, padding_top, padding_bottom)",
          "155:             .template cast<Eigen::half>();",
          "156:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <map>",
          "31: #include <vector>",
          "33: #include \"tensorflow/core/framework/allocator.h\"",
          "34: #include \"tensorflow/core/framework/bounds_check.h\"",
          "35: #include \"tensorflow/core/framework/kernel_shape_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"absl/synchronization/blocking_counter.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     }",
          "139:   }",
          "140: };",
          "141: }  // namespace",
          "143: template <typename T>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: template <typename T>",
          "148: struct LaunchGrouped {",
          "149:   void operator()(OpKernelContext* ctx, const Tensor& input,",
          "150:                   const Tensor& filter, int row_stride, int col_stride,",
          "151:                   int row_dilation, int col_dilation, const Padding& padding,",
          "152:                   const std::vector<int64>& explicit_paddings, Tensor* output,",
          "153:                   TensorFormat data_format) {",
          "154:     DCHECK(data_format == FORMAT_NHWC)",
          "155:         << \"Grouped conv implementation only \"",
          "156:            \"supports NHWC tensor format for now.\";",
          "158:     const int64 in_depth = input.dim_size(3);",
          "159:     const int64 patch_depth = filter.dim_size(2);",
          "160:     const int64 num_groups = in_depth / patch_depth;",
          "163:     std::array<int64, 5> shuffle({3, 0, 1, 2, 4});",
          "166:     auto pre_shuffle = [&](const Tensor& tensor) -> std::array<int64, 5> {",
          "167:       return {tensor.dim_size(0), tensor.dim_size(1), tensor.dim_size(2),",
          "168:               num_groups, tensor.dim_size(3) / num_groups};",
          "169:     };",
          "172:     auto post_shuffle = [&](const Tensor& tensor) -> std::array<int64, 5> {",
          "173:       return {num_groups, tensor.dim_size(0), tensor.dim_size(1),",
          "174:               tensor.dim_size(2), tensor.dim_size(3) / num_groups};",
          "175:     };",
          "177:     auto& device = ctx->eigen_device<CPUDevice>();",
          "179:     absl::BlockingCounter shuffles_completed(2);",
          "180:     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };",
          "183:     Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));",
          "184:     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "185:         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);",
          "188:     Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));",
          "189:     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "190:         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);",
          "193:     shuffles_completed.Wait();",
          "196:     Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));",
          "198:     for (int64 i = 0; i < num_groups; ++i) {",
          "207:       auto input_slice = input_shuffled.tensor<T, 5>().template chip<0>(i);",
          "208:       auto filter_slice = filter_shuffled.tensor<T, 5>().template chip<0>(i);",
          "209:       auto output_slice = output_shuffled.tensor<T, 5>().template chip<0>(i);",
          "211:       if (padding == EXPLICIT) {",
          "212:         functor::SpatialConvolution<CPUDevice, T>()(",
          "213:             ctx->eigen_device<CPUDevice>(), output_slice, input_slice,",
          "214:             filter_slice, row_stride, col_stride, row_dilation, col_dilation,",
          "215:             static_cast<int>(explicit_paddings[2]),",
          "216:             static_cast<int>(explicit_paddings[3]),",
          "217:             static_cast<int>(explicit_paddings[4]),",
          "218:             static_cast<int>(explicit_paddings[5]));",
          "219:       } else {",
          "220:         functor::SpatialConvolution<CPUDevice, T>()(",
          "221:             ctx->eigen_device<CPUDevice>(), output_slice, input_slice,",
          "222:             filter_slice, row_stride, col_stride, row_dilation, col_dilation,",
          "223:             BrainPadding2EigenPadding(padding));",
          "224:       }",
          "225:     }",
          "228:     std::array<int64, 5> rev_shuffle({1, 2, 3, 0, 4});",
          "229:     output->shaped<T, 5>(pre_shuffle(*output)).device(device) =",
          "230:         output_shuffled.tensor<T, 5>().shuffle(rev_shuffle);",
          "231:   }",
          "232: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:           ToString(data_format)));",
          "156:       return;",
          "157:     }",
          "167:     for (int64 explicit_padding : explicit_paddings) {",
          "168:       if (!FastBoundsCheck(explicit_padding, std::numeric_limits<int>::max())) {",
          "",
          "[Removed Lines]",
          "158:     const int64 in_depth = GetTensorDim(input, data_format, 'C');",
          "159:     OP_REQUIRES(ctx, in_depth == filter.dim_size(2),",
          "160:                 errors::Unimplemented(",
          "161:                     \"The Conv2D op currently does not support grouped \"",
          "162:                     \"convolutions on the CPU. A grouped convolution was \"",
          "163:                     \"attempted to be run because the input depth of \",",
          "164:                     in_depth, \" does not match the filter input depth of \",",
          "165:                     filter.dim_size(2)));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:         return;",
          "171:       }",
          "172:     }",
          "176:   }",
          "177: };",
          "",
          "[Removed Lines]",
          "173:     LaunchGeneric<CPUDevice, T>()(ctx, input, filter, row_stride, col_stride,",
          "174:                                   row_dilation, col_dilation, padding,",
          "175:                                   explicit_paddings, output, data_format);",
          "",
          "[Added Lines]",
          "259:     const int64 in_depth = input.dim_size(3);",
          "260:     const int64 out_depth = output->dim_size(3);",
          "261:     const int64 patch_depth = filter.dim_size(2);",
          "263:     if (in_depth % patch_depth != 0) {",
          "264:       ctx->SetStatus(errors::InvalidArgument(",
          "265:           \"input depth must be evenly divisible by filter depth: \", in_depth,",
          "266:           \" vs \", patch_depth));",
          "267:       return;",
          "268:     }",
          "270:     const int64 num_groups = in_depth / patch_depth;",
          "271:     if (out_depth % num_groups != 0 || out_depth < num_groups) {",
          "272:       ctx->SetStatus(errors::InvalidArgument(",
          "273:           \"output depth must be evenly divisible by number of groups: \",",
          "274:           out_depth, \" vs \", num_groups));",
          "275:       return;",
          "276:     }",
          "278:     if (in_depth != patch_depth) {",
          "279:       LaunchGrouped<T>()(ctx, input, filter, row_stride, col_stride,",
          "280:                          row_dilation, col_dilation, padding, explicit_paddings,",
          "281:                          output, data_format);",
          "282:     } else {",
          "283:       LaunchGeneric<CPUDevice, T>()(ctx, input, filter, row_stride, col_stride,",
          "284:                                     row_dilation, col_dilation, padding,",
          "285:                                     explicit_paddings, output, data_format);",
          "286:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/conv_ops_test.py -> tensorflow/python/kernel_tests/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:           results[0], results[1], atol=tol_to_use, rtol=tol_to_use)",
          "836:   @test_util.run_in_graph_and_eager_modes",
          "838:   def testConv2DGroupConvFwd(self):",
          "840:       for dilation in [1, 2]:",
          "841:         for stride in [1, 2]:",
          "849:   @test_util.deprecated_graph_mode_only",
          "850:   @test_util.run_cuda_only",
          "",
          "[Removed Lines]",
          "837:   @test_util.run_cuda_only",
          "839:     for data_format in [\"NHWC\", \"NCHW\"]:",
          "842:           self._VerifyGroupConvFwd([10, 32, 32, 16], [3, 3, 4, 8],",
          "843:                                    dilations=[dilation, dilation],",
          "844:                                    strides=[stride, stride],",
          "845:                                    padding=\"SAME\",",
          "846:                                    data_format=data_format,",
          "847:                                    dtype=dtypes.float32)",
          "",
          "[Added Lines]",
          "838:     if test.is_gpu_available(cuda_only=True):",
          "839:       data_formats = [\"NHWC\", \"NCHW\"]",
          "840:     else:",
          "841:       data_formats = [\"NHWC\"]",
          "842:     for data_format in data_formats:",
          "845:           for filter_dims in [[3, 3, 4, 8], [1, 1, 2, 16]]:",
          "846:             self._VerifyGroupConvFwd([10, 32, 32, 16], filter_dims,",
          "847:                                      dilations=[dilation, dilation],",
          "848:                                      strides=[stride, stride],",
          "849:                                      padding=\"SAME\",",
          "850:                                      data_format=data_format,",
          "851:                                      dtype=dtypes.float32)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc72d68be06e9babc997d7f9c608b8c6d8025f8d",
      "candidate_info": {
        "commit_hash": "cc72d68be06e9babc997d7f9c608b8c6d8025f8d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cc72d68be06e9babc997d7f9c608b8c6d8025f8d",
        "files": [
          "tensorflow/core/kernels/conv_ops.cc"
        ],
        "message": "Fix segfault on OOM in Conv2D.\n\nPiperOrigin-RevId: 404655317\nChange-Id: I33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };",
          "185:     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "186:         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);",
          "190:     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "191:         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);",
          "",
          "[Removed Lines]",
          "184:     Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));",
          "189:     Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));",
          "",
          "[Added Lines]",
          "184:     Tensor input_shuffled;",
          "185:     OP_REQUIRES_OK(",
          "186:         ctx, ctx->allocate_temp(input.dtype(), TensorShape(post_shuffle(input)),",
          "187:                                 &input_shuffled));",
          "192:     Tensor filter_shuffled;",
          "193:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(filter.dtype(),",
          "194:                                            TensorShape(post_shuffle(filter)),",
          "195:                                            &filter_shuffled));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:     shuffles_completed.Wait();",
          "199:     for (int64 i = 0; i < num_groups; ++i) {",
          "",
          "[Removed Lines]",
          "197:     Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));",
          "",
          "[Added Lines]",
          "203:     Tensor output_shuffled;",
          "204:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(output->dtype(),",
          "205:                                            TensorShape(post_shuffle(*output)),",
          "206:                                            &output_shuffled));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f43a11cd809d12db4866a46a68b459e86adfca86",
      "candidate_info": {
        "commit_hash": "f43a11cd809d12db4866a46a68b459e86adfca86",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f43a11cd809d12db4866a46a68b459e86adfca86",
        "files": [
          "tensorflow/core/kernels/conv_ops.cc"
        ],
        "message": "Fix segfault on OOM in Conv2D.\n\nPiperOrigin-RevId: 404655317\nChange-Id: I33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops.cc||tensorflow/core/kernels/conv_ops.cc": [
          "File: tensorflow/core/kernels/conv_ops.cc -> tensorflow/core/kernels/conv_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };",
          "187:     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "188:         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);",
          "192:     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =",
          "193:         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);",
          "",
          "[Removed Lines]",
          "186:     Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));",
          "191:     Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));",
          "",
          "[Added Lines]",
          "186:     Tensor input_shuffled;",
          "187:     OP_REQUIRES_OK(",
          "188:         ctx, ctx->allocate_temp(input.dtype(), TensorShape(post_shuffle(input)),",
          "189:                                 &input_shuffled));",
          "194:     Tensor filter_shuffled;",
          "195:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(filter.dtype(),",
          "196:                                            TensorShape(post_shuffle(filter)),",
          "197:                                            &filter_shuffled));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:     shuffles_completed.Wait();",
          "201:     for (int64_t i = 0; i < num_groups; ++i) {",
          "",
          "[Removed Lines]",
          "199:     Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));",
          "",
          "[Added Lines]",
          "205:     Tensor output_shuffled;",
          "206:     OP_REQUIRES_OK(ctx, ctx->allocate_temp(output->dtype(),",
          "207:                                            TensorShape(post_shuffle(*output)),",
          "208:                                            &output_shuffled));",
          "",
          "---------------"
        ]
      }
    }
  ]
}