{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "308cc442e697380c9a556561f32dd4bec220b739",
      "candidate_info": {
        "commit_hash": "308cc442e697380c9a556561f32dd4bec220b739",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/308cc442e697380c9a556561f32dd4bec220b739",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Corrected uservariable update",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1923:    std::string variabletype = request::findValue(&req, \"vtype\");",
          "1925:    if (",
          "1927:     (variablename.empty()) ||",
          "1928:     (variabletype.empty()) ||",
          "1929:     ((variablevalue.empty()) && (variabletype != \"2\"))",
          "",
          "[Removed Lines]",
          "1926:     (idx.empty()) ||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:     return;",
          "1933:    std::vector<std::vector<std::string> > result;",
          "1935:    if (result.empty())",
          "1936:     return;",
          "",
          "[Removed Lines]",
          "1934:    result = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE Name='%q'\", variablename.c_str());",
          "",
          "[Added Lines]",
          "1933:    if (idx.empty())",
          "1934:    {",
          "1935:     result = m_sql.safe_query(\"SELECT ID FROM UserVariables WHERE Name='%q'\", variablename.c_str());",
          "1936:     if (result.empty())",
          "1937:      return;",
          "1938:     idx = result[0][0];",
          "1939:    }",
          "1941:    result = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE ID='%q'\", idx.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "284ecd6a738d2e93b39503b0b6e13d9a92e67ffb",
      "candidate_info": {
        "commit_hash": "284ecd6a738d2e93b39503b0b6e13d9a92e67ffb",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/284ecd6a738d2e93b39503b0b6e13d9a92e67ffb",
        "files": [
          "hardware/plugins/PythonObjects.cpp",
          "hardware/plugins/PythonObjects.h"
        ],
        "message": "Add Touch Device unction",
        "before_after_code_files": [
          "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp",
          "hardware/plugins/PythonObjects.h||hardware/plugins/PythonObjects.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PythonObjects.cpp||hardware/plugins/PythonObjects.cpp": [
          "File: hardware/plugins/PythonObjects.cpp -> hardware/plugins/PythonObjects.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1048:   return Py_None;",
          "1049:  }",
          "1051:  PyObject* CDevice_str(CDevice* self)",
          "1052:  {",
          "1053:   PyObject* pRetVal = PyUnicode_FromFormat(\"ID: %d, Name: '%U', nValue: %d, sValue: '%U'\", self->ID, self->Name, self->nValue, self->sValue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1051:  PyObject * CDevice_touch(CDevice * self)",
          "1052:  {",
          "1053:   if ((self->pPlugin) && (self->HwdID != -1) && (self->Unit != -1))",
          "1054:   {",
          "1055:    std::string sID = std::to_string(self->ID);",
          "1056:    m_sql.safe_query(\"UPDATE DeviceStatus LastUpdate='%s' WHERE (ID == %s )\", TimeToString(NULL, TF_DateTime).c_str(), sID.c_str());",
          "1057:   }",
          "1058:   else",
          "1059:   {",
          "1060:    _log.Log(LOG_ERROR, \"Device touch failed, Device object is not associated with a plugin.\");",
          "1061:   }",
          "1063:   return CDevice_refresh(self);",
          "1064:  }",
          "",
          "---------------"
        ],
        "hardware/plugins/PythonObjects.h||hardware/plugins/PythonObjects.h": [
          "File: hardware/plugins/PythonObjects.h -> hardware/plugins/PythonObjects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  PyObject* CDevice_insert(CDevice* self);",
          "113:  PyObject* CDevice_update(CDevice *self, PyObject *args, PyObject *kwds);",
          "114:  PyObject* CDevice_delete(CDevice* self);",
          "115:  PyObject* CDevice_str(CDevice* self);",
          "117:  static PyMemberDef CDevice_members[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:  PyObject* CDevice_touch(CDevice* self);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   { \"Create\", (PyCFunction)CDevice_insert, METH_NOARGS, \"Create the device in Domoticz.\" },",
          "143:   { \"Update\", (PyCFunction)CDevice_update, METH_VARARGS | METH_KEYWORDS, \"Update the device values in Domoticz.\" },",
          "144:   { \"Delete\", (PyCFunction)CDevice_delete, METH_NOARGS, \"Delete the device in Domoticz.\" },",
          "146:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   { \"Touch\", (PyCFunction)CDevice_touch, METH_NOARGS, \"Notify Domoticz that device has been seen.\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4ee29f98fb6e8d0d1de031c4c89caf21bc3ddb6",
      "candidate_info": {
        "commit_hash": "a4ee29f98fb6e8d0d1de031c4c89caf21bc3ddb6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/a4ee29f98fb6e8d0d1de031c4c89caf21bc3ddb6",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Reverted commit 93b71fb5adef035149a166546b33720fcae0a6c2",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9342:         total_real *= AddjMulti;",
          "9343:         rate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);",
          "9346:         root[\"result\"][ii][\"Rain\"] = szTmp;",
          "9348:         root[\"result\"][ii][\"RainRate\"] = szTmp;",
          "9349:         root[\"result\"][ii][\"Data\"] = sValue;",
          "9350:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "9345:         sprintf(szTmp, \"%.12g\", total_real);",
          "9347:         sprintf(szTmp, \"%.12g\", rate);",
          "",
          "[Added Lines]",
          "9345:         sprintf(szTmp, \"%g\", total_real);",
          "9347:         sprintf(szTmp, \"%g\", rate);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9396:        case MTYPE_ENERGY:",
          "9397:        case MTYPE_ENERGY_GENERATED:",
          "9398:         musage = float(total_real) / divider;",
          "9400:         break;",
          "9401:        case MTYPE_GAS:",
          "9402:         musage = float(total_real) / divider;",
          "9404:         break;",
          "9405:        case MTYPE_WATER:",
          "9406:         musage = float(total_real) / (divider / 1000.0f);",
          "",
          "[Removed Lines]",
          "9399:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9403:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "[Added Lines]",
          "9399:         sprintf(szTmp, \"%g kWh\", musage);",
          "9403:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9435:       {",
          "9436:       case MTYPE_ENERGY:",
          "9437:       case MTYPE_ENERGY_GENERATED:",
          "9439:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9440:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9441:        break;",
          "9442:       case MTYPE_GAS:",
          "9444:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9445:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9446:        break;",
          "9447:       case MTYPE_WATER:",
          "9449:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9450:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9451:        break;",
          "9452:       case MTYPE_COUNTER:",
          "9454:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9455:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9456:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9438:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9453:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9438:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9453:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9501:        case MTYPE_ENERGY:",
          "9502:        case MTYPE_ENERGY_GENERATED:",
          "9503:         musage = float(total_real) / divider;",
          "9505:         break;",
          "9506:        case MTYPE_GAS:",
          "9507:         musage = float(total_real) / divider;",
          "9509:         break;",
          "9510:        case MTYPE_WATER:",
          "9511:         musage = float(total_real) / divider;",
          "9513:         break;",
          "9514:        case MTYPE_COUNTER:",
          "9515:         sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "[Removed Lines]",
          "9504:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9508:         sprintf(szTmp, \"%.12g m3\", musage);",
          "9512:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "[Added Lines]",
          "9504:         sprintf(szTmp, \"%g kWh\", musage);",
          "9508:         sprintf(szTmp, \"%g m3\", musage);",
          "9512:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9538:       {",
          "9539:       case MTYPE_ENERGY:",
          "9540:       case MTYPE_ENERGY_GENERATED:",
          "9542:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9543:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9544:        break;",
          "9545:       case MTYPE_GAS:",
          "9547:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9548:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9549:        break;",
          "9550:       case MTYPE_WATER:",
          "9552:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9553:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9554:        break;",
          "9555:       case MTYPE_COUNTER:",
          "9557:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9558:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9559:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9541:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9556:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9541:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9556:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9605:       {",
          "9606:       case MTYPE_ENERGY:",
          "9607:       case MTYPE_ENERGY_GENERATED:",
          "9609:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9610:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9611:        break;",
          "9612:       case MTYPE_GAS:",
          "9614:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9615:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9616:        break;",
          "9617:       case MTYPE_WATER:",
          "9619:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9620:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9621:        break;",
          "9622:       case MTYPE_COUNTER:",
          "9624:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9625:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9626:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9608:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9623:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9608:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9623:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9674:        case MTYPE_ENERGY:",
          "9675:        case MTYPE_ENERGY_GENERATED:",
          "9676:         musage = float(total_real) / divider;",
          "9678:         break;",
          "9679:        case MTYPE_GAS:",
          "9680:         musage = float(total_real) / divider;",
          "9682:         break;",
          "9683:        case MTYPE_WATER:",
          "9684:         musage = float(total_real) / divider;",
          "9686:         break;",
          "9687:        case MTYPE_COUNTER:",
          "9688:         sprintf(szTmp, \"%llu %s\", total_real, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9677:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9681:         sprintf(szTmp, \"%.12g m3\", musage);",
          "9685:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "[Added Lines]",
          "9677:         sprintf(szTmp, \"%g kWh\", musage);",
          "9681:         sprintf(szTmp, \"%g m3\", musage);",
          "9685:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9732:       case MTYPE_ENERGY:",
          "9733:       case MTYPE_ENERGY_GENERATED:",
          "9734:        musage = float(acounter) / divider;",
          "9736:        break;",
          "9737:       case MTYPE_GAS:",
          "9738:        musage = float(acounter) / divider;",
          "9740:        break;",
          "9741:       case MTYPE_WATER:",
          "9742:        musage = float(acounter) / divider;",
          "9744:        break;",
          "9745:       case MTYPE_COUNTER:",
          "9746:        sprintf(szTmp, \"%llu %s\", acounter, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9735:        sprintf(szTmp, \"%.12g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%.12g m3\", musage);",
          "9743:        sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "[Added Lines]",
          "9735:        sprintf(szTmp, \"%g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%g m3\", musage);",
          "9743:        sprintf(szTmp, \"%g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9864:         total_real_deliv = powerdeliv - (total_min_deliv_1 + total_min_deliv_2);",
          "9866:         musage = double(total_real_usage) / EnergyDivider;",
          "9868:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9869:         musage = double(total_real_deliv) / EnergyDivider;",
          "9871:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9872:        }",
          "9873:        else",
          "9874:        {",
          "9876:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9877:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9878:        }",
          "",
          "[Removed Lines]",
          "9867:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9870:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9875:         sprintf(szTmp, \"%.12g kWh\", 0.0f);",
          "",
          "[Added Lines]",
          "9867:         sprintf(szTmp, \"%g kWh\", musage);",
          "9870:         sprintf(szTmp, \"%g kWh\", musage);",
          "9875:         sprintf(szTmp, \"%g kWh\", 0.0f);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9983:        }",
          "9984:        if (total > 0)",
          "9985:        {",
          "9987:         strcat(szData, szTmp);",
          "9988:        }",
          "9989:        root[\"result\"][ii][\"Data\"] = szData;",
          "",
          "[Removed Lines]",
          "9986:         sprintf(szTmp, \", Total: %.12g kWh\", total / 1000.0f);",
          "",
          "[Added Lines]",
          "9986:         sprintf(szTmp, \", Total: %g kWh\", total / 1000.0f);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10019:         std::vector<std::string> sd2 = result2[0];",
          "10020:         double minimum = atof(sd2[0].c_str()) / divider;",
          "10023:         root[\"result\"][ii][\"Data\"] = szData;",
          "10024:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10025:         {",
          "",
          "[Removed Lines]",
          "10022:         sprintf(szData, \"%.12g kWh\", total);",
          "",
          "[Added Lines]",
          "10022:         sprintf(szData, \"%g kWh\", total);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10027:         }",
          "10028:         else",
          "10029:         {",
          "10031:         }",
          "10032:         root[\"result\"][ii][\"Usage\"] = szData;",
          "10033:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10035:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "10036:        }",
          "10037:        else",
          "10038:        {",
          "10040:         root[\"result\"][ii][\"Data\"] = szData;",
          "10041:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10042:         {",
          "",
          "[Removed Lines]",
          "10030:          sprintf(szData, \"%.12g Watt\", atof(strarray[0].c_str()));",
          "10034:         sprintf(szTmp, \"%.12g kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%.12g kWh\", total);",
          "",
          "[Added Lines]",
          "10030:          sprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));",
          "10034:         sprintf(szTmp, \"%g kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%g kWh\", total);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10044:         }",
          "10045:         else",
          "10046:         {",
          "10048:         }",
          "10049:         root[\"result\"][ii][\"Usage\"] = szData;",
          "10050:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10047:          sprintf(szData, \"%.12g Watt\", atof(strarray[0].c_str()));",
          "",
          "[Added Lines]",
          "10047:          sprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10186:       }",
          "10187:       else if (dSubType == sTypePercentage)",
          "10188:       {",
          "10190:        root[\"result\"][ii][\"Data\"] = szData;",
          "10191:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10192:        root[\"result\"][ii][\"Image\"] = \"Computer\";",
          "",
          "[Removed Lines]",
          "10189:        sprintf(szData, \"%.12g%%\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10189:        sprintf(szData, \"%g%%\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10194:       }",
          "10195:       else if (dSubType == sTypeWaterflow)",
          "10196:       {",
          "10198:        root[\"result\"][ii][\"Data\"] = szData;",
          "10199:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10200:        root[\"result\"][ii][\"Image\"] = \"Moisture\";",
          "",
          "[Removed Lines]",
          "10197:        sprintf(szData, \"%.12g l/min\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10197:        sprintf(szData, \"%g l/min\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "10212:         SensorType = atoi(sResults[0].c_str());",
          "10213:         szAxesLabel = sResults[1];",
          "10214:        }",
          "10216:        root[\"result\"][ii][\"Data\"] = szData;",
          "10217:        root[\"result\"][ii][\"SensorType\"] = SensorType;",
          "10218:        root[\"result\"][ii][\"SensorUnit\"] = szAxesLabel;",
          "",
          "[Removed Lines]",
          "10215:        sprintf(szData, \"%.12g %s\", atof(sValue.c_str()), szAxesLabel.c_str());",
          "",
          "[Added Lines]",
          "10215:        sprintf(szData, \"%g %s\", atof(sValue.c_str()), szAxesLabel.c_str());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10247:       }",
          "10248:       else if (dSubType == sTypeVoltage)",
          "10249:       {",
          "10251:        root[\"result\"][ii][\"Data\"] = szData;",
          "10252:        root[\"result\"][ii][\"TypeImg\"] = \"current\";",
          "10253:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10250:        sprintf(szData, \"%.12g V\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10250:        sprintf(szData, \"%g V\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "10255:       }",
          "10256:       else if (dSubType == sTypeCurrent)",
          "10257:       {",
          "10259:        root[\"result\"][ii][\"Data\"] = szData;",
          "10260:        root[\"result\"][ii][\"TypeImg\"] = \"current\";",
          "10261:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10258:        sprintf(szData, \"%.12g A\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10258:        sprintf(szData, \"%g A\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10296:        StringSplit(sValue, \";\", tstrarray);",
          "10297:        if (tstrarray.empty())",
          "10298:         continue;",
          "10300:        root[\"result\"][ii][\"Data\"] = szData;",
          "10301:        root[\"result\"][ii][\"TypeImg\"] = \"gauge\";",
          "10302:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10299:        sprintf(szData, \"%.12g hPa\", atof(tstrarray[0].c_str()));",
          "",
          "[Added Lines]",
          "10299:        sprintf(szData, \"%g hPa\", atof(tstrarray[0].c_str()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10424:      }",
          "10425:      else if (dType == pTypeWEIGHT)",
          "10426:      {",
          "10428:       root[\"result\"][ii][\"Data\"] = szTmp;",
          "10429:       root[\"result\"][ii][\"HaveTimeout\"] = false;",
          "10430:      }",
          "",
          "[Removed Lines]",
          "10427:       sprintf(szTmp, \"%.12g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());",
          "",
          "[Added Lines]",
          "10427:       sprintf(szTmp, \"%g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10432:      {",
          "10433:       if (dSubType == sTypeElectric)",
          "10434:       {",
          "10436:        root[\"result\"][ii][\"Data\"] = szData;",
          "10437:       }",
          "10438:       else",
          "",
          "[Removed Lines]",
          "10435:        sprintf(szData, \"%.12g Watt\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10435:        sprintf(szData, \"%g Watt\", atof(sValue.c_str()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dc9787b9a52d2da161f41046fe1332991c22894",
      "candidate_info": {
        "commit_hash": "4dc9787b9a52d2da161f41046fe1332991c22894",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4dc9787b9a52d2da161f41046fe1332991c22894",
        "files": [
          "hardware/PVOutput_Input.cpp"
        ],
        "message": "PVOutput poll interval back to 5 minutes",
        "before_after_code_files": [
          "hardware/PVOutput_Input.cpp||hardware/PVOutput_Input.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/PVOutput_Input.cpp||hardware/PVOutput_Input.cpp": [
          "File: hardware/PVOutput_Input.cpp -> hardware/PVOutput_Input.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     return true;",
          "56: }",
          "60: void CPVOutputInput::Do_Work()",
          "61: {",
          "",
          "[Removed Lines]",
          "58: #define PVOUTPUT_POLL_INTERVAL 10",
          "",
          "[Added Lines]",
          "58: #define PVOUTPUT_POLL_INTERVAL 5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da0f39884b091fca5be4192f7ba5334ce5992ee3",
      "candidate_info": {
        "commit_hash": "da0f39884b091fca5be4192f7ba5334ce5992ee3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/da0f39884b091fca5be4192f7ba5334ce5992ee3",
        "files": [
          "hardware/USBtin.cpp"
        ],
        "message": "Removed restart function",
        "before_after_code_files": [
          "hardware/USBtin.cpp||hardware/USBtin.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/USBtin.cpp||hardware/USBtin.cpp": [
          "File: hardware/USBtin.cpp -> hardware/USBtin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  return (m_thread != nullptr);",
          "93: }",
          "101: bool USBtin::StopHardware()",
          "102: {",
          "103:  if (m_thread)",
          "",
          "[Removed Lines]",
          "95: void USBtin::Restart()",
          "96: {",
          "97:  StopHardware();",
          "98:  StartHardware();",
          "99: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:    m_USBtinBelErrorCount++;",
          "262:    if( m_USBtinBelErrorCount > 3 ){ //If more than 3 BEL receive : restart the Gateway !",
          "263:     _log.Log(LOG_ERROR,\"USBtin: 3x times BEL signal receive : restart gateway \");",
          "265:    }",
          "266:    else{",
          "267:     _log.Log(LOG_ERROR,\"USBtin: BEL signal (commande allready active or Gateway error) ! \");",
          "",
          "[Removed Lines]",
          "264:     RestartWithDelay(TIME_3sec);",
          "",
          "[Added Lines]",
          "258:     RestartWithDelay(3);",
          "",
          "---------------"
        ]
      }
    }
  ]
}