{
  "cve_id": "CVE-2011-4621",
  "cve_desc": "The Linux kernel before 2.6.37 does not properly implement a certain clock-update optimization, which allows local users to cause a denial of service (system hang) via an application that executes code in a loop.",
  "repo": "torvalds/linux",
  "patch_hash": "f26f9aff6aaf67e9a430d16c266f91b13a5bff64",
  "patch_info": {
    "commit_hash": "f26f9aff6aaf67e9a430d16c266f91b13a5bff64",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f26f9aff6aaf67e9a430d16c266f91b13a5bff64",
    "files": [
      "kernel/fork.c",
      "kernel/sched.c"
    ],
    "message": "Sched: fix skip_clock_update optimization\n\nidle_balance() drops/retakes rq->lock, leaving the previous task\nvulnerable to set_tsk_need_resched().  Clear it after we return\nfrom balancing instead, and in setup_thread_stack() as well, so\nno successfully descheduled or never scheduled task has it set.\n\nNeed resched confused the skip_clock_update logic, which assumes\nthat the next call to update_rq_clock() will come nearly immediately\nafter being set.  Make the optimization robust against the waking\na sleeper before it sucessfully deschedules case by checking that\nthe current task has not been dequeued before setting the flag,\nsince it is that useless clock update we're trying to save, and\nclear unconditionally in schedule() proper instead of conditionally\nin put_prev_task().\n\nSigned-off-by: Mike Galbraith <efault@gmx.de>\nReported-by: Bjoern B. Brandenburg <bbb.lst@gmail.com>\nTested-by: Yong Zhang <yong.zhang0@gmail.com>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: stable@kernel.org\nLKML-Reference: <1291802742.1417.9.camel@marge.simson.net>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
    "before_after_code_files": [
      "kernel/fork.c||kernel/fork.c",
      "kernel/sched.c||kernel/sched.c"
    ]
  },
  "patch_diff": {
    "kernel/fork.c||kernel/fork.c": [
      "File: kernel/fork.c -> kernel/fork.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:  setup_thread_stack(tsk, orig);",
      "275:  clear_user_return_notifier(tsk);",
      "276:  stackend = end_of_stack(tsk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "276:  clear_tsk_need_resched(tsk);",
      "",
      "---------------"
    ],
    "kernel/sched.c||kernel/sched.c": [
      "File: kernel/sched.c -> kernel/sched.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "642: inline void update_rq_clock(struct rq *rq)",
      "643: {",
      "655: }",
      "",
      "[Removed Lines]",
      "644:  if (!rq->skip_clock_update) {",
      "645:   int cpu = cpu_of(rq);",
      "646:   u64 irq_time;",
      "648:   rq->clock = sched_clock_cpu(cpu);",
      "649:   irq_time = irq_time_cpu(cpu);",
      "650:   if (rq->clock - irq_time > rq->clock_task)",
      "651:    rq->clock_task = rq->clock - irq_time;",
      "653:   sched_irq_time_avg_update(rq, irq_time);",
      "654:  }",
      "",
      "[Added Lines]",
      "644:  int cpu = cpu_of(rq);",
      "645:  u64 irq_time;",
      "647:  if (rq->skip_clock_update)",
      "648:   return;",
      "650:  rq->clock = sched_clock_cpu(cpu);",
      "651:  irq_time = irq_time_cpu(cpu);",
      "652:  if (rq->clock - irq_time > rq->clock_task)",
      "653:   rq->clock_task = rq->clock - irq_time;",
      "655:  sched_irq_time_avg_update(rq, irq_time);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2133:   rq->skip_clock_update = 1;",
      "2134: }",
      "",
      "[Removed Lines]",
      "2132:  if (test_tsk_need_resched(rq->curr))",
      "",
      "[Added Lines]",
      "2133:  if (rq->curr->se.on_rq && test_tsk_need_resched(rq->curr))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3973: {",
      "3974:  if (prev->se.on_rq)",
      "3975:   update_rq_clock(rq);",
      "3977:  prev->sched_class->put_prev_task(rq, prev);",
      "3978: }",
      "",
      "[Removed Lines]",
      "3976:  rq->skip_clock_update = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4031:   hrtick_clear(rq);",
      "4033:  raw_spin_lock_irq(&rq->lock);",
      "4036:  switch_count = &prev->nivcsw;",
      "4037:  if (prev->state && !(preempt_count() & PREEMPT_ACTIVE)) {",
      "",
      "[Removed Lines]",
      "4034:  clear_tsk_need_resched(prev);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4064:  put_prev_task(rq, prev);",
      "4065:  next = pick_next_task(rq);",
      "4067:  if (likely(prev != next)) {",
      "4068:   sched_info_switch(prev, next);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4065:  clear_tsk_need_resched(prev);",
      "4066:  rq->skip_clock_update = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4071:   rq->nr_switches++;",
      "4072:   rq->curr = next;",
      "4073:   ++*switch_count;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4075:   WARN_ON_ONCE(test_tsk_need_resched(next));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e5a74059f9059d330744eac84873b1b99657008",
      "candidate_info": {
        "commit_hash": "1e5a74059f9059d330744eac84873b1b99657008",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1e5a74059f9059d330744eac84873b1b99657008",
        "files": [
          "kernel/sched.c",
          "kernel/sched_fair.c",
          "kernel/sched_stoptask.c"
        ],
        "message": "sched: Fix cross-sched-class wakeup preemption\n\nInstead of dealing with sched classes inside each check_preempt_curr()\nimplementation, pull out this logic into the generic wakeup preemption\npath.\n\nThis fixes a hang in KVM (and others) where we are waiting for the\nstop machine thread to run ...\n\nReported-by: Markus Trippelsdorf <markus@trippelsdorf.de>\nTested-by: Marcelo Tosatti <mtosatti@redhat.com>\nTested-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLKML-Reference: <1288891946.2039.31.camel@laptop>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/sched.c||kernel/sched.c",
          "kernel/sched_fair.c||kernel/sched_fair.c",
          "kernel/sched_stoptask.c||kernel/sched_stoptask.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched.c||kernel/sched.c"
          ],
          "candidate": [
            "kernel/sched.c||kernel/sched.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/sched.c||kernel/sched.c": [
          "File: kernel/sched.c -> kernel/sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: static DEFINE_PER_CPU_SHARED_ALIGNED(struct rq, runqueues);",
          "576: static inline int cpu_of(struct rq *rq)",
          "577: {",
          "",
          "[Removed Lines]",
          "563: static inline",
          "564: void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)",
          "565: {",
          "566:  rq->curr->sched_class->check_preempt_curr(rq, p, flags);",
          "572:  if (test_tsk_need_resched(p))",
          "573:   rq->skip_clock_update = 1;",
          "574: }",
          "",
          "[Added Lines]",
          "564: static void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2118:   p->sched_class->prio_changed(rq, p, oldprio, running);",
          "2119: }",
          "2121: #ifdef CONFIG_SMP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2111: static void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)",
          "2112: {",
          "2113:  const struct sched_class *class;",
          "2115:  if (p->sched_class == rq->curr->sched_class) {",
          "2116:   rq->curr->sched_class->check_preempt_curr(rq, p, flags);",
          "2117:  } else {",
          "2118:   for_each_class(class) {",
          "2119:    if (class == rq->curr->sched_class)",
          "2120:     break;",
          "2121:    if (class == p->sched_class) {",
          "2122:     resched_task(rq->curr);",
          "2123:     break;",
          "2124:    }",
          "2125:   }",
          "2126:  }",
          "2132:  if (test_tsk_need_resched(rq->curr))",
          "2133:   rq->skip_clock_update = 1;",
          "2134: }",
          "",
          "---------------"
        ],
        "kernel/sched_fair.c||kernel/sched_fair.c": [
          "File: kernel/sched_fair.c -> kernel/sched_fair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1654:  struct cfs_rq *cfs_rq = task_cfs_rq(curr);",
          "1655:  int scale = cfs_rq->nr_running >= sched_nr_latency;",
          "1663:  if (unlikely(se == pse))",
          "1664:   return;",
          "",
          "[Removed Lines]",
          "1657:  if (unlikely(rt_prio(p->prio)))",
          "1658:   goto preempt;",
          "1660:  if (unlikely(p->sched_class != &fair_sched_class))",
          "1661:   return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/sched_stoptask.c||kernel/sched_stoptask.c": [
          "File: kernel/sched_stoptask.c -> kernel/sched_stoptask.c"
        ]
      }
    },
    {
      "candidate_hash": "305e6835e05513406fa12820e40e4a8ecb63743c",
      "candidate_info": {
        "commit_hash": "305e6835e05513406fa12820e40e4a8ecb63743c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/305e6835e05513406fa12820e40e4a8ecb63743c",
        "files": [
          "kernel/sched.c",
          "kernel/sched_fair.c",
          "kernel/sched_rt.c"
        ],
        "message": "sched: Do not account irq time to current task\n\nScheduler accounts both softirq and interrupt processing times to the\ncurrently running task. This means, if the interrupt processing was\nfor some other task in the system, then the current task ends up being\npenalized as it gets shorter runtime than otherwise.\n\nChange sched task accounting to acoount only actual task time from\ncurrently running task. Now update_curr(), modifies the delta_exec to\ndepend on rq->clock_task.\n\nNote that this change only handles CONFIG_IRQ_TIME_ACCOUNTING case. We can\nextend this to CONFIG_VIRT_CPU_ACCOUNTING with minimal effort. But, thats\nfor later.\n\nThis change will impact scheduling behavior in interrupt heavy conditions.\n\nTested on a 4-way system with eth0 handled by CPU 2 and a network heavy\ntask (nc) running on CPU 3 (and no RSS/RFS). With that I have CPU 2\nspending 75%+ of its time in irq processing. CPU 3 spending around 35%\ntime running nc task.\n\nNow, if I run another CPU intensive task on CPU 2, without this change\n/proc/<pid>/schedstat shows 100% of time accounted to this task. With this\nchange, it rightly shows less than 25% accounted to this task as remaining\ntime is actually spent on irq processing.\n\nSigned-off-by: Venkatesh Pallipadi <venki@google.com>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLKML-Reference: <1286237003-12406-7-git-send-email-venki@google.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/sched.c||kernel/sched.c",
          "kernel/sched_fair.c||kernel/sched_fair.c",
          "kernel/sched_rt.c||kernel/sched_rt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched.c||kernel/sched.c"
          ],
          "candidate": [
            "kernel/sched.c||kernel/sched.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/sched.c||kernel/sched.c": [
          "File: kernel/sched.c -> kernel/sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:  struct mm_struct *prev_mm;",
          "493:  u64 clock;",
          "495:  atomic_t nr_iowait;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:  u64 clock_task;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "644: inline void update_rq_clock(struct rq *rq)",
          "645: {",
          "648: }",
          "",
          "[Removed Lines]",
          "646:  if (!rq->skip_clock_update)",
          "647:   rq->clock = sched_clock_cpu(cpu_of(rq));",
          "",
          "[Added Lines]",
          "645: static u64 irq_time_cpu(int cpu);",
          "649:  if (!rq->skip_clock_update) {",
          "650:   int cpu = cpu_of(rq);",
          "651:   u64 irq_time;",
          "653:   rq->clock = sched_clock_cpu(cpu);",
          "654:   irq_time = irq_time_cpu(cpu);",
          "655:   if (rq->clock - irq_time > rq->clock_task)",
          "656:    rq->clock_task = rq->clock - irq_time;",
          "657:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1926:  sched_clock_irqtime = 0;",
          "1927: }",
          "1929: void account_system_vtime(struct task_struct *curr)",
          "1930: {",
          "1931:  unsigned long flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1951: static u64 irq_time_cpu(int cpu)",
          "1952: {",
          "1953:  if (!sched_clock_irqtime)",
          "1954:   return 0;",
          "1956:  return per_cpu(cpu_softirq_time, cpu) + per_cpu(cpu_hardirq_time, cpu);",
          "1957: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1955:  local_irq_restore(flags);",
          "1956: }",
          "1958: #endif",
          "1960: #include \"sched_idletask.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1988: #else",
          "1990: static u64 irq_time_cpu(int cpu)",
          "1991: {",
          "1992:  return 0;",
          "1993: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3323:  if (task_current(rq, p)) {",
          "3324:   update_rq_clock(rq);",
          "3326:   if ((s64)ns < 0)",
          "3327:    ns = 0;",
          "3328:  }",
          "",
          "[Removed Lines]",
          "3325:   ns = rq->clock - p->se.exec_start;",
          "",
          "[Added Lines]",
          "3362:   ns = rq->clock_task - p->se.exec_start;",
          "",
          "---------------"
        ],
        "kernel/sched_fair.c||kernel/sched_fair.c": [
          "File: kernel/sched_fair.c -> kernel/sched_fair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: static void update_curr(struct cfs_rq *cfs_rq)",
          "520: {",
          "521:  struct sched_entity *curr = cfs_rq->curr;",
          "523:  unsigned long delta_exec;",
          "525:  if (unlikely(!curr))",
          "",
          "[Removed Lines]",
          "522:  u64 now = rq_of(cfs_rq)->clock;",
          "",
          "[Added Lines]",
          "522:  u64 now = rq_of(cfs_rq)->clock_task;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606: }",
          "",
          "[Removed Lines]",
          "605:  se->exec_start = rq_of(cfs_rq)->clock;",
          "",
          "[Added Lines]",
          "605:  se->exec_start = rq_of(cfs_rq)->clock_task;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1806:  if (!tsk_cache_hot ||",
          "1807:   sd->nr_balance_failed > sd->cache_nice_tries) {",
          "1808: #ifdef CONFIG_SCHEDSTATS",
          "",
          "[Removed Lines]",
          "1805:  tsk_cache_hot = task_hot(p, rq->clock, sd);",
          "",
          "[Added Lines]",
          "1805:  tsk_cache_hot = task_hot(p, rq->clock_task, sd);",
          "",
          "---------------"
        ],
        "kernel/sched_rt.c||kernel/sched_rt.c": [
          "File: kernel/sched_rt.c -> kernel/sched_rt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:  if (!task_has_rt_policy(curr))",
          "610:   return;",
          "613:  if (unlikely((s64)delta_exec < 0))",
          "614:   delta_exec = 0;",
          "",
          "[Removed Lines]",
          "612:  delta_exec = rq->clock - curr->se.exec_start;",
          "",
          "[Added Lines]",
          "612:  delta_exec = rq->clock_task - curr->se.exec_start;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:  curr->se.sum_exec_runtime += delta_exec;",
          "619:  account_group_exec_runtime(curr, delta_exec);",
          "622:  cpuacct_charge(curr, delta_exec);",
          "624:  sched_rt_avg_update(rq, delta_exec);",
          "",
          "[Removed Lines]",
          "621:  curr->se.exec_start = rq->clock;",
          "",
          "[Added Lines]",
          "621:  curr->se.exec_start = rq->clock_task;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1075:  } while (rt_rq);",
          "1077:  p = rt_task_of(rt_se);",
          "1080:  return p;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  p->se.exec_start = rq->clock;",
          "",
          "[Added Lines]",
          "1078:  p->se.exec_start = rq->clock_task;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1713: {",
          "1714:  struct task_struct *p = rq->curr;",
          "1719:  dequeue_pushable_task(rq, p);",
          "",
          "[Removed Lines]",
          "1716:  p->se.exec_start = rq->clock;",
          "",
          "[Added Lines]",
          "1716:  p->se.exec_start = rq->clock_task;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61eadef6a9bde9ea62fda724a9cb501ce9bc925a",
      "candidate_info": {
        "commit_hash": "61eadef6a9bde9ea62fda724a9cb501ce9bc925a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/61eadef6a9bde9ea62fda724a9cb501ce9bc925a",
        "files": [
          "kernel/sched.c",
          "kernel/sched_rt.c"
        ],
        "message": "sched, rt: Update rq clock when unthrottling of an otherwise idle CPU\n\nIf an RT task is awakened while it's rt_rq is throttled, the time between\nwakeup/enqueue and unthrottle/selection may be accounted as rt_time\nif the CPU is idle.  Set rq->skip_clock_update negative upon throttle\nrelease to tell put_prev_task() that we need a clock update.\n\nReported-by: Thomas Giesel <skoe@directbox.com>\nSigned-off-by: Mike Galbraith <efault@gmx.de>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLink: http://lkml.kernel.org/r/1304059010.7472.1.camel@marge.simson.net\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/sched.c||kernel/sched.c",
          "kernel/sched_rt.c||kernel/sched_rt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched.c||kernel/sched.c"
          ],
          "candidate": [
            "kernel/sched.c||kernel/sched.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/sched.c||kernel/sched.c": [
          "File: kernel/sched.c -> kernel/sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:  u64 nohz_stamp;",
          "467:  unsigned char nohz_balance_kick;",
          "468: #endif",
          "472:  struct load_weight load;",
          "",
          "[Removed Lines]",
          "469:  unsigned int skip_clock_update;",
          "",
          "[Added Lines]",
          "469:  int skip_clock_update;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652: {",
          "653:  s64 delta;",
          "656:   return;",
          "658:  delta = sched_clock_cpu(cpu_of(rq)) - rq->clock;",
          "",
          "[Removed Lines]",
          "655:  if (rq->skip_clock_update)",
          "",
          "[Added Lines]",
          "655:  if (rq->skip_clock_update > 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4128: static void put_prev_task(struct rq *rq, struct task_struct *prev)",
          "4129: {",
          "4131:   update_rq_clock(rq);",
          "4132:  prev->sched_class->put_prev_task(rq, prev);",
          "4133: }",
          "",
          "[Removed Lines]",
          "4130:  if (prev->on_rq)",
          "",
          "[Added Lines]",
          "4130:  if (prev->on_rq || rq->skip_clock_update < 0)",
          "",
          "---------------"
        ],
        "kernel/sched_rt.c||kernel/sched_rt.c": [
          "File: kernel/sched_rt.c -> kernel/sched_rt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:    if (rt_rq->rt_throttled && rt_rq->rt_time < runtime) {",
          "563:     rt_rq->rt_throttled = 0;",
          "564:     enqueue = 1;",
          "565:    }",
          "566:    if (rt_rq->rt_time || rt_rq->rt_nr_running)",
          "567:     idle = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:     if (rt_rq->rt_nr_running && rq->curr == rq->idle)",
          "571:      rq->skip_clock_update = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa483808516ca5cacfa0e5849691f64fec25828e",
      "candidate_info": {
        "commit_hash": "aa483808516ca5cacfa0e5849691f64fec25828e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/aa483808516ca5cacfa0e5849691f64fec25828e",
        "files": [
          "kernel/sched.c",
          "kernel/sched_fair.c",
          "kernel/sched_features.h"
        ],
        "message": "sched: Remove irq time from available CPU power\n\nThe idea was suggested by Peter Zijlstra here:\n\n  http://marc.info/?l=linux-kernel&m=127476934517534&w=2\n\nirq time is technically not available to the tasks running on the CPU.\nThis patch removes irq time from CPU power piggybacking on\nsched_rt_avg_update().\n\nTested this by keeping CPU X busy with a network intensive task having 75%\noa a single CPU irq processing (hard+soft) on a 4-way system. And start seven\ncycle soakers on the system. Without this change, there will be two tasks on\neach CPU. With this change, there is a single task on irq busy CPU X and\nremaining 7 tasks are spread around among other 3 CPUs.\n\nSigned-off-by: Venkatesh Pallipadi <venki@google.com>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLKML-Reference: <1286237003-12406-8-git-send-email-venki@google.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/sched.c||kernel/sched.c",
          "kernel/sched_fair.c||kernel/sched_fair.c",
          "kernel/sched_features.h||kernel/sched_features.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched.c||kernel/sched.c"
          ],
          "candidate": [
            "kernel/sched.c||kernel/sched.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/sched.c||kernel/sched.c": [
          "File: kernel/sched.c -> kernel/sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:  u64 avg_idle;",
          "520: #endif",
          "523:  unsigned long calc_load_update;",
          "524:  long calc_load_active;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: #ifdef CONFIG_IRQ_TIME_ACCOUNTING",
          "523:  u64 prev_irq_time;",
          "524: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "645: static u64 irq_time_cpu(int cpu);",
          "647: inline void update_rq_clock(struct rq *rq)",
          "648: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650: static void sched_irq_time_avg_update(struct rq *rq, u64 irq_time);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "654:   irq_time = irq_time_cpu(cpu);",
          "655:   if (rq->clock - irq_time > rq->clock_task)",
          "656:    rq->clock_task = rq->clock - irq_time;",
          "657:  }",
          "658: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:   sched_irq_time_avg_update(rq, irq_time);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1985:  local_irq_restore(flags);",
          "1986: }",
          "1988: #else",
          "1990: static u64 irq_time_cpu(int cpu)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1995: static void sched_irq_time_avg_update(struct rq *rq, u64 curr_irq_time)",
          "1996: {",
          "1997:  if (sched_clock_irqtime && sched_feat(NONIRQ_POWER)) {",
          "1998:   u64 delta_irq = curr_irq_time - rq->prev_irq_time;",
          "1999:   rq->prev_irq_time = curr_irq_time;",
          "2000:   sched_rt_avg_update(rq, delta_irq);",
          "2001:  }",
          "2002: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1992:  return 0;",
          "1993: }",
          "1995: #endif",
          "1997: #include \"sched_idletask.c\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2011: static void sched_irq_time_avg_update(struct rq *rq, u64 curr_irq_time) { }",
          "",
          "---------------"
        ],
        "kernel/sched_fair.c||kernel/sched_fair.c": [
          "File: kernel/sched_fair.c -> kernel/sched_fair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275:  u64 total, available;",
          "2277:  total = sched_avg_period() + (rq->clock - rq->age_stamp);",
          "2280:  if (unlikely((s64)total < SCHED_LOAD_SCALE))",
          "2281:   total = SCHED_LOAD_SCALE;",
          "",
          "[Removed Lines]",
          "2278:  available = total - rq->rt_avg;",
          "",
          "[Added Lines]",
          "2279:  if (unlikely(total < rq->rt_avg)) {",
          "2281:   available = 0;",
          "2282:  } else {",
          "2283:   available = total - rq->rt_avg;",
          "2284:  }",
          "",
          "---------------"
        ],
        "kernel/sched_features.h||kernel/sched_features.h": [
          "File: kernel/sched_features.h -> kernel/sched_features.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: SCHED_FEAT(OWNER_SPIN, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: SCHED_FEAT(NONIRQ_POWER, 1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe44d62122829959e960bc699318d58966922a69",
      "candidate_info": {
        "commit_hash": "fe44d62122829959e960bc699318d58966922a69",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fe44d62122829959e960bc699318d58966922a69",
        "files": [
          "kernel/sched.c"
        ],
        "message": "sched: Fix the irqtime code to deal with u64 wraps\n\nSome ARM systems have a short sched_clock() [ which needs to be fixed\ntoo ], but this exposed a bug in the irq_time code as well, it doesn't\ndeal with wraps at all.\n\nFix the irq_time code to deal with u64 wraps by re-writing the code to\nonly use delta increments, which avoids the whole issue.\n\nReviewed-by: Venkatesh Pallipadi <venki@google.com>\nReported-by: Mikael Pettersson <mikpe@it.uu.se>\nTested-by: Mikael Pettersson <mikpe@it.uu.se>\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nLKML-Reference: <1292242433.6803.199.camel@twins>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>",
        "before_after_code_files": [
          "kernel/sched.c||kernel/sched.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched.c||kernel/sched.c"
          ],
          "candidate": [
            "kernel/sched.c||kernel/sched.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/sched.c||kernel/sched.c": [
          "File: kernel/sched.c -> kernel/sched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "643: {",
          "647:  if (rq->skip_clock_update)",
          "648:   return;",
          "656: }",
          "",
          "[Removed Lines]",
          "639: static u64 irq_time_cpu(int cpu);",
          "640: static void sched_irq_time_avg_update(struct rq *rq, u64 irq_time);",
          "642: inline void update_rq_clock(struct rq *rq)",
          "644:  int cpu = cpu_of(rq);",
          "645:  u64 irq_time;",
          "650:  rq->clock = sched_clock_cpu(cpu);",
          "651:  irq_time = irq_time_cpu(cpu);",
          "652:  if (rq->clock - irq_time > rq->clock_task)",
          "653:   rq->clock_task = rq->clock - irq_time;",
          "655:  sched_irq_time_avg_update(rq, irq_time);",
          "",
          "[Added Lines]",
          "639: static void update_rq_clock_task(struct rq *rq, s64 delta);",
          "641: static void update_rq_clock(struct rq *rq)",
          "643:  s64 delta;",
          "648:  delta = sched_clock_cpu(cpu_of(rq)) - rq->clock;",
          "649:  rq->clock += delta;",
          "650:  update_rq_clock_task(rq, delta);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1946:  sched_clock_irqtime = 0;",
          "1947: }",
          "1950: {",
          "1954:  return per_cpu(cpu_softirq_time, cpu) + per_cpu(cpu_hardirq_time, cpu);",
          "1955: }",
          "1957: void account_system_vtime(struct task_struct *curr)",
          "1958: {",
          "1959:  unsigned long flags;",
          "1960:  int cpu;",
          "1963:  if (!sched_clock_irqtime)",
          "1964:   return;",
          "",
          "[Removed Lines]",
          "1949: static u64 irq_time_cpu(int cpu)",
          "1951:  if (!sched_clock_irqtime)",
          "1952:   return 0;",
          "1961:  u64 now, delta;",
          "",
          "[Added Lines]",
          "1944: static inline u64 irq_time_cpu(int cpu)",
          "1956:  s64 delta;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1966:  local_irq_save(flags);",
          "1968:  cpu = smp_processor_id();",
          "",
          "[Removed Lines]",
          "1969:  now = sched_clock_cpu(cpu);",
          "1970:  delta = now - per_cpu(irq_start_time, cpu);",
          "1971:  per_cpu(irq_start_time, cpu) = now;",
          "",
          "[Added Lines]",
          "1965:  delta = sched_clock_cpu(cpu) - __this_cpu_read(irq_start_time);",
          "1966:  __this_cpu_add(irq_start_time, delta);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1978:  if (hardirq_count())",
          "1980:  else if (in_serving_softirq() && !(curr->flags & PF_KSOFTIRQD))",
          "1983:  local_irq_restore(flags);",
          "1984: }",
          "1985: EXPORT_SYMBOL_GPL(account_system_vtime);",
          "1988: {",
          "1994: }",
          "1999: {",
          "2001: }",
          "2007: #include \"sched_idletask.c\"",
          "2008: #include \"sched_fair.c\"",
          "",
          "[Removed Lines]",
          "1979:   per_cpu(cpu_hardirq_time, cpu) += delta;",
          "1981:   per_cpu(cpu_softirq_time, cpu) += delta;",
          "1987: static void sched_irq_time_avg_update(struct rq *rq, u64 curr_irq_time)",
          "1989:  if (sched_clock_irqtime && sched_feat(NONIRQ_POWER)) {",
          "1990:   u64 delta_irq = curr_irq_time - rq->prev_irq_time;",
          "1991:   rq->prev_irq_time = curr_irq_time;",
          "1992:   sched_rt_avg_update(rq, delta_irq);",
          "1993:  }",
          "1996: #else",
          "1998: static u64 irq_time_cpu(int cpu)",
          "2000:  return 0;",
          "2003: static void sched_irq_time_avg_update(struct rq *rq, u64 curr_irq_time) { }",
          "2005: #endif",
          "",
          "[Added Lines]",
          "1975:   __this_cpu_add(cpu_hardirq_time, delta);",
          "1977:   __this_cpu_add(cpu_softirq_time, delta);",
          "1983: static void update_rq_clock_task(struct rq *rq, s64 delta)",
          "1985:  s64 irq_delta;",
          "1987:  irq_delta = irq_time_cpu(cpu_of(rq)) - rq->prev_irq_time;",
          "2004:  if (irq_delta > delta)",
          "2005:   irq_delta = delta;",
          "2007:  rq->prev_irq_time += irq_delta;",
          "2008:  delta -= irq_delta;",
          "2009:  rq->clock_task += delta;",
          "2011:  if (irq_delta && sched_feat(NONIRQ_POWER))",
          "2012:   sched_rt_avg_update(rq, irq_delta);",
          "2017: static void update_rq_clock_task(struct rq *rq, s64 delta)",
          "2019:  rq->clock_task += delta;",
          "",
          "---------------"
        ]
      }
    }
  ]
}