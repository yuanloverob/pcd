{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
      "candidate_info": {
        "commit_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d04020775b10b252029455d2b8dcfcf49a47e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/cast.test"
        ],
        "message": "As a special case, casting '-0.0' into numeric should yield 0. Fix for ticket [674385aeba91c774].\n\nFossilOrigin-Name: 491f0f9bbddb6302536d99abd1ea481fd747ddcf6c6eaaacc0338d147b119081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "704: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   execsql {SELECT CAST('123.5abc' AS integer)}",
          "184: } 123",
          "187:   execsql {SELECT CAST(null AS REAL)}",
          "188: } {{}}",
          "190:   execsql {SELECT typeof(CAST(null AS REAL))}",
          "191: } {null}",
          "193:   execsql {SELECT CAST(1 AS REAL)}",
          "194: } {1.0}",
          "196:   execsql {SELECT typeof(CAST(1 AS REAL))}",
          "197: } {real}",
          "199:   execsql {SELECT CAST('1' AS REAL)}",
          "200: } {1.0}",
          "202:   execsql {SELECT typeof(CAST('1' AS REAL))}",
          "203: } {real}",
          "205:   execsql {SELECT CAST('abc' AS REAL)}",
          "206: } {0.0}",
          "208:   execsql {SELECT typeof(CAST('abc' AS REAL))}",
          "209: } {real}",
          "211:   execsql {SELECT CAST(x'31' AS REAL)}",
          "212: } {1.0}",
          "214:   execsql {SELECT typeof(CAST(x'31' AS REAL))}",
          "215: } {real}",
          "",
          "[Removed Lines]",
          "186: do_test case-1.60 {",
          "189: do_test case-1.61 {",
          "192: do_test case-1.62 {",
          "195: do_test case-1.63 {",
          "198: do_test case-1.64 {",
          "201: do_test case-1.65 {",
          "204: do_test case-1.66 {",
          "207: do_test case-1.67 {",
          "210: do_test case-1.68 {",
          "213: do_test case-1.69 {",
          "",
          "[Added Lines]",
          "186: do_test cast-1.60 {",
          "189: do_test cast-1.61 {",
          "192: do_test cast-1.62 {",
          "195: do_test cast-1.63 {",
          "198: do_test cast-1.64 {",
          "201: do_test cast-1.65 {",
          "204: do_test cast-1.66 {",
          "207: do_test cast-1.67 {",
          "210: do_test cast-1.68 {",
          "213: do_test cast-1.69 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     } 9223372036854774784",
          "300:   }",
          "301: }",
          "303:   execsql {SELECT CAST(NULL AS numeric)}",
          "304: } {{}}",
          "",
          "[Removed Lines]",
          "302: do_test case-3.31 {",
          "",
          "[Added Lines]",
          "302: do_test cast-3.31 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368: # ignored because it is no part of the integer prefix.",
          "369: # EVIDENCE-OF: R-24225-46995 For example, \"(CAST '123e+5' AS INTEGER)\"",
          "370: # results in 123, not in 12300000.",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "",
          "[Removed Lines]",
          "371: do_execsql_test case-5.3 {",
          "",
          "[Added Lines]",
          "371: do_execsql_test cast-5.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378: # The following does not have anything to do with the CAST operator,",
          "379: # but it does deal with affinity transformations.",
          "380: #",
          "382:   DROP TABLE IF EXISTS t1;",
          "383:   CREATE TABLE t1(a NUMERIC);",
          "384:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "381: do_execsql_test case-6.1 {",
          "",
          "[Added Lines]",
          "381: do_execsql_test cast-6.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392: # 2019-06-07",
          "393: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "395:   SELECT CAST('-' AS NUMERIC);",
          "396: } {0}",
          "398:   SELECT CAST('-0' AS NUMERIC);",
          "399: } {0}",
          "401:   SELECT CAST('+' AS NUMERIC);",
          "402: } {0}",
          "404:   SELECT CAST('/' AS NUMERIC);",
          "405: } {0}",
          "407: # 2019-06-07",
          "408: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "410:   SELECT '' - 2851427734582196970;",
          "411: } {-2851427734582196970}",
          "413:   SELECT 0 - 2851427734582196970;",
          "414: } {-2851427734582196970}",
          "416:   SELECT '' - 1;",
          "417: } {-1}",
          "",
          "[Removed Lines]",
          "394: do_execsql_test case-7.1 {",
          "397: do_execsql_test case-7.2 {",
          "400: do_execsql_test case-7.3 {",
          "403: do_execsql_test case-7.4 {",
          "409: do_execsql_test case-7.10 {",
          "412: do_execsql_test case-7.11 {",
          "415: do_execsql_test case-7.12 {",
          "",
          "[Added Lines]",
          "394: do_execsql_test cast-7.1 {",
          "397: do_execsql_test cast-7.2 {",
          "400: do_execsql_test cast-7.3 {",
          "403: do_execsql_test cast-7.4 {",
          "409: do_execsql_test cast-7.10 {",
          "412: do_execsql_test cast-7.11 {",
          "415: do_execsql_test cast-7.12 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: # 2019-06-12",
          "451: # https://www.sqlite.org/src/info/674385aeba91c774",
          "452: #",
          "453: do_execsql_test cast-7.40 {",
          "454:   SELECT CAST('-0.0' AS numeric);",
          "455: } 0",
          "456: do_execsql_test cast-7.41 {",
          "457:   SELECT CAST('0.0' AS numeric);",
          "458: } 0",
          "459: do_execsql_test cast-7.42 {",
          "460:   SELECT CAST('+0.0' AS numeric);",
          "461: } 0",
          "462: do_execsql_test cast-7.43 {",
          "463:   SELECT CAST('-1.0' AS numeric);",
          "464: } -1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
      "candidate_info": {
        "commit_hash": "a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2de66c6b4f7a89f55cfd4098d27f8b031e29229",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".recover\" output in the shell to use double-quotes around table and column identifiers.\n\nFossilOrigin-Name: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bfc29e62eff0ed00c153e18a27815f7e3ba316f46871e9645b84ab1e6709a392",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3977:   }",
          "3978: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3984: static void shellIdQuote(",
          "3985:   sqlite3_context *context,",
          "3986:   int argc,",
          "3987:   sqlite3_value **argv",
          "3988: ){",
          "3989:   const char *zName = (const char*)sqlite3_value_text(argv[0]);",
          "3990:   if( zName ){",
          "3991:     char *z = sqlite3_mprintf(\"\\\"%w\\\"\", zName);",
          "3992:     sqlite3_result_text(context, z, -1, sqlite3_free);",
          "3993:   }",
          "3994: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4153:                             shellEscapeCrnl, 0, 0);",
          "4154:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4155:                             shellInt32, 0, 0);",
          "4156: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4157:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4158:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4172:     sqlite3_create_function(p->db, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "4173:                             shellIdQuote, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6330:     sqlite3_stmt *pStmt = 0;",
          "6332:     rc = sqlite3_open(\"\", &dbtmp);",
          "6333:     if( rc==SQLITE_OK ){",
          "6334:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "6335:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6351:     if( rc==SQLITE_OK ){",
          "6352:       sqlite3_create_function(dbtmp, \"shell_idquote\", 1, SQLITE_UTF8, 0,",
          "6353:                               shellIdQuote, 0, 0);",
          "6354:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6386:         }",
          "6387:       }",
          "6390:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6391:       pTab->nCol = nSqlCol;",
          "6393:       if( bIntkey ){",
          "6395:       }else{",
          "6396:         pTab->azlCol[0] = shellMPrintf(&rc, \"\");",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6389:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", zName);",
          "6394:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "[Added Lines]",
          "6411:       pTab->zQuoted = shellMPrintf(&rc, \"\\\"%w\\\"\", zName);",
          "6416:         pTab->azlCol[0] = shellMPrintf(&rc, \"\\\"%w\\\"\", zPk);",
          "6422:           \"SELECT %Q || group_concat(shell_idquote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6512:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6513:     if( pTab ){",
          "6515:       pTab->nCol = nCol;",
          "6516:       pTab->iPk = -2;",
          "6517:       if( nCol>0 ){",
          "",
          "[Removed Lines]",
          "6514:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", zTab);",
          "",
          "[Added Lines]",
          "6536:       pTab->zQuoted = shellMPrintf(pRc, \"\\\"%w\\\"\", zTab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6775:       if( pTab==0 ) break;",
          "6776:     }",
          "6779:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6780:     }",
          "6781:     sqlite3_bind_int(pPages, 1, iRoot);",
          "",
          "[Removed Lines]",
          "6778:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "",
          "[Added Lines]",
          "6800:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"\\\"sqlite_sequence\\\"\") ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
      "candidate_info": {
        "commit_hash": "01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01a3b6b1b2dae46b1a54264ce78ff95fb7fc2d95",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/window.c"
        ],
        "message": "Change the meaning of the SQLITE_SUBTYPE flag so that it indicates that the user-defined function cares about the subtypes of its arguments.\n\nFossilOrigin-Name: af1bc20f502816db460d2b2d353f715da5cf660e59095de5214c829c1cb20981",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                         SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_SUBTYPE,",
          "2508:                         (void*)&aFunc[i].flag,",
          "2509:                         aFunc[i].xFunc, 0, 0);",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: }",
          "",
          "[Removed Lines]",
          "875: int exprListContainsSubtype(Parse *pParse, ExprList *pList){",
          "876:   if( pList ){",
          "877:     sqlite3 *db = pParse->db;",
          "878:     int i;",
          "879:     for(i=0; i<pList->nExpr; i++){",
          "880:       Expr *p = pList->a[i].pExpr;",
          "881:       if( p->op==TK_FUNCTION ){",
          "882:         FuncDef *pDef;",
          "883:         int nArg = 0;",
          "884:         if( !ExprHasProperty(p, EP_TokenOnly) && p->x.pList ){",
          "885:           nArg = p->x.pList->nExpr;",
          "886:         }",
          "887:         pDef = sqlite3FindFunction(db, p->u.zToken, nArg, db->enc, 0);",
          "888:         if( pDef && (pDef->funcFlags & SQLITE_FUNC_SUBTYPE) ){",
          "889:           return 1;",
          "890:         }",
          "891:       }",
          "892:     }",
          "893:   }",
          "894:   return 0;",
          "895: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "994:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "996:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "997:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "998:         pWin->bExprArgs = 1;",
          "",
          "[Removed Lines]",
          "995:       if( exprListContainsSubtype(pParse, pArgs) ){",
          "",
          "[Added Lines]",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
      "candidate_info": {
        "commit_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix another potential \"jump depends on uninitialized value\" warning.\n\nFossilOrigin-Name: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268: ){",
          "2269:   WhereTerm *pTerm, *pX;",
          "2270:   Bitmask notAllowed = ~(pLoop->prereq|pLoop->maskSelf);",
          "2274:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "",
          "[Removed Lines]",
          "2271:   int i, j, k;",
          "",
          "[Added Lines]",
          "2271:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2294:         pLoop->nOut--;",
          "2295:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "2296:           Expr *pRight = pTerm->pExpr->pRight;",
          "2297:           testcase( pTerm->pExpr->op==TK_IS );",
          "2298:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2299:             k = 10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:           int k = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
      "candidate_info": {
        "commit_hash": "29e9af88484b2266189d694faa3eb3e69f0a7190",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29e9af88484b2266189d694faa3eb3e69f0a7190",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change the way a comparison used to detect corrupt databases in fts3 is done to avoid potential pointer overflow in 32-bit builds.\n\nFossilOrigin-Name: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( (&pReader->aNode[pReader->nNode] - pReader->aDoclist)<pReader->nDoclist",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}