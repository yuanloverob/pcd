{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
      "candidate_info": {
        "commit_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an fts3 assert() that could fail when operating on a database containing corrupt records.\n\nFossilOrigin-Name: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2482: ){",
          "2484:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2485:     iWrite = iVal - *piPrev;",
          "2486:   }else{",
          "2487:     iWrite = *piPrev - iVal;",
          "2488:   }",
          "2489:   assert( *pbFirst || *piPrev==0 );",
          "2490:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2483:   sqlite3_int64 iWrite;",
          "2491:   assert( *pbFirst==0 || iWrite>=0 );",
          "",
          "[Added Lines]",
          "2483:   sqlite3_uint64 iWrite;",
          "2485:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2488:     assert_fts3_nc( *piPrev>=iVal );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5546:   SELECT (matchinfo(null)) FROM t1 WHERE t1 MATCH 'ee*e*e*e*e*e*e*Re*e*e*e**'",
          "5547: } {1 {database disk image is malformed}}",
          "5549: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5549: #-------------------------------------------------------------------------",
          "5550: #",
          "5551: reset_db",
          "5552: do_execsql_test 31.0 {",
          "5553: CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "5554: INSERT INTO t1_segdir VALUES(0,0,0,0,'0 592',X'00016dcb048ce6fbd3b2d68bfebf
          "5555: INSERT INTO t1_segdir VALUES(0,1,0,0,'0 18',X'00026d6d0d8ee6fbd3b2d68bfe7f01020200');",
          "5556: }",
          "5558: do_catchsql_test 31.1 {",
          "5559:   SELECT (matchinfo(t1, c ) ) FROM t1 WHERE t1 MATCH 'M*M*M*M*';",
          "5560: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
      "candidate_info": {
        "commit_hash": "cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc7a850f2e89e9cf6e893a6320ac9407f630f877",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Remove \"cache mode\" from the window frame code generator. Handle the same cases by editing the window frame specification itself.\n\nFossilOrigin-Name: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bd1a07949ff3d394056bfcc813444401ef00806e3f0e0423ff6962541e84bdb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:   int regFirst;",
          "3583: };",
          "3585: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3582:   int regSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   sqlite3_value **apArg",
          "242: ){",
          "243:   struct CallCount *p;",
          "246:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "247:   if( p ){",
          "255:   }",
          "256: }",
          "257: static void percent_rankValueFunc(sqlite3_context *pCtx){",
          "258:   struct CallCount *p;",
          "259:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "260:   if( p ){",
          "261:     if( p->nTotal>1 ){",
          "263:       sqlite3_result_double(pCtx, r);",
          "264:     }else{",
          "265:       sqlite3_result_double(pCtx, 0.0);",
          "266:     }",
          "268:   }",
          "269: }",
          "277: static void cume_distStepFunc(",
          "278:   sqlite3_context *pCtx,",
          "",
          "[Removed Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==1 );",
          "248:     if( p->nTotal==0 ){",
          "249:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "250:     }",
          "251:     p->nStep++;",
          "252:     if( p->nValue==0 ){",
          "253:       p->nValue = p->nStep;",
          "254:     }",
          "262:       double r = (double)(p->nValue-1) / (double)(p->nTotal-1);",
          "267:     p->nValue = 0;",
          "",
          "[Added Lines]",
          "244:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "247:     p->nTotal++;",
          "250: static void percent_rankInvFunc(",
          "251:   sqlite3_context *pCtx,",
          "252:   int nArg,",
          "253:   sqlite3_value **apArg",
          "254: ){",
          "255:   struct CallCount *p;",
          "256:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "257:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "258:   p->nStep++;",
          "259: }",
          "264:     p->nValue = p->nStep;",
          "266:       double r = (double)p->nValue / (double)(p->nTotal-1);",
          "273: #define percent_rankFinalizeFunc percent_rankValueFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   sqlite3_value **apArg",
          "281: ){",
          "282:   struct CallCount *p;",
          "285:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "286:   if( p ){",
          "291:   }",
          "292: }",
          "293: static void cume_distValueFunc(sqlite3_context *pCtx){",
          "294:   struct CallCount *p;",
          "295:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "",
          "[Removed Lines]",
          "283:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "287:     if( p->nTotal==0 ){",
          "288:       p->nTotal = sqlite3_value_int64(apArg[0]);",
          "289:     }",
          "290:     p->nStep++;",
          "",
          "[Added Lines]",
          "287:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "290:     p->nTotal++;",
          "293: static void cume_distInvFunc(",
          "294:   sqlite3_context *pCtx,",
          "295:   int nArg,",
          "296:   sqlite3_value **apArg",
          "297: ){",
          "298:   struct CallCount *p;",
          "299:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "300:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "301:   p->nStep++;",
          "302: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     sqlite3_result_double(pCtx, r);",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: #define cume_distFinalizeFunc cume_distValueFunc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:   sqlite3_value **apArg",
          "321: ){",
          "322:   struct NtileCtx *p;",
          "324:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "325:   if( p ){",
          "326:     if( p->nTotal==0 ){",
          "327:       p->nParam = sqlite3_value_int64(apArg[0]);",
          "329:       if( p->nParam<=0 ){",
          "330:         sqlite3_result_error(",
          "331:             pCtx, \"argument of ntile must be a positive integer\", -1",
          "332:         );",
          "333:       }",
          "334:     }",
          "336:   }",
          "337: }",
          "338: static void ntileValueFunc(sqlite3_context *pCtx){",
          "339:   struct NtileCtx *p;",
          "340:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "341:   if( p && p->nParam>0 ){",
          "342:     int nSize = (p->nTotal / p->nParam);",
          "343:     if( nSize==0 ){",
          "345:     }else{",
          "346:       i64 nLarge = p->nTotal - p->nParam*nSize;",
          "347:       i64 iSmall = nLarge*(nSize+1);",
          "350:       assert( (nLarge*(nSize+1) + (p->nParam-nLarge)*nSize)==p->nTotal );",
          "",
          "[Removed Lines]",
          "323:   assert( nArg==2 ); UNUSED_PARAMETER(nArg);",
          "328:       p->nTotal = sqlite3_value_int64(apArg[1]);",
          "335:     p->iRow++;",
          "344:       sqlite3_result_int64(pCtx, p->iRow);",
          "348:       i64 iRow = p->iRow-1;",
          "",
          "[Added Lines]",
          "334:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "345:     p->nTotal++;",
          "348: static void ntileInvFunc(",
          "349:   sqlite3_context *pCtx,",
          "350:   int nArg,",
          "351:   sqlite3_value **apArg",
          "352: ){",
          "353:   struct NtileCtx *p;",
          "354:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "355:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "356:   p->iRow++;",
          "357: }",
          "364:       sqlite3_result_int64(pCtx, p->iRow+1);",
          "368:       i64 iRow = p->iRow;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:     }",
          "358:   }",
          "359: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #define ntileFinalizeFunc ntileValueFunc",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:     WINDOWFUNCX(row_number, 0, 0),",
          "497:     WINDOWFUNCX(dense_rank, 0, 0),",
          "498:     WINDOWFUNCX(rank, 0, 0),",
          "502:     WINDOWFUNCALL(last_value, 1, 0),",
          "503:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "504:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "",
          "[Removed Lines]",
          "499:     WINDOWFUNCX(percent_rank, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "500:     WINDOWFUNCX(cume_dist, 0, SQLITE_FUNC_WINDOW_SIZE),",
          "501:     WINDOWFUNCX(ntile, 1, SQLITE_FUNC_WINDOW_SIZE),",
          "",
          "[Added Lines]",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "573:       sqlite3ErrorMsg(pParse,",
          "574:           \"FILTER clause may only be used with aggregate window functions\"",
          "575:       );",
          "595:     }",
          "596:   }",
          "597:   pWin->pFunc = pFunc;",
          "",
          "[Removed Lines]",
          "576:     }else",
          "577:     if( pFunc->zName==row_numberName || pFunc->zName==ntileName ){",
          "578:       sqlite3ExprDelete(db, pWin->pStart);",
          "579:       sqlite3ExprDelete(db, pWin->pEnd);",
          "580:       pWin->pStart = pWin->pEnd = 0;",
          "581:       pWin->eType = TK_ROWS;",
          "582:       pWin->eStart = TK_UNBOUNDED;",
          "583:       pWin->eEnd = TK_CURRENT;",
          "584:     }else",
          "586:     if( pFunc->zName==dense_rankName || pFunc->zName==rankName",
          "587:      || pFunc->zName==percent_rankName || pFunc->zName==cume_distName",
          "588:     ){",
          "589:       sqlite3ExprDelete(db, pWin->pStart);",
          "590:       sqlite3ExprDelete(db, pWin->pEnd);",
          "591:       pWin->pStart = pWin->pEnd = 0;",
          "592:       pWin->eType = TK_RANGE;",
          "593:       pWin->eStart = TK_UNBOUNDED;",
          "594:       pWin->eEnd = TK_CURRENT;",
          "",
          "[Added Lines]",
          "600:     }else{",
          "601:       struct WindowUpdate {",
          "602:         const char *zFunc;",
          "603:         int eType;",
          "604:         int eStart;",
          "605:         int eEnd;",
          "606:       } aUp[] = {",
          "607:         { row_numberName,   TK_ROWS,   TK_UNBOUNDED, TK_CURRENT },",
          "608:         { dense_rankName,   TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "609:         { rankName,         TK_RANGE,  TK_UNBOUNDED, TK_CURRENT },",
          "610:         { percent_rankName, TK_GROUPS, TK_CURRENT,   TK_UNBOUNDED },",
          "611:         { cume_distName,    TK_GROUPS, TK_FOLLOWING, TK_UNBOUNDED },",
          "612:         { ntileName,        TK_ROWS,   TK_CURRENT,   TK_UNBOUNDED },",
          "613:         { leadName,         TK_ROWS,   TK_UNBOUNDED, TK_UNBOUNDED },",
          "614:       };",
          "615:       int i;",
          "616:       for(i=0; i<ArraySize(aUp); i++){",
          "617:         if( pFunc->zName==aUp[i].zFunc ){",
          "618:           sqlite3ExprDelete(db, pWin->pStart);",
          "619:           sqlite3ExprDelete(db, pWin->pEnd);",
          "620:           pWin->pEnd = pWin->pStart = 0;",
          "621:           pWin->eType = aUp[i].eType;",
          "622:           pWin->eStart = aUp[i].eStart;",
          "623:           pWin->eEnd = aUp[i].eEnd;",
          "624:           if( pWin->eStart==TK_FOLLOWING ){",
          "625:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "626:           }",
          "627:           break;",
          "628:         }",
          "629:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1098:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1099:     FuncDef *p = pWin->pFunc;",
          "",
          "[Removed Lines]",
          "1095:   pMWin->regSize = ++pParse->nMem;",
          "1096:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1206:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1207:   Window *pWin;",
          "1208:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1210:     int regArg;",
          "1211:     int nArg = windowArgCount(pWin);",
          "",
          "[Removed Lines]",
          "1209:     int flags = pWin->pFunc->funcFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1216:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1217:       }",
          "1218:       regArg = reg;",
          "1227:     }else{",
          "1229:       regArg = reg + pWin->iArgCol;",
          "1230:     }",
          "",
          "[Removed Lines]",
          "1219:       if( flags & SQLITE_FUNC_WINDOW_SIZE ){",
          "1220:         if( nArg==0 ){",
          "1221:           regArg = regPartSize;",
          "1222:         }else{",
          "1223:           sqlite3VdbeAddOp2(v, OP_SCopy, regPartSize, reg+nArg);",
          "1224:         }",
          "1225:         nArg++;",
          "1226:       }",
          "1228:       assert( !(flags & SQLITE_FUNC_WINDOW_SIZE) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1440:   return regArg;",
          "1441: }",
          "1448:   Window *pWin;",
          "1449:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1450:     FuncDef *pFunc = pWin->pFunc;",
          "1453:      || (pFunc->zName==first_valueName)",
          "1455:      || (pFunc->zName==lagName)",
          "1456:     ){",
          "1457:       return 1;",
          "",
          "[Removed Lines]",
          "1447: static int windowCachePartition(Window *pMWin){",
          "1451:     if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "1452:      || (pFunc->zName==nth_valueName)",
          "1454:      || (pFunc->zName==leadName)",
          "",
          "[Added Lines]",
          "1466: #if 0",
          "1471: static int windowCacheFrame(Window *pMWin){",
          "1475:     if( (pFunc->zName==nth_valueName)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1459:   }",
          "1460:   return 0;",
          "1461: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1659:     case WINDOW_AGGINVERSE:",
          "1660:       csr = p->start.csr;",
          "1661:       reg = p->start.reg;",
          "1663:       break;",
          "1665:     case WINDOW_AGGSTEP:",
          "1666:       csr = p->end.csr;",
          "1667:       reg = p->end.reg;",
          "1669:       break;",
          "1670:   }",
          "",
          "[Removed Lines]",
          "1662:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1668:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "[Added Lines]",
          "1686:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1692:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "1989:   bCache = windowCachePartition(pMWin);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2062:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "2063:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "2079:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Removed Lines]",
          "2064:   sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regSize, 1);",
          "2066:   if( bCache ){",
          "2067:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2068:     sqlite3WhereEnd(pWInfo);",
          "2069:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2070:     if( pMWin->pPartition ){",
          "2071:       sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2072:     }",
          "2073:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2074:   }else{",
          "2075:     addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "2076:   }",
          "",
          "[Added Lines]",
          "2065:   addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2091:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2092:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2093:     windowAggFinal(pParse, pMWin, 0);",
          "2104:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2105:     sqlite3VdbeJumpHere(v, addrGe);",
          "2106:   }",
          "",
          "[Removed Lines]",
          "2094:     if( bCache ){",
          "2095:       sqlite3VdbeAddOp2(v, OP_Rowid, csrWrite, regRowid);",
          "2096:       sqlite3VdbeAddOp3(v, OP_NotExists, s.current.csr, 0, regRowid);",
          "2097:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2098:       sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheRewind+1);",
          "2099:     }else{",
          "2100:       sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2101:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2102:       sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2103:     }",
          "",
          "[Added Lines]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2115:   sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2116:   sqlite3VdbeAddOp2(v, OP_Rewind, s.end.csr, 1);",
          "2117:   if( regPeer && pOrderBy ){",
          "2123:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.start.reg, pOrderBy->nExpr-1);",
          "2124:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.current.reg, pOrderBy->nExpr-1);",
          "2125:     sqlite3VdbeAddOp3(v, OP_Copy, regPeer, s.end.reg, pOrderBy->nExpr-1);",
          "",
          "[Removed Lines]",
          "2118:     if( bCache ){",
          "2119:       windowReadPeerValues(&s, csrWrite, regPeer);",
          "2120:     }else{",
          "2121:       sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "2122:     }",
          "",
          "[Added Lines]",
          "2100:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPeer, regPeer, pOrderBy->nExpr-1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2132:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2141:   if( regPeer ){",
          "2142:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "2143:   }",
          "",
          "[Removed Lines]",
          "2133:   if( bCache ){",
          "2134:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2135:     if( pMWin->eType!=TK_ROWS ){",
          "2136:       windowReadPeerValues(&s, csrWrite, regNewPeer);",
          "2137:     }",
          "2138:   }else{",
          "2139:     sqlite3VdbeJumpHere(v, addrIfNot);",
          "2140:   }",
          "",
          "[Added Lines]",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2196:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2207:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2208:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2209:   }",
          "",
          "[Removed Lines]",
          "2197:   if( bCache ){",
          "2198:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2199:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "2200:   }else{",
          "2201:     if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2202:     sqlite3WhereEnd(pWInfo);",
          "2203:   }",
          "2206:   if( pMWin->pPartition && bCache==0 ){",
          "",
          "[Added Lines]",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "2172:   if( pMWin->pPartition ){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2255:   sqlite3VdbeJumpHere(v, addrEmpty);",
          "2258:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2261:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "2262:   if( pMWin->pPartition ){",
          "2263:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "",
          "[Removed Lines]",
          "2257:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2259:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2260:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Added Lines]",
          "2224:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
      "candidate_info": {
        "commit_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "files": [
          "ext/misc/vfsstat.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Register the \"vfsstat\" virtual table immediately when loading the vfsstat.c extension.\n\nFossilOrigin-Name: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
        "before_after_code_files": [
          "ext/misc/vfsstat.c||ext/misc/vfsstat.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/vfsstat.c||ext/misc/vfsstat.c": [
          "File: ext/misc/vfsstat.c -> ext/misc/vfsstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784: static int vstatRegister(",
          "785:   sqlite3 *db,",
          "788: ){",
          "789:   return sqlite3_create_module(db, \"vfsstat\", &VfsStatModule, 0);",
          "790: }",
          "",
          "[Removed Lines]",
          "786:   const char **pzErrMsg,",
          "787:   const struct sqlite3_api_routines *pThunk",
          "",
          "[Added Lines]",
          "786:   char **pzErrMsg,",
          "787:   const sqlite3_api_routines *pThunk",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:   vstat_vfs.base.szOsFile = sizeof(VStatFile) + vstat_vfs.pVfs->szOsFile;",
          "810:   rc = sqlite3_vfs_register(&vstat_vfs.base, 1);",
          "811:   if( rc==SQLITE_OK ){",
          "813:   }",
          "814:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;",
          "815:   return rc;",
          "",
          "[Removed Lines]",
          "812:     rc = sqlite3_auto_extension(vstatRegister);",
          "",
          "[Added Lines]",
          "812:     rc = vstatRegister(db, pzErrMsg, pApi);",
          "813:     if( rc==SQLITE_OK ){",
          "814:       rc = sqlite3_auto_extension(vstatRegister);",
          "815:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
      "candidate_info": {
        "commit_hash": "2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/update.c",
          "test/fkey8.test"
        ],
        "message": "Generate all records for INSERT or UPDATE prior to running foreign key constraint checks, since the FK checks might modify the datatype of registers used to generate the records.  Fix for ticket [e63cbcfd3378afe6980d6].\n\nFossilOrigin-Name: 3c75605b4652ae88659465d832953ac9d467369f9cb417f73b3d8599ec60b18b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/update.c||src/update.c",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 659c551dcc374a0d349ba9419f692e3363839e11d791a17cc35fa1854a674a51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:     int nIdx;",
          "815:     nIdx = sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenWrite, 0, -1, 0,",
          "816:                                       &iDataCur, &iIdxCur);",
          "818:     if( aRegIdx==0 ){",
          "819:       goto insert_cleanup;",
          "820:     }",
          "",
          "[Removed Lines]",
          "817:     aRegIdx = sqlite3DbMallocRawNN(db, sizeof(int)*(nIdx+1));",
          "",
          "[Added Lines]",
          "817:     aRegIdx = sqlite3DbMallocRawNN(db, sizeof(int)*(nIdx+2));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1845:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1846:   }",
          "1849:   VdbeModuleComment((v, \"END: GenCnstCks(%d)\", seenReplace));",
          "1850: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1858:   if( HasRowid(pTab) ){",
          "1859:     int regRec = aRegIdx[ix];",
          "1860:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nCol, regRec);",
          "1861:     sqlite3SetMakeRecordP5(v, pTab);",
          "1862:     if( !bAffinityDone ){",
          "1863:       sqlite3TableAffinity(v, pTab, 0);",
          "1864:     }",
          "1865:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1910:   for(i=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, i++){",
          "1911:     if( aRegIdx[i]==0 ) continue;",
          "1913:     if( pIdx->pPartIdxWhere ){",
          "1914:       sqlite3VdbeAddOp2(v, OP_IsNull, aRegIdx[i], sqlite3VdbeCurrentAddr(v)+2);",
          "1915:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1912:     bAffinityDone = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1937:     sqlite3VdbeChangeP5(v, pik_flags);",
          "1938:   }",
          "1939:   if( !HasRowid(pTab) ) return;",
          "1947:   if( pParse->nested ){",
          "1948:     pik_flags = 0;",
          "1949:   }else{",
          "",
          "[Removed Lines]",
          "1940:   regData = regNewData + 1;",
          "1941:   regRec = sqlite3GetTempReg(pParse);",
          "1942:   sqlite3VdbeAddOp3(v, OP_MakeRecord, regData, pTab->nCol, regRec);",
          "1943:   sqlite3SetMakeRecordP5(v, pTab);",
          "1944:   if( !bAffinityDone ){",
          "1945:     sqlite3TableAffinity(v, pTab, 0);",
          "1946:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1956:   if( useSeekResult ){",
          "1957:     pik_flags |= OPFLAG_USESEEKRESULT;",
          "1958:   }",
          "1960:   if( !pParse->nested ){",
          "1961:     sqlite3VdbeAppendP4(v, pTab, P4_TABLE);",
          "1962:   }",
          "",
          "[Removed Lines]",
          "1959:   sqlite3VdbeAddOp3(v, OP_Insert, iDataCur, regRec, regNewData);",
          "",
          "[Added Lines]",
          "1967:   sqlite3VdbeAddOp3(v, OP_Insert, iDataCur, aRegIdx[i], regNewData);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   if( aXRef==0 ) goto update_cleanup;",
          "278:   aRegIdx = aXRef+pTab->nCol;",
          "280:   memset(aToOpen, 1, nIdx+1);",
          "281:   aToOpen[nIdx+1] = 0;",
          "282:   for(i=0; i<pTab->nCol; i++) aXRef[i] = -1;",
          "",
          "[Removed Lines]",
          "276:   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx) + nIdx+2 );",
          "279:   aToOpen = (u8*)(aRegIdx+nIdx);",
          "",
          "[Added Lines]",
          "276:   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx+1) + nIdx+2 );",
          "279:   aToOpen = (u8*)(aRegIdx+nIdx+1);",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
      "candidate_info": {
        "commit_hash": "d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d57936721b6598d62baaa359c8d179b74ab3bfcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "The IS NOT NULL operator does not imply that the operand is never NULL. Fix for ticket [5948e09b8c415bc45da5cf]\n\nFossilOrigin-Name: d840e9bb023a1e84a7739d764a0f6cf608fc3183ff8c366fcdb486ebd932f0c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93386a7c97f27df69f79052ef4d80143bb6832a806885249c315d226b2a256b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4986:     case TK_ISNOT:",
          "4987:     case TK_NOT:",
          "4988:     case TK_ISNULL:",
          "4989:     case TK_IS:",
          "4990:     case TK_OR:",
          "4991:     case TK_CASE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4989:     case TK_NOTNULL:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4994:       testcase( pExpr->op==TK_ISNOT );",
          "4995:       testcase( pExpr->op==TK_NOT );",
          "4996:       testcase( pExpr->op==TK_ISNULL );",
          "4997:       testcase( pExpr->op==TK_IS );",
          "4998:       testcase( pExpr->op==TK_OR );",
          "4999:       testcase( pExpr->op==TK_CASE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4998:       testcase( pExpr->op==TK_NOTNULL );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "850:    ORDER BY a1, a2, a3, a4, a5;",
          "851: } {1 {} {} {} {} 1 11 {} {} {} 1 12 {} {} {} 1 12 121 {} {} 1 13 {} {} {}}",
          "853: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853: # 2019-02-05 Ticket https://www.sqlite.org/src/tktview/5948e09b8c415bc45da5c",
          "854: # Error in join due to the LEFT JOIN strength reduction optimization.",
          "855: #",
          "856: do_execsql_test join-16.100 {",
          "857:   DROP TABLE IF EXISTS t1;",
          "858:   DROP TABLE IF EXISTS t2;",
          "859:   CREATE TABLE t1(a INT);",
          "860:   INSERT INTO t1(a) VALUES(1);",
          "861:   CREATE TABLE t2(b INT);",
          "862:   SELECT a, b",
          "863:     FROM t1 LEFT JOIN t2 ON 0",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}