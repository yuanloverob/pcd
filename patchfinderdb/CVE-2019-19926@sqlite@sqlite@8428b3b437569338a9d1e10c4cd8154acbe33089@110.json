{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2cfbea2a4ce631957554e480e90b711ef681249",
      "candidate_info": {
        "commit_hash": "d2cfbea2a4ce631957554e480e90b711ef681249",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d2cfbea2a4ce631957554e480e90b711ef681249",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove a NEVER() that was added in the previous check-in because it is in fact reachable.\n\nFossilOrigin-Name: 74eba2558a81f9e790d95a12a0c5379d4f80b43c8698ef9d6a31ff8d160a53d8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0819086a521fb0ca4ffd12f959b168a89ea2e30a2844bbbd39831b2b9ecf29b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8068:     assert( sz<=pBt->maxLocal+23 );",
          "8069:     assert( iOvflSpace <= (int)pBt->pageSize );",
          "8070:     insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);",
          "8072:     assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "8073:   }",
          "",
          "[Removed Lines]",
          "8071:     if( NEVER(rc!=SQLITE_OK) ) goto balance_cleanup;",
          "",
          "[Added Lines]",
          "8071:     if( rc!=SQLITE_OK ) goto balance_cleanup;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
      "candidate_info": {
        "commit_hash": "e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite3ext.h"
        ],
        "message": "Add new APIs to the extension loading mechanism.\n\nFossilOrigin-Name: 6f122faf8a34b986e58ba4622cff918c6d133d6f91d4b723b50bd086d5bed8e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3f2c3205a28dc21ea7080e5e1ba246ce9c9b90c1309262ca11d8e40943ed677",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:                             void(*xDestroy)(void*));",
          "321:   const char *(*normalized_sql)(sqlite3_stmt*);",
          "322: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608: #define sqlite3_create_window_function sqlite3_api->create_window_function",
          "610: #define sqlite3_normalized_sql         sqlite3_api->normalized_sql",
          "613: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
      "candidate_info": {
        "commit_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f09a14fbc34a130a9508707e435e24318ae07364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/fkey.c",
          "test/gencol1.test"
        ],
        "message": "Add missing column translations to foreign key logic. Ticket [c28a01da72f8957c]\n\nFossilOrigin-Name: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         int kk = sqlite3TableColumnToStorage(pTab, iCol);",
          "741:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+kk+1);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:   if( pExpr ){",
          "484:     if( iCol>=0 && iCol!=pTab->iPKey ){",
          "485:       pCol = &pTab->aCol[iCol];",
          "487:       pExpr->affExpr = pCol->affinity;",
          "488:       zColl = pCol->zColl;",
          "489:       if( zColl==0 ) zColl = db->pDfltColl->zName;",
          "",
          "[Removed Lines]",
          "486:       pExpr->iTable = regBase + iCol + 1;",
          "",
          "[Added Lines]",
          "486:       pExpr->iTable = regBase + sqlite3TableColumnToStorage(pTab,iCol) + 1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "162: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: # 2019-11-01 ticket c28a01da72f8957c",
          "163: db close",
          "164: sqlite3 db :memory:",
          "165: do_execsql_test gencol1-4.100 {",
          "166:   CREATE TABLE t0 (",
          "167:     c0,",
          "168:     c1 a UNIQUE AS (1),",
          "169:     c2,",
          "170:     c3 REFERENCES t0(c1)",
          "171:   );",
          "172:   PRAGMA foreign_keys = true;",
          "173:   INSERT INTO t0(c0,c2,c3) VALUES(0,0,1);",
          "174: } {}",
          "175: do_catchsql_test gencol1-4.110 {",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81f7b372700d7595f486d364a26304b052eda55a",
      "candidate_info": {
        "commit_hash": "81f7b372700d7595f486d364a26304b052eda55a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81f7b372700d7595f486d364a26304b052eda55a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/expr.c",
          "src/parse.y",
          "src/pragma.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/wherecode.c",
          "tool/mkkeywordhash.c"
        ],
        "message": "Initial experimental code for generated column support.  Non-functional.\n\nFossilOrigin-Name: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/wherecode.c||src/wherecode.c",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "900: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "908:   return n;",
          "909: }",
          "910: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: void sqlite3AddGenerated(Parse *pParse, Expr *pExpr, Token *pType){",
          "1548: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1549:   u8 eType = COLFLAG_VIRTUAL;",
          "1550:   Table *pTab = pParse->pNewTable;",
          "1551:   Column *pCol;",
          "1552:   if( IN_RENAME_OBJECT ){",
          "1553:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1554:   }",
          "1555:   if( pTab==0 ) goto generated_done;",
          "1556:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1557:   if( pCol->pDflt ) goto generated_error;",
          "1558:   if( pType ){",
          "1559:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "1561:     }else if( pType->n==6 && sqlite3StrNICmp(\"stored\",pType->z,6)==0 ){",
          "1562:       eType = COLFLAG_STORED;",
          "1563:     }else{",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1567:   pTab->nVCol++;",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "1572: generated_error:",
          "1573:   sqlite3ErrorMsg(pParse, \"bad GENERATED ALWAYS AS clause on column \\\"%s\\\"\",",
          "1574:                   pCol->zName);",
          "1575: generated_done:",
          "1576:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1577: #else",
          "1580:   sqlite3ErrorMsg(pParse, \"GENERATED ALWAYS AS not supported\");",
          "1581:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1582: #endif",
          "1583: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2114:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2115:   }",
          "2119:   estimateTableWidth(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2180:   if( p->nVCol ){",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2184:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2185:                                     p->aCol[ii].pDflt, 0);",
          "2186:       }",
          "2187:     }",
          "2188:   }",
          "2189: #endif",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     if( pPk ){",
          "476:       for(i=0; i<nPk; i++){",
          "477:         assert( pPk->aiColumn[i]>=0 );",
          "479:                                         pPk->aiColumn[i], iPk+i);",
          "480:       }",
          "481:       iKey = iPk;",
          "482:     }else{",
          "483:       iKey = ++pParse->nMem;",
          "485:     }",
          "487:     if( eOnePass!=ONEPASS_OFF ){",
          "",
          "[Removed Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur, -1, iKey);",
          "",
          "[Added Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur, -1, iKey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, iCol,",
          "741:                                         iOld+iCol+1);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3365:     sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[iIdxCol].pExpr, regOut);",
          "3366:     pParse->iSelfTab = 0;",
          "3367:   }else{",
          "3369:                                     iTabCol, regOut);",
          "3370:   }",
          "3371: }",
          "",
          "[Removed Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pIdx->pTable, iTabCur,",
          "",
          "[Added Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse, pIdx->pTable, iTabCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3376: void sqlite3ExprCodeGetColumnOfTable(",
          "3382: ){",
          "3383:   if( pTab==0 ){",
          "3384:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "3385:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:   if( iCol<0 || iCol==pTab->iPKey ){",
          "3388:     sqlite3VdbeAddOp2(v, OP_Rowid, iTabCur, regOut);",
          "3389:   }else{",
          "3393:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3394:     }",
          "3395:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "3396:   }",
          "",
          "[Removed Lines]",
          "3390:     int op = IsVirtual(pTab) ? OP_VColumn : OP_Column;",
          "3391:     int x = iCol;",
          "3392:     if( !HasRowid(pTab) && !IsVirtual(pTab) ){",
          "",
          "[Added Lines]",
          "3392:     int op;",
          "3393:     int x;",
          "3394:     if( IsVirtual(pTab) ){",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "3407:       op = OP_Column;",
          "3408:     }else{",
          "3409:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "3410:       op = OP_Column;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3416: ){",
          "3420:   if( p5 ){",
          "3422:   }",
          "3423:   return iReg;",
          "3424: }",
          "",
          "[Removed Lines]",
          "3417:   Vdbe *v = pParse->pVdbe;",
          "3418:   assert( v!=0 );",
          "3419:   sqlite3ExprCodeGetColumnOfTable(v, pTab, iTable, iColumn, iReg);",
          "3421:     sqlite3VdbeChangeP5(v, p5);",
          "",
          "[Added Lines]",
          "3434:   assert( pParse->pVdbe!=0 );",
          "3435:   sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTable, iColumn, iReg);",
          "3437:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:                                  {sqlite3CreateForeignKey(pParse,0,&T,TA,R);}",
          "348: ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "352: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:         for(j=0; j<pFK->nCol; j++){",
          "1400:           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;",
          "1402:           sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);",
          "1403:         }",
          "",
          "[Removed Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);",
          "",
          "[Added Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, 0, iCol, regRow+j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1586:           int jmp2;",
          "1587:           if( j==pTab->iPKey ) continue;",
          "1588:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1592:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "",
          "[Removed Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, j, 3);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:     if( cnt==0",
          "415:      && cntTab==1",
          "416:      && pMatch",
          "418:      && sqlite3IsRowid(zCol)",
          "419:      && VisibleRowid(pMatch->pTab)",
          "420:     ){",
          "",
          "[Removed Lines]",
          "417:      && (pNC->ncFlags & NC_IdxExpr)==0",
          "",
          "[Added Lines]",
          "417:      && (pNC->ncFlags & (NC_IdxExpr|NC_GenCol))==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: ){",
          "629:   if( (pNC->ncFlags & validMask)!=0 ){",
          "630:     const char *zIn = \"partial index WHERE clauses\";",
          "631:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "632: #ifndef SQLITE_OMIT_CHECK",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "636:   }",
          "",
          "[Removed Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr))==0 );",
          "",
          "[Added Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "723:         zColumn = pExpr->u.zToken;",
          "724:       }else{",
          "725:         Expr *pLeft = pExpr->pLeft;",
          "727:         pRight = pExpr->pRight;",
          "728:         if( pRight->op==TK_ID ){",
          "729:           zDb = 0;",
          "",
          "[Removed Lines]",
          "726:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr);",
          "",
          "[Added Lines]",
          "729:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "822:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "824:         }",
          "825:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "826:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "823:                    NC_IdxExpr|NC_PartIdx);",
          "",
          "[Added Lines]",
          "826:                    NC_IdxExpr|NC_PartIdx|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "964:       testcase( pExpr->op==TK_IN );",
          "965:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "966:         int nRef = pNC->nRef;",
          "968:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "969:         assert( pNC->nRef>=nRef );",
          "970:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "967:         notValid(pParse, pNC, \"subqueries\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "970:         notValid(pParse, pNC, \"subqueries\",",
          "971:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "975:       break;",
          "976:     }",
          "977:     case TK_VARIABLE: {",
          "979:       break;",
          "980:     }",
          "981:     case TK_IS:",
          "",
          "[Removed Lines]",
          "978:       notValid(pParse, pNC, \"parameters\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "982:       notValid(pParse, pNC, \"parameters\",",
          "983:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1798: int sqlite3ResolveSelfReference(",
          "1804: ){",
          "1807:   int rc;",
          "1809:   assert( type==0 || pTab!=0 );",
          "1811:   memset(&sNC, 0, sizeof(sNC));",
          "1812:   memset(&sSrc, 0, sizeof(sSrc));",
          "1813:   if( pTab ){",
          "",
          "[Removed Lines]",
          "1810:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "",
          "[Added Lines]",
          "1816:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr",
          "1817:           || type==NC_GenCol || pTab==0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6417:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "6418:           if( pCol->iSorterColumn>=j ){",
          "6419:             int r1 = j + regBase;",
          "6421:                                pCol->pTab, pCol->iTable, pCol->iColumn, r1);",
          "6422:             j++;",
          "6423:           }",
          "",
          "[Removed Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "[Added Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(pParse,",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3938: void sqlite3OpenMasterTable(Parse *, int);",
          "3939: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3940: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3941: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3942: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "3943:   void sqlite3ColumnPropertiesFromName(Table*, Column*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3945: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3947: #else",
          "3948:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3949: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: void sqlite3AddCheckConstraint(Parse*, Expr*);",
          "3951: void sqlite3AddDefaultValue(Parse*,Expr*,const char*,const char*);",
          "3952: void sqlite3AddCollateType(Parse*, Token*);",
          "3953: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3954: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3955:                     sqlite3_vfs**,char**,char **);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3962: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4054: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4055: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4057: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4058: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4059: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "4056: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "[Added Lines]",
          "4066: void sqlite3ExprCodeGetColumnOfTable(Parse*, Table*, int, int, int);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     for(i=0; i<nPk; i++){",
          "544:       assert( pPk->aiColumn[i]>=0 );",
          "546:     }",
          "547:     if( eOnePass ){",
          "548:       if( addrOpen ) sqlite3VdbeChangeToNoop(v, addrOpen);",
          "",
          "[Removed Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur,pPk->aiColumn[i],iPk+i);",
          "",
          "[Added Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur,",
          "546:                                       pPk->aiColumn[i], iPk+i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "629:       ){",
          "630:         testcase(  oldmask!=0xffffffff && i==31 );",
          "632:       }else{",
          "633:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "634:       }",
          "",
          "[Removed Lines]",
          "631:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regOld+i);",
          "",
          "[Added Lines]",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:         testcase( i==31 );",
          "671:         testcase( i==32 );",
          "673:       }else{",
          "674:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "675:       }",
          "",
          "[Removed Lines]",
          "672:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:     for(i=0; i<pTab->nCol; i++){",
          "711:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:       }",
          "714:     }",
          "715:   }",
          "",
          "[Removed Lines]",
          "712:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2072:           if( (pWInfo->wctrlFlags & WHERE_DUPLICATES_OK)==0 ){",
          "2073:             int iSet = ((ii==pOrWc->nTerm-1)?-1:ii);",
          "2074:             if( HasRowid(pTab) ){",
          "2076:               jmp1 = sqlite3VdbeAddOp4Int(v, OP_RowSetTest, regRowset, 0,",
          "2077:                                           regRowid, iSet);",
          "2078:               VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, regRowid);",
          "",
          "[Added Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, -1, regRowid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:               r = sqlite3GetTempRange(pParse, nPk);",
          "2087:               for(iPk=0; iPk<nPk; iPk++){",
          "2088:                 int iCol = pPk->aiColumn[iPk];",
          "2090:               }",
          "",
          "[Removed Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol, r+iPk);",
          "",
          "[Added Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, iCol,r+iPk);",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "168:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "169:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "217:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "218:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "219:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "220:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "221:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
      "candidate_info": {
        "commit_hash": "d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9678890a9c3f0f4e56aa49ca7c5e41bc447e4f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "New sqlite3_db_config() options: SQLITE_DBCONFIG_LEGACY_ALTER_TABLE, SQLITE_DBCONFIG_DQS_DML, and SQLITE_DBCONFIG_DQS_DDL.\n\nFossilOrigin-Name: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54110870487f78013ab1b554413c18baa2bdc07d979bc65c110f32d30c3b53fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:       };",
          "849:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "849:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "850:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3071:   db->nextPagesize = 0;",
          "3072:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3073:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3074: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3075:                  | SQLITE_AutoIndex",
          "3076: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_DqsDML",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return 1;",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: static int areDoubleQuotedStringsEnabled(sqlite3 *db, NameContext *pTopNC){",
          "156:   if( pTopNC->ncFlags & NC_IsDDL ){",
          "158:     if( sqlite3WritableSchema(db) && (db->flags & SQLITE_DqsDML)!=0 ){",
          "159:       return 1;",
          "160:     }",
          "161:     return (db->flags & SQLITE_DqsDDL)!=0;",
          "162:   }else{",
          "164:     return (db->flags & SQLITE_DqsDML)!=0;",
          "165:   }",
          "166: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "481:     ){",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "[Added Lines]",
          "496:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "497:      && areDoubleQuotedStringsEnabled(db, pTopNC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1770:   }",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1778:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1779:   return rc;",
          "",
          "[Removed Lines]",
          "1773:   sNC.ncFlags = type;",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "1776:   }",
          "",
          "[Added Lines]",
          "1790:   sNC.ncFlags = type | NC_IsDDL;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7075:       const char *zName;",
          "7076:       int op;",
          "7077:     } aDbConfig[] = {",
          "7087:     };",
          "7088:     int ii, v;",
          "7089:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7078:         { \"enable_fkey\",      SQLITE_DBCONFIG_ENABLE_FKEY            },",
          "7079:         { \"enable_trigger\",   SQLITE_DBCONFIG_ENABLE_TRIGGER         },",
          "7080:         { \"fts3_tokenizer\",   SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER  },",
          "7081:         { \"load_extension\",   SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION  },",
          "7082:         { \"no_ckpt_on_close\", SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE       },",
          "7083:         { \"enable_qpsg\",      SQLITE_DBCONFIG_ENABLE_QPSG            },",
          "7084:         { \"trigger_eqp\",      SQLITE_DBCONFIG_TRIGGER_EQP            },",
          "7085:         { \"reset_database\",   SQLITE_DBCONFIG_RESET_DATABASE         },",
          "7086:         { \"defensive\",        SQLITE_DBCONFIG_DEFENSIVE              },",
          "",
          "[Added Lines]",
          "7078:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7079:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7080:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7081:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7082:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7083:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2797: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7608:     const char *zName;",
          "7609:     int eVal;",
          "7610:   } aSetting[] = {",
          "7620:   };",
          "7621:   int i;",
          "7622:   int v;",
          "",
          "[Removed Lines]",
          "7611:     { \"FKEY\",            SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",         SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",  SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",  SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",            SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",     SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",        SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",       SQLITE_DBCONFIG_DEFENSIVE },",
          "",
          "[Added Lines]",
          "7611:     { \"FKEY\",               SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",            SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",               SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",        SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",           SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7622:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7623:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "",
          "---------------"
        ]
      }
    }
  ]
}