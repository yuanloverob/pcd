{
  "cve_id": "CVE-2017-0152",
  "cve_desc": "A remote code execution vulnerability exists in the way affected Microsoft scripting engine render when handling objects in memory in Microsoft browsers. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
  "patch_info": {
    "commit_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/9da019424601325a6e95e6be0fa03d7d21d0b517",
    "files": [
      "lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js"
    ],
    "message": "[CVE-2017-0152] MSFT: 10592731 : Issue with Function name capturing in param scope\n\nIn a function expression with name, where the name is captured in one\nof the param scope functions, if there is a function or var declaration\nwith the same name as the function expression name we were marking the\nfunction expression name as shadowed. In non-eval case this causes\nissue because the name symbol won't get added to the body. This change is to\nfix it in such a way if the name is captured in the param scope then we\nsplit the param and body scope such that the name symbol is added to the\nparam scope not body scope.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5198:                         paramScope->SetCannotMergeWithBodyScope();",
      "5199:                     }",
      "5200:                 }",
      "5201:             }",
      "5202:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5201:                 if (paramScope->GetCanMergeWithBodyScope() && !fDeclaration && pnodeFnc->sxFnc.pnodeName != nullptr)",
      "5202:                 {",
      "5203:                     Symbol* funcSym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
      "5204:                     if (funcSym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->sxFnc.functionId)",
      "5205:                     {",
      "5210:                         paramScope->SetCannotMergeWithBodyScope();",
      "5211:                     }",
      "5212:                 }",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
      "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "3319:         {",
      "3322:             paramScope->ForEachSymbol([&](Symbol* param) {",
      "3323:                 Symbol* varSym = funcInfo->GetBodyScope()->FindLocalSymbol(param->GetName());",
      "3324:                 Assert(varSym || pnode->sxFnc.pnodeName->sxVar.sym == param);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3322:             Symbol* funcSym = funcInfo->root->sxFnc.GetFuncSymbol();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3327:                 {",
      "3329:                 }",
      "3331:                 {",
      "",
      "[Removed Lines]",
      "3330:                 else if (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister))",
      "",
      "[Added Lines]",
      "3331:                 else if ((funcSym == nullptr || funcSym != param)    // Do not copy the symbol over to body as the function expression symbol",
      "3333:                     && (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister)))",
      "",
      "---------------"
    ],
    "test/es6/default-splitscope.js||test/es6/default-splitscope.js": [
      "File: test/es6/default-splitscope.js -> test/es6/default-splitscope.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:             return a;",
      "160:         }",
      "161:         assert.areEqual(10, f11()(), \"Recursive call to the function from the body scope returns the right value when eval is there in the body\");",
      "162:     }",
      "163:  },",
      "164:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:         function f13() {",
      "164:             var a = function jnvgfg(sfgnmj = function ccunlk() { jnvgfg(undefined, 1); }, b) {",
      "165:                 if (b) {",
      "166:                     assert.areEqual(undefined, jnvgfg, \"This refers to the instance in the body and the value of the function expression is not copied over\");",
      "167:                 }",
      "168:                 var jnvgfg = 10;",
      "169:                 if (!b) {",
      "170:                     sfgnmj();",
      "171:                     return 100;",
      "172:                 }",
      "173:             };",
      "174:             assert.areEqual(100, a(), \"After the recursion the right value is returned by the split scoped function\");",
      "175:         };",
      "176:         f13();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf4ef6cfb0392484788cfed49d9045863fae2ac5",
      "candidate_info": {
        "commit_hash": "bf4ef6cfb0392484788cfed49d9045863fae2ac5",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/bf4ef6cfb0392484788cfed49d9045863fae2ac5",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/IR.h",
          "lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Lower.cpp"
        ],
        "message": "Check for post-lower opcodes earlier than normal.\n\nThis change promotes several asserts to failfasts, and adds two additional ones,\nin order to ensure that no post-lower opcodes are added earlier than the lowerer\nphase, either by being added to the incoming bytecode buffer, or by corrupting a\npart of the IR during the earlier phases of the JIT.",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/IR.h||lib/Backend/IR.h",
          "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp",
          "lib/Backend/IRBuilderAsmJs.cpp||lib/Backend/IRBuilderAsmJs.cpp",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2535:         }",
          "2536: #endif",
          "2538:         this->currentInstr = instr;",
          "2539:         this->currentRegion = this->currentBlock->GetFirstInstr()->AsLabelInstr()->GetRegion();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2538:         AssertOrFailFastMsg(!instr->IsLowered(), \"Lowered instruction detected in pre-lower context!\");",
          "",
          "---------------"
        ],
        "lib/Backend/IR.h||lib/Backend/IR.h": [
          "File: lib/Backend/IR.h -> lib/Backend/IR.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:     bool            dstIsAlwaysConvertedToInt32 : 1;",
          "485:     bool            dstIsAlwaysConvertedToNumber : 1;",
          "486:     bool            isCallInstrProtectedByNoProfileBailout : 1;",
          "487: protected:",
          "488:     bool            isCloned:1;",
          "489:     bool            hasBailOutInfo:1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:     bool            isNonFastPathFrameDisplay : 1;",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilder.cpp||lib/Backend/IRBuilder.cpp": [
          "File: lib/Backend/IRBuilder.cpp -> lib/Backend/IRBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:             }",
          "705:         }",
          "706: #endif",
          "709:         uint layoutAndSize = layoutSize * Js::OpLayoutType::Count + Js::OpCodeUtil::GetOpCodeLayout(newOpcode);",
          "710:         switch(layoutAndSize)",
          "",
          "[Removed Lines]",
          "707:         AssertMsg(Js::OpCodeUtil::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "[Added Lines]",
          "707:         AssertOrFailFastMsg(Js::OpCodeUtil::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6824:                     Js::Constants::NoByteCodeOffset);",
          "6825:             }",
          "6828:             this->AddInstr(",
          "6842:                 Js::Constants::NoByteCodeOffset);",
          "6843:         }",
          "6844:         break;",
          "",
          "[Removed Lines]",
          "6827:             IR::RegOpnd* tempRegOpnd = IR::RegOpnd::New(StackSym::New(this->m_func), TyVar, this->m_func);",
          "6829:                 IR::Instr::New(",
          "6830:                     Js::OpCode::LdFrameDisplay,",
          "6831:                     tempRegOpnd,",
          "6832:                     this->BuildSrcOpnd(this->m_func->GetJITFunctionBody()->GetLocalClosureReg()),",
          "6833:                     this->BuildSrcOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6834:                     this->m_func),",
          "6835:                 Js::Constants::NoByteCodeOffset);",
          "6836:             this->AddInstr(",
          "6837:                 IR::Instr::New(",
          "6838:                     Js::OpCode::MOV,",
          "6839:                     this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6840:                     tempRegOpnd,",
          "6841:                     this->m_func),",
          "",
          "[Added Lines]",
          "6827:             IR::Instr* lfd = IR::Instr::New(",
          "6828:                 Js::OpCode::LdFrameDisplay,",
          "6829:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6830:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalClosureReg()),",
          "6831:                 this->BuildDstOpnd(this->m_func->GetJITFunctionBody()->GetLocalFrameDisplayReg()),",
          "6832:                 this->m_func);",
          "6834:                 lfd,",
          "6836:             lfd->isNonFastPathFrameDisplay = true;",
          "",
          "---------------"
        ],
        "lib/Backend/IRBuilderAsmJs.cpp||lib/Backend/IRBuilderAsmJs.cpp": [
          "File: lib/Backend/IRBuilderAsmJs.cpp -> lib/Backend/IRBuilderAsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     {",
          "145:         Assert(newOpcode != Js::OpCodeAsmJs::EndOfBlock);",
          "149:         uint layoutAndSize = layoutSize * Js::OpLayoutTypeAsmJs::Count + Js::OpCodeUtilAsmJs::GetOpCodeLayout(newOpcode);",
          "150:         switch (layoutAndSize)",
          "",
          "[Removed Lines]",
          "147:         AssertMsg(Js::OpCodeUtilAsmJs::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "[Added Lines]",
          "147:         AssertOrFailFastMsg(Js::OpCodeUtilAsmJs::IsValidByteCodeOpcode(newOpcode), \"Error getting opcode from m_jnReader.Op()\");",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23486:     if (envDepth == (uint16)-1 ||",
          "23488:         PHASE_OFF(Js::FrameDisplayFastPathPhase, func))",
          "23489:     {",
          "23490:         if (isStrict)",
          "",
          "[Removed Lines]",
          "23487:         (!doStackFrameDisplay && instr->GetDst()->AsRegOpnd()->m_sym->IsTempReg(instr->m_func)) ||",
          "",
          "[Added Lines]",
          "23487:         (!doStackFrameDisplay && (instr->isNonFastPathFrameDisplay || instr->GetDst()->AsRegOpnd()->m_sym->IsTempReg(instr->m_func))) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
      "candidate_info": {
        "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js"
        ],
        "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
          "479:     {",
          "480:         bool isIntArray = false, isFloatArray = false;",
          "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:         if (this->length <= index)",
          "481:         {",
          "482:             return false;",
          "483:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5768:         if (!pArr->HasNoMissingValues())",
          "5769:         {",
          "5771:             {",
          "",
          "[Removed Lines]",
          "5770:             for (uint32 i = 0; i < newLen; i++)",
          "",
          "[Added Lines]",
          "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
          "",
          "---------------"
        ],
        "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
          "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:             assert.areEqual(101, arr.length);",
          "594:         }",
          "595:     },",
          "596: ];",
          "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     {",
          "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
          "598:         body: function ()",
          "599:         {",
          "600:             var getterCalled = false;",
          "601:             var a = [1, 2];",
          "602:             for (var i = 0; i < 100 * 1024; i++) {",
          "603:                 a.push(i);",
          "604:             }",
          "605:             delete a[0]; // Make a missing item",
          "606:             var protoObj = [11];",
          "607:             Object.defineProperty(protoObj, '0', {",
          "608:                 get : function () {",
          "609:                     getterCalled = true;",
          "610:                     Object.setPrototypeOf(a, Array.prototype);",
          "611:                     a.splice(0); // head seg is now length=0",
          "612:                     return 42;",
          "613:                 },",
          "614:                 configurable : true",
          "615:             });",
          "616:             Object.setPrototypeOf(a, protoObj);",
          "617:             var b = a.slice();",
          "618:             assert.isTrue(getterCalled);",
          "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
          "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
          "621:         }",
          "622:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
      "candidate_info": {
        "commit_hash": "f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/f778167515933a34a7b8e8bb8c2bcfd1fc61d3ee",
        "files": [
          "lib/Runtime/Language/AsmJs.cpp"
        ],
        "message": "[CVE-2017-0133] add check to ensure asm.js module has return statement",
        "before_after_code_files": [
          "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp": [
          "File: lib/Runtime/Language/AsmJs.cpp -> lib/Runtime/Language/AsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "919:     {",
          "920:         ParseNode* endStmt = m.GetCurrentParserNode();",
          "923:         ParseNode* node = ParserWrapper::GetBinaryLeft( endStmt );",
          "924:         ParseNode* endNode = ParserWrapper::GetBinaryRight( endStmt );",
          "",
          "[Removed Lines]",
          "922:         Assert( endStmt->nop == knopList );",
          "",
          "[Added Lines]",
          "922:         if (endStmt->nop != knopList)",
          "923:         {",
          "924:             return m.Fail(endStmt, _u(\"Module must have a return\"));",
          "925:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
      "candidate_info": {
        "commit_hash": "70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/70614865fcc2d5a976d6771fff5bbcdaddfd5dfb",
        "files": [
          "lib/Runtime/Library/JavascriptProxy.cpp"
        ],
        "message": "[CVE-2017-0094] Type confusion in JavascriptProxy::SetPropertyTrap when using a Symbol\n\nWhen setting a property trap with JavascriptProxy::SetPropertyTrap using a symbol as a property id, we incorrectly assume that JavascriptProxy::GetName returns a PropertyString. The case for a JavascriptSymbol is unhandled, and we do a static cast leading to type confusion. Fix is to handle any cases other than PropertyString by using nullptr, as is the convention elsewhere.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptProxy.cpp||lib/Runtime/Library/JavascriptProxy.cpp": [
          "File: lib/Runtime/Library/JavascriptProxy.cpp -> lib/Runtime/Library/JavascriptProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1765:                 return  JavascriptOperators::SetItem(receiver, target, indexVal, newValue, scriptContext, PropertyOperationFlags::PropertyOperation_None, skipPrototypeCheck);",
          "1766:             }",
          "1767:             case SetPropertyTrapKind::SetPropertyWPCacheKind:",
          "1768:                 return JavascriptOperators::SetPropertyWPCache(receiver, target, propertyId, newValue, requestContext,",
          "1770:             default:",
          "1771:                 Assert(FALSE);",
          "1772:             }",
          "",
          "[Removed Lines]",
          "1769:                     static_cast<PropertyString*>(GetName(requestContext, propertyId)), PropertyOperationFlags::PropertyOperation_None);",
          "",
          "[Added Lines]",
          "1768:             {",
          "1769:                 Var name = GetName(requestContext, propertyId);",
          "1770:                 if (!JavascriptString::Is(name) || !VirtualTableInfo<Js::PropertyString>::HasVirtualTable(JavascriptString::FromVar(name)))",
          "1771:                 {",
          "1772:                     name = nullptr;",
          "1773:                 }",
          "1775:                     static_cast<Js::PropertyString*>(name), PropertyOperationFlags::PropertyOperation_None);",
          "1776:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
      "candidate_info": {
        "commit_hash": "1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/1750d475e26e52bbcd7dbf36d7553c9b1263da4b",
        "files": [
          "lib/Runtime/Base/Debug.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/StackTraceArguments.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp"
        ],
        "message": "[CVE-2017-0138] fix issue with ExtraArg not being accounted correctly in stackwalker",
        "before_after_code_files": [
          "lib/Runtime/Base/Debug.cpp||lib/Runtime/Base/Debug.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.cpp||lib/Runtime/Language/JavascriptStackWalker.cpp",
          "lib/Runtime/Language/JavascriptStackWalker.h||lib/Runtime/Language/JavascriptStackWalker.h",
          "lib/Runtime/Language/StackTraceArguments.cpp||lib/Runtime/Language/StackTraceArguments.cpp",
          "lib/Runtime/Library/ArgumentsObject.cpp||lib/Runtime/Library/ArgumentsObject.cpp",
          "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/Debug.cpp||lib/Runtime/Base/Debug.cpp": [
          "File: lib/Runtime/Base/Debug.cpp -> lib/Runtime/Base/Debug.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:             Js::JavascriptFunction *jsFunc = walker.GetCurrentFunction();",
          "34:             Js::FunctionBody * jsBody = jsFunc->GetFunctionBody();",
          "36:             const WCHAR* sourceFileName = _u(\"NULL\");",
          "37:             ULONG line = 0; LONG column = 0;",
          "38:             walker.GetSourcePosition(&sourceFileName, &line, &column);",
          "40:             StringCchPrintf(buffer, _countof(buffer), _u(\"%s [%s] (0x%p, Args=%u\"), jsBody->GetDisplayName(), jsBody->GetDebugNumberSet(debugStringBuffer), jsFunc,",
          "42:             sb.AppendSz(buffer);",
          "45:             {",
          "46:                 StringCchPrintf(buffer, _countof(buffer), _u(\", 0x%p\"), walker.GetJavascriptArgs()[i]);",
          "47:                 sb.AppendSz(buffer);",
          "",
          "[Removed Lines]",
          "35:             Js::CallInfo const * callInfo = walker.GetCallInfo();",
          "41:                 callInfo->Count);",
          "44:             for (uint i = 0; i < callInfo->Count; i++)",
          "",
          "[Added Lines]",
          "35:             const Js::CallInfo callInfo = walker.GetCallInfo();",
          "41:                 callInfo.Count);",
          "44:             for (uint i = 0; i < callInfo.Count; i++)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptStackWalker.cpp||lib/Runtime/Language/JavascriptStackWalker.cpp": [
          "File: lib/Runtime/Language/JavascriptStackWalker.cpp -> lib/Runtime/Language/JavascriptStackWalker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         Assert(IsJavascriptFrame());",
          "155:         AssertMsg(this->GetCurrentFunction()->IsScriptFunction(), \"GetPermanentArguments should not be called for non-script function as there is no slot allocated for it.\");",
          "158:         if (paramCount == 0)",
          "159:         {",
          "",
          "[Removed Lines]",
          "157:         const uint32 paramCount = GetCallInfo()->Count;",
          "",
          "[Added Lines]",
          "157:         const uint32 paramCount = GetCallInfo().Count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         else",
          "207: #endif",
          "208:         {",
          "211:             {",
          "213:                 return false;",
          "",
          "[Removed Lines]",
          "209:             CallInfo const *callInfo = this->GetCallInfo();",
          "210:             if (callInfo->Count == 0)",
          "",
          "[Added Lines]",
          "209:             const CallInfo callInfo = this->GetCallInfo();",
          "210:             if (callInfo.Count == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:         }",
          "219:     }",
          "222:     {",
          "224:     }",
          "226:     BOOL JavascriptStackWalker::IsCallerGlobalFunction() const",
          "227:     {",
          "230:         JavascriptFunction* function = this->GetCurrentFunction();",
          "231:         if (IsLibraryStackFrameEnabled(this->scriptContext) && !function->IsScriptFunction())",
          "",
          "[Removed Lines]",
          "221:     BOOL IsEval(const CallInfo* callInfo)",
          "223:         return (callInfo->Flags & CallFlags_Eval) != 0;",
          "228:         CallInfo const* callInfo = this->GetCallInfo();",
          "",
          "[Added Lines]",
          "221:     BOOL IsEval(CallInfo callInfo)",
          "223:         return (callInfo.Flags & CallFlags_Eval) != 0;",
          "228:         const CallInfo callInfo = this->GetCallInfo();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:         else",
          "242:         {",
          "243:             AssertMsg(FALSE, \"Here we should only have script functions which were already parsed/deserialized.\");",
          "245:         }",
          "246:     }",
          "248:     BOOL JavascriptStackWalker::IsEvalCaller() const",
          "249:     {",
          "252:     }",
          "254:     Var JavascriptStackWalker::GetCurrentNativeArgumentsObject() const",
          "",
          "[Removed Lines]",
          "244:             return callInfo->Count == 0 || IsEval(callInfo);",
          "250:         CallInfo const* callInfo = this->GetCallInfo();",
          "251:         return (callInfo->Flags & CallFlags_Eval) != 0;",
          "",
          "[Added Lines]",
          "244:             return callInfo.Count == 0 || IsEval(callInfo);",
          "250:         const CallInfo callInfo = this->GetCallInfo();",
          "251:         return (callInfo.Flags & CallFlags_Eval) != 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "835:             if (this->IsJavascriptFrame() && this->GetCurrentFunction() == funcTarget)",
          "836:             {",
          "839:                 return true;",
          "840:             }",
          "841:         }",
          "",
          "[Removed Lines]",
          "838:                 Assert( !(this->GetCallInfo()->Flags & CallFlags_InternalFrame) );",
          "",
          "[Added Lines]",
          "838:                 Assert( !(this->GetCallInfo().Flags & CallFlags_InternalFrame) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1012:         return GetCurrentFunction(false);",
          "1013:     }",
          "1016:     {",
          "1017:         Assert(this->IsJavascriptFrame());",
          "1018:         if (includeInlinedFrames && inlinedFramesBeingWalked)",
          "1019:         {",
          "1023:         }",
          "1024:         else if (this->GetCurrentFunction()->GetFunctionInfo()->IsCoroutine())",
          "1025:         {",
          "1026:             JavascriptGenerator* gen = JavascriptGenerator::FromVar(this->GetCurrentArgv()[JavascriptFunctionArgIndex_This]);",
          "1028:         }",
          "1029:         else if (this->isNativeLibraryFrame)",
          "1030:         {",
          "1033:         }",
          "1034:         else",
          "1035:         {",
          "1037:         }",
          "1038:     }",
          "1041:     {",
          "1042:         return GetCallInfo(false);",
          "1043:     }",
          "",
          "[Removed Lines]",
          "1015:     CallInfo const * JavascriptStackWalker::GetCallInfo(bool includeInlinedFrames /* = true */) const",
          "1022:             return (CallInfo const *)&inlinedFrameCallInfo;",
          "1027:             return &gen->GetArguments().Info;",
          "1032:             return &this->prevNativeLibraryEntry->callInfo;",
          "1036:             return (CallInfo const *)&this->GetCurrentArgv()[JavascriptFunctionArgIndex_CallInfo];",
          "1040:     CallInfo const *JavascriptStackWalker::GetCallInfoFromPhysicalFrame() const",
          "",
          "[Added Lines]",
          "1015:     CallInfo JavascriptStackWalker::GetCallInfo(bool includeInlinedFrames /* = true */) const",
          "1018:         CallInfo callInfo;",
          "1023:             callInfo = inlinedFrameCallInfo;",
          "1028:             callInfo = gen->GetArguments().Info;",
          "1033:             callInfo = this->prevNativeLibraryEntry->callInfo;",
          "1037:             callInfo = *(CallInfo const *)&this->GetCurrentArgv()[JavascriptFunctionArgIndex_CallInfo];",
          "1040:         if (callInfo.Flags & Js::CallFlags_ExtraArg)",
          "1041:         {",
          "1042:             callInfo.Flags = (CallFlags)(callInfo.Flags & ~Js::CallFlags_ExtraArg);",
          "1043:             callInfo.Count--;",
          "1044:         }",
          "1046:         return callInfo;",
          "1049:     CallInfo JavascriptStackWalker::GetCallInfoFromPhysicalFrame() const",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1081:     bool JavascriptStackWalker::IsCurrentPhysicalFrameForLoopBody() const",
          "1082:     {",
          "1084:     }",
          "1086:     bool JavascriptStackWalker::IsWalkable(ScriptContext *scriptContext)",
          "",
          "[Removed Lines]",
          "1083:         return !!(this->GetCallInfoFromPhysicalFrame()->Flags & CallFlags_InternalFrame);",
          "",
          "[Added Lines]",
          "1092:         return !!(this->GetCallInfoFromPhysicalFrame().Flags & CallFlags_InternalFrame);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptStackWalker.h||lib/Runtime/Language/JavascriptStackWalker.h": [
          "File: lib/Runtime/Language/JavascriptStackWalker.h -> lib/Runtime/Language/JavascriptStackWalker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         JavascriptFunction *GetCurrentFunction(bool includeInlinedFrames = true) const;",
          "214:         void SetCurrentFunction(JavascriptFunction *  function);",
          "217:         bool GetThis(Var *pThis, int moduleId) const;",
          "218:         Js::Var * GetJavascriptArgs() const;",
          "219:         void **GetCurrentArgv() const;",
          "",
          "[Removed Lines]",
          "215:         CallInfo const *GetCallInfo(bool includeInlinedFrames = true) const;",
          "216:         CallInfo const *GetCallInfoFromPhysicalFrame() const;",
          "",
          "[Added Lines]",
          "215:         CallInfo GetCallInfo(bool includeInlinedFrames = true) const;",
          "216:         CallInfo GetCallInfoFromPhysicalFrame() const;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/StackTraceArguments.cpp||lib/Runtime/Language/StackTraceArguments.cpp": [
          "File: lib/Runtime/Language/StackTraceArguments.cpp -> lib/Runtime/Language/StackTraceArguments.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         types = 0;",
          "69:         if (!walker.IsCallerGlobalFunction())",
          "70:         {",
          "72:             if (numberOfArguments > 0) numberOfArguments --; // Don't consider 'this'",
          "74:             {",
          "75:                 Assert(numberOfArguments > 0 );",
          "",
          "[Removed Lines]",
          "71:             int64 numberOfArguments = walker.GetCallInfo()->Count;",
          "73:             if (walker.GetCallInfo()->Flags & Js::CallFlags_ExtraArg)",
          "",
          "[Added Lines]",
          "71:             const CallInfo callInfo = walker.GetCallInfo();",
          "72:             int64 numberOfArguments = callInfo.Count;",
          "74:             if (callInfo.Flags & Js::CallFlags_ExtraArg)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ArgumentsObject.cpp||lib/Runtime/Library/ArgumentsObject.cpp": [
          "File: lib/Runtime/Library/ArgumentsObject.cpp -> lib/Runtime/Library/ArgumentsObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         AssertMsg(JavascriptOperators::GetTypeId(funcCaller) == TypeIds_Function, \"non function caller\");",
          "74:         if (paramCount == 0 || (flags & CallFlags_Eval))",
          "75:         {",
          "",
          "[Removed Lines]",
          "70:         CallInfo const *callInfo = walker->GetCallInfo();",
          "71:         uint32 paramCount = callInfo->Count;",
          "72:         CallFlags flags = callInfo->Flags;",
          "",
          "[Added Lines]",
          "70:         const CallInfo callInfo = walker->GetCallInfo();",
          "71:         uint32 paramCount = callInfo.Count;",
          "72:         CallFlags flags = callInfo.Flags;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptFunction.cpp||lib/Runtime/Library/JavascriptFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptFunction.cpp -> lib/Runtime/Library/JavascriptFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2760:                 Var args = nullptr;",
          "2764:                 args = JavascriptOperators::LoadHeapArguments(",
          "2766:                     walker.GetJavascriptArgs(),",
          "2767:                     scriptContext->GetLibrary()->GetNull(),",
          "2768:                     scriptContext->GetLibrary()->GetNull(),",
          "",
          "[Removed Lines]",
          "2763:                 CallInfo const *callInfo = walker.GetCallInfo();",
          "2765:                     this, callInfo->Count - 1,",
          "",
          "[Added Lines]",
          "2763:                 const CallInfo callInfo = walker.GetCallInfo();",
          "2765:                     this, callInfo.Count - 1,",
          "",
          "---------------"
        ]
      }
    }
  ]
}