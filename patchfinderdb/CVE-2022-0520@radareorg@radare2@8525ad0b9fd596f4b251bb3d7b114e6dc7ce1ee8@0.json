{
  "cve_id": "CVE-2022-0520",
  "cve_desc": "Use After Free in NPM radare2.js prior to 5.6.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8",
  "patch_info": {
    "commit_hash": "8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8",
    "files": [
      "libr/bin/format/pyc/marshal.c"
    ],
    "message": "Fix bins/*/rep8 - UAF crash in pyc parser ##crash\n\n* Reported by Cen Zhang via huntr.dev",
    "before_after_code_files": [
      "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c": [
      "File: libr/bin/format/pyc/marshal.c -> libr/bin/format/pyc/marshal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1098:   break;",
      "1099:  case TYPE_UNKNOWN:",
      "1100:   eprintf (\"Get not implemented for type 0x%x\\n\", type);",
      "1102:   free_object (ret);",
      "1103:   return NULL;",
      "1104:  case 0:",
      "",
      "[Removed Lines]",
      "1101:   r_list_pop (refs);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9650e3c352f675687bf6c6f65ff2c4a3d0e288fa",
      "candidate_info": {
        "commit_hash": "9650e3c352f675687bf6c6f65ff2c4a3d0e288fa",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/9650e3c352f675687bf6c6f65ff2c4a3d0e288fa",
        "files": [
          "shlr/java/class.c"
        ],
        "message": "Fix oobread segfault in java arith8.class ##crash\n\n* Reported by Cen Zhang via huntr.dev",
        "before_after_code_files": [
          "shlr/java/class.c||shlr/java/class.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/19669"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "shlr/java/class.c||shlr/java/class.c": [
          "File: shlr/java/class.c -> shlr/java/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3733:  ut64 offset = 0, curpos;",
          "3734:  attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);",
          "3735:  offset += 6;",
          "3736:  if (attr == NULL) {",
          "3738:   return attr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3736:  if (buf_offset + offset + 8 > sz) {",
          "3737:   eprintf (\"Invalid amount of inner classes\\n\");",
          "3738:   return NULL;",
          "3739:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3743:  attr->info.inner_classes_attr.classes = r_list_newf (r_bin_java_inner_classes_attr_entry_free);",
          "3744:  for (i = 0; i < attr->info.inner_classes_attr.number_of_classes; i++) {",
          "3745:   curpos = buf_offset + offset;",
          "3747:    eprintf (\"Invalid amount of inner classes\\n\");",
          "3748:    break;",
          "3749:   }",
          "",
          "[Removed Lines]",
          "3746:   if (offset + 8 > sz) {",
          "",
          "[Added Lines]",
          "3750:   if (buf_offset + offset + 8 > sz) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79b39bb54d840442dccea0ddaa11077edd4b8b99",
      "candidate_info": {
        "commit_hash": "79b39bb54d840442dccea0ddaa11077edd4b8b99",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/79b39bb54d840442dccea0ddaa11077edd4b8b99",
        "files": [
          "libr/anal/Makefile",
          "shlr/java/class.c",
          "sys/rebuild.sh",
          "sys/sanitize.sh"
        ],
        "message": "Fix java oobread in id_000000,sig_06,sync_m1,src_000048 ##crash\n\n* Reported by Cen Zhang via huntr.dev",
        "before_after_code_files": [
          "shlr/java/class.c||shlr/java/class.c",
          "sys/rebuild.sh||sys/rebuild.sh",
          "sys/sanitize.sh||sys/sanitize.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/19669"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "shlr/java/class.c||shlr/java/class.c": [
          "File: shlr/java/class.c -> shlr/java/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7149: R_API RBinJavaAttrInfo *r_bin_java_rtv_annotations_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {",
          "7150:  ut32 i = 0;",
          "7152:  ut64 offset = 0;",
          "7154:  offset += 6;",
          "7155:  if (attr) {",
          "7156:   attr->type = R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR;",
          "",
          "[Removed Lines]",
          "7151:  RBinJavaAttrInfo *attr = NULL;",
          "7153:  attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);",
          "",
          "[Added Lines]",
          "7152:  if (buf_offset + 8 > sz) {",
          "7153:   return NULL;",
          "7154:  }",
          "7155:  RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);",
          "",
          "---------------"
        ],
        "sys/rebuild.sh||sys/rebuild.sh": [
          "File: sys/rebuild.sh -> sys/rebuild.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  cd \"$1\" || exit 1",
          "19:  $MAKE clean",
          "20:  $MAKE -j8 || exit 1",
          "22: }",
          "24: Build() {",
          "25:  cd \"$1\" || exit 1",
          "26:  $MAKE -j8 || exit 1",
          "28: }",
          "30: RebuildIOSDebug() {",
          "",
          "[Removed Lines]",
          "21:  cd -",
          "27:  cd -",
          "",
          "[Added Lines]",
          "21:  cd - > /dev/null",
          "27:  cd - > /dev/null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: RebuildJava() {",
          "50:  Rebuild shlr/java",
          "51:  Rebuild libr/asm",
          "52:  Rebuild libr/anal",
          "54:  Rebuild libr/core",
          "55: }",
          "",
          "[Removed Lines]",
          "53:  Rebuild libr/bin",
          "",
          "[Added Lines]",
          "51:  Rebuild libr/bin",
          "",
          "---------------"
        ],
        "sys/sanitize.sh||sys/sanitize.sh": [
          "File: sys/sanitize.sh -> sys/sanitize.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # SANITIZE=\"address leak memory undefined\"",
          "3: # SANITIZE=\"address signed-integer-overflow\"  # Faster build",
          "4: # default:",
          "8: printf \"\\033[32m\"",
          "9: echo \"=========================================================================\"",
          "",
          "[Removed Lines]",
          "5: # SANITIZE=${SANITIZE:=\"address undefined signed-integer-overflow\"}",
          "6: SANITIZE=${SANITIZE:=\"thread\"}",
          "",
          "[Added Lines]",
          "5: SANITIZE=${SANITIZE:=\"address undefined signed-integer-overflow\"}",
          "6: # SANITIZE=${SANITIZE:=\"thread\"}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d17a7bdf166108a29a27cd89bf454f9fa6c050d6",
      "candidate_info": {
        "commit_hash": "d17a7bdf166108a29a27cd89bf454f9fa6c050d6",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/d17a7bdf166108a29a27cd89bf454f9fa6c050d6",
        "files": [
          "libr/anal/p/anal_arm_cs.c"
        ],
        "message": "Fix negative index in anal.arm64.cs ##crash\n\n* Reported by Cen Zhang via huntr.dev",
        "before_after_code_files": [
          "libr/anal/p/anal_arm_cs.c||libr/anal/p/anal_arm_cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/19669"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libr/anal/p/anal_arm_cs.c||libr/anal/p/anal_arm_cs.c": [
          "File: libr/anal/p/anal_arm_cs.c -> libr/anal/p/anal_arm_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1016: #define VEC64(n) insn->detail->arm64.operands[n].vess",
          "1017: #define VEC64_APPEND(sb, n, i) vector64_append(sb, handle, insn, n, i)",
          "1020: static void vector64_append(RStrBuf *sb, csh *handle, cs_insn *insn, int n, int i) {",
          "1021:  cs_arm64_op op = INSOP64 (n);",
          "",
          "[Removed Lines]",
          "1018: #define VEC64_MASK(sh, sz) (bitmask_by_width[63]^(bitmask_by_width[sz-1]<<sh))",
          "",
          "[Added Lines]",
          "1018: #define VEC64_MASK(sh, sz) (bitmask_by_width[63]^(bitmask_by_width[sz>0?sz-1:0]<<sh))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99d7b1f7a2e57360f1aa158546d6a9ea1a0f72c0",
      "candidate_info": {
        "commit_hash": "99d7b1f7a2e57360f1aa158546d6a9ea1a0f72c0",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/99d7b1f7a2e57360f1aa158546d6a9ea1a0f72c0",
        "files": [
          "libr/bin/format/pyc/marshal.c"
        ],
        "message": "Fix #19443 - Fix the pyc tests and marshall uaf\n\n* Fix memleaks when parsing invalid pyc type objects\n* Sometimes valgrind logs are nicer than asan ones",
        "before_after_code_files": [
          "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
          ],
          "candidate": [
            "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c": [
          "File: libr/bin/format/pyc/marshal.c -> libr/bin/format/pyc/marshal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:  pyc_object *ret = NULL;",
          "273:  bool error = false;",
          "274:  ut32 size = 0;",
          "278:  if (error) {",
          "279:   return NULL;",
          "280:  }",
          "",
          "[Removed Lines]",
          "275:  ut8 n = 0;",
          "277:  n = get_ut8 (buffer, &error);",
          "",
          "[Added Lines]",
          "276:  ut8 n = get_ut8 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "994:  bool error = false;",
          "995:  pyc_object *ret = NULL;",
          "996:  ut8 code = get_ut8 (buffer, &error);",
          "998:  RListIter *ref_idx = NULL;",
          "1001:  if (error) {",
          "1002:   return NULL;",
          "1003:  }",
          "1006:  if (flag) {",
          "1010:   }",
          "1012:  }",
          "1014:  switch (type) {",
          "",
          "[Removed Lines]",
          "997:  ut8 flag = code & FLAG_REF;",
          "999:  ut8 type = code & ~FLAG_REF;",
          "1005:  bool doref = false;",
          "1007:   ret = get_none_object ();",
          "1008:   if (!ret) {",
          "1009:    return NULL;",
          "1011:   doref = true;",
          "",
          "[Added Lines]",
          "996:  bool flag = (code & FLAG_REF);",
          "998:  ut8 type = (code & ~FLAG_REF);",
          "1005:   pyc_object *noneret = get_none_object ();",
          "1006:   if (noneret) {",
          "1007:    ref_idx = r_list_append (refs, noneret);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016:   free_object (ret);",
          "1017:   return NULL;",
          "1018:  case TYPE_TRUE:",
          "1020:   return get_true_object ();",
          "1021:  case TYPE_FALSE:",
          "1022:   free_object (ret);",
          "",
          "[Removed Lines]",
          "1019:   free_object (ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1106:   break;",
          "1107:  case TYPE_UNKNOWN:",
          "1108:   eprintf (\"Get not implemented for type 0x%x\\n\", type);",
          "1109:   free_object (ret);",
          "1110:   return NULL;",
          "1111:  case 0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:   r_list_pop (refs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1113:   break;",
          "1114:  default:",
          "1115:   eprintf (\"Undefined type in get_object (0x%x)\\n\", type);",
          "1117:   return NULL;",
          "1118:  }",
          "1128:   if (ref_idx->data != ret) {",
          "1129:    free_object (ref_idx->data);",
          "1130:   }",
          "1131:   ref_idx->data = copy_object (ret);",
          "1132:  }",
          "1133:  return ret;",
          "1134: }",
          "",
          "[Removed Lines]",
          "1116:   free_object (ret);",
          "1119:  if (doref) {",
          "1120:   ref_idx = r_list_append (refs, ret);",
          "1121:   if (!ref_idx) {",
          "1122:    free_object (ret);",
          "1123:    return NULL;",
          "1124:   }",
          "1125:  }",
          "1127:  if (flag && ref_idx) {",
          "",
          "[Added Lines]",
          "1117:  if (ret && flag && ref_idx) {",
          "1123:  if (ret) {",
          "1124:   return ret;",
          "1125:  }",
          "1126:  ret = get_none_object ();",
          "1127:  if (!ret) {",
          "1128:   return NULL;",
          "1129:  }",
          "1130:  r_list_append (refs, ret);",
          "",
          "---------------"
        ]
      }
    }
  ]
}