{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
      "candidate_info": {
        "commit_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "files": [
          "ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c"
        ],
        "message": "Use correct signature algorithm list when sending or checking.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2297)",
        "before_after_code_files": [
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2062:                                  const unsigned char *psig, size_t psiglen);",
          "2063: __owur int tls1_save_sigalgs(SSL *s, const unsigned char *data, int dsize);",
          "2064: __owur int tls1_process_sigalgs(SSL *s);",
          "2066: __owur int tls12_check_peer_sigalg(const EVP_MD **pmd, SSL *s,",
          "2067:                                    const unsigned char *sig, EVP_PKEY *pkey);",
          "2068: void ssl_set_client_disabled(SSL *s);",
          "",
          "[Removed Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs);",
          "",
          "[Added Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2002:     if (SSL_USE_SIGALGS(s)) {",
          "2003:         const unsigned char *psigs;",
          "2004:         unsigned char *etmp = p;",
          "2007:         p += 2;",
          "2008:         nl = tls12_copy_sigalgs(s, p, psigs, nl);",
          "",
          "[Removed Lines]",
          "2005:         nl = tls12_get_psigalgs(s, &psigs);",
          "",
          "[Added Lines]",
          "2005:         nl = tls12_get_psigalgs(s, 1, &psigs);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "712: };",
          "713: #endif",
          "715: {",
          "",
          "[Removed Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs)",
          "",
          "[Added Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     }",
          "734: #endif",
          "738:         return s->cert->client_sigalgslen;",
          "739:     } else if (s->cert->conf_sigalgs) {",
          "",
          "[Removed Lines]",
          "736:     if (s->server && s->cert->client_sigalgs) {",
          "",
          "[Added Lines]",
          "736:     if (s->server == sent && s->cert->client_sigalgs) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797: #endif",
          "801:     for (i = 0; i < sent_sigslen; i += 2, sent_sigs += 2) {",
          "802:         if (sig[0] == sent_sigs[0] && sig[1] == sent_sigs[1])",
          "803:             break;",
          "",
          "[Removed Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, &sent_sigs);",
          "",
          "[Added Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, 1, &sent_sigs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:         size_t salglen;",
          "1190:         const unsigned char *salg;",
          "1191:         unsigned char *etmp;",
          "",
          "[Removed Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, &salg);",
          "",
          "[Added Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, 1, &salg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3400:     for (i = 0; i < sigalgslen; i += 2, sigalgs += 2) {",
          "3401:         switch (sigalgs[1]) {",
          "3402: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, &sigalgs);",
          "",
          "[Added Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, 1, &sigalgs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3491:         conf = c->conf_sigalgs;",
          "3492:         conflen = c->conf_sigalgslen;",
          "3493:     } else",
          "3495:     if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb) {",
          "3496:         pref = conf;",
          "3497:         preflen = conflen;",
          "",
          "[Removed Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, &conf);",
          "",
          "[Added Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, 0, &conf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6642518dedfef916066bf26c588dc5fa70ebf2e",
      "candidate_info": {
        "commit_hash": "f6642518dedfef916066bf26c588dc5fa70ebf2e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f6642518dedfef916066bf26c588dc5fa70ebf2e",
        "files": [
          "engines/engine_vector.mar"
        ],
        "message": "Code health: Remove unused VAX transfer vector for engines\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2793)\n(cherry picked from commit 38a322a5f29ae0b4a9bd42233310835487d875ac)",
        "before_after_code_files": [
          "engines/engine_vector.mar||engines/engine_vector.mar"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/engine_vector.mar||engines/engine_vector.mar": [
          "File: engines/engine_vector.mar -> engines/engine_vector.mar",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
      "candidate_info": {
        "commit_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "files": [
          "crypto/srp/srp_vfy.c"
        ],
        "message": "Prevent OOB in SRP base64 code.\n\nChange size comparison from > (GT) to >= (GTE) to ensure an additional\nbyte of output buffer, to prevent OOB reads/writes later in the function\nReject input strings larger than 2GB\nDetect invalid output buffer size and return early\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2672)\n\n(cherry picked from commit ecca16632a73bb80ee27cdec8a97f6def0a4714d)",
        "before_after_code_files": [
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     int i, j;",
          "37:     int size;",
          "39:     while (*src && (*src == ' ' || *src == '\\t' || *src == '\\n'))",
          "40:         ++src;",
          "41:     size = strlen(src);",
          "43:         return -1;",
          "45:     i = 0;",
          "",
          "[Removed Lines]",
          "42:     if (alen > INT_MAX || size > (int)alen)",
          "",
          "[Added Lines]",
          "39:     if (alen == 0 || alen > INT_MAX)",
          "40:         return -1;",
          "45:     if (size < 0 || size >= (int)alen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         if (--i < 0)",
          "78:             break;",
          "79:     }",
          "81:         ++j;",
          "82:     i = 0;",
          "83:     while (j <= size)",
          "",
          "[Removed Lines]",
          "80:     while (a[j] == 0 && j <= size)",
          "",
          "[Added Lines]",
          "83:     while (j <= size && a[j] == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "722d42e1ea710ba036563a68dc7c4e987bf4991b",
      "candidate_info": {
        "commit_hash": "722d42e1ea710ba036563a68dc7c4e987bf4991b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/722d42e1ea710ba036563a68dc7c4e987bf4991b",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Do not overallocate for tmp.ciphers_raw\n\nWell, not as much, at least.\n\nCommit 07afdf3c3ac97af4f2b4eec22a97f7230f8227e0 changed things so\nthat for SSLv2 format ClientHellos we store the cipher list in the\nTLS format, i.e., with two bytes per cipher, to be consistent with\nhistorical behavior.\n\nHowever, the space allocated for the array still performed the computation\nwith three bytes per cipher, a needless over-allocation (though a relatively\nsmall one, all things considered).\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2281)\n(cherry picked from commit f1429b85c5821e55224e5878da9d0fa420a41f71)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3280:         if (raw == NULL) {",
          "3282:             goto err;",
          "",
          "[Removed Lines]",
          "3279:         raw = s->s3->tmp.ciphers_raw = OPENSSL_malloc(numciphers * n);",
          "",
          "[Added Lines]",
          "3279:         raw = OPENSSL_malloc(numciphers * TLS_CIPHER_LEN);",
          "3280:         s->s3->tmp.ciphers_raw = raw;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9fcdd2e69052412e67cbbf6e8b5bdc5b545d364",
      "candidate_info": {
        "commit_hash": "e9fcdd2e69052412e67cbbf6e8b5bdc5b545d364",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9fcdd2e69052412e67cbbf6e8b5bdc5b545d364",
        "files": [
          "test/d2i-tests/bad-cms.der",
          "test/d2i_test.c",
          "test/recipes/25-test_d2i.t"
        ],
        "message": "add test for CVE-2016-7053\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "test/d2i_test.c||test/d2i_test.c",
          "test/recipes/25-test_d2i.t||test/recipes/25-test_d2i.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/d2i_test.c||test/d2i_test.c": [
          "File: test/d2i_test.c -> test/d2i_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <openssl/err.h>",
          "21: #include <openssl/x509.h>",
          "22: #include <openssl/x509v3.h>",
          "23: #include \"e_os.h\"",
          "25: static const ASN1_ITEM *item_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <openssl/cms.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         ASN1_ITEM_ref(ASN1_ANY),",
          "150:         ASN1_ITEM_ref(X509),",
          "151:         ASN1_ITEM_ref(GENERAL_NAME),",
          "153:     };",
          "155:     static error_enum expected_errors[] = {",
          "",
          "[Removed Lines]",
          "152:         ASN1_ITEM_ref(ASN1_INTEGER)",
          "",
          "[Added Lines]",
          "153:         ASN1_ITEM_ref(ASN1_INTEGER),",
          "154:         ASN1_ITEM_ref(CMS_ContentInfo)",
          "",
          "---------------"
        ],
        "test/recipes/25-test_d2i.t||test/recipes/25-test_d2i.t": [
          "File: test/recipes/25-test_d2i.t -> test/recipes/25-test_d2i.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: setup(\"test_d2i\");",
          "20: ok(run(test([\"d2i_test\", \"X509\", \"decode\",",
          "21:              srctop_file('test','d2i-tests','bad_cert.der')])),",
          "",
          "[Removed Lines]",
          "18: plan tests => 13;",
          "",
          "[Added Lines]",
          "18: plan tests => 14;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: ok(run(test([\"d2i_test\", \"ASN1_INTEGER\", \"decode\",",
          "80:              srctop_file('test','d2i-tests','bad-int-padminus1.der')])),",
          "81:    \"Running d2i_test bad-int-padminus1.der INTEGER\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: # Invalid CMS structure with decode error in CHOICE value.",
          "84: # Test for CVE-2016-7053",
          "86: ok(run(test([\"d2i_test\", \"CMS_ContentInfo\", \"decode\",",
          "87:              srctop_file('test','d2i-tests','bad-cms.der')])),",
          "88:    \"Running d2i_test bad-cms.der CMS ContentInfo\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}