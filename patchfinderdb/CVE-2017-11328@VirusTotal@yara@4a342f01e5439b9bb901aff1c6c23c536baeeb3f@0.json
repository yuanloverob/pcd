{
  "cve_id": "CVE-2017-11328",
  "cve_desc": "Heap buffer overflow in the yr_object_array_set_item() function in object.c in YARA 3.x allows a denial-of-service attack by scanning a crafted .NET file.",
  "repo": "VirusTotal/yara",
  "patch_hash": "4a342f01e5439b9bb901aff1c6c23c536baeeb3f",
  "patch_info": {
    "commit_hash": "4a342f01e5439b9bb901aff1c6c23c536baeeb3f",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/4a342f01e5439b9bb901aff1c6c23c536baeeb3f",
    "files": [
      "libyara/modules/tests.c",
      "libyara/object.c",
      "tests/test-rules.c"
    ],
    "message": "Fix heap overflow (reported by Jurriaan Bremer)\n\nWhen setting a new array item with yr_object_array_set_item() the array size is doubled if the index for the new item is larger than the already allocated ones. No further checks were made to ensure that the index fits into the array after doubling its capacity. If the array capacity was for example 64, and a new object is assigned to an index larger than 128 the overflow occurs. As yr_object_array_set_item() is usually invoked with indexes that increase monotonically by one, this bug never triggered before. But the new \"dotnet\" module has the potential to allow the exploitation of this bug by scanning a specially crafted .NET binary.",
    "before_after_code_files": [
      "libyara/modules/tests.c||libyara/modules/tests.c",
      "libyara/object.c||libyara/object.c",
      "tests/test-rules.c||tests/test-rules.c"
    ]
  },
  "patch_diff": {
    "libyara/modules/tests.c||libyara/modules/tests.c": [
      "File: libyara/modules/tests.c -> libyara/modules/tests.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "176:   set_integer(0, module_object, \"integer_array[%i]\", 0);",
      "177:   set_integer(1, module_object, \"integer_array[%i]\", 1);",
      "178:   set_integer(2, module_object, \"integer_array[%i]\", 2);",
      "180:   set_string(\"foo\", module_object, \"string_array[%i]\", 0);",
      "181:   set_string(\"bar\", module_object, \"string_array[%i]\", 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "179:   set_integer(256, module_object, \"integer_array[%i]\", 256);",
      "",
      "---------------"
    ],
    "libyara/object.c||libyara/object.c": [
      "File: libyara/object.c -> libyara/object.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "726:   if (array->items == NULL)",
      "727:   {",
      "730:     array->items = (YR_ARRAY_ITEMS*) yr_malloc(",
      "731:         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));",
      "",
      "[Removed Lines]",
      "728:     count = yr_max(64, (index + 1) * 2);",
      "",
      "[Added Lines]",
      "728:     count = 64;",
      "730:     while (count <= index)",
      "731:       count *= 2;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "740:   else if (index >= array->items->count)",
      "741:   {",
      "742:     count = array->items->count * 2;",
      "743:     array->items = (YR_ARRAY_ITEMS*) yr_realloc(",
      "744:         array->items,",
      "745:         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "747:     while (count <= index)",
      "748:       count *= 2;",
      "",
      "---------------"
    ],
    "tests/test-rules.c||tests/test-rules.c": [
      "File: tests/test-rules.c -> tests/test-rules.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1395:       }\",",
      "1396:       NULL);",
      "1398:   assert_true_rule(",
      "1399:       \"import \\\"tests\\\" \\",
      "1400:        rule test { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1398:   assert_true_rule(",
      "1399:       \"import \\\"tests\\\" \\",
      "1400:        rule test { \\",
      "1401:         condition: tests.integer_array[256] == 256 \\",
      "1402:       }\",",
      "1403:       NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42adc87e8d998666d77525923d5c1293a9a103bf",
      "candidate_info": {
        "commit_hash": "42adc87e8d998666d77525923d5c1293a9a103bf",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/42adc87e8d998666d77525923d5c1293a9a103bf",
        "files": [
          "libyara/modules/tests.c",
          "libyara/object.c",
          "tests/test-rules.c"
        ],
        "message": "Fix heap overflow (reported by Jurriaan Bremer)\n\nWhen setting a new array item with yr_object_array_set_item() the array size is doubled if the index for the new item is larger than the already allocated ones. No further checks were made to ensure that the index fits into the array after doubling its capacity. If the array capacity was for example 64, and a new object is assigned to an index larger than 128 the overflow occurs. As yr_object_array_set_item() is usually invoked with indexes that increase monotonically by one, this bug never triggered before. But the new \"dotnet\" module has the potential to allow the exploitation of this bug by scanning a specially crafted .NET binary.",
        "before_after_code_files": [
          "libyara/modules/tests.c||libyara/modules/tests.c",
          "libyara/object.c||libyara/object.c",
          "tests/test-rules.c||tests/test-rules.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "libyara/modules/tests.c||libyara/modules/tests.c",
            "libyara/object.c||libyara/object.c",
            "tests/test-rules.c||tests/test-rules.c"
          ],
          "candidate": [
            "libyara/modules/tests.c||libyara/modules/tests.c",
            "libyara/object.c||libyara/object.c",
            "tests/test-rules.c||tests/test-rules.c"
          ]
        }
      },
      "candidate_diff": {
        "libyara/modules/tests.c||libyara/modules/tests.c": [
          "File: libyara/modules/tests.c -> libyara/modules/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   set_integer(0, module_object, \"integer_array[%i]\", 0);",
          "177:   set_integer(1, module_object, \"integer_array[%i]\", 1);",
          "178:   set_integer(2, module_object, \"integer_array[%i]\", 2);",
          "180:   set_string(\"foo\", module_object, \"string_array[%i]\", 0);",
          "181:   set_string(\"bar\", module_object, \"string_array[%i]\", 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   set_integer(256, module_object, \"integer_array[%i]\", 256);",
          "",
          "---------------"
        ],
        "libyara/object.c||libyara/object.c": [
          "File: libyara/object.c -> libyara/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:   if (array->items == NULL)",
          "727:   {",
          "730:     array->items = (YR_ARRAY_ITEMS*) yr_malloc(",
          "731:         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));",
          "",
          "[Removed Lines]",
          "728:     count = yr_max(64, (index + 1) * 2);",
          "",
          "[Added Lines]",
          "728:     count = 64;",
          "730:     while (count <= index)",
          "731:       count *= 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740:   else if (index >= array->items->count)",
          "741:   {",
          "742:     count = array->items->count * 2;",
          "743:     array->items = (YR_ARRAY_ITEMS*) yr_realloc(",
          "744:         array->items,",
          "745:         sizeof(YR_ARRAY_ITEMS) + count * sizeof(YR_OBJECT*));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:     while (count <= index)",
          "748:       count *= 2;",
          "",
          "---------------"
        ],
        "tests/test-rules.c||tests/test-rules.c": [
          "File: tests/test-rules.c -> tests/test-rules.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1386:       }\",",
          "1387:       NULL);",
          "1389:   assert_true_rule(",
          "1390:       \"import \\\"tests\\\" \\",
          "1391:        rule test { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1389:   assert_true_rule(",
          "1390:       \"import \\\"tests\\\" \\",
          "1391:        rule test { \\",
          "1392:         condition: tests.integer_array[256] == 256 \\",
          "1393:       }\",",
          "1394:       NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}