{
  "cve_id": "CVE-2014-6424",
  "cve_desc": "The dissect_v9_v10_pdu_data function in epan/dissectors/packet-netflow.c in the Netflow dissector in Wireshark 1.10.x before 1.10.10 and 1.12.x before 1.12.1 refers to incorrect offset and start variables, which allows remote attackers to cause a denial of service (uninitialized memory read and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "44698259b1f5865c60323acaf2a633654a2abe81",
  "patch_info": {
    "commit_hash": "44698259b1f5865c60323acaf2a633654a2abe81",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/44698259b1f5865c60323acaf2a633654a2abe81",
    "files": [
      "epan/dissectors/packet-netflow.c"
    ],
    "message": "Fix the uninitialized-read error reported in bug 10370.\n\nFix apparent cut-n-pasteo: if offset_e is set then we should be looking\nat offset_e (instead of offset_s) and ts_end (instead of ts_start).\n\nBug: 10370\nChange-Id: I0683ad55ac782c7fd03b7dbdf3f34df713267de5\nReviewed-on: https://code.wireshark.org/review/3589\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
      "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5162:                                         offset_e[i], 4, &ts_end[i]);",
      "5163:                 } else {",
      "5164:                     proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
      "5166:                 }",
      "5167:             }",
      "5168:         }",
      "",
      "[Removed Lines]",
      "5165:                                         offset_s[i], 4, &ts_start[i]);",
      "",
      "[Added Lines]",
      "5165:                                         offset_e[i], 4, &ts_end[i]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e67016ffa07c50bd8bdd562746328f5c2abd895",
      "candidate_info": {
        "commit_hash": "6e67016ffa07c50bd8bdd562746328f5c2abd895",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6e67016ffa07c50bd8bdd562746328f5c2abd895",
        "files": [
          "epan/dissectors/packet-netflow.c"
        ],
        "message": "Fix the uninitialized-read error reported in bug 10370.\n\nFix apparent cut-n-pasteo: if offset_e is set then we should be looking\nat offset_e (instead of offset_s) and ts_end (instead of ts_start).\n\nBug: 10370\nChange-Id: I0683ad55ac782c7fd03b7dbdf3f34df713267de5\nReviewed-on: https://code.wireshark.org/review/3589\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 44698259b1f5865c60323acaf2a633654a2abe81)\nReviewed-on: https://code.wireshark.org/review/3591\n(cherry picked from commit 2035d31c0e7cb7291ede2544a04b4641dc9b12d7)\nReviewed-on: https://code.wireshark.org/review/3592",
        "before_after_code_files": [
          "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ],
          "candidate": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
          "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5128:                                         offset_e[i], 4, &ts_end[i]);",
          "5129:                 } else {",
          "5130:                     proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
          "5132:                 }",
          "5133:             }",
          "5134:         }",
          "",
          "[Removed Lines]",
          "5131:                                         offset_s[i], 4, &ts_start[i]);",
          "",
          "[Added Lines]",
          "5131:                                         offset_e[i], 4, &ts_end[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bbbc56b21d033c5f3fa5d23fbe18a0b82060de1",
      "candidate_info": {
        "commit_hash": "2bbbc56b21d033c5f3fa5d23fbe18a0b82060de1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2bbbc56b21d033c5f3fa5d23fbe18a0b82060de1",
        "files": [
          "epan/dissectors/packet-netflow.c"
        ],
        "message": "Fix the uninitialized-read error reported in bug 10370.\n\nFix apparent cut-n-pasteo: if offset_e is set then we should be looking\nat offset_e (instead of offset_s) and ts_end (instead of ts_start).\n\nBug: 10370\nChange-Id: I0683ad55ac782c7fd03b7dbdf3f34df713267de5\nReviewed-on: https://code.wireshark.org/review/3589\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 44698259b1f5865c60323acaf2a633654a2abe81)\nReviewed-on: https://code.wireshark.org/review/3591\n(cherry picked from commit 2035d31c0e7cb7291ede2544a04b4641dc9b12d7)\nReviewed-on: https://code.wireshark.org/review/3592\nReviewed-on: https://code.wireshark.org/review/4425\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ],
          "candidate": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
          "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5110:                                         offset_e[i], 4, &ts_end[i]);",
          "5111:                 } else {",
          "5112:                     proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
          "5114:                 }",
          "5115:             }",
          "5116:         }",
          "",
          "[Removed Lines]",
          "5113:                                         offset_s[i], 4, &ts_start[i]);",
          "",
          "[Added Lines]",
          "5113:                                         offset_e[i], 4, &ts_end[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2035d31c0e7cb7291ede2544a04b4641dc9b12d7",
      "candidate_info": {
        "commit_hash": "2035d31c0e7cb7291ede2544a04b4641dc9b12d7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2035d31c0e7cb7291ede2544a04b4641dc9b12d7",
        "files": [
          "epan/dissectors/packet-netflow.c"
        ],
        "message": "Fix the uninitialized-read error reported in bug 10370.\n\nFix apparent cut-n-pasteo: if offset_e is set then we should be looking\nat offset_e (instead of offset_s) and ts_end (instead of ts_start).\n\nBug: 10370\nChange-Id: I0683ad55ac782c7fd03b7dbdf3f34df713267de5\nReviewed-on: https://code.wireshark.org/review/3589\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 44698259b1f5865c60323acaf2a633654a2abe81)\nReviewed-on: https://code.wireshark.org/review/3591",
        "before_after_code_files": [
          "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ],
          "candidate": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
          "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5165:                                         offset_e[i], 4, &ts_end[i]);",
          "5166:                 } else {",
          "5167:                     proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
          "5169:                 }",
          "5170:             }",
          "5171:         }",
          "",
          "[Removed Lines]",
          "5168:                                         offset_s[i], 4, &ts_start[i]);",
          "",
          "[Added Lines]",
          "5168:                                         offset_e[i], 4, &ts_end[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99ab5c9d3838e56a046d5e15295905bbd691d721",
      "candidate_info": {
        "commit_hash": "99ab5c9d3838e56a046d5e15295905bbd691d721",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/99ab5c9d3838e56a046d5e15295905bbd691d721",
        "files": [
          "epan/dissectors/packet-netflow.c"
        ],
        "message": "netflow: cope with multiple duration types in one flow.\n\nBug: 11295\nChange-Id: I71493e13989dbc29e3e3e7d518d3b6686fbec01a\nReviewed-on: https://code.wireshark.org/review/9063\nPetri-Dish: Martin Mathieson <martin.r.mathieson@googlemail.com>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Martin Mathieson <martin.r.mathieson@googlemail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ],
          "candidate": [
            "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-netflow.c||epan/dissectors/packet-netflow.c": [
          "File: epan/dissectors/packet-netflow.c -> epan/dissectors/packet-netflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3082:     return (guint) (offset - orig_offset);",
          "3083: }",
          "3085: static guint",
          "3086: dissect_v9_v10_pdu_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *pdutree, int offset,",
          "3087:                         v9_v10_tmplt_t *tmplt_p, hdrinfo_t *hdrinfo_p, v9_v10_tmplt_fields_type_t fields_type)",
          "3088: {",
          "3089:     int                   orig_offset;",
          "3090:     int                   rev;",
          "3093:     nstime_t              ts;",
          "3095:     guint32               msec_delta;",
          "3096:     nstime_t              ts_delta;",
          "3097:     guint32               usec;",
          "3100:     address               local_addr, remote_addr;",
          "3101:     guint16               local_port = 0, remote_port = 0/*, ipv4_id = 0, icmp_id = 0*/;",
          "",
          "[Removed Lines]",
          "3091:     nstime_t              ts_start[2], ts_end[2];",
          "3092:     int                   offset_s[2], offset_e[2];",
          "3094:     guint32               msec_start[2], msec_end[2];",
          "3098:     int                   i;",
          "",
          "[Added Lines]",
          "3086: enum duration_type_e {",
          "3087:     duration_type_switched,",
          "3088:     duration_type_seconds,",
          "3089:     duration_type_milliseconds,",
          "3090:     duration_type_microseconds,",
          "3091:     duration_type_nanoseconds,",
          "3092:     duration_type_delta_milliseconds,",
          "3094: };",
          "3102:     nstime_t              ts_start[2][duration_type_max], ts_end[2][duration_type_max];",
          "3103:     int                   offset_s[2][duration_type_max], offset_e[2][duration_type_max];",
          "3105:     guint32               msec_start[2][duration_type_max], msec_end[2][duration_type_max];",
          "3106:     gint                  duration_type;",
          "3110:     int                   i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3140:     orig_offset   = offset;",
          "3141:     count         = tmplt_p->field_count[fields_type];",
          "3146:     for (i = 0; i < count; i++) {",
          "3147:         guint64      pen_type;",
          "",
          "[Removed Lines]",
          "3143:     offset_s[0]   = offset_s[1] = offset_e[0] = offset_e[1] = 0;",
          "3144:     msec_start[0] = msec_start[1] = msec_end[0] = msec_end[1] = 0;",
          "",
          "[Added Lines]",
          "3155:     for (i=0; i < (int)duration_type_max; i++) {",
          "3156:         offset_s[0][i]   = offset_s[1][i] = offset_e[0][i] = offset_e[1][i] = 0;",
          "3157:         msec_start[0][i] = msec_start[1][i] = msec_end[0][i] = msec_end[1][i] = 0;",
          "3158:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3369:             break;",
          "3376:             goto timestamp_common;",
          "3377:             break;",
          "3383:             goto timestamp_common;",
          "3384:             break;",
          "3390:             goto timestamp_common;",
          "3391:             break;",
          "3397:             goto timestamp_common;",
          "3398:             break;",
          "3404:             goto timestamp_common;",
          "3405:             break;",
          "3411:             goto timestamp_common;",
          "3412:             break;",
          "3417:             goto timestamp_common;",
          "3418:             break;",
          "3424:             goto timestamp_common;",
          "3425:             break;",
          "3431:             goto timestamp_common;",
          "3432:             break;",
          "3438:             goto timestamp_common;",
          "3439:             break;",
          "3445:             usec                = tvb_get_ntohl(tvb, offset);",
          "3448:             goto timestamp_common;",
          "3449:             break;",
          "3455:             usec          = tvb_get_ntohl(tvb, offset);",
          "3461:         timestamp_common:",
          "3463:                 proto_tree *timetree;",
          "3464:                 proto_item *timeitem;",
          "3467:                 timeitem =",
          "3468:                     proto_tree_add_time(pdutree, hf_cflow_timedelta, tvb,",
          "3470:                 PROTO_ITEM_SET_GENERATED(timeitem);",
          "3471:                 timetree = proto_item_add_subtree(timeitem, ett_flowtime);",
          "3474:                     proto_tree_add_time(timetree, hf_cflow_timestart, tvb,",
          "3476:                 } else {",
          "3477:                     proto_tree_add_time(timetree, hf_cflow_abstimestart, tvb,",
          "3479:                 }",
          "3481:                     proto_tree_add_time(timetree, hf_cflow_timeend, tvb,",
          "3483:                 } else {",
          "3484:                     proto_tree_add_time(timetree, hf_cflow_abstimeend, tvb,",
          "3486:                 }",
          "3487:             }",
          "3488:             break;",
          "",
          "[Removed Lines]",
          "3372:             offset_e[rev] = offset;",
          "3373:             msec_end[rev] = tvb_get_ntohl(tvb, offset);",
          "3374:             ts_end[rev].secs = msec_end[rev] / 1000;",
          "3375:             ts_end[rev].nsecs = (msec_end[rev] % 1000) * 1000000;",
          "3379:             offset_s[rev] = offset;",
          "3380:             msec_start[rev] = tvb_get_ntohl(tvb, offset);",
          "3381:             ts_start[rev].secs = msec_start[rev] / 1000;",
          "3382:             ts_start[rev].nsecs = (msec_start[rev] % 1000) * 1000000;",
          "3387:             offset_s[rev] = offset;",
          "3388:             ts_start[rev].secs = tvb_get_ntohl(tvb, offset);",
          "3389:             ts_start[rev].nsecs = 0;",
          "3394:             offset_e[rev] = offset;",
          "3395:             ts_end[rev].secs = tvb_get_ntohl(tvb, offset);",
          "3396:             ts_end[rev].nsecs = 0;",
          "3401:             offset_s[rev] = offset;",
          "3402:             ts_start[rev].secs = (time_t)(tvb_get_ntoh64(tvb, offset)/1000);",
          "3403:             ts_start[rev].nsecs = (int)(tvb_get_ntoh64(tvb, offset)%1000) * 1000000;",
          "3408:             offset_e[rev] = offset;",
          "3409:             ts_end[rev].secs  = (time_t)(tvb_get_ntoh64(tvb, offset)/1000);",
          "3410:             ts_end[rev].nsecs = (int)(tvb_get_ntoh64(tvb, offset)%1000) * 1000000;",
          "3415:             offset_s[rev] = offset;",
          "3416:             ntp_to_nstime(tvb, offset, &ts_start[rev]);",
          "3422:             offset_e[rev] = offset;",
          "3423:             ntp_to_nstime(tvb, offset, &ts_end[rev]);",
          "3429:             offset_s[rev] = offset;",
          "3430:             ntp_to_nstime(tvb, offset, &ts_start[rev]);",
          "3436:             offset_e[rev] = offset;",
          "3437:             ntp_to_nstime(tvb, offset, &ts_end[rev]);",
          "3444:             offset_s[rev]       = offset;",
          "3446:             ts_start[rev].secs  = (time_t)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) / 1000000);",
          "3447:             ts_start[rev].nsecs = (int)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) % 1000000) * 1000;",
          "3454:             offset_e[rev] = offset;",
          "3456:             ts_end[rev].secs  = (time_t)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) / 1000000);",
          "3457:             ts_end[rev].nsecs = (int)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) % 1000000) * 1000;",
          "3462:             if(offset_s[rev] && offset_e[rev]) {",
          "3466:                 nstime_delta(&ts_delta, &ts_end[rev], &ts_start[rev]);",
          "3469:                                         offset_s[rev], 0, &ts_delta);",
          "3473:                 if (msec_start[rev]) {",
          "3475:                                         offset_s[rev], length, &ts_start[rev]);",
          "3478:                                         offset_s[rev], length, &ts_start[rev]);",
          "3480:                 if (msec_end[rev]) {",
          "3482:                                         offset_e[rev], length, &ts_end[rev]);",
          "3485:                                         offset_e[rev], length, &ts_end[rev]);",
          "",
          "[Added Lines]",
          "3386:             duration_type = (gint)duration_type_switched;",
          "3387:             offset_e[rev][duration_type] = offset;",
          "3388:             msec_end[rev][duration_type] = tvb_get_ntohl(tvb, offset);",
          "3389:             ts_end[rev][duration_type].secs = msec_end[rev][duration_type] / 1000;",
          "3390:             ts_end[rev][duration_type].nsecs = (msec_end[rev][duration_type] % 1000) * 1000000;",
          "3394:             duration_type = (gint)duration_type_switched;",
          "3395:             offset_s[rev][duration_type] = offset;",
          "3396:             msec_start[rev][duration_type] = tvb_get_ntohl(tvb, offset);",
          "3397:             ts_start[rev][duration_type].secs = msec_start[rev][duration_type] / 1000;",
          "3398:             ts_start[rev][duration_type].nsecs = (msec_start[rev][duration_type] % 1000) * 1000000;",
          "3403:             duration_type = (gint)duration_type_seconds;",
          "3404:             offset_s[rev][duration_type] = offset;",
          "3405:             ts_start[rev][duration_type].secs = tvb_get_ntohl(tvb, offset);",
          "3406:             ts_start[rev][duration_type].nsecs = 0;",
          "3411:             duration_type = (gint)duration_type_seconds;",
          "3412:             offset_e[rev][duration_type] = offset;",
          "3413:             ts_end[rev][duration_type].secs = tvb_get_ntohl(tvb, offset);",
          "3414:             ts_end[rev][duration_type].nsecs = 0;",
          "3419:             duration_type = (gint)duration_type_milliseconds;",
          "3420:             offset_s[rev][duration_type] = offset;",
          "3421:             ts_start[rev][duration_type].secs = (time_t)(tvb_get_ntoh64(tvb, offset)/1000);",
          "3422:             ts_start[rev][duration_type].nsecs = (int)(tvb_get_ntoh64(tvb, offset)%1000) * 1000000;",
          "3427:             duration_type = (gint)duration_type_milliseconds;",
          "3428:             offset_e[rev][duration_type] = offset;",
          "3429:             ts_end[rev][duration_type].secs  = (time_t)(tvb_get_ntoh64(tvb, offset)/1000);",
          "3430:             ts_end[rev][duration_type].nsecs = (int)(tvb_get_ntoh64(tvb, offset)%1000) * 1000000;",
          "3435:             duration_type = (gint)duration_type_microseconds;",
          "3436:             offset_s[rev][duration_type] = offset;",
          "3437:             ntp_to_nstime(tvb, offset, &ts_start[rev][duration_type]);",
          "3443:             duration_type = (gint)duration_type_microseconds;",
          "3444:             offset_e[rev][duration_type] = offset;",
          "3445:             ntp_to_nstime(tvb, offset, &ts_end[rev][duration_type]);",
          "3451:             duration_type = (gint)duration_type_nanoseconds;",
          "3452:             offset_s[rev][duration_type] = offset;",
          "3453:             ntp_to_nstime(tvb, offset, &ts_start[rev][duration_type]);",
          "3459:             duration_type = (gint)duration_type_nanoseconds;",
          "3460:             offset_e[rev][duration_type] = offset;",
          "3461:             ntp_to_nstime(tvb, offset, &ts_end[rev][duration_type]);",
          "3468:             duration_type = (gint)duration_type_delta_milliseconds;",
          "3469:             offset_s[rev][duration_type]       = offset;",
          "3471:             ts_start[rev][duration_type].secs  = (time_t)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) / 1000000);",
          "3472:             ts_start[rev][duration_type].nsecs = (int)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) % 1000000) * 1000;",
          "3479:             duration_type = (gint)duration_type_delta_milliseconds;",
          "3480:             offset_e[rev][duration_type] = offset;",
          "3482:             ts_end[rev][duration_type].secs  = (time_t)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) / 1000000);",
          "3483:             ts_end[rev][duration_type].nsecs = (int)(((guint64)(hdrinfo_p->export_time_secs)*1000000 - usec) % 1000000) * 1000;",
          "3488:             if(offset_s[rev][duration_type] && offset_e[rev][duration_type]) {",
          "3492:                 nstime_delta(&ts_delta, &ts_end[rev][duration_type], &ts_start[rev][duration_type]);",
          "3495:                                         offset_s[rev][duration_type], 0, &ts_delta);",
          "3500:                 switch (duration_type) {",
          "3501:                     case duration_type_switched:",
          "3502:                         proto_item_append_text(timeitem, \" (switched)\");",
          "3503:                         break;",
          "3504:                     case duration_type_seconds:",
          "3505:                         proto_item_append_text(timeitem, \" (seconds)\");",
          "3506:                         break;",
          "3507:                     case duration_type_milliseconds:",
          "3508:                         proto_item_append_text(timeitem, \" (milliseconds)\");",
          "3509:                         break;",
          "3510:                     case duration_type_microseconds:",
          "3511:                         proto_item_append_text(timeitem, \" (milliseconds)\");",
          "3512:                         break;",
          "3513:                     case duration_type_nanoseconds:",
          "3514:                         proto_item_append_text(timeitem, \" (nanoseconds)\");",
          "3515:                         break;",
          "3516:                     case duration_type_delta_milliseconds:",
          "3517:                         proto_item_append_text(timeitem, \" (delta milliseconds)\");",
          "3518:                         break;",
          "3519:                     default:",
          "3520:                         break;",
          "3521:                 }",
          "3524:                 if (msec_start[rev][duration_type]) {",
          "3526:                                         offset_s[rev][duration_type], length, &ts_start[rev][duration_type]);",
          "3529:                                         offset_s[rev][duration_type], length, &ts_start[rev][duration_type]);",
          "3531:                 if (msec_end[rev][duration_type]) {",
          "3533:                                         offset_e[rev][duration_type], length, &ts_end[rev][duration_type]);",
          "3536:                                         offset_e[rev][duration_type], length, &ts_end[rev][duration_type]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6809:     for (i = 0; i < 2; i++) {",
          "6818:                 }",
          "6827:                 }",
          "6828:             }",
          "6829:         }",
          "",
          "[Removed Lines]",
          "6810:         if (!(offset_s[i] && offset_e[i])) {",
          "6811:             if (offset_s[i]) {",
          "6812:                 if (msec_start[i]) {",
          "6813:                     proto_tree_add_time(pdutree, hf_cflow_timestart, tvb,",
          "6814:                                         offset_s[i], 4, &ts_start[i]);",
          "6815:                 } else {",
          "6816:                     proto_tree_add_time(pdutree, hf_cflow_abstimestart, tvb,",
          "6817:                                         offset_s[i], 4, &ts_start[i]);",
          "6819:             }",
          "6820:             if (offset_e[i]) {",
          "6821:                 if (msec_end[i]) {",
          "6822:                     proto_tree_add_time(pdutree, hf_cflow_timeend, tvb,",
          "6823:                                         offset_e[i], 4, &ts_end[i]);",
          "6824:                 } else {",
          "6825:                     proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
          "6826:                                         offset_e[i], 4, &ts_end[i]);",
          "",
          "[Added Lines]",
          "6861:         for (j=0; j < (gint)duration_type_max; j++) {",
          "6862:             if (!(offset_s[i][j] && offset_e[i][j])) {",
          "6863:                 if (offset_s[i][j]) {",
          "6864:                     if (msec_start[i][j]) {",
          "6865:                         proto_tree_add_time(pdutree, hf_cflow_timestart, tvb,",
          "6866:                                             offset_s[i][j], 4, &ts_start[i][j]);",
          "6867:                     } else {",
          "6868:                         proto_tree_add_time(pdutree, hf_cflow_abstimestart, tvb,",
          "6869:                                             offset_s[i][j], 4, &ts_start[i][j]);",
          "6870:                     }",
          "6872:                 if (offset_e[i][j]) {",
          "6873:                     if (msec_end[i][j]) {",
          "6874:                         proto_tree_add_time(pdutree, hf_cflow_timeend, tvb,",
          "6875:                                             offset_e[i][j], 4, &ts_end[i][j]);",
          "6876:                     } else {",
          "6877:                         proto_tree_add_time(pdutree, hf_cflow_abstimeend, tvb,",
          "6878:                                             offset_e[i][j], 4, &ts_end[i][j]);",
          "6879:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}