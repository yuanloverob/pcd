{
  "cve_id": "CVE-2020-13397",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
  "patch_info": {
    "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "files": [
      "libfreerdp/core/security.c"
    ],
    "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
    "before_after_code_files": [
      "libfreerdp/core/security.c||libfreerdp/core/security.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/security.c||libfreerdp/core/security.c": [
      "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "816: {",
      "817:  size_t olen;",
      "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
      "820:   return FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819:  if (!rdp || !rdp->fips_decrypt)",
      "820:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
      "candidate_info": {
        "commit_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Rewritten check to satisfy BehaviouralSanitizer\n\n(cherry picked from commit 14829de866b43e7f2740b46f0c736b9adf5067eb)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1142:  if (cbDomain)",
          "1143:  {",
          "1145:   {",
          "1146:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu32 \"\", cbDomain);",
          "1147:    goto fail;",
          "",
          "[Removed Lines]",
          "1144:   if ((cbDomain % 2) || cbDomain > 52)",
          "",
          "[Added Lines]",
          "1144:   if ((cbDomain % 2) || (cbDomain > 52))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:   ptrconv.bp = Stream_Pointer(s);",
          "1159:   {",
          "1160:    WLog_ERR(TAG, \"protocol error: Domain field must be null terminated\");",
          "1161:    goto fail;",
          "",
          "[Removed Lines]",
          "1158:   if (ptrconv.wp[cbDomain / 2 - 1])",
          "",
          "[Added Lines]",
          "1158:   if (ptrconv.bp[cbDomain - 1] || ptrconv.bp[cbDomain - 2])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
      "candidate_info": {
        "commit_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "files": [
          "CMakeLists.txt",
          "client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c",
          "winpr/CMakeLists.txt"
        ],
        "message": "Prepared version for 2.1.1",
        "before_after_code_files": [
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c||client/Android/android_freerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "34:     println '----------------- Project configuration -------------------'",
          "35:     println 'VERSION_NAME:       ' + versionName",
          "",
          "[Removed Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 16)",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 17)",
          "",
          "---------------"
        ],
        "client/Android/android_freerdp.c||client/Android/android_freerdp.c": [
          "File: client/Android/android_freerdp.c -> client/Android/android_freerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define TAG CLIENT_TAG(\"android\")",
          "61: static void android_OnChannelConnectedEventHandler(void* context, ChannelConnectedEventArgs* e)",
          "62: {",
          "",
          "[Removed Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.0\"",
          "",
          "[Added Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "899df25246746373b5585e2f890d1c0be498ff76",
      "candidate_info": {
        "commit_hash": "899df25246746373b5585e2f890d1c0be498ff76",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/899df25246746373b5585e2f890d1c0be498ff76",
        "files": [
          "client/Windows/wf_client.c"
        ],
        "message": "Windows Authentication - Then launced with username argument prefill the name in the authentication box.\n\n(cherry picked from commit 318075676b5ea610b1ba47da600eb418812951cb)",
        "before_after_code_files": [
          "client/Windows/wf_client.c||client/Windows/wf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Windows/wf_client.c||client/Windows/wf_client.c": [
          "File: client/Windows/wf_client.c -> client/Windows/wf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  fSave = FALSE;",
          "439:  dwFlags = CREDUI_FLAGS_DO_NOT_PERSIST | CREDUI_FLAGS_EXCLUDE_CERTIFICATES;",
          "441:  if (wfc->isConsole)",
          "442:   status = CredUICmdLinePromptForCredentialsA(",
          "443:       title, NULL, 0, UserName, CREDUI_MAX_USERNAME_LENGTH + 1, Password,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  if (username && *username)",
          "442:   strncpy(UserName, *username, CREDUI_MAX_USERNAME_LENGTH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a11f129abb1115e622354a963c61bda1841de95",
      "candidate_info": {
        "commit_hash": "1a11f129abb1115e622354a963c61bda1841de95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1a11f129abb1115e622354a963c61bda1841de95",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed unaligned access\n\n(cherry picked from commit cb2ed7f09ad68242bfdfad8967024b063f785d97)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:  {",
          "286:   ptrconv.bp = Stream_Pointer(s);",
          "289:   {",
          "290:    WLog_ERR(TAG, \"protocol error: clientAddress must be null terminated\");",
          "291:    return FALSE;",
          "",
          "[Removed Lines]",
          "288:   if (ptrconv.wp[cbClientAddress / 2 - 1])",
          "",
          "[Added Lines]",
          "288:   if ((cbClientAddress < sizeof(WCHAR)) || (ptrconv.bp[cbClientAddress - 1]) ||",
          "289:       (ptrconv.bp[cbClientAddress - 2]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:  {",
          "335:   ptrconv.bp = Stream_Pointer(s);",
          "338:   {",
          "339:    WLog_ERR(TAG, \"protocol error: clientDir must be null terminated\");",
          "340:    return FALSE;",
          "",
          "[Removed Lines]",
          "337:   if (ptrconv.wp[cbClientDir / 2 - 1])",
          "",
          "[Added Lines]",
          "338:   if ((cbClientDir < sizeof(WCHAR)) || (ptrconv.bp[cbClientDir - 1]) ||",
          "339:       (ptrconv.bp[cbClientDir - 2]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47b4867729c0b9e636a3466e3bad81ce94767b13",
      "candidate_info": {
        "commit_hash": "47b4867729c0b9e636a3466e3bad81ce94767b13",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/47b4867729c0b9e636a3466e3bad81ce94767b13",
        "files": [
          "channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c",
          "channels/video/client/video_main.c"
        ],
        "message": "Destroy channel listeners on terminate\n\n(cherry picked from commit 2f5e5359f60c26a2de244cd6d9f7957b039cd121)",
        "before_after_code_files": [
          "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c",
          "channels/video/client/video_main.c||channels/video/client/video_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c": [
          "File: channels/audin/client/audin_main.c -> channels/audin/client/audin_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:  audin->listener_callback->plugin = pPlugin;",
          "688:  audin->listener_callback->channel_mgr = pChannelMgr;",
          "689:  return pChannelMgr->CreateListener(pChannelMgr, \"AUDIO_INPUT\", 0,",
          "691: }",
          "",
          "[Removed Lines]",
          "690:                                     (IWTSListenerCallback*)audin->listener_callback, NULL);",
          "",
          "[Added Lines]",
          "690:                                     &audin->listener_callback->iface, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "706:  WLog_Print(audin->log, WLOG_TRACE, \"...\");",
          "707:  audio_formats_free(audin->fixed_format, 1);",
          "709:  if (audin->device)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:  if (audin->listener_callback)",
          "709:  {",
          "710:   IWTSVirtualChannelManager* mgr = audin->listener_callback->channel_mgr;",
          "711:   if (mgr)",
          "712:    IFCALL(mgr->DestroyListener, mgr, &audin->iface);",
          "713:  }",
          "",
          "---------------"
        ],
        "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c": [
          "File: channels/disp/client/disp_main.c -> channels/disp/client/disp_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:  disp->listener_callback->plugin = pPlugin;",
          "309:  disp->listener_callback->channel_mgr = pChannelMgr;",
          "310:  status = pChannelMgr->CreateListener(pChannelMgr, DISP_DVC_CHANNEL_NAME, 0,",
          "313:  disp->listener->pInterface = disp->iface.pInterface;",
          "314:  return status;",
          "315: }",
          "",
          "[Removed Lines]",
          "311:                                       (IWTSListenerCallback*)disp->listener_callback,",
          "312:                                       &(disp->listener));",
          "",
          "[Added Lines]",
          "311:                                       &disp->listener_callback->iface, &(disp->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: static UINT disp_plugin_terminated(IWTSPlugin* pPlugin)",
          "323: {",
          "324:  DISP_PLUGIN* disp = (DISP_PLUGIN*)pPlugin;",
          "325:  free(disp->listener_callback);",
          "326:  free(disp->iface.pInterface);",
          "327:  free(pPlugin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:  if (disp && disp->listener_callback)",
          "326:  {",
          "327:   IWTSVirtualChannelManager* mgr = disp->listener_callback->channel_mgr;",
          "328:   if (mgr)",
          "329:    IFCALL(mgr->DestroyListener, mgr, &disp->iface);",
          "330:  }",
          "",
          "---------------"
        ],
        "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c": [
          "File: channels/echo/client/echo_main.c -> channels/echo/client/echo_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  echo->listener_callback->plugin = pPlugin;",
          "143:  echo->listener_callback->channel_mgr = pChannelMgr;",
          "147: }",
          "",
          "[Removed Lines]",
          "145:  return pChannelMgr->CreateListener(pChannelMgr, \"ECHO\", 0,",
          "146:                                     (IWTSListenerCallback*)echo->listener_callback, NULL);",
          "",
          "[Added Lines]",
          "145:  return pChannelMgr->CreateListener(pChannelMgr, \"ECHO\", 0, &echo->listener_callback->iface,",
          "146:                                     NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: static UINT echo_plugin_terminated(IWTSPlugin* pPlugin)",
          "155: {",
          "156:  ECHO_PLUGIN* echo = (ECHO_PLUGIN*)pPlugin;",
          "158:  free(echo);",
          "160:  return CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:  if (echo && echo->listener_callback)",
          "158:  {",
          "159:   IWTSVirtualChannelManager* mgr = echo->listener_callback->channel_mgr;",
          "160:   if (mgr)",
          "161:    IFCALL(mgr->DestroyListener, mgr, &echo->iface);",
          "162:  }",
          "",
          "---------------"
        ],
        "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c": [
          "File: channels/geometry/client/geometry_main.c -> channels/geometry/client/geometry_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:  geometry->listener_callback->iface.OnNewChannelConnection = geometry_on_new_channel_connection;",
          "411:  geometry->listener_callback->plugin = pPlugin;",
          "412:  geometry->listener_callback->channel_mgr = pChannelMgr;",
          "416:  geometry->listener->pInterface = geometry->iface.pInterface;",
          "417:  return status;",
          "418: }",
          "",
          "[Removed Lines]",
          "413:  status = pChannelMgr->CreateListener(pChannelMgr, GEOMETRY_DVC_CHANNEL_NAME, 0,",
          "414:                                       (IWTSListenerCallback*)geometry->listener_callback,",
          "415:                                       &(geometry->listener));",
          "",
          "[Added Lines]",
          "413:  status =",
          "414:      pChannelMgr->CreateListener(pChannelMgr, GEOMETRY_DVC_CHANNEL_NAME, 0,",
          "415:                                  &geometry->listener_callback->iface, &(geometry->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  GEOMETRY_PLUGIN* geometry = (GEOMETRY_PLUGIN*)pPlugin;",
          "428:  GeometryClientContext* context = (GeometryClientContext*)geometry->iface.pInterface;",
          "430:  if (context)",
          "431:   HashTable_Free(context->geometries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:  if (geometry && geometry->listener_callback)",
          "431:  {",
          "432:   IWTSVirtualChannelManager* mgr = geometry->listener_callback->channel_mgr;",
          "433:   if (mgr)",
          "434:    IFCALL(mgr->DestroyListener, mgr, &geometry->iface);",
          "435:  }",
          "",
          "---------------"
        ],
        "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c": [
          "File: channels/rdpei/client/rdpei_main.c -> channels/rdpei/client/rdpei_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:  rdpei->listener_callback->channel_mgr = pChannelMgr;",
          "573:  if ((error = pChannelMgr->CreateListener(pChannelMgr, RDPEI_DVC_CHANNEL_NAME, 0,",
          "576:  {",
          "577:   WLog_ERR(TAG, \"ChannelMgr->CreateListener failed with error %\" PRIu32 \"!\", error);",
          "578:   goto error_out;",
          "",
          "[Removed Lines]",
          "574:                                           (IWTSListenerCallback*)rdpei->listener_callback,",
          "575:                                           &(rdpei->listener))))",
          "",
          "[Added Lines]",
          "574:                                           &rdpei->listener_callback->iface, &(rdpei->listener))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:  if (!pPlugin)",
          "599:   return ERROR_INVALID_PARAMETER;",
          "601:  free(rdpei->listener_callback);",
          "602:  free(rdpei->context);",
          "603:  free(rdpei);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:  if (rdpei && rdpei->listener_callback)",
          "601:  {",
          "602:   IWTSVirtualChannelManager* mgr = rdpei->listener_callback->channel_mgr;",
          "603:   if (mgr)",
          "604:    IFCALL(mgr->DestroyListener, mgr, &rdpei->iface);",
          "605:  }",
          "",
          "---------------"
        ],
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1896:  gfx->listener_callback->plugin = pPlugin;",
          "1897:  gfx->listener_callback->channel_mgr = pChannelMgr;",
          "1898:  error = pChannelMgr->CreateListener(pChannelMgr, RDPGFX_DVC_CHANNEL_NAME, 0,",
          "1901:  gfx->listener->pInterface = gfx->iface.pInterface;",
          "1902:  DEBUG_RDPGFX(gfx->log, \"Initialize\");",
          "1903:  return error;",
          "",
          "[Removed Lines]",
          "1899:                                      (IWTSListenerCallback*)gfx->listener_callback,",
          "1900:                                      &(gfx->listener));",
          "",
          "[Added Lines]",
          "1899:                                      &gfx->listener_callback->iface, &(gfx->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1913:  RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)pPlugin;",
          "1914:  RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;",
          "1915:  DEBUG_RDPGFX(gfx->log, \"Terminated\");",
          "1916:  rdpgfx_client_context_free(context);",
          "1917:  return CHANNEL_RC_OK;",
          "1918: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:  if (gfx && gfx->listener_callback)",
          "1916:  {",
          "1917:   IWTSVirtualChannelManager* mgr = gfx->listener_callback->channel_mgr;",
          "1918:   if (mgr)",
          "1919:    IFCALL(mgr->DestroyListener, mgr, &gfx->iface);",
          "1920:  }",
          "",
          "---------------"
        ],
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1541:  rdpsnd->listener_callback->plugin = pPlugin;",
          "1542:  rdpsnd->listener_callback->channel_mgr = pChannelMgr;",
          "1543:  status = pChannelMgr->CreateListener(pChannelMgr, RDPSND_DVC_CHANNEL_NAME, 0,",
          "1546:  rdpsnd->listener->pInterface = rdpsnd->iface.pInterface;",
          "1547:  return rdpsnd_virtual_channel_event_initialized(rdpsnd);",
          "1548: }",
          "",
          "[Removed Lines]",
          "1544:                                       (IWTSListenerCallback*)rdpsnd->listener_callback,",
          "1545:                                       &(rdpsnd->listener));",
          "",
          "[Added Lines]",
          "1544:                                       &rdpsnd->listener_callback->iface, &(rdpsnd->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1557:  rdpsndPlugin* rdpsnd = (rdpsndPlugin*)pPlugin;",
          "1558:  if (rdpsnd)",
          "1559:  {",
          "1560:   free(rdpsnd->listener_callback);",
          "1561:   free(rdpsnd->iface.pInterface);",
          "1562:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1559:   if (rdpsnd->listener_callback)",
          "1560:   {",
          "1561:    IWTSVirtualChannelManager* mgr = rdpsnd->listener_callback->channel_mgr;",
          "1562:    if (mgr)",
          "1563:     IFCALL(mgr->DestroyListener, mgr, &rdpsnd->iface);",
          "1564:   }",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  if (!urbdrc)",
          "711:   return ERROR_INVALID_DATA;",
          "713:  udevman = urbdrc->udevman;",
          "715:  if (udevman)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "712:  if (urbdrc->listener_callback)",
          "713:  {",
          "714:   IWTSVirtualChannelManager* mgr = urbdrc->listener_callback->channel_mgr;",
          "715:   if (mgr)",
          "716:    IFCALL(mgr->DestroyListener, mgr, &urbdrc->iface);",
          "717:  }",
          "",
          "---------------"
        ],
        "channels/video/client/video_main.c||channels/video/client/video_main.c": [
          "File: channels/video/client/video_main.c -> channels/video/client/video_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1048:  callback->channel_mgr = channelMgr;",
          "1050:  status = channelMgr->CreateListener(channelMgr, VIDEO_CONTROL_DVC_CHANNEL_NAME, 0,",
          "1053:  if (status != CHANNEL_RC_OK)",
          "1054:   return status;",
          "",
          "[Removed Lines]",
          "1051:                                      (IWTSListenerCallback*)callback, &(video->controlListener));",
          "",
          "[Added Lines]",
          "1051:                                      &callback->iface, &(video->controlListener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1067:  callback->channel_mgr = channelMgr;",
          "1069:  status = channelMgr->CreateListener(channelMgr, VIDEO_DATA_DVC_CHANNEL_NAME, 0,",
          "1072:  if (status == CHANNEL_RC_OK)",
          "1073:   video->dataListener->pInterface = video->wtsPlugin.pInterface;",
          "",
          "[Removed Lines]",
          "1070:                                      (IWTSListenerCallback*)callback, &(video->dataListener));",
          "",
          "[Added Lines]",
          "1070:                                      &callback->iface, &(video->dataListener));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1084: {",
          "1085:  VIDEO_PLUGIN* video = (VIDEO_PLUGIN*)pPlugin;",
          "1087:  if (video->context)",
          "1088:   VideoClientContextPriv_free(video->context->priv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:  if (video->control_callback)",
          "1088:  {",
          "1089:   IWTSVirtualChannelManager* mgr = video->control_callback->channel_mgr;",
          "1090:   if (mgr)",
          "1091:    IFCALL(mgr->DestroyListener, mgr, &video->control_callback->iface);",
          "1092:  }",
          "1093:  if (video->data_callback)",
          "1094:  {",
          "1095:   IWTSVirtualChannelManager* mgr = video->data_callback->channel_mgr;",
          "1096:   if (mgr)",
          "1097:    IFCALL(mgr->DestroyListener, mgr, &video->data_callback->iface);",
          "1098:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}