{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
      "candidate_info": {
        "commit_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Early detection out-of-bounds page numbers on the direct-overflow-read optimization gives consistent error messages regardless of whether or not the optimization is enabled.\n\nFossilOrigin-Name: b517a52fa36df0a0854a75858b5e81861771d2e9032a5a0ad79aa76ae64130a2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d41ca7d6efbdac70890a8d4159488fc7f59bf78a550b00597b4df990c4fcaef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4880:           memcpy(aSave, aWrite, 4);",
          "4881:           rc = sqlite3OsRead(fd, aWrite, a+4, (i64)pBt->pageSize*(nextPage-1));",
          "4882:           nextPage = get4byte(aWrite);",
          "4883:           memcpy(aWrite, aSave, 4);",
          "4884:         }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4882:           if( rc && nextPage>pBt->nPage ) rc = SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "818a3b548647d7a314771f455c93be5ff6440047",
      "candidate_info": {
        "commit_hash": "818a3b548647d7a314771f455c93be5ff6440047",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/818a3b548647d7a314771f455c93be5ff6440047",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Fix sqlite3ExprCompare() so that it ignores differences in the Expr.iTable field for IN operators, as otherwise it can lead to false negatives, which is usually harmless, but can cause problems for an assert() in the window function logic.\n\nFossilOrigin-Name: 6a204b192a6c6f21988cab217366f21b14c672b81ceadc43675761a6d8c4484f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 352878fe1cbcf7b6803624544bba5a95565d1638d4dd09e91764ddad17889301",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4957:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4958:       if( pA->op2!=pB->op2 ) return 2;",
          "4959:       if( pA->iTable!=pB->iTable",
          "4960:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4961:     }",
          "4962:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4960:        && pA->op!=TK_IN",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
      "candidate_info": {
        "commit_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c"
        ],
        "message": "Fix harmless compiler warning.\n\nFossilOrigin-Name: dddda685f3443d8a38901f758543fcde73d7b8cfe72b0ad5f419cd7459343bf5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c"
        ]
      }
    },
    {
      "candidate_hash": "c542fa85735fbea00c9620f72e551041855e4505",
      "candidate_info": {
        "commit_hash": "c542fa85735fbea00c9620f72e551041855e4505",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c542fa85735fbea00c9620f72e551041855e4505",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/with1.test"
        ],
        "message": "Add test cases for the fix in the previous commit.\n\nFossilOrigin-Name: c1057b2a60add08e5c80ef2a53932a690b096f2eb03c7de863844deaa8fc9d53",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d2fe370cafa9b11f6c3eb4e1c3be48d9d2610b9d2f9d9ebf9e50267f9079dfc0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117:   SELECT * FROM v3;",
          "1118: } {1 A C D E 1 A F G H 1 B C D E 1 B F G H 2 A C D E 2 A F G H 2 B C D E 2 B F G H 3 A C D E 3 A F G H 3 B C D E 3 B F G H 4 A C D E 4 A F G H 4 B C D E 4 B F G H 5 A C D E 5 A F G H 5 B C D E 5 B F G H}",
          "1120: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: #-------------------------------------------------------------------------",
          "1121: reset_db",
          "1122: do_execsql_test 24.1 {",
          "1123:   CREATE TABLE t1(a, b, c);",
          "1124:   CREATE VIEW v1 AS SELECT max(a), min(b) FROM t1 GROUP BY c;",
          "1125: }",
          "1126: do_test 24.1 {",
          "1127:   set program [db eval {EXPLAIN SELECT 1 FROM v1,v1,v1}]",
          "1128:   expr [lsearch $program OpenDup]>0",
          "1129: } {1}",
          "1130: do_execsql_test 24.2 {",
          "1131:   ATTACH \"\" AS aux;",
          "1132:   CREATE VIEW aux.v3 AS VALUES(1);",
          "1133:   CREATE VIEW main.v3 AS VALUES(3);",
          "1135:   CREATE VIEW aux.v2 AS SELECT * FROM v3;",
          "1136:   CREATE VIEW main.v2 AS SELECT * FROM v3;",
          "1138:   SELECT * FROM main.v2 AS a, aux.v2 AS b, aux.v2 AS c, main.v2 AS d;",
          "1139: } {",
          "1140:   3 1 1 3",
          "1141: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be812624006aa7ca3acef17161ed6ea8de24d004",
      "candidate_info": {
        "commit_hash": "be812624006aa7ca3acef17161ed6ea8de24d004",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be812624006aa7ca3acef17161ed6ea8de24d004",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Always store a REAL value in a column with REAL affinity if the integer equivalent would require 8 bytes of storage. Fix for [3c27b97e3].\n\nFossilOrigin-Name: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1eb2a628e4bfae51fea43e8f40fedfe23f2118024d9cce35828c3cbe92a9b392",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2884:     pRec = pData0;",
          "2885:     do{",
          "2886:       applyAffinity(pRec, zAffinity[0], encoding);",
          "2887:       REGISTER_TRACE((int)(pRec-aMem), pRec);",
          "2888:       zAffinity++;",
          "2889:       pRec++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:       if( zAffinity[0]==SQLITE_AFF_REAL && (pRec->flags & MEM_Int) ){",
          "2888:         pRec->flags |= MEM_IntReal;",
          "2889:         pRec->flags &= ~(MEM_Int);",
          "2890:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:          max(1,intreal(5),intreal(3),4);",
          "47: } {5.0 5.0}",
          "52: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #-------------------------------------------------------------------------",
          "50: do_execsql_test 2.1 {",
          "51:   CREATE TABLE t2(a REAL);",
          "52:   INSERT INTO t2 VALUES( 836627109860825358 );",
          "53:   SELECT substr(a,1,4) FROM t2 WHERE a = CAST(836627109860825358 AS REAL);",
          "54: } {8.36}",
          "56: do_execsql_test 2.2 {",
          "57:   CREATE INDEX i2 ON t2(a);",
          "58:   SELECT substr(a,1,4) FROM t2 WHERE a = CAST(836627109860825358 AS REAL);",
          "59: } {8.36}",
          "61: do_execsql_test 2.3 {",
          "62:   CREATE TABLE t0 (c0);",
          "63:   CREATE TABLE t1 (c1 REAL);",
          "64:   INSERT INTO t1(c1) VALUES (8366271098608253588);",
          "65:   INSERT INTO t0(c0) VALUES ('a');",
          "66: }",
          "67: set D [db one {SELECT c1 FROM t1}]",
          "69: do_execsql_test 2.4 {",
          "70:   SELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL));",
          "71: } $D",
          "73: do_execsql_test 2.5 {",
          "74:   SELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL));",
          "75: } [list a $D]",
          "77: do_execsql_test 2.6 {",
          "78:   SELECT * FROM t0, t1",
          "79:   WHERE (",
          "80:         t1.c1 >= CAST(8366271098608253588 AS REAL)",
          "81:     AND t1.c1 <= CAST(8366271098608253588 AS REAL)",
          "82:   );",
          "83: } [list a $D]",
          "",
          "---------------"
        ]
      }
    }
  ]
}