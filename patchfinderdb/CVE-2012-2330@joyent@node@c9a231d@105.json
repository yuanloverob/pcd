{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8eccc417a7deb8d831dd30aabe22fdfb3d1a6a03",
      "candidate_info": {
        "commit_hash": "8eccc417a7deb8d831dd30aabe22fdfb3d1a6a03",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8eccc417a7deb8d831dd30aabe22fdfb3d1a6a03",
        "files": [
          "benchmark/http_simple_bench.sh"
        ],
        "message": "bench: fetch port from env\n\nhttp_simple.js honors $PORT, http_simple_bench.sh should too.",
        "before_after_code_files": [
          "benchmark/http_simple_bench.sh||benchmark/http_simple_bench.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_simple_bench.sh||benchmark/http_simple_bench.sh": [
          "File: benchmark/http_simple_bench.sh -> benchmark/http_simple_bench.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "3: SERVER=127.0.0.1",
          "6: # You may want to configure your TCP settings to make many ports available",
          "7: # to node and ab. On macintosh use:",
          "",
          "[Removed Lines]",
          "4: PORT=8000",
          "",
          "[Added Lines]",
          "4: PORT=${PORT:=8000}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:   sleep 1",
          "20: fi",
          "25: date=`date \"+%Y%m%d%H%M%S\"`",
          "27: ab_hello_world() {",
          "",
          "[Removed Lines]",
          "22: info=`curl -s http://$SERVER:$PORT/info`",
          "23: eval $info",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a84adad07850dac58c444dd59ab386be5ca0e413",
      "candidate_info": {
        "commit_hash": "a84adad07850dac58c444dd59ab386be5ca0e413",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a84adad07850dac58c444dd59ab386be5ca0e413",
        "files": [
          "node.gyp"
        ],
        "message": "Default node_shared_v8 to false.\n\nFixes #2818.",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     # See http://codereview.chromium.org/8159015",
          "6:     'werror': '',",
          "7:     'node_use_dtrace': 'false',",
          "8:     'node_use_openssl%': 'true',",
          "9:     'node_use_system_openssl%': 'false',",
          "10:     'library_files': [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:     'node_shared_v8%': 'false',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a068ce849f683752dd4df9a41237f3ea863ec21",
      "candidate_info": {
        "commit_hash": "8a068ce849f683752dd4df9a41237f3ea863ec21",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a068ce849f683752dd4df9a41237f3ea863ec21",
        "files": [
          "test/simple/test-child-process-stdout-flush.js"
        ],
        "message": "s/exit/close/ in test-child-process-stdout-flush, fixes #3449",
        "before_after_code_files": [
          "test/simple/test-child-process-stdout-flush.js||test/simple/test-child-process-stdout-flush.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-stdout-flush.js||test/simple/test-child-process-stdout-flush.js": [
          "File: test/simple/test-child-process-stdout-flush.js -> test/simple/test-child-process-stdout-flush.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   console.log(count);",
          "47: });",
          "50:   assert.equal(n, count);",
          "51:   console.log('okay');",
          "52: });",
          "",
          "[Removed Lines]",
          "49: child.on('exit', function(data) {",
          "",
          "[Added Lines]",
          "49: child.on('close', function(data) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a6314dbe159c40aa4cd95786bf55f6dcd0580bb",
      "candidate_info": {
        "commit_hash": "3a6314dbe159c40aa4cd95786bf55f6dcd0580bb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3a6314dbe159c40aa4cd95786bf55f6dcd0580bb",
        "files": [
          "lib/net.js",
          "src/tty_wrap.cc",
          "test/simple/test-listen-fd-ebadf.js"
        ],
        "message": "net: fix net.Server.listen({fd:x}) error reporting\n\n* don't assert when fd isn't an open file descriptor\n\n* don't die with a ReferenceError when fd isn't a file descriptor\n  you can listen() on\n\nFixes #3699.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "test/simple/test-listen-fd-ebadf.js||test/simple/test-listen-fd-ebadf.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:       default:",
          "853:         debug('listen invalid fd=' + fd + ' type=' + type);",
          "854:         handle = null;",
          "855:         break;",
          "856:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     case UV_FILE:",
          "105:       return scope.Close(String::New(\"FILE\"));",
          "107:     default:",
          "108:       assert(0);",
          "109:       return v8::Undefined();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     case UV_UNKNOWN_HANDLE:",
          "108:       return scope.Close(String::New(\"UNKNOWN\"));",
          "",
          "---------------"
        ],
        "test/simple/test-listen-fd-ebadf.js||test/simple/test-listen-fd-ebadf.js": [
          "File: test/simple/test-listen-fd-ebadf.js -> test/simple/test-listen-fd-ebadf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var gotError = 0;",
          "28: process.on('exit', function() {",
          "29:   assert.equal(gotError, 2);",
          "30: });",
          "32: net.createServer(assert.fail).listen({fd:2}).on('error', onError);",
          "33: net.createServer(assert.fail).listen({fd:42}).on('error', onError);",
          "35: function onError(ex) {",
          "36:   assert.equal(ex.code, 'EINVAL');",
          "37:   gotError++;",
          "38: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78eb174ea2d26ee3bea89f707b78441a8c73c098",
      "candidate_info": {
        "commit_hash": "78eb174ea2d26ee3bea89f707b78441a8c73c098",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/78eb174ea2d26ee3bea89f707b78441a8c73c098",
        "files": [
          "lib/readline.js",
          "test/simple/test-readline-interface.js"
        ],
        "message": "readline: use StringDecoder for decoding \"normal\" data\n\nThe fix from #3059 was not handling multi-byte utf8 data properly.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js",
          "test/simple/test-readline-interface.js||test/simple/test-readline-interface.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     input.on('end', function() {",
          "94:       self.emit('end');",
          "95:     });",
          "97:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:   this.terminal ? this._ttyWrite(d, key) : this._normalWrite(d, key);",
          "265: };",
          "271: Interface.prototype._normalWrite = function(b) {",
          "272:   if (b === undefined) {",
          "273:     return;",
          "274:   }",
          "280:     lines.forEach(function(line) {",
          "281:       this._onLine(line + '\\n');",
          "282:     }, this);",
          "283:   }",
          "284: };",
          "",
          "[Removed Lines]",
          "269: Interface.prototype._line_buffer = '';",
          "275:   this._line_buffer += b.toString();",
          "276:   if (this._line_buffer.indexOf('\\n') !== -1) {",
          "277:     var lines = this._line_buffer.split('\\n');",
          "279:     this._line_buffer = lines.pop();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-readline-interface.js||test/simple/test-readline-interface.js": [
          "File: test/simple/test-readline-interface.js -> test/simple/test-readline-interface.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: });",
          "105: fi.emit('data', expectedLines.join(''));",
          "106: assert.equal(callCount, expectedLines.length - 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: var buf = Buffer('\u262e', 'utf8');",
          "110: fi = new FakeInput();",
          "111: rli = new readline.Interface(fi, {});",
          "112: callCount = 0;",
          "113: rli.on('line', function(line) {",
          "114:   callCount++;",
          "115:   assert.equal(line, buf.toString('utf8') + '\\n');",
          "116: });",
          "117: [].forEach.call(buf, function(i) {",
          "118:   fi.emit('data', Buffer([i]));",
          "119: });",
          "120: assert.equal(callCount, 0);",
          "121: fi.emit('data', '\\n');",
          "122: assert.equal(callCount, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}