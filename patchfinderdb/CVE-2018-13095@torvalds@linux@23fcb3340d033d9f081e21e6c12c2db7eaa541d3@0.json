{
  "cve_id": "CVE-2018-13095",
  "cve_desc": "An issue was discovered in fs/xfs/libxfs/xfs_inode_buf.c in the Linux kernel through 4.17.3. A denial of service (memory corruption and BUG) can occur for a corrupted xfs image upon encountering an inode that is in extent format, but has more extents than fit in the inode fork.",
  "repo": "torvalds/linux",
  "patch_hash": "23fcb3340d033d9f081e21e6c12c2db7eaa541d3",
  "patch_info": {
    "commit_hash": "23fcb3340d033d9f081e21e6c12c2db7eaa541d3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/23fcb3340d033d9f081e21e6c12c2db7eaa541d3",
    "files": [
      "fs/xfs/libxfs/xfs_format.h",
      "fs/xfs/libxfs/xfs_inode_buf.c"
    ],
    "message": "xfs: More robust inode extent count validation\n\nWhen the inode is in extent format, it can't have more extents that\nfit in the inode fork. We don't currenty check this, and so this\ncorruption goes unnoticed by the inode verifiers. This can lead to\ncrashes operating on invalid in-memory structures.\n\nAttempts to access such a inode will now error out in the verifier\nrather than allowing modification operations to proceed.\n\nReported-by: Wen Xu <wen.xu@gatech.edu>\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Darrick J. Wong <darrick.wong@oracle.com>\n[darrick: fix a typedef, add some braces and breaks to shut up compiler warnings]\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>",
    "before_after_code_files": [
      "fs/xfs/libxfs/xfs_format.h||fs/xfs/libxfs/xfs_format.h",
      "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
    ]
  },
  "patch_diff": {
    "fs/xfs/libxfs/xfs_format.h||fs/xfs/libxfs/xfs_format.h": [
      "File: fs/xfs/libxfs/xfs_format.h -> fs/xfs/libxfs/xfs_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "962:   XFS_DFORK_DSIZE(dip, mp) : \\",
      "963:   XFS_DFORK_ASIZE(dip, mp))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "965: #define XFS_DFORK_MAXEXT(dip, mp, w) \\",
      "966:  (XFS_DFORK_SIZE(dip, mp, w) / sizeof(struct xfs_bmbt_rec))",
      "",
      "---------------"
    ],
    "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c": [
      "File: fs/xfs/libxfs/xfs_inode_buf.c -> fs/xfs/libxfs/xfs_inode_buf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "374:  }",
      "375: }",
      "377: xfs_failaddr_t",
      "378: xfs_dinode_verify(",
      "379:  struct xfs_mount *mp,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377: static xfs_failaddr_t",
      "378: xfs_dinode_verify_fork(",
      "379:  struct xfs_dinode *dip,",
      "380:  struct xfs_mount *mp,",
      "381:  int   whichfork)",
      "382: {",
      "383:  uint32_t  di_nextents = XFS_DFORK_NEXTENTS(dip, whichfork);",
      "385:  switch (XFS_DFORK_FORMAT(dip, whichfork)) {",
      "386:  case XFS_DINODE_FMT_LOCAL:",
      "390:   if (whichfork == XFS_DATA_FORK) {",
      "391:    if (S_ISREG(be16_to_cpu(dip->di_mode)))",
      "392:     return __this_address;",
      "393:    if (be64_to_cpu(dip->di_size) >",
      "394:      XFS_DFORK_SIZE(dip, mp, whichfork))",
      "395:     return __this_address;",
      "396:   }",
      "397:   if (di_nextents)",
      "398:    return __this_address;",
      "399:   break;",
      "400:  case XFS_DINODE_FMT_EXTENTS:",
      "401:   if (di_nextents > XFS_DFORK_MAXEXT(dip, mp, whichfork))",
      "402:    return __this_address;",
      "403:   break;",
      "404:  case XFS_DINODE_FMT_BTREE:",
      "405:   if (whichfork == XFS_ATTR_FORK) {",
      "406:    if (di_nextents > MAXAEXTNUM)",
      "407:     return __this_address;",
      "408:   } else if (di_nextents > MAXEXTNUM) {",
      "409:    return __this_address;",
      "410:   }",
      "411:   break;",
      "412:  default:",
      "413:   return __this_address;",
      "414:  }",
      "415:  return NULL;",
      "416: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:  case S_IFREG:",
      "442:  case S_IFLNK:",
      "443:  case S_IFDIR:",
      "462:   break;",
      "463:  case 0:",
      "",
      "[Removed Lines]",
      "444:   switch (dip->di_format) {",
      "445:   case XFS_DINODE_FMT_LOCAL:",
      "449:    if (S_ISREG(mode))",
      "450:     return __this_address;",
      "451:    if (di_size > XFS_DFORK_DSIZE(dip, mp))",
      "452:     return __this_address;",
      "453:    if (dip->di_nextents)",
      "454:     return __this_address;",
      "456:   case XFS_DINODE_FMT_EXTENTS:",
      "457:   case XFS_DINODE_FMT_BTREE:",
      "458:    break;",
      "459:   default:",
      "460:    return __this_address;",
      "461:   }",
      "",
      "[Added Lines]",
      "485:   fa = xfs_dinode_verify_fork(dip, mp, XFS_DATA_FORK);",
      "486:   if (fa)",
      "487:    return fa;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468:  }",
      "470:  if (XFS_DFORK_Q(dip)) {",
      "482:  } else {",
      "",
      "[Removed Lines]",
      "471:   switch (dip->di_aformat) {",
      "472:   case XFS_DINODE_FMT_LOCAL:",
      "473:    if (dip->di_anextents)",
      "474:     return __this_address;",
      "476:   case XFS_DINODE_FMT_EXTENTS:",
      "477:   case XFS_DINODE_FMT_BTREE:",
      "478:    break;",
      "479:   default:",
      "480:    return __this_address;",
      "481:   }",
      "",
      "[Added Lines]",
      "497:   fa = xfs_dinode_verify_fork(dip, mp, XFS_ATTR_FORK);",
      "498:   if (fa)",
      "499:    return fa;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6a781a58befcbd467ce843af4eaca3906aa1f08",
      "candidate_info": {
        "commit_hash": "a6a781a58befcbd467ce843af4eaca3906aa1f08",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a6a781a58befcbd467ce843af4eaca3906aa1f08",
        "files": [
          "fs/xfs/libxfs/xfs_alloc.c",
          "fs/xfs/libxfs/xfs_alloc_btree.c",
          "fs/xfs/libxfs/xfs_attr_leaf.c",
          "fs/xfs/libxfs/xfs_attr_remote.c",
          "fs/xfs/libxfs/xfs_bmap_btree.c",
          "fs/xfs/libxfs/xfs_btree.c",
          "fs/xfs/libxfs/xfs_btree.h",
          "fs/xfs/libxfs/xfs_da_btree.c",
          "fs/xfs/libxfs/xfs_dir2_block.c",
          "fs/xfs/libxfs/xfs_dir2_data.c",
          "fs/xfs/libxfs/xfs_dir2_leaf.c",
          "fs/xfs/libxfs/xfs_dir2_node.c",
          "fs/xfs/libxfs/xfs_dir2_priv.h",
          "fs/xfs/libxfs/xfs_ialloc.c",
          "fs/xfs/libxfs/xfs_ialloc_btree.c",
          "fs/xfs/libxfs/xfs_inode_buf.c",
          "fs/xfs/libxfs/xfs_inode_buf.h",
          "fs/xfs/libxfs/xfs_refcount_btree.c",
          "fs/xfs/libxfs/xfs_rmap_btree.c",
          "fs/xfs/libxfs/xfs_symlink_remote.c",
          "fs/xfs/scrub/inode.c"
        ],
        "message": "xfs: have buffer verifier functions report failing address\n\nModify each function that checks the contents of a metadata buffer to\nreturn the instruction address of the failing test so that we can report\nmore precise failure errors to the log.\n\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Dave Chinner <dchinner@redhat.com>",
        "before_after_code_files": [
          "fs/xfs/libxfs/xfs_alloc.c||fs/xfs/libxfs/xfs_alloc.c",
          "fs/xfs/libxfs/xfs_alloc_btree.c||fs/xfs/libxfs/xfs_alloc_btree.c",
          "fs/xfs/libxfs/xfs_attr_leaf.c||fs/xfs/libxfs/xfs_attr_leaf.c",
          "fs/xfs/libxfs/xfs_attr_remote.c||fs/xfs/libxfs/xfs_attr_remote.c",
          "fs/xfs/libxfs/xfs_bmap_btree.c||fs/xfs/libxfs/xfs_bmap_btree.c",
          "fs/xfs/libxfs/xfs_btree.c||fs/xfs/libxfs/xfs_btree.c",
          "fs/xfs/libxfs/xfs_btree.h||fs/xfs/libxfs/xfs_btree.h",
          "fs/xfs/libxfs/xfs_da_btree.c||fs/xfs/libxfs/xfs_da_btree.c",
          "fs/xfs/libxfs/xfs_dir2_block.c||fs/xfs/libxfs/xfs_dir2_block.c",
          "fs/xfs/libxfs/xfs_dir2_data.c||fs/xfs/libxfs/xfs_dir2_data.c",
          "fs/xfs/libxfs/xfs_dir2_leaf.c||fs/xfs/libxfs/xfs_dir2_leaf.c",
          "fs/xfs/libxfs/xfs_dir2_node.c||fs/xfs/libxfs/xfs_dir2_node.c",
          "fs/xfs/libxfs/xfs_dir2_priv.h||fs/xfs/libxfs/xfs_dir2_priv.h",
          "fs/xfs/libxfs/xfs_ialloc.c||fs/xfs/libxfs/xfs_ialloc.c",
          "fs/xfs/libxfs/xfs_ialloc_btree.c||fs/xfs/libxfs/xfs_ialloc_btree.c",
          "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c",
          "fs/xfs/libxfs/xfs_inode_buf.h||fs/xfs/libxfs/xfs_inode_buf.h",
          "fs/xfs/libxfs/xfs_refcount_btree.c||fs/xfs/libxfs/xfs_refcount_btree.c",
          "fs/xfs/libxfs/xfs_rmap_btree.c||fs/xfs/libxfs/xfs_rmap_btree.c",
          "fs/xfs/libxfs/xfs_symlink_remote.c||fs/xfs/libxfs/xfs_symlink_remote.c",
          "fs/xfs/scrub/inode.c||fs/xfs/scrub/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ],
          "candidate": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/xfs/libxfs/xfs_alloc.c||fs/xfs/libxfs/xfs_alloc.c": [
          "File: fs/xfs/libxfs/xfs_alloc.c -> fs/xfs/libxfs/xfs_alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  return 0;",
          "521: }",
          "524: xfs_agfl_verify(",
          "525:  struct xfs_buf *bp)",
          "526: {",
          "",
          "[Removed Lines]",
          "523: static bool",
          "",
          "[Added Lines]",
          "523: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529:  int  i;",
          "531:  if (!uuid_equal(&agfl->agfl_uuid, &mp->m_sb.sb_meta_uuid))",
          "533:  if (be32_to_cpu(agfl->agfl_magicnum) != XFS_AGFL_MAGIC)",
          "",
          "[Removed Lines]",
          "532:   return false;",
          "534:   return false;",
          "",
          "[Added Lines]",
          "532:   return __this_address;",
          "534:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541:  if (bp->b_pag && be32_to_cpu(agfl->agfl_seqno) != bp->b_pag->pag_agno)",
          "544:  for (i = 0; i < XFS_AGFL_SIZE(mp); i++) {",
          "545:   if (be32_to_cpu(agfl->agfl_bno[i]) != NULLAGBLOCK &&",
          "546:       be32_to_cpu(agfl->agfl_bno[i]) >= mp->m_sb.sb_agblocks)",
          "548:  }",
          "552: }",
          "554: static void",
          "",
          "[Removed Lines]",
          "542:   return false;",
          "547:    return false;",
          "550:  return xfs_log_check_lsn(mp,",
          "551:      be64_to_cpu(XFS_BUF_TO_AGFL(bp)->agfl_lsn));",
          "",
          "[Added Lines]",
          "542:   return __this_address;",
          "547:    return __this_address;",
          "550:  if (!xfs_log_check_lsn(mp, be64_to_cpu(XFS_BUF_TO_AGFL(bp)->agfl_lsn)))",
          "551:   return __this_address;",
          "552:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "569:  if (!xfs_buf_verify_cksum(bp, XFS_AGFL_CRC_OFF))",
          "570:   xfs_verifier_error(bp, -EFSBADCRC);",
          "572:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "573: }",
          "",
          "[Removed Lines]",
          "571:  else if (!xfs_agfl_verify(bp))",
          "",
          "[Added Lines]",
          "572:  else if (xfs_agfl_verify(bp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "584:   return;",
          "587:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "588:   return;",
          "589:  }",
          "",
          "[Removed Lines]",
          "586:  if (!xfs_agfl_verify(bp)) {",
          "",
          "[Added Lines]",
          "587:  if (xfs_agfl_verify(bp)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2393:  return 0;",
          "2394: }",
          "2397: xfs_agf_verify(",
          "2398:  struct xfs_mount *mp,",
          "2399:  struct xfs_buf *bp)",
          "",
          "[Removed Lines]",
          "2396: static bool",
          "",
          "[Added Lines]",
          "2397: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2403:  if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "2404:   if (!uuid_equal(&agf->agf_uuid, &mp->m_sb.sb_meta_uuid))",
          "2406:   if (!xfs_log_check_lsn(mp,",
          "2407:     be64_to_cpu(XFS_BUF_TO_AGF(bp)->agf_lsn)))",
          "2409:  }",
          "2411:  if (!(agf->agf_magicnum == cpu_to_be32(XFS_AGF_MAGIC) &&",
          "",
          "[Removed Lines]",
          "2405:    return false;",
          "2408:    return false;",
          "",
          "[Added Lines]",
          "2406:    return __this_address;",
          "2409:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2414:        be32_to_cpu(agf->agf_flfirst) < XFS_AGFL_SIZE(mp) &&",
          "2415:        be32_to_cpu(agf->agf_fllast) < XFS_AGFL_SIZE(mp) &&",
          "2416:        be32_to_cpu(agf->agf_flcount) <= XFS_AGFL_SIZE(mp)))",
          "2419:  if (be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]) < 1 ||",
          "2420:      be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]) < 1 ||",
          "2421:      be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]) > XFS_BTREE_MAXLEVELS ||",
          "2422:      be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]) > XFS_BTREE_MAXLEVELS)",
          "2425:  if (xfs_sb_version_hasrmapbt(&mp->m_sb) &&",
          "2426:      (be32_to_cpu(agf->agf_levels[XFS_BTNUM_RMAP]) < 1 ||",
          "2427:       be32_to_cpu(agf->agf_levels[XFS_BTNUM_RMAP]) > XFS_BTREE_MAXLEVELS))",
          "",
          "[Removed Lines]",
          "2417:   return false;",
          "2423:   return false;",
          "2428:   return false;",
          "",
          "[Added Lines]",
          "2418:   return __this_address;",
          "2424:   return __this_address;",
          "2429:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2436:  if (bp->b_pag && be32_to_cpu(agf->agf_seqno) != bp->b_pag->pag_agno)",
          "2439:  if (xfs_sb_version_haslazysbcount(&mp->m_sb) &&",
          "2440:      be32_to_cpu(agf->agf_btreeblks) > be32_to_cpu(agf->agf_length))",
          "2443:  if (xfs_sb_version_hasreflink(&mp->m_sb) &&",
          "2444:      (be32_to_cpu(agf->agf_refcount_level) < 1 ||",
          "2445:       be32_to_cpu(agf->agf_refcount_level) > XFS_BTREE_MAXLEVELS))",
          "2450: }",
          "",
          "[Removed Lines]",
          "2437:   return false;",
          "2441:   return false;",
          "2446:   return false;",
          "2448:  return true;;",
          "",
          "[Added Lines]",
          "2438:   return __this_address;",
          "2442:   return __this_address;",
          "2447:   return __this_address;",
          "2449:  return NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2458:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "2459:      !xfs_buf_verify_cksum(bp, XFS_AGF_CRC_OFF))",
          "2460:   xfs_verifier_error(bp, -EFSBADCRC);",
          "2462:     XFS_ERRTAG_ALLOC_READ_AGF))",
          "2463:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "2464: }",
          "",
          "[Removed Lines]",
          "2461:  else if (XFS_TEST_ERROR(!xfs_agf_verify(mp, bp), mp,",
          "",
          "[Added Lines]",
          "2462:  else if (XFS_TEST_ERROR(xfs_agf_verify(mp, bp), mp,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2470:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "2471:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "2474:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "2475:   return;",
          "2476:  }",
          "",
          "[Removed Lines]",
          "2473:  if (!xfs_agf_verify(mp, bp)) {",
          "",
          "[Added Lines]",
          "2474:  if (xfs_agf_verify(mp, bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_alloc_btree.c||fs/xfs/libxfs/xfs_alloc_btree.c": [
          "File: fs/xfs/libxfs/xfs_alloc_btree.c -> fs/xfs/libxfs/xfs_alloc_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:   be32_to_cpu(k2->alloc.ar_startblock);",
          "308: }",
          "311: xfs_allocbt_verify(",
          "312:  struct xfs_buf  *bp)",
          "313: {",
          "314:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "315:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "316:  struct xfs_perag *pag = bp->b_pag;",
          "317:  unsigned int  level;",
          "",
          "[Removed Lines]",
          "310: static bool",
          "",
          "[Added Lines]",
          "310: static xfs_failaddr_t",
          "317:  xfs_failaddr_t  fa;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:  level = be16_to_cpu(block->bb_level);",
          "332:  switch (block->bb_magic) {",
          "333:  case cpu_to_be32(XFS_ABTB_CRC_MAGIC):",
          "337:  case cpu_to_be32(XFS_ABTB_MAGIC):",
          "338:   if (pag && pag->pagf_init) {",
          "339:    if (level >= pag->pagf_levels[XFS_BTNUM_BNOi])",
          "341:   } else if (level >= mp->m_ag_maxlevels)",
          "343:   break;",
          "344:  case cpu_to_be32(XFS_ABTC_CRC_MAGIC):",
          "348:  case cpu_to_be32(XFS_ABTC_MAGIC):",
          "349:   if (pag && pag->pagf_init) {",
          "350:    if (level >= pag->pagf_levels[XFS_BTNUM_CNTi])",
          "352:   } else if (level >= mp->m_ag_maxlevels)",
          "354:   break;",
          "355:  default:",
          "357:  }",
          "359:  return xfs_btree_sblock_verify(bp, mp->m_alloc_mxr[level != 0]);",
          "",
          "[Removed Lines]",
          "334:   if (!xfs_btree_sblock_v5hdr_verify(bp))",
          "335:    return false;",
          "340:     return false;",
          "342:    return false;",
          "345:   if (!xfs_btree_sblock_v5hdr_verify(bp))",
          "346:    return false;",
          "351:     return false;",
          "353:    return false;",
          "356:   return false;",
          "",
          "[Added Lines]",
          "335:   fa = xfs_btree_sblock_v5hdr_verify(bp);",
          "336:   if (fa)",
          "337:    return fa;",
          "342:     return __this_address;",
          "344:    return __this_address;",
          "347:   fa = xfs_btree_sblock_v5hdr_verify(bp);",
          "348:   if (fa)",
          "349:    return fa;",
          "354:     return __this_address;",
          "356:    return __this_address;",
          "359:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365: {",
          "366:  if (!xfs_btree_sblock_verify_crc(bp))",
          "367:   xfs_verifier_error(bp, -EFSBADCRC);",
          "369:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "371:  if (bp->b_error)",
          "",
          "[Removed Lines]",
          "368:  else if (!xfs_allocbt_verify(bp))",
          "",
          "[Added Lines]",
          "371:  else if (xfs_allocbt_verify(bp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "376: xfs_allocbt_write_verify(",
          "377:  struct xfs_buf *bp)",
          "378: {",
          "380:   trace_xfs_btree_corrupt(bp, _RET_IP_);",
          "381:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "382:   return;",
          "",
          "[Removed Lines]",
          "379:  if (!xfs_allocbt_verify(bp)) {",
          "",
          "[Added Lines]",
          "382:  if (xfs_allocbt_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_attr_leaf.c||fs/xfs/libxfs/xfs_attr_leaf.c": [
          "File: fs/xfs/libxfs/xfs_attr_leaf.c -> fs/xfs/libxfs/xfs_attr_leaf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:  }",
          "248: }",
          "251: xfs_attr3_leaf_verify(",
          "252:  struct xfs_buf  *bp)",
          "253: {",
          "",
          "[Removed Lines]",
          "250: static bool",
          "",
          "[Added Lines]",
          "250: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:   struct xfs_da3_node_hdr *hdr3 = bp->b_addr;",
          "264:   if (ichdr.magic != XFS_ATTR3_LEAF_MAGIC)",
          "267:   if (!uuid_equal(&hdr3->info.uuid, &mp->m_sb.sb_meta_uuid))",
          "269:   if (be64_to_cpu(hdr3->info.blkno) != bp->b_bn)",
          "271:   if (!xfs_log_check_lsn(mp, be64_to_cpu(hdr3->info.lsn)))",
          "273:  } else {",
          "274:   if (ichdr.magic != XFS_ATTR_LEAF_MAGIC)",
          "276:  }",
          "",
          "[Removed Lines]",
          "265:    return false;",
          "268:    return false;",
          "270:    return false;",
          "272:    return false;",
          "275:    return false;",
          "",
          "[Added Lines]",
          "265:    return __this_address;",
          "268:    return __this_address;",
          "270:    return __this_address;",
          "272:    return __this_address;",
          "275:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:  if (pag && pag->pagf_init && ichdr.count == 0)",
          "289: }",
          "291: static void",
          "",
          "[Removed Lines]",
          "283:   return false;",
          "288:  return true;",
          "",
          "[Added Lines]",
          "283:   return __this_address;",
          "288:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "297:  struct xfs_attr3_leaf_hdr *hdr3 = bp->b_addr;",
          "300:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "301:   return;",
          "302:  }",
          "",
          "[Removed Lines]",
          "299:  if (!xfs_attr3_leaf_verify(bp)) {",
          "",
          "[Added Lines]",
          "299:  if (xfs_attr3_leaf_verify(bp)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "326:       !xfs_buf_verify_cksum(bp, XFS_ATTR3_LEAF_CRC_OFF))",
          "327:   xfs_verifier_error(bp, -EFSBADCRC);",
          "329:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "330: }",
          "",
          "[Removed Lines]",
          "328:  else if (!xfs_attr3_leaf_verify(bp))",
          "",
          "[Added Lines]",
          "328:  else if (xfs_attr3_leaf_verify(bp))",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_attr_remote.c||fs/xfs/libxfs/xfs_attr_remote.c": [
          "File: fs/xfs/libxfs/xfs_attr_remote.c -> fs/xfs/libxfs/xfs_attr_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: xfs_attr3_rmt_hdr_ok(",
          "70:  void   *ptr,",
          "71:  xfs_ino_t  ino,",
          "",
          "[Removed Lines]",
          "68: static bool",
          "",
          "[Added Lines]",
          "68: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:  struct xfs_attr3_rmt_hdr *rmt = ptr;",
          "78:  if (bno != be64_to_cpu(rmt->rm_blkno))",
          "80:  if (offset != be32_to_cpu(rmt->rm_offset))",
          "82:  if (size != be32_to_cpu(rmt->rm_bytes))",
          "84:  if (ino != be64_to_cpu(rmt->rm_owner))",
          "89: }",
          "92: xfs_attr3_rmt_verify(",
          "93:  struct xfs_mount *mp,",
          "94:  void   *ptr,",
          "",
          "[Removed Lines]",
          "79:   return false;",
          "81:   return false;",
          "83:   return false;",
          "85:   return false;",
          "88:  return true;",
          "91: static bool",
          "",
          "[Added Lines]",
          "79:   return __this_address;",
          "81:   return __this_address;",
          "83:   return __this_address;",
          "85:   return __this_address;",
          "88:  return NULL;",
          "91: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:  struct xfs_attr3_rmt_hdr *rmt = ptr;",
          "100:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "102:  if (rmt->rm_magic != cpu_to_be32(XFS_ATTR3_RMT_MAGIC))",
          "104:  if (!uuid_equal(&rmt->rm_uuid, &mp->m_sb.sb_meta_uuid))",
          "106:  if (be64_to_cpu(rmt->rm_blkno) != bno)",
          "108:  if (be32_to_cpu(rmt->rm_bytes) > fsbsize - sizeof(*rmt))",
          "110:  if (be32_to_cpu(rmt->rm_offset) +",
          "111:     be32_to_cpu(rmt->rm_bytes) > XFS_XATTR_SIZE_MAX)",
          "113:  if (rmt->rm_owner == 0)",
          "117: }",
          "119: static void",
          "",
          "[Removed Lines]",
          "101:   return false;",
          "103:   return false;",
          "105:   return false;",
          "107:   return false;",
          "109:   return false;",
          "112:   return false;",
          "114:   return false;",
          "116:  return true;",
          "",
          "[Added Lines]",
          "101:   return __this_address;",
          "103:   return __this_address;",
          "105:   return __this_address;",
          "107:   return __this_address;",
          "109:   return __this_address;",
          "112:   return __this_address;",
          "114:   return __this_address;",
          "116:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:    xfs_verifier_error(bp, -EFSBADCRC);",
          "141:    return;",
          "142:   }",
          "144:    xfs_verifier_error(bp, -EFSCORRUPTED);",
          "145:    return;",
          "146:   }",
          "",
          "[Removed Lines]",
          "143:   if (!xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {",
          "",
          "[Added Lines]",
          "143:   if (xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:  while (len > 0) {",
          "176:   struct xfs_attr3_rmt_hdr *rmt = (struct xfs_attr3_rmt_hdr *)ptr;",
          "179:    xfs_verifier_error(bp, -EFSCORRUPTED);",
          "180:    return;",
          "181:   }",
          "",
          "[Removed Lines]",
          "178:   if (!xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {",
          "",
          "[Added Lines]",
          "178:   if (xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267:   byte_cnt = min(*valuelen, byte_cnt);",
          "269:   if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "271:         byte_cnt, bno)) {",
          "272:     xfs_alert(mp,",
          "273: \"remote attribute header mismatch bno/off/len/owner (0x%llx/0x%x/Ox%x/0x%llx)\",",
          "",
          "[Removed Lines]",
          "270:    if (!xfs_attr3_rmt_hdr_ok(src, ino, *offset,",
          "",
          "[Added Lines]",
          "270:    if (xfs_attr3_rmt_hdr_ok(src, ino, *offset,",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_bmap_btree.c||fs/xfs/libxfs/xfs_bmap_btree.c": [
          "File: fs/xfs/libxfs/xfs_bmap_btree.c -> fs/xfs/libxfs/xfs_bmap_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:      be64_to_cpu(k2->bmbt.br_startoff);",
          "426: }",
          "429: xfs_bmbt_verify(",
          "430:  struct xfs_buf  *bp)",
          "431: {",
          "432:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "433:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "434:  unsigned int  level;",
          "436:  switch (block->bb_magic) {",
          "",
          "[Removed Lines]",
          "428: static bool",
          "",
          "[Added Lines]",
          "428: static xfs_failaddr_t",
          "434:  xfs_failaddr_t  fa;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:  case cpu_to_be32(XFS_BMAP_MAGIC):",
          "446:   break;",
          "447:  default:",
          "449:  }",
          "",
          "[Removed Lines]",
          "442:   if (!xfs_btree_lblock_v5hdr_verify(bp, XFS_RMAP_OWN_UNKNOWN))",
          "443:    return false;",
          "448:   return false;",
          "",
          "[Added Lines]",
          "443:   fa = xfs_btree_lblock_v5hdr_verify(bp, XFS_RMAP_OWN_UNKNOWN);",
          "444:   if (fa)",
          "445:    return fa;",
          "450:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:  level = be16_to_cpu(block->bb_level);",
          "459:  if (level > max(mp->m_bm_maxlevels[0], mp->m_bm_maxlevels[1]))",
          "462:  return xfs_btree_lblock_verify(bp, mp->m_bmap_dmxr[level != 0]);",
          "463: }",
          "",
          "[Removed Lines]",
          "460:   return false;",
          "",
          "[Added Lines]",
          "462:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468: {",
          "469:  if (!xfs_btree_lblock_verify_crc(bp))",
          "470:   xfs_verifier_error(bp, -EFSBADCRC);",
          "472:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "474:  if (bp->b_error)",
          "",
          "[Removed Lines]",
          "471:  else if (!xfs_bmbt_verify(bp))",
          "",
          "[Added Lines]",
          "473:  else if (xfs_bmbt_verify(bp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "479: xfs_bmbt_write_verify(",
          "480:  struct xfs_buf *bp)",
          "481: {",
          "483:   trace_xfs_btree_corrupt(bp, _RET_IP_);",
          "484:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "485:   return;",
          "",
          "[Removed Lines]",
          "482:  if (!xfs_bmbt_verify(bp)) {",
          "",
          "[Added Lines]",
          "484:  if (xfs_bmbt_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_btree.c||fs/xfs/libxfs/xfs_btree.c": [
          "File: fs/xfs/libxfs/xfs_btree.c -> fs/xfs/libxfs/xfs_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:  if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "331:   if (!xfs_log_check_lsn(mp, be64_to_cpu(block->bb_u.s.bb_lsn)))",
          "333:   return xfs_buf_verify_cksum(bp, XFS_BTREE_SBLOCK_CRC_OFF);",
          "334:  }",
          "",
          "[Removed Lines]",
          "332:    return false;",
          "",
          "[Added Lines]",
          "332:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4530: }",
          "4534: xfs_btree_lblock_v5hdr_verify(",
          "4535:  struct xfs_buf  *bp,",
          "4536:  uint64_t  owner)",
          "",
          "[Removed Lines]",
          "4533: bool",
          "",
          "[Added Lines]",
          "4533: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4539:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "4541:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "4543:  if (!uuid_equal(&block->bb_u.l.bb_uuid, &mp->m_sb.sb_meta_uuid))",
          "4545:  if (block->bb_u.l.bb_blkno != cpu_to_be64(bp->b_bn))",
          "4547:  if (owner != XFS_RMAP_OWN_UNKNOWN &&",
          "4548:      be64_to_cpu(block->bb_u.l.bb_owner) != owner)",
          "4551: }",
          "4555: xfs_btree_lblock_verify(",
          "4556:  struct xfs_buf  *bp,",
          "4557:  unsigned int  max_recs)",
          "",
          "[Removed Lines]",
          "4542:   return false;",
          "4544:   return false;",
          "4546:   return false;",
          "4549:   return false;",
          "4550:  return true;",
          "4554: bool",
          "",
          "[Added Lines]",
          "4542:   return __this_address;",
          "4544:   return __this_address;",
          "4546:   return __this_address;",
          "4549:   return __this_address;",
          "4550:  return NULL;",
          "4554: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4563:  if (be16_to_cpu(block->bb_numrecs) > max_recs)",
          "4567:  if (block->bb_u.l.bb_leftsib != cpu_to_be64(NULLFSBLOCK) &&",
          "4568:      !xfs_verify_fsbno(mp, be64_to_cpu(block->bb_u.l.bb_leftsib)))",
          "4570:  if (block->bb_u.l.bb_rightsib != cpu_to_be64(NULLFSBLOCK) &&",
          "4571:      !xfs_verify_fsbno(mp, be64_to_cpu(block->bb_u.l.bb_rightsib)))",
          "4575: }",
          "",
          "[Removed Lines]",
          "4564:   return false;",
          "4569:   return false;",
          "4572:   return false;",
          "4574:  return true;",
          "",
          "[Added Lines]",
          "4564:   return __this_address;",
          "4569:   return __this_address;",
          "4572:   return __this_address;",
          "4574:  return NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4586: xfs_btree_sblock_v5hdr_verify(",
          "4587:  struct xfs_buf  *bp)",
          "4588: {",
          "",
          "[Removed Lines]",
          "4585: bool",
          "",
          "[Added Lines]",
          "4585: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4591:  struct xfs_perag *pag = bp->b_pag;",
          "4593:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "4595:  if (!uuid_equal(&block->bb_u.s.bb_uuid, &mp->m_sb.sb_meta_uuid))",
          "4597:  if (block->bb_u.s.bb_blkno != cpu_to_be64(bp->b_bn))",
          "4599:  if (pag && be32_to_cpu(block->bb_u.s.bb_owner) != pag->pag_agno)",
          "4602: }",
          "",
          "[Removed Lines]",
          "4594:   return false;",
          "4596:   return false;",
          "4598:   return false;",
          "4600:   return false;",
          "4601:  return true;",
          "",
          "[Added Lines]",
          "4594:   return __this_address;",
          "4596:   return __this_address;",
          "4598:   return __this_address;",
          "4600:   return __this_address;",
          "4601:  return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4611: xfs_btree_sblock_verify(",
          "4612:  struct xfs_buf  *bp,",
          "4613:  unsigned int  max_recs)",
          "",
          "[Removed Lines]",
          "4610: bool",
          "",
          "[Added Lines]",
          "4610: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4620:  if (be16_to_cpu(block->bb_numrecs) > max_recs)",
          "4624:  agno = xfs_daddr_to_agno(mp, XFS_BUF_ADDR(bp));",
          "4625:  if (block->bb_u.s.bb_leftsib != cpu_to_be32(NULLAGBLOCK) &&",
          "4626:      !xfs_verify_agbno(mp, agno, be32_to_cpu(block->bb_u.s.bb_leftsib)))",
          "4628:  if (block->bb_u.s.bb_rightsib != cpu_to_be32(NULLAGBLOCK) &&",
          "4629:      !xfs_verify_agbno(mp, agno, be32_to_cpu(block->bb_u.s.bb_rightsib)))",
          "4633: }",
          "",
          "[Removed Lines]",
          "4621:   return false;",
          "4627:   return false;",
          "4630:   return false;",
          "4632:  return true;",
          "",
          "[Added Lines]",
          "4621:   return __this_address;",
          "4627:   return __this_address;",
          "4630:   return __this_address;",
          "4632:  return NULL;",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_btree.h||fs/xfs/libxfs/xfs_btree.h": [
          "File: fs/xfs/libxfs/xfs_btree.h -> fs/xfs/libxfs/xfs_btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "492: #define XFS_BTREE_TRACE_ARGR(c, r)",
          "493: #define XFS_BTREE_TRACE_CURSOR(c, t)",
          "500: uint xfs_btree_compute_maxlevels(struct xfs_mount *mp, uint *limits,",
          "501:      unsigned long len);",
          "",
          "[Removed Lines]",
          "495: bool xfs_btree_sblock_v5hdr_verify(struct xfs_buf *bp);",
          "496: bool xfs_btree_sblock_verify(struct xfs_buf *bp, unsigned int max_recs);",
          "497: bool xfs_btree_lblock_v5hdr_verify(struct xfs_buf *bp, uint64_t owner);",
          "498: bool xfs_btree_lblock_verify(struct xfs_buf *bp, unsigned int max_recs);",
          "",
          "[Added Lines]",
          "495: xfs_failaddr_t xfs_btree_sblock_v5hdr_verify(struct xfs_buf *bp);",
          "496: xfs_failaddr_t xfs_btree_sblock_verify(struct xfs_buf *bp,",
          "497:   unsigned int max_recs);",
          "498: xfs_failaddr_t xfs_btree_lblock_v5hdr_verify(struct xfs_buf *bp,",
          "499:   uint64_t owner);",
          "500: xfs_failaddr_t xfs_btree_lblock_verify(struct xfs_buf *bp,",
          "501:   unsigned int max_recs);",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_da_btree.c||fs/xfs/libxfs/xfs_da_btree.c": [
          "File: fs/xfs/libxfs/xfs_da_btree.c -> fs/xfs/libxfs/xfs_da_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  kmem_zone_free(xfs_da_state_zone, state);",
          "129: }",
          "132: xfs_da3_node_verify(",
          "133:  struct xfs_buf  *bp)",
          "134: {",
          "",
          "[Removed Lines]",
          "131: static bool",
          "",
          "[Added Lines]",
          "131: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   struct xfs_da3_node_hdr *hdr3 = bp->b_addr;",
          "147:   if (ichdr.magic != XFS_DA3_NODE_MAGIC)",
          "150:   if (!uuid_equal(&hdr3->info.uuid, &mp->m_sb.sb_meta_uuid))",
          "152:   if (be64_to_cpu(hdr3->info.blkno) != bp->b_bn)",
          "154:   if (!xfs_log_check_lsn(mp, be64_to_cpu(hdr3->info.lsn)))",
          "156:  } else {",
          "157:   if (ichdr.magic != XFS_DA_NODE_MAGIC)",
          "159:  }",
          "160:  if (ichdr.level == 0)",
          "162:  if (ichdr.level > XFS_DA_NODE_MAXDEPTH)",
          "164:  if (ichdr.count == 0)",
          "",
          "[Removed Lines]",
          "148:    return false;",
          "151:    return false;",
          "153:    return false;",
          "155:    return false;",
          "158:    return false;",
          "161:   return false;",
          "163:   return false;",
          "165:   return false;",
          "",
          "[Added Lines]",
          "148:    return __this_address;",
          "151:    return __this_address;",
          "153:    return __this_address;",
          "155:    return __this_address;",
          "158:    return __this_address;",
          "161:   return __this_address;",
          "163:   return __this_address;",
          "165:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:  if (ichdr.count > mp->m_dir_geo->node_ents &&",
          "172:      ichdr.count > mp->m_attr_geo->node_ents)",
          "178: }",
          "180: static void",
          "",
          "[Removed Lines]",
          "173:   return false;",
          "177:  return true;",
          "",
          "[Added Lines]",
          "173:   return __this_address;",
          "177:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "186:  struct xfs_da3_node_hdr *hdr3 = bp->b_addr;",
          "189:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "190:   return;",
          "191:  }",
          "",
          "[Removed Lines]",
          "188:  if (!xfs_da3_node_verify(bp)) {",
          "",
          "[Added Lines]",
          "188:  if (xfs_da3_node_verify(bp)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:    }",
          "221:   case XFS_DA_NODE_MAGIC:",
          "223:     xfs_verifier_error(bp, -EFSCORRUPTED);",
          "224:    return;",
          "225:   case XFS_ATTR_LEAF_MAGIC:",
          "",
          "[Removed Lines]",
          "222:    if (!xfs_da3_node_verify(bp))",
          "",
          "[Added Lines]",
          "222:    if (xfs_da3_node_verify(bp))",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_dir2_block.c||fs/xfs/libxfs/xfs_dir2_block.c": [
          "File: fs/xfs/libxfs/xfs_dir2_block.c -> fs/xfs/libxfs/xfs_dir2_block.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  xfs_dir_hash_dotdot = xfs_da_hashname((unsigned char *)\"..\", 2);",
          "59: }",
          "62: xfs_dir3_block_verify(",
          "63:  struct xfs_buf  *bp)",
          "64: {",
          "",
          "[Removed Lines]",
          "61: static bool",
          "",
          "[Added Lines]",
          "61: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:  if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "69:   if (hdr3->magic != cpu_to_be32(XFS_DIR3_BLOCK_MAGIC))",
          "71:   if (!uuid_equal(&hdr3->uuid, &mp->m_sb.sb_meta_uuid))",
          "73:   if (be64_to_cpu(hdr3->blkno) != bp->b_bn)",
          "75:   if (!xfs_log_check_lsn(mp, be64_to_cpu(hdr3->lsn)))",
          "77:  } else {",
          "78:   if (hdr3->magic != cpu_to_be32(XFS_DIR2_BLOCK_MAGIC))",
          "80:  }",
          "81:  return __xfs_dir3_data_check(NULL, bp);",
          "82: }",
          "",
          "[Removed Lines]",
          "70:    return false;",
          "72:    return false;",
          "74:    return false;",
          "76:    return false;",
          "79:    return false;",
          "",
          "[Added Lines]",
          "70:    return __this_address;",
          "72:    return __this_address;",
          "74:    return __this_address;",
          "76:    return __this_address;",
          "79:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "91:       !xfs_buf_verify_cksum(bp, XFS_DIR3_DATA_CRC_OFF))",
          "92:   xfs_verifier_error(bp, -EFSBADCRC);",
          "94:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "95: }",
          "",
          "[Removed Lines]",
          "93:  else if (!xfs_dir3_block_verify(bp))",
          "",
          "[Added Lines]",
          "93:  else if (xfs_dir3_block_verify(bp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "103:  struct xfs_dir3_blk_hdr *hdr3 = bp->b_addr;",
          "106:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "107:   return;",
          "108:  }",
          "",
          "[Removed Lines]",
          "105:  if (!xfs_dir3_block_verify(bp)) {",
          "",
          "[Added Lines]",
          "105:  if (xfs_dir3_block_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_dir2_data.c||fs/xfs/libxfs/xfs_dir2_data.c": [
          "File: fs/xfs/libxfs/xfs_dir2_data.c -> fs/xfs/libxfs/xfs_dir2_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: __xfs_dir3_data_check(",
          "",
          "[Removed Lines]",
          "41: bool",
          "",
          "[Added Lines]",
          "41: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:   if (be32_to_cpu(btp->count) >=",
          "94:       ((char *)btp - p) / sizeof(struct xfs_dir2_leaf_entry))",
          "96:   break;",
          "97:  case cpu_to_be32(XFS_DIR3_DATA_MAGIC):",
          "98:  case cpu_to_be32(XFS_DIR2_DATA_MAGIC):",
          "99:   endp = (char *)hdr + geo->blksize;",
          "100:   break;",
          "101:  default:",
          "103:  }",
          "",
          "[Removed Lines]",
          "95:    return false;",
          "102:   return false;",
          "",
          "[Added Lines]",
          "95:    return __this_address;",
          "102:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:  count = lastfree = freeseen = 0;",
          "110:  if (!bf[0].length) {",
          "111:   if (bf[0].offset)",
          "113:   freeseen |= 1 << 0;",
          "114:  }",
          "115:  if (!bf[1].length) {",
          "116:   if (bf[1].offset)",
          "118:   freeseen |= 1 << 1;",
          "119:  }",
          "120:  if (!bf[2].length) {",
          "121:   if (bf[2].offset)",
          "123:   freeseen |= 1 << 2;",
          "124:  }",
          "126:  if (be16_to_cpu(bf[0].length) < be16_to_cpu(bf[1].length))",
          "128:  if (be16_to_cpu(bf[1].length) < be16_to_cpu(bf[2].length))",
          "",
          "[Removed Lines]",
          "112:    return false;",
          "117:    return false;",
          "122:    return false;",
          "127:   return false;",
          "129:   return false;",
          "",
          "[Added Lines]",
          "112:    return __this_address;",
          "117:    return __this_address;",
          "122:    return __this_address;",
          "127:   return __this_address;",
          "129:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:   if (be16_to_cpu(dup->freetag) == XFS_DIR2_DATA_FREE_TAG) {",
          "141:    if (lastfree != 0)",
          "143:    if (endp < p + be16_to_cpu(dup->length))",
          "145:    if (be16_to_cpu(*xfs_dir2_data_unused_tag_p(dup)) !=",
          "146:        (char *)dup - (char *)hdr)",
          "148:    dfp = xfs_dir2_data_freefind(hdr, bf, dup);",
          "149:    if (dfp) {",
          "150:     i = (int)(dfp - bf);",
          "151:     if ((freeseen & (1 << i)) != 0)",
          "153:     freeseen |= 1 << i;",
          "154:    } else {",
          "155:     if (be16_to_cpu(dup->length) >",
          "156:         be16_to_cpu(bf[2].length))",
          "158:    }",
          "159:    p += be16_to_cpu(dup->length);",
          "160:    lastfree = 1;",
          "",
          "[Removed Lines]",
          "142:     return false;",
          "144:     return false;",
          "147:     return false;",
          "152:      return false;",
          "157:      return false;",
          "",
          "[Added Lines]",
          "142:     return __this_address;",
          "144:     return __this_address;",
          "147:     return __this_address;",
          "152:      return __this_address;",
          "157:      return __this_address;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:   dep = (xfs_dir2_data_entry_t *)p;",
          "170:   if (dep->namelen == 0)",
          "172:   if (xfs_dir_ino_validate(mp, be64_to_cpu(dep->inumber)))",
          "174:   if (endp < p + ops->data_entsize(dep->namelen))",
          "176:   if (be16_to_cpu(*ops->data_entry_tag_p(dep)) !=",
          "177:       (char *)dep - (char *)hdr)",
          "179:   if (ops->data_get_ftype(dep) >= XFS_DIR3_FT_MAX)",
          "181:   count++;",
          "182:   lastfree = 0;",
          "183:   if (hdr->magic == cpu_to_be32(XFS_DIR2_BLOCK_MAGIC) ||",
          "",
          "[Removed Lines]",
          "171:    return false;",
          "173:    return false;",
          "175:    return false;",
          "178:    return false;",
          "180:    return false;",
          "",
          "[Added Lines]",
          "171:    return __this_address;",
          "173:    return __this_address;",
          "175:    return __this_address;",
          "178:    return __this_address;",
          "180:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:      break;",
          "195:    }",
          "196:    if (i >= be32_to_cpu(btp->count))",
          "198:   }",
          "199:   p += ops->data_entsize(dep->namelen);",
          "200:  }",
          "",
          "[Removed Lines]",
          "197:     return false;",
          "",
          "[Added Lines]",
          "197:     return __this_address;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:  if (freeseen != 7)",
          "206:  if (hdr->magic == cpu_to_be32(XFS_DIR2_BLOCK_MAGIC) ||",
          "207:      hdr->magic == cpu_to_be32(XFS_DIR3_BLOCK_MAGIC)) {",
          "208:   for (i = stale = 0; i < be32_to_cpu(btp->count); i++) {",
          "",
          "[Removed Lines]",
          "205:   return false;",
          "",
          "[Added Lines]",
          "205:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:     stale++;",
          "212:    if (i > 0 && be32_to_cpu(lep[i].hashval) <",
          "213:          be32_to_cpu(lep[i - 1].hashval))",
          "215:   }",
          "216:   if (count != be32_to_cpu(btp->count) - be32_to_cpu(btp->stale))",
          "218:   if (stale != be32_to_cpu(btp->stale))",
          "220:  }",
          "222: }",
          "225: xfs_dir3_data_verify(",
          "226:  struct xfs_buf  *bp)",
          "227: {",
          "",
          "[Removed Lines]",
          "214:     return false;",
          "217:    return false;",
          "219:    return false;",
          "221:  return true;",
          "224: static bool",
          "",
          "[Added Lines]",
          "214:     return __this_address;",
          "217:    return __this_address;",
          "219:    return __this_address;",
          "221:  return NULL;",
          "224: #ifdef DEBUG",
          "225: void",
          "226: xfs_dir3_data_check(",
          "227:  struct xfs_inode *dp,",
          "228:  struct xfs_buf  *bp)",
          "229: {",
          "230:  xfs_failaddr_t  fa;",
          "232:  fa = __xfs_dir3_data_check(dp, bp);",
          "233:  if (!fa)",
          "234:   return;",
          "235:  xfs_corruption_error(__func__, XFS_ERRLEVEL_LOW, dp->i_mount,",
          "236:    bp->b_addr, __FILE__, __LINE__, fa);",
          "237:  ASSERT(0);",
          "238: }",
          "239: #endif",
          "241: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "231:  if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "232:   if (hdr3->magic != cpu_to_be32(XFS_DIR3_DATA_MAGIC))",
          "234:   if (!uuid_equal(&hdr3->uuid, &mp->m_sb.sb_meta_uuid))",
          "236:   if (be64_to_cpu(hdr3->blkno) != bp->b_bn)",
          "238:   if (!xfs_log_check_lsn(mp, be64_to_cpu(hdr3->lsn)))",
          "240:  } else {",
          "241:   if (hdr3->magic != cpu_to_be32(XFS_DIR2_DATA_MAGIC))",
          "243:  }",
          "244:  return __xfs_dir3_data_check(NULL, bp);",
          "245: }",
          "",
          "[Removed Lines]",
          "233:    return false;",
          "235:    return false;",
          "237:    return false;",
          "239:    return false;",
          "242:    return false;",
          "",
          "[Added Lines]",
          "250:    return __this_address;",
          "252:    return __this_address;",
          "254:    return __this_address;",
          "256:    return __this_address;",
          "259:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "281:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "282:      !xfs_buf_verify_cksum(bp, XFS_DIR3_DATA_CRC_OFF))",
          "283:   xfs_verifier_error(bp, -EFSBADCRC);",
          "285:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "286: }",
          "",
          "[Removed Lines]",
          "284:  else if (!xfs_dir3_data_verify(bp))",
          "",
          "[Added Lines]",
          "301:  else if (xfs_dir3_data_verify(bp))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "293:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "294:  struct xfs_dir3_blk_hdr *hdr3 = bp->b_addr;",
          "297:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "298:   return;",
          "299:  }",
          "",
          "[Removed Lines]",
          "296:  if (!xfs_dir3_data_verify(bp)) {",
          "",
          "[Added Lines]",
          "313:  if (xfs_dir3_data_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_dir2_leaf.c||fs/xfs/libxfs/xfs_dir2_leaf.c": [
          "File: fs/xfs/libxfs/xfs_dir2_leaf.c -> fs/xfs/libxfs/xfs_dir2_leaf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #ifdef DEBUG",
          "60: xfs_dir3_leaf1_check(",
          "61:  struct xfs_inode *dp,",
          "62:  struct xfs_buf  *bp)",
          "",
          "[Removed Lines]",
          "53: #define xfs_dir3_leaf_check(dp, bp) \\",
          "54: do { \\",
          "55:  if (!xfs_dir3_leaf1_check((dp), (bp))) \\",
          "56:   ASSERT(0); \\",
          "57: } while (0);",
          "59: STATIC bool",
          "",
          "[Added Lines]",
          "53: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  if (leafhdr.magic == XFS_DIR3_LEAF1_MAGIC) {",
          "70:   struct xfs_dir3_leaf_hdr *leaf3 = bp->b_addr;",
          "71:   if (be64_to_cpu(leaf3->info.blkno) != bp->b_bn)",
          "73:  } else if (leafhdr.magic != XFS_DIR2_LEAF1_MAGIC)",
          "76:  return xfs_dir3_leaf_check_int(dp->i_mount, dp, &leafhdr, leaf);",
          "77: }",
          "78: #else",
          "79: #define xfs_dir3_leaf_check(dp, bp)",
          "80: #endif",
          "83: xfs_dir3_leaf_check_int(",
          "84:  struct xfs_mount *mp,",
          "85:  struct xfs_inode *dp,",
          "",
          "[Removed Lines]",
          "72:    return false;",
          "74:   return false;",
          "82: bool",
          "",
          "[Added Lines]",
          "66:    return __this_address;",
          "68:   return __this_address;",
          "73: static inline void",
          "74: xfs_dir3_leaf_check(",
          "75:  struct xfs_inode *dp,",
          "76:  struct xfs_buf  *bp)",
          "77: {",
          "78:  xfs_failaddr_t  fa;",
          "80:  fa = xfs_dir3_leaf1_check(dp, bp);",
          "81:  if (!fa)",
          "82:   return;",
          "83:  xfs_corruption_error(__func__, XFS_ERRLEVEL_LOW, dp->i_mount,",
          "84:    bp->b_addr, __FILE__, __LINE__, fa);",
          "85:  ASSERT(0);",
          "86: }",
          "91: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  if (hdr->count > ops->leaf_max_ents(geo))",
          "120:  if ((hdr->magic == XFS_DIR2_LEAF1_MAGIC ||",
          "121:       hdr->magic == XFS_DIR3_LEAF1_MAGIC) &&",
          "122:      (char *)&ents[hdr->count] > (char *)xfs_dir2_leaf_bests_p(ltp))",
          "126:  for (i = stale = 0; i < hdr->count; i++) {",
          "127:   if (i + 1 < hdr->count) {",
          "128:    if (be32_to_cpu(ents[i].hashval) >",
          "129:      be32_to_cpu(ents[i + 1].hashval))",
          "131:   }",
          "132:   if (ents[i].address == cpu_to_be32(XFS_DIR2_NULL_DATAPTR))",
          "133:    stale++;",
          "134:  }",
          "135:  if (hdr->stale != stale)",
          "138: }",
          "",
          "[Removed Lines]",
          "117:   return false;",
          "123:   return false;",
          "130:     return false;",
          "136:   return false;",
          "137:  return true;",
          "",
          "[Added Lines]",
          "126:   return __this_address;",
          "132:   return __this_address;",
          "139:     return __this_address;",
          "145:   return __this_address;",
          "146:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: xfs_dir3_leaf_verify(",
          "147:  struct xfs_buf  *bp,",
          "148:  uint16_t  magic)",
          "",
          "[Removed Lines]",
          "145: static bool",
          "",
          "[Added Lines]",
          "154: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:         : XFS_DIR3_LEAFN_MAGIC;",
          "162:   if (leaf3->info.hdr.magic != cpu_to_be16(magic3))",
          "164:   if (!uuid_equal(&leaf3->info.uuid, &mp->m_sb.sb_meta_uuid))",
          "166:   if (be64_to_cpu(leaf3->info.blkno) != bp->b_bn)",
          "168:   if (!xfs_log_check_lsn(mp, be64_to_cpu(leaf3->info.lsn)))",
          "170:  } else {",
          "171:   if (leaf->hdr.info.magic != cpu_to_be16(magic))",
          "173:  }",
          "175:  return xfs_dir3_leaf_check_int(mp, NULL, NULL, leaf);",
          "",
          "[Removed Lines]",
          "163:    return false;",
          "165:    return false;",
          "167:    return false;",
          "169:    return false;",
          "172:    return false;",
          "",
          "[Added Lines]",
          "172:    return __this_address;",
          "174:    return __this_address;",
          "176:    return __this_address;",
          "178:    return __this_address;",
          "181:    return __this_address;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "186:       !xfs_buf_verify_cksum(bp, XFS_DIR3_LEAF_CRC_OFF))",
          "187:   xfs_verifier_error(bp, -EFSBADCRC);",
          "189:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "190: }",
          "",
          "[Removed Lines]",
          "188:  else if (!xfs_dir3_leaf_verify(bp, magic))",
          "",
          "[Added Lines]",
          "197:  else if (xfs_dir3_leaf_verify(bp, magic))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "198:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "199:  struct xfs_dir3_leaf_hdr *hdr3 = bp->b_addr;",
          "202:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "203:   return;",
          "204:  }",
          "",
          "[Removed Lines]",
          "201:  if (!xfs_dir3_leaf_verify(bp, magic)) {",
          "",
          "[Added Lines]",
          "210:  if (xfs_dir3_leaf_verify(bp, magic)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_dir2_node.c||fs/xfs/libxfs/xfs_dir2_node.c": [
          "File: fs/xfs/libxfs/xfs_dir2_node.c -> fs/xfs/libxfs/xfs_dir2_node.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #ifdef DEBUG",
          "63: xfs_dir3_leafn_check(",
          "64:  struct xfs_inode *dp,",
          "65:  struct xfs_buf  *bp)",
          "",
          "[Removed Lines]",
          "56: #define xfs_dir3_leaf_check(dp, bp) \\",
          "57: do { \\",
          "58:  if (!xfs_dir3_leafn_check((dp), (bp))) \\",
          "59:   ASSERT(0); \\",
          "60: } while (0);",
          "62: static bool",
          "",
          "[Added Lines]",
          "56: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  if (leafhdr.magic == XFS_DIR3_LEAFN_MAGIC) {",
          "73:   struct xfs_dir3_leaf_hdr *leaf3 = bp->b_addr;",
          "74:   if (be64_to_cpu(leaf3->info.blkno) != bp->b_bn)",
          "76:  } else if (leafhdr.magic != XFS_DIR2_LEAFN_MAGIC)",
          "79:  return xfs_dir3_leaf_check_int(dp->i_mount, dp, &leafhdr, leaf);",
          "80: }",
          "81: #else",
          "82: #define xfs_dir3_leaf_check(dp, bp)",
          "83: #endif",
          "86: xfs_dir3_free_verify(",
          "87:  struct xfs_buf  *bp)",
          "88: {",
          "",
          "[Removed Lines]",
          "75:    return false;",
          "77:   return false;",
          "85: static bool",
          "",
          "[Added Lines]",
          "69:    return __this_address;",
          "71:   return __this_address;",
          "76: static inline void",
          "77: xfs_dir3_leaf_check(",
          "78:  struct xfs_inode *dp,",
          "79:  struct xfs_buf  *bp)",
          "80: {",
          "81:  xfs_failaddr_t  fa;",
          "83:  fa = xfs_dir3_leafn_check(dp, bp);",
          "84:  if (!fa)",
          "85:   return;",
          "86:  xfs_corruption_error(__func__, XFS_ERRLEVEL_LOW, dp->i_mount,",
          "87:    bp->b_addr, __FILE__, __LINE__, fa);",
          "88:  ASSERT(0);",
          "89: }",
          "94: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:   struct xfs_dir3_blk_hdr *hdr3 = bp->b_addr;",
          "95:   if (hdr3->magic != cpu_to_be32(XFS_DIR3_FREE_MAGIC))",
          "97:   if (!uuid_equal(&hdr3->uuid, &mp->m_sb.sb_meta_uuid))",
          "99:   if (be64_to_cpu(hdr3->blkno) != bp->b_bn)",
          "101:   if (!xfs_log_check_lsn(mp, be64_to_cpu(hdr3->lsn)))",
          "103:  } else {",
          "104:   if (hdr->magic != cpu_to_be32(XFS_DIR2_FREE_MAGIC))",
          "106:  }",
          "111: }",
          "113: static void",
          "",
          "[Removed Lines]",
          "96:    return false;",
          "98:    return false;",
          "100:    return false;",
          "102:    return false;",
          "105:    return false;",
          "110:  return true;",
          "",
          "[Added Lines]",
          "105:    return __this_address;",
          "107:    return __this_address;",
          "109:    return __this_address;",
          "111:    return __this_address;",
          "114:    return __this_address;",
          "119:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "120:      !xfs_buf_verify_cksum(bp, XFS_DIR3_FREE_CRC_OFF))",
          "121:   xfs_verifier_error(bp, -EFSBADCRC);",
          "123:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "124: }",
          "",
          "[Removed Lines]",
          "122:  else if (!xfs_dir3_free_verify(bp))",
          "",
          "[Added Lines]",
          "131:  else if (xfs_dir3_free_verify(bp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "132:  struct xfs_dir3_blk_hdr *hdr3 = bp->b_addr;",
          "135:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "136:   return;",
          "137:  }",
          "",
          "[Removed Lines]",
          "134:  if (!xfs_dir3_free_verify(bp)) {",
          "",
          "[Added Lines]",
          "143:  if (xfs_dir3_free_verify(bp)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:   struct xfs_dir3_free_hdr *hdr3 = bp->b_addr;",
          "172:   if (be32_to_cpu(hdr3->firstdb) != firstdb)",
          "174:   if (be32_to_cpu(hdr3->nvalid) > maxbests)",
          "176:   if (be32_to_cpu(hdr3->nvalid) < be32_to_cpu(hdr3->nused))",
          "178:  } else {",
          "179:   struct xfs_dir2_free_hdr *hdr = bp->b_addr;",
          "181:   if (be32_to_cpu(hdr->firstdb) != firstdb)",
          "183:   if (be32_to_cpu(hdr->nvalid) > maxbests)",
          "185:   if (be32_to_cpu(hdr->nvalid) < be32_to_cpu(hdr->nused))",
          "187:  }",
          "189: }",
          "191: static int",
          "",
          "[Removed Lines]",
          "173:    return false;",
          "175:    return false;",
          "177:    return false;",
          "182:    return false;",
          "184:    return false;",
          "186:    return false;",
          "188:  return true;",
          "",
          "[Added Lines]",
          "182:    return __this_address;",
          "184:    return __this_address;",
          "186:    return __this_address;",
          "191:    return __this_address;",
          "193:    return __this_address;",
          "195:    return __this_address;",
          "197:  return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:   return err;",
          "208:   xfs_verifier_error(*bpp, -EFSCORRUPTED);",
          "209:   xfs_trans_brelse(tp, *bpp);",
          "210:   return -EFSCORRUPTED;",
          "",
          "[Removed Lines]",
          "207:  if (!xfs_dir3_free_header_check(dp, fbno, *bpp)) {",
          "",
          "[Added Lines]",
          "216:  if (xfs_dir3_free_header_check(dp, fbno, *bpp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_dir2_priv.h||fs/xfs/libxfs/xfs_dir2_priv.h": [
          "File: fs/xfs/libxfs/xfs_dir2_priv.h -> fs/xfs/libxfs/xfs_dir2_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #ifdef DEBUG",
          "49: #else",
          "50: #define xfs_dir3_data_check(dp,bp)",
          "51: #endif",
          "54: extern int xfs_dir3_data_read(struct xfs_trans *tp, struct xfs_inode *dp,",
          "55:   xfs_dablk_t bno, xfs_daddr_t mapped_bno, struct xfs_buf **bpp);",
          "56: extern int xfs_dir3_data_readahead(struct xfs_inode *dp, xfs_dablk_t bno,",
          "",
          "[Removed Lines]",
          "42: #define xfs_dir3_data_check(dp, bp) \\",
          "43: do { \\",
          "44:  if (!__xfs_dir3_data_check((dp), (bp))) { \\",
          "45:   XFS_CORRUPTION_ERROR(__func__, XFS_ERRLEVEL_LOW, \\",
          "46:     (bp)->b_target->bt_mount, (bp)->b_addr); \\",
          "47:  } \\",
          "48: } while (0)",
          "53: extern bool __xfs_dir3_data_check(struct xfs_inode *dp, struct xfs_buf *bp);",
          "",
          "[Added Lines]",
          "42: extern void xfs_dir3_data_check(struct xfs_inode *dp, struct xfs_buf *bp);",
          "47: extern xfs_failaddr_t __xfs_dir3_data_check(struct xfs_inode *dp,",
          "48:   struct xfs_buf *bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   int lowstale, int highstale, int *lfloglow, int *lfloghigh);",
          "96: extern int xfs_dir2_node_to_leaf(struct xfs_da_state *state);",
          "102: extern int xfs_dir2_leaf_to_node(struct xfs_da_args *args,",
          "",
          "[Removed Lines]",
          "98: extern bool xfs_dir3_leaf_check_int(struct xfs_mount *mp, struct xfs_inode *dp,",
          "99:   struct xfs_dir3_icleaf_hdr *hdr, struct xfs_dir2_leaf *leaf);",
          "",
          "[Added Lines]",
          "93: extern xfs_failaddr_t xfs_dir3_leaf_check_int(struct xfs_mount *mp,",
          "94:   struct xfs_inode *dp, struct xfs_dir3_icleaf_hdr *hdr,",
          "95:   struct xfs_dir2_leaf *leaf);",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_ialloc.c||fs/xfs/libxfs/xfs_ialloc.c": [
          "File: fs/xfs/libxfs/xfs_ialloc.c -> fs/xfs/libxfs/xfs_ialloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2491: #define xfs_check_agi_unlinked(agi)",
          "2492: #endif",
          "2495: xfs_agi_verify(",
          "2496:  struct xfs_buf *bp)",
          "2497: {",
          "",
          "[Removed Lines]",
          "2494: static bool",
          "",
          "[Added Lines]",
          "2494: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2501:  if (xfs_sb_version_hascrc(&mp->m_sb)) {",
          "2502:   if (!uuid_equal(&agi->agi_uuid, &mp->m_sb.sb_meta_uuid))",
          "2504:   if (!xfs_log_check_lsn(mp,",
          "2505:     be64_to_cpu(XFS_BUF_TO_AGI(bp)->agi_lsn)))",
          "2507:  }",
          "2512:  if (agi->agi_magicnum != cpu_to_be32(XFS_AGI_MAGIC))",
          "2514:  if (!XFS_AGI_GOOD_VERSION(be32_to_cpu(agi->agi_versionnum)))",
          "2517:  if (be32_to_cpu(agi->agi_level) < 1 ||",
          "2518:      be32_to_cpu(agi->agi_level) > XFS_BTREE_MAXLEVELS)",
          "2521:  if (xfs_sb_version_hasfinobt(&mp->m_sb) &&",
          "2522:      (be32_to_cpu(agi->agi_free_level) < 1 ||",
          "2523:       be32_to_cpu(agi->agi_free_level) > XFS_BTREE_MAXLEVELS))",
          "",
          "[Removed Lines]",
          "2503:    return false;",
          "2506:    return false;",
          "2513:   return false;",
          "2515:   return false;",
          "2519:   return false;",
          "2524:   return false;",
          "",
          "[Added Lines]",
          "2503:    return __this_address;",
          "2506:    return __this_address;",
          "2513:   return __this_address;",
          "2515:   return __this_address;",
          "2519:   return __this_address;",
          "2524:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2532:  if (bp->b_pag && be32_to_cpu(agi->agi_seqno) != bp->b_pag->pag_agno)",
          "2535:  xfs_check_agi_unlinked(agi);",
          "2537: }",
          "2539: static void",
          "",
          "[Removed Lines]",
          "2533:   return false;",
          "2536:  return true;",
          "",
          "[Added Lines]",
          "2533:   return __this_address;",
          "2536:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2545:  if (xfs_sb_version_hascrc(&mp->m_sb) &&",
          "2546:      !xfs_buf_verify_cksum(bp, XFS_AGI_CRC_OFF))",
          "2547:   xfs_verifier_error(bp, -EFSBADCRC);",
          "2549:     XFS_ERRTAG_IALLOC_READ_AGI))",
          "2550:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "2551: }",
          "",
          "[Removed Lines]",
          "2548:  else if (XFS_TEST_ERROR(!xfs_agi_verify(bp), mp,",
          "",
          "[Added Lines]",
          "2548:  else if (XFS_TEST_ERROR(xfs_agi_verify(bp), mp,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2557:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "2558:  struct xfs_buf_log_item *bip = bp->b_fspriv;",
          "2561:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "2562:   return;",
          "2563:  }",
          "",
          "[Removed Lines]",
          "2560:  if (!xfs_agi_verify(bp)) {",
          "",
          "[Added Lines]",
          "2560:  if (xfs_agi_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_ialloc_btree.c||fs/xfs/libxfs/xfs_ialloc_btree.c": [
          "File: fs/xfs/libxfs/xfs_ialloc_btree.c -> fs/xfs/libxfs/xfs_ialloc_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:      be32_to_cpu(k2->inobt.ir_startino);",
          "251: }",
          "254: xfs_inobt_verify(",
          "255:  struct xfs_buf  *bp)",
          "256: {",
          "257:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "258:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "259:  unsigned int  level;",
          "",
          "[Removed Lines]",
          "253: static int",
          "",
          "[Added Lines]",
          "253: static xfs_failaddr_t",
          "259:  xfs_failaddr_t  fa;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  switch (block->bb_magic) {",
          "272:  case cpu_to_be32(XFS_IBT_CRC_MAGIC):",
          "273:  case cpu_to_be32(XFS_FIBT_CRC_MAGIC):",
          "277:  case cpu_to_be32(XFS_IBT_MAGIC):",
          "278:  case cpu_to_be32(XFS_FIBT_MAGIC):",
          "279:   break;",
          "280:  default:",
          "282:  }",
          "285:  level = be16_to_cpu(block->bb_level);",
          "286:  if (level >= mp->m_in_maxlevels)",
          "289:  return xfs_btree_sblock_verify(bp, mp->m_inobt_mxr[level != 0]);",
          "290: }",
          "",
          "[Removed Lines]",
          "274:   if (!xfs_btree_sblock_v5hdr_verify(bp))",
          "275:    return false;",
          "281:   return 0;",
          "287:   return false;",
          "",
          "[Added Lines]",
          "275:   fa = xfs_btree_sblock_v5hdr_verify(bp);",
          "276:   if (fa)",
          "277:    return fa;",
          "283:   return NULL;",
          "289:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295: {",
          "296:  if (!xfs_btree_sblock_verify_crc(bp))",
          "297:   xfs_verifier_error(bp, -EFSBADCRC);",
          "299:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "301:  if (bp->b_error)",
          "",
          "[Removed Lines]",
          "298:  else if (!xfs_inobt_verify(bp))",
          "",
          "[Added Lines]",
          "300:  else if (xfs_inobt_verify(bp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306: xfs_inobt_write_verify(",
          "307:  struct xfs_buf *bp)",
          "308: {",
          "310:   trace_xfs_btree_corrupt(bp, _RET_IP_);",
          "311:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "312:   return;",
          "",
          "[Removed Lines]",
          "309:  if (!xfs_inobt_verify(bp)) {",
          "",
          "[Added Lines]",
          "311:  if (xfs_inobt_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c": [
          "File: fs/xfs/libxfs/xfs_inode_buf.c -> fs/xfs/libxfs/xfs_inode_buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:  }",
          "381: }",
          "384: xfs_dinode_verify(",
          "385:  struct xfs_mount *mp,",
          "386:  xfs_ino_t  ino,",
          "",
          "[Removed Lines]",
          "383: bool",
          "",
          "[Added Lines]",
          "383: xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:  uint64_t  flags2;",
          "393:  if (dip->di_magic != cpu_to_be16(XFS_DINODE_MAGIC))",
          "397:  if (be64_to_cpu(dip->di_size) & (1ULL << 63))",
          "400:  mode = be16_to_cpu(dip->di_mode);",
          "401:  if (mode && xfs_mode_to_ftype(mode) == XFS_DIR3_FT_UNKNOWN)",
          "405:  if ((S_ISLNK(mode) || S_ISDIR(mode)) && dip->di_size == 0)",
          "409:  if (dip->di_version < 3)",
          "412:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "414:  if (!xfs_verify_cksum((char *)dip, mp->m_sb.sb_inodesize,",
          "415:          XFS_DINODE_CRC_OFF))",
          "417:  if (be64_to_cpu(dip->di_ino) != ino)",
          "419:  if (!uuid_equal(&dip->di_uuid, &mp->m_sb.sb_meta_uuid))",
          "422:  flags = be16_to_cpu(dip->di_flags);",
          "423:  flags2 = be64_to_cpu(dip->di_flags2);",
          "",
          "[Removed Lines]",
          "394:   return false;",
          "398:   return false;",
          "402:   return false;",
          "406:   return false;",
          "410:   return true;",
          "413:   return false;",
          "416:   return false;",
          "418:   return false;",
          "420:   return false;",
          "",
          "[Added Lines]",
          "394:   return __this_address;",
          "398:   return __this_address;",
          "402:   return __this_address;",
          "406:   return __this_address;",
          "410:   return NULL;",
          "413:   return __this_address;",
          "416:   return __this_address;",
          "418:   return __this_address;",
          "420:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:  if ((flags2 & (XFS_DIFLAG2_REFLINK | XFS_DIFLAG2_COWEXTSIZE)) &&",
          "427:             !xfs_sb_version_hasreflink(&mp->m_sb))",
          "431:  if ((flags2 & XFS_DIFLAG2_REFLINK) && (flags & XFS_DIFLAG_REALTIME))",
          "435:  if ((flags2 & XFS_DIFLAG2_REFLINK) && (flags2 & XFS_DIFLAG2_DAX))",
          "439: }",
          "441: void",
          "",
          "[Removed Lines]",
          "428:   return false;",
          "432:   return false;",
          "436:   return false;",
          "438:  return true;",
          "",
          "[Added Lines]",
          "428:   return __this_address;",
          "432:   return __this_address;",
          "436:   return __this_address;",
          "438:  return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475: {",
          "476:  xfs_buf_t *bp;",
          "477:  xfs_dinode_t *dip;",
          "478:  int  error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  xfs_failaddr_t fa;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:   return error;",
          "513:   XFS_CORRUPTION_ERROR(__func__, XFS_ERRLEVEL_LOW, mp, dip);",
          "514:   error = -EFSCORRUPTED;",
          "",
          "[Removed Lines]",
          "509:  if (!xfs_dinode_verify(mp, ip->i_ino, dip)) {",
          "510:   xfs_alert(mp, \"%s: validation failed for inode %lld\",",
          "511:     __func__, ip->i_ino);",
          "",
          "[Added Lines]",
          "510:  fa = xfs_dinode_verify(mp, ip->i_ino, dip);",
          "511:  if (fa) {",
          "512:   xfs_alert(mp, \"%s: validation failed for inode %lld at %pS\",",
          "513:     __func__, ip->i_ino, fa);",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_inode_buf.h||fs/xfs/libxfs/xfs_inode_buf.h": [
          "File: fs/xfs/libxfs/xfs_inode_buf.h -> fs/xfs/libxfs/xfs_inode_buf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define xfs_inobp_check(mp, bp)",
          "",
          "[Removed Lines]",
          "85: bool xfs_dinode_verify(struct xfs_mount *mp, xfs_ino_t ino,",
          "86:      struct xfs_dinode *dip);",
          "",
          "[Added Lines]",
          "85: xfs_failaddr_t xfs_dinode_verify(struct xfs_mount *mp, xfs_ino_t ino,",
          "86:       struct xfs_dinode *dip);",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_refcount_btree.c||fs/xfs/libxfs/xfs_refcount_btree.c": [
          "File: fs/xfs/libxfs/xfs_refcount_btree.c -> fs/xfs/libxfs/xfs_refcount_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:      be32_to_cpu(k2->refc.rc_startblock);",
          "224: }",
          "227: xfs_refcountbt_verify(",
          "228:  struct xfs_buf  *bp)",
          "229: {",
          "230:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "231:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "232:  struct xfs_perag *pag = bp->b_pag;",
          "233:  unsigned int  level;",
          "235:  if (block->bb_magic != cpu_to_be32(XFS_REFC_CRC_MAGIC))",
          "238:  if (!xfs_sb_version_hasreflink(&mp->m_sb))",
          "243:  level = be16_to_cpu(block->bb_level);",
          "244:  if (pag && pag->pagf_init) {",
          "245:   if (level >= pag->pagf_refcount_level)",
          "247:  } else if (level >= mp->m_refc_maxlevels)",
          "250:  return xfs_btree_sblock_verify(bp, mp->m_refc_mxr[level != 0]);",
          "251: }",
          "",
          "[Removed Lines]",
          "226: STATIC bool",
          "236:   return false;",
          "239:   return false;",
          "240:  if (!xfs_btree_sblock_v5hdr_verify(bp))",
          "241:   return false;",
          "246:    return false;",
          "248:   return false;",
          "",
          "[Added Lines]",
          "226: STATIC xfs_failaddr_t",
          "233:  xfs_failaddr_t  fa;",
          "237:   return __this_address;",
          "240:   return __this_address;",
          "241:  fa = xfs_btree_sblock_v5hdr_verify(bp);",
          "242:  if (fa)",
          "243:   return fa;",
          "248:    return __this_address;",
          "250:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256: {",
          "257:  if (!xfs_btree_sblock_verify_crc(bp))",
          "258:   xfs_verifier_error(bp, -EFSBADCRC);",
          "260:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "262:  if (bp->b_error)",
          "",
          "[Removed Lines]",
          "259:  else if (!xfs_refcountbt_verify(bp))",
          "",
          "[Added Lines]",
          "261:  else if (xfs_refcountbt_verify(bp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267: xfs_refcountbt_write_verify(",
          "268:  struct xfs_buf *bp)",
          "269: {",
          "271:   trace_xfs_btree_corrupt(bp, _RET_IP_);",
          "272:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "273:   return;",
          "",
          "[Removed Lines]",
          "270:  if (!xfs_refcountbt_verify(bp)) {",
          "",
          "[Added Lines]",
          "272:  if (xfs_refcountbt_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_rmap_btree.c||fs/xfs/libxfs/xfs_rmap_btree.c": [
          "File: fs/xfs/libxfs/xfs_rmap_btree.c -> fs/xfs/libxfs/xfs_rmap_btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:  return 0;",
          "304: }",
          "307: xfs_rmapbt_verify(",
          "308:  struct xfs_buf  *bp)",
          "309: {",
          "310:  struct xfs_mount *mp = bp->b_target->bt_mount;",
          "311:  struct xfs_btree_block *block = XFS_BUF_TO_BLOCK(bp);",
          "312:  struct xfs_perag *pag = bp->b_pag;",
          "313:  unsigned int  level;",
          "",
          "[Removed Lines]",
          "306: static bool",
          "",
          "[Added Lines]",
          "306: static xfs_failaddr_t",
          "313:  xfs_failaddr_t  fa;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:  if (block->bb_magic != cpu_to_be32(XFS_RMAP_CRC_MAGIC))",
          "330:  if (!xfs_sb_version_hasrmapbt(&mp->m_sb))",
          "335:  level = be16_to_cpu(block->bb_level);",
          "336:  if (pag && pag->pagf_init) {",
          "337:   if (level >= pag->pagf_levels[XFS_BTNUM_RMAPi])",
          "339:  } else if (level >= mp->m_rmap_maxlevels)",
          "342:  return xfs_btree_sblock_verify(bp, mp->m_rmap_mxr[level != 0]);",
          "343: }",
          "",
          "[Removed Lines]",
          "328:   return false;",
          "331:   return false;",
          "332:  if (!xfs_btree_sblock_v5hdr_verify(bp))",
          "333:   return false;",
          "338:    return false;",
          "340:   return false;",
          "",
          "[Added Lines]",
          "329:   return __this_address;",
          "332:   return __this_address;",
          "333:  fa = xfs_btree_sblock_v5hdr_verify(bp);",
          "334:  if (fa)",
          "335:   return fa;",
          "340:    return __this_address;",
          "342:   return __this_address;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348: {",
          "349:  if (!xfs_btree_sblock_verify_crc(bp))",
          "350:   xfs_verifier_error(bp, -EFSBADCRC);",
          "352:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "354:  if (bp->b_error)",
          "",
          "[Removed Lines]",
          "351:  else if (!xfs_rmapbt_verify(bp))",
          "",
          "[Added Lines]",
          "353:  else if (xfs_rmapbt_verify(bp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359: xfs_rmapbt_write_verify(",
          "360:  struct xfs_buf *bp)",
          "361: {",
          "363:   trace_xfs_btree_corrupt(bp, _RET_IP_);",
          "364:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "365:   return;",
          "",
          "[Removed Lines]",
          "362:  if (!xfs_rmapbt_verify(bp)) {",
          "",
          "[Added Lines]",
          "364:  if (xfs_rmapbt_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_symlink_remote.c||fs/xfs/libxfs/xfs_symlink_remote.c": [
          "File: fs/xfs/libxfs/xfs_symlink_remote.c -> fs/xfs/libxfs/xfs_symlink_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  return true;",
          "99: }",
          "102: xfs_symlink_verify(",
          "103:  struct xfs_buf  *bp)",
          "104: {",
          "",
          "[Removed Lines]",
          "101: static bool",
          "",
          "[Added Lines]",
          "101: static xfs_failaddr_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:  struct xfs_dsymlink_hdr *dsl = bp->b_addr;",
          "108:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "110:  if (dsl->sl_magic != cpu_to_be32(XFS_SYMLINK_MAGIC))",
          "112:  if (!uuid_equal(&dsl->sl_uuid, &mp->m_sb.sb_meta_uuid))",
          "114:  if (bp->b_bn != be64_to_cpu(dsl->sl_blkno))",
          "116:  if (be32_to_cpu(dsl->sl_offset) +",
          "117:     be32_to_cpu(dsl->sl_bytes) >= XFS_SYMLINK_MAXLEN)",
          "119:  if (dsl->sl_owner == 0)",
          "121:  if (!xfs_log_check_lsn(mp, be64_to_cpu(dsl->sl_lsn)))",
          "125: }",
          "127: static void",
          "",
          "[Removed Lines]",
          "109:   return false;",
          "111:   return false;",
          "113:   return false;",
          "115:   return false;",
          "118:   return false;",
          "120:   return false;",
          "122:   return false;",
          "124:  return true;",
          "",
          "[Added Lines]",
          "109:   return __this_address;",
          "111:   return __this_address;",
          "113:   return __this_address;",
          "115:   return __this_address;",
          "118:   return __this_address;",
          "120:   return __this_address;",
          "122:   return __this_address;",
          "124:  return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:  if (!xfs_buf_verify_cksum(bp, XFS_SYMLINK_CRC_OFF))",
          "138:   xfs_verifier_error(bp, -EFSBADCRC);",
          "140:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "141: }",
          "",
          "[Removed Lines]",
          "139:  else if (!xfs_symlink_verify(bp))",
          "",
          "[Added Lines]",
          "139:  else if (xfs_symlink_verify(bp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "152:   return;",
          "155:   xfs_verifier_error(bp, -EFSCORRUPTED);",
          "156:   return;",
          "157:  }",
          "",
          "[Removed Lines]",
          "154:  if (!xfs_symlink_verify(bp)) {",
          "",
          "[Added Lines]",
          "154:  if (xfs_symlink_verify(bp)) {",
          "",
          "---------------"
        ],
        "fs/xfs/scrub/inode.c||fs/xfs/scrub/inode.c": [
          "File: fs/xfs/scrub/inode.c -> fs/xfs/scrub/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:  bp->b_ops = &xfs_inode_buf_ops;",
          "558:  dip = xfs_buf_offset(bp, imap.im_boffset);",
          "560:      !xfs_dinode_good_version(mp, dip->di_version)) {",
          "561:   xfs_scrub_ino_set_corrupt(sc, ino, bp);",
          "562:   goto out_buf;",
          "",
          "[Removed Lines]",
          "559:  if (!xfs_dinode_verify(mp, ino, dip) ||",
          "",
          "[Added Lines]",
          "559:  if (xfs_dinode_verify(mp, ino, dip) != NULL ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71493b839e294065ba63bd6f8d07263f3afee8c6",
      "candidate_info": {
        "commit_hash": "71493b839e294065ba63bd6f8d07263f3afee8c6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/71493b839e294065ba63bd6f8d07263f3afee8c6",
        "files": [
          "fs/xfs/libxfs/xfs_inode_buf.c",
          "fs/xfs/libxfs/xfs_inode_fork.c"
        ],
        "message": "xfs: move inode fork verifiers to xfs_dinode_verify\n\nConsolidate the fork size and format verifiers to xfs_dinode_verify so\nthat we can reject bad inodes earlier and in a single place.\n\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Dave Chinner <dchinner@redhat.com>",
        "before_after_code_files": [
          "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c",
          "fs/xfs/libxfs/xfs_inode_fork.c||fs/xfs/libxfs/xfs_inode_fork.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ],
          "candidate": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c": [
          "File: fs/xfs/libxfs/xfs_inode_buf.c -> fs/xfs/libxfs/xfs_inode_buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:  uint16_t  mode;",
          "390:  uint16_t  flags;",
          "391:  uint64_t  flags2;",
          "393:  if (dip->di_magic != cpu_to_be16(XFS_DINODE_MAGIC))",
          "394:   return __this_address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:  uint64_t  di_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:  }",
          "411:   return __this_address;",
          "413:  mode = be16_to_cpu(dip->di_mode);",
          "",
          "[Removed Lines]",
          "410:  if (be64_to_cpu(dip->di_size) & (1ULL << 63))",
          "",
          "[Added Lines]",
          "411:  di_size = be64_to_cpu(dip->di_size);",
          "412:  if (di_size & (1ULL << 63))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:   return __this_address;",
          "419:   return __this_address;",
          "422:  if (dip->di_version < 3)",
          "423:   return NULL;",
          "426:  flags2 = be64_to_cpu(dip->di_flags2);",
          "",
          "[Removed Lines]",
          "418:  if ((S_ISLNK(mode) || S_ISDIR(mode)) && dip->di_size == 0)",
          "425:  flags = be16_to_cpu(dip->di_flags);",
          "",
          "[Added Lines]",
          "420:  if ((S_ISLNK(mode) || S_ISDIR(mode)) && di_size == 0)",
          "424:  if (mode &&",
          "425:      be32_to_cpu(dip->di_nextents) + be16_to_cpu(dip->di_anextents) >",
          "426:    be64_to_cpu(dip->di_nblocks))",
          "427:   return __this_address;",
          "429:  if (mode && XFS_DFORK_BOFF(dip) > mp->m_sb.sb_inodesize)",
          "430:   return __this_address;",
          "432:  flags = be16_to_cpu(dip->di_flags);",
          "434:  if (mode && (flags & XFS_DIFLAG_REALTIME) && !mp->m_rtdev_targp)",
          "435:   return __this_address;",
          "438:  switch (mode & S_IFMT) {",
          "439:  case S_IFIFO:",
          "440:  case S_IFCHR:",
          "441:  case S_IFBLK:",
          "442:  case S_IFSOCK:",
          "443:   if (dip->di_format != XFS_DINODE_FMT_DEV)",
          "444:    return __this_address;",
          "445:   break;",
          "446:  case S_IFREG:",
          "447:  case S_IFLNK:",
          "448:  case S_IFDIR:",
          "449:   switch (dip->di_format) {",
          "450:   case XFS_DINODE_FMT_LOCAL:",
          "454:    if (S_ISREG(mode))",
          "455:     return __this_address;",
          "456:    if (di_size > XFS_DFORK_DSIZE(dip, mp))",
          "457:     return __this_address;",
          "459:   case XFS_DINODE_FMT_EXTENTS:",
          "460:   case XFS_DINODE_FMT_BTREE:",
          "461:    break;",
          "462:   default:",
          "463:    return __this_address;",
          "464:   }",
          "465:   break;",
          "466:  case 0:",
          "468:   break;",
          "469:  default:",
          "470:   return __this_address;",
          "471:  }",
          "473:  if (XFS_DFORK_Q(dip)) {",
          "474:   switch (dip->di_aformat) {",
          "475:   case XFS_DINODE_FMT_LOCAL:",
          "476:   case XFS_DINODE_FMT_EXTENTS:",
          "477:   case XFS_DINODE_FMT_BTREE:",
          "478:    break;",
          "479:   default:",
          "480:    return __this_address;",
          "481:   }",
          "482:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:             !xfs_sb_version_hasreflink(&mp->m_sb))",
          "431:   return __this_address;",
          "434:  if ((flags2 & XFS_DIFLAG2_REFLINK) && (flags & XFS_DIFLAG_REALTIME))",
          "435:   return __this_address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:  if ((flags2 & XFS_DIFLAG2_REFLINK) && (mode & S_IFMT) != S_IFREG)",
          "497:   return __this_address;",
          "",
          "---------------"
        ],
        "fs/xfs/libxfs/xfs_inode_fork.c||fs/xfs/libxfs/xfs_inode_fork.c": [
          "File: fs/xfs/libxfs/xfs_inode_fork.c -> fs/xfs/libxfs/xfs_inode_fork.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  int   error = 0;",
          "63:  xfs_fsize_t             di_size;",
          "118:  switch (inode->i_mode & S_IFMT) {",
          "119:  case S_IFIFO:",
          "120:  case S_IFCHR:",
          "121:  case S_IFBLK:",
          "122:  case S_IFSOCK:",
          "128:   ip->i_d.di_size = 0;",
          "129:   inode->i_rdev = xfs_to_linux_dev_t(xfs_dinode_get_rdev(dip));",
          "130:   break;",
          "",
          "[Removed Lines]",
          "65:  if (unlikely(be32_to_cpu(dip->di_nextents) +",
          "66:        be16_to_cpu(dip->di_anextents) >",
          "67:        be64_to_cpu(dip->di_nblocks))) {",
          "68:   xfs_warn(ip->i_mount,",
          "69:    \"corrupt dinode %Lu, extent total = %d, nblocks = %Lu.\",",
          "70:    (unsigned long long)ip->i_ino,",
          "71:    (int)(be32_to_cpu(dip->di_nextents) +",
          "72:          be16_to_cpu(dip->di_anextents)),",
          "73:    (unsigned long long)",
          "74:     be64_to_cpu(dip->di_nblocks));",
          "75:   XFS_CORRUPTION_ERROR(\"xfs_iformat(1)\", XFS_ERRLEVEL_LOW,",
          "76:          ip->i_mount, dip);",
          "77:   return -EFSCORRUPTED;",
          "78:  }",
          "80:  if (unlikely(dip->di_forkoff > ip->i_mount->m_sb.sb_inodesize)) {",
          "81:   xfs_warn(ip->i_mount, \"corrupt dinode %Lu, forkoff = 0x%x.\",",
          "82:    (unsigned long long)ip->i_ino,",
          "83:    dip->di_forkoff);",
          "84:   XFS_CORRUPTION_ERROR(\"xfs_iformat(2)\", XFS_ERRLEVEL_LOW,",
          "85:          ip->i_mount, dip);",
          "86:   return -EFSCORRUPTED;",
          "87:  }",
          "89:  if (unlikely((ip->i_d.di_flags & XFS_DIFLAG_REALTIME) &&",
          "90:        !ip->i_mount->m_rtdev_targp)) {",
          "91:   xfs_warn(ip->i_mount,",
          "92:    \"corrupt dinode %Lu, has realtime flag set.\",",
          "93:    ip->i_ino);",
          "94:   XFS_CORRUPTION_ERROR(\"xfs_iformat(realtime)\",",
          "95:          XFS_ERRLEVEL_LOW, ip->i_mount, dip);",
          "96:   return -EFSCORRUPTED;",
          "97:  }",
          "99:  if (unlikely(xfs_is_reflink_inode(ip) && !S_ISREG(inode->i_mode))) {",
          "100:   xfs_warn(ip->i_mount,",
          "101:    \"corrupt dinode %llu, wrong file type for reflink.\",",
          "102:    ip->i_ino);",
          "103:   XFS_CORRUPTION_ERROR(\"xfs_iformat(reflink)\",",
          "104:          XFS_ERRLEVEL_LOW, ip->i_mount, dip);",
          "105:   return -EFSCORRUPTED;",
          "106:  }",
          "108:  if (unlikely(xfs_is_reflink_inode(ip) &&",
          "109:      (ip->i_d.di_flags & XFS_DIFLAG_REALTIME))) {",
          "110:   xfs_warn(ip->i_mount,",
          "111:    \"corrupt dinode %llu, has reflink+realtime flag set.\",",
          "112:    ip->i_ino);",
          "113:   XFS_CORRUPTION_ERROR(\"xfs_iformat(reflink)\",",
          "114:          XFS_ERRLEVEL_LOW, ip->i_mount, dip);",
          "115:   return -EFSCORRUPTED;",
          "116:  }",
          "123:   if (unlikely(dip->di_format != XFS_DINODE_FMT_DEV)) {",
          "124:    XFS_CORRUPTION_ERROR(\"xfs_iformat(3)\", XFS_ERRLEVEL_LOW,",
          "125:            ip->i_mount, dip);",
          "126:    return -EFSCORRUPTED;",
          "127:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:  case S_IFDIR:",
          "135:   switch (dip->di_format) {",
          "136:   case XFS_DINODE_FMT_LOCAL:",
          "150:    di_size = be64_to_cpu(dip->di_size);",
          "163:    size = (int)di_size;",
          "164:    error = xfs_iformat_local(ip, dip, XFS_DATA_FORK, size);",
          "165:    break;",
          "",
          "[Removed Lines]",
          "140:    if (unlikely(S_ISREG(be16_to_cpu(dip->di_mode)))) {",
          "141:     xfs_warn(ip->i_mount,",
          "142:    \"corrupt inode %Lu (local format for regular file).\",",
          "143:      (unsigned long long) ip->i_ino);",
          "144:     XFS_CORRUPTION_ERROR(\"xfs_iformat(4)\",",
          "145:            XFS_ERRLEVEL_LOW,",
          "146:            ip->i_mount, dip);",
          "147:     return -EFSCORRUPTED;",
          "148:    }",
          "151:    if (unlikely(di_size < 0 ||",
          "152:          di_size > XFS_DFORK_DSIZE(dip, ip->i_mount))) {",
          "153:     xfs_warn(ip->i_mount,",
          "154:    \"corrupt inode %Lu (bad size %Ld for local inode).\",",
          "155:      (unsigned long long) ip->i_ino,",
          "156:      (long long) di_size);",
          "157:     XFS_CORRUPTION_ERROR(\"xfs_iformat(5)\",",
          "158:            XFS_ERRLEVEL_LOW,",
          "159:            ip->i_mount, dip);",
          "160:     return -EFSCORRUPTED;",
          "161:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:    error = xfs_iformat_btree(ip, dip, XFS_DATA_FORK);",
          "171:    break;",
          "172:   default:",
          "175:    return -EFSCORRUPTED;",
          "176:   }",
          "177:   break;",
          "179:  default:",
          "181:   return -EFSCORRUPTED;",
          "182:  }",
          "183:  if (error)",
          "",
          "[Removed Lines]",
          "173:    XFS_ERROR_REPORT(\"xfs_iformat(6)\", XFS_ERRLEVEL_LOW,",
          "174:       ip->i_mount);",
          "180:   XFS_ERROR_REPORT(\"xfs_iformat(7)\", XFS_ERRLEVEL_LOW, ip->i_mount);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50aa90ef03007beca2c9108993f5b4f2bb4f0a66",
      "candidate_info": {
        "commit_hash": "50aa90ef03007beca2c9108993f5b4f2bb4f0a66",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/50aa90ef03007beca2c9108993f5b4f2bb4f0a66",
        "files": [
          "fs/xfs/libxfs/xfs_inode_buf.c"
        ],
        "message": "xfs: verify dinode header first\n\nMove the v3 inode integrity information (crc, owner, metauuid) before we\nlook at anything else in the inode so that we don't waste time on a torn\nwrite or a totally garbled block.  This makes xfs_dinode_verify more\nconsistent with the other verifiers.\n\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Dave Chinner <dchinner@redhat.com>",
        "before_after_code_files": [
          "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ],
          "candidate": [
            "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/xfs/libxfs/xfs_inode_buf.c||fs/xfs/libxfs/xfs_inode_buf.c": [
          "File: fs/xfs/libxfs/xfs_inode_buf.c -> fs/xfs/libxfs/xfs_inode_buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:  if (dip->di_magic != cpu_to_be16(XFS_DINODE_MAGIC))",
          "394:   return __this_address;",
          "397:  if (be64_to_cpu(dip->di_size) & (1ULL << 63))",
          "398:   return __this_address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:  if (dip->di_version >= 3) {",
          "398:   if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "399:    return __this_address;",
          "400:   if (!xfs_verify_cksum((char *)dip, mp->m_sb.sb_inodesize,",
          "401:           XFS_DINODE_CRC_OFF))",
          "402:    return __this_address;",
          "403:   if (be64_to_cpu(dip->di_ino) != ino)",
          "404:    return __this_address;",
          "405:   if (!uuid_equal(&dip->di_uuid, &mp->m_sb.sb_meta_uuid))",
          "406:    return __this_address;",
          "407:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:  if (dip->di_version < 3)",
          "410:   return NULL;",
          "422:  flags = be16_to_cpu(dip->di_flags);",
          "423:  flags2 = be64_to_cpu(dip->di_flags2);",
          "",
          "[Removed Lines]",
          "412:  if (!xfs_sb_version_hascrc(&mp->m_sb))",
          "413:   return __this_address;",
          "414:  if (!xfs_verify_cksum((char *)dip, mp->m_sb.sb_inodesize,",
          "415:          XFS_DINODE_CRC_OFF))",
          "416:   return __this_address;",
          "417:  if (be64_to_cpu(dip->di_ino) != ino)",
          "418:   return __this_address;",
          "419:  if (!uuid_equal(&dip->di_uuid, &mp->m_sb.sb_meta_uuid))",
          "420:   return __this_address;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}