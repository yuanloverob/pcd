{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b412016331dfa28db9634c319e22b1f4e6f8e84",
      "candidate_info": {
        "commit_hash": "6b412016331dfa28db9634c319e22b1f4e6f8e84",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/6b412016331dfa28db9634c319e22b1f4e6f8e84",
        "files": [
          "DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "167:     }",
          "171:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "172:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "169:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "[Added Lines]",
          "169:     status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587: }",
          "1591:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "1590: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "[Added Lines]",
          "1590: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:     CHECK_STATE(encrypted_poly);",
          "1598:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "1600:                              DKG_BUFER_LENGTH);",
          "1602:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1599:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "",
          "[Added Lines]",
          "1599:     int status = AES_decrypt(encrypted_poly, enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "230:                                 [out]int *errStatus,",
          "",
          "[Removed Lines]",
          "227:                                 [user_check] uint64_t* enc_len);",
          "",
          "[Added Lines]",
          "227:                                 uint64_t enc_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "840852b738333ddb68ce9b93044c21e89d40cb14",
      "candidate_info": {
        "commit_hash": "840852b738333ddb68ce9b93044c21e89d40cb14",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/840852b738333ddb68ce9b93044c21e89d40cb14",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "SEKManager.cpp",
          "SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp",
          "ServerDataChecker.cpp",
          "compile",
          "depcomp",
          "install-sh",
          "missing",
          "testw.cpp"
        ],
        "message": "Fixed add README toc",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"RPCException.h\"",
          "53: #include \"spdlog/spdlog.h\"",
          "55: int char2int(char _input) {",
          "56:   if (_input >= '0' && _input <= '9')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: bool sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "136:     char* _sig) {",
          "144:   uint64_t binLen;",
          "",
          "[Removed Lines]",
          "140:   auto keyStr = std::make_shared<std::string>(_encryptedKeyHex);",
          "142:   auto hash = std::make_shared<std::array<uint8_t, 32>>();",
          "",
          "[Added Lines]",
          "141:   auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "143:   auto hash = make_shared<array<uint8_t, 32>>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     auto sigShare = keyShare->signWithHelperSGX(hash, _signerIndex);",
          "",
          "[Removed Lines]",
          "153:   auto keyShare = std::make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "",
          "[Added Lines]",
          "154:   auto keyShare = make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   @date 2019",
          "26: #include \"BLSSigShare.h\"",
          "27: #include \"BLSSignature.h\"",
          "",
          "[Removed Lines]",
          "24: using namespace std;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: #include \"BLSCrypto.h\"",
          "35: #include \"ServerInit.h\"",
          "37: #include \"BLSPrivateKeyShareSGX.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"common.h\"",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <libff/algebra/curves/alt_bn128/alt_bn128_pp.hpp>",
          "36: #include \"spdlog/spdlog.h\"",
          "41:   delim.push_back(symbol);",
          "43:   size_t prev = 0, pos = 0;",
          "44:   do",
          "45:   {",
          "46:     pos = str.find(delim, prev);",
          "49:     if (!token.empty()) {",
          "51:       G2_strings.push_back(koef);",
          "52:     }",
          "53:     prev = pos + delim.length();",
          "",
          "[Removed Lines]",
          "38: std::vector<std::string> SplitString(const char* koefs, const char symbol){",
          "39:   std::string str(koefs);",
          "40:   std::string delim;",
          "42:   std::vector<std::string> G2_strings;",
          "47:     if (pos == std::string::npos) pos = str.length();",
          "48:     std::string token = str.substr(prev, pos-prev);",
          "50:       std::string koef(token.c_str());",
          "",
          "[Added Lines]",
          "37: #include \"common.h\"",
          "39: vector<string> SplitString(const char* koefs, const char symbol){",
          "40:   string str(koefs);",
          "41:   string delim;",
          "43:   vector<string> G2_strings;",
          "48:     if (pos == string::npos) pos = str.length();",
          "49:     string token = str.substr(prev, pos-prev);",
          "51:       string koef(token.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: }",
          "60: template<class T>",
          "62:   mpz_t t;",
          "63:   mpz_init(t);",
          "",
          "[Removed Lines]",
          "61: std::string ConvertToString(T field_elem, int base = 10) {",
          "",
          "[Added Lines]",
          "62: string ConvertToString(T field_elem, int base = 10) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   char * tmp = mpz_get_str(arr, base, t);",
          "70:   mpz_clear(t);",
          "74:   return output;",
          "75: }",
          "78:     char *errMsg = (char *)calloc(1024, 1);",
          "79:     int err_status = 0;",
          "80:     uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);;",
          "",
          "[Removed Lines]",
          "72:   std::string output = tmp;",
          "77: std::string gen_dkg_poly( int _t){",
          "",
          "[Added Lines]",
          "73:   string output = tmp;",
          "78: string gen_dkg_poly( int _t){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:     char *hexEncrPoly = (char *) calloc(DKG_MAX_SEALED_LEN * 2 + 1, 1);//(4*BUF_LEN, 1);",
          "101:     carray2Hex(encrypted_dkg_secret, DKG_MAX_SEALED_LEN, hexEncrPoly);",
          "",
          "[Removed Lines]",
          "102:     std::string result(hexEncrPoly);",
          "",
          "[Added Lines]",
          "103:     string result(hexEncrPoly);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:     return result;",
          "111: }",
          "115:   char* errMsg1 = (char*) calloc(1024,1);",
          "116:   int err_status = 0;",
          "118:   if (DEBUG_PRINT) {",
          "121:   }",
          "123:   char* public_shares = (char*)calloc(10000, 1);",
          "",
          "[Removed Lines]",
          "113: std::vector <std::vector<std::string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "120:     spdlog::info(\"got encr poly size {}\", std::char_traits<char>::length(encryptedPolyHex));",
          "",
          "[Added Lines]",
          "114: vector <vector<string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "121:     spdlog::info(\"got encr poly size {}\", char_traits<char>::length(encryptedPolyHex));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:     spdlog::info(\"public_shares:\");",
          "149:     spdlog::info(\"{}\", public_shares);",
          "152:     spdlog::info(\"get_public_shares status: {}\", err_status);",
          "154:   }",
          "158:   for ( int i = 0; i < G2_strings.size(); i++){",
          "160:     pub_shares_vect.push_back(koef_str);",
          "161:   }",
          "",
          "[Removed Lines]",
          "156:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "157:   std::vector <std::vector <std::string>> pub_shares_vect;",
          "159:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "[Added Lines]",
          "157:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "158:   vector <vector <string>> pub_shares_vect;",
          "160:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:   return pub_shares_vect;",
          "168: }",
          "171:   char* errMsg1 = (char*) calloc(1024,1);",
          "172:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "170: std::string get_secret_shares(const std::string& polyName, const char* encryptedPolyHex, const std::vector<std::string>& publicKeys, int t, int n){",
          "",
          "[Added Lines]",
          "171: string get_secret_shares(const string& polyName, const char* encryptedPolyHex, const vector<string>& publicKeys, int t, int n){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:     throw RPCException(-666, errMsg1 );",
          "184:   }",
          "187:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "189:   for ( int i = 0; i < n; i++){",
          "",
          "[Removed Lines]",
          "186:   std::string result;",
          "",
          "[Added Lines]",
          "187:   string result;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "193:     char cur_share[193];",
          "194:     char s_shareG2[320];",
          "196:     if (DEBUG_PRINT) {",
          "197:       spdlog::info(\"pub_keyB is {}\", pub_keyB);",
          "198:     }",
          "",
          "[Removed Lines]",
          "195:     std::string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "",
          "[Added Lines]",
          "196:     string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "213:     }",
          "214:     carray2Hex(encrypted_skey, dec_len, hexEncrKey);",
          "219:     writeDataToDB(DHKey_name, hexEncrKey);",
          "222:     if (DEBUG_PRINT) {",
          "223:       spdlog::info(\"name to write to db is {}\", DHKey_name);",
          "224:       spdlog::info(\"name to write to db is {}\", shareG2_name);",
          "",
          "[Removed Lines]",
          "216:     std::string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "221:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "",
          "[Added Lines]",
          "217:     string DHKey_name = \"DKG_DH_KEY_\" + polyName + \"_\" + to_string(i) + \":\";",
          "222:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "253:     }",
          "254:     int result;",
          "255:     if (DEBUG_PRINT) {",
          "262:     }",
          "263:     char pshares[8193];",
          "264:     strncpy(pshares, publicShares, strlen(publicShares) + 1);",
          "268:     dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "",
          "[Removed Lines]",
          "261:       spdlog::info(\"publicShares length is {}\", std::char_traits<char>::length(publicShares));",
          "",
          "[Added Lines]",
          "262:       spdlog::info(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "280:     return result;",
          "281: }",
          "284:   if (DEBUG_PRINT) {",
          "285:     spdlog::info(\"ENTER CreateBLSShare\");",
          "286:   }",
          "",
          "[Removed Lines]",
          "283: bool CreateBLSShare( const std::string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "284: bool CreateBLSShare( const string& BLSKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "297:   uint32_t enc_bls_len = 0;",
          "300:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "302:   if ( err_status != 0){",
          "303:      spdlog::info(\"ERROR IN ENCLAVE\");",
          "304:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "305:   }",
          "306:   else {",
          "307:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "310:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "312:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "313:     if (DEBUG_PRINT) {",
          "315:       spdlog::info(\"bls key {}\", BLSKeyName, \" is \", hexBLSKey );",
          "316:     }",
          "317:     free(hexBLSKey);",
          "",
          "[Removed Lines]",
          "314:       spdlog::info(\"hexBLSKey length is {}\", std::char_traits<char>::length(hexBLSKey));",
          "",
          "[Added Lines]",
          "315:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "321: }",
          "324:     char* errMsg1 = (char*) calloc(1024,1);",
          "325:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "323: std::vector<std::string> GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "[Added Lines]",
          "324: vector<string> GetBLSPubKey(const char * encryptedKeyHex){",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "341:     if ( err_status != 0){",
          "342:       throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "343:     }",
          "346:     if (DEBUG_PRINT) {",
          "347:       spdlog::info(\"errMsg1 is {}\", errMsg1);",
          "",
          "[Removed Lines]",
          "344:     std::vector<std::string> pub_key_vect = SplitString(pub_key, ':');",
          "",
          "[Added Lines]",
          "345:     vector<string> pub_key_vect = SplitString(pub_key, ':');",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "352:     return pub_key_vect;",
          "353: }",
          "357:   char* errMsg1 = (char*) calloc(1024,1);",
          "358:   int err_status = 0;",
          "362:   if (DEBUG_PRINT) {",
          "363:     spdlog::info(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "364:   }",
          "",
          "[Removed Lines]",
          "355: std::string decrypt_DHKey(const std::string& polyName, int ind){",
          "360:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "361:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "",
          "[Added Lines]",
          "356: string decrypt_DHKey(const string& polyName, int ind){",
          "361:   string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "362:   shared_ptr<string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "385:   return DHKey;",
          "386: }",
          "390:     libff::init_alt_bn128_params();",
          "391:     libff::alt_bn128_Fr el(x.c_str());",
          "392:     libff::alt_bn128_G2 elG2 = el * libff::alt_bn128_G2::one();",
          "",
          "[Removed Lines]",
          "388: std::vector<std::string> mult_G2(const std::string& x){",
          "389:     std::vector<std::string> result(4);",
          "",
          "[Added Lines]",
          "389: vector<string> mult_G2(const string& x){",
          "390:     vector<string> result(4);",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <iostream>",
          "31: #include \"sgxwallet_common.h\"",
          "32: #include \"sgxwallet.h\"",
          "34: void generate_SEK(){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   status = generate_SEK(eid, &err_status, errMsg, encr_SEK, &enc_len);",
          "42:   if ( err_status != 0 ){",
          "44:     throw RPCException(-666, errMsg) ;",
          "45:   }",
          "47:   char *hexEncrKey = (char *) calloc(2*enc_len + 1, 1);",
          "48:   carray2Hex(encr_SEK, enc_len, hexEncrKey);",
          "52:   LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey);",
          "",
          "[Removed Lines]",
          "43:     std::cerr << \"RPCException thrown\" << std::endl;",
          "50:   std::cegit crr << \"key is \" << errMsg << std::endl;",
          "",
          "[Added Lines]",
          "44:     cerr << \"RPCException thrown\" << endl;",
          "51:   cerr << \"key is \" << errMsg << endl;",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"LevelDB.h\"",
          "46: #include \"spdlog/spdlog.h\"",
          "48: int DEBUG_PRINT = 0;",
          "49: int is_sgx_https = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"common.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     : AbstractRegServer(connector, type), is_cert_created(false), cert_auto_sign(auto_sign) {}",
          "68:   Json::Value result;",
          "69:   result[\"status\"] = 0;",
          "70:   result[\"errorMessage\"] = \"\";",
          "71:   try{",
          "72:     spdlog::info(\"enter SignCertificateImpl\");",
          "76:     if ( !auto_sign) {",
          "78:       LevelDB::getCsrStatusDb()->writeDataUnique(db_key, csr);",
          "79:     }",
          "81:     if (auto_sign) {",
          "85:       outfile.close();",
          "86:       if (access(csr_name.c_str(), F_OK) != 0) {",
          "87:         throw RPCException(FILE_NOT_FOUND, \"Csr does not exist\");",
          "88:       }",
          "92:       if (system(genCert.c_str()) == 0){",
          "93:           spdlog::info(\"CLIENT CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "67: Json::Value SignCertificateImpl(const std::string& csr, bool auto_sign = false){",
          "74:     std::string status = \"1\";",
          "75:     std::string hash = cryptlite::sha256::hash_hex(csr);",
          "77:       std::string db_key = \"CSR:HASH:\" + hash;",
          "82:       std::string csr_name = \"cert/\" + hash + \".csr\";",
          "83:       std::ofstream outfile(csr_name);",
          "84:       outfile << csr << std::endl;",
          "90:       std::string genCert = \"cd cert && ./create_client_cert \" + hash;",
          "",
          "[Added Lines]",
          "68: Json::Value SignCertificateImpl(const string& csr, bool auto_sign = false){",
          "75:     string status = \"1\";",
          "76:     string hash = cryptlite::sha256::hash_hex(csr);",
          "78:       string db_key = \"CSR:HASH:\" + hash;",
          "83:       string csr_name = \"cert/\" + hash + \".csr\";",
          "84:       ofstream outfile(csr_name);",
          "85:       outfile << csr << endl;",
          "91:       string genCert = \"cd cert && ./create_client_cert \" + hash;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:       }",
          "96:       else{",
          "97:           spdlog::info(\"CLIENT CERTIFICATE GENERATION FAILED\");",
          "100:           throw RPCException(FAIL_TO_CREATE_CERTIFICATE, \"CLIENT CERTIFICATE GENERATION FAILED\");",
          "102:       }",
          "",
          "[Removed Lines]",
          "98:           std::string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "99:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, std::to_string(FAIL_TO_CREATE_CERTIFICATE));",
          "",
          "[Added Lines]",
          "99:           string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "100:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, to_string(FAIL_TO_CREATE_CERTIFICATE));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     result[\"result\"] = true;",
          "106:     result[\"hash\"] = hash;",
          "109:     LevelDB::getCsrStatusDb()->writeDataUnique(db_key, status);",
          "111:   } catch (RPCException &_e) {",
          "113:     result[\"status\"] = _e.status;",
          "114:     result[\"errorMessage\"] = _e.errString;",
          "115:     result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "108:     std::string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "112:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "109:     string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "113:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   return result;",
          "119: }",
          "122:   Json::Value result;",
          "125:   try{",
          "126:     string db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "127:     shared_ptr<string> status_str_ptr = LevelDB::getCsrStatusDb()->readString(db_key);",
          "128:     if (status_str_ptr == nullptr){",
          "129:        throw RPCException(KEY_SHARE_DOES_NOT_EXIST, \"Data with this name does not exist in csr db\");",
          "130:     }",
          "133:     if ( status == 0){",
          "134:       string crt_name = \"cert/\" + hash + \".crt\";",
          "",
          "[Removed Lines]",
          "121: Json::Value GetSertificateImpl(const std::string& hash){",
          "124:   std::string cert;",
          "131:     int status = std::atoi(status_str_ptr->c_str());",
          "",
          "[Added Lines]",
          "122: Json::Value GetSertificateImpl(const string& hash){",
          "125:   string cert;",
          "132:     int status = atoi(status_str_ptr->c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:         if (!infile.is_open()) {",
          "138:           string status_db_key = \"CSR:HASH:\" + hash + \"STATUS:\";",
          "139:           LevelDB::getCsrStatusDb()->deleteKey(status_db_key);",
          "141:           throw RPCException(FILE_NOT_FOUND, \"Certificate does not exist\");",
          "142:         } else {",
          "143:           ostringstream ss;",
          "",
          "[Removed Lines]",
          "140:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, std::to_string(FILE_NOT_FOUND));",
          "",
          "[Added Lines]",
          "141:           LevelDB::getCsrStatusDb()->writeDataUnique(status_db_key, to_string(FILE_NOT_FOUND));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "145:           cert = ss.str();",
          "147:           infile.close();",
          "149:           if(system(remove_crt.c_str()) == 0){",
          "151:               spdlog::info(\" cert removed \");",
          "153:           }",
          "",
          "[Removed Lines]",
          "148:           std::string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "",
          "[Added Lines]",
          "149:           string remove_crt = \"cd cert && rm -rf \" + hash + \".crt && rm -rf \" + hash + \".csr\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "162:     result[\"cert\"] = cert;",
          "164:   } catch (RPCException &_e) {",
          "166:     result[\"status\"] = _e.status;",
          "167:     result[\"errorMessage\"] = _e.errString;",
          "168:   }",
          "",
          "[Removed Lines]",
          "165:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "166:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "171: }",
          "175:   spdlog::info(\"Enter SignCertificate \");",
          "176:   lock_guard<recursive_mutex> lock(m);",
          "177:   return SignCertificateImpl(csr, cert_auto_sign);",
          "178: }",
          "181:   lock_guard<recursive_mutex> lock(m);",
          "182:   return GetSertificateImpl(hash);",
          "183: }",
          "",
          "[Removed Lines]",
          "174: Json::Value SGXRegistrationServer::SignCertificate(const std::string& csr){",
          "180: Json::Value SGXRegistrationServer::GetCertificate(const std::string& hash){",
          "",
          "[Added Lines]",
          "175: Json::Value SGXRegistrationServer::SignCertificate(const string& csr){",
          "181: Json::Value SGXRegistrationServer::GetCertificate(const string& hash){",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"spdlog/spdlog.h\"",
          "57:   });",
          "58:   return !str.empty() && res == str.end();",
          "59: }",
          "",
          "[Removed Lines]",
          "54: bool isStringDec( std::string & str){",
          "55:   auto res = std::find_if_not(str.begin(), str.end(), [](char c)->bool{",
          "56:     return std::isdigit(c);",
          "",
          "[Added Lines]",
          "46: #include \"common.h\"",
          "50: bool isStringDec( string & str){",
          "51:   auto res = find_if_not(str.begin(), str.end(), [](char c)->bool{",
          "52:     return isdigit(c);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         : AbstractStubServer(connector, type) {}",
          "69: void debug_print(){",
          "71:   class MyVisitor: public LevelDB::KeyVisitor {",
          "72:   public:",
          "73:     virtual void visitDBKey(const char* _data){",
          "75:     }",
          "76:   };",
          "",
          "[Removed Lines]",
          "70:   std::cout << \"HERE ARE YOUR KEYS: \" << std::endl;",
          "74:       std::cout << _data << std::endl;",
          "",
          "[Added Lines]",
          "66:   cout << \"HERE ARE YOUR KEYS: \" << endl;",
          "70:       cout << _data << endl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: int init_https_server(bool check_certs) {",
          "88:   if (access(rootCAPath.c_str(), F_OK) != 0 || access(keyCAPath.c_str(), F_OK) != 0){",
          "89:     spdlog::info(\"YOU DO NOT HAVE ROOT CA CERTIFICATE\");",
          "90:     spdlog::info(\"ROOT CA CERTIFICATE IS GOING TO BE CREATED\");",
          "94:     if (system(genRootCACert.c_str()) == 0){",
          "95:       spdlog::info(\"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "85:   std::string rootCAPath = std::string(SGXDATA_FOLDER) + \"cert_data/rootCA.pem\";",
          "86:   std::string keyCAPath = std::string(SGXDATA_FOLDER) + \"cert_data/rootCA.key\";",
          "92:     std::string genRootCACert = \"cd cert && ./create_CA\";",
          "",
          "[Added Lines]",
          "81:   string rootCAPath = string(SGXDATA_FOLDER) + \"cert_data/rootCA.pem\";",
          "82:   string keyCAPath = string(SGXDATA_FOLDER) + \"cert_data/rootCA.key\";",
          "88:     string genRootCACert = \"cd cert && ./create_CA\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     }",
          "101:   }",
          "106:   if (access(certPath.c_str(), F_OK) != 0 || access(certPath.c_str(), F_OK) != 0){",
          "107:     spdlog::info(\"YOU DO NOT HAVE SERVER CERTIFICATE\");",
          "108:     spdlog::info(\"SERVER CERTIFICATE IS GOING TO BE CREATED\");",
          "112:     if (system(genCert.c_str()) == 0){",
          "113:       spdlog::info(\"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\");",
          "",
          "[Removed Lines]",
          "103:   std::string certPath = std::string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.crt\";",
          "104:   std::string keyPath = std::string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.key\";",
          "110:     std::string genCert = \"cd cert && ./create_server_cert\";",
          "",
          "[Added Lines]",
          "99:   string certPath = string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.crt\";",
          "100:   string keyPath = string(SGXDATA_FOLDER) + \"cert_data/SGXServerCert.key\";",
          "106:     string genCert = \"cd cert && ./create_server_cert\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146: }",
          "148: Json::Value",
          "150:     Json::Value result;",
          "152:     int errStatus = UNKNOWN_ERROR;",
          "",
          "[Removed Lines]",
          "149: importBLSKeyShareImpl(const std::string &_keyShare, const std::string &_keyShareName, int t, int n, int index) {",
          "",
          "[Added Lines]",
          "145: importBLSKeyShareImpl(const string &_keyShare, const string &_keyShareName, int t, int n, int index) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:     return result;",
          "183: }",
          "186:     Json::Value result;",
          "187:     result[\"status\"] = -1;",
          "188:     result[\"errorMessage\"] = \"Unknown server error\";",
          "",
          "[Removed Lines]",
          "185: Json::Value blsSignMessageHashImpl(const std::string &keyShareName, const std::string &messageHash,int t, int n, int signerIndex) {",
          "",
          "[Added Lines]",
          "181: Json::Value blsSignMessageHashImpl(const string &keyShareName, const string &messageHash,int t, int n, int signerIndex) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:     char *signature = (char *) calloc(BUF_LEN, 1);",
          "195:     try {",
          "196:       if ( !checkName(keyShareName, \"BLS_KEY\")){",
          "197:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "198:       }",
          "200:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "201:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "202:       }",
          "",
          "[Removed Lines]",
          "193:     shared_ptr <std::string> value = nullptr;",
          "199:       std::string cutHash = messageHash;",
          "",
          "[Added Lines]",
          "189:     shared_ptr <string> value = nullptr;",
          "195:       string cutHash = messageHash;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:         result[\"errorMessage\"] = _e.errString;",
          "215:         return result;",
          "216:     } catch (...) {",
          "218:         printf(\"Exception %s \\n\", p.__cxa_exception_type()->name());",
          "219:         result[\"status\"] = -1;",
          "220:         result[\"errorMessage\"] = \"Read key share has thrown exception:\";",
          "",
          "[Removed Lines]",
          "217:         std::exception_ptr p = std::current_exception();",
          "",
          "[Added Lines]",
          "213:         exception_ptr p = current_exception();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "240: }",
          "244:     Json::Value result;",
          "245:     result[\"status\"] = 0;",
          "246:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "243: Json::Value importECDSAKeyImpl(const std::string &key, const std::string &keyName) {",
          "",
          "[Added Lines]",
          "239: Json::Value importECDSAKeyImpl(const string &key, const string &keyName) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "259:     spdlog::info(\"Calling method generateECDSAKey\");",
          "263:     try {",
          "264:         keys = gen_ecdsa_key();",
          "",
          "[Removed Lines]",
          "261:     std::vector<std::string>keys;",
          "",
          "[Added Lines]",
          "257:     vector<string>keys;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "267:             throw RPCException(UNKNOWN_ERROR, \"key was not generated\");",
          "268:         }",
          "272:         if (DEBUG_PRINT) {",
          "273:           spdlog::info(\"write encr key {}\", keys.at(0));",
          "",
          "[Removed Lines]",
          "270:         std::string keyName = \"NEK:\" + keys.at(2);",
          "",
          "[Added Lines]",
          "266:         string keyName = \"NEK:\" + keys.at(2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "282:         result[\"KeyName\"] = keyName;",
          "284:     } catch (RPCException &_e) {",
          "286:         result[\"status\"] = _e.status;",
          "287:         result[\"errorMessage\"] = _e.errString;",
          "288:     }",
          "",
          "[Removed Lines]",
          "285:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "281:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "290:     return result;",
          "291: }",
          "294:   Json::Value result;",
          "295:   result[\"status\"] = 0;",
          "296:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "293: Json::Value renameECDSAKeyImpl(const std::string& KeyName, const std::string& tempKeyName){",
          "",
          "[Added Lines]",
          "289: Json::Value renameECDSAKeyImpl(const string& KeyName, const string& tempKeyName){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "299:   try {",
          "302:     if (prefix != \"tmp_NEK:\") {",
          "303:      throw RPCException(UNKNOWN_ERROR, \"wrong temp key name\");",
          "304:     }",
          "",
          "[Removed Lines]",
          "301:     std::string prefix = tempKeyName.substr(0,8);",
          "",
          "[Added Lines]",
          "297:     string prefix = tempKeyName.substr(0,8);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "306:     if (prefix != \"NEK_NODE_ID:\") {",
          "307:       throw RPCException(UNKNOWN_ERROR, \"wrong key name\");",
          "308:     }",
          "310:     if (!isStringDec(postfix)){",
          "311:       throw RPCException(UNKNOWN_ERROR, \"wrong key name\");",
          "312:     }",
          "316:     writeDataToDB(KeyName, *key_ptr);",
          "317:     LevelDB::getLevelDb()->deleteTempNEK(tempKeyName);",
          "319:   } catch (RPCException &_e) {",
          "321:     result[\"status\"] = _e.status;",
          "322:     result[\"errorMessage\"] = _e.errString;",
          "323:   }",
          "",
          "[Removed Lines]",
          "309:     std::string postfix = KeyName.substr(12, KeyName.length());",
          "314:     std::shared_ptr<std::string> key_ptr = readFromDb(tempKeyName);",
          "315:     std::cerr << \"new key name is \" << KeyName <<std::endl;",
          "320:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "305:     string postfix = KeyName.substr(12, KeyName.length());",
          "310:     shared_ptr<string> key_ptr = readFromDb(tempKeyName);",
          "311:     cerr << \"new key name is \" << KeyName <<endl;",
          "316:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "326: }",
          "330:     Json::Value result;",
          "331:     result[\"status\"] = 0;",
          "332:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "329: Json::Value ecdsaSignMessageHashImpl(int base, const std::string &_keyName, const std::string &messageHash) {",
          "",
          "[Added Lines]",
          "325: Json::Value ecdsaSignMessageHashImpl(int base, const string &_keyName, const string &messageHash) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "334:     result[\"signature_r\"] = \"\";",
          "335:     result[\"signature_s\"] = \"\";",
          "339:     if (DEBUG_PRINT) {",
          "340:       spdlog::info(\"entered ecdsaSignMessageHashImpl {}\", messageHash, \"length {}\", messageHash.length());",
          "",
          "[Removed Lines]",
          "337:     std::vector<std::string> sign_vect(3);",
          "",
          "[Added Lines]",
          "333:     vector<string> sign_vect(3);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "343:     try {",
          "346:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "347:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "348:       }",
          "",
          "[Removed Lines]",
          "345:       std::string cutHash = messageHash;",
          "",
          "[Added Lines]",
          "341:       string cutHash = messageHash;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "364:         throw RPCException(-22, \"Invalid base\");",
          "365:       }",
          "369:       sign_vect = ecdsa_sign_hash(key_ptr->c_str(), cutHash.c_str(), base);",
          "370:       if (sign_vect.size() != 3 ){",
          "",
          "[Removed Lines]",
          "367:       std::shared_ptr<std::string> key_ptr = readFromDb(_keyName,\"\");",
          "",
          "[Added Lines]",
          "363:       shared_ptr<string> key_ptr = readFromDb(_keyName,\"\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "380:       result[\"signature_s\"] = sign_vect.at(2);",
          "382:     } catch (RPCException &_e) {",
          "384:         result[\"status\"] = _e.status;",
          "385:         result[\"errorMessage\"] = _e.errString;",
          "386:     }",
          "",
          "[Removed Lines]",
          "383:         std::cerr << \"err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "379:         cerr << \"err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "388:     return result;",
          "389: }",
          "392:     Json::Value result;",
          "393:     result[\"status\"] = 0;",
          "394:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "391: Json::Value getPublicECDSAKeyImpl(const std::string& keyName){",
          "",
          "[Added Lines]",
          "387: Json::Value getPublicECDSAKeyImpl(const string& keyName){",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "397:     spdlog::info(\"Calling method getPublicECDSAKey\");",
          "401:     try {",
          "402:          if ( !checkECDSAKeyName(keyName)){",
          "403:            throw RPCException(INVALID_ECDSA_KEY_NAME, \"Invalid ECDSA key name\");",
          "404:          }",
          "406:          Pkey = get_ecdsa_pubkey( key_ptr->c_str());",
          "407:          if (DEBUG_PRINT) {",
          "408:            spdlog::info(\"PublicKey {}\", Pkey);",
          "",
          "[Removed Lines]",
          "399:     std::string Pkey;",
          "405:          std::shared_ptr<std::string> key_ptr = readFromDb(keyName);",
          "",
          "[Added Lines]",
          "395:     string Pkey;",
          "401:          shared_ptr<string> key_ptr = readFromDb(keyName);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "418:     return result;",
          "419: }",
          "423:     Json::Value result;",
          "424:     result[\"status\"] = 0;",
          "425:     result[\"errorMessage\"] = \"\";",
          "430:     try {",
          "431:       if ( !checkName(polyName, \"POLY\")){",
          "",
          "[Removed Lines]",
          "421: Json::Value generateDKGPolyImpl(const std::string& polyName, int t) {",
          "428:     std::string encrPolyHex;",
          "",
          "[Added Lines]",
          "417: Json::Value generateDKGPolyImpl(const string& polyName, int t) {",
          "424:     string encrPolyHex;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "441:     } catch (RPCException &_e) {",
          "443:         result[\"status\"] = _e.status;",
          "444:         result[\"errorMessage\"] = _e.errString;",
          "445:     }",
          "",
          "[Removed Lines]",
          "442:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "438:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "447:     return result;",
          "448: }",
          "452:   Json::Value result;",
          "453:   result[\"status\"] = 0;",
          "454:   result[\"errorMessage\"] = \"\";",
          "457:   try {",
          "458:     if ( !checkName(polyName, \"POLY\")){",
          "459:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "",
          "[Removed Lines]",
          "450: Json::Value getVerificationVectorImpl(const std::string& polyName, int t, int n) {",
          "456:   std::vector <std::vector<std::string>> verifVector;",
          "",
          "[Added Lines]",
          "446: Json::Value getVerificationVectorImpl(const string& polyName, int t, int n) {",
          "452:   vector <vector<string>> verifVector;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "462:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");",
          "463:     }",
          "467:     verifVector = get_verif_vect(encr_poly_ptr->c_str(), t, n);",
          "470:     for ( int i = 0; i < t; i++){",
          "472:       for ( int j = 0; j < 4; j++ ){",
          "473:         result[\"Verification Vector\"][i][j] = cur_coef.at(j);",
          "474:       }",
          "475:     }",
          "477:   } catch (RPCException &_e) {",
          "479:     result[\"status\"] = _e.status;",
          "480:     result[\"errorMessage\"] = _e.errString;",
          "481:     result[\"Verification Vector\"] = \"\";",
          "",
          "[Removed Lines]",
          "465:     std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "471:       std::vector<std::string> cur_coef = verifVector.at(i);",
          "478:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "461:     shared_ptr<string> encr_poly_ptr = readFromDb(polyName);",
          "467:       vector<string> cur_coef = verifVector.at(i);",
          "474:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "484:   return result;",
          "485: }",
          "488:     spdlog::info(\"enter getSecretShareImpl\");",
          "489:     Json::Value result;",
          "490:     result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "487: Json::Value getSecretShareImpl(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "",
          "[Added Lines]",
          "483: Json::Value getSecretShareImpl(const string& polyName, const Json::Value& publicKeys, int t, int n){",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "501:           throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "502:         }",
          "507:         for ( int i = 0; i < n ; i++) {",
          "508:             if ( !checkHex(publicKeys[i].asString(), 64)){",
          "509:               throw RPCException(INVALID_HEX, \"Invalid public key\");",
          "",
          "[Removed Lines]",
          "504:         std::shared_ptr<std::string> encr_poly_ptr = readFromDb(polyName);",
          "506:         std::vector<std::string> pubKeys_vect;",
          "",
          "[Added Lines]",
          "500:         shared_ptr<string> encr_poly_ptr = readFromDb(polyName);",
          "502:         vector<string> pubKeys_vect;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "511:             pubKeys_vect.push_back(publicKeys[i].asString());",
          "512:         }",
          "516:         result[\"SecretShare\"] = s;",
          "518:     } catch (RPCException &_e) {",
          "520:         result[\"status\"] = _e.status;",
          "521:         result[\"errorMessage\"] = _e.errString;",
          "522:         result[\"SecretShare\"] = \"\";",
          "",
          "[Removed Lines]",
          "514:         std::string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "",
          "[Added Lines]",
          "510:         string s = get_secret_shares(polyName, encr_poly_ptr->c_str(), pubKeys_vect, t, n);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "525:     return result;",
          "526: }",
          "531:   spdlog::info(\"enter DKGVerificationImpl\");",
          "",
          "[Removed Lines]",
          "528: Json::Value DKGVerificationImpl(const std::string& publicShares, const std::string& EthKeyName,",
          "529:                                   const std::string& SecretShare, int t, int n, int ind){",
          "",
          "[Added Lines]",
          "524: Json::Value DKGVerificationImpl(const string& publicShares, const string& EthKeyName,",
          "525:                                   const string& SecretShare, int t, int n, int ind){",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "550:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid length of public shares\");",
          "551:     }",
          "555:     if ( !VerifyShares(publicShares.c_str(), SecretShare.c_str(), encryptedKeyHex_ptr->c_str(), t, n, ind )){",
          "556:       result[\"result\"] = false;",
          "557:     }",
          "559:   } catch (RPCException &_e) {",
          "561:     result[\"status\"] = _e.status;",
          "562:     result[\"errorMessage\"] = _e.errString;",
          "563:     result[\"result\"] = false;",
          "",
          "[Removed Lines]",
          "553:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Added Lines]",
          "549:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "566:   return result;",
          "567: }",
          "571:   spdlog::info(\"CreateBLSPrivateKeyImpl entered\");",
          "",
          "[Removed Lines]",
          "569: Json::Value CreateBLSPrivateKeyImpl(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n){",
          "",
          "[Added Lines]",
          "565: Json::Value CreateBLSPrivateKeyImpl(const string & BLSKeyName, const string& EthKeyName, const string& polyName, const string & SecretShare, int t, int n){",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "593:     if( !check_n_t(t, n)){",
          "594:       throw RPCException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");",
          "595:     }",
          "597:     if (DEBUG_PRINT) {",
          "598:       spdlog::info(\"secret shares from json are - {}\", SecretShare);",
          "599:     }",
          "603:     bool res = CreateBLSShare(BLSKeyName, SecretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "604:      if (res){",
          "",
          "[Removed Lines]",
          "596:     std::vector<std::string> sshares_vect;",
          "601:     std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "[Added Lines]",
          "592:     vector<string> sshares_vect;",
          "597:     shared_ptr<string> encryptedKeyHex_ptr = readFromDb(EthKeyName);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "609:      }",
          "611:      for ( int i = 0; i < n; i++){",
          "613:        LevelDB::getLevelDb() -> deleteDHDKGKey(name);",
          "615:        LevelDB::getLevelDb() -> deleteKey(shareG2_name);",
          "616:      }",
          "618:   } catch (RPCException &_e) {",
          "620:     result[\"status\"] = _e.status;",
          "621:     result[\"errorMessage\"] = _e.errString;",
          "",
          "[Removed Lines]",
          "612:        std::string name = polyName + \"_\" + std::to_string(i) + \":\";",
          "614:        std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(i) + \":\";",
          "",
          "[Added Lines]",
          "608:        string name = polyName + \"_\" + to_string(i) + \":\";",
          "610:        string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "625:   return result;",
          "626: }",
          "630:     Json::Value result;",
          "631:     result[\"status\"] = 0;",
          "",
          "[Removed Lines]",
          "628: Json::Value GetBLSPublicKeyShareImpl(const std::string & BLSKeyName){",
          "",
          "[Added Lines]",
          "624: Json::Value GetBLSPublicKeyShareImpl(const string & BLSKeyName){",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "635:       if ( !checkName(BLSKeyName, \"BLS_KEY\")){",
          "636:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "637:       }",
          "639:       if (DEBUG_PRINT) {",
          "640:         spdlog::info(\"encr_bls_key_share is {}\", *encryptedKeyHex_ptr);",
          "641:         spdlog::info(\"length is {}\", encryptedKeyHex_ptr->length());",
          "644:       }",
          "646:       for ( uint8_t i = 0; i < 4; i++) {",
          "647:         result[\"BLSPublicKeyShare\"][i] = public_key_vect.at(i);",
          "648:       }",
          "650:     } catch (RPCException &_e) {",
          "652:         result[\"status\"] = _e.status;",
          "653:         result[\"errorMessage\"] = _e.errString;",
          "654:     }",
          "",
          "[Removed Lines]",
          "638:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "645:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "651:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "634:       shared_ptr<string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "641:       vector<string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "647:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "658:     return result;",
          "659: }",
          "662:   Json::Value result;",
          "663:   result[\"status\"] = 0;",
          "664:   result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "661: Json::Value ComplaintResponseImpl(const std::string& polyName, int ind){",
          "",
          "[Added Lines]",
          "657: Json::Value ComplaintResponseImpl(const string& polyName, int ind){",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "666:     if ( !checkName(polyName, \"POLY\")){",
          "667:       throw RPCException(INVALID_POLY_NAME, \"Invalid polynomial name\");",
          "668:     }",
          "674:     result[\"share*G2\"] = *shareG2_ptr;",
          "675:     result[\"DHKey\"] = DHKey;",
          "677:   } catch (RPCException &_e) {",
          "679:     result[\"status\"] = _e.status;",
          "680:     result[\"errorMessage\"] = _e.errString;",
          "681:   }",
          "",
          "[Removed Lines]",
          "669:     std::string shareG2_name = \"shareG2_\" + polyName + \"_\" + std::to_string(ind) + \":\";",
          "670:     std::shared_ptr<std::string> shareG2_ptr = readFromDb(shareG2_name);",
          "672:     std::string DHKey = decrypt_DHKey(polyName, ind);",
          "678:     std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "665:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(ind) + \":\";",
          "666:     shared_ptr<string> shareG2_ptr = readFromDb(shareG2_name);",
          "668:     string DHKey = decrypt_DHKey(polyName, ind);",
          "674:     cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "685: }",
          "688:     Json::Value result;",
          "689:     result[\"status\"] = 0;",
          "690:     result[\"errorMessage\"] = \"\";",
          "691:     try {",
          "692:         spdlog::info(\"MultG2Impl try \");",
          "694:         for ( uint8_t i = 0; i < 4; i++) {",
          "695:             result[\"x*G2\"][i] = xG2_vect.at(i);",
          "696:         }",
          "698:     } catch (RPCException &_e) {",
          "700:         result[\"status\"] = _e.status;",
          "701:         result[\"errorMessage\"] = _e.errString;",
          "702:     }",
          "",
          "[Removed Lines]",
          "687: Json::Value MultG2Impl(const std::string& x){",
          "693:         std::vector<std::string> xG2_vect = mult_G2(x);",
          "699:         std::cerr << \" err str \" << _e.errString << std::endl;",
          "",
          "[Added Lines]",
          "683: Json::Value MultG2Impl(const string& x){",
          "689:         vector<string> xG2_vect = mult_G2(x);",
          "695:         cerr << \" err str \" << _e.errString << endl;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "704:     return result;",
          "705: }",
          "708:     Json::Value result;",
          "711:     result[\"IsExist\"] = true;",
          "712:     if (poly_str_ptr == nullptr){",
          "713:         result[\"IsExist\"] = false;",
          "",
          "[Removed Lines]",
          "707: Json::Value IsPolyExistsImpl(const std::string& polyName){",
          "710:     std::shared_ptr<std::string> poly_str_ptr = LevelDB::getLevelDb()->readString(polyName);",
          "",
          "[Added Lines]",
          "703: Json::Value IsPolyExistsImpl(const string& polyName){",
          "706:     shared_ptr<string> poly_str_ptr = LevelDB::getLevelDb()->readString(polyName);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "726: }",
          "730:   spdlog::info(\"entered generateDKGPoly\");",
          "731:   lock_guard<recursive_mutex> lock(m);",
          "732:   return generateDKGPolyImpl(polyName, t);",
          "733: }",
          "736:   lock_guard<recursive_mutex> lock(m);",
          "737:   return getVerificationVectorImpl(polyName, t, n);",
          "738: }",
          "741:     lock_guard<recursive_mutex> lock(m);",
          "742:     return getSecretShareImpl(polyName, publicKeys, t, n);",
          "743: }",
          "746:   lock_guard<recursive_mutex> lock(m);",
          "747:   return DKGVerificationImpl(publicShares, EthKeyName, SecretShare, t, n, index);",
          "748: }",
          "751:   lock_guard<recursive_mutex> lock(m);",
          "752:   return CreateBLSPrivateKeyImpl(BLSKeyName, EthKeyName, polyName, SecretShare, t, n);",
          "753: }",
          "756:     lock_guard<recursive_mutex> lock(m);",
          "757:     return GetBLSPublicKeyShareImpl(BLSKeyName);",
          "758: }",
          "",
          "[Removed Lines]",
          "729: Json::Value SGXWalletServer::generateDKGPoly(const std::string& polyName, int t){",
          "735: Json::Value SGXWalletServer::getVerificationVector(const std::string& polyName, int t, int n){",
          "740: Json::Value SGXWalletServer::getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n){",
          "745: Json::Value  SGXWalletServer::DKGVerification( const std::string& publicShares, const std::string& EthKeyName, const std::string& SecretShare, int t, int n, int index){",
          "750: Json::Value SGXWalletServer::CreateBLSPrivateKey(const std::string & BLSKeyName, const std::string& EthKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n){",
          "755: Json::Value SGXWalletServer::GetBLSPublicKeyShare(const std::string & BLSKeyName){",
          "",
          "[Added Lines]",
          "725: Json::Value SGXWalletServer::generateDKGPoly(const string& polyName, int t){",
          "731: Json::Value SGXWalletServer::getVerificationVector(const string& polyName, int t, int n){",
          "736: Json::Value SGXWalletServer::getSecretShare(const string& polyName, const Json::Value& publicKeys, int t, int n){",
          "741: Json::Value  SGXWalletServer::DKGVerification( const string& publicShares, const string& EthKeyName, const string& SecretShare, int t, int n, int index){",
          "746: Json::Value SGXWalletServer::CreateBLSPrivateKey(const string & BLSKeyName, const string& EthKeyName, const string& polyName, const string& SecretShare, int t, int n){",
          "751: Json::Value SGXWalletServer::GetBLSPublicKeyShare(const string & BLSKeyName){",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "764:     return generateECDSAKeyImpl();",
          "765: }",
          "768:   lock_guard<recursive_mutex> lock(m);",
          "769:   return renameECDSAKeyImpl(KeyName, tempKeyName);",
          "770: }",
          "773:   lock_guard<recursive_mutex> lock(m);",
          "774:   return getPublicECDSAKeyImpl(_keyName);",
          "775: }",
          "779:   lock_guard<recursive_mutex> lock(m);",
          "780:   spdlog::info(\"entered ecdsaSignMessageHash\");",
          "781:   if (DEBUG_PRINT) {",
          "",
          "[Removed Lines]",
          "767: Json::Value SGXWalletServer::renameECDSAKey(const std::string& KeyName, const std::string& tempKeyName){",
          "772: Json::Value SGXWalletServer::getPublicECDSAKey(const std::string &_keyName) {",
          "778: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const std::string &_keyName, const std::string &messageHash ) {",
          "",
          "[Added Lines]",
          "763: Json::Value SGXWalletServer::renameECDSAKey(const string& KeyName, const string& tempKeyName){",
          "768: Json::Value SGXWalletServer::getPublicECDSAKey(const string &_keyName) {",
          "774: Json::Value SGXWalletServer::ecdsaSignMessageHash(int base, const string &_keyName, const string &messageHash ) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "788: Json::Value",
          "790:                                     int index) {",
          "791:     lock_guard<recursive_mutex> lock(m);",
          "792:     return importBLSKeyShareImpl(_keyShare, _keyShareName, t, n, index );",
          "793: }",
          "796:                                         int signerIndex) {",
          "797:     lock_guard<recursive_mutex> lock(m);",
          "798:     return blsSignMessageHashImpl(keyShareName, messageHash, t, n, signerIndex);",
          "799: }",
          "802:   lock_guard<recursive_mutex> lock(m);",
          "803:   return importECDSAKeyImpl(key, keyName);",
          "804: }",
          "807:   lock_guard<recursive_mutex> lock(m);",
          "808:   return ComplaintResponseImpl(polyName, ind);",
          "809: }",
          "812:     lock_guard<recursive_mutex> lock(m);",
          "813:     return MultG2Impl(x);",
          "814: }",
          "817:     lock_guard<recursive_mutex> lock(m);",
          "818:     return IsPolyExistsImpl(polyName);",
          "819: }",
          "",
          "[Removed Lines]",
          "789: SGXWalletServer::importBLSKeyShare(const std::string &_keyShare, const std::string &_keyShareName, int t, int n,",
          "795: Json::Value SGXWalletServer::blsSignMessageHash(const std::string &keyShareName, const std::string &messageHash, int t, int n,",
          "801: Json::Value SGXWalletServer::importECDSAKey(const std::string &key, const std::string &keyName) {",
          "806: Json::Value SGXWalletServer::ComplaintResponse(const std::string& polyName, int ind){",
          "811: Json::Value SGXWalletServer::MultG2(const std::string& x){",
          "816: Json::Value SGXWalletServer::IsPolyExists(const std::string& polyName){",
          "",
          "[Added Lines]",
          "785: SGXWalletServer::importBLSKeyShare(const string &_keyShare, const string &_keyShareName, int t, int n,",
          "791: Json::Value SGXWalletServer::blsSignMessageHash(const string &keyShareName, const string &messageHash, int t, int n,",
          "797: Json::Value SGXWalletServer::importECDSAKey(const string &key, const string &keyName) {",
          "802: Json::Value SGXWalletServer::ComplaintResponse(const string& polyName, int ind){",
          "807: Json::Value SGXWalletServer::MultG2(const string& x){",
          "812: Json::Value SGXWalletServer::IsPolyExists(const string& polyName){",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "856:     val[\"index\"] = index;",
          "857:     val[\"n'\"] = n;",
          "861:     auto key = \"BLSKEYSHARE:\" + _keyShareName;",
          "",
          "[Removed Lines]",
          "859:     std::string json = writer.write(val);",
          "",
          "[Added Lines]",
          "855:     string json = writer.write(val);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "872:   Json::FastWriter writer;",
          "874:   val[\"value\"] = value;",
          "877:   auto key = Name;",
          "",
          "[Removed Lines]",
          "875:   std::string json = writer.write(val);",
          "",
          "[Added Lines]",
          "871:   string json = writer.write(val);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <iostream>",
          "30: #include \"spdlog/spdlog.h\"",
          "34:     size_t prev = 0, pos = 0;",
          "35:     do {",
          "36:         pos = str.find(delim, prev);",
          "39:         if (!token.empty()) tokens.push_back(token);",
          "40:         prev = pos + delim.length();",
          "41:     } while (pos < str.length() && prev < str.length());",
          "",
          "[Removed Lines]",
          "32: std::vector<std::string> SplitString(const std::string& str, const std::string& delim = \":\"){",
          "33:     std::vector<std::string> tokens;",
          "37:         if (pos == std::string::npos) pos = str.length();",
          "38:         std::string token = str.substr(prev, pos-prev);",
          "",
          "[Added Lines]",
          "31: #include \"common.h\"",
          "33: vector<string> SplitString(const string& str, const string& delim = \":\"){",
          "34:     vector<string> tokens;",
          "38:         if (pos == string::npos) pos = str.length();",
          "39:         string token = str.substr(prev, pos-prev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     return tokens;",
          "44: }",
          "48:   if (parts.size() != 2) {",
          "49:     spdlog::info(\"ECDSAKeyName num parts != 2\");",
          "50:     return false;",
          "",
          "[Removed Lines]",
          "46: bool checkECDSAKeyName(const std::string& keyName) {",
          "47:   std::vector<std::string> parts = SplitString(keyName);",
          "",
          "[Added Lines]",
          "47: bool checkECDSAKeyName(const string& keyName) {",
          "48:   vector<string> parts = SplitString(keyName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   return true;",
          "70: }",
          "73:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "74:     return false;",
          "75:   }",
          "",
          "[Removed Lines]",
          "72: bool checkHex(const std::string& hex, const uint32_t sizeInBytes){",
          "",
          "[Added Lines]",
          "73: bool checkHex(const string& hex, const uint32_t sizeInBytes){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:   return true;",
          "87: }",
          "91:     if ( parts.size() != 7) {",
          "92:         spdlog::info(\"parts.size() != 7\");",
          "93:         return false;",
          "",
          "[Removed Lines]",
          "89: bool checkName (const std::string& Name, const std::string& prefix){",
          "90:     std::vector<std::string> parts = SplitString(Name);",
          "",
          "[Added Lines]",
          "90: bool checkName (const string& Name, const string& prefix){",
          "91:     vector<string> parts = SplitString(Name);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: #include \"BLSPublicKey.h\"",
          "81: #include <thread>",
          "87:     mpz_t t;",
          "88:     mpz_init(t);",
          "",
          "[Removed Lines]",
          "85: std::string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "[Added Lines]",
          "82: #include \"common.h\"",
          "86: string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     char *tmp = mpz_get_str(arr, 10, t);",
          "95:     mpz_clear(t);",
          "98: }",
          "",
          "[Removed Lines]",
          "97:     return std::string(tmp);",
          "",
          "[Added Lines]",
          "98:     return string(tmp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:   sgx_destroy_enclave(eid);",
          "314: }",
          "319:   delim.push_back(symbol);",
          "321:   size_t prev = 0, pos = 0;",
          "322:   do",
          "323:   {",
          "324:     pos = str.find(delim, prev);",
          "327:     if (!token.empty()) {",
          "328:       libff::alt_bn128_Fr koef(token.c_str());",
          "329:       tokens.push_back(koef);",
          "",
          "[Removed Lines]",
          "316: std::vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "317:   std::string str(koefs);",
          "318:   std::string delim;",
          "320:   std::vector<libff::alt_bn128_Fr> tokens;",
          "325:     if (pos == std::string::npos) pos = str.length();",
          "326:     std::string token = str.substr(prev, pos-prev);",
          "",
          "[Added Lines]",
          "317: vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "318:   string str(koefs);",
          "319:   string delim;",
          "321:   vector<libff::alt_bn128_Fr> tokens;",
          "326:     if (pos == string::npos) pos = str.length();",
          "327:     string token = str.substr(prev, pos-prev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:   return tokens;",
          "336: }",
          "339:   libff::init_alt_bn128_params();",
          "342:   delim.push_back(symbol);",
          "344:   size_t prev = 0, pos = 0;",
          "345:   do",
          "346:   {",
          "347:     pos = str.find(delim, prev);",
          "350:     if (!token.empty()) {",
          "352:       G2_strings.push_back(koef);",
          "353:     }",
          "354:     prev = pos + delim.length();",
          "",
          "[Removed Lines]",
          "338: std::vector<std::string> SplitStringTest(const char* koefs, const char symbol){",
          "340:   std::string str(koefs);",
          "341:   std::string delim;",
          "343:   std::vector<std::string> G2_strings;",
          "348:     if (pos == std::string::npos) pos = str.length();",
          "349:     std::string token = str.substr(prev, pos-prev);",
          "351:       std::string koef(token.c_str());",
          "",
          "[Added Lines]",
          "339: vector<string> SplitStringTest(const char* koefs, const char symbol){",
          "341:   string str(koefs);",
          "342:   string delim;",
          "344:   vector<string> G2_strings;",
          "349:     if (pos == string::npos) pos = str.length();",
          "350:     string token = str.substr(prev, pos-prev);",
          "352:       string koef(token.c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   return G2_strings;",
          "359: }",
          "362:   libff::init_alt_bn128_params();",
          "363:   libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "364:   koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "",
          "[Removed Lines]",
          "361: libff::alt_bn128_G2 VectStringToG2(const std::vector<std::string>& G2_str_vect){",
          "",
          "[Added Lines]",
          "362: libff::alt_bn128_G2 VectStringToG2(const vector<string>& G2_str_vect){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "406:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "407:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "411:  char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "412:  status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "",
          "[Removed Lines]",
          "409:   std::vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "",
          "[Added Lines]",
          "410:   vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "416:  signatures::Dkg dkg_obj(t,n);",
          "420:  printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "421:  for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "422:    libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "",
          "[Removed Lines]",
          "418:  std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "419:  std::vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "",
          "[Added Lines]",
          "419:  vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "420:  vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:   printf(\" LEN: %d \\n\", strlen(public_shares));",
          "468:   printf(\" result: %s \\n\", public_shares);",
          "472:   for ( int i = 0; i < G2_strings.size(); i++){",
          "474:     libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "477:     pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "478:   }",
          "",
          "[Removed Lines]",
          "470:   std::vector <std::string> G2_strings = SplitString( public_shares, ',');",
          "471:   std::vector <libff::alt_bn128_G2> pub_shares_G2;",
          "473:     std::vector <std::string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "[Added Lines]",
          "471:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "472:   vector <libff::alt_bn128_G2> pub_shares_G2;",
          "474:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "485:   signatures::Dkg dkg_obj(t,n);",
          "489:   printf(\"calculated public shares (X.c0): \\n\");",
          "490:   for ( int  i = 0; i < pub_shares_dkg.size(); i++){",
          "491:     libff::alt_bn128_G2 el = pub_shares_dkg.at(i);",
          "",
          "[Removed Lines]",
          "487:   std::vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "488:   std::vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "",
          "[Added Lines]",
          "488:   vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "489:   vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "530:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "531:   REQUIRE(status == SGX_SUCCESS);",
          "534:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "535:   REQUIRE(status == SGX_SUCCESS);",
          "538:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "539:   char *pub_key_x = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "532:   std::cerr << \" poly generated\" << std::endl;",
          "536:   std::cerr << \" poly set\" << std::endl;",
          "",
          "[Added Lines]",
          "533:   cerr << \" poly generated\" << endl;",
          "537:   cerr << \" poly set\" << endl;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "546:   REQUIRE(status == SGX_SUCCESS);",
          "547:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "550: }",
          "552: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "",
          "[Removed Lines]",
          "549:   std::cerr << \"secret share is \" << result << std::endl;",
          "",
          "[Added Lines]",
          "550:   cerr << \"secret share is \" << result << endl;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "568:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "569:   REQUIRE(status == SGX_SUCCESS);",
          "572:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "573:   REQUIRE(status == SGX_SUCCESS);",
          "576:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "577:   char *pub_key_x = (char *)calloc(1024, 1);",
          "",
          "[Removed Lines]",
          "570:   std::cerr << \" poly generated\" << std::endl;",
          "574:   std::cerr << \" poly set\" << std::endl;",
          "",
          "[Added Lines]",
          "571:   cerr << \" poly generated\" << endl;",
          "575:   cerr << \" poly set\" << endl;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "585:   REQUIRE(status == SGX_SUCCESS);",
          "586:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "589: }",
          "",
          "[Removed Lines]",
          "588:   std::cerr << \"secret share is \" << result << std::endl;",
          "",
          "[Added Lines]",
          "589:   cerr << \"secret share is \" << result << endl;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "723:   char *encryptedKeyHex =",
          "724:       \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000813f8390f6228a568e181a4dadb6508e3e66f5247175d65dbd0d8c7fbfa4df45000000fdc044ae0cd79faaf41e8a7abb412790476738a98b5b6ce95fa1a32db5551b0a0d867305f4de558c64fee730a1f62394633c7d4ca65e3a40b7883e89c2801c61918b01c5de8624a52963df6f4de8581bcbdd2f9b69720d4cc764e03a04c7a99314bfdb5d2d55deda2ca40cd691f093fb2ecbae24cdacdd4d5de93189c6dfd6792d7b95bd5e330aec3538e7a85d15793\"; // encryptTestKey();",
          "728:   sgx_destroy_enclave(eid);",
          "729: }",
          "",
          "[Removed Lines]",
          "726:   std::vector<std::string> result = GetBLSPubKey(encryptedKeyHex);",
          "",
          "[Added Lines]",
          "727:   vector<string> result = GetBLSPubKey(encryptedKeyHex);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "734: using namespace jsonrpc;",
          "735: using namespace std;",
          "738:   mpz_t num;",
          "739:   mpz_init(num);",
          "740:   mpz_set_str(num, dec.c_str(), 10);",
          "",
          "[Removed Lines]",
          "737: std::string ConvertDecToHex(std::string dec, int numBytes = 32){",
          "",
          "[Added Lines]",
          "738: string ConvertDecToHex(string dec, int numBytes = 32){",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "742:   char tmp[mpz_sizeinbase (num, 16) + 2];",
          "743:   char * hex = mpz_get_str(tmp, 16, num);",
          "746:   int n_zeroes = numBytes * 2 - result.length();",
          "747:   result.insert(0, n_zeroes, '0');",
          "",
          "[Removed Lines]",
          "745:   std::string result = hex;",
          "",
          "[Added Lines]",
          "746:   string result = hex;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "753: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "754:   is_sgx_https = 0;",
          "755:   DEBUG_PRINT = 1;",
          "757:   init_all(false, false);",
          "758:   cerr << \"Server inited\" << endl;",
          "759:   HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "756:   std::cerr<< \"test started\" << std::endl;",
          "",
          "[Added Lines]",
          "757:   cerr<< \"test started\" << endl;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "770:   Json::Value secretShares[n];",
          "771:   Json::Value pubBLSKeys[n];",
          "772:   Json::Value BLSSigShares[n];",
          "776:   for ( uint8_t i = 0; i < n; i++){",
          "777:     EthKeys[i] = c.generateECDSAKey();",
          "779:     c.generateDKGPoly(polyName, t);",
          "780:     poly_names[i] = polyName;",
          "781:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "783:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "784:   }",
          "",
          "[Removed Lines]",
          "773:   std::vector<std::string> pubShares(n);",
          "774:   std::vector<std::string> poly_names(n);",
          "778:     std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "782:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "",
          "[Added Lines]",
          "774:   vector<string> pubShares(n);",
          "775:   vector<string> poly_names(n);",
          "779:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + to_string(i) + \":DKG_ID:0\";",
          "783:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "788:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "789:     for ( uint8_t k = 0; k < t; k++ ) {",
          "790:       for (uint8_t j = 0; j < 4; j++) {",
          "792:         pubShares[i] += ConvertDecToHex(pubShare);",
          "793:       }",
          "794:     }",
          "797:   }",
          "799:   Json::Value ComplaintResponse = c.ComplaintResponse(poly_names[1], 0);",
          "803:   int k = 0;",
          "809:   for ( int i = 0; i < n; i++)",
          "810:     for ( int j = 0; j < n; j++){",
          "814:        secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192);",
          "815:        bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "816:        k++;",
          "818:        REQUIRE(res);",
          "820:        pSharesBad[i][0] = 'q';",
          "821:        Json::Value wrongVerif = c.DKGVerification(pSharesBad[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j);",
          "822:        res = wrongVerif[\"result\"].asBool();",
          "823:        REQUIRE(!res);",
          "826:     }",
          "828:   BLSSigShareSet sigShareSet(t, n);",
          "833:   uint64_t binLen;",
          "834:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "835:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "836:   }",
          "841:   for ( int i = 0; i < t; i++){",
          "846:     cout << c.CreateBLSPrivateKey(blsName, EthKeys[i][\"KeyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "847:     pubBLSKeys[i] = c.GetBLSPublicKeyShare(blsName);",
          "850:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "853:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "857:     for ( uint8_t j = 0; j < 4; j++){",
          "858:         pubKey_vect.push_back(pubBLSKeys[i][\"BLSPublicKeyShare\"][j].asString());",
          "859:     }",
          "865:   }",
          "869:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "875: }",
          "",
          "[Removed Lines]",
          "791:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "800:   std::cerr << \"share * G2 is \" << ComplaintResponse[\"share*G2\"].asString();",
          "801:   std::cerr << \"DHKey is \" << ComplaintResponse[\"DHKey\"].asString();",
          "805:   std::vector < std::string> secShares_vect(n);",
          "807:   std::vector <std::string> pSharesBad(pubShares);",
          "812:        std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "813:        std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192);",
          "817:        std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "824:        std::cerr << \"wrong verification \" << wrongVerif << std::endl;",
          "830:   std::string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "832:   auto hash_arr = std::make_shared<std::array<uint8_t, 32>>();",
          "839:   std::map<size_t, std::shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "842:     std::string endName = poly_names[i].substr(4);",
          "843:     std::string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "844:     std::string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "848:     std::cerr << \"BLS KEY SHARE NAME IS \" << blsName << std::endl;",
          "851:     std::cerr << i << \" sig share is created \" << std::endl;",
          "852:     std::shared_ptr<std::string> sig_share_ptr = std::make_shared<std::string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "854:     sigShareSet.addSigShare(std::make_shared<BLSSigShare>(sig));",
          "856:     std::vector<std::string> pubKey_vect;",
          "860:     BLSPublicKeyShare pubKey(std::make_shared<std::vector<std::string>>(pubKey_vect), t, n);",
          "861:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, std::make_shared<BLSSigShare>(sig) , t, n));",
          "863:     koefs_pkeys_map[i+1] = std::make_shared<BLSPublicKeyShare>(pubKey);",
          "867:   std::shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "868:   BLSPublicKey common_public(std::make_shared<std::map<size_t, std::shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "871:   std::cout << \"try to get bls public key\" << std::endl;",
          "872:   std::cout << c.GetBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "[Added Lines]",
          "792:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "801:   cerr << \"share * G2 is \" << ComplaintResponse[\"share*G2\"].asString();",
          "802:   cerr << \"DHKey is \" << ComplaintResponse[\"DHKey\"].asString();",
          "806:   vector < string> secShares_vect(n);",
          "808:   vector <string> pSharesBad(pubShares);",
          "813:        cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << endl;",
          "814:        string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192);",
          "818:        cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "825:        cerr << \"wrong verification \" << wrongVerif << endl;",
          "831:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "833:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "840:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "843:     string endName = poly_names[i].substr(4);",
          "844:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "845:     string secretShare = secretShares[i][\"SecretShare\"].asString();",
          "849:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "852:     cerr << i << \" sig share is created \" << endl;",
          "853:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "855:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "857:     vector<string> pubKey_vect;",
          "861:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "862:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "864:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "868:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "869:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "872:   cout << \"try to get bls public key\" << endl;",
          "873:   cout << c.GetBLSPublicKeyShare(\"BLS_KEY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:0\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "905:         cout << genKey << endl;",
          "906:         cout << c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "907:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "",
          "[Removed Lines]",
          "908:         cout << getPubKey << std::endl;",
          "",
          "[Added Lines]",
          "909:         cout << getPubKey << endl;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "940:       std::string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "941:       std::string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "942:       std::string share = share_big.substr(0, 192);",
          "944:       std::string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "",
          "[Added Lines]",
          "941:       string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "942:       string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "943:       string share = share_big.substr(0, 192);",
          "945:       string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "956:      std::string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "961:       std::string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "962:       std::string EthKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "[Added Lines]",
          "957:      string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "962:       string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "963:       string EthKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "986:   sgx_destroy_enclave(eid);",
          "987: }",
          "991: void SendRPCRequest(){",
          "993:     HttpClient client(\"http://localhost:1029\");",
          "994:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "995:   reset_db();",
          "",
          "[Removed Lines]",
          "989: std::default_random_engine rand_gen((unsigned int) time(0));",
          "992:     std::cout << \"Hello from thread \" << std::this_thread::get_id() << std::endl;",
          "",
          "[Added Lines]",
          "990: default_random_engine rand_gen((unsigned int) time(0));",
          "993:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1002:   Json::Value secretShares[n];",
          "1003:   Json::Value pubBLSKeys[n];",
          "1004:   Json::Value BLSSigShares[n];",
          "1008:   int schain_id = rand_gen();",
          "1009:   int dkg_id = rand_gen();",
          "1010:   for ( uint8_t i = 0; i < n; i++){",
          "1011:     EthKeys[i] = c.generateECDSAKey();",
          "1013:     c.generateDKGPoly(polyName, t);",
          "1014:     poly_names[i] = polyName;",
          "1015:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1017:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "1018:   }",
          "",
          "[Removed Lines]",
          "1005:   std::vector<std::string> pubShares(n);",
          "1006:   std::vector<std::string> poly_names(n);",
          "1012:     std::string polyName = \"POLY:SCHAIN_ID:\" + std::to_string(schain_id) + \":NODE_ID:\" + std::to_string(i) + \":DKG_ID:\" + std::to_string(dkg_id);",
          "1016:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << std::endl;",
          "",
          "[Added Lines]",
          "1006:   vector<string> pubShares(n);",
          "1007:   vector<string> poly_names(n);",
          "1013:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1017:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1021:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1022:     for ( uint8_t k = 0; k < t; k++ ) {",
          "1023:       for (uint8_t j = 0; j < 4; j++) {",
          "1025:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1026:       }",
          "1027:     }",
          "1030:   }",
          "1036:   int k = 0;",
          "1040:   for ( int i = 0; i < n; i++)",
          "1041:     for ( int j = 0; j < n; j++){",
          "1042:       if ( i != j ){",
          "1045:         secShares_vect[i] +=  secretShares[j][\"SecretShare\"].asString().substr(192*i, 192 );",
          "1046:         bool res = c.DKGVerification(pubShares[i], EthKeys[j][\"KeyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1047:         k++;",
          "1049:         REQUIRE( res );",
          "1050:       }",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1024:         std::string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "1038:   std::vector <std::string> secShares_vect(n);",
          "1043:         std::cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << std::endl;",
          "1044:         std::string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 );",
          "1048:         std::cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << std::endl;",
          "",
          "[Added Lines]",
          "1025:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "1039:   vector <string> secShares_vect(n);",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"SecretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"SecretShare\"].asString().substr(192*j, 192 );",
          "1049:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1055:   is_sgx_https = 0;",
          "1056:   init_all( false, false );",
          "1059:   int num_threads = 16;",
          "1060:   for (int i = 0; i < num_threads; i++){",
          "1062:   }",
          "1064:   for(auto& thread : threads){",
          "",
          "[Removed Lines]",
          "1058:   std::vector<std::thread> threads;",
          "1061:     threads.push_back(std::thread(SendRPCRequest));",
          "",
          "[Added Lines]",
          "1059:   vector<thread> threads;",
          "1062:     threads.push_back(thread(SendRPCRequest));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1087:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1089:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"KeyName\"].asString());",
          "1091:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1092:   REQUIRE(getPubKey[\"PublicKey\"].asString() == genKey[\"PublicKey\"].asString());",
          "1094:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"KeyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1096:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "1118:   sgx_destroy_enclave(eid);",
          "",
          "[Removed Lines]",
          "1090:   cout << getPubKey << std::endl;",
          "1095:   cout << ecdsaSign << std::endl;",
          "",
          "[Added Lines]",
          "1091:   cout << getPubKey << endl;",
          "1096:   cout << ecdsaSign << endl;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1134:   reset_db();",
          "1137:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1139:   Json::Value publicKeys;",
          "",
          "[Removed Lines]",
          "1136:   std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "",
          "[Added Lines]",
          "1137:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1208:   reset_db();",
          "1211:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1213:   Json::Value polyExists = c.IsPolyExists(polyName);",
          "1215:   REQUIRE(polyExists[\"IsExist\"].asBool());",
          "1217:   Json::Value polyDoesNotExist = c.IsPolyExists(\"Vasya\");",
          "1219:   REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "",
          "[Removed Lines]",
          "1210:   std::string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1212:   cout << genPoly << std::endl;",
          "1214:   cout << polyExists << std::endl;",
          "1218:   cout << polyDoesNotExist << std::endl;",
          "",
          "[Added Lines]",
          "1211:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1213:   cout << genPoly << endl;",
          "1215:   cout << polyExists << endl;",
          "1219:   cout << polyDoesNotExist << endl;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b24c03514035424cc2288b99176cf5c1922ac0a",
      "candidate_info": {
        "commit_hash": "5b24c03514035424cc2288b99176cf5c1922ac0a",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/5b24c03514035424cc2288b99176cf5c1922ac0a",
        "files": [
          "DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     if (!encryptKeys)",
          "87:         status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "88:     else",
          "90:     if (errStatus != 0) {",
          "91:         throw SGXException(-666, errMsg.data());",
          "92:     }",
          "",
          "[Removed Lines]",
          "89:         status = trustedGenDkgSecret_aes(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "",
          "[Added Lines]",
          "89:         status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:                                         n);",
          "140:     else {",
          "143:                                             pubShares.data(), t, n);",
          "144:     }",
          "145:     if (errStatus != 0) {",
          "",
          "[Removed Lines]",
          "142:         status = trustedGetPublicShares_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen,",
          "",
          "[Added Lines]",
          "142:         status = trustedGetPublicSharesAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:     if (!encryptKeys)",
          "184:         status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data());",
          "185:     else",
          "188:     if (status != SGX_SUCCESS || errStatus != 0) {",
          "189:         throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "186:         status = trustedSetEncryptedDkgPoly_aes(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "[Added Lines]",
          "186:         status = trustedSetEncryptedDkgPolyAES(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), &encLen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:             trustedGetEncryptedSecretShare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "212:                                            currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "213:         else",
          "215:                                                currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n, i + 1);",
          "216:         if (errStatus != 0) {",
          "217:             throw SGXException(-666, errMsg1.data());",
          "",
          "[Removed Lines]",
          "214:             trustedGetEncryptedSecretShare_aes(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "[Added Lines]",
          "214:             trustedGetEncryptedSecretShareAES(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:     if (!encryptKeys)",
          "266:         trustedDkgVerify(eid, &errStatus, errMsg, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "267:     else",
          "270:     if (result == 2) {",
          "271:         throw SGXException(INVALID_HEX, \"Invalid public shares\");",
          "",
          "[Removed Lines]",
          "268:         trustedDkgVerify_aes(eid, &errStatus, errMsg, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "",
          "[Added Lines]",
          "268:         trustedDkgVerifyAES(eid, &errStatus, errMsg, pshares, encr_sshare, encr_key, decKeyLen, t, ind, &result);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1348: }",
          "1350: void",
          "1353:     char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1354:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "1351: trustedGenDkgSecret_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "[Added Lines]",
          "1351: trustedGenDkgSecretAES(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1392: }",
          "1394: void",
          "1396:                        uint32_t *dec_len) {",
          "1398:     int status = AES_decrypt(encrypted_dkg_secret, dec_len, decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "1395: trustedDecryptDkgSecret_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "1395: trustedDecryptDkgSecretAES(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint8_t *decrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1406: }",
          "1409:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1410:     int status = AES_decrypt(encrypted_poly, *enc_len, decryptedDkgPoly);",
          "",
          "[Removed Lines]",
          "1408: void trustedSetEncryptedDkgPoly_aes(int *errStatus, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "[Added Lines]",
          "1408: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *err_string, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1416:     }",
          "1417: }",
          "1420:                          char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "1422:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "1419: void trustedGetEncryptedSecretShare_aes(int *errStatus, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Added Lines]",
          "1419: void trustedGetEncryptedSecretShareAES(int *errStatus, char *err_string, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1440:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1442:     if (status != SGX_SUCCESS) {",
          "1445:         return;",
          "1446:     }",
          "",
          "[Removed Lines]",
          "1443:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShare_aes)  with status %d\", status);",
          "",
          "[Added Lines]",
          "1443:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShareAES)  with status %d\", status);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1496: }",
          "1499:                            char *public_shares,",
          "1500:                            unsigned _t, unsigned _n) {",
          "",
          "[Removed Lines]",
          "1498: void trustedGetPublicShares_aes(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "[Added Lines]",
          "1498: void trustedGetPublicSharesAES(int *errStatus, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1524: }",
          "1527:                           uint8_t *encrypted_key, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "",
          "[Removed Lines]",
          "1526: void trustedDkgVerify_aes(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "[Added Lines]",
          "1526: void trustedDkgVerifyAES(int *errStatus, char *err_string, const char *public_shares, const char *s_share,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1535:     if (status != SGX_SUCCESS) {",
          "1538:         return;",
          "1539:     }",
          "",
          "[Removed Lines]",
          "1536:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerify_aes)  with status %d\", status);",
          "",
          "[Added Lines]",
          "1536:         snprintf(err_string, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerifyAES)  with status %d\", status);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:                                 [out, count = SMALL_BUF_SIZE] char* key );",
          "231:                                 [user_check] int *errStatus,",
          "232:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "233:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "234:                                 [user_check] uint32_t * enc_len,",
          "235:                                         size_t _t);",
          "238:                                 [user_check] int *errStatus,",
          "239:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "240:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "241:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "242:                                 [user_check] uint32_t* dec_len);",
          "245:                                [user_check] int *errStatus,",
          "246:                                [out, count = SMALL_BUF_SIZE] char* err_string,",
          "247:                                [in, count = 3050] uint8_t* encrypted_poly,",
          "248:                                [user_check] uint64_t* enc_len);",
          "251:                               [user_check]int *errStatus,",
          "252:                               [out, count = SMALL_BUF_SIZE] char *err_string,",
          "253:                               [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "",
          "[Removed Lines]",
          "230:                 public void trustedGenDkgSecret_aes (",
          "237:                 public void trustedDecryptDkgSecret_aes (",
          "244:                 public void trustedSetEncryptedDkgPoly_aes(",
          "250:                 public void trustedGetEncryptedSecretShare_aes(",
          "",
          "[Added Lines]",
          "230:                 public void trustedGenDkgSecretAES (",
          "237:                 public void trustedDecryptDkgSecretAES (",
          "244:                 public void trustedSetEncryptedDkgPolyAES(",
          "250:                 public void trustedGetEncryptedSecretShareAES(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:                               uint8_t _n,",
          "260:                               uint8_t ind);",
          "263:                             [user_check] int *errStatus,",
          "264:                             [out, count = SMALL_BUF_SIZE] char* err_string,",
          "265:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "262:                 public void trustedGetPublicShares_aes(",
          "",
          "[Added Lines]",
          "262:                 public void trustedGetPublicSharesAES(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:                             unsigned _t,",
          "269:                             unsigned _n);",
          "272:                           [user_check] int *errStatus,",
          "273:                           [out, count = SMALL_BUF_SIZE] char* err_string,",
          "274:                           [in, count = 8193] const char* public_shares,",
          "",
          "[Removed Lines]",
          "271:                 public void trustedDkgVerify_aes(",
          "",
          "[Added Lines]",
          "271:                 public void trustedDkgVerifyAES(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d69439296f36286d4f3efba9b9dc077669509330",
      "candidate_info": {
        "commit_hash": "d69439296f36286d4f3efba9b9dc077669509330",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/d69439296f36286d4f3efba9b9dc077669509330",
        "files": [
          "ECDSACrypto.cpp",
          "ECDSACrypto.h",
          "SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c",
          "spec.json",
          "testw.cpp"
        ],
        "message": "Add generate keys to api",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "ECDSACrypto.h||ECDSACrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"ECDSACrypto.h\"",
          "6: #include \"sgxwallet.h\"",
          "9:   char *errMsg = (char *)calloc(1024, 1);",
          "10:   int err_status = 0;",
          "12:   char *pub_key_x = (char *)calloc(1024, 1);",
          "13:   char *pub_key_y = (char *)calloc(1024, 1);",
          "14:   uint32_t enc_len = 0;",
          "16:   status = generate_ecdsa_key(eid, &err_status, errMsg, (uint8_t*)encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "19: }",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex){",
          "",
          "[Removed Lines]",
          "8: char* gen_ecdsa_key(){",
          "11:   char* encr_pr_key = (char *)calloc(1024, 1);",
          "18:   return encr_pr_key;",
          "",
          "[Added Lines]",
          "6: #include \"BLSCrypto.h\"",
          "8: #include <iostream>",
          "10: std::vector<std::string> gen_ecdsa_key(){",
          "13:   uint8_t* encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "19:   std::vector<std::string> keys(2);",
          "21:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "22:   carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "23:   keys.at(0) = hexEncrKey;",
          "24:   keys.at(1) = std::string(pub_key_x) + std::string(pub_key_y);",
          "25:   std::cerr << \"in ECDSACrypto encr key x \" << keys.at(0) << std::endl;",
          "26:   return keys;",
          "",
          "---------------"
        ],
        "ECDSACrypto.h||ECDSACrypto.h": [
          "File: ECDSACrypto.h -> ECDSACrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define EXTERNC",
          "21: std::vector<std::string> ecdsa_sign_hash(const char* encryptedKey, const char* hashHex);",
          "",
          "[Removed Lines]",
          "19: char* gen_ecdsa_key();",
          "",
          "[Added Lines]",
          "19: std::vector<std::string> gen_ecdsa_key();",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     cerr << \"Calling method\" << endl;",
          "159:     try {",
          "162:             throw RPCException(UNKNOWN_ERROR, \"\");",
          "163:         }",
          "166:     } catch (RPCException &_e) {",
          "167:         result[\"status\"] = _e.status;",
          "168:         result[\"errorMessage\"] = _e.errString;",
          "169:     }",
          "173:     return result;",
          "174: }",
          "",
          "[Removed Lines]",
          "157:     char* encryptedKey = nullptr;",
          "160:         encryptedKey = gen_ecdsa_key();",
          "161:         if (encryptedKey == nullptr) {",
          "165:         writeECDSAKey(_keyName, encryptedKey);",
          "171:     result[\"encryptedKey\"] = encryptedKey;",
          "",
          "[Added Lines]",
          "157:     std::vector<std::string>keys;",
          "160:         keys = gen_ecdsa_key();",
          "161:         if (keys.size() == 0 ) {",
          "165:         writeECDSAKey(_keyName, keys.at(0));",
          "171:     result[\"encryptedKey\"] = keys.at(0);",
          "172:     result[\"PublicKey\"] = keys.at(1);",
          "175:     std::cerr << \"in SGXWalletServer encr key x \" << keys.at(0) << std::endl;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:   signature_generate_key(Pkey, skey, curve);",
          "161:   char arr_x[len];",
          "164:   strncpy(pub_key_x, arr_x, 1024);",
          "169:   strncpy(pub_key_y, arr_y, 1024);",
          "171:   char skey_str[mpz_sizeinbase (skey, 10) + 2];",
          "",
          "[Removed Lines]",
          "159:   int len = mpz_sizeinbase (Pkey->x, 10) + 2;",
          "162:   char* px = mpz_get_str(arr_x, 10, Pkey->x);",
          "167:   char arr_y[mpz_sizeinbase (Pkey->y, 10) + 2];",
          "168:   char* py = mpz_get_str(arr_y, 10, Pkey->y);",
          "",
          "[Added Lines]",
          "159:   uint8_t base = 16;",
          "161:   int len = mpz_sizeinbase (Pkey->x, base) + 2;",
          "164:   char* px = mpz_get_str(arr_x, base, Pkey->x);",
          "169:   char arr_y[mpz_sizeinbase (Pkey->y, base) + 2];",
          "170:   char* py = mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "415: TEST_CASE(\"API test\", \"[api_test]\") {",
          "416:     cerr << \"API test started\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:     init_all();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:     cerr << \"Client inited\" << endl;",
          "429:     try {",
          "431:     } catch (JsonRpcException &e) {",
          "432:         cerr << e.what() << endl;",
          "433:     }",
          "",
          "[Removed Lines]",
          "430:         cout << c.generateECDSAKey(\"test_key\") << endl;",
          "",
          "[Added Lines]",
          "430:         cout << c.generateECDSAKey(\"test_key1\") << endl;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5144136b26611a836cd10bffed7513ff2f985ad8",
      "candidate_info": {
        "commit_hash": "5144136b26611a836cd10bffed7513ff2f985ad8",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/5144136b26611a836cd10bffed7513ff2f985ad8",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1491:     SAFE_CHAR_BUF(key, BUF_LEN);SAFE_CHAR_BUF(sig, BUF_LEN);",
          "1500:     }",
          "1502:     enclave_sign(key, _hashX, _hashY, sig);",
          "",
          "[Removed Lines]",
          "1494:     int stat = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "1496:     if (stat != 0) {",
          "1498:         strncpy(signature, errString, BUF_LEN);",
          "1499:         return;",
          "",
          "[Added Lines]",
          "1494:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, BUF_LEN);",
          "1496:     if (status != 0) {",
          "1498:         strncpy(errString, \"AES decrypt failed\", BUF_LEN);",
          "1499:         LOG_ERROR(errString);",
          "1500:         goto clean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1504:     strncpy(signature, sig, BUF_LEN);",
          "1506:     if (strnlen(signature, BUF_LEN) < 10) {",
          "1509:     }",
          "1512: }",
          "1514: void",
          "",
          "[Removed Lines]",
          "1508:         return;",
          "",
          "[Added Lines]",
          "1508:         strncpy(errString, \"Signature too short\", BUF_LEN);",
          "1509:         LOG_ERROR(errString);",
          "1511:         goto clean;",
          "1516:     clean:",
          "1517:     ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1526:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "1529:     }",
          "1531:     int status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
          "1533:     if (status != SGX_SUCCESS) {",
          "1534:         snprintf(errString, BUF_LEN, \"SGX AES encrypt DKG poly failed\");",
          "1537:     }",
          "1541:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
          "1544:     status = AES_decrypt(encrypted_dkg_secret, *enc_len, decr_dkg_secret,",
          "1545:                          DKG_BUFER_LENGTH);",
          "1546:     if (status != SGX_SUCCESS) {",
          "1547:         snprintf(errString, BUF_LEN, \"aes decrypt dkg poly failed\");",
          "1550:     }",
          "1552:     if (strcmp(dkg_secret, decr_dkg_secret) != 0) {",
          "1554:                  \"encrypted poly is not equal to decrypted poly\");",
          "1556:     }",
          "1559: }",
          "1561: void",
          "",
          "[Removed Lines]",
          "1528:         return;",
          "1536:         return;",
          "1549:         return;",
          "1553:         snprintf(errString + strlen(dkg_secret) + 8, BUF_LEN - strlen(dkg_secret) - 8,",
          "",
          "[Added Lines]",
          "1534:         strncpy(errString, \"gen_dkg_poly failed\", BUF_LEN);",
          "1535:         LOG_ERROR(errString);",
          "1536:         goto clean;",
          "1543:         LOG_ERROR(errString);",
          "1545:         goto clean;",
          "1556:         LOG_ERROR(errString);",
          "1558:         goto clean;",
          "1562:         snprintf(errString, BUF_LEN,",
          "1564:         LOG_ERROR(errString);",
          "1566:         goto clean;",
          "1571:     clean:",
          "1572:     ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1578:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1579:         LOG_ERROR(errString);",
          "1582:     }",
          "1585: }",
          "",
          "[Removed Lines]",
          "1581:         return;",
          "",
          "[Added Lines]",
          "1595:         goto clean;",
          "1600:     clean:",
          "1601:     ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1600:     if (status != SGX_SUCCESS) {",
          "1602:         snprintf(errString, BUF_LEN, \"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1604:     }",
          "1607: }",
          "1609: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "",
          "[Removed Lines]",
          "1603:         return;",
          "",
          "[Added Lines]",
          "1620:         LOG_ERROR(errString);",
          "1621:         goto clean;",
          "1626:     clean:",
          "1627:     ;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1630:     uint32_t enc_len;",
          "1635:     }",
          "1638:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1640:     if (status != SGX_SUCCESS) {",
          "1641:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedGetEncryptedSecretShareAES) with status %d\",",
          "1642:                  status);",
          "1645:     }",
          "",
          "[Removed Lines]",
          "1632:     trustedGenerateEcdsaKeyAES(errStatus, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1633:     if (*errStatus != 0) {",
          "1634:         return;",
          "1637:     int status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1644:         return;",
          "",
          "[Added Lines]",
          "1652:     int status;",
          "1654:     trustedGenerateEcdsaKeyAES(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1656:     if (status != 0) {",
          "1657:         snprintf(errString, BUF_LEN, \"trustedGenerateEcdsaKeyAES failed\");",
          "1659:         LOG_ERROR(errString);",
          "1660:         goto clean;",
          "1663:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1670:         LOG_ERROR(errString);",
          "1672:         goto clean;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1654:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "1657:         snprintf(errString, BUF_LEN, \"calc secret share failed\");",
          "1659:     }",
          "1661:     if (calc_secret_shareG2(s_share, s_shareG2) != 0) {",
          "1663:         snprintf(errString, BUF_LEN, \"invalid decr secret share\");",
          "1665:     }",
          "1667:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1658:         return;",
          "1664:         return;",
          "",
          "[Added Lines]",
          "1685:         LOG_ERROR(errString);",
          "1686:         goto clean;",
          "1692:         LOG_ERROR(errString);",
          "1693:         goto clean;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1672:     strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "1675: }",
          "1677: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1706:     clean:",
          "1707:     ;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1694:     if (status != SGX_SUCCESS) {",
          "1695:         snprintf(errString, BUF_LEN, \"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1698:     }",
          "1700:     if (calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0) {",
          "1702:         snprintf(errString, BUF_LEN, \"t does not match polynomial in db\");",
          "1704:     }",
          "1708: }",
          "1710: void trustedDkgVerifyAES(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "",
          "[Removed Lines]",
          "1697:         return;",
          "1703:         return;",
          "",
          "[Added Lines]",
          "1730:         LOG_ERROR(errString);",
          "1731:         goto clean;",
          "1737:         LOG_ERROR(errString);",
          "1738:         goto clean;",
          "1743:     clean:",
          "1744:     ;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1722:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "1725:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "1727:     if (status != SGX_SUCCESS) {",
          "1728:         snprintf(errString, BUF_LEN, \"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\", status);",
          "1731:     }",
          "1733:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "1730:         return;",
          "",
          "[Added Lines]",
          "1761:     mpz_t s;",
          "1762:     mpz_init(s);",
          "1769:         LOG_ERROR(errString);",
          "1770:         goto clean;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1739:     session_key_recover(skey, s_share, common_key);",
          "1742:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
          "1744:     xor_decrypt(common_key, encr_sshare, decr_sshare);",
          "1749:     if (mpz_set_str(s, decr_sshare, 16) == -1) {",
          "1751:         snprintf(errString, BUF_LEN, \"invalid decr secret share\");",
          "1754:     }",
          "1763:     mpz_clear(s);",
          "1764: }",
          "",
          "[Removed Lines]",
          "1747:     mpz_t s;",
          "1748:     mpz_init(s);",
          "1752:         mpz_clear(s);",
          "1753:         return;",
          "1759:     snprintf(errString, BUF_LEN, \"public shares %s\", public_shares);",
          "",
          "[Added Lines]",
          "1788:         LOG_ERROR(errString);",
          "1789:         goto clean;",
          "1796:     clean:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1775:     CHECK_STATE(encryptedPrivateKey);",
          "1776:     CHECK_STATE(encr_bls_key);",
          "1779:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "1781:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "1782:     if (status != SGX_SUCCESS) {",
          "1784:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1786:     }",
          "1787:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1789:     int num_shares = strlen(s_shares) / 192;",
          "1795:     for (int i = 0; i < num_shares; i++) { SAFE_CHAR_BUF(encr_sshare, 65);",
          "1796:         strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "1797:         encr_sshare[64] = 0;",
          "",
          "[Removed Lines]",
          "1785:         return;",
          "1791:     mpz_t sum;",
          "1792:     mpz_init(sum);",
          "1793:     mpz_set_ui(sum, 0);",
          "",
          "[Added Lines]",
          "1814:     mpz_t sum;",
          "1815:     mpz_init(sum);",
          "1816:     mpz_set_ui(sum, 0);",
          "1818:     mpz_t q;",
          "1819:     mpz_init(q);",
          "1820:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "1822:     mpz_t bls_key;",
          "1823:     mpz_init(bls_key);",
          "1830:         LOG_ERROR(errString);",
          "1831:         goto clean;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1818:             LOG_ERROR(errString);",
          "1820:             mpz_clear(decr_secret_share);",
          "1824:         }",
          "1826:         mpz_addmul_ui(sum, decr_secret_share, 1);",
          "1827:         mpz_clear(decr_secret_share);",
          "1828:     }",
          "1837:     mpz_mod(bls_key, sum, q);",
          "1839:     SAFE_CHAR_BUF(key_share, BLS_KEY_LENGTH);",
          "1843:     mpz_get_str(arr_skey_str, 16, bls_key);",
          "1844:     int n_zeroes = 64 - strlen(arr_skey_str);",
          "",
          "[Removed Lines]",
          "1821:             mpz_clear(sum);",
          "1823:             return;",
          "1830:     mpz_t q;",
          "1831:     mpz_init(q);",
          "1832:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "1834:     mpz_t bls_key;",
          "1835:     mpz_init(bls_key);",
          "1841:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(bls_key, 16) + 2);",
          "",
          "[Added Lines]",
          "1863:             goto clean;",
          "1875:     SAFE_CHAR_BUF(arr_skey_str, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1853:     if (status != SGX_SUCCESS) {",
          "1855:         snprintf(errString, BUF_LEN, \"aes encrypt bls private key failed with status %d \", status);",
          "1862:     }",
          "1867:     mpz_clear(bls_key);",
          "1868:     mpz_clear(sum);",
          "1869:     mpz_clear(q);",
          "",
          "[Removed Lines]",
          "1857:         mpz_clear(bls_key);",
          "1858:         mpz_clear(sum);",
          "1859:         mpz_clear(q);",
          "1861:         return;",
          "",
          "[Added Lines]",
          "1890:         LOG_ERROR(errString);",
          "1891:         goto clean;",
          "1898:     clean:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1886:     if (status != SGX_SUCCESS) {",
          "1888:         snprintf(errString, BUF_LEN, \"aes_decrypt failed with status %d\", status);",
          "1890:     }",
          "1892:     skey_hex[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "[Removed Lines]",
          "1889:         return;",
          "",
          "[Added Lines]",
          "1921:         LOG_ERROR(errString);",
          "1922:         goto clean;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1895:         LOG_ERROR(skey_hex);",
          "1897:         snprintf(errString, BUF_LEN, \"could not calculate bls public key\");",
          "1899:     }",
          "1902: }",
          "",
          "[Removed Lines]",
          "1898:         return;",
          "",
          "[Added Lines]",
          "1931:         LOG_ERROR(errString);",
          "1932:         goto clean;",
          "1937:     clean:",
          "1938:     ;",
          "",
          "---------------"
        ]
      }
    }
  ]
}