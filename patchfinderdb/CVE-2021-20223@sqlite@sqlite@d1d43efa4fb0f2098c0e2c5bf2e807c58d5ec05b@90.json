{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d48eafb984b7e034dbc6a7558174fda36547ae2c",
      "candidate_info": {
        "commit_hash": "d48eafb984b7e034dbc6a7558174fda36547ae2c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d48eafb984b7e034dbc6a7558174fda36547ae2c",
        "files": [
          "ext/expert/sqlite3expert.c",
          "manifest",
          "manifest.uuid",
          "src/vdbevtab.c"
        ],
        "message": "Fix another build problem for SQLITE_OMIT_VIRTUALTABLE builds.\n\nFossilOrigin-Name: 5e1eb0fa3afd74251bc8f484e3edfa81b15610479431af205bd952c91eecd21f",
        "before_after_code_files": [
          "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c",
          "manifest.uuid||manifest.uuid",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c": [
          "File: ext/expert/sqlite3expert.c -> ext/expert/sqlite3expert.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 758353c72627a847ba027ca44a750bbf057827dafd05811f56e4765dfc77623b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"sqliteInt.h\"",
          "18: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "16: #if defined(SQLITE_ENABLE_BYTECODE_VTAB) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "[Added Lines]",
          "17: #if defined(SQLITE_ENABLE_BYTECODE_VTAB) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf48ce49f7c25e5d4524de9fdc5c0d505218d06d",
      "candidate_info": {
        "commit_hash": "bf48ce49f7c25e5d4524de9fdc5c0d505218d06d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf48ce49f7c25e5d4524de9fdc5c0d505218d06d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/whereexpr.c"
        ],
        "message": "Take care when checking the table of a TK_COLUMN expression node to see if the table is a virtual table to first ensure that the Expr.y.pTab pointer is not null due to generated column optimizations.  Ticket [4374860b29383380].\n\nFossilOrigin-Name: 9d0d4ab95dc0c56e053c2924ed322a9ea7b25439e6f74599f706905a1994e454",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 109ee07433b274a39954cef62bf67d47bcda960df9bef56127210ebf1c3c104c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2244:   return rc;",
          "2245: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2250: int sqlite3ExprIsVtabRef(Expr *p){",
          "2251:   if( p->op!=TK_COLUMN ) return 0;",
          "2252:   if( p->y.pTab==0 ) return 0;",
          "2253:   return IsVirtual(p->y.pTab);",
          "2254: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5479:       testcase( pExpr->op==TK_LE );",
          "5480:       testcase( pExpr->op==TK_GT );",
          "5481:       testcase( pExpr->op==TK_GE );",
          "5484:       ){",
          "5485:        return WRC_Prune;",
          "5486:       }",
          "",
          "[Removed Lines]",
          "5482:       if( (pExpr->pLeft->op==TK_COLUMN && IsVirtual(pExpr->pLeft->y.pTab))",
          "5483:        || (pExpr->pRight->op==TK_COLUMN && IsVirtual(pExpr->pRight->y.pTab))",
          "",
          "[Added Lines]",
          "5491:       if( sqlite3ExprIsVtabRef(pExpr->pLeft)",
          "5492:        || sqlite3ExprIsVtabRef(pExpr->pRight)",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4278: int sqlite3ExprContainsSubquery(Expr*);",
          "4279: #endif",
          "4280: int sqlite3ExprIsInteger(Expr*, int*);",
          "4281: int sqlite3ExprCanBeNull(const Expr*);",
          "4282: int sqlite3ExprNeedsNoAffinityChange(const Expr*, char);",
          "4283: int sqlite3IsRowid(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4281: int sqlite3ExprIsVtabRef(Expr*);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:     pCol = pList->a[1].pExpr;",
          "381:       for(i=0; i<ArraySize(aOp); i++){",
          "382:         if( sqlite3StrICmp(pExpr->u.zToken, aOp[i].zOp)==0 ){",
          "",
          "[Removed Lines]",
          "380:     if( pCol->op==TK_COLUMN && IsVirtual(pCol->y.pTab) ){",
          "",
          "[Added Lines]",
          "380:     if( sqlite3ExprIsVtabRef(pCol) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:     pCol = pList->a[0].pExpr;",
          "403:       sqlite3_vtab *pVtab;",
          "404:       sqlite3_module *pMod;",
          "405:       void (*xNotUsed)(sqlite3_context*,int,sqlite3_value**);",
          "",
          "[Removed Lines]",
          "402:     if( pCol->op==TK_COLUMN && IsVirtual(pCol->y.pTab) ){",
          "",
          "[Added Lines]",
          "402:     if( sqlite3ExprIsVtabRef(pCol) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:     int res = 0;",
          "423:     Expr *pLeft = pExpr->pLeft;",
          "424:     Expr *pRight = pExpr->pRight;",
          "426:       res++;",
          "427:     }",
          "429:       res++;",
          "430:       SWAP(Expr*, pLeft, pRight);",
          "431:     }",
          "",
          "[Removed Lines]",
          "425:     if( pLeft->op==TK_COLUMN && IsVirtual(pLeft->y.pTab) ){",
          "428:     if( pRight && pRight->op==TK_COLUMN && IsVirtual(pRight->y.pTab) ){",
          "",
          "[Added Lines]",
          "425:     if( sqlite3ExprIsVtabRef(pLeft) ){",
          "428:     if( pRight && sqlite3ExprIsVtabRef(pRight) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "115d663c05758e5d32a5c5123c1d7b4b5460ae7c",
      "candidate_info": {
        "commit_hash": "115d663c05758e5d32a5c5123c1d7b4b5460ae7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/115d663c05758e5d32a5c5123c1d7b4b5460ae7c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/malloc.c",
          "src/sqliteInt.h",
          "src/status.c"
        ],
        "message": "More efficient implementation of a lookaside allocator that supports mini (in this case, harcoded to 128B) slots.\n\nFossilOrigin-Name: b02fdc09c838f355d9efce57f817d6a86153153b4a1f2b763914f4aaa34cb76e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/status.c||src/status.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48ba5e5a2227257cebafacbb09e9dd91d9b89ab2d52a8b4e4113c1d017d95f41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683: static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){",
          "684: #ifndef SQLITE_OMIT_LOOKASIDE",
          "685:   void *pStart;",
          "687:   if( sqlite3LookasideUsed(db,0)>0 ){",
          "688:     return SQLITE_BUSY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:   sqlite3_int64 szAlloc = sz*(sqlite3_int64)cnt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:   db->lookaside.pStart = pStart;",
          "715:   db->lookaside.pInit = 0;",
          "716:   db->lookaside.pFree = 0;",
          "717:   db->lookaside.sz = (u16)sz;",
          "718:   db->lookaside.szTrue = (u16)sz;",
          "719:   if( pStart ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "719:   db->lookaside.pMiniInit = 0;",
          "720:   db->lookaside.pMiniFree = 0;",
          "725:   cnt = szAlloc/(3*128+sz);",
          "726: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "727:       db->lookaside.pInit = p;",
          "728:       p = (LookasideSlot*)&((u8*)p)[sz];",
          "729:     }",
          "730:     db->lookaside.pEnd = p;",
          "731:     db->lookaside.bDisable = 0;",
          "732:     db->lookaside.bMalloced = pBuf==0 ?1:0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "741:     db->lookaside.pMiddle = p;",
          "743:     while(p<=(LookasideSlot*)&((u8*)pStart)[szAlloc-128]){",
          "744:       p->pNext = db->lookaside.pMiniInit;",
          "745:       db->lookaside.pMiniInit = p;",
          "746:       db->lookaside.nSlot++;",
          "747:       p = (LookasideSlot*)&((u8*)p)[128];",
          "748:     }",
          "749: #endif",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );",
          "333:   return sqlite3GlobalConfig.m.xSize(p);",
          "334: }",
          "335: int sqlite3DbMallocSize(sqlite3 *db, void *p){",
          "336:   assert( p!=0 );",
          "337:   if( db==0 || !isLookaside(db,p) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335: static int lookasideMallocSize(sqlite3 *db, void *p){",
          "336: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "337:   return p<db->lookaside.pMiddle ? db->lookaside.szTrue : 128;",
          "338: #else",
          "339:   return db->lookaside.szTrue;",
          "340: #endif",
          "341: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:     return sqlite3GlobalConfig.m.xSize(p);",
          "348:   }else{",
          "349:     assert( sqlite3_mutex_held(db->mutex) );",
          "351:   }",
          "352: }",
          "353: sqlite3_uint64 sqlite3_msize(void *p){",
          "",
          "[Removed Lines]",
          "350:     return db->lookaside.szTrue;",
          "",
          "[Added Lines]",
          "357:     return lookasideMallocSize(db, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:     }",
          "398:     if( isLookaside(db, p) ){",
          "399:       LookasideSlot *pBuf = (LookasideSlot*)p;",
          "400: #ifdef SQLITE_DEBUG",
          "402:       memset(p, 0xaa, db->lookaside.szTrue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "408:       if( p>=db->lookaside.pMiddle ){",
          "409: # ifdef SQLITE_DEBUG",
          "411:         memset(p, 0xaa, 128);",
          "412: # endif",
          "413:         pBuf->pNext = db->lookaside.pMiniFree;",
          "414:         db->lookaside.pMiniFree = pBuf;",
          "415:         return;",
          "416:       }",
          "417: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "564:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "565:     }",
          "566:     db->lookaside.anStat[1]++;",
          "567:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "568:     db->lookaside.pFree = pBuf->pNext;",
          "569:     db->lookaside.anStat[0]++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585: # ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "586:   }else if( n<=128 ){",
          "587:     if( (pBuf = db->lookaside.pMiniFree)!=0 ){",
          "588:       db->lookaside.pMiniFree = pBuf->pNext;",
          "589:       db->lookaside.anStat[0]++;",
          "590:       return (void*)pBuf;",
          "591:     }else if( (pBuf = db->lookaside.pMiniInit)!=0 ){",
          "592:       db->lookaside.pMiniInit = pBuf->pNext;",
          "593:       db->lookaside.anStat[0]++;",
          "594:       return (void*)pBuf;",
          "595:     }",
          "596: # endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "597:   assert( db!=0 );",
          "598:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "599:   assert( sqlite3_mutex_held(db->mutex) );",
          "601:   return dbReallocFinish(db, p, n);",
          "602: }",
          "603: static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){",
          "",
          "[Removed Lines]",
          "600:   if( isLookaside(db,p) && n<=db->lookaside.szTrue ) return p;",
          "",
          "[Added Lines]",
          "630:   if( isLookaside(db,p) && n<lookasideMallocSize(db, p) ) return p;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "608:     if( isLookaside(db, p) ){",
          "609:       pNew = sqlite3DbMallocRawNN(db, n);",
          "610:       if( pNew ){",
          "612:         sqlite3DbFree(db, p);",
          "613:       }",
          "614:     }else{",
          "",
          "[Removed Lines]",
          "611:         memcpy(pNew, p, db->lookaside.szTrue);",
          "",
          "[Added Lines]",
          "641:         memcpy(pNew, p, lookasideMallocSize(db, p));",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "1294: #endif",
          "",
          "---------------"
        ],
        "src/status.c||src/status.c": [
          "File: src/status.c -> src/status.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: int sqlite3LookasideUsed(sqlite3 *db, int *pHighwater){",
          "189:   u32 nInit = countLookasideSlots(db->lookaside.pInit);",
          "190:   u32 nFree = countLookasideSlots(db->lookaside.pFree);",
          "191:   if( pHighwater ) *pHighwater = db->lookaside.nSlot - nInit;",
          "192:   return db->lookaside.nSlot - (nInit+nFree);",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "192:   nInit += countLookasideSlots(db->lookaside.pMiniInit);",
          "193:   nFree += countLookasideSlots(db->lookaside.pMiniFree);",
          "194: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:           db->lookaside.pInit = db->lookaside.pFree;",
          "221:           db->lookaside.pFree = 0;",
          "222:         }",
          "223:       }",
          "224:       break;",
          "225:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "228:         p = db->lookaside.pMiniFree;",
          "229:         if( p ){",
          "230:           while( p->pNext ) p = p->pNext;",
          "231:           p->pNext = db->lookaside.pMiniInit;",
          "232:           db->lookaside.pMiniInit = db->lookaside.pMiniFree;",
          "233:           db->lookaside.pMiniFree = 0;",
          "234:         }",
          "235: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed5e66881e0b29668a160195c8ddd98b9df56e23",
      "candidate_info": {
        "commit_hash": "ed5e66881e0b29668a160195c8ddd98b9df56e23",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed5e66881e0b29668a160195c8ddd98b9df56e23",
        "files": [
          "doc/lemon.html",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix typos in the Lemon documentation.\n\nFossilOrigin-Name: 35f1f151ac478d6b46f3685d2565c35108ef74bd33ce96fb65300d3c303b289b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25dc53f6608dd9b8b4e8d8ee22e194a6d41d15811781752797cb42fc22ee1317",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cddfc3922c45aec91133f22c85cb3fc461ef67b8",
      "candidate_info": {
        "commit_hash": "cddfc3922c45aec91133f22c85cb3fc461ef67b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cddfc3922c45aec91133f22c85cb3fc461ef67b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wal2.test",
          "test/walprotocol.test"
        ],
        "message": "Fix a couple of test scripts to match the new wal recovery behaviour on this branch.\n\nFossilOrigin-Name: 3af61e83532f76f0f3252a28663415d37b096ddf05a9c58fa79303933c09abce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wal2.test||test/wal2.test",
          "test/walprotocol.test||test/walprotocol.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cf962d213abe1b55ebbcfecf1de9d5d61709509d1ce3cbd56d8cf4c9ad65e5a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wal2.test||test/wal2.test": [
          "File: test/wal2.test -> test/wal2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: } {4 10}",
          "124: set RECOVER [list                                      \\",
          "127: ]",
          "128: set READ [list                                         \\",
          "129:   {4 1 lock shared}    {4 1 unlock shared}             \\",
          "",
          "[Removed Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "126:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive}          \\",
          "126:   {4 1 lock exclusive}   {4 1 unlock exclusive}        \\",
          "127:   {5 1 lock exclusive}   {5 1 unlock exclusive}        \\",
          "128:   {6 1 lock exclusive}   {6 1 unlock exclusive}        \\",
          "129:   {7 1 lock exclusive}   {7 1 unlock exclusive}        \\",
          "130:   {1 2 unlock exclusive} {0 1 unlock exclusive}        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: lappend expected_locks {1 1 lock exclusive}   ;# Lock checkpoint",
          "395: lappend expected_locks {0 1 lock exclusive}   ;# Lock writer",
          "396: lappend expected_locks {2 1 lock exclusive}   ;# Lock recovery",
          "398: lappend expected_locks {2 1 unlock exclusive} ;# Unlock recovery",
          "400: lappend expected_locks {0 1 unlock exclusive} ;# Unlock writer",
          "401: lappend expected_locks {3 1 lock exclusive}   ;# Lock aReadMark[0]",
          "402: lappend expected_locks {3 1 unlock exclusive} ;# Unlock aReadMark[0]",
          "",
          "[Removed Lines]",
          "397: lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "399: lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "[Added Lines]",
          "401: # lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "402: lappend expected_locks {4 1 lock exclusive}   ;# Lock aReadMark[1]",
          "403: lappend expected_locks {4 1 unlock exclusive} ;# Unlock aReadMark[1]",
          "404: lappend expected_locks {5 1 lock exclusive}",
          "405: lappend expected_locks {5 1 unlock exclusive}",
          "406: lappend expected_locks {6 1 lock exclusive}",
          "407: lappend expected_locks {6 1 unlock exclusive}",
          "408: lappend expected_locks {7 1 lock exclusive}",
          "409: lappend expected_locks {7 1 unlock exclusive}",
          "411: # lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "625: } {}",
          "627: set RECOVERY {",
          "630: }",
          "631: set READMARK0_READ {",
          "632:   {3 1 lock shared} {3 1 unlock shared}",
          "",
          "[Removed Lines]",
          "628:   {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive}",
          "629:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "[Added Lines]",
          "640:   {0 1 lock exclusive}   {1 2 lock exclusive}",
          "641:   {4 1 lock exclusive}   {4 1 unlock exclusive}",
          "642:   {5 1 lock exclusive}   {5 1 unlock exclusive}",
          "643:   {6 1 lock exclusive}   {6 1 unlock exclusive}",
          "644:   {7 1 lock exclusive}   {7 1 unlock exclusive}",
          "645:   {1 2 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "---------------"
        ],
        "test/walprotocol.test||test/walprotocol.test": [
          "File: test/walprotocol.test -> test/walprotocol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   set ::locks [list]",
          "53:   sqlite3 db test.db -vfs T",
          "54:   execsql { SELECT * FROM x }",
          "58: ]",
          "59: do_test 1.2 {",
          "60:   db close",
          "61:   set ::locks [list]",
          "62:   sqlite3 db test.db -vfs T",
          "63:   execsql { SELECT * FROM x }",
          "67: ]",
          "68: proc lock_callback {method filename handle lock} {",
          "69:   if {$lock == \"1 2 lock exclusive\"} { return SQLITE_BUSY }",
          "",
          "[Removed Lines]",
          "55:   lrange $::locks 0 5",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "57:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "64:   lrange $::locks 0 5",
          "65: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "66:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "55:   lrange $::locks 0 11",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "57:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "58:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "59:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "60:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "61:         {1 2 unlock exclusive}   \\",
          "62:         {0 1 unlock exclusive}  \\",
          "69:   lrange $::locks 0 11",
          "70: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "71:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "72:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "73:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "74:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "75:         {1 2 unlock exclusive}   \\",
          "76:         {0 1 unlock exclusive}  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:   set ::locks [list]",
          "102:   sqlite3 db test.db -vfs T",
          "103:   catchsql { SELECT * FROM x }",
          "105: db close",
          "106: T delete",
          "",
          "[Removed Lines]",
          "104: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "114: } {0 z}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "161: do_test 2.6 {",
          "162:   set ::r",
          "165: db close",
          "166: db2 close",
          "",
          "[Removed Lines]",
          "163: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "173: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "183: do_test 2.8 {",
          "184:   set ::r",
          "187: db close",
          "188: db2 close",
          "",
          "[Removed Lines]",
          "185: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "195: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}