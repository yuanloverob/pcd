{
  "cve_id": "CVE-2022-29203",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "acd56b8bcb72b163c834ae4f18469047b001fadf",
  "patch_info": {
    "commit_hash": "acd56b8bcb72b163c834ae4f18469047b001fadf",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf",
    "files": [
      "tensorflow/compiler/tests/spacetobatch_op_test.py",
      "tensorflow/compiler/tf2xla/kernels/BUILD",
      "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
      "tensorflow/core/framework/BUILD",
      "tensorflow/core/framework/shape_inference.cc",
      "tensorflow/core/kernels/BUILD",
      "tensorflow/core/kernels/spacetobatch_op.cc",
      "tensorflow/core/util/BUILD",
      "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
    ],
    "message": "Fix security vulnerability with SpaceToBatchNDOp.\n\nPiperOrigin-RevId: 445527615",
    "before_after_code_files": [
      "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
      "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
      "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
      "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
      "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py": [
      "File: tensorflow/compiler/tests/spacetobatch_op_test.py -> tensorflow/compiler/tests/spacetobatch_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import numpy as np",
      "19: from tensorflow.compiler.tests import xla_test",
      "20: from tensorflow.python.framework import dtypes",
      "21: from tensorflow.python.ops import array_ops",
      "22: from tensorflow.python.ops import gen_array_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: from tensorflow.python.framework import constant_op",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:     self._testOne(x_np, block_size, x_out)",
      "148: class SpaceToBatchNDTest(xla_test.XLATestCase):",
      "149:   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "149: class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):",
      "151:   def testInvalidBlockShape(self):",
      "152:     with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):",
      "153:       with self.session() as sess, self.test_scope():",
      "154:         tf_in = constant_op.constant(",
      "155:             -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
      "156:         block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
      "157:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
      "158:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
      "160:   def testOutputSizeOutOfBounds(self):",
      "161:     with self.assertRaisesRegex(ValueError,",
      "162:                                 \"Negative.* dimension size caused by overflow\"):",
      "163:       with self.session() as sess, self.test_scope():",
      "164:         tf_in = constant_op.constant(",
      "165:             -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
      "166:         block_shape = constant_op.constant(",
      "167:             1879048192, shape=[2], dtype=dtypes.int64)",
      "168:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
      "169:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
      "",
      "---------------"
    ],
    "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc": [
      "File: tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc -> tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:     OP_REQUIRES(ctx, block_shape[i] >= 1,",
      "65:                 errors::InvalidArgument(",
      "66:                     \"All values in block_shape must be positive, got value, \",",
      "67:                     block_shape[i], \" at index \", i, \".\"));",
      "71:     block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:   const int64_t batch_size = input_shape[0];",
      "81:   const int64_t output_dim =",
      "82:       MultiplyWithoutOverflow(batch_size, block_num_elems);",
      "83:   if (output_dim < 0) {",
      "84:     OP_REQUIRES(",
      "85:         ctx, output_dim >= 0,",
      "86:         errors::InvalidArgument(\"Negative output dimension size caused by \"",
      "87:                                 \"overflow when multiplying \",",
      "88:                                 batch_size, \" and \", block_num_elems));",
      "89:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151:   output_shape[0] = output_dim;",
      "",
      "---------------"
    ],
    "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
      "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"tensorflow/core/lib/strings/numbers.h\"",
      "27: #include \"tensorflow/core/lib/strings/scanner.h\"",
      "28: #include \"tensorflow/core/lib/strings/str_util.h\"",
      "30: namespace tensorflow {",
      "31: namespace shape_inference {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1112:   } else {",
      "1115:     if (product < 0) {",
      "1116:       return errors::InvalidArgument(",
      "1117:           \"Negative dimension size caused by overflow when multiplying \",",
      "",
      "[Removed Lines]",
      "1114:     const int64_t product = first_value * second_value;",
      "",
      "[Added Lines]",
      "1115:     const int64_t product = MultiplyWithoutOverflow(first_value, second_value);",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
      "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include <string>",
      "22: #include <utility>",
      "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "27: #include \"tensorflow/core/framework/op.h\"",
      "28: #include \"tensorflow/core/framework/op_kernel.h\"",
      "",
      "[Removed Lines]",
      "24: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "32: #include \"tensorflow/core/framework/tensor_types.h\"",
      "33: #include \"tensorflow/core/framework/types.h\"",
      "34: #include \"tensorflow/core/platform/logging.h\"",
      "35: #include \"tensorflow/core/platform/types.h\"",
      "37: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
      "35: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:   int64_t block_shape_product = 1;",
      "101:   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {",
      "103:   }",
      "104:   if (block_shape_product <= 0) {",
      "105:     return errors::InvalidArgument(",
      "",
      "[Removed Lines]",
      "102:     block_shape_product *= block_shape[block_dim];",
      "",
      "[Added Lines]",
      "102:     if (block_shape[block_dim] < 1) {",
      "103:       return errors::InvalidArgument(",
      "104:           \"All values in block_shape must be positive, got value, \",",
      "105:           block_shape[block_dim], \" at index \", block_dim, \".\");",
      "106:     }",
      "107:     block_shape_product =",
      "108:         MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "132:   TensorShape external_output_shape;",
      "137:   int64_t input_batch_size = orig_input_tensor.dim_size(0);",
      "138:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
      "",
      "[Removed Lines]",
      "134:   external_output_shape.AddDim(orig_input_tensor.dim_size(0) *",
      "135:                                block_shape_product);",
      "",
      "[Added Lines]",
      "140:   const int64_t output_shape = MultiplyWithoutOverflow(",
      "141:       orig_input_tensor.dim_size(0), block_shape_product);",
      "142:   if (output_shape < 0) {",
      "143:     return errors::InvalidArgument(",
      "144:         \"Negative output dimension size caused by overflow when multiplying \",",
      "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
      "146:   }",
      "147:   external_output_shape.AddDim(output_shape);",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py -> tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import numpy as np",
      "19: from tensorflow.python.framework import dtypes",
      "20: from tensorflow.python.framework import ops",
      "21: from tensorflow.python.framework import tensor_util",
      "22: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from tensorflow.python.framework import constant_op",
      "21: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "516:             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])",
      "517:     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())",
      "520: class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "521:   @test_util.run_in_graph_and_eager_modes",
      "522:   def testInvalidBlockShape(self):",
      "523:     tf_in = constant_op.constant(",
      "524:         -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
      "525:     block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
      "526:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
      "527:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "528:                                 \"block_shape must be positive\"):",
      "529:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
      "531:   @test_util.run_in_graph_and_eager_modes",
      "532:   def testOutputSizeOutOfBounds(self):",
      "533:     tf_in = constant_op.constant(",
      "534:         -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
      "535:     block_shape = constant_op.constant(",
      "536:         1879048192, shape=[2], dtype=dtypes.int64)",
      "537:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
      "538:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "539:                                 \"Negative.* dimension size caused by overflow\"):",
      "540:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19f4a8458ad764a802305a2744faaa20605350ed",
      "candidate_info": {
        "commit_hash": "19f4a8458ad764a802305a2744faaa20605350ed",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/19f4a8458ad764a802305a2744faaa20605350ed",
        "files": [
          "tensorflow/core/kernels/spacetobatch_op.cc"
        ],
        "message": "Fix crash in tf.nn.atrous_conv2d with large rate\n\nThis PR tries to address the issue raised in 46915 where\ntf.nn.atrous_conv2d will crash when rate is larger than 2^31.\n\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>",
        "before_after_code_files": [
          "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
          "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         \"Negative output dimension size caused by overflow when multiplying \",",
          "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
          "146:   }",
          "149:   int64_t input_batch_size = orig_input_tensor.dim_size(0);",
          "150:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
          "151:     const int64_t size = orig_input_tensor.dim_size(block_dim + 1);",
          "152:     input_batch_size *= size;",
          "154:   }",
          "158:   for (int block_dim = removed_prefix_block_dims;",
          "159:        block_dim < block_dims - removed_suffix_block_dims; ++block_dim) {",
          "",
          "[Removed Lines]",
          "147:   external_output_shape.AddDim(output_shape);",
          "153:     external_output_shape.AddDim(size);",
          "155:   internal_input_shape.AddDim(input_batch_size);",
          "156:   internal_output_shape.AddDim(input_batch_size * block_shape_product);",
          "",
          "[Added Lines]",
          "147:   TF_RETURN_IF_ERROR(external_output_shape.AddDimWithStatus(output_shape));",
          "153:     TF_RETURN_IF_ERROR(external_output_shape.AddDimWithStatus(size));",
          "155:   TF_RETURN_IF_ERROR(internal_input_shape.AddDimWithStatus(input_batch_size));",
          "156:   TF_RETURN_IF_ERROR(internal_output_shape.AddDimWithStatus(input_batch_size * block_shape_product));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:                                      \" is not divisible by block_shape[\",",
          "172:                                      block_dim, \"]=\", block_shape_value);",
          "173:     }",
          "175:     const int64_t output_size = padded_size / block_shape_value;",
          "178:   }",
          "180:   int64_t depth = 1;",
          "181:   for (int dim = block_dims - removed_suffix_block_dims + 1; dim < input_dims;",
          "182:        ++dim) {",
          "183:     const int64_t size = orig_input_tensor.dim_size(dim);",
          "185:     depth *= size;",
          "186:   }",
          "191:   Tensor* output_tensor = nullptr;",
          "",
          "[Removed Lines]",
          "174:     internal_input_shape.AddDim(input_size);",
          "176:     internal_output_shape.AddDim(output_size);",
          "177:     external_output_shape.AddDim(output_size);",
          "184:     external_output_shape.AddDim(size);",
          "187:   internal_input_shape.AddDim(depth);",
          "188:   internal_output_shape.AddDim(depth);",
          "",
          "[Added Lines]",
          "174:     TF_RETURN_IF_ERROR(internal_input_shape.AddDimWithStatus(input_size));",
          "176:     TF_RETURN_IF_ERROR(internal_output_shape.AddDimWithStatus(output_size));",
          "177:     TF_RETURN_IF_ERROR(external_output_shape.AddDimWithStatus(output_size));",
          "184:     TF_RETURN_IF_ERROR(external_output_shape.AddDimWithStatus(size));",
          "187:   TF_RETURN_IF_ERROR(internal_input_shape.AddDimWithStatus(depth));",
          "188:   TF_RETURN_IF_ERROR(internal_output_shape.AddDimWithStatus(depth));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d70b7575ea23d4c91166be3f4154cbc13041fc14",
      "candidate_info": {
        "commit_hash": "d70b7575ea23d4c91166be3f4154cbc13041fc14",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d70b7575ea23d4c91166be3f4154cbc13041fc14",
        "files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/BUILD",
          "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/core/util/BUILD",
          "tensorflow/python/kernel_tests/spacetobatch_op_test.py"
        ],
        "message": "Fix security vulnerability with SpaceToBatchNDOp.\n\nPiperOrigin-RevId: 445527615",
        "before_after_code_files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/python/kernel_tests/spacetobatch_op_test.py||tensorflow/python/kernel_tests/spacetobatch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py": [
          "File: tensorflow/compiler/tests/spacetobatch_op_test.py -> tensorflow/compiler/tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.compiler.tests import xla_test",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.ops import array_ops",
          "26: from tensorflow.python.ops import gen_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import constant_op",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     self._testOne(x_np, block_size, x_out)",
          "152: class SpaceToBatchNDTest(xla_test.XLATestCase):",
          "153:   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):",
          "155:   def testInvalidBlockShape(self):",
          "156:     with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):",
          "157:       with self.session() as sess, self.test_scope():",
          "158:         tf_in = constant_op.constant(",
          "159:             -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "160:         block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "161:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "162:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "164:   def testOutputSizeOutOfBounds(self):",
          "165:     with self.assertRaisesRegex(ValueError,",
          "166:                                 \"Negative.* dimension size caused by overflow\"):",
          "167:       with self.session() as sess, self.test_scope():",
          "168:         tf_in = constant_op.constant(",
          "169:             -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "170:         block_shape = constant_op.constant(",
          "171:             1879048192, shape=[2], dtype=dtypes.int64)",
          "172:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "173:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc": [
          "File: tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc -> tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     OP_REQUIRES(ctx, block_shape[i] >= 1,",
          "65:                 errors::InvalidArgument(",
          "66:                     \"All values in block_shape must be positive, got value, \",",
          "67:                     block_shape[i], \" at index \", i, \".\"));",
          "71:     block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   const int64_t batch_size = input_shape[0];",
          "81:   const int64_t output_dim =",
          "82:       MultiplyWithoutOverflow(batch_size, block_num_elems);",
          "83:   if (output_dim < 0) {",
          "84:     OP_REQUIRES(",
          "85:         ctx, output_dim >= 0,",
          "86:         errors::InvalidArgument(\"Negative output dimension size caused by \"",
          "87:                                 \"overflow when multiplying \",",
          "88:                                 batch_size, \" and \", block_num_elems));",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   output_shape[0] = output_dim;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
          "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "27: #include \"tensorflow/core/lib/strings/scanner.h\"",
          "28: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "30: namespace tensorflow {",
          "31: namespace shape_inference {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:   } else {",
          "1103:     if (product < 0) {",
          "1104:       return errors::InvalidArgument(",
          "1105:           \"Negative dimension size caused by overflow when multiplying \",",
          "",
          "[Removed Lines]",
          "1102:     const int64 product = first_value * second_value;",
          "",
          "[Added Lines]",
          "1103:     const int64_t product = MultiplyWithoutOverflow(first_value, second_value);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
          "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/op.h\"",
          "28: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "32: #include \"tensorflow/core/framework/tensor_types.h\"",
          "33: #include \"tensorflow/core/framework/types.h\"",
          "34: #include \"tensorflow/core/platform/logging.h\"",
          "35: #include \"tensorflow/core/platform/types.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "35: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   int64 block_shape_product = 1;",
          "101:   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {",
          "103:   }",
          "104:   if (block_shape_product <= 0) {",
          "105:     return errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "102:     block_shape_product *= block_shape[block_dim];",
          "",
          "[Added Lines]",
          "102:     if (block_shape[block_dim] < 1) {",
          "103:       return errors::InvalidArgument(",
          "104:           \"All values in block_shape must be positive, got value, \",",
          "105:           block_shape[block_dim], \" at index \", block_dim, \".\");",
          "106:     }",
          "107:     block_shape_product =",
          "108:         MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   TensorShape external_output_shape;",
          "137:   int64 input_batch_size = orig_input_tensor.dim_size(0);",
          "138:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
          "",
          "[Removed Lines]",
          "134:   external_output_shape.AddDim(orig_input_tensor.dim_size(0) *",
          "135:                                block_shape_product);",
          "",
          "[Added Lines]",
          "140:   const int64_t output_shape = MultiplyWithoutOverflow(",
          "141:       orig_input_tensor.dim_size(0), block_shape_product);",
          "142:   if (output_shape < 0) {",
          "143:     return errors::InvalidArgument(",
          "144:         \"Negative output dimension size caused by overflow when multiplying \",",
          "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
          "146:   }",
          "147:   external_output_shape.AddDim(output_shape);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/spacetobatch_op_test.py||tensorflow/python/kernel_tests/spacetobatch_op_test.py": [
          "File: tensorflow/python/kernel_tests/spacetobatch_op_test.py -> tensorflow/python/kernel_tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import ops",
          "25: from tensorflow.python.framework import tensor_util",
          "26: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])",
          "521:     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())",
          "524: class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:   @test_util.run_in_graph_and_eager_modes",
          "526:   def testInvalidBlockShape(self):",
          "527:     tf_in = constant_op.constant(",
          "528:         -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "529:     block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "530:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "531:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "532:                                 \"block_shape must be positive\"):",
          "533:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "535:   @test_util.run_in_graph_and_eager_modes",
          "536:   def testOutputSizeOutOfBounds(self):",
          "537:     tf_in = constant_op.constant(",
          "538:         -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "539:     block_shape = constant_op.constant(",
          "540:         1879048192, shape=[2], dtype=dtypes.int64)",
          "541:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "542:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "543:                                 \"Negative.* dimension size caused by overflow\"):",
          "544:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb84beb9b0b320568c19397230778e0832223d77",
      "candidate_info": {
        "commit_hash": "eb84beb9b0b320568c19397230778e0832223d77",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/eb84beb9b0b320568c19397230778e0832223d77",
        "files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/BUILD",
          "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/core/util/BUILD",
          "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
        ],
        "message": "Fix security vulnerability with SpaceToBatchNDOp.\n\nPiperOrigin-RevId: 445527615",
        "before_after_code_files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
            "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
            "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py": [
          "File: tensorflow/compiler/tests/spacetobatch_op_test.py -> tensorflow/compiler/tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.compiler.tests import xla_test",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.ops import array_ops",
          "22: from tensorflow.python.ops import gen_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from tensorflow.python.framework import constant_op",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     self._testOne(x_np, block_size, x_out)",
          "148: class SpaceToBatchNDTest(xla_test.XLATestCase):",
          "149:   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):",
          "151:   def testInvalidBlockShape(self):",
          "152:     with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):",
          "153:       with self.session() as sess, self.test_scope():",
          "154:         tf_in = constant_op.constant(",
          "155:             -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "156:         block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "157:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "158:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "160:   def testOutputSizeOutOfBounds(self):",
          "161:     with self.assertRaisesRegex(ValueError,",
          "162:                                 \"Negative.* dimension size caused by overflow\"):",
          "163:       with self.session() as sess, self.test_scope():",
          "164:         tf_in = constant_op.constant(",
          "165:             -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "166:         block_shape = constant_op.constant(",
          "167:             1879048192, shape=[2], dtype=dtypes.int64)",
          "168:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "169:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc": [
          "File: tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc -> tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     OP_REQUIRES(ctx, block_shape[i] >= 1,",
          "65:                 errors::InvalidArgument(",
          "66:                     \"All values in block_shape must be positive, got value, \",",
          "67:                     block_shape[i], \" at index \", i, \".\"));",
          "71:     block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   const int64_t batch_size = input_shape[0];",
          "81:   const int64_t output_dim =",
          "82:       MultiplyWithoutOverflow(batch_size, block_num_elems);",
          "83:   if (output_dim < 0) {",
          "84:     OP_REQUIRES(",
          "85:         ctx, output_dim >= 0,",
          "86:         errors::InvalidArgument(\"Negative output dimension size caused by \"",
          "87:                                 \"overflow when multiplying \",",
          "88:                                 batch_size, \" and \", block_num_elems));",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   output_shape[0] = output_dim;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
          "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "27: #include \"tensorflow/core/lib/strings/scanner.h\"",
          "28: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "30: namespace tensorflow {",
          "31: namespace shape_inference {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1099:   } else {",
          "1102:     if (product < 0) {",
          "1103:       return errors::InvalidArgument(",
          "1104:           \"Negative dimension size caused by overflow when multiplying \",",
          "",
          "[Removed Lines]",
          "1101:     const int64_t product = first_value * second_value;",
          "",
          "[Added Lines]",
          "1102:     const int64_t product = MultiplyWithoutOverflow(first_value, second_value);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
          "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/op.h\"",
          "28: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "32: #include \"tensorflow/core/framework/tensor_types.h\"",
          "33: #include \"tensorflow/core/framework/types.h\"",
          "34: #include \"tensorflow/core/platform/logging.h\"",
          "35: #include \"tensorflow/core/platform/types.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "35: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   int64_t block_shape_product = 1;",
          "101:   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {",
          "103:   }",
          "104:   if (block_shape_product <= 0) {",
          "105:     return errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "102:     block_shape_product *= block_shape[block_dim];",
          "",
          "[Added Lines]",
          "102:     if (block_shape[block_dim] < 1) {",
          "103:       return errors::InvalidArgument(",
          "104:           \"All values in block_shape must be positive, got value, \",",
          "105:           block_shape[block_dim], \" at index \", block_dim, \".\");",
          "106:     }",
          "107:     block_shape_product =",
          "108:         MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   TensorShape external_output_shape;",
          "137:   int64_t input_batch_size = orig_input_tensor.dim_size(0);",
          "138:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
          "",
          "[Removed Lines]",
          "134:   external_output_shape.AddDim(orig_input_tensor.dim_size(0) *",
          "135:                                block_shape_product);",
          "",
          "[Added Lines]",
          "140:   const int64_t output_shape = MultiplyWithoutOverflow(",
          "141:       orig_input_tensor.dim_size(0), block_shape_product);",
          "142:   if (output_shape < 0) {",
          "143:     return errors::InvalidArgument(",
          "144:         \"Negative output dimension size caused by overflow when multiplying \",",
          "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
          "146:   }",
          "147:   external_output_shape.AddDim(output_shape);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py -> tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import tensor_util",
          "22: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from tensorflow.python.framework import constant_op",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])",
          "517:     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())",
          "520: class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:   @test_util.run_in_graph_and_eager_modes",
          "522:   def testInvalidBlockShape(self):",
          "523:     tf_in = constant_op.constant(",
          "524:         -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "525:     block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "526:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "527:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "528:                                 \"block_shape must be positive\"):",
          "529:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "531:   @test_util.run_in_graph_and_eager_modes",
          "532:   def testOutputSizeOutOfBounds(self):",
          "533:     tf_in = constant_op.constant(",
          "534:         -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "535:     block_shape = constant_op.constant(",
          "536:         1879048192, shape=[2], dtype=dtypes.int64)",
          "537:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "538:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "539:                                 \"Negative.* dimension size caused by overflow\"):",
          "540:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32aac88236ba41045a8084b99a5d129b555201f4",
      "candidate_info": {
        "commit_hash": "32aac88236ba41045a8084b99a5d129b555201f4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/32aac88236ba41045a8084b99a5d129b555201f4",
        "files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/BUILD",
          "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/core/util/BUILD",
          "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
        ],
        "message": "Fix security vulnerability with SpaceToBatchNDOp.\n\nPiperOrigin-RevId: 445527615",
        "before_after_code_files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
            "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
            "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py": [
          "File: tensorflow/compiler/tests/spacetobatch_op_test.py -> tensorflow/compiler/tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.compiler.tests import xla_test",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.ops import array_ops",
          "22: from tensorflow.python.ops import gen_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from tensorflow.python.framework import constant_op",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     self._testOne(x_np, block_size, x_out)",
          "148: class SpaceToBatchNDTest(xla_test.XLATestCase):",
          "149:   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):",
          "151:   def testInvalidBlockShape(self):",
          "152:     with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):",
          "153:       with self.session() as sess, self.test_scope():",
          "154:         tf_in = constant_op.constant(",
          "155:             -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "156:         block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "157:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "158:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "160:   def testOutputSizeOutOfBounds(self):",
          "161:     with self.assertRaisesRegex(ValueError,",
          "162:                                 \"Negative.* dimension size caused by overflow\"):",
          "163:       with self.session() as sess, self.test_scope():",
          "164:         tf_in = constant_op.constant(",
          "165:             -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "166:         block_shape = constant_op.constant(",
          "167:             1879048192, shape=[2], dtype=dtypes.int64)",
          "168:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "169:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc": [
          "File: tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc -> tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     OP_REQUIRES(ctx, block_shape[i] >= 1,",
          "65:                 errors::InvalidArgument(",
          "66:                     \"All values in block_shape must be positive, got value, \",",
          "67:                     block_shape[i], \" at index \", i, \".\"));",
          "71:     block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   const int64_t batch_size = input_shape[0];",
          "81:   const int64_t output_dim =",
          "82:       MultiplyWithoutOverflow(batch_size, block_num_elems);",
          "83:   if (output_dim < 0) {",
          "84:     OP_REQUIRES(",
          "85:         ctx, output_dim >= 0,",
          "86:         errors::InvalidArgument(\"Negative output dimension size caused by \"",
          "87:                                 \"overflow when multiplying \",",
          "88:                                 batch_size, \" and \", block_num_elems));",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   output_shape[0] = output_dim;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
          "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "27: #include \"tensorflow/core/lib/strings/scanner.h\"",
          "28: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "30: namespace tensorflow {",
          "31: namespace shape_inference {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1099:   } else {",
          "1102:     if (product < 0) {",
          "1103:       return errors::InvalidArgument(",
          "1104:           \"Negative dimension size caused by overflow when multiplying \",",
          "",
          "[Removed Lines]",
          "1101:     const int64_t product = first_value * second_value;",
          "",
          "[Added Lines]",
          "1102:     const int64_t product = MultiplyWithoutOverflow(first_value, second_value);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
          "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/op.h\"",
          "28: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "32: #include \"tensorflow/core/framework/tensor_types.h\"",
          "33: #include \"tensorflow/core/framework/types.h\"",
          "34: #include \"tensorflow/core/platform/logging.h\"",
          "35: #include \"tensorflow/core/platform/types.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "35: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   int64_t block_shape_product = 1;",
          "101:   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {",
          "103:   }",
          "104:   if (block_shape_product <= 0) {",
          "105:     return errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "102:     block_shape_product *= block_shape[block_dim];",
          "",
          "[Added Lines]",
          "102:     if (block_shape[block_dim] < 1) {",
          "103:       return errors::InvalidArgument(",
          "104:           \"All values in block_shape must be positive, got value, \",",
          "105:           block_shape[block_dim], \" at index \", block_dim, \".\");",
          "106:     }",
          "107:     block_shape_product =",
          "108:         MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   TensorShape external_output_shape;",
          "137:   int64_t input_batch_size = orig_input_tensor.dim_size(0);",
          "138:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
          "",
          "[Removed Lines]",
          "134:   external_output_shape.AddDim(orig_input_tensor.dim_size(0) *",
          "135:                                block_shape_product);",
          "",
          "[Added Lines]",
          "140:   const int64_t output_shape = MultiplyWithoutOverflow(",
          "141:       orig_input_tensor.dim_size(0), block_shape_product);",
          "142:   if (output_shape < 0) {",
          "143:     return errors::InvalidArgument(",
          "144:         \"Negative output dimension size caused by overflow when multiplying \",",
          "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
          "146:   }",
          "147:   external_output_shape.AddDim(output_shape);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py||tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py -> tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import tensor_util",
          "22: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from tensorflow.python.framework import constant_op",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])",
          "517:     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())",
          "520: class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:   @test_util.run_in_graph_and_eager_modes",
          "522:   def testInvalidBlockShape(self):",
          "523:     tf_in = constant_op.constant(",
          "524:         -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "525:     block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "526:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "527:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "528:                                 \"block_shape must be positive\"):",
          "529:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "531:   @test_util.run_in_graph_and_eager_modes",
          "532:   def testOutputSizeOutOfBounds(self):",
          "533:     tf_in = constant_op.constant(",
          "534:         -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "535:     block_shape = constant_op.constant(",
          "536:         1879048192, shape=[2], dtype=dtypes.int64)",
          "537:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "538:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "539:                                 \"Negative.* dimension size caused by overflow\"):",
          "540:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2bdedb1691217f0ac7124244bc7ce9a55ab860d",
      "candidate_info": {
        "commit_hash": "e2bdedb1691217f0ac7124244bc7ce9a55ab860d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e2bdedb1691217f0ac7124244bc7ce9a55ab860d",
        "files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/BUILD",
          "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/core/util/BUILD",
          "tensorflow/python/kernel_tests/spacetobatch_op_test.py"
        ],
        "message": "Fix security vulnerability with SpaceToBatchNDOp.\n\nPiperOrigin-RevId: 445527615",
        "before_after_code_files": [
          "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
          "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
          "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc",
          "tensorflow/python/kernel_tests/spacetobatch_op_test.py||tensorflow/python/kernel_tests/spacetobatch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py",
            "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
            "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc",
            "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/spacetobatch_op_test.py||tensorflow/compiler/tests/spacetobatch_op_test.py": [
          "File: tensorflow/compiler/tests/spacetobatch_op_test.py -> tensorflow/compiler/tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.compiler.tests import xla_test",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.ops import array_ops",
          "26: from tensorflow.python.ops import gen_array_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import constant_op",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     self._testOne(x_np, block_size, x_out)",
          "152: class SpaceToBatchNDTest(xla_test.XLATestCase):",
          "153:   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):",
          "155:   def testInvalidBlockShape(self):",
          "156:     with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):",
          "157:       with self.session() as sess, self.test_scope():",
          "158:         tf_in = constant_op.constant(",
          "159:             -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "160:         block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "161:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "162:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "164:   def testOutputSizeOutOfBounds(self):",
          "165:     with self.assertRaisesRegex(ValueError,",
          "166:                                 \"Negative.* dimension size caused by overflow\"):",
          "167:       with self.session() as sess, self.test_scope():",
          "168:         tf_in = constant_op.constant(",
          "169:             -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "170:         block_shape = constant_op.constant(",
          "171:             1879048192, shape=[2], dtype=dtypes.int64)",
          "172:         paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "173:         sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc||tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc": [
          "File: tensorflow/compiler/tf2xlkernels/spacetobatch_op.cc -> tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     OP_REQUIRES(ctx, block_shape[i] >= 1,",
          "65:                 errors::InvalidArgument(",
          "66:                     \"All values in block_shape must be positive, got value, \",",
          "67:                     block_shape[i], \" at index \", i, \".\"));",
          "71:     block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   const int64_t batch_size = input_shape[0];",
          "81:   const int64_t output_dim =",
          "82:       MultiplyWithoutOverflow(batch_size, block_num_elems);",
          "83:   if (output_dim < 0) {",
          "84:     OP_REQUIRES(",
          "85:         ctx, output_dim >= 0,",
          "86:         errors::InvalidArgument(\"Negative output dimension size caused by \"",
          "87:                                 \"overflow when multiplying \",",
          "88:                                 batch_size, \" and \", block_num_elems));",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   output_shape[0] = output_dim;",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/shape_inference.cc||tensorflow/core/framework/shape_inference.cc": [
          "File: tensorflow/core/framework/shape_inference.cc -> tensorflow/core/framework/shape_inference.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/core/lib/strings/numbers.h\"",
          "27: #include \"tensorflow/core/lib/strings/scanner.h\"",
          "28: #include \"tensorflow/core/lib/strings/str_util.h\"",
          "30: namespace tensorflow {",
          "31: namespace shape_inference {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:   } else {",
          "1103:     if (product < 0) {",
          "1104:       return errors::InvalidArgument(",
          "1105:           \"Negative dimension size caused by overflow when multiplying \",",
          "",
          "[Removed Lines]",
          "1102:     const int64_t product = first_value * second_value;",
          "",
          "[Added Lines]",
          "1103:     const int64_t product = MultiplyWithoutOverflow(first_value, second_value);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/spacetobatch_op.cc||tensorflow/core/kernels/spacetobatch_op.cc": [
          "File: tensorflow/core/kernels/spacetobatch_op.cc -> tensorflow/core/kernels/spacetobatch_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "26: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "27: #include \"tensorflow/core/framework/op.h\"",
          "28: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "32: #include \"tensorflow/core/framework/tensor_types.h\"",
          "33: #include \"tensorflow/core/framework/types.h\"",
          "34: #include \"tensorflow/core/platform/logging.h\"",
          "35: #include \"tensorflow/core/platform/types.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/core/kernels/spacetobatch_functor.h\"",
          "35: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   int64_t block_shape_product = 1;",
          "101:   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {",
          "103:   }",
          "104:   if (block_shape_product <= 0) {",
          "105:     return errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "102:     block_shape_product *= block_shape[block_dim];",
          "",
          "[Added Lines]",
          "102:     if (block_shape[block_dim] < 1) {",
          "103:       return errors::InvalidArgument(",
          "104:           \"All values in block_shape must be positive, got value, \",",
          "105:           block_shape[block_dim], \" at index \", block_dim, \".\");",
          "106:     }",
          "107:     block_shape_product =",
          "108:         MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   TensorShape external_output_shape;",
          "137:   int64_t input_batch_size = orig_input_tensor.dim_size(0);",
          "138:   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {",
          "",
          "[Removed Lines]",
          "134:   external_output_shape.AddDim(orig_input_tensor.dim_size(0) *",
          "135:                                block_shape_product);",
          "",
          "[Added Lines]",
          "140:   const int64_t output_shape = MultiplyWithoutOverflow(",
          "141:       orig_input_tensor.dim_size(0), block_shape_product);",
          "142:   if (output_shape < 0) {",
          "143:     return errors::InvalidArgument(",
          "144:         \"Negative output dimension size caused by overflow when multiplying \",",
          "145:         orig_input_tensor.dim_size(0), \" and \", block_shape_product);",
          "146:   }",
          "147:   external_output_shape.AddDim(output_shape);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/spacetobatch_op_test.py||tensorflow/python/kernel_tests/spacetobatch_op_test.py": [
          "File: tensorflow/python/kernel_tests/spacetobatch_op_test.py -> tensorflow/python/kernel_tests/spacetobatch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import ops",
          "25: from tensorflow.python.framework import tensor_util",
          "26: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])",
          "521:     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())",
          "524: class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:   @test_util.run_in_graph_and_eager_modes",
          "526:   def testInvalidBlockShape(self):",
          "527:     tf_in = constant_op.constant(",
          "528:         -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)",
          "529:     block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)",
          "530:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "531:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "532:                                 \"block_shape must be positive\"):",
          "533:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "535:   @test_util.run_in_graph_and_eager_modes",
          "536:   def testOutputSizeOutOfBounds(self):",
          "537:     tf_in = constant_op.constant(",
          "538:         -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)",
          "539:     block_shape = constant_op.constant(",
          "540:         1879048192, shape=[2], dtype=dtypes.int64)",
          "541:     paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)",
          "542:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "543:                                 \"Negative.* dimension size caused by overflow\"):",
          "544:       array_ops.space_to_batch_nd(tf_in, block_shape, paddings)",
          "",
          "---------------"
        ]
      }
    }
  ]
}