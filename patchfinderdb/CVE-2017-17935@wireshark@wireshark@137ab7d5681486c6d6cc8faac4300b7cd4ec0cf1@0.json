{
  "cve_id": "CVE-2017-17935",
  "cve_desc": "The File_read_line function in epan/wslua/wslua_file.c in Wireshark through 2.2.11 does not properly strip '\\n' characters, which allows remote attackers to cause a denial of service (buffer underflow and application crash) via a crafted packet that triggers the attempted processing of an empty line.",
  "repo": "wireshark/wireshark",
  "patch_hash": "137ab7d5681486c6d6cc8faac4300b7cd4ec0cf1",
  "patch_info": {
    "commit_hash": "137ab7d5681486c6d6cc8faac4300b7cd4ec0cf1",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/137ab7d5681486c6d6cc8faac4300b7cd4ec0cf1",
    "files": [
      "epan/wslua/wslua_file.c"
    ],
    "message": "potential buffer underflow in File_read_line function in epan/wslua/wslua_file.c\n\nPutting up for review, though I am not completely convinced that\nfile_gets() can return an empty line.\n\nBug: 14295\nChange-Id: If36761ea511b66c01a9f167809a218a7eadbfcc5\nReviewed-on: https://code.wireshark.org/review/24997\nPetri-Dish: Martin Mathieson <martin.r.mathieson@googlemail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
    ]
  },
  "patch_diff": {
    "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c": [
      "File: epan/wslua/wslua_file.c -> epan/wslua/wslua_file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:     length = (gint)(file_tell(ft) - pos_before);",
      "196:         length--;",
      "198:         if (length > 0 && linebuff[length - 1] == '\\r') {",
      "",
      "[Removed Lines]",
      "195:     if (linebuff[length-1] == '\\n') {",
      "",
      "[Added Lines]",
      "195:     if (length > 0 && linebuff[length-1] == '\\n') {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42ea057f07c2444051c49256601c496a7395f48d",
      "candidate_info": {
        "commit_hash": "42ea057f07c2444051c49256601c496a7395f48d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/42ea057f07c2444051c49256601c496a7395f48d",
        "files": [
          "epan/wslua/wslua_file.c"
        ],
        "message": "potential buffer underflow in File_read_line function in epan/wslua/wslua_file.c\n\nPutting up for review, though I am not completely convinced that\nfile_gets() can return an empty line.\n\nBug: 14295\nChange-Id: If36761ea511b66c01a9f167809a218a7eadbfcc5\nReviewed-on: https://code.wireshark.org/review/24997\nPetri-Dish: Martin Mathieson <martin.r.mathieson@googlemail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 137ab7d5681486c6d6cc8faac4300b7cd4ec0cf1)\nReviewed-on: https://code.wireshark.org/review/25035\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
          ],
          "candidate": [
            "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c": [
          "File: epan/wslua/wslua_file.c -> epan/wslua/wslua_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     length = (gint)(file_tell(ft) - pos_before);",
          "195:         length--;",
          "197:         if (length > 0 && linebuff[length - 1] == '\\r') {",
          "",
          "[Removed Lines]",
          "194:     if (linebuff[length-1] == '\\n') {",
          "",
          "[Added Lines]",
          "194:     if (length > 0 && linebuff[length-1] == '\\n') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c9cbc7d38a8e359ff868c559a5a9056473f1fea",
      "candidate_info": {
        "commit_hash": "3c9cbc7d38a8e359ff868c559a5a9056473f1fea",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3c9cbc7d38a8e359ff868c559a5a9056473f1fea",
        "files": [
          "epan/wslua/wslua_file.c"
        ],
        "message": "potential buffer underflow in File_read_line function in epan/wslua/wslua_file.c\n\nPutting up for review, though I am not completely convinced that\nfile_gets() can return an empty line.\n\nBug: 14295\nChange-Id: If36761ea511b66c01a9f167809a218a7eadbfcc5\nReviewed-on: https://code.wireshark.org/review/24997\nPetri-Dish: Martin Mathieson <martin.r.mathieson@googlemail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 137ab7d5681486c6d6cc8faac4300b7cd4ec0cf1)\nReviewed-on: https://code.wireshark.org/review/25034\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
          ],
          "candidate": [
            "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/wslua/wslua_file.c||epan/wslua/wslua_file.c": [
          "File: epan/wslua/wslua_file.c -> epan/wslua/wslua_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     length = (gint)(file_tell(ft) - pos_before);",
          "196:         length--;",
          "198:         if (length > 0 && linebuff[length - 1] == '\\r') {",
          "",
          "[Removed Lines]",
          "195:     if (linebuff[length-1] == '\\n') {",
          "",
          "[Added Lines]",
          "195:     if (length > 0 && linebuff[length-1] == '\\n') {",
          "",
          "---------------"
        ]
      }
    }
  ]
}