{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
      "candidate_info": {
        "commit_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "files": [
          "ext/rtree/rtreeI.test",
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix to the rowvalue logic that avoids disabling rowvalue inequality contraints on a virtual table when the virtual table sets the omit flag. The logic has been incorrect since row-values were added.  However, this does not come up often as very few virtual tables implement inequality constraints using the omit flag.  Ticket [f096d191b6641daa]\n\nFossilOrigin-Name: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
        "before_after_code_files": [
          "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test": [
          "File: ext/rtree/rtreeI.test -> ext/rtree/rtreeI.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-12-05",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Additional test cases",
          "13: if {![info exists testdir]} {",
          "14:   set testdir [file join [file dirname [info script]] .. .. test]",
          "15: }",
          "16: source [file join [file dirname [info script]] rtree_util.tcl]",
          "17: source $testdir/tester.tcl",
          "18: ifcapable !rtree { finish_test ; return }",
          "20: # The following is a test of rowvalue handling on virtual tables that",
          "21: # deal with inequalities and that set the OMIT flag on terms of the",
          "22: # WHERE clause.  This is not specific to rtree.  We just use rtree because",
          "23: # it is a convenient test platform since it has all the right",
          "24: # characteristics.",
          "25: #",
          "26: do_execsql_test rtreeI-1.10 {",
          "27:   CREATE TABLE t1(a);",
          "28:   INSERT INTO t1 VALUES(2);",
          "29:   CREATE VIRTUAL TABLE t2 USING rtree(id,x0,x1);",
          "30:   INSERT INTO t2(id,x0,x1) VALUES(1,2,3);",
          "31: } {}",
          "32: do_execsql_test rtreeI-1.20 {",
          "33:   SELECT 123 FROM t1, t2 WHERE (a,0)>(x0,0);",
          "34: } {}",
          "35: do_execsql_test rtreeI-1.21 {",
          "36:   SELECT 123 FROM t1, t2 WHERE (a,0.1)>(x0,0);",
          "37: } {123}",
          "38: do_execsql_test rtreeI-1.22 {",
          "39:   SELECT 123 FROM t1, t2 WHERE (a,0)>=(x0,0);",
          "40: } {123}",
          "41: do_execsql_test rtreeI-1.23 {",
          "42:   SELECT 123 FROM t1, t2 WHERE (a,0)<=(x0,0);",
          "43: } {123}",
          "44: do_execsql_test rtreeI-1.24 {",
          "45:   SELECT 123 FROM t1, t2 WHERE (a,0)<(x0,0);",
          "46: } {}",
          "47: do_execsql_test rtreeI-1.30 {",
          "48:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0);",
          "49: } {}",
          "50: do_execsql_test rtreeI-1.31 {",
          "51:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0.1);",
          "52: } {123}",
          "53: do_execsql_test rtreeI-1.40 {",
          "54:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>(x0,0);",
          "55: } {}",
          "56: do_execsql_test rtreeI-1.41 {",
          "57:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0.5)>(x0,0);",
          "58: } {123}",
          "59: do_execsql_test rtreeI-1.42 {",
          "60:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>=(x0,0);",
          "61: } {123}",
          "62: do_execsql_test rtreeI-1.43 {",
          "63:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)<(x0,0);",
          "64: } {}",
          "65: do_execsql_test rtreeI-1.50 {",
          "66:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0);",
          "67: } {}",
          "68: do_execsql_test rtreeI-1.51 {",
          "69:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0.5);",
          "70: } {123}",
          "74: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d3e3f6e7e55da41bf776fab094df54fb6a33b2967881d3184cf854c8a637518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:       if( op & (WO_LT|WO_LE|WO_GT|WO_GE)",
          "1022:        && sqlite3ExprIsVector(pTerm->pExpr->pRight)",
          "1023:       ){",
          "1025:         if( op==WO_LT ) pIdxCons[j].op = WO_LE;",
          "1026:         if( op==WO_GT ) pIdxCons[j].op = WO_GE;",
          "1027:       }",
          "",
          "[Removed Lines]",
          "1024:         if( i<16 ) mNoOmit |= (1 << i);",
          "",
          "[Added Lines]",
          "1024:         testcase( j!=i );",
          "1025:         if( j<16 ) mNoOmit |= (1 << j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3202:       if( iTerm>mxTerm ) mxTerm = iTerm;",
          "3203:       testcase( iTerm==15 );",
          "3204:       testcase( iTerm==16 );",
          "3206:       if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Removed Lines]",
          "3205:       if( iTerm<16 && pUsage[i].omit ) pNew->u.vtab.omitMask |= 1<<iTerm;",
          "",
          "[Added Lines]",
          "3206:       if( iTerm<16 && pUsage[i].omit ){",
          "3207:         if( ((1<<i)&mNoOmit)==0 ){",
          "3208:           testcase( i!=iTerm );",
          "3209:           pNew->u.vtab.omitMask |= 1<<iTerm;",
          "3210:         }else{",
          "3211:           testcase( i!=iTerm );",
          "3212:         }",
          "3213:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3215:       }",
          "3216:     }",
          "3217:   }",
          "3220:   pNew->nLTerm = mxTerm+1;",
          "3221:   for(i=0; i<=mxTerm; i++){",
          "",
          "[Removed Lines]",
          "3218:   pNew->u.vtab.omitMask &= ~mNoOmit;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
      "candidate_info": {
        "commit_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "test/corruptL.test",
          "test/memdb1.test"
        ],
        "message": "When deserializing a database (sqlite3_deserialize()), do not attempt to parse the schema before the data is loaded.\n\nFossilOrigin-Name: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4f0568fde1d4070e7522ec36c0958be7426076002a7fa2da12a46411ab2e92d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
      "candidate_info": {
        "commit_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/where.c",
          "test/fts3fuzz001.test"
        ],
        "message": "Use the new SQLITE_IDXTYPE_IPK values (3) on Index.idxType to indicate the fake INTEGER PRIMARY KEY index used during query planning.\n\nFossilOrigin-Name: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   rc = whereLoopXfer(db, p, pTemplate);",
          "2211:   if( (p->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "2212:     Index *pIndex = p->u.btree.pIndex;",
          "2214:       p->u.btree.pIndex = 0;",
          "2215:     }",
          "2216:   }",
          "",
          "[Removed Lines]",
          "2213:     if( pIndex && pIndex->tnum==0 ){",
          "",
          "[Added Lines]",
          "2213:     if( pIndex && pIndex->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2878:     sPk.onError = OE_Replace;",
          "2879:     sPk.pTable = pTab;",
          "2880:     sPk.szIdxRow = pTab->szTabRow;",
          "2881:     aiRowEstPk[0] = pTab->nRowLogEst;",
          "2882:     aiRowEstPk[1] = 0;",
          "2883:     pFirst = pSrc->pTab->pIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     sPk.idxType = SQLITE_IDXTYPE_IPK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2968:     b = indexMightHelpWithOrderBy(pBuilder, pProbe, pSrc->iCursor);",
          "2970:     assert( (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 );",
          "2973:       pNew->wsFlags = WHERE_IPK;",
          "",
          "[Removed Lines]",
          "2971:     if( pProbe->tnum<=0 ){",
          "",
          "[Added Lines]",
          "2972:     if( pProbe->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "",
          "[Removed Lines]",
          "105: } {0 {}}",
          "",
          "[Added Lines]",
          "105: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40f827a65e3328b072a37eb14dcf93cccfd5aba3",
      "candidate_info": {
        "commit_hash": "40f827a65e3328b072a37eb14dcf93cccfd5aba3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/40f827a65e3328b072a37eb14dcf93cccfd5aba3",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improvements to the README.md file.  No code changes.\n\nFossilOrigin-Name: bbdbaf84a52937ccf877072a8b01b07f7b9c037c59ba54df72ca888d5404cbad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2011c13173114505705d2ff2ba6f476697d51aca0bddd585a9e5a639dca41e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
      "candidate_info": {
        "commit_hash": "57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57c45147207fcf1d94a8a3a324ecf4d19922dfa1",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize further cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum4",
          "20: set step 1",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "24:   INSERT INTO t1 VALUES(1, 2, 3);",
          "25:   INSERT INTO t1 VALUES(4, 5, 6);",
          "26:   INSERT INTO t1 VALUES(7, 8, 9);",
          "27: }",
          "28: do_rbu_vacuum_test 1.1 1",
          "30: #-------------------------------------------------------------------------",
          "31: reset_db",
          "33: do_execsql_test 2.0 {",
          "34:   CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b, c)) WITHOUT ROWID;",
          "35:   INSERT INTO t1 VALUES(1, 2, 3);",
          "36:   INSERT INTO t1 VALUES(4, 5, 6);",
          "37:   INSERT INTO t1 VALUES(7, 8, 9);",
          "38: }",
          "39: do_rbu_vacuum_test 2.1 1",
          "40: do_execsql_test 2.2 {",
          "41:   SELECT * FROM t1;",
          "42: } {1 2 3 4 5 6 7 8 9}",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "47: do_execsql_test 3.0 {",
          "48:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "49:   CREATE INDEX i1 oN t1(b, c);",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "63: do_execsql_test 4.0 {",
          "64:   CREATE TABLE x1(a, b, c, d, PRIMARY KEY(c, b)) WITHOUT ROWID;",
          "65:   INSERT INTO x1 VALUES(1, 1, 1, 1);",
          "66:   INSERT INTO x1 VALUES(1, 1, 2, 1);",
          "67:   INSERT INTO x1 VALUES(1, 2, 2, 1);",
          "69:   INSERT INTO x1 VALUES(NULL, 2, 3, NULL);",
          "70:   INSERT INTO x1 VALUES(NULL, 2, 4, NULL);",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "78: do_execsql_test 4.2 {",
          "79:   SELECT count(*) fROM x1",
          "80: } 6",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "84: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:           break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:   return zRet;",
          "1504: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: char *rbuVacuumIndexStart(",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "1513:   char *zSelect = 0;",
          "1514:   char *zVector = 0;",
          "1515:   char *zRet = 0;",
          "1516:   int bFailed = 0;",
          "1518:   if( p->rc==SQLITE_OK ){",
          "1519:     const char *zSep = \"\";",
          "1520:     int iCol = 0;",
          "1521:     sqlite3_stmt *pXInfo = 0;",
          "1522:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1523:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1524:     );",
          "1525:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1526:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1527:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1528:       const char *zCol;",
          "1529:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1530:         bFailed = 1;",
          "1531:         break;",
          "1532:       }",
          "1534:       if( iCid<0 ){",
          "1535:         if( pIter->eType==RBU_PK_IPK ){",
          "1536:           int i;",
          "1537:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1538:           assert( i<pIter->nTblCol );",
          "1539:           zCol = pIter->azTblCol[i];",
          "1540:         }else{",
          "1541:           zCol = \"_rowid_\";",
          "1542:         }",
          "1543:       }else{",
          "1544:         zCol = pIter->azTblCol[iCid];",
          "1545:       }",
          "1547:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1548:           zLhs, zSep, zCol, zCollate",
          "1549:       );",
          "1550:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1551:           zOrder, zSep, iCol, zCol, zCollate",
          "1552:       );",
          "1553:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1554:           zSelect, zSep, iCol, zCol",
          "1555:       );",
          "1556:       zSep = \", \";",
          "1557:       iCol++;",
          "1558:     }",
          "1559:     rbuFinalize(p, pXInfo);",
          "1560:   }",
          "1561:   if( bFailed ) goto index_start_out;",
          "1563:   if( p->rc==SQLITE_OK ){",
          "1564:     int iCol;",
          "1565:     sqlite3_stmt *pSel = 0;",
          "1567:     if( p->rc==SQLITE_OK ){",
          "1568:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1569:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1570:             zSelect, pIter->zTbl, zOrder",
          "1571:           )",
          "1572:       );",
          "1573:     }",
          "1574:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1575:       const char *zSep = \"\";",
          "1576:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1577:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1578:         if( zQuoted[0]=='N' ){",
          "1579:           bFailed = 1;",
          "1580:           break;",
          "1581:         }",
          "1582:         zVector = rbuMPrintf(p, \"%z%s%s\", zVector, zSep, zQuoted);",
          "1583:         zSep = \", \";",
          "1584:       }",
          "1586:       if( !bFailed ){",
          "1587:         zRet = rbuMPrintf(p, \"(%s) > (%s)\", zLhs, zVector);",
          "1588:       }",
          "1589:     }",
          "1590:     rbuFinalize(p, pSel);",
          "1591:   }",
          "1593:  index_start_out:",
          "1594:   sqlite3_free(zOrder);",
          "1595:   sqlite3_free(zSelect);",
          "1596:   sqlite3_free(zVector);",
          "1597:   sqlite3_free(zLhs);",
          "1598:   return zRet;",
          "1599: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2179:       if( p->rc==SQLITE_OK ){",
          "2180:         char *zSql;",
          "2181:         if( rbuIsVacuum(p) ){",
          "2182:           zSql = sqlite3_mprintf(",
          "2184:               zCollist,",
          "2185:               pIter->zDataTbl,",
          "2187:           );",
          "2188:         }else",
          "2190:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "",
          "[Removed Lines]",
          "2183:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2186:               zPart, zCollist, zLimit",
          "",
          "[Added Lines]",
          "2277:           const char *zStart = 0;",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "2281:               sqlite3_free(zLimit);",
          "2282:               zLimit = 0;",
          "2283:             }",
          "2284:           }",
          "2287:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s\",",
          "2290:               zPart,",
          "2291:               (zStart ? (zPart ? \"AND\" : \"WHERE\") : \"\"), zStart,",
          "2292:               zCollist, zLimit",
          "2294:           sqlite3_free(zStart);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2207:               zCollist, zLimit",
          "2208:           );",
          "2209:         }",
          "2211:       }",
          "2213:       sqlite3_free(zImposterCols);",
          "",
          "[Removed Lines]",
          "2210:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz, zSql);",
          "",
          "[Added Lines]",
          "2317:         if( p->rc==SQLITE_OK ){",
          "2318:           p->rc = prepareFreeAndCollectError(p->dbRbu,&pIter->pSelect,pz,zSql);",
          "2319:         }else{",
          "2320:           sqlite3_free(zSql);",
          "2321:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}