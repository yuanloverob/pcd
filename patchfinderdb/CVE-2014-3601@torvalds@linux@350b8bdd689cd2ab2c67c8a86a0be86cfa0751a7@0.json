{
  "cve_id": "CVE-2014-3601",
  "cve_desc": "The kvm_iommu_map_pages function in virt/kvm/iommu.c in the Linux kernel through 3.16.1 miscalculates the number of pages during the handling of a mapping failure, which allows guest OS users to (1) cause a denial of service (host OS memory corruption) or possibly have unspecified other impact by triggering a large gfn value or (2) cause a denial of service (host OS memory consumption) by triggering a small gfn value that leads to permanently pinned pages.",
  "repo": "torvalds/linux",
  "patch_hash": "350b8bdd689cd2ab2c67c8a86a0be86cfa0751a7",
  "patch_info": {
    "commit_hash": "350b8bdd689cd2ab2c67c8a86a0be86cfa0751a7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/350b8bdd689cd2ab2c67c8a86a0be86cfa0751a7",
    "files": [
      "virt/kvm/iommu.c"
    ],
    "message": "kvm: iommu: fix the third parameter of kvm_iommu_put_pages (CVE-2014-3601)\n\nThe third parameter of kvm_iommu_put_pages is wrong,\nIt should be 'gfn - slot->base_gfn'.\n\nBy making gfn very large, malicious guest or userspace can cause kvm to\ngo to this error path, and subsequently to pass a huge value as size.\nAlternatively if gfn is small, then pages would be pinned but never\nunpinned, causing host memory leak and local DOS.\n\nPassing a reasonable but large value could be the most dangerous case,\nbecause it would unpin a page that should have stayed pinned, and thus\nallow the device to DMA into arbitrary memory.  However, this cannot\nhappen because of the condition that can trigger the error:\n\n- out of memory (where you can't allocate even a single page)\n  should not be possible for the attacker to trigger\n\n- when exceeding the iommu's address space, guest pages after gfn\n  will also exceed the iommu's address space, and inside\n  kvm_iommu_put_pages() the iommu_iova_to_phys() will fail.  The\n  page thus would not be unpinned at all.\n\nReported-by: Jack Morgenstein <jackm@mellanox.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "virt/kvm/iommu.c||virt/kvm/iommu.c"
    ]
  },
  "patch_diff": {
    "virt/kvm/iommu.c||virt/kvm/iommu.c": [
      "File: virt/kvm/iommu.c -> virt/kvm/iommu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:  return pfn;",
      "62: }",
      "64: int kvm_iommu_map_pages(struct kvm *kvm, struct kvm_memory_slot *slot)",
      "65: {",
      "66:  gfn_t gfn, end_gfn;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64: static void kvm_unpin_pages(struct kvm *kvm, pfn_t pfn, unsigned long npages)",
      "65: {",
      "66:  unsigned long i;",
      "68:  for (i = 0; i < npages; ++i)",
      "69:   kvm_release_pfn_clean(pfn + i);",
      "70: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   if (r) {",
      "124:    printk(KERN_ERR \"kvm_iommu_map_address:\"",
      "125:           \"iommu failed to map pfn=%llx\\n\", pfn);",
      "126:    goto unmap_pages;",
      "127:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:    kvm_unpin_pages(kvm, pfn, page_size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:  return 0;",
      "136: unmap_pages:",
      "138:  return r;",
      "139: }",
      "",
      "[Removed Lines]",
      "137:  kvm_iommu_put_pages(kvm, slot->base_gfn, gfn);",
      "",
      "[Added Lines]",
      "146:  kvm_iommu_put_pages(kvm, slot->base_gfn, gfn - slot->base_gfn);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "266:  return r;",
      "267: }",
      "277: static void kvm_iommu_put_pages(struct kvm *kvm,",
      "278:     gfn_t base_gfn, unsigned long npages)",
      "279: {",
      "",
      "[Removed Lines]",
      "269: static void kvm_unpin_pages(struct kvm *kvm, pfn_t pfn, unsigned long npages)",
      "270: {",
      "271:  unsigned long i;",
      "273:  for (i = 0; i < npages; ++i)",
      "274:   kvm_release_pfn_clean(pfn + i);",
      "275: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d32e4dbe71374a6780eaf51d719d76f9a9bf22f",
      "candidate_info": {
        "commit_hash": "3d32e4dbe71374a6780eaf51d719d76f9a9bf22f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3d32e4dbe71374a6780eaf51d719d76f9a9bf22f",
        "files": [
          "virt/kvm/iommu.c"
        ],
        "message": "kvm: fix excessive pages un-pinning in kvm_iommu_map error path.\n\nThe third parameter of kvm_unpin_pages() when called from\nkvm_iommu_map_pages() is wrong, it should be the number of pages to un-pin\nand not the page size.\n\nThis error was facilitated with an inconsistent API: kvm_pin_pages() takes\na size, but kvn_unpin_pages() takes a number of pages, so fix the problem\nby matching the two.\n\nThis was introduced by commit 350b8bd (\"kvm: iommu: fix the third parameter\nof kvm_iommu_put_pages (CVE-2014-3601)\"), which fixes the lack of\nun-pinning for pages intended to be un-pinned (i.e. memory leak) but\nunfortunately potentially aggravated the number of pages we un-pin that\nshould have stayed pinned. As far as I understand though, the same\npractical mitigations apply.\n\nThis issue was found during review of Red Hat 6.6 patches to prepare\nKsplice rebootless updates.\n\nThanks to Vegard for his time on a late Friday evening to help me in\nunderstanding this code.\n\nFixes: 350b8bd (\"kvm: iommu: fix the third parameter of... (CVE-2014-3601)\")\nCc: stable@vger.kernel.org\nSigned-off-by: Quentin Casasnovas <quentin.casasnovas@oracle.com>\nSigned-off-by: Vegard Nossum <vegard.nossum@oracle.com>\nSigned-off-by: Jamie Iles <jamie.iles@oracle.com>\nReviewed-by: Sasha Levin <sasha.levin@oracle.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "virt/kvm/iommu.c||virt/kvm/iommu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "virt/kvm/iommu.c||virt/kvm/iommu.c"
          ],
          "candidate": [
            "virt/kvm/iommu.c||virt/kvm/iommu.c"
          ]
        }
      },
      "candidate_diff": {
        "virt/kvm/iommu.c||virt/kvm/iommu.c": [
          "File: virt/kvm/iommu.c -> virt/kvm/iommu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     gfn_t base_gfn, unsigned long npages);",
          "45: static pfn_t kvm_pin_pages(struct kvm_memory_slot *slot, gfn_t gfn,",
          "47: {",
          "48:  gfn_t end_gfn;",
          "49:  pfn_t pfn;",
          "51:  pfn     = gfn_to_pfn_memslot(slot, gfn);",
          "53:  gfn    += 1;",
          "55:  if (is_error_noslot_pfn(pfn))",
          "",
          "[Removed Lines]",
          "46:       unsigned long size)",
          "52:  end_gfn = gfn + (size >> PAGE_SHIFT);",
          "",
          "[Added Lines]",
          "46:       unsigned long npages)",
          "52:  end_gfn = gfn + npages;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   if (is_error_noslot_pfn(pfn)) {",
          "124:    gfn += 1;",
          "125:    continue;",
          "",
          "[Removed Lines]",
          "122:   pfn = kvm_pin_pages(slot, gfn, page_size);",
          "",
          "[Added Lines]",
          "122:   pfn = kvm_pin_pages(slot, gfn, page_size >> PAGE_SHIFT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   if (r) {",
          "132:    printk(KERN_ERR \"kvm_iommu_map_address:\"",
          "133:           \"iommu failed to map pfn=%llx\\n\", pfn);",
          "135:    goto unmap_pages;",
          "136:   }",
          "",
          "[Removed Lines]",
          "134:    kvm_unpin_pages(kvm, pfn, page_size);",
          "",
          "[Added Lines]",
          "134:    kvm_unpin_pages(kvm, pfn, page_size >> PAGE_SHIFT);",
          "",
          "---------------"
        ]
      }
    }
  ]
}