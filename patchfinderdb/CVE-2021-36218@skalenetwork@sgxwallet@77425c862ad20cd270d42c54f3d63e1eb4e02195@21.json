{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86a5cac36b3d6aa2e86d38abad4eb793ab153cff",
      "candidate_info": {
        "commit_hash": "86a5cac36b3d6aa2e86d38abad4eb793ab153cff",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/86a5cac36b3d6aa2e86d38abad4eb793ab153cff",
        "files": [
          "DKGCrypto.cpp",
          "Makefile.am",
          "SGXWalletServer.cpp",
          "ServerDataChecker.cpp",
          "secure_enclave/enclave_common.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "stubclient.h",
          "testw.cpp"
        ],
        "message": "Merge branch 'bug/SKALE-2074-SIGILL-in-SGX-server' into enhancement/SKALE-2003-Create-backup-key",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "Makefile.am||Makefile.am",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "secure_enclave/enclave_common.h||secure_enclave/enclave_common.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "stubclient.h||stubclient.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:       spdlog::info(\"in DKGCrypto encr len is {}\", enc_len);",
          "96:     }",
          "101:     string result(hexEncrPoly.data());",
          "103:     return result;",
          "",
          "[Removed Lines]",
          "98:     vector<char> hexEncrPoly(DKG_MAX_SEALED_LEN * 2 + 1, 0);//(4*BUF_LEN, 1);",
          "100:     carray2Hex(encrypted_dkg_secret.data(), DKG_MAX_SEALED_LEN, hexEncrPoly.data());",
          "",
          "[Added Lines]",
          "99:     uint64_t length = DKG_MAX_SEALED_LEN;",
          "100:     if (is_aes){",
          "101:       length = enc_len;",
          "102:     }",
          "106:     vector<char> hexEncrPoly(2 * length, 0);",
          "109:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   }",
          "116:   char* public_shares = (char*)calloc(10000, 1);",
          "118:   uint64_t enc_len = 0;",
          "121:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "122:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "123:   }",
          "125:   if (DEBUG_PRINT) {",
          "126:     spdlog::info(\"enc len {}\", enc_len);",
          "130:   }",
          "134:   if ( err_status != 0){",
          "135:     throw RPCException(-666, errMsg1 );",
          "136:   }",
          "",
          "[Removed Lines]",
          "120:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "128:     for ( int i = 0 ; i < 3050; i++)",
          "132:   uint32_t len = 0;",
          "133:   status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "",
          "[Added Lines]",
          "131:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN * 2, 1);",
          "139:     cerr << \"hex_encr_poly is \" << encryptedPolyHex << std::endl;",
          "140:     spdlog::info(\"hex_encr_poly length is {}\", strlen(encryptedPolyHex));",
          "147:   uint32_t len;",
          "148:   if (!is_aes)",
          "149:     status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "150:   else {",
          "152:     status = get_public_shares_aes(eid, &err_status, errMsg1, encr_dkg_poly, enc_len, public_shares, t, n);",
          "153:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: }",
          "163: string get_secret_shares(const string& polyName, const char* encryptedPolyHex, const vector<string>& publicKeys, int t, int n){",
          "165:   int err_status = 0;",
          "167:   uint64_t enc_len = 0;",
          "170:   if(!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "171:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "172:   }",
          "",
          "[Removed Lines]",
          "164:   char* errMsg1 = (char*) calloc(1024,1);",
          "169:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "",
          "[Added Lines]",
          "185:   char errMsg1[BUF_LEN];",
          "191:   uint8_t encr_dkg_poly[DKG_MAX_SEALED_LEN];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:   }",
          "183:   string result;",
          "186:   for ( int i = 0; i < n; i++){",
          "187:     uint8_t encrypted_skey[BUF_LEN];",
          "",
          "[Removed Lines]",
          "184:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "207:   char hexEncrKey[2 * BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:     char pubKeyB[129];",
          "197:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "198:     pubKeyB[128] = 0;",
          "200:                    cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "201:     if (err_status != 0){",
          "202:       throw RPCException(-666, errMsg1);",
          "203:     }",
          "205:     result += cur_share;",
          "",
          "[Removed Lines]",
          "199:     get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "",
          "[Added Lines]",
          "222:     if (DEBUG_PRINT) {",
          "223:       spdlog::info(\"pubKeyB is {}\", pub_keyB);",
          "224:     }",
          "226:     if (!is_aes)",
          "227:       get_encr_sshare(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "229:     else",
          "230:       get_encr_sshare_aes(eid, &err_status, errMsg1, encrypted_skey, &dec_len,",
          "231:                       cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "235:     if (DEBUG_PRINT) {",
          "236:       spdlog::info(\"cur_share is {}\", cur_share);",
          "237:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "232:   }",
          "239:   return result;",
          "240: }",
          "242: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind ){",
          "244:     int err_status = 0;",
          "246:     uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "235:   free(encr_dkg_poly);",
          "236:   free(errMsg1);",
          "237:   free(hexEncrKey);",
          "243:     char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "278:     char errMsg1[BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "272:       spdlog::info(\"result is: {}\", result);",
          "273:     }",
          "277:     return result;",
          "278: }",
          "",
          "[Removed Lines]",
          "275:     free(errMsg1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "281:   if (DEBUG_PRINT) {",
          "282:     spdlog::info(\"ENTER CreateBLSShare\");",
          "283:   }",
          "285:   int err_status = 0;",
          "287:   uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "284:   char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "321:   char errMsg1[BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "301:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "302:   }",
          "303:   else {",
          "307:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "",
          "[Removed Lines]",
          "304:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "342:     char hexBLSKey[2 * BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311:       spdlog::info(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "312:       spdlog::info(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "313:     }",
          "315:     return true;",
          "316:   }",
          "318: }",
          "320: vector<string> GetBLSPubKey(const char * encryptedKeyHex){",
          "322:     int err_status = 0;",
          "324:     uint64_t dec_key_len ;",
          "",
          "[Removed Lines]",
          "314:     free(hexBLSKey);",
          "321:     char* errMsg1 = (char*) calloc(1024,1);",
          "",
          "[Added Lines]",
          "361:     char errMsg1[BUF_LEN];",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: ## Additional automake variables",
          "44: ##",
          "45: #AM_CPPFLAGS += -g -Og",
          "49: AM_CPPFLAGS += -Wall -DSKALE_SGX=1 -DBINARY_OUTPUT=1 -Ileveldb/include -IlibBLS/bls -IlibBLS/libff -IlibBLS -fno-builtin-memset $(GMP_CPPFLAGS)  -I.  -I./libBLS/deps/deps_inst/x86_or_x64/include",
          "",
          "[Removed Lines]",
          "46: #AM_CFLAGS = -g -Og",
          "47: #AM_CXXFLAGS = ${AM_CPPFLAGS}",
          "",
          "[Added Lines]",
          "47: AM_CFLAGS = -g -Og -rdynamic -Wl,--no-as-needed -lSegFault",
          "48: AM_CXXFLAGS = ${AM_CPPFLAGS} -rdynamic -Wl,--no-as-needed -lSegFault",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     }",
          "115:   }",
          "118:   s = new SGXWalletServer(*hs,",
          "119:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "",
          "[Removed Lines]",
          "117:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 10);",
          "",
          "[Added Lines]",
          "117:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 64);",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: bool checkHex(const string& hex, const uint32_t sizeInBytes){",
          "74:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "75:     return false;",
          "76:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     spdlog::error(\"public key is too long or zero - \", hex.length());",
          "76:     std::cerr << \"public key length is \" << hex.length() << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   mpz_init(num);",
          "81:   if ( mpz_set_str(num, hex.c_str(), 16) == -1){",
          "82:     mpz_clear(num);",
          "83:     return false;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     spdlog::error(\"public key is not hex {}\", hex);",
          "",
          "---------------"
        ],
        "secure_enclave/enclave_common.h||secure_enclave/enclave_common.h": [
          "File: secure_enclave/enclave_common.h -> secure_enclave/enclave_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define ADD_ENTROPY_SIZE 32",
          "20: #define  DKG_BUFER_LENGTH 2490//3060",
          "23: #define SECRET_SHARE_NUM_BYTES 96",
          "",
          "[Removed Lines]",
          "21: #define  DKG_MAX_SEALED_LEN 3050",
          "",
          "[Added Lines]",
          "21: #define  DKG_MAX_SEALED_LEN 3100",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   domain_parameters curve = domain_parameters_init();",
          "132:   domain_parameters_load_curve(curve, secp256k1);",
          "135:   sgx_read_rand( rand_char, 32);",
          "137:   mpz_t seed;",
          "",
          "[Removed Lines]",
          "134:   unsigned char* rand_char = (unsigned char*)malloc(32);",
          "",
          "[Added Lines]",
          "134:   unsigned char* rand_char= (unsigned char*)malloc(32);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:         return;",
          "505:     }",
          "508: }",
          "510: void gen_dkg_secret (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "514:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "",
          "[Removed Lines]",
          "512:   char* dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "508:    free(sig);",
          "513:   char dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:   }",
          "533: }",
          "535: void decrypt_dkg_secret (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "",
          "[Removed Lines]",
          "532:   free(dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551: void get_secret_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* dec_len, char* secret_shares,",
          "552:     unsigned _t, unsigned _n){",
          "557:   uint32_t decr_len ;",
          "",
          "[Removed Lines]",
          "554:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "555:   char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571:  calc_secret_shares(decrypted_dkg_secret, secret_shares, _t, _n);",
          "573: }",
          "575: void get_public_shares(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "576:                        unsigned _t, unsigned _n){",
          "577:   char* decrypted_dkg_secret = (char*)malloc(DKG_MAX_SEALED_LEN);",
          "578:   uint32_t decr_len ;",
          "579:   decrypt_dkg_secret(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "572:  free(decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:     snprintf(err_string, BUF_LEN,\"t does not match polynomial in db\");",
          "589:     return;",
          "590:   }",
          "591: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:   free(decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "609:     char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "611:   char skey[ECDSA_SKEY_LEN];",
          "615:   uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "612:   char *pub_key_x = (char *)calloc(1024, 1);",
          "613:   char *pub_key_y = (char *)calloc(1024, 1);",
          "",
          "[Added Lines]",
          "616:   char pub_key_x[BUF_LEN];",
          "617:   memset(pub_key_x, 0, BUF_LEN);",
          "618:   char pub_key_y[BUF_LEN];",
          "619:   memset(pub_key_y, 0, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "632:   }",
          "633:   snprintf(err_string, BUF_LEN,\"unsealed random skey is %s\\n\", skey);",
          "636:   gen_session_key(skey, pub_keyB, common_key);",
          "643:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "",
          "[Removed Lines]",
          "635:   char * common_key = (char *)malloc(65);",
          "640:   char* s_share = (char *)malloc(65);",
          "",
          "[Added Lines]",
          "643:   char * common_key[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "648:   char* s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "653:     return;",
          "654:   }",
          "657:   xor_encrypt(common_key, s_share, cypher);",
          "658:   if (cypher == NULL){",
          "",
          "[Removed Lines]",
          "656:   char* cypher = (char *)malloc(65);",
          "",
          "[Added Lines]",
          "664:   char* cypher[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "678: }",
          "680: void complaint_response(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret, uint32_t* dec_len,",
          "",
          "[Removed Lines]",
          "673:   free(common_key);",
          "674:   free(pub_key_x);",
          "675:   free(pub_key_y);",
          "676:   free(s_share);",
          "677:   free(cypher);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "693:   uint32_t decr_len;",
          "694:   decrypt_dkg_secret(err_status, err_string, encrypted_dkg_secret, (uint8_t*)decrypted_dkg_secret, &decr_len);",
          "695:   if (*err_status != 0) {",
          "",
          "[Removed Lines]",
          "692:   char* decrypted_dkg_secret = (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "[Added Lines]",
          "700:   char decrypted_dkg_secret[DKG_BUFER_LENGTH]; //= (char*)malloc(DKG_BUFER_LENGTH);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "707: }",
          "709: void dkg_verification(int *err_status, char* err_string, const char * public_shares, const char* s_share,",
          "",
          "[Removed Lines]",
          "706:   free(decrypted_dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "719:     return;",
          "720:   }",
          "724:   encr_sshare[64] = 0;",
          "728:   session_key_recover(skey, s_share, common_key);",
          "730:   if (common_key == NULL){",
          "732:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "",
          "[Removed Lines]",
          "722:   char encr_sshare[65];",
          "723:   strncpy(encr_sshare, s_share, 64);",
          "726:   char common_key[65];",
          "727:   char decr_sshare[65];",
          "729:   common_key[64] = 0;",
          "",
          "[Added Lines]",
          "730:   char encr_sshare[ECDSA_SKEY_LEN];",
          "731:   strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
          "734:   char common_key[ECDSA_SKEY_LEN];",
          "735:   char decr_sshare[ECDSA_SKEY_LEN];",
          "737:   common_key[ECDSA_SKEY_LEN - 1] = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1258:   char key[BUF_LEN];",
          "1261:   init();",
          "",
          "[Removed Lines]",
          "1259:   char* sig = (char*) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "1264:   char sig[BUF_LEN];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1278:     return;",
          "1279:   }",
          "1280: }",
          "1282: void gen_dkg_secret_aes (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "1286:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "",
          "[Removed Lines]",
          "1284:   char* dkg_secret = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "",
          "[Added Lines]",
          "1291:   char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1299:   }",
          "1303: }",
          "1305: void decrypt_dkg_secret_aes (int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t* dec_len){",
          "",
          "[Removed Lines]",
          "1302:   free(dkg_secret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1318: void set_encrypted_dkg_poly_aes(int *err_status, char *err_string, uint8_t* encrypted_poly,  uint64_t* enc_len){",
          "1323:   if (status != SGX_SUCCESS) {",
          "1325:     snprintf(err_string, BUF_LEN,\"sgx_unseal_data - encrypted_poly failed with status %d\", status);",
          "1326:     return;",
          "1327:   }",
          "1329: }",
          "",
          "[Removed Lines]",
          "1320:   uint32_t decr_len;",
          "1321:   int status = AES_decrypt(encrypted_poly, enc_len, Decrypted_dkg_poly);",
          "",
          "[Added Lines]",
          "1327:   int status = AES_decrypt(encrypted_poly, *enc_len, Decrypted_dkg_poly);",
          "1334: }",
          "1336: void get_encr_sshare_aes(int *err_status, char *err_string, uint8_t *encrypted_skey, uint32_t* dec_len,",
          "1337:                      char* result_str, char * s_shareG2, char* pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind ){",
          "1339:   char skey[ECDSA_SKEY_LEN];",
          "1340:   char pub_key_x[BUF_LEN];",
          "1341:   memset(pub_key_x, 0, BUF_LEN);",
          "1342:   char pub_key_y[BUF_LEN];",
          "1343:   memset(pub_key_y, 0, BUF_LEN);",
          "1347:   uint32_t enc_len;",
          "1349:   generate_ecdsa_key_aes(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "1350:   if ( *err_status != 0){",
          "1351:     return;",
          "1352:   }",
          "1355:   int status = AES_decrypt(encrypted_skey, enc_len, skey);",
          "1356:   skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1358:   if (status != SGX_SUCCESS) {",
          "1359:     snprintf(err_string, BUF_LEN,\"AES_decrypt failed (in get_encr_sshare_aes)  with status %d\", status);",
          "1361:     return;",
          "1362:   }",
          "1363:   snprintf(err_string, BUF_LEN,\"unsealed random skey is %s\\n\", skey);",
          "1365:   char * common_key[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1366:   gen_session_key(skey, pub_keyB, common_key);",
          "1370:   char* s_share[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1373:   if (calc_secret_share(Decrypted_dkg_poly, s_share, _t, _n, ind) != 0){",
          "1375:     snprintf(err_string, BUF_LEN,\"\\nt does not match poly degree\\n\");",
          "1376:     return;",
          "1377:   }",
          "1378:   snprintf(err_string + 88, BUF_LEN,\"\\nsecret share is %s\", s_share);",
          "1380:   if (calc_secret_shareG2(s_share, s_shareG2) != 0){",
          "1382:     snprintf(err_string, BUF_LEN,\"invalid decr secret share\\n\");",
          "1383:     return;",
          "1384:   }",
          "1386:   char* cypher[ECDSA_SKEY_LEN]; //= (char *)malloc(65);",
          "1387:   xor_encrypt(common_key, s_share, cypher);",
          "1388:   if (cypher == NULL){",
          "1390:     snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "1391:     return;",
          "1392:   }",
          "1395:   strncpy(result_str, cypher, strlen(cypher));",
          "1396:   strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));",
          "1397:   strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));",
          "1408: }",
          "1410: void get_public_shares_aes(int *err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t enc_len, char* public_shares,",
          "1411:                        unsigned _t, unsigned _n){",
          "1413:   char* decrypted_dkg_secret = (char*)calloc(DKG_MAX_SEALED_LEN, 1);",
          "1417:   decrypt_dkg_secret_aes(err_status, err_string, (uint8_t*)encrypted_dkg_secret, decrypted_dkg_secret, enc_len);",
          "1418:   if(  *err_status != 0 ){",
          "1419:     snprintf(err_string, BUF_LEN,\"decrypt_dkg_secret failed with status %d\", *err_status);",
          "1420:     return;",
          "1421:   }",
          "1422:     int status = AES_decrypt(encrypted_dkg_secret, enc_len, decrypted_dkg_secret);",
          "1425:   if (status != SGX_SUCCESS) {",
          "1426:     snprintf(err_string, BUF_LEN,\"aes decrypt data - encrypted_dkg_secret failed with status %d\", status);",
          "1428:     return;",
          "1429:   }",
          "1433:   if ( calc_public_shares(decrypted_dkg_secret, public_shares, _t) != 0 ){",
          "1435:     snprintf(err_string, BUF_LEN,\"t does not match polynomial in db\");",
          "1436:     return;",
          "1437:   }",
          "1439:   free(decrypted_dkg_secret);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:                               [in, count = 3050] uint8_t* encrypted_poly,",
          "234:                               [user_check] uint64_t* enc_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:         public void get_encr_sshare_aes(",
          "237:                             [user_check]int *err_status,",
          "238:                             [out, count = 1024] char *err_string,",
          "239:                             [out, count = 1024] uint8_t *encrypted_skey,",
          "240:                             [user_check] uint32_t* dec_len,",
          "241:                             [out, count = 193] char* result_str,",
          "242:                             [out, count = 320] char* s_shareG2,",
          "243:                             [in, count = 129] char* pub_keyB,",
          "244:                             uint8_t _t,",
          "245:                             uint8_t _n,",
          "246:                             uint8_t ind);",
          "248:         public void get_public_shares_aes (",
          "249:                           [user_check] int *err_status,",
          "250:                           [out, count = 1024] char* err_string,",
          "251:                           [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "252:                           uint32_t enc_len,",
          "253:                           [out, count = 10000] char* public_shares,",
          "254:                           unsigned _t,",
          "255:                           unsigned _n);",
          "",
          "---------------"
        ],
        "stubclient.h||stubclient.h": [
          "File: stubclient.h -> stubclient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:           p[\"secretShare\"] = SecretShare;",
          "166:           p[\"n\"] = n;",
          "167:           p[\"t\"] = t;",
          "169:           if (result.isObject())",
          "170:            return result;",
          "171:           else",
          "",
          "[Removed Lines]",
          "168:           Json::Value result = this->CallMethod(\"reateBLSPrivateKey\",p);",
          "",
          "[Added Lines]",
          "168:           Json::Value result = this->CallMethod(\"createBLSPrivateKey\",p);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #include <thread>",
          "82: #include \"common.h\"",
          "86: string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: default_random_engine rand_gen((unsigned int) time(0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     }",
          "183: }",
          "",
          "[Removed Lines]",
          "185: TEST_CASE(\"BLS key import\", \"[bls-key-import]\") {",
          "186:     reset_db();",
          "187:     init_all(false, false);",
          "191:     auto result = importBLSKeyShareImpl(TEST_BLS_KEY_SHARE, TEST_BLS_KEY_NAME, 2, 2, 1);",
          "193:     REQUIRE(result[\"status\"] == 0);",
          "195:     REQUIRE(result[\"encryptedKeyShare\"] != \"\");",
          "197: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:   return koef;",
          "373: }",
          "443: TEST_CASE( \"DKG public shares test\", \"[dkg-pub_shares]\" ) {",
          "",
          "[Removed Lines]",
          "377:  TEST_CASE( \"DKG secret shares test\", \"[dkg-s_shares]\" ) {",
          "380:   init_enclave();",
          "381:   libff::init_alt_bn128_params();",
          "383:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "385:   char* errMsg = (char*) calloc(1024,1);",
          "386:   int err_status = 0;",
          "387:   uint32_t enc_len = 0;",
          "389:   unsigned t = 32, n = 32;",
          "391:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, n);",
          "392:   REQUIRE(status == SGX_SUCCESS);",
          "393:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "394:   printf(\"\\n Length: %d \\n\", enc_len);",
          "396:   for ( int i = 0 ; i < enc_len; i++)",
          "399:   char* errMsg1 = (char*) calloc(1024,1);",
          "401:   char colon = ':';",
          "402:   char* secret_shares = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "403:   uint32_t dec_len = enc_len;",
          "405:   status = get_secret_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, &dec_len, secret_shares, t, n);",
          "406:   REQUIRE(status == SGX_SUCCESS);",
          "407:   printf(\"\\nget_secret_shares status: %d %s \\n\", err_status, errMsg1);",
          "408:   printf(\"secret shares %s \\n\\n\", secret_shares);",
          "410:   vector <libff::alt_bn128_Fr> s_shares = SplitStringToFr( secret_shares, colon);",
          "412:  char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "413:  status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "414:  REQUIRE(status == SGX_SUCCESS);",
          "417:  signatures::Dkg dkg_obj(t,n);",
          "419:  vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "420:  vector < libff::alt_bn128_Fr> s_shares_dkg = dkg_obj.SecretKeyContribution(SplitStringToFr((char*)secret, colon));",
          "421:  printf(\"calculated secret length %d : \\n\", s_shares_dkg.size());",
          "422:  for ( int  i = 0; i < s_shares_dkg.size(); i++){",
          "423:    libff::alt_bn128_Fr cur_share = s_shares_dkg.at(i);",
          "424:    mpz_t(sshare);",
          "425:    mpz_init(sshare);",
          "426:    cur_share.as_bigint().to_mpz(sshare);",
          "427:    char arr[mpz_sizeinbase (sshare, 10) + 2];",
          "428:    char* share_str = mpz_get_str(arr, 10, sshare);",
          "429:    printf(\" %s \\n\", share_str);",
          "430:    mpz_clear(sshare);",
          "431:  }",
          "433:  REQUIRE(s_shares == s_shares_dkg);",
          "435:   free(errMsg);",
          "436:   free(errMsg1);",
          "437:   free(encrypted_dkg_secret);",
          "438:   free(secret_shares);",
          "440:   sgx_destroy_enclave(eid);",
          "441: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "548:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "550:   cerr << \"secret share is \" << result << endl;",
          "551: }",
          "553: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:   sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "587:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "589:   cerr << \"secret share is \" << result << endl;",
          "590: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:   sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "732: #include \"stubclient.h\"",
          "733: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "",
          "[Removed Lines]",
          "721: TEST_CASE( \"pub_bls_key\", \"[pub_bls]\" ) {",
          "722:   init_daemon();",
          "723:   init_enclave();",
          "724:   char *encryptedKeyHex =",
          "725:       \"04000200000000000406ffffff02000000000000000000000b000000000000ff0000000000000000813f8390f6228a568e181a4dadb6508e3e66f5247175d65dbd0d8c7fbfa4df45000000fdc044ae0cd79faaf41e8a7abb412790476738a98b5b6ce95fa1a32db5551b0a0d867305f4de558c64fee730a1f62394633c7d4ca65e3a40b7883e89c2801c61918b01c5de8624a52963df6f4de8581bcbdd2f9b69720d4cc764e03a04c7a99314bfdb5d2d55deda2ca40cd691f093fb2ecbae24cdacdd4d5de93189c6dfd6792d7b95bd5e330aec3538e7a85d15793\"; // encryptTestKey();",
          "727:   vector<string> result = GetBLSPubKey(encryptedKeyHex);",
          "729:   sgx_destroy_enclave(eid);",
          "730: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "774:   vector<string> pubShares(n);",
          "775:   vector<string> poly_names(n);",
          "777:   for ( uint8_t i = 0; i < n; i++){",
          "778:     EthKeys[i] = c.generateECDSAKey();",
          "780:     c.generateDKGPoly(polyName, t);",
          "781:     poly_names[i] = polyName;",
          "782:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "783:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "784:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "785:   }",
          "",
          "[Removed Lines]",
          "779:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:\" + to_string(i) + \":DKG_ID:0\";",
          "",
          "[Added Lines]",
          "701:   int schain_id = rand_gen();",
          "702:   int dkg_id = rand_gen();",
          "705:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "710:     REQUIRE(VerifVects[i][\"status\"] == 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788:   for ( uint8_t i = 0; i < n; i++){",
          "789:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "790:     for ( uint8_t k = 0; k < t; k++ ) {",
          "791:       for (uint8_t j = 0; j < 4; j++) {",
          "792:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "793:         pubShares[i] += ConvertDecToHex(pubShare);",
          "794:       }",
          "795:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:     cout << secretShares[i] << std::endl;",
          "719:     REQUIRE(secretShares[i][\"status\"] == 0);",
          "723:         REQUIRE(pubShare.length() > 60 );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "798:   }",
          "804:   int k = 0;",
          "",
          "[Removed Lines]",
          "800:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "801:   cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "802:   cerr << \"DHKey is \" << complaintResponse[\"dhKey\"].asString();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "813:        cerr << \"secretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "814:        string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192);",
          "815:        secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192);",
          "816:        bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "817:        k++;",
          "818:        cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:        cerr << \"pubShare is \" << pubShares[i] << std::endl;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "987:   sgx_destroy_enclave(eid);",
          "988: }",
          "992: void SendRPCRequest(){",
          "993:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "994:     HttpClient client(\"http://localhost:1029\");",
          "995:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1000:   Json::Value EthKeys[n];",
          "1001:   Json::Value VerifVects[n];",
          "1002:   Json::Value pubEthKeys;",
          "",
          "[Removed Lines]",
          "990: default_random_engine rand_gen((unsigned int) time(0));",
          "996:   reset_db();",
          "999:   int n = 2, t = 2;",
          "",
          "[Added Lines]",
          "926:     reset_db();",
          "929:   int n = 16, t = 16;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1014:     c.generateDKGPoly(polyName, t);",
          "1015:     poly_names[i] = polyName;",
          "1016:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1017:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "1018:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1019:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947:     REQUIRE( VerifVects[i][\"status\"] == 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1022:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1023:     for ( uint8_t k = 0; k < t; k++ ) {",
          "1024:       for (uint8_t j = 0; j < 4; j++) {",
          "1026:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1027:       }",
          "1028:     }",
          "",
          "[Removed Lines]",
          "1025:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "",
          "[Added Lines]",
          "956:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1041:   for ( int i = 0; i < n; i++)",
          "1042:     for ( int j = 0; j < n; j++){",
          "1044:         cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1045:         string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192 );",
          "1046:         secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192 );",
          "1048:         k++;",
          "1049:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1052:     }",
          "1053:  }",
          "1055: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1056:   is_sgx_https = 0;",
          "1057:   init_all( false, false );",
          "1059:   vector<thread> threads;",
          "1061:   for (int i = 0; i < num_threads; i++){",
          "1062:     threads.push_back(thread(SendRPCRequest));",
          "1063:   }",
          "",
          "[Removed Lines]",
          "1043:       if ( i != j ){",
          "1047:         bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "1050:         REQUIRE( res );",
          "1051:       }",
          "1060:   int num_threads = 16;",
          "",
          "[Added Lines]",
          "975:         Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "976:         cout << verif;",
          "977:         bool res = verif[\"result\"].asBool();",
          "986:   BLSSigShareSet sigShareSet(t, n);",
          "988:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "990:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "991:   uint64_t binLen;",
          "992:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "993:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "994:   }",
          "996:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "999:   for ( int i = 0; i < t ; i++){",
          "1000:     string endName = poly_names[i].substr(4);",
          "1001:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "1002:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "1004:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "1005:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "1006:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "1007:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1008:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1009:     REQUIRE(BLSSigShares[i][\"status\"] == 0);",
          "1010:     cerr << i << \" sig share is created \" << endl;",
          "1011:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1012:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1013:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "1024:   }",
          "1026:     shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1035:   DEBUG_PRINT = 1;",
          "1040:   int num_threads = 4;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1245:   std::vector<std::string> pubShares(n);",
          "1246:   std::vector<std::string> poly_names(n);",
          "1249:     EthKeys[i] = c.generateECDSAKey();",
          "1252:     cout << c.generateDKGPoly(polyName, t);",
          "1258:   }",
          "1259: }",
          "",
          "[Removed Lines]",
          "1248:   for (uint8_t i = 0; i < n; i++) {",
          "1250:     std::string polyName =",
          "1251:         \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "",
          "[Added Lines]",
          "1229:   int schain_id = rand_gen();",
          "1230:   int dkg_id = rand_gen();",
          "1231:   for ( uint8_t i = 0; i < n; i++){",
          "1233:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1234:     REQUIRE(EthKeys[i][\"status\"] == 0);",
          "1236:     poly_names[i] = polyName;",
          "1237:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1238:     cout << \"VV \" << i << \" \" << VerifVects[i] << std::endl;",
          "1239:     pubEthKeys.append(EthKeys[i][\"PublicKey\"]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70ed6a82e0a99503574ff711db483d3a72eeed23",
      "candidate_info": {
        "commit_hash": "70ed6a82e0a99503574ff711db483d3a72eeed23",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/70ed6a82e0a99503574ff711db483d3a72eeed23",
        "files": [
          "DKGCrypto.cpp",
          "DKGCrypto.h",
          "LevelDB.cpp",
          "Makefile.am",
          "SGXWalletServer.cpp",
          "SGXWalletServer.hpp",
          "abstractstubserver.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3661 add createBLSPrivateKey v2 method",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "DKGCrypto.h||DKGCrypto.h",
          "LevelDB.cpp||LevelDB.cpp",
          "Makefile.am||Makefile.am",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "abstractstubserver.h||abstractstubserver.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: }",
          "443: vector <string> getBLSPubKey(const char *encryptedKeyHex) {",
          "445:     CHECK_STATE(encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: bool createBLSShareV2(const string &blsKeyName, const char *s_shares, const char *encryptedKeyHex) {",
          "445:     CHECK_STATE(s_shares);",
          "446:     CHECK_STATE(encryptedKeyHex);",
          "448:     vector<char> errMsg(BUF_LEN, 0);",
          "449:     int errStatus = 0;",
          "451:     uint64_t decKeyLen;SAFE_UINT8_BUF(encr_bls_key, BUF_LEN);SAFE_UINT8_BUF(encr_key, BUF_LEN);",
          "452:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key, BUF_LEN)) {",
          "453:         throw SGXException(CREATE_BLS_SHARE_INVALID_KEY_HEX, string(__FUNCTION__) + \":Invalid encryptedKeyHex\");",
          "454:     }",
          "456:     uint64_t enc_bls_len = 0;",
          "458:     sgx_status_t status = SGX_SUCCESS;",
          "460:     status = trustedCreateBlsKeyV2(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "461:                                  &enc_bls_len);",
          "463:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "465:     vector<char> hexBLSKey = carray2Hex(encr_bls_key, enc_bls_len);",
          "467:     SGXWalletServer::writeDataToDB(blsKeyName, hexBLSKey.data());",
          "469:     return true;",
          "471: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:     vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "537:     if (!hex2carray(hexEncrKeyPtr->c_str(), &dhEncLen, encryptedDHKey, BUF_LEN)) {",
          "538:         throw SGXException(DECRYPT_DH_KEY_INVALID_KEY_HEX, string(__FUNCTION__) + \":Invalid hexEncrKey\");",
          "539:     }",
          "",
          "[Removed Lines]",
          "536:     uint64_t dhEncLen = 0;SAFE_UINT8_BUF(encryptedDHKey, BUF_LEN)",
          "",
          "[Added Lines]",
          "566:     uint64_t dhEncLen = 0;",
          "567:     SAFE_UINT8_BUF(encryptedDHKey, BUF_LEN);",
          "",
          "---------------"
        ],
        "DKGCrypto.h||DKGCrypto.h": [
          "File: DKGCrypto.h -> DKGCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: bool createBLSShare( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "54: vector<string> getBLSPubKey(const char * encryptedKeyHex);",
          "56: vector<string> mult_G2(const string& x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: bool createBLSShareV2( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex);",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: }",
          "163: void LevelDB::writeDataUnique(const string & name, const string &value) {",
          "166:   if (readString(name)) {",
          "167:     spdlog::debug(\"Name {} already exists\", name);",
          "168:     throw SGXException(KEY_SHARE_ALREADY_EXISTS, \"Data with this name already exists\");",
          "169:   }",
          "172: }",
          "174: pair<stringstream, uint64_t> LevelDB::getAllKeys() {",
          "",
          "[Removed Lines]",
          "164:   auto key = name;",
          "171:   writeString(key, value);",
          "",
          "[Added Lines]",
          "169:   writeString(name, value);",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: ## The build target",
          "65: ## You can't use $(wildcard ...) with automake so all source files",
          "",
          "[Removed Lines]",
          "62: bin_PROGRAMS =  sgxwallet testw sgx_util",
          "",
          "[Added Lines]",
          "62: bin_PROGRAMS = sgxwallet testw sgx_util",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: sgx_util_LDADD= -LlibBLS/deps/deps_inst/x86_or_x64/lib -Lleveldb/build -LlibBLS/build \\",
          "118:                 -LlibBLS/build/libff/libff \\",
          "119:                 -l:libbls.a -l:libleveldb.a \\",
          "",
          "[Removed Lines]",
          "120:                 -l:libff.a -lgmp  -ljsonrpccpp-stub -ljsonrpccpp-server -ljsonrpccpp-client -ljsonrpccpp-common -ljsoncpp -lmicrohttpd -lgnutls -lgcrypt -lidn2 -lcurl -lssl -lcrypto -lz -lpthread -ldl",
          "",
          "[Added Lines]",
          "120:                 -l:libff.a -lgmp -ljsonrpccpp-stub -ljsonrpccpp-server -ljsonrpccpp-client -ljsonrpccpp-common -ljsoncpp -lmicrohttpd -lgnutls -lgcrypt -lidn2 -lcurl -lssl -lcrypto -lz -lpthread -ldl",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "899:     RETURN_SUCCESS(result)",
          "900: }",
          "902: Json::Value SGXWalletServer::generateDKGPoly(const string &_polyName, int _t) {",
          "903:     return generateDKGPolyImpl(_polyName, _t);",
          "904: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902: Json::Value",
          "903: SGXWalletServer::createBLSPrivateKeyV2Impl(const string &_blsKeyName, const string &_ethKeyName, const string &_polyName,",
          "904:                                          const string &_secretShare, int _t, int _n) {",
          "905:     COUNT_STATISTICS",
          "906:     spdlog::info(\"Entering {}\", __FUNCTION__);",
          "907:     INIT_RESULT(result)",
          "909:     try {",
          "910:         if (_secretShare.length() != (uint64_t) _n * 192) {",
          "911:             throw SGXException(INVALID_CREATE_BLS_KEY_SECRET_SHARES_LENGTH,",
          "912:                                string(__FUNCTION__) + \":Invalid secret share length\");",
          "913:         }",
          "914:         if (!checkECDSAKeyName(_ethKeyName)) {",
          "915:             throw SGXException(INVALID_CREATE_BLS_ECDSA_KEY_NAME,",
          "916:                                string(__FUNCTION__) + \":Invalid ECDSA key name\");",
          "917:         }",
          "918:         if (!checkName(_polyName, \"POLY\")) {",
          "919:             throw SGXException(INVALID_CREATE_BLS_POLY_NAME, string(__FUNCTION__) +",
          "920:                                                              \":Invalid polynomial name\");",
          "921:         }",
          "922:         if (!checkName(_blsKeyName, \"BLS_KEY\")) {",
          "923:             throw SGXException(INVALID_CREATE_BLS_KEY_NAME, string(__FUNCTION__) +",
          "924:                                                             \":Invalid BLS key name\");",
          "925:         }",
          "926:         if (!check_n_t(_t, _n)) {",
          "927:             throw SGXException(INVALID_CREATE_BLS_DKG_PARAMS,",
          "928:                                string(__FUNCTION__) + \":Invalid DKG parameters: n or t \");",
          "929:         }",
          "930:         vector <string> sshares_vect;",
          "932:         shared_ptr <string> encryptedKeyHex_ptr = readFromDb(_ethKeyName);",
          "934:         CHECK_STATE(encryptedKeyHex_ptr);",
          "936:         bool res = createBLSShareV2(_blsKeyName, _secretShare.c_str(), encryptedKeyHex_ptr->c_str());",
          "937:         if (res) {",
          "938:             spdlog::info(\"BLS KEY SHARE CREATED \");",
          "939:         } else {",
          "940:             throw SGXException(INVALID_CREATE_BLS_SHARE,",
          "941:                                string(__FUNCTION__) + \":Error while creating BLS key share\");",
          "942:         }",
          "945:         for (int i = 0; i < _n; i++) {",
          "946:             string name = _polyName + \"_\" + to_string(i) + \":\";",
          "947:             LevelDB::getLevelDb()->deleteDHDKGKey(name);",
          "948:             string shareG2_name = \"shareG2_\" + _polyName + \"_\" + to_string(i) + \":\";",
          "949:             LevelDB::getLevelDb()->deleteKey(shareG2_name);",
          "950:         }",
          "951:         LevelDB::getLevelDb()->deleteKey(_polyName);",
          "954:         string encryptedSecretShareName = \"encryptedSecretShare:\" + _polyName;",
          "955:         LevelDB::getLevelDb()->deleteKey(encryptedSecretShareName);",
          "957:     } HANDLE_SGX_EXCEPTION(result)",
          "959:     RETURN_SUCCESS(result);",
          "960: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:     return dkgVerificationV2Impl(_publicShares, ethKeyName, SecretShare, t, n, index);",
          "994: }",
          "996: shared_ptr <string> SGXWalletServer::readFromDb(const string &name, const string &prefix) {",
          "997:     auto dataStr = checkDataFromDb(prefix + name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1056: Json::Value",
          "1057: SGXWalletServer::createBLSPrivateKeyV2(const string &blsKeyName, const string &ethKeyName, const string &polyName,",
          "1058:                                      const string &SecretShare, int t, int n) {",
          "1059:     return createBLSPrivateKeyV2Impl(blsKeyName, ethKeyName, polyName, SecretShare, t, n);",
          "1060: }",
          "",
          "---------------"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     virtual Json::Value dkgVerificationV2(const string &_publicShares, const string &ethKeyName, const string &SecretShare, int t, int n, int index);",
          "114:     static shared_ptr<string> readFromDb(const string &name, const string &prefix = \"\");",
          "116:     static shared_ptr <string> checkDataFromDb(const string &name, const string &prefix = \"\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     virtual Json::Value createBLSPrivateKeyV2(const std::string& blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:     static Json::Value dkgVerificationV2Impl(const string &_publicShares, const string &_ethKeyName, const string &_secretShare, int _t, int _n, int _index);",
          "170:     static void printDB();",
          "172:     static int initHttpServer();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     virtual Json::Value createBLSPrivateKeyV2Impl(const std::string& blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n);",
          "",
          "---------------"
        ],
        "abstractstubserver.h||abstractstubserver.h": [
          "File: abstractstubserver.h -> abstractstubserver.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:           this->bindAndAddMethod(jsonrpc::Procedure(\"getSecretShareV2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"polyName\",jsonrpc::JSON_STRING,\"publicKeys\",jsonrpc::JSON_ARRAY, \"n\",jsonrpc::JSON_INTEGER,\"t\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::getSecretShareV2I);",
          "63:           this->bindAndAddMethod(jsonrpc::Procedure(\"dkgVerificationV2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"publicShares\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\",jsonrpc::JSON_INTEGER, \"n\",jsonrpc::JSON_INTEGER, \"index\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::dkgVerificationV2I);",
          "64:         }",
          "66:         inline virtual void importBLSKeyShareI(const Json::Value &request, Json::Value &response)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:           this->bindAndAddMethod(jsonrpc::Procedure(\"createBLSPrivateKeyV2\", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, \"blsKeyName\",jsonrpc::JSON_STRING, \"ethKeyName\",jsonrpc::JSON_STRING, \"polyName\", jsonrpc::JSON_STRING, \"secretShare\",jsonrpc::JSON_STRING,\"t\", jsonrpc::JSON_INTEGER,\"n\",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::createBLSPrivateKeyV2I);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:         {",
          "156:             response = this->dkgVerificationV2(request[\"publicShares\"].asString(), request[\"ethKeyName\"].asString(), request[\"secretShare\"].asString(), request[\"t\"].asInt(), request[\"n\"].asInt(), request[\"index\"].asInt());",
          "157:         }",
          "159:         virtual Json::Value importBLSKeyShare(const std::string& keyShare, const std::string& keyShareName) = 0;",
          "160:         virtual Json::Value blsSignMessageHash(const std::string& keyShareName, const std::string& messageHash, int t, int n ) = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         inline virtual void createBLSPrivateKeyV2I(const Json::Value &request, Json::Value &response)",
          "160:         {",
          "161:             response = this->createBLSPrivateKeyV2(request[\"blsKeyName\"].asString(), request[\"ethKeyName\"].asString(), request[\"polyName\"].asString(),request[\"secretShare\"].asString(),request[\"t\"].asInt(), request[\"n\"].asInt());",
          "162:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:         virtual Json::Value getVerificationVector(const std::string& polyName, int t, int n) = 0;",
          "168:         virtual Json::Value getSecretShare(const std::string& polyName, const Json::Value& publicKeys, int t, int n) = 0;",
          "169:         virtual Json::Value dkgVerification( const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "172:         virtual Json::Value calculateAllBLSPublicKeys(const Json::Value& publicShares, int t, int n) = 0;",
          "173:         virtual Json::Value complaintResponse(const std::string& polyName, int t, int n, int ind) = 0;",
          "174:         virtual Json::Value multG2(const std::string & x) = 0;",
          "",
          "[Removed Lines]",
          "170:         virtual Json::Value createBLSPrivateKey(const std::string & blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "171:         virtual Json::Value getBLSPublicKeyShare(const std::string & blsKeyName) = 0;",
          "",
          "[Added Lines]",
          "175:         virtual Json::Value createBLSPrivateKey(const std::string& blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string& SecretShare, int t, int n) = 0;",
          "176:         virtual Json::Value getBLSPublicKeyShare(const std::string& blsKeyName) = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:         virtual Json::Value getSecretShareV2(const std::string& polyName, const Json::Value& publicKeys, int t, int n) = 0;",
          "182:         virtual Json::Value dkgVerificationV2( const std::string& publicShares, const std::string& ethKeyName, const std::string& SecretShare, int t, int n, int index) = 0;",
          "183: };",
          "185: #endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:         virtual Json::Value createBLSPrivateKeyV2(const std::string& blsKeyName, const std::string& ethKeyName, const std::string& polyName, const std::string & SecretShare, int t, int n) = 0;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244:     LOG_INFO(\"SGX call completed\");",
          "1245: }",
          "1247: void",
          "1248: trustedGetBlsPubKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t key_len,",
          "1249:                        char *bls_pub_key) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1244:     LOG_INFO(\"SGX call completed\");",
          "1245: }",
          "1247: void trustedCreateBlsKeyV2(int *errStatus, char *errString, const char *s_shares,",
          "1248:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
          "1249:                             uint64_t *enc_bls_key_len) {",
          "1251:     LOG_INFO(__FUNCTION__);",
          "1253:     INIT_ERROR_STATE",
          "1255:     CHECK_STATE(s_shares);",
          "1256:     CHECK_STATE(encryptedPrivateKey);",
          "1257:     CHECK_STATE(encr_bls_key);",
          "1259:     SAFE_CHAR_BUF(skey, BUF_LEN);",
          "1261:     mpz_t sum;",
          "1262:     mpz_init(sum);",
          "1263:     mpz_set_ui(sum, 0);",
          "1265:     mpz_t q;",
          "1266:     mpz_init(q);",
          "1267:     mpz_set_str(q, \"21888242871839275222246405745257275088548364400416034343698204186575808495617\", 10);",
          "1269:     mpz_t bls_key;",
          "1270:     mpz_init(bls_key);",
          "1272:     uint8_t type = 0;",
          "1273:     uint8_t exportable = 0;",
          "1276:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN,",
          "1277:                              &type, &exportable);",
          "1278:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
          "1280:     skey[ECDSA_SKEY_LEN - 1] = 0;",
          "1282:     int num_shares = strlen(s_shares) / 192;",
          "1284:     for (int i = 0; i < num_shares; i++) {",
          "1285:         SAFE_CHAR_BUF(encr_sshare, 65);",
          "1286:         strncpy(encr_sshare, s_shares + 192 * i, 64);",
          "1287:         encr_sshare[64] = 0;",
          "1289:         SAFE_CHAR_BUF(s_share, 193);",
          "1290:         strncpy(s_share, s_shares + 192 * i, 192);",
          "1291:         s_share[192] = 0;",
          "1293:         SAFE_CHAR_BUF(common_key, 65);",
          "1295:         status = session_key_recover(skey, s_share, common_key);",
          "1297:         CHECK_STATUS(\"session_key_recover failed\");",
          "1299:         common_key[64] = 0;",
          "1301:         SAFE_CHAR_BUF(derived_key, BUF_LEN);",
          "1302:         status = hash_key(common_key, derived_key);",
          "1303:         CHECK_STATUS(\"hash key failed\")",
          "1304:         derived_key[ECDSA_BIN_LEN - 1] = 0;",
          "1306:         SAFE_CHAR_BUF(decr_sshare, 65);",
          "1308:         status = xor_decrypt_v2(derived_key, encr_sshare, decr_sshare);",
          "1310:         CHECK_STATUS(\"xor_decrypt failed\");",
          "1312:         decr_sshare[64] = 0;",
          "1314:         mpz_t decr_secret_share;",
          "1315:         mpz_init(decr_secret_share);",
          "1316:         if (mpz_set_str(decr_secret_share, decr_sshare, 16) == -1) {",
          "1318:             snprintf(errString, BUF_LEN, \"invalid decrypted secret share\");",
          "1319:             LOG_ERROR(errString);",
          "1321:             mpz_clear(decr_secret_share);",
          "1322:             goto clean;",
          "1323:         }",
          "1325:         mpz_addmul_ui(sum, decr_secret_share, 1);",
          "1326:         mpz_clear(decr_secret_share);",
          "1327:     }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "157:                                 [out] uint64_t *enc_bls_key_len);",
          "159:         public void trustedBlsSignMessage (",
          "160:                                 [out] int *errStatus,",
          "161:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         public void trustedCreateBlsKeyV2(",
          "160:                                 [out]int *errStatus,",
          "161:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "162:                                 [in, count = 6145] const char* s_shares,",
          "163:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "164:                                 uint64_t key_len,",
          "165:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "166:                                 [out] uint64_t *enc_bls_key_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28de93d114eb541da08f56bc739675fb2884e768",
      "candidate_info": {
        "commit_hash": "28de93d114eb541da08f56bc739675fb2884e768",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/28de93d114eb541da08f56bc739675fb2884e768",
        "files": [
          "ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp",
          "testw.py"
        ],
        "message": "SKALE-4522 fix exportable keys, add tests",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp",
          "testw.py||testw.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     sgx_status_t status = SGX_SUCCESS;",
          "66:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus,errMsg.data());",
          "",
          "[Removed Lines]",
          "62:     status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "63:                                errMsg.data(), encr_pr_key.data(), &enc_len,",
          "64:                                pub_key_x.data(), pub_key_y.data());",
          "",
          "[Added Lines]",
          "62:     int exportable = 0;",
          "64:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(),",
          "65:                                     &exportable, encr_pr_key.data(), &enc_len,",
          "66:                                     pub_key_x.data(), pub_key_y.data());",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:     LOG_INFO(\"SGX call completed\");",
          "359: }",
          "362:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "363:     LOG_INFO(__FUNCTION__);",
          "364:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "361: void trustedGenerateEcdsaKey(int *errStatus, char *errString,",
          "",
          "[Added Lines]",
          "361: void trustedGenerateEcdsaKey(int *errStatus, char *errString, int *is_exportable,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "410:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
          "413:                              ECDSA, NON_EXPORTABLE, enc_len);",
          "414:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
          "416:     uint8_t type = 0;",
          "",
          "[Removed Lines]",
          "412:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "",
          "[Added Lines]",
          "412:     int status = -1;",
          "414:     if ( *is_exportable ) {",
          "415:         status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "416:                              ECDSA, EXPORTABLE, enc_len);",
          "417:     } else {",
          "418:         status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "420:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "611:     if (exportable != EXPORTABLE) {",
          "613:         snprintf(errString, BUF_LEN, \"Key is not exportable\");",
          "614:     }",
          "616:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:         LOG_ERROR(errString);",
          "622:         goto clean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "856:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "860:     CHECK_STATUS(\"trustedGenerateEcdsaKey failed\");",
          "",
          "[Removed Lines]",
          "858:     trustedGenerateEcdsaKey(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "867:     int is_exportable = 1;",
          "869:     trustedGenerateEcdsaKey(&status, errString, &is_exportable, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "929:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);",
          "930:     SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "934:     CHECK_STATUS(\"trustedGenerateEcdsaKey failed\");",
          "",
          "[Removed Lines]",
          "932:     trustedGenerateEcdsaKey(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "943:     int is_exportable = 1;",
          "945:     trustedGenerateEcdsaKey(&status, errString, &is_exportable, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         public void trustedGenerateEcdsaKey (",
          "36:                                 [out] int *errStatus,",
          "37:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "38:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "39:                                 [out] uint64_t *enc_len,",
          "40:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:                                 [out] int *is_exportable,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     vector<char> pubKeyY(BUF_LEN, 0);",
          "148:     uint64_t encLen = 0;",
          "149:     PRINT_SRC_LINE",
          "151:                                           pubKeyX.data(),",
          "152:                                           pubKeyY.data());",
          "153:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "150:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "149:     int exportable = 0;",
          "151:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     vector<char> pubKeyX(BUF_LEN, 0);",
          "178:     vector<char> pubKeyY(BUF_LEN, 0);",
          "179:     uint64_t encLen = 0;",
          "180:     PRINT_SRC_LINE",
          "182:                                           pubKeyX.data(),",
          "183:                                           pubKeyY.data());",
          "",
          "[Removed Lines]",
          "181:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "181:     int exportable = 0;",
          "183:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:     vector<char> pubKeyY(BUF_LEN, 0);",
          "196:     uint64_t encLen = 0;",
          "198:     PRINT_SRC_LINE",
          "200:                                           pubKeyY.data());",
          "202:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "199:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "[Added Lines]",
          "199:     int exportable = 0;",
          "202:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1120:     sleep(3);",
          "1121: }",
          "1123: TEST_CASE_METHOD(TestFixture, \"Many threads ecdsa dkg v2 bls\", \"[many-threads-crypto-v2]\") {",
          "1124:     vector <thread> threads;",
          "1125:     int num_threads = 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1126: TEST_CASE_METHOD(TestFixture, \"Exportable / non-exportable keys\", \"[exportable-nonexportable-keys]\") {",
          "1127:     int errStatus = 0;",
          "1128:     vector<char> errMsg(BUF_LEN, 0);",
          "1129:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
          "1130:     vector<char> pubKeyX(BUF_LEN, 0);",
          "1131:     vector<char> pubKeyY(BUF_LEN, 0);",
          "1133:     uint64_t encLen = 0;",
          "1134:     int exportable = 0;",
          "1136:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encPrivKey.data(), &encLen, pubKeyX.data(),",
          "1137:                                           pubKeyY.data());",
          "1139:     vector<char> decrypted_key(BUF_LEN, 0);",
          "1140:     status = trustedDecryptKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen, decrypted_key.data());",
          "1141:     REQUIRE( errStatus == -11 );",
          "1143:     exportable = 1;",
          "1145:     encPrivKey.clear();",
          "1146:     errMsg.clear();",
          "1147:     pubKeyX.clear();",
          "1148:     pubKeyY.clear();",
          "1150:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encPrivKey.data(), &encLen, pubKeyX.data(),",
          "1151:                                           pubKeyY.data());",
          "1153:     decrypted_key.clear();",
          "1154:     status = trustedDecryptKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen, decrypted_key.data());",
          "1155:     REQUIRE( errStatus == 0 );",
          "1156:     REQUIRE( status == SGX_SUCCESS );",
          "1158:     string key = SAMPLE_AES_KEY;",
          "1159:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
          "1161:     status = trustedEncryptKey(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &encLen);",
          "1163:     REQUIRE(status == 0);",
          "1164:     REQUIRE(errStatus == 0);",
          "1166:     vector<char> decr_key(BUF_LEN, 0);",
          "1167:     PRINT_SRC_LINE",
          "1168:     status = trustedDecryptKey(eid, &errStatus, errMsg.data(), encrypted_key.data(), encLen, decr_key.data());",
          "1170:     REQUIRE(status == 0);",
          "1171:     REQUIRE(key.compare(decr_key.data()) == 0);",
          "1172:     REQUIRE(errStatus == 0);",
          "1173:     sleep(3);",
          "1174: }",
          "",
          "---------------"
        ],
        "testw.py||testw.py": [
          "File: testw.py -> testw.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:              \"[dkg-poly-exists-zmq]\",",
          "61:              \"[dkg-aes-pub-shares]\",",
          "62:              \"[aes-encrypt-decrypt]\",",
          "63:              \"[aes-dkg-v2]\",",
          "64:              \"[aes-dkg-v2-zmq]\",",
          "65:              \"[te-decryption-share]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:              \"[exportable-nonexportable-keys]\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "820daae1d8de3476d5ff564bf32fa353cdb05a6f",
      "candidate_info": {
        "commit_hash": "820daae1d8de3476d5ff564bf32fa353cdb05a6f",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/820daae1d8de3476d5ff564bf32fa353cdb05a6f",
        "files": [
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-4522 better handling of decrypting non-exportable keys",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     sgx_status_t status = SGX_SUCCESS;",
          "64:                                pub_key_x.data(), pub_key_y.data());",
          "66:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus,errMsg.data());",
          "",
          "[Removed Lines]",
          "62:     status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "63:                                errMsg.data(), encr_pr_key.data(), &enc_len,",
          "",
          "[Added Lines]",
          "62:     int exportable = 0;",
          "64:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(),",
          "65:                                 &exportable, encr_pr_key.data(), &enc_len,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     LOG_INFO(\"SGX call completed\");",
          "363: }",
          "366:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "367:     LOG_INFO(__FUNCTION__);",
          "368:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "365: void trustedGenerateEcdsaKey(int *errStatus, char *errString,",
          "",
          "[Added Lines]",
          "365: void trustedGenerateEcdsaKey(int *errStatus, char *errString, int *is_exportable,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "414:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
          "417:                              ECDSA, NON_EXPORTABLE, enc_len);",
          "418:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
          "420:     uint8_t type = 0;",
          "",
          "[Removed Lines]",
          "416:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "",
          "[Added Lines]",
          "416:     int status = -1;",
          "418:     if ( *is_exportable ) {",
          "419:         status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "420:                              ECDSA, EXPORTABLE, enc_len);",
          "421:     } else {",
          "422:         status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
          "424:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:     if (exportable != EXPORTABLE) {",
          "618:         snprintf(errString, BUF_LEN, \"Key is not exportable\");",
          "619:     }",
          "621:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:         LOG_ERROR(errString);",
          "627:         goto clean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "861:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "865:     CHECK_STATUS(\"trustedGenerateEcdsaKey failed\");",
          "",
          "[Removed Lines]",
          "863:     trustedGenerateEcdsaKey(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "872:     int is_exportable = 1;",
          "874:     trustedGenerateEcdsaKey(&status, errString, &is_exportable, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "934:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);",
          "935:     SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "939:     CHECK_STATUS(\"trustedGenerateEcdsaKey failed\");",
          "",
          "[Removed Lines]",
          "937:     trustedGenerateEcdsaKey(&status, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "948:     int is_exportable = 1;",
          "950:     trustedGenerateEcdsaKey(&status, errString, &is_exportable, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         public void trustedGenerateEcdsaKey (",
          "36:                                 [out] int *errStatus,",
          "37:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "38:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "39:                                 [out] uint64_t *enc_len,",
          "40:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:                                 [out] int *is_exportable,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     vector<char> pubKeyY(BUF_LEN, 0);",
          "151:     uint64_t encLen = 0;",
          "152:     PRINT_SRC_LINE",
          "154:                                           pubKeyX.data(),",
          "155:                                           pubKeyY.data());",
          "156:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "153:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "152:     int exportable = 0;",
          "154:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     vector<char> pubKeyX(BUF_LEN, 0);",
          "183:     vector<char> pubKeyY(BUF_LEN, 0);",
          "184:     uint64_t encLen = 0;",
          "185:     PRINT_SRC_LINE",
          "187:                                           pubKeyX.data(),",
          "188:                                           pubKeyY.data());",
          "",
          "[Removed Lines]",
          "186:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
          "",
          "[Added Lines]",
          "186:     int exportable = 0;",
          "188:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encrPrivKey.data(), &encLen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:     vector<char> pubKeyY(BUF_LEN, 0);",
          "202:     uint64_t encLen = 0;",
          "204:     PRINT_SRC_LINE",
          "206:                                           pubKeyY.data());",
          "208:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "205:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "[Added Lines]",
          "205:     int exportable = 0;",
          "208:     auto status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), &exportable, encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf6c998214562fa57ea46b4723928241c3e3ae51",
      "candidate_info": {
        "commit_hash": "cf6c998214562fa57ea46b4723928241c3e3ae51",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/cf6c998214562fa57ea46b4723928241c3e3ae51",
        "files": [
          "secure_enclave/DHDkg.c",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 fix memory leaks",
        "before_after_code_files": [
          "secure_enclave/DHDkg.c||secure_enclave/DHDkg.c",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/DHDkg.c||secure_enclave/DHDkg.c": [
          "File: secure_enclave/DHDkg.c -> secure_enclave/DHDkg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     point_multiplication(session_key, skey, pub_keyB, curve);",
          "63:     char arr_x[mpz_sizeinbase (session_key->x, 16) + 2];",
          "65:     int n_zeroes = 64 - strlen(arr_x);",
          "66:     for ( int i = 0; i < n_zeroes; i++){",
          "67:       common_key[i] = '0';",
          "",
          "[Removed Lines]",
          "64:     char* x = mpz_get_str(arr_x, 16, session_key->x);",
          "",
          "[Added Lines]",
          "64:     mpz_get_str(arr_x, 16, session_key->x);",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   strncpy(s_shareG2, secret_shareG2_str.c_str(), secret_shareG2_str.length() + 1);",
          "235:   return 0;",
          "236: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   mpz_clear(share);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:   mpz_t skey;",
          "363:   mpz_init(skey);",
          "365:     return 1;",
          "366:   }",
          "",
          "[Removed Lines]",
          "364:   if (mpz_set_str(skey, skey_hex, 16) == -1){",
          "",
          "[Added Lines]",
          "351:   if (mpz_set_str(skey, skey_hex, 16) == -1) {",
          "352:     mpz_clear(skey);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:     if (stat != 0) {",
          "980:         snprintf(errString, BUF_LEN, \"ecdsa private key encryption failed\");",
          "982:         return;",
          "983:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:         mpz_clear(skey);",
          "984:         domain_parameters_clear(curve);",
          "985:         point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1010:     if (status != 0) {",
          "1011:         snprintf(errString, BUF_LEN, \"AES_decrypt failed with status %d\", status);",
          "1013:         return;",
          "1014:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1019:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1022:     if (mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "1023:         snprintf(errString, BUF_LEN, \"wrong string to init private key  - %s\", skey);",
          "1025:         mpz_clear(privateKeyMpz);",
          "1026:         return;",
          "1027:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037:     if (!point_cmp(Pkey, Pkey_test)) {",
          "1038:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "1040:         return;",
          "1041:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:         mpz_clear(privateKeyMpz);",
          "1053:         domain_parameters_clear(curve);",
          "1054:         point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1264: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "1265:     LOG_DEBUG (__FUNCTION__);",
          "1268:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "1270:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "",
          "[Removed Lines]",
          "1267:     char dkg_secret[DKG_BUFER_LENGTH];// = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "",
          "[Added Lines]",
          "1285:     char dkg_secret[DKG_BUFER_LENGTH];",
          "",
          "---------------"
        ]
      }
    }
  ]
}