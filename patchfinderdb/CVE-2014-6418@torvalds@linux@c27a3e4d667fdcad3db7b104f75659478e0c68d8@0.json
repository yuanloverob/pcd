{
  "cve_id": "CVE-2014-6418",
  "cve_desc": "net/ceph/auth_x.c in Ceph, as used in the Linux kernel before 3.16.3, does not properly validate auth replies, which allows remote attackers to cause a denial of service (system crash) or possibly have unspecified other impact via crafted data from the IP address of a Ceph Monitor.",
  "repo": "torvalds/linux",
  "patch_hash": "c27a3e4d667fdcad3db7b104f75659478e0c68d8",
  "patch_info": {
    "commit_hash": "c27a3e4d667fdcad3db7b104f75659478e0c68d8",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c27a3e4d667fdcad3db7b104f75659478e0c68d8",
    "files": [
      "net/ceph/auth_x.c"
    ],
    "message": "libceph: do not hard code max auth ticket len\n\nWe hard code cephx auth ticket buffer size to 256 bytes.  This isn't\nenough for any moderate setups and, in case tickets themselves are not\nencrypted, leads to buffer overflows (ceph_x_decrypt() errors out, but\nceph_decode_copy() doesn't - it's just a memcpy() wrapper).  Since the\nbuffer is allocated dynamically anyway, allocated it a bit later, at\nthe point where we know how much is going to be needed.\n\nFixes: http://tracker.ceph.com/issues/8979\n\nCc: stable@vger.kernel.org\nSigned-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>\nReviewed-by: Sage Weil <sage@redhat.com>",
    "before_after_code_files": [
      "net/ceph/auth_x.c||net/ceph/auth_x.c"
    ]
  },
  "patch_diff": {
    "net/ceph/auth_x.c||net/ceph/auth_x.c": [
      "File: net/ceph/auth_x.c -> net/ceph/auth_x.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: #include \"auth_x.h\"",
      "14: #include \"auth_x_protocol.h\"",
      "18: static void ceph_x_validate_tickets(struct ceph_auth_client *ac, int *pneed);",
      "20: static int ceph_x_is_authenticated(struct ceph_auth_client *ac)",
      "",
      "[Removed Lines]",
      "16: #define TEMP_TICKET_BUF_LEN 256",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64: }",
      "66: static int ceph_x_decrypt(struct ceph_crypto_key *secret,",
      "68: {",
      "69:  struct ceph_x_encrypt_header head;",
      "70:  size_t head_len = sizeof(head);",
      "",
      "[Removed Lines]",
      "67:      void **p, void *end, void *obuf, size_t olen)",
      "",
      "[Added Lines]",
      "65:      void **p, void *end, void **obuf, size_t olen)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:   return -EINVAL;",
      "77:  dout(\"ceph_x_decrypt len %d\\n\", len);",
      "80:  if (ret)",
      "81:   return ret;",
      "82:  if (head.struct_v != 1 || le64_to_cpu(head.magic) != CEPHX_ENC_MAGIC)",
      "",
      "[Removed Lines]",
      "78:  ret = ceph_decrypt2(secret, &head, &head_len, obuf, &olen,",
      "",
      "[Added Lines]",
      "76:  if (*obuf == NULL) {",
      "78:   if (!*obuf)",
      "79:    return -ENOMEM;",
      "80:   olen = len;",
      "81:  }",
      "83:  ret = ceph_decrypt2(secret, &head, &head_len, *obuf, &olen, *p, len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "132: static int process_one_ticket(struct ceph_auth_client *ac,",
      "133:          struct ceph_crypto_key *secret,",
      "136: {",
      "137:  struct ceph_x_info *xi = ac->private;",
      "138:  int type;",
      "139:  u8 tkt_struct_v, blob_struct_v;",
      "140:  struct ceph_x_ticket_handler *th;",
      "141:  void *dp, *dend;",
      "142:  int dlen;",
      "143:  char is_enc;",
      "144:  struct timespec validity;",
      "145:  struct ceph_crypto_key old_key;",
      "146:  void *tp, *tpend;",
      "147:  struct ceph_timespec new_validity;",
      "148:  struct ceph_crypto_key new_session_key;",
      "",
      "[Removed Lines]",
      "134:          void **p, void *end,",
      "135:          void *dbuf, void *ticket_buf)",
      "",
      "[Added Lines]",
      "138:          void **p, void *end)",
      "144:  void *dbuf = NULL;",
      "150:  void *ticket_buf = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "167:  }",
      "172:  if (dlen <= 0) {",
      "173:   ret = dlen;",
      "174:   goto out;",
      "",
      "[Removed Lines]",
      "170:  dlen = ceph_x_decrypt(secret, p, end, dbuf,",
      "171:          TEMP_TICKET_BUF_LEN);",
      "",
      "[Added Lines]",
      "175:  dlen = ceph_x_decrypt(secret, p, end, &dbuf, 0);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "197:  ceph_decode_8_safe(p, end, is_enc, bad);",
      "199:  if (is_enc) {",
      "201:   dout(\" encrypted ticket\\n\");",
      "204:   if (dlen < 0) {",
      "205:    ret = dlen;",
      "206:    goto out;",
      "207:   }",
      "208:   dlen = ceph_decode_32(&tp);",
      "209:  } else {",
      "211:   ceph_decode_32_safe(p, end, dlen, bad);",
      "212:   ceph_decode_need(p, end, dlen, bad);",
      "213:   ceph_decode_copy(p, ticket_buf, dlen);",
      "214:  }",
      "",
      "[Removed Lines]",
      "198:  tp = ticket_buf;",
      "202:   dlen = ceph_x_decrypt(&old_key, p, end, ticket_buf,",
      "203:           TEMP_TICKET_BUF_LEN);",
      "",
      "[Added Lines]",
      "205:   dlen = ceph_x_decrypt(&old_key, p, end, &ticket_buf, 0);",
      "210:   tp = ticket_buf;",
      "215:   ticket_buf = kmalloc(dlen, GFP_NOFS);",
      "216:   if (!ticket_buf) {",
      "217:    ret = -ENOMEM;",
      "218:    goto out;",
      "219:   }",
      "220:   tp = ticket_buf;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "237:  xi->have_keys |= th->service;",
      "239: out:",
      "240:  return ret;",
      "242: bad:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249:  kfree(ticket_buf);",
      "250:  kfree(dbuf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "249:         void *buf, void *end)",
      "250: {",
      "251:  void *p = buf;",
      "254:  u8 reply_struct_v;",
      "255:  u32 num;",
      "256:  int ret;",
      "267:  ceph_decode_8_safe(&p, end, reply_struct_v, bad);",
      "268:  if (reply_struct_v != 1)",
      "269:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "252:  char *dbuf;",
      "253:  char *ticket_buf;",
      "258:  dbuf = kmalloc(TEMP_TICKET_BUF_LEN, GFP_NOFS);",
      "259:  if (!dbuf)",
      "260:   return -ENOMEM;",
      "262:  ret = -ENOMEM;",
      "263:  ticket_buf = kmalloc(TEMP_TICKET_BUF_LEN, GFP_NOFS);",
      "264:  if (!ticket_buf)",
      "265:   goto out_dbuf;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "272:  dout(\"%d tickets\\n\", num);",
      "274:  while (num--) {",
      "277:   if (ret)",
      "279:  }",
      "288: bad:",
      "291: }",
      "293: static int ceph_x_build_authorizer(struct ceph_auth_client *ac,",
      "",
      "[Removed Lines]",
      "275:   ret = process_one_ticket(ac, secret, &p, end,",
      "276:       dbuf, ticket_buf);",
      "278:    goto out;",
      "281:  ret = 0;",
      "282: out:",
      "283:  kfree(ticket_buf);",
      "284: out_dbuf:",
      "285:  kfree(dbuf);",
      "286:  return ret;",
      "289:  ret = -EINVAL;",
      "290:  goto out;",
      "",
      "[Added Lines]",
      "275:   ret = process_one_ticket(ac, secret, &p, end);",
      "277:    return ret;",
      "280:  return 0;",
      "283:  return -EINVAL;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "603:  struct ceph_x_ticket_handler *th;",
      "604:  int ret = 0;",
      "605:  struct ceph_x_authorize_reply reply;",
      "606:  void *p = au->reply_buf;",
      "607:  void *end = p + sizeof(au->reply_buf);",
      "609:  th = get_ticket_handler(ac, au->service);",
      "610:  if (IS_ERR(th))",
      "611:   return PTR_ERR(th);",
      "613:  if (ret < 0)",
      "614:   return ret;",
      "615:  if (ret != sizeof(reply))",
      "",
      "[Removed Lines]",
      "612:  ret = ceph_x_decrypt(&th->session_key, &p, end, &reply, sizeof(reply));",
      "",
      "[Added Lines]",
      "599:  void *preply = &reply;",
      "606:  ret = ceph_x_decrypt(&th->session_key, &p, end, &preply, sizeof(reply));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9226d7c9f1d83278d78675d51acc07e1a78cb27",
      "candidate_info": {
        "commit_hash": "e9226d7c9f1d83278d78675d51acc07e1a78cb27",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e9226d7c9f1d83278d78675d51acc07e1a78cb27",
        "files": [
          "net/ceph/auth_x.c"
        ],
        "message": "libceph: eliminate unnecessary allocation in process_one_ticket()\n\nCommit c27a3e4d667f (\"libceph: do not hard code max auth ticket len\")\nwhile fixing a buffer overlow tried to keep the same as much of the\nsurrounding code as possible and introduced an unnecessary kmalloc() in\nthe unencrypted ticket path.  It is likely to fail on huge tickets, so\nget rid of it.\n\nSigned-off-by: Ilya Dryomov <idryomov@redhat.com>\nReviewed-by: Sage Weil <sage@redhat.com>",
        "before_after_code_files": [
          "net/ceph/auth_x.c||net/ceph/auth_x.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ],
          "candidate": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ceph/auth_x.c||net/ceph/auth_x.c": [
          "File: net/ceph/auth_x.c -> net/ceph/auth_x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  struct ceph_crypto_key old_key;",
          "150:  void *ticket_buf = NULL;",
          "151:  void *tp, *tpend;",
          "152:  struct ceph_timespec new_validity;",
          "153:  struct ceph_crypto_key new_session_key;",
          "154:  struct ceph_buffer *new_ticket_blob;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  void **ptp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:    goto out;",
          "209:   }",
          "210:   tp = ticket_buf;",
          "212:  } else {",
          "223:  }",
          "225:  dout(\" ticket blob is %d bytes\\n\", dlen);",
          "230:  if (ret)",
          "231:   goto out;",
          "",
          "[Removed Lines]",
          "211:   dlen = ceph_decode_32(&tp);",
          "214:   ceph_decode_32_safe(p, end, dlen, bad);",
          "215:   ticket_buf = kmalloc(dlen, GFP_NOFS);",
          "216:   if (!ticket_buf) {",
          "217:    ret = -ENOMEM;",
          "218:    goto out;",
          "219:   }",
          "220:   tp = ticket_buf;",
          "221:   ceph_decode_need(p, end, dlen, bad);",
          "222:   ceph_decode_copy(p, ticket_buf, dlen);",
          "224:  tpend = tp + dlen;",
          "226:  ceph_decode_need(&tp, tpend, 1 + sizeof(u64), bad);",
          "227:  blob_struct_v = ceph_decode_8(&tp);",
          "228:  new_secret_id = ceph_decode_64(&tp);",
          "229:  ret = ceph_decode_buffer(&new_ticket_blob, &tp, tpend);",
          "",
          "[Added Lines]",
          "212:   ptp = &tp;",
          "213:   tpend = *ptp + dlen;",
          "216:   ptp = p;",
          "217:   tpend = end;",
          "219:  ceph_decode_32_safe(ptp, tpend, dlen, bad);",
          "221:  ceph_decode_need(ptp, tpend, 1 + sizeof(u64), bad);",
          "222:  blob_struct_v = ceph_decode_8(ptp);",
          "223:  new_secret_id = ceph_decode_64(ptp);",
          "224:  ret = ceph_decode_buffer(&new_ticket_blob, ptp, tpend);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae385eaf24dc39c1703049112e4265b9f93b7d86",
      "candidate_info": {
        "commit_hash": "ae385eaf24dc39c1703049112e4265b9f93b7d86",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ae385eaf24dc39c1703049112e4265b9f93b7d86",
        "files": [
          "net/ceph/auth_x.c",
          "net/ceph/auth_x.h"
        ],
        "message": "libceph: store session key in cephx authorizer\n\nSession key is required when calculating message signature. Save the session\nkey in authorizer, this avoid lookup ticket handler for each message\n\nSigned-off-by: Yan, Zheng <zyan@redhat.com>",
        "before_after_code_files": [
          "net/ceph/auth_x.c||net/ceph/auth_x.c",
          "net/ceph/auth_x.h||net/ceph/auth_x.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ],
          "candidate": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ceph/auth_x.c||net/ceph/auth_x.c": [
          "File: net/ceph/auth_x.c -> net/ceph/auth_x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:  dout(\"build_authorizer for %s %p\\n\",",
          "294:       ceph_entity_type_name(th->service), au);",
          "296:  maxlen = sizeof(*msg_a) + sizeof(msg_b) +",
          "297:   ceph_x_encrypt_buflen(ticket_blob_len);",
          "298:  dout(\"  need len %d\\n\", maxlen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:  ceph_crypto_key_destroy(&au->session_key);",
          "297:  ret = ceph_crypto_key_clone(&au->session_key, &th->session_key);",
          "298:  if (ret)",
          "299:   return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:  }",
          "303:  if (!au->buf) {",
          "304:   au->buf = ceph_buffer_new(maxlen, GFP_NOFS);",
          "306:    return -ENOMEM;",
          "307:  }",
          "308:  au->service = th->service;",
          "309:  au->secret_id = th->secret_id;",
          "",
          "[Removed Lines]",
          "305:   if (!au->buf)",
          "",
          "[Added Lines]",
          "310:   if (!au->buf) {",
          "311:    ceph_crypto_key_destroy(&au->session_key);",
          "313:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:  get_random_bytes(&au->nonce, sizeof(au->nonce));",
          "330:  msg_b.struct_v = 1;",
          "331:  msg_b.nonce = cpu_to_le64(au->nonce);",
          "333:         p, end - p);",
          "334:  if (ret < 0)",
          "335:   goto out_buf;",
          "",
          "[Removed Lines]",
          "332:  ret = ceph_x_encrypt(&th->session_key, &msg_b, sizeof(msg_b),",
          "",
          "[Added Lines]",
          "339:  ret = ceph_x_encrypt(&au->session_key, &msg_b, sizeof(msg_b),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "588:        struct ceph_authorizer *a, size_t len)",
          "589: {",
          "590:  struct ceph_x_authorizer *au = (void *)a;",
          "592:  int ret = 0;",
          "593:  struct ceph_x_authorize_reply reply;",
          "594:  void *preply = &reply;",
          "595:  void *p = au->reply_buf;",
          "596:  void *end = p + sizeof(au->reply_buf);",
          "602:  if (ret < 0)",
          "603:   return ret;",
          "604:  if (ret != sizeof(reply))",
          "",
          "[Removed Lines]",
          "591:  struct ceph_x_ticket_handler *th;",
          "598:  th = get_ticket_handler(ac, au->service);",
          "599:  if (IS_ERR(th))",
          "600:   return PTR_ERR(th);",
          "601:  ret = ceph_x_decrypt(&th->session_key, &p, end, &preply, sizeof(reply));",
          "",
          "[Added Lines]",
          "604:  ret = ceph_x_decrypt(&au->session_key, &p, end, &preply, sizeof(reply));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "618: {",
          "619:  struct ceph_x_authorizer *au = (void *)a;",
          "621:  ceph_buffer_put(au->buf);",
          "622:  kfree(au);",
          "623: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624:  ceph_crypto_key_destroy(&au->session_key);",
          "",
          "---------------"
        ],
        "net/ceph/auth_x.h||net/ceph/auth_x.h": [
          "File: net/ceph/auth_x.h -> net/ceph/auth_x.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: struct ceph_x_authorizer {",
          "29:  struct ceph_buffer *buf;",
          "30:  unsigned int service;",
          "31:  u64 nonce;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  struct ceph_crypto_key session_key;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "597cda357716a3cf8d994cb11927af917c8d71fa",
      "candidate_info": {
        "commit_hash": "597cda357716a3cf8d994cb11927af917c8d71fa",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/597cda357716a3cf8d994cb11927af917c8d71fa",
        "files": [
          "net/ceph/auth_x.c"
        ],
        "message": "libceph: add process_one_ticket() helper\n\nAdd a helper for processing individual cephx auth tickets.  Needed for\nthe next commit, which deals with allocating ticket buffers.  (Most of\nthe diff here is whitespace - view with git diff -b).\n\nCc: stable@vger.kernel.org\nSigned-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>\nReviewed-by: Sage Weil <sage@redhat.com>",
        "before_after_code_files": [
          "net/ceph/auth_x.c||net/ceph/auth_x.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ],
          "candidate": [
            "net/ceph/auth_x.c||net/ceph/auth_x.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ceph/auth_x.c||net/ceph/auth_x.c": [
          "File: net/ceph/auth_x.c -> net/ceph/auth_x.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:  kfree(th);",
          "130: }",
          "132: static int ceph_x_proc_ticket_reply(struct ceph_auth_client *ac,",
          "133:         struct ceph_crypto_key *secret,",
          "134:         void *buf, void *end)",
          "135: {",
          "138:  void *p = buf;",
          "140:  char *dbuf;",
          "141:  char *ticket_buf;",
          "142:  u8 reply_struct_v;",
          "144:  dbuf = kmalloc(TEMP_TICKET_BUF_LEN, GFP_NOFS);",
          "145:  if (!dbuf)",
          "",
          "[Removed Lines]",
          "136:  struct ceph_x_info *xi = ac->private;",
          "137:  int num;",
          "139:  int ret;",
          "",
          "[Added Lines]",
          "132: static int process_one_ticket(struct ceph_auth_client *ac,",
          "133:          struct ceph_crypto_key *secret,",
          "134:          void **p, void *end,",
          "135:          void *dbuf, void *ticket_buf)",
          "136: {",
          "137:  struct ceph_x_info *xi = ac->private;",
          "138:  int type;",
          "139:  u8 tkt_struct_v, blob_struct_v;",
          "140:  struct ceph_x_ticket_handler *th;",
          "141:  void *dp, *dend;",
          "142:  int dlen;",
          "143:  char is_enc;",
          "144:  struct timespec validity;",
          "145:  struct ceph_crypto_key old_key;",
          "146:  void *tp, *tpend;",
          "147:  struct ceph_timespec new_validity;",
          "148:  struct ceph_crypto_key new_session_key;",
          "149:  struct ceph_buffer *new_ticket_blob;",
          "150:  unsigned long new_expires, new_renew_after;",
          "151:  u64 new_secret_id;",
          "152:  int ret;",
          "154:  ceph_decode_need(p, end, sizeof(u32) + 1, bad);",
          "156:  type = ceph_decode_32(p);",
          "157:  dout(\" ticket type %d %s\\n\", type, ceph_entity_type_name(type));",
          "159:  tkt_struct_v = ceph_decode_8(p);",
          "160:  if (tkt_struct_v != 1)",
          "161:   goto bad;",
          "163:  th = get_ticket_handler(ac, type);",
          "164:  if (IS_ERR(th)) {",
          "165:   ret = PTR_ERR(th);",
          "166:   goto out;",
          "167:  }",
          "170:  dlen = ceph_x_decrypt(secret, p, end, dbuf,",
          "171:          TEMP_TICKET_BUF_LEN);",
          "172:  if (dlen <= 0) {",
          "173:   ret = dlen;",
          "174:   goto out;",
          "175:  }",
          "176:  dout(\" decrypted %d bytes\\n\", dlen);",
          "177:  dp = dbuf;",
          "178:  dend = dp + dlen;",
          "180:  tkt_struct_v = ceph_decode_8(&dp);",
          "181:  if (tkt_struct_v != 1)",
          "182:   goto bad;",
          "184:  memcpy(&old_key, &th->session_key, sizeof(old_key));",
          "185:  ret = ceph_crypto_key_decode(&new_session_key, &dp, dend);",
          "186:  if (ret)",
          "187:   goto out;",
          "189:  ceph_decode_copy(&dp, &new_validity, sizeof(new_validity));",
          "190:  ceph_decode_timespec(&validity, &new_validity);",
          "191:  new_expires = get_seconds() + validity.tv_sec;",
          "192:  new_renew_after = new_expires - (validity.tv_sec / 4);",
          "193:  dout(\" expires=%lu renew_after=%lu\\n\", new_expires,",
          "194:       new_renew_after);",
          "197:  ceph_decode_8_safe(p, end, is_enc, bad);",
          "198:  tp = ticket_buf;",
          "199:  if (is_enc) {",
          "201:   dout(\" encrypted ticket\\n\");",
          "202:   dlen = ceph_x_decrypt(&old_key, p, end, ticket_buf,",
          "203:           TEMP_TICKET_BUF_LEN);",
          "204:   if (dlen < 0) {",
          "205:    ret = dlen;",
          "206:    goto out;",
          "207:   }",
          "208:   dlen = ceph_decode_32(&tp);",
          "209:  } else {",
          "211:   ceph_decode_32_safe(p, end, dlen, bad);",
          "212:   ceph_decode_need(p, end, dlen, bad);",
          "213:   ceph_decode_copy(p, ticket_buf, dlen);",
          "214:  }",
          "215:  tpend = tp + dlen;",
          "216:  dout(\" ticket blob is %d bytes\\n\", dlen);",
          "217:  ceph_decode_need(&tp, tpend, 1 + sizeof(u64), bad);",
          "218:  blob_struct_v = ceph_decode_8(&tp);",
          "219:  new_secret_id = ceph_decode_64(&tp);",
          "220:  ret = ceph_decode_buffer(&new_ticket_blob, &tp, tpend);",
          "221:  if (ret)",
          "222:   goto out;",
          "225:  ceph_crypto_key_destroy(&th->session_key);",
          "226:  if (th->ticket_blob)",
          "227:   ceph_buffer_put(th->ticket_blob);",
          "228:  th->session_key = new_session_key;",
          "229:  th->ticket_blob = new_ticket_blob;",
          "230:  th->validity = new_validity;",
          "231:  th->secret_id = new_secret_id;",
          "232:  th->expires = new_expires;",
          "233:  th->renew_after = new_renew_after;",
          "234:  dout(\" got ticket service %d (%s) secret_id %lld len %d\\n\",",
          "235:       type, ceph_entity_type_name(type), th->secret_id,",
          "236:       (int)th->ticket_blob->vec.iov_len);",
          "237:  xi->have_keys |= th->service;",
          "239: out:",
          "240:  return ret;",
          "242: bad:",
          "243:  ret = -EINVAL;",
          "244:  goto out;",
          "245: }",
          "255:  u32 num;",
          "256:  int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:  if (!ticket_buf)",
          "151:   goto out_dbuf;",
          "155:  if (reply_struct_v != 1)",
          "242:   if (ret)",
          "243:    goto out;",
          "259:  }",
          "261:  ret = 0;",
          "",
          "[Removed Lines]",
          "153:  ceph_decode_need(&p, end, 1 + sizeof(u32), bad);",
          "154:  reply_struct_v = ceph_decode_8(&p);",
          "156:   goto bad;",
          "157:  num = ceph_decode_32(&p);",
          "158:  dout(\"%d tickets\\n\", num);",
          "159:  while (num--) {",
          "160:   int type;",
          "161:   u8 tkt_struct_v, blob_struct_v;",
          "162:   struct ceph_x_ticket_handler *th;",
          "163:   void *dp, *dend;",
          "164:   int dlen;",
          "165:   char is_enc;",
          "166:   struct timespec validity;",
          "167:   struct ceph_crypto_key old_key;",
          "168:   void *tp, *tpend;",
          "169:   struct ceph_timespec new_validity;",
          "170:   struct ceph_crypto_key new_session_key;",
          "171:   struct ceph_buffer *new_ticket_blob;",
          "172:   unsigned long new_expires, new_renew_after;",
          "173:   u64 new_secret_id;",
          "175:   ceph_decode_need(&p, end, sizeof(u32) + 1, bad);",
          "177:   type = ceph_decode_32(&p);",
          "178:   dout(\" ticket type %d %s\\n\", type, ceph_entity_type_name(type));",
          "180:   tkt_struct_v = ceph_decode_8(&p);",
          "181:   if (tkt_struct_v != 1)",
          "182:    goto bad;",
          "184:   th = get_ticket_handler(ac, type);",
          "185:   if (IS_ERR(th)) {",
          "186:    ret = PTR_ERR(th);",
          "187:    goto out;",
          "188:   }",
          "191:   dlen = ceph_x_decrypt(secret, &p, end, dbuf,",
          "192:           TEMP_TICKET_BUF_LEN);",
          "193:   if (dlen <= 0) {",
          "194:    ret = dlen;",
          "195:    goto out;",
          "196:   }",
          "197:   dout(\" decrypted %d bytes\\n\", dlen);",
          "198:   dend = dbuf + dlen;",
          "199:   dp = dbuf;",
          "201:   tkt_struct_v = ceph_decode_8(&dp);",
          "202:   if (tkt_struct_v != 1)",
          "203:    goto bad;",
          "205:   memcpy(&old_key, &th->session_key, sizeof(old_key));",
          "206:   ret = ceph_crypto_key_decode(&new_session_key, &dp, dend);",
          "207:   if (ret)",
          "208:    goto out;",
          "210:   ceph_decode_copy(&dp, &new_validity, sizeof(new_validity));",
          "211:   ceph_decode_timespec(&validity, &new_validity);",
          "212:   new_expires = get_seconds() + validity.tv_sec;",
          "213:   new_renew_after = new_expires - (validity.tv_sec / 4);",
          "214:   dout(\" expires=%lu renew_after=%lu\\n\", new_expires,",
          "215:        new_renew_after);",
          "218:   ceph_decode_8_safe(&p, end, is_enc, bad);",
          "219:   tp = ticket_buf;",
          "220:   if (is_enc) {",
          "222:    dout(\" encrypted ticket\\n\");",
          "223:    dlen = ceph_x_decrypt(&old_key, &p, end, ticket_buf,",
          "224:            TEMP_TICKET_BUF_LEN);",
          "225:    if (dlen < 0) {",
          "226:     ret = dlen;",
          "227:     goto out;",
          "228:    }",
          "229:    dlen = ceph_decode_32(&tp);",
          "230:   } else {",
          "232:    ceph_decode_32_safe(&p, end, dlen, bad);",
          "233:    ceph_decode_need(&p, end, dlen, bad);",
          "234:    ceph_decode_copy(&p, ticket_buf, dlen);",
          "235:   }",
          "236:   tpend = tp + dlen;",
          "237:   dout(\" ticket blob is %d bytes\\n\", dlen);",
          "238:   ceph_decode_need(&tp, tpend, 1 + sizeof(u64), bad);",
          "239:   blob_struct_v = ceph_decode_8(&tp);",
          "240:   new_secret_id = ceph_decode_64(&tp);",
          "241:   ret = ceph_decode_buffer(&new_ticket_blob, &tp, tpend);",
          "246:   ceph_crypto_key_destroy(&th->session_key);",
          "247:   if (th->ticket_blob)",
          "248:    ceph_buffer_put(th->ticket_blob);",
          "249:   th->session_key = new_session_key;",
          "250:   th->ticket_blob = new_ticket_blob;",
          "251:   th->validity = new_validity;",
          "252:   th->secret_id = new_secret_id;",
          "253:   th->expires = new_expires;",
          "254:   th->renew_after = new_renew_after;",
          "255:   dout(\" got ticket service %d (%s) secret_id %lld len %d\\n\",",
          "256:        type, ceph_entity_type_name(type), th->secret_id,",
          "257:        (int)th->ticket_blob->vec.iov_len);",
          "258:   xi->have_keys |= th->service;",
          "",
          "[Added Lines]",
          "267:  ceph_decode_8_safe(&p, end, reply_struct_v, bad);",
          "269:   return -EINVAL;",
          "271:  ceph_decode_32_safe(&p, end, num, bad);",
          "272:  dout(\"%d tickets\\n\", num);",
          "274:  while (num--) {",
          "275:   ret = process_one_ticket(ac, secret, &p, end,",
          "276:       dbuf, ticket_buf);",
          "",
          "---------------"
        ]
      }
    }
  ]
}