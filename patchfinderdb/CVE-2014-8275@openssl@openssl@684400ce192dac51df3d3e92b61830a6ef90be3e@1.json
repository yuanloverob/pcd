{
  "cve_id": "CVE-2014-8275",
  "cve_desc": "OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k does not enforce certain constraints on certificate data, which allows remote attackers to defeat a fingerprint-based certificate-blacklist protection mechanism by including crafted data within a certificate's unsigned portion, related to crypto/asn1/a_verify.c, crypto/dsa/dsa_asn1.c, crypto/ecdsa/ecs_vrf.c, and crypto/x509/x_all.c.",
  "repo": "openssl/openssl",
  "patch_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
  "patch_info": {
    "commit_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/684400ce192dac51df3d3e92b61830a6ef90be3e",
    "files": [
      "CHANGES",
      "crypto/asn1/a_verify.c",
      "crypto/dsa/dsa_asn1.c",
      "crypto/ecdsa/ecs_vrf.c",
      "crypto/x509/x_all.c"
    ],
    "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
    "before_after_code_files": [
      "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
      "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
      "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
      "crypto/x509/x_all.c||crypto/x509/x_all.c"
    ]
  },
  "patch_diff": {
    "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
      "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
      "91:   goto err;",
      "92:   }",
      "94:  inl=i2d(data,NULL);",
      "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
      "95:   {",
      "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
      "97:   goto err;",
      "98:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "150:   return -1;",
      "151:   }",
      "153:  EVP_MD_CTX_init(&ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
      "160:   {",
      "161:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
      "162:   return -1;",
      "163:   }",
      "",
      "---------------"
    ],
    "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
      "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
      "178:  {",
      "179:  DSA_SIG *s;",
      "180:  int ret=-1;",
      "182:  s = DSA_SIG_new();",
      "183:  if (s == NULL) return(ret);",
      "185:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
      "186: err:",
      "187:  DSA_SIG_free(s);",
      "188:  return(ret);",
      "189:  }",
      "",
      "[Removed Lines]",
      "184:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
      "",
      "[Added Lines]",
      "180:  const unsigned char *p = sigbuf;",
      "181:  unsigned char *der = NULL;",
      "182:  int derlen = -1;",
      "187:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
      "189:  derlen = i2d_DSA_SIG(s, &der);",
      "190:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
      "191:   goto err;",
      "194:  if (derlen > 0)",
      "195:   {",
      "196:   OPENSSL_cleanse(der, derlen);",
      "197:   OPENSSL_free(der);",
      "198:   }",
      "",
      "---------------"
    ],
    "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
      "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: #include \"ecs_locl.h\"",
      "60: #ifndef OPENSSL_NO_ENGINE",
      "61: #include <openssl/engine.h>",
      "62: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: #include \"cryptlib.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
      "87:   {",
      "88:  ECDSA_SIG *s;",
      "89:  int ret=-1;",
      "91:  s = ECDSA_SIG_new();",
      "92:  if (s == NULL) return(ret);",
      "94:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
      "95: err:",
      "96:  ECDSA_SIG_free(s);",
      "97:  return(ret);",
      "98:  }",
      "",
      "[Removed Lines]",
      "93:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
      "",
      "[Added Lines]",
      "90:  const unsigned char *p = sigbuf;",
      "91:  unsigned char *der = NULL;",
      "92:  int derlen = -1;",
      "97:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
      "99:  derlen = i2d_ECDSA_SIG(s, &der);",
      "100:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
      "101:   goto err;",
      "104:  if (derlen > 0)",
      "105:   {",
      "106:   OPENSSL_cleanse(der, derlen);",
      "107:   OPENSSL_free(der);",
      "108:   }",
      "",
      "---------------"
    ],
    "crypto/x509/x_all.c||crypto/x509/x_all.c": [
      "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74: int X509_verify(X509 *a, EVP_PKEY *r)",
      "75:  {",
      "76:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
      "77:   a->signature,a->cert_info,r));",
      "78:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
      "77:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e63c142f269c738e3820203ecec6fe74ad4efa0",
      "candidate_info": {
        "commit_hash": "6e63c142f269c738e3820203ecec6fe74ad4efa0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6e63c142f269c738e3820203ecec6fe74ad4efa0",
        "files": [
          "crypto/asn1/t_crl.c",
          "crypto/asn1/t_req.c",
          "crypto/asn1/t_spki.c",
          "crypto/asn1/t_x509.c",
          "crypto/asn1/x_crl.c",
          "crypto/asn1/x_req.c",
          "crypto/asn1/x_spki.c",
          "crypto/asn1/x_x509.c",
          "crypto/include/internal/x509_int.h",
          "crypto/x509/x509_cmp.c",
          "crypto/x509/x509_set.c",
          "crypto/x509/x509cset.c",
          "crypto/x509/x_all.c",
          "include/openssl/x509.h"
        ],
        "message": "Embed various signature algorithms.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/t_crl.c||crypto/asn1/t_crl.c",
          "crypto/asn1/t_req.c||crypto/asn1/t_req.c",
          "crypto/asn1/t_spki.c||crypto/asn1/t_spki.c",
          "crypto/asn1/t_x509.c||crypto/asn1/t_x509.c",
          "crypto/asn1/x_crl.c||crypto/asn1/x_crl.c",
          "crypto/asn1/x_req.c||crypto/asn1/x_req.c",
          "crypto/asn1/x_spki.c||crypto/asn1/x_spki.c",
          "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c",
          "crypto/include/internal/x509_int.h||crypto/include/internal/x509_int.h",
          "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c",
          "crypto/x509/x509_set.c||crypto/x509/x509_set.c",
          "crypto/x509/x509cset.c||crypto/x509/x509cset.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c",
          "include/openssl/x509.h||include/openssl/x509.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/t_crl.c||crypto/asn1/t_crl.c": [
          "File: crypto/asn1/t_crl.c -> crypto/asn1/t_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     BIO_printf(out, \"Certificate Revocation List (CRL):\\n\");",
          "95:     l = X509_CRL_get_version(x);",
          "96:     BIO_printf(out, \"%8sVersion %lu (0x%lx)\\n\", \"\", l + 1, l);",
          "99:     p = X509_NAME_oneline(X509_CRL_get_issuer(x), NULL, 0);",
          "100:     BIO_printf(out, \"%8sIssuer: %s\\n\", \"\", p);",
          "101:     OPENSSL_free(p);",
          "",
          "[Removed Lines]",
          "97:     i = OBJ_obj2nid(x->sig_alg->algorithm);",
          "98:     X509_signature_print(out, x->sig_alg, NULL);",
          "",
          "[Added Lines]",
          "97:     i = OBJ_obj2nid(x->sig_alg.algorithm);",
          "98:     X509_signature_print(out, &x->sig_alg, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:         X509V3_extensions_print(out, \"CRL entry extensions\",",
          "128:                                 r->extensions, 0, 8);",
          "129:     }",
          "132:     return 1;",
          "",
          "[Removed Lines]",
          "130:     X509_signature_print(out, x->sig_alg, x->signature);",
          "",
          "[Added Lines]",
          "130:     X509_signature_print(out, &x->sig_alg, x->signature);",
          "",
          "---------------"
        ],
        "crypto/asn1/t_req.c||crypto/asn1/t_req.c": [
          "File: crypto/asn1/t_req.c -> crypto/asn1/t_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     }",
          "229:     if (!(cflag & X509_FLAG_NO_SIGDUMP)) {",
          "231:             goto err;",
          "232:     }",
          "",
          "[Removed Lines]",
          "230:         if (!X509_signature_print(bp, x->sig_alg, x->signature))",
          "",
          "[Added Lines]",
          "230:         if (!X509_signature_print(bp, &x->sig_alg, x->signature))",
          "",
          "---------------"
        ],
        "crypto/asn1/t_spki.c||crypto/asn1/t_spki.c": [
          "File: crypto/asn1/t_spki.c -> crypto/asn1/t_spki.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     chal = spki->spkac->challenge;",
          "92:     if (chal->length)",
          "93:         BIO_printf(out, \"  Challenge String: %s\\n\", chal->data);",
          "95:     BIO_printf(out, \"  Signature Algorithm: %s\",",
          "96:                (i == NID_undef) ? \"UNKNOWN\" : OBJ_nid2ln(i));",
          "",
          "[Removed Lines]",
          "94:     i = OBJ_obj2nid(spki->sig_algor->algorithm);",
          "",
          "[Added Lines]",
          "94:     i = OBJ_obj2nid(spki->sig_algor.algorithm);",
          "",
          "---------------"
        ],
        "crypto/asn1/t_x509.c||crypto/asn1/t_x509.c": [
          "File: crypto/asn1/t_x509.c -> crypto/asn1/t_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     }",
          "172:     if (!(cflag & X509_FLAG_NO_SIGNAME)) {",
          "174:             goto err;",
          "175:     }",
          "",
          "[Removed Lines]",
          "173:         if (X509_signature_print(bp, ci->signature, NULL) <= 0)",
          "",
          "[Added Lines]",
          "173:         if (X509_signature_print(bp, &ci->signature, NULL) <= 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:                                 ci->extensions, cflag, 8);",
          "248:     if (!(cflag & X509_FLAG_NO_SIGDUMP)) {",
          "250:             goto err;",
          "251:     }",
          "252:     if (!(cflag & X509_FLAG_NO_AUX)) {",
          "",
          "[Removed Lines]",
          "249:         if (X509_signature_print(bp, x->sig_alg, x->signature) <= 0)",
          "",
          "[Added Lines]",
          "249:         if (X509_signature_print(bp, &x->sig_alg, x->signature) <= 0)",
          "",
          "---------------"
        ],
        "crypto/asn1/x_crl.c||crypto/asn1/x_crl.c": [
          "File: crypto/asn1/x_crl.c -> crypto/asn1/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: ASN1_SEQUENCE_enc(X509_CRL_INFO, enc, crl_inf_cb) = {",
          "117:         ASN1_OPT(X509_CRL_INFO, version, ASN1_INTEGER),",
          "119:         ASN1_SIMPLE(X509_CRL_INFO, issuer, X509_NAME),",
          "120:         ASN1_SIMPLE(X509_CRL_INFO, lastUpdate, ASN1_TIME),",
          "121:         ASN1_OPT(X509_CRL_INFO, nextUpdate, ASN1_TIME),",
          "",
          "[Removed Lines]",
          "118:         ASN1_SIMPLE(X509_CRL_INFO, sig_alg, X509_ALGOR),",
          "",
          "[Added Lines]",
          "118:         ASN1_EMBED(X509_CRL_INFO, sig_alg, X509_ALGOR),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333: ASN1_SEQUENCE_ref(X509_CRL, crl_cb, CRYPTO_LOCK_X509_CRL) = {",
          "334:         ASN1_EMBED(X509_CRL, crl, X509_CRL_INFO),",
          "336:         ASN1_SIMPLE(X509_CRL, signature, ASN1_BIT_STRING)",
          "337: } ASN1_SEQUENCE_END_ref(X509_CRL, X509_CRL)",
          "",
          "[Removed Lines]",
          "335:         ASN1_SIMPLE(X509_CRL, sig_alg, X509_ALGOR),",
          "",
          "[Added Lines]",
          "335:         ASN1_EMBED(X509_CRL, sig_alg, X509_ALGOR),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394: static int def_crl_verify(X509_CRL *crl, EVP_PKEY *r)",
          "395: {",
          "396:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CRL_INFO),",
          "398: }",
          "400: static int crl_revoked_issuer_match(X509_CRL *crl, X509_NAME *nm,",
          "",
          "[Removed Lines]",
          "397:                              crl->sig_alg, crl->signature, &crl->crl, r));",
          "",
          "[Added Lines]",
          "397:                              &crl->sig_alg, crl->signature, &crl->crl, r));",
          "",
          "---------------"
        ],
        "crypto/asn1/x_req.c||crypto/asn1/x_req.c": [
          "File: crypto/asn1/x_req.c -> crypto/asn1/x_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: ASN1_SEQUENCE_ref(X509_REQ, 0, CRYPTO_LOCK_X509_REQ) = {",
          "110:         ASN1_EMBED(X509_REQ, req_info, X509_REQ_INFO),",
          "112:         ASN1_SIMPLE(X509_REQ, signature, ASN1_BIT_STRING)",
          "113: } ASN1_SEQUENCE_END_ref(X509_REQ, X509_REQ)",
          "",
          "[Removed Lines]",
          "111:         ASN1_SIMPLE(X509_REQ, sig_alg, X509_ALGOR),",
          "",
          "[Added Lines]",
          "111:         ASN1_EMBED(X509_REQ, sig_alg, X509_ALGOR),",
          "",
          "---------------"
        ],
        "crypto/asn1/x_spki.c||crypto/asn1/x_spki.c": [
          "File: crypto/asn1/x_spki.c -> crypto/asn1/x_spki.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: ASN1_SEQUENCE(NETSCAPE_SPKI) = {",
          "77:         ASN1_SIMPLE(NETSCAPE_SPKI, spkac, NETSCAPE_SPKAC),",
          "79:         ASN1_SIMPLE(NETSCAPE_SPKI, signature, ASN1_BIT_STRING)",
          "80: } ASN1_SEQUENCE_END(NETSCAPE_SPKI)",
          "",
          "[Removed Lines]",
          "78:         ASN1_SIMPLE(NETSCAPE_SPKI, sig_algor, X509_ALGOR),",
          "",
          "[Added Lines]",
          "78:         ASN1_EMBED(NETSCAPE_SPKI, sig_algor, X509_ALGOR),",
          "",
          "---------------"
        ],
        "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c": [
          "File: crypto/asn1/x_x509.c -> crypto/asn1/x_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: ASN1_SEQUENCE_enc(X509_CINF, enc, 0) = {",
          "67:         ASN1_EXP_OPT(X509_CINF, version, ASN1_INTEGER, 0),",
          "68:         ASN1_SIMPLE(X509_CINF, serialNumber, ASN1_INTEGER),",
          "70:         ASN1_SIMPLE(X509_CINF, issuer, X509_NAME),",
          "71:         ASN1_EMBED(X509_CINF, validity, X509_VAL),",
          "72:         ASN1_SIMPLE(X509_CINF, subject, X509_NAME),",
          "",
          "[Removed Lines]",
          "69:         ASN1_SIMPLE(X509_CINF, signature, X509_ALGOR),",
          "",
          "[Added Lines]",
          "69:         ASN1_EMBED(X509_CINF, signature, X509_ALGOR),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: ASN1_SEQUENCE_ref(X509, x509_cb, CRYPTO_LOCK_X509) = {",
          "135:         ASN1_EMBED(X509, cert_info, X509_CINF),",
          "137:         ASN1_SIMPLE(X509, signature, ASN1_BIT_STRING)",
          "138: } ASN1_SEQUENCE_END_ref(X509, X509)",
          "",
          "[Removed Lines]",
          "136:         ASN1_SIMPLE(X509, sig_alg, X509_ALGOR),",
          "",
          "[Added Lines]",
          "136:         ASN1_EMBED(X509, sig_alg, X509_ALGOR),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:     return i2d_X509_CINF(&x->cert_info, pp);",
          "214: }",
          "218: {",
          "219:     if (psig)",
          "221:     if (palg)",
          "223: }",
          "225: int X509_get_signature_nid(const X509 *x)",
          "226: {",
          "228: }",
          "",
          "[Removed Lines]",
          "216: void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,",
          "217:                          const X509 *x)",
          "227:     return OBJ_obj2nid(x->sig_alg->algorithm);",
          "",
          "[Added Lines]",
          "216: void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg, X509 *x)",
          "226:     return OBJ_obj2nid(x->sig_alg.algorithm);",
          "",
          "---------------"
        ],
        "crypto/include/internal/x509_int.h||crypto/include/internal/x509_int.h": [
          "File: crypto/include/internal/x509_int.h -> crypto/include/internal/x509_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: struct X509_req_st {",
          "103:     X509_REQ_INFO req_info;",
          "105:     ASN1_BIT_STRING *signature;",
          "106:     int references;",
          "107: };",
          "109: struct X509_crl_info_st {",
          "110:     ASN1_INTEGER *version;",
          "112:     X509_NAME *issuer;",
          "113:     ASN1_TIME *lastUpdate;",
          "114:     ASN1_TIME *nextUpdate;",
          "",
          "[Removed Lines]",
          "104:     X509_ALGOR *sig_alg;",
          "111:     X509_ALGOR *sig_alg;",
          "",
          "[Added Lines]",
          "104:     X509_ALGOR sig_alg;",
          "111:     X509_ALGOR sig_alg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: struct X509_crl_st {",
          "122:     X509_CRL_INFO crl;",
          "124:     ASN1_BIT_STRING *signature;",
          "125:     int references;",
          "126:     int flags;",
          "",
          "[Removed Lines]",
          "123:     X509_ALGOR *sig_alg;",
          "",
          "[Added Lines]",
          "123:     X509_ALGOR sig_alg;",
          "",
          "---------------"
        ],
        "crypto/x509/x509_cmp.c||crypto/x509/x509_cmp.c": [
          "File: crypto/x509/x509_cmp.c -> crypto/x509/x509_cmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:     int sign_nid;",
          "457:     if (!(flags & X509_V_FLAG_SUITEB_128_LOS))",
          "458:         return X509_V_OK;",
          "460:     return check_suite_b(pk, sign_nid, &flags);",
          "461: }",
          "",
          "[Removed Lines]",
          "459:     sign_nid = OBJ_obj2nid(crl->crl.sig_alg->algorithm);",
          "",
          "[Added Lines]",
          "459:     sign_nid = OBJ_obj2nid(crl->crl.sig_alg.algorithm);",
          "",
          "---------------"
        ],
        "crypto/x509/x509_set.c||crypto/x509/x509_set.c": [
          "File: crypto/x509/x509_set.c -> crypto/x509/x509_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: int X509_get_signature_type(const X509 *x)",
          "175: {",
          "177: }",
          "179: X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x)",
          "",
          "[Removed Lines]",
          "176:     return EVP_PKEY_type(OBJ_obj2nid(x->sig_alg->algorithm));",
          "",
          "[Added Lines]",
          "176:     return EVP_PKEY_type(OBJ_obj2nid(x->sig_alg.algorithm));",
          "",
          "---------------"
        ],
        "crypto/x509/x509cset.c||crypto/x509/x509cset.c": [
          "File: crypto/x509/x509cset.c -> crypto/x509/x509cset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: }",
          "166: void X509_CRL_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,",
          "168: {",
          "169:     if (psig)",
          "171:     if (palg)",
          "173: }",
          "175: int X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)",
          "",
          "[Removed Lines]",
          "167:                              const X509_CRL *crl)",
          "",
          "[Added Lines]",
          "167:                              X509_CRL *crl)",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: int X509_verify(X509 *a, EVP_PKEY *r)",
          "76: {",
          "78:         return 0;",
          "80:                              a->signature, &a->cert_info, r));",
          "81: }",
          "83: int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)",
          "84: {",
          "85:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),",
          "87: }",
          "89: int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)",
          "90: {",
          "91:     return (ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),",
          "93: }",
          "95: int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)",
          "96: {",
          "97:     x->cert_info.enc.modified = 1;",
          "100: }",
          "102: int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)",
          "103: {",
          "104:     x->cert_info.enc.modified = 1;",
          "105:     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),",
          "108: }",
          "110: int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)",
          "",
          "[Removed Lines]",
          "77:     if (X509_ALGOR_cmp(a->sig_alg, a->cert_info.signature))",
          "79:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), a->sig_alg,",
          "86:                              a->sig_alg, a->signature, &a->req_info, r));",
          "92:                              a->sig_algor, a->signature, a->spkac, r));",
          "98:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), x->cert_info.signature,",
          "99:                            x->sig_alg, x->signature, &x->cert_info, pkey, md));",
          "106:                               x->cert_info.signature,",
          "107:                               x->sig_alg, x->signature, &x->cert_info, ctx);",
          "",
          "[Added Lines]",
          "77:     if (X509_ALGOR_cmp(&a->sig_alg, &a->cert_info.signature))",
          "79:     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), &a->sig_alg,",
          "86:                              &a->sig_alg, a->signature, &a->req_info, r));",
          "92:                              &a->sig_algor, a->signature, a->spkac, r));",
          "98:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), &x->cert_info.signature,",
          "99:                            &x->sig_alg, x->signature, &x->cert_info, pkey, md));",
          "106:                               &x->cert_info.signature,",
          "107:                               &x->sig_alg, x->signature, &x->cert_info, ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)",
          "117: {",
          "119:                            x->signature, &x->req_info, pkey, md));",
          "120: }",
          "122: int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)",
          "123: {",
          "124:     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_REQ_INFO),",
          "126:                               ctx);",
          "127: }",
          "129: int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)",
          "130: {",
          "131:     x->crl.enc.modified = 1;",
          "134: }",
          "136: int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)",
          "137: {",
          "138:     x->crl.enc.modified = 1;",
          "139:     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CRL_INFO),",
          "141:                               &x->crl, ctx);",
          "142: }",
          "",
          "[Removed Lines]",
          "118:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO), x->sig_alg, NULL,",
          "125:                               x->sig_alg, NULL, x->signature, &x->req_info,",
          "132:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO), x->crl.sig_alg,",
          "133:                            x->sig_alg, x->signature, &x->crl, pkey, md));",
          "140:                               x->crl.sig_alg, x->sig_alg, x->signature,",
          "",
          "[Added Lines]",
          "118:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO), &x->sig_alg, NULL,",
          "125:                               &x->sig_alg, NULL, x->signature, &x->req_info,",
          "132:     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO), &x->crl.sig_alg,",
          "133:                            &x->sig_alg, x->signature, &x->crl, pkey, md));",
          "140:                               &x->crl.sig_alg, &x->sig_alg, x->signature,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)",
          "152: {",
          "154:                            x->signature, x->spkac, pkey, md));",
          "155: }",
          "",
          "[Removed Lines]",
          "153:     return (ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC), x->sig_algor, NULL,",
          "",
          "[Added Lines]",
          "153:     return (ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC), &x->sig_algor, NULL,",
          "",
          "---------------"
        ],
        "include/openssl/x509.h||include/openssl/x509.h": [
          "File: include/openssl/x509.h -> include/openssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: typedef struct x509_cinf_st {",
          "169:     ASN1_INTEGER *serialNumber;",
          "171:     X509_NAME *issuer;",
          "172:     X509_VAL validity;",
          "173:     X509_NAME *subject;",
          "",
          "[Removed Lines]",
          "170:     X509_ALGOR *signature;",
          "",
          "[Added Lines]",
          "170:     X509_ALGOR signature;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: struct x509_st {",
          "184:     X509_CINF cert_info;",
          "186:     ASN1_BIT_STRING *signature;",
          "187:     int valid;",
          "188:     int references;",
          "",
          "[Removed Lines]",
          "185:     X509_ALGOR *sig_alg;",
          "",
          "[Added Lines]",
          "185:     X509_ALGOR sig_alg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376: typedef struct Netscape_spki_st {",
          "379:     ASN1_BIT_STRING *signature;",
          "380: } NETSCAPE_SPKI;",
          "",
          "[Removed Lines]",
          "378:     X509_ALGOR *sig_algor;",
          "",
          "[Added Lines]",
          "378:     X509_ALGOR sig_algor;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "667: int i2d_re_X509_tbs(X509 *x, unsigned char **pp);",
          "671: int X509_get_signature_nid(const X509 *x);",
          "673: int X509_alias_set1(X509 *x, unsigned char *name, int len);",
          "",
          "[Removed Lines]",
          "669: void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,",
          "670:                          const X509 *x);",
          "",
          "[Added Lines]",
          "669: void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg, X509 *x);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "793: X509_NAME *X509_CRL_get_issuer(X509_CRL *crl);",
          "794: STACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl);",
          "795: void X509_CRL_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,",
          "798: int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);",
          "799: int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);",
          "",
          "[Removed Lines]",
          "796:                              const X509_CRL *crl);",
          "",
          "[Added Lines]",
          "795:                              X509_CRL *crl);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb62ab4b17818fe66d2fed0a7fe71969131c811b",
      "candidate_info": {
        "commit_hash": "cb62ab4b17818fe66d2fed0a7fe71969131c811b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cb62ab4b17818fe66d2fed0a7fe71969131c811b",
        "files": [
          "crypto/asn1/a_verify.c"
        ],
        "message": "use correct function name\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "160:   {",
          "162:   return -1;",
          "163:   }",
          "",
          "[Removed Lines]",
          "161:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "",
          "[Added Lines]",
          "161:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1ffc6ca1c387efad0772c16dfe426afef45dc4f",
      "candidate_info": {
        "commit_hash": "b1ffc6ca1c387efad0772c16dfe426afef45dc4f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1ffc6ca1c387efad0772c16dfe426afef45dc4f",
        "files": [
          "crypto/ecdsa/ecs_vrf.c"
        ],
        "message": "Fix warning where BIO_FLAGS_UPLINK was being redefined. This warning breaks the build in 1.0.0 and 0.9.8\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
        "before_after_code_files": [
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c"
          ],
          "candidate": [
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "61: #ifndef OPENSSL_NO_ENGINE",
          "62: #include <openssl/engine.h>",
          "63: #endif",
          "",
          "[Removed Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "[Added Lines]",
          "60: #include <string.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec2fede9467ae1a65f452d3a39f7fbc4891d9285",
      "candidate_info": {
        "commit_hash": "ec2fede9467ae1a65f452d3a39f7fbc4891d9285",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ec2fede9467ae1a65f452d3a39f7fbc4891d9285",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c"
        ],
        "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n\n(cherry picked from commit 208a6012be3077d83df4475f32dd1b1446f3a02e)\n\nConflicts:\n\tcrypto/dsa/dsa_vrf.c",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
            "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
            "crypto/x509/x_all.c||crypto/x509/x_all.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
          "90:   goto err;",
          "91:   }",
          "93:  inl=i2d(data,NULL);",
          "94:  buf_in=OPENSSL_malloc((unsigned int)inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "94:   {",
          "95:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "96:   goto err;",
          "97:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   return -1;",
          "145:   }",
          "147:  EVP_MD_CTX_init(&ctx);",
          "148:  i=OBJ_obj2nid(a->algorithm);",
          "149:  type=EVP_get_digestbyname(OBJ_nid2sn(i));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "154:   {",
          "155:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "156:   return -1;",
          "157:   }",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
          "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
          "201:  {",
          "202:  DSA_SIG *s;",
          "203:  int ret=-1;",
          "204: #ifdef OPENSSL_FIPS",
          "205:  if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))",
          "206:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  const unsigned char *p = sigbuf;",
          "204:  unsigned char *der = NULL;",
          "205:  int derlen = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  s = DSA_SIG_new();",
          "213:  if (s == NULL) return(ret);",
          "215:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
          "216: err:",
          "217:  DSA_SIG_free(s);",
          "218:  return(ret);",
          "219:  }",
          "",
          "[Removed Lines]",
          "214:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
          "",
          "[Added Lines]",
          "218:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
          "220:  derlen = i2d_DSA_SIG(s, &der);",
          "221:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
          "222:   goto err;",
          "225:  if (derlen > 0)",
          "226:   {",
          "227:   OPENSSL_cleanse(der, derlen);",
          "228:   OPENSSL_free(der);",
          "229:   }",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: #include <openssl/engine.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
          "85:   {",
          "86:  ECDSA_SIG *s;",
          "87:  int ret=-1;",
          "89:  s = ECDSA_SIG_new();",
          "90:  if (s == NULL) return(ret);",
          "92:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
          "93: err:",
          "94:  ECDSA_SIG_free(s);",
          "95:  return(ret);",
          "96:  }",
          "",
          "[Removed Lines]",
          "91:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
          "",
          "[Added Lines]",
          "88:  const unsigned char *p = sigbuf;",
          "89:  unsigned char *der = NULL;",
          "90:  int derlen = -1;",
          "95:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
          "97:  derlen = i2d_ECDSA_SIG(s, &der);",
          "98:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
          "99:   goto err;",
          "102:  if (derlen > 0)",
          "103:   {",
          "104:   OPENSSL_cleanse(der, derlen);",
          "105:   OPENSSL_free(der);",
          "106:   }",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int X509_verify(X509 *a, EVP_PKEY *r)",
          "75:  {",
          "76:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
          "77:   a->signature,a->cert_info,r));",
          "78:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "77:   return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}