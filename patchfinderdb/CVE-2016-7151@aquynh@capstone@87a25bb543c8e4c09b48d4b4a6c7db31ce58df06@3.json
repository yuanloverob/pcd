{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fbd27e2c413c16a09dbc6de0e42bb4c2ba68b8fc",
      "candidate_info": {
        "commit_hash": "fbd27e2c413c16a09dbc6de0e42bb4c2ba68b8fc",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/fbd27e2c413c16a09dbc6de0e42bb4c2ba68b8fc",
        "files": [
          "arch/ARM/ARMMappingInsnOp.inc"
        ],
        "message": "arm: fix issue #750",
        "before_after_code_files": [
          "arch/ARM/ARMMappingInsnOp.inc||arch/ARM/ARMMappingInsnOp.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMMappingInsnOp.inc||arch/ARM/ARMMappingInsnOp.inc": [
          "File: arch/ARM/ARMMappingInsnOp.inc -> arch/ARM/ARMMappingInsnOp.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "962:  { CS_AC_READ, CS_AC_READ, 0 }",
          "963: },",
          "966: },",
          "968:  { CS_AC_READ, CS_AC_READ, 0 }",
          "",
          "[Removed Lines]",
          "965:  { CS_AC_READ, 0 }",
          "",
          "[Added Lines]",
          "965:  { CS_AC_READ | CS_AC_WRITE, CS_AC_READ, 0 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59814a32fe68accce08e4c25e0b84b4ac44da4ab",
      "candidate_info": {
        "commit_hash": "59814a32fe68accce08e4c25e0b84b4ac44da4ab",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/59814a32fe68accce08e4c25e0b84b4ac44da4ab",
        "files": [
          "include/capstone.h"
        ],
        "message": "Add space after CAPSTONE_API",
        "before_after_code_files": [
          "include/capstone.h||include/capstone.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone.h||include/capstone.h": [
          "File: include/capstone.h -> include/capstone.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  CS_MODE_MIPS64 = CS_MODE_64, // Mips64 ISA (Mips)",
          "102: } cs_mode;",
          "",
          "[Removed Lines]",
          "104: typedef void* (CAPSTONE_API*cs_malloc_t)(size_t size);",
          "105: typedef void* (CAPSTONE_API*cs_calloc_t)(size_t nmemb, size_t size);",
          "106: typedef void* (CAPSTONE_API*cs_realloc_t)(void *ptr, size_t size);",
          "107: typedef void (CAPSTONE_API*cs_free_t)(void *ptr);",
          "108: typedef int (CAPSTONE_API*cs_vsnprintf_t)(char *str, size_t size, const char *format, va_list ap);",
          "",
          "[Added Lines]",
          "104: typedef void* (CAPSTONE_API *cs_malloc_t)(size_t size);",
          "105: typedef void* (CAPSTONE_API *cs_calloc_t)(size_t nmemb, size_t size);",
          "106: typedef void* (CAPSTONE_API *cs_realloc_t)(void *ptr, size_t size);",
          "107: typedef void (CAPSTONE_API *cs_free_t)(void *ptr);",
          "108: typedef int (CAPSTONE_API *cs_vsnprintf_t)(char *str, size_t size, const char *format, va_list ap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  @return: return number of bytes to skip, or 0 to immediately stop disassembling.",
          "178: typedef struct cs_opt_skipdata {",
          "",
          "[Removed Lines]",
          "175: typedef size_t (CAPSTONE_API*cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "[Added Lines]",
          "175: typedef size_t (CAPSTONE_API *cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "755ec4b658306f4d3d960eecee308f28ebe83a52",
      "candidate_info": {
        "commit_hash": "755ec4b658306f4d3d960eecee308f28ebe83a52",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/755ec4b658306f4d3d960eecee308f28ebe83a52",
        "files": [
          "include/capstone/arm64.h"
        ],
        "message": "arm64: rename enum arm64_mrs_reg to arm64_sysreg",
        "before_after_code_files": [
          "include/capstone/arm64.h||include/capstone/arm64.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/arm64.h||include/capstone/arm64.h": [
          "File: include/capstone/arm64.h -> include/capstone/arm64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: } arm64_cc;",
          "66:  ARM64_SYSREG_INVALID           = 0,",
          "67:  ARM64_SYSREG_MDCCSR_EL0        = 0x9808, // 10  011  0000  0001  000",
          "",
          "[Removed Lines]",
          "64: typedef enum arm64_mrs_reg {",
          "",
          "[Added Lines]",
          "64: typedef enum arm64_sysreg {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f351e827a8e2fbbe22be5c07e81ab5d9dff31ba",
      "candidate_info": {
        "commit_hash": "1f351e827a8e2fbbe22be5c07e81ab5d9dff31ba",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/1f351e827a8e2fbbe22be5c07e81ab5d9dff31ba",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "add explanation comment for use of CAPSTONE_API\n\nSigned-off-by: Satoshi Tanda <tanda.sat@gmail.com>",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c"
        ]
      }
    },
    {
      "candidate_hash": "04ec1815bd896125742a6a2be83092303aa95765",
      "candidate_info": {
        "commit_hash": "04ec1815bd896125742a6a2be83092303aa95765",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/04ec1815bd896125742a6a2be83092303aa95765",
        "files": [
          "bindings/README",
          "bindings/powershell/Capstone/Capstone.psd1",
          "bindings/powershell/Capstone/Capstone.psm1",
          "bindings/powershell/Capstone/Lib/Capstone/.gitignore",
          "bindings/powershell/README.md"
        ],
        "message": "PowerShell binding (#803)\n\n* Binding.README\n\n* Binding.README\n\n* Binding.README\n\n* Binding.README.Ps1\n\n* Binding.PowerShell-Script\n\nAdded script to generate compressed DLL output & update for README\n\n* PowerShell.Binding-Rework\n\nA rework of the pull request based on feedback for the same pull\nrequest in Keystone\n\n* +Get-CapstoneDisassembly\n\nReworked according to the module in Keystone\n\n* Revert constant generation + Quality of service change",
        "before_after_code_files": [
          "bindings/powershell/Capstone/Capstone.psd1||bindings/powershell/Capstone/Capstone.psd1",
          "bindings/powershell/Capstone/Capstone.psm1||bindings/powershell/Capstone/Capstone.psm1"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/powershell/Capstone/Capstone.psd1||bindings/powershell/Capstone/Capstone.psd1": [
          "File: bindings/powershell/Capstone/Capstone.psd1 -> bindings/powershell/Capstone/Capstone.psd1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @{",
          "2: # Script module or binary module file associated with this manifest.",
          "3: ModuleToProcess = 'Capstone.psm1'",
          "5: # Version number of this module.",
          "6: ModuleVersion = '0.0.0.1'",
          "8: # ID used to uniquely identify this module",
          "9: GUID = 'd34db33f-9958-436d-a2d8-a77844a2bda5'",
          "11: # Author of this module",
          "12: Author = 'Ruben Boonen'",
          "14: # Copyright statement for this module",
          "15: Copyright = 'BSD 3-Clause'",
          "17: # Description of the functionality provided by this module",
          "18: Description = 'Capstone Engine Binding Module'",
          "20: # Minimum version of the Windows PowerShell engine required by this module",
          "21: PowerShellVersion = '2.0'",
          "23: # Functions to export from this module",
          "24: FunctionsToExport = '*'",
          "25: }",
          "",
          "---------------"
        ],
        "bindings/powershell/Capstone/Capstone.psm1||bindings/powershell/Capstone/Capstone.psm1": [
          "File: bindings/powershell/Capstone/Capstone.psm1 -> bindings/powershell/Capstone/Capstone.psm1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function Get-CapstoneDisassembly {",
          "2: <#",
          "3: .SYNOPSIS",
          "4:  Powershell wrapper for Capstone (using inline C#).",
          "6: .DESCRIPTION",
          "7:  Author: Ruben Boonen (@FuzzySec)",
          "8:  License: BSD 3-Clause",
          "9:  Required Dependencies: None",
          "10:  Optional Dependencies: None",
          "12: .PARAMETER Architecture",
          "13:  Architecture type.",
          "15: .PARAMETER Mode",
          "16:  Mode type.",
          "18: .PARAMETER Bytes",
          "19:  Byte array to be disassembled.",
          "21: .PARAMETER Syntax",
          "22:  Syntax for output assembly.",
          "24: .PARAMETER Address",
          "25:  Assign address for the first instruction to be disassembled.",
          "27: .PARAMETER Detailed",
          "28:  Return detailed output.",
          "30: .PARAMETER Version",
          "31:  Print ASCII version banner.",
          "33: .EXAMPLE",
          "35:  C:\\PS> $Bytes = [Byte[]] @( 0x10, 0xf1, 0x10, 0xe7, 0x11, 0xf2, 0x31, 0xe7, 0xdc, 0xa1, 0x2e, 0xf3, 0xe8, 0x4e, 0x62, 0xf3 )",
          "36:  C:\\PS> Get-CapstoneDisassembly -Architecture CS_ARCH_ARM -Mode CS_MODE_ARM -Bytes $Bytes",
          "38:  sdiv r0, r0, r1",
          "39:  udiv r1, r1, r2",
          "40:  vbit q5, q15, q6",
          "41:  vcgt.f32 q10, q9, q12",
          "43: .EXAMPLE",
          "45:  # Detailed mode & ATT syntax",
          "46:  C:\\PS> $Bytes = [Byte[]] @( 0xB8, 0x0A, 0x00, 0x00, 0x00, 0xF7, 0xF3 )",
          "47:  C:\\PS> Get-CapstoneDisassembly -Architecture CS_ARCH_X86 -Mode CS_MODE_32 -Bytes $Bytes -Syntax ATT -Detailed",
          "49:  Size     : 5",
          "50:  Address  : 0x100000",
          "51:  Mnemonic : movl",
          "52:  Operands : $0xa, %eax",
          "53:  Bytes    : {184, 10, 0, 0...}",
          "54:  RegRead  :",
          "55:  RegWrite :",
          "57:  Size     : 2",
          "58:  Address  : 0x100005",
          "59:  Mnemonic : divl",
          "60:  Operands : %ebx",
          "61:  Bytes    : {247, 243, 0, 0...}",
          "62:  RegRead  : {eax, edx}",
          "63:  RegWrite : {eax, edx, eflags}",
          "65: .EXAMPLE",
          "67:  # Get-CapstoneDisassembly emits objects",
          "68:  C:\\PS> $Bytes = [Byte[]] @( 0xB8, 0x0A, 0x00, 0x00, 0x00, 0xF7, 0xF3 )",
          "69:  C:\\PS> $Object = Get-CapstoneDisassembly -Architecture CS_ARCH_X86 -Mode CS_MODE_32 -Bytes $Bytes -Detailed",
          "70:  C:\\PS> $Object |Select-Object Size,Mnemonic,Operands",
          "72:  Size Mnemonic Operands",
          "73:  ---- -------- --------",
          "74:     5 mov      eax, 0xa",
          "75:     2 div      ebx",
          "77: #>",
          "79:  param(",
          "80:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "81:   [ValidateSet(",
          "82:    'CS_ARCH_ARM',",
          "83:    'CS_ARCH_ARM64',",
          "84:    'CS_ARCH_MIPS',",
          "85:    'CS_ARCH_X86',",
          "86:    'CS_ARCH_PPC',",
          "87:    'CS_ARCH_SPARC',",
          "88:    'CS_ARCH_SYSZ',",
          "89:    'CS_ARCH_XCORE',",
          "90:    'CS_ARCH_MAX',",
          "91:    'CS_ARCH_ALL')",
          "92:   ]",
          "93:   [String]$Architecture,",
          "95:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "96:   [ValidateSet(",
          "97:    'CS_MODE_LITTLE_ENDIAN',",
          "98:    'CS_MODE_ARM',",
          "99:    'CS_MODE_16',",
          "100:    'CS_MODE_32',",
          "101:    'CS_MODE_64',",
          "102:    'CS_MODE_THUMB',",
          "103:    'CS_MODE_MCLASS',",
          "104:    'CS_MODE_V8',",
          "105:    'CS_MODE_MICRO',",
          "106:    'CS_MODE_MIPS3',",
          "107:    'CS_MODE_MIPS32R6',",
          "108:    'CS_MODE_MIPSGP64',",
          "109:    'CS_MODE_V9',",
          "110:    'CS_MODE_BIG_ENDIAN',",
          "111:    'CS_MODE_MIPS32',",
          "112:    'CS_MODE_MIPS64')",
          "113:   ]",
          "114:   [String]$Mode,",
          "116:   [Parameter(ParameterSetName='Capstone', Mandatory = $True)]",
          "117:   [ValidateNotNullOrEmpty()]",
          "118:   [Byte[]]$Bytes,",
          "120:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "121:   [ValidateSet(",
          "122:    'Intel',",
          "123:    'ATT')",
          "124:   ]",
          "125:   [String]$Syntax = \"Intel\",",
          "127:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "128:   [Int]$Address = 0x100000,",
          "130:   [Parameter(ParameterSetName='Capstone', Mandatory = $False)]",
          "131:   [switch]$Detailed = $null,",
          "133:   [Parameter(ParameterSetName='Version', Mandatory = $False)]",
          "134:   [switch]$Version = $null",
          "135:     )",
          "137:  # Compatibility for PS v2 / PS v3+",
          "138:  if(!$PSScriptRoot) {",
          "139:   $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent",
          "140:  }",
          "142:  # Set the capstone DLL path",
          "143:  $DllPath = $($PSScriptRoot + '\\Lib\\Capstone\\capstone.dll').Replace('\\','\\\\')",
          "145:  # Make sure the user didn't forget the DLL",
          "146:  if (![IO.File]::Exists($DllPath)) {",
          "147:   echo \"`n[!] Missing Capstone DLL\"",
          "148:   echo \"[>] Quitting!`n\"",
          "149:   Return",
          "150:  }",
          "152:  # Inline C# to parse the unmanaged capstone DLL",
          "153:  Add-Type -TypeDefinition @\"",
          "154:  using System;",
          "155:  using System.Diagnostics;",
          "156:  using System.Runtime.InteropServices;",
          "157:  using System.Security.Principal;",
          "159:  [StructLayout(LayoutKind.Sequential)]",
          "160:  public struct cs_insn",
          "161:  {",
          "162:   public uint id;",
          "163:   public ulong address;",
          "164:   public ushort size;",
          "165:   [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]",
          "166:   public byte[] bytes;",
          "167:   [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]",
          "168:   public string mnemonic;",
          "169:   [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 160)]",
          "170:   public string operands;",
          "171:   public IntPtr detail;",
          "172:  }",
          "175:  [StructLayout(LayoutKind.Sequential)]",
          "176:  public struct cs_detail",
          "177:  {",
          "178:   [MarshalAs(UnmanagedType.ByValArray, SizeConst = 12)]",
          "179:   public byte[] regs_read;",
          "180:   public byte regs_read_count;",
          "181:   [MarshalAs(UnmanagedType.ByValArray, SizeConst = 20)]",
          "182:   public byte[] regs_write;",
          "183:   public byte regs_write_count;",
          "184:   [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]",
          "185:   public byte[] groups;",
          "186:   public byte groups_count;",
          "187:  }",
          "189:  public enum cs_err : int",
          "190:  {",
          "191:   CS_ERR_OK = 0,    /// No error: everything was fine",
          "192:   CS_ERR_MEM,       /// Out-Of-Memory error: cs_open(), cs_disasm(), cs_disasm_iter()",
          "193:   CS_ERR_ARCH,      /// Unsupported architecture: cs_open()",
          "194:   CS_ERR_HANDLE,    /// Invalid handle: cs_op_count(), cs_op_index()",
          "195:   CS_ERR_CSH,       /// Invalid csh argument: cs_close(), cs_errno(), cs_option()",
          "196:   CS_ERR_MODE,      /// Invalid/unsupported mode: cs_open()",
          "197:   CS_ERR_OPTION,    /// Invalid/unsupported option: cs_option()",
          "198:   CS_ERR_DETAIL,    /// Information is unavailable because detail option is OFF",
          "199:   CS_ERR_MEMSETUP,  /// Dynamic memory management uninitialized (see CS_OPT_MEM)",
          "200:   CS_ERR_VERSION,   /// Unsupported version (bindings)",
          "201:   CS_ERR_DIET,      /// Access irrelevant data in \"diet\" engine",
          "202:   CS_ERR_SKIPDATA,  /// Access irrelevant data for \"data\" instruction in SKIPDATA mode",
          "203:   CS_ERR_X86_ATT,   /// X86 AT&T syntax is unsupported (opt-out at compile time)",
          "204:   CS_ERR_X86_INTEL, /// X86 Intel syntax is unsupported (opt-out at compile time)",
          "205:  }",
          "206:  public enum cs_arch : int",
          "207:  {",
          "208:   CS_ARCH_ARM = 0,      /// ARM architecture (including Thumb, Thumb-2)",
          "209:   CS_ARCH_ARM64,        /// ARM-64, also called AArch64",
          "210:   CS_ARCH_MIPS,         /// Mips architecture",
          "211:   CS_ARCH_X86,          /// X86 architecture (including x86 & x86-64)",
          "212:   CS_ARCH_PPC,          /// PowerPC architecture",
          "213:   CS_ARCH_SPARC,        /// Sparc architecture",
          "214:   CS_ARCH_SYSZ,         /// SystemZ architecture",
          "215:   CS_ARCH_XCORE,        /// XCore architecture",
          "216:   CS_ARCH_MAX,",
          "217:   CS_ARCH_ALL = 0xFFFF, /// All architectures - for cs_support()",
          "218:  }",
          "219:  public enum cs_mode : int",
          "220:  {",
          "221:   CS_MODE_LITTLE_ENDIAN = 0,    /// little-endian mode (default mode)",
          "222:   CS_MODE_ARM = 0,              /// 32-bit ARM",
          "223:   CS_MODE_16 = 1 << 1,          /// 16-bit mode (X86)",
          "224:   CS_MODE_32 = 1 << 2,          /// 32-bit mode (X86)",
          "225:   CS_MODE_64 = 1 << 3,          /// 64-bit mode (X86, PPC)",
          "226:   CS_MODE_THUMB = 1 << 4,       /// ARM's Thumb mode, including Thumb-2",
          "227:   CS_MODE_MCLASS = 1 << 5,      /// ARM's Cortex-M series",
          "228:   CS_MODE_V8 = 1 << 6,          /// ARMv8 A32 encodings for ARM",
          "229:   CS_MODE_MICRO = 1 << 4,       /// MicroMips mode (MIPS)",
          "230:   CS_MODE_MIPS3 = 1 << 5,       /// Mips III ISA",
          "231:   CS_MODE_MIPS32R6 = 1 << 6,    /// Mips32r6 ISA",
          "232:   CS_MODE_MIPSGP64 = 1 << 7,    /// General Purpose Registers are 64-bit wide (MIPS)",
          "233:   CS_MODE_V9 = 1 << 4,          /// SparcV9 mode (Sparc)",
          "234:   CS_MODE_BIG_ENDIAN = 1 << 31, /// big-endian mode",
          "235:   CS_MODE_MIPS32 = CS_MODE_32,  /// Mips32 ISA (Mips)",
          "236:   CS_MODE_MIPS64 = CS_MODE_64,  /// Mips64 ISA (Mips)",
          "237:  }",
          "239:  public static class Capstone",
          "240:  {",
          "241:   [DllImport(\"$DllPath\")]",
          "242:   public static extern cs_err cs_open(",
          "243:    cs_arch arch,",
          "244:    cs_mode mode,",
          "245:    ref IntPtr handle);",
          "247:   [DllImport(\"$DllPath\")]",
          "248:   public static extern UInt32 cs_disasm(",
          "249:    IntPtr handle,",
          "250:    byte[] code,",
          "251:    int code_size,",
          "252:    ulong address,",
          "253:    int count,",
          "254:    ref IntPtr insn);",
          "256:   [DllImport(\"$DllPath\")]",
          "257:   public static extern bool cs_free(",
          "258:    IntPtr insn,",
          "259:    int count);",
          "261:   [DllImport(\"$DllPath\")]",
          "262:   public static extern cs_err cs_close(",
          "263:    IntPtr handle);",
          "265:   [DllImport(\"$DllPath\")]",
          "266:   public static extern cs_err cs_option(",
          "267:    IntPtr handle,",
          "268:    int type,",
          "269:    int value);",
          "271:   [DllImport(\"$DllPath\", CallingConvention = CallingConvention.Cdecl)]",
          "272:   public static extern IntPtr cs_reg_name(",
          "273:    IntPtr handle,",
          "274:    uint reg_id);",
          "276:   [DllImport(\"$DllPath\")]",
          "277:   public static extern int cs_version(",
          "278:    uint major,",
          "279:    uint minor);",
          "280:  }",
          "281: \"@",
          "283:  if ($Version){",
          "284:   $VerCount = [System.BitConverter]::GetBytes($([Capstone]::cs_version($null,$null)))",
          "285:   $Banner = @\"",
          "287:                  (((;",
          "288:               (; \"((((\\",
          "289:            ;((((((; \"((((;",
          "290:           ((((\"\"\\(((( \"((((",
          "291:         ((((\" ((\\ \"(((( \"(((\\",
          "292:       ;(((/ ((((((( \"(((( \\(((",
          "293:      ((((\" (((* \"(((( \\(((;\"(((\\",
          "294:     ((((\";(((\"/(( \\(((;\"(((\\\"(((\\",
          "295:    (((( (((( ((((\" \"(((\\ ((() (((\\",
          "296:   ;(((\"(((( (((*     **\"\" ((()\"(((;",
          "297:   (((\" ((( (((( ((((((((((((((:*(((",
          "298:  (((( (((*)((( ********\"\"\"\" ;;(((((;",
          "299:  (((* ((( (((((((((((((((((((((*\"\" (",
          "300:  (((\"(((( \"\"\"***********\"\"\"\" ;;(((((",
          "301:   \"\" (((((((((((((((((((((((((((*\"\"",
          "302:          \"\"\"****(((((****\"\"\"",
          "304:      -=[Capstone Engine v$($VerCount[1]).$($VerCount[0])]=-",
          "306: \"@",
          "307:   # Mmm ASCII version banner!",
          "308:   $Banner",
          "309:   Return",
          "310:  }",
          "312:  # Disasm Handle",
          "313:  $DisAsmHandle = [IntPtr]::Zero",
          "315:  # Initialize Capstone with cs_open()",
          "316:  $CallResult = [Capstone]::cs_open($Architecture,$Mode,[ref]$DisAsmHandle)",
          "317:  if ($CallResult -ne \"CS_ERR_OK\") {",
          "318:   if ($CallResult -eq \"CS_ERR_MODE\"){",
          "319:    echo \"`n[!] Invalid Architecture/Mode combination\"",
          "320:    echo \"[>] Quitting..`n\"",
          "321:   } else {",
          "322:    echo \"`n[!] cs_open error: $CallResult\"",
          "323:    echo \"[>] Quitting..`n\"",
          "324:   }",
          "325:   Return",
          "326:  }",
          "328:  # Set disassembly syntax",
          "329:  #---",
          "330:  # cs_opt_type  -> CS_OPT_SYNTAX = 1",
          "331:  #---",
          "332:  # cs_opt_value -> CS_OPT_SYNTAX_INTEL = 1",
          "333:  #              -> CS_OPT_SYNTAX_ATT   = 2",
          "334:  if ($Syntax -eq \"Intel\") {",
          "335:   $CS_OPT_SYNTAX = 1",
          "336:  } else {",
          "337:   $CS_OPT_SYNTAX = 2",
          "338:  }",
          "339:  $CallResult = [Capstone]::cs_option($DisAsmHandle, 1, $CS_OPT_SYNTAX)",
          "340:  if ($CallResult -ne \"CS_ERR_OK\") {",
          "341:   echo \"`n[!] cs_option error: $CallResult\"",
          "342:   echo \"[>] Quitting..`n\"",
          "343:   $CallResult = [Capstone]::cs_close($DisAsmHandle)",
          "344:   Return",
          "345:  }",
          "347:  # Set disassembly detail",
          "348:  #---",
          "349:  # cs_opt_type  -> CS_OPT_DETAIL = 2",
          "350:  #---",
          "351:  # cs_opt_value -> CS_OPT_ON  = 3",
          "352:  #              -> CS_OPT_OFF = 0",
          "353:  if ($Detailed) {",
          "354:   $CS_OPT = 3",
          "355:  } else {",
          "356:   $CS_OPT = 0",
          "357:  }",
          "358:  $CallResult = [Capstone]::cs_option($DisAsmHandle, 2, $CS_OPT)",
          "359:  if ($CallResult -ne \"CS_ERR_OK\") {",
          "360:   echo \"`n[!] cs_option error: $CallResult\"",
          "361:   echo \"[>] Quitting..`n\"",
          "362:   $CallResult = [Capstone]::cs_close($DisAsmHandle)",
          "363:   Return",
          "364:  }",
          "366:  # Out Buffer Handle",
          "367:  $InsnHandle = [IntPtr]::Zero",
          "369:  # Disassemble bytes",
          "370:  $Count = [Capstone]::cs_disasm($DisAsmHandle, $Bytes, $Bytes.Count, $Address, 0, [ref]$InsnHandle)",
          "372:  if ($Count -gt 0) {",
          "373:   # Result Array",
          "374:   $Disasm = @()",
          "376:   # Result struct",
          "377:   $cs_insn = New-Object cs_insn",
          "378:   $cs_insn_size = [System.Runtime.InteropServices.Marshal]::SizeOf($cs_insn)",
          "379:   $cs_insn = $cs_insn.GetType()",
          "381:   # Result detail struct",
          "382:   $cs_detail = New-Object cs_detail",
          "383:   $cs_detail = $cs_detail.GetType()",
          "385:   # Result buffer offset",
          "386:   $BuffOffset = $InsnHandle.ToInt64()",
          "388:   for ($i=0; $i -lt $Count; $i++) {",
          "389:    # Cast Offset to cs_insn",
          "390:    $InsnPointer = New-Object System.Intptr -ArgumentList $BuffOffset",
          "391:    $Cast = [system.runtime.interopservices.marshal]::PtrToStructure($InsnPointer,[type]$cs_insn)",
          "393:    if ($CS_OPT -eq 0) {",
          "394:     $HashTable = @{",
          "395:      Address = echo \"0x$(\"{0:X}\" -f $Cast.address)\"",
          "396:      Instruction = echo \"$($Cast.mnemonic) $($Cast.operands)\"",
          "397:     }",
          "398:     $Object = New-Object PSObject -Property $HashTable",
          "399:     $Disasm += $Object |Select-Object Address,Instruction",
          "400:    } else {",
          "401:     $DetailCast = [system.runtime.interopservices.marshal]::PtrToStructure($Cast.detail,[type]$cs_detail)",
          "402:     if($DetailCast.regs_read_count -gt 0) {",
          "403:      $RegRead = @()",
          "404:      for ($r=0; $r -lt $DetailCast.regs_read_count; $r++) {",
          "405:       $NamePointer = [Capstone]::cs_reg_name($DisAsmHandle, $DetailCast.regs_read[$r])",
          "406:       $RegRead += [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePointer)",
          "407:      }",
          "408:     }",
          "409:     if ($DetailCast.regs_write_count -gt 0) {",
          "410:      $RegWrite = @()",
          "411:      for ($r=0; $r -lt $DetailCast.regs_write_count; $r++) {",
          "412:       $NamePointer = [Capstone]::cs_reg_name($DisAsmHandle, $DetailCast.regs_write[$r])",
          "413:       $RegWrite += [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePointer)",
          "414:      }",
          "415:     }",
          "416:     $HashTable = @{",
          "417:      Address = echo \"0x$(\"{0:X}\" -f $Cast.address)\"",
          "418:      Mnemonic = $Cast.mnemonic",
          "419:      Operands = $Cast.operands",
          "420:      Bytes = $Cast.bytes",
          "421:      Size = $Cast.size",
          "422:      RegRead = $RegRead",
          "423:      RegWrite = $RegWrite",
          "424:     }",
          "425:     $Object = New-Object PSObject -Property $HashTable",
          "426:     $Disasm += $Object |Select-Object Size,Address,Mnemonic,Operands,Bytes,RegRead,RegWrite",
          "427:    }",
          "428:    $BuffOffset = $BuffOffset + $cs_insn_size",
          "429:   }",
          "430:  } else {",
          "431:   echo \"[!] Disassembly Failed\"",
          "432:   echo \"[>] Quitting..\"",
          "433:   $CallResult = [Capstone]::cs_close($DisAsmHandle)",
          "434:   Return",
          "435:  }",
          "437:  # Print result",
          "438:  $Disasm",
          "440:  # Free Buffer Handle",
          "441:  $CallResult = [Capstone]::cs_free($InsnHandle, $Count)",
          "442: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}