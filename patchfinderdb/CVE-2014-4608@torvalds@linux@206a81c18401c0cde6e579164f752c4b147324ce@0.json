{
  "cve_id": "CVE-2014-4608",
  "cve_desc": "Multiple integer overflows in the lzo1x_decompress_safe function in lib/lzo/lzo1x_decompress_safe.c in the LZO decompressor in the Linux kernel before 3.15.2 allow context-dependent attackers to cause a denial of service (memory corruption) via a crafted Literal Run.  NOTE: the author of the LZO algorithms says \"the Linux kernel is *not* affected; media hype.",
  "repo": "torvalds/linux",
  "patch_hash": "206a81c18401c0cde6e579164f752c4b147324ce",
  "patch_info": {
    "commit_hash": "206a81c18401c0cde6e579164f752c4b147324ce",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/206a81c18401c0cde6e579164f752c4b147324ce",
    "files": [
      "lib/lzo/lzo1x_decompress_safe.c"
    ],
    "message": "lzo: properly check for overruns\n\nThe lzo decompressor can, if given some really crazy data, possibly\noverrun some variable types.  Modify the checking logic to properly\ndetect overruns before they happen.\n\nReported-by: \"Don A. Bailey\" <donb@securitymouse.com>\nTested-by: \"Don A. Bailey\" <donb@securitymouse.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "lib/lzo/lzo1x_decompress_safe.c||lilzo/lzo1x_decompress_safe.c"
    ]
  },
  "patch_diff": {
    "lib/lzo/lzo1x_decompress_safe.c||lilzo/lzo1x_decompress_safe.c": [
      "File: lib/lzo/lzo1x_decompress_safe.c -> lilzo/lzo1x_decompress_safe.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <linux/lzo.h>",
      "20: #include \"lzodefs.h\"",
      "28: int lzo1x_decompress_safe(const unsigned char *in, size_t in_len,",
      "29:      unsigned char *out, size_t *out_len)",
      "",
      "[Removed Lines]",
      "22: #define HAVE_IP(x)      ((size_t)(ip_end - ip) >= (size_t)(x))",
      "23: #define HAVE_OP(x)      ((size_t)(op_end - op) >= (size_t)(x))",
      "24: #define NEED_IP(x)      if (!HAVE_IP(x)) goto input_overrun",
      "25: #define NEED_OP(x)      if (!HAVE_OP(x)) goto output_overrun",
      "26: #define TEST_LB(m_pos)  if ((m_pos) < out) goto lookbehind_overrun",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:      while (unlikely(*ip == 0)) {",
      "59:       t += 255;",
      "60:       ip++;",
      "62:      }",
      "63:      t += 15 + *ip++;",
      "64:     }",
      "65:     t += 3;",
      "66: copy_literal_run:",
      "67: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
      "69:      const unsigned char *ie = ip + t;",
      "70:      unsigned char *oe = op + t;",
      "71:      do {",
      "",
      "[Removed Lines]",
      "61:       NEED_IP(1);",
      "68:     if (likely(HAVE_IP(t + 15) && HAVE_OP(t + 15))) {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     } else",
      "82: #endif",
      "83:     {",
      "86:      do {",
      "88:      } while (--t > 0);",
      "",
      "[Removed Lines]",
      "84:      NEED_OP(t);",
      "85:      NEED_IP(t + 3);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     m_pos -= t >> 2;",
      "96:     m_pos -= *ip++ << 2;",
      "97:     TEST_LB(m_pos);",
      "99:     op[0] = m_pos[0];",
      "100:     op[1] = m_pos[1];",
      "101:     op += 2;",
      "",
      "[Removed Lines]",
      "98:     NEED_OP(2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "119:     while (unlikely(*ip == 0)) {",
      "120:      t += 255;",
      "121:      ip++;",
      "123:     }",
      "124:     t += 31 + *ip++;",
      "126:    }",
      "127:    m_pos = op - 1;",
      "128:    next = get_unaligned_le16(ip);",
      "",
      "[Removed Lines]",
      "122:      NEED_IP(1);",
      "125:     NEED_IP(2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "137:     while (unlikely(*ip == 0)) {",
      "138:      t += 255;",
      "139:      ip++;",
      "141:     }",
      "142:     t += 7 + *ip++;",
      "144:    }",
      "145:    next = get_unaligned_le16(ip);",
      "146:    ip += 2;",
      "",
      "[Removed Lines]",
      "140:      NEED_IP(1);",
      "143:     NEED_IP(2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "154: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
      "155:   if (op - m_pos >= 8) {",
      "156:    unsigned char *oe = op + t;",
      "158:     do {",
      "159:      COPY8(op, m_pos);",
      "160:      op += 8;",
      "",
      "[Removed Lines]",
      "157:    if (likely(HAVE_OP(t + 15))) {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "164:      m_pos += 8;",
      "165:     } while (op < oe);",
      "166:     op = oe;",
      "168:      state = next;",
      "169:      COPY4(op, ip);",
      "170:      op += next;",
      "",
      "[Removed Lines]",
      "167:     if (HAVE_IP(6)) {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "172:      continue;",
      "173:     }",
      "174:    } else {",
      "176:     do {",
      "178:     } while (op < oe);",
      "",
      "[Removed Lines]",
      "175:     NEED_OP(t);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "181: #endif",
      "182:   {",
      "183:    unsigned char *oe = op + t;",
      "185:    op[0] = m_pos[0];",
      "186:    op[1] = m_pos[1];",
      "187:    op += 2;",
      "",
      "[Removed Lines]",
      "184:    NEED_OP(t);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "194:   state = next;",
      "195:   t = next;",
      "196: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
      "198:    COPY4(op, ip);",
      "199:    op += t;",
      "200:    ip += t;",
      "201:   } else",
      "202: #endif",
      "203:   {",
      "206:    while (t > 0) {",
      "208:     t--;",
      "",
      "[Removed Lines]",
      "197:   if (likely(HAVE_IP(6) && HAVE_OP(4))) {",
      "204:    NEED_IP(t + 3);",
      "205:    NEED_OP(t);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af958a38a60c7ca3d8a39c918c1baa2ff7b6b233",
      "candidate_info": {
        "commit_hash": "af958a38a60c7ca3d8a39c918c1baa2ff7b6b233",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/af958a38a60c7ca3d8a39c918c1baa2ff7b6b233",
        "files": [
          "lib/lzo/lzo1x_decompress_safe.c"
        ],
        "message": "Revert \"lzo: properly check for overruns\"\n\nThis reverts commit 206a81c (\"lzo: properly check for overruns\").\n\nAs analysed by Willem Pinckaers, this fix is still incomplete on\ncertain rare corner cases, and it is easier to restart from the\noriginal code.\n\nReported-by: Willem Pinckaers <willem@lekkertech.net>\nCc: \"Don A. Bailey\" <donb@securitymouse.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Willy Tarreau <w@1wt.eu>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "lib/lzo/lzo1x_decompress_safe.c||lib/lzo/lzo1x_decompress_safe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/lzo/lzo1x_decompress_safe.c||lib/lzo/lzo1x_decompress_safe.c": [
          "File: lib/lzo/lzo1x_decompress_safe.c -> lib/lzo/lzo1x_decompress_safe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <linux/lzo.h>",
          "20: #include \"lzodefs.h\"",
          "48: int lzo1x_decompress_safe(const unsigned char *in, size_t in_len,",
          "49:      unsigned char *out, size_t *out_len)",
          "",
          "[Removed Lines]",
          "22: #define HAVE_IP(t, x)     \\",
          "23:  (((size_t)(ip_end - ip) >= (size_t)(t + x)) && \\",
          "24:   (((t + x) >= t) && ((t + x) >= x)))",
          "26: #define HAVE_OP(t, x)     \\",
          "27:  (((size_t)(op_end - op) >= (size_t)(t + x)) && \\",
          "28:   (((t + x) >= t) && ((t + x) >= x)))",
          "30: #define NEED_IP(t, x)     \\",
          "31:  do {      \\",
          "32:   if (!HAVE_IP(t, x))   \\",
          "33:    goto input_overrun;  \\",
          "34:  } while (0)",
          "36: #define NEED_OP(t, x)     \\",
          "37:  do {      \\",
          "38:   if (!HAVE_OP(t, x))   \\",
          "39:    goto output_overrun;  \\",
          "40:  } while (0)",
          "42: #define TEST_LB(m_pos)     \\",
          "43:  do {      \\",
          "44:   if ((m_pos) < out)   \\",
          "45:    goto lookbehind_overrun; \\",
          "46:  } while (0)",
          "",
          "[Added Lines]",
          "22: #define HAVE_IP(x)      ((size_t)(ip_end - ip) >= (size_t)(x))",
          "23: #define HAVE_OP(x)      ((size_t)(op_end - op) >= (size_t)(x))",
          "24: #define NEED_IP(x)      if (!HAVE_IP(x)) goto input_overrun",
          "25: #define NEED_OP(x)      if (!HAVE_OP(x)) goto output_overrun",
          "26: #define TEST_LB(m_pos)  if ((m_pos) < out) goto lookbehind_overrun",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:      while (unlikely(*ip == 0)) {",
          "79:       t += 255;",
          "80:       ip++;",
          "82:      }",
          "83:      t += 15 + *ip++;",
          "84:     }",
          "85:     t += 3;",
          "86: copy_literal_run:",
          "87: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
          "89:      const unsigned char *ie = ip + t;",
          "90:      unsigned char *oe = op + t;",
          "91:      do {",
          "",
          "[Removed Lines]",
          "81:       NEED_IP(1, 0);",
          "88:     if (likely(HAVE_IP(t, 15) && HAVE_OP(t, 15))) {",
          "",
          "[Added Lines]",
          "61:       NEED_IP(1);",
          "68:     if (likely(HAVE_IP(t + 15) && HAVE_OP(t + 15))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     } else",
          "102: #endif",
          "103:     {",
          "106:      do {",
          "108:      } while (--t > 0);",
          "",
          "[Removed Lines]",
          "104:      NEED_OP(t, 0);",
          "105:      NEED_IP(t, 3);",
          "",
          "[Added Lines]",
          "84:      NEED_OP(t);",
          "85:      NEED_IP(t + 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     m_pos -= t >> 2;",
          "116:     m_pos -= *ip++ << 2;",
          "117:     TEST_LB(m_pos);",
          "119:     op[0] = m_pos[0];",
          "120:     op[1] = m_pos[1];",
          "121:     op += 2;",
          "",
          "[Removed Lines]",
          "118:     NEED_OP(2, 0);",
          "",
          "[Added Lines]",
          "98:     NEED_OP(2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:     while (unlikely(*ip == 0)) {",
          "140:      t += 255;",
          "141:      ip++;",
          "143:     }",
          "144:     t += 31 + *ip++;",
          "146:    }",
          "147:    m_pos = op - 1;",
          "148:    next = get_unaligned_le16(ip);",
          "",
          "[Removed Lines]",
          "142:      NEED_IP(1, 0);",
          "145:     NEED_IP(2, 0);",
          "",
          "[Added Lines]",
          "122:      NEED_IP(1);",
          "125:     NEED_IP(2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:     while (unlikely(*ip == 0)) {",
          "158:      t += 255;",
          "159:      ip++;",
          "161:     }",
          "162:     t += 7 + *ip++;",
          "164:    }",
          "165:    next = get_unaligned_le16(ip);",
          "166:    ip += 2;",
          "",
          "[Removed Lines]",
          "160:      NEED_IP(1, 0);",
          "163:     NEED_IP(2, 0);",
          "",
          "[Added Lines]",
          "140:      NEED_IP(1);",
          "143:     NEED_IP(2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "174: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
          "175:   if (op - m_pos >= 8) {",
          "176:    unsigned char *oe = op + t;",
          "178:     do {",
          "179:      COPY8(op, m_pos);",
          "180:      op += 8;",
          "",
          "[Removed Lines]",
          "177:    if (likely(HAVE_OP(t, 15))) {",
          "",
          "[Added Lines]",
          "157:    if (likely(HAVE_OP(t + 15))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "184:      m_pos += 8;",
          "185:     } while (op < oe);",
          "186:     op = oe;",
          "188:      state = next;",
          "189:      COPY4(op, ip);",
          "190:      op += next;",
          "",
          "[Removed Lines]",
          "187:     if (HAVE_IP(6, 0)) {",
          "",
          "[Added Lines]",
          "167:     if (HAVE_IP(6)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "192:      continue;",
          "193:     }",
          "194:    } else {",
          "196:     do {",
          "198:     } while (op < oe);",
          "",
          "[Removed Lines]",
          "195:     NEED_OP(t, 0);",
          "",
          "[Added Lines]",
          "175:     NEED_OP(t);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "201: #endif",
          "202:   {",
          "203:    unsigned char *oe = op + t;",
          "205:    op[0] = m_pos[0];",
          "206:    op[1] = m_pos[1];",
          "207:    op += 2;",
          "",
          "[Removed Lines]",
          "204:    NEED_OP(t, 0);",
          "",
          "[Added Lines]",
          "184:    NEED_OP(t);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "214:   state = next;",
          "215:   t = next;",
          "216: #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)",
          "218:    COPY4(op, ip);",
          "219:    op += t;",
          "220:    ip += t;",
          "221:   } else",
          "222: #endif",
          "223:   {",
          "226:    while (t > 0) {",
          "228:     t--;",
          "",
          "[Removed Lines]",
          "217:   if (likely(HAVE_IP(6, 0) && HAVE_OP(4, 0))) {",
          "224:    NEED_IP(t, 3);",
          "225:    NEED_OP(t, 0);",
          "",
          "[Added Lines]",
          "197:   if (likely(HAVE_IP(6) && HAVE_OP(4))) {",
          "204:    NEED_IP(t + 3);",
          "205:    NEED_OP(t);",
          "",
          "---------------"
        ]
      }
    }
  ]
}