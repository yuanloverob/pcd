{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d02309a1622a804668a22f9cfbe9c5e49dead9a",
      "candidate_info": {
        "commit_hash": "7d02309a1622a804668a22f9cfbe9c5e49dead9a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7d02309a1622a804668a22f9cfbe9c5e49dead9a",
        "files": [
          "apps/rehash.c"
        ],
        "message": "In apps/rehash.c, decorate the inclusion of internal/o_dir.h for VMS\n\nThe library files are built with symbol names as is, while the\napplication is built with the default uppercase-all-symbols mode.\nThat's fine for public APIs, because we have __DECC_INCLUDE_PROLOGUE.H\nand __DECC_INCLUDE_EPILOGUE.H automatically telling the compiler how\nto treat the public header files.  However, we don't have the same\nsetup for internal library APIs, since they are usually only used by\nthe libraries.\n\nBecause apps/rehash.c uses a library internal header file, we have to\nsurround that inclusion with the same kind of pragmas found in\n__DECC_INCLUDE_PROLOGUE.H and __DECC_INCLUDE_EPILOGUE.H, or we get\nunresolved symbols when building no-shared.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2725)\n(cherry picked from commit 2ac915f16218982f48dbc799b8308a07441d2e35)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: # include <ctype.h>",
          "26: # include <sys/stat.h>",
          "28: # include \"internal/o_dir.h\"",
          "29: # include <openssl/evp.h>",
          "30: # include <openssl/pem.h>",
          "31: # include <openssl/x509.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: # ifdef __VMS",
          "35: #  pragma names save",
          "36: #  pragma names as_is,shortened",
          "37: # endif",
          "41: # ifdef __VMS",
          "42: #  pragma names restore",
          "43: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5769b5421683293014ed91b292ea39915f5f1eff",
      "candidate_info": {
        "commit_hash": "5769b5421683293014ed91b292ea39915f5f1eff",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5769b5421683293014ed91b292ea39915f5f1eff",
        "files": [
          "test/evp_test.c"
        ],
        "message": "evp_test: when function and reason strings aren't available, just skip\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2093)\n(cherry picked from commit cd3fe0e09c97700005ed96c8113907cbdfc45edf)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:     func = ERR_func_error_string(err);",
          "373:     reason = ERR_reason_error_string(err);",
          "375:     if (strcmp(func, t->func) == 0 && strcmp(reason, t->reason) == 0)",
          "376:         return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     if (func == NULL && reason == NULL) {",
          "376:         fprintf(stderr, \"Test line %d: expected error \\\"%s:%s\\\", no strings available.  Skipping...\\n\",",
          "377:                 t->start_line, t->func, t->reason);",
          "378:         return 1;",
          "379:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93558bf5190226494d3b549397fbf94214846d0d",
      "candidate_info": {
        "commit_hash": "93558bf5190226494d3b549397fbf94214846d0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/93558bf5190226494d3b549397fbf94214846d0d",
        "files": [
          "crypto/dso/dso_dl.c",
          "crypto/dso/dso_dlfcn.c",
          "crypto/dso/dso_err.c",
          "crypto/dso/dso_lib.c",
          "crypto/dso/dso_locl.h",
          "crypto/dso/dso_vms.c",
          "crypto/dso/dso_win32.c",
          "include/internal/dso.h",
          "util/libcrypto.num"
        ],
        "message": "Partial revert of 3d8b2ec42 to add back DSO_pathbyaddr\n\nCommit 3d8b2ec42 removed various unused functions. However now we need to\nuse one of them! This commit resurrects DSO_pathbyaddr(). We're not going to\nresurrect the Windows version though because what we need to achieve can be\ndone a different way on Windows.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit cb6ea61c161e88aa0268c77f308469a67b2ec063)",
        "before_after_code_files": [
          "crypto/dso/dso_dl.c||crypto/dso/dso_dl.c",
          "crypto/dso/dso_dlfcn.c||crypto/dso/dso_dlfcn.c",
          "crypto/dso/dso_err.c||crypto/dso/dso_err.c",
          "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c",
          "crypto/dso/dso_locl.h||crypto/dso/dso_locl.h",
          "crypto/dso/dso_vms.c||crypto/dso/dso_vms.c",
          "crypto/dso/dso_win32.c||crypto/dso/dso_win32.c",
          "include/internal/dso.h||include/internal/dso.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dso/dso_dl.c||crypto/dso/dso_dl.c": [
          "File: crypto/dso/dso_dl.c -> crypto/dso/dso_dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static char *dl_name_converter(DSO *dso, const char *filename);",
          "23: static char *dl_merger(DSO *dso, const char *filespec1,",
          "24:                        const char *filespec2);",
          "25: static void *dl_globallookup(const char *name);",
          "27: static DSO_METHOD dso_meth_dl = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: static int dl_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     dl_merger,",
          "37:     dl_globallookup",
          "38: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     dl_pathbyaddr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:     return (translated);",
          "236: }",
          "238: static void *dl_globallookup(const char *name)",
          "239: {",
          "240:     void *ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: static int dl_pathbyaddr(void *addr, char *path, int sz)",
          "241: {",
          "242:     struct shl_descriptor inf;",
          "243:     int i, len;",
          "245:     if (addr == NULL) {",
          "246:         union {",
          "247:             int (*f) (void *, char *, int);",
          "248:             void *p;",
          "249:         } t = {",
          "250:             dl_pathbyaddr",
          "251:         };",
          "252:         addr = t.p;",
          "253:     }",
          "255:     for (i = -1; shl_get_r(i, &inf) == 0; i++) {",
          "256:         if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||",
          "257:             ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend)) {",
          "258:             len = (int)strlen(inf.filename);",
          "259:             if (sz <= 0)",
          "260:                 return len + 1;",
          "261:             if (len >= sz)",
          "262:                 len = sz - 1;",
          "263:             memcpy(path, inf.filename, len);",
          "264:             path[len++] = 0;",
          "265:             return len;",
          "266:         }",
          "267:     }",
          "269:     return -1;",
          "270: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_dlfcn.c||crypto/dso/dso_dlfcn.c": [
          "File: crypto/dso/dso_dlfcn.c -> crypto/dso/dso_dlfcn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static char *dlfcn_name_converter(DSO *dso, const char *filename);",
          "45: static char *dlfcn_merger(DSO *dso, const char *filespec1,",
          "46:                           const char *filespec2);",
          "47: static void *dlfcn_globallookup(const char *name);",
          "49: static DSO_METHOD dso_meth_dlfcn = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: static int dlfcn_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     dlfcn_merger,",
          "59:     dlfcn_globallookup",
          "60: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     dlfcn_pathbyaddr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: }",
          "309: static void *dlfcn_globallookup(const char *name)",
          "310: {",
          "311:     void *ret = NULL, *handle = dlopen(NULL, RTLD_LAZY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: static int dlfcn_pathbyaddr(void *addr, char *path, int sz)",
          "312: {",
          "313: # ifdef HAVE_DLINFO",
          "314:     Dl_info dli;",
          "315:     int len;",
          "317:     if (addr == NULL) {",
          "318:         union {",
          "319:             int (*f) (void *, char *, int);",
          "320:             void *p;",
          "321:         } t = {",
          "322:             dlfcn_pathbyaddr",
          "323:         };",
          "324:         addr = t.p;",
          "325:     }",
          "327:     if (dladdr(addr, &dli)) {",
          "328:         len = (int)strlen(dli.dli_fname);",
          "329:         if (sz <= 0)",
          "330:             return len + 1;",
          "331:         if (len >= sz)",
          "332:             len = sz - 1;",
          "333:         memcpy(path, dli.dli_fname, len);",
          "334:         path[len++] = 0;",
          "335:         return len;",
          "336:     }",
          "338:     ERR_add_error_data(2, \"dlfcn_pathbyaddr(): \", dlerror());",
          "339: # endif",
          "340:     return -1;",
          "341: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_err.c||crypto/dso/dso_err.c": [
          "File: crypto/dso/dso_err.c -> crypto/dso/dso_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     {ERR_FUNC(DSO_F_DSO_LOAD), \"DSO_load\"},",
          "39:     {ERR_FUNC(DSO_F_DSO_MERGE), \"DSO_merge\"},",
          "40:     {ERR_FUNC(DSO_F_DSO_NEW_METHOD), \"DSO_new_method\"},",
          "41:     {ERR_FUNC(DSO_F_DSO_SET_FILENAME), \"DSO_set_filename\"},",
          "42:     {ERR_FUNC(DSO_F_DSO_UP_REF), \"DSO_up_ref\"},",
          "43:     {ERR_FUNC(DSO_F_VMS_BIND_SYM), \"vms_bind_sym\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     {ERR_FUNC(DSO_F_DSO_PATHBYADDR), \"DSO_pathbyaddr\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     {ERR_FUNC(DSO_F_WIN32_LOAD), \"win32_load\"},",
          "51:     {ERR_FUNC(DSO_F_WIN32_MERGER), \"win32_merger\"},",
          "52:     {ERR_FUNC(DSO_F_WIN32_NAME_CONVERTER), \"win32_name_converter\"},",
          "53:     {ERR_FUNC(DSO_F_WIN32_SPLITTER), \"win32_splitter\"},",
          "54:     {ERR_FUNC(DSO_F_WIN32_UNLOAD), \"win32_unload\"},",
          "55:     {0, NULL}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     {ERR_FUNC(DSO_F_WIN32_PATHBYADDR), \"win32_pathbyaddr\"},",
          "",
          "---------------"
        ],
        "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c": [
          "File: crypto/dso/dso_lib.c -> crypto/dso/dso_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     return (result);",
          "305: }",
          "307: void *DSO_global_lookup(const char *name)",
          "308: {",
          "309:     DSO_METHOD *meth = default_DSO_meth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: int DSO_pathbyaddr(void *addr, char *path, int sz)",
          "308: {",
          "309:     DSO_METHOD *meth = default_DSO_meth;",
          "310:     if (meth == NULL)",
          "311:         meth = DSO_METHOD_openssl();",
          "312:     if (meth->pathbyaddr == NULL) {",
          "313:         DSOerr(DSO_F_DSO_PATHBYADDR, DSO_R_UNSUPPORTED);",
          "314:         return -1;",
          "315:     }",
          "316:     return (*meth->pathbyaddr) (addr, path, sz);",
          "317: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_locl.h||crypto/dso/dso_locl.h": [
          "File: crypto/dso/dso_locl.h -> crypto/dso/dso_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     int (*init) (DSO *dso);",
          "101:     int (*finish) (DSO *dso);",
          "103:     void *(*globallookup) (const char *symname);",
          "104: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     int (*pathbyaddr) (void *addr, char *path, int sz);",
          "",
          "---------------"
        ],
        "crypto/dso/dso_vms.c||crypto/dso/dso_vms.c": [
          "File: crypto/dso/dso_vms.c -> crypto/dso/dso_vms.c"
        ],
        "crypto/dso/dso_win32.c||crypto/dso/dso_win32.c": [
          "File: crypto/dso/dso_win32.c -> crypto/dso/dso_win32.c"
        ],
        "include/internal/dso.h||include/internal/dso.h": [
          "File: include/internal/dso.h -> include/internal/dso.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: DSO_METHOD *DSO_METHOD_openssl(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: int DSO_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177: # define DSO_F_DSO_LOAD                                   112",
          "178: # define DSO_F_DSO_MERGE                                  132",
          "179: # define DSO_F_DSO_NEW_METHOD                             113",
          "180: # define DSO_F_DSO_SET_FILENAME                           129",
          "181: # define DSO_F_DSO_UP_REF                                 114",
          "182: # define DSO_F_VMS_BIND_SYM                               115",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # define DSO_F_DSO_PATHBYADDR                             105",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189: # define DSO_F_WIN32_LOAD                                 120",
          "190: # define DSO_F_WIN32_MERGER                               134",
          "191: # define DSO_F_WIN32_NAME_CONVERTER                       125",
          "192: # define DSO_F_WIN32_SPLITTER                             136",
          "193: # define DSO_F_WIN32_UNLOAD                               121",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: # define DSO_F_WIN32_PATHBYADDR                           109",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4206: OCSP_RESPID_set_by_name                 4157 1_1_0a EXIST::FUNCTION:OCSP",
          "4207: OCSP_RESPID_set_by_key                  4158 1_1_0a EXIST::FUNCTION:OCSP",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f02ec65590ef38444e80f595ebdbd211a25b4738",
      "candidate_info": {
        "commit_hash": "f02ec65590ef38444e80f595ebdbd211a25b4738",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f02ec65590ef38444e80f595ebdbd211a25b4738",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Fix the LIBZ macro on VC config targets\n\nIf zlib-dynamic was given but not --with-zlib-lib, LIBZ was defined to\nthe empty string.  Instead, give it the default \"ZLIB1\".\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1772)\n(cherry picked from commit 111b234c8f80371e7e31d922946cbd546491d4e8)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:         cflags           => \"-W3 -wd4090 -Gs0 -GF -Gy -nologo -DOPENSSL_SYS_WIN32 -DWIN32_LEAN_AND_MEAN -DL_ENDIAN -D_CRT_SECURE_NO_DEPRECATE\",",
          "1259:         defines          => add(sub { my @defs = ();",
          "1260:                                       unless ($disabled{\"zlib-dynamic\"}) {",
          "1261:                                           push @defs,",
          "1262:                                               quotify(\"perl\",",
          "1264:                                       }",
          "1265:                                       return [ @defs ];",
          "1266:                                     }),",
          "",
          "[Removed Lines]",
          "1263:                                                       'LIBZ=\"' . $withargs{zlib_lib} . '\"');",
          "",
          "[Added Lines]",
          "1261:                                           my $zlib =",
          "1262:                                               $withargs{zlib_lib} // \"ZLIB1\";",
          "1265:                                                       'LIBZ=\"' . $zlib . '\"');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64e3965d63c452edb590a76b81b9bdf5118af623",
      "candidate_info": {
        "commit_hash": "64e3965d63c452edb590a76b81b9bdf5118af623",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/64e3965d63c452edb590a76b81b9bdf5118af623",
        "files": [
          "include/openssl/ssl.h"
        ],
        "message": "Fix the SSL_set1_sigalgs() macro\n\nThis macro has a typo in it which makes it unusable. This issue was already\nfixed in 1.0.2 in commit 75fdee04827, but the same fix was not applied to\nother branches.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2160)\n(cherry picked from commit fb3ae0e830097a3a2a41a0ea82c7ad725f05a451)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241: # define SSL_CTX_set1_sigalgs_list(ctx, s) \\",
          "1242:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)s)",
          "1243: # define SSL_set1_sigalgs(ctx, slist, slistlen) \\",
          "1245: # define SSL_set1_sigalgs_list(ctx, s) \\",
          "1246:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)s)",
          "1247: # define SSL_CTX_set1_client_sigalgs(ctx, slist, slistlen) \\",
          "",
          "[Removed Lines]",
          "1244:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS,clistlen,(int *)slist)",
          "",
          "[Added Lines]",
          "1244:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS,slistlen,(int *)slist)",
          "",
          "---------------"
        ]
      }
    }
  ]
}