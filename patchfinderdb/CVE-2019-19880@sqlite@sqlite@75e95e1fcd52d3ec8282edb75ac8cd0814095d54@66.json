{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
      "candidate_info": {
        "commit_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Performance improvement on the instr() function, especially for large haystacks.\n\nFossilOrigin-Name: ce51f1a2b6a1789a5876e01cf829e45d84f3851d135a2fa5c44a56f948673a60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   int typeHaystack, typeNeedle;",
          "202:   int N = 1;",
          "203:   int isText;",
          "205:   UNUSED_PARAMETER(argc);",
          "206:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   unsigned char firstChar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:       isText = 1;",
          "220:     }",
          "221:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "223:       N++;",
          "224:       do{",
          "225:         nHaystack--;",
          "",
          "[Removed Lines]",
          "222:     while( nNeedle<=nHaystack && memcmp(zHaystack, zNeedle, nNeedle)!=0 ){",
          "",
          "[Added Lines]",
          "223:     firstChar = zNeedle[0];",
          "224:     while( nNeedle<=nHaystack",
          "225:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "226:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
      "candidate_info": {
        "commit_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Improvement to the hexdb interpreter built into the CLI and into the TCL test harness: Round the \"size\" up to the next multiple of the \"pagesize\".\n\nFossilOrigin-Name: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3891:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3892:   if( rc!=2 ) goto readHexDb_error;",
          "3893:   if( n<0 ) goto readHexDb_error;",
          "3894:   a = sqlite3_malloc( n ? n : 1 );",
          "3895:   if( a==0 ){",
          "3896:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3894:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7740:       int pgsz;",
          "7741:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7742:       if( rc!=2 ) continue;",
          "7743:       if( n<512 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7743:       if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'pagesize' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "7746:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
      "candidate_info": {
        "commit_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle \"\\r\" and \"\\n\" in the same way as \".dump\".\n\nFossilOrigin-Name: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950: static void shellEscapeCrnl(",
          "3951:   sqlite3_context *context,",
          "3952:   int argc,",
          "3953:   sqlite3_value **argv",
          "3954: ){",
          "3955:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3956:   if( zText[0]=='\\'' ){",
          "3957:     int nText = sqlite3_value_bytes(argv[0]);",
          "3958:     int i;",
          "3959:     char zBuf1[20];",
          "3960:     char zBuf2[20];",
          "3961:     const char *zNL = 0;",
          "3962:     const char *zCR = 0;",
          "3963:     int nCR = 0;",
          "3964:     int nNL = 0;",
          "3966:     for(i=0; zText[i]; i++){",
          "3967:       if( zNL==0 && zText[i]=='\\n' ){",
          "3968:         zNL = unused_string(zText, \"\\\\n\", \"\\\\012\", zBuf1);",
          "3969:         nNL = (int)strlen(zNL);",
          "3970:       }",
          "3971:       if( zCR==0 && zText[i]=='\\r' ){",
          "3972:         zCR = unused_string(zText, \"\\\\r\", \"\\\\015\", zBuf2);",
          "3973:         nCR = (int)strlen(zCR);",
          "3974:       }",
          "3975:     }",
          "3977:     if( zNL || zCR ){",
          "3978:       int iOut = 0;",
          "3979:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "3980:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "3981:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "3982:       if( zOut==0 ){",
          "3983:         sqlite3_result_error_nomem(context);",
          "3984:         return;",
          "3985:       }",
          "3987:       if( zNL && zCR ){",
          "3988:         memcpy(&zOut[iOut], \"replace(replace(\", 16);",
          "3989:         iOut += 16;",
          "3990:       }else{",
          "3991:         memcpy(&zOut[iOut], \"replace(\", 8);",
          "3992:         iOut += 8;",
          "3993:       }",
          "3994:       for(i=0; zText[i]; i++){",
          "3995:         if( zText[i]=='\\n' ){",
          "3996:           memcpy(&zOut[iOut], zNL, nNL);",
          "3997:           iOut += nNL;",
          "3998:         }else if( zText[i]=='\\r' ){",
          "3999:           memcpy(&zOut[iOut], zCR, nCR);",
          "4000:           iOut += nCR;",
          "4001:         }else{",
          "4002:           zOut[iOut] = zText[i];",
          "4003:           iOut++;",
          "4004:         }",
          "4005:       }",
          "4007:       if( zNL ){",
          "4008:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4009:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;",
          "4010:         memcpy(&zOut[iOut], \"', char(10))\", 12); iOut += 12;",
          "4011:       }",
          "4012:       if( zCR ){",
          "4013:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4014:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;",
          "4015:         memcpy(&zOut[iOut], \"', char(13))\", 12); iOut += 12;",
          "4016:       }",
          "4018:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);",
          "4019:       sqlite3_free(zOut);",
          "4020:       return;",
          "4021:     }",
          "4022:   }",
          "4024:   sqlite3_result_value(context, argv[0]);",
          "4025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4013:                             shellModuleSchema, 0, 0);",
          "4014:     sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,",
          "4015:                             shellPutsFunc, 0, 0);",
          "4016: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4017:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4018:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6349:     \"GROUP BY pgno, cell;\"",
          "6350:   );",
          "6364:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6352: #if 0",
          "6353:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6354:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6355:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6356:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6357:   }",
          "6358:   shellFinalize(&rc, pLoop);",
          "6359:   return rc;",
          "6360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "6400:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6402:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6403:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6404:         \")\"",
          "",
          "[Removed Lines]",
          "6401:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "",
          "[Added Lines]",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "",
          "[Added Lines]",
          "6508:         \"WHERE sql NOT LIKE 'create table%'\", &pStmt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e3f135c62422bb3e2ad0df53541c09449065099",
      "candidate_info": {
        "commit_hash": "7e3f135c62422bb3e2ad0df53541c09449065099",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e3f135c62422bb3e2ad0df53541c09449065099",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/gencol1.test"
        ],
        "message": "When a generated column expression is initially parsed, if it contains errors convert the expression to a simple NULL.  This prevents additional pieces of the expression tree that are allocated from lookaside from leaking into the schema, where lookaside allocations are not allowed.\n\nFossilOrigin-Name: a89b38605661e36d192df1d074383b704b34a959fcbc169837c0d4f6848f3208",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b4a88cd3b3a32b1242e0eb733cc0bc4becb830a887b8e6604a4c7452050e163",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2252:     for(ii=0; ii<p->nCol; ii++){",
          "2253:       u32 colFlags = p->aCol[ii].colFlags;",
          "2254:       if( (colFlags & COLFLAG_GENERATED)!=0 ){",
          "2255:         testcase( colFlags & COLFLAG_VIRTUAL );",
          "2256:         testcase( colFlags & COLFLAG_STORED );",
          "2259:       }else{",
          "2260:         nNG++;",
          "2261:       }",
          "",
          "[Removed Lines]",
          "2257:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2258:                                     p->aCol[ii].pDflt, 0);",
          "",
          "[Added Lines]",
          "2255:         Expr *pX = p->aCol[ii].pDflt;",
          "2258:         if( sqlite3ResolveSelfReference(pParse, p, NC_GenCol, pX, 0) ){",
          "2265:           sqlite3ExprDelete(db, pX);",
          "2266:           p->aCol[ii].pDflt = sqlite3ExprAlloc(db, TK_NULL, 0, 0);",
          "2267:         }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:   INSERT INTO t0 VALUES(2);",
          "383: } {1 {UNIQUE constraint failed: t0.c1}}",
          "387: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: # 2019-12-14 gramfuzz1 find",
          "386: # The schema is malformed in that it has a subquery on a generated",
          "387: # column expression.  This will be loaded if writable_schema=ON.  SQLite",
          "388: # must not use such an expression during code generation as the code generator",
          "389: # will add bits of content to the expression tree that might be allocated",
          "390: # from lookaside.  But the schema is not tied to a particular database",
          "391: # connection, so the use of lookaside memory is prohibited.  The fix",
          "392: # is to change the generated column expression to NULL before adding it",
          "393: # to the schema.",
          "394: #",
          "395: reset_db",
          "396: do_test gencol1-15.10 {",
          "397:   sqlite3 db {}",
          "398:   db deserialize [decode_hexdb {",
          "399: | size 8192 pagesize 4096 filename c27.db",
          "400: | page 1 offset 0",
          "401: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "402: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 02   .....@  ........",
          "403: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................",
          "404: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "405: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "406: |     96: 00 2e 3f d8 0d 00 00 00 01 0f ba 00 0f ba 00 00   ..?.............",
          "407: |   4016: 00 00 00 00 00 00 00 00 00 00 44 01 06 17 11 11   ..........D.....",
          "408: |   4032: 01 75 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .utablet1t1.CREA",
          "409: |   4048: 54 45 20 54 41 42 4c 45 20 74 31 28 61 20 49 4e   TE TABLE t1(a IN",
          "410: |   4064: 54 2c 20 62 20 41 53 28 28 56 41 4c 55 45 53 28   T, b AS((VALUES(",
          "411: |   4080: 31 29 29 20 49 53 20 75 6e 6b 6e 6f 77 6e 29 29   1)) IS unknown))",
          "412: | page 2 offset 4096",
          "413: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "414: | end c27.db",
          "415: }]} {}",
          "416: do_execsql_test gencol1-15.20 {",
          "417:   PRAGMA writable_schema=ON;",
          "418:   REPLACE INTO t1 VALUES(9);",
          "419:   SELECT a, quote(b) FROM t1",
          "420: } {9 NULL}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
      "candidate_info": {
        "commit_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix a problem with the CSV extension when it uses the \"header\" option on a real file.\n\nFossilOrigin-Name: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in);",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   SELECT * FROM trent;",
          "215: } {1}",
          "217: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: # 2018-12-26",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "221: set fd [open csv01.csv w]",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "225:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv');",
          "226:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "227: } {c0 c1 c2 c3}",
          "228: do_execsql_test 5.2 {",
          "229:   SELECT *, '|' FROM t5_1;",
          "230: } {a b c d | 1 2 3 4 | one two three four | 5 6 7 8 |}",
          "231: do_execsql_test 5.3 {",
          "232:   DROP TABLE t5_1;",
          "233:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv', header);",
          "234:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "235: } {a b c d}",
          "236: do_execsql_test 5.4 {",
          "237:   SELECT *, '|' FROM t5_1;",
          "238: } {1 2 3 4 | one two three four | 5 6 7 8 |}",
          "",
          "---------------"
        ]
      }
    }
  ]
}