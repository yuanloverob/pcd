{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
      "candidate_info": {
        "commit_hash": "c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c72f2fb7feff582444b8ffdc6c900c69847ce8a9",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "More improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: 51525f9c3235967bc00a090e84c70a6400698c897aa4742e817121c725b8c99d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:   fts3DatabasePageSize(&rc, p);",
          "1487:   p->nNodeSize = p->nPgsz-35;",
          "1490:   fts3DeclareVtab(&rc, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489: #if defined(SQLITE_DEBUG)||defined(SQLITE_TEST)",
          "1490:   p->nMergeCount = FTS3_MERGE_COUNT;",
          "1491: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   int bNoIncrDoclist;",
          "304: #endif",
          "305: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   int nMergeCount;",
          "311: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "312: # define MergeCount(P) ((P)->nMergeCount)",
          "313: #else",
          "314: # define MergeCount(P) FTS3_MERGE_COUNT",
          "315: #endif",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:       fts3LogMerge(16, getAbsoluteLevel(p, iLangid, iIndex, iLevel));",
          "1158:       rc = fts3SegmentMerge(p, iLangid, iIndex, iLevel);",
          "",
          "[Removed Lines]",
          "1156:     if( iNext>=FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "1156:     if( iNext>=MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4280:       int i;",
          "4281:       int nHeight = (int)aRoot[0];",
          "4282:       NodeWriter *pNode;",
          "4284:       pWriter->nLeafEst = (int)((iEnd - iStart) + 1)/FTS_MAX_APPENDABLE_HEIGHT;",
          "4285:       pWriter->iStart = iStart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4283:       if( nHeight<1 || nHeight>FTS_MAX_APPENDABLE_HEIGHT ){",
          "4284:         sqlite3_reset(pSelect);",
          "4285:         return FTS_CORRUPT_VTAB;",
          "4286:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049: ){",
          "5050:   int rc;",
          "5052:   int nMerge = 0;",
          "5053:   const char *z = zParam;",
          "",
          "[Removed Lines]",
          "5051:   int nMin = (FTS3_MERGE_COUNT / 2);",
          "",
          "[Added Lines]",
          "5055:   int nMin = (MergeCount(p) / 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5093:   int rc = SQLITE_OK;",
          "5094:   sqlite3_stmt *pStmt = 0;",
          "5095:   p->nAutoincrmerge = fts3Getint(&zParam);",
          "5097:     p->nAutoincrmerge = 8;",
          "5098:   }",
          "5099:   if( !p->bHasStat ){",
          "",
          "[Removed Lines]",
          "5096:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>FTS3_MERGE_COUNT ){",
          "",
          "[Added Lines]",
          "5100:   if( p->nAutoincrmerge==1 || p->nAutoincrmerge>MergeCount(p) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "5389:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal,\"mergecount=\",11) ){",
          "5392:       v = atoi(&zVal[11]);",
          "5393:       if( v>=4 && v<=FTS3_MERGE_COUNT && (v&1)==0 ) p->nMergeCount = v;",
          "5394:       rc = SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
      "candidate_info": {
        "commit_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted.\n\nFossilOrigin-Name: d23f33168222dfa40a67dc7de58057418151989e81429e4af47617e86db04667",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1301: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1302:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1309:     }",
          "1310:   }",
          "1311:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1303:     Window **pp;",
          "1304:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1305:       if( *pp==pExpr->y.pWin ){",
          "1307:         break;",
          "1308:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "",
          "[Removed Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1326: }",
          "",
          "[Removed Lines]",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "[Added Lines]",
          "1330: #else",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1416:         pItem->u.x.iOrderByCol = j+1;",
          "1417:       }",
          "1418:     }",
          "",
          "[Removed Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5665:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5666:     p->pOrderBy = 0;",
          "5667:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3632: #else",
          "3633: # define sqlite3WindowDelete(a,b)",
          "3634: # define sqlite3WindowFunctions()",
          "3635: # define sqlite3WindowAttach(a,b,c)",
          "3638: #endif",
          "",
          "[Removed Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
      "candidate_info": {
        "commit_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Attempt to detect when the MSVC linker requires the /MACHINE argument.\n\nFossilOrigin-Name: 3e355846217785c30f518d31a5541172c4213c0d8559c3f8638a047cd745c98e",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089: LTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1090: LTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1091: !ELSE",
          "1092: LTLINKOPTS = /NOLOGO",
          "1093: LTLIBOPTS = /NOLOGO",
          "1094: !ENDIF",
          "1096: # When compiling for use in the WinRT environment, the following",
          "1097: # linker option must be used to mark the executable as runnable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092: !IFDEF VISUALSTUDIOVERSION",
          "1093: !IF \"$(VISUALSTUDIOVERSION)\">=\"12.0\"",
          "1094: LTLINKOPTS = /NOLOGO /MACHINE:x86",
          "1095: LTLIBOPTS = /NOLOGO /MACHINE:x86",
          "1096: !ELSE",
          "1097: LTLINKOPTS = /NOLOGO",
          "1098: LTLIBOPTS = /NOLOGO",
          "1099: !ENDIF",
          "1100: !ELSE",
          "1104: !ENDIF",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
      "candidate_info": {
        "commit_hash": "b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/window.c"
        ],
        "message": "Remove rows from the ephemeral table used by window functions once they are no longer required.\n\nFossilOrigin-Name: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1322ffb6e63a110998068bf4f0a903028bd4fc0464ae1e517d745fb46423f39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8828:   assert( pCur->curFlags & BTCF_WriteFlag );",
          "8829:   assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );",
          "8830:   assert( !hasReadConflicts(p, pCur->pgnoRoot) );",
          "8833:   assert( (flags & ~(BTREE_SAVEPOSITION | BTREE_AUXDELETE))==0 );",
          "8835:   iCellDepth = pCur->iPage;",
          "8836:   iCellIdx = pCur->ix;",
          "",
          "[Removed Lines]",
          "8831:   assert( pCur->ix<pCur->pPage->nCell );",
          "8832:   assert( pCur->eState==CURSOR_VALID );",
          "",
          "[Added Lines]",
          "8832:   if( pCur->eState==CURSOR_REQUIRESEEK ){",
          "8833:     rc = btreeRestoreCursorPosition(pCur);",
          "8834:     if( rc ) return rc;",
          "8835:   }",
          "8836:   assert( pCur->eState==CURSOR_VALID );",
          "8837:   assert( pCur->ix<pCur->pPage->nCell );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         { cume_distName,    TK_GROUPS, TK_FOLLOWING, TK_UNBOUNDED },",
          "612:         { ntileName,        TK_ROWS,   TK_CURRENT,   TK_UNBOUNDED },",
          "613:         { leadName,         TK_ROWS,   TK_UNBOUNDED, TK_UNBOUNDED },",
          "614:       };",
          "615:       int i;",
          "616:       for(i=0; i<ArraySize(aUp); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:         { lagName,          TK_ROWS,   TK_UNBOUNDED, TK_CURRENT },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1472:   return regArg;",
          "1473: }",
          "",
          "[Removed Lines]",
          "1475: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1483:     FuncDef *pFunc = pWin->pFunc;",
          "1484:     if( (pFunc->zName==nth_valueName)",
          "1485:      || (pFunc->zName==first_valueName)",
          "1487:      || (pFunc->zName==lagName)",
          "1488:     ){",
          "1489:       return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:      || (pFunc->zName==leadName)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1491:   }",
          "1492:   return 0;",
          "1493: }",
          "",
          "[Removed Lines]",
          "1494: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   int regGosub;",
          "1540:   int addrGosub;",
          "1541:   int regArg;",
          "1543:   WindowCsrAndReg start;",
          "1544:   WindowCsrAndReg current;",
          "1545:   WindowCsrAndReg end;",
          "1546: };",
          "1548: #define WINDOW_RETURN_ROW 1",
          "1549: #define WINDOW_AGGINVERSE 2",
          "1550: #define WINDOW_AGGSTEP    3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1542:   int eDelete;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1701:       break;",
          "1702:   }",
          "1704:   if( jumpOnEof ){",
          "1705:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1706:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1708:   if( op==p->eDelete ){",
          "1709:     sqlite3VdbeAddOp1(v, OP_Delete, csr);",
          "1710:     sqlite3VdbeChangeP5(v, OPFLAG_SAVEPOSITION);",
          "1711:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1712:   }",
          "1714:   if( bPeer ){",
          "1716:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1717:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "1718:     windowReadPeerValues(p, csr, regTmp);",
          "",
          "[Removed Lines]",
          "1715:     int addr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2154:   s.start.csr = s.current.csr+2;",
          "2155:   s.end.csr = s.current.csr+3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2171:   switch( pMWin->eStart ){",
          "2172:     case TK_FOLLOWING: {",
          "2173:       sqlite3 *db = pParse->db;",
          "2174:       sqlite3_value *pVal = 0;",
          "2175:       sqlite3ValueFromExpr(db, pMWin->pStart, db->enc,SQLITE_AFF_NUMERIC,&pVal);",
          "2176:       if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2177:         s.eDelete = WINDOW_RETURN_ROW;",
          "2178:       }",
          "2179:       sqlite3ValueFree(pVal);",
          "2180:       break;",
          "2181:     }",
          "2182:     case TK_UNBOUNDED:",
          "2183:       if( windowCacheFrame(pMWin)==0 ){",
          "2184:         if( pMWin->eEnd==TK_PRECEDING ){",
          "2185:           s.eDelete = WINDOW_AGGSTEP;",
          "2186:         }else{",
          "2187:           s.eDelete = WINDOW_RETURN_ROW;",
          "2188:         }",
          "2189:       }",
          "2190:       break;",
          "2191:     default:",
          "2192:       s.eDelete = WINDOW_AGGINVERSE;",
          "2193:       break;",
          "2194:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbd79cc585d62868ccf2e08d44f3f65db744287a",
      "candidate_info": {
        "commit_hash": "fbd79cc585d62868ccf2e08d44f3f65db744287a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbd79cc585d62868ccf2e08d44f3f65db744287a",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with using the fts5 'rebuild' command inside a transaction that contains other updates of the same table. Fix for [e258f008].\n\nFossilOrigin-Name: 238e0835714696aba0631f288fcc30ec5fddb43893d469c6bf017f386b3cddee",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5235: int sqlite3Fts5IndexReinit(Fts5Index *p){",
          "5236:   Fts5Structure s;",
          "5237:   fts5StructureInvalidate(p);",
          "5238:   memset(&s, 0, sizeof(Fts5Structure));",
          "5239:   fts5DataWrite(p, FTS5_AVERAGES_ROWID, (const u8*)\"\", 0);",
          "5240:   fts5StructureWrite(p, &s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5238:   fts5IndexDiscardData(p);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:   Fts5Config *pConfig = p->pConfig;",
          "561:   int rc;",
          "564:   rc = fts5ExecPrintf(pConfig->db, 0,",
          "565:       \"DELETE FROM %Q.'%q_data';\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   p->bTotalsValid = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "122: }",
          "125: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: #-------------------------------------------------------------------------",
          "125: reset_db",
          "126: do_execsql_test 4.0 {",
          "127:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "128:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "129: }",
          "131: do_execsql_test 4.1 {",
          "132:   BEGIN;",
          "133:     INSERT INTO vt0(c0) VALUES ('abc');",
          "134:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "135:   COMMIT;",
          "136: }",
          "138: do_execsql_test 4.2 {",
          "139:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "140: }",
          "142: do_execsql_test 4.3 {",
          "143:   BEGIN;",
          "144:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "145:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "146:   COMMIT;",
          "147: }",
          "149: do_execsql_test 4.4 {",
          "150:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "151: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ab0aebdb3c2d6fb3160b2c58ce6cc0495a6ddd960878a6395958c837f3d1b71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}