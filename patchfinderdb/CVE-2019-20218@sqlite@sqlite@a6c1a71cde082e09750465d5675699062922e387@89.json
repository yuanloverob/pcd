{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
      "candidate_info": {
        "commit_hash": "e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e22976c5357fb6501cb0dd40220b8d48bd9295bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix the SQLITE_DIRECT_OVERFLOW_READ compile-time option so that it works with SQLITE_HAS_CODEC.\n\nFossilOrigin-Name: fd085e9260bec18f968704abb2dd324d954baa121d13b67c3f5b801e9e3834aa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d49c32e6e7cc341b5961d2c7b7c68d1649c6542eeec201660e3f82a55aea9e3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837: int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno){",
          "838:   if( pPager->fd->pMethods==0 ) return 0;",
          "839:   if( sqlite3PCacheIsDirty(pPager->pPCache) ) return 0;",
          "840: #ifndef SQLITE_OMIT_WAL",
          "841:   if( pPager->pWal ){",
          "842:     u32 iRead = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840: #ifdef SQLITE_HAS_CODEC",
          "841:   if( pPager->xCodec!=0 ) return 0;",
          "842: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
      "candidate_info": {
        "commit_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Avoid downgrading SQLITE_CORRUPT errors detected by the schema parser into SQLITE_NOMEM or SQLITE_ERROR errors.\n\nFossilOrigin-Name: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:       if( db->init.orphanTrigger ){",
          "116:         assert( iDb==1 );",
          "117:       }else{",
          "119:         if( rc==SQLITE_NOMEM ){",
          "120:           sqlite3OomFault(db);",
          "121:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "",
          "[Removed Lines]",
          "118:         pData->rc = rc;",
          "",
          "[Added Lines]",
          "118:         if( rc > pData->rc ) pData->rc = rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
      "candidate_info": {
        "commit_hash": "7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f6f12bdd35c55d9f98b6eefbe2d40c4a85aab87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted, as they are, for example, when the ORDER BY clause is optimized out.\n\nFossilOrigin-Name: fd7316cda0fdfe86985f41a97dff3beba188606ec9bc6fef38a686a6976a6e01",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1300: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1301:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1308:     }",
          "1309:   }",
          "1310:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1302:     Window **pp;",
          "1303:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1304:       if( *pp==pExpr->y.pWin ){",
          "1306:         break;",
          "1307:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1323: }",
          "1324: #else",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1322:   if( pSelect->pWin ){",
          "1323:     Walker sWalker;",
          "1324:     memset(&sWalker, 0, sizeof(Walker));",
          "1325:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1326:     sWalker.u.pSelect = pSelect;",
          "1327:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1328:   }",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
      "candidate_info": {
        "commit_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Give a link to the URI Filename document in the documentation to the various sqlite3_uri_parameter() interfaces.\n\nFossilOrigin-Name: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54f2399fb2a626602d405c857297f2da833f9f048cbc478f9110bed2e9bda299",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
      "candidate_info": {
        "commit_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41e0717bcb409de9ec296c3215b572dfab2697c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/resetdb.test"
        ],
        "message": "Update test file \"resetdb.test\" so that it works with the \"prepare\" permutation.\n\nFossilOrigin-Name: 95d338124be2e0e18f17354b28f4320336202f1a4ec1177df753b2800e954bfb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/resetdb.test||test/resetdb.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/resetdb.test||test/resetdb.test": [
          "File: test/resetdb.test -> test/resetdb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   db eval VACUUM",
          "84:   sqlite3_db_config db RESET_DB 0",
          "86:   # Verify that the reset took, even on the separate database connection",
          "87:   catchsql {",
          "88:      PRAGMA page_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   # If using sqlite3_prepare() instead of _v2() or _v3(), the block",
          "87:   # below raises an SQLITE_SCHEMA error. The following fixes this.",
          "88:   if {[permutation]==\"prepare\"} { catchsql \"SELECT * FROM sqlite_master\" db2 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}