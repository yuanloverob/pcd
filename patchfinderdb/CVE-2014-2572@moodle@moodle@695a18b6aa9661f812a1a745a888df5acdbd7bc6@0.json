{
  "cve_id": "CVE-2014-2572",
  "cve_desc": "mod/assign/externallib.php in Moodle 2.6.x before 2.6.2 does not properly handle assignment web-service parameters, which might allow remote authenticated users to modify grade metadata via unspecified vectors.",
  "repo": "moodle/moodle",
  "patch_hash": "695a18b6aa9661f812a1a745a888df5acdbd7bc6",
  "patch_info": {
    "commit_hash": "695a18b6aa9661f812a1a745a888df5acdbd7bc6",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/695a18b6aa9661f812a1a745a888df5acdbd7bc6",
    "files": [
      "mod/assign/externallib.php"
    ],
    "message": "MDL-43468 mod_assign: Webservice parameters were not safely cleaned",
    "before_after_code_files": [
      "mod/assign/externallib.php||mod/assign/externallib.php"
    ]
  },
  "patch_diff": {
    "mod/assign/externallib.php||mod/assign/externallib.php": [
      "File: mod/assign/externallib.php -> mod/assign/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1229:                         array('assignmentid' => $assignmentid,",
      "1230:                               'userids' => $userids));",
      "1233:         $context = context_module::instance($cm->id);",
      "1235:         $assignment = new assign($context, $cm, null);",
      "1237:         $warnings = array();",
      "1239:             if (!$assignment->lock_submission($userid)) {",
      "1242:                                                      'couldnotlock',",
      "1243:                                                      $detail);",
      "1244:             }",
      "",
      "[Removed Lines]",
      "1232:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1238:         foreach ($userids as $userid) {",
      "1240:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
      "1241:                 $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1232:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1234:         self::validate_context($context);",
      "1239:         foreach ($params['userids'] as $userid) {",
      "1241:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
      "1242:                 $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1292:                         array('assignmentid' => $assignmentid,",
      "1293:                               'userids' => $userids));",
      "1296:         $context = context_module::instance($cm->id);",
      "1298:         $assignment = new assign($context, $cm, null);",
      "1300:         $warnings = array();",
      "1302:             if (!$assignment->revert_to_draft($userid)) {",
      "1305:                                                      'couldnotrevert',",
      "1306:                                                      $detail);",
      "1307:             }",
      "",
      "[Removed Lines]",
      "1295:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1301:         foreach ($userids as $userid) {",
      "1303:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
      "1304:                 $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1296:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1298:         self::validate_context($context);",
      "1303:         foreach ($params['userids'] as $userid) {",
      "1305:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
      "1306:                 $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1355:                         array('assignmentid' => $assignmentid,",
      "1356:                               'userids' => $userids));",
      "1359:         $context = context_module::instance($cm->id);",
      "1361:         $assignment = new assign($context, $cm, null);",
      "1363:         $warnings = array();",
      "1365:             if (!$assignment->unlock_submission($userid)) {",
      "1368:                                                      'couldnotunlock',",
      "1369:                                                      $detail);",
      "1370:             }",
      "",
      "[Removed Lines]",
      "1358:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1364:         foreach ($userids as $userid) {",
      "1366:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
      "1367:                 $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1360:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1362:         self::validate_context($context);",
      "1367:         foreach ($params['userids'] as $userid) {",
      "1369:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
      "1370:                 $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1414:                                             array('assignmentid' => $assignmentid,",
      "1415:                                                   'acceptsubmissionstatement' => $acceptsubmissionstatement));",
      "1418:         $context = context_module::instance($cm->id);",
      "1420:         $assignment = new assign($context, $cm, null);",
      "1422:         $warnings = array();",
      "1423:         $data = new stdClass();",
      "1425:         $notices = array();",
      "1427:         if (!$assignment->submit_for_grading($data, $notices)) {",
      "1430:                                                  'couldnotsubmitforgrading',",
      "1431:                                                  $detail);",
      "1432:         }",
      "",
      "[Removed Lines]",
      "1417:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1424:         $data->submissionstatement = $acceptsubmissionstatement;",
      "1428:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid . ' Notices:' . implode(', ', $notices);",
      "1429:             $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1420:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1422:         self::validate_context($context);",
      "1428:         $data->submissionstatement = $params['acceptsubmissionstatement'];",
      "1432:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $params['assignmentid'] . ' Notices:' . implode(', ', $notices);",
      "1433:             $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1485:                               'userids' => $userids,",
      "1486:                               'dates' => $dates));",
      "1489:             $detail = 'Length of userids and dates parameters differ.';",
      "1491:                                                  'invalidparameters',",
      "1492:                                                  $detail);",
      "1494:             return $warnings;",
      "1495:         }",
      "1498:         $context = context_module::instance($cm->id);",
      "1500:         $assignment = new assign($context, $cm, null);",
      "1502:         $warnings = array();",
      "1505:             if (!$assignment->save_user_extension($userid, $duedate)) {",
      "1508:                                                      'couldnotgrantextensions',",
      "1509:                                                      $detail);",
      "1510:             }",
      "",
      "[Removed Lines]",
      "1488:         if (count($userids) != count($dates)) {",
      "1490:             $warnings[] = self::generate_warning($assignmentid,",
      "1497:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1503:         foreach ($userids as $idx => $userid) {",
      "1504:             $duedate = $dates[$idx];",
      "1506:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid . ', Extension date: ' . $duedate;",
      "1507:                 $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1492:         if (count($params['userids']) != count($params['dates'])) {",
      "1494:             $warnings[] = self::generate_warning($params['assignmentid'],",
      "1501:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1503:         self::validate_context($context);",
      "1508:         foreach ($params['userids'] as $idx => $userid) {",
      "1509:             $duedate = $params['dates'][$idx];",
      "1511:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'] . ', Extension date: ' . $duedate;",
      "1512:                 $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1552:         $params = self::validate_parameters(self::reveal_identities_parameters(),",
      "1553:                                             array('assignmentid' => $assignmentid));",
      "1556:         $context = context_module::instance($cm->id);",
      "1558:         $assignment = new assign($context, $cm, null);",
      "1560:         $warnings = array();",
      "1561:         if (!$assignment->reveal_identities()) {",
      "1564:                                                  'couldnotrevealidentities',",
      "1565:                                                  $detail);",
      "1566:         }",
      "",
      "[Removed Lines]",
      "1555:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1562:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
      "1563:             $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1560:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1562:         self::validate_context($context);",
      "1568:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $params['assignmentid'];",
      "1569:             $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1624:                                             array('assignmentid' => $assignmentid,",
      "1625:                                                   'plugindata' => $plugindata));",
      "1628:         $context = context_module::instance($cm->id);",
      "1630:         $assignment = new assign($context, $cm, null);",
      "1632:         $notices = array();",
      "1636:         $assignment->save_submission($submissiondata, $notices);",
      "1638:         $warnings = array();",
      "1639:         foreach ($notices as $notice) {",
      "1641:                                                  'couldnotsavesubmission',",
      "1642:                                                  $notice);",
      "1643:         }",
      "",
      "[Removed Lines]",
      "1627:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1634:         $submissiondata = (object)$plugindata;",
      "1640:             $warnings[] = self::generate_warning($assignmentid,",
      "",
      "[Added Lines]",
      "1633:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
      "1635:         self::validate_context($context);",
      "1641:         $submissiondata = (object)$params['plugindata'];",
      "1647:             $warnings[] = self::generate_warning($params['assignmentid'],",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1977:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
      "1978:         $context = context_module::instance($cm->id);",
      "1980:         $assignment = new assign($context, $cm, null);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1987:         self::validate_context($context);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05a6445a14ce182fa69df056faf247e83e838751",
      "candidate_info": {
        "commit_hash": "05a6445a14ce182fa69df056faf247e83e838751",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/05a6445a14ce182fa69df056faf247e83e838751",
        "files": [
          "mod/assign/assignmentplugin.php",
          "mod/assign/db/services.php",
          "mod/assign/externallib.php",
          "mod/assign/feedback/comments/locallib.php",
          "mod/assign/feedback/file/locallib.php",
          "mod/assign/locallib.php",
          "mod/assign/submission/file/locallib.php",
          "mod/assign/submission/onlinetext/locallib.php",
          "mod/assign/submissionplugin.php",
          "mod/assign/tests/base_test.php",
          "mod/assign/tests/externallib_test.php",
          "mod/assign/tests/locallib_test.php",
          "mod/assign/upgrade.txt",
          "mod/assign/version.php"
        ],
        "message": "MDL-37148 Assignment: Lots more webservices\n\nThis patch adds lots of webservices to the assignment module.\n* mod_assign_revert_submissions_to_draft\n* mod_assign_lock_submissions\n* mod_assign_unlock_submissions\n* mod_assign_save_submission\n* mod_assign_submit_for_grading\n* mod_assign_save_grade\n* mod_assign_save_user_extensions\n* mod_assign_reveal_identities\n* mod_assign_copy_previous_attempt\n\nAll features such as reopening attempts and marking workflow are supported through\nthe save_grade and save_submission functions.\n\nUploading files is supported by sending draft item ids for the files_filemanager param the same functions.",
        "before_after_code_files": [
          "mod/assign/assignmentplugin.php||mod/assign/assignmentplugin.php",
          "mod/assign/db/services.php||mod/assign/db/services.php",
          "mod/assign/externallib.php||mod/assign/externallib.php",
          "mod/assign/feedback/comments/locallib.php||mod/assign/feedback/comments/locallib.php",
          "mod/assign/feedback/file/locallib.php||mod/assign/feedback/file/locallib.php",
          "mod/assign/locallib.php||mod/assign/locallib.php",
          "mod/assign/submission/file/locallib.php||mod/assign/submission/file/locallib.php",
          "mod/assign/submission/onlinetext/locallib.php||mod/assign/submission/onlinetext/locallib.php",
          "mod/assign/submissionplugin.php||mod/assign/submissionplugin.php",
          "mod/assign/tests/base_test.php||mod/assign/tests/base_test.php",
          "mod/assign/tests/externallib_test.php||mod/assign/tests/externallib_test.php",
          "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php",
          "mod/assign/version.php||mod/assign/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ],
          "candidate": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/assign/assignmentplugin.php||mod/assign/assignmentplugin.php": [
          "File: mod/assign/assignmentplugin.php -> mod/assign/assignmentplugin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:         return true;",
          "628:     }",
          "631: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:     public function get_external_parameters() {",
          "637:         return null;",
          "638:     }",
          "",
          "---------------"
        ],
        "mod/assign/db/services.php||mod/assign/db/services.php": [
          "File: mod/assign/db/services.php -> mod/assign/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                 'classpath' => 'mod/assign/externallib.php',",
          "64:                 'description' => 'Returns the blind marking mappings for assignments',",
          "65:                 'type' => 'read'",
          "66:         )",
          "67: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         ),",
          "68:         'mod_assign_revert_submissions_to_draft' => array(",
          "69:                 'classname' => 'mod_assign_external',",
          "70:                 'methodname' => 'revert_submissions_to_draft',",
          "71:                 'classpath' => 'mod/assign/externallib.php',",
          "72:                 'description' => 'Reverts the list of submissions to draft status',",
          "73:                 'type' => 'write'",
          "74:         ),",
          "76:         'mod_assign_lock_submissions' => array(",
          "77:                 'classname' => 'mod_assign_external',",
          "78:                 'methodname' => 'lock_submissions',",
          "79:                 'classpath' => 'mod/assign/externallib.php',",
          "80:                 'description' => 'Prevent students from making changes to a list of submissions',",
          "81:                 'type' => 'write'",
          "82:         ),",
          "84:         'mod_assign_unlock_submissions' => array(",
          "85:                 'classname' => 'mod_assign_external',",
          "86:                 'methodname' => 'unlock_submissions',",
          "87:                 'classpath' => 'mod/assign/externallib.php',",
          "88:                 'description' => 'Allow students to make changes to a list of submissions',",
          "89:                 'type' => 'write'",
          "90:         ),",
          "92:         'mod_assign_save_submission' => array(",
          "93:                 'classname' => 'mod_assign_external',",
          "94:                 'methodname' => 'save_submission',",
          "95:                 'classpath' => 'mod/assign/externallib.php',",
          "96:                 'description' => 'Update the current students submission',",
          "97:                 'type' => 'write'",
          "98:         ),",
          "100:         'mod_assign_submit_for_grading' => array(",
          "101:                 'classname' => 'mod_assign_external',",
          "102:                 'methodname' => 'submit_for_grading',",
          "103:                 'classpath' => 'mod/assign/externallib.php',",
          "104:                 'description' => 'Submit the current students assignment for grading',",
          "105:                 'type' => 'write'",
          "106:         ),",
          "108:         'mod_assign_save_grade' => array(",
          "109:                 'classname' => 'mod_assign_external',",
          "110:                 'methodname' => 'save_grade',",
          "111:                 'classpath' => 'mod/assign/externallib.php',",
          "112:                 'description' => 'Save a grade update for a single student.',",
          "113:                 'type' => 'write'",
          "114:         ),",
          "116:         'mod_assign_save_user_extensions' => array(",
          "117:                 'classname' => 'mod_assign_external',",
          "118:                 'methodname' => 'save_user_extensions',",
          "119:                 'classpath' => 'mod/assign/externallib.php',",
          "120:                 'description' => 'Save a list of assignment extensions',",
          "121:                 'type' => 'write'",
          "122:         ),",
          "124:         'mod_assign_reveal_identities' => array(",
          "125:                 'classname' => 'mod_assign_external',",
          "126:                 'methodname' => 'reveal_identities',",
          "127:                 'classpath' => 'mod/assign/externallib.php',",
          "128:                 'description' => 'Reveal the identities for a blind marking assignment',",
          "129:                 'type' => 'write'",
          "",
          "---------------"
        ],
        "mod/assign/externallib.php||mod/assign/externallib.php": [
          "File: mod/assign/externallib.php -> mod/assign/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: class mod_assign_external extends external_api {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     private static function generate_warning($assignmentid, $warningcode, $detail) {",
          "44:         $warningmessages = array(",
          "45:             'couldnotlock'=>'Could not lock the submission for this user.',",
          "46:             'couldnotunlock'=>'Could not unlock the submission for this user.',",
          "47:             'couldnotsubmitforgrading'=>'Could not submit assignment for grading.',",
          "48:             'couldnotrevealidentities'=>'Could not reveal identities.',",
          "49:             'couldnotgrantextensions'=>'Could not grant submission date extensions.',",
          "50:             'couldnotrevert'=>'Could not revert submission to draft.',",
          "51:             'invalidparameters'=>'Invalid parameters.',",
          "52:             'couldnotsavesubmission'=>'Could not save submission.',",
          "53:             'couldnotsavegrade'=>'Could not save grade.'",
          "54:         );",
          "56:         $message = $warningmessages[$warningcode];",
          "57:         if (empty($message)) {",
          "58:             $message = 'Unknown warning type.';",
          "59:         }",
          "61:         return array('item'=>$detail,",
          "62:                      'itemid'=>$assignmentid,",
          "63:                      'warningcode'=>$warningcode,",
          "64:                      'message'=>$message);",
          "65:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:                                 WHERE mxg.assignment ' . $inorequalsql2 . ' GROUP BY mxg.userid';",
          "104:             $sql = \"SELECT ag.id,ag.assignment,ag.userid,ag.timecreated,ag.timemodified,\".",
          "106:                    \"FROM {assign_grades} ag \".",
          "107:                    \"JOIN ( \" . $grademaxattempt . \" ) gmx ON ag.userid = gmx.userid\".",
          "108:                    \" WHERE ag.assignment \".$inorequalsql.",
          "",
          "[Removed Lines]",
          "105:                    \"ag.grader,ag.grade \".",
          "",
          "[Added Lines]",
          "137:                    \"ag.grader,ag.grade,ag.attemptnumber \".",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:                 $grade['timecreated'] = $rd->timecreated;",
          "123:                 $grade['timemodified'] = $rd->timemodified;",
          "124:                 $grade['grader'] = $rd->grader;",
          "125:                 $grade['grade'] = (string)$rd->grade;",
          "127:                 if (is_null($currentassignmentid) || ($rd->assignment != $currentassignmentid )) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:                 $grade['attemptnumber'] = $rd->attemptnumber;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:                         array(",
          "171:                             'id'            => new external_value(PARAM_INT, 'grade id'),",
          "172:                             'userid'        => new external_value(PARAM_INT, 'student id'),",
          "173:                             'timecreated'   => new external_value(PARAM_INT, 'grade creation time'),",
          "174:                             'timemodified'  => new external_value(PARAM_INT, 'grade last modified time'),",
          "175:                             'grader'        => new external_value(PARAM_INT, 'grader'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:                             'attemptnumber' => new external_value(PARAM_INT, 'attempt number'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "528:                                      WHERE mxs.assignment = :assignid1 GROUP BY mxs.userid';",
          "530:             $sql = \"SELECT mas.id, mas.assignment,mas.userid,\".",
          "532:                    \"FROM {assign_submission} mas \".",
          "533:                    \"JOIN ( \" . $submissionmaxattempt . \" ) smx ON mas.userid = smx.userid \".",
          "534:                    \"WHERE mas.assignment = :assignid2 AND mas.attemptnumber = smx.maxattempt\";",
          "",
          "[Removed Lines]",
          "531:                    \"mas.timecreated,mas.timemodified,mas.status,mas.groupid \".",
          "",
          "[Added Lines]",
          "565:                    \"mas.timecreated,mas.timemodified,mas.status,mas.groupid,mas.attemptnumber \".",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "557:                         'timecreated' => $submissionrecord->timecreated,",
          "558:                         'timemodified' => $submissionrecord->timemodified,",
          "559:                         'status' => $submissionrecord->status,",
          "560:                         'groupid' => $submissionrecord->groupid",
          "561:                     );",
          "562:                     foreach ($submissionplugins as $submissionplugin) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:                         'attemptnumber' => $submissionrecord->attemptnumber,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "638:                         array(",
          "639:                             'id' => new external_value(PARAM_INT, 'submission id'),",
          "640:                             'userid' => new external_value(PARAM_INT, 'student id'),",
          "641:                             'timecreated' => new external_value(PARAM_INT, 'submission creation time'),",
          "642:                             'timemodified' => new external_value(PARAM_INT, 'submission last modified time'),",
          "643:                             'status' => new external_value(PARAM_TEXT, 'submission status'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:                             'attemptnumber' => new external_value(PARAM_INT, 'attempt number'),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "995:         );",
          "996:     }",
          "998: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:     public static function lock_submissions_parameters() {",
          "1040:         return new external_function_parameters(",
          "1041:             array(",
          "1042:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1043:                 'userids' => new external_multiple_structure(",
          "1044:                     new external_value(PARAM_INT, 'user id'),",
          "1045:                     '1 or more user ids',",
          "1046:                     VALUE_REQUIRED),",
          "1047:             )",
          "1048:         );",
          "1049:     }",
          "1059:     public static function lock_submissions($assignmentid, $userids) {",
          "1060:         global $CFG;",
          "1061:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1063:         $params = self::validate_parameters(self::lock_submissions_parameters(),",
          "1064:                         array('assignmentid' => $assignmentid,",
          "1065:                               'userids' => $userids));",
          "1067:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1068:         $context = context_module::instance($cm->id);",
          "1070:         $assignment = new assign($context, $cm, null);",
          "1072:         $warnings = array();",
          "1073:         foreach ($userids as $userid) {",
          "1074:             if (!$assignment->lock_submission($userid)) {",
          "1075:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1076:                 $warnings[] = self::generate_warning($assignmentid,",
          "1077:                                                      'couldnotlock',",
          "1078:                                                      $detail);",
          "1079:             }",
          "1080:         }",
          "1082:         return $warnings;",
          "1083:     }",
          "1091:     public static function lock_submissions_returns() {",
          "1092:         return new external_multiple_structure(",
          "1093:            new external_warnings()",
          "1094:         );",
          "1095:     }",
          "1102:     public static function revert_submissions_to_draft_parameters() {",
          "1103:         return new external_function_parameters(",
          "1104:             array(",
          "1105:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1106:                 'userids' => new external_multiple_structure(",
          "1107:                     new external_value(PARAM_INT, 'user id'),",
          "1108:                     '1 or more user ids',",
          "1109:                     VALUE_REQUIRED),",
          "1110:             )",
          "1111:         );",
          "1112:     }",
          "1122:     public static function revert_submissions_to_draft($assignmentid, $userids) {",
          "1123:         global $CFG;",
          "1124:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1126:         $params = self::validate_parameters(self::revert_submissions_to_draft_parameters(),",
          "1127:                         array('assignmentid' => $assignmentid,",
          "1128:                               'userids' => $userids));",
          "1130:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1131:         $context = context_module::instance($cm->id);",
          "1133:         $assignment = new assign($context, $cm, null);",
          "1135:         $warnings = array();",
          "1136:         foreach ($userids as $userid) {",
          "1137:             if (!$assignment->revert_to_draft($userid)) {",
          "1138:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1139:                 $warnings[] = self::generate_warning($assignmentid,",
          "1140:                                                      'couldnotrevert',",
          "1141:                                                      $detail);",
          "1142:             }",
          "1143:         }",
          "1145:         return $warnings;",
          "1146:     }",
          "1154:     public static function revert_submissions_to_draft_returns() {",
          "1155:         return new external_multiple_structure(",
          "1156:            new external_warnings()",
          "1157:         );",
          "1158:     }",
          "1165:     public static function unlock_submissions_parameters() {",
          "1166:         return new external_function_parameters(",
          "1167:             array(",
          "1168:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1169:                 'userids' => new external_multiple_structure(",
          "1170:                     new external_value(PARAM_INT, 'user id'),",
          "1171:                     '1 or more user ids',",
          "1172:                     VALUE_REQUIRED),",
          "1173:             )",
          "1174:         );",
          "1175:     }",
          "1185:     public static function unlock_submissions($assignmentid, $userids) {",
          "1186:         global $CFG;",
          "1187:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1189:         $params = self::validate_parameters(self::unlock_submissions_parameters(),",
          "1190:                         array('assignmentid' => $assignmentid,",
          "1191:                               'userids' => $userids));",
          "1193:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1194:         $context = context_module::instance($cm->id);",
          "1196:         $assignment = new assign($context, $cm, null);",
          "1198:         $warnings = array();",
          "1199:         foreach ($userids as $userid) {",
          "1200:             if (!$assignment->unlock_submission($userid)) {",
          "1201:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1202:                 $warnings[] = self::generate_warning($assignmentid,",
          "1203:                                                      'couldnotunlock',",
          "1204:                                                      $detail);",
          "1205:             }",
          "1206:         }",
          "1208:         return $warnings;",
          "1209:     }",
          "1217:     public static function unlock_submissions_returns() {",
          "1218:         return new external_multiple_structure(",
          "1219:            new external_warnings()",
          "1220:         );",
          "1221:     }",
          "1228:     public static function submit_for_grading_parameters() {",
          "1229:         return new external_function_parameters(",
          "1230:             array(",
          "1231:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on')",
          "1232:             )",
          "1233:         );",
          "1234:     }",
          "1243:     public static function submit_for_grading($assignmentid) {",
          "1244:         global $CFG, $USER;",
          "1245:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1247:         $params = self::validate_parameters(self::submit_for_grading_parameters(),",
          "1248:                                             array('assignmentid' => $assignmentid));",
          "1250:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1251:         $context = context_module::instance($cm->id);",
          "1253:         $assignment = new assign($context, $cm, null);",
          "1255:         $warnings = array();",
          "1256:         if (!$assignment->submit_for_grading()) {",
          "1257:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "1258:             $warnings[] = self::generate_warning($assignmentid,",
          "1259:                                                  'couldnotsubmitforgrading',",
          "1260:                                                  $detail);",
          "1261:         }",
          "1263:         return $warnings;",
          "1264:     }",
          "1272:     public static function submit_for_grading_returns() {",
          "1273:         return new external_multiple_structure(",
          "1274:            new external_warnings()",
          "1275:         );",
          "1276:     }",
          "1283:     public static function save_user_extensions_parameters() {",
          "1284:         return new external_function_parameters(",
          "1285:             array(",
          "1286:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1287:                 'userids' => new external_multiple_structure(",
          "1288:                     new external_value(PARAM_INT, 'user id'),",
          "1289:                     '1 or more user ids',",
          "1290:                     VALUE_REQUIRED),",
          "1291:                 'dates' => new external_multiple_structure(",
          "1292:                     new external_value(PARAM_INT, 'dates'),",
          "1293:                     '1 or more extension dates (timestamp)',",
          "1294:                     VALUE_REQUIRED),",
          "1295:             )",
          "1296:         );",
          "1297:     }",
          "1308:     public static function save_user_extensions($assignmentid, $userids, $dates) {",
          "1309:         global $CFG;",
          "1310:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1312:         $params = self::validate_parameters(self::save_user_extensions_parameters(),",
          "1313:                         array('assignmentid' => $assignmentid,",
          "1314:                               'userids' => $userids,",
          "1315:                               'dates' => $dates));",
          "1317:         if (count($userids) != count($dates)) {",
          "1318:             $detail = 'Length of userids and dates parameters differ.';",
          "1319:             $warnings[] = self::generate_warning($assignmentid,",
          "1320:                                                  'invalidparameters',",
          "1321:                                                  $detail);",
          "1323:             return $warnings;",
          "1324:         }",
          "1326:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1327:         $context = context_module::instance($cm->id);",
          "1329:         $assignment = new assign($context, $cm, null);",
          "1331:         $warnings = array();",
          "1332:         foreach ($userids as $idx => $userid) {",
          "1333:             $duedate = $dates[$idx];",
          "1334:             if (!$assignment->save_user_extension($userid, $duedate)) {",
          "1335:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid . ', Extension date: ' . $duedate;",
          "1336:                 $warnings[] = self::generate_warning($assignmentid,",
          "1337:                                                      'couldnotgrantextensions',",
          "1338:                                                      $detail);",
          "1339:             }",
          "1340:         }",
          "1342:         return $warnings;",
          "1343:     }",
          "1351:     public static function save_user_extensions_returns() {",
          "1352:         return new external_multiple_structure(",
          "1353:            new external_warnings()",
          "1354:         );",
          "1355:     }",
          "1362:     public static function reveal_identities_parameters() {",
          "1363:         return new external_function_parameters(",
          "1364:             array(",
          "1365:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on')",
          "1366:             )",
          "1367:         );",
          "1368:     }",
          "1377:     public static function reveal_identities($assignmentid) {",
          "1378:         global $CFG, $USER;",
          "1379:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1381:         $params = self::validate_parameters(self::reveal_identities_parameters(),",
          "1382:                                             array('assignmentid' => $assignmentid));",
          "1384:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1385:         $context = context_module::instance($cm->id);",
          "1387:         $assignment = new assign($context, $cm, null);",
          "1389:         $warnings = array();",
          "1390:         if (!$assignment->reveal_identities()) {",
          "1391:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "1392:             $warnings[] = self::generate_warning($assignmentid,",
          "1393:                                                  'couldnotrevealidentities',",
          "1394:                                                  $detail);",
          "1395:         }",
          "1397:         return $warnings;",
          "1398:     }",
          "1406:     public static function reveal_identities_returns() {",
          "1407:         return new external_multiple_structure(",
          "1408:            new external_warnings()",
          "1409:         );",
          "1410:     }",
          "1417:     public static function save_submission_parameters() {",
          "1418:         global $CFG;",
          "1419:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1420:         $instance = new assign(null, null, null);",
          "1421:         $pluginsubmissionparams = array();",
          "1423:         foreach ($instance->get_submission_plugins() as $plugin) {",
          "1424:             $pluginparams = $plugin->get_external_parameters();",
          "1425:             if (!empty($pluginparams)) {",
          "1426:                 $pluginsubmissionparams = array_merge($pluginsubmissionparams, $pluginparams);",
          "1427:             }",
          "1428:         }",
          "1430:         return new external_function_parameters(",
          "1431:             array(",
          "1432:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1433:                 'plugindata' => new external_single_structure(",
          "1434:                     $pluginsubmissionparams",
          "1435:                 )",
          "1436:             )",
          "1437:         );",
          "1438:     }",
          "1447:     public static function save_submission($assignmentid, $plugindata) {",
          "1448:         global $CFG, $USER;",
          "1449:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1451:         $params = self::validate_parameters(self::save_submission_parameters(),",
          "1452:                                             array('assignmentid' => $assignmentid,",
          "1453:                                                   'plugindata' => $plugindata));",
          "1455:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1456:         $context = context_module::instance($cm->id);",
          "1458:         $assignment = new assign($context, $cm, null);",
          "1460:         $notices = array();",
          "1462:         $submissiondata = (object)$plugindata;",
          "1464:         $assignment->save_submission($submissiondata, $notices);",
          "1466:         $warnings = array();",
          "1467:         foreach ($notices as $notice) {",
          "1468:             $warnings[] = self::generate_warning($assignmentid,",
          "1469:                                                  'couldnotsavesubmission',",
          "1470:                                                  $notice);",
          "1471:         }",
          "1473:         return $warnings;",
          "1474:     }",
          "1482:     public static function save_submission_returns() {",
          "1483:         return new external_multiple_structure(",
          "1484:            new external_warnings()",
          "1485:         );",
          "1486:     }",
          "1493:     public static function save_grade_parameters() {",
          "1494:         global $CFG;",
          "1495:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1496:         $instance = new assign(null, null, null);",
          "1497:         $pluginfeedbackparams = array();",
          "1499:         foreach ($instance->get_feedback_plugins() as $plugin) {",
          "1500:             $pluginparams = $plugin->get_external_parameters();",
          "1501:             if (!empty($pluginparams)) {",
          "1502:                 $pluginfeedbackparams = array_merge($pluginfeedbackparams, $pluginparams);",
          "1503:             }",
          "1504:         }",
          "1506:         return new external_function_parameters(",
          "1507:             array(",
          "1508:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1509:                 'userid' => new external_value(PARAM_INT, 'The student id to operate on'),",
          "1510:                 'grade' => new external_value(PARAM_FLOAT, 'The new grade for this user'),",
          "1511:                 'attemptnumber' => new external_value(PARAM_INT, 'The attempt number (-1 means latest attempt)'),",
          "1512:                 'addattempt' => new external_value(PARAM_BOOL, 'Allow another attempt if the attempt reopen method is manual'),",
          "1513:                 'workflowstate' => new external_value(PARAM_ALPHA, 'The next marking workflow state'),",
          "1514:                 'applytoall' => new external_value(PARAM_BOOL, 'If true, this grade will be applied ' .",
          "1515:                                                                'to all members ' .",
          "1516:                                                                'of the group (for group assignments).'),",
          "1517:                 'plugindata' => new external_single_structure(",
          "1518:                     $pluginfeedbackparams",
          "1519:                 )",
          "1520:             )",
          "1521:         );",
          "1522:     }",
          "1531:     public static function save_grade($assignmentid, $userid, $grade, $attemptnumber, $addattempt, $workflowstate, $applytoall, $plugindata) {",
          "1532:         global $CFG, $USER;",
          "1533:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1535:         $params = self::validate_parameters(self::save_grade_parameters(),",
          "1536:                                             array('assignmentid' => $assignmentid,",
          "1537:                                                   'userid' => $userid,",
          "1538:                                                   'grade' => $grade,",
          "1539:                                                   'attemptnumber' => $attemptnumber,",
          "1540:                                                   'workflowstate' => $workflowstate,",
          "1541:                                                   'addattempt' => $addattempt,",
          "1542:                                                   'applytoall' => $applytoall,",
          "1543:                                                   'plugindata' => $plugindata));",
          "1545:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1546:         $context = context_module::instance($cm->id);",
          "1548:         $assignment = new assign($context, $cm, null);",
          "1550:         $gradedata = (object)$plugindata;",
          "1552:         $gradedata->addattempt = $addattempt;",
          "1553:         $gradedata->attemptnumber = $attemptnumber;",
          "1554:         $gradedata->workflowstate = $workflowstate;",
          "1555:         $gradedata->applytoall = $applytoall;",
          "1556:         $gradedata->grade = $grade;",
          "1558:         $assignment->save_grade($userid, $gradedata);",
          "1560:         return null;",
          "1561:     }",
          "1569:     public static function save_grade_returns() {",
          "1570:         return null;",
          "1571:     }",
          "1578:     public static function copy_previous_attempt_parameters() {",
          "1579:         return new external_function_parameters(",
          "1580:             array(",
          "1581:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1582:             )",
          "1583:         );",
          "1584:     }",
          "1592:     public static function copy_previous_attempt($assignmentid) {",
          "1593:         global $CFG, $USER;",
          "1594:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1596:         $params = self::validate_parameters(self::copy_previous_attempt_parameters(),",
          "1597:                                             array('assignmentid' => $assignmentid));",
          "1599:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1600:         $context = context_module::instance($cm->id);",
          "1602:         $assignment = new assign($context, $cm, null);",
          "1604:         $notices = array();",
          "1606:         $assignment->copy_previous_attempt($submissiondata, $notices);",
          "1608:         $warnings = array();",
          "1609:         foreach ($notices as $notice) {",
          "1610:             $warnings[] = self::generate_warning($assignmentid,",
          "1611:                                                  'couldnotcopyprevioussubmission',",
          "1612:                                                  $notice);",
          "1613:         }",
          "1615:         return $warnings;",
          "1616:     }",
          "1624:     public static function copy_previous_attempt_returns() {",
          "1625:         return new external_multiple_structure(",
          "1626:            new external_warnings()",
          "1627:         );",
          "1628:     }",
          "",
          "---------------"
        ],
        "mod/assign/feedback/comments/locallib.php||mod/assign/feedback/comments/locallib.php": [
          "File: mod/assign/feedback/comments/locallib.php -> mod/assign/feedback/comments/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:         return $this->view($grade) == '';",
          "391:     }",
          "393: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     public function get_external_parameters() {",
          "399:         $editorparams = array('text' => new external_value(PARAM_TEXT, 'The text for this feedback.'),",
          "400:                               'format' => new external_value(PARAM_INT, 'The format for this feedback'));",
          "401:         $editorstructure = new external_single_structure($editorparams);",
          "402:         return array('assignfeedbackcomments_editor' => $editorstructure);",
          "403:     }",
          "",
          "---------------"
        ],
        "mod/assign/feedback/file/locallib.php||mod/assign/feedback/file/locallib.php": [
          "File: mod/assign/feedback/file/locallib.php -> mod/assign/feedback/file/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:     public function get_grading_actions() {",
          "610:         return array('uploadzip'=>get_string('uploadzip', 'assignfeedback_file'));",
          "611:     }",
          "612: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:     public function get_external_parameters() {",
          "619:         return array('files_filemanager' => new external_value(PARAM_INT, 'The id of a draft area containing files for this feedback.'));",
          "620:     }",
          "",
          "---------------"
        ],
        "mod/assign/locallib.php||mod/assign/locallib.php": [
          "File: mod/assign/locallib.php -> mod/assign/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:                 $nextpageparams['action'] = 'editsubmission';",
          "390:             }",
          "391:         } else if ($action == 'lock') {",
          "393:             $action = 'redirect';",
          "394:             $nextpageparams['action'] = 'grading';",
          "395:         } else if ($action == 'addattempt') {",
          "",
          "[Removed Lines]",
          "392:             $this->process_lock();",
          "",
          "[Added Lines]",
          "392:             $this->process_lock_submission();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:             $action = 'redirect';",
          "402:             $nextpageparams['action'] = 'grading';",
          "403:         } else if ($action == 'unlock') {",
          "405:             $action = 'redirect';",
          "406:             $nextpageparams['action'] = 'grading';",
          "407:         } else if ($action == 'setbatchmarkingworkflowstate') {",
          "",
          "[Removed Lines]",
          "404:             $this->process_unlock();",
          "",
          "[Added Lines]",
          "404:             $this->process_unlock_submission();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3315:             foreach ($userlist as $userid) {",
          "3316:                 if ($data->operation == 'lock') {",
          "3318:                 } else if ($data->operation == 'unlock') {",
          "3320:                 } else if ($data->operation == 'reverttodraft') {",
          "3321:                     $this->process_revert_to_draft($userid);",
          "3322:                 } else if ($data->operation == 'addattempt') {",
          "",
          "[Removed Lines]",
          "3317:                     $this->process_lock($userid);",
          "3319:                     $this->process_unlock($userid);",
          "",
          "[Added Lines]",
          "3317:                     $this->process_lock_submission($userid);",
          "3319:                     $this->process_unlock_submission($userid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4462:         }",
          "4463:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4470:     public function submit_for_grading() {",
          "4471:         global $USER;",
          "4474:         require_capability('mod/assign:submit', $this->context);",
          "4476:         $instance = $this->get_instance();",
          "4478:         if ($instance->teamsubmission) {",
          "4479:             $submission = $this->get_group_submission($USER->id, 0, true);",
          "4480:         } else {",
          "4481:             $submission = $this->get_user_submission($USER->id, true);",
          "4482:         }",
          "4484:         if (!$this->submissions_open($USER->id)) {",
          "4485:             return false;",
          "4486:         }",
          "4488:         if ($submission->status != ASSIGN_SUBMISSION_STATUS_SUBMITTED) {",
          "4490:             $plugins = $this->get_submission_plugins();",
          "4491:             foreach ($plugins as $plugin) {",
          "4492:                 if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "4493:                     $plugin->submit_for_grading($submission);",
          "4494:                 }",
          "4495:             }",
          "4497:             $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "4498:             $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "4499:             $completion = new completion_info($this->get_course());",
          "4500:             if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "4501:                 $completion->update_state($this->get_course_module(), COMPLETION_COMPLETE, $USER->id);",
          "4502:             }",
          "4504:             if (isset($data->submissionstatement)) {",
          "4505:                 $logmessage = get_string('submissionstatementacceptedlog',",
          "4506:                                          'mod_assign',",
          "4507:                                          fullname($USER));",
          "4508:                 $this->add_to_log('submission statement accepted', $logmessage);",
          "4509:             }",
          "4510:             $logdata = $this->add_to_log('submit for grading', $this->format_submission_for_log($submission), '', true);",
          "4511:             $this->notify_graders($submission);",
          "4512:             $this->notify_student_submission_receipt($submission);",
          "4515:             $params = array(",
          "4516:                 'context' => context_module::instance($this->get_course_module()->id),",
          "4517:                 'objectid' => $submission->id,",
          "4518:                 'other' => array(",
          "4519:                     'submission_editable' => false",
          "4520:                 )",
          "4521:             );",
          "4522:             $event = \\mod_assign\\event\\assessable_submitted::create($params);",
          "4523:             $event->set_legacy_logdata($logdata);",
          "4524:             $event->trigger();",
          "4525:             return true;",
          "4526:         }",
          "4527:         return false;",
          "4528:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4472:     protected function process_submit_for_grading($mform) {",
          "4473:         global $USER, $CFG;",
          "4477:         require_once($CFG->dirroot . '/mod/assign/submissionconfirmform.php');",
          "4478:         require_sesskey();",
          "",
          "[Removed Lines]",
          "4476:         require_capability('mod/assign:submit', $this->context);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4503:             if ($mform->get_data() == false) {",
          "4504:                 return false;",
          "4505:             }",
          "4557:         }",
          "4558:         return true;",
          "4559:     }",
          "",
          "[Removed Lines]",
          "4506:             if ($instance->teamsubmission) {",
          "4507:                 $submission = $this->get_group_submission($USER->id, 0, true);",
          "4508:             } else {",
          "4509:                 $submission = $this->get_user_submission($USER->id, true);",
          "4510:             }",
          "4512:             if ($submission->status != ASSIGN_SUBMISSION_STATUS_SUBMITTED) {",
          "4514:                 $plugins = $this->get_submission_plugins();",
          "4515:                 foreach ($plugins as $plugin) {",
          "4516:                     if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "4517:                         $plugin->submit_for_grading($submission);",
          "4518:                     }",
          "4519:                 }",
          "4521:                 $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "4522:                 $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "4523:                 $completion = new completion_info($this->get_course());",
          "4524:                 if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "4525:                     $completion->update_state($this->get_course_module(), COMPLETION_COMPLETE, $USER->id);",
          "4526:                 }",
          "4528:                 if (isset($data->submissionstatement)) {",
          "4529:                     $logmessage = get_string('submissionstatementacceptedlog',",
          "4530:                                              'mod_assign',",
          "4531:                                              fullname($USER));",
          "4532:                     $addtolog = $this->add_to_log('submission statement accepted', $logmessage, '', true);",
          "4533:                     $params = array(",
          "4534:                         'context' => $this->context,",
          "4535:                         'objectid' => $submission->id",
          "4536:                     );",
          "4537:                     $event = \\mod_assign\\event\\statement_accepted::create($params);",
          "4538:                     $event->set_legacy_logdata($addtolog);",
          "4539:                     $event->trigger();",
          "4540:                 }",
          "4541:                 $logdata = $this->add_to_log('submit for grading', $this->format_submission_for_log($submission), '', true);",
          "4542:                 $this->notify_graders($submission);",
          "4543:                 $this->notify_student_submission_receipt($submission);",
          "4546:                 $params = array(",
          "4547:                     'context' => context_module::instance($this->get_course_module()->id),",
          "4548:                     'objectid' => $submission->id,",
          "4549:                     'other' => array(",
          "4550:                         'submission_editable' => false",
          "4551:                     )",
          "4552:                 );",
          "4553:                 $event = \\mod_assign\\event\\assessable_submitted::create($params);",
          "4554:                 $event->set_legacy_logdata($logdata);",
          "4555:                 $event->trigger();",
          "4556:             }",
          "",
          "[Added Lines]",
          "4569:             return $this->submit_for_grading();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4569:         global $DB;",
          "4571:         $flags = $this->get_user_flags($userid, true);",
          "4572:         $flags->extensionduedate = $extensionduedate;",
          "",
          "[Removed Lines]",
          "4568:     protected function save_user_extension($userid, $extensionduedate) {",
          "",
          "[Added Lines]",
          "4581:     public function save_user_extension($userid, $extensionduedate) {",
          "4585:         require_capability('mod/assign:grantextension', $this->context);",
          "4587:         if (!is_enrolled($this->get_course_context(), $userid)) {",
          "4588:             return false;",
          "4589:         }",
          "4590:         if (!has_capability('mod/assign:submit', $this->context, $userid)) {",
          "4591:             return false;",
          "4592:         }",
          "4594:         if ($this->get_instance()->duedate && $extensionduedate) {",
          "4595:             if ($this->get_instance()->duedate > $extensionduedate) {",
          "4596:                 return false;",
          "4597:             }",
          "4598:         }",
          "4599:         if ($this->get_instance()->allowsubmissionsfromdate && $extensionduedate) {",
          "4600:             if ($this->get_instance()->allowsubmissionsfromdate > $extensionduedate) {",
          "4601:                 return false;",
          "4602:             }",
          "4603:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4600:         require_once($CFG->dirroot . '/mod/assign/extensionform.php');",
          "4605:         $batchusers = optional_param('selectedusers', '', PARAM_SEQUENCE);",
          "4606:         $userid = 0;",
          "4607:         if (!$batchusers) {",
          "",
          "[Removed Lines]",
          "4603:         require_capability('mod/assign:grantextension', $this->context);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4840:         require_capability('mod/assign:revealidentities', $this->context);",
          "4842:             return false;",
          "4843:         }",
          "",
          "[Removed Lines]",
          "4837:     protected function process_reveal_identities() {",
          "4838:         global $DB, $CFG;",
          "4841:         if (!confirm_sesskey()) {",
          "",
          "[Added Lines]",
          "4868:     public function reveal_identities() {",
          "4869:         global $DB;",
          "4873:         if ($this->get_instance()->revealidentities || empty($this->get_instance()->blindmarking)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4882:         $event->trigger();",
          "4883:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4922:     protected function process_reveal_identities() {",
          "4924:         if (!confirm_sesskey()) {",
          "4925:             return false;",
          "4926:         }",
          "4928:         return $this->reveal_identities();",
          "4929:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5009:     }",
          "5018:     protected function process_copy_previous_attempt(&$notices) {",
          "5019:         global $USER, $CFG;",
          "5021:         $instance = $this->get_instance();",
          "5022:         if ($instance->teamsubmission) {",
          "5023:             $submission = $this->get_group_submission($USER->id, 0, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5065:         require_sesskey();",
          "5067:         return copy_previous_attempt($notices);",
          "5068:     }",
          "5077:     public function copy_previous_attempt(&$notices) {",
          "5080:         require_capability('mod/assign:submit', $this->context);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5128:     }",
          "5145:         require_capability('mod/assign:submit', $this->context);",
          "5151:         $instance = $this->get_instance();",
          "5157:         }",
          "5185:                 }",
          "5186:             }",
          "5193:             }",
          "5213:             $params = array(",
          "5214:                 'context' => $this->context,",
          "5215:                 'objectid' => $submission->id",
          "5216:             );",
          "5218:             $event->set_legacy_logdata($addtolog);",
          "5219:             $event->trigger();",
          "5244:             return true;",
          "5245:         }",
          "5246:         return false;",
          "5247:     }",
          "",
          "[Removed Lines]",
          "5138:     protected function process_save_submission(&$mform, &$notices) {",
          "5139:         global $USER, $CFG;",
          "5142:         require_once($CFG->dirroot . '/mod/assign/submission_form.php');",
          "5146:         require_sesskey();",
          "5147:         if (!$this->submissions_open()) {",
          "5148:             $notices[] = get_string('duedatereached', 'assign');",
          "5149:             return false;",
          "5150:         }",
          "5153:         $data = new stdClass();",
          "5154:         $mform = new mod_assign_submission_form(null, array($this, $data));",
          "5155:         if ($mform->is_cancelled()) {",
          "5156:             return true;",
          "5158:         if ($data = $mform->get_data()) {",
          "5159:             if ($instance->teamsubmission) {",
          "5160:                 $submission = $this->get_group_submission($USER->id, 0, true);",
          "5161:             } else {",
          "5162:                 $submission = $this->get_user_submission($USER->id, true);",
          "5163:             }",
          "5164:             if ($instance->submissiondrafts) {",
          "5165:                 $submission->status = ASSIGN_SUBMISSION_STATUS_DRAFT;",
          "5166:             } else {",
          "5167:                 $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "5168:             }",
          "5170:             $flags = $this->get_user_flags($USER->id, false);",
          "5173:             if ($flags && $flags->locked) {",
          "5174:                 print_error('submissionslocked', 'assign');",
          "5175:                 return true;",
          "5176:             }",
          "5178:             $pluginerror = false;",
          "5179:             foreach ($this->submissionplugins as $plugin) {",
          "5180:                 if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "5181:                     if (!$plugin->save($submission, $data)) {",
          "5182:                         $notices[] = $plugin->get_error();",
          "5183:                         $pluginerror = true;",
          "5184:                     }",
          "5187:             $allempty = $this->submission_empty($submission);",
          "5188:             if ($pluginerror || $allempty) {",
          "5189:                 if ($allempty) {",
          "5190:                     $notices[] = get_string('submissionempty', 'mod_assign');",
          "5191:                 }",
          "5192:                 return false;",
          "5195:             $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "5198:             if (isset($data->submissionstatement)) {",
          "5199:                 $logmessage = get_string('submissionstatementacceptedlog',",
          "5200:                                          'mod_assign',",
          "5201:                                          fullname($USER));",
          "5202:                 $addtolog = $this->add_to_log('submission statement accepted', $logmessage, '', true);",
          "5203:                 $params = array(",
          "5204:                     'context' => $this->context,",
          "5205:                     'objectid' => $submission->id",
          "5206:                 );",
          "5207:                 $event = \\mod_assign\\event\\statement_accepted::create($params);",
          "5208:                 $event->set_legacy_logdata($addtolog);",
          "5209:                 $event->trigger();",
          "5210:             }",
          "5212:             $addtolog = $this->add_to_log('submit', $this->format_submission_for_log($submission), '', true);",
          "5217:             $event = \\mod_assign\\event\\submission_updated::create($params);",
          "5221:             $complete = COMPLETION_INCOMPLETE;",
          "5222:             if ($submission->status == ASSIGN_SUBMISSION_STATUS_SUBMITTED) {",
          "5223:                 $complete = COMPLETION_COMPLETE;",
          "5224:             }",
          "5225:             $completion = new completion_info($this->get_course());",
          "5226:             if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "5227:                 $completion->update_state($this->get_course_module(), $complete, $USER->id);",
          "5228:             }",
          "5230:             if (!$instance->submissiondrafts) {",
          "5231:                 $this->notify_student_submission_receipt($submission);",
          "5232:                 $this->notify_graders($submission);",
          "5234:                 $params = array(",
          "5235:                     'context' => context_module::instance($this->get_course_module()->id),",
          "5236:                     'objectid' => $submission->id,",
          "5237:                     'other' => array(",
          "5238:                         'submission_editable' => true",
          "5239:                     )",
          "5240:                 );",
          "5241:                 $event = \\mod_assign\\event\\assessable_submitted::create($params);",
          "5242:                 $event->trigger();",
          "5243:             }",
          "",
          "[Added Lines]",
          "5199:     public function save_submission(stdClass $data, & $notices) {",
          "5200:         global $CFG, $USER;",
          "5205:         if ($instance->teamsubmission) {",
          "5206:             $submission = $this->get_group_submission($USER->id, 0, true);",
          "5207:         } else {",
          "5208:             $submission = $this->get_user_submission($USER->id, true);",
          "5209:         }",
          "5210:         if ($instance->submissiondrafts) {",
          "5211:             $submission->status = ASSIGN_SUBMISSION_STATUS_DRAFT;",
          "5212:         } else {",
          "5213:             $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "5216:         $flags = $this->get_user_flags($USER->id, false);",
          "5219:         if ($flags && $flags->locked) {",
          "5220:             print_error('submissionslocked', 'assign');",
          "5221:             return true;",
          "5222:         }",
          "5224:         $pluginerror = false;",
          "5225:         foreach ($this->submissionplugins as $plugin) {",
          "5226:             if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "5227:                 if (!$plugin->save($submission, $data)) {",
          "5228:                     $notices[] = $plugin->get_error();",
          "5229:                     $pluginerror = true;",
          "5232:         }",
          "5233:         $allempty = $this->submission_empty($submission);",
          "5234:         if ($pluginerror || $allempty) {",
          "5235:             if ($allempty) {",
          "5236:                 $notices[] = get_string('submissionempty', 'mod_assign');",
          "5238:             return false;",
          "5239:         }",
          "5241:         $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "5244:         if (isset($data->submissionstatement)) {",
          "5245:             $logmessage = get_string('submissionstatementacceptedlog',",
          "5246:                                      'mod_assign',",
          "5247:                                      fullname($USER));",
          "5248:             $this->add_to_log('submission statement accepted', $logmessage);",
          "5249:             $addtolog = $this->add_to_log('submission statement accepted', $logmessage, '', true);",
          "5254:             $event = \\mod_assign\\event\\statement_accepted::create($params);",
          "5257:         }",
          "5258:         $addtolog = $this->add_to_log('submit', $this->format_submission_for_log($submission), '', true);",
          "5259:         $params = array(",
          "5260:             'context' => $this->context,",
          "5261:             'objectid' => $submission->id",
          "5262:         );",
          "5263:         $event = \\mod_assign\\event\\submission_updated::create($params);",
          "5264:         $event->set_legacy_logdata($addtolog);",
          "5265:         $event->trigger();",
          "5267:         $complete = COMPLETION_INCOMPLETE;",
          "5268:         if ($submission->status == ASSIGN_SUBMISSION_STATUS_SUBMITTED) {",
          "5269:             $complete = COMPLETION_COMPLETE;",
          "5270:         }",
          "5271:         $completion = new completion_info($this->get_course());",
          "5272:         if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "5273:             $completion->update_state($this->get_course_module(), $complete, $USER->id);",
          "5274:         }",
          "5276:         if (!$instance->submissiondrafts) {",
          "5277:             $this->notify_student_submission_receipt($submission);",
          "5278:             $this->notify_graders($submission);",
          "5280:             $params = array(",
          "5281:                 'context' => context_module::instance($this->get_course_module()->id),",
          "5282:                 'objectid' => $submission->id,",
          "5283:                 'other' => array(",
          "5284:                     'submission_editable' => true",
          "5285:                 )",
          "5286:             );",
          "5287:             $event = \\mod_assign\\event\\assessable_submitted::create($params);",
          "5288:             $event->trigger();",
          "5289:         }",
          "5290:         return true;",
          "5291:     }",
          "5301:     protected function process_save_submission(&$mform, &$notices) {",
          "5302:         global $CFG;",
          "5305:         require_once($CFG->dirroot . '/mod/assign/submission_form.php');",
          "5308:         require_sesskey();",
          "5309:         if (!$this->submissions_open()) {",
          "5310:             $notices[] = get_string('duedatereached', 'assign');",
          "5311:             return false;",
          "5312:         }",
          "5313:         $instance = $this->get_instance();",
          "5315:         $data = new stdClass();",
          "5316:         $mform = new mod_assign_submission_form(null, array($this, $data));",
          "5317:         if ($mform->is_cancelled()) {",
          "5320:         if ($data = $mform->get_data()) {",
          "5321:             return $this->save_submission($data, $notices);",
          "5322:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5686:         global $DB, $USER;",
          "5689:         require_capability('mod/assign:grade', $this->context);",
          "5696:         if ($this->get_instance()->teamsubmission) {",
          "5697:             $submission = $this->get_group_submission($userid, 0, false);",
          "",
          "[Removed Lines]",
          "5685:     protected function process_revert_to_draft($userid = 0) {",
          "5690:         require_sesskey();",
          "5692:         if (!$userid) {",
          "5693:             $userid = required_param('userid', PARAM_INT);",
          "5694:         }",
          "",
          "[Added Lines]",
          "5761:     public function revert_to_draft($userid) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5700:         }",
          "5702:         if (!$submission) {",
          "5704:         }",
          "5705:         $submission->status = ASSIGN_SUBMISSION_STATUS_DRAFT;",
          "5706:         $this->update_submission($submission, $userid, true, $this->get_instance()->teamsubmission);",
          "",
          "[Removed Lines]",
          "5703:             return;",
          "",
          "[Added Lines]",
          "5774:             return false;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5739:         $event = \\mod_assign\\event\\submission_status_updated::create($params);",
          "5740:         $event->set_legacy_logdata($addtolog);",
          "5741:         $event->trigger();",
          "5742:     }",
          "5756:         require_sesskey();",
          "5758:         if (!$userid) {",
          "5759:             $userid = required_param('userid', PARAM_INT);",
          "5760:         }",
          "5763:         $plugins = $this->get_submission_plugins();",
          "5764:         $submission = $this->get_user_submission($userid, false);",
          "5771:         $flags = $this->get_user_flags($userid, true);",
          "5772:         $flags->locked = 1;",
          "5773:         $this->update_user_flags($flags);",
          "5775:         $user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);",
          "5777:         $logmessage = get_string('locksubmissionforstudent',",
          "",
          "[Removed Lines]",
          "5751:     protected function process_lock($userid = 0) {",
          "5752:         global $USER, $DB;",
          "5755:         require_capability('mod/assign:grade', $this->context);",
          "5765:         foreach ($plugins as $plugin) {",
          "5766:             if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "5767:                 $plugin->lock($submission);",
          "5768:             }",
          "5769:         }",
          "",
          "[Added Lines]",
          "5813:         return true;",
          "5823:     protected function process_revert_to_draft($userid = 0) {",
          "5830:         return $this->revert_to_draft($userid);",
          "5831:     }",
          "5839:     public function lock_submission($userid) {",
          "5840:         global $USER, $DB;",
          "5842:         require_capability('mod/assign:grade', $this->context);",
          "5852:         foreach ($plugins as $plugin) {",
          "5853:             if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "5854:                 $plugin->lock($submission, $flags);",
          "5855:             }",
          "5856:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5786:         $event = \\mod_assign\\event\\submission_locked::create($params);",
          "5787:         $event->set_legacy_logdata($addtolog);",
          "5788:         $event->trigger();",
          "5789:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5872:         return true;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5909:         require_sesskey();",
          "5911:         if (!$userid) {",
          "5912:             $userid = required_param('userid', PARAM_INT);",
          "5913:         }",
          "5915:         $plugins = $this->get_submission_plugins();",
          "5916:         $submission = $this->get_user_submission($userid, false);",
          "5917:         foreach ($plugins as $plugin) {",
          "5918:             if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "5920:             }",
          "5921:         }",
          "5927:         $user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);",
          "",
          "[Removed Lines]",
          "5904:     protected function process_unlock($userid = 0) {",
          "5905:         global $USER, $DB;",
          "5908:         require_capability('mod/assign:grade', $this->context);",
          "5919:                 $plugin->unlock($submission);",
          "5923:         $flags = $this->get_user_flags($userid, true);",
          "5924:         $flags->locked = 0;",
          "5925:         $this->update_user_flags($flags);",
          "",
          "[Added Lines]",
          "5989:     protected function process_lock_submission($userid = 0) {",
          "5997:         return $this->lock_submission($userid);",
          "5998:     }",
          "6006:     public function unlock_submission($userid) {",
          "6007:         global $USER, $DB;",
          "6010:         require_capability('mod/assign:grade', $this->context);",
          "6016:         $flags = $this->get_user_flags($userid, true);",
          "6017:         $flags->locked = 0;",
          "6018:         $this->update_user_flags($flags);",
          "6022:                 $plugin->unlock($submission, $flags);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5938:         $event = \\mod_assign\\event\\submission_unlocked::create($params);",
          "5939:         $event->set_legacy_logdata($addtolog);",
          "5940:         $event->trigger();",
          "5941:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6041:         return true;",
          "6042:     }",
          "6051:     protected function process_unlock_submission($userid = 0) {",
          "6053:         require_sesskey();",
          "6055:         if (!$userid) {",
          "6056:             $userid = required_param('userid', PARAM_INT);",
          "6057:         }",
          "6059:         return $this->unlock_submission($userid);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6051:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6181:     public function save_grade($userid, $data) {",
          "6184:         require_capability('mod/assign:grade', $this->context);",
          "6186:         $instance = $this->get_instance();",
          "6187:         $submission = null;",
          "6188:         if ($instance->teamsubmission) {",
          "6189:             $submission = $this->get_group_submission($userid, 0, false, $data->attemptnumber);",
          "6190:         } else {",
          "6191:             $submission = $this->get_user_submission($userid, false, $data->attemptnumber);",
          "6192:         }",
          "6193:         if ($instance->teamsubmission && $data->applytoall) {",
          "6194:             $groupid = 0;",
          "6195:             if ($this->get_submission_group($userid)) {",
          "6196:                 $group = $this->get_submission_group($userid);",
          "6197:                 if ($group) {",
          "6198:                     $groupid = $group->id;",
          "6199:                 }",
          "6200:             }",
          "6201:             $members = $this->get_submission_group_members($groupid, true);",
          "6202:             foreach ($members as $member) {",
          "6204:                 $this->apply_grade_to_user($data, $member->id, $data->attemptnumber);",
          "6205:                 $this->process_outcomes($member->id, $data);",
          "6206:             }",
          "6207:         } else {",
          "6208:             $this->apply_grade_to_user($data, $userid, $data->attemptnumber);",
          "6210:             $this->process_outcomes($userid, $data);",
          "6211:         }",
          "6212:         $maxattemptsreached = !empty($submission) &&",
          "6213:                               $submission->attemptnumber >= ($instance->maxattempts - 1) &&",
          "6214:                               $instance->maxattempts != ASSIGN_UNLIMITED_ATTEMPTS;",
          "6215:         $shouldreopen = false;",
          "6216:         if ($instance->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_UNTILPASS) {",
          "6218:             $gradinginfo = grade_get_grades($this->get_course()->id,",
          "6219:                                             'mod',",
          "6220:                                             'assign',",
          "6221:                                             $instance->id,",
          "6222:                                             $userid);",
          "6225:             $gradingitem = null;",
          "6226:             $gradebookgrade = null;",
          "6227:             if (isset($gradinginfo->items[0])) {",
          "6228:                 $gradingitem = $gradinginfo->items[0];",
          "6229:                 $gradebookgrade = $gradingitem->grades[$userid];",
          "6230:             }",
          "6232:             if ($gradebookgrade) {",
          "6234:                 $shouldreopen = true;",
          "6235:                 if (is_null($gradebookgrade->grade)) {",
          "6236:                     $shouldreopen = false;",
          "6237:                 }",
          "6238:                 if (empty($gradingitem->gradepass) || $gradingitem->gradepass == $gradingitem->grademin) {",
          "6239:                     $shouldreopen = false;",
          "6240:                 }",
          "6241:                 if ($gradebookgrade->grade >= $gradingitem->gradepass) {",
          "6242:                     $shouldreopen = false;",
          "6243:                 }",
          "6244:             }",
          "6245:         }",
          "6246:         if ($instance->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_MANUAL &&",
          "6247:                 !empty($data->addattempt)) {",
          "6248:             $shouldreopen = true;",
          "6249:         }",
          "6251:         if ($data->attemptnumber != -1) {",
          "6252:             $shouldreopen = false;",
          "6253:         }",
          "6254:         if ($shouldreopen && !$maxattemptsreached) {",
          "6255:             $this->add_attempt($userid);",
          "6256:         }",
          "6257:         return true;",
          "6258:     }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6063:         require_once($CFG->dirroot . '/mod/assign/gradeform.php');",
          "6067:         require_sesskey();",
          "6069:         $instance = $this->get_instance();",
          "",
          "[Removed Lines]",
          "6066:         require_capability('mod/assign:grade', $this->context);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6102:                                            array('class'=>'gradeform'));",
          "6104:         if ($formdata = $mform->get_data()) {",
          "6175:         } else {",
          "6176:             return false;",
          "6177:         }",
          "6179:     }",
          "",
          "[Removed Lines]",
          "6105:             $submission = null;",
          "6106:             if ($instance->teamsubmission) {",
          "6107:                 $submission = $this->get_group_submission($userid, 0, false, $attemptnumber);",
          "6108:             } else {",
          "6109:                 $submission = $this->get_user_submission($userid, false, $attemptnumber);",
          "6110:             }",
          "6111:             if ($instance->teamsubmission && $formdata->applytoall) {",
          "6112:                 $groupid = 0;",
          "6113:                 if ($this->get_submission_group($userid)) {",
          "6114:                     $group = $this->get_submission_group($userid);",
          "6115:                     if ($group) {",
          "6116:                         $groupid = $group->id;",
          "6117:                     }",
          "6118:                 }",
          "6119:                 $members = $this->get_submission_group_members($groupid, true);",
          "6120:                 foreach ($members as $member) {",
          "6122:                     $this->apply_grade_to_user($formdata, $member->id, $attemptnumber);",
          "6123:                     $this->process_outcomes($member->id, $formdata);",
          "6124:                 }",
          "6125:             } else {",
          "6126:                 $this->apply_grade_to_user($formdata, $userid, $attemptnumber);",
          "6128:                 $this->process_outcomes($userid, $formdata);",
          "6129:             }",
          "6130:             $maxattemptsreached = !empty($submission) &&",
          "6131:                                   $submission->attemptnumber >= ($instance->maxattempts - 1) &&",
          "6132:                                   $instance->maxattempts != ASSIGN_UNLIMITED_ATTEMPTS;",
          "6133:             $shouldreopen = false;",
          "6134:             if ($instance->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_UNTILPASS) {",
          "6136:                 $gradinginfo = grade_get_grades($this->get_course()->id,",
          "6137:                                                 'mod',",
          "6138:                                                 'assign',",
          "6139:                                                 $instance->id,",
          "6140:                                                 $userid);",
          "6143:                 $gradingitem = null;",
          "6144:                 $gradebookgrade = null;",
          "6145:                 if (isset($gradinginfo->items[0])) {",
          "6146:                     $gradingitem = $gradinginfo->items[0];",
          "6147:                     $gradebookgrade = $gradingitem->grades[$userid];",
          "6148:                 }",
          "6150:                 if ($gradebookgrade) {",
          "6152:                     $shouldreopen = true;",
          "6153:                     if (is_null($gradebookgrade->grade)) {",
          "6154:                         $shouldreopen = false;",
          "6155:                     }",
          "6156:                     if (empty($gradingitem->gradepass) || $gradingitem->gradepass == $gradingitem->grademin) {",
          "6157:                         $shouldreopen = false;",
          "6158:                     }",
          "6159:                     if ($gradebookgrade->grade >= $gradingitem->gradepass) {",
          "6160:                         $shouldreopen = false;",
          "6161:                     }",
          "6162:                 }",
          "6163:             }",
          "6164:             if ($instance->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_MANUAL &&",
          "6165:                     !empty($formdata->addattempt)) {",
          "6166:                 $shouldreopen = true;",
          "6167:             }",
          "6169:             if ($attemptnumber != -1) {",
          "6170:                 $shouldreopen = false;",
          "6171:             }",
          "6172:             if ($shouldreopen && !$maxattemptsreached) {",
          "6173:                 $this->process_add_attempt($userid);",
          "6174:             }",
          "6178:         return true;",
          "",
          "[Added Lines]",
          "6309:             return $this->save_grade($userid, $formdata);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6288:     }",
          "6296:     protected function process_add_attempt($userid) {",
          "6298:         require_sesskey();",
          "6300:         if ($this->get_instance()->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_NONE) {",
          "6301:             return false;",
          "6302:         }",
          "",
          "[Removed Lines]",
          "6297:         require_capability('mod/assign:grade', $this->context);",
          "",
          "[Added Lines]",
          "6433:         return $this->add_attempt($userid);",
          "6434:     }",
          "6442:     protected function add_attempt($userid) {",
          "6443:         require_capability('mod/assign:grade', $this->context);",
          "",
          "---------------"
        ],
        "mod/assign/submission/file/locallib.php||mod/assign/submission/file/locallib.php": [
          "File: mod/assign/submission/file/locallib.php -> mod/assign/submission/file/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:         }",
          "478:         return true;",
          "479:     }",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:     public function get_external_parameters() {",
          "487:         return array('files_filemanager' => new external_value(PARAM_INT, 'The id of a draft area containing files for this submission.'));",
          "488:     }",
          "",
          "---------------"
        ],
        "mod/assign/submission/onlinetext/locallib.php||mod/assign/submission/onlinetext/locallib.php": [
          "File: mod/assign/submission/onlinetext/locallib.php -> mod/assign/submission/onlinetext/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:         }",
          "496:         return true;",
          "497:     }",
          "498: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:     public function get_external_parameters() {",
          "505:         $editorparams = array('text' => new external_value(PARAM_TEXT, 'The text for this submission.'),",
          "506:                               'format' => new external_value(PARAM_INT, 'The format for this submission'),",
          "507:                               'itemid' => new external_value(PARAM_INT, 'The draft area id for files attached to the submission'));",
          "508:         $editorstructure = new external_single_structure($editorparams);",
          "509:         return array('onlinetext_editor' => $editorstructure);",
          "510:     }",
          "",
          "---------------"
        ],
        "mod/assign/submissionplugin.php||mod/assign/submissionplugin.php": [
          "File: mod/assign/submissionplugin.php -> mod/assign/submissionplugin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     }",
          "104:     }",
          "",
          "[Removed Lines]",
          "94:     public function lock(stdClass $submission) {",
          "103:     public function unlock(stdClass $submission) {",
          "",
          "[Added Lines]",
          "95:     public function lock($submission, stdClass $flags) {",
          "105:     public function unlock($submission, stdClass $flags) {",
          "",
          "---------------"
        ],
        "mod/assign/tests/base_test.php||mod/assign/tests/base_test.php": [
          "File: mod/assign/tests/base_test.php -> mod/assign/tests/base_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: class testable_assign extends assign {",
          "230:     public function testable_show_intro() {",
          "231:         return parent::show_intro();",
          "232:     }",
          "",
          "[Removed Lines]",
          "226:     public function testable_process_reveal_identities() {",
          "227:         return parent::process_reveal_identities();",
          "228:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         return parent::process_add_attempt($userid);",
          "260:     }",
          "266:     public function testable_process_save_quick_grades($postdata) {",
          "268:         global $_POST;",
          "",
          "[Removed Lines]",
          "262:     public function testable_process_lock($userid = 0) {",
          "263:         return parent::process_lock($userid);",
          "264:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:         return parent::process_save_quick_grades();",
          "271:     }",
          "285:     public function testable_process_set_batch_marking_allocation($selectedusers, $markerid) {",
          "287:         global $_POST;",
          "",
          "[Removed Lines]",
          "273:     public function testable_process_unlock($userid = 0) {",
          "274:         return parent::process_unlock($userid);",
          "275:     }",
          "277:     public function testable_process_copy_previous_attempt(&$notices) {",
          "278:         return parent::process_copy_previous_attempt($notices);",
          "279:     }",
          "281:     public function testable_process_revert_to_draft($userid = 0) {",
          "282:         return parent::process_revert_to_draft($userid);",
          "283:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/assign/tests/externallib_test.php||mod/assign/tests/externallib_test.php": [
          "File: mod/assign/tests/externallib_test.php -> mod/assign/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         global $DB, $USER;",
          "47:         $this->resetAfterTest(true);",
          "",
          "[Removed Lines]",
          "44:     public function test_get_grades () {",
          "",
          "[Added Lines]",
          "44:     public function test_get_grades() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         global $DB, $USER;",
          "124:         $this->resetAfterTest(true);",
          "",
          "[Removed Lines]",
          "121:     public function test_get_assignments () {",
          "",
          "[Added Lines]",
          "121:     public function test_get_assignments() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:         global $DB, $USER;",
          "224:         $this->resetAfterTest(true);",
          "",
          "[Removed Lines]",
          "221:     public function test_get_submissions () {",
          "",
          "[Added Lines]",
          "221:     public function test_get_submissions() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:         global $DB, $USER;",
          "313:         $this->resetAfterTest(true);",
          "",
          "[Removed Lines]",
          "310:     public function test_get_user_flags () {",
          "",
          "[Added Lines]",
          "310:     public function test_get_user_flags() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382:         global $DB, $USER;",
          "384:         $this->resetAfterTest(true);",
          "",
          "[Removed Lines]",
          "381:     public function test_get_user_mappings () {",
          "",
          "[Added Lines]",
          "381:     public function test_get_user_mappings() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "436:         $this->assertEquals($student->id, $mapping['userid']);",
          "437:     }",
          "439: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:     public function test_lock_submissions() {",
          "443:         global $DB, $USER;",
          "445:         $this->resetAfterTest(true);",
          "447:         $course = self::getDataGenerator()->create_course();",
          "449:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "450:         $params['course'] = $course->id;",
          "451:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "452:         $instance = $generator->create_instance($params);",
          "453:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "454:         $context = context_module::instance($cm->id);",
          "456:         $assign = new assign($context, $cm, $course);",
          "458:         $student1 = self::getDataGenerator()->create_user();",
          "459:         $student2 = self::getDataGenerator()->create_user();",
          "460:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "461:         $this->getDataGenerator()->enrol_user($student1->id,",
          "462:                                               $course->id,",
          "463:                                               $studentrole->id);",
          "464:         $this->getDataGenerator()->enrol_user($student2->id,",
          "465:                                               $course->id,",
          "466:                                               $studentrole->id);",
          "467:         $teacher = self::getDataGenerator()->create_user();",
          "468:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "469:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "470:                                               $course->id,",
          "471:                                               $teacherrole->id);",
          "475:         $this->setUser($student1);",
          "476:         $submission = $assign->get_user_submission($student1->id, true);",
          "477:         $data = new stdClass();",
          "478:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "479:                                          'text'=>'Submission text',",
          "480:                                          'format'=>FORMAT_MOODLE);",
          "481:         $plugin = $assign->get_submission_plugin_by_type('onlinetext');",
          "482:         $plugin->save($submission, $data);",
          "485:         $this->setUser($teacher);",
          "486:         $students = array($student1->id, $student2->id);",
          "487:         $result = mod_assign_external::lock_submissions($instance->id, $students);",
          "490:         $this->assertEquals(0, count($result));",
          "492:         $this->setUser($student2);",
          "493:         $submission = $assign->get_user_submission($student2->id, true);",
          "494:         $data = new stdClass();",
          "495:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "496:                                          'text'=>'Submission text',",
          "497:                                          'format'=>FORMAT_MOODLE);",
          "498:         $notices = array();",
          "499:         $this->setExpectedException('moodle_exception');",
          "500:         $assign->save_submission($data, $notices);",
          "501:     }",
          "506:     public function test_unlock_submissions() {",
          "507:         global $DB, $USER;",
          "509:         $this->resetAfterTest(true);",
          "511:         $course = self::getDataGenerator()->create_course();",
          "513:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "514:         $params['course'] = $course->id;",
          "515:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "516:         $instance = $generator->create_instance($params);",
          "517:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "518:         $context = context_module::instance($cm->id);",
          "520:         $assign = new assign($context, $cm, $course);",
          "522:         $student1 = self::getDataGenerator()->create_user();",
          "523:         $student2 = self::getDataGenerator()->create_user();",
          "524:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "525:         $this->getDataGenerator()->enrol_user($student1->id,",
          "526:                                               $course->id,",
          "527:                                               $studentrole->id);",
          "528:         $this->getDataGenerator()->enrol_user($student2->id,",
          "529:                                               $course->id,",
          "530:                                               $studentrole->id);",
          "531:         $teacher = self::getDataGenerator()->create_user();",
          "532:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "533:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "534:                                               $course->id,",
          "535:                                               $teacherrole->id);",
          "539:         $this->setUser($student1);",
          "540:         $submission = $assign->get_user_submission($student1->id, true);",
          "541:         $data = new stdClass();",
          "542:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "543:                                          'text'=>'Submission text',",
          "544:                                          'format'=>FORMAT_MOODLE);",
          "545:         $plugin = $assign->get_submission_plugin_by_type('onlinetext');",
          "546:         $plugin->save($submission, $data);",
          "549:         $this->setUser($teacher);",
          "550:         $students = array($student1->id, $student2->id);",
          "551:         $result = mod_assign_external::lock_submissions($instance->id, $students);",
          "554:         $this->assertEquals(0, count($result));",
          "556:         $result = mod_assign_external::unlock_submissions($instance->id, $students);",
          "559:         $this->assertEquals(0, count($result));",
          "561:         $this->setUser($student2);",
          "562:         $submission = $assign->get_user_submission($student2->id, true);",
          "563:         $data = new stdClass();",
          "564:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "565:                                          'text'=>'Submission text',",
          "566:                                          'format'=>FORMAT_MOODLE);",
          "567:         $notices = array();",
          "568:         $assign->save_submission($data, $notices);",
          "569:     }",
          "574:     public function test_submit_for_grading() {",
          "575:         global $DB, $USER;",
          "577:         $this->resetAfterTest(true);",
          "579:         $course = self::getDataGenerator()->create_course();",
          "581:         set_config('submissionreceipts', 0, 'assign');",
          "582:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "583:         $params['course'] = $course->id;",
          "584:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "585:         $params['submissiondrafts'] = 1;",
          "586:         $params['sendnotifications'] = 0;",
          "587:         $instance = $generator->create_instance($params);",
          "588:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "589:         $context = context_module::instance($cm->id);",
          "591:         $assign = new assign($context, $cm, $course);",
          "593:         $student1 = self::getDataGenerator()->create_user();",
          "594:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "595:         $this->getDataGenerator()->enrol_user($student1->id,",
          "596:                                               $course->id,",
          "597:                                               $studentrole->id);",
          "601:         $this->setUser($student1);",
          "602:         $submission = $assign->get_user_submission($student1->id, true);",
          "603:         $data = new stdClass();",
          "604:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "605:                                          'text'=>'Submission text',",
          "606:                                          'format'=>FORMAT_MOODLE);",
          "607:         $plugin = $assign->get_submission_plugin_by_type('onlinetext');",
          "608:         $plugin->save($submission, $data);",
          "610:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "613:         $this->assertEquals(0, count($result));",
          "615:         $submission = $assign->get_user_submission($student1->id, false);",
          "617:         $this->assertEquals(ASSIGN_SUBMISSION_STATUS_SUBMITTED, $submission->status);",
          "618:     }",
          "623:     public function test_save_user_extensions() {",
          "624:         global $DB, $USER;",
          "626:         $this->resetAfterTest(true);",
          "628:         $course = self::getDataGenerator()->create_course();",
          "630:         $teacher = self::getDataGenerator()->create_user();",
          "631:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "632:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "633:                                               $course->id,",
          "634:                                               $teacherrole->id);",
          "635:         $this->setUser($teacher);",
          "637:         $now = time();",
          "638:         $yesterday = $now - 24*60*60;",
          "639:         $tomorrow = $now + 24*60*60;",
          "640:         set_config('submissionreceipts', 0, 'assign');",
          "641:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "642:         $params['course'] = $course->id;",
          "643:         $params['submissiondrafts'] = 1;",
          "644:         $params['sendnotifications'] = 0;",
          "645:         $params['duedate'] = $yesterday;",
          "646:         $params['cutoffdate'] = $now - 10;",
          "647:         $instance = $generator->create_instance($params);",
          "648:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "649:         $context = context_module::instance($cm->id);",
          "651:         $assign = new assign($context, $cm, $course);",
          "653:         $student1 = self::getDataGenerator()->create_user();",
          "654:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "655:         $this->getDataGenerator()->enrol_user($student1->id,",
          "656:                                               $course->id,",
          "657:                                               $studentrole->id);",
          "659:         $this->setUser($student1);",
          "660:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "663:         $this->assertEquals(1, count($result));",
          "665:         $this->setUser($teacher);",
          "666:         $result = mod_assign_external::save_user_extensions($instance->id, array($student1->id), array($now, $tomorrow));",
          "667:         $this->assertEquals(1, count($result));",
          "669:         $this->setUser($teacher);",
          "670:         $result = mod_assign_external::save_user_extensions($instance->id, array($student1->id), array($yesterday - 10));",
          "671:         $this->assertEquals(1, count($result));",
          "673:         $this->setUser($teacher);",
          "674:         $result = mod_assign_external::save_user_extensions($instance->id, array($student1->id), array($tomorrow));",
          "675:         $this->assertEquals(0, count($result));",
          "677:         $this->setUser($student1);",
          "678:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "679:         $this->assertEquals(0, count($result));",
          "681:         $this->setUser($student1);",
          "682:         $result = mod_assign_external::save_user_extensions($instance->id, array($student1->id), array($now, $tomorrow));",
          "684:     }",
          "689:     public function test_reveal_identities() {",
          "690:         global $DB, $USER;",
          "692:         $this->resetAfterTest(true);",
          "694:         $course = self::getDataGenerator()->create_course();",
          "696:         $teacher = self::getDataGenerator()->create_user();",
          "697:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "698:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "699:                                               $course->id,",
          "700:                                               $teacherrole->id);",
          "701:         $this->setUser($teacher);",
          "703:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "704:         $params['course'] = $course->id;",
          "705:         $params['submissiondrafts'] = 1;",
          "706:         $params['sendnotifications'] = 0;",
          "707:         $params['blindmarking'] = 1;",
          "708:         $instance = $generator->create_instance($params);",
          "709:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "710:         $context = context_module::instance($cm->id);",
          "712:         $assign = new assign($context, $cm, $course);",
          "714:         $student1 = self::getDataGenerator()->create_user();",
          "715:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "716:         $this->getDataGenerator()->enrol_user($student1->id,",
          "717:                                               $course->id,",
          "718:                                               $studentrole->id);",
          "720:         $this->setUser($student1);",
          "721:         $this->setExpectedException('required_capability_exception');",
          "722:         $result = mod_assign_external::reveal_identities($instance->id);",
          "723:         $this->assertEquals(1, count($result));",
          "724:         $this->assertEquals(true, $assign->is_blind_marking());",
          "726:         $this->setUser($teacher);",
          "727:         $result = mod_assign_external::reveal_identities($instance->id);",
          "728:         $this->assertEquals(0, count($result));",
          "729:         $this->assertEquals(false, $assign->is_blind_marking());",
          "731:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "732:         $params['course'] = $course->id;",
          "733:         $params['submissiondrafts'] = 1;",
          "734:         $params['sendnotifications'] = 0;",
          "735:         $params['blindmarking'] = 0;",
          "736:         $instance = $generator->create_instance($params);",
          "737:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "738:         $context = context_module::instance($cm->id);",
          "740:         $assign = new assign($context, $cm, $course);",
          "741:         $result = mod_assign_external::reveal_identities($instance->id);",
          "742:         $this->assertEquals(1, count($result));",
          "743:         $this->assertEquals(false, $assign->is_blind_marking());",
          "745:     }",
          "750:     public function test_revert_submissions_to_draft() {",
          "751:         global $DB, $USER;",
          "753:         $this->resetAfterTest(true);",
          "754:         set_config('submissionreceipts', 0, 'assign');",
          "756:         $course = self::getDataGenerator()->create_course();",
          "758:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "759:         $params['course'] = $course->id;",
          "760:         $params['sendnotifications'] = 0;",
          "761:         $params['submissiondrafts'] = 1;",
          "762:         $instance = $generator->create_instance($params);",
          "763:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "764:         $context = context_module::instance($cm->id);",
          "766:         $assign = new assign($context, $cm, $course);",
          "768:         $student1 = self::getDataGenerator()->create_user();",
          "769:         $student2 = self::getDataGenerator()->create_user();",
          "770:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "771:         $this->getDataGenerator()->enrol_user($student1->id,",
          "772:                                               $course->id,",
          "773:                                               $studentrole->id);",
          "774:         $this->getDataGenerator()->enrol_user($student2->id,",
          "775:                                               $course->id,",
          "776:                                               $studentrole->id);",
          "777:         $teacher = self::getDataGenerator()->create_user();",
          "778:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "779:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "780:                                               $course->id,",
          "781:                                               $teacherrole->id);",
          "785:         $this->setUser($student1);",
          "786:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "787:         $this->assertEquals(0, count($result));",
          "790:         $this->setUser($teacher);",
          "791:         $students = array($student1->id, $student2->id);",
          "792:         $result = mod_assign_external::revert_submissions_to_draft($instance->id, array($student1->id));",
          "795:         $this->assertEquals(0, count($result));",
          "797:     }",
          "802:     public function test_save_submission() {",
          "803:         global $DB, $USER;",
          "805:         $this->resetAfterTest(true);",
          "807:         $course = self::getDataGenerator()->create_course();",
          "809:         $teacher = self::getDataGenerator()->create_user();",
          "810:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "811:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "812:                                               $course->id,",
          "813:                                               $teacherrole->id);",
          "814:         $this->setUser($teacher);",
          "816:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "817:         $params['course'] = $course->id;",
          "818:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "819:         $params['assignsubmission_file_enabled'] = 1;",
          "820:         $params['assignsubmission_file_maxfiles'] = 5;",
          "821:         $params['assignsubmission_file_maxsizebytes'] = 1024*1024;",
          "822:         $instance = $generator->create_instance($params);",
          "823:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "824:         $context = context_module::instance($cm->id);",
          "826:         $assign = new assign($context, $cm, $course);",
          "828:         $student1 = self::getDataGenerator()->create_user();",
          "829:         $student2 = self::getDataGenerator()->create_user();",
          "830:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "831:         $this->getDataGenerator()->enrol_user($student1->id,",
          "832:                                               $course->id,",
          "833:                                               $studentrole->id);",
          "834:         $this->getDataGenerator()->enrol_user($student2->id,",
          "835:                                               $course->id,",
          "836:                                               $studentrole->id);",
          "839:         $this->setUser($student1);",
          "842:         $draftidfile = file_get_unused_draft_itemid();",
          "844:         $usercontext = context_user::instance($student1->id);",
          "845:         $filerecord = array(",
          "846:             'contextid' => $usercontext->id,",
          "847:             'component' => 'user',",
          "848:             'filearea'  => 'draft',",
          "849:             'itemid'    => $draftidfile,",
          "850:             'filepath'  => '/',",
          "851:             'filename'  => 'testtext.txt',",
          "852:         );",
          "854:         $fs = get_file_storage();",
          "855:         $fs->create_file_from_string($filerecord, 'text contents');",
          "858:         $draftidonlinetext = file_get_unused_draft_itemid();",
          "860:         $filerecord = array(",
          "861:             'contextid' => $usercontext->id,",
          "862:             'component' => 'user',",
          "863:             'filearea'  => 'draft',",
          "864:             'itemid'    => $draftidonlinetext,",
          "865:             'filepath'  => '/',",
          "866:             'filename'  => 'shouldbeanimage.txt',",
          "867:         );",
          "869:         $fs->create_file_from_string($filerecord, 'image contents (not really)');",
          "872:         $submissionpluginparams = array();",
          "873:         $submissionpluginparams['files_filemanager'] = $draftidfile;",
          "874:         $onlinetexteditorparams = array('text'=>'Yeeha!',",
          "875:                                         'format'=>1,",
          "876:                                         'itemid'=>$draftidonlinetext);",
          "877:         $submissionpluginparams['onlinetext_editor'] = $onlinetexteditorparams;",
          "878:         $result = mod_assign_external::save_submission($instance->id, $submissionpluginparams);",
          "880:         $this->assertEquals(0, count($result));",
          "882:     }",
          "887:     public function test_save_grade() {",
          "888:         global $DB, $USER;",
          "890:         $this->resetAfterTest(true);",
          "892:         $course = self::getDataGenerator()->create_course();",
          "894:         $teacher = self::getDataGenerator()->create_user();",
          "895:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "896:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "897:                                               $course->id,",
          "898:                                               $teacherrole->id);",
          "899:         $this->setUser($teacher);",
          "901:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "902:         $params['course'] = $course->id;",
          "903:         $params['assignfeedback_file_enabled'] = 1;",
          "904:         $params['assignfeedback_comments_enabled'] = 1;",
          "905:         $instance = $generator->create_instance($params);",
          "906:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "907:         $context = context_module::instance($cm->id);",
          "909:         $assign = new assign($context, $cm, $course);",
          "911:         $student1 = self::getDataGenerator()->create_user();",
          "912:         $student2 = self::getDataGenerator()->create_user();",
          "913:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "914:         $this->getDataGenerator()->enrol_user($student1->id,",
          "915:                                               $course->id,",
          "916:                                               $studentrole->id);",
          "917:         $this->getDataGenerator()->enrol_user($student2->id,",
          "918:                                               $course->id,",
          "919:                                               $studentrole->id);",
          "921:         $this->setUser($teacher);",
          "924:         $draftidfile = file_get_unused_draft_itemid();",
          "926:         $usercontext = context_user::instance($teacher->id);",
          "927:         $filerecord = array(",
          "928:             'contextid' => $usercontext->id,",
          "929:             'component' => 'user',",
          "930:             'filearea'  => 'draft',",
          "931:             'itemid'    => $draftidfile,",
          "932:             'filepath'  => '/',",
          "933:             'filename'  => 'testtext.txt',",
          "934:         );",
          "936:         $fs = get_file_storage();",
          "937:         $fs->create_file_from_string($filerecord, 'text contents');",
          "940:         $feedbackpluginparams = array();",
          "941:         $feedbackpluginparams['files_filemanager'] = $draftidfile;",
          "942:         $feedbackeditorparams = array('text'=>'Yeeha!',",
          "943:                                         'format'=>1);",
          "944:         $feedbackpluginparams['assignfeedbackcomments_editor'] = $feedbackeditorparams;",
          "945:         $result = mod_assign_external::save_grade($instance->id, $student1->id, 50.0, -1, true, 'released', false, $feedbackpluginparams);",
          "948:         $this->assertEquals(0, count($result));",
          "950:         $result = mod_assign_external::get_grades(array($instance->id));",
          "952:         $this->assertEquals($result['assignments'][0]['grades'][0]['grade'], '50.0');",
          "954:     }",
          "959:     public function test_copy_previous_attempt() {",
          "960:         global $DB, $USER;",
          "962:         $this->resetAfterTest(true);",
          "964:         $course = self::getDataGenerator()->create_course();",
          "966:         $teacher = self::getDataGenerator()->create_user();",
          "967:         $teacherrole = $DB->get_record('role', array('shortname'=>'teacher'));",
          "968:         $this->getDataGenerator()->enrol_user($teacher->id,",
          "969:                                               $course->id,",
          "970:                                               $teacherrole->id);",
          "971:         $this->setUser($teacher);",
          "973:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_assign');",
          "974:         $params['course'] = $course->id;",
          "975:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "976:         $params['assignsubmission_file_enabled'] = 0;",
          "977:         $params['assignfeedback_file_enabled'] = 0;",
          "978:         $params['attemptreopenmethod'] = 'manual';",
          "979:         $params['maxattempts'] = 5;",
          "980:         $instance = $generator->create_instance($params);",
          "981:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "982:         $context = context_module::instance($cm->id);",
          "984:         $assign = new assign($context, $cm, $course);",
          "986:         $student1 = self::getDataGenerator()->create_user();",
          "987:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "988:         $this->getDataGenerator()->enrol_user($student1->id,",
          "989:                                               $course->id,",
          "990:                                               $studentrole->id);",
          "992:         $this->setUser($student1);",
          "993:         $draftidonlinetext = file_get_unused_draft_itemid();",
          "994:         $submissionpluginparams = array();",
          "995:         $onlinetexteditorparams = array('text'=>'Yeeha!',",
          "996:                                         'format'=>1,",
          "997:                                         'itemid'=>$draftidonlinetext);",
          "998:         $submissionpluginparams['onlinetext_editor'] = $onlinetexteditorparams;",
          "999:         $submissionpluginparams['files_filemanager'] = file_get_unused_draft_itemid();",
          "1000:         $result = mod_assign_external::save_submission($instance->id, $submissionpluginparams);",
          "1002:         $this->setUser($teacher);",
          "1005:         $feedbackpluginparams = array();",
          "1006:         $feedbackpluginparams['files_filemanager'] = file_get_unused_draft_itemid();",
          "1007:         $feedbackeditorparams = array('text'=>'Yeeha!',",
          "1008:                                         'format'=>1);",
          "1009:         $feedbackpluginparams['assignfeedbackcomments_editor'] = $feedbackeditorparams;",
          "1010:         $result = mod_assign_external::save_grade($instance->id, $student1->id, 50.0, -1, true, 'released', false, $feedbackpluginparams);",
          "1012:         $this->setUser($student1);",
          "1014:         $result = mod_assign_external::copy_previous_attempt($instance->id);",
          "1016:         $this->assertEquals(0, count($result));",
          "1018:         $this->setUser($teacher);",
          "1019:         $result = mod_assign_external::get_submissions(array($instance->id));",
          "1022:         $this->assertEquals($result['assignments'][0]['submissions'][0]['attemptnumber'], 1);",
          "1024:         $this->assertNotEmpty($result['assignments'][0]['submissions'][0]['plugins']);",
          "1026:     }",
          "",
          "---------------"
        ],
        "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php": [
          "File: mod/assign/tests/locallib_test.php -> mod/assign/tests/locallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $nopermission = false;",
          "86:         $this->setUser($this->students[0]);",
          "87:         $this->setExpectedException('required_capability_exception');",
          "91:         $nopermission = false;",
          "92:         $this->setUser($this->teachers[0]);",
          "93:         $this->setExpectedException('required_capability_exception');",
          "97:         $this->setUser($this->editingteachers[0]);",
          "98:         $this->setExpectedException('moodle_exception');",
          "102:         $this->editingteachers[0]->ignoresesskey = true;",
          "103:         $this->setUser($this->editingteachers[0]);",
          "105:         $this->assertEquals(false, $assign->is_blind_marking());",
          "108:         $gradingtable = new assign_grading_table($assign, 1, '', 0, true);",
          "",
          "[Removed Lines]",
          "88:         $assign->testable_process_reveal_identities();",
          "94:         $assign->testable_process_reveal_identities();",
          "99:         $assign->testable_process_reveal_identities();",
          "104:         $assign->testable_process_reveal_identities();",
          "",
          "[Added Lines]",
          "86:         $this->students[0]->ignoresesskey = true;",
          "89:         $assign->reveal_identities();",
          "90:         $this->students[0]->ignoresesskey = false;",
          "94:         $this->teachers[0]->ignoresesskey = true;",
          "97:         $assign->reveal_identities();",
          "98:         $this->teachers[0]->ignoresesskey = false;",
          "103:         $assign->reveal_identities();",
          "108:         $assign->reveal_identities();",
          "110:         $this->editingteachers[0]->ignoresesskey = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1016:         $assign = $this->create_instance();",
          "1017:         $sink = $this->redirectEvents();",
          "1021:         $events = $sink->get_events();",
          "1022:         $this->assertCount(1, $events);",
          "",
          "[Removed Lines]",
          "1019:         $assign->testable_process_lock($this->students[0]->id);",
          "",
          "[Added Lines]",
          "1024:         $assign->lock_submission($this->students[0]->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1049:         $assign = $this->create_instance(array('blindmarking'=>1));",
          "1050:         $sink = $this->redirectEvents();",
          "1054:         $events = $sink->get_events();",
          "1055:         $this->assertCount(1, $events);",
          "",
          "[Removed Lines]",
          "1052:         $assign->testable_process_reveal_identities();",
          "",
          "[Added Lines]",
          "1057:         $assign->reveal_identities();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1083:         $assign->testable_update_submission($submission, $this->students[0]->id, true, false);",
          "1085:         $sink = $this->redirectEvents();",
          "1088:         $events = $sink->get_events();",
          "1089:         $this->assertCount(1, $events);",
          "",
          "[Removed Lines]",
          "1086:         $assign->testable_process_revert_to_draft($this->students[0]->id);",
          "",
          "[Added Lines]",
          "1091:         $assign->revert_to_draft($this->students[0]->id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1192:         $sink = $this->redirectEvents();",
          "1193:         $notices = null;",
          "1196:         $events = $sink->get_events();",
          "1197:         $this->assertCount(1, $events);",
          "",
          "[Removed Lines]",
          "1194:         $assign->testable_process_copy_previous_attempt($notices);",
          "",
          "[Added Lines]",
          "1199:         $assign->copy_previous_attempt($notices);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221:         $assign = $this->create_instance();",
          "1222:         $sink = $this->redirectEvents();",
          "1226:         $events = $sink->get_events();",
          "1227:         $this->assertCount(1, $events);",
          "",
          "[Removed Lines]",
          "1224:         $assign->testable_process_unlock($this->students[0]->id);",
          "",
          "[Added Lines]",
          "1229:         $assign->unlock_submission($this->students[0]->id);",
          "",
          "---------------"
        ],
        "mod/assign/version.php||mod/assign/version.php": [
          "File: mod/assign/version.php -> mod/assign/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $module->component = 'mod_assign'; // Full name of the plugin (used for diagnostics).",
          "29: $module->requires = 2013050100;    // Requires this Moodle version.",
          "30: $module->cron     = 60;",
          "",
          "[Removed Lines]",
          "28: $module->version  = 2013070902;    // The current module version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "28: $module->version  = 2013080800;    // The current module version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57fbd5f91f9036e5b29e9ab4b02448a41d80eea2",
      "candidate_info": {
        "commit_hash": "57fbd5f91f9036e5b29e9ab4b02448a41d80eea2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/57fbd5f91f9036e5b29e9ab4b02448a41d80eea2",
        "files": [
          "mod/assign/db/access.php",
          "mod/assign/externallib.php",
          "mod/assign/gradingtable.php",
          "mod/assign/lang/en/assign.php",
          "mod/assign/locallib.php",
          "mod/assign/tests/locallib_test.php",
          "mod/assign/version.php"
        ],
        "message": "MDL-28448 Assign: Add a new capability that lets teachers mess with student submissions.",
        "before_after_code_files": [
          "mod/assign/db/access.php||mod/assign/db/access.php",
          "mod/assign/externallib.php||mod/assign/externallib.php",
          "mod/assign/gradingtable.php||mod/assign/gradingtable.php",
          "mod/assign/lang/en/assign.php||mod/assign/lang/en/assign.php",
          "mod/assign/locallib.php||mod/assign/locallib.php",
          "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php",
          "mod/assign/version.php||mod/assign/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ],
          "candidate": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/assign/db/access.php||mod/assign/db/access.php": [
          "File: mod/assign/db/access.php -> mod/assign/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         'clonepermissionsfrom' => 'moodle/course:manageactivities'",
          "83:     ),",
          "85:     'mod/assign:grantextension' => array(",
          "86:         'captype' => 'write',",
          "87:         'contextlevel' => CONTEXT_MODULE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     'mod/assign:editothersubmission' => array(",
          "86:         'riskbitmask' => RISK_MANAGETRUST|RISK_DATALOSS|RISK_PERSONAL,",
          "87:         'captype' => 'write',",
          "88:         'contextlevel' => CONTEXT_MODULE",
          "89:     ),",
          "",
          "---------------"
        ],
        "mod/assign/externallib.php||mod/assign/externallib.php": [
          "File: mod/assign/externallib.php -> mod/assign/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1422:         $warnings = array();",
          "1423:         $data = new stdClass();",
          "1424:         $data->submissionstatement = $acceptsubmissionstatement;",
          "1428:             $warnings[] = self::generate_warning($assignmentid,",
          "1429:                                                  'couldnotsubmitforgrading',",
          "1430:                                                  $detail);",
          "",
          "[Removed Lines]",
          "1426:         if (!$assignment->submit_for_grading($data)) {",
          "1427:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "",
          "[Added Lines]",
          "1425:         $notices = array();",
          "1427:         if (!$assignment->submit_for_grading($data, $notices)) {",
          "1428:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid . ' Notices:' . implode(', ', $notices);",
          "",
          "---------------"
        ],
        "mod/assign/gradingtable.php||mod/assign/gradingtable.php": [
          "File: mod/assign/gradingtable.php -> mod/assign/gradingtable.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:     public function col_userid(stdClass $row) {",
          "965:         $edit = '';",
          "967:         $actions = array();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "965:         global $USER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "978:         }",
          "979:         $actions[$url->out(false)] = $description;",
          "982:         if ($this->assignment->is_any_submission_plugin_enabled()) {",
          "983:             if (!$row->status ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:         $submissionsopen = $this->assignment->submissions_open($row->id);",
          "984:         $caneditsubmission = $this->assignment->can_edit_submission($row->id, $USER->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1018:                 $description = get_string('grantextension', 'assign');",
          "1019:                 $actions[$url->out(false)] = $description;",
          "1020:             }",
          "1021:         }",
          "1022:         if ($row->status == ASSIGN_SUBMISSION_STATUS_SUBMITTED &&",
          "1023:                 $this->assignment->get_instance()->submissiondrafts) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026:             if ($submissionsopen &&",
          "1027:                     $USER->id != $row->id &&",
          "1028:                     $caneditsubmission) {",
          "1029:                 $urlparams = array('id' => $this->assignment->get_course_module()->id,",
          "1030:                                    'userid'=>$row->id,",
          "1031:                                    'action'=>'editsubmission',",
          "1032:                                    'sesskey'=>sesskey(),",
          "1033:                                    'page'=>$this->currpage);",
          "1034:                 $url = new moodle_url('/mod/assign/view.php', $urlparams);",
          "1035:                 $description = get_string('editsubmission', 'assign');",
          "1036:                 $actions[$url->out(false)] = $description;",
          "1037:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1030:             $description = get_string('reverttodraftshort', 'assign');",
          "1031:             $actions[$url->out(false)] = $description;",
          "1032:         }",
          "1034:         $ismanual = $this->assignment->get_instance()->attemptreopenmethod == ASSIGN_ATTEMPT_REOPEN_METHOD_MANUAL;",
          "1035:         $hassubmission = !empty($row->status);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:         if ($row->status == ASSIGN_SUBMISSION_STATUS_DRAFT &&",
          "1051:                 $this->assignment->get_instance()->submissiondrafts &&",
          "1052:                 $caneditsubmission &&",
          "1053:                 $submissionsopen &&",
          "1054:                 $row->id != $USER->id) {",
          "1055:             $urlparams = array('id' => $this->assignment->get_course_module()->id,",
          "1056:                                'userid'=>$row->id,",
          "1057:                                'action'=>'submitotherforgrading',",
          "1058:                                'sesskey'=>sesskey(),",
          "1059:                                'page'=>$this->currpage);",
          "1060:             $url = new moodle_url('/mod/assign/view.php', $urlparams);",
          "1061:             $description = get_string('submitforgrading', 'assign');",
          "1062:             $actions[$url->out(false)] = $description;",
          "1063:         }",
          "",
          "---------------"
        ],
        "mod/assign/lang/en/assign.php||mod/assign/lang/en/assign.php": [
          "File: mod/assign/lang/en/assign.php -> mod/assign/lang/en/assign.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: $string['applytoteam'] = 'Apply grades and feedback to entire group';",
          "43: $string['assign:addinstance'] = 'Add a new assignment';",
          "44: $string['assign:exportownsubmission'] = 'Export own submission';",
          "45: $string['assign:grade'] = 'Grade assignment';",
          "46: $string['assign:grantextension'] = 'Grant extension';",
          "47: $string['assign:manageallocations'] = 'Manage markers allocated to submissions';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: $string['assign:editothersubmission'] = 'Edit another students submission';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: $string['editattemptfeedback'] = 'Edit the grade and feedback for attempt number {$a}.';",
          "136: $string['editingpreviousfeedbackwarning'] = 'You are editing the feedback for a previous attempt. This is attempt {$a->attemptnumber} out of {$a->totalattempts}.';",
          "137: $string['editsubmission'] = 'Edit submission';",
          "138: $string['editsubmission_help'] = 'Make changes to your submission';",
          "139: $string['editingstatus'] = 'Editing status';",
          "140: $string['editaction'] = 'Actions...';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: $string['editsubmissionother'] = 'Edit submission for {$a}';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350: $string['submissionnotready'] = 'This assignment is not ready to submit:';",
          "351: $string['submissionplugins'] = 'Submission plugins';",
          "352: $string['submissionreceipts'] = 'Send submission receipts';",
          "353: $string['submissionreceipttext'] = 'You have submitted an",
          "354: assignment submission for \\'{$a->assignment}\\'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: $string['submissionreceiptothertext'] = 'Your assignment submission for",
          "356: \\'{$a->assignment}\\' has been submitted.",
          "358: You can see the status of your assignment submission:",
          "360:     {$a->url}';",
          "361: $string['submissionreceiptotherhtml'] = 'Your assignment submission for",
          "362: \\'<i>{$a->assignment}</i>\\' has been submitted.<br /><br />",
          "363: You can see the status of your <a href=\"{$a->url}\">assignment submission</a>.';",
          "364: $string['submissionreceiptothersmall'] = 'Your assignment submission for {$a->assignment} has been submitted.';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381: $string['submissionteam'] = 'Group';",
          "382: $string['submission'] = 'Submission';",
          "383: $string['submitaction'] = 'Submit';",
          "384: $string['submitassignment_help'] = 'Once this assignment is submitted you will not be able to make any more changes.';",
          "385: $string['submitassignment'] = 'Submit assignment';",
          "386: $string['submittedearly'] = 'Assignment was submitted {$a} early';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396: $string['submitforgrading'] = 'Submit for grading';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "426: $string['submissiontypes'] = 'Submission types';",
          "427: $string['feedbacktypes'] = 'Feedback types';",
          "428: $string['groupsubmissionsettings'] = 'Group submission settings';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: $string['submissionlog'] = 'Student: {$a->fullname}, Status: {$a->status}';",
          "",
          "---------------"
        ],
        "mod/assign/locallib.php||mod/assign/locallib.php": [
          "File: mod/assign/locallib.php -> mod/assign/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:             $nextpageparams['action'] = 'grading';",
          "418:         } else if ($action == 'confirmsubmit') {",
          "419:             $action = 'submit';",
          "421:                 $action = 'redirect';",
          "422:                 $nextpageparams['action'] = 'view';",
          "423:             }",
          "424:         } else if ($action == 'gradingbatchoperation') {",
          "425:             $action = $this->process_grading_batch_operation($mform);",
          "",
          "[Removed Lines]",
          "420:             if ($this->process_submit_for_grading($mform)) {",
          "",
          "[Added Lines]",
          "420:             if ($this->process_submit_for_grading($mform, $notices)) {",
          "423:             } else if ($notices) {",
          "424:                 $action = 'viewsubmitforgradingerror';",
          "425:             }",
          "426:         } else if ($action == 'submitotherforgrading') {",
          "427:             if ($this->process_submit_other_for_grading($mform, $notices)) {",
          "428:                 $action = 'redirect';",
          "429:                 $nextpageparams['action'] = 'grading';",
          "430:             } else {",
          "431:                 $action = 'viewsubmitforgradingerror';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:              $o .= $this->view_batch_set_workflow_state($mform);",
          "522:         } else if ($action == 'viewbatchmarkingallocation') {",
          "523:             $o .= $this->view_batch_markingallocation($mform);",
          "524:         } else {",
          "525:             $o .= $this->view_submission_page();",
          "526:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:         } else if ($action == 'viewsubmitforgradingerror') {",
          "534:             $o .= $this->view_error_page(get_string('submitforgrading', 'assign'), $notices);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3193:         global $CFG;",
          "3195:         $o = '';",
          "3199:         $header = new assign_header($this->get_instance(),",
          "3200:                                     $this->get_context(),",
          "3201:                                     $this->show_intro(),",
          "3202:                                     $this->get_course_module()->id,",
          "3204:         $o .= $this->get_renderer()->render($header);",
          "3208:         $o .= $this->view_footer();",
          "3210:         return $o;",
          "3212:     }",
          "",
          "[Removed Lines]",
          "3192:     protected function view_student_error_message() {",
          "3197:         require_capability('mod/assign:submit', $this->context);",
          "3203:                                     get_string('editsubmission', 'assign'));",
          "3206:         $o .= $this->get_renderer()->notification(get_string('submissionsclosed', 'assign'));",
          "",
          "[Added Lines]",
          "3205:     protected function view_notices($title, $notices) {",
          "3214:                                     $title);",
          "3217:         foreach ($notices as $notice) {",
          "3218:             $o .= $this->get_renderer()->notification($notice);",
          "3219:         }",
          "3221:         $url = new moodle_url('/mod/assign/view.php', array('id'=>$this->get_course_module()->id, 'action'=>'view'));",
          "3222:         $o .= $this->get_renderer()->continue_button($url);",
          "3227:     }",
          "3235:     protected function fullname($user) {",
          "3236:         if ($this->is_blind_marking()) {",
          "3237:             $uniqueid = $this->get_uniqueid_for_user($userid);",
          "3238:             return get_string('participant', 'assign') . ' ' . $uniqueid;",
          "3239:         } else {",
          "3240:             return fullname($user);",
          "3241:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3222:     protected function view_edit_submission_page($mform, $notices) {",
          "3225:         $o = '';",
          "3226:         require_once($CFG->dirroot . '/mod/assign/submission_form.php');",
          "3232:         }",
          "3233:         $o .= $this->get_renderer()->render(new assign_header($this->get_instance(),",
          "3234:                                                       $this->get_context(),",
          "3235:                                                       $this->show_intro(),",
          "3236:                                                       $this->get_course_module()->id,",
          "3239:         $data = new stdClass();",
          "3241:         if (!$mform) {",
          "3242:             $mform = new mod_assign_submission_form(null, array($this, $data));",
          "3243:         }",
          "",
          "[Removed Lines]",
          "3223:         global $CFG;",
          "3228:         require_capability('mod/assign:submit', $this->context);",
          "3230:         if (!$this->submissions_open()) {",
          "3231:             return $this->view_student_error_message();",
          "3237:                                                       get_string('editsubmission', 'assign')));",
          "3238:         $o .= $this->plagiarism_print_disclosure();",
          "",
          "[Added Lines]",
          "3253:         global $CFG, $USER, $DB;",
          "3258:         $userid = optional_param('userid', $USER->id, PARAM_INT);",
          "3259:         $user = clone($USER);",
          "3260:         if ($userid == $USER->id) {",
          "3262:             require_capability('mod/assign:submit', $this->context);",
          "3263:             $title = get_string('editsubmission', 'assign');",
          "3264:         } else {",
          "3266:             if (!$this->can_edit_submission($userid, $USER->id)) {",
          "3267:                 print_error('nopermission');",
          "3268:             }",
          "3270:             $user = $DB->get_record('user', array('id'=>$userid), '*', MUST_EXIST);",
          "3271:             $name = $this->fullname($user);",
          "3272:             $title = get_string('editsubmissionother', 'assign', $name);",
          "3275:         if (!$this->submissions_open($userid)) {",
          "3276:             $message = array(get_string('submissionsclosed', 'assign'));",
          "3277:             return $this->view_notices($title, $message);",
          "3278:         }",
          "3284:                                                       $title));",
          "3285:         if ($userid == $USER->id) {",
          "3287:             $o .= $this->plagiarism_print_disclosure();",
          "3288:         }",
          "3290:         $data->userid = $userid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3249:         $o .= $this->get_renderer()->render(new assign_form('editsubmissionform', $mform));",
          "3251:         $o .= $this->view_footer();",
          "3254:         return $o;",
          "3255:     }",
          "",
          "[Removed Lines]",
          "3252:         $this->add_to_log('view submit assignment form', get_string('viewownsubmissionform', 'assign'));",
          "",
          "[Added Lines]",
          "3302:         $this->add_to_log('view submit assignment form', $title);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4266:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4325:     public function can_edit_submission($userid, $graderid = 0) {",
          "4326:         global $USER;",
          "4328:         if (empty($graderid)) {",
          "4329:             $graderid = $USER->id;",
          "4330:         }",
          "4332:         if ($userid == $graderid &&",
          "4333:                 $this->submissions_open($userid) &&",
          "4334:                 has_capability('mod/assign:submit', $this->context, $graderid)) {",
          "4336:             return true;",
          "4337:         }",
          "4339:         if (!has_capability('mod/assign:editothersubmission', $this->context, $graderid)) {",
          "4340:             return false;",
          "4341:         }",
          "4343:         $cm = $this->get_course_module();",
          "4344:         if (groups_get_activity_groupmode($cm) == SEPARATEGROUPS) {",
          "4346:             $studentgroups = array_keys(groups_get_activity_allowed_groups($cm, $userid));",
          "4347:             $gradergroups = array_keys(groups_get_activity_allowed_groups($cm, $graderid));",
          "4349:             return count(array_intersect($studentgroups, $gradergroups)) > 0;",
          "4350:         }",
          "4351:         return true;",
          "4352:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4536:         } else {",
          "4537:             $user = $USER;",
          "4538:         }",
          "4544:     }",
          "",
          "[Removed Lines]",
          "4539:         $this->send_notification($user,",
          "4540:                                  $user,",
          "4541:                                  'submissionreceipt',",
          "4542:                                  'assign_notification',",
          "4543:                                  $submission->timemodified);",
          "",
          "[Added Lines]",
          "4625:         if ($submission->userid == $USER->id) {",
          "4626:             $this->send_notification(core_user::get_noreply_user(),",
          "4627:                                      $user,",
          "4628:                                      'submissionreceipt',",
          "4629:                                      'assign_notification',",
          "4630:                                      $submission->timemodified);",
          "4631:         } else {",
          "4632:             $this->send_notification($USER,",
          "4633:                                      $user,",
          "4634:                                      'submissionreceiptother',",
          "4635:                                      'assign_notification',",
          "4636:                                      $submission->timemodified);",
          "4637:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4586:         global $USER;",
          "4591:         $instance = $this->get_instance();",
          "4593:         if ($instance->teamsubmission) {",
          "4595:         } else {",
          "4597:         }",
          "4600:             return false;",
          "4601:         }",
          "4604:             return false;",
          "4605:         }",
          "",
          "[Removed Lines]",
          "4585:     public function submit_for_grading($data) {",
          "4589:         require_capability('mod/assign:submit', $this->context);",
          "4594:             $submission = $this->get_group_submission($USER->id, 0, true);",
          "4596:             $submission = $this->get_user_submission($USER->id, true);",
          "4599:         if (!$this->submissions_open($USER->id)) {",
          "4603:         if ($instance->requiresubmissionstatement && !$data->submissionstatement) {",
          "",
          "[Added Lines]",
          "4681:     public function submit_for_grading($data, $notices) {",
          "4684:         $userid = $USER->id;",
          "4685:         if (!empty($data->userid)) {",
          "4686:             $userid = $data->userid;",
          "4687:         }",
          "4689:         if ($userid == $USER->id) {",
          "4690:             require_capability('mod/assign:submit', $this->context);",
          "4691:         } else {",
          "4692:             if (!$this->can_edit_submission($userid, $USER->id)) {",
          "4693:                 print_error('nopermission');",
          "4694:             }",
          "4695:         }",
          "4700:             $submission = $this->get_group_submission($userid, 0, true);",
          "4702:             $submission = $this->get_user_submission($userid, true);",
          "4705:         if (!$this->submissions_open($userid)) {",
          "4706:             $notices[] = get_string('submissionsclosed', 'assign');",
          "4710:         if ($instance->requiresubmissionstatement && empty($data->submissionstatement) && $USER->id == $userid) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4614:             }",
          "4616:             $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "4618:             $completion = new completion_info($this->get_course());",
          "4619:             if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "4621:             }",
          "4624:                 $logmessage = get_string('submissionstatementacceptedlog',",
          "4625:                                          'mod_assign',",
          "4626:                                          fullname($USER));",
          "",
          "[Removed Lines]",
          "4617:             $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "4620:                 $completion->update_state($this->get_course_module(), COMPLETION_COMPLETE, $USER->id);",
          "4623:             if (!empty($data->submissionstatement)) {",
          "",
          "[Added Lines]",
          "4724:             $this->update_submission($submission, $userid, true, $instance->teamsubmission);",
          "4727:                 $completion->update_state($this->get_course_module(), COMPLETION_COMPLETE, $userid);",
          "4730:             if (!empty($data->submissionstatement) && $USER->id == $userid) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4643:             $event->trigger();",
          "4644:             return true;",
          "4645:         }",
          "4646:         return false;",
          "4647:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4753:         $notices[] = get_string('submissionsclosed', 'assign');",
          "4762:     protected function process_submit_other_for_grading($mform, $notices) {",
          "4763:         global $USER, $CFG;",
          "4765:         require_sesskey();",
          "4767:         $userid = optional_param('userid', $USER->id, PARAM_INT);",
          "4769:         if (!$this->submissions_open($userid)) {",
          "4770:             $notices[] = get_string('submissionsclosed', 'assign');",
          "4771:             return false;",
          "4772:         }",
          "4773:         $data = new stdClass();",
          "4774:         $data->userid = $userid;",
          "4775:         return $this->submit_for_grading($data, $notices);",
          "4776:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4659:         require_once($CFG->dirroot . '/mod/assign/submissionconfirmform.php');",
          "4660:         require_sesskey();",
          "4662:         if (!$this->submissions_open()) {",
          "4664:         }",
          "4665:         $instance = $this->get_instance();",
          "4666:         $data = new stdClass();",
          "",
          "[Removed Lines]",
          "4656:     protected function process_submit_for_grading($mform) {",
          "4657:         global $USER, $CFG;",
          "4663:             return $this->view_student_error_message();",
          "",
          "[Added Lines]",
          "4785:     protected function process_submit_for_grading($mform, $notices) {",
          "4786:         global $CFG;",
          "4792:             $notices[] = get_string('submissionsclosed', 'assign');",
          "4793:             return false;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4685:             if ($mform->get_data() == false) {",
          "4686:                 return false;",
          "4687:             }",
          "4689:         }",
          "4690:         return true;",
          "4691:     }",
          "",
          "[Removed Lines]",
          "4688:             return $this->submit_for_grading($data);",
          "",
          "[Added Lines]",
          "4818:             return $this->submit_for_grading($data, $notices);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5163:     protected function format_submission_for_log(stdClass $submission) {",
          "5164:         $info = '';",
          "5170:         foreach ($this->submissionplugins as $plugin) {",
          "5171:             if ($plugin->is_enabled() && $plugin->is_visible()) {",
          "",
          "[Removed Lines]",
          "5165:         $info .= get_string('submissionstatus', 'assign') .",
          "5166:                  ': ' .",
          "5167:                  get_string('submissionstatus_' . $submission->status, 'assign') .",
          "5168:                  '. <br>';",
          "",
          "[Added Lines]",
          "5294:         global $DB;",
          "5297:         if ($submission->userid) {",
          "5298:             $user = $DB->get_record('user', array('id' => $submission->userid), '*', MUST_EXIST);",
          "5299:             $name = fullname($user);",
          "5300:         } else {",
          "5301:             $group = $DB->get_record('groups', array('id' => $submission->groupid), '*', MUST_EXIST);",
          "5302:             $name = $group->name;",
          "5303:         }",
          "5304:         $status = get_string('submissionstatus_' . $submission->status, 'assign');",
          "5305:         $params = array('id'=>$submission->userid, 'fullname'=>$name, 'status'=>$status);",
          "5306:         $info .= get_string('submissionlog', 'assign', $params) . ' <br>';",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5321:     public function save_submission(stdClass $data, & $notices) {",
          "5325:         $instance = $this->get_instance();",
          "5327:         if ($instance->teamsubmission) {",
          "5329:         } else {",
          "5331:         }",
          "5332:         if ($instance->submissiondrafts) {",
          "5333:             $submission->status = ASSIGN_SUBMISSION_STATUS_DRAFT;",
          "",
          "[Removed Lines]",
          "5322:         global $CFG, $USER;",
          "5324:         require_capability('mod/assign:submit', $this->context);",
          "5328:             $submission = $this->get_group_submission($USER->id, 0, true);",
          "5330:             $submission = $this->get_user_submission($USER->id, true);",
          "",
          "[Added Lines]",
          "5460:         global $CFG, $USER, $DB;",
          "5462:         $userid = $USER->id;",
          "5463:         if (!empty($data->userid)) {",
          "5464:             $userid = $data->userid;",
          "5465:         }",
          "5467:         $user = clone($USER);",
          "5468:         if ($userid == $USER->id) {",
          "5469:             require_capability('mod/assign:submit', $this->context);",
          "5470:         } else {",
          "5471:             $user = $DB->get_record('user', array('id'=>$userid), '*', MUST_EXIST);",
          "5472:             if (!$this->can_edit_submission($userid, $USER->id)) {",
          "5473:                 print_error('nopermission');",
          "5474:             }",
          "5475:         }",
          "5479:             $submission = $this->get_group_submission($userid, 0, true);",
          "5481:             $submission = $this->get_user_submission($userid, true);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5335:             $submission->status = ASSIGN_SUBMISSION_STATUS_SUBMITTED;",
          "5336:         }",
          "5341:         if ($flags && $flags->locked) {",
          "",
          "[Removed Lines]",
          "5338:         $flags = $this->get_user_flags($USER->id, false);",
          "",
          "[Added Lines]",
          "5489:         $flags = $this->get_user_flags($userid, false);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5360:             return false;",
          "5361:         }",
          "5367:             $logmessage = get_string('submissionstatementacceptedlog',",
          "5368:                                      'mod_assign',",
          "5369:                                      fullname($USER));",
          "",
          "[Removed Lines]",
          "5363:         $this->update_submission($submission, $USER->id, true, $instance->teamsubmission);",
          "5366:         if (isset($data->submissionstatement)) {",
          "",
          "[Added Lines]",
          "5514:         $this->update_submission($submission, $userid, true, $instance->teamsubmission);",
          "5517:         if (isset($data->submissionstatement) && ($userid == $USER->id)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5392:         }",
          "5393:         $completion = new completion_info($this->get_course());",
          "5394:         if ($completion->is_enabled($this->get_course_module()) && $instance->completionsubmit) {",
          "5396:         }",
          "5398:         if (!$instance->submissiondrafts) {",
          "",
          "[Removed Lines]",
          "5395:             $completion->update_state($this->get_course_module(), $complete, $USER->id);",
          "",
          "[Added Lines]",
          "5546:             $completion->update_state($this->get_course_module(), $complete, $userid);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5423:     protected function process_save_submission(&$mform, &$notices) {",
          "5427:         require_once($CFG->dirroot . '/mod/assign/submission_form.php');",
          "5430:         require_sesskey();",
          "5432:             $notices[] = get_string('duedatereached', 'assign');",
          "5433:             return false;",
          "5434:         }",
          "5435:         $instance = $this->get_instance();",
          "5437:         $data = new stdClass();",
          "5438:         $mform = new mod_assign_submission_form(null, array($this, $data));",
          "5439:         if ($mform->is_cancelled()) {",
          "5440:             return true;",
          "",
          "[Removed Lines]",
          "5424:         global $CFG;",
          "5431:         if (!$this->submissions_open()) {",
          "",
          "[Added Lines]",
          "5575:         global $CFG, $USER;",
          "5580:         $userid = optional_param('userid', $USER->id, PARAM_INT);",
          "5583:         if (!$this->submissions_open($userid)) {",
          "5590:         $data->userid = $userid;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5839:     public function add_submission_form_elements(MoodleQuickForm $mform, stdClass $data) {",
          "5840:         global $USER;",
          "5843:         if ($this->get_instance()->teamsubmission) {",
          "5845:         } else {",
          "5847:         }",
          "",
          "[Removed Lines]",
          "5844:             $submission = $this->get_group_submission($USER->id, 0, false);",
          "5846:             $submission = $this->get_user_submission($USER->id, false);",
          "",
          "[Added Lines]",
          "5995:         $userid = $data->userid;",
          "5998:             $submission = $this->get_group_submission($userid, 0, false);",
          "6000:             $submission = $this->get_user_submission($userid, false);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5855:         $draftsenabled = $this->get_instance()->submissiondrafts;",
          "5859:             $submissionstatement = '';",
          "5860:             if (!empty($adminconfig->submissionstatement)) {",
          "",
          "[Removed Lines]",
          "5857:         if ($requiresubmissionstatement && !$draftsenabled) {",
          "",
          "[Added Lines]",
          "6012:         if ($requiresubmissionstatement && !$draftsenabled && $userid == $USER->id) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5864:             $mform->addRule('submissionstatement', get_string('required'), 'required', null, 'client');",
          "5865:         }",
          "5870:         $mform->addElement('hidden', 'id', $this->get_course_module()->id);",
          "5871:         $mform->setType('id', PARAM_INT);",
          "5873:         $mform->addElement('hidden', 'action', 'savesubmission');",
          "5874:         $mform->setType('action', PARAM_TEXT);",
          "5875:     }",
          "",
          "[Removed Lines]",
          "5867:         $this->add_plugin_submission_elements($submission, $mform, $data, $USER->id);",
          "",
          "[Added Lines]",
          "6022:         $this->add_plugin_submission_elements($submission, $mform, $data, $userid);",
          "6028:         $mform->addElement('hidden', 'userid', $userid);",
          "6029:         $mform->setType('userid', PARAM_INT);",
          "",
          "---------------"
        ],
        "mod/assign/tests/locallib_test.php||mod/assign/tests/locallib_test.php": [
          "File: mod/assign/tests/locallib_test.php -> mod/assign/tests/locallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:         $this->editingteachers[0]->ignoresesskey = false;",
          "1279:     }",
          "1281:     public function test_marker_updated_event() {",
          "1282:         $this->editingteachers[0]->ignoresesskey = true;",
          "1283:         $this->setUser($this->editingteachers[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1281:     public function test_teacher_submit_for_student() {",
          "1282:         global $PAGE;",
          "1284:         $this->preventResetByRollback();",
          "1285:         $sink = $this->redirectMessages();",
          "1287:         $this->setUser($this->editingteachers[0]);",
          "1289:         $assign = $this->create_instance(array('assignsubmission_onlinetext_enabled'=>1, 'submissiondrafts'=>1));",
          "1290:         $PAGE->set_url(new moodle_url('/mod/assign/view.php', array('id' => $assign->get_course_module()->id)));",
          "1292:         $this->setUser($this->students[0]);",
          "1294:         $data = new stdClass();",
          "1295:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "1296:                                          'text'=>'Student submission text',",
          "1297:                                          'format'=>FORMAT_MOODLE);",
          "1299:         $notices = array();",
          "1300:         $assign->save_submission($data, $notices);",
          "1303:         $output = $assign->view_student_summary($this->students[0], true);",
          "1304:         $this->assertContains('Student submission text', $output, 'Contains student submission text');",
          "1307:         $this->setUser($this->teachers[0]);",
          "1308:         $data = new stdClass();",
          "1309:         $data->userid = $this->students[0]->id;",
          "1310:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "1311:                                          'text'=>'Teacher edited submission text',",
          "1312:                                          'format'=>FORMAT_MOODLE);",
          "1315:         $roleid = create_role('Dummy role', 'dummyrole', 'dummy role description');",
          "1316:         assign_capability('mod/assign:editothersubmission', CAP_ALLOW, $roleid, $assign->get_context()->id);",
          "1317:         role_assign($roleid, $this->teachers[0]->id, $assign->get_context()->id);",
          "1318:         accesslib_clear_all_caches_for_unit_testing();",
          "1321:         $notices = array();",
          "1322:         $assign->save_submission($data, $notices);",
          "1325:         $data = new stdClass();",
          "1326:         $data->userid = $this->students[0]->id;",
          "1327:         $notices = array();",
          "1328:         $assign->submit_for_grading($data, $notices);",
          "1331:         $assign->revert_to_draft($this->students[0]->id);",
          "1333:         $this->setUser($this->students[0]);",
          "1336:         $output = $assign->view_student_summary($this->students[0], true);",
          "1337:         $this->assertContains('Teacher edited submission text', $output, 'Contains student submission text');",
          "1340:         $data = new stdClass();",
          "1341:         $assign->submit_for_grading($data, $notices);",
          "1343:         $output = $assign->view_student_summary($this->students[0], true);",
          "1344:         $this->assertNotContains(get_string('addsubmission', 'assign'), $output);",
          "1347:         $this->setUser($this->editingteachers[1]);",
          "1350:         $assign->revert_to_draft($this->students[0]->id);",
          "1352:         $data = new stdClass();",
          "1353:         $data->userid = $this->students[0]->id;",
          "1354:         $data->onlinetext_editor = array('itemid'=>file_get_unused_draft_itemid(),",
          "1355:                                          'text'=>'Teacher 2 edited submission text',",
          "1356:                                          'format'=>FORMAT_MOODLE);",
          "1358:         $notices = array();",
          "1359:         $this->setExpectedException('moodle_exception');",
          "1360:         $assign->save_submission($data, $notices);",
          "1362:         $sink->close();",
          "1363:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1669:         $plugin = $assign->get_feedback_plugin_by_type($gradebookplugintype);",
          "1670:         $this->assertEquals(0, $plugin->is_enabled('enabled'));",
          "1671:     }",
          "1672: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1760:     public function test_can_edit_submission() {",
          "1761:         global $PAGE, $DB;",
          "1762:         $this->create_extra_users();",
          "1764:         $this->setAdminUser();",
          "1766:         $assign = $this->create_instance(array('assignsubmission_onlinetext_enabled'=>1, 'submissiondrafts'=>1));",
          "1767:         $PAGE->set_url(new moodle_url('/mod/assign/view.php', array('id' => $assign->get_course_module()->id)));",
          "1770:         $this->assertTrue($assign->can_edit_submission($this->students[0]->id, $this->students[0]->id));",
          "1772:         $this->assertFalse($assign->can_edit_submission($this->students[0]->id, $this->students[1]->id));",
          "1775:         $this->assertFalse($assign->can_edit_submission($this->students[0]->id, $this->teachers[0]->id));",
          "1778:         $roleid = create_role('Dummy role', 'dummyrole', 'dummy role description');",
          "1779:         assign_capability('mod/assign:editothersubmission', CAP_ALLOW, $roleid, $assign->get_context()->id);",
          "1780:         role_assign($roleid, $this->teachers[0]->id, $assign->get_context()->id);",
          "1781:         accesslib_clear_all_caches_for_unit_testing();",
          "1783:         $this->assertTrue($assign->can_edit_submission($this->students[0]->id, $this->teachers[0]->id));",
          "1786:         $data = new stdClass();",
          "1787:         $data->courseid = $this->course->id;",
          "1788:         $data->name = 'Grouping';",
          "1789:         $groupingid = groups_create_grouping($data);",
          "1790:         groups_assign_grouping($groupingid, $this->groups[0]->id);",
          "1791:         groups_assign_grouping($groupingid, $this->groups[1]->id);",
          "1792:         $assign = $this->create_instance(array('groupingid' => $groupingid, 'groupmode' => SEPARATEGROUPS));",
          "1795:         assign_capability('mod/assign:editothersubmission', CAP_ALLOW, $roleid, $assign->get_context()->id);",
          "1796:         role_assign($roleid, $this->extrastudents[0]->id, $assign->get_context()->id);",
          "1797:         role_assign($roleid, $this->extrastudents[1]->id, $assign->get_context()->id);",
          "1798:         accesslib_clear_all_caches_for_unit_testing();",
          "1801:         $this->assertFalse($assign->can_edit_submission($this->students[0]->id, $this->extrastudents[1]->id));",
          "1803:         $this->assertTrue($assign->can_edit_submission($this->students[0]->id, $this->extrastudents[0]->id));",
          "1805:     }",
          "",
          "---------------"
        ],
        "mod/assign/version.php||mod/assign/version.php": [
          "File: mod/assign/version.php -> mod/assign/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $module->component = 'mod_assign'; // Full name of the plugin (used for diagnostics).",
          "29: $module->requires = 2013110500;    // Requires this Moodle version.",
          "30: $module->cron     = 60;",
          "",
          "[Removed Lines]",
          "28: $module->version  = 2014010801;    // The current module version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "28: $module->version  = 2014011500;    // The current module version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91327d96ca02d945d439a9169974f5576e41c03a",
      "candidate_info": {
        "commit_hash": "91327d96ca02d945d439a9169974f5576e41c03a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/91327d96ca02d945d439a9169974f5576e41c03a",
        "files": [
          "mod/assign/externallib.php",
          "mod/assign/locallib.php",
          "mod/assign/tests/externallib_test.php"
        ],
        "message": "MDL-37148 assign: Fix missing parameter for submit_for_grading webservice.\n\nIt is required to specify if the user has accepted the submission statement\nto make sure it goes in the log/event.",
        "before_after_code_files": [
          "mod/assign/externallib.php||mod/assign/externallib.php",
          "mod/assign/locallib.php||mod/assign/locallib.php",
          "mod/assign/tests/externallib_test.php||mod/assign/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ],
          "candidate": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/assign/externallib.php||mod/assign/externallib.php": [
          "File: mod/assign/externallib.php -> mod/assign/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1223:     }",
          "1230:     public static function submit_for_grading_parameters() {",
          "1231:         return new external_function_parameters(",
          "1232:             array(",
          "1234:             )",
          "1235:         );",
          "1236:     }",
          "",
          "[Removed Lines]",
          "1233:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on')",
          "",
          "[Added Lines]",
          "1233:                 'assignmentid' => new external_value(PARAM_INT, 'The assignment id to operate on'),",
          "1234:                 'acceptsubmissionstatement' => new external_value(PARAM_BOOL, 'Accept the assignment submission statement')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1246:         global $CFG, $USER;",
          "1247:         require_once(\"$CFG->dirroot/mod/assign/locallib.php\");",
          "1249:         $params = self::validate_parameters(self::submit_for_grading_parameters(),",
          "1252:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1253:         $context = context_module::instance($cm->id);",
          "",
          "[Removed Lines]",
          "1245:     public static function submit_for_grading($assignmentid) {",
          "1250:                                             array('assignmentid' => $assignmentid));",
          "",
          "[Added Lines]",
          "1246:     public static function submit_for_grading($assignmentid, $acceptsubmissionstatement) {",
          "1251:                                             array('assignmentid' => $assignmentid,",
          "1252:                                                   'acceptsubmissionstatement' => $acceptsubmissionstatement));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255:         $assignment = new assign($context, $cm, null);",
          "1257:         $warnings = array();",
          "1259:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "1260:             $warnings[] = self::generate_warning($assignmentid,",
          "1261:                                                  'couldnotsubmitforgrading',",
          "",
          "[Removed Lines]",
          "1258:         if (!$assignment->submit_for_grading()) {",
          "",
          "[Added Lines]",
          "1260:         $data = new stdClass();",
          "1261:         $data->submissionstatement = $acceptsubmissionstatement;",
          "1263:         if (!$assignment->submit_for_grading($data)) {",
          "",
          "---------------"
        ],
        "mod/assign/locallib.php||mod/assign/locallib.php": [
          "File: mod/assign/locallib.php -> mod/assign/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4476:         global $USER;",
          "",
          "[Removed Lines]",
          "4475:     public function submit_for_grading() {",
          "",
          "[Added Lines]",
          "4475:     public function submit_for_grading($data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4490:             return false;",
          "4491:         }",
          "4493:         if ($submission->status != ASSIGN_SUBMISSION_STATUS_SUBMITTED) {",
          "4495:             $plugins = $this->get_submission_plugins();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4493:         if ($instance->requiresubmissionstatement && !$data->submissionstatement) {",
          "4494:             return false;",
          "4495:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4506:                 $completion->update_state($this->get_course_module(), COMPLETION_COMPLETE, $USER->id);",
          "4507:             }",
          "4510:                 $logmessage = get_string('submissionstatementacceptedlog',",
          "4511:                                          'mod_assign',",
          "4512:                                          fullname($USER));",
          "",
          "[Removed Lines]",
          "4509:             if (isset($data->submissionstatement)) {",
          "",
          "[Added Lines]",
          "4513:             if (!empty($data->submissionstatement)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4571:             if ($mform->get_data() == false) {",
          "4572:                 return false;",
          "4573:             }",
          "4575:         }",
          "4576:         return true;",
          "4577:     }",
          "",
          "[Removed Lines]",
          "4574:             return $this->submit_for_grading();",
          "",
          "[Added Lines]",
          "4578:             return $this->submit_for_grading($data);",
          "",
          "---------------"
        ],
        "mod/assign/tests/externallib_test.php||mod/assign/tests/externallib_test.php": [
          "File: mod/assign/tests/externallib_test.php -> mod/assign/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         $params['assignsubmission_onlinetext_enabled'] = 1;",
          "585:         $params['submissiondrafts'] = 1;",
          "586:         $params['sendnotifications'] = 0;",
          "587:         $instance = $generator->create_instance($params);",
          "588:         $cm = get_coursemodule_from_instance('assign', $instance->id);",
          "589:         $context = context_module::instance($cm->id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:         $params['requiresubmissionstatement'] = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:         $plugin = $assign->get_submission_plugin_by_type('onlinetext');",
          "608:         $plugin->save($submission, $data);",
          "613:         $this->assertEquals(0, count($result));",
          "",
          "[Removed Lines]",
          "610:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "",
          "[Added Lines]",
          "611:         $result = mod_assign_external::submit_for_grading($instance->id, false);",
          "614:         $this->assertEquals(1, count($result));",
          "616:         $result = mod_assign_external::submit_for_grading($instance->id, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "657:                                               $studentrole->id);",
          "659:         $this->setUser($student1);",
          "663:         $this->assertEquals(1, count($result));",
          "",
          "[Removed Lines]",
          "660:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "",
          "[Added Lines]",
          "666:         $result = mod_assign_external::submit_for_grading($instance->id, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "675:         $this->assertEquals(0, count($result));",
          "677:         $this->setUser($student1);",
          "679:         $this->assertEquals(0, count($result));",
          "681:         $this->setUser($student1);",
          "",
          "[Removed Lines]",
          "678:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "",
          "[Added Lines]",
          "684:         $result = mod_assign_external::submit_for_grading($instance->id, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "785:         $this->setUser($student1);",
          "787:         $this->assertEquals(0, count($result));",
          "",
          "[Removed Lines]",
          "786:         $result = mod_assign_external::submit_for_grading($instance->id);",
          "",
          "[Added Lines]",
          "792:         $result = mod_assign_external::submit_for_grading($instance->id, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f96b8a1c67f4a106fb7fa78b4338f3c35973f1da",
      "candidate_info": {
        "commit_hash": "f96b8a1c67f4a106fb7fa78b4338f3c35973f1da",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f96b8a1c67f4a106fb7fa78b4338f3c35973f1da",
        "files": [
          "mod/assign/externallib.php"
        ],
        "message": "MDL-43468 mod_assign: Webservice parameters were not safely cleaned",
        "before_after_code_files": [
          "mod/assign/externallib.php||mod/assign/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ],
          "candidate": [
            "mod/assign/externallib.php||mod/assign/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/assign/externallib.php||mod/assign/externallib.php": [
          "File: mod/assign/externallib.php -> mod/assign/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:                         array('assignmentid' => $assignmentid,",
          "1210:                               'userids' => $userids));",
          "1213:         $context = context_module::instance($cm->id);",
          "1215:         $assignment = new assign($context, $cm, null);",
          "1217:         $warnings = array();",
          "1219:             if (!$assignment->lock_submission($userid)) {",
          "1222:                                                      'couldnotlock',",
          "1223:                                                      $detail);",
          "1224:             }",
          "",
          "[Removed Lines]",
          "1212:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1218:         foreach ($userids as $userid) {",
          "1220:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1221:                 $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1212:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1214:         self::validate_context($context);",
          "1219:         foreach ($params['userids'] as $userid) {",
          "1221:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
          "1222:                 $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1272:                         array('assignmentid' => $assignmentid,",
          "1273:                               'userids' => $userids));",
          "1276:         $context = context_module::instance($cm->id);",
          "1278:         $assignment = new assign($context, $cm, null);",
          "1280:         $warnings = array();",
          "1282:             if (!$assignment->revert_to_draft($userid)) {",
          "1285:                                                      'couldnotrevert',",
          "1286:                                                      $detail);",
          "1287:             }",
          "",
          "[Removed Lines]",
          "1275:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1281:         foreach ($userids as $userid) {",
          "1283:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1284:                 $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1276:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1278:         self::validate_context($context);",
          "1283:         foreach ($params['userids'] as $userid) {",
          "1285:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
          "1286:                 $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1335:                         array('assignmentid' => $assignmentid,",
          "1336:                               'userids' => $userids));",
          "1339:         $context = context_module::instance($cm->id);",
          "1341:         $assignment = new assign($context, $cm, null);",
          "1343:         $warnings = array();",
          "1345:             if (!$assignment->unlock_submission($userid)) {",
          "1348:                                                      'couldnotunlock',",
          "1349:                                                      $detail);",
          "1350:             }",
          "",
          "[Removed Lines]",
          "1338:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1344:         foreach ($userids as $userid) {",
          "1346:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid;",
          "1347:                 $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1340:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1342:         self::validate_context($context);",
          "1347:         foreach ($params['userids'] as $userid) {",
          "1349:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'];",
          "1350:                 $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1394:                                             array('assignmentid' => $assignmentid,",
          "1395:                                                   'acceptsubmissionstatement' => $acceptsubmissionstatement));",
          "1398:         $context = context_module::instance($cm->id);",
          "1400:         $assignment = new assign($context, $cm, null);",
          "1402:         $warnings = array();",
          "1403:         $data = new stdClass();",
          "1406:         if (!$assignment->submit_for_grading($data)) {",
          "1409:                                                  'couldnotsubmitforgrading',",
          "1410:                                                  $detail);",
          "1411:         }",
          "",
          "[Removed Lines]",
          "1397:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1404:         $data->submissionstatement = $acceptsubmissionstatement;",
          "1407:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "1408:             $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1400:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1402:         self::validate_context($context);",
          "1408:         $data->submissionstatement = $params['acceptsubmissionstatement'];",
          "1411:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $params['assignmentid'];",
          "1412:             $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1464:                               'userids' => $userids,",
          "1465:                               'dates' => $dates));",
          "1468:             $detail = 'Length of userids and dates parameters differ.';",
          "1470:                                                  'invalidparameters',",
          "1471:                                                  $detail);",
          "1473:             return $warnings;",
          "1474:         }",
          "1477:         $context = context_module::instance($cm->id);",
          "1479:         $assignment = new assign($context, $cm, null);",
          "1481:         $warnings = array();",
          "1484:             if (!$assignment->save_user_extension($userid, $duedate)) {",
          "1487:                                                      'couldnotgrantextensions',",
          "1488:                                                      $detail);",
          "1489:             }",
          "",
          "[Removed Lines]",
          "1467:         if (count($userids) != count($dates)) {",
          "1469:             $warnings[] = self::generate_warning($assignmentid,",
          "1476:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1482:         foreach ($userids as $idx => $userid) {",
          "1483:             $duedate = $dates[$idx];",
          "1485:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $assignmentid . ', Extension date: ' . $duedate;",
          "1486:                 $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1471:         if (count($params['userids']) != count($params['dates'])) {",
          "1473:             $warnings[] = self::generate_warning($params['assignmentid'],",
          "1480:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1482:         self::validate_context($context);",
          "1487:         foreach ($params['userids'] as $idx => $userid) {",
          "1488:             $duedate = $params['dates'][$idx];",
          "1490:                 $detail = 'User id: ' . $userid . ', Assignment id: ' . $params['assignmentid'] . ', Extension date: ' . $duedate;",
          "1491:                 $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1531:         $params = self::validate_parameters(self::reveal_identities_parameters(),",
          "1532:                                             array('assignmentid' => $assignmentid));",
          "1535:         $context = context_module::instance($cm->id);",
          "1537:         $assignment = new assign($context, $cm, null);",
          "1539:         $warnings = array();",
          "1540:         if (!$assignment->reveal_identities()) {",
          "1543:                                                  'couldnotrevealidentities',",
          "1544:                                                  $detail);",
          "1545:         }",
          "",
          "[Removed Lines]",
          "1534:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1541:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $assignmentid;",
          "1542:             $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1539:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1541:         self::validate_context($context);",
          "1547:             $detail = 'User id: ' . $USER->id . ', Assignment id: ' . $params['assignmentid'];",
          "1548:             $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1603:                                             array('assignmentid' => $assignmentid,",
          "1604:                                                   'plugindata' => $plugindata));",
          "1607:         $context = context_module::instance($cm->id);",
          "1609:         $assignment = new assign($context, $cm, null);",
          "1611:         $notices = array();",
          "1615:         $assignment->save_submission($submissiondata, $notices);",
          "1617:         $warnings = array();",
          "1618:         foreach ($notices as $notice) {",
          "1620:                                                  'couldnotsavesubmission',",
          "1621:                                                  $notice);",
          "1622:         }",
          "",
          "[Removed Lines]",
          "1606:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1613:         $submissiondata = (object)$plugindata;",
          "1619:             $warnings[] = self::generate_warning($assignmentid,",
          "",
          "[Added Lines]",
          "1612:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1614:         self::validate_context($context);",
          "1620:         $submissiondata = (object)$params['plugindata'];",
          "1626:             $warnings[] = self::generate_warning($params['assignmentid'],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1707:                                                   'applytoall' => $applytoall,",
          "1708:                                                   'plugindata' => $plugindata));",
          "1711:         $context = context_module::instance($cm->id);",
          "1713:         $assignment = new assign($context, $cm, null);",
          "1725:         return null;",
          "1726:     }",
          "",
          "[Removed Lines]",
          "1710:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1715:         $gradedata = (object)$plugindata;",
          "1717:         $gradedata->addattempt = $addattempt;",
          "1718:         $gradedata->attemptnumber = $attemptnumber;",
          "1719:         $gradedata->workflowstate = $workflowstate;",
          "1720:         $gradedata->applytoall = $applytoall;",
          "1721:         $gradedata->grade = $grade;",
          "1723:         $assignment->save_grade($userid, $gradedata);",
          "",
          "[Added Lines]",
          "1717:         $cm = get_coursemodule_from_instance('assign', $params['assignmentid'], 0, false, MUST_EXIST);",
          "1719:         self::validate_context($context);",
          "1723:         $gradedata = (object)$params['plugindata'];",
          "1725:         $gradedata->addattempt = $params['addattempt'];",
          "1726:         $gradedata->attemptnumber = $params['attemptnumber'];",
          "1727:         $gradedata->workflowstate = $params['workflowstate'];",
          "1728:         $gradedata->applytoall = $params['applytoall'];",
          "1729:         $gradedata->grade = $params['grade'];",
          "1731:         $assignment->save_grade($params['userid'], $gradedata);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1765:         $cm = get_coursemodule_from_instance('assign', $assignmentid, 0, false, MUST_EXIST);",
          "1766:         $context = context_module::instance($cm->id);",
          "1768:         $assignment = new assign($context, $cm, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:         self::validate_context($context);",
          "",
          "---------------"
        ]
      }
    }
  ]
}