{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
      "candidate_info": {
        "commit_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Further simplifications to sqlite3VdbeMemSetStr().\n\nFossilOrigin-Name: 1d212957079a2caa30f3c9d80f43464781bc9634c2b5181a5814efbddae31711",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c499da8a4d0babc56883aa362ae124772fd9214a51169a88a5dee523d051658",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:     assert( enc!=0 );",
          "1046:     if( enc==SQLITE_UTF8 ){",
          "1047:       nByte = 0x7fffffff & (int)strlen(z);",
          "1049:     }else{",
          "1050:       for(nByte=0; nByte<=iLimit && (z[nByte] | z[nByte+1]); nByte+=2){}",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1048:       if( nByte>iLimit ) nByte = iLimit+1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   if( xDel==SQLITE_TRANSIENT ){",
          "1061:     if( flags&MEM_Term ){",
          "1062:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1060:     int nAlloc = nByte;",
          "",
          "[Added Lines]",
          "1059:     u32 nAlloc = nByte;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1067:     testcase( nAlloc==0 );",
          "1068:     testcase( nAlloc==31 );",
          "1069:     testcase( nAlloc==32 );",
          "1071:       return SQLITE_NOMEM_BKPT;",
          "1072:     }",
          "1073:     memcpy(pMem->z, z, nAlloc);",
          "1078:   }else{",
          "1079:     sqlite3VdbeMemRelease(pMem);",
          "1080:     pMem->z = (char *)z;",
          "1083:   }",
          "1085:   pMem->n = nByte;",
          "",
          "[Removed Lines]",
          "1070:     if( sqlite3VdbeMemClearAndResize(pMem, MAX(nAlloc,32)) ){",
          "1074:   }else if( xDel==SQLITE_DYNAMIC ){",
          "1075:     sqlite3VdbeMemRelease(pMem);",
          "1076:     pMem->zMalloc = pMem->z = (char *)z;",
          "1077:     pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1081:     pMem->xDel = xDel;",
          "1082:     flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "",
          "[Added Lines]",
          "1069:     if( sqlite3VdbeMemClearAndResize(pMem, (int)MAX(nAlloc,32)) ){",
          "1076:     if( xDel==SQLITE_DYNAMIC ){",
          "1077:       pMem->zMalloc = pMem->z;",
          "1078:       pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1079:     }else{",
          "1080:       pMem->xDel = xDel;",
          "1081:       flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "1082:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "397a78d4a1864111f488a51d296810e7ef037893",
      "candidate_info": {
        "commit_hash": "397a78d4a1864111f488a51d296810e7ef037893",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/397a78d4a1864111f488a51d296810e7ef037893",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab.test"
        ],
        "message": "In defensive mode, do not allow shadow tables to be renamed using ALTER TABLE.\n\nFossilOrigin-Name: 23e200da5cfbde0798e67cd9e016e4a1cd73b67981e1af841493fcd123d8f547",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab.test||test/altertab.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab.test||test/altertab.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d64f248da3ce7762fe2c17fbc83f7bea9ffca73723bb3ad0982a85320839da90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     return 1;",
          "35:   }",
          "36:   return 0;",
          "",
          "[Removed Lines]",
          "31: static int isSystemTable(Parse *pParse, const char *zName){",
          "32:   if( 0==sqlite3StrNICmp(zName, \"sqlite_\", 7) ){",
          "33:     sqlite3ErrorMsg(pParse, \"table %s may not be altered\", zName);",
          "",
          "[Added Lines]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "40:     sqlite3ErrorMsg(pParse, \"table %s may not be altered\", pTab->zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     goto exit_rename_table;",
          "131:   }",
          "132:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){ goto",
          "",
          "[Removed Lines]",
          "129:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ){",
          "",
          "[Added Lines]",
          "136:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:     sqlite3ErrorMsg(pParse, \"Cannot add a column to a view\");",
          "425:     goto exit_begin_add_column;",
          "426:   }",
          "428:     goto exit_begin_add_column;",
          "429:   }",
          "",
          "[Removed Lines]",
          "427:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ){",
          "",
          "[Added Lines]",
          "434:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "526:   if( !pTab ) goto exit_rename_column;",
          "530:   if( SQLITE_OK!=isRealTable(pParse, pTab) ) goto exit_rename_column;",
          "",
          "[Removed Lines]",
          "529:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ) goto exit_rename_column;",
          "",
          "[Added Lines]",
          "536:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ) goto exit_rename_column;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "505:   SELECT sql FROM sqlite_master WHERE name = 'y';",
          "506: } {{CREATE VIEW y AS SELECT f2 AS f1 FROM x}}",
          "509: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: #-------------------------------------------------------------------------",
          "509: # Test that it is not possible to rename a shadow table in DEFENSIVE mode.",
          "510: #",
          "511: ifcapable fts3 {",
          "512:   proc vtab_command {method args} {",
          "513:     switch -- $method {",
          "514:       xConnect {",
          "515:         if {[info exists ::vtab_connect_sql]} {",
          "516:           execsql $::vtab_connect_sql",
          "517:         }",
          "518:         return \"CREATE TABLE t1(a, b, c)\"",
          "519:       }",
          "521:       xBestIndex {",
          "522:         set clist [lindex $args 0]",
          "523:         if {[llength $clist]!=1} { error \"unexpected constraint list\" }",
          "524:         catch { array unset C }",
          "525:         array set C [lindex $clist 0]",
          "526:         if {$C(usable)} {",
          "527:           return \"omit 0 cost 0 rows 1 idxnum 555 idxstr eq!\"",
          "528:         } else {",
          "529:           return \"cost 1000000 rows 0 idxnum 0 idxstr scan...\"",
          "530:         }",
          "531:       }",
          "532:     }",
          "534:     return {}",
          "535:   }",
          "537:   register_tcl_module db",
          "539:   sqlite3_db_config db DEFENSIVE 1",
          "541:   do_execsql_test 16.0 {",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "545:   do_catchsql_test 16.1 {",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.2 {",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_execsql_test 16.3 {",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "557:   do_execsql_test 16.4 {",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
      "candidate_info": {
        "commit_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a0c16f27653982880ab76714b5aaae65db43315",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/nulls1.test"
        ],
        "message": "Add tests for sort-by-index cases that use IN() and non-default NULL handling.\n\nFossilOrigin-Name: 09d660ecde723fb30f3bb3684bbb7f95825d78da6a6f33ddf57846054cd563e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9a82ee88d2d12209a674bd19167277aa91a6912e7a8bbf3714f90d559307fee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: }",
          "121: #-------------------------------------------------------------------------",
          "122: ifcapable vtab {",
          "123:   register_echo_module db",
          "124:   do_execsql_test 4.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "148: }",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #-------------------------------------------------------------------------",
          "152: #",
          "153: do_execsql_test 5.0 {",
          "154:   CREATE TABLE t4(a, b, c);",
          "155:   INSERT INTO t4 VALUES(1, 1, 11);",
          "156:   INSERT INTO t4 VALUES(1, 2, 12);",
          "157:   INSERT INTO t4 VALUES(1, NULL, 1);",
          "159:   INSERT INTO t4 VALUES(2, NULL, 1);",
          "160:   INSERT INTO t4 VALUES(2, 2, 12);",
          "161:   INSERT INTO t4 VALUES(2, 1, 11);",
          "163:   INSERT INTO t4 VALUES(3, NULL, 1);",
          "164:   INSERT INTO t4 VALUES(3, 2, 12);",
          "165:   INSERT INTO t4 VALUES(3, NULL, 3);",
          "166: }",
          "168: do_execsql_test 5.1 {",
          "169:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "170: } {",
          "171:   1 1 11   1 2 12   1 {} 1",
          "172:   2 1 11   2 2 12   2 {} 1",
          "173:   3 2 12   3 {} 1   3 {} 3",
          "174: }",
          "175: do_execsql_test 5.2 {",
          "176:   CREATE INDEX t4ab ON t4(a, b);",
          "177:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "178: } {",
          "179:   1 1 11   1 2 12   1 {} 1",
          "180:   2 1 11   2 2 12   2 {} 1",
          "181:   3 2 12   3 {} 1   3 {} 3",
          "182: }",
          "183: do_eqp_test 5.3 {",
          "184:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "185: } {",
          "186:   QUERY PLAN",
          "187:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "188: }",
          "190: do_execsql_test 5.4 {",
          "191:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "192: } {",
          "193:   3 {} 3   3 {} 1   3 2 12",
          "194:   2 {} 1   2 2 12   2 1 11",
          "195:   1 {} 1   1 2 12   1 1 11",
          "196: }",
          "197: do_eqp_test 5.5 {",
          "198:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "199: } {",
          "200:   QUERY PLAN",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
      "candidate_info": {
        "commit_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the obsolete \"fastfuzztest\" target from the makefiles.\n\nFossilOrigin-Name: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
      "candidate_info": {
        "commit_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/skipscan1.test"
        ],
        "message": "Disable the skip-scan optimization for DISTINCT queries. Fix for ticket [ced41c7c7d6b4d36]\n\nFossilOrigin-Name: a871d69c6de65038360aa6142fbad22689fb347e526cca56bb83e695c1441fbe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/skipscan1.test||test/skipscan1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48b518eb6f76fb0beb161d1ebcf3b793efc36262d6d77a1ad5906b6501138e28",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2723:    && pProbe->noSkipScan==0",
          "2724:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "2726:    && (rc = whereLoopResize(db, pNew, pNew->nLTerm+1))==SQLITE_OK",
          "2727:   ){",
          "2728:     LogEst nIter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2726:    && (pWInfo->wctrlFlags & (WHERE_WANT_DISTINCT|WHERE_DISTINCTBY))==0",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "376: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376: # 2019-07-29 Ticket ced41c7c7d6b4d36",
          "377: # Skip-scan is disabled for DISTINCT queries",
          "378: #",
          "379: db close",
          "380: sqlite3 db :memory:",
          "381: do_execsql_test skipscan1-3.1 {",
          "382:   CREATE TABLE t1 (c1, c2, c3, c4, PRIMARY KEY(c4, c3));",
          "383:   INSERT INTO t1 VALUES(NULL,0,1,NULL);",
          "384:   INSERT INTO t1 VALUES(0,NULL,1,NULL);",
          "385:   INSERT INTO t1 VALUES(NULL,NULL,1,NULL);",
          "386:   ANALYZE sqlite_master;",
          "387:   INSERT INTO sqlite_stat1 VALUES('t1','sqlite_autoindex_t1_1','18 18 6');",
          "388:   ANALYZE sqlite_master;",
          "389:   SELECT DISTINCT quote(c1), quote(c2), quote(c3), quote(c4), '|'",
          "390:     FROM t1 WHERE t1.c3 = 1;",
          "391: } {NULL 0 1 NULL | 0 NULL 1 NULL | NULL NULL 1 NULL |}",
          "",
          "---------------"
        ]
      }
    }
  ]
}