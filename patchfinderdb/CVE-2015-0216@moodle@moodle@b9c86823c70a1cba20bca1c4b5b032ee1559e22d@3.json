{
  "cve_id": "CVE-2015-0216",
  "cve_desc": "access.php in the Lesson module in Moodle 2.8.x before 2.8.2 does not set the RISK_XSS bit for graders, which allows remote authenticated users to conduct cross-site scripting (XSS) attacks via crafted essay feedback.",
  "repo": "moodle/moodle",
  "patch_hash": "b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
  "patch_info": {
    "commit_hash": "b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/b9c86823c70a1cba20bca1c4b5b032ee1559e22d",
    "files": [
      "mod/lesson/db/access.php",
      "mod/lesson/version.php"
    ],
    "message": "MDL-48034 mod_lesson: grade capability missing RISK_XSS",
    "before_after_code_files": [
      "mod/lesson/db/access.php||mod/lesson/db/access.php",
      "mod/lesson/version.php||mod/lesson/version.php"
    ]
  },
  "patch_diff": {
    "mod/lesson/db/access.php||mod/lesson/db/access.php": [
      "File: mod/lesson/db/access.php -> mod/lesson/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:     'mod/lesson:grade' => array(",
      "58:         'captype' => 'write',",
      "59:         'contextlevel' => CONTEXT_MODULE,",
      "60:         'archetypes' => array(",
      "",
      "[Removed Lines]",
      "57:         'riskbitmask' => RISK_SPAM,",
      "",
      "[Added Lines]",
      "57:         'riskbitmask' => RISK_SPAM | RISK_XSS,",
      "",
      "---------------"
    ],
    "mod/lesson/version.php||mod/lesson/version.php": [
      "File: mod/lesson/version.php -> mod/lesson/version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: defined('MOODLE_INTERNAL') || die();",
      "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
      "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
      "30: $plugin->cron      = 0;",
      "",
      "[Removed Lines]",
      "27: $plugin->version   = 2014122900;       // The current module version (Date: YYYYMMDDXX)",
      "",
      "[Added Lines]",
      "27: $plugin->version   = 2015010600;       // The current module version (Date: YYYYMMDDXX)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0e1a83e2cc18cc490376ccdb10dcddc09313e67",
      "candidate_info": {
        "commit_hash": "e0e1a83e2cc18cc490376ccdb10dcddc09313e67",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e0e1a83e2cc18cc490376ccdb10dcddc09313e67",
        "files": [
          "mod/lesson/backup/moodle1/lib.php",
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/classes/event/group_override_created.php",
          "mod/lesson/classes/event/group_override_deleted.php",
          "mod/lesson/classes/event/group_override_updated.php",
          "mod/lesson/classes/event/user_override_created.php",
          "mod/lesson/classes/event/user_override_deleted.php",
          "mod/lesson/classes/event/user_override_updated.php",
          "mod/lesson/classes/group_observers.php",
          "mod/lesson/continue.php",
          "mod/lesson/db/access.php",
          "mod/lesson/db/events.php",
          "mod/lesson/db/install.xml",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/essay.php",
          "mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php",
          "mod/lesson/locallib.php",
          "mod/lesson/mediafile.php",
          "mod/lesson/override_form.php",
          "mod/lesson/overridedelete.php",
          "mod/lesson/overrideedit.php",
          "mod/lesson/overrides.php",
          "mod/lesson/report.php",
          "mod/lesson/tests/events_test.php",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "MDL-49642 mod_lesson: Group/user overrides",
        "before_after_code_files": [
          "mod/lesson/backup/moodle1/lib.php||mod/lesson/backup/moodle1/lib.php",
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/classes/event/group_override_created.php||mod/lesson/classes/event/group_override_created.php",
          "mod/lesson/classes/event/group_override_deleted.php||mod/lesson/classes/event/group_override_deleted.php",
          "mod/lesson/classes/event/group_override_updated.php||mod/lesson/classes/event/group_override_updated.php",
          "mod/lesson/classes/event/user_override_created.php||mod/lesson/classes/event/user_override_created.php",
          "mod/lesson/classes/event/user_override_deleted.php||mod/lesson/classes/event/user_override_deleted.php",
          "mod/lesson/classes/event/user_override_updated.php||mod/lesson/classes/event/user_override_updated.php",
          "mod/lesson/classes/group_observers.php||mod/lesson/classes/group_observers.php",
          "mod/lesson/continue.php||mod/lesson/continue.php",
          "mod/lesson/db/access.php||mod/lesson/db/access.php",
          "mod/lesson/db/events.php||mod/lesson/db/events.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/essay.php||mod/lesson/essay.php",
          "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php||mod/lesson/lib.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/mediafile.php||mod/lesson/mediafile.php",
          "mod/lesson/override_form.php||mod/lesson/override_form.php",
          "mod/lesson/overridedelete.php||mod/lesson/overridedelete.php",
          "mod/lesson/overrideedit.php||mod/lesson/overrideedit.php",
          "mod/lesson/overrides.php||mod/lesson/overrides.php",
          "mod/lesson/report.php||mod/lesson/report.php",
          "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/db/access.php||mod/lesson/db/access.php",
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/db/access.php||mod/lesson/db/access.php",
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle1/lib.php||mod/lesson/backup/moodle1/lib.php": [
          "File: mod/lesson/backup/moodle1/lib.php -> mod/lesson/backup/moodle1/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     public function on_lesson_end() {",
          "237:         $this->xmlwriter->end_tag('lesson');",
          "238:         $this->xmlwriter->end_tag('activity');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:         $this->write_xml('overrides', array());",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_stepslib.php -> mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:             'userid', 'starttime', 'lessontime', 'completed'",
          "146:         ));",
          "150:         $lesson->add_child($pages);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:         $overrides = new backup_nested_element('overrides');",
          "149:         $override = new backup_nested_element('override', array('id'), array(",
          "150:             'groupid', 'userid', 'available', 'deadline', 'timelimit',",
          "151:             'review', 'maxattempts', 'retake', 'password'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         $highscores->add_child($highscore);",
          "162:         $lesson->add_child($timers);",
          "163:         $timers->add_child($timer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:         $lesson->add_child($overrides);",
          "170:         $overrides->add_child($override);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:         $answer->set_source_table('lesson_answers', array('pageid' => backup::VAR_PARENTID), 'id ASC');",
          "175:         if ($this->get_setting_value('userinfo')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:         $overrideparams = array('lessonid' => backup::VAR_PARENTID);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:             $grade->set_source_table('lesson_grades', array('lessonid'=>backup::VAR_PARENTID));",
          "181:             $highscore->set_source_table('lesson_high_scores', array('lessonid' => backup::VAR_PARENTID));",
          "182:             $timer->set_source_table('lesson_timer', array('lessonid' => backup::VAR_PARENTID));",
          "183:         }",
          "186:         $attempt->annotate_ids('user', 'userid');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:             $overrideparams['userid'] = backup_helper::is_sqlparam(null); //  Without userinfo, skip user overrides.",
          "195:         $override->set_source_table('lesson_overrides', $overrideparams);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:         $grade->annotate_ids('user', 'userid');",
          "189:         $highscore->annotate_ids('user', 'userid');",
          "190:         $timer->annotate_ids('user', 'userid');",
          "193:         $lesson->annotate_files('mod_lesson', 'intro', null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:         $override->annotate_ids('user', 'userid');",
          "204:         $override->annotate_ids('group', 'groupid');",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             $paths[] = new restore_path_element('lesson_branch', '/activity/lesson/pages/page/branches/branch');",
          "49:             $paths[] = new restore_path_element('lesson_highscore', '/activity/lesson/highscores/highscore');",
          "50:             $paths[] = new restore_path_element('lesson_timer', '/activity/lesson/timers/timer');",
          "51:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:             $paths[] = new restore_path_element('lesson_override', '/activity/lesson/overrides/override');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:         $newitemid = $DB->insert_record('lesson_timer', $data);",
          "205:     }",
          "207:     protected function after_execute() {",
          "208:         global $DB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     protected function process_lesson_override($data) {",
          "214:         global $DB;",
          "216:         $data = (object)$data;",
          "217:         $oldid = $data->id;",
          "220:         $userinfo = $this->get_setting_value('userinfo');",
          "223:         if (!$userinfo && !is_null($data->userid)) {",
          "224:             return;",
          "225:         }",
          "227:         $data->lessonid = $this->get_new_parentid('lesson');",
          "229:         $data->userid = $this->get_mappingid('user', $data->userid);",
          "230:         $data->groupid = $this->get_mappingid('group', $data->groupid);",
          "232:         $data->available = $this->apply_date_offset($data->available);",
          "233:         $data->deadline = $this->apply_date_offset($data->deadline);",
          "235:         $newitemid = $DB->insert_record('lesson_overrides', $data);",
          "238:         $this->set_mapping('lesson_override', $oldid, $newitemid);",
          "239:     }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/group_override_created.php||mod/lesson/classes/event/group_override_created.php": [
          "File: mod/lesson/classes/event/group_override_created.php -> mod/lesson/classes/event/group_override_created.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_lesson\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "44: class group_override_created extends \\core\\event\\base {",
          "49:     protected function init() {",
          "50:         $this->data['objecttable'] = 'lesson_overrides';",
          "51:         $this->data['crud'] = 'c';",
          "52:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "53:     }",
          "60:     public static function get_name() {",
          "61:         return get_string('eventoverridecreated', 'mod_lesson');",
          "62:     }",
          "69:     public function get_description() {",
          "70:         return \"The user with id '$this->userid' created the override with id '$this->objectid' for the lesson with \" .",
          "71:             \"course module id '$this->contextinstanceid' for the group with id '{$this->other['groupid']}'.\";",
          "72:     }",
          "79:     public function get_url() {",
          "80:         return new \\moodle_url('/mod/lesson/overrideedit.php', array('id' => $this->objectid));",
          "81:     }",
          "89:     protected function validate_data() {",
          "90:         parent::validate_data();",
          "92:         if (!isset($this->other['lessonid'])) {",
          "93:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "94:         }",
          "96:         if (!isset($this->other['groupid'])) {",
          "97:             throw new \\coding_exception('The \\'groupid\\' value must be set in other.');",
          "98:         }",
          "99:     }",
          "100: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/group_override_deleted.php||mod/lesson/classes/event/group_override_deleted.php": [
          "File: mod/lesson/classes/event/group_override_deleted.php -> mod/lesson/classes/event/group_override_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace mod_lesson\\event;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "43: class group_override_deleted extends \\core\\event\\base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'lesson_overrides';",
          "50:         $this->data['crud'] = 'd';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventoverridedeleted', 'mod_lesson');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' deleted the override with id '$this->objectid' for the lesson with \" .",
          "70:             \"course module id '$this->contextinstanceid' for the group with id '{$this->other['groupid']}'.\";",
          "71:     }",
          "78:     public function get_url() {",
          "79:         return new \\moodle_url('/mod/lesson/overrides.php', array('cmid' => $this->contextinstanceid));",
          "80:     }",
          "88:     protected function validate_data() {",
          "89:         parent::validate_data();",
          "91:         if (!isset($this->other['lessonid'])) {",
          "92:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "93:         }",
          "95:         if (!isset($this->other['groupid'])) {",
          "96:             throw new \\coding_exception('The \\'groupid\\' value must be set in other.');",
          "97:         }",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/group_override_updated.php||mod/lesson/classes/event/group_override_updated.php": [
          "File: mod/lesson/classes/event/group_override_updated.php -> mod/lesson/classes/event/group_override_updated.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace mod_lesson\\event;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "43: class group_override_updated extends \\core\\event\\base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'lesson_overrides';",
          "50:         $this->data['crud'] = 'u';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventoverrideupdated', 'mod_lesson');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' updated the override with id '$this->objectid' for the lesson with \" .",
          "70:             \"course module id '$this->contextinstanceid' for the group with id '{$this->other['groupid']}'.\";",
          "71:     }",
          "78:     public function get_url() {",
          "79:         return new \\moodle_url('/mod/lesson/overrideedit.php', array('id' => $this->objectid));",
          "80:     }",
          "88:     protected function validate_data() {",
          "89:         parent::validate_data();",
          "91:         if (!isset($this->other['lessonid'])) {",
          "92:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "93:         }",
          "95:         if (!isset($this->other['groupid'])) {",
          "96:             throw new \\coding_exception('The \\'groupid\\' value must be set in other.');",
          "97:         }",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/user_override_created.php||mod/lesson/classes/event/user_override_created.php": [
          "File: mod/lesson/classes/event/user_override_created.php -> mod/lesson/classes/event/user_override_created.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace mod_lesson\\event;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "42: class user_override_created extends \\core\\event\\base {",
          "47:     protected function init() {",
          "48:         $this->data['objecttable'] = 'lesson_overrides';",
          "49:         $this->data['crud'] = 'c';",
          "50:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "51:     }",
          "58:     public static function get_name() {",
          "59:         return get_string('eventoverridecreated', 'mod_lesson');",
          "60:     }",
          "67:     public function get_description() {",
          "68:         return \"The user with id '$this->userid' created the override with id '$this->objectid' for the lesson with \" .",
          "69:             \"course module id '$this->contextinstanceid' for the user with id '{$this->relateduserid}'.\";",
          "70:     }",
          "77:     public function get_url() {",
          "78:         return new \\moodle_url('/mod/lesson/overrideedit.php', array('id' => $this->objectid));",
          "79:     }",
          "87:     protected function validate_data() {",
          "88:         parent::validate_data();",
          "90:         if (!isset($this->relateduserid)) {",
          "91:             throw new \\coding_exception('The \\'relateduserid\\' must be set.');",
          "92:         }",
          "94:         if (!isset($this->other['lessonid'])) {",
          "95:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "96:         }",
          "97:     }",
          "98: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/user_override_deleted.php||mod/lesson/classes/event/user_override_deleted.php": [
          "File: mod/lesson/classes/event/user_override_deleted.php -> mod/lesson/classes/event/user_override_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace mod_lesson\\event;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "42: class user_override_deleted extends \\core\\event\\base {",
          "47:     protected function init() {",
          "48:         $this->data['objecttable'] = 'lesson_overrides';",
          "49:         $this->data['crud'] = 'd';",
          "50:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "51:     }",
          "58:     public static function get_name() {",
          "59:         return get_string('eventoverridedeleted', 'mod_lesson');",
          "60:     }",
          "67:     public function get_description() {",
          "68:         return \"The user with id '$this->userid' deleted the override with id '$this->objectid' for the lesson with \" .",
          "69:             \"course module id '$this->contextinstanceid' for the user with id '{$this->relateduserid}'.\";",
          "70:     }",
          "77:     public function get_url() {",
          "78:         return new \\moodle_url('/mod/lesson/overrides.php', array('cmid' => $this->contextinstanceid));",
          "79:     }",
          "87:     protected function validate_data() {",
          "88:         parent::validate_data();",
          "90:         if (!isset($this->relateduserid)) {",
          "91:             throw new \\coding_exception('The \\'relateduserid\\' must be set.');",
          "92:         }",
          "94:         if (!isset($this->other['lessonid'])) {",
          "95:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "96:         }",
          "97:     }",
          "98: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/user_override_updated.php||mod/lesson/classes/event/user_override_updated.php": [
          "File: mod/lesson/classes/event/user_override_updated.php -> mod/lesson/classes/event/user_override_updated.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_lesson\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class user_override_updated extends \\core\\event\\base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'lesson_overrides';",
          "50:         $this->data['crud'] = 'u';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventoverrideupdated', 'mod_lesson');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' updated the override with id '$this->objectid' for the lesson with \" .",
          "70:             \"course module id '$this->contextinstanceid' for the user with id '{$this->relateduserid}'.\";",
          "71:     }",
          "78:     public function get_url() {",
          "79:         return new \\moodle_url('/mod/lesson/overrideedit.php', array('id' => $this->objectid));",
          "80:     }",
          "88:     protected function validate_data() {",
          "89:         parent::validate_data();",
          "91:         if (!isset($this->relateduserid)) {",
          "92:             throw new \\coding_exception('The \\'relateduserid\\' must be set.');",
          "93:         }",
          "95:         if (!isset($this->other['lessonid'])) {",
          "96:             throw new \\coding_exception('The \\'lessonid\\' value must be set in other.');",
          "97:         }",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "mod/lesson/classes/group_observers.php||mod/lesson/classes/group_observers.php": [
          "File: mod/lesson/classes/group_observers.php -> mod/lesson/classes/group_observers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_lesson;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: require_once($CFG->dirroot . '/mod/lesson/locallib.php');",
          "37: class group_observers {",
          "44:     protected static $resetinprogress = false;",
          "52:     public static function course_reset_started($event) {",
          "53:         self::$resetinprogress = $event->courseid;",
          "54:     }",
          "62:     public static function course_reset_ended($event) {",
          "63:         if (!empty(self::$resetinprogress)) {",
          "64:             if (!empty($event->other['reset_options']['reset_groups_remove'])) {",
          "65:                 lesson_process_group_deleted_in_course($event->courseid);",
          "66:             }",
          "67:         }",
          "69:         self::$resetinprogress = null;",
          "70:     }",
          "78:     public static function group_deleted($event) {",
          "79:         if (!empty(self::$resetinprogress)) {",
          "81:             return;",
          "82:         }",
          "83:         lesson_process_group_deleted_in_course($event->courseid);",
          "84:     }",
          "85: }",
          "",
          "---------------"
        ],
        "mod/lesson/continue.php||mod/lesson/continue.php": [
          "File: mod/lesson/continue.php -> mod/lesson/continue.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: require_login($course, false, $cm);",
          "37: require_sesskey();",
          "39: $context = context_module::instance($cm->id);",
          "40: $canmanage = has_capability('mod/lesson:manage', $context);",
          "41: $lessonoutput = $PAGE->get_renderer('mod_lesson');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: $lesson->update_effective_access($USER->id);",
          "",
          "---------------"
        ],
        "mod/lesson/db/access.php||mod/lesson/db/access.php": [
          "File: mod/lesson/db/access.php -> mod/lesson/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:             'editingteacher' => CAP_ALLOW,",
          "86:             'manager' => CAP_ALLOW",
          "87:         )",
          "89: );",
          "",
          "[Removed Lines]",
          "88:     )",
          "",
          "[Added Lines]",
          "88:     ),",
          "91:     'mod/lesson:manageoverrides' => array(",
          "92:         'captype' => 'write',",
          "93:         'contextlevel' => CONTEXT_MODULE,",
          "94:         'archetypes' => array(",
          "95:             'editingteacher' => CAP_ALLOW,",
          "96:             'manager' => CAP_ALLOW",
          "97:         )",
          "98:     ),",
          "",
          "---------------"
        ],
        "mod/lesson/db/events.php||mod/lesson/db/events.php": [
          "File: mod/lesson/db/events.php -> mod/lesson/db/events.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: $observers = array(",
          "31:     array(",
          "32:         'eventname' => '\\core\\event\\course_reset_started',",
          "33:         'callback' => '\\mod_lesson\\group_observers::course_reset_started',",
          "34:     ),",
          "35:     array(",
          "36:         'eventname' => '\\core\\event\\course_reset_ended',",
          "37:         'callback' => '\\mod_lesson\\group_observers::course_reset_ended',",
          "38:     ),",
          "39:     array(",
          "40:         'eventname' => '\\core\\event\\group_deleted',",
          "41:         'callback' => '\\mod_lesson\\group_observers::group_deleted'",
          "42:     ),",
          "43: );",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         upgrade_mod_savepoint(true, 2015032700, 'lesson');",
          "264:     }",
          "266:     return true;",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:     if ($oldversion < 2015033100) {",
          "269:         $table = new xmldb_table('lesson_overrides');",
          "272:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "273:         $table->add_field('lessonid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "274:         $table->add_field('groupid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "275:         $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "276:         $table->add_field('available', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "277:         $table->add_field('deadline', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "278:         $table->add_field('timelimit', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "279:         $table->add_field('review', XMLDB_TYPE_INTEGER, '3', null, null, null, null);",
          "280:         $table->add_field('maxattempts', XMLDB_TYPE_INTEGER, '3', null, null, null, null);",
          "281:         $table->add_field('retake', XMLDB_TYPE_INTEGER, '3', null, null, null, null);",
          "282:         $table->add_field('password', XMLDB_TYPE_CHAR, '32', null, null, null, null);",
          "285:         $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));",
          "286:         $table->add_key('lessonid', XMLDB_KEY_FOREIGN, array('lessonid'), 'lesson', array('id'));",
          "287:         $table->add_key('groupid', XMLDB_KEY_FOREIGN, array('groupid'), 'groups', array('id'));",
          "288:         $table->add_key('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));",
          "291:         if (!$dbman->table_exists($table)) {",
          "292:             $dbman->create_table($table);",
          "293:         }",
          "296:         upgrade_mod_savepoint(true, 2015033100, 'lesson');",
          "297:     }",
          "",
          "---------------"
        ],
        "mod/lesson/essay.php||mod/lesson/essay.php": [
          "File: mod/lesson/essay.php -> mod/lesson/essay.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     $attempt = $DB->get_record('lesson_attempts', array('id' => $attemptid));",
          "63:     $answer = $DB->get_record('lesson_answers', array('lessonid' => $lesson->id, 'pageid' => $attempt->pageid));",
          "64:     $user = $DB->get_record('user', array('id' => $attempt->userid));",
          "65:     $scoreoptions = array();",
          "66:     if ($lesson->custom) {",
          "67:         $i = $answer->score;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     $lesson->update_effective_access($user->id);",
          "",
          "---------------"
        ],
        "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php": [
          "File: mod/lesson/lang/en/lesson.php -> mod/lesson/lang/en/lesson.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: $string['addedcluster'] = 'Added a cluster';",
          "49: $string['addedendofcluster'] = 'Added an end of cluster';",
          "50: $string['addendofcluster'] = 'Add an end of cluster';",
          "51: $string['addpage'] = 'Add a page';",
          "52: $string['and'] = 'AND';",
          "53: $string['anchortitle'] = 'Start of main content';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: $string['addnewgroupoverride'] = 'Add group override';",
          "52: $string['addnewuseroverride'] = 'Add user override';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: $string['classstats'] = 'Class statistics';",
          "88: $string['clicktodownload'] = 'Click on the following link to download the file.';",
          "89: $string['clicktopost'] = 'Click here to post your grade on the High Scores list.';",
          "90: $string['cluster'] = 'Cluster';",
          "91: $string['clusterjump'] = 'Unseen question within a cluster';",
          "92: $string['clustertitle'] = 'Cluster';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: $string['closebeforeopen'] = 'Could not update the lesson. You have specified a close date before the open date.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136: $string['detailedstats'] = 'Detailed statistics';",
          "137: $string['didnotanswerquestion'] = 'Did not answer this question.';",
          "138: $string['didnotreceivecredit'] = 'Did not receive credit';",
          "139: $string['displaydefaultfeedback'] = 'Use default feedback';",
          "140: $string['displaydefaultfeedback_help'] = 'If enabled, when a response is not found for a particular question, the default response of \"That\\'s the correct answer\" or \"That\\'s the wrong answer\" will be shown.';",
          "141: $string['displayhighscores'] = 'Display high scores';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: $string['disabled'] = 'Disabled';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: $string['edit'] = 'Edit';",
          "155: $string['editingquestionpage'] = 'Editing {$a} question page';",
          "156: $string['editlessonsettings'] = 'Edit lesson settings';",
          "157: $string['editpage'] = 'Edit page contents';",
          "158: $string['editpagecontent'] = 'Edit page contents';",
          "159: $string['email'] = 'Email';",
          "160: $string['emailallgradedessays'] = 'Email ALL graded essays';",
          "161: $string['emailgradedessays'] = 'Email graded essays';",
          "162: $string['emailsuccess'] = 'Emails sent successfully';",
          "163: $string['endofbranch'] = 'End of branch';",
          "164: $string['endofcluster'] = 'End of cluster';",
          "165: $string['endofclustertitle'] = 'End of cluster';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: $string['editoverride'] = 'Edit override';",
          "168: $string['enabled'] = 'Enabled';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185: $string['eventlessonrestarted'] = 'Lesson restarted';",
          "186: $string['eventlessonresumed'] = 'Lesson resumed';",
          "187: $string['eventlessonstarted'] = 'Lesson started';",
          "188: $string['eventpagecreated'] = 'Page created';",
          "189: $string['eventpagemoved'] = 'Page moved';",
          "190: $string['eventpageupdated'] = 'Page updated';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: $string['eventoverridecreated'] = 'Lesson override created';",
          "195: $string['eventoverridedeleted'] = 'Lesson override deleted';",
          "196: $string['eventoverrideupdated'] = 'Lesson override updated';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208: $string['gradeessay'] = 'Grade essay questions ({$a->notgradedcount} not graded and {$a->notsentcount} not sent)';",
          "209: $string['gradeis'] = 'Grade is {$a}';",
          "210: $string['gradeoptions'] = 'Grade options';",
          "211: $string['handlingofretakes'] = 'Handling of re-takes';",
          "212: $string['handlingofretakes_help'] = 'If re-takes are allowed, this setting specifies whether the grade for the lesson is the mean or maximum of all attempts.';",
          "213: $string['havenotgradedyet'] = 'Have not graded yet.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: $string['groupoverrides'] = 'Group overrides';",
          "221: $string['groupoverridesdeleted'] = 'Group overrides deleted';",
          "222: $string['groupsnone'] = 'There are no groups in this course';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226: $string['invalidfile'] = 'Invalid file';",
          "227: $string['invalidid'] = 'No course module ID or lesson ID were passed';",
          "228: $string['invalidlessonid'] = 'lesson ID was incorrect';",
          "229: $string['invalidpageid'] = 'Invalid page ID';",
          "230: $string['jump'] = 'Jump';",
          "231: $string['jumps'] = 'Jumps';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: $string['invalidoverrideid'] = 'Invalid override id';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243: $string['lesson:edit'] = 'Edit a lesson activity';",
          "244: $string['lessonformating'] = 'Lesson formatting';",
          "245: $string['lesson:manage'] = 'Manage a lesson activity';",
          "246: $string['lesson:viewreports'] = 'View lesson reports';",
          "247: $string['lessonmenu'] = 'Lesson menu';",
          "248: $string['lessonnotready'] = 'This lesson is not ready to be taken.  Please contact your {$a}.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259: $string['lesson:manageoverrides'] = 'Manage lesson overrides';",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310: $string['noanswer'] = 'One or more questions have no answer given.  Please go back and submit an answer.';",
          "311: $string['noattemptrecordsfound'] = 'No attempt records found: no grade given';",
          "312: $string['nobranchtablefound'] = 'No content page found';",
          "313: $string['nocommentyet'] = 'No comment yet.';",
          "314: $string['nocoursemods'] = 'No activities found';",
          "315: $string['nocredit'] = 'No credit';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: $string['noclose'] = 'No close date';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "318: $string['nohighscores'] = 'No high scores';",
          "319: $string['nolessonattempts'] = 'No attempts have been made on this lesson.';",
          "320: $string['nolessonattemptsgroup'] = 'No attempts have been made by {$a} group members on this lesson.';",
          "321: $string['nooneansweredcorrectly'] = 'No one answered correctly.';",
          "322: $string['nooneansweredthisquestion'] = 'No one answered this question.';",
          "323: $string['nooneenteredthis'] = 'No one entered this.';",
          "324: $string['noonehasanswered'] = 'No one has answered an essay question yet.';",
          "325: $string['noonehasansweredgroup'] = 'No one in {$a} has answered an essay question yet.';",
          "326: $string['noonecheckedthis'] = 'No one checked this.';",
          "327: $string['noretake'] = 'You are not allowed to retake this lesson.';",
          "328: $string['normal'] = 'Normal - follow lesson path';",
          "329: $string['notcompleted'] = 'Not completed';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: $string['none'] = 'None';",
          "343: $string['noopen'] = 'No open date';",
          "344: $string['nooverridedata'] = 'You must override at least one of the lesson settings.';",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "351: $string['ordered'] = 'Ordered';",
          "352: $string['other'] = 'Other';",
          "353: $string['outof'] = 'Out of {$a}';",
          "354: $string['overview'] = 'Overview';",
          "355: $string['overview_help'] = 'A lesson is made up of a number of pages and optionally content pages. A page contains some content and usually ends with a question. Associated with each answer to the question is a jump. The jump can be relative, such as this page or next page, or absolute, specifying any one of the pages in the lesson. A content page is a page containing a set of links to other pages in the lesson, for example a Table of Contents.';",
          "356: $string['page'] = 'Page: {$a}';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: $string['overridedeletegroupsure'] = 'Are you sure you want to delete the override for group {$a}?';",
          "373: $string['overridedeleteusersure'] = 'Are you sure you want to delete the override for user {$a}?';",
          "374: $string['override'] = 'Override';",
          "375: $string['overridegroup'] = 'Override group';",
          "376: $string['overridegroupeventname'] = '{$a->lesson} - {$a->group}';",
          "377: $string['overrides'] = 'Overrides';",
          "378: $string['overrideuser'] = 'Override user';",
          "379: $string['overrideusereventname'] = '{$a->lesson} - Override';",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "398: $string['rawgrade'] = 'Raw grade';",
          "399: $string['receivedcredit'] = 'Received credit';",
          "400: $string['redisplaypage'] = 'Redisplay page';",
          "401: $string['report'] = 'Report';",
          "402: $string['reports'] = 'Reports';",
          "403: $string['response'] = 'Response';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: $string['removeallgroupoverrides'] = 'Delete all group overrides';",
          "428: $string['removealluseroverrides'] = 'Delete all user overrides';",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "405: $string['retakesallowed_help'] = 'If enabled, students can attempt the lesson more than once.';",
          "406: $string['returnto'] = 'Return to {$a}';",
          "407: $string['returntocourse'] = 'Return to the course';",
          "408: $string['review'] = 'Review';",
          "409: $string['reviewlesson'] = 'Review lesson';",
          "410: $string['reviewquestionback'] = 'Yes, I\\'d like to try again';",
          "411: $string['reviewquestioncontinue'] = 'No, I just want to go on to the next question';",
          "412: $string['sanitycheckfailed'] = 'Sanity check failed: This attempt has been deleted';",
          "413: $string['savechanges'] = 'Save changes';",
          "414: $string['savechangesandeol'] = 'Save all changes and go to the end of the lesson.';",
          "415: $string['savepage'] = 'Save page';",
          "416: $string['score'] = 'Score';",
          "417: $string['score_help'] = 'Score is only used when custom scoring is enabled. Each answer can then be given a numerical point value (positive or negative).';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: $string['reverttodefaults'] = 'Revert to lesson defaults';",
          "442: $string['save'] = 'Save';",
          "445: $string['saveoverrideandstay'] = 'Save and enter another override';",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "464: $string['usemean'] = 'Use mean';",
          "465: $string['usepassword'] = 'Password protected lesson';",
          "466: $string['usepassword_help'] = 'If enabled, a password is required in order to access the lesson.';",
          "467: $string['viewgrades'] = 'View grades';",
          "468: $string['viewhighscores'] = 'View high scores list';",
          "469: $string['viewreports'] = 'View {$a->attempts} completed {$a->student} attempts';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: $string['useroverridesdeleted'] = 'User overrides deleted';",
          "499: $string['usersnone'] = 'No students have access to this lesson';",
          "500: $string['useroverrides'] = 'User overrides';",
          "",
          "---------------"
        ],
        "mod/lesson/lib.php||mod/lesson/lib.php": [
          "File: mod/lesson/lib.php -> mod/lesson/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     return true;",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: function lesson_update_events($lesson, $override = null) {",
          "108:     global $CFG, $DB;",
          "110:     require_once($CFG->dirroot . '/calendar/lib.php');",
          "113:     $conds = array('modulename' => 'lesson',",
          "114:                    'instance' => $lesson->id);",
          "115:     if (!empty($override)) {",
          "117:         if (isset($override->userid)) {",
          "118:             $conds['userid'] = $override->userid;",
          "119:         } else {",
          "120:             $conds['groupid'] = $override->groupid;",
          "121:         }",
          "122:     }",
          "123:     $oldevents = $DB->get_records('event', $conds);",
          "126:     if (empty($override)) {",
          "129:         $overrides = $DB->get_records('lesson_overrides', array('lessonid' => $lesson->id));",
          "131:         $overrides[] = new stdClass();",
          "132:     } else {",
          "134:         $overrides = array($override);",
          "135:     }",
          "137:     foreach ($overrides as $current) {",
          "138:         $groupid   = isset($current->groupid) ? $current->groupid : 0;",
          "139:         $userid    = isset($current->userid) ? $current->userid : 0;",
          "140:         $available  = isset($current->available) ? $current->available : $lesson->available;",
          "141:         $deadline = isset($current->deadline) ? $current->deadline : $lesson->deadline;",
          "144:         $addopen  = empty($current->id) || !empty($current->available);",
          "145:         $addclose = empty($current->id) || !empty($current->deadline);",
          "147:         if (!empty($lesson->coursemodule)) {",
          "148:             $cmid = $lesson->coursemodule;",
          "149:         } else {",
          "150:             $cmid = get_coursemodule_from_instance('lesson', $lesson->id, $lesson->course)->id;",
          "151:         }",
          "153:         $event = new stdClass();",
          "154:         $event->description = format_module_intro('lesson', $lesson, $cmid);",
          "156:         $event->courseid    = ($userid) ? 0 : $lesson->course;",
          "157:         $event->groupid     = $groupid;",
          "158:         $event->userid      = $userid;",
          "159:         $event->modulename  = 'lesson';",
          "160:         $event->instance    = $lesson->id;",
          "161:         $event->timestart   = $available;",
          "162:         $event->timeduration = max($deadline - $available, 0);",
          "163:         $event->visible     = instance_is_visible('lesson', $lesson);",
          "164:         $event->eventtype   = 'open';",
          "167:         if ($groupid) {",
          "168:             $params = new stdClass();",
          "169:             $params->lesson = $lesson->name;",
          "170:             $params->group = groups_get_group_name($groupid);",
          "171:             if ($params->group === false) {",
          "173:                 continue;",
          "174:             }",
          "175:             $eventname = get_string('overridegroupeventname', 'lesson', $params);",
          "176:         } else if ($userid) {",
          "177:             $params = new stdClass();",
          "178:             $params->lesson = $lesson->name;",
          "179:             $eventname = get_string('overrideusereventname', 'lesson', $params);",
          "180:         } else {",
          "181:             $eventname = $lesson->name;",
          "182:         }",
          "183:         if ($addopen or $addclose) {",
          "184:             if ($deadline and $available and $event->timeduration <= LESSON_MAX_EVENT_LENGTH) {",
          "186:                 if ($oldevent = array_shift($oldevents)) {",
          "187:                     $event->id = $oldevent->id;",
          "188:                 } else {",
          "189:                     unset($event->id);",
          "190:                 }",
          "191:                 $event->name = $eventname;",
          "193:                 calendar_event::create($event);",
          "194:             } else {",
          "196:                 $event->timeduration  = 0;",
          "197:                 if ($available && $addopen) {",
          "198:                     if ($oldevent = array_shift($oldevents)) {",
          "199:                         $event->id = $oldevent->id;",
          "200:                     } else {",
          "201:                         unset($event->id);",
          "202:                     }",
          "203:                     $event->name = $eventname.' ('.get_string('lessonopens', 'lesson').')';",
          "205:                     calendar_event::create($event);",
          "206:                 }",
          "207:                 if ($deadline && $addclose) {",
          "208:                     if ($oldevent = array_shift($oldevents)) {",
          "209:                         $event->id = $oldevent->id;",
          "210:                     } else {",
          "211:                         unset($event->id);",
          "212:                     }",
          "213:                     $event->name      = $eventname.' ('.get_string('lessoncloses', 'lesson').')';",
          "214:                     $event->timestart = $deadline;",
          "215:                     $event->eventtype = 'close';",
          "216:                     calendar_event::create($event);",
          "217:                 }",
          "218:             }",
          "219:         }",
          "220:     }",
          "223:     foreach ($oldevents as $badevent) {",
          "224:         $badevent = calendar_event::load($badevent);",
          "225:         $badevent->delete();",
          "226:     }",
          "227: }",
          "239: function lesson_refresh_events($courseid = 0) {",
          "240:     global $DB;",
          "242:     if ($courseid == 0) {",
          "243:         if (!$lessons = $DB->get_records('lessons')) {",
          "244:             return true;",
          "245:         }",
          "246:     } else {",
          "247:         if (!$lessons = $DB->get_records('lesson', array('course' => $courseid))) {",
          "248:             return true;",
          "249:         }",
          "250:     }",
          "252:     foreach ($lessons as $lesson) {",
          "253:         lesson_update_events($lesson);",
          "254:     }",
          "256:     return true;",
          "257: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "574: function lesson_process_post_save(&$lesson) {",
          "619: }",
          "",
          "[Removed Lines]",
          "575:     global $DB, $CFG;",
          "576:     require_once($CFG->dirroot.'/calendar/lib.php');",
          "577:     require_once($CFG->dirroot . '/mod/lesson/locallib.php');",
          "579:     if ($events = $DB->get_records('event', array('modulename'=>'lesson', 'instance'=>$lesson->id))) {",
          "580:         foreach($events as $event) {",
          "581:             $event = calendar_event::load($event->id);",
          "582:             $event->delete();",
          "583:         }",
          "584:     }",
          "586:     $event = new stdClass;",
          "587:     $event->description = $lesson->name;",
          "588:     $event->courseid    = $lesson->course;",
          "589:     $event->groupid     = 0;",
          "590:     $event->userid      = 0;",
          "591:     $event->modulename  = 'lesson';",
          "592:     $event->instance    = $lesson->id;",
          "593:     $event->eventtype   = 'open';",
          "594:     $event->timestart   = $lesson->available;",
          "596:     $event->visible     = instance_is_visible('lesson', $lesson);",
          "598:     $event->timeduration = ($lesson->deadline - $lesson->available);",
          "600:     if ($lesson->deadline and $lesson->available and $event->timeduration <= LESSON_MAX_EVENT_LENGTH) {",
          "602:         $event->name = $lesson->name;",
          "603:         calendar_event::create(clone($event));",
          "604:     } else {",
          "606:         $event->timeduration  = 0;",
          "607:         if ($lesson->available) {",
          "608:             $event->name = $lesson->name.' ('.get_string('lessonopens', 'lesson').')';",
          "609:             calendar_event::create(clone($event));",
          "610:         }",
          "612:         if ($lesson->deadline) {",
          "613:             $event->name      = $lesson->name.' ('.get_string('lessoncloses', 'lesson').')';",
          "614:             $event->timestart = $lesson->deadline;",
          "615:             $event->eventtype = 'close';",
          "616:             calendar_event::create(clone($event));",
          "617:         }",
          "618:     }",
          "",
          "[Added Lines]",
          "736:     lesson_update_events($lesson);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628: function lesson_reset_course_form_definition(&$mform) {",
          "629:     $mform->addElement('header', 'lessonheader', get_string('modulenameplural', 'lesson'));",
          "630:     $mform->addElement('advcheckbox', 'reset_lesson', get_string('deleteallattempts','lesson'));",
          "631: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:     $mform->addElement('advcheckbox', 'reset_lesson_user_overrides',",
          "750:             get_string('removealluseroverrides', 'lesson'));",
          "751:     $mform->addElement('advcheckbox', 'reset_lesson_group_overrides',",
          "752:             get_string('removeallgroupoverrides', 'lesson'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "638: function lesson_reset_course_form_defaults($course) {",
          "640: }",
          "",
          "[Removed Lines]",
          "639:     return array('reset_lesson'=>1);",
          "",
          "[Added Lines]",
          "761:     return array('reset_lesson' => 1,",
          "762:             'reset_lesson_group_overrides' => 1,",
          "763:             'reset_lesson_user_overrides' => 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "710:         $status[] = array('component'=>$componentstr, 'item'=>get_string('deleteallattempts', 'lesson'), 'error'=>false);",
          "711:     }",
          "714:     if ($data->timeshift) {",
          "715:         shift_course_mod_dates('lesson', array('available', 'deadline'), $data->timeshift, $data->courseid);",
          "716:         $status[] = array('component'=>$componentstr, 'item'=>get_string('datechanged'), 'error'=>false);",
          "717:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:     if (!empty($data->reset_lesson_user_overrides)) {",
          "839:         $DB->delete_records_select('lesson_overrides',",
          "840:                 'lessonid IN (SELECT id FROM {lesson} WHERE course = ?) AND userid IS NOT NULL', array($data->courseid));",
          "841:         $status[] = array(",
          "842:         'component' => $componentstr,",
          "843:         'item' => get_string('useroverridesdeleted', 'lesson'),",
          "844:         'error' => false);",
          "845:     }",
          "847:     if (!empty($data->reset_lesson_group_overrides)) {",
          "848:         $DB->delete_records_select('lesson_overrides',",
          "849:         'lessonid IN (SELECT id FROM {lesson} WHERE course = ?) AND groupid IS NOT NULL', array($data->courseid));",
          "850:         $status[] = array(",
          "851:         'component' => $componentstr,",
          "852:         'item' => get_string('groupoverridesdeleted', 'lesson'),",
          "853:         'error' => false);",
          "854:     }",
          "857:         $DB->execute(\"UPDATE {lesson_overrides}",
          "858:                          SET available = available + ?",
          "859:                        WHERE lessonid IN (SELECT id FROM {lesson} WHERE course = ?)",
          "860:                          AND available <> 0\", array($data->timeshift, $data->courseid));",
          "861:         $DB->execute(\"UPDATE {lesson_overrides}",
          "862:                          SET deadline = deadline + ?",
          "863:                        WHERE lessonid IN (SELECT id FROM {lesson} WHERE course = ?)",
          "864:                          AND deadline <> 0\", array($data->timeshift, $data->courseid));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "820: function lesson_extend_settings_navigation($settings, $lessonnode) {",
          "821:     global $PAGE, $DB;",
          "823:     if (has_capability('mod/lesson:edit', $PAGE->cm->context)) {",
          "824:         $url = new moodle_url('/mod/lesson/view.php', array('id' => $PAGE->cm->id));",
          "825:         $lessonnode->add(get_string('preview', 'lesson'), $url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:     $keys = $lessonnode->get_children_key_list();",
          "977:     $beforekey = null;",
          "978:     $i = array_search('modedit', $keys);",
          "979:     if ($i === false and array_key_exists(0, $keys)) {",
          "980:         $beforekey = $keys[0];",
          "981:     } else if (array_key_exists($i + 1, $keys)) {",
          "982:         $beforekey = $keys[$i + 1];",
          "983:     }",
          "985:     if (has_capability('mod/lesson:manageoverrides', $PAGE->cm->context)) {",
          "986:         $url = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $PAGE->cm->id));",
          "987:         $node = navigation_node::create(get_string('groupoverrides', 'lesson'),",
          "988:                 new moodle_url($url, array('mode' => 'group')),",
          "989:                 navigation_node::TYPE_SETTING, null, 'mod_lesson_groupoverrides');",
          "990:         $lessonnode->add_node($node, $beforekey);",
          "992:         $node = navigation_node::create(get_string('useroverrides', 'lesson'),",
          "993:                 new moodle_url($url, array('mode' => 'user')),",
          "994:                 navigation_node::TYPE_SETTING, null, 'mod_lesson_useroverrides');",
          "995:         $lessonnode->add_node($node, $beforekey);",
          "996:     }",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:     return $code;",
          "639: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647: function lesson_process_group_deleted_in_course($courseid) {",
          "648:     global $DB;",
          "652:     $sql = \"SELECT o.id, o.lesson",
          "653:               FROM {lesson_overrides} o",
          "654:               JOIN {lesson} lesson ON lesson.id = o.lessonid",
          "655:          LEFT JOIN {groups} grp ON grp.id = o.groupid",
          "656:              WHERE lesson.course = :courseid",
          "657:                AND o.groupid IS NOT NULL",
          "658:                AND grp.id IS NULL\";",
          "659:     $params = array('courseid' => $courseid);",
          "660:     $records = $DB->get_records_sql_menu($sql, $params);",
          "661:     if (!$records) {",
          "662:         return; // Nothing to do.",
          "663:     }",
          "664:     $DB->delete_records_list('lesson_overrides', 'id', array_keys($records));",
          "665: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:         $cm = get_coursemodule_from_instance('lesson', $this->properties->id, $this->properties->course);",
          "989:         $context = context_module::instance($cm->id);",
          "991:         $DB->delete_records(\"lesson\", array(\"id\"=>$this->properties->id));",
          "992:         $DB->delete_records(\"lesson_pages\", array(\"lessonid\"=>$this->properties->id));",
          "993:         $DB->delete_records(\"lesson_answers\", array(\"lessonid\"=>$this->properties->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:         $this->delete_all_overrides();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1011:         return true;",
          "1012:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:     public function delete_override($overrideid) {",
          "1048:         global $CFG, $DB;",
          "1050:         require_once($CFG->dirroot . '/calendar/lib.php');",
          "1052:         $cm = get_coursemodule_from_instance('lesson', $this->properties->id, $this->properties->course);",
          "1054:         $override = $DB->get_record('lesson_overrides', array('id' => $overrideid), '*', MUST_EXIST);",
          "1057:         $conds = array('modulename' => 'lesson',",
          "1058:                 'instance' => $this->properties->id);",
          "1059:         if (isset($override->userid)) {",
          "1060:             $conds['userid'] = $override->userid;",
          "1061:         } else {",
          "1062:             $conds['groupid'] = $override->groupid;",
          "1063:         }",
          "1064:         $events = $DB->get_records('event', $conds);",
          "1065:         foreach ($events as $event) {",
          "1066:             $eventold = calendar_event::load($event);",
          "1067:             $eventold->delete();",
          "1068:         }",
          "1070:         $DB->delete_records('lesson_overrides', array('id' => $overrideid));",
          "1073:         $params = array(",
          "1074:             'objectid' => $override->id,",
          "1075:             'context' => context_module::instance($cm->id),",
          "1076:             'other' => array(",
          "1077:                 'lessonid' => $override->lessonid",
          "1078:             )",
          "1079:         );",
          "1081:         if (!empty($override->userid)) {",
          "1082:             $params['relateduserid'] = $override->userid;",
          "1083:             $event = \\mod_lesson\\event\\user_override_deleted::create($params);",
          "1084:         } else {",
          "1085:             $params['other']['groupid'] = $override->groupid;",
          "1086:             $event = \\mod_lesson\\event\\group_override_deleted::create($params);",
          "1087:         }",
          "1090:         $event->add_record_snapshot('lesson_overrides', $override);",
          "1091:         $event->trigger();",
          "1093:         return true;",
          "1094:     }",
          "1099:     public function delete_all_overrides() {",
          "1100:         global $DB;",
          "1102:         $overrides = $DB->get_records('lesson_overrides', array('lessonid' => $this->properties->id), 'id');",
          "1103:         foreach ($overrides as $override) {",
          "1104:             $this->delete_override($override->id);",
          "1105:         }",
          "1106:     }",
          "1121:     public function update_effective_access($userid) {",
          "1122:         global $DB;",
          "1125:         $override = $DB->get_record('lesson_overrides', array('lessonid' => $this->properties->id, 'userid' => $userid));",
          "1127:         if (!$override) {",
          "1128:             $override = new stdClass();",
          "1129:             $override->available = null;",
          "1130:             $override->deadline = null;",
          "1131:             $override->timelimit = null;",
          "1132:             $override->review = null;",
          "1133:             $override->maxattempts = null;",
          "1134:             $override->retake = null;",
          "1135:             $override->password = null;",
          "1136:         }",
          "1139:         $groupings = groups_get_user_groups($this->properties->course, $userid);",
          "1141:         if (!empty($groupings[0])) {",
          "1143:             list($extra, $params) = $DB->get_in_or_equal(array_values($groupings[0]));",
          "1144:             $sql = \"SELECT * FROM {lesson_overrides}",
          "1145:                     WHERE groupid $extra AND lessonid = ?\";",
          "1146:             $params[] = $this->properties->id;",
          "1147:             $records = $DB->get_records_sql($sql, $params);",
          "1150:             $availables = array();",
          "1151:             $deadlines = array();",
          "1152:             $timelimits = array();",
          "1153:             $reviews = array();",
          "1154:             $attempts = array();",
          "1155:             $retakes = array();",
          "1156:             $passwords = array();",
          "1158:             foreach ($records as $gpoverride) {",
          "1159:                 if (isset($gpoverride->available)) {",
          "1160:                     $availables[] = $gpoverride->available;",
          "1161:                 }",
          "1162:                 if (isset($gpoverride->deadline)) {",
          "1163:                     $deadlines[] = $gpoverride->deadline;",
          "1164:                 }",
          "1165:                 if (isset($gpoverride->timelimit)) {",
          "1166:                     $timelimits[] = $gpoverride->timelimit;",
          "1167:                 }",
          "1168:                 if (isset($gpoverride->review)) {",
          "1169:                     $reviews[] = $gpoverride->review;",
          "1170:                 }",
          "1171:                 if (isset($gpoverride->maxattempts)) {",
          "1172:                     $attempts[] = $gpoverride->maxattempts;",
          "1173:                 }",
          "1174:                 if (isset($gpoverride->retake)) {",
          "1175:                     $retakes[] = $gpoverride->retake;",
          "1176:                 }",
          "1177:                 if (isset($gpoverride->password)) {",
          "1178:                     $passwords[] = $gpoverride->password;",
          "1179:                 }",
          "1180:             }",
          "1182:             if (is_null($override->available) && count($availables)) {",
          "1183:                 $override->available = min($availables);",
          "1184:             }",
          "1185:             if (is_null($override->deadline) && count($deadlines)) {",
          "1186:                 if (in_array(0, $deadlines)) {",
          "1187:                     $override->deadline = 0;",
          "1188:                 } else {",
          "1189:                     $override->deadline = max($deadlines);",
          "1190:                 }",
          "1191:             }",
          "1192:             if (is_null($override->timelimit) && count($timelimits)) {",
          "1193:                 if (in_array(0, $timelimits)) {",
          "1194:                     $override->timelimit = 0;",
          "1195:                 } else {",
          "1196:                     $override->timelimit = max($timelimits);",
          "1197:                 }",
          "1198:             }",
          "1199:             if (is_null($override->review) && count($reviews)) {",
          "1200:                 $override->review = max($reviews);",
          "1201:             }",
          "1202:             if (is_null($override->maxattempts) && count($attempts)) {",
          "1203:                 $override->maxattempts = max($attempts);",
          "1204:             }",
          "1205:             if (is_null($override->retake) && count($retakes)) {",
          "1206:                 $override->retake = max($retakes);",
          "1207:             }",
          "1208:             if (is_null($override->password) && count($passwords)) {",
          "1209:                 $override->password = array_shift($passwords);",
          "1210:                 if (count($passwords)) {",
          "1211:                     $override->extrapasswords = $passwords;",
          "1212:                 }",
          "1213:             }",
          "1215:         }",
          "1218:         $keys = array('available', 'deadline', 'timelimit', 'maxattempts', 'review', 'retake');",
          "1219:         foreach ($keys as $key) {",
          "1220:             if (isset($override->{$key})) {",
          "1221:                 $this->properties->{$key} = $override->{$key};",
          "1222:             }",
          "1223:         }",
          "1226:         if (isset($override->password)) {",
          "1227:             if ($override->password == '') {",
          "1228:                 $this->properties->usepassword = 0;",
          "1229:             } else {",
          "1230:                 $this->properties->usepassword = 1;",
          "1231:                 $this->properties->password = $override->password;",
          "1232:                 if (isset($override->extrapasswords)) {",
          "1233:                     $this->properties->extrapasswords = $override->extrapasswords;",
          "1234:                 }",
          "1235:             }",
          "1236:         }",
          "1237:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1454:     public function time_remaining($starttime) {",
          "1456:         $hours = floor($timeleft/3600);",
          "1457:         $timeleft = $timeleft - ($hours * 3600);",
          "1458:         $minutes = floor($timeleft/60);",
          "",
          "[Removed Lines]",
          "1455:         $timeleft = $starttime + $this->timelimit - time();",
          "",
          "[Added Lines]",
          "1680:         $timeleft = $starttime + $this->properties->timelimit - time();",
          "",
          "---------------"
        ],
        "mod/lesson/mediafile.php||mod/lesson/mediafile.php": [
          "File: mod/lesson/mediafile.php -> mod/lesson/mediafile.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: require_login($course, false, $cm);",
          "41: $context = context_module::instance($cm->id);",
          "42: $canmanage = has_capability('mod/lesson:manage', $context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: $lesson->update_effective_access($USER->id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         if (!empty($userpassword) && (($lesson->password == md5(trim($userpassword))) || ($lesson->password == trim($userpassword)))) {",
          "88:             $USER->lessonloggedin[$lesson->id] = true;",
          "89:             if ($lesson->highscores) {",
          "91:                 redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "92:             }",
          "94:             echo $lessonoutput->header($lesson, $cm);",
          "95:             echo $lessonoutput->login_prompt($lesson, $userpassword !== '');",
          "96:             echo $lessonoutput->footer();",
          "",
          "[Removed Lines]",
          "93:         } else {",
          "",
          "[Added Lines]",
          "93:             $correctpass = true;",
          "98:         } else if (isset($lesson->extrapasswords)) {",
          "100:             foreach ($lesson->extrapasswords as $password) {",
          "101:                 if (strcmp($password, md5(trim($userpassword))) === 0 || strcmp($password, trim($userpassword)) === 0) {",
          "102:                     $correctpass = true;",
          "103:                     $USER->lessonloggedin[$lesson->id] = true;",
          "104:                     if ($lesson->highscores) {",
          "106:                         redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "107:                     }",
          "108:                 }",
          "109:             }",
          "110:         }",
          "111:         if (!$correctpass) {",
          "",
          "---------------"
        ],
        "mod/lesson/override_form.php||mod/lesson/override_form.php": [
          "File: mod/lesson/override_form.php -> mod/lesson/override_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: require_once($CFG->libdir . '/formslib.php');",
          "29: require_once($CFG->dirroot . '/mod/lesson/mod_form.php');",
          "38: class lesson_override_form extends moodleform {",
          "41:     protected $cm;",
          "44:     protected $lesson;",
          "47:     protected $context;",
          "50:     protected $groupmode;",
          "53:     protected $groupid;",
          "56:     protected $userid;",
          "67:     public function __construct($submiturl, $cm, $lesson, $context, $groupmode, $override) {",
          "69:         $this->cm = $cm;",
          "70:         $this->lesson = $lesson;",
          "71:         $this->context = $context;",
          "72:         $this->groupmode = $groupmode;",
          "73:         $this->groupid = empty($override->groupid) ? 0 : $override->groupid;",
          "74:         $this->userid = empty($override->userid) ? 0 : $override->userid;",
          "76:         parent::__construct($submiturl, null, 'post');",
          "78:     }",
          "83:     protected function definition() {",
          "84:         global $CFG, $DB;",
          "86:         $cm = $this->cm;",
          "87:         $mform = $this->_form;",
          "89:         $mform->addElement('header', 'override', get_string('override', 'lesson'));",
          "91:         if ($this->groupmode) {",
          "93:             if ($this->groupid) {",
          "95:                 $groupchoices = array();",
          "96:                 $groupchoices[$this->groupid] = groups_get_group_name($this->groupid);",
          "97:                 $mform->addElement('select', 'groupid',",
          "98:                         get_string('overridegroup', 'lesson'), $groupchoices);",
          "99:                 $mform->freeze('groupid');",
          "100:             } else {",
          "102:                 $groups = groups_get_all_groups($cm->course);",
          "103:                 if (empty($groups)) {",
          "105:                     $link = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $cm->id));",
          "106:                     print_error('groupsnone', 'lesson', $link);",
          "107:                 }",
          "109:                 $groupchoices = array();",
          "110:                 foreach ($groups as $group) {",
          "111:                     $groupchoices[$group->id] = $group->name;",
          "112:                 }",
          "113:                 unset($groups);",
          "115:                 if (count($groupchoices) == 0) {",
          "116:                     $groupchoices[0] = get_string('none');",
          "117:                 }",
          "119:                 $mform->addElement('select', 'groupid',",
          "120:                         get_string('overridegroup', 'lesson'), $groupchoices);",
          "121:                 $mform->addRule('groupid', get_string('required'), 'required', null, 'client');",
          "122:             }",
          "123:         } else {",
          "125:             if ($this->userid) {",
          "127:                 $user = $DB->get_record('user', array('id' => $this->userid));",
          "128:                 $userchoices = array();",
          "129:                 $userchoices[$this->userid] = fullname($user);",
          "130:                 $mform->addElement('select', 'userid',",
          "131:                         get_string('overrideuser', 'lesson'), $userchoices);",
          "132:                 $mform->freeze('userid');",
          "133:             } else {",
          "135:                 $users = array();",
          "136:                 list($sort, $sortparams) = users_order_by_sql('u');",
          "137:                 if (!empty($sortparams)) {",
          "138:                     throw new coding_exception('users_order_by_sql returned some query parameters. ' .",
          "139:                             'This is unexpected, and a problem because there is no way to pass these ' .",
          "140:                             'parameters to get_users_by_capability. See MDL-34657.');",
          "141:                 }",
          "142:                 $users = get_enrolled_users($this->context, '', 0,",
          "143:                         'u.id, u.email, ' . get_all_user_name_fields(true, 'u'),",
          "144:                         $sort);",
          "147:                 $info = new \\core_availability\\info_module($cm);",
          "148:                 $users = $info->filter_user_list($users);",
          "150:                 if (empty($users)) {",
          "152:                     $link = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $cm->id));",
          "153:                     print_error('usersnone', 'lesson', $link);",
          "154:                 }",
          "156:                 $userchoices = array();",
          "157:                 $canviewemail = in_array('email', get_extra_user_fields($this->context));",
          "158:                 foreach ($users as $id => $user) {",
          "159:                     if (empty($invalidusers[$id]) || (!empty($override) &&",
          "160:                             $id == $override->userid)) {",
          "161:                         if ($canviewemail) {",
          "162:                             $userchoices[$id] = fullname($user) . ', ' . $user->email;",
          "163:                         } else {",
          "164:                             $userchoices[$id] = fullname($user);",
          "165:                         }",
          "166:                     }",
          "167:                 }",
          "168:                 unset($users);",
          "170:                 if (count($userchoices) == 0) {",
          "171:                     $userchoices[0] = get_string('none');",
          "172:                 }",
          "173:                 $mform->addElement('searchableselector', 'userid',",
          "174:                         get_string('overrideuser', 'lesson'), $userchoices);",
          "175:                 $mform->addRule('userid', get_string('required'), 'required', null, 'client');",
          "176:             }",
          "177:         }",
          "182:         $mform->addElement('passwordunmask', 'password', get_string('usepassword', 'lesson'));",
          "183:         $mform->setType('password', PARAM_TEXT);",
          "184:         $mform->addHelpButton('password', 'usepassword', 'lesson');",
          "185:         $mform->setDefault('password', $this->lesson->password);;",
          "188:         $mform->addElement('date_time_selector', 'available', get_string('available', 'lesson'), array('optional' => true));",
          "189:         $mform->setDefault('available', $this->lesson->available);",
          "191:         $mform->addElement('date_time_selector', 'deadline', get_string('deadline', 'lesson'), array('optional' => true));",
          "192:         $mform->setDefault('deadline', $this->lesson->deadline);",
          "195:         $mform->addElement('duration', 'timelimit',",
          "196:                 get_string('timelimit', 'lesson'), array('optional' => true));",
          "197:         if ($this->lesson->timelimit != 0) {",
          "198:             $mform->setDefault('timelimit', 0);",
          "199:         } else {",
          "200:             $mform->setDefault('timelimit', $this->lesson->timelimit);",
          "201:         }",
          "204:         $mform->addElement('selectyesno', 'review', get_string('displayreview', 'lesson'));",
          "205:         $mform->addHelpButton('review', 'displayreview', 'lesson');",
          "206:         $mform->setDefault('review', $this->lesson->review);",
          "209:         $numbers = array();",
          "210:         for ($i = 10; $i > 0; $i--) {",
          "211:             $numbers[$i] = $i;",
          "212:         }",
          "213:         $mform->addElement('select', 'maxattempts', get_string('maximumnumberofattempts', 'lesson'), $numbers);",
          "214:         $mform->addHelpButton('maxattempts', 'maximumnumberofattempts', 'lesson');",
          "215:         $mform->setDefault('maxattempts', $this->lesson->maxattempts);",
          "218:         $mform->addElement('selectyesno', 'retake', get_string('retakesallowed', 'lesson'));",
          "219:         $mform->addHelpButton('retake', 'retakesallowed', 'lesson');",
          "220:         $mform->setDefault('retake', $this->lesson->retake);",
          "223:         $mform->addElement('submit', 'resetbutton',",
          "224:                 get_string('reverttodefaults', 'lesson'));",
          "226:         $buttonarray = array();",
          "227:         $buttonarray[] = $mform->createElement('submit', 'submitbutton',",
          "228:                 get_string('save', 'lesson'));",
          "229:         $buttonarray[] = $mform->createElement('submit', 'againbutton',",
          "230:                 get_string('saveoverrideandstay', 'lesson'));",
          "231:         $buttonarray[] = $mform->createElement('cancel');",
          "233:         $mform->addGroup($buttonarray, 'buttonbar', '', array(' '), false);",
          "234:         $mform->closeHeaderBefore('buttonbar');",
          "236:     }",
          "245:     public function validation($data, $files) {",
          "246:         global $COURSE, $DB;",
          "247:         $errors = parent::validation($data, $files);",
          "249:         $mform =& $this->_form;",
          "250:         $lesson = $this->lesson;",
          "252:         if ($mform->elementExists('userid')) {",
          "253:             if (empty($data['userid'])) {",
          "254:                 $errors['userid'] = get_string('required');",
          "255:             }",
          "256:         }",
          "258:         if ($mform->elementExists('groupid')) {",
          "259:             if (empty($data['groupid'])) {",
          "260:                 $errors['groupid'] = get_string('required');",
          "261:             }",
          "262:         }",
          "265:         if (!empty($data['available']) && !empty($data['deadline'])) {",
          "266:             if ($data['deadline'] < $data['available'] ) {",
          "267:                 $errors['deadline'] = get_string('closebeforeopen', 'lesson');",
          "268:             }",
          "269:         }",
          "272:         $changed = false;",
          "273:         $keys = array('available', 'deadline', 'review', 'timelimit', 'maxattempts', 'retake', 'password');",
          "274:         foreach ($keys as $key) {",
          "275:             if ($data[$key] != $lesson->{$key}) {",
          "276:                 $changed = true;",
          "277:                 break;",
          "278:             }",
          "279:         }",
          "281:         if (!$changed) {",
          "282:             $errors['available'] = get_string('nooverridedata', 'lesson');",
          "283:         }",
          "285:         return $errors;",
          "286:     }",
          "287: }",
          "",
          "---------------"
        ],
        "mod/lesson/overridedelete.php||mod/lesson/overridedelete.php": [
          "File: mod/lesson/overridedelete.php -> mod/lesson/overridedelete.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: require_once(dirname(__FILE__) . '/../../config.php');",
          "27: require_once($CFG->dirroot.'/mod/lesson/lib.php');",
          "28: require_once($CFG->dirroot.'/mod/lesson/locallib.php');",
          "29: require_once($CFG->dirroot.'/mod/lesson/override_form.php');",
          "31: $overrideid = required_param('id', PARAM_INT);",
          "32: $confirm = optional_param('confirm', false, PARAM_BOOL);",
          "34: if (! $override = $DB->get_record('lesson_overrides', array('id' => $overrideid))) {",
          "35:     print_error('invalidoverrideid', 'lesson');",
          "36: }",
          "38: $lesson = new lesson($DB->get_record('lesson', array('id' => $override->lessonid), '*', MUST_EXIST));",
          "40: if (! $cm = get_coursemodule_from_instance(\"lesson\", $lesson->id, $lesson->course)) {",
          "41:     print_error('invalidcoursemodule');",
          "42: }",
          "43: $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);",
          "45: $context = context_module::instance($cm->id);",
          "47: require_login($course, false, $cm);",
          "50: require_capability('mod/lesson:manageoverrides', $context);",
          "52: $url = new moodle_url('/mod/lesson/overridedelete.php', array('id' => $override->id));",
          "53: $confirmurl = new moodle_url($url, array('id' => $override->id, 'confirm' => 1));",
          "54: $cancelurl = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $cm->id));",
          "56: if (!empty($override->userid)) {",
          "57:     $cancelurl->param('mode', 'user');",
          "58: }",
          "61: if ($confirm) {",
          "62:     require_sesskey();",
          "64:     $lesson->delete_override($override->id);",
          "66:     redirect($cancelurl);",
          "67: }",
          "70: $stroverride = get_string('override', 'lesson');",
          "71: $title = get_string('deletecheck', null, $stroverride);",
          "73: $PAGE->set_url($url);",
          "74: $PAGE->set_pagelayout('admin');",
          "75: $PAGE->navbar->add($title);",
          "76: $PAGE->set_title($title);",
          "77: $PAGE->set_heading($course->fullname);",
          "79: echo $OUTPUT->header();",
          "80: echo $OUTPUT->heading(format_string($lesson->name, true, array('context' => $context)));",
          "82: if ($override->groupid) {",
          "83:     $group = $DB->get_record('groups', array('id' => $override->groupid), 'id, name');",
          "84:     $confirmstr = get_string(\"overridedeletegroupsure\", \"lesson\", $group->name);",
          "85: } else {",
          "86:     $namefields = get_all_user_name_fields(true);",
          "87:     $user = $DB->get_record('user', array('id' => $override->userid),",
          "88:             'id, ' . $namefields);",
          "89:     $confirmstr = get_string(\"overridedeleteusersure\", \"lesson\", fullname($user));",
          "90: }",
          "92: echo $OUTPUT->confirm($confirmstr, $confirmurl, $cancelurl);",
          "94: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "mod/lesson/overrideedit.php||mod/lesson/overrideedit.php": [
          "File: mod/lesson/overrideedit.php -> mod/lesson/overrideedit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: require_once(dirname(__FILE__) . '/../../config.php');",
          "27: require_once($CFG->dirroot.'/mod/lesson/lib.php');",
          "28: require_once($CFG->dirroot.'/mod/lesson/locallib.php');",
          "29: require_once($CFG->dirroot.'/mod/lesson/override_form.php');",
          "32: $cmid = optional_param('cmid', 0, PARAM_INT);",
          "33: $overrideid = optional_param('id', 0, PARAM_INT);",
          "34: $action = optional_param('action', null, PARAM_ALPHA);",
          "35: $reset = optional_param('reset', false, PARAM_BOOL);",
          "37: $override = null;",
          "38: if ($overrideid) {",
          "40:     if (! $override = $DB->get_record('lesson_overrides', array('id' => $overrideid))) {",
          "41:         print_error('invalidoverrideid', 'lesson');",
          "42:     }",
          "44:     $lesson = new lesson($DB->get_record('lesson', array('id' => $override->lessonid), '*',  MUST_EXIST));",
          "46:     list($course, $cm) = get_course_and_cm_from_instance($lesson, 'lesson');",
          "48: } else if ($cmid) {",
          "49:     list($course, $cm) = get_course_and_cm_from_cmid($cmid, 'lesson');",
          "50:     $lesson = new lesson($DB->get_record('lesson', array('id' => $cm->instance), '*', MUST_EXIST));",
          "52: } else {",
          "53:     print_error('invalidcoursemodule');",
          "54: }",
          "55: $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);",
          "57: $url = new moodle_url('/mod/lesson/overrideedit.php');",
          "58: if ($action) {",
          "59:     $url->param('action', $action);",
          "60: }",
          "61: if ($overrideid) {",
          "62:     $url->param('id', $overrideid);",
          "63: } else {",
          "64:     $url->param('cmid', $cmid);",
          "65: }",
          "67: $PAGE->set_url($url);",
          "69: require_login($course, false, $cm);",
          "71: $context = context_module::instance($cm->id);",
          "74: require_capability('mod/lesson:manageoverrides', $context);",
          "76: if ($overrideid) {",
          "78:     $data = clone $override;",
          "79: } else {",
          "81:     $data = new stdClass();",
          "82: }",
          "85: $keys = array('available', 'deadline', 'review', 'timelimit', 'maxattempts', 'retake', 'password');",
          "86: foreach ($keys as $key) {",
          "87:     if (!isset($data->{$key}) || $reset) {",
          "88:         $data->{$key} = $lesson->{$key};",
          "89:     }",
          "90: }",
          "94: if ($action === 'duplicate') {",
          "95:     $override->id = null;",
          "96:     $override->userid = null;",
          "97:     $override->groupid = null;",
          "98: }",
          "101: $groupmode = !empty($data->groupid) || ($action === 'addgroup' && empty($overrideid));",
          "103: $overridelisturl = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $cm->id));",
          "104: if (!$groupmode) {",
          "105:     $overridelisturl->param('mode', 'user');",
          "106: }",
          "109: $mform = new lesson_override_form($url, $cm, $lesson, $context, $groupmode, $override);",
          "110: $mform->set_data($data);",
          "112: if ($mform->is_cancelled()) {",
          "113:     redirect($overridelisturl);",
          "115: } else if (optional_param('resetbutton', 0, PARAM_ALPHA)) {",
          "116:     $url->param('reset', true);",
          "117:     redirect($url);",
          "119: } else if ($fromform = $mform->get_data()) {",
          "121:     $fromform->lessonid = $lesson->id;",
          "124:     foreach ($keys as $key) {",
          "125:         if ($fromform->{$key} == $lesson->{$key}) {",
          "126:             $fromform->{$key} = null;",
          "127:         }",
          "128:     }",
          "131:     $userorgroupchanged = false;",
          "132:     if (empty($override->id)) {",
          "133:         $userorgroupchanged = true;",
          "134:     } else if (!empty($fromform->userid)) {",
          "135:         $userorgroupchanged = $fromform->userid !== $override->userid;",
          "136:     } else {",
          "137:         $userorgroupchanged = $fromform->groupid !== $override->groupid;",
          "138:     }",
          "140:     if ($userorgroupchanged) {",
          "141:         $conditions = array(",
          "142:                 'lessonid' => $lesson->id,",
          "143:                 'userid' => empty($fromform->userid) ? null : $fromform->userid,",
          "144:                 'groupid' => empty($fromform->groupid) ? null : $fromform->groupid);",
          "145:         if ($oldoverride = $DB->get_record('lesson_overrides', $conditions)) {",
          "148:             foreach ($keys as $key) {",
          "149:                 if (is_null($fromform->{$key})) {",
          "150:                     $fromform->{$key} = $oldoverride->{$key};",
          "151:                 }",
          "152:             }",
          "154:             $lesson->delete_override($oldoverride->id);",
          "155:         }",
          "156:     }",
          "159:     $params = array(",
          "160:         'context' => $context,",
          "161:         'other' => array(",
          "162:             'lessonid' => $lesson->id",
          "163:         )",
          "164:     );",
          "165:     if (!empty($override->id)) {",
          "166:         $fromform->id = $override->id;",
          "167:         $DB->update_record('lesson_overrides', $fromform);",
          "170:         $params['objectid'] = $override->id;",
          "171:         if (!$groupmode) {",
          "172:             $params['relateduserid'] = $fromform->userid;",
          "173:             $event = \\mod_lesson\\event\\user_override_updated::create($params);",
          "174:         } else {",
          "175:             $params['other']['groupid'] = $fromform->groupid;",
          "176:             $event = \\mod_lesson\\event\\group_override_updated::create($params);",
          "177:         }",
          "180:         $event->trigger();",
          "181:     } else {",
          "182:         unset($fromform->id);",
          "183:         $fromform->id = $DB->insert_record('lesson_overrides', $fromform);",
          "186:         $params['objectid'] = $fromform->id;",
          "187:         if (!$groupmode) {",
          "188:             $params['relateduserid'] = $fromform->userid;",
          "189:             $event = \\mod_lesson\\event\\user_override_created::create($params);",
          "190:         } else {",
          "191:             $params['other']['groupid'] = $fromform->groupid;",
          "192:             $event = \\mod_lesson\\event\\group_override_created::create($params);",
          "193:         }",
          "196:         $event->trigger();",
          "197:     }",
          "199:     lesson_update_events($lesson, $fromform);",
          "201:     if (!empty($fromform->submitbutton)) {",
          "202:         redirect($overridelisturl);",
          "203:     }",
          "206:     $url->remove_params('cmid');",
          "207:     $url->param('action', 'duplicate');",
          "208:     $url->param('id', $fromform->id);",
          "209:     redirect($url);",
          "211: }",
          "214: $pagetitle = get_string('editoverride', 'lesson');",
          "215: $PAGE->navbar->add($pagetitle);",
          "216: $PAGE->set_pagelayout('admin');",
          "217: $PAGE->set_title($pagetitle);",
          "218: $PAGE->set_heading($course->fullname);",
          "219: echo $OUTPUT->header();",
          "220: echo $OUTPUT->heading(format_string($lesson->name, true, array('context' => $context)));",
          "222: $mform->display();",
          "224: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "mod/lesson/overrides.php||mod/lesson/overrides.php": [
          "File: mod/lesson/overrides.php -> mod/lesson/overrides.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: require_once(dirname(__FILE__) . '/../../config.php');",
          "27: require_once($CFG->dirroot.'/mod/lesson/lib.php');",
          "28: require_once($CFG->dirroot.'/mod/lesson/locallib.php');",
          "29: require_once($CFG->dirroot.'/mod/lesson/override_form.php');",
          "32: $cmid = required_param('cmid', PARAM_INT);",
          "33: $mode = optional_param('mode', '', PARAM_ALPHA); // One of 'user' or 'group', default is 'group'.",
          "35: list($course, $cm) = get_course_and_cm_from_cmid($cmid, 'lesson');",
          "36: $lesson = $DB->get_record('lesson', array('id' => $cm->instance), '*', MUST_EXIST);",
          "39: $groups = groups_get_all_groups($cm->course);",
          "40: if ($groups === false) {",
          "41:     $groups = array();",
          "42: }",
          "45: if ($mode != \"user\" and $mode != \"group\") {",
          "46:     if (!empty($groups)) {",
          "47:         $mode = \"group\";",
          "48:     } else {",
          "49:         $mode = \"user\";",
          "50:     }",
          "51: }",
          "52: $groupmode = ($mode == \"group\");",
          "54: $url = new moodle_url('/mod/lesson/overrides.php', array('cmid' => $cm->id, 'mode' => $mode));",
          "56: $PAGE->set_url($url);",
          "58: require_login($course, false, $cm);",
          "60: $context = context_module::instance($cm->id);",
          "63: require_capability('mod/lesson:manageoverrides', $context);",
          "66: $PAGE->set_pagelayout('admin');",
          "67: $PAGE->set_title(get_string('overrides', 'lesson'));",
          "68: $PAGE->set_heading($course->fullname);",
          "69: echo $OUTPUT->header();",
          "70: echo $OUTPUT->heading(format_string($lesson->name, true, array('context' => $context)));",
          "73: $sql = 'SELECT o.id",
          "74:             FROM {lesson_overrides} o LEFT JOIN {groups} g",
          "75:             ON o.groupid = g.id",
          "76:             WHERE o.groupid IS NOT NULL",
          "77:               AND g.id IS NULL",
          "78:               AND o.lessonid = ?';",
          "79: $params = array($lesson->id);",
          "80: $orphaned = $DB->get_records_sql($sql, $params);",
          "81: if (!empty($orphaned)) {",
          "82:     $DB->delete_records_list('lesson_overrides', 'id', array_keys($orphaned));",
          "83: }",
          "86: if ($groupmode) {",
          "87:     $colname = get_string('group');",
          "88:     $sql = 'SELECT o.*, g.name",
          "89:                 FROM {lesson_overrides} o",
          "90:                 JOIN {groups} g ON o.groupid = g.id",
          "91:                 WHERE o.lessonid = :lessonid",
          "92:                 ORDER BY g.name';",
          "93:     $params = array('lessonid' => $lesson->id);",
          "94: } else {",
          "95:     $colname = get_string('user');",
          "96:     list($sort, $params) = users_order_by_sql('u');",
          "97:     $sql = 'SELECT o.*, ' . get_all_user_name_fields(true, 'u') . '",
          "98:             FROM {lesson_overrides} o",
          "99:             JOIN {user} u ON o.userid = u.id",
          "100:             WHERE o.lessonid = :lessonid",
          "101:             ORDER BY ' . $sort;",
          "102:     $params['lessonid'] = $lesson->id;",
          "103: }",
          "105: $overrides = $DB->get_records_sql($sql, $params);",
          "108: $table = new html_table();",
          "109: $table->headspan = array(1, 2, 1);",
          "110: $table->colclasses = array('colname', 'colsetting', 'colvalue', 'colaction');",
          "111: $table->head = array(",
          "112:         $colname,",
          "113:         get_string('overrides', 'lesson'),",
          "114:         get_string('action'),",
          "115: );",
          "117: $userurl = new moodle_url('/user/view.php', array());",
          "118: $groupurl = new moodle_url('/group/overview.php', array('id' => $cm->course));",
          "120: $overridedeleteurl = new moodle_url('/mod/lesson/overridedelete.php');",
          "121: $overrideediturl = new moodle_url('/mod/lesson/overrideedit.php');",
          "123: $hasinactive = false; // Whether there are any inactive overrides.",
          "125: foreach ($overrides as $override) {",
          "127:     $fields = array();",
          "128:     $values = array();",
          "129:     $active = true;",
          "132:     if (!$groupmode) {",
          "133:         if (!is_enrolled($context, $override->userid)) {",
          "135:             $active = false;",
          "136:         } else if (!\\core_availability\\info_module::is_user_visible($cm, $override->userid)) {",
          "138:             $active = false;",
          "139:         }",
          "140:     }",
          "143:     if (isset($override->available)) {",
          "144:         $fields[] = get_string('lessonopens', 'lesson');",
          "145:         $values[] = $override->available > 0 ?",
          "146:                 userdate($override->available) : get_string('noopen', 'lesson');",
          "147:     }",
          "150:     if (isset($override->deadline)) {",
          "151:         $fields[] = get_string('lessoncloses', 'lesson');",
          "152:         $values[] = $override->deadline > 0 ?",
          "153:                 userdate($override->deadline) : get_string('noclose', 'lesson');",
          "154:     }",
          "157:     if (isset($override->timelimit)) {",
          "158:         $fields[] = get_string('timelimit', 'lesson');",
          "159:         $values[] = $override->timelimit > 0 ?",
          "160:                 format_time($override->timelimit) : get_string('none', 'lesson');",
          "161:     }",
          "164:     if (isset($override->review)) {",
          "165:         $fields[] = get_string('displayreview', 'lesson');",
          "166:         $values[] = $override->review ?",
          "167:                 get_string('yes') : get_string('no');",
          "168:     }",
          "171:     if (isset($override->maxattempts)) {",
          "172:         $fields[] = get_string('maximumnumberofattempts', 'lesson');",
          "173:         $values[] = $override->maxattempts > 0 ?",
          "174:                 $override->maxattempts : get_string('unlimited');",
          "175:     }",
          "178:     if (isset($override->retake)) {",
          "179:         $fields[] = get_string('retakesallowed', 'lesson');",
          "180:         $values[] = $override->retake ?",
          "181:                 get_string('yes') : get_string('no');",
          "182:     }",
          "185:     if (isset($override->password)) {",
          "186:         $fields[] = get_string('usepassword', 'lesson');",
          "187:         $values[] = $override->password !== '' ?",
          "188:                 get_string('enabled', 'lesson') : get_string('none', 'lesson');",
          "189:     }",
          "192:     $iconstr = '';",
          "194:     if ($active) {",
          "196:         $editurlstr = $overrideediturl->out(true, array('id' => $override->id));",
          "197:         $iconstr = '<a title=\"' . get_string('edit') . '\" href=\"'. $editurlstr . '\">' .",
          "198:                 '<img src=\"' . $OUTPUT->pix_url('t/edit') . '\" class=\"iconsmall\" alt=\"' .",
          "199:                 get_string('edit') . '\" /></a> ';",
          "201:         $copyurlstr = $overrideediturl->out(true,",
          "202:                 array('id' => $override->id, 'action' => 'duplicate'));",
          "203:         $iconstr .= '<a title=\"' . get_string('copy') . '\" href=\"' . $copyurlstr . '\">' .",
          "204:                 '<img src=\"' . $OUTPUT->pix_url('t/copy') . '\" class=\"iconsmall\" alt=\"' .",
          "205:                 get_string('copy') . '\" /></a> ';",
          "206:     }",
          "208:     $deleteurlstr = $overridedeleteurl->out(true,",
          "209:             array('id' => $override->id, 'sesskey' => sesskey()));",
          "210:     $iconstr .= '<a title=\"' . get_string('delete') . '\" href=\"' . $deleteurlstr . '\">' .",
          "211:             '<img src=\"' . $OUTPUT->pix_url('t/delete') . '\" class=\"iconsmall\" alt=\"' .",
          "212:             get_string('delete') . '\" /></a> ';",
          "214:     if ($groupmode) {",
          "215:         $usergroupstr = '<a href=\"' . $groupurl->out(true,",
          "216:                 array('group' => $override->groupid)) . '\" >' . $override->name . '</a>';",
          "217:     } else {",
          "218:         $usergroupstr = '<a href=\"' . $userurl->out(true,",
          "219:                 array('id' => $override->userid)) . '\" >' . fullname($override) . '</a>';",
          "220:     }",
          "222:     $class = '';",
          "223:     if (!$active) {",
          "224:         $class = \"dimmed_text\";",
          "225:         $usergroupstr .= '*';",
          "226:         $hasinactive = true;",
          "227:     }",
          "229:     $usergroupcell = new html_table_cell();",
          "230:     $usergroupcell->rowspan = count($fields);",
          "231:     $usergroupcell->text = $usergroupstr;",
          "232:     $actioncell = new html_table_cell();",
          "233:     $actioncell->rowspan = count($fields);",
          "234:     $actioncell->text = $iconstr;",
          "236:     for ($i = 0; $i < count($fields); ++$i) {",
          "237:         $row = new html_table_row();",
          "238:         $row->attributes['class'] = $class;",
          "239:         if ($i == 0) {",
          "240:             $row->cells[] = $usergroupcell;",
          "241:         }",
          "242:         $cell1 = new html_table_cell();",
          "243:         $cell1->text = $fields[$i];",
          "244:         $row->cells[] = $cell1;",
          "245:         $cell2 = new html_table_cell();",
          "246:         $cell2->text = $values[$i];",
          "247:         $row->cells[] = $cell2;",
          "248:         if ($i == 0) {",
          "249:             $row->cells[] = $actioncell;",
          "250:         }",
          "251:         $table->data[] = $row;",
          "252:     }",
          "253: }",
          "256: echo html_writer::start_tag('div', array('id' => 'lessonoverrides'));",
          "257: if (count($table->data)) {",
          "258:     echo html_writer::table($table);",
          "259: }",
          "260: if ($hasinactive) {",
          "261:     echo $OUTPUT->notification(get_string('inactiveoverridehelp', 'lesson'), 'dimmed_text');",
          "262: }",
          "264: echo html_writer::start_tag('div', array('class' => 'buttons'));",
          "265: $options = array();",
          "266: if ($groupmode) {",
          "267:     if (empty($groups)) {",
          "269:         echo $OUTPUT->notification(get_string('groupsnone', 'lesson'), 'error');",
          "270:         $options['disabled'] = true;",
          "271:     }",
          "272:     echo $OUTPUT->single_button($overrideediturl->out(true,",
          "273:             array('action' => 'addgroup', 'cmid' => $cm->id)),",
          "274:             get_string('addnewgroupoverride', 'lesson'), 'post', $options);",
          "275: } else {",
          "276:     $users = array();",
          "278:     $users = get_enrolled_users($context);",
          "279:     $info = new \\core_availability\\info_module($cm);",
          "280:     $users = $info->filter_user_list($users);",
          "282:     if (empty($users)) {",
          "284:         echo $OUTPUT->notification(get_string('usersnone', 'lesson'), 'error');",
          "285:         $options['disabled'] = true;",
          "286:     }",
          "287:     echo $OUTPUT->single_button($overrideediturl->out(true,",
          "288:             array('action' => 'adduser', 'cmid' => $cm->id)),",
          "289:             get_string('addnewuseroverride', 'lesson'), 'get', $options);",
          "290: }",
          "291: echo html_writer::end_tag('div');",
          "292: echo html_writer::end_tag('div');",
          "295: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "mod/lesson/report.php||mod/lesson/report.php": [
          "File: mod/lesson/report.php -> mod/lesson/report.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:     $userid = optional_param('userid', null, PARAM_INT); // if empty, then will display the general detailed view",
          "411:     $try    = optional_param('try', null, PARAM_INT);",
          "413:     $lessonpages = $lesson->load_all_pages();",
          "414:     foreach ($lessonpages as $lessonpage) {",
          "415:         if ($lessonpage->prevpageid == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:     if (!empty($userid)) {",
          "415:         $lesson->update_effective_access($userid);",
          "416:     }",
          "",
          "---------------"
        ],
        "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php": [
          "File: mod/lesson/tests/events_test.php -> mod/lesson/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:         $this->assertEventContextNotUsed($event);",
          "503:         $this->assertDebuggingNotCalled();",
          "504:     }",
          "505: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:     public function test_user_override_created() {",
          "513:         $this->resetAfterTest();",
          "515:         $this->setAdminUser();",
          "516:         $course = $this->getDataGenerator()->create_course();",
          "517:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "519:         $params = array(",
          "520:             'objectid' => 1,",
          "521:             'context' => context_module::instance($lesson->cmid),",
          "522:             'other' => array(",
          "523:                 'lessonid' => $lesson->id",
          "524:             )",
          "525:         );",
          "526:         $event = \\mod_lesson\\event\\user_override_created::create($params);",
          "529:         $sink = $this->redirectEvents();",
          "530:         $event->trigger();",
          "531:         $events = $sink->get_events();",
          "532:         $event = reset($events);",
          "535:         $this->assertInstanceOf('\\mod_lesson\\event\\user_override_created', $event);",
          "536:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "537:         $this->assertEventContextNotUsed($event);",
          "538:     }",
          "546:     public function test_group_override_created() {",
          "547:         $this->resetAfterTest();",
          "549:         $this->setAdminUser();",
          "550:         $course = $this->getDataGenerator()->create_course();",
          "551:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "553:         $params = array(",
          "554:             'objectid' => 1,",
          "555:             'context' => context_module::instance($lesson->cmid),",
          "556:             'other' => array(",
          "557:                 'lessonid' => $lesson->id,",
          "558:                 'groupid' => 2",
          "559:             )",
          "560:         );",
          "561:         $event = \\mod_lesson\\event\\group_override_created::create($params);",
          "564:         $sink = $this->redirectEvents();",
          "565:         $event->trigger();",
          "566:         $events = $sink->get_events();",
          "567:         $event = reset($events);",
          "570:         $this->assertInstanceOf('\\mod_lesson\\event\\group_override_created', $event);",
          "571:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "572:         $this->assertEventContextNotUsed($event);",
          "573:     }",
          "581:     public function test_user_override_updated() {",
          "582:         $this->resetAfterTest();",
          "584:         $this->setAdminUser();",
          "585:         $course = $this->getDataGenerator()->create_course();",
          "586:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "588:         $params = array(",
          "589:             'objectid' => 1,",
          "590:             'relateduserid' => 2,",
          "591:             'context' => context_module::instance($lesson->cmid),",
          "592:             'other' => array(",
          "593:                 'lessonid' => $lesson->id",
          "594:             )",
          "595:         );",
          "596:         $event = \\mod_lesson\\event\\user_override_updated::create($params);",
          "599:         $sink = $this->redirectEvents();",
          "600:         $event->trigger();",
          "601:         $events = $sink->get_events();",
          "602:         $event = reset($events);",
          "605:         $this->assertInstanceOf('\\mod_lesson\\event\\user_override_updated', $event);",
          "606:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "607:         $expected = array($course->id, 'lesson', 'edit override', 'overrideedit.php?id=1', $lesson->id, $lesson->cmid);",
          "608:         $this->assertEventLegacyLogData($expected, $event);",
          "609:         $this->assertEventContextNotUsed($event);",
          "610:     }",
          "618:     public function test_group_override_updated() {",
          "619:         $this->resetAfterTest();",
          "621:         $this->setAdminUser();",
          "622:         $course = $this->getDataGenerator()->create_course();",
          "623:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "625:         $params = array(",
          "626:             'objectid' => 1,",
          "627:             'context' => context_module::instance($lesson->cmid),",
          "628:             'other' => array(",
          "629:                 'lessonid' => $lesson->id,",
          "630:                 'groupid' => 2",
          "631:             )",
          "632:         );",
          "633:         $event = \\mod_lesson\\event\\group_override_updated::create($params);",
          "636:         $sink = $this->redirectEvents();",
          "637:         $event->trigger();",
          "638:         $events = $sink->get_events();",
          "639:         $event = reset($events);",
          "642:         $this->assertInstanceOf('\\mod_lesson\\event\\group_override_updated', $event);",
          "643:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "644:         $expected = array($course->id, 'lesson', 'edit override', 'overrideedit.php?id=1', $lesson->id, $lesson->cmid);",
          "645:         $this->assertEventLegacyLogData($expected, $event);",
          "646:         $this->assertEventContextNotUsed($event);",
          "647:     }",
          "652:     public function test_user_override_deleted() {",
          "653:         global $DB;",
          "655:         $this->resetAfterTest();",
          "657:         $this->setAdminUser();",
          "658:         $course = $this->getDataGenerator()->create_course();",
          "659:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "662:         $override = new stdClass();",
          "663:         $override->lesson = $lesson->id;",
          "664:         $override->userid = 2;",
          "665:         $override->id = $DB->insert_record('lesson_overrides', $override);",
          "668:         $sink = $this->redirectEvents();",
          "669:         $lesson->delete_override($override->id);",
          "670:         $events = $sink->get_events();",
          "671:         $event = reset($events);",
          "674:         $this->assertInstanceOf('\\mod_lesson\\event\\user_override_deleted', $event);",
          "675:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "676:         $expected = array($course->id, 'lesson', 'delete override',",
          "677:                 'overrides.php?cmid=' . $lesson->cmid, $lesson->id, $lesson->cmid);",
          "678:         $this->assertEventLegacyLogData($expected, $event);",
          "679:         $this->assertEventContextNotUsed($event);",
          "680:     }",
          "685:     public function test_group_override_deleted() {",
          "686:         global $DB;",
          "688:         $this->resetAfterTest();",
          "690:         $this->setAdminUser();",
          "691:         $course = $this->getDataGenerator()->create_course();",
          "692:         $lesson = $this->getDataGenerator()->create_module('lesson', array('course' => $course->id));",
          "695:         $override = new stdClass();",
          "696:         $override->lesson = $lesson->id;",
          "697:         $override->groupid = 2;",
          "698:         $override->id = $DB->insert_record('lesson_overrides', $override);",
          "701:         $sink = $this->redirectEvents();",
          "702:         $lesson->delete_override($override->id);",
          "703:         $events = $sink->get_events();",
          "704:         $event = reset($events);",
          "707:         $this->assertInstanceOf('\\mod_lesson\\event\\group_override_deleted', $event);",
          "708:         $this->assertEquals(context_module::instance($lesson->cmid), $event->get_context());",
          "709:         $expected = array($course->id, 'lesson', 'delete override',",
          "710:                 'overrides.php?cmid=' . $lesson->cmid, $lesson->id, $lesson->cmid);",
          "711:         $this->assertEventLegacyLogData($expected, $event);",
          "712:         $this->assertEventContextNotUsed($event);",
          "713:     }",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015032700;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015033100;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     redirect(new moodle_url('/course/view.php', array('id'=>$course->id)));",
          "46: }",
          "49: $completion = new completion_info($course);",
          "50: $completion->set_module_viewed($cm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: $lesson->update_effective_access($USER->id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         $correctpass = false;",
          "86:         if (!empty($userpassword) && (($lesson->password == md5(trim($userpassword))) || ($lesson->password == trim($userpassword)))) {",
          "88:             $USER->lessonloggedin[$lesson->id] = true;",
          "89:             if ($lesson->highscores) {",
          "91:                 redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "92:             }",
          "94:             echo $lessonoutput->header($lesson, $cm, '', false, null, get_string('passwordprotectedlesson', 'lesson', format_string($lesson->name)));",
          "95:             echo $lessonoutput->login_prompt($lesson, $userpassword !== '');",
          "96:             echo $lessonoutput->footer();",
          "",
          "[Removed Lines]",
          "93:         } else {",
          "",
          "[Added Lines]",
          "91:             $correctpass = true;",
          "97:         } else if (isset($lesson->extrapasswords)) {",
          "99:             foreach ($lesson->extrapasswords as $password) {",
          "100:                 if (strcmp($password, md5(trim($userpassword))) === 0 || strcmp($password, trim($userpassword)) === 0) {",
          "101:                     $correctpass = true;",
          "102:                     $USER->lessonloggedin[$lesson->id] = true;",
          "103:                     if ($lesson->highscores) {",
          "105:                         redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "106:                     }",
          "107:                 }",
          "108:             }",
          "109:         }",
          "110:         if (!$correctpass) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1d1c435f7ead0558f24bc748079285d6ea285e3",
      "candidate_info": {
        "commit_hash": "c1d1c435f7ead0558f24bc748079285d6ea285e3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c1d1c435f7ead0558f24bc748079285d6ea285e3",
        "files": [
          "mod/lesson/version.php"
        ],
        "message": "MDL-48883 mod_lesson: Updating mod_lesson version\n\nUpdating it to today's date instead of using\nstable branches version convention.",
        "before_after_code_files": [
          "mod/lesson/version.php||mod/lesson/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015012301;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015021800;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1acc001778b9fe1eb5c87692a7837ee8203f2ca",
      "candidate_info": {
        "commit_hash": "a1acc001778b9fe1eb5c87692a7837ee8203f2ca",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a1acc001778b9fe1eb5c87692a7837ee8203f2ca",
        "files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/continue.php",
          "mod/lesson/db/install.xml",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php",
          "mod/lesson/locallib.php",
          "mod/lesson/mod_form.php",
          "mod/lesson/tests/behat/time_limit.feature",
          "mod/lesson/timer.js",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "MDL-48962 mod-lesson: maxtime should use a duration form element",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/continue.php||mod/lesson/continue.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php||mod/lesson/lib.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/mod_form.php||mod/lesson/mod_form.php",
          "mod/lesson/tests/behat/time_limit.feature||mod/lesson/tests/behat/time_limit.feature",
          "mod/lesson/timer.js||mod/lesson/timer.js",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_stepslib.php -> mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             'course', 'name', 'practice', 'modattempts', 'usepassword', 'password',",
          "73:             'dependency', 'conditions', 'grade', 'custom', 'ongoing', 'usemaxgrade',",
          "74:             'maxanswers', 'maxattempts', 'review', 'nextpagedefault', 'feedback',",
          "76:             'mediafile', 'mediaheight', 'mediawidth', 'mediaclose', 'slideshow',",
          "77:             'width', 'height', 'bgcolor', 'displayleft', 'displayleftif', 'progressbar',",
          "78:             'showhighscores', 'maxhighscores', 'available', 'deadline', 'timemodified',",
          "",
          "[Removed Lines]",
          "75:             'minquestions', 'maxpages', 'timed', 'maxtime', 'retake', 'activitylink',",
          "",
          "[Added Lines]",
          "75:             'minquestions', 'maxpages', 'timelimit', 'retake', 'activitylink',",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             $data->completionendreached = 0;",
          "78:         }",
          "81:         $newitemid = $DB->insert_record('lesson', $data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         if (!isset($data->timelimit)) {",
          "82:             if (isset($data->timed) && isset($data->maxtime) && $data->timed) {",
          "83:                 $data->timelimit = 60 * $data->maxtime;",
          "84:             } else {",
          "85:                 $data->timelimit = 0;",
          "86:             }",
          "87:         }",
          "",
          "---------------"
        ],
        "mod/lesson/continue.php||mod/lesson/continue.php": [
          "File: mod/lesson/continue.php -> mod/lesson/continue.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: if (!$canmanage) {",
          "51:     $lesson->displayleft = lesson_displayleftif($lesson);",
          "52:     $timer = $lesson->update_timer();",
          "55:         if ($timeleft <= 0) {",
          "57:             $lesson->add_message(get_string('eolstudentoutoftime', 'lesson'));",
          "",
          "[Removed Lines]",
          "53:     if ($lesson->timed) {",
          "54:         $timeleft = ($timer->starttime + $lesson->maxtime * 60) - time();",
          "",
          "[Added Lines]",
          "53:     if ($lesson->timelimit) {",
          "54:         $timeleft = ($timer->starttime + $lesson->timelimit) - time();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         $lesson->add_message(get_string(\"teacherjumpwarning\", \"lesson\", $warningvars));",
          "158:     }",
          "161:         $lesson->add_message(get_string(\"teachertimerwarning\", \"lesson\"));",
          "162:     }",
          "163: }",
          "",
          "[Removed Lines]",
          "160:     if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "160:     if ($lesson->timelimit) {",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         upgrade_mod_savepoint(true, 2014122900, 'lesson');",
          "139:     }",
          "140:     return true;",
          "141: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     if ($oldversion < 2015022400) {",
          "144:         $table = new xmldb_table('lesson');",
          "145:         $field = new xmldb_field('timelimit', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'maxpages');",
          "148:         if (!$dbman->field_exists($table, $field)) {",
          "149:             $dbman->add_field($table, $field);",
          "150:         }",
          "153:         upgrade_mod_savepoint(true, 2015022400, 'lesson');",
          "154:     }",
          "156:     if ($oldversion < 2015022401) {",
          "159:         $table = new xmldb_table('lesson');",
          "160:         $oldfield = new xmldb_field('maxtime');",
          "161:         $newfield = new xmldb_field('timelimit');",
          "162:         if ($dbman->field_exists($table, $oldfield) && $dbman->field_exists($table, $newfield)) {",
          "163:             $sql = 'UPDATE {lesson} SET timelimit = 60 * maxtime';",
          "164:             $DB->execute($sql);",
          "166:             $dbman->drop_field($table, $oldfield);",
          "167:         }",
          "169:         $oldfield = new xmldb_field('timed');",
          "170:         if ($dbman->field_exists($table, $oldfield) && $dbman->field_exists($table, $newfield)) {",
          "172:             $DB->set_field_select('lesson', 'timelimit', 0, 'timed = 0');",
          "174:             $dbman->drop_field($table, $oldfield);",
          "175:         }",
          "177:         upgrade_mod_savepoint(true, 2015022401, 'lesson');",
          "178:     }",
          "",
          "---------------"
        ],
        "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php": [
          "File: mod/lesson/lang/en/lesson.php -> mod/lesson/lang/en/lesson.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "262: $string['maximumnumberofattempts'] = 'Maximum number of attempts';",
          "263: $string['maximumnumberofattempts_help'] = 'This setting specifies the maximum number of attempts allowed for each question. If answered incorrectly repeatedly, when the maximum is reached, the next page of the lesson is displayed.';",
          "264: $string['maximumnumberofattemptsreached'] = 'Maximum number of attempts reached - Moving to next page';",
          "267: $string['mediaclose'] = 'Show close button:';",
          "268: $string['mediafile'] = 'File pop-up';",
          "269: $string['mediafile_help'] = 'To include a pop-up window at the beginning of a lesson, choose the appropriate file to display. Every lesson page will include a link to re-open the pop-up if necessary.';",
          "",
          "[Removed Lines]",
          "265: $string['maxtime'] = 'Time limit (minutes)';",
          "266: $string['maxtimewarning'] = 'You have {$a} minute(s) to finish the lesson.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436: $string['thefollowingpagesjumptothispage'] = 'The following pages jump to this page';",
          "437: $string['thispage'] = 'This page';",
          "438: $string['timeisup'] = 'Time is up';",
          "439: $string['timeremaining'] = 'Time remaining';",
          "440: $string['timespenterror'] = 'Spend at least {$a} minutes in the lesson';",
          "441: $string['timespentminutes'] = 'Time spent (minutes)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: $string['timelimit'] = 'Time limit';",
          "438: $string['timelimit_help'] = 'If enabled, a warning about the time limit is displayed at the beginning of the lesson and a countdown timer is displayed. Answer given after time is elapsed aren\\'t graded';",
          "439: $string['timelimitwarning'] = 'You have {$a} to finish the lesson.';",
          "",
          "---------------"
        ],
        "mod/lesson/lib.php||mod/lesson/lib.php": [
          "File: mod/lesson/lib.php -> mod/lesson/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     $lesson->timemodified = time();",
          "528:     }",
          "529:     if (empty($lesson->timespent) or !is_numeric($lesson->timespent) or $lesson->timespent < 0) {",
          "530:         $lesson->timespent = 0;",
          "",
          "[Removed Lines]",
          "526:     if (empty($lesson->timed)) {",
          "527:         $lesson->timed = 0;",
          "",
          "[Added Lines]",
          "526:     if (empty($lesson->timelimit)) {",
          "527:         $lesson->timelimit = 0;",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: function lesson_clock_block_contents($cmid, $lesson, $timer, $page) {",
          "488:     $context = context_module::instance($cmid);",
          "490:         return null;",
          "491:     }",
          "",
          "[Removed Lines]",
          "489:     if(!$lesson->timed || has_capability('mod/lesson:manage', $context)) {",
          "",
          "[Added Lines]",
          "489:     if ($lesson->timelimit == 0 || has_capability('mod/lesson:manage', $context)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     $content .=  $lesson->time_remaining($timer->starttime);",
          "495:     $content .= '</div>';",
          "498:     $page->requires->data_for_js('clocksettings', $clocksettings, true);",
          "499:     $page->requires->strings_for_js(array('timeisup'), 'lesson');",
          "500:     $page->requires->js('/mod/lesson/timer.js');",
          "",
          "[Removed Lines]",
          "497:     $clocksettings = array('starttime'=>$timer->starttime, 'servertime'=>time(),'testlength'=>($lesson->maxtime * 60));",
          "",
          "[Added Lines]",
          "497:     $clocksettings = array('starttime' => $timer->starttime, 'servertime' => time(), 'testlength' => $lesson->timelimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:         $startlesson->starttime = time();",
          "1242:         $startlesson->lessontime = time();",
          "1243:         $DB->insert_record('lesson_timer', $startlesson);",
          "1246:         }",
          "1247:         return true;",
          "1248:     }",
          "",
          "[Removed Lines]",
          "1244:         if ($this->properties->timed) {",
          "1245:             $this->add_message(get_string('maxtimewarning', 'lesson', $this->properties->maxtime), 'center');",
          "",
          "[Added Lines]",
          "1244:         if ($this->properties->timelimit) {",
          "1245:             $this->add_message(get_string('timelimitwarning', 'lesson', format_time($this->properties->timelimit)), 'center');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1414:     public function time_remaining($starttime) {",
          "1416:         $hours = floor($timeleft/3600);",
          "1417:         $timeleft = $timeleft - ($hours * 3600);",
          "1418:         $minutes = floor($timeleft/60);",
          "",
          "[Removed Lines]",
          "1415:         $timeleft = $starttime + $this->maxtime * 60 - time();",
          "",
          "[Added Lines]",
          "1415:         $timeleft = $starttime + $this->timelimit - time();",
          "",
          "---------------"
        ],
        "mod/lesson/mod_form.php||mod/lesson/mod_form.php": [
          "File: mod/lesson/mod_form.php -> mod/lesson/mod_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         $mform->addElement('date_time_selector', 'deadline', get_string('deadline', 'lesson'), array('optional'=>true));",
          "172:         $mform->setDefault('deadline', 0);",
          "191:         $mform->addElement('selectyesno', 'usepassword', get_string('usepassword', 'lesson'));",
          "192:         $mform->addHelpButton('usepassword', 'usepassword', 'lesson');",
          "",
          "[Removed Lines]",
          "175:         $timedgrp = array();",
          "176:         $timedgrp[] = &$mform->createElement('text', 'maxtime');",
          "177:         $timedgrp[] = &$mform->createElement('checkbox', 'timed', '', get_string('enable'));",
          "178:         $mform->addGroup($timedgrp, 'timedgrp', get_string('maxtime', 'lesson'), array(' '), false);",
          "179:         $mform->disabledIf('timedgrp', 'timed');",
          "182:         $timedgrprules = array();",
          "183:         $timedgrprules['maxtime'][] = array(null, 'numeric', null, 'client');",
          "184:         $mform->addGroupRule('timedgrp', $timedgrprules);",
          "187:         $mform->setDefault('timed', 0);",
          "188:         $mform->setDefault('maxtime', 20);",
          "189:         $mform->setType('maxtime', PARAM_INT);",
          "",
          "[Added Lines]",
          "175:         $mform->addElement('duration', 'timelimit', get_string('timelimit', 'lesson'),",
          "176:                 array('optional' => true));",
          "177:         $mform->addHelpButton('timelimit', 'timelimit', 'lesson');",
          "178:         $mform->setDefault('timelimit', 1200);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:     function validation($data, $files) {",
          "335:         $errors = parent::validation($data, $files);",
          "340:         if (!empty($data['usepassword']) && empty($data['password'])) {",
          "341:             $errors['password'] = get_string('emptypassword', 'lesson');",
          "342:         }",
          "",
          "[Removed Lines]",
          "337:         if (empty($data['maxtime']) and !empty($data['timed'])) {",
          "338:             $errors['timedgrp'] = get_string('err_numeric', 'form');",
          "339:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/tests/behat/time_limit.feature||mod/lesson/tests/behat/time_limit.feature": [
          "File: mod/lesson/tests/behat/time_limit.feature -> mod/lesson/tests/behat/time_limit.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     And I add a \"Lesson\" to section \"1\" and I fill the form with:",
          "24:       | Name | Test lesson |",
          "25:       | Description | Test lesson description |",
          "28:     And I follow \"Test lesson\"",
          "29:     And I follow \"Add a content page\"",
          "30:     And I set the following fields to these values:",
          "",
          "[Removed Lines]",
          "26:       | timed | 1 |",
          "27:       | maxtime | 1 |",
          "",
          "[Added Lines]",
          "26:       | timelimit | 60 |",
          "",
          "---------------"
        ],
        "mod/lesson/timer.js||mod/lesson/timer.js": [
          "File: mod/lesson/timer.js -> mod/lesson/timer.js"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015021900;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015022401;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     }",
          "230:     if (isset($lastpageseen) && $DB->count_records('lesson_attempts', array('lessonid'=>$lesson->id, 'userid'=>$USER->id, 'retry'=>$retries)) > 0) {",
          "231:         echo $lessonoutput->header($lesson, $cm, '', false, null, get_string('leftduringtimedsession', 'lesson'));",
          "233:             if ($lesson->retake) {",
          "234:                 $continuelink = new single_button(new moodle_url('/mod/lesson/view.php', array('id'=>$cm->id, 'pageid'=>$lesson->firstpageid, 'startlastseen'=>'no')), get_string('continue', 'lesson'), 'get');",
          "235:                 echo '<div class=\"center leftduring\">'.$lessonoutput->message(get_string('leftduringtimed', 'lesson'), $continuelink).'</div>';",
          "",
          "[Removed Lines]",
          "232:         if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "232:         if ($lesson->timelimit) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:         $restart  = ($continue && $startlastseen == 'yes');",
          "306:         $timer = $lesson->update_timer($continue, $restart);",
          "310:             if ($timeleft <= 0) {",
          "312:                 $lesson->add_message(get_string('eolstudentoutoftime', 'lesson'));",
          "",
          "[Removed Lines]",
          "308:         if ($lesson->timed) {",
          "309:             $timeleft = ($timer->starttime + $lesson->maxtime * 60) - time();",
          "",
          "[Added Lines]",
          "308:         if ($lesson->timelimit) {",
          "309:             $timeleft = $timer->starttime + $lesson->timelimit - time();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:         }",
          "344:     } else {",
          "345:         $timer = null;",
          "347:             $lesson->add_message(get_string('teachertimerwarning', 'lesson'));",
          "348:         }",
          "349:         if (lesson_display_teacher_warning($lesson)) {",
          "",
          "[Removed Lines]",
          "346:         if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "346:         if ($lesson->timelimit) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490:                 $DB->delete_records(\"lesson_attempts\", array(\"lessonid\" => $lesson->id, \"userid\" => $USER->id, \"retry\" => $ntries));",
          "491:             }",
          "492:         } else {",
          "494:                 if ($outoftime == 'normal') {",
          "495:                     $grade = new stdClass();",
          "496:                     $grade->lessonid = $lesson->id;",
          "",
          "[Removed Lines]",
          "493:             if ($lesson->timed) {",
          "",
          "[Added Lines]",
          "493:             if ($lesson->timelimit) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb685cf3fab019a6c6f6c04d76a4ac10805524cc",
      "candidate_info": {
        "commit_hash": "bb685cf3fab019a6c6f6c04d76a4ac10805524cc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bb685cf3fab019a6c6f6c04d76a4ac10805524cc",
        "files": [
          "mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php",
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/classes/event/highscore_added.php",
          "mod/lesson/classes/event/highscores_viewed.php",
          "mod/lesson/db/install.xml",
          "mod/lesson/db/upgrade.php",
          "mod/lesson/highscores.php",
          "mod/lesson/lang/en/deprecated.txt",
          "mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php",
          "mod/lesson/locallib.php",
          "mod/lesson/mediafile.php",
          "mod/lesson/mod_form.php",
          "mod/lesson/renderer.php",
          "mod/lesson/report.php",
          "mod/lesson/settings.php",
          "mod/lesson/tabs.php",
          "mod/lesson/tests/events_test.php",
          "mod/lesson/upgrade.txt",
          "mod/lesson/version.php",
          "mod/lesson/view.php"
        ],
        "message": "MDL-49581 Lesson: Remove broken high score function",
        "before_after_code_files": [
          "mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php||mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php",
          "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php||mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php",
          "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "mod/lesson/classes/event/highscore_added.php||mod/lesson/classes/event/highscore_added.php",
          "mod/lesson/classes/event/highscores_viewed.php||mod/lesson/classes/event/highscores_viewed.php",
          "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php",
          "mod/lesson/highscores.php||mod/lesson/highscores.php",
          "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php",
          "mod/lesson/lib.php||mod/lesson/lib.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/mediafile.php||mod/lesson/mediafile.php",
          "mod/lesson/mod_form.php||mod/lesson/mod_form.php",
          "mod/lesson/renderer.php||mod/lesson/renderer.php",
          "mod/lesson/report.php||mod/lesson/report.php",
          "mod/lesson/settings.php||mod/lesson/settings.php",
          "mod/lesson/tabs.php||mod/lesson/tabs.php",
          "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php",
          "mod/lesson/version.php||mod/lesson/version.php",
          "mod/lesson/view.php||mod/lesson/view.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php||mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php -> mod/lesson/backup/moodle2/backup_lesson_activity_task.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         $replacement = '$@LESSONESSAY*$1@$';",
          "76:         $content = preg_replace($pattern, $replacement, $content);",
          "84:         $pattern = '#'.$base.'/report\\.php\\?id=([0-9]+)#';",
          "85:         $replacement = '$@LESSONREPORT*$1@$';",
          "",
          "[Removed Lines]",
          "79:         $pattern = '#'.$base.'/highscores\\.php\\?id=([0-9]+)#';",
          "80:         $replacement = '$@LESSONHIGHSCORES*$1@$';",
          "81:         $content = preg_replace($pattern, $replacement, $content);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/backup_lesson_stepslib.php||mod/lesson/backup/moodle2/backup_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/backup_lesson_stepslib.php -> mod/lesson/backup/moodle2/backup_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:             'minquestions', 'maxpages', 'timelimit', 'retake', 'activitylink',",
          "77:             'mediafile', 'mediaheight', 'mediawidth', 'mediaclose', 'slideshow',",
          "78:             'width', 'height', 'bgcolor', 'displayleft', 'displayleftif', 'progressbar',",
          "80:             'completionendreached', 'completiontimespent'",
          "81:         ));",
          "",
          "[Removed Lines]",
          "79:             'showhighscores', 'maxhighscores', 'available', 'deadline', 'timemodified',",
          "84:         $lesson->set_source_alias('highscores', 'showhighscores');",
          "",
          "[Added Lines]",
          "79:             'available', 'deadline', 'timemodified',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:             'userid','grade','late','completed'",
          "131:         ));",
          "143:         $timers = new backup_nested_element('timers');",
          "",
          "[Removed Lines]",
          "136:         $highscores = new backup_nested_element('highscores');",
          "137:         $highscore = new backup_nested_element('highscore', array('id'), array(",
          "138:             'gradeid','userid','nickname'",
          "139:         ));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:         $branches->add_child($branch);",
          "163:         $lesson->add_child($grades);",
          "164:         $grades->add_child($grade);",
          "167:         $lesson->add_child($timers);",
          "168:         $timers->add_child($timer);",
          "169:         $lesson->add_child($overrides);",
          "",
          "[Removed Lines]",
          "165:         $lesson->add_child($highscores);",
          "166:         $highscores->add_child($highscore);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:         if ($this->get_setting_value('userinfo')) {",
          "188:             $attempt->set_source_table('lesson_attempts', array('answerid' => backup::VAR_PARENTID));",
          "189:             $branch->set_source_table('lesson_branch', array('pageid' => backup::VAR_PARENTID));",
          "190:             $grade->set_source_table('lesson_grades', array('lessonid'=>backup::VAR_PARENTID));",
          "192:             $timer->set_source_table('lesson_timer', array('lessonid' => backup::VAR_PARENTID));",
          "193:         } else {",
          "194:             $overrideparams['userid'] = backup_helper::is_sqlparam(null); //  Without userinfo, skip user overrides.",
          "",
          "[Removed Lines]",
          "191:             $highscore->set_source_table('lesson_high_scores', array('lessonid' => backup::VAR_PARENTID));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:         $attempt->annotate_ids('user', 'userid');",
          "201:         $branch->annotate_ids('user', 'userid');",
          "202:         $grade->annotate_ids('user', 'userid');",
          "204:         $timer->annotate_ids('user', 'userid');",
          "205:         $override->annotate_ids('user', 'userid');",
          "206:         $override->annotate_ids('group', 'groupid');",
          "",
          "[Removed Lines]",
          "203:         $highscore->annotate_ids('user', 'userid');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php||mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php -> mod/lesson/backup/moodle2/restore_lesson_activity_task.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $rules[] = new restore_decode_rule('LESSONEDIT', '/mod/lesson/edit.php?id=$1', 'course_module');",
          "72:         $rules[] = new restore_decode_rule('LESSONESAY', '/mod/lesson/essay.php?id=$1', 'course_module');",
          "74:         $rules[] = new restore_decode_rule('LESSONREPORT', '/mod/lesson/report.php?id=$1', 'course_module');",
          "75:         $rules[] = new restore_decode_rule('LESSONMEDIAFILE', '/mod/lesson/mediafile.php?id=$1', 'course_module');",
          "76:         $rules[] = new restore_decode_rule('LESSONVIEWBYID', '/mod/lesson/view.php?id=$1', 'course_module');",
          "",
          "[Removed Lines]",
          "73:         $rules[] = new restore_decode_rule('LESSONHIGHSCORES', '/mod/lesson/highscores.php?id=$1', 'course_module');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         $rules[] = new restore_log_rule('lesson', 'view grade', 'essay.php?id={course_module}', '[name]');",
          "100:         $rules[] = new restore_log_rule('lesson', 'update grade', 'essay.php?id={course_module}', '[name]');",
          "101:         $rules[] = new restore_log_rule('lesson', 'update email essay grade', 'essay.php?id={course_module}', '[name]');",
          "105:         return $rules;",
          "106:     }",
          "",
          "[Removed Lines]",
          "102:         $rules[] = new restore_log_rule('lesson', 'update highscores', 'highscores.php?id={course_module}', '[name]');",
          "103:         $rules[] = new restore_log_rule('lesson', 'view highscores', 'highscores.php?id={course_module}', '[name]');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/backup/moodle2/restore_lesson_stepslib.php||mod/lesson/backup/moodle2/restore_lesson_stepslib.php": [
          "File: mod/lesson/backup/moodle2/restore_lesson_stepslib.php -> mod/lesson/backup/moodle2/restore_lesson_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         $data->deadline = $this->apply_date_offset($data->deadline);",
          "67:         $data->timemodified = $this->apply_date_offset($data->timemodified);",
          "71:         if (isset($data->showhighscores)) {",
          "73:             unset($data->showhighscores);",
          "74:         }",
          "77:         if (!isset($data->completionendreached)) {",
          "",
          "[Removed Lines]",
          "72:             $data->highscores = $data->showhighscores;",
          "",
          "[Added Lines]",
          "74:         if (isset($data->highscores)) {",
          "75:             unset($data->highscores);",
          "76:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     }",
          "180:     protected function process_lesson_highscore($data) {",
          "190:     }",
          "192:     protected function process_lesson_timer($data) {",
          "",
          "[Removed Lines]",
          "181:         global $DB;",
          "183:         $data = (object)$data;",
          "184:         $oldid = $data->id;",
          "185:         $data->lessonid = $this->get_new_parentid('lesson');",
          "186:         $data->userid = $this->get_mappingid('user', $data->userid);",
          "187:         $data->gradeid = $this->get_mappingid('lesson_grade', $data->gradeid);",
          "189:         $newitemid = $DB->insert_record('lesson_high_scores', $data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/highscore_added.php||mod/lesson/classes/event/highscore_added.php": [
          "File: mod/lesson/classes/event/highscore_added.php -> mod/lesson/classes/event/highscore_added.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: debugging('mod_lesson\\event\\highscore_added has been deprecated. Since the functionality no longer resides in the lesson module.',",
          "31:         DEBUG_DEVELOPER);",
          "",
          "---------------"
        ],
        "mod/lesson/classes/event/highscores_viewed.php||mod/lesson/classes/event/highscores_viewed.php": [
          "File: mod/lesson/classes/event/highscores_viewed.php -> mod/lesson/classes/event/highscores_viewed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: debugging('mod_lesson\\event\\highscores_viewed has been deprecated. Since the functionality no longer resides in the lesson module.',",
          "31:         DEBUG_DEVELOPER);",
          "",
          "---------------"
        ],
        "mod/lesson/db/upgrade.php||mod/lesson/db/upgrade.php": [
          "File: mod/lesson/db/upgrade.php -> mod/lesson/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     return true;",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     if ($oldversion < 2015071800) {",
          "305:         $table = new xmldb_table('lesson_high_scores');",
          "308:         if ($dbman->table_exists($table)) {",
          "309:             $dbman->drop_table($table);",
          "310:         }",
          "313:         upgrade_mod_savepoint(true, 2015071800, 'lesson');",
          "314:     }",
          "316:     if ($oldversion < 2015071801) {",
          "319:         $table = new xmldb_table('lesson');",
          "320:         $field = new xmldb_field('highscores');",
          "323:         if ($dbman->field_exists($table, $field)) {",
          "324:             $dbman->drop_field($table, $field);",
          "325:         }",
          "328:         upgrade_mod_savepoint(true, 2015071801, 'lesson');",
          "329:     }",
          "331:     if ($oldversion < 2015071802) {",
          "334:         $table = new xmldb_table('lesson');",
          "335:         $field = new xmldb_field('maxhighscores');",
          "338:         if ($dbman->field_exists($table, $field)) {",
          "339:             $dbman->drop_field($table, $field);",
          "340:         }",
          "343:         upgrade_mod_savepoint(true, 2015071802, 'lesson');",
          "344:     }",
          "346:     if ($oldversion < 2015071803) {",
          "347:         unset_config('lesson_maxhighscores');",
          "350:         upgrade_mod_savepoint(true, 2015071803, 'lesson');",
          "351:     }",
          "",
          "---------------"
        ],
        "mod/lesson/highscores.php||mod/lesson/highscores.php": [
          "File: mod/lesson/highscores.php -> mod/lesson/highscores.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php": [
          "File: mod/lesson/lang/en/lesson.php -> mod/lesson/lang/en/lesson.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: $string['casesensitive_help'] = 'Tick the checkbox to use regular expressions for analysing responses.';",
          "90: $string['classstats'] = 'Class statistics';",
          "91: $string['clicktodownload'] = 'Click on the following link to download the file.';",
          "93: $string['closebeforeopen'] = 'Could not update the lesson. You have specified a close date before the open date.';",
          "94: $string['cluster'] = 'Cluster';",
          "95: $string['clusterjump'] = 'Unseen question within a cluster';",
          "",
          "[Removed Lines]",
          "92: $string['clicktopost'] = 'Click here to post your grade on the High Scores list.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106: $string['conditionsfordependency'] = 'Condition(s) for the dependency';",
          "107: $string['configactionaftercorrectanswer'] = 'The default action to take after a correct answer';",
          "108: $string['configmaxanswers'] = 'Default maximum number of answers per page';",
          "110: $string['configmediaclose'] = 'Displays a close button as part of the popup generated for a linked media file';",
          "111: $string['configmediaheight'] = 'Sets the height of the popup displayed for a linked media file';",
          "112: $string['configmediawidth'] = 'Sets the width of the popup displayed for a linked media file';",
          "",
          "[Removed Lines]",
          "109: $string['configmaxhighscores'] = 'Number of high scores displayed';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143: $string['disabled'] = 'Disabled';",
          "144: $string['displaydefaultfeedback'] = 'Use default feedback';",
          "145: $string['displaydefaultfeedback_help'] = 'If enabled, when a response is not found for a particular question, the default response of \"That\\'s the correct answer\" or \"That\\'s the wrong answer\" will be shown.';",
          "147: $string['displayinleftmenu'] = 'Display in menu?';",
          "148: $string['displayleftif'] = 'Minimum grade to display menu';",
          "149: $string['displayleftif_help'] = 'This setting determines whether a student must obtain a certain grade before viewing the lesson menu. This forces the student to go through the entire lesson on their first attempt, then after obtaining the required grade they can use the menu for review.';",
          "",
          "[Removed Lines]",
          "146: $string['displayhighscores'] = 'Display high scores';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172: $string['endofclustertitle'] = 'End of cluster';",
          "173: $string['endoflesson'] = 'End of lesson';",
          "174: $string['enteredthis'] = 'entered this.';",
          "176: $string['enterpassword'] = 'Please enter the password:';",
          "177: $string['emptypassword'] = 'Password cannot be empty';",
          "178: $string['eolstudentoutoftime'] = 'Attention:  You ran out of time for this lesson.  Your last answer may not have counted if it was answered after the time was up.';",
          "",
          "[Removed Lines]",
          "175: $string['entername'] = 'Enter a nickname for the high scores list';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186: $string['eventcontentpageviewed'] = 'Content page viewed';",
          "187: $string['eventessayassessed'] = 'Essay assessed';",
          "188: $string['eventessayattemptviewed'] = 'Essay attempt viewed';",
          "191: $string['eventlessonended'] = 'Lesson ended';",
          "192: $string['eventlessonrestarted'] = 'Lesson restarted';",
          "193: $string['eventlessonresumed'] = 'Lesson resumed';",
          "",
          "[Removed Lines]",
          "189: $string['eventhighscoreadded'] = 'Highscore added';",
          "190: $string['eventhighscoresviewed'] = 'Highscores viewed';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "226: $string['havenotgradedyet'] = 'Have not graded yet.';",
          "227: $string['here'] = 'here';",
          "228: $string['highscore'] = 'High score';",
          "230: $string['hightime'] = 'High time';",
          "231: $string['checkbranchtable'] = 'Check content page';",
          "232: $string['checkedthisone'] = 'Checked this one.';",
          "",
          "[Removed Lines]",
          "229: $string['highscores'] = 'High scores';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "277: $string['matchingpair'] = 'Matching pair {$a}';",
          "278: $string['maxgrade'] = 'Maximum grade';",
          "279: $string['maxgrade_help'] = 'This setting specifies the maximum grade for the lesson. If set to 0, the lesson does not appear in the grades pages.';",
          "281: $string['maximumnumberofanswersbranches'] = 'Maximum number of answers';",
          "282: $string['maximumnumberofanswersbranches_help'] = 'This setting specifies the maximum number of answers that may be used in the lesson. If only true/false questions are used, it can be set to 2. The setting may be changed at any time, since it only affects what the teacher sees, not the data.';",
          "283: $string['maximumnumberofattempts'] = 'Maximum number of attempts';",
          "",
          "[Removed Lines]",
          "280: $string['maxhighscores'] = 'Number of high scores displayed';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "351: $string['notdefined'] = 'Not defined';",
          "352: $string['notenoughsubquestions'] = 'Not enough sub-questions have been defined!';",
          "353: $string['notenoughtimespent'] = 'You completed this lesson in {$a->timespent}, which is less than the required time of {$a->timerequired}. You might need to attempt the lesson again.';",
          "355: $string['notitle'] = 'No title';",
          "356: $string['numberofcorrectanswers'] = 'Number of correct answers: {$a}';",
          "357: $string['numberofcorrectanswersheader'] = 'Number of correct answers';",
          "",
          "[Removed Lines]",
          "354: $string['nothighscore'] = 'You did not make the top {$a} high scores list.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "484: $string['timespenterror'] = 'Spend at least {$a} minutes in the lesson';",
          "485: $string['timespentminutes'] = 'Time spent (minutes)';",
          "486: $string['timetaken'] = 'Time taken';",
          "488: $string['true'] = 'True';",
          "489: $string['truefalse'] = 'True/false';",
          "490: $string['unabledtosavefile'] = 'The file you uploaded could not be saved';",
          "",
          "[Removed Lines]",
          "487: $string['topscorestitle'] = 'Top {$a} high scores';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "502: $string['useroverridesdeleted'] = 'User overrides deleted';",
          "503: $string['usersnone'] = 'No students have access to this lesson';",
          "504: $string['viewgrades'] = 'View grades';",
          "506: $string['viewreports'] = 'View {$a->attempts} completed {$a->student} attempts';",
          "507: $string['viewreports2'] = 'View {$a} completed attempts';",
          "508: $string['warning'] = 'Warning';",
          "",
          "[Removed Lines]",
          "505: $string['viewhighscores'] = 'View high scores list';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "513: $string['wrongresponse'] = 'Wrong response';",
          "514: $string['xattempts'] = '{$a} attempts';",
          "515: $string['youhaveseen'] = 'You have seen more than one page of this lesson already.<br />Do you want to start at the last page you saw?';",
          "517: $string['youranswer'] = 'Your answer';",
          "518: $string['yourcurrentgradeis'] = 'Your current grade is {$a}';",
          "519: $string['yourcurrentgradeisoutof'] = 'Your current grade is {$a->grade} out of {$a->total}';",
          "",
          "[Removed Lines]",
          "516: $string['youmadehighscore'] = 'You made it on the top {$a} high scores list.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "524: $string['essayemailmessage'] = '<p>Essay prompt:<blockquote>{$a->question}</blockquote></p><p>Your response:<blockquote><em>{$a->response}</em></blockquote></p><p>{$a->teacher}\\'s comments:<blockquote><em>{$a->comment}</em></blockquote></p><p>You have received {$a->earned} out of {$a->outof} for this essay question.</p><p>Your grade for the lesson has been changed to {$a->newgrade}&#37;.</p>';",
          "525: $string['lessonattempted'] = 'Lesson attempted';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516: $string['clicktopost'] = 'Click here to post your grade on the High Scores list.';",
          "517: $string['configmaxhighscores'] = 'Number of high scores displayed';",
          "518: $string['displayhighscores'] = 'Display high scores';",
          "519: $string['entername'] = 'Enter a nickname for the high scores list';",
          "520: $string['eventhighscoreadded'] = 'Highscore added';",
          "521: $string['eventhighscoresviewed'] = 'Highscores viewed';",
          "522: $string['highscores'] = 'High scores';",
          "523: $string['maxhighscores'] = 'Number of high scores displayed';",
          "524: $string['nothighscore'] = 'You did not make the top {$a} high scores list.';",
          "525: $string['topscorestitle'] = 'Top {$a} high scores';",
          "526: $string['viewhighscores'] = 'View high scores list';",
          "527: $string['youmadehighscore'] = 'You made it on the top {$a} high scores list.';",
          "",
          "---------------"
        ],
        "mod/lesson/lib.php||mod/lesson/lib.php": [
          "File: mod/lesson/lib.php -> mod/lesson/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:         }",
          "932:         $DB->delete_records_select('lesson_timer', \"lessonid IN ($lessonssql)\", $params);",
          "934:         $DB->delete_records_select('lesson_grades', \"lessonid IN ($lessonssql)\", $params);",
          "935:         $DB->delete_records_select('lesson_attempts', \"lessonid IN ($lessonssql)\", $params);",
          "936:         $DB->delete_records_select('lesson_branch', \"lessonid IN ($lessonssql)\", $params);",
          "",
          "[Removed Lines]",
          "933:         $DB->delete_records_select('lesson_high_scores', \"lessonid IN ($lessonssql)\", $params);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1127:         $lessonnode->add(get_string('manualgrading', 'lesson'), $url);",
          "1128:     }",
          "1134: }",
          "",
          "[Removed Lines]",
          "1130:     if ($PAGE->activityrecord->highscores) {",
          "1131:         $url = new moodle_url('/mod/lesson/highscores.php', array('id'=>$PAGE->cm->id));",
          "1132:         $lessonnode->add(get_string('highscores', 'lesson'), $url);",
          "1133:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:         $DB->delete_records(\"lesson_grades\", array(\"lessonid\"=>$this->properties->id));",
          "1057:         $DB->delete_records(\"lesson_timer\", array(\"lessonid\"=>$this->properties->id));",
          "1058:         $DB->delete_records(\"lesson_branch\", array(\"lessonid\"=>$this->properties->id));",
          "1060:         if ($events = $DB->get_records('event', array(\"modulename\"=>'lesson', \"instance\"=>$this->properties->id))) {",
          "1061:             foreach($events as $event) {",
          "1062:                 $event = calendar_event::load($event);",
          "",
          "[Removed Lines]",
          "1059:         $DB->delete_records(\"lesson_high_scores\", array(\"lessonid\"=>$this->properties->id));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/mediafile.php||mod/lesson/mediafile.php": [
          "File: mod/lesson/mediafile.php -> mod/lesson/mediafile.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             $USER->lessonloggedin[$lesson->id] = true;",
          "93:             $correctpass = true;",
          "98:         } else if (isset($lesson->extrapasswords)) {",
          "100:             foreach ($lesson->extrapasswords as $password) {",
          "101:                 if (strcmp($password, md5(trim($userpassword))) === 0 || strcmp($password, trim($userpassword)) === 0) {",
          "102:                     $correctpass = true;",
          "103:                     $USER->lessonloggedin[$lesson->id] = true;",
          "108:                 }",
          "109:             }",
          "110:         }",
          "",
          "[Removed Lines]",
          "94:             if ($lesson->highscores) {",
          "96:                 redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "97:             }",
          "104:                     if ($lesson->highscores) {",
          "106:                         redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "107:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/mod_form.php||mod/lesson/mod_form.php": [
          "File: mod/lesson/mod_form.php -> mod/lesson/mod_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         $mform->setType('mediaclose', PARAM_BOOL);",
          "78:         $mform->setDefault('mediaclose', $CFG->lesson_mediaclose);",
          "85:         $mform->addElement('text', 'name', get_string('name'), array('size'=>'64'));",
          "86:         if (!empty($CFG->formatstringstriptags)) {",
          "87:             $mform->setType('name', PARAM_TEXT);",
          "",
          "[Removed Lines]",
          "81:         $mform->addElement('hidden', 'maxhighscores');",
          "82:         $mform->setType('maxhighscores', PARAM_INT);",
          "83:         $mform->setDefault('maxhighscores', $CFG->lesson_maxhighscores);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/renderer.php||mod/lesson/renderer.php": [
          "File: mod/lesson/renderer.php -> mod/lesson/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:         $output = html_writer::tag('p', $contents, $attributes);",
          "602:         return $output;",
          "603:     }",
          "624: }",
          "",
          "[Removed Lines]",
          "609:     public function add_highscores_form(lesson $lesson) {",
          "610:         global $CFG;",
          "611:         $output  = $this->output->box_start('generalbox boxaligncenter');",
          "612:         $output .= $this->output->box_start('mdl-align');",
          "613:         $output .= '<form id=\"nickname\" method =\"post\" action=\"'.$CFG->wwwroot.'/mod/lesson/highscores.php\" autocomplete=\"off\">",
          "614:              <input type=\"hidden\" name=\"id\" value=\"'.$this->page->cm->id.'\" />",
          "615:              <input type=\"hidden\" name=\"mode\" value=\"save\" />",
          "616:              <input type=\"hidden\" name=\"sesskey\" value=\"'.sesskey().'\" />';",
          "617:         $output .= get_string(\"entername\", \"lesson\").\": <input type=\\\"text\\\" name=\\\"name\\\" size=\\\"7\\\" maxlength=\\\"5\\\" />\";",
          "618:         $output .= $this->output->box(\"<input type='submit' value='\".get_string('submitname', 'lesson').\"' />\", 'lessonbutton center');",
          "619:         $output .= \"</form>\";",
          "620:         $output .= $this->output->box_end();",
          "621:         $output .= $this->output->box_end();",
          "622:         return $output;",
          "623:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/report.php||mod/lesson/report.php": [
          "File: mod/lesson/report.php -> mod/lesson/report.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                     if ($grades) {",
          "91:                         $grade = reset($grades);",
          "92:                         $DB->delete_records('lesson_grades', array('id' => $grade->id));",
          "94:                     }",
          "",
          "[Removed Lines]",
          "93:                         $DB->delete_records('lesson_high_scores', array('gradeid' => $grade->id, 'lessonid' => $lesson->id, 'userid' => $userid));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/settings.php||mod/lesson/settings.php": [
          "File: mod/lesson/settings.php -> mod/lesson/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     $settings->add(new admin_setting_configcheckbox('lesson_mediaclose', get_string('mediaclose', 'lesson'),",
          "49:             get_string('configmediaclose', 'lesson'), false, PARAM_TEXT));",
          "56:     $numbers = array();",
          "57:     for ($i=20; $i>1; $i--) {",
          "",
          "[Removed Lines]",
          "52:     $settings->add(new admin_setting_configtext('lesson_maxhighscores', get_string('maxhighscores', 'lesson'),",
          "53:             get_string('configmaxhighscores','lesson'), 10, PARAM_INT));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/tabs.php||mod/lesson/tabs.php": [
          "File: mod/lesson/tabs.php -> mod/lesson/tabs.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: if (has_capability('mod/lesson:grade', $context)) {",
          "58:     $row[] = new tabobject('essay', \"$CFG->wwwroot/mod/lesson/essay.php?id=$cm->id\", get_string('manualgrading', 'lesson'));",
          "59: }",
          "64: $tabs[] = $row;",
          "",
          "[Removed Lines]",
          "60: if ($lesson->highscores) {",
          "61:     $row[] = new tabobject('highscores', \"$CFG->wwwroot/mod/lesson/highscores.php?id=$cm->id\", get_string('highscores', 'lesson'));",
          "62: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php": [
          "File: mod/lesson/tests/events_test.php -> mod/lesson/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:             'noob', $this->lesson->properties()->cmid);",
          "242:         $this->assertEventLegacyLogData($expected, $event);",
          "243:         $this->assertEventContextNotUsed($event);",
          "244:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:         $this->assertDebuggingCalled();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:             $this->lesson->properties()->name, $this->lesson->properties()->cmid);",
          "271:         $this->assertEventLegacyLogData($expected, $event);",
          "272:         $this->assertEventContextNotUsed($event);",
          "273:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:         $this->assertDebuggingCalled();",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2015050500;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015051100;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015072000;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ],
        "mod/lesson/view.php||mod/lesson/view.php": [
          "File: mod/lesson/view.php -> mod/lesson/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:             $correctpass = true;",
          "92:             $USER->lessonloggedin[$lesson->id] = true;",
          "97:         } else if (isset($lesson->extrapasswords)) {",
          "99:             foreach ($lesson->extrapasswords as $password) {",
          "100:                 if (strcmp($password, md5(trim($userpassword))) === 0 || strcmp($password, trim($userpassword)) === 0) {",
          "101:                     $correctpass = true;",
          "102:                     $USER->lessonloggedin[$lesson->id] = true;",
          "107:                 }",
          "108:             }",
          "109:         }",
          "",
          "[Removed Lines]",
          "93:             if ($lesson->highscores) {",
          "95:                 redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "96:             }",
          "103:                     if ($lesson->highscores) {",
          "105:                         redirect(\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id\");",
          "106:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:                 exit();",
          "168:             }",
          "169:         }",
          "173:     }",
          "174: }",
          "",
          "[Removed Lines]",
          "170:     } else if ($lesson->highscores && !$lesson->practice && !optional_param('viewed', 0, PARAM_INT) && empty($pageid)) {",
          "172:         redirect(new moodle_url('/mod/lesson/highscores.php', array(\"id\"=>$cm->id)));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:     }",
          "573:     $lessoncontent .= $OUTPUT->box_end(); //End of Lesson button to Continue.",
          "610:     if ($lesson->modattempts && !$canmanage) {",
          "",
          "[Removed Lines]",
          "576:     if ($lesson->highscores && !$canmanage && !$lesson->practice) {",
          "577:         $lessoncontent .= $OUTPUT->box_start('center');",
          "578:         if ($grades = $DB->get_records(\"lesson_grades\", array(\"lessonid\" => $lesson->id), \"completed\")) {",
          "579:             $madeit = false;",
          "580:             if ($highscores = $DB->get_records(\"lesson_high_scores\", array(\"lessonid\" => $lesson->id))) {",
          "582:                 $topscores = array();",
          "583:                 $uniquescores = array();",
          "584:                 foreach ($highscores as $highscore) {",
          "585:                     $grade = $grades[$highscore->gradeid]->grade;",
          "586:                     $topscores[] = $grade;",
          "587:                     $uniquescores[$grade] = 1;",
          "588:                 }",
          "590:                 sort($topscores);",
          "591:                 $lowscore = $topscores[0];",
          "593:                 if ($gradeinfo->grade >= $lowscore || count($uniquescores) <= $lesson->maxhighscores) {",
          "594:                     $madeit = true;",
          "595:                 }",
          "596:             }",
          "597:             if (!$highscores or $madeit) {",
          "598:                 $lessoncontent .= $lessonoutput->paragraph(get_string(\"youmadehighscore\", \"lesson\", $lesson->maxhighscores), 'center');",
          "599:                 $aurl = new moodle_url('/mod/lesson/highscores.php', array('id'=>$PAGE->cm->id, 'sesskey'=>sesskey()));",
          "600:                 $lessoncontent .= $OUTPUT->single_button($aurl, get_string('clicktopost', 'lesson'));",
          "601:             } else {",
          "602:                 $lessoncontent .= get_string(\"nothighscore\", \"lesson\", $lesson->maxhighscores).\"<br />\";",
          "603:             }",
          "604:         }",
          "605:         $url = new moodle_url('/mod/lesson/highscores.php', array('id'=>$PAGE->cm->id, 'link'=>'1'));",
          "606:         $lessoncontent .= html_writer::link($url, get_string('viewhighscores', 'lesson'), array('class'=>'centerpadded lessonbutton standardbutton'));",
          "607:         $lessoncontent .= $OUTPUT->box_end();",
          "608:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14cdeb7ba94fd580a2da66e3a88e30d3a75183e8",
      "candidate_info": {
        "commit_hash": "14cdeb7ba94fd580a2da66e3a88e30d3a75183e8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/14cdeb7ba94fd580a2da66e3a88e30d3a75183e8",
        "files": [
          "mod/lesson/classes/event/page_moved.php",
          "mod/lesson/lang/en/lesson.php",
          "mod/lesson/locallib.php",
          "mod/lesson/tests/events_test.php",
          "mod/lesson/version.php"
        ],
        "message": "MDL-49470 Lesson: Add page moved event\n\nConflicts:\n\tmod/lesson/version.php",
        "before_after_code_files": [
          "mod/lesson/classes/event/page_moved.php||mod/lesson/classes/event/page_moved.php",
          "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php",
          "mod/lesson/locallib.php||mod/lesson/locallib.php",
          "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php",
          "mod/lesson/version.php||mod/lesson/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ],
          "candidate": [
            "mod/lesson/version.php||mod/lesson/version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/lesson/classes/event/page_moved.php||mod/lesson/classes/event/page_moved.php": [
          "File: mod/lesson/classes/event/page_moved.php -> mod/lesson/classes/event/page_moved.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_lesson\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "45: class page_moved extends \\core\\event\\base {",
          "50:     protected function init() {",
          "51:         $this->data['objecttable'] = 'lesson_pages';",
          "52:         $this->data['crud'] = 'u';",
          "53:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "54:     }",
          "61:     public static function get_name() {",
          "62:         return get_string('eventpagemoved', 'mod_lesson');",
          "63:     }",
          "70:     public function get_url() {",
          "71:         return new \\moodle_url('/mod/lesson/view.php', array('id' => $this->contextinstanceid, 'pageid' => $this->objectid));",
          "72:     }",
          "79:     public function get_description() {",
          "80:         return \"The user with id '$this->userid' has moved a \".$this->other['pagetype'].\" page with the \".",
          "81:                 \"id '$this->objectid' to the slot after the page with the id '\".$this->other['prevpageid'].",
          "82:                 \"' and before the page with the id '\".$this->other['nextpageid'].",
          "83:                 \"'in the lesson activity with course module id '$this->contextinstanceid'.\";",
          "84:     }",
          "92:     protected function validate_data() {",
          "93:         parent::validate_data();",
          "95:         if (!$this->contextlevel === CONTEXT_MODULE) {",
          "96:             throw new \\coding_exception('Context level must be CONTEXT_MODULE.');",
          "97:         }",
          "98:         if (!isset($this->other['pagetype'])) {",
          "99:             throw new \\coding_exception('The \\'pagetype\\' value must be set in other.');",
          "100:         }",
          "101:         if (!isset($this->other['prevpageid'])) {",
          "102:             throw new \\coding_exception('The \\'prevpageid\\' value must be set in other.');",
          "103:         }",
          "104:         if (!isset($this->other['nextpageid'])) {",
          "105:             throw new \\coding_exception('The \\'nextpageid\\' value must be set in other.');",
          "106:         }",
          "107:     }",
          "108: }",
          "",
          "---------------"
        ],
        "mod/lesson/lang/en/lesson.php||mod/lesson/lang/en/lesson.php": [
          "File: mod/lesson/lang/en/lesson.php -> mod/lesson/lang/en/lesson.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: $string['eventlessonended'] = 'Lesson ended';",
          "185: $string['eventlessonstarted'] = 'Lesson started';",
          "186: $string['eventpagecreated'] = 'Page created';",
          "187: $string['eventpageupdated'] = 'Page updated';",
          "188: $string['eventpagedeleted'] = 'Page deleted';",
          "189: $string['eventquestionanswered'] = 'Question answered';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: $string['eventpagemoved'] = 'Page moved';",
          "",
          "---------------"
        ],
        "mod/lesson/locallib.php||mod/lesson/locallib.php": [
          "File: mod/lesson/locallib.php -> mod/lesson/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2001:         $obj->prevpageid = $prevpageid;",
          "2002:         $obj->nextpageid = $nextpageid;",
          "2003:         $DB->update_record('lesson_pages', $obj);",
          "2004:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2005:         $cm = get_coursemodule_from_instance('lesson', $this->lesson->id, $this->lesson->course);",
          "2006:         $context = context_module::instance($cm->id);",
          "2009:         $eventparams = array(",
          "2010:             'context' => $context,",
          "2011:             'objectid' => $this->properties->id,",
          "2012:             'other' => array(",
          "2013:                 'pagetype' => $this->get_typestring(),",
          "2014:                 'prevpageid' => $prevpageid,",
          "2015:                 'nextpageid' => $nextpageid",
          "2016:                 )",
          "2017:             );",
          "2018:         $event = \\mod_lesson\\event\\page_moved::create($eventparams);",
          "2019:         $event->trigger();",
          "",
          "---------------"
        ],
        "mod/lesson/tests/events_test.php||mod/lesson/tests/events_test.php": [
          "File: mod/lesson/tests/events_test.php -> mod/lesson/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         $this->assertDebuggingNotCalled();",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     }",
          "84:     public function test_page_moved() {",
          "87:         $generator = $this->getDataGenerator()->get_plugin_generator('mod_lesson');",
          "88:         $pagerecord1 = $generator->create_content($this->lesson);",
          "89:         $page1 = $this->lesson->load_page($pagerecord1->id);",
          "90:         $pagerecord2 = $generator->create_content($this->lesson);",
          "91:         $page2 = $this->lesson->load_page($pagerecord2->id);",
          "92:         $pagerecord3 = $generator->create_content($this->lesson);",
          "93:         $page3 = $this->lesson->load_page($pagerecord3->id);",
          "95:         $sink = $this->redirectEvents();",
          "96:         $page3->move($pagerecord1->id, $pagerecord1->id);",
          "98:         $events = $sink->get_events();",
          "99:         $event = reset($events);",
          "102:         $this->assertInstanceOf('\\mod_lesson\\event\\page_moved', $event);",
          "103:         $this->assertEquals($page3->id, $event->objectid);",
          "104:         $this->assertEventContextNotUsed($event);",
          "105:         $this->assertDebuggingNotCalled();",
          "",
          "---------------"
        ],
        "mod/lesson/version.php||mod/lesson/version.php": [
          "File: mod/lesson/version.php -> mod/lesson/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400;    // Requires this Moodle version",
          "29: $plugin->component = 'mod_lesson'; // Full name of the plugin (used for diagnostics)",
          "30: $plugin->cron      = 0;",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015031500;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015032400;       // The current module version (Date: YYYYMMDDXX)",
          "",
          "---------------"
        ]
      }
    }
  ]
}