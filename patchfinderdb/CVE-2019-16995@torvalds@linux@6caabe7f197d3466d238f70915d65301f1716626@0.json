{
  "cve_id": "CVE-2019-16995",
  "cve_desc": "In the Linux kernel before 5.0.3, a memory leak exits in hsr_dev_finalize() in net/hsr/hsr_device.c if hsr_add_port fails to add a port, which may cause denial of service, aka CID-6caabe7f197d.",
  "repo": "torvalds/linux",
  "patch_hash": "6caabe7f197d3466d238f70915d65301f1716626",
  "patch_info": {
    "commit_hash": "6caabe7f197d3466d238f70915d65301f1716626",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6caabe7f197d3466d238f70915d65301f1716626",
    "files": [
      "net/hsr/hsr_device.c",
      "net/hsr/hsr_framereg.c",
      "net/hsr/hsr_framereg.h"
    ],
    "message": "net: hsr: fix memory leak in hsr_dev_finalize()\n\nIf hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER) failed to\nadd port, it directly returns res and forgets to free the node\nthat allocated in hsr_create_self_node(), and forgets to delete\nthe node->mac_list linked in hsr->self_node_db.\n\nBUG: memory leak\nunreferenced object 0xffff8881cfa0c780 (size 64):\n  comm \"syz-executor.0\", pid 2077, jiffies 4294717969 (age 2415.377s)\n  hex dump (first 32 bytes):\n    e0 c7 a0 cf 81 88 ff ff 00 02 00 00 00 00 ad de  ................\n    00 e6 49 cd 81 88 ff ff c0 9b 87 d0 81 88 ff ff  ..I.............\n  backtrace:\n    [<00000000e2ff5070>] hsr_dev_finalize+0x736/0x960 [hsr]\n    [<000000003ed2e597>] hsr_newlink+0x2b2/0x3e0 [hsr]\n    [<000000003fa8c6b6>] __rtnl_newlink+0xf1f/0x1600 net/core/rtnetlink.c:3182\n    [<000000001247a7ad>] rtnl_newlink+0x66/0x90 net/core/rtnetlink.c:3240\n    [<00000000e7d1b61d>] rtnetlink_rcv_msg+0x54e/0xb90 net/core/rtnetlink.c:5130\n    [<000000005556bd3a>] netlink_rcv_skb+0x129/0x340 net/netlink/af_netlink.c:2477\n    [<00000000741d5ee6>] netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]\n    [<00000000741d5ee6>] netlink_unicast+0x49a/0x650 net/netlink/af_netlink.c:1336\n    [<000000009d56f9b7>] netlink_sendmsg+0x88b/0xdf0 net/netlink/af_netlink.c:1917\n    [<0000000046b35c59>] sock_sendmsg_nosec net/socket.c:621 [inline]\n    [<0000000046b35c59>] sock_sendmsg+0xc3/0x100 net/socket.c:631\n    [<00000000d208adc9>] __sys_sendto+0x33e/0x560 net/socket.c:1786\n    [<00000000b582837a>] __do_sys_sendto net/socket.c:1798 [inline]\n    [<00000000b582837a>] __se_sys_sendto net/socket.c:1794 [inline]\n    [<00000000b582837a>] __x64_sys_sendto+0xdd/0x1b0 net/socket.c:1794\n    [<00000000c866801d>] do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n    [<00000000fea382d9>] entry_SYSCALL_64_after_hwframe+0x49/0xbe\n    [<00000000e01dacb3>] 0xffffffffffffffff\n\nFixes: c5a759117210 (\"net/hsr: Use list_head (and rcu) instead of array for slave devices.\")\nReported-by: Hulk Robot <hulkci@huawei.com>\nSigned-off-by: Mao Wenan <maowenan@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
      "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
      "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h"
    ]
  },
  "patch_diff": {
    "net/hsr/hsr_device.c||net/hsr/hsr_device.c": [
      "File: net/hsr/hsr_device.c -> net/hsr/hsr_device.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:  res = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);",
      "488:  if (res)",
      "491:  res = register_netdevice(hsr_dev);",
      "492:  if (res)",
      "",
      "[Removed Lines]",
      "489:   return res;",
      "",
      "[Added Lines]",
      "489:   goto err_add_port;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "506: fail:",
      "507:  hsr_for_each_port(hsr, port)",
      "508:   hsr_del_port(port);",
      "510:  return res;",
      "511: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "509: err_add_port:",
      "510:  hsr_del_node(&hsr->self_node_db);",
      "",
      "---------------"
    ],
    "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c": [
      "File: net/hsr/hsr_framereg.c -> net/hsr/hsr_framereg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  return 0;",
      "125: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127: void hsr_del_node(struct list_head *self_node_db)",
      "128: {",
      "129:  struct hsr_node *node;",
      "131:  rcu_read_lock();",
      "132:  node = list_first_or_null_rcu(self_node_db, struct hsr_node, mac_list);",
      "133:  rcu_read_unlock();",
      "134:  if (node) {",
      "135:   list_del_rcu(&node->mac_list);",
      "136:   kfree(node);",
      "137:  }",
      "138: }",
      "",
      "---------------"
    ],
    "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h": [
      "File: net/hsr/hsr_framereg.h -> net/hsr/hsr_framereg.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: struct hsr_node;",
      "19: struct hsr_node *hsr_add_node(struct list_head *node_db, unsigned char addr[],",
      "20:          u16 seq_out);",
      "21: struct hsr_node *hsr_get_node(struct hsr_port *port, struct sk_buff *skb,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: void hsr_del_node(struct list_head *self_node_db);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d19e2d53e8ed9e4c98fc95e0067492cda7288b0",
      "candidate_info": {
        "commit_hash": "1d19e2d53e8ed9e4c98fc95e0067492cda7288b0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1d19e2d53e8ed9e4c98fc95e0067492cda7288b0",
        "files": [
          "net/hsr/hsr_debugfs.c",
          "net/hsr/hsr_device.c",
          "net/hsr/hsr_main.h"
        ],
        "message": "hsr: fix error handling routine in hsr_dev_finalize()\n\nhsr_dev_finalize() is called to create new hsr interface.\nThere are some wrong error handling codes.\n\n1. wrong checking return value of debugfs_create_{dir/file}.\nThese function doesn't return NULL. If error occurs in there,\nit returns error pointer.\nSo, it should check error pointer instead of NULL.\n\n2. It doesn't unregister interface if it fails to setup hsr interface.\nIf it fails to initialize hsr interface after register_netdevice(),\nit should call unregister_netdevice().\n\n3. Ignore failure of creation of debugfs\nIf creating of debugfs dir and file is failed, creating hsr interface\nwill be failed. But debugfs doesn't affect actual logic of hsr module.\nSo, ignoring this is more correct and this behavior is more general.\n\nFixes: c5a759117210 (\"net/hsr: Use list_head (and rcu) instead of array for slave devices.\")\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/hsr/hsr_debugfs.c||net/hsr/hsr_debugfs.c",
          "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
          "net/hsr/hsr_main.h||net/hsr/hsr_main.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c"
          ],
          "candidate": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c"
          ]
        }
      },
      "candidate_diff": {
        "net/hsr/hsr_debugfs.c||net/hsr/hsr_debugfs.c": [
          "File: net/hsr/hsr_debugfs.c -> net/hsr/hsr_debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: {",
          "83:  struct dentry *de = NULL;",
          "85:  de = debugfs_create_dir(hsr_dev->name, NULL);",
          "87:   pr_err(\"Cannot create hsr debugfs root\\n\");",
          "89:  }",
          "91:  priv->node_tbl_root = de;",
          "",
          "[Removed Lines]",
          "80: int hsr_debugfs_init(struct hsr_priv *priv, struct net_device *hsr_dev)",
          "82:  int rc = -1;",
          "86:  if (!de) {",
          "88:   return rc;",
          "",
          "[Added Lines]",
          "80: void hsr_debugfs_init(struct hsr_priv *priv, struct net_device *hsr_dev)",
          "85:  if (IS_ERR(de)) {",
          "87:   return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  de = debugfs_create_file(\"node_table\", S_IFREG | 0444,",
          "94:      priv->node_tbl_root, priv,",
          "95:      &hsr_fops);",
          "97:   pr_err(\"Cannot create hsr node_table directory\\n\");",
          "99:  }",
          "100:  priv->node_tbl_file = de;",
          "103: }",
          "",
          "[Removed Lines]",
          "96:  if (!de) {",
          "98:   return rc;",
          "102:  return 0;",
          "",
          "[Added Lines]",
          "95:  if (IS_ERR(de)) {",
          "97:   debugfs_remove(priv->node_tbl_root);",
          "98:   priv->node_tbl_root = NULL;",
          "99:   return;",
          "",
          "---------------"
        ],
        "net/hsr/hsr_device.c||net/hsr/hsr_device.c": [
          "File: net/hsr/hsr_device.c -> net/hsr/hsr_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  res = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);",
          "479:  if (res)",
          "482:  res = register_netdevice(hsr_dev);",
          "483:  if (res)",
          "486:  res = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);",
          "487:  if (res)",
          "489:  res = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);",
          "490:  if (res)",
          "493:  mod_timer(&hsr->prune_timer, jiffies + msecs_to_jiffies(PRUNE_PERIOD));",
          "498:  return 0;",
          "501:  list_for_each_entry_safe(port, tmp, &hsr->ports, port_list)",
          "502:   hsr_del_port(port);",
          "504:  hsr_del_self_node(&hsr->self_node_db);",
          "506:  return res;",
          "",
          "[Removed Lines]",
          "480:   goto err_add_port;",
          "484:   goto fail;",
          "488:   goto fail;",
          "491:   goto fail;",
          "494:  res = hsr_debugfs_init(hsr, hsr_dev);",
          "495:  if (res)",
          "496:   goto fail;",
          "500: fail:",
          "503: err_add_port:",
          "",
          "[Added Lines]",
          "480:   goto err_add_master;",
          "484:   goto err_unregister;",
          "488:   goto err_add_slaves;",
          "492:   goto err_add_slaves;",
          "494:  hsr_debugfs_init(hsr, hsr_dev);",
          "499: err_add_slaves:",
          "500:  unregister_netdevice(hsr_dev);",
          "501: err_unregister:",
          "504: err_add_master:",
          "",
          "---------------"
        ],
        "net/hsr/hsr_main.h||net/hsr/hsr_main.h": [
          "File: net/hsr/hsr_main.h -> net/hsr/hsr_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: }",
          "186: #if IS_ENABLED(CONFIG_DEBUG_FS)",
          "188: void hsr_debugfs_term(struct hsr_priv *priv);",
          "189: #else",
          "196: static inline void hsr_debugfs_term(struct hsr_priv *priv)",
          "197: {}",
          "198: #endif",
          "",
          "[Removed Lines]",
          "187: int hsr_debugfs_init(struct hsr_priv *priv, struct net_device *hsr_dev);",
          "190: static inline int hsr_debugfs_init(struct hsr_priv *priv,",
          "191:        struct net_device *hsr_dev)",
          "192: {",
          "193:  return 0;",
          "194: }",
          "",
          "[Added Lines]",
          "187: void hsr_debugfs_init(struct hsr_priv *priv, struct net_device *hsr_dev);",
          "190: static inline void hsr_debugfs_init(struct hsr_priv *priv,",
          "191:         struct net_device *hsr_dev)",
          "192: {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92a35678ec075100ce666a2fb6969151affb0e5d",
      "candidate_info": {
        "commit_hash": "92a35678ec075100ce666a2fb6969151affb0e5d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/92a35678ec075100ce666a2fb6969151affb0e5d",
        "files": [
          "net/hsr/hsr_device.c",
          "net/hsr/hsr_framereg.c",
          "net/hsr/hsr_framereg.h",
          "net/hsr/hsr_main.c",
          "net/hsr/hsr_main.h"
        ],
        "message": "hsr: fix a race condition in node list insertion and deletion\n\nhsr nodes are protected by RCU and there is no write side lock.\nBut node insertions and deletions could be being operated concurrently.\nSo write side locking is needed.\n\nTest commands:\n    ip netns add nst\n    ip link add veth0 type veth peer name veth1\n    ip link add veth2 type veth peer name veth3\n    ip link set veth1 netns nst\n    ip link set veth3 netns nst\n    ip link set veth0 up\n    ip link set veth2 up\n    ip link add hsr0 type hsr slave1 veth0 slave2 veth2\n    ip a a 192.168.100.1/24 dev hsr0\n    ip link set hsr0 up\n    ip netns exec nst ip link set veth1 up\n    ip netns exec nst ip link set veth3 up\n    ip netns exec nst ip link add hsr1 type hsr slave1 veth1 slave2 veth3\n    ip netns exec nst ip a a 192.168.100.2/24 dev hsr1\n    ip netns exec nst ip link set hsr1 up\n\n    for i in {0..9}\n    do\n        for j in {0..9}\n\tdo\n\t    for k in {0..9}\n\t    do\n\t        for l in {0..9}\n\t\tdo\n\t        arping 192.168.100.2 -I hsr0 -s 00:01:3$i:4$j:5$k:6$l -c1 &\n\t\tdone\n\t    done\n\tdone\n    done\n\nSplat looks like:\n[  236.066091][ T3286] list_add corruption. next->prev should be prev (ffff8880a5940300), but was ffff8880a5940d0.\n[  236.069617][ T3286] ------------[ cut here ]------------\n[  236.070545][ T3286] kernel BUG at lib/list_debug.c:25!\n[  236.071391][ T3286] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI\n[  236.072343][ T3286] CPU: 0 PID: 3286 Comm: arping Tainted: G        W         5.5.0-rc1+ #209\n[  236.073463][ T3286] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006\n[  236.074695][ T3286] RIP: 0010:__list_add_valid+0x74/0xd0\n[  236.075499][ T3286] Code: 48 39 da 75 27 48 39 f5 74 36 48 39 dd 74 31 48 83 c4 08 b8 01 00 00 00 5b 5d c3 48 b\n[  236.078277][ T3286] RSP: 0018:ffff8880aaa97648 EFLAGS: 00010286\n[  236.086991][ T3286] RAX: 0000000000000075 RBX: ffff8880d4624c20 RCX: 0000000000000000\n[  236.088000][ T3286] RDX: 0000000000000075 RSI: 0000000000000008 RDI: ffffed1015552ebf\n[  236.098897][ T3286] RBP: ffff88809b53d200 R08: ffffed101b3c04f9 R09: ffffed101b3c04f9\n[  236.099960][ T3286] R10: 00000000308769a1 R11: ffffed101b3c04f8 R12: ffff8880d4624c28\n[  236.100974][ T3286] R13: ffff8880d4624c20 R14: 0000000040310100 R15: ffff8880ce17ee02\n[  236.138967][ T3286] FS:  00007f23479fa680(0000) GS:ffff8880d9c00000(0000) knlGS:0000000000000000\n[  236.144852][ T3286] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  236.145720][ T3286] CR2: 00007f4a14bab210 CR3: 00000000a61c6001 CR4: 00000000000606f0\n[  236.146776][ T3286] Call Trace:\n[  236.147222][ T3286]  hsr_add_node+0x314/0x490 [hsr]\n[  236.153633][ T3286]  hsr_forward_skb+0x2b6/0x1bc0 [hsr]\n[  236.154362][ T3286]  ? rcu_read_lock_sched_held+0x90/0xc0\n[  236.155091][ T3286]  ? rcu_read_lock_bh_held+0xa0/0xa0\n[  236.156607][ T3286]  hsr_dev_xmit+0x70/0xd0 [hsr]\n[  236.157254][ T3286]  dev_hard_start_xmit+0x160/0x740\n[  236.157941][ T3286]  __dev_queue_xmit+0x1961/0x2e10\n[  236.158565][ T3286]  ? netdev_core_pick_tx+0x2e0/0x2e0\n[ ... ]\n\nReported-by: syzbot+3924327f9ad5f4d2b343@syzkaller.appspotmail.com\nFixes: f421436a591d (\"net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)\")\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
          "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
          "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h",
          "net/hsr/hsr_main.c||net/hsr/hsr_main.c",
          "net/hsr/hsr_main.h||net/hsr/hsr_main.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
            "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
            "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h"
          ],
          "candidate": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
            "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
            "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h"
          ]
        }
      },
      "candidate_diff": {
        "net/hsr/hsr_device.c||net/hsr/hsr_device.c": [
          "File: net/hsr/hsr_device.c -> net/hsr/hsr_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:  del_timer_sync(&hsr->prune_timer);",
          "369:  del_timer_sync(&hsr->announce_timer);",
          "372:  hsr_del_nodes(&hsr->node_db);",
          "373: }",
          "",
          "[Removed Lines]",
          "371:  hsr_del_self_node(&hsr->self_node_db);",
          "",
          "[Added Lines]",
          "371:  hsr_del_self_node(hsr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:  INIT_LIST_HEAD(&hsr->ports);",
          "441:  INIT_LIST_HEAD(&hsr->node_db);",
          "442:  INIT_LIST_HEAD(&hsr->self_node_db);",
          "444:  ether_addr_copy(hsr_dev->dev_addr, slave[0]->dev_addr);",
          "448:        slave[1]->dev_addr);",
          "449:  if (res < 0)",
          "450:   return res;",
          "",
          "[Removed Lines]",
          "447:  res = hsr_create_self_node(&hsr->self_node_db, hsr_dev->dev_addr,",
          "",
          "[Added Lines]",
          "443:  spin_lock_init(&hsr->list_lock);",
          "448:  res = hsr_create_self_node(hsr, hsr_dev->dev_addr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:  list_for_each_entry_safe(port, tmp, &hsr->ports, port_list)",
          "503:   hsr_del_port(port);",
          "504: err_add_master:",
          "507:  return res;",
          "508: }",
          "",
          "[Removed Lines]",
          "505:  hsr_del_self_node(&hsr->self_node_db);",
          "",
          "[Added Lines]",
          "506:  hsr_del_self_node(hsr);",
          "",
          "---------------"
        ],
        "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c": [
          "File: net/hsr/hsr_framereg.c -> net/hsr/hsr_framereg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     unsigned char addr_a[ETH_ALEN],",
          "80:     unsigned char addr_b[ETH_ALEN])",
          "81: {",
          "82:  struct hsr_node *node, *oldnode;",
          "84:  node = kmalloc(sizeof(*node), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "78: int hsr_create_self_node(struct list_head *self_node_db,",
          "",
          "[Added Lines]",
          "78: int hsr_create_self_node(struct hsr_priv *hsr,",
          "82:  struct list_head *self_node_db = &hsr->self_node_db;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  ether_addr_copy(node->macaddress_A, addr_a);",
          "89:  ether_addr_copy(node->macaddress_B, addr_b);",
          "92:  oldnode = list_first_or_null_rcu(self_node_db,",
          "93:       struct hsr_node, mac_list);",
          "94:  if (oldnode) {",
          "95:   list_replace_rcu(&oldnode->mac_list, &node->mac_list);",
          "99:  } else {",
          "101:   list_add_tail_rcu(&node->mac_list, self_node_db);",
          "102:  }",
          "104:  return 0;",
          "105: }",
          "108: {",
          "109:  struct hsr_node *node;",
          "112:  node = list_first_or_null_rcu(self_node_db, struct hsr_node, mac_list);",
          "114:  if (node) {",
          "115:   list_del_rcu(&node->mac_list);",
          "117:  }",
          "118: }",
          "120: void hsr_del_nodes(struct list_head *node_db)",
          "",
          "[Removed Lines]",
          "91:  rcu_read_lock();",
          "96:   rcu_read_unlock();",
          "97:   synchronize_rcu();",
          "98:   kfree(oldnode);",
          "100:   rcu_read_unlock();",
          "107: void hsr_del_self_node(struct list_head *self_node_db)",
          "111:  rcu_read_lock();",
          "113:  rcu_read_unlock();",
          "116:   kfree(node);",
          "",
          "[Added Lines]",
          "92:  spin_lock_bh(&hsr->list_lock);",
          "97:   spin_unlock_bh(&hsr->list_lock);",
          "98:   kfree_rcu(oldnode, rcu_head);",
          "101:   spin_unlock_bh(&hsr->list_lock);",
          "107: void hsr_del_self_node(struct hsr_priv *hsr)",
          "109:  struct list_head *self_node_db = &hsr->self_node_db;",
          "112:  spin_lock_bh(&hsr->list_lock);",
          "116:   kfree_rcu(node, rcu_head);",
          "118:  spin_unlock_bh(&hsr->list_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135: {",
          "137:  unsigned long now;",
          "138:  int i;",
          "142:   return NULL;",
          "149:  now = jiffies;",
          "150:  for (i = 0; i < HSR_PT_PORTS; i++)",
          "152:  for (i = 0; i < HSR_PT_PORTS; i++)",
          "157:  return node;",
          "158: }",
          "",
          "[Removed Lines]",
          "133: struct hsr_node *hsr_add_node(struct list_head *node_db, unsigned char addr[],",
          "134:          u16 seq_out)",
          "136:  struct hsr_node *node;",
          "140:  node = kzalloc(sizeof(*node), GFP_ATOMIC);",
          "141:  if (!node)",
          "144:  ether_addr_copy(node->macaddress_A, addr);",
          "151:   node->time_in[i] = now;",
          "153:   node->seq_out[i] = seq_out;",
          "155:  list_add_tail_rcu(&node->mac_list, node_db);",
          "",
          "[Added Lines]",
          "134: static struct hsr_node *hsr_add_node(struct hsr_priv *hsr,",
          "135:          struct list_head *node_db,",
          "136:          unsigned char addr[],",
          "137:          u16 seq_out)",
          "139:  struct hsr_node *new_node, *node;",
          "143:  new_node = kzalloc(sizeof(*new_node), GFP_ATOMIC);",
          "144:  if (!new_node)",
          "147:  ether_addr_copy(new_node->macaddress_A, addr);",
          "154:   new_node->time_in[i] = now;",
          "156:   new_node->seq_out[i] = seq_out;",
          "158:  spin_lock_bh(&hsr->list_lock);",
          "159:  list_for_each_entry_rcu(node, node_db, mac_list) {",
          "160:   if (ether_addr_equal(node->macaddress_A, addr))",
          "161:    goto out;",
          "162:   if (ether_addr_equal(node->macaddress_B, addr))",
          "163:    goto out;",
          "164:  }",
          "165:  list_add_tail_rcu(&new_node->mac_list, node_db);",
          "166:  spin_unlock_bh(&hsr->list_lock);",
          "167:  return new_node;",
          "168: out:",
          "169:  spin_unlock_bh(&hsr->list_lock);",
          "170:  kfree(new_node);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:          bool is_sup)",
          "164: {",
          "165:  struct list_head *node_db = &port->hsr->node_db;",
          "166:  struct hsr_node *node;",
          "167:  struct ethhdr *ethhdr;",
          "168:  u16 seq_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:  struct hsr_priv *hsr = port->hsr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:   seq_out = HSR_SEQNR_START;",
          "197:  }",
          "200: }",
          "",
          "[Removed Lines]",
          "199:  return hsr_add_node(node_db, ethhdr->h_source, seq_out);",
          "",
          "[Added Lines]",
          "214:  return hsr_add_node(hsr, node_db, ethhdr->h_source, seq_out);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206: void hsr_handle_sup_frame(struct sk_buff *skb, struct hsr_node *node_curr,",
          "207:      struct hsr_port *port_rcv)",
          "208: {",
          "211:  struct hsr_sup_payload *hsr_sp;",
          "212:  struct list_head *node_db;",
          "213:  int i;",
          "215:  ethhdr = (struct ethhdr *)skb_mac_header(skb);",
          "",
          "[Removed Lines]",
          "209:  struct ethhdr *ethhdr;",
          "210:  struct hsr_node *node_real;",
          "",
          "[Added Lines]",
          "224:  struct hsr_priv *hsr = port_rcv->hsr;",
          "226:  struct hsr_node *node_real;",
          "228:  struct ethhdr *ethhdr;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:  node_real = find_node_by_addr_A(node_db, hsr_sp->macaddress_A);",
          "232:  if (!node_real)",
          "235:       HSR_SEQNR_START - 1);",
          "236:  if (!node_real)",
          "",
          "[Removed Lines]",
          "234:   node_real = hsr_add_node(node_db, hsr_sp->macaddress_A,",
          "",
          "[Added Lines]",
          "250:   node_real = hsr_add_node(hsr, node_db, hsr_sp->macaddress_A,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "252:  }",
          "253:  node_real->addr_B_port = port_rcv->type;",
          "255:  list_del_rcu(&node_curr->mac_list);",
          "256:  kfree_rcu(node_curr, rcu_head);",
          "258: done:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:  spin_lock_bh(&hsr->list_lock);",
          "273:  spin_unlock_bh(&hsr->list_lock);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "368: {",
          "369:  struct hsr_priv *hsr = from_timer(hsr, t, prune_timer);",
          "370:  struct hsr_node *node;",
          "371:  struct hsr_port *port;",
          "372:  unsigned long timestamp;",
          "373:  unsigned long time_a, time_b;",
          "",
          "[Removed Lines]",
          "375:  rcu_read_lock();",
          "376:  list_for_each_entry_rcu(node, &hsr->node_db, mac_list) {",
          "",
          "[Added Lines]",
          "389:  struct hsr_node *tmp;",
          "394:  spin_lock_bh(&hsr->list_lock);",
          "395:  list_for_each_entry_safe(node, tmp, &hsr->node_db, mac_list) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "421:    kfree_rcu(node, rcu_head);",
          "422:   }",
          "423:  }",
          "427:  mod_timer(&hsr->prune_timer,",
          "",
          "[Removed Lines]",
          "424:  rcu_read_unlock();",
          "",
          "[Added Lines]",
          "443:  spin_unlock_bh(&hsr->list_lock);",
          "",
          "---------------"
        ],
        "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h": [
          "File: net/hsr/hsr_framereg.h -> net/hsr/hsr_framereg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: struct hsr_node;",
          "16: void hsr_del_nodes(struct list_head *node_db);",
          "19: struct hsr_node *hsr_get_node(struct hsr_port *port, struct sk_buff *skb,",
          "20:          bool is_sup);",
          "21: void hsr_handle_sup_frame(struct sk_buff *skb, struct hsr_node *node_curr,",
          "",
          "[Removed Lines]",
          "15: void hsr_del_self_node(struct list_head *self_node_db);",
          "17: struct hsr_node *hsr_add_node(struct list_head *node_db, unsigned char addr[],",
          "18:          u16 seq_out);",
          "",
          "[Added Lines]",
          "15: void hsr_del_self_node(struct hsr_priv *hsr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: void hsr_prune_nodes(struct timer_list *t);",
          "37:     unsigned char addr_a[ETH_ALEN],",
          "38:     unsigned char addr_b[ETH_ALEN]);",
          "",
          "[Removed Lines]",
          "36: int hsr_create_self_node(struct list_head *self_node_db,",
          "",
          "[Added Lines]",
          "34: int hsr_create_self_node(struct hsr_priv *hsr,",
          "",
          "---------------"
        ],
        "net/hsr/hsr_main.c||net/hsr/hsr_main.c": [
          "File: net/hsr/hsr_main.c -> net/hsr/hsr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   port = hsr_port_get_hsr(hsr, HSR_PT_SLAVE_B);",
          "71:         master->dev->dev_addr,",
          "72:         port ?",
          "73:       port->dev->dev_addr :",
          "",
          "[Removed Lines]",
          "70:   res = hsr_create_self_node(&hsr->self_node_db,",
          "",
          "[Added Lines]",
          "70:   res = hsr_create_self_node(hsr,",
          "",
          "---------------"
        ],
        "net/hsr/hsr_main.h||net/hsr/hsr_main.h": [
          "File: net/hsr/hsr_main.h -> net/hsr/hsr_main.h"
        ]
      }
    },
    {
      "candidate_hash": "b9a1e627405d68d475a3c1f35e685ccfb5bbe668",
      "candidate_info": {
        "commit_hash": "b9a1e627405d68d475a3c1f35e685ccfb5bbe668",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b9a1e627405d68d475a3c1f35e685ccfb5bbe668",
        "files": [
          "net/hsr/hsr_device.c",
          "net/hsr/hsr_device.h",
          "net/hsr/hsr_framereg.c",
          "net/hsr/hsr_framereg.h",
          "net/hsr/hsr_netlink.c"
        ],
        "message": "hsr: implement dellink to clean up resources\n\nhsr_link_ops implements ->newlink() but not ->dellink(),\nwhich leads that resources not released after removing the device,\nparticularly the entries in self_node_db and node_db.\n\nSo add ->dellink() implementation to replace the priv_destructor.\nThis also makes the code slightly easier to understand.\n\nReported-by: syzbot+c6167ec3de7def23d1e8@syzkaller.appspotmail.com\nCc: Arvid Brodin <arvid.brodin@alten.se>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
          "net/hsr/hsr_device.h||net/hsr/hsr_device.h",
          "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
          "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h",
          "net/hsr/hsr_netlink.c||net/hsr/hsr_netlink.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
            "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
            "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h"
          ],
          "candidate": [
            "net/hsr/hsr_device.c||net/hsr/hsr_device.c",
            "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c",
            "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h"
          ]
        }
      },
      "candidate_diff": {
        "net/hsr/hsr_device.c||net/hsr/hsr_device.c": [
          "File: net/hsr/hsr_device.c -> net/hsr/hsr_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:  rcu_read_unlock();",
          "345: }",
          "351: {",
          "352:  struct hsr_priv *hsr;",
          "353:  struct hsr_port *port;",
          "",
          "[Removed Lines]",
          "350: static void hsr_dev_destroy(struct net_device *hsr_dev)",
          "",
          "[Added Lines]",
          "347: void hsr_dev_destroy(struct net_device *hsr_dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:  hsr_debugfs_term(hsr);",
          "361:  list_for_each_entry_safe(port, tmp, &hsr->ports, port_list)",
          "362:   hsr_del_port(port);",
          "365:  del_timer_sync(&hsr->prune_timer);",
          "366:  del_timer_sync(&hsr->announce_timer);",
          "368:  synchronize_rcu();",
          "369: }",
          "371: static const struct net_device_ops hsr_device_ops = {",
          "",
          "[Removed Lines]",
          "360:  rtnl_lock();",
          "363:  rtnl_unlock();",
          "",
          "[Added Lines]",
          "365:  hsr_del_self_node(&hsr->self_node_db);",
          "366:  hsr_del_nodes(&hsr->node_db);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:  dev->priv_flags |= IFF_NO_QUEUE;",
          "394:  dev->needs_free_netdev = true;",
          "397:  dev->hw_features = NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_HIGHDMA |",
          "398:       NETIF_F_GSO_MASK | NETIF_F_HW_CSUM |",
          "",
          "[Removed Lines]",
          "395:  dev->priv_destructor = hsr_dev_destroy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "497:  list_for_each_entry_safe(port, tmp, &hsr->ports, port_list)",
          "498:   hsr_del_port(port);",
          "499: err_add_port:",
          "502:  return res;",
          "503: }",
          "",
          "[Removed Lines]",
          "500:  hsr_del_node(&hsr->self_node_db);",
          "",
          "[Added Lines]",
          "497:  hsr_del_self_node(&hsr->self_node_db);",
          "",
          "---------------"
        ],
        "net/hsr/hsr_device.h||net/hsr/hsr_device.h": [
          "File: net/hsr/hsr_device.h -> net/hsr/hsr_device.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: void hsr_dev_setup(struct net_device *dev);",
          "15: int hsr_dev_finalize(struct net_device *hsr_dev, struct net_device *slave[2],",
          "16:        unsigned char multicast_spec, u8 protocol_version);",
          "17: void hsr_check_carrier_and_operstate(struct hsr_priv *hsr);",
          "18: bool is_hsr_master(struct net_device *dev);",
          "19: int hsr_get_max_mtu(struct hsr_priv *hsr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: void hsr_dev_destroy(struct net_device *hsr_dev);",
          "",
          "---------------"
        ],
        "net/hsr/hsr_framereg.c||net/hsr/hsr_framereg.c": [
          "File: net/hsr/hsr_framereg.c -> net/hsr/hsr_framereg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  return 0;",
          "105: }",
          "108: {",
          "109:  struct hsr_node *node;",
          "",
          "[Removed Lines]",
          "107: void hsr_del_node(struct list_head *self_node_db)",
          "",
          "[Added Lines]",
          "107: void hsr_del_self_node(struct list_head *self_node_db)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:  }",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: void hsr_del_nodes(struct list_head *node_db)",
          "121: {",
          "122:  struct hsr_node *node;",
          "123:  struct hsr_node *tmp;",
          "125:  list_for_each_entry_safe(node, tmp, node_db, mac_list)",
          "126:   kfree(node);",
          "127: }",
          "",
          "---------------"
        ],
        "net/hsr/hsr_framereg.h||net/hsr/hsr_framereg.h": [
          "File: net/hsr/hsr_framereg.h -> net/hsr/hsr_framereg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: struct hsr_node;",
          "16: struct hsr_node *hsr_add_node(struct list_head *node_db, unsigned char addr[],",
          "17:          u16 seq_out);",
          "18: struct hsr_node *hsr_get_node(struct hsr_port *port, struct sk_buff *skb,",
          "",
          "[Removed Lines]",
          "15: void hsr_del_node(struct list_head *self_node_db);",
          "",
          "[Added Lines]",
          "15: void hsr_del_self_node(struct list_head *self_node_db);",
          "16: void hsr_del_nodes(struct list_head *node_db);",
          "",
          "---------------"
        ],
        "net/hsr/hsr_netlink.c||net/hsr/hsr_netlink.c": [
          "File: net/hsr/hsr_netlink.c -> net/hsr/hsr_netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  return hsr_dev_finalize(dev, link, multicast_spec, hsr_version);",
          "70: }",
          "72: static int hsr_fill_info(struct sk_buff *skb, const struct net_device *dev)",
          "73: {",
          "74:  struct hsr_priv *hsr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: static void hsr_dellink(struct net_device *hsr_dev, struct list_head *head)",
          "73: {",
          "74:  hsr_dev_destroy(hsr_dev);",
          "75:  unregister_netdevice_queue(hsr_dev, head);",
          "76: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  .priv_size = sizeof(struct hsr_priv),",
          "114:  .setup  = hsr_dev_setup,",
          "115:  .newlink = hsr_newlink,",
          "116:  .fill_info = hsr_fill_info,",
          "117: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  .dellink = hsr_dellink,",
          "",
          "---------------"
        ]
      }
    }
  ]
}