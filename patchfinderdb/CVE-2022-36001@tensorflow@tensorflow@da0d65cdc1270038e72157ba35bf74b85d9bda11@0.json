{
  "cve_id": "CVE-2022-36001",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `DrawBoundingBoxes` receives an input `boxes` that is not of dtype `float`, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit da0d65cdc1270038e72157ba35bf74b85d9bda11. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "da0d65cdc1270038e72157ba35bf74b85d9bda11",
  "patch_info": {
    "commit_hash": "da0d65cdc1270038e72157ba35bf74b85d9bda11",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/da0d65cdc1270038e72157ba35bf74b85d9bda11",
    "files": [
      "tensorflow/core/kernels/image/draw_bounding_box_op.cc",
      "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
    ],
    "message": "Fix dtype bug in draw bounding boxes.\n\nBoxes always needs to be type `float`.\n\nPiperOrigin-RevId: 461800676",
    "before_after_code_files": [
      "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
      "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc": [
      "File: tensorflow/core/kernels/image/draw_bounding_box_op.cc -> tensorflow/core/kernels/image/draw_bounding_box_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     for (int64_t b = 0; b < batch_size; ++b) {",
      "121:       const int64_t num_boxes = boxes.dim_size(1);",
      "123:       for (int64_t bb = 0; bb < num_boxes; ++bb) {",
      "124:         int64_t color_index = bb % color_table.size();",
      "125:         const int64_t min_box_row =",
      "",
      "[Removed Lines]",
      "122:       const auto tboxes = boxes.tensor<T, 3>();",
      "",
      "[Added Lines]",
      "122:       const auto tboxes = boxes.tensor<float, 3>();",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py": [
      "File: tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py -> tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:     image[height - 1, 0:width, 0:depth] = color",
      "51:     return image",
      "54:     \"\"\"Tests if cycling works appropriately.",
      "56:     Args:",
      "57:       img: 3-D numpy image on which to draw.",
      "58:     \"\"\"",
      "59:     color_table = colors",
      "60:     if colors is None:",
      "",
      "[Removed Lines]",
      "53:   def _testDrawBoundingBoxColorCycling(self, img, colors=None):",
      "",
      "[Added Lines]",
      "53:   def _testDrawBoundingBoxColorCycling(self,",
      "54:                                        img,",
      "55:                                        dtype=dtypes.float32,",
      "56:                                        colors=None):",
      "61:       dtype: image dtype (float, half).",
      "62:       colors: color table.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:       bboxes = math_ops.cast(bboxes, dtypes.float32)",
      "83:       bboxes = array_ops.expand_dims(bboxes, 0)",
      "84:       image = ops.convert_to_tensor(image)",
      "86:       image = array_ops.expand_dims(image, 0)",
      "87:       image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)",
      "88:       with self.cached_session(use_gpu=False) as sess:",
      "",
      "[Removed Lines]",
      "85:       image = image_ops_impl.convert_image_dtype(image, dtypes.float32)",
      "",
      "[Added Lines]",
      "90:       image = image_ops_impl.convert_image_dtype(image, dtype)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "118:                          [0, 0, 0.5, 1]])",
      "119:     self._testDrawBoundingBoxColorCycling(image, colors=colors)",
      "122: if __name__ == \"__main__\":",
      "123:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:   def testDrawBoundingBoxHalf(self):",
      "127:     \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"",
      "128:     image = np.zeros([10, 10, 4], \"float32\")",
      "129:     colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],",
      "130:                          [0, 0, 0.5, 1]])",
      "131:     self._testDrawBoundingBoxColorCycling(",
      "132:         image, dtype=dtypes.half, colors=colors)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "09445c9609fd695549c23d804de04878a9194022",
      "candidate_info": {
        "commit_hash": "09445c9609fd695549c23d804de04878a9194022",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/09445c9609fd695549c23d804de04878a9194022",
        "files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
        ],
        "message": "Fix dtype bug in draw bounding boxes.\n\nBoxes always needs to be type `float`.\n\nPiperOrigin-RevId: 461800676",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
            "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
            "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc": [
          "File: tensorflow/core/kernels/image/draw_bounding_box_op.cc -> tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     for (int64_t b = 0; b < batch_size; ++b) {",
          "121:       const int64_t num_boxes = boxes.dim_size(1);",
          "123:       for (int64_t bb = 0; bb < num_boxes; ++bb) {",
          "124:         int64_t color_index = bb % color_table.size();",
          "125:         const int64_t min_box_row =",
          "",
          "[Removed Lines]",
          "122:       const auto tboxes = boxes.tensor<T, 3>();",
          "",
          "[Added Lines]",
          "122:       const auto tboxes = boxes.tensor<float, 3>();",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py": [
          "File: tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py -> tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     image[height - 1, 0:width, 0:depth] = color",
          "51:     return image",
          "54:     \"\"\"Tests if cycling works appropriately.",
          "56:     Args:",
          "57:       img: 3-D numpy image on which to draw.",
          "58:     \"\"\"",
          "59:     color_table = colors",
          "60:     if colors is None:",
          "",
          "[Removed Lines]",
          "53:   def _testDrawBoundingBoxColorCycling(self, img, colors=None):",
          "",
          "[Added Lines]",
          "53:   def _testDrawBoundingBoxColorCycling(self,",
          "54:                                        img,",
          "55:                                        dtype=dtypes.float32,",
          "56:                                        colors=None):",
          "61:       dtype: image dtype (float, half).",
          "62:       colors: color table.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:       bboxes = math_ops.cast(bboxes, dtypes.float32)",
          "83:       bboxes = array_ops.expand_dims(bboxes, 0)",
          "84:       image = ops.convert_to_tensor(image)",
          "86:       image = array_ops.expand_dims(image, 0)",
          "87:       image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)",
          "88:       with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Removed Lines]",
          "85:       image = image_ops_impl.convert_image_dtype(image, dtypes.float32)",
          "",
          "[Added Lines]",
          "90:       image = image_ops_impl.convert_image_dtype(image, dtype)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                          [0, 0, 0.5, 1]])",
          "119:     self._testDrawBoundingBoxColorCycling(image, colors=colors)",
          "122: if __name__ == \"__main__\":",
          "123:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   def testDrawBoundingBoxHalf(self):",
          "127:     \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"",
          "128:     image = np.zeros([10, 10, 4], \"float32\")",
          "129:     colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],",
          "130:                          [0, 0, 0.5, 1]])",
          "131:     self._testDrawBoundingBoxColorCycling(",
          "132:         image, dtype=dtypes.half, colors=colors)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab92cb317bf1371035fffe296ec034b70959552e",
      "candidate_info": {
        "commit_hash": "ab92cb317bf1371035fffe296ec034b70959552e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ab92cb317bf1371035fffe296ec034b70959552e",
        "files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/draw_bounding_box_op_test.py"
        ],
        "message": "Fix dtype bug in draw bounding boxes.\n\nBoxes always needs to be type `float`.\n\nPiperOrigin-RevId: 461800676",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/draw_bounding_box_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc": [
          "File: tensorflow/core/kernels/image/draw_bounding_box_op.cc -> tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     for (int64_t b = 0; b < batch_size; ++b) {",
          "121:       const int64_t num_boxes = boxes.dim_size(1);",
          "123:       for (int64_t bb = 0; bb < num_boxes; ++bb) {",
          "124:         int64_t color_index = bb % color_table.size();",
          "125:         const int64_t min_box_row =",
          "",
          "[Removed Lines]",
          "122:       const auto tboxes = boxes.tensor<T, 3>();",
          "",
          "[Added Lines]",
          "122:       const auto tboxes = boxes.tensor<float, 3>();",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/draw_bounding_box_op_test.py": [
          "File: tensorflow/python/kernel_tests/draw_bounding_box_op_test.py -> tensorflow/python/kernel_tests/draw_bounding_box_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     image[height - 1, 0:width, 0:depth] = color",
          "55:     return image",
          "58:     \"\"\"Tests if cycling works appropriately.",
          "60:     Args:",
          "61:       img: 3-D numpy image on which to draw.",
          "62:     \"\"\"",
          "63:     color_table = colors",
          "64:     if colors is None:",
          "",
          "[Removed Lines]",
          "57:   def _testDrawBoundingBoxColorCycling(self, img, colors=None):",
          "",
          "[Added Lines]",
          "57:   def _testDrawBoundingBoxColorCycling(self,",
          "58:                                        img,",
          "59:                                        dtype=dtypes.float32,",
          "60:                                        colors=None):",
          "65:       dtype: image dtype (float, half).",
          "66:       colors: color table.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:       bboxes = math_ops.cast(bboxes, dtypes.float32)",
          "87:       bboxes = array_ops.expand_dims(bboxes, 0)",
          "88:       image = ops.convert_to_tensor(image)",
          "90:       image = array_ops.expand_dims(image, 0)",
          "91:       image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)",
          "92:       with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Removed Lines]",
          "89:       image = image_ops_impl.convert_image_dtype(image, dtypes.float32)",
          "",
          "[Added Lines]",
          "94:       image = image_ops_impl.convert_image_dtype(image, dtype)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:                          [0, 0, 0.5, 1]])",
          "123:     self._testDrawBoundingBoxColorCycling(image, colors=colors)",
          "126: if __name__ == \"__main__\":",
          "127:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   def testDrawBoundingBoxHalf(self):",
          "131:     \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"",
          "132:     image = np.zeros([10, 10, 4], \"float32\")",
          "133:     colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],",
          "134:                          [0, 0, 0.5, 1]])",
          "135:     self._testDrawBoundingBoxColorCycling(",
          "136:         image, dtype=dtypes.half, colors=colors)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed50dae09a353235aca4b9145d761bd35f4a4aca",
      "candidate_info": {
        "commit_hash": "ed50dae09a353235aca4b9145d761bd35f4a4aca",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ed50dae09a353235aca4b9145d761bd35f4a4aca",
        "files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
        ],
        "message": "Fix dtype bug in draw bounding boxes.\n\nBoxes always needs to be type `float`.\n\nPiperOrigin-RevId: 461800676",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
            "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc",
            "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/draw_bounding_box_op.cc||tensorflow/core/kernels/image/draw_bounding_box_op.cc": [
          "File: tensorflow/core/kernels/image/draw_bounding_box_op.cc -> tensorflow/core/kernels/image/draw_bounding_box_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     for (int64_t b = 0; b < batch_size; ++b) {",
          "121:       const int64_t num_boxes = boxes.dim_size(1);",
          "123:       for (int64_t bb = 0; bb < num_boxes; ++bb) {",
          "124:         int64_t color_index = bb % color_table.size();",
          "125:         const int64_t min_box_row =",
          "",
          "[Removed Lines]",
          "122:       const auto tboxes = boxes.tensor<T, 3>();",
          "",
          "[Added Lines]",
          "122:       const auto tboxes = boxes.tensor<float, 3>();",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py||tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py": [
          "File: tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py -> tensorflow/python/kernel_tests/image_ops/draw_bounding_box_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     image[height - 1, 0:width, 0:depth] = color",
          "51:     return image",
          "54:     \"\"\"Tests if cycling works appropriately.",
          "56:     Args:",
          "57:       img: 3-D numpy image on which to draw.",
          "58:     \"\"\"",
          "59:     color_table = colors",
          "60:     if colors is None:",
          "",
          "[Removed Lines]",
          "53:   def _testDrawBoundingBoxColorCycling(self, img, colors=None):",
          "",
          "[Added Lines]",
          "53:   def _testDrawBoundingBoxColorCycling(self,",
          "54:                                        img,",
          "55:                                        dtype=dtypes.float32,",
          "56:                                        colors=None):",
          "61:       dtype: image dtype (float, half).",
          "62:       colors: color table.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:       bboxes = math_ops.cast(bboxes, dtypes.float32)",
          "83:       bboxes = array_ops.expand_dims(bboxes, 0)",
          "84:       image = ops.convert_to_tensor(image)",
          "86:       image = array_ops.expand_dims(image, 0)",
          "87:       image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)",
          "88:       with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Removed Lines]",
          "85:       image = image_ops_impl.convert_image_dtype(image, dtypes.float32)",
          "",
          "[Added Lines]",
          "90:       image = image_ops_impl.convert_image_dtype(image, dtype)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                          [0, 0, 0.5, 1]])",
          "119:     self._testDrawBoundingBoxColorCycling(image, colors=colors)",
          "122: if __name__ == \"__main__\":",
          "123:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   def testDrawBoundingBoxHalf(self):",
          "127:     \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"",
          "128:     image = np.zeros([10, 10, 4], \"float32\")",
          "129:     colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],",
          "130:                          [0, 0, 0.5, 1]])",
          "131:     self._testDrawBoundingBoxColorCycling(",
          "132:         image, dtype=dtypes.half, colors=colors)",
          "",
          "---------------"
        ]
      }
    }
  ]
}