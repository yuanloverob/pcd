{
  "cve_id": "CVE-2015-5745",
  "cve_desc": "Buffer overflow in the send_control_msg function in hw/char/virtio-serial-bus.c in QEMU before 2.4.0 allows guest users to cause a denial of service (QEMU process crash) via a crafted virtio control message.",
  "repo": "qemu/qemu",
  "patch_hash": "7882080388be5088e72c425b02223c02e6cb4295",
  "patch_info": {
    "commit_hash": "7882080388be5088e72c425b02223c02e6cb4295",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/7882080388be5088e72c425b02223c02e6cb4295",
    "files": [
      "hw/char/virtio-serial-bus.c"
    ],
    "message": "virtio-serial: fix ANY_LAYOUT\n\nDon't assume a specific layout for control messages.\nRequired by virtio 1.\n\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>\nReviewed-by: Amit Shah <amit.shah@redhat.com>\nReviewed-by: Jason Wang <jasowang@redhat.com>",
    "before_after_code_files": [
      "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c"
    ]
  },
  "patch_diff": {
    "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c": [
      "File: hw/char/virtio-serial-bus.c -> hw/char/virtio-serial-bus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "195:         return 0;",
      "196:     }",
      "200:     virtqueue_push(vq, &elem, len);",
      "201:     virtio_notify(VIRTIO_DEVICE(vser), vq);",
      "",
      "[Removed Lines]",
      "198:     memcpy(elem.in_sg[0].iov_base, buf, len);",
      "",
      "[Added Lines]",
      "199:     iov_from_buf(elem.in_sg, elem.in_num, 0, buf, len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51b19ebe4320f3dcd93cea71235c1219318ddfd2",
      "candidate_info": {
        "commit_hash": "51b19ebe4320f3dcd93cea71235c1219318ddfd2",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/51b19ebe4320f3dcd93cea71235c1219318ddfd2",
        "files": [
          "hw/9pfs/9p.c",
          "hw/9pfs/virtio-9p-device.c",
          "hw/9pfs/virtio-9p.h",
          "hw/block/dataplane/virtio-blk.c",
          "hw/block/virtio-blk.c",
          "hw/char/virtio-serial-bus.c",
          "hw/display/virtio-gpu.c",
          "hw/input/virtio-input.c",
          "hw/net/virtio-net.c",
          "hw/scsi/virtio-scsi-dataplane.c",
          "hw/scsi/virtio-scsi.c",
          "hw/virtio/dataplane/vring.c",
          "hw/virtio/virtio-balloon.c",
          "hw/virtio/virtio-rng.c",
          "hw/virtio/virtio.c",
          "include/hw/virtio/dataplane/vring.h",
          "include/hw/virtio/virtio-balloon.h",
          "include/hw/virtio/virtio-blk.h",
          "include/hw/virtio/virtio-net.h",
          "include/hw/virtio/virtio-scsi.h",
          "include/hw/virtio/virtio-serial.h",
          "include/hw/virtio/virtio.h"
        ],
        "message": "virtio: move allocation to virtqueue_pop/vring_pop\n\nThe return code of virtqueue_pop/vring_pop is unused except to check for\nerrors or 0.  We can thus easily move allocation inside the functions\nand just return a pointer to the VirtQueueElement.\n\nThe advantage is that we will be able to allocate only the space that\nis needed for the actual size of the s/g list instead of the full\nVIRTQUEUE_MAX_SIZE items.  Currently VirtQueueElement takes about 48K\nof memory, and this kind of allocation puts a lot of stress on malloc.\nBy cutting the size by two or three orders of magnitude, malloc can\nuse much more efficient algorithms.\n\nThe patch is pretty large, but changes to each device are testable\nmore or less independently.  Splitting it would mostly add churn.\n\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>\nReviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>",
        "before_after_code_files": [
          "hw/9pfs/9p.c||hw/9pfs/9p.c",
          "hw/9pfs/virtio-9p-device.c||hw/9pfs/virtio-9p-device.c",
          "hw/9pfs/virtio-9p.h||hw/9pfs/virtio-9p.h",
          "hw/block/dataplane/virtio-blk.c||hw/block/dataplane/virtio-blk.c",
          "hw/block/virtio-blk.c||hw/block/virtio-blk.c",
          "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c",
          "hw/display/virtio-gpu.c||hw/display/virtio-gpu.c",
          "hw/input/virtio-input.c||hw/input/virtio-input.c",
          "hw/net/virtio-net.c||hw/net/virtio-net.c",
          "hw/scsi/virtio-scsi-dataplane.c||hw/scsi/virtio-scsi-dataplane.c",
          "hw/scsi/virtio-scsi.c||hw/scsi/virtio-scsi.c",
          "hw/virtio/dataplane/vring.c||hw/virtio/dataplane/vring.c",
          "hw/virtio/virtio-balloon.c||hw/virtio/virtio-balloon.c",
          "hw/virtio/virtio-rng.c||hw/virtio/virtio-rng.c",
          "hw/virtio/virtio.c||hw/virtio/virtio.c",
          "include/hw/virtio/dataplane/vring.h||include/hw/virtio/dataplane/vring.h",
          "include/hw/virtio/virtio-balloon.h||include/hw/virtio/virtio-balloon.h",
          "include/hw/virtio/virtio-blk.h||include/hw/virtio/virtio-blk.h",
          "include/hw/virtio/virtio-net.h||include/hw/virtio/virtio-net.h",
          "include/hw/virtio/virtio-scsi.h||include/hw/virtio/virtio-scsi.h",
          "include/hw/virtio/virtio-serial.h||include/hw/virtio/virtio-serial.h",
          "include/hw/virtio/virtio.h||include/hw/virtio/virtio.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c"
          ],
          "candidate": [
            "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/9pfs/9p.c||hw/9pfs/9p.c": [
          "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:     int read_count;",
          "1588:     int64_t xattr_len;",
          "1589:     V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);",
          "1592:     xattr_len = fidp->fs.xattr.len;",
          "1593:     read_count = xattr_len - off;",
          "",
          "[Removed Lines]",
          "1590:     VirtQueueElement *elem = &v->elems[pdu->idx];",
          "",
          "[Added Lines]",
          "1590:     VirtQueueElement *elem = v->elems[pdu->idx];",
          "",
          "---------------"
        ],
        "hw/9pfs/virtio-9p-device.c||hw/9pfs/virtio-9p-device.c": [
          "File: hw/9pfs/virtio-9p-device.c -> hw/9pfs/virtio-9p-device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: {",
          "27:     V9fsState *s = pdu->s;",
          "28:     V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);",
          "32:     virtqueue_push(v->vq, elem, pdu->size);",
          "35:     virtio_notify(VIRTIO_DEVICE(v), v->vq);",
          "",
          "[Removed Lines]",
          "29:     VirtQueueElement *elem = &v->elems[pdu->idx];",
          "",
          "[Added Lines]",
          "29:     VirtQueueElement *elem = v->elems[pdu->idx];",
          "33:     g_free(elem);",
          "34:     v->elems[pdu->idx] = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             uint8_t id;",
          "49:             uint16_t tag_le;",
          "50:         } QEMU_PACKED out;",
          "55:             pdu_free(pdu);",
          "56:             break;",
          "57:         }",
          "",
          "[Removed Lines]",
          "51:         VirtQueueElement *elem = &v->elems[pdu->idx];",
          "53:         len = virtqueue_pop(vq, elem);",
          "54:         if (!len) {",
          "",
          "[Added Lines]",
          "53:         VirtQueueElement *elem;",
          "55:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "56:         if (!elem) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         BUG_ON(elem->out_num == 0 || elem->in_num == 0);",
          "60:         QEMU_BUILD_BUG_ON(sizeof out != 7);",
          "62:         len = iov_to_buf(elem->out_sg, elem->out_num, 0,",
          "63:                          &out, sizeof out);",
          "64:         BUG_ON(len != sizeof out);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         v->elems[pdu->idx] = elem;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141: {",
          "142:     V9fsState *s = pdu->s;",
          "143:     V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);",
          "146:     return v9fs_iov_vmarshal(elem->in_sg, elem->in_num, offset, 1, fmt, ap);",
          "147: }",
          "",
          "[Removed Lines]",
          "144:     VirtQueueElement *elem = &v->elems[pdu->idx];",
          "",
          "[Added Lines]",
          "147:     VirtQueueElement *elem = v->elems[pdu->idx];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151: {",
          "152:     V9fsState *s = pdu->s;",
          "153:     V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);",
          "156:     return v9fs_iov_vunmarshal(elem->out_sg, elem->out_num, offset, 1, fmt, ap);",
          "157: }",
          "",
          "[Removed Lines]",
          "154:     VirtQueueElement *elem = &v->elems[pdu->idx];",
          "",
          "[Added Lines]",
          "157:     VirtQueueElement *elem = v->elems[pdu->idx];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161: {",
          "162:     V9fsState *s = pdu->s;",
          "163:     V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);",
          "166:     if (is_write) {",
          "",
          "[Removed Lines]",
          "164:     VirtQueueElement *elem = &v->elems[pdu->idx];",
          "",
          "[Added Lines]",
          "167:     VirtQueueElement *elem = v->elems[pdu->idx];",
          "",
          "---------------"
        ],
        "hw/9pfs/virtio-9p.h||hw/9pfs/virtio-9p.h": [
          "File: hw/9pfs/virtio-9p.h -> hw/9pfs/virtio-9p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     VirtQueue *vq;",
          "12:     size_t config_size;",
          "13:     V9fsPDU pdus[MAX_REQ];",
          "15:     V9fsState state;",
          "16: } V9fsVirtioState;",
          "",
          "[Removed Lines]",
          "14:     VirtQueueElement elems[MAX_REQ];",
          "",
          "[Added Lines]",
          "14:     VirtQueueElement *elems[MAX_REQ];",
          "",
          "---------------"
        ],
        "hw/block/dataplane/virtio-blk.c||hw/block/dataplane/virtio-blk.c": [
          "File: hw/block/dataplane/virtio-blk.c -> hw/block/dataplane/virtio-blk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     blk_io_plug(s->conf->conf.blk);",
          "101:     for (;;) {",
          "102:         MultiReqBuffer mrb = {};",
          "106:         vring_disable_notification(s->vdev, &s->vring);",
          "108:         for (;;) {",
          "115:             }",
          "117:             trace_virtio_blk_data_plane_process_request(s, req->elem.out_num,",
          "118:                                                         req->elem.in_num,",
          "119:                                                         req->elem.index);",
          "",
          "[Removed Lines]",
          "103:         int ret;",
          "109:             VirtIOBlockReq *req = virtio_blk_alloc_request(vblk);",
          "111:             ret = vring_pop(s->vdev, &s->vring, &req->elem);",
          "112:             if (ret < 0) {",
          "113:                 virtio_blk_free_request(req);",
          "",
          "[Added Lines]",
          "108:             VirtIOBlockReq *req = vring_pop(s->vdev, &s->vring,",
          "109:                                             sizeof(VirtIOBlockReq));",
          "111:             if (req == NULL) {",
          "115:             virtio_blk_init_request(vblk, req);",
          "",
          "---------------"
        ],
        "hw/block/virtio-blk.c||hw/block/virtio-blk.c": [
          "File: hw/block/virtio-blk.c -> hw/block/virtio-blk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"hw/virtio/virtio-bus.h\"",
          "30: #include \"hw/virtio/virtio-access.h\"",
          "33: {",
          "35:     req->dev = s;",
          "36:     req->qiov.size = 0;",
          "37:     req->in_len = 0;",
          "38:     req->next = NULL;",
          "39:     req->mr_next = NULL;",
          "41: }",
          "43: void virtio_blk_free_request(VirtIOBlockReq *req)",
          "",
          "[Removed Lines]",
          "32: VirtIOBlockReq *virtio_blk_alloc_request(VirtIOBlock *s)",
          "34:     VirtIOBlockReq *req = g_new(VirtIOBlockReq, 1);",
          "40:     return req;",
          "",
          "[Added Lines]",
          "32: void virtio_blk_init_request(VirtIOBlock *s, VirtIOBlockReq *req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194: static VirtIOBlockReq *virtio_blk_get_request(VirtIOBlock *s)",
          "195: {",
          "201:     }",
          "203:     return req;",
          "204: }",
          "",
          "[Removed Lines]",
          "196:     VirtIOBlockReq *req = virtio_blk_alloc_request(s);",
          "198:     if (!virtqueue_pop(s->vq, &req->elem)) {",
          "199:         virtio_blk_free_request(req);",
          "200:         return NULL;",
          "",
          "[Added Lines]",
          "194:     VirtIOBlockReq *req = virtqueue_pop(s->vq, sizeof(VirtIOBlockReq));",
          "196:     if (req) {",
          "197:         virtio_blk_init_request(s, req);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "836:     VirtIOBlock *s = VIRTIO_BLK(vdev);",
          "838:     while (qemu_get_sbyte(f)) {",
          "840:         qemu_get_buffer(f, (unsigned char *)&req->elem,",
          "841:                         sizeof(VirtQueueElement));",
          "842:         req->next = s->rq;",
          "",
          "[Removed Lines]",
          "839:         VirtIOBlockReq *req = virtio_blk_alloc_request(s);",
          "",
          "[Added Lines]",
          "835:         VirtIOBlockReq *req = g_new(VirtIOBlockReq, 1);",
          "836:         virtio_blk_init_request(s, req);",
          "",
          "---------------"
        ],
        "hw/char/virtio-serial-bus.c||hw/char/virtio-serial-bus.c": [
          "File: hw/char/virtio-serial-bus.c -> hw/char/virtio-serial-bus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: static size_t write_to_port(VirtIOSerialPort *port,",
          "84:                             const uint8_t *buf, size_t size)",
          "85: {",
          "87:     VirtQueue *vq;",
          "88:     size_t offset;",
          "",
          "[Removed Lines]",
          "86:     VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "86:     VirtQueueElement *elem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     while (offset < size) {",
          "97:         size_t len;",
          "100:             break;",
          "101:         }",
          "104:                            buf + offset, size - offset);",
          "105:         offset += len;",
          "108:     }",
          "110:     virtio_notify(VIRTIO_DEVICE(port->vser), vq);",
          "",
          "[Removed Lines]",
          "99:         if (!virtqueue_pop(vq, &elem)) {",
          "103:         len = iov_from_buf(elem.in_sg, elem.in_num, 0,",
          "107:         virtqueue_push(vq, &elem, len);",
          "",
          "[Added Lines]",
          "99:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "100:         if (!elem) {",
          "104:         len = iov_from_buf(elem->in_sg, elem->in_num, 0,",
          "108:         virtqueue_push(vq, elem, len);",
          "109:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: static void discard_vq_data(VirtQueue *vq, VirtIODevice *vdev)",
          "115: {",
          "118:     if (!virtio_queue_ready(vq)) {",
          "119:         return;",
          "120:     }",
          "123:     }",
          "124:     virtio_notify(vdev, vq);",
          "125: }",
          "",
          "[Removed Lines]",
          "116:     VirtQueueElement elem;",
          "121:     while (virtqueue_pop(vq, &elem)) {",
          "122:         virtqueue_push(vq, &elem, 0);",
          "",
          "[Added Lines]",
          "118:     VirtQueueElement *elem;",
          "123:     for (;;) {",
          "124:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "125:         if (!elem) {",
          "126:             break;",
          "127:         }",
          "128:         virtqueue_push(vq, elem, 0);",
          "129:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:         unsigned int i;",
          "143:                 break;",
          "144:             }",
          "145:             port->iov_idx = 0;",
          "146:             port->iov_offset = 0;",
          "147:         }",
          "150:             size_t buf_size;",
          "151:             ssize_t ret;",
          "154:             ret = vsc->have_data(port,",
          "156:                                   + port->iov_offset,",
          "157:                                   buf_size);",
          "158:             if (port->throttled) {",
          "",
          "[Removed Lines]",
          "141:         if (!port->elem.out_num) {",
          "142:             if (!virtqueue_pop(vq, &port->elem)) {",
          "149:         for (i = port->iov_idx; i < port->elem.out_num; i++) {",
          "153:             buf_size = port->elem.out_sg[i].iov_len - port->iov_offset;",
          "155:                                   port->elem.out_sg[i].iov_base",
          "",
          "[Added Lines]",
          "148:         if (!port->elem) {",
          "149:             port->elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "150:             if (!port->elem) {",
          "157:         for (i = port->iov_idx; i < port->elem->out_num; i++) {",
          "161:             buf_size = port->elem->out_sg[i].iov_len - port->iov_offset;",
          "163:                                   port->elem->out_sg[i].iov_base",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167:         if (port->throttled) {",
          "168:             break;",
          "169:         }",
          "172:     }",
          "173:     virtio_notify(vdev, vq);",
          "174: }",
          "",
          "[Removed Lines]",
          "170:         virtqueue_push(vq, &port->elem, 0);",
          "171:         port->elem.out_num = 0;",
          "",
          "[Added Lines]",
          "178:         virtqueue_push(vq, port->elem, 0);",
          "179:         g_free(port->elem);",
          "180:         port->elem = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186: static size_t send_control_msg(VirtIOSerial *vser, void *buf, size_t len)",
          "187: {",
          "189:     VirtQueue *vq;",
          "191:     vq = vser->c_ivq;",
          "192:     if (!virtio_queue_ready(vq)) {",
          "193:         return 0;",
          "194:     }",
          "196:         return 0;",
          "197:     }",
          "203:     virtio_notify(VIRTIO_DEVICE(vser), vq);",
          "204:     return len;",
          "205: }",
          "",
          "[Removed Lines]",
          "188:     VirtQueueElement elem;",
          "195:     if (!virtqueue_pop(vq, &elem)) {",
          "200:     iov_from_buf(elem.in_sg, elem.in_num, 0, buf, len);",
          "202:     virtqueue_push(vq, &elem, len);",
          "",
          "[Added Lines]",
          "197:     VirtQueueElement *elem;",
          "205:     elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "206:     if (!elem) {",
          "211:     iov_from_buf(elem->in_sg, elem->in_num, 0, buf, len);",
          "213:     virtqueue_push(vq, elem, len);",
          "215:     g_free(elem);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "415: static void control_out(VirtIODevice *vdev, VirtQueue *vq)",
          "416: {",
          "418:     VirtIOSerial *vser;",
          "419:     uint8_t *buf;",
          "420:     size_t len;",
          "",
          "[Removed Lines]",
          "417:     VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "430:     VirtQueueElement *elem;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:     len = 0;",
          "425:     buf = NULL;",
          "427:         size_t cur_len;",
          "",
          "[Removed Lines]",
          "426:     while (virtqueue_pop(vq, &elem)) {",
          "429:         cur_len = iov_size(elem.out_sg, elem.out_num);",
          "",
          "[Added Lines]",
          "439:     for (;;) {",
          "442:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "443:         if (!elem) {",
          "444:             break;",
          "445:         }",
          "447:         cur_len = iov_size(elem->out_sg, elem->out_num);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "437:             buf = g_malloc(cur_len);",
          "438:             len = cur_len;",
          "439:         }",
          "442:         handle_control_message(vser, buf, cur_len);",
          "444:     }",
          "445:     g_free(buf);",
          "446:     virtio_notify(vdev, vq);",
          "",
          "[Removed Lines]",
          "440:         iov_to_buf(elem.out_sg, elem.out_num, 0, buf, cur_len);",
          "443:         virtqueue_push(vq, &elem, 0);",
          "",
          "[Added Lines]",
          "458:         iov_to_buf(elem->out_sg, elem->out_num, 0, buf, cur_len);",
          "461:         virtqueue_push(vq, elem, 0);",
          "462:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "620:         qemu_put_byte(f, port->host_connected);",
          "622:  elem_popped = 0;",
          "624:             elem_popped = 1;",
          "625:         }",
          "626:         qemu_put_be32s(f, &elem_popped);",
          "",
          "[Removed Lines]",
          "623:         if (port->elem.out_num) {",
          "",
          "[Added Lines]",
          "642:         if (port->elem) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "628:             qemu_put_be32s(f, &port->iov_idx);",
          "629:             qemu_put_be64s(f, &port->iov_offset);",
          "633:         }",
          "634:     }",
          "635: }",
          "",
          "[Removed Lines]",
          "631:             qemu_put_buffer(f, (unsigned char *)&port->elem,",
          "632:                             sizeof(port->elem));",
          "",
          "[Added Lines]",
          "650:             qemu_put_buffer(f, (unsigned char *)port->elem,",
          "651:                             sizeof(VirtQueueElement));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "704:                 qemu_get_be32s(f, &port->iov_idx);",
          "705:                 qemu_get_be64s(f, &port->iov_offset);",
          "",
          "[Removed Lines]",
          "707:                 qemu_get_buffer(f, (unsigned char *)&port->elem,",
          "708:                                 sizeof(port->elem));",
          "709:                 virtqueue_map(&port->elem);",
          "",
          "[Added Lines]",
          "726:                 port->elem = g_new(VirtQueueElement, 1);",
          "727:                 qemu_get_buffer(f, (unsigned char *)port->elem,",
          "728:                                 sizeof(VirtQueueElement));",
          "729:                 virtqueue_map(port->elem);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "928:         return;",
          "929:     }",
          "932: }",
          "934: static void virtser_port_device_plug(HotplugHandler *hotplug_dev,",
          "",
          "[Removed Lines]",
          "931:     port->elem.out_num = 0;",
          "",
          "[Added Lines]",
          "951:     port->elem = NULL;",
          "",
          "---------------"
        ],
        "hw/display/virtio-gpu.c||hw/display/virtio-gpu.c": [
          "File: hw/display/virtio-gpu.c -> hw/display/virtio-gpu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:     }",
          "805: #endif",
          "809:         cmd->vq = vq;",
          "810:         cmd->error = 0;",
          "811:         cmd->finished = false;",
          "812:         cmd->waiting = false;",
          "813:         QTAILQ_INSERT_TAIL(&g->cmdq, cmd, next);",
          "815:     }",
          "818:     virtio_gpu_process_cmdq(g);",
          "",
          "[Removed Lines]",
          "807:     cmd = g_new(struct virtio_gpu_ctrl_command, 1);",
          "808:     while (virtqueue_pop(vq, &cmd->elem)) {",
          "814:         cmd = g_new(struct virtio_gpu_ctrl_command, 1);",
          "816:     g_free(cmd);",
          "",
          "[Added Lines]",
          "807:     cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));",
          "808:     while (cmd) {",
          "814:         cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "833: static void virtio_gpu_handle_cursor(VirtIODevice *vdev, VirtQueue *vq)",
          "834: {",
          "835:     VirtIOGPU *g = VIRTIO_GPU(vdev);",
          "837:     size_t s;",
          "838:     struct virtio_gpu_update_cursor cursor_info;",
          "840:     if (!virtio_queue_ready(vq)) {",
          "841:         return;",
          "842:     }",
          "845:                        &cursor_info, sizeof(cursor_info));",
          "846:         if (s != sizeof(cursor_info)) {",
          "847:             qemu_log_mask(LOG_GUEST_ERROR,",
          "",
          "[Removed Lines]",
          "836:     VirtQueueElement elem;",
          "843:     while (virtqueue_pop(vq, &elem)) {",
          "844:         s = iov_to_buf(elem.out_sg, elem.out_num, 0,",
          "",
          "[Added Lines]",
          "835:     VirtQueueElement *elem;",
          "842:     for (;;) {",
          "843:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "844:         if (!elem) {",
          "845:             break;",
          "846:         }",
          "848:         s = iov_to_buf(elem->out_sg, elem->out_num, 0,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "850:         } else {",
          "851:             update_cursor(g, &cursor_info);",
          "852:         }",
          "854:         virtio_notify(vdev, vq);",
          "855:     }",
          "856: }",
          "",
          "[Removed Lines]",
          "853:         virtqueue_push(vq, &elem, 0);",
          "",
          "[Added Lines]",
          "857:         virtqueue_push(vq, elem, 0);",
          "859:         g_free(elem);",
          "",
          "---------------"
        ],
        "hw/input/virtio-input.c||hw/input/virtio-input.c": [
          "File: hw/input/virtio-input.c -> hw/input/virtio-input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: void virtio_input_send(VirtIOInput *vinput, virtio_input_event *event)",
          "19: {",
          "21:     unsigned have, need;",
          "22:     int i, len;",
          "",
          "[Removed Lines]",
          "20:     VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "20:     VirtQueueElement *elem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     for (i = 0; i < vinput->qindex; i++) {",
          "55:             fprintf(stderr, \"%s: Huh?  No vq elem available ...\\n\", __func__);",
          "56:             return;",
          "57:         }",
          "59:                            0, vinput->queue+i, sizeof(virtio_input_event));",
          "61:     }",
          "62:     virtio_notify(VIRTIO_DEVICE(vinput), vinput->evt);",
          "63:     vinput->qindex = 0;",
          "",
          "[Removed Lines]",
          "53:         if (!virtqueue_pop(vinput->evt, &elem)) {",
          "58:         len = iov_from_buf(elem.in_sg, elem.in_num,",
          "60:         virtqueue_push(vinput->evt, &elem, len);",
          "",
          "[Added Lines]",
          "53:         elem = virtqueue_pop(vinput->evt, sizeof(VirtQueueElement));",
          "54:         if (!elem) {",
          "59:         len = iov_from_buf(elem->in_sg, elem->in_num,",
          "61:         virtqueue_push(vinput->evt, elem, len);",
          "62:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     VirtIOInputClass *vic = VIRTIO_INPUT_GET_CLASS(vdev);",
          "74:     VirtIOInput *vinput = VIRTIO_INPUT(vdev);",
          "75:     virtio_input_event event;",
          "77:     int len;",
          "80:         memset(&event, 0, sizeof(event));",
          "82:                          0, &event, sizeof(event));",
          "83:         if (vic->handle_status) {",
          "84:             vic->handle_status(vinput, &event);",
          "85:         }",
          "87:     }",
          "88:     virtio_notify(vdev, vinput->sts);",
          "89: }",
          "",
          "[Removed Lines]",
          "76:     VirtQueueElement elem;",
          "79:     while (virtqueue_pop(vinput->sts, &elem)) {",
          "81:         len = iov_to_buf(elem.out_sg, elem.out_num,",
          "86:         virtqueue_push(vinput->sts, &elem, len);",
          "",
          "[Added Lines]",
          "78:     VirtQueueElement *elem;",
          "81:     for (;;) {",
          "82:         elem = virtqueue_pop(vinput->sts, sizeof(VirtQueueElement));",
          "83:         if (!elem) {",
          "84:             break;",
          "85:         }",
          "88:         len = iov_to_buf(elem->out_sg, elem->out_num,",
          "93:         virtqueue_push(vinput->sts, elem, len);",
          "94:         g_free(elem);",
          "",
          "---------------"
        ],
        "hw/net/virtio-net.c||hw/net/virtio-net.c": [
          "File: hw/net/virtio-net.c -> hw/net/virtio-net.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:     VirtIONet *n = VIRTIO_NET(vdev);",
          "820:     struct virtio_net_ctrl_hdr ctrl;",
          "821:     virtio_net_ctrl_ack status = VIRTIO_NET_ERR;",
          "823:     size_t s;",
          "824:     struct iovec *iov, *iov2;",
          "825:     unsigned int iov_cnt;",
          "830:             error_report(\"virtio-net ctrl missing headers\");",
          "831:             exit(1);",
          "832:         }",
          "836:         s = iov_to_buf(iov, iov_cnt, 0, &ctrl, sizeof(ctrl));",
          "837:         iov_discard_front(&iov, &iov_cnt, sizeof(ctrl));",
          "838:         if (s != sizeof(ctrl)) {",
          "",
          "[Removed Lines]",
          "822:     VirtQueueElement elem;",
          "827:     while (virtqueue_pop(vq, &elem)) {",
          "828:         if (iov_size(elem.in_sg, elem.in_num) < sizeof(status) ||",
          "829:             iov_size(elem.out_sg, elem.out_num) < sizeof(ctrl)) {",
          "834:         iov_cnt = elem.out_num;",
          "835:         iov2 = iov = g_memdup(elem.out_sg, sizeof(struct iovec) * elem.out_num);",
          "",
          "[Added Lines]",
          "822:     VirtQueueElement *elem;",
          "827:     for (;;) {",
          "828:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "829:         if (!elem) {",
          "830:             break;",
          "831:         }",
          "832:         if (iov_size(elem->in_sg, elem->in_num) < sizeof(status) ||",
          "833:             iov_size(elem->out_sg, elem->out_num) < sizeof(ctrl)) {",
          "838:         iov_cnt = elem->out_num;",
          "839:         iov2 = iov = g_memdup(elem->out_sg, sizeof(struct iovec) * elem->out_num);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:             status = virtio_net_handle_offloads(n, ctrl.cmd, iov, iov_cnt);",
          "852:         }",
          "855:         assert(s == sizeof(status));",
          "858:         virtio_notify(vdev, vq);",
          "859:         g_free(iov2);",
          "860:     }",
          "861: }",
          "",
          "[Removed Lines]",
          "854:         s = iov_from_buf(elem.in_sg, elem.in_num, 0, &status, sizeof(status));",
          "857:         virtqueue_push(vq, &elem, sizeof(status));",
          "",
          "[Added Lines]",
          "858:         s = iov_from_buf(elem->in_sg, elem->in_num, 0, &status, sizeof(status));",
          "861:         virtqueue_push(vq, elem, sizeof(status));",
          "864:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1045:     offset = i = 0;",
          "1047:     while (offset < size) {",
          "1049:         int len, total;",
          "1052:         total = 0;",
          "1055:             if (i == 0)",
          "1056:                 return -1;",
          "1057:             error_report(\"virtio-net unexpected empty queue: \"",
          "",
          "[Removed Lines]",
          "1048:         VirtQueueElement elem;",
          "1050:         const struct iovec *sg = elem.in_sg;",
          "1054:         if (virtqueue_pop(q->rx_vq, &elem) == 0) {",
          "",
          "[Added Lines]",
          "1053:         VirtQueueElement *elem;",
          "1055:         const struct iovec *sg;",
          "1059:         elem = virtqueue_pop(q->rx_vq, sizeof(VirtQueueElement));",
          "1060:         if (!elem) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1064:             exit(1);",
          "1065:         }",
          "1068:             error_report(\"virtio-net receive queue contains no in buffers\");",
          "1069:             exit(1);",
          "1070:         }",
          "1072:         if (i == 0) {",
          "1073:             assert(offset == 0);",
          "1074:             if (n->mergeable_rx_bufs) {",
          "1075:                 mhdr_cnt = iov_copy(mhdr_sg, ARRAY_SIZE(mhdr_sg),",
          "1077:                                     offsetof(typeof(mhdr), num_buffers),",
          "1078:                                     sizeof(mhdr.num_buffers));",
          "1079:             }",
          "1082:             offset = n->host_hdr_len;",
          "1083:             total += n->guest_hdr_len;",
          "1084:             guest_offset = n->guest_hdr_len;",
          "",
          "[Removed Lines]",
          "1067:         if (elem.in_num < 1) {",
          "1076:                                     sg, elem.in_num,",
          "1081:             receive_header(n, sg, elem.in_num, buf, size);",
          "",
          "[Added Lines]",
          "1073:         if (elem->in_num < 1) {",
          "1078:         sg = elem->in_sg;",
          "1083:                                     sg, elem->in_num,",
          "1088:             receive_header(n, sg, elem->in_num, buf, size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1087:         }",
          "1091:                            buf + offset, size - offset);",
          "1092:         total += len;",
          "1093:         offset += len;",
          "",
          "[Removed Lines]",
          "1090:         len = iov_from_buf(sg, elem.in_num, guest_offset,",
          "",
          "[Added Lines]",
          "1097:         len = iov_from_buf(sg, elem->in_num, guest_offset,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1097:         if (!n->mergeable_rx_bufs && offset < size) {",
          "1099:             return size;",
          "1100:         }",
          "1104:     }",
          "1106:     if (mhdr_cnt) {",
          "",
          "[Removed Lines]",
          "1098:             virtqueue_discard(q->rx_vq, &elem, total);",
          "1103:         virtqueue_fill(q->rx_vq, &elem, total, i++);",
          "",
          "[Added Lines]",
          "1105:             virtqueue_discard(q->rx_vq, elem, total);",
          "1106:             g_free(elem);",
          "1111:         virtqueue_fill(q->rx_vq, elem, total, i++);",
          "1112:         g_free(elem);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1124:     VirtIONetQueue *q = virtio_net_get_subqueue(nc);",
          "1125:     VirtIODevice *vdev = VIRTIO_DEVICE(n);",
          "1128:     virtio_notify(vdev, q->tx_vq);",
          "1132:     virtio_queue_set_notification(q->tx_vq, 1);",
          "1133:     virtio_net_flush_tx(q);",
          "",
          "[Removed Lines]",
          "1127:     virtqueue_push(q->tx_vq, &q->async_tx.elem, 0);",
          "1130:     q->async_tx.elem.out_num = 0;",
          "",
          "[Added Lines]",
          "1136:     virtqueue_push(q->tx_vq, q->async_tx.elem, 0);",
          "1139:     g_free(q->async_tx.elem);",
          "1140:     q->async_tx.elem = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1138: {",
          "1139:     VirtIONet *n = q->n;",
          "1140:     VirtIODevice *vdev = VIRTIO_DEVICE(n);",
          "1142:     int32_t num_packets = 0;",
          "1143:     int queue_index = vq2q(virtio_get_queue_index(q->tx_vq));",
          "1144:     if (!(vdev->status & VIRTIO_CONFIG_S_DRIVER_OK)) {",
          "1145:         return num_packets;",
          "1146:     }",
          "1149:         virtio_queue_set_notification(q->tx_vq, 0);",
          "1150:         return num_packets;",
          "1151:     }",
          "1154:         ssize_t ret;",
          "1158:         struct virtio_net_hdr_mrg_rxbuf mhdr;",
          "1160:         if (out_num < 1) {",
          "1161:             error_report(\"virtio-net header not in first element\");",
          "1162:             exit(1);",
          "",
          "[Removed Lines]",
          "1141:     VirtQueueElement elem;",
          "1148:     if (q->async_tx.elem.out_num) {",
          "1153:     while (virtqueue_pop(q->tx_vq, &elem)) {",
          "1155:         unsigned int out_num = elem.out_num;",
          "1156:         struct iovec *out_sg = &elem.out_sg[0];",
          "1157:         struct iovec sg[VIRTQUEUE_MAX_SIZE], sg2[VIRTQUEUE_MAX_SIZE + 1];",
          "",
          "[Added Lines]",
          "1151:     VirtQueueElement *elem;",
          "1158:     if (q->async_tx.elem) {",
          "1163:     for (;;) {",
          "1165:         unsigned int out_num;",
          "1166:         struct iovec sg[VIRTQUEUE_MAX_SIZE], sg2[VIRTQUEUE_MAX_SIZE + 1], *out_sg;",
          "1169:         elem = virtqueue_pop(q->tx_vq, sizeof(VirtQueueElement));",
          "1170:         if (!elem) {",
          "1171:             break;",
          "1172:         }",
          "1174:         out_num = elem->out_num;",
          "1175:         out_sg = elem->out_sg;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1208:         }",
          "1210: drop:",
          "1212:         virtio_notify(vdev, q->tx_vq);",
          "1214:         if (++num_packets >= n->tx_burst) {",
          "1215:             break;",
          "",
          "[Removed Lines]",
          "1211:         virtqueue_push(q->tx_vq, &elem, 0);",
          "",
          "[Added Lines]",
          "1227:         virtqueue_push(q->tx_vq, elem, 0);",
          "1229:         g_free(elem);",
          "",
          "---------------"
        ],
        "hw/scsi/virtio-scsi-dataplane.c||hw/scsi/virtio-scsi-dataplane.c": [
          "File: hw/scsi/virtio-scsi-dataplane.c -> hw/scsi/virtio-scsi-dataplane.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: VirtIOSCSIReq *virtio_scsi_pop_req_vring(VirtIOSCSI *s,",
          "82:                                          VirtIOSCSIVring *vring)",
          "83: {",
          "92:     }",
          "93:     return req;",
          "94: }",
          "",
          "[Removed Lines]",
          "84:     VirtIOSCSIReq *req = virtio_scsi_init_req(s, NULL);",
          "85:     int r;",
          "87:     req->vring = vring;",
          "88:     r = vring_pop((VirtIODevice *)s, &vring->vring, &req->elem);",
          "89:     if (r < 0) {",
          "90:         virtio_scsi_free_req(req);",
          "91:         req = NULL;",
          "",
          "[Added Lines]",
          "84:     VirtIOSCSICommon *vs = (VirtIOSCSICommon *)s;",
          "85:     VirtIOSCSIReq *req;",
          "87:     req = vring_pop((VirtIODevice *)s, &vring->vring,",
          "88:                     sizeof(VirtIOSCSIReq) + vs->cdb_size);",
          "89:     if (!req) {",
          "90:         return NULL;",
          "92:     virtio_scsi_init_req(s, NULL, req);",
          "93:     req->vring = vring;",
          "",
          "---------------"
        ],
        "hw/scsi/virtio-scsi.c||hw/scsi/virtio-scsi.c": [
          "File: hw/scsi/virtio-scsi.c -> hw/scsi/virtio-scsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     return scsi_device_find(&s->bus, 0, lun[1], virtio_scsi_get_lun(lun));",
          "42: }",
          "45: {",
          "48:     const size_t zero_skip = offsetof(VirtIOSCSIReq, vring);",
          "51:     req->vq = vq;",
          "52:     req->dev = s;",
          "53:     qemu_sglist_init(&req->qsgl, DEVICE(s), 8, &address_space_memory);",
          "54:     qemu_iovec_init(&req->resp_iov, 1);",
          "55:     memset((uint8_t *)req + zero_skip, 0, sizeof(*req) - zero_skip);",
          "57: }",
          "59: void virtio_scsi_free_req(VirtIOSCSIReq *req)",
          "",
          "[Removed Lines]",
          "44: VirtIOSCSIReq *virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq)",
          "46:     VirtIOSCSIReq *req;",
          "47:     VirtIOSCSICommon *vs = (VirtIOSCSICommon *)s;",
          "50:     req = g_malloc(sizeof(*req) + vs->cdb_size);",
          "56:     return req;",
          "",
          "[Added Lines]",
          "44: void virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq, VirtIOSCSIReq *req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: static VirtIOSCSIReq *virtio_scsi_pop_req(VirtIOSCSI *s, VirtQueue *vq)",
          "176: {",
          "180:         return NULL;",
          "181:     }",
          "182:     return req;",
          "183: }",
          "",
          "[Removed Lines]",
          "177:     VirtIOSCSIReq *req = virtio_scsi_init_req(s, vq);",
          "178:     if (!virtqueue_pop(vq, &req->elem)) {",
          "179:         virtio_scsi_free_req(req);",
          "",
          "[Added Lines]",
          "173:     VirtIOSCSICommon *vs = (VirtIOSCSICommon *)s;",
          "174:     VirtIOSCSIReq *req;",
          "176:     req = virtqueue_pop(vq, sizeof(VirtIOSCSIReq) + vs->cdb_size);",
          "177:     if (!req) {",
          "180:     virtio_scsi_init_req(s, vq, req);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:     qemu_get_be32s(f, &n);",
          "205:     assert(n < vs->conf.num_queues);",
          "207:     qemu_get_buffer(f, (unsigned char *)&req->elem, sizeof(req->elem));",
          "209:     virtqueue_map(&req->elem);",
          "",
          "[Removed Lines]",
          "206:     req = virtio_scsi_init_req(s, vs->cmd_vqs[n]);",
          "",
          "[Added Lines]",
          "205:     req = g_malloc(sizeof(VirtIOSCSIReq) + vs->cdb_size);",
          "207:     virtio_scsi_init_req(s, vs->cmd_vqs[n], req);",
          "",
          "---------------"
        ],
        "hw/virtio/dataplane/vring.c||hw/virtio/dataplane/vring.c": [
          "File: hw/virtio/dataplane/vring.c -> hw/virtio/dataplane/vring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394: {",
          "395:     struct vring_desc desc;",
          "396:     unsigned int i, head, found = 0, num = vring->vr.num;",
          "397:     uint16_t avail_idx, last_avail_idx;",
          "398:     int ret;",
          "404:     if (vring->broken) {",
          "405:         ret = -EFAULT;",
          "406:         goto out;",
          "407:     }",
          "410:     last_avail_idx = vring->last_avail_idx;",
          "411:     avail_idx = vring_get_avail_idx(vdev, vring);",
          "",
          "[Removed Lines]",
          "392: int vring_pop(VirtIODevice *vdev, Vring *vring,",
          "393:               VirtQueueElement *elem)",
          "401:     elem->in_num = elem->out_num = 0;",
          "",
          "[Added Lines]",
          "392: void *vring_pop(VirtIODevice *vdev, Vring *vring, size_t sz)",
          "397:     VirtQueueElement *elem = NULL;",
          "406:     assert(sz >= sizeof(VirtQueueElement));",
          "407:     elem = g_malloc(sz);",
          "410:     elem->in_num = elem->out_num = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "481:             virtio_tswap16(vdev, vring->last_avail_idx);",
          "482:     }",
          "486: out:",
          "487:     assert(ret < 0);",
          "",
          "[Removed Lines]",
          "484:     return head;",
          "",
          "[Added Lines]",
          "487:     return elem;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:         vring->broken = true;",
          "490:     }",
          "491:     vring_unmap_element(elem);",
          "493: }",
          "",
          "[Removed Lines]",
          "492:     return ret;",
          "",
          "[Added Lines]",
          "495:     g_free(elem);",
          "496:     return NULL;",
          "",
          "---------------"
        ],
        "hw/virtio/virtio-balloon.c||hw/virtio/virtio-balloon.c": [
          "File: hw/virtio/virtio-balloon.c -> hw/virtio/virtio-balloon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         return;",
          "108:     }",
          "111:     virtio_notify(vdev, s->svq);",
          "112: }",
          "114: static void balloon_stats_get_all(Object *obj, struct Visitor *v,",
          "",
          "[Removed Lines]",
          "110:     virtqueue_push(s->svq, &s->stats_vq_elem, s->stats_vq_offset);",
          "",
          "[Added Lines]",
          "110:     virtqueue_push(s->svq, s->stats_vq_elem, s->stats_vq_offset);",
          "112:     g_free(s->stats_vq_elem);",
          "113:     s->stats_vq_elem = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206: static void virtio_balloon_handle_output(VirtIODevice *vdev, VirtQueue *vq)",
          "207: {",
          "208:     VirtIOBalloon *s = VIRTIO_BALLOON(vdev);",
          "210:     MemoryRegionSection section;",
          "213:         size_t offset = 0;",
          "214:         uint32_t pfn;",
          "217:             ram_addr_t pa;",
          "218:             ram_addr_t addr;",
          "219:             int p = virtio_ldl_p(vdev, &pfn);",
          "",
          "[Removed Lines]",
          "209:     VirtQueueElement elem;",
          "212:     while (virtqueue_pop(vq, &elem)) {",
          "216:         while (iov_to_buf(elem.out_sg, elem.out_num, offset, &pfn, 4) == 4) {",
          "",
          "[Added Lines]",
          "211:     VirtQueueElement *elem;",
          "214:     for (;;) {",
          "217:         elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "218:         if (!elem) {",
          "219:             return;",
          "220:         }",
          "222:         while (iov_to_buf(elem->out_sg, elem->out_num, offset, &pfn, 4) == 4) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:             memory_region_unref(section.mr);",
          "237:         }",
          "240:         virtio_notify(vdev, vq);",
          "241:     }",
          "242: }",
          "244: static void virtio_balloon_receive_stats(VirtIODevice *vdev, VirtQueue *vq)",
          "245: {",
          "246:     VirtIOBalloon *s = VIRTIO_BALLOON(vdev);",
          "248:     VirtIOBalloonStat stat;",
          "249:     size_t offset = 0;",
          "250:     qemu_timeval tv;",
          "253:         goto out;",
          "254:     }",
          "",
          "[Removed Lines]",
          "239:         virtqueue_push(vq, &elem, offset);",
          "247:     VirtQueueElement *elem = &s->stats_vq_elem;",
          "252:     if (!virtqueue_pop(vq, elem)) {",
          "",
          "[Added Lines]",
          "245:         virtqueue_push(vq, elem, offset);",
          "247:         g_free(elem);",
          "254:     VirtQueueElement *elem;",
          "259:     s->stats_vq_elem = elem = virtqueue_pop(vq, sizeof(VirtQueueElement));",
          "260:     if (!elem) {",
          "",
          "---------------"
        ],
        "hw/virtio/virtio-rng.c||hw/virtio/virtio-rng.c": [
          "File: hw/virtio/virtio-rng.c -> hw/virtio/virtio-rng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: {",
          "45:     VirtIORNG *vrng = opaque;",
          "46:     VirtIODevice *vdev = VIRTIO_DEVICE(vrng);",
          "48:     size_t len;",
          "49:     int offset;",
          "",
          "[Removed Lines]",
          "47:     VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "47:     VirtQueueElement *elem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     offset = 0;",
          "58:     while (offset < size) {",
          "60:             break;",
          "61:         }",
          "63:                            0, buf + offset, size - offset);",
          "64:         offset += len;",
          "67:         trace_virtio_rng_pushed(vrng, len);",
          "68:     }",
          "69:     virtio_notify(vdev, vrng->vq);",
          "70: }",
          "",
          "[Removed Lines]",
          "59:         if (!virtqueue_pop(vrng->vq, &elem)) {",
          "62:         len = iov_from_buf(elem.in_sg, elem.in_num,",
          "66:         virtqueue_push(vrng->vq, &elem, len);",
          "",
          "[Added Lines]",
          "59:         elem = virtqueue_pop(vrng->vq, sizeof(VirtQueueElement));",
          "60:         if (!elem) {",
          "63:         len = iov_from_buf(elem->in_sg, elem->in_num,",
          "67:         virtqueue_push(vrng->vq, elem, len);",
          "69:         g_free(elem);",
          "",
          "---------------"
        ],
        "hw/virtio/virtio.c||hw/virtio/virtio.c": [
          "File: hw/virtio/virtio.c -> hw/virtio/virtio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:                         0);",
          "502: }",
          "505: {",
          "506:     unsigned int i, head, max;",
          "507:     hwaddr desc_pa = vq->vring.desc;",
          "508:     VirtIODevice *vdev = vq->vdev;",
          "514:     elem->out_num = elem->in_num = 0;",
          "516:     max = vq->vring.num;",
          "",
          "[Removed Lines]",
          "504: int virtqueue_pop(VirtQueue *vq, VirtQueueElement *elem)",
          "510:     if (!virtqueue_num_heads(vq, vq->last_avail_idx))",
          "511:         return 0;",
          "",
          "[Added Lines]",
          "504: void *virtqueue_pop(VirtQueue *vq, size_t sz)",
          "509:     VirtQueueElement *elem;",
          "511:     if (!virtqueue_num_heads(vq, vq->last_avail_idx)) {",
          "512:         return NULL;",
          "513:     }",
          "516:     assert(sz >= sizeof(VirtQueueElement));",
          "517:     elem = g_malloc(sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:     vq->inuse++;",
          "571:     trace_virtqueue_pop(vq, elem, elem->in_num, elem->out_num);",
          "573: }",
          "",
          "[Removed Lines]",
          "572:     return elem->in_num + elem->out_num;",
          "",
          "[Added Lines]",
          "576:     return elem;",
          "",
          "---------------"
        ],
        "include/hw/virtio/dataplane/vring.h||include/hw/virtio/dataplane/vring.h": [
          "File: include/hw/virtio/dataplane/vring.h -> include/hw/virtio/dataplane/vring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: void vring_disable_notification(VirtIODevice *vdev, Vring *vring);",
          "45: bool vring_enable_notification(VirtIODevice *vdev, Vring *vring);",
          "46: bool vring_should_notify(VirtIODevice *vdev, Vring *vring);",
          "48: void vring_push(VirtIODevice *vdev, Vring *vring, VirtQueueElement *elem,",
          "49:                 int len);",
          "",
          "[Removed Lines]",
          "47: int vring_pop(VirtIODevice *vdev, Vring *vring, VirtQueueElement *elem);",
          "",
          "[Added Lines]",
          "47: void *vring_pop(VirtIODevice *vdev, Vring *vring, size_t sz);",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-balloon.h||include/hw/virtio/virtio-balloon.h": [
          "File: include/hw/virtio/virtio-balloon.h -> include/hw/virtio/virtio-balloon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     uint32_t num_pages;",
          "38:     uint32_t actual;",
          "39:     uint64_t stats[VIRTIO_BALLOON_S_NR];",
          "41:     size_t stats_vq_offset;",
          "42:     QEMUTimer *stats_timer;",
          "43:     int64_t stats_last_update;",
          "",
          "[Removed Lines]",
          "40:     VirtQueueElement stats_vq_elem;",
          "",
          "[Added Lines]",
          "40:     VirtQueueElement *stats_vq_elem;",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-blk.h||include/hw/virtio/virtio-blk.h": [
          "File: include/hw/virtio/virtio-blk.h -> include/hw/virtio/virtio-blk.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     bool is_write;",
          "81: } MultiReqBuffer;",
          "85: void virtio_blk_free_request(VirtIOBlockReq *req);",
          "87: void virtio_blk_handle_request(VirtIOBlockReq *req, MultiReqBuffer *mrb);",
          "",
          "[Removed Lines]",
          "83: VirtIOBlockReq *virtio_blk_alloc_request(VirtIOBlock *s);",
          "",
          "[Added Lines]",
          "83: void virtio_blk_init_request(VirtIOBlock *s, VirtIOBlockReq *req);",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-net.h||include/hw/virtio/virtio-net.h": [
          "File: include/hw/virtio/virtio-net.h -> include/hw/virtio/virtio-net.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     QEMUBH *tx_bh;",
          "48:     int tx_waiting;",
          "49:     struct {",
          "51:     } async_tx;",
          "52:     struct VirtIONet *n;",
          "53: } VirtIONetQueue;",
          "",
          "[Removed Lines]",
          "50:         VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "50:         VirtQueueElement *elem;",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-scsi.h||include/hw/virtio/virtio-scsi.h": [
          "File: include/hw/virtio/virtio-scsi.h -> include/hw/virtio/virtio-scsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: void virtio_scsi_handle_ctrl_req(VirtIOSCSI *s, VirtIOSCSIReq *req);",
          "161: bool virtio_scsi_handle_cmd_req_prepare(VirtIOSCSI *s, VirtIOSCSIReq *req);",
          "162: void virtio_scsi_handle_cmd_req_submit(VirtIOSCSI *s, VirtIOSCSIReq *req);",
          "164: void virtio_scsi_free_req(VirtIOSCSIReq *req);",
          "165: void virtio_scsi_push_event(VirtIOSCSI *s, SCSIDevice *dev,",
          "166:                             uint32_t event, uint32_t reason);",
          "",
          "[Removed Lines]",
          "163: VirtIOSCSIReq *virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq);",
          "",
          "[Added Lines]",
          "163: void virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq, VirtIOSCSIReq *req);",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio-serial.h||include/hw/virtio/virtio-serial.h": [
          "File: include/hw/virtio/virtio-serial.h -> include/hw/virtio/virtio-serial.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "125:     VirtQueueElement elem;",
          "",
          "[Added Lines]",
          "125:     VirtQueueElement *elem;",
          "",
          "---------------"
        ],
        "include/hw/virtio/virtio.h||include/hw/virtio/virtio.h": [
          "File: include/hw/virtio/virtio.h -> include/hw/virtio/virtio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:                     unsigned int len, unsigned int idx);",
          "154: void virtqueue_map(VirtQueueElement *elem);",
          "156: int virtqueue_avail_bytes(VirtQueue *vq, unsigned int in_bytes,",
          "157:                           unsigned int out_bytes);",
          "158: void virtqueue_get_avail_bytes(VirtQueue *vq, unsigned int *in_bytes,",
          "",
          "[Removed Lines]",
          "155: int virtqueue_pop(VirtQueue *vq, VirtQueueElement *elem);",
          "",
          "[Added Lines]",
          "155: void *virtqueue_pop(VirtQueue *vq, size_t sz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}