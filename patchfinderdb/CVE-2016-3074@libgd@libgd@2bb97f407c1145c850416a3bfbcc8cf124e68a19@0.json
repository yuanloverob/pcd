{
  "cve_id": "CVE-2016-3074",
  "cve_desc": "Integer signedness error in GD Graphics Library 2.1.1 (aka libgd or libgd2) allows remote attackers to cause a denial of service (crash) or potentially execute arbitrary code via crafted compressed gd2 data, which triggers a heap-based buffer overflow.",
  "repo": "libgd/libgd",
  "patch_hash": "2bb97f407c1145c850416a3bfbcc8cf124e68a19",
  "patch_info": {
    "commit_hash": "2bb97f407c1145c850416a3bfbcc8cf124e68a19",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/2bb97f407c1145c850416a3bfbcc8cf124e68a19",
    "files": [
      ".gitignore",
      "src/gd_gd2.c",
      "tests/Makefile.am",
      "tests/gd2/gd2_read_corrupt.c",
      "tests/gd2/invalid_neg_size.gd2"
    ],
    "message": "gd2: handle corrupt images better (CVE-2016-3074)\n\nMake sure we do some range checking on corrupted chunks.\n\nThanks to Hans Jerry Illikainen <hji@dyntopia.com> for indepth report\nand reproducer information.  Made for easy test case writing :).",
    "before_after_code_files": [
      "src/gd_gd2.c||src/gd_gd2.c",
      "tests/Makefile.am||tests/Makefile.am",
      "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
    ]
  },
  "patch_diff": {
    "src/gd_gd2.c||src/gd_gd2.c": [
      "File: src/gd_gd2.c -> src/gd_gd2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "165:    if (gdGetInt (&cidx[i].size, in) != 1) {",
      "166:     goto fail2;",
      "167:    };",
      "168:   };",
      "170:  };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:    if (cidx[i].offset < 0 || cidx[i].size < 0)",
      "169:     goto fail2;",
      "",
      "---------------"
    ],
    "tests/Makefile.am||tests/Makefile.am": [
      "File: tests/Makefile.am -> tests/Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: if HAVE_LIBZ",
      "131: check_PROGRAMS += \\",
      "133: endif",
      "135: if HAVE_LIBPNG",
      "",
      "[Removed Lines]",
      "132:  gd2/gd2_null",
      "",
      "[Added Lines]",
      "132:  gd2/gd2_null \\",
      "133:  gd2/gd2_read_corrupt",
      "",
      "---------------"
    ],
    "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
      "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: #include \"gd.h\"",
      "3: #include <stdio.h>",
      "4: #include <stdlib.h>",
      "5: #include \"gdtest.h\"",
      "7: int main()",
      "8: {",
      "9:  gdImagePtr im;",
      "10:  FILE *fp;",
      "11:  char path[1024];",
      "14:  sprintf(path, \"%s/gd2/invalid_neg_size.gd2\", GDTEST_TOP_DIR);",
      "15:  fp = fopen(path, \"rb\");",
      "16:  if (!fp) {",
      "17:   printf(\"failed, cannot open file\\n\");",
      "18:   return 1;",
      "19:  }",
      "20:  im = gdImageCreateFromGd2(fp);",
      "21:  fclose(fp);",
      "24:  return im == NULL ? 0 : 1;",
      "25: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cea5c5aae09f30710bcf65a9e986dafb5c7b7a92",
      "candidate_info": {
        "commit_hash": "cea5c5aae09f30710bcf65a9e986dafb5c7b7a92",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/cea5c5aae09f30710bcf65a9e986dafb5c7b7a92",
        "files": [
          "tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c",
          "tests/gdimagestringft/gdimagestringft_bbox.c"
        ],
        "message": "Partially implement #220: replace all printf error messages with gdTestErrorMsg",
        "before_after_code_files": [
          "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c",
          "tests/gdimagestringft/gdimagestringft_bbox.c||tests/gdimagestringft/gdimagestringft_bbox.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ],
          "candidate": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c": [
          "File: tests/gd2/gd2_read.c -> tests/gd2/gd2_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  while (path[i] != NULL) {",
          "25:   fp = gdTestFileOpen2(\"gd2\", path[i]);",
          "26:   if (!fp) {",
          "28:    return 1;",
          "29:   }",
          "30:   im = gdImageCreateFromGd2(fp);",
          "",
          "[Removed Lines]",
          "27:    printf(\"failed, cannot open file: %s\\n\", path[0]);",
          "",
          "[Added Lines]",
          "27:    gdTestErrorMsg(\"failed, cannot open file: %s\\n\", path[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   if (path_exp[i] != NULL) {",
          "34:    fp = gdTestFileOpen2(\"gd2\", path_exp[i]);",
          "35:    if (!fp) {",
          "37:     return 1;",
          "38:    }",
          "39:    exp = gdImageCreateFromPng(fp);",
          "40:    if (!gdAssertImageEquals(exp, im)) {",
          "42:     gdImageDestroy(im);",
          "43:     error = 1;",
          "44:    } else {",
          "",
          "[Removed Lines]",
          "36:     printf(\"failed, cannot open file: %s\\n\", path_exp[i]);",
          "41:     printf(\"image %s differ from expected result\\n\", path[i]);",
          "",
          "[Added Lines]",
          "36:     gdTestErrorMsg(\"failed, cannot open file: %s\\n\", path_exp[i]);",
          "41:     gdTestErrorMsg(\"image %s differs from expected result\\n\", path[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:   } else {",
          "52:    if (im) {",
          "54:     gdImageDestroy(im);",
          "55:     error = 1;",
          "56:    } else {",
          "",
          "[Removed Lines]",
          "53:     printf(\"image %s should have failed to be loaded\\n\", path[i]);",
          "",
          "[Added Lines]",
          "53:     gdTestErrorMsg(\"image %s should have failed to be loaded\\n\", path[i]);",
          "",
          "---------------"
        ],
        "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
          "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  fp = gdTestFileOpen2(\"gd2\", \"invalid_header.gd2\");",
          "14:  if (!fp) {",
          "16:   return 1;",
          "17:  }",
          "18:  im = gdImageCreateFromGd2(fp);",
          "",
          "[Removed Lines]",
          "15:   printf(\"failed, cannot open file: %s\\n\", \"invalid_header.gd2\");",
          "",
          "[Added Lines]",
          "15:   gdTestErrorMsg(\"failed, cannot open file: %s\\n\", \"invalid_header.gd2\");",
          "",
          "---------------"
        ],
        "tests/gdimagestringft/gdimagestringft_bbox.c||tests/gdimagestringft/gdimagestringft_bbox.c": [
          "File: tests/gdimagestringft/gdimagestringft_bbox.c -> tests/gdimagestringft/gdimagestringft_bbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   }",
          "54:   for (j = 0; j < 8; j++) {",
          "55:    if (brect[j] != EXPECT[i][j]) {",
          "57:            EXPECT[i][0], EXPECT[i][1], EXPECT[i][2], EXPECT[i][3],",
          "58:            EXPECT[i][4], EXPECT[i][5], EXPECT[i][6], EXPECT[i][7],",
          "59:            brect[0], brect[1], brect[2], brect[3],",
          "",
          "[Removed Lines]",
          "56:     printf(\"(%d, %d) (%d, %d) (%d, %d) (%d, %d) expected, but (%d, %d) (%d, %d) (%d, %d) (%d, %d)\\n\",",
          "",
          "[Added Lines]",
          "56:     gdTestErrorMsg(\"(%d, %d) (%d, %d) (%d, %d) (%d, %d) expected, but (%d, %d) (%d, %d) (%d, %d) (%d, %d)\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20f9273879a5ca46934ccecbc5615a9ea9bd7eb9",
      "candidate_info": {
        "commit_hash": "20f9273879a5ca46934ccecbc5615a9ea9bd7eb9",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/20f9273879a5ca46934ccecbc5615a9ea9bd7eb9",
        "files": [
          "tests/gd2/gd2_read_corrupt.c"
        ],
        "message": "use gdtest api",
        "before_after_code_files": [
          "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ],
          "candidate": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
          "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  fp = gdTestFileOpen2(\"gd2\", \"invalid_header.gd2\");",
          "14:  if (!fp) {",
          "16:   return 1;",
          "17:  }",
          "18:  im = gdImageCreateFromGd2(fp);",
          "",
          "[Removed Lines]",
          "15:   printf(\"failed, cannot open file: %s\\n\", \"invalid_header.gd2\");",
          "",
          "[Added Lines]",
          "15:   gdTestErrorMsg(\"failed, cannot open file: %s\\n\", \"invalid_header.gd2\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
      "candidate_info": {
        "commit_hash": "dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/dd8f99a4e3226f852fb8e3f65ac67eb49d003d7e",
        "files": [
          "tests/gd2/CMakeLists.txt",
          "tests/gd2/Makemodule.am",
          "tests/gd2/conv_test.sh",
          "tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c",
          "tests/gd2/invalid_header.sh",
          "tests/gd2/invalid_neg_size.sh"
        ],
        "message": "fix #255, some duplicate cases but allow png&gd2 tests",
        "before_after_code_files": [
          "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am",
          "tests/gd2/conv_test.sh||tests/gd2/conv_test.sh",
          "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c",
          "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c",
          "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh",
          "tests/gd2/invalid_neg_size.sh||tests/gd2/invalid_neg_size.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ],
          "candidate": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/Makemodule.am||tests/gd2/Makemodule.am": [
          "File: tests/gd2/Makemodule.am -> tests/gd2/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: libgd_test_programs += \\",
          "6:  gd2/gd2_empty_file \\",
          "11: if HAVE_LIBZ",
          "12: libgd_test_programs += \\",
          "13:  gd2/gd2_null",
          "17: if HAVE_LIBPNG",
          "18: libgd_test_programs += \\",
          "22: endif",
          "24: endif",
          "26: EXTRA_DIST += \\",
          "27:  gd2/CMakeLists.txt \\",
          "28:  gd2/conv_gd2_exp.gd2 \\",
          "29:  gd2/conv_test.gd2 \\",
          "31:  gd2/conv_test_exp.png \\",
          "32:  gd2/empty.gd2 \\",
          "33:  gd2/invalid_header.gd2 \\",
          "35:  gd2/invalid_neg_size.gd2 \\",
          "37:  gd2/php_bug_72339_exp.gd2",
          "",
          "[Removed Lines]",
          "1: libgd_helper_programs += \\",
          "2:  gd2/gd2_read \\",
          "3:  gd2/gd2_read_corrupt",
          "7:  gd2/php_bug_72339",
          "8: TESTS += \\",
          "9:  gd2/invalid_header.sh",
          "14: TESTS += \\",
          "15:  gd2/invalid_neg_size.sh",
          "19:  gd2/gd2_im2im",
          "20: TESTS += \\",
          "21:  gd2/conv_test.sh",
          "30:  gd2/conv_test.sh \\",
          "34:  gd2/invalid_header.sh \\",
          "36:  gd2/invalid_neg_size.sh \\",
          "",
          "[Added Lines]",
          "3:  gd2/php_bug_72339 \\",
          "4:  gd2/gd2_read_corrupt",
          "12:  gd2/gd2_im2im \\",
          "13:  gd2/gd_read",
          "",
          "---------------"
        ],
        "tests/gd2/conv_test.sh||tests/gd2/conv_test.sh": [
          "File: tests/gd2/conv_test.sh -> tests/gd2/conv_test.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/gd2/gd2_read.c||tests/gd2/gd2_read.c": [
          "File: tests/gd2/gd2_read.c -> tests/gd2/gd2_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: int main(int argc, char *argv[])",
          "8: {",
          "11:  FILE *fp;",
          "38:   } else {",
          "40:   }",
          "41:  }",
          "42:  return error;",
          "43: }",
          "",
          "[Removed Lines]",
          "9:  int error;",
          "10:  gdImagePtr im;",
          "12:  char *inpath, *exppath;",
          "14:  if (argc != 3) {",
          "15:   printf(\"Usage: %s <input gd2> <expected png>\\n\", argv[0]);",
          "16:   return 1;",
          "17:  }",
          "19:  inpath = argv[1];",
          "20:  exppath = argv[2];",
          "22:  fp = fopen(inpath, \"rb\");",
          "23:  if (!fp) {",
          "24:   printf(\"failed, cannot open file: %s\\n\", inpath);",
          "25:   return 1;",
          "26:  }",
          "28:  im = gdImageCreateFromGd2(fp);",
          "29:  fclose(fp);",
          "31:  if (!gdAssertImageEqualsToFile(exppath, im)) {",
          "32:   error = 1;",
          "33:   gdImageDestroy(im);",
          "34:  } else {",
          "35:   if (im) {",
          "36:    gdImageDestroy(im);",
          "37:    error = 0;",
          "39:    error = 1;",
          "",
          "[Added Lines]",
          "9:  int error, i = 0;",
          "10:  gdImagePtr im, exp;",
          "12:  char *path[] = {",
          "13:    \"conv_test.gd2\",",
          "14:    \"invalid_neg_size.gd2\",",
          "15:    \"invalid_header.gd2\",",
          "16:    NULL",
          "17:  };",
          "18:  char *path_exp[] = {",
          "19:    \"conv_test_exp.png\",",
          "20:    NULL,",
          "21:    NULL,",
          "22:    NULL",
          "23:  };",
          "24:  while (path[i] != NULL) {",
          "25:   fp = gdTestFileOpen2(\"gd2\", path[i]);",
          "26:   if (!fp) {",
          "27:    printf(\"failed, cannot open file: %s\\n\", path[0]);",
          "28:    return 1;",
          "29:   }",
          "30:   im = gdImageCreateFromGd2(fp);",
          "31:   fclose(fp);",
          "33:   if (path_exp[i] != NULL) {",
          "34:    fp = gdTestFileOpen2(\"gd2\", path_exp[i]);",
          "35:    if (!fp) {",
          "36:     printf(\"failed, cannot open file: %s\\n\", path_exp[i]);",
          "37:     return 1;",
          "38:    }",
          "39:    exp = gdImageCreateFromPng(fp);",
          "40:    if (!gdAssertImageEquals(exp, im)) {",
          "41:     printf(\"image %s differ from expected result\\n\", path[i]);",
          "42:     gdImageDestroy(im);",
          "43:     error = 1;",
          "44:    } else {",
          "45:     error = 0;",
          "46:    }",
          "47:    if (exp) {",
          "48:     gdImageDestroy(exp);",
          "49:    }",
          "52:    if (im) {",
          "53:     printf(\"image %s should have failed to be loaded\\n\", path[i]);",
          "54:     gdImageDestroy(im);",
          "55:     error = 1;",
          "56:    } else {",
          "57:     error = 0;",
          "58:    }",
          "60:   i++;",
          "",
          "---------------"
        ],
        "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
          "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "9:  gdImagePtr im;",
          "10:  FILE *fp;",
          "21:  if (!fp) {",
          "22:   printf(\"failed, cannot open file: %s\\n\", inpath);",
          "23:   return 1;",
          "",
          "[Removed Lines]",
          "11:  char *inpath;",
          "13:  if (argc != 2) {",
          "14:   printf(\"Usage: %s <input gd2>\\n\", argv[0]);",
          "15:   return 1;",
          "16:  }",
          "19:  inpath = argv[1];",
          "20:  fp = fopen(inpath, \"rb\");",
          "",
          "[Added Lines]",
          "12:  fp = gdTestFileOpen2(\"gd2\", \"invalid_header.gd2\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  im = gdImageCreateFromGd2(fp);",
          "26:  fclose(fp);",
          "30: }",
          "",
          "[Removed Lines]",
          "29:  return im == NULL ? 0 : 1;",
          "",
          "[Added Lines]",
          "21:  if (im != NULL) {",
          "22:   gdTestErrorMsg(\"image should have failed to be loaded\\n\");",
          "23:   gdImageDestroy(im);",
          "24:   return 1;",
          "25:  } else {",
          "26:   return 0;",
          "27:  }",
          "",
          "---------------"
        ],
        "tests/gd2/invalid_header.sh||tests/gd2/invalid_header.sh": [
          "File: tests/gd2/invalid_header.sh -> tests/gd2/invalid_header.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/gd2/invalid_neg_size.sh||tests/gd2/invalid_neg_size.sh": [
          "File: tests/gd2/invalid_neg_size.sh -> tests/gd2/invalid_neg_size.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5f112d1aa97cc112cb2174c98500397bd093ac7",
      "candidate_info": {
        "commit_hash": "f5f112d1aa97cc112cb2174c98500397bd093ac7",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/f5f112d1aa97cc112cb2174c98500397bd093ac7",
        "files": [
          "tests/gd2/gd2_read_corrupt.c"
        ],
        "message": "fix #245",
        "before_after_code_files": [
          "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ],
          "candidate": [
            "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/gd2/gd2_read_corrupt.c||tests/gd2/gd2_read_corrupt.c": [
          "File: tests/gd2/gd2_read_corrupt.c -> tests/gd2/gd2_read_corrupt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  fp = gdTestFileOpen2(\"gd2\", \"invalid_header.gd2\");",
          "14:  if (!fp) {",
          "16:   return 1;",
          "17:  }",
          "18:  im = gdImageCreateFromGd2(fp);",
          "",
          "[Removed Lines]",
          "15:   printf(\"failed, cannot open file: %s\\n\", inpath);",
          "",
          "[Added Lines]",
          "15:   printf(\"failed, cannot open file: %s\\n\", \"invalid_header.gd2\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}