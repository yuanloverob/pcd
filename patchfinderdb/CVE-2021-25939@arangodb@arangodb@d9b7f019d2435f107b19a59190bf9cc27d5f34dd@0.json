{
  "cve_id": "CVE-2021-25939",
  "cve_desc": "In ArangoDB, versions v3.7.0 through v3.9.0-alpha.1 have a feature which allows downloading a Foxx service from a publicly available URL. This feature does not enforce proper filtering of requests performed internally, which can be abused by a highly-privileged attacker to perform blind SSRF and send internal requests to localhost.",
  "repo": "arangodb/arangodb",
  "patch_hash": "d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
  "patch_info": {
    "commit_hash": "d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
    "repo": "arangodb/arangodb",
    "commit_url": "https://github.com/arangodb/arangodb/commit/d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
    "files": [
      "CHANGELOG",
      "arangod/GeneralServer/ServerSecurityFeature.cpp",
      "arangod/GeneralServer/ServerSecurityFeature.h",
      "arangod/V8Server/v8-actions.cpp",
      "etc/testing/arangod-common.conf",
      "js/actions/_admin/foxx/app.js",
      "js/apps/system/_admin/aardvark/APP/aardvark.js",
      "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
      "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
      "js/server/bootstrap/modules/internal.js",
      "js/server/modules/@arangodb/foxx/manager.js",
      "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
      "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
    ],
    "message": "[APM-78] Disable installation from remote URL (#15292)",
    "before_after_code_files": [
      "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
      "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
      "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
      "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
      "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
      "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
      "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
      "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
      "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
      "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
      "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
      "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
    ]
  },
  "patch_diff": {
    "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp": [
      "File: arangod/GeneralServer/ServerSecurityFeature.cpp -> arangod/GeneralServer/ServerSecurityFeature.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     : ApplicationFeature(server, \"ServerSecurity\"),",
      "37:       _enableFoxxApi(true),",
      "38:       _enableFoxxStore(true),",
      "40:   setOptional(false);",
      "41:   startsAfter<application_features::GreetingsFeaturePhase>();",
      "42: }",
      "",
      "[Removed Lines]",
      "39:       _hardenedRestApi(false) {",
      "",
      "[Added Lines]",
      "39:       _hardenedRestApi(false),",
      "40:       _foxxAllowInstallFromRemote(false) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:                      arangodb::options::Flags::OnCoordinator,",
      "63:                      arangodb::options::Flags::OnSingle))",
      "64:                      .setIntroducedIn(30500);",
      "66: }",
      "68: bool ServerSecurityFeature::isFoxxApiDisabled() const {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   options->addOption(\"--foxx.allow-install-from-remote\", \"allow installing Foxx apps from remote URLs other than Github\",",
      "69:                      new BooleanParameter(&_foxxAllowInstallFromRemote),",
      "70:                      arangodb::options::makeFlags(",
      "71:                      arangodb::options::Flags::DefaultNoComponents,",
      "72:                      arangodb::options::Flags::OnCoordinator,",
      "73:                      arangodb::options::Flags::OnSingle))",
      "74:                      .setIntroducedIn(30805);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:   }",
      "91:   return allowAccess;",
      "92: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: bool ServerSecurityFeature::foxxAllowInstallFromRemote() const {",
      "104:   return _foxxAllowInstallFromRemote;",
      "105: }",
      "",
      "---------------"
    ],
    "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h": [
      "File: arangod/GeneralServer/ServerSecurityFeature.h -> arangod/GeneralServer/ServerSecurityFeature.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:   bool isFoxxApiDisabled() const;",
      "38:   bool isFoxxStoreDisabled() const;",
      "39:   bool canAccessHardenedApi() const;",
      "41:  private:",
      "42:   bool _enableFoxxApi;",
      "43:   bool _enableFoxxStore;",
      "44:   bool _hardenedRestApi;",
      "45: };",
      "47: }  // namespace arangodb",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:   bool foxxAllowInstallFromRemote() const;",
      "46:   bool _foxxAllowInstallFromRemote;",
      "",
      "---------------"
    ],
    "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp": [
      "File: arangod/V8Server/v8-actions.cpp -> arangod/V8Server/v8-actions.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1791:   TRI_V8_TRY_CATCH_END",
      "1792: }",
      "1794: static void JS_RunInRestrictedContext(v8::FunctionCallbackInfo<v8::Value> const& args) {",
      "1795:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
      "1796:   v8::HandleScope scope(isolate);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1794: static void JS_FoxxAllowInstallFromRemote(v8::FunctionCallbackInfo<v8::Value> const& args) {",
      "1795:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
      "1796:   v8::HandleScope scope(isolate);",
      "1798:   TRI_GET_GLOBALS();",
      "1799:   ServerSecurityFeature& security = v8g->_server.getFeature<ServerSecurityFeature>();",
      "1800:   TRI_V8_RETURN_BOOL(security.foxxAllowInstallFromRemote());",
      "1802:   TRI_V8_TRY_CATCH_END",
      "1803: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1868:                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_API_DISABLED\"), JS_IsFoxxApiDisabled, true);",
      "1869:   TRI_AddGlobalFunctionVocbase(isolate,",
      "1870:                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"), JS_IsFoxxStoreDisabled, true);",
      "1871:   TRI_AddGlobalFunctionVocbase(isolate,",
      "1872:                                TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), JS_RunInRestrictedContext, true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1882:   TRI_AddGlobalFunctionVocbase(isolate,",
      "1883:                                TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), JS_FoxxAllowInstallFromRemote, true);",
      "",
      "---------------"
    ],
    "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf": [
      "File: etc/testing/arangod-common.conf -> etc/testing/arangod-common.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: force-sync-properties = false",
      "10: extended-names-databases = true",
      "12: [javascript]",
      "13: allow-admin-execute = true",
      "14: startup-directory = @TOP_DIR@/js",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: [foxx]",
      "13: allow-install-from-remote = true",
      "",
      "---------------"
    ],
    "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js": [
      "File: js/actions/_admin/foxx/app.js -> js/actions/_admin/foxx/app.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     return {source: `${baseUrl}${splitted[1]}/archive/${splitted[2] || 'master'}.zip`};",
      "84:   }",
      "85:   if (/^https?:/i.test(appInfo)) {",
      "86:     return {source: appInfo};",
      "87:   }",
      "88:   if (/^uploads[/\\\\]tmp-/.test(appInfo)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     FoxxManager.validateInstallUrl(appInfo);",
      "",
      "---------------"
    ],
    "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js": [
      "File: js/apps/system/_admin/aardvark/APP/aardvark.js -> js/apps/system/_admin/aardvark/APP/aardvark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:       statisticsInAllDatabases: internal.enabledStatisticsInAllDatabases(),",
      "91:       foxxStoreEnabled: !internal.isFoxxStoreDisabled(),",
      "92:       foxxApiEnabled: !internal.isFoxxApiDisabled(),",
      "93:       clusterApiJwtPolicy: internal.clusterApiJwtPolicy(),",
      "94:       minReplicationFactor: internal.minReplicationFactor,",
      "95:       maxReplicationFactor: internal.maxReplicationFactor,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:       foxxAllowInstallFromRemote: internal.foxxAllowInstallFromRemote(),",
      "",
      "---------------"
    ],
    "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js": [
      "File: js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js -> js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "581:       if (!frontendConfig.foxxStoreEnabled) {",
      "582:         delete menus.Store;",
      "583:       }",
      "585:       menus[activeKey].active = true;",
      "586:       if (disabled) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "585:       if (!frontendConfig.foxxAllowInstallFromRemote) {",
      "586:         delete menus.Remote;",
      "587:       }",
      "",
      "---------------"
    ],
    "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js": [
      "File: js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js -> js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1135:           this.navigate('#dashboard', { trigger: true });",
      "1136:           return;",
      "1137:         }",
      "1138:         window.modalView.clearValidators();",
      "1139:         if (this.serviceUrlView) {",
      "1140:           this.serviceUrlView.remove();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:         if (!frontendConfig.foxxAllowInstallFromRemote) {",
      "1139:           this.navigate('#services/install/upload', { trigger: true });",
      "1140:           return;",
      "1141:         }",
      "",
      "---------------"
    ],
    "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js": [
      "File: js/server/bootstrap/modules/internal.js -> js/server/bootstrap/modules/internal.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:     exports.isFoxxApiDisabled = global.SYS_IS_FOXX_API_DISABLED;",
      "193:     delete global.SYS_IS_FOXX_API_DISABLED;",
      "194:   }",
      "197:     exports.isFoxxStoreDisabled = global.SYS_IS_FOXX_STORE_DISABLED;",
      "198:     delete global.SYS_IS_FOXX_STORE_DISABLED;",
      "199:   }",
      "201:   if (global.SYS_CLUSTER_API_JWT_POLICY) {",
      "202:     exports.clusterApiJwtPolicy = global.SYS_CLUSTER_API_JWT_POLICY;",
      "",
      "[Removed Lines]",
      "191:   if (global.SYS_IS_FOXX_API_DISABLED) {",
      "196:   if (global.SYS_IS_FOXX_STORE_DISABLED) {",
      "",
      "[Added Lines]",
      "191:   if (typeof global.SYS_IS_FOXX_API_DISABLED !== 'undefined') {",
      "196:   if (typeof global.SYS_IS_FOXX_STORE_DISABLED !== 'undefined') {",
      "201:   if (typeof global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE !== 'undefined') {",
      "202:     exports.foxxAllowInstallFromRemote = global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
      "203:     delete global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
      "204:   }",
      "",
      "---------------"
    ],
    "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js": [
      "File: js/server/modules/@arangodb/foxx/manager.js -> js/server/modules/@arangodb/foxx/manager.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:   return global.ArangoServerState.isFoxxmaster();",
      "79: }",
      "83: function selfHealAll (skipReloadRouting) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: function validateInstallUrl (url) {",
      "82:   if (!internal.foxxAllowInstallFromRemote()) {",
      "84:     let baseUrl = require('process').env.FOXX_BASE_URL;",
      "85:     let invalid = false;",
      "86:     if (baseUrl) {",
      "87:       if (!url.startsWith(baseUrl)) {",
      "89:         invalid = true;",
      "90:       }",
      "91:     } else {",
      "92:       const checkRegex = /^https?:\\/\\/([^:\\.]+:[^@\\.]*@)?(www\\.)?github\\.com\\//i;",
      "93:       invalid = !checkRegex.test(url);",
      "94:     }",
      "96:     if (invalid) {",
      "97:       throw new ArangoError({",
      "98:         errorNum: errors.ERROR_FORBIDDEN.code,",
      "99:         errorMessage: dd`",
      "100:           ${errors.ERROR_FORBIDDEN.message}",
      "101:           Installing apps from remote URLs is disabled",
      "102:         `",
      "103:       });",
      "104:     }",
      "105:   }",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "562:       _buildServiceBundleFromScript(tempServicePath, tempBundlePath, serviceInfo);",
      "563:     } else if (/^https?:/i.test(serviceInfo)) {",
      "565:       const tempFile = downloadServiceBundleFromRemote(serviceInfo);",
      "566:       try {",
      "567:         _buildServiceFromFile(tempServicePath, tempBundlePath, tempFile);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "593:       validateInstallUrl(serviceInfo);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1112: exports._createServiceBundle = createServiceBundle;",
      "1113: exports._resetCache = () => GLOBAL_SERVICE_MAP.clear();",
      "1114: exports._mountPoints = getMountPoints;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144: exports.validateInstallUrl = validateInstallUrl;",
      "",
      "---------------"
    ],
    "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js": [
      "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: if (getOptions === true) {",
      "28:   return {",
      "29:     'foxx.allow-install-from-remote': 'false',",
      "30:   };",
      "31: }",
      "32: const jsunity = require('jsunity');",
      "33: const errors = require('@arangodb').errors;",
      "34: const db = require('internal').db;",
      "35: const FoxxManager = require('@arangodb/foxx/manager');",
      "37: function testSuite() {",
      "38:   const mount = \"/test123\";",
      "40:   return {",
      "41:     testInstallViaAardvarkOk: function() {",
      "42:       const urls = [",
      "43:         \"http://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "44:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "45:         \"http://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "46:         \"https://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "47:       ];",
      "48:       urls.forEach((url) => {",
      "49:         try {",
      "50:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
      "51:           assertFalse(res.error, url);",
      "52:         } finally {",
      "53:           try {",
      "54:             FoxxManager.uninstall(mount);",
      "55:           } catch (err) {}",
      "56:         }",
      "57:       });",
      "58:     },",
      "60:     testInstallViaAardvarkFail: function() {",
      "61:       const urls = [",
      "62:         \"http://some.other.domain/foo/bar\",",
      "63:         \"https://some.other.domain/foo/bar\",",
      "64:         \"https://github.com.some.deceptive.site/foo/bar\",",
      "65:         \"https://some.deceptive.github.com.site/foo/bar\",",
      "66:         \"https://github.com.evil/foo/bar\",",
      "67:       ];",
      "68:       urls.forEach((url) => {",
      "69:         try {",
      "70:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
      "71:           assertTrue(res.error, url);",
      "72:           assertEqual(403, res.code);",
      "73:         } finally {",
      "74:           try {",
      "75:             FoxxManager.uninstall(mount);",
      "76:           } catch (err) {}",
      "77:         }",
      "78:       });",
      "79:     },",
      "81:     testInstallViaFoxxAPIOld: function() {",
      "83:       const urls = [",
      "84:         \"http://some.other.domain/foo/bar\",",
      "85:         \"https://some.other.domain/foo/bar\",",
      "86:         \"https://github.com.some.deceptive.site/foo/bar\",",
      "87:         \"https://some.deceptive.github.com.site/foo/bar\",",
      "88:         \"https://github.com.evil/foo/bar\",",
      "89:       ];",
      "90:       urls.forEach((url) => {",
      "91:         try {",
      "92:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
      "93:           assertTrue(res.error);",
      "94:           assertEqual(403, res.code);",
      "95:           assertEqual(11, res.errorNum);",
      "96:         } finally {",
      "97:           try {",
      "98:             FoxxManager.uninstall(mount);",
      "99:           } catch (err) {}",
      "100:         }",
      "101:       });",
      "102:     },",
      "104:     testInstallViaFoxxAPINew: function() {",
      "106:       const urls = [",
      "107:         \"http://some.other.domain/foo/bar\",",
      "108:         \"https://some.other.domain/foo/bar\",",
      "109:         \"https://github.com.some.deceptive.site/foo/bar\",",
      "110:         \"https://some.deceptive.github.com.site/foo/bar\",",
      "111:         \"https://github.com.evil/foo/bar\",",
      "112:       ];",
      "113:       urls.forEach((url) => {",
      "114:         try {",
      "115:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
      "116:           assertTrue(res.error);",
      "117:           assertEqual(403, res.code);",
      "118:           assertEqual(11, res.errorNum);",
      "119:         } finally {",
      "120:           try {",
      "121:             FoxxManager.uninstall(mount);",
      "122:           } catch (err) {}",
      "123:         }",
      "124:       });",
      "125:     },",
      "127:   };",
      "128: }",
      "130: jsunity.run(testSuite);",
      "131: return jsunity.done();",
      "",
      "---------------"
    ],
    "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js": [
      "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: if (getOptions === true) {",
      "28:   return {",
      "29:     'foxx.allow-install-from-remote': 'true',",
      "30:   };",
      "31: }",
      "32: const jsunity = require('jsunity');",
      "33: const errors = require('@arangodb').errors;",
      "34: const db = require('internal').db;",
      "35: const FoxxManager = require('@arangodb/foxx/manager');",
      "37: function testSuite() {",
      "38:   const mount = \"/test123\";",
      "40:   return {",
      "41:     testInstallViaAardvark: function() {",
      "42:       const urls = [",
      "43:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "44:       ];",
      "45:       urls.forEach((url) => {",
      "46:         try {",
      "47:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
      "48:           assertFalse(res.error);",
      "49:           assertEqual(\"itzpapalotl\", res.name);",
      "50:         } finally {",
      "51:           try {",
      "52:             FoxxManager.uninstall(mount);",
      "53:           } catch (err) {}",
      "54:         }",
      "55:       });",
      "56:     },",
      "58:     testInstallViaFoxxAPIOld: function() {",
      "59:       const urls = [",
      "60:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "61:       ];",
      "62:       urls.forEach((url) => {",
      "63:         try {",
      "64:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
      "65:           assertFalse(res.error);",
      "66:           assertEqual(\"itzpapalotl\", res.name);",
      "67:         } finally {",
      "68:           try {",
      "69:             FoxxManager.uninstall(mount);",
      "70:           } catch (err) {}",
      "71:         }",
      "72:       });",
      "73:     },",
      "75:     testInstallViaFoxxAPINew: function() {",
      "76:       const urls = [",
      "77:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
      "78:       ];",
      "79:       urls.forEach((url) => {",
      "80:         try {",
      "81:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
      "82:           assertFalse(res.error);",
      "83:           assertEqual(\"itzpapalotl\", res.name);",
      "84:         } finally {",
      "85:           try {",
      "86:             FoxxManager.uninstall(mount);",
      "87:           } catch (err) {}",
      "88:         }",
      "89:       });",
      "90:     },",
      "92:   };",
      "93: }",
      "95: jsunity.run(testSuite);",
      "96: return jsunity.done();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de8aab136ca3c2bc12243d7e7b247f5065c8f897",
      "candidate_info": {
        "commit_hash": "de8aab136ca3c2bc12243d7e7b247f5065c8f897",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/de8aab136ca3c2bc12243d7e7b247f5065c8f897",
        "files": [
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js"
        ],
        "message": "add debug output for a test",
        "before_after_code_files": [
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js"
          ],
          "candidate": [
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js"
          ]
        }
      },
      "candidate_diff": {
        "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js": [
          "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       urls.forEach((url) => {",
          "49:         try {",
          "50:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "52:         } finally {",
          "53:           try {",
          "54:             FoxxManager.uninstall(mount);",
          "",
          "[Removed Lines]",
          "51:           assertFalse(res.error, url);",
          "",
          "[Added Lines]",
          "51:           assertFalse(res.error, { res, url });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "candidate_info": {
        "commit_hash": "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
        "files": [
          "CHANGELOG",
          "arangod/GeneralServer/ServerSecurityFeature.cpp",
          "arangod/GeneralServer/ServerSecurityFeature.h",
          "arangod/V8Server/v8-actions.cpp",
          "etc/testing/arangod-common.conf",
          "js/actions/_admin/foxx/app.js",
          "js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "js/server/bootstrap/modules/internal.js",
          "js/server/modules/@arangodb/foxx/manager.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
        ],
        "message": "[APM-78] Disable installation from remote URL (#15292) (#15343)\n\n* [APM-78] Disable installation from remote URL (#15292)\n\n* Update CHANGELOG\n\n* Fix clang-format\n\nCo-authored-by: Vadim <vadim@arangodb.com>",
        "before_after_code_files": [
          "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
          "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
          "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
          "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
          "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
          "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
          "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
            "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
            "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
            "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
            "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
            "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
            "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
            "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
          ],
          "candidate": [
            "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
            "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
            "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
            "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
            "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
            "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
            "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
            "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
          ]
        }
      },
      "candidate_diff": {
        "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp": [
          "File: arangod/GeneralServer/ServerSecurityFeature.cpp -> arangod/GeneralServer/ServerSecurityFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     : ApplicationFeature(server, \"ServerSecurity\"),",
          "38:       _enableFoxxApi(true),",
          "39:       _enableFoxxStore(true),",
          "41:   setOptional(false);",
          "42:   startsAfter<application_features::GreetingsFeaturePhase>();",
          "43: }",
          "",
          "[Removed Lines]",
          "40:       _hardenedRestApi(false) {",
          "",
          "[Added Lines]",
          "40:       _hardenedRestApi(false),",
          "41:       _foxxAllowInstallFromRemote(false) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:                       arangodb::options::Flags::OnCoordinator,",
          "69:                       arangodb::options::Flags::OnSingle))",
          "70:       .setIntroducedIn(30500);",
          "71: }",
          "73: bool ServerSecurityFeature::isFoxxApiDisabled() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   options",
          "73:       ->addOption(",
          "74:           \"--foxx.allow-install-from-remote\",",
          "75:           \"allow installing Foxx apps from remote URLs other than Github\",",
          "76:           new BooleanParameter(&_foxxAllowInstallFromRemote),",
          "77:           arangodb::options::makeFlags(",
          "78:               arangodb::options::Flags::DefaultNoComponents,",
          "79:               arangodb::options::Flags::OnCoordinator,",
          "80:               arangodb::options::Flags::OnSingle))",
          "81:       .setIntroducedIn(30805);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   }",
          "96:   return allowAccess;",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: bool ServerSecurityFeature::foxxAllowInstallFromRemote() const {",
          "111:   return _foxxAllowInstallFromRemote;",
          "112: }",
          "",
          "---------------"
        ],
        "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h": [
          "File: arangod/GeneralServer/ServerSecurityFeature.h -> arangod/GeneralServer/ServerSecurityFeature.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   bool isFoxxApiDisabled() const;",
          "40:   bool isFoxxStoreDisabled() const;",
          "41:   bool canAccessHardenedApi() const;",
          "43:  private:",
          "44:   bool _enableFoxxApi;",
          "45:   bool _enableFoxxStore;",
          "46:   bool _hardenedRestApi;",
          "47: };",
          "49: }  // namespace arangodb",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   bool foxxAllowInstallFromRemote() const;",
          "48:   bool _foxxAllowInstallFromRemote;",
          "",
          "---------------"
        ],
        "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp": [
          "File: arangod/V8Server/v8-actions.cpp -> arangod/V8Server/v8-actions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1911:   TRI_V8_TRY_CATCH_END",
          "1912: }",
          "1914: static void JS_RunInRestrictedContext(",
          "1915:     v8::FunctionCallbackInfo<v8::Value> const& args) {",
          "1916:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1914: static void JS_FoxxAllowInstallFromRemote(",
          "1915:     v8::FunctionCallbackInfo<v8::Value> const& args) {",
          "1916:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
          "1917:   v8::HandleScope scope(isolate);",
          "1919:   TRI_GET_GLOBALS();",
          "1920:   ServerSecurityFeature& security =",
          "1921:       v8g->_server.getFeature<ServerSecurityFeature>();",
          "1922:   TRI_V8_RETURN_BOOL(security.foxxAllowInstallFromRemote());",
          "1924:   TRI_V8_TRY_CATCH_END",
          "1925: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1998:   TRI_AddGlobalFunctionVocbase(",
          "1999:       isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"),",
          "2000:       JS_IsFoxxStoreDisabled, true);",
          "2001:   TRI_AddGlobalFunctionVocbase(",
          "2002:       isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"),",
          "2003:       JS_RunInRestrictedContext, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2014:   TRI_AddGlobalFunctionVocbase(",
          "2015:       isolate,",
          "2016:       TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"),",
          "2017:       JS_FoxxAllowInstallFromRemote, true);",
          "",
          "---------------"
        ],
        "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf": [
          "File: etc/testing/arangod-common.conf -> etc/testing/arangod-common.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: force-sync-properties = false",
          "10: extended-names-databases = true",
          "12: [javascript]",
          "13: allow-admin-execute = true",
          "14: startup-directory = @TOP_DIR@/js",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: [foxx]",
          "13: allow-install-from-remote = true",
          "",
          "---------------"
        ],
        "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js": [
          "File: js/actions/_admin/foxx/app.js -> js/actions/_admin/foxx/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     return {source: `${baseUrl}${splitted[1]}/archive/${splitted[2] || 'master'}.zip`};",
          "84:   }",
          "85:   if (/^https?:/i.test(appInfo)) {",
          "86:     return {source: appInfo};",
          "87:   }",
          "88:   if (/^uploads[/\\\\]tmp-/.test(appInfo)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     FoxxManager.validateInstallUrl(appInfo);",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js": [
          "File: js/apps/system/_admin/aardvark/APP/aardvark.js -> js/apps/system/_admin/aardvark/APP/aardvark.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:       statisticsInAllDatabases: internal.enabledStatisticsInAllDatabases(),",
          "91:       foxxStoreEnabled: !internal.isFoxxStoreDisabled(),",
          "92:       foxxApiEnabled: !internal.isFoxxApiDisabled(),",
          "93:       clusterApiJwtPolicy: internal.clusterApiJwtPolicy(),",
          "94:       minReplicationFactor: internal.minReplicationFactor,",
          "95:       maxReplicationFactor: internal.maxReplicationFactor,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:       foxxAllowInstallFromRemote: internal.foxxAllowInstallFromRemote(),",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js -> js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:       if (!frontendConfig.foxxStoreEnabled) {",
          "582:         delete menus.Store;",
          "583:       }",
          "585:       menus[activeKey].active = true;",
          "586:       if (disabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:       if (!frontendConfig.foxxAllowInstallFromRemote) {",
          "586:         delete menus.Remote;",
          "587:       }",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js -> js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1135:           this.navigate('#dashboard', { trigger: true });",
          "1136:           return;",
          "1137:         }",
          "1138:         window.modalView.clearValidators();",
          "1139:         if (this.serviceUrlView) {",
          "1140:           this.serviceUrlView.remove();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1138:         if (!frontendConfig.foxxAllowInstallFromRemote) {",
          "1139:           this.navigate('#services/install/upload', { trigger: true });",
          "1140:           return;",
          "1141:         }",
          "",
          "---------------"
        ],
        "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js": [
          "File: js/server/bootstrap/modules/internal.js -> js/server/bootstrap/modules/internal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     exports.isFoxxApiDisabled = global.SYS_IS_FOXX_API_DISABLED;",
          "186:     delete global.SYS_IS_FOXX_API_DISABLED;",
          "187:   }",
          "190:     exports.isFoxxStoreDisabled = global.SYS_IS_FOXX_STORE_DISABLED;",
          "191:     delete global.SYS_IS_FOXX_STORE_DISABLED;",
          "192:   }",
          "194:   if (global.SYS_CLUSTER_API_JWT_POLICY) {",
          "195:     exports.clusterApiJwtPolicy = global.SYS_CLUSTER_API_JWT_POLICY;",
          "",
          "[Removed Lines]",
          "184:   if (global.SYS_IS_FOXX_API_DISABLED) {",
          "189:   if (global.SYS_IS_FOXX_STORE_DISABLED) {",
          "",
          "[Added Lines]",
          "184:   if (typeof global.SYS_IS_FOXX_API_DISABLED !== 'undefined') {",
          "189:   if (typeof global.SYS_IS_FOXX_STORE_DISABLED !== 'undefined') {",
          "194:   if (typeof global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE !== 'undefined') {",
          "195:     exports.foxxAllowInstallFromRemote = global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
          "196:     delete global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
          "197:   }",
          "",
          "---------------"
        ],
        "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js": [
          "File: js/server/modules/@arangodb/foxx/manager.js -> js/server/modules/@arangodb/foxx/manager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   return global.ArangoServerState.isFoxxmaster();",
          "79: }",
          "83: function selfHealAll (skipReloadRouting) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: function validateInstallUrl (url) {",
          "82:   if (!internal.foxxAllowInstallFromRemote()) {",
          "84:     let baseUrl = require('process').env.FOXX_BASE_URL;",
          "85:     let invalid = false;",
          "86:     if (baseUrl) {",
          "87:       if (!url.startsWith(baseUrl)) {",
          "89:         invalid = true;",
          "90:       }",
          "91:     } else {",
          "92:       const checkRegex = /^https?:\\/\\/([^:\\.]+:[^@\\.]*@)?(www\\.)?github\\.com\\//i;",
          "93:       invalid = !checkRegex.test(url);",
          "94:     }",
          "96:     if (invalid) {",
          "97:       throw new ArangoError({",
          "98:         errorNum: errors.ERROR_FORBIDDEN.code,",
          "99:         errorMessage: dd`",
          "100:           ${errors.ERROR_FORBIDDEN.message}",
          "101:           Installing apps from remote URLs is disabled",
          "102:         `",
          "103:       });",
          "104:     }",
          "105:   }",
          "106: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "562:       _buildServiceBundleFromScript(tempServicePath, tempBundlePath, serviceInfo);",
          "563:     } else if (/^https?:/i.test(serviceInfo)) {",
          "565:       const tempFile = downloadServiceBundleFromRemote(serviceInfo);",
          "566:       try {",
          "567:         _buildServiceFromFile(tempServicePath, tempBundlePath, tempFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:       validateInstallUrl(serviceInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1112: exports._createServiceBundle = createServiceBundle;",
          "1113: exports._resetCache = () => GLOBAL_SERVICE_MAP.clear();",
          "1114: exports._mountPoints = getMountPoints;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144: exports.validateInstallUrl = validateInstallUrl;",
          "",
          "---------------"
        ],
        "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js": [
          "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: if (getOptions === true) {",
          "28:   return {",
          "29:     'foxx.allow-install-from-remote': 'false',",
          "30:   };",
          "31: }",
          "32: const jsunity = require('jsunity');",
          "33: const errors = require('@arangodb').errors;",
          "34: const db = require('internal').db;",
          "35: const FoxxManager = require('@arangodb/foxx/manager');",
          "37: function testSuite() {",
          "38:   const mount = \"/test123\";",
          "40:   return {",
          "41:     testInstallViaAardvarkOk: function() {",
          "42:       const urls = [",
          "43:         \"http://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "44:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "45:         \"http://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "46:         \"https://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "47:       ];",
          "48:       urls.forEach((url) => {",
          "49:         try {",
          "50:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "51:           assertFalse(res.error, url);",
          "52:         } finally {",
          "53:           try {",
          "54:             FoxxManager.uninstall(mount);",
          "55:           } catch (err) {}",
          "56:         }",
          "57:       });",
          "58:     },",
          "60:     testInstallViaAardvarkFail: function() {",
          "61:       const urls = [",
          "62:         \"http://some.other.domain/foo/bar\",",
          "63:         \"https://some.other.domain/foo/bar\",",
          "64:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "65:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "66:         \"https://github.com.evil/foo/bar\",",
          "67:       ];",
          "68:       urls.forEach((url) => {",
          "69:         try {",
          "70:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "71:           assertTrue(res.error, url);",
          "72:           assertEqual(403, res.code);",
          "73:         } finally {",
          "74:           try {",
          "75:             FoxxManager.uninstall(mount);",
          "76:           } catch (err) {}",
          "77:         }",
          "78:       });",
          "79:     },",
          "81:     testInstallViaFoxxAPIOld: function() {",
          "83:       const urls = [",
          "84:         \"http://some.other.domain/foo/bar\",",
          "85:         \"https://some.other.domain/foo/bar\",",
          "86:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "87:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "88:         \"https://github.com.evil/foo/bar\",",
          "89:       ];",
          "90:       urls.forEach((url) => {",
          "91:         try {",
          "92:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
          "93:           assertTrue(res.error);",
          "94:           assertEqual(403, res.code);",
          "95:           assertEqual(11, res.errorNum);",
          "96:         } finally {",
          "97:           try {",
          "98:             FoxxManager.uninstall(mount);",
          "99:           } catch (err) {}",
          "100:         }",
          "101:       });",
          "102:     },",
          "104:     testInstallViaFoxxAPINew: function() {",
          "106:       const urls = [",
          "107:         \"http://some.other.domain/foo/bar\",",
          "108:         \"https://some.other.domain/foo/bar\",",
          "109:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "110:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "111:         \"https://github.com.evil/foo/bar\",",
          "112:       ];",
          "113:       urls.forEach((url) => {",
          "114:         try {",
          "115:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
          "116:           assertTrue(res.error);",
          "117:           assertEqual(403, res.code);",
          "118:           assertEqual(11, res.errorNum);",
          "119:         } finally {",
          "120:           try {",
          "121:             FoxxManager.uninstall(mount);",
          "122:           } catch (err) {}",
          "123:         }",
          "124:       });",
          "125:     },",
          "127:   };",
          "128: }",
          "130: jsunity.run(testSuite);",
          "131: return jsunity.done();",
          "",
          "---------------"
        ],
        "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js": [
          "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: if (getOptions === true) {",
          "28:   return {",
          "29:     'foxx.allow-install-from-remote': 'true',",
          "30:   };",
          "31: }",
          "32: const jsunity = require('jsunity');",
          "33: const errors = require('@arangodb').errors;",
          "34: const db = require('internal').db;",
          "35: const FoxxManager = require('@arangodb/foxx/manager');",
          "37: function testSuite() {",
          "38:   const mount = \"/test123\";",
          "40:   return {",
          "41:     testInstallViaAardvark: function() {",
          "42:       const urls = [",
          "43:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "44:       ];",
          "45:       urls.forEach((url) => {",
          "46:         try {",
          "47:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "48:           assertFalse(res.error);",
          "49:           assertEqual(\"itzpapalotl\", res.name);",
          "50:         } finally {",
          "51:           try {",
          "52:             FoxxManager.uninstall(mount);",
          "53:           } catch (err) {}",
          "54:         }",
          "55:       });",
          "56:     },",
          "58:     testInstallViaFoxxAPIOld: function() {",
          "59:       const urls = [",
          "60:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "61:       ];",
          "62:       urls.forEach((url) => {",
          "63:         try {",
          "64:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
          "65:           assertFalse(res.error);",
          "66:           assertEqual(\"itzpapalotl\", res.name);",
          "67:         } finally {",
          "68:           try {",
          "69:             FoxxManager.uninstall(mount);",
          "70:           } catch (err) {}",
          "71:         }",
          "72:       });",
          "73:     },",
          "75:     testInstallViaFoxxAPINew: function() {",
          "76:       const urls = [",
          "77:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "78:       ];",
          "79:       urls.forEach((url) => {",
          "80:         try {",
          "81:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
          "82:           assertFalse(res.error);",
          "83:           assertEqual(\"itzpapalotl\", res.name);",
          "84:         } finally {",
          "85:           try {",
          "86:             FoxxManager.uninstall(mount);",
          "87:           } catch (err) {}",
          "88:         }",
          "89:       });",
          "90:     },",
          "92:   };",
          "93: }",
          "95: jsunity.run(testSuite);",
          "96: return jsunity.done();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d93fc3974c7fe50f2673feb025af061f3298c6a1",
      "candidate_info": {
        "commit_hash": "d93fc3974c7fe50f2673feb025af061f3298c6a1",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/d93fc3974c7fe50f2673feb025af061f3298c6a1",
        "files": [
          "CHANGELOG",
          "arangod/GeneralServer/ServerSecurityFeature.cpp",
          "arangod/GeneralServer/ServerSecurityFeature.h",
          "arangod/V8Server/v8-actions.cpp",
          "etc/testing/arangod-common.conf",
          "js/actions/_admin/foxx/app.js",
          "js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "js/server/bootstrap/modules/internal.js",
          "js/server/modules/@arangodb/foxx/manager.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
        ],
        "message": "[APM-78]: Disable installation from remote URL (#15344)\n\n* [APM-78]: Disable installation from remote URL\n\n* Update CHANGELOG\n\nCo-authored-by: Vadim <vadim@arangodb.com>",
        "before_after_code_files": [
          "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
          "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
          "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
          "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
          "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
          "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
          "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
            "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
            "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
            "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
            "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
            "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
            "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
            "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
          ],
          "candidate": [
            "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp",
            "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h",
            "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp",
            "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf",
            "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js",
            "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
            "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
            "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
            "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
            "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js"
          ]
        }
      },
      "candidate_diff": {
        "arangod/GeneralServer/ServerSecurityFeature.cpp||arangod/GeneralServer/ServerSecurityFeature.cpp": [
          "File: arangod/GeneralServer/ServerSecurityFeature.cpp -> arangod/GeneralServer/ServerSecurityFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     : ApplicationFeature(server, \"ServerSecurity\"),",
          "37:       _enableFoxxApi(true),",
          "38:       _enableFoxxStore(true),",
          "40:   setOptional(false);",
          "41:   startsAfter<application_features::GreetingsFeaturePhase>();",
          "42: }",
          "",
          "[Removed Lines]",
          "39:       _hardenedRestApi(false) {",
          "",
          "[Added Lines]",
          "39:       _hardenedRestApi(false),",
          "40:       _foxxAllowInstallFromRemote(true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:                      arangodb::options::Flags::OnCoordinator,",
          "65:                      arangodb::options::Flags::OnSingle))",
          "66:                      .setIntroducedIn(30500);",
          "68: }",
          "70: bool ServerSecurityFeature::isFoxxApiDisabled() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   options->addOption(\"--foxx.allow-install-from-remote\", \"allow installing Foxx apps from remote URLs other than Github\",",
          "71:                      new BooleanParameter(&_foxxAllowInstallFromRemote),",
          "72:                      arangodb::options::makeFlags(",
          "73:                      arangodb::options::Flags::DefaultNoComponents,",
          "74:                      arangodb::options::Flags::OnCoordinator,",
          "75:                      arangodb::options::Flags::OnSingle))",
          "76:                      .setIntroducedIn(30805);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   }",
          "93:   return allowAccess;",
          "94: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: bool ServerSecurityFeature::foxxAllowInstallFromRemote() const {",
          "106:   return _foxxAllowInstallFromRemote;",
          "107: }",
          "",
          "---------------"
        ],
        "arangod/GeneralServer/ServerSecurityFeature.h||arangod/GeneralServer/ServerSecurityFeature.h": [
          "File: arangod/GeneralServer/ServerSecurityFeature.h -> arangod/GeneralServer/ServerSecurityFeature.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   bool isFoxxApiDisabled() const;",
          "39:   bool isFoxxStoreDisabled() const;",
          "40:   bool canAccessHardenedApi() const;",
          "42:  private:",
          "43:   bool _enableFoxxApi;",
          "44:   bool _enableFoxxStore;",
          "45:   bool _hardenedRestApi;",
          "46: };",
          "48: }  // namespace arangodb",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   bool foxxAllowInstallFromRemote() const;",
          "47:   bool _foxxAllowInstallFromRemote;",
          "",
          "---------------"
        ],
        "arangod/V8Server/v8-actions.cpp||arangod/V8Server/v8-actions.cpp": [
          "File: arangod/V8Server/v8-actions.cpp -> arangod/V8Server/v8-actions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1787:   TRI_V8_TRY_CATCH_END",
          "1788: }",
          "1790: static void JS_RunInRestrictedContext(v8::FunctionCallbackInfo<v8::Value> const& args) {",
          "1791:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
          "1792:   v8::HandleScope scope(isolate);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790: static void JS_FoxxAllowInstallFromRemote(v8::FunctionCallbackInfo<v8::Value> const& args) {",
          "1791:   TRI_V8_TRY_CATCH_BEGIN(isolate)",
          "1792:   v8::HandleScope scope(isolate);",
          "1794:   TRI_GET_GLOBALS();",
          "1795:   ServerSecurityFeature& security = v8g->_server.getFeature<ServerSecurityFeature>();",
          "1796:   TRI_V8_RETURN_BOOL(security.foxxAllowInstallFromRemote());",
          "1798:   TRI_V8_TRY_CATCH_END",
          "1799: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1864:                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_API_DISABLED\"), JS_IsFoxxApiDisabled, true);",
          "1865:   TRI_AddGlobalFunctionVocbase(isolate,",
          "1866:                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"), JS_IsFoxxStoreDisabled, true);",
          "1867:   TRI_AddGlobalFunctionVocbase(isolate,",
          "1868:                                TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), JS_RunInRestrictedContext, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1878:   TRI_AddGlobalFunctionVocbase(isolate,",
          "1879:                                TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), JS_FoxxAllowInstallFromRemote, true);",
          "",
          "---------------"
        ],
        "etc/testing/arangod-common.conf||etc/testing/arangod-common.conf": [
          "File: etc/testing/arangod-common.conf -> etc/testing/arangod-common.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: [database]",
          "9: force-sync-properties = false",
          "11: [javascript]",
          "12: allow-admin-execute = true",
          "13: startup-directory = @TOP_DIR@/js",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: [foxx]",
          "12: allow-install-from-remote = true",
          "",
          "---------------"
        ],
        "js/actions/_admin/foxx/app.js||js/actions/_admin/foxx/app.js": [
          "File: js/actions/_admin/foxx/app.js -> js/actions/_admin/foxx/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     return {source: `${baseUrl}${splitted[1]}/archive/${splitted[2] || 'master'}.zip`};",
          "84:   }",
          "85:   if (/^https?:/i.test(appInfo)) {",
          "86:     return {source: appInfo};",
          "87:   }",
          "88:   if (/^uploads[/\\\\]tmp-/.test(appInfo)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     FoxxManager.validateInstallUrl(appInfo);",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js": [
          "File: js/apps/system/_admin/aardvark/APP/aardvark.js -> js/apps/system/_admin/aardvark/APP/aardvark.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:       statisticsInAllDatabases: internal.enabledStatisticsInAllDatabases(),",
          "94:       foxxStoreEnabled: !internal.isFoxxStoreDisabled(),",
          "95:       foxxApiEnabled: !internal.isFoxxApiDisabled(),",
          "96:       clusterApiJwtPolicy: internal.clusterApiJwtPolicy(),",
          "97:       minReplicationFactor: internal.minReplicationFactor,",
          "98:       maxReplicationFactor: internal.maxReplicationFactor,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:       foxxAllowInstallFromRemote: internal.foxxAllowInstallFromRemote(),",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js -> js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:       if (!frontendConfig.foxxStoreEnabled) {",
          "521:         delete menus.Store;",
          "522:       }",
          "524:       menus[activeKey].active = true;",
          "525:       if (disabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:       if (!frontendConfig.foxxAllowInstallFromRemote) {",
          "525:         delete menus.Remote;",
          "526:       }",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js -> js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:         this.navigate('#dashboard', {trigger: true});",
          "1189:         return;",
          "1190:       }",
          "1191:       window.modalView.clearValidators();",
          "1192:       if (this.serviceUrlView) {",
          "1193:         this.serviceUrlView.remove();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191:       if (!frontendConfig.foxxAllowInstallFromRemote) {",
          "1192:         this.navigate('#services/install/upload', { trigger: true });",
          "1193:         return;",
          "1194:       }",
          "",
          "---------------"
        ],
        "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js": [
          "File: js/server/bootstrap/modules/internal.js -> js/server/bootstrap/modules/internal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     exports.isFoxxApiDisabled = global.SYS_IS_FOXX_API_DISABLED;",
          "187:     delete global.SYS_IS_FOXX_API_DISABLED;",
          "188:   }",
          "191:     exports.isFoxxStoreDisabled = global.SYS_IS_FOXX_STORE_DISABLED;",
          "192:     delete global.SYS_IS_FOXX_STORE_DISABLED;",
          "193:   }",
          "195:   if (global.SYS_CLUSTER_API_JWT_POLICY) {",
          "196:     exports.clusterApiJwtPolicy = global.SYS_CLUSTER_API_JWT_POLICY;",
          "",
          "[Removed Lines]",
          "185:   if (global.SYS_IS_FOXX_API_DISABLED) {",
          "190:   if (global.SYS_IS_FOXX_STORE_DISABLED) {",
          "",
          "[Added Lines]",
          "185:   if (typeof global.SYS_IS_FOXX_API_DISABLED !== 'undefined') {",
          "190:   if (typeof global.SYS_IS_FOXX_STORE_DISABLED !== 'undefined') {",
          "195:   if (typeof global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE !== 'undefined') {",
          "196:     exports.foxxAllowInstallFromRemote = global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
          "197:     delete global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;",
          "198:   }",
          "",
          "---------------"
        ],
        "js/server/modules/@arangodb/foxx/manager.js||js/server/modules/@arangodb/foxx/manager.js": [
          "File: js/server/modules/@arangodb/foxx/manager.js -> js/server/modules/@arangodb/foxx/manager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   return global.ArangoServerState.isFoxxmaster();",
          "79: }",
          "83: function selfHealAll (skipReloadRouting) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: function validateInstallUrl (url) {",
          "82:   if (!internal.foxxAllowInstallFromRemote()) {",
          "84:     let baseUrl = require('process').env.FOXX_BASE_URL;",
          "85:     let invalid = false;",
          "86:     if (baseUrl) {",
          "87:       if (!url.startsWith(baseUrl)) {",
          "89:         invalid = true;",
          "90:       }",
          "91:     } else {",
          "92:       const checkRegex = /^https?:\\/\\/([^:\\.]+:[^@\\.]*@)?(www\\.)?github\\.com\\//i;",
          "93:       invalid = !checkRegex.test(url);",
          "94:     }",
          "96:     if (invalid) {",
          "97:       throw new ArangoError({",
          "98:         errorNum: errors.ERROR_FORBIDDEN.code,",
          "99:         errorMessage: dd`",
          "100:           ${errors.ERROR_FORBIDDEN.message}",
          "101:           Installing apps from remote URLs is disabled",
          "102:         `",
          "103:       });",
          "104:     }",
          "105:   }",
          "106: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "562:       _buildServiceBundleFromScript(tempServicePath, tempBundlePath, serviceInfo);",
          "563:     } else if (/^https?:/i.test(serviceInfo)) {",
          "565:       const tempFile = downloadServiceBundleFromRemote(serviceInfo);",
          "566:       try {",
          "567:         _buildServiceFromFile(tempServicePath, tempBundlePath, tempFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:       validateInstallUrl(serviceInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1112: exports._createServiceBundle = createServiceBundle;",
          "1113: exports._resetCache = () => GLOBAL_SERVICE_MAP.clear();",
          "1114: exports._mountPoints = getMountPoints;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144: exports.validateInstallUrl = validateInstallUrl;",
          "",
          "---------------"
        ],
        "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js": [
          "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: if (getOptions === true) {",
          "28:   return {",
          "29:     'foxx.allow-install-from-remote': 'false',",
          "30:   };",
          "31: }",
          "32: const jsunity = require('jsunity');",
          "33: const errors = require('@arangodb').errors;",
          "34: const db = require('internal').db;",
          "35: const FoxxManager = require('@arangodb/foxx/manager');",
          "37: function testSuite() {",
          "38:   const mount = \"/test123\";",
          "40:   return {",
          "41:     testInstallViaAardvarkOk: function() {",
          "42:       const urls = [",
          "43:         \"http://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "44:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "45:         \"http://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "46:         \"https://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "47:       ];",
          "48:       urls.forEach((url) => {",
          "49:         try {",
          "50:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "51:           assertFalse(res.error, url);",
          "52:         } finally {",
          "53:           try {",
          "54:             FoxxManager.uninstall(mount);",
          "55:           } catch (err) {}",
          "56:         }",
          "57:       });",
          "58:     },",
          "60:     testInstallViaAardvarkFail: function() {",
          "61:       const urls = [",
          "62:         \"http://some.other.domain/foo/bar\",",
          "63:         \"https://some.other.domain/foo/bar\",",
          "64:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "65:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "66:         \"https://github.com.evil/foo/bar\",",
          "67:       ];",
          "68:       urls.forEach((url) => {",
          "69:         try {",
          "70:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "71:           assertTrue(res.error, url);",
          "72:           assertEqual(403, res.code);",
          "73:         } finally {",
          "74:           try {",
          "75:             FoxxManager.uninstall(mount);",
          "76:           } catch (err) {}",
          "77:         }",
          "78:       });",
          "79:     },",
          "81:     testInstallViaFoxxAPIOld: function() {",
          "83:       const urls = [",
          "84:         \"http://some.other.domain/foo/bar\",",
          "85:         \"https://some.other.domain/foo/bar\",",
          "86:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "87:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "88:         \"https://github.com.evil/foo/bar\",",
          "89:       ];",
          "90:       urls.forEach((url) => {",
          "91:         try {",
          "92:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
          "93:           assertTrue(res.error);",
          "94:           assertEqual(403, res.code);",
          "95:           assertEqual(11, res.errorNum);",
          "96:         } finally {",
          "97:           try {",
          "98:             FoxxManager.uninstall(mount);",
          "99:           } catch (err) {}",
          "100:         }",
          "101:       });",
          "102:     },",
          "104:     testInstallViaFoxxAPINew: function() {",
          "106:       const urls = [",
          "107:         \"http://some.other.domain/foo/bar\",",
          "108:         \"https://some.other.domain/foo/bar\",",
          "109:         \"https://github.com.some.deceptive.site/foo/bar\",",
          "110:         \"https://some.deceptive.github.com.site/foo/bar\",",
          "111:         \"https://github.com.evil/foo/bar\",",
          "112:       ];",
          "113:       urls.forEach((url) => {",
          "114:         try {",
          "115:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
          "116:           assertTrue(res.error);",
          "117:           assertEqual(403, res.code);",
          "118:           assertEqual(11, res.errorNum);",
          "119:         } finally {",
          "120:           try {",
          "121:             FoxxManager.uninstall(mount);",
          "122:           } catch (err) {}",
          "123:         }",
          "124:       });",
          "125:     },",
          "127:   };",
          "128: }",
          "130: jsunity.run(testSuite);",
          "131: return jsunity.done();",
          "",
          "---------------"
        ],
        "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js||tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js": [
          "File: tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js -> tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: if (getOptions === true) {",
          "28:   return {",
          "29:     'foxx.allow-install-from-remote': 'true',",
          "30:   };",
          "31: }",
          "32: const jsunity = require('jsunity');",
          "33: const errors = require('@arangodb').errors;",
          "34: const db = require('internal').db;",
          "35: const FoxxManager = require('@arangodb/foxx/manager');",
          "37: function testSuite() {",
          "38:   const mount = \"/test123\";",
          "40:   return {",
          "41:     testInstallViaAardvark: function() {",
          "42:       const urls = [",
          "43:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "44:       ];",
          "45:       urls.forEach((url) => {",
          "46:         try {",
          "47:           let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });",
          "48:           assertFalse(res.error);",
          "49:           assertEqual(\"itzpapalotl\", res.name);",
          "50:         } finally {",
          "51:           try {",
          "52:             FoxxManager.uninstall(mount);",
          "53:           } catch (err) {}",
          "54:         }",
          "55:       });",
          "56:     },",
          "58:     testInstallViaFoxxAPIOld: function() {",
          "59:       const urls = [",
          "60:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "61:       ];",
          "62:       urls.forEach((url) => {",
          "63:         try {",
          "64:           let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });",
          "65:           assertFalse(res.error);",
          "66:           assertEqual(\"itzpapalotl\", res.name);",
          "67:         } finally {",
          "68:           try {",
          "69:             FoxxManager.uninstall(mount);",
          "70:           } catch (err) {}",
          "71:         }",
          "72:       });",
          "73:     },",
          "75:     testInstallViaFoxxAPINew: function() {",
          "76:       const urls = [",
          "77:         \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",",
          "78:       ];",
          "79:       urls.forEach((url) => {",
          "80:         try {",
          "81:           let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });",
          "82:           assertFalse(res.error);",
          "83:           assertEqual(\"itzpapalotl\", res.name);",
          "84:         } finally {",
          "85:           try {",
          "86:             FoxxManager.uninstall(mount);",
          "87:           } catch (err) {}",
          "88:         }",
          "89:       });",
          "90:     },",
          "92:   };",
          "93: }",
          "95: jsunity.run(testSuite);",
          "96: return jsunity.done();",
          "",
          "---------------"
        ]
      }
    }
  ]
}