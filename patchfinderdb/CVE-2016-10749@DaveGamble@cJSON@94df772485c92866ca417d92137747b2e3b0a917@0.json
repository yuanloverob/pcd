{
  "cve_id": "CVE-2016-10749",
  "cve_desc": "parse_string in cJSON.c in cJSON before 2016-10-02 has a buffer over-read, as demonstrated by a string that begins with a \" character and ends with a \\ character.",
  "repo": "DaveGamble/cJSON",
  "patch_hash": "94df772485c92866ca417d92137747b2e3b0a917",
  "patch_info": {
    "commit_hash": "94df772485c92866ca417d92137747b2e3b0a917",
    "repo": "DaveGamble/cJSON",
    "commit_url": "https://github.com/DaveGamble/cJSON/commit/94df772485c92866ca417d92137747b2e3b0a917",
    "files": [
      "cJSON.c"
    ],
    "message": "fix buffer overflow (#30)",
    "before_after_code_files": [
      "cJSON.c||cJSON.c"
    ]
  },
  "patch_diff": {
    "cJSON.c||cJSON.c": [
      "File: cJSON.c -> cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "194: {",
      "195:  const char *ptr=str+1,*end_ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;",
      "201:  if (!out) return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:  while (*end_ptr!='\\\"' && *end_ptr && ++len)",
      "199:  {",
      "200:      if (*end_ptr++ == '\\\\')",
      "201:      {",
      "202:   if (*end_ptr == '\\0')",
      "203:   {",
      "205:       return 0;",
      "206:   }",
      "208:      }",
      "209:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8656386c4f4a12f1cf3d6b26158407fd05e65029",
      "candidate_info": {
        "commit_hash": "8656386c4f4a12f1cf3d6b26158407fd05e65029",
        "repo": "DaveGamble/cJSON",
        "commit_url": "https://github.com/DaveGamble/cJSON/commit/8656386c4f4a12f1cf3d6b26158407fd05e65029",
        "files": [
          "cJSON.c"
        ],
        "message": "parse_string: goto fail error handling\n\nMakes the control flow easier to reason about and fixes a few potential\nmemory leaks.",
        "before_after_code_files": [
          "cJSON.c||cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cJSON.c||cJSON.c"
          ],
          "candidate": [
            "cJSON.c||cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "cJSON.c||cJSON.c": [
          "File: cJSON.c -> cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:     if (*str != '\\\"')",
          "522:     {",
          "525:     }",
          "527:     while ((*end_ptr != '\\\"') && *end_ptr)",
          "",
          "[Removed Lines]",
          "524:         return NULL;",
          "",
          "[Added Lines]",
          "524:         goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:             if (*end_ptr == '\\0')",
          "532:             {",
          "535:             }",
          "537:             end_ptr++;",
          "",
          "[Removed Lines]",
          "534:                 return NULL;",
          "",
          "[Added Lines]",
          "534:                 goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543:     out = (unsigned char*)cJSON_malloc(len + 1);",
          "544:     if (!out)",
          "545:     {",
          "547:     }",
          "549:     item->type = cJSON_String;",
          "",
          "[Removed Lines]",
          "546:         return NULL;",
          "",
          "[Added Lines]",
          "546:         goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "591:                     {",
          "595:                     }",
          "597:                     if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))",
          "598:                     {",
          "601:                     }",
          "",
          "[Removed Lines]",
          "594:                         return NULL;",
          "600:                         return NULL;",
          "",
          "[Added Lines]",
          "594:                         goto fail;",
          "600:                         goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "607:                         {",
          "611:                         }",
          "612:                         if ((ptr[1] != '\\\\') || (ptr[2] != 'u'))",
          "613:                         {",
          "617:                         }",
          "618:                         uc2 = parse_hex4(ptr + 3);",
          "",
          "[Removed Lines]",
          "610:                             return NULL;",
          "616:                             return NULL;",
          "",
          "[Added Lines]",
          "610:                             goto fail;",
          "616:                             goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "621:                         {",
          "625:                         }",
          "627:                         uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));",
          "",
          "[Removed Lines]",
          "624:                             return NULL;",
          "",
          "[Added Lines]",
          "624:                             goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "668:                             break;",
          "669:                         default:",
          "672:                     }",
          "673:                     ptr2 += len;",
          "674:                     break;",
          "675:                 default:",
          "678:             }",
          "679:             ptr++;",
          "680:         }",
          "",
          "[Removed Lines]",
          "671:                             return NULL;",
          "677:                     return NULL;",
          "",
          "[Added Lines]",
          "671:                             goto fail;",
          "677:                     goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "686:     }",
          "688:     return ptr;",
          "689: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690: fail:",
          "691:     if (out != NULL)",
          "692:     {",
          "693:         cJSON_free(out);",
          "694:     }",
          "696:     return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c88d0458880c665ada98c3e60cc1518ce5a0a02f",
      "candidate_info": {
        "commit_hash": "c88d0458880c665ada98c3e60cc1518ce5a0a02f",
        "repo": "DaveGamble/cJSON",
        "commit_url": "https://github.com/DaveGamble/cJSON/commit/c88d0458880c665ada98c3e60cc1518ce5a0a02f",
        "files": [
          "cJSON.c"
        ],
        "message": "reformatting: parse_string",
        "before_after_code_files": [
          "cJSON.c||cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cJSON.c||cJSON.c"
          ],
          "candidate": [
            "cJSON.c||cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "cJSON.c||cJSON.c": [
          "File: cJSON.c -> cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443: };",
          "447: {",
          "516: }",
          "",
          "[Removed Lines]",
          "446: static const char *parse_string(cJSON *item,const char *str,const char **ep)",
          "448:  const char *ptr=str+1,*end_ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;",
          "451:  while (*end_ptr!='\\\"' && *end_ptr && ++len)",
          "452:  {",
          "453:      if (*end_ptr++ == '\\\\')",
          "454:      {",
          "455:   if (*end_ptr == '\\0')",
          "456:   {",
          "458:       return 0;",
          "459:   }",
          "461:      }",
          "462:  }",
          "465:  if (!out) return 0;",
          "467:  item->type=cJSON_String;",
          "469:  ptr=str+1;ptr2=out;",
          "470:  while (ptr < end_ptr)",
          "471:  {",
          "472:   if (*ptr!='\\\\') *ptr2++=*ptr++;",
          "473:   else",
          "474:   {",
          "475:    ptr++;",
          "476:    switch (*ptr)",
          "477:    {",
          "478:     case 'b': *ptr2++='\\b'; break;",
          "479:     case 'f': *ptr2++='\\f'; break;",
          "480:     case 'n': *ptr2++='\\n'; break;",
          "481:     case 'r': *ptr2++='\\r'; break;",
          "482:     case 't': *ptr2++='\\t'; break;",
          "490:      {",
          "493:       uc2=parse_hex4(ptr+3);ptr+=6;",
          "495:       uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));",
          "496:      }",
          "498:      len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;",
          "500:      switch (len) {",
          "501:       case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;",
          "502:       case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;",
          "503:       case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;",
          "504:       case 1: *--ptr2 =(uc | firstByteMark[len]);",
          "505:      }",
          "506:      ptr2+=len;",
          "507:      break;",
          "508:     default:  *ptr2++=*ptr; break;",
          "509:    }",
          "510:    ptr++;",
          "511:   }",
          "512:  }",
          "514:  if (*ptr=='\\\"') ptr++;",
          "515:  return ptr;",
          "",
          "[Added Lines]",
          "446: static const char *parse_string(cJSON *item, const char *str, const char **ep)",
          "448:     const char *ptr = str + 1;",
          "449:     const char *end_ptr =str + 1;",
          "450:     char *ptr2;",
          "451:     char *out;",
          "452:     int len = 0;",
          "453:     unsigned uc;",
          "454:     unsigned uc2;",
          "457:     if (*str != '\\\"')",
          "458:     {",
          "460:         return 0;",
          "461:     }",
          "463:     while ((*end_ptr != '\\\"') && *end_ptr && ++len)",
          "464:     {",
          "465:         if (*end_ptr++ == '\\\\')",
          "466:         {",
          "467:             if (*end_ptr == '\\0')",
          "468:             {",
          "470:                 return 0;",
          "471:             }",
          "473:             end_ptr++;",
          "474:         }",
          "475:     }",
          "478:     out = (char*)cJSON_malloc(len + 1);",
          "479:     if (!out)",
          "480:     {",
          "481:         return 0;",
          "482:     }",
          "484:     item->type = cJSON_String;",
          "486:     ptr = str + 1;",
          "487:     ptr2 = out;",
          "489:     while (ptr < end_ptr)",
          "490:     {",
          "491:         if (*ptr != '\\\\')",
          "492:         {",
          "494:         }",
          "496:         else",
          "497:         {",
          "498:             ptr++;",
          "499:             switch (*ptr)",
          "500:             {",
          "501:                 case 'b':",
          "503:                     break;",
          "504:                 case 'f':",
          "506:                     break;",
          "507:                 case 'n':",
          "509:                     break;",
          "510:                 case 'r':",
          "512:                     break;",
          "513:                 case 't':",
          "515:                     break;",
          "516:                 case 'u':",
          "519:                     ptr += 4;",
          "520:                     if (ptr >= end_ptr)",
          "521:                     {",
          "524:                         return 0;",
          "525:                     }",
          "527:                     if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))",
          "528:                     {",
          "530:                         return 0;",
          "531:                     }",
          "534:                     if ((uc >= 0xD800) && (uc<=0xDBFF))",
          "535:                     {",
          "536:                         if ((ptr + 6) > end_ptr)",
          "537:                         {",
          "540:                             return 0;",
          "541:                         }",
          "542:                         if ((ptr[1] != '\\\\') || (ptr[2] != 'u'))",
          "543:                         {",
          "546:                             return 0;",
          "547:                         }",
          "548:                         uc2 = parse_hex4(ptr + 3);",
          "550:                         if ((uc2 < 0xDC00) || (uc2 > 0xDFFF))",
          "551:                         {",
          "554:                             return 0;",
          "555:                         }",
          "557:                         uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));",
          "558:                     }",
          "563:                     len = 4;",
          "564:                     if (uc < 0x80)",
          "565:                     {",
          "567:                         len = 1;",
          "568:                     }",
          "569:                     else if (uc < 0x800)",
          "570:                     {",
          "572:                         len = 2;",
          "573:                     }",
          "574:                     else if (uc < 0x10000)",
          "575:                     {",
          "577:                         len = 3;",
          "578:                     }",
          "579:                     ptr2 += len;",
          "581:                     switch (len) {",
          "582:                         case 4:",
          "585:                             uc >>= 6;",
          "586:                         case 3:",
          "589:                             uc >>= 6;",
          "590:                         case 2:",
          "593:                             uc >>= 6;",
          "594:                         case 1:",
          "598:                     }",
          "599:                     ptr2 += len;",
          "600:                     break;",
          "601:                 default:",
          "603:                     break;",
          "604:             }",
          "605:             ptr++;",
          "606:         }",
          "607:     }",
          "609:     if (*ptr == '\\\"')",
          "610:     {",
          "611:         ptr++;",
          "612:     }",
          "614:     return ptr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ff796c2074b85bf374b33743317a59cb403eb0",
      "candidate_info": {
        "commit_hash": "a5ff796c2074b85bf374b33743317a59cb403eb0",
        "repo": "DaveGamble/cJSON",
        "commit_url": "https://github.com/DaveGamble/cJSON/commit/a5ff796c2074b85bf374b33743317a59cb403eb0",
        "files": [
          "cJSON.c",
          "cJSON_Utils.c"
        ],
        "message": "Replace 0 with more expressive NULL or '\\0'",
        "before_after_code_files": [
          "cJSON.c||cJSON.c",
          "cJSON_Utils.c||cJSON_Utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cJSON.c||cJSON.c"
          ],
          "candidate": [
            "cJSON.c||cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "cJSON.c||cJSON.c": [
          "File: cJSON.c -> cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     }",
          "67:     for(; tolower(*(const unsigned char *)s1) == tolower(*(const unsigned char *)s2); ++s1, ++s2)",
          "68:     {",
          "70:         {",
          "71:             return 0;",
          "72:         }",
          "",
          "[Removed Lines]",
          "69:         if (*s1 == 0)",
          "",
          "[Added Lines]",
          "69:         if (*s1 == '\\0')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     len = strlen(str) + 1;",
          "87:     if (!(copy = (char*)cJSON_malloc(len)))",
          "88:     {",
          "90:     }",
          "91:     memcpy(copy, str, len);",
          "",
          "[Removed Lines]",
          "89:         return 0;",
          "",
          "[Added Lines]",
          "89:         return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));",
          "114:     if (node)",
          "115:     {",
          "117:     }",
          "119:     return node;",
          "",
          "[Removed Lines]",
          "116:         memset(node, 0, sizeof(cJSON));",
          "",
          "[Added Lines]",
          "116:         memset(node, '\\0', sizeof(cJSON));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:     int newsize;",
          "249:     if (!p || !p->buffer)",
          "250:     {",
          "252:     }",
          "253:     needed += p->offset;",
          "254:     if (needed <= p->length)",
          "",
          "[Removed Lines]",
          "251:         return 0;",
          "",
          "[Added Lines]",
          "251:         return NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:     {",
          "263:         cJSON_free(p->buffer);",
          "264:         p->length = 0;",
          "268:     }",
          "269:     if (newbuffer)",
          "270:     {",
          "",
          "[Removed Lines]",
          "265:         p->buffer = 0;",
          "267:         return 0;",
          "",
          "[Added Lines]",
          "265:         p->buffer = NULL;",
          "267:         return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294: static char *print_number(const cJSON *item, printbuffer *p)",
          "295: {",
          "297:     double d = item->valuedouble;",
          "299:     if (d == 0)",
          "",
          "[Removed Lines]",
          "296:     char *str = 0;",
          "",
          "[Added Lines]",
          "296:     char *str = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "478:     if (*str != '\\\"')",
          "479:     {",
          "482:     }",
          "484:     while ((*end_ptr != '\\\"') && *end_ptr && ++len)",
          "",
          "[Removed Lines]",
          "481:         return 0;",
          "",
          "[Added Lines]",
          "481:         return NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "488:             if (*end_ptr == '\\0')",
          "489:             {",
          "492:             }",
          "494:             end_ptr++;",
          "",
          "[Removed Lines]",
          "491:                 return 0;",
          "",
          "[Added Lines]",
          "491:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "499:     out = (char*)cJSON_malloc(len + 1);",
          "500:     if (!out)",
          "501:     {",
          "503:     }",
          "505:     item->type = cJSON_String;",
          "",
          "[Removed Lines]",
          "502:         return 0;",
          "",
          "[Added Lines]",
          "502:         return NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "547:                     {",
          "551:                     }",
          "553:                     if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))",
          "554:                     {",
          "557:                     }",
          "",
          "[Removed Lines]",
          "550:                         return 0;",
          "556:                         return 0;",
          "",
          "[Added Lines]",
          "550:                         return NULL;",
          "556:                         return NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "563:                         {",
          "567:                         }",
          "568:                         if ((ptr[1] != '\\\\') || (ptr[2] != 'u'))",
          "569:                         {",
          "573:                         }",
          "574:                         uc2 = parse_hex4(ptr + 3);",
          "",
          "[Removed Lines]",
          "566:                             return 0;",
          "572:                             return 0;",
          "",
          "[Added Lines]",
          "566:                             return NULL;",
          "572:                             return NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "577:                         {",
          "581:                         }",
          "583:                         uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));",
          "",
          "[Removed Lines]",
          "580:                             return 0;",
          "",
          "[Added Lines]",
          "580:                             return NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "626:                     break;",
          "627:                 default:",
          "630:             }",
          "631:             ptr++;",
          "632:         }",
          "",
          "[Removed Lines]",
          "629:                     return 0;",
          "",
          "[Added Lines]",
          "629:                     return NULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "663:         }",
          "664:         if (!out)",
          "665:         {",
          "667:         }",
          "668:         strcpy(out, \"\\\"\\\"\");",
          "",
          "[Removed Lines]",
          "666:             return 0;",
          "",
          "[Added Lines]",
          "666:             return NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "693:         }",
          "694:         if (!out)",
          "695:         {",
          "697:         }",
          "699:         ptr2 = out;",
          "",
          "[Removed Lines]",
          "696:             return 0;",
          "",
          "[Added Lines]",
          "696:             return NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "730:     }",
          "731:     if (!out)",
          "732:     {",
          "734:     }",
          "736:     ptr2 = out;",
          "",
          "[Removed Lines]",
          "733:         return 0;",
          "",
          "[Added Lines]",
          "733:         return NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "814: cJSON *cJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated)",
          "815: {",
          "818:     const char **ep = return_parse_end ? return_parse_end : &global_ep;",
          "819:     cJSON *c = cJSON_New_Item();",
          "822:     {",
          "824:     }",
          "826:     end = parse_value(c, skip(value), ep);",
          "",
          "[Removed Lines]",
          "816:     const char *end = 0;",
          "823:         return 0;",
          "",
          "[Added Lines]",
          "816:     const char *end = NULL;",
          "823:         return NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "828:     {",
          "830:         cJSON_Delete(c);",
          "832:     }",
          "",
          "[Removed Lines]",
          "831:         return 0;",
          "",
          "[Added Lines]",
          "831:         return NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "839:         {",
          "840:             cJSON_Delete(c);",
          "843:         }",
          "844:     }",
          "845:     if (return_parse_end)",
          "",
          "[Removed Lines]",
          "842:             return 0;",
          "",
          "[Added Lines]",
          "842:             return NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "873:     p.buffer = (char*)cJSON_malloc(prebuffer);",
          "874:     if (!p.buffer)",
          "875:     {",
          "877:     }",
          "878:     p.length = prebuffer;",
          "879:     p.offset = 0;",
          "",
          "[Removed Lines]",
          "876:         return 0;",
          "",
          "[Added Lines]",
          "876:         return NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "888:     if (!value)",
          "889:     {",
          "892:     }",
          "",
          "[Removed Lines]",
          "891:         return 0;",
          "",
          "[Added Lines]",
          "891:         return NULL;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "931: }",
          "934: static char *print_value(const cJSON *item, int depth, int fmt, printbuffer *p)",
          "935: {",
          "938:     if (!item)",
          "939:     {",
          "941:     }",
          "942:     if (p)",
          "943:     {",
          "",
          "[Removed Lines]",
          "930:     return 0;",
          "936:     char *out = 0;",
          "940:         return 0;",
          "",
          "[Added Lines]",
          "930:     return NULL;",
          "936:     char *out = NULL;",
          "940:         return NULL;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1017:     {",
          "1021:     }",
          "1023:     item->type = cJSON_Array;",
          "",
          "[Removed Lines]",
          "1020:         return 0;",
          "",
          "[Added Lines]",
          "1020:         return NULL;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1032:     if (!item->child)",
          "1033:     {",
          "1036:     }",
          "1038:     value = skip(parse_value(child, skip(value), ep));",
          "1039:     if (!value)",
          "1040:     {",
          "1042:     }",
          "",
          "[Removed Lines]",
          "1035:         return 0;",
          "1041:         return 0;",
          "",
          "[Added Lines]",
          "1035:         return NULL;",
          "1041:         return NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1048:         if (!(new_item = cJSON_New_Item()))",
          "1049:         {",
          "1052:         }",
          "1054:         child->next = new_item;",
          "",
          "[Removed Lines]",
          "1051:             return 0;",
          "",
          "[Added Lines]",
          "1051:             return NULL;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1060:         if (!value)",
          "1061:         {",
          "1064:         }",
          "1065:     }",
          "",
          "[Removed Lines]",
          "1063:             return 0;",
          "",
          "[Added Lines]",
          "1063:             return NULL;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1077: }",
          "1080: static char *print_array(const cJSON *item, int depth, int fmt, printbuffer *p)",
          "1081: {",
          "1082:     char **entries;",
          "1084:     char *ptr;",
          "1085:     char *ret;",
          "1086:     int len = 5;",
          "",
          "[Removed Lines]",
          "1076:     return 0;",
          "1083:     char *out = 0;",
          "",
          "[Added Lines]",
          "1076:     return NULL;",
          "1083:     char *out = NULL;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1124:         ptr = ensure(p, 1);",
          "1125:         if (!ptr)",
          "1126:         {",
          "1128:         }",
          "1130:         p->offset++;",
          "",
          "[Removed Lines]",
          "1127:             return 0;",
          "",
          "[Added Lines]",
          "1127:             return NULL;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1140:                 ptr = ensure(p, len + 1);",
          "1141:                 if (!ptr)",
          "1142:                 {",
          "1144:                 }",
          "1146:                 if(fmt)",
          "1147:                 {",
          "1149:                 }",
          "1151:                 p->offset += len;",
          "1152:             }",
          "1153:             child = child->next;",
          "",
          "[Removed Lines]",
          "1143:                     return 0;",
          "",
          "[Added Lines]",
          "1143:                     return NULL;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1155:         ptr = ensure(p, 2);",
          "1156:         if (!ptr)",
          "1157:         {",
          "1159:         }",
          "",
          "[Removed Lines]",
          "1158:             return 0;",
          "",
          "[Added Lines]",
          "1158:             return NULL;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1167:         entries = (char**)cJSON_malloc(numentries * sizeof(char*));",
          "1168:         if (!entries)",
          "1169:         {",
          "1171:         }",
          "1175:         child = item->child;",
          "",
          "[Removed Lines]",
          "1170:             return 0;",
          "1172:         memset(entries, 0, numentries * sizeof(char*));",
          "",
          "[Added Lines]",
          "1170:             return NULL;",
          "1172:         memset(entries, '\\0', numentries * sizeof(char*));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1211:                 }",
          "1212:             }",
          "1213:             cJSON_free(entries);",
          "1215:         }",
          "",
          "[Removed Lines]",
          "1214:             return 0;",
          "",
          "[Added Lines]",
          "1214:             return NULL;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1250:     {",
          "1254:     }",
          "1256:     item->type = cJSON_Object;",
          "",
          "[Removed Lines]",
          "1253:         return 0;",
          "",
          "[Added Lines]",
          "1253:         return NULL;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1265:     item->child = child;",
          "1266:     if (!item->child)",
          "1267:     {",
          "1269:     }",
          "1271:     value = skip(parse_string(child, skip(value), ep));",
          "1272:     if (!value)",
          "1273:     {",
          "1275:     }",
          "1277:     child->string = child->valuestring;",
          "1280:     if (*value != ':')",
          "1281:     {",
          "1285:     }",
          "1287:     value = skip(parse_value(child, skip(value + 1), ep));",
          "1288:     if (!value)",
          "1289:     {",
          "1291:     }",
          "1293:     while (*value == ',')",
          "",
          "[Removed Lines]",
          "1268:         return 0;",
          "1274:         return 0;",
          "1278:     child->valuestring = 0;",
          "1284:         return 0;",
          "1290:         return 0;",
          "",
          "[Added Lines]",
          "1268:         return NULL;",
          "1274:         return NULL;",
          "1278:     child->valuestring = NULL;",
          "1284:         return NULL;",
          "1290:         return NULL;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1296:         if (!(new_item = cJSON_New_Item()))",
          "1297:         {",
          "1300:         }",
          "1302:         child->next = new_item;",
          "",
          "[Removed Lines]",
          "1299:             return 0;",
          "",
          "[Added Lines]",
          "1299:             return NULL;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1306:         value = skip(parse_string(child, skip(value + 1), ep));",
          "1307:         if (!value)",
          "1308:         {",
          "1310:         }",
          "1313:         child->string = child->valuestring;",
          "1316:         if (*value != ':')",
          "1317:         {",
          "1321:         }",
          "1323:         value = skip(parse_value(child, skip(value + 1), ep));",
          "1324:         if (!value)",
          "1325:         {",
          "1327:         }",
          "1328:     }",
          "",
          "[Removed Lines]",
          "1309:             return 0;",
          "1314:         child->valuestring = 0;",
          "1320:             return 0;",
          "1326:             return 0;",
          "",
          "[Added Lines]",
          "1309:             return NULL;",
          "1314:         child->valuestring = NULL;",
          "1320:             return NULL;",
          "1326:             return NULL;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1338: }",
          "1341: static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p)",
          "1342: {",
          "1346:     char *ptr;",
          "1347:     char *ret;",
          "1348:     char *str;",
          "",
          "[Removed Lines]",
          "1337:     return 0;",
          "1343:     char **entries = 0;",
          "1344:     char **names = 0;",
          "1345:     char *out = 0;",
          "",
          "[Added Lines]",
          "1337:     return NULL;",
          "1343:     char **entries = NULL;",
          "1344:     char **names = NULL;",
          "1345:     char *out = NULL;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1374:         }",
          "1375:         if (!out)",
          "1376:         {",
          "1378:         }",
          "1379:         ptr = out;",
          "",
          "[Removed Lines]",
          "1377:             return 0;",
          "",
          "[Added Lines]",
          "1377:             return NULL;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1399:         ptr = ensure(p, len + 1);",
          "1400:         if (!ptr)",
          "1401:         {",
          "1403:         }",
          "",
          "[Removed Lines]",
          "1402:             return 0;",
          "",
          "[Added Lines]",
          "1402:             return NULL;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1419:                 ptr = ensure(p, depth);",
          "1420:                 if (!ptr)",
          "1421:                 {",
          "1423:                 }",
          "1424:                 for (j = 0; j < depth; j++)",
          "1425:                 {",
          "",
          "[Removed Lines]",
          "1422:                     return 0;",
          "",
          "[Added Lines]",
          "1422:                     return NULL;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1436:             ptr = ensure(p, len);",
          "1437:             if (!ptr)",
          "1438:             {",
          "1440:             }",
          "1442:             if (fmt)",
          "",
          "[Removed Lines]",
          "1439:                 return 0;",
          "",
          "[Added Lines]",
          "1439:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1454:             ptr = ensure(p, len + 1);",
          "1455:             if (!ptr)",
          "1456:             {",
          "1458:             }",
          "1459:             if (child->next)",
          "1460:             {",
          "",
          "[Removed Lines]",
          "1457:                 return 0;",
          "",
          "[Added Lines]",
          "1457:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1474:         ptr = ensure(p, fmt ? (depth + 1) : 2);",
          "1475:         if (!ptr)",
          "1476:         {",
          "1478:         }",
          "1479:         if (fmt)",
          "1480:         {",
          "",
          "[Removed Lines]",
          "1477:             return 0;",
          "",
          "[Added Lines]",
          "1477:             return NULL;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1493:         entries = (char**)cJSON_malloc(numentries * sizeof(char*));",
          "1494:         if (!entries)",
          "1495:         {",
          "1497:         }",
          "1498:         names = (char**)cJSON_malloc(numentries * sizeof(char*));",
          "1499:         if (!names)",
          "1500:         {",
          "1501:             cJSON_free(entries);",
          "1503:         }",
          "1508:         child = item->child;",
          "",
          "[Removed Lines]",
          "1496:             return 0;",
          "1502:             return 0;",
          "1504:         memset(entries,0, sizeof(char*) * numentries);",
          "1505:         memset(names, 0, sizeof(char*) * numentries);",
          "",
          "[Added Lines]",
          "1496:             return NULL;",
          "1502:             return NULL;",
          "1504:         memset(entries, '\\0', sizeof(char*) * numentries);",
          "1505:         memset(names, '\\0', sizeof(char*) * numentries);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1553:             }",
          "1554:             cJSON_free(names);",
          "1555:             cJSON_free(entries);",
          "1557:         }",
          "",
          "[Removed Lines]",
          "1556:             return 0;",
          "",
          "[Added Lines]",
          "1556:             return NULL;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1628: cJSON *cJSON_GetArrayItem(const cJSON *array, int item)",
          "1629: {",
          "1631:     while (c && item > 0)",
          "1632:     {",
          "1633:         item--;",
          "",
          "[Removed Lines]",
          "1630:     cJSON *c = array ? array->child : 0;",
          "",
          "[Added Lines]",
          "1630:     cJSON *c = array ? array->child : NULL;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1640: cJSON *cJSON_GetObjectItem(const cJSON *object, const char *string)",
          "1641: {",
          "1643:     while (c && cJSON_strcasecmp(c->string, string))",
          "1644:     {",
          "1645:         c = c->next;",
          "",
          "[Removed Lines]",
          "1642:     cJSON *c = object ? object->child : 0;",
          "",
          "[Added Lines]",
          "1642:     cJSON *c = object ? object->child : NULL;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1665:     cJSON *ref = cJSON_New_Item();",
          "1666:     if (!ref)",
          "1667:     {",
          "1669:     }",
          "1670:     memcpy(ref, item, sizeof(cJSON));",
          "1672:     ref->type |= cJSON_IsReference;",
          "1674:     return ref;",
          "1675: }",
          "",
          "[Removed Lines]",
          "1668:         return 0;",
          "1671:     ref->string = 0;",
          "1673:     ref->next = ref->prev = 0;",
          "",
          "[Added Lines]",
          "1668:         return NULL;",
          "1671:     ref->string = NULL;",
          "1673:     ref->next = ref->prev = NULL;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1752:     if (!c)",
          "1753:     {",
          "1756:     }",
          "1757:     if (c->prev)",
          "1758:     {",
          "",
          "[Removed Lines]",
          "1755:         return 0;",
          "",
          "[Added Lines]",
          "1755:         return NULL;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1768:         array->child = c->next;",
          "1769:     }",
          "1773:     return c;",
          "1774: }",
          "",
          "[Removed Lines]",
          "1771:     c->prev = c->next = 0;",
          "",
          "[Added Lines]",
          "1771:     c->prev = c->next = NULL;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1792:         return cJSON_DetachItemFromArray(object, i);",
          "1793:     }",
          "1796: }",
          "1798: void cJSON_DeleteItemFromObject(cJSON *object, const char *string)",
          "",
          "[Removed Lines]",
          "1795:     return 0;",
          "",
          "[Added Lines]",
          "1795:     return NULL;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1853:     {",
          "1854:         newitem->prev->next = newitem;",
          "1855:     }",
          "1857:     cJSON_Delete(c);",
          "1858: }",
          "",
          "[Removed Lines]",
          "1856:     c->next = c->prev = 0;",
          "",
          "[Added Lines]",
          "1856:     c->next = c->prev = NULL;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1947:         if(!item->valuestring)",
          "1948:         {",
          "1949:             cJSON_Delete(item);",
          "1951:         }",
          "1952:     }",
          "",
          "[Removed Lines]",
          "1950:             return 0;",
          "",
          "[Added Lines]",
          "1950:             return NULL;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1980: cJSON *cJSON_CreateIntArray(const int *numbers, int count)",
          "1981: {",
          "1982:     int i;",
          "1985:     cJSON *a = cJSON_CreateArray();",
          "1986:     for(i = 0; a && (i < count); i++)",
          "1987:     {",
          "",
          "[Removed Lines]",
          "1983:     cJSON *n = 0;",
          "1984:     cJSON *p = 0;",
          "",
          "[Added Lines]",
          "1983:     cJSON *n = NULL;",
          "1984:     cJSON *p = NULL;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1989:         if (!n)",
          "1990:         {",
          "1991:             cJSON_Delete(a);",
          "1993:         }",
          "1994:         if(!i)",
          "1995:         {",
          "",
          "[Removed Lines]",
          "1992:             return 0;",
          "",
          "[Added Lines]",
          "1992:             return NULL;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2008: cJSON *cJSON_CreateFloatArray(const float *numbers, int count)",
          "2009: {",
          "2010:     int i;",
          "2013:     cJSON *a = cJSON_CreateArray();",
          "2014:     for(i = 0; a && (i < count); i++)",
          "2015:     {",
          "",
          "[Removed Lines]",
          "2011:     cJSON *n = 0;",
          "2012:     cJSON *p = 0;",
          "",
          "[Added Lines]",
          "2011:     cJSON *n = NULL;",
          "2012:     cJSON *p = NULL;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2017:         if(!n)",
          "2018:         {",
          "2019:             cJSON_Delete(a);",
          "2021:         }",
          "2022:         if(!i)",
          "2023:         {",
          "",
          "[Removed Lines]",
          "2020:             return 0;",
          "",
          "[Added Lines]",
          "2020:             return NULL;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2036: cJSON *cJSON_CreateDoubleArray(const double *numbers, int count)",
          "2037: {",
          "2038:     int i;",
          "2041:     cJSON *a = cJSON_CreateArray();",
          "2042:     for(i = 0;a && (i < count); i++)",
          "2043:     {",
          "",
          "[Removed Lines]",
          "2039:     cJSON *n = 0;",
          "2040:     cJSON *p = 0;",
          "",
          "[Added Lines]",
          "2039:     cJSON *n = NULL;",
          "2040:     cJSON *p = NULL;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2045:         if(!n)",
          "2046:         {",
          "2047:             cJSON_Delete(a);",
          "2049:         }",
          "2050:         if(!i)",
          "2051:         {",
          "",
          "[Removed Lines]",
          "2048:             return 0;",
          "",
          "[Added Lines]",
          "2048:             return NULL;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2064: cJSON *cJSON_CreateStringArray(const char **strings, int count)",
          "2065: {",
          "2066:     int i;",
          "2069:     cJSON *a = cJSON_CreateArray();",
          "2070:     for (i = 0; a && (i < count); i++)",
          "2071:     {",
          "",
          "[Removed Lines]",
          "2067:     cJSON *n = 0;",
          "2068:     cJSON *p = 0;",
          "",
          "[Added Lines]",
          "2067:     cJSON *n = NULL;",
          "2068:     cJSON *p = NULL;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2073:         if(!n)",
          "2074:         {",
          "2075:             cJSON_Delete(a);",
          "2077:         }",
          "2078:         if(!i)",
          "2079:         {",
          "",
          "[Removed Lines]",
          "2076:             return 0;",
          "",
          "[Added Lines]",
          "2076:             return NULL;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2094: {",
          "2095:     cJSON *newitem;",
          "2096:     cJSON *cptr;",
          "2098:     cJSON *newchild;",
          "2101:     if (!item)",
          "2102:     {",
          "2104:     }",
          "2106:     newitem = cJSON_New_Item();",
          "2107:     if (!newitem)",
          "2108:     {",
          "2110:     }",
          "2112:     newitem->type = item->type & (~cJSON_IsReference);",
          "",
          "[Removed Lines]",
          "2097:     cJSON *nptr = 0;",
          "2103:         return 0;",
          "2109:         return 0;",
          "",
          "[Added Lines]",
          "2097:     cJSON *nptr = NULL;",
          "2103:         return NULL;",
          "2109:         return NULL;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2118:         if (!newitem->valuestring)",
          "2119:         {",
          "2120:             cJSON_Delete(newitem);",
          "2122:         }",
          "2123:     }",
          "2124:     if (item->string)",
          "",
          "[Removed Lines]",
          "2121:             return 0;",
          "",
          "[Added Lines]",
          "2121:             return NULL;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2127:         if (!newitem->string)",
          "2128:         {",
          "2129:             cJSON_Delete(newitem);",
          "2131:         }",
          "2132:     }",
          "",
          "[Removed Lines]",
          "2130:             return 0;",
          "",
          "[Added Lines]",
          "2130:             return NULL;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2143:         if (!newchild)",
          "2144:         {",
          "2145:             cJSON_Delete(newitem);",
          "2147:         }",
          "2148:         if (nptr)",
          "2149:         {",
          "",
          "[Removed Lines]",
          "2146:             return 0;",
          "",
          "[Added Lines]",
          "2146:             return NULL;",
          "",
          "---------------"
        ],
        "cJSON_Utils.c||cJSON_Utils.c": [
          "File: cJSON_Utils.c -> cJSON_Utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     len = strlen(str) + 1;",
          "13:     if (!(copy = (char*)malloc(len)))",
          "14:     {",
          "16:     }",
          "17:     memcpy(copy, str, len);",
          "",
          "[Removed Lines]",
          "15:         return 0;",
          "",
          "[Added Lines]",
          "15:         return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:             free(found);",
          "157:         }",
          "158:     }",
          "162: }",
          "164: cJSON *cJSONUtils_GetPointer(cJSON *object, const char *pointer)",
          "",
          "[Removed Lines]",
          "156:             return 0;",
          "161:     return 0;",
          "",
          "[Added Lines]",
          "156:             return NULL;",
          "161:     return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:             if (*pointer && (*pointer != '/'))",
          "178:             {",
          "181:             }",
          "182:             object = cJSON_GetArrayItem(object, which);",
          "183:         }",
          "",
          "[Removed Lines]",
          "180:                 return 0;",
          "",
          "[Added Lines]",
          "180:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:         }",
          "198:         else",
          "199:         {",
          "201:         }",
          "202:     }",
          "",
          "[Removed Lines]",
          "200:             return 0;",
          "",
          "[Added Lines]",
          "200:             return NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "223: static cJSON *cJSONUtils_PatchDetach(cJSON *object, const char *path)",
          "224: {",
          "231:     parentptr = cJSONUtils_strdup(path);",
          "",
          "[Removed Lines]",
          "225:     char *parentptr = 0;",
          "226:     char *childptr = 0;",
          "227:     cJSON *parent = 0;",
          "228:     cJSON *ret = 0;",
          "",
          "[Added Lines]",
          "225:     char *parentptr = NULL;",
          "226:     char *childptr = NULL;",
          "227:     cJSON *parent = NULL;",
          "228:     cJSON *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:     if (!parent)",
          "242:     {",
          "245:     }",
          "246:     else if ((parent->type & 0xFF) == cJSON_Array)",
          "247:     {",
          "",
          "[Removed Lines]",
          "244:         ret = 0;",
          "",
          "[Added Lines]",
          "244:         ret = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "318: static int cJSONUtils_ApplyPatch(cJSON *object, cJSON *patch)",
          "319: {",
          "324:     int opcode = 0;",
          "328:     op = cJSON_GetObjectItem(patch, \"op\");",
          "329:     path = cJSON_GetObjectItem(patch, \"path\");",
          "",
          "[Removed Lines]",
          "320:     cJSON *op = 0;",
          "321:     cJSON *path = 0;",
          "322:     cJSON *value = 0;",
          "323:     cJSON *parent = 0;",
          "325:     char *parentptr = 0;",
          "326:     char *childptr = 0;",
          "",
          "[Added Lines]",
          "320:     cJSON *op = NULL;",
          "321:     cJSON *path = NULL;",
          "322:     cJSON *value = NULL;",
          "323:     cJSON *parent = NULL;",
          "325:     char *parentptr = NULL;",
          "326:     char *childptr = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "666:     if (second && second->prev)",
          "667:     {",
          "670:     }",
          "673:     first = cJSONUtils_SortList(first);",
          "674:     second = cJSONUtils_SortList(second);",
          "678:     {",
          "",
          "[Removed Lines]",
          "669:         second->prev->next = 0;",
          "675:     list = ptr = 0;",
          "",
          "[Added Lines]",
          "669:         second->prev->next = NULL;",
          "675:     list = ptr = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "774: cJSON *cJSONUtils_GenerateMergePatch(cJSON *from, cJSON *to)",
          "775: {",
          "777:     if (!to)",
          "778:     {",
          "",
          "[Removed Lines]",
          "776:     cJSON *patch = 0;",
          "",
          "[Added Lines]",
          "776:     cJSON *patch = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "821:     if (!patch->child)",
          "822:     {",
          "823:         cJSON_Delete(patch);",
          "825:     }",
          "827:     return patch;",
          "",
          "[Removed Lines]",
          "824:         return 0;",
          "",
          "[Added Lines]",
          "824:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcc89c4bb264d665929b00eeebc479a643a90896",
      "candidate_info": {
        "commit_hash": "fcc89c4bb264d665929b00eeebc479a643a90896",
        "repo": "DaveGamble/cJSON",
        "commit_url": "https://github.com/DaveGamble/cJSON/commit/fcc89c4bb264d665929b00eeebc479a643a90896",
        "files": [
          "cJSON.c"
        ],
        "message": "Move increment out of loop condition fixes #85",
        "before_after_code_files": [
          "cJSON.c||cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cJSON.c||cJSON.c"
          ],
          "candidate": [
            "cJSON.c||cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "cJSON.c||cJSON.c": [
          "File: cJSON.c -> cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:         return NULL;",
          "492:     }",
          "495:     {",
          "496:         if (*end_ptr++ == '\\\\')",
          "497:         {",
          "",
          "[Removed Lines]",
          "494:     while ((*end_ptr != '\\\"') && *end_ptr && ++len)",
          "",
          "[Added Lines]",
          "494:     while ((*end_ptr != '\\\"') && *end_ptr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:             end_ptr++;",
          "505:         }",
          "506:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:         len++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ace5047782c0eb1f428d6566c9e6ed263ff9fa28",
      "candidate_info": {
        "commit_hash": "ace5047782c0eb1f428d6566c9e6ed263ff9fa28",
        "repo": "DaveGamble/cJSON",
        "commit_url": "https://github.com/DaveGamble/cJSON/commit/ace5047782c0eb1f428d6566c9e6ed263ff9fa28",
        "files": [
          "cJSON.c"
        ],
        "message": "parse_string: reduce mental burden when reading the code\n\nThis restructures parse_string in a way, that you need to keep less\nstate in your head to understand the code.\n\nThis is achieved by:\n* only changing the input pointer (current position) at a few places\n(not all throughout)\n* splitting out the UTF16 handling into a separate function\n* renaming the variables so you know what they do without additional\ncontext",
        "before_after_code_files": [
          "cJSON.c||cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cJSON.c||cJSON.c"
          ],
          "candidate": [
            "cJSON.c||cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "cJSON.c||cJSON.c": [
          "File: cJSON.c -> cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <float.h>",
          "31: #include <limits.h>",
          "32: #include <ctype.h>",
          "33: #include \"cJSON.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     return h;",
          "404: }",
          "408: {",
          "429:     {",
          "431:         goto fail;",
          "432:     }",
          "435:     {",
          "437:         {",
          "445:         }",
          "447:     }",
          "452:     {",
          "453:         goto fail;",
          "454:     }",
          "459:     {",
          "461:         {",
          "463:         }",
          "465:         else",
          "466:         {",
          "469:             {",
          "470:                 case 'b':",
          "472:                     break;",
          "473:                 case 'f':",
          "475:                     break;",
          "476:                 case 'n':",
          "478:                     break;",
          "479:                 case 'r':",
          "481:                     break;",
          "482:                 case 't':",
          "484:                     break;",
          "485:                 case '\\\"':",
          "486:                 case '\\\\':",
          "487:                 case '/':",
          "489:                     break;",
          "490:                 case 'u':",
          "495:                     {",
          "498:                         goto fail;",
          "499:                     }",
          "578:                     break;",
          "579:                 default:",
          "581:                     goto fail;",
          "582:             }",
          "584:         }",
          "585:     }",
          "592:     item->type = cJSON_String;",
          "597: fail:",
          "599:     {",
          "601:     }",
          "603:     return NULL;",
          "",
          "[Removed Lines]",
          "407: static const unsigned char firstByteMark[5] =",
          "414: };",
          "417: static const unsigned char *parse_string(cJSON *item, const unsigned char *str, const unsigned char **ep)",
          "418: {",
          "419:     const unsigned char *ptr = str + 1;",
          "420:     const unsigned char *end_ptr = str + 1;",
          "421:     unsigned char *ptr2 = NULL;",
          "422:     unsigned char *out = NULL;",
          "423:     size_t len = 0;",
          "424:     unsigned uc = 0;",
          "425:     unsigned uc2 = 0;",
          "428:     if (*str != '\\\"')",
          "434:     while ((*end_ptr != '\\\"') && *end_ptr)",
          "436:         if (*end_ptr++ == '\\\\')",
          "438:             if (*end_ptr == '\\0')",
          "439:             {",
          "441:                 goto fail;",
          "442:             }",
          "444:             end_ptr++;",
          "446:         len++;",
          "450:     out = (unsigned char*)cJSON_malloc(len + 1);",
          "451:     if (!out)",
          "456:     ptr2 = out;",
          "458:     while (ptr < end_ptr)",
          "460:         if (*ptr != '\\\\')",
          "467:             ptr++;",
          "468:             switch (*ptr)",
          "493:                     ptr += 4;",
          "494:                     if (ptr >= end_ptr)",
          "501:                     if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))",
          "502:                     {",
          "504:                         goto fail;",
          "505:                     }",
          "508:                     if ((uc >= 0xD800) && (uc<=0xDBFF))",
          "509:                     {",
          "510:                         if ((ptr + 6) > end_ptr)",
          "511:                         {",
          "514:                             goto fail;",
          "515:                         }",
          "516:                         if ((ptr[1] != '\\\\') || (ptr[2] != 'u'))",
          "517:                         {",
          "520:                             goto fail;",
          "521:                         }",
          "522:                         uc2 = parse_hex4(ptr + 3);",
          "524:                         if ((uc2 < 0xDC00) || (uc2 > 0xDFFF))",
          "525:                         {",
          "528:                             goto fail;",
          "529:                         }",
          "531:                         uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));",
          "532:                     }",
          "537:                     len = 4;",
          "538:                     if (uc < 0x80)",
          "539:                     {",
          "541:                         len = 1;",
          "542:                     }",
          "543:                     else if (uc < 0x800)",
          "544:                     {",
          "546:                         len = 2;",
          "547:                     }",
          "548:                     else if (uc < 0x10000)",
          "549:                     {",
          "551:                         len = 3;",
          "552:                     }",
          "553:                     ptr2 += len;",
          "555:                     switch (len) {",
          "556:                         case 4:",
          "559:                             uc >>= 6;",
          "560:                         case 3:",
          "563:                             uc >>= 6;",
          "564:                         case 2:",
          "567:                             uc >>= 6;",
          "568:                         case 1:",
          "572:                             break;",
          "573:                         default:",
          "575:                             goto fail;",
          "576:                     }",
          "577:                     ptr2 += len;",
          "583:             ptr++;",
          "587:     if (*ptr == '\\\"')",
          "588:     {",
          "589:         ptr++;",
          "590:     }",
          "593:     item->valuestring = (char*)out;",
          "595:     return ptr;",
          "598:     if (out != NULL)",
          "600:         cJSON_free(out);",
          "",
          "[Added Lines]",
          "409: static uint8_t utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer, const unsigned char **error_pointer)",
          "412:     static const unsigned char firstByteMark[5] =",
          "413:     {",
          "419:     };",
          "421:     long unsigned int codepoint = 0;",
          "422:     unsigned int first_code = 0;",
          "423:     const unsigned char *first_sequence = input_pointer;",
          "424:     uint8_t utf8_length = 0;",
          "425:     uint8_t sequence_length = 0;",
          "428:     first_code = parse_hex4(first_sequence + 2);",
          "429:     if ((input_end - first_sequence) < 6)",
          "430:     {",
          "433:         goto fail;",
          "434:     }",
          "437:     if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)) || (first_code == 0))",
          "444:     if ((first_code >= 0xD800) && (first_code <= 0xDBFF))",
          "446:         const unsigned char *second_sequence = first_sequence + 6;",
          "447:         unsigned int second_code = 0;",
          "450:         if ((input_end - second_sequence) < 6)",
          "454:             goto fail;",
          "457:         if ((second_sequence[0] != '\\\\') || (second_sequence[1] != 'u'))",
          "458:         {",
          "461:             goto fail;",
          "462:         }",
          "465:         second_code = parse_hex4(second_sequence + 2);",
          "467:         if ((second_code < 0xDC00) || (second_code > 0xDFFF))",
          "468:         {",
          "471:             goto fail;",
          "472:         }",
          "476:         codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));",
          "477:     }",
          "478:     else",
          "479:     {",
          "481:         codepoint = first_code;",
          "487:     if (codepoint < 0x80)",
          "488:     {",
          "490:         utf8_length = 1;",
          "491:     }",
          "492:     else if (codepoint < 0x800)",
          "493:     {",
          "495:         utf8_length = 2;",
          "496:     }",
          "497:     else if (codepoint < 0x10000)",
          "498:     {",
          "500:         utf8_length = 3;",
          "501:     }",
          "502:     else if (codepoint <= 0x10FFFF)",
          "503:     {",
          "505:         utf8_length = 4;",
          "506:     }",
          "507:     else",
          "515:     switch (utf8_length)",
          "516:     {",
          "517:         case 4:",
          "519:             (*output_pointer)[3] = (unsigned char)((codepoint | 0x80) & 0xBF);",
          "520:             codepoint >>= 6;",
          "521:         case 3:",
          "523:             (*output_pointer)[2] = (unsigned char)((codepoint | 0x80) & 0xBF);",
          "524:             codepoint >>= 6;",
          "525:         case 2:",
          "526:             (*output_pointer)[1] = (unsigned char)((codepoint | 0x80) & 0xBF);",
          "527:             codepoint >>= 6;",
          "528:         case 1:",
          "531:             (*output_pointer)[0] = (unsigned char)((codepoint | firstByteMark[utf8_length]) & 0xFF);",
          "532:             break;",
          "533:         default:",
          "535:             goto fail;",
          "536:     }",
          "539:     return sequence_length;",
          "541: fail:",
          "542:     return 0;",
          "543: }",
          "546: static const unsigned char *parse_string(cJSON *item, const unsigned char *input, const unsigned char **error_pointer)",
          "547: {",
          "548:     const unsigned char *input_pointer = input + 1;",
          "549:     const unsigned char *input_end = input + 1;",
          "550:     unsigned char *output_pointer = NULL;",
          "551:     unsigned char *output = NULL;",
          "554:     if (*input != '\\\"')",
          "555:     {",
          "557:         goto fail;",
          "558:     }",
          "560:     {",
          "562:         size_t allocation_length = 0;",
          "563:         size_t skipped_bytes = 0;",
          "564:         while ((*input_end != '\\\"') && (*input_end != '\\0'))",
          "565:         {",
          "567:             if (input_end[0] == '\\\\')",
          "568:             {",
          "569:                 if (input_end[1] == '\\0')",
          "570:                 {",
          "572:                     goto fail;",
          "573:                 }",
          "574:                 skipped_bytes++;",
          "575:                 input_end++;",
          "576:             }",
          "577:             input_end++;",
          "578:         }",
          "579:         if (*input_end == '\\0')",
          "580:         {",
          "582:         }",
          "585:         allocation_length = (size_t) (input_end - input) - skipped_bytes;",
          "586:         output = (unsigned char*)cJSON_malloc(allocation_length + sizeof('\\0'));",
          "587:         if (output == NULL)",
          "588:         {",
          "590:         }",
          "591:     }",
          "593:     output_pointer = output;",
          "595:     while (input_pointer < input_end)",
          "597:         if (*input_pointer != '\\\\')",
          "604:             uint8_t sequence_length = 2;",
          "605:             switch (input_pointer[1])",
          "630:                     sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer, error_pointer);",
          "631:                     if (sequence_length == 0)",
          "642:             input_pointer += sequence_length;",
          "650:     item->valuestring = (char*)output;",
          "652:     return input_end + 1;",
          "655:     if (output != NULL)",
          "657:         cJSON_free(output);",
          "",
          "---------------"
        ]
      }
    }
  ]
}