{
  "cve_id": "CVE-2015-1870",
  "cve_desc": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors.",
  "repo": "abrt/abrt",
  "patch_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
  "patch_info": {
    "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
    "files": [
      "src/daemon/abrt-server.c",
      "src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h",
      "src/lib/abrt_conf.c",
      "src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c"
    ],
    "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
      "src/daemon/abrt.conf||src/daemon/abrt.conf",
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
      "src/include/libabrt.h||src/include/libabrt.h",
      "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
      "src/lib/hooklib.c||src/lib/hooklib.c",
      "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
      "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
    ]
  },
  "patch_diff": {
    "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
      "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
      "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
      "18: #include \"libabrt.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"problem_api.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
      "155:     }",
      "157:     {",
      "158:         if (errno == ENOTDIR)",
      "159:         {",
      "",
      "[Removed Lines]",
      "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "[Added Lines]",
      "157:     if (g_settings_privatereports)",
      "158:     {",
      "159:         struct stat statbuf;",
      "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
      "161:         {",
      "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
      "164:         }",
      "166:         struct group *gr = getgrnam(\"abrt\");",
      "167:         if (!gr)",
      "168:         {",
      "169:             error_msg(\"Group 'abrt' does not exist\");",
      "170:             return 500;",
      "171:         }",
      "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
      "173:         {",
      "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
      "175:             return 403;",
      "176:         }",
      "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
      "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
      "179:         dd_close(dd);",
      "180:         if (complete)",
      "181:         {",
      "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
      "183:             return 403;",
      "184:         }",
      "185:     }",
      "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "381:     if (!dd)",
      "382:     {",
      "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
      "",
      "[Removed Lines]",
      "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "[Added Lines]",
      "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
      "",
      "---------------"
    ],
    "src/daemon/abrt.conf||src/daemon/abrt.conf": [
      "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: #                session; otherwise No.",
      "44: #",
      "45: # ShortenedReporting = yes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: # Disable this if you want to regular users to own the problem data colleted by",
      "48: # abrt.",
      "49: #",
      "50: PrivateReports = yes",
      "",
      "---------------"
    ],
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682:         }",
      "683:     }",
      "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "773:         goto create_user_core;",
      "774:     }",
      "784:     if (dd)",
      "785:     {",
      "786:         char *rootdir = get_rootdir(pid);",
      "788:         dd_create_basic_files(dd, fsuid, NULL);",
      "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
      "",
      "[Removed Lines]",
      "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "[Added Lines]",
      "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
      "",
      "---------------"
    ],
    "src/include/libabrt.h||src/include/libabrt.h": [
      "File: src/include/libabrt.h -> src/include/libabrt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: extern char *        g_settings_autoreporting_event;",
      "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
      "64: extern bool          g_settings_shortenedreporting;",
      "67: #define load_abrt_conf abrt_load_abrt_conf",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: #define g_settings_privatereports abrt_g_settings_privatereports",
      "66: extern bool          g_settings_privatereports;",
      "",
      "---------------"
    ],
    "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
      "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: bool          g_settings_autoreporting = 0;",
      "28: char *        g_settings_autoreporting_event = NULL;",
      "29: bool          g_settings_shortenedreporting = 0;",
      "31: void free_abrt_conf_data()",
      "32: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: bool          g_settings_privatereports = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     else",
      "103:         g_settings_shortenedreporting = 0;",
      "105:     GHashTableIter iter;",
      "106:     const char *name;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
      "107:     if (value)",
      "108:     {",
      "109:         g_settings_privatereports = string_to_bool(value);",
      "110:         remove_map_string_item(settings, \"PrivateReports\");",
      "111:     }",
      "",
      "---------------"
    ],
    "src/lib/hooklib.c||src/lib/hooklib.c": [
      "File: src/lib/hooklib.c -> src/lib/hooklib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "410: {",
      "411:     load_abrt_conf();",
      "415:     char *problem_id = NULL;",
      "416:     if (dd)",
      "",
      "[Removed Lines]",
      "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "[Added Lines]",
      "413:     struct dump_dir *dd = NULL;",
      "415:     if (g_settings_privatereports)",
      "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
      "417:     else",
      "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
      "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:         mode = DEFAULT_DUMP_DIR_MODE;",
      "190:         my_euid = geteuid();",
      "191:     }",
      "193:     pid_t my_pid = getpid();",
      "194:     unsigned idx = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (g_settings_privatereports)",
      "193:     {",
      "194:         if (world_readable_dump)",
      "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "197:         mode = DEFAULT_DUMP_DIR_MODE;",
      "198:         my_euid = 0;",
      "199:     }",
      "",
      "---------------"
    ],
    "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
      "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:         mode = DEFAULT_DUMP_DIR_MODE;",
      "83:         my_euid = geteuid();",
      "84:     }",
      "86:     pid_t my_pid = getpid();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     if (g_settings_privatereports)",
      "86:     {",
      "87:         if ((g_opts & OPT_x))",
      "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
      "90:         mode = DEFAULT_DUMP_DIR_MODE;",
      "91:         my_euid = 0;",
      "92:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cdb4c5b0855d910132e61d71afbd445b0271fcb4",
      "candidate_info": {
        "commit_hash": "cdb4c5b0855d910132e61d71afbd445b0271fcb4",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/cdb4c5b0855d910132e61d71afbd445b0271fcb4",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: avoid overriding system files by coredump\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545: static int create_or_die(const char *filename)",
          "546: {",
          "548:     if (fd >= 0)",
          "549:     {",
          "550:         IGNORE_RESULT(fchown(fd, dd->dd_uid, dd->dd_gid));",
          "",
          "[Removed Lines]",
          "547:     int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "547:     int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL, DEFAULT_DUMP_DIR_MODE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
      "candidate_info": {
        "commit_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
        "files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: sanitize umask\n\nWe cannot trust anything when running suided program.\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         if (u != 0)",
          "183:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
          "184:         putenv(path_env);",
          "185:     }",
          "187:     execvp(EXECUTABLE, (char **)args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         umask(0022);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af945ff58a698ce00c45059a05994ef53a13e192",
      "candidate_info": {
        "commit_hash": "af945ff58a698ce00c45059a05994ef53a13e192",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/af945ff58a698ce00c45059a05994ef53a13e192",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: do not override existing files by compat cores\n\nImplement all checks used in kernel's do_coredump() and require\nnon-relative path if suid_dumpable is 2.\n\nRelated: #1212818\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define  DUMP_SUID_UNSAFE 1",
          "25: #define  DUMP_SUID_SAFE 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: static int g_user_core_flags;",
          "28: static int g_need_nonrelative;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:     full_core_basename = core_basename;",
          "339:     if (core_basename[0] != '/')",
          "340:         core_basename = concat_path_file(user_pwd, core_basename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     {",
          "343:         if (g_need_nonrelative)",
          "344:         {",
          "345:             error_msg(\"Current suid_dumpable policy prevents from saving core dumps according to relative core_pattern\");",
          "346:             return -1;",
          "347:         }",
          "349:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:     struct stat sb;",
          "373:     errno = 0;",
          "376:     xsetegid(0);",
          "377:     xseteuid(0);",
          "378:     if (user_core_fd < 0",
          "379:      || fstat(user_core_fd, &sb) != 0",
          "380:      || !S_ISREG(sb.st_mode)",
          "381:      || sb.st_nlink != 1",
          "383:     ) {",
          "384:         if (user_core_fd < 0)",
          "385:             perror_msg(\"Can't open '%s'\", full_core_basename);",
          "386:         else",
          "388:         return -1;",
          "389:     }",
          "390:     if (ftruncate(user_core_fd, 0) != 0) {",
          "",
          "[Removed Lines]",
          "387:             perror_msg(\"'%s' is not a regular file with link count 1\", full_core_basename);",
          "",
          "[Added Lines]",
          "391:      || sb.st_uid != fsuid",
          "396:             perror_msg(\"'%s' is not a regular file with link count 1 owned by UID(%d)\", full_core_basename, fsuid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "579:         fsuid = 0;",
          "580:         if (suid_policy == DUMP_SUID_UNSAFE)",
          "582:             fsuid = tmp_fsuid;",
          "583:         }",
          "584:     }",
          "",
          "[Removed Lines]",
          "581:         {",
          "",
          "[Added Lines]",
          "591:         else",
          "592:         {",
          "593:             g_user_core_flags = O_EXCL;",
          "594:             g_need_nonrelative = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
      "candidate_info": {
        "commit_hash": "4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/4f2c1ddd3e3b81d2d5146b883115371f1cada9f9",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: do not read data from root directories\n\nUsers are allowed to modify /proc/[pid]/root to any directory by running\ntheir own MOUNT namespace.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:     {",
          "679:         char *rootdir = get_rootdir(pid);",
          "683:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
          "684:         int source_base_ofs = sprintf(source_filename, \"/proc/%lu/smaps\", (long)pid);",
          "",
          "[Removed Lines]",
          "681:         dd_create_basic_files(dd, fsuid, (rootdir && strcmp(rootdir, \"/\") != 0) ? rootdir : NULL);",
          "",
          "[Added Lines]",
          "681:         dd_create_basic_files(dd, fsuid, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28ce40d8db91c1926a95f21ef19a980a8af88471",
      "candidate_info": {
        "commit_hash": "28ce40d8db91c1926a95f21ef19a980a8af88471",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/28ce40d8db91c1926a95f21ef19a980a8af88471",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: check for overflow in abrt coredump path creation\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:         int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);",
          "674:         off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);",
          "675:         if (core_size < 0 || fsync(abrt_core_fd) != 0)",
          "",
          "[Removed Lines]",
          "672:         snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash);",
          "",
          "[Added Lines]",
          "672:         if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))",
          "673:             error_msg_and_die(\"Error saving '%s': truncated long file path\", path);",
          "",
          "---------------"
        ]
      }
    }
  ]
}