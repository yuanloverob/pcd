{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63e50b9ed6d7cc8fc883549a69e2c3d0bb9ef2fb",
      "candidate_info": {
        "commit_hash": "63e50b9ed6d7cc8fc883549a69e2c3d0bb9ef2fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/63e50b9ed6d7cc8fc883549a69e2c3d0bb9ef2fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/vtab_err.test"
        ],
        "message": "Fix a failing assert() in sqlite3ResetAllSchemasOfConnection().\n\nFossilOrigin-Name: 0ea049f342d11c676e148239e45d252164081362e921a4beb735d6899eb77344",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/vtab_err.test||test/vtab_err.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c893d9bcc34c391505b08cc35808dd3abddf3c5d952798334c296547bcae6a6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544: void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){",
          "545:   int i;",
          "546:   sqlite3BtreeEnterAll(db);",
          "548:   for(i=0; i<db->nDb; i++){",
          "549:     Db *pDb = &db->aDb[i];",
          "550:     if( pDb->pSchema ){",
          "552:     }",
          "553:   }",
          "554:   db->mDbFlags &= ~(DBFLAG_SchemaChange|DBFLAG_SchemaKnownOk);",
          "555:   sqlite3VtabUnlockList(db);",
          "556:   sqlite3BtreeLeaveAll(db);",
          "558: }",
          "",
          "[Removed Lines]",
          "547:   assert( db->nSchemaLock==0 );",
          "551:       sqlite3SchemaClear(pDb->pSchema);",
          "557:   sqlite3CollapseDatabaseArray(db);",
          "",
          "[Added Lines]",
          "550:       if( db->nSchemaLock==0 ){",
          "551:         sqlite3SchemaClear(pDb->pSchema);",
          "552:       }else{",
          "553:         DbSetProperty(db, i, DB_ResetWanted);",
          "554:       }",
          "560:   if( db->nSchemaLock==0 ){",
          "561:     sqlite3CollapseDatabaseArray(db);",
          "562:   }",
          "",
          "---------------"
        ],
        "test/vtab_err.test||test/vtab_err.test": [
          "File: test/vtab_err.test -> test/vtab_err.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: sqlite3_memdebug_fail -1",
          "66: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: reset_db",
          "66: register_echo_module [sqlite3_connection_pointer db]",
          "67: do_execsql_test vtab_err-3.0 {",
          "68:   CREATE TABLE r(a PRIMARY KEY, b, c);",
          "69:   CREATE VIRTUAL TABLE e USING echo(r);",
          "70: }",
          "71: faultsim_save_and_close",
          "73: do_faultsim_test vtab_err-3 -faults oom-t* -prep {",
          "74:   faultsim_restore_and_reopen",
          "75:   register_echo_module [sqlite3_connection_pointer db]",
          "76: } -body {",
          "77:   execsql {",
          "78:     BEGIN;",
          "79:       CREATE TABLE xyz(x);",
          "80:       SELECT a FROM e;",
          "81:     COMMIT;",
          "82:   }",
          "83: } -test {",
          "84:   faultsim_test_result {0 {}}",
          "85: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6824c8d6c2def197044cad984481eb981d38998",
      "candidate_info": {
        "commit_hash": "c6824c8d6c2def197044cad984481eb981d38998",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6824c8d6c2def197044cad984481eb981d38998",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "When considering partial indexes, do not assume that a \"CASE x ...\" expression implies \"x IS NOT NULL\".\n\nFossilOrigin-Name: 1b24303220b7b4f59520176a0150fc619c668865450b4fdaa9ce4113a56e9687",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ba6d709b50d92db1542f2ff30535a80184b00dadf759d51e5cae7a6e37b1764",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_ISNOT",
          "4950:    && pE1->op!=TK_OR",
          "4951:   ){",
          "4952:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "4953:     testcase( pX!=pE1->pLeft );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4951:    && pE1->op!=TK_CASE",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT * FROM t0 WHERE t0.c0 IS NOT 1;",
          "434: } {{} row}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: do_execsql_test index6-14.2 {",
          "437:   SELECT * FROM t0 WHERE CASE c0 WHEN 0 THEN 0 ELSE 1 END;",
          "438: } {{} row}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
      "candidate_info": {
        "commit_hash": "f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f446a7a8cd265fb8b135fa551d53e47813ae6d8c",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update rtree.c so that SQLITE_DEBUG is required to turn on assert() statements, even if it is compiled separately from the amalgamation.\n\nFossilOrigin-Name: b6e17f0139482a22c2fc84552767bc9a293b282499e3a790de069e0e84455fb2",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   #include \"sqlite3.h\"",
          "64: #endif",
          "70: #ifndef SQLITE_AMALGAMATION",
          "71: #include \"sqlite3rtree.h\"",
          "72: typedef sqlite3_int64 i64;",
          "",
          "[Removed Lines]",
          "66: #include <string.h>",
          "67: #include <assert.h>",
          "68: #include <stdio.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: typedef unsigned char u8;",
          "75: typedef unsigned short u16;",
          "76: typedef unsigned int u32;",
          "77: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(NDEBUG) && !defined(SQLITE_DEBUG)",
          "74: # define NDEBUG 1",
          "75: #endif",
          "76: #if defined(NDEBUG) && defined(SQLITE_DEBUG)",
          "77: # undef NDEBUG",
          "79: #endif",
          "81: #include <string.h>",
          "82: #include <stdio.h>",
          "83: #include <assert.h>",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47010bf17cb080cc1c693c84d16b986ea4addf9c54bd7e22de1e0f6b555ea9d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
      "candidate_info": {
        "commit_hash": "0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0287c951655bc543a7d0dcdb4fcb8cc1718325ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Prevent SQLite from assuming that if ((? IS NOT NULL) IS NOT NULL) is true, ? may not be NULL. Fix for [d51a8696].\n\nFossilOrigin-Name: 7833feecfe745e237f239ee4c38a9e4bf7ad66a32919150208da87c00a826473",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 629e20c9880acc2cb9e2fa6da39a15a90483e9a8f433df29d285c23bdfb03b0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5168:       return WRC_Prune;",
          "5170:     case TK_AND:",
          "5175:       }",
          "5176:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "5171:       if( sqlite3ExprImpliesNonNullRow(pExpr->pLeft, pWalker->u.iCur)",
          "5172:        && sqlite3ExprImpliesNonNullRow(pExpr->pRight, pWalker->u.iCur)",
          "5173:       ){",
          "5174:         pWalker->eCode = 1;",
          "",
          "[Added Lines]",
          "5171:       assert( pWalker->eCode==0 );",
          "5172:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5173:       if( pWalker->eCode ){",
          "5174:         pWalker->eCode = 0;",
          "5175:         sqlite3WalkExpr(pWalker, pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5230: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5231:   Walker w;",
          "5232:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "5242:   }",
          "5243:   w.xExprCallback = impliesNotNullRow;",
          "5244:   w.xSelectCallback = 0;",
          "",
          "[Removed Lines]",
          "5233:   while( p ){",
          "5234:     if( p->op==TK_NOTNULL ){",
          "5235:       p = p->pLeft;",
          "5236:     }else if( p->op==TK_AND ){",
          "5237:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5238:       p = p->pRight;",
          "5239:     }else{",
          "5240:       break;",
          "5241:     }",
          "",
          "[Added Lines]",
          "5234:   if( p && p->op==TK_NOTNULL ){",
          "5235:     p = p->pLeft;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   SELECT NOT(v0.a IS FALSE) FROM v0",
          "906: } {1}",
          "908: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908: #-------------------------------------------------------------------------",
          "909: reset_db",
          "910: do_execsql_test join-19.0 {",
          "911:   CREATE TABLE t1(a);",
          "912:   CREATE TABLE t2(b);",
          "913:   INSERT INTO t1(a) VALUES(0);",
          "914:   CREATE VIEW v0(c) AS SELECT t2.b FROM t1 LEFT JOIN t2;",
          "915: }",
          "917: do_execsql_test join-19.1 {",
          "918:   SELECT * FROM v0 WHERE v0.c NOTNULL NOTNULL;",
          "919: } {{}}",
          "921: do_execsql_test join-19.2 {",
          "922:   SELECT * FROM t1 LEFT JOIN t2",
          "923: } {0 {}}",
          "925: do_execsql_test join-19.3 {",
          "926:   SELECT * FROM t1 LEFT JOIN t2 WHERE (b IS NOT NULL) IS NOT NULL;",
          "927: } {0 {}}",
          "929: do_execsql_test join-19.4 {",
          "930:   SELECT (b IS NOT NULL) IS NOT NULL FROM t1 LEFT JOIN t2",
          "931: } {1}",
          "933: do_execsql_test join-19.5 {",
          "934:   SELECT * FROM t1 LEFT JOIN t2 WHERE",
          "935:     (b IS NOT NULL AND b IS NOT NULL) IS NOT NULL;",
          "936: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
      "candidate_info": {
        "commit_hash": "ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca076bf26ee054ca224e3b9ec8361631e6ea8c36",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vacuum-into.test"
        ],
        "message": "Add another test case to vacuum-into.test.\n\nFossilOrigin-Name: 0465d2fc0d3f8beaa1b6b0bd7bd51d69a524f30d889c9402e7d02cc06164a310",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3961995cb56b43f1753c53fc869edf336f1c17ec994d67dc74e44e8e02493894",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "72: do_catchsql_test vacuum-into-330 {",
          "73:   VACUUM INTO t1.nosuchcol;",
          "74: } {1 {no such column: t1.nosuchcol}}",
          "76: forcedelete test.db2",
          "77: db func target target",
          "",
          "[Removed Lines]",
          "71: } {1 {no such column: nosuchcol}}",
          "",
          "[Added Lines]",
          "74: do_catchsql_test vacuum-into-340 {",
          "75:   VACUUM INTO main.t1.nosuchcol;",
          "76: } {1 {no such column: main.t1.nosuchcol}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}