{
  "cve_id": "CVE-2022-36042",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.4.0 and prior are vulnerable to an out-of-bounds write when getting data from dyld cache files. A user opening a malicious dyld cache file could be affected by this vulnerability, allowing an attacker to execute code on the user's machine. Commit number 556ca2f9eef01ec0f4a76d1fbacfcf3a87a44810 contains a patch.",
  "repo": "rizinorg/rizin",
  "patch_hash": "556ca2f9eef01ec0f4a76d1fbacfcf3a87a44810",
  "patch_info": {
    "commit_hash": "556ca2f9eef01ec0f4a76d1fbacfcf3a87a44810",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/556ca2f9eef01ec0f4a76d1fbacfcf3a87a44810",
    "files": [
      "librz/bin/format/mach0/dyldcache.c"
    ],
    "message": "Fix oob write in dyldcache\n\nWhen the individual n_slide_infos were too high, the sum would overflow\nand too few entries would be allocated.",
    "before_after_code_files": [
      "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c"
    ]
  },
  "patch_diff": {
    "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c": [
      "File: librz/bin/format/mach0/dyldcache.c -> librz/bin/format/mach0/dyldcache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "995:  }",
      "997:  if (!cache->hdr->slideInfoOffset || !cache->hdr->slideInfoSize) {",
      "999:   ut32 n_slide_infos[MAX_N_HDR];",
      "1001:   ut32 i;",
      "",
      "[Removed Lines]",
      "998:   ut32 total_slide_infos = 0;",
      "",
      "[Added Lines]",
      "998:   size_t total_slide_infos = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1004:    if (!rz_buf_read_le32_at(cache->buf, 0x13c + hdr_offset, &n_slide_infos[i])) {",
      "1005:     goto beach;",
      "1006:    }",
      "1008:   }",
      "1010:   if (!total_slide_infos) {",
      "",
      "[Removed Lines]",
      "1007:    total_slide_infos += n_slide_infos[i];",
      "",
      "[Added Lines]",
      "1007:    ut32 total = total_slide_infos + n_slide_infos[i];",
      "1008:    if (total < total_slide_infos) {",
      "1010:     goto beach;",
      "1011:    }",
      "1012:    total_slide_infos = total;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70d5896a2cb2ae724ea93b69616aefe8d1b808fb",
      "candidate_info": {
        "commit_hash": "70d5896a2cb2ae724ea93b69616aefe8d1b808fb",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/70d5896a2cb2ae724ea93b69616aefe8d1b808fb",
        "files": [
          "librz/bin/format/mach0/dyldcache.c"
        ],
        "message": "Fix oob write in dyldcache\n\nWhen the individual n_slide_infos were too high, the sum would overflow\nand too few entries would be allocated.",
        "before_after_code_files": [
          "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c"
          ],
          "candidate": [
            "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/format/mach0/dyldcache.c||librz/bin/format/mach0/dyldcache.c": [
          "File: librz/bin/format/mach0/dyldcache.c -> librz/bin/format/mach0/dyldcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:  }",
          "997:  if (!cache->hdr->slideInfoOffset || !cache->hdr->slideInfoSize) {",
          "999:   ut32 n_slide_infos[MAX_N_HDR];",
          "1001:   ut32 i;",
          "",
          "[Removed Lines]",
          "998:   ut32 total_slide_infos = 0;",
          "",
          "[Added Lines]",
          "998:   size_t total_slide_infos = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:    if (!rz_buf_read_le32_at(cache->buf, 0x13c + hdr_offset, &n_slide_infos[i])) {",
          "1005:     goto beach;",
          "1006:    }",
          "1008:   }",
          "1010:   if (!total_slide_infos) {",
          "",
          "[Removed Lines]",
          "1007:    total_slide_infos += n_slide_infos[i];",
          "",
          "[Added Lines]",
          "1007:    ut32 total = total_slide_infos + n_slide_infos[i];",
          "1008:    if (total < total_slide_infos) {",
          "1010:     goto beach;",
          "1011:    }",
          "1012:    total_slide_infos = total;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb7e0efe3876a3b9322d0a74860b40010fd6b1cf",
      "candidate_info": {
        "commit_hash": "eb7e0efe3876a3b9322d0a74860b40010fd6b1cf",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/eb7e0efe3876a3b9322d0a74860b40010fd6b1cf",
        "files": [
          "librz/util/pkcs7.c"
        ],
        "message": "Fix oob read on rz_pkcs7_parse_spcdata",
        "before_after_code_files": [
          "librz/util/pkcs7.c||librz/util/pkcs7.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2930"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/util/pkcs7.c||librz/util/pkcs7.c": [
          "File: librz/util/pkcs7.c -> librz/util/pkcs7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:  data->type = rz_asn1_stringify_oid(object->list.objects[0]->sector, object->list.objects[0]->length);",
          "649:  if (!data->type) {",
          "650:   return false;",
          "651:  }",
          "652:  RASN1Object *obj1 = object->list.objects[1];",
          "657:  }",
          "658:  return true;",
          "659: }",
          "",
          "[Removed Lines]",
          "653:  if (object->list.length > 1) {",
          "654:   if (obj1) {",
          "655:    data->data = rz_asn1_create_binary(obj1->sector, obj1->length);",
          "656:   }",
          "",
          "[Added Lines]",
          "651:  } else if (object->list.length < 2) {",
          "652:   return true;",
          "655:  if (obj1) {",
          "656:   data->data = rz_asn1_create_binary(obj1->sector, obj1->length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:  RASN1Object *object = rz_asn1_create_object(content->binary, content->length, content->binary);",
          "693:  if (!object || object->list.length < 2 || !object->list.objects ||",
          "694:   !object->list.objects[0] || !object->list.objects[1]) {",
          "696:   goto beach;",
          "697:  }",
          "698:  if (object->list.objects[0]) {",
          "699:   if (!rz_pkcs7_parse_spcdata(&spcinfo->data, object->list.objects[0])) {",
          "701:    goto beach;",
          "702:   }",
          "703:  }",
          "704:  if (object->list.objects[1]) {",
          "705:   if (!rz_pkcs7_parse_spcmessagedigest(&spcinfo->messageDigest, object->list.objects[1])) {",
          "707:    goto beach;",
          "708:   }",
          "709:  }",
          "",
          "[Removed Lines]",
          "695:   RZ_FREE(spcinfo);",
          "700:    RZ_FREE(spcinfo);",
          "706:    RZ_FREE(spcinfo);",
          "",
          "[Added Lines]",
          "695:   RZ_FREE_CUSTOM(spcinfo, rz_pkcs7_free_spcinfo);",
          "700:    RZ_FREE_CUSTOM(spcinfo, rz_pkcs7_free_spcinfo);",
          "706:    RZ_FREE_CUSTOM(spcinfo, rz_pkcs7_free_spcinfo);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05bbd147caccc60162d6fba9baaaf24befa281cd",
      "candidate_info": {
        "commit_hash": "05bbd147caccc60162d6fba9baaaf24befa281cd",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/05bbd147caccc60162d6fba9baaaf24befa281cd",
        "files": [
          "librz/bin/format/luac/luac_bin.c",
          "librz/bin/format/luac/luac_common.h",
          "librz/bin/p/bin_luac.c"
        ],
        "message": "Fix oob read on _luac_build_info and luac memleaks",
        "before_after_code_files": [
          "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c",
          "librz/bin/format/luac/luac_common.h||librz/bin/format/luac/luac_common.h",
          "librz/bin/p/bin_luac.c||librz/bin/p/bin_luac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2930"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c": [
          "File: librz/bin/format/luac/luac_bin.c -> librz/bin/format/luac/luac_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  rz_list_append(string_list, bin_string);",
          "71: }",
          "79: static void free_rz_section(RzBinSection *section) {",
          "80:  if (!section) {",
          "81:   return;",
          "",
          "[Removed Lines]",
          "73: static void try_free_empty_list(RzList *list) {",
          "74:  if (list != NULL) {",
          "75:   rz_list_free(list);",
          "76:  }",
          "77: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  RZ_FREE(addr);",
          "112: }",
          "114: LuacBinInfo *luac_build_info(LuaProto *proto) {",
          "115:  if (!proto) {",
          "116:   RZ_LOG_ERROR(\"Invalid luac file\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: void luac_build_info_free(LuacBinInfo *bin_info) {",
          "109:  if (!bin_info) {",
          "110:   return;",
          "111:  }",
          "112:  rz_list_free(bin_info->entry_list);",
          "113:  rz_list_free(bin_info->symbol_list);",
          "114:  rz_list_free(bin_info->section_list);",
          "115:  rz_list_free(bin_info->string_list);",
          "116:  free(bin_info);",
          "117: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  ret->string_list = rz_list_newf((RzListFree)free_rz_string);",
          "130:  if (!(ret->entry_list && ret->symbol_list && ret->section_list && ret->string_list)) {",
          "135:  }",
          "137:  _luac_build_info(proto, ret);",
          "",
          "[Removed Lines]",
          "131:   try_free_empty_list(ret->entry_list);",
          "132:   try_free_empty_list(ret->symbol_list);",
          "133:   try_free_empty_list(ret->section_list);",
          "134:   try_free_empty_list(ret->string_list);",
          "",
          "[Added Lines]",
          "136:   rz_list_free(ret->entry_list);",
          "137:   rz_list_free(ret->symbol_list);",
          "138:   rz_list_free(ret->section_list);",
          "139:   rz_list_free(ret->string_list);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:  char *section_name;",
          "228:  char *symbol_name;",
          "229:  char *proto_name;",
          "230:  RzListIter *iter;",
          "232:  ut64 current_offset;",
          "233:  ut64 current_size;",
          "238:  if (proto->name_size == 0 || proto->proto_name == NULL) {",
          "",
          "[Removed Lines]",
          "235:  int i = 0; // iter",
          "",
          "[Added Lines]",
          "235:  char **upvalue_names = NULL;",
          "237:  int i = 0; // iter",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:  }",
          "313:  }",
          "",
          "[Removed Lines]",
          "298:  char **upvalue_names;",
          "299:  int real_upvalue_cnt;",
          "300:  LuaDbgUpvalueEntry *debug_upv_entry;",
          "301:  real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
          "302:  upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
          "303:  if (!upvalue_names) {",
          "304:   return;",
          "305:  }",
          "306:  rz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {",
          "307:   upvalue_names[i] = (char *)debug_upv_entry->upvalue_name;",
          "308:   luac_add_string(",
          "309:    info->string_list,",
          "310:    upvalue_names[i],",
          "311:    debug_upv_entry->offset,",
          "312:    debug_upv_entry->name_len);",
          "",
          "[Added Lines]",
          "303:  size_t real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
          "304:  if (real_upvalue_cnt > 0) {",
          "305:   LuaDbgUpvalueEntry *debug_upv_entry;",
          "306:   upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
          "307:   if (!upvalue_names) {",
          "308:    free(proto_name);",
          "309:    return;",
          "310:   }",
          "312:   i = 0;",
          "313:   rz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {",
          "314:    upvalue_names[i] = (char *)debug_upv_entry->upvalue_name;",
          "315:    luac_add_string(",
          "316:     info->string_list,",
          "317:     upvalue_names[i],",
          "318:     debug_upv_entry->offset,",
          "319:     debug_upv_entry->name_len);",
          "320:    i++;",
          "321:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:   _luac_build_info(sub_proto, info);",
          "353:  }",
          "356: }",
          "",
          "[Removed Lines]",
          "355:  RZ_FREE(proto_name);",
          "",
          "[Added Lines]",
          "364:  free(upvalue_names);",
          "365:  free(proto_name);",
          "",
          "---------------"
        ],
        "librz/bin/format/luac/luac_common.h||librz/bin/format/luac/luac_common.h": [
          "File: librz/bin/format/luac/luac_common.h -> librz/bin/format/luac/luac_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: void luac_add_string(RzList *string_list, char *string, ut64 offset, ut64 size);",
          "195: LuacBinInfo *luac_build_info(LuaProto *proto);",
          "196: void _luac_build_info(LuaProto *proto, LuacBinInfo *info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: void luac_build_info_free(LuacBinInfo *bin_info);",
          "",
          "---------------"
        ],
        "librz/bin/p/bin_luac.c||librz/bin/p/bin_luac.c": [
          "File: librz/bin/p/bin_luac.c -> librz/bin/p/bin_luac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   return NULL;",
          "101:  }",
          "104: }",
          "106: static RzList *entries(RzBinFile *bf) {",
          "",
          "[Removed Lines]",
          "103:  return bin_info_obj->symbol_list;",
          "",
          "[Added Lines]",
          "103:  return rz_list_clone(bin_info_obj->symbol_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   return NULL;",
          "113:  }",
          "116: }",
          "118: static RzList *strings(RzBinFile *bf) {",
          "",
          "[Removed Lines]",
          "115:  return bin_info_obj->entry_list;",
          "",
          "[Added Lines]",
          "115:  return rz_list_clone(bin_info_obj->entry_list);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:   return NULL;",
          "125:  }",
          "128: }",
          "130: RzBinPlugin rz_bin_plugin_luac = {",
          "",
          "[Removed Lines]",
          "127:  return bin_info_obj->string_list;",
          "",
          "[Added Lines]",
          "127:  return rz_list_clone(bin_info_obj->string_list);",
          "128: }",
          "130: static void destroy(RzBinFile *bf) {",
          "131:  LuacBinInfo *bin_info_obj = GET_INTERNAL_BIN_INFO_OBJ(bf);",
          "132:  luac_build_info_free(bin_info_obj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:  .license = \"LGPL3\",",
          "134:  .get_sdb = NULL,",
          "135:  .load_buffer = &load_buffer,",
          "136:  .check_buffer = &check_buffer,",
          "137:  .baddr = NULL,",
          "138:  .entries = &entries,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  .destroy = &destroy,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e86b74b1d18ca5689dec02976b43eeeac91cca0",
      "candidate_info": {
        "commit_hash": "0e86b74b1d18ca5689dec02976b43eeeac91cca0",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/0e86b74b1d18ca5689dec02976b43eeeac91cca0",
        "files": [
          "librz/include/rz_util/rz_bitmap.h",
          "librz/util/bitmap.c"
        ],
        "message": "Fix RzBitmap length type and added ownership and checks.",
        "before_after_code_files": [
          "librz/include/rz_util/rz_bitmap.h||librz/include/rz_util/rz_bitmap.h",
          "librz/util/bitmap.c||librz/util/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2930"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/include/rz_util/rz_bitmap.h||librz/include/rz_util/rz_bitmap.h": [
          "File: librz/include/rz_util/rz_bitmap.h -> librz/include/rz_util/rz_bitmap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #endif",
          "18: typedef struct rz_bitmap_t {",
          "20:  RBitword *bitmap;",
          "21: } RzBitmap;",
          "30: #ifdef __cplusplus",
          "31: }",
          "",
          "[Removed Lines]",
          "19:  int length;",
          "23: RZ_API RzBitmap *rz_bitmap_new(size_t len);",
          "24: RZ_API void rz_bitmap_set_bytes(RzBitmap *b, const ut8 *buf, int len);",
          "25: RZ_API void rz_bitmap_free(RzBitmap *b);",
          "26: RZ_API void rz_bitmap_set(RzBitmap *b, size_t bit);",
          "27: RZ_API void rz_bitmap_unset(RzBitmap *b, size_t bit);",
          "28: RZ_API int rz_bitmap_test(RzBitmap *b, size_t bit);",
          "",
          "[Added Lines]",
          "19:  size_t length;",
          "23: RZ_API RZ_OWN RzBitmap *rz_bitmap_new(size_t len);",
          "24: RZ_API void rz_bitmap_set_bytes(RZ_NONNULL RzBitmap *b, RZ_NONNULL const ut8 *buf, size_t len);",
          "25: RZ_API void rz_bitmap_free(RZ_NULLABLE RzBitmap *b);",
          "26: RZ_API void rz_bitmap_set(RZ_NONNULL RzBitmap *b, size_t bit);",
          "27: RZ_API void rz_bitmap_unset(RZ_NONNULL RzBitmap *b, size_t bit);",
          "28: RZ_API int rz_bitmap_test(RZ_NONNULL RzBitmap *b, size_t bit);",
          "",
          "---------------"
        ],
        "librz/util/bitmap.c||librz/util/bitmap.c": [
          "File: librz/util/bitmap.c -> librz/util/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #define BITMAP_WORD_COUNT(bit) (BITWORD_MULT(bit) >> BITWORD_BITS_SHIFT)",
          "17:  RzBitmap *b = RZ_NEW0(RzBitmap);",
          "18:  if (!b) {",
          "19:   return NULL;",
          "20:  }",
          "22:  b->bitmap = calloc(BITMAP_WORD_COUNT(len), sizeof(RBitword));",
          "23:  return b;",
          "24: }",
          "27:  if (b->length < len) {",
          "28:   len = b->length;",
          "29:  }",
          "30:  memcpy(b->bitmap, buf, len);",
          "31: }",
          "34:  free(b->bitmap);",
          "35:  free(b);",
          "36: }",
          "39:  if (bit < b->length) {",
          "40:   b->bitmap[(bit >> BITWORD_BITS_SHIFT)] |=",
          "41:    ((RBitword)1 << (bit & BITWORD_BITS_MASK));",
          "42:  }",
          "43: }",
          "46:  if (bit < b->length) {",
          "47:   b->bitmap[(bit >> BITWORD_BITS_SHIFT)] &=",
          "48:    ~((RBitword)1 << (bit & BITWORD_BITS_MASK));",
          "49:  }",
          "50: }",
          "53:  if (bit < b->length) {",
          "54:   RBitword bword = b->bitmap[(bit >> BITWORD_BITS_SHIFT)];",
          "55:   return BITWORD_TEST(bword, (bit & BITWORD_BITS_MASK));",
          "",
          "[Removed Lines]",
          "16: RZ_API RzBitmap *rz_bitmap_new(size_t len) {",
          "21:  b->length = len;",
          "26: RZ_API void rz_bitmap_set_bytes(RzBitmap *b, const ut8 *buf, int len) {",
          "33: RZ_API void rz_bitmap_free(RzBitmap *b) {",
          "38: RZ_API void rz_bitmap_set(RzBitmap *b, size_t bit) {",
          "45: RZ_API void rz_bitmap_unset(RzBitmap *b, size_t bit) {",
          "52: RZ_API int rz_bitmap_test(RzBitmap *b, size_t bit) {",
          "",
          "[Added Lines]",
          "16: RZ_API RZ_OWN RzBitmap *rz_bitmap_new(size_t len) {",
          "17:  if (len < 1) {",
          "18:   return NULL;",
          "19:  }",
          "27:  if (!b->bitmap) {",
          "28:   free(b);",
          "29:   return NULL;",
          "30:  }",
          "31:  b->length = len;",
          "35: RZ_API void rz_bitmap_set_bytes(RZ_NONNULL RzBitmap *b, RZ_NONNULL const ut8 *buf, size_t len) {",
          "36:  rz_return_if_fail(b && buf);",
          "43: RZ_API void rz_bitmap_free(RZ_NULLABLE RzBitmap *b) {",
          "44:  if (!b) {",
          "45:   return;",
          "46:  }",
          "51: RZ_API void rz_bitmap_set(RZ_NONNULL RzBitmap *b, size_t bit) {",
          "52:  rz_return_if_fail(b);",
          "59: RZ_API void rz_bitmap_unset(RZ_NONNULL RzBitmap *b, size_t bit) {",
          "60:  rz_return_if_fail(b);",
          "67: RZ_API int rz_bitmap_test(RZ_NONNULL RzBitmap *b, size_t bit) {",
          "68:  rz_return_val_if_fail(b, -1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b118bf67300182cb068d9e9bb23e85bd052bf86",
      "candidate_info": {
        "commit_hash": "6b118bf67300182cb068d9e9bb23e85bd052bf86",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/6b118bf67300182cb068d9e9bb23e85bd052bf86",
        "files": [
          "librz/util/x509.c"
        ],
        "message": "Fix oob read on rz_x509_parse_tbscertificate",
        "before_after_code_files": [
          "librz/util/x509.c||librz/util/x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2930"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/util/x509.c||librz/util/x509.c": [
          "File: librz/util/x509.c -> librz/util/x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   elems[0]->form == FORM_CONSTRUCTED &&",
          "176:   elems[0]->list.objects[0]->tag == TAG_INTEGER &&",
          "177:   elems[0]->list.objects[0]->length == 1) {",
          "179:   tbsc->version = (ut32)elems[0]->list.objects[0]->sector[0];",
          "180:   shift = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   if (object->list.length < 7) {",
          "180:    return false;",
          "181:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}