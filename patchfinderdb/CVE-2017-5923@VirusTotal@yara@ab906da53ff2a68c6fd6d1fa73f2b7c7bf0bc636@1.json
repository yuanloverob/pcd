{
  "cve_id": "CVE-2017-5923",
  "cve_desc": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted rule that is mishandled in the yara_yyparse function.",
  "repo": "VirusTotal/yara",
  "patch_hash": "ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
  "patch_info": {
    "commit_hash": "ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
    "files": [
      "libyara/grammar.c",
      "libyara/grammar.y"
    ],
    "message": "Fix issue #597",
    "before_after_code_files": [
      "libyara/grammar.c||libyara/grammar.c",
      "libyara/grammar.y||libyara/grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/grammar.c||libyara/grammar.c": [
      "File: libyara/grammar.c -> libyara/grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "611:      347,   353,   356,   374,   387,   424,   425,   430,   446,   459,",
      "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
      "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
      "622: };",
      "623: #endif",
      "",
      "[Removed Lines]",
      "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
      "615:      994,  1007,  1018,  1027,  1057,  1026,  1171,  1170,  1249,  1255,",
      "616:     1262,  1261,  1324,  1323,  1384,  1393,  1402,  1411,  1420,  1429,",
      "617:     1438,  1442,  1450,  1451,  1456,  1478,  1490,  1506,  1505,  1511,",
      "618:     1522,  1523,  1528,  1535,  1546,  1547,  1551,  1559,  1563,  1573,",
      "619:     1587,  1603,  1613,  1622,  1647,  1659,  1671,  1687,  1699,  1715,",
      "620:     1760,  1779,  1797,  1815,  1833,  1859,  1877,  1887,  1897,  1907,",
      "621:     1917,  1927,  1937",
      "",
      "[Added Lines]",
      "614:      802,   806,   833,   871,   917,   939,   948,   957,   972,   984,",
      "615:      998,  1011,  1022,  1033,  1063,  1032,  1177,  1176,  1255,  1261,",
      "616:     1268,  1267,  1330,  1329,  1390,  1399,  1408,  1417,  1426,  1435,",
      "617:     1444,  1448,  1456,  1457,  1462,  1484,  1496,  1512,  1511,  1517,",
      "618:     1528,  1529,  1534,  1541,  1552,  1553,  1557,  1565,  1569,  1579,",
      "619:     1593,  1609,  1619,  1628,  1653,  1665,  1677,  1693,  1705,  1721,",
      "620:     1766,  1785,  1803,  1821,  1839,  1865,  1883,  1893,  1903,  1913,",
      "621:     1923,  1933,  1943",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2361:           case EXPRESSION_TYPE_REGEXP:",
      "2362:             strlcpy((yyval.c_string), \"r\", MAX_FUNCTION_ARGS);",
      "2363:             break;",
      "2364:         }",
      "2366:         ERROR_IF((yyval.c_string) == NULL);",
      "2367:       }",
      "2369:     break;",
      "2371:   case 52:",
      "2373:     {",
      "2374:         if (strlen((yyvsp[-2].c_string)) == MAX_FUNCTION_ARGS)",
      "2375:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2364:           default:",
      "2365:             assert(FALSE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2394:             case EXPRESSION_TYPE_REGEXP:",
      "2395:               strlcat((yyvsp[-2].c_string), \"r\", MAX_FUNCTION_ARGS);",
      "2396:               break;",
      "2397:           }",
      "2398:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2399:             default:",
      "2400:               assert(FALSE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2582:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2583:       }",
      "2585:     break;",
      "2587:   case 62:",
      "2589:     {",
      "2590:         if (compiler->loop_depth > 0)",
      "2591:         {",
      "2592:           compiler->loop_depth--;",
      "2593:           compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2594:         }",
      "2595:       }",
      "2597:     break;",
      "2599:   case 63:",
      "2601:     {",
      "2602:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2600:         YYERROR;",
      "",
      "---------------"
    ],
    "libyara/grammar.y||libyara/grammar.y": [
      "File: libyara/grammar.y -> libyara/grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "824:           case EXPRESSION_TYPE_REGEXP:",
      "825:             strlcpy($$, \"r\", MAX_FUNCTION_ARGS);",
      "826:             break;",
      "827:         }",
      "829:         ERROR_IF($$ == NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "827:           default:",
      "828:             assert(FALSE);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853:             case EXPRESSION_TYPE_REGEXP:",
      "854:               strlcat($1, \"r\", MAX_FUNCTION_ARGS);",
      "855:               break;",
      "856:           }",
      "857:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "858:             default:",
      "859:               assert(FALSE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1022:           compiler->loop_depth--;",
      "1023:           compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "1024:         }",
      "1025:       }",
      "1026:     | _FOR_ for_expression _IDENTIFIER_ _IN_",
      "1027:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1030:         YYERROR;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07210d935aec43062403b7e1f446c36026957299",
      "candidate_info": {
        "commit_hash": "07210d935aec43062403b7e1f446c36026957299",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/07210d935aec43062403b7e1f446c36026957299",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/include/yara/integers.h"
        ],
        "message": "Define INT64_MAX in Visual Studio.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/integers.h||libyara/include/yara/integers.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #include <string.h>",
          "78: #include <limits.h>",
          "79: #include <stddef.h>",
          "82: #include <yara/integers.h>",
          "83: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "80: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613: static const yytype_uint16 yyrline[] =",
          "614: {",
          "628: };",
          "629: #endif",
          "",
          "[Removed Lines]",
          "615:        0,   226,   226,   228,   229,   230,   231,   232,   237,   250,",
          "616:      259,   249,   282,   285,   313,   316,   343,   348,   349,   354,",
          "617:      355,   361,   364,   382,   395,   432,   433,   438,   454,   467,",
          "618:      480,   493,   510,   511,   517,   516,   532,   531,   547,   561,",
          "619:      562,   567,   568,   569,   570,   575,   660,   706,   764,   809,",
          "620:      810,   814,   841,   879,   921,   943,   952,   961,   976,   988,",
          "621:     1002,  1015,  1026,  1037,  1067,  1036,  1181,  1180,  1259,  1265,",
          "622:     1272,  1271,  1325,  1324,  1376,  1385,  1394,  1403,  1412,  1421,",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "626:     1752,  1771,  1805,  1840,  1874,  1899,  1917,  1927,  1937,  1947,",
          "627:     1957,  1967,  1977",
          "",
          "[Added Lines]",
          "614:        0,   225,   225,   227,   228,   229,   230,   231,   236,   249,",
          "615:      258,   248,   281,   284,   312,   315,   342,   347,   348,   353,",
          "616:      354,   360,   363,   381,   394,   431,   432,   437,   453,   466,",
          "617:      479,   492,   509,   510,   516,   515,   531,   530,   546,   560,",
          "618:      561,   566,   567,   568,   569,   574,   659,   705,   763,   808,",
          "619:      809,   813,   840,   878,   920,   942,   951,   960,   975,   987,",
          "620:     1001,  1014,  1025,  1036,  1066,  1035,  1180,  1179,  1258,  1264,",
          "621:     1271,  1270,  1324,  1323,  1375,  1384,  1393,  1402,  1411,  1420,",
          "622:     1429,  1433,  1441,  1442,  1447,  1469,  1481,  1497,  1496,  1502,",
          "623:     1513,  1514,  1519,  1526,  1537,  1538,  1542,  1550,  1554,  1564,",
          "624:     1578,  1594,  1604,  1613,  1638,  1650,  1662,  1678,  1690,  1706,",
          "625:     1751,  1770,  1804,  1839,  1873,  1898,  1916,  1926,  1936,  1946,",
          "626:     1956,  1966,  1976",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <string.h>",
          "36: #include <limits.h>",
          "37: #include <stddef.h>",
          "40: #include <yara/integers.h>",
          "41: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "38: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/include/yara/integers.h||libyara/include/yara/integers.h": [
          "File: libyara/include/yara/integers.h -> libyara/include/yara/integers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "55: #endif",
          "57: #else",
          "62: #include <stdint.h>",
          "64: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #ifndef INT8_MIN",
          "59: #define INT8_MIN         (-127i8 - 1)",
          "60: #endif",
          "62: #ifndef INT8_MIN",
          "63: #define INT16_MIN        (-32767i16 - 1)",
          "64: #endif",
          "66: #ifndef INT32_MIN",
          "67: #define INT32_MIN        (-2147483647i32 - 1)",
          "68: #endif",
          "70: #ifndef INT64_MIN",
          "71: #define INT64_MIN        (-9223372036854775807i64 - 1)",
          "72: #endif",
          "74: #ifndef INT8_MAX",
          "75: #define INT8_MAX         127i8",
          "76: #endif",
          "78: #ifndef INT16_MAX",
          "79: #define INT16_MAX        32767i16",
          "80: #endif",
          "82: #ifndef INT32_MAX",
          "83: #define INT32_MAX        2147483647i32",
          "84: #endif",
          "86: #ifndef INT64_MAX",
          "87: #define INT64_MAX        9223372036854775807i64",
          "88: #endif",
          "90: #ifndef UINT8_MAX",
          "91: #define UINT8_MAX        0xffui8",
          "92: #endif",
          "94: #ifndef UINT16_MAX",
          "95: #define UINT16_MAX       0xffffui16",
          "96: #endif",
          "98: #ifndef UINT32_MAX",
          "99: #define UINT32_MAX       0xffffffffui32",
          "100: #endif",
          "102: #ifndef UINT64_MAX",
          "103: #define UINT64_MAX       0xffffffffffffffffui64",
          "104: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41879d00a26fc7c5526f5835ffdf253453e86a7a",
      "candidate_info": {
        "commit_hash": "41879d00a26fc7c5526f5835ffdf253453e86a7a",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/41879d00a26fc7c5526f5835ffdf253453e86a7a",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y"
        ],
        "message": "Fix memory leak an error occurs parsing a function call.\n\nExample:\n\nimport \"math\"\n\nrule test {\n  condition:\n    # This causes a syntax error because of the trailing comma.\n    math.in_range(5,)\n}",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607: static const yytype_uint16 yyrline[] =",
          "608: {",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "609:        0,   218,   218,   220,   221,   222,   223,   224,   229,   242,",
          "610:      251,   241,   274,   277,   305,   308,   335,   340,   341,   346,",
          "611:      347,   353,   356,   374,   387,   424,   425,   430,   446,   459,",
          "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
          "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
          "614:      802,   806,   833,   871,   913,   935,   944,   953,   968,   980,",
          "615:      994,  1007,  1018,  1029,  1059,  1028,  1173,  1172,  1251,  1257,",
          "616:     1264,  1263,  1317,  1316,  1368,  1377,  1386,  1395,  1404,  1413,",
          "617:     1422,  1426,  1434,  1435,  1440,  1462,  1474,  1490,  1489,  1495,",
          "618:     1506,  1507,  1512,  1519,  1530,  1531,  1535,  1543,  1547,  1557,",
          "619:     1571,  1587,  1597,  1606,  1631,  1643,  1655,  1671,  1683,  1699,",
          "620:     1744,  1763,  1781,  1799,  1817,  1843,  1861,  1871,  1881,  1891,",
          "621:     1901,  1911,  1921",
          "",
          "[Added Lines]",
          "609:        0,   220,   220,   222,   223,   224,   225,   226,   231,   244,",
          "610:      253,   243,   276,   279,   307,   310,   337,   342,   343,   348,",
          "611:      349,   355,   358,   376,   389,   426,   427,   432,   448,   461,",
          "612:      474,   487,   504,   505,   511,   510,   526,   525,   541,   555,",
          "613:      556,   561,   562,   563,   564,   569,   654,   700,   758,   803,",
          "614:      804,   808,   835,   873,   915,   937,   946,   955,   970,   982,",
          "615:      996,  1009,  1020,  1031,  1061,  1030,  1175,  1174,  1253,  1259,",
          "616:     1266,  1265,  1319,  1318,  1370,  1379,  1388,  1397,  1406,  1415,",
          "617:     1424,  1428,  1436,  1437,  1442,  1464,  1476,  1492,  1491,  1497,",
          "618:     1508,  1509,  1514,  1521,  1532,  1533,  1537,  1545,  1549,  1559,",
          "619:     1573,  1589,  1599,  1608,  1633,  1645,  1657,  1673,  1685,  1701,",
          "620:     1746,  1765,  1783,  1801,  1819,  1845,  1863,  1873,  1883,  1893,",
          "621:     1903,  1913,  1923",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1333:   switch (yytype)",
          "1334:     {",
          "1337:       { yr_free(((*yyvaluep).c_string)); }",
          "1339:         break;",
          "1343:       { yr_free(((*yyvaluep).c_string)); }",
          "1345:         break;",
          "1349:       { yr_free(((*yyvaluep).c_string)); }",
          "1351:         break;",
          "1355:       { yr_free(((*yyvaluep).c_string)); }",
          "1357:         break;",
          "1361:       { yr_free(((*yyvaluep).c_string)); }",
          "1363:         break;",
          "1367:       { yr_free(((*yyvaluep).c_string)); }",
          "1369:         break;",
          "1373:       { yr_free(((*yyvaluep).sized_string)); }",
          "1375:         break;",
          "1379:       { yr_free(((*yyvaluep).sized_string)); }",
          "1381:         break;",
          "1385:       { yr_free(((*yyvaluep).sized_string)); }",
          "1387:         break;",
          "1390:       default:",
          "1391:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:       { yr_free(((*yyvaluep).c_string)); }",
          "1393:         break;",
          "1397:       { yr_free(((*yyvaluep).c_string)); }",
          "1399:         break;",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: %destructor { yr_free($$); } _HEX_STRING_",
          "202: %destructor { yr_free($$); } _REGEXP_",
          "204: %union {",
          "205:   EXPRESSION      expression;",
          "206:   SIZED_STRING*   sized_string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: %destructor { yr_free($$); } arguments",
          "204: %destructor { yr_free($$); } arguments_list",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3921f16018c7354e8f01c26e0f552ea181edb71f",
      "candidate_info": {
        "commit_hash": "3921f16018c7354e8f01c26e0f552ea181edb71f",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/3921f16018c7354e8f01c26e0f552ea181edb71f",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.y"
        ],
        "message": "Use %PRId64 instead of %lld for printing int64_t",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:     1431,  1435,  1443,  1444,  1449,  1471,  1483,  1499,  1498,  1504,",
          "625:     1515,  1516,  1521,  1528,  1539,  1540,  1544,  1552,  1556,  1566,",
          "626:     1580,  1596,  1606,  1615,  1640,  1652,  1664,  1680,  1692,  1708,",
          "629: };",
          "630: #endif",
          "",
          "[Removed Lines]",
          "627:     1753,  1772,  1804,  1833,  1861,  1886,  1904,  1914,  1924,  1934,",
          "628:     1944,  1954,  1964",
          "",
          "[Added Lines]",
          "627:     1753,  1772,  1804,  1837,  1869,  1894,  1912,  1922,  1932,  1942,",
          "628:     1952,  1962,  1972",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3546:               (yyvsp[-2].expression).value.integer < INT64_MIN + (yyvsp[0].expression).value.integer)",
          "3547:           {",
          "3548:             yr_compiler_set_error_extra_info_fmt(",
          "3550:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3551:           }",
          "",
          "[Removed Lines]",
          "3549:                 compiler, \"%lld - %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "[Added Lines]",
          "3549:                 compiler,",
          "3550:                 \"%\" PRId64 \" - %\" PRId64,",
          "3551:                 (yyvsp[-2].expression).value.integer,",
          "3552:                 (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3578:               (yyvsp[-2].expression).value.integer > INT64_MAX / (yyvsp[0].expression).value.integer)",
          "3579:           {",
          "3580:             yr_compiler_set_error_extra_info_fmt(",
          "3582:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3583:           }",
          "",
          "[Removed Lines]",
          "3581:                 compiler, \"%lld * %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "[Added Lines]",
          "3585:                 compiler,",
          "3586:                 \"%\" PRId64 \" * %\" PRId64,",
          "3587:                 (yyvsp[-2].expression).value.integer,",
          "3588:                 (yyvsp[0].expression).value.integer);",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1816:               $1.value.integer < INT64_MIN + $3.value.integer)",
          "1817:           {",
          "1818:             yr_compiler_set_error_extra_info_fmt(",
          "1820:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1821:           }",
          "",
          "[Removed Lines]",
          "1819:                 compiler, \"%lld - %lld\", $1.value.integer, $3.value.integer);",
          "",
          "[Added Lines]",
          "1819:                 compiler,",
          "1820:                 \"%\" PRId64 \" - %\" PRId64,",
          "1821:                 $1.value.integer,",
          "1822:                 $3.value.integer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1844:               $1.value.integer > INT64_MAX / $3.value.integer)",
          "1845:           {",
          "1846:             yr_compiler_set_error_extra_info_fmt(",
          "1848:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1849:           }",
          "",
          "[Removed Lines]",
          "1847:                 compiler, \"%lld * %lld\", $1.value.integer, $3.value.integer);",
          "",
          "[Added Lines]",
          "1851:                 compiler,",
          "1852:                 \"%\" PRId64 \" * %\" PRId64,",
          "1853:                 $1.value.integer,",
          "1854:                 $3.value.integer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22d7a948e0eb86fb2c781b2fc712621080927a22",
      "candidate_info": {
        "commit_hash": "22d7a948e0eb86fb2c781b2fc712621080927a22",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/22d7a948e0eb86fb2c781b2fc712621080927a22",
        "files": [
          "libyara/compiler.c",
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/include/yara/error.h",
          "tests/test-rules.c"
        ],
        "message": "Check for some integer overflow situations.",
        "before_after_code_files": [
          "libyara/compiler.c||libyara/compiler.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/error.h||libyara/include/yara/error.h",
          "tests/test-rules.c||tests/test-rules.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/compiler.c||libyara/compiler.c": [
          "File: libyara/compiler.c -> libyara/compiler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1181:           compiler->last_error_extra_info,",
          "1182:           max_strings_per_rule);",
          "1183:       break;",
          "1184:   }",
          "1186:   return buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1184:     case ERROR_INTEGER_OVERFLOW:",
          "1185:       snprintf(",
          "1186:           buffer,",
          "1187:           buffer_size,",
          "1188:           \"integer overflow in expression \\\"%s\\\"\",",
          "1189:           compiler->last_error_extra_info);",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "628: };",
          "629: #endif",
          "",
          "[Removed Lines]",
          "626:     1752,  1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,",
          "627:     1909,  1919,  1929",
          "",
          "[Added Lines]",
          "626:     1752,  1771,  1799,  1828,  1856,  1881,  1899,  1909,  1919,  1929,",
          "627:     1939,  1949,  1959",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3491:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3492:       }",
          "3494:     break;",
          "3496:   case 111:",
          "3498:     {",
          "3499:         compiler->last_result = yr_parser_reduce_operation(",
          "3500:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3504:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3505:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3506:         {",
          "3507:           (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3508:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3509:         }",
          "",
          "[Removed Lines]",
          "3502:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3505:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3506:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3507:               (yyvsp[0].expression).value.integer > 0 &&",
          "3508:               (yyvsp[-2].expression).value.integer > INT64_MAX - (yyvsp[0].expression).value.integer)",
          "3509:           {",
          "3510:             yr_compiler_set_error_extra_info_fmt(",
          "3511:                 compiler, \"%lld + %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3512:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3513:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3511:         {",
          "3512:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3513:         }",
          "3514:       }",
          "3516:     break;",
          "3518:   case 112:",
          "3520:     {",
          "3521:         compiler->last_result = yr_parser_reduce_operation(",
          "3522:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3526:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3527:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3528:         {",
          "3529:           (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3530:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3531:         }",
          "",
          "[Removed Lines]",
          "3524:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3523:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3537:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3538:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3539:               (yyvsp[-2].expression).value.integer < 0 &&",
          "3540:               (yyvsp[0].expression).value.integer > 0 &&",
          "3541:               (yyvsp[-2].expression).value.integer < INT64_MIN + (yyvsp[0].expression).value.integer)",
          "3542:           {",
          "3543:             yr_compiler_set_error_extra_info_fmt(",
          "3544:                 compiler, \"%lld - %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3545:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3546:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3533:         {",
          "3534:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3535:         }",
          "3536:       }",
          "3538:     break;",
          "3540:   case 113:",
          "3542:     {",
          "3543:         compiler->last_result = yr_parser_reduce_operation(",
          "3544:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3548:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3549:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3550:         {",
          "3551:           (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3552:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3553:         }",
          "",
          "[Removed Lines]",
          "3546:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3556:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3570:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3571:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3572:               (yyvsp[0].expression).value.integer != 0 &&",
          "3573:               (yyvsp[-2].expression).value.integer > INT64_MAX / (yyvsp[0].expression).value.integer)",
          "3574:           {",
          "3575:             yr_compiler_set_error_extra_info_fmt(",
          "3576:                 compiler, \"%lld * %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3577:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3578:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3555:         {",
          "3556:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3557:         }",
          "3558:       }",
          "3560:     break;",
          "3562:   case 114:",
          "3564:     {",
          "3565:         compiler->last_result = yr_parser_reduce_operation(",
          "3566:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3570:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3571:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3572:         {",
          "",
          "[Removed Lines]",
          "3568:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3588:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3578:           else",
          "3579:           {",
          "3580:             compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "3582:           }",
          "3583:         }",
          "3584:         else",
          "3585:         {",
          "3586:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3587:         }",
          "3588:       }",
          "3590:     break;",
          "3592:   case 115:",
          "3594:     {",
          "3595:         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3596:         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "",
          "[Removed Lines]",
          "3581:             fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3617:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1773:         compiler->last_result = yr_parser_reduce_operation(",
          "1774:             yyscanner, \"+\", $1, $3);",
          "1778:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1779:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1780:         {",
          "1781:           $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);",
          "1782:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1783:         }",
          "",
          "[Removed Lines]",
          "1776:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1779:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1780:               !IS_UNDEFINED($3.value.integer) &&",
          "1781:               $3.value.integer > 0 &&",
          "1782:               $1.value.integer > INT64_MAX - $3.value.integer)",
          "1783:           {",
          "1784:             yr_compiler_set_error_extra_info_fmt(",
          "1785:                 compiler, \"%lld + %lld\", $1.value.integer, $3.value.integer);",
          "1786:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1787:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1785:         {",
          "1786:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1787:         }",
          "1788:       }",
          "1789:     | primary_expression '-' primary_expression",
          "1790:       {",
          "1791:         compiler->last_result = yr_parser_reduce_operation(",
          "1792:             yyscanner, \"-\", $1, $3);",
          "1796:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1797:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1798:         {",
          "1799:           $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);",
          "1800:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1801:         }",
          "",
          "[Removed Lines]",
          "1794:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1797:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "1807:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1808:               !IS_UNDEFINED($3.value.integer) &&",
          "1809:               $1.value.integer < 0 &&",
          "1810:               $3.value.integer > 0 &&",
          "1811:               $1.value.integer < INT64_MIN + $3.value.integer)",
          "1812:           {",
          "1813:             yr_compiler_set_error_extra_info_fmt(",
          "1814:                 compiler, \"%lld - %lld\", $1.value.integer, $3.value.integer);",
          "1815:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1816:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1803:         {",
          "1804:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1805:         }",
          "1806:       }",
          "1807:     | primary_expression '*' primary_expression",
          "1808:       {",
          "1809:         compiler->last_result = yr_parser_reduce_operation(",
          "1810:             yyscanner, \"*\", $1, $3);",
          "1814:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1815:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1816:         {",
          "1817:           $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);",
          "1818:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1819:         }",
          "",
          "[Removed Lines]",
          "1812:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1826:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "1836:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1837:               !IS_UNDEFINED($3.value.integer) &&",
          "1838:               $3.value.integer != 0 &&",
          "1839:               $1.value.integer > INT64_MAX / $3.value.integer)",
          "1840:           {",
          "1841:             yr_compiler_set_error_extra_info_fmt(",
          "1842:                 compiler, \"%lld * %lld\", $1.value.integer, $3.value.integer);",
          "1843:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1844:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1821:         {",
          "1822:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1823:         }",
          "1824:       }",
          "1825:     | primary_expression '\\\\' primary_expression",
          "1826:       {",
          "1827:         compiler->last_result = yr_parser_reduce_operation(",
          "1828:             yyscanner, \"\\\\\", $1, $3);",
          "1832:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1833:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1834:         {",
          "",
          "[Removed Lines]",
          "1830:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1854:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1840:           else",
          "1841:           {",
          "1842:             compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "1844:           }",
          "1845:         }",
          "1846:         else",
          "1847:         {",
          "1848:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1849:         }",
          "1850:       }",
          "1851:     | primary_expression '%' primary_expression",
          "1852:       {",
          "",
          "[Removed Lines]",
          "1843:             fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1879:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/include/yara/error.h||libyara/include/yara/error.h": [
          "File: libyara/include/yara/error.h -> libyara/include/yara/error.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: #define ERROR_REGULAR_EXPRESSION_TOO_COMPLEX    49",
          "95: #define ERROR_INVALID_MODULE_NAME               50",
          "96: #define ERROR_TOO_MANY_STRINGS                  51",
          "99: #define FAIL_ON_ERROR(x) { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: #define ERROR_INTEGER_OVERFLOW                  52",
          "",
          "---------------"
        ],
        "tests/test-rules.c||tests/test-rules.c": [
          "File: tests/test-rules.c -> tests/test-rules.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   assert_error(  // integer too long",
          "215:     \"rule test { condition: 0o1000000000000000000000 > 0 }\",",
          "216:     ERROR_SYNTAX_ERROR);",
          "217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:   assert_error(  // integer overflow",
          "219:     \"rule test { condition: 0x7FFFFFFFFFFFFFFF + 1 > 0 }\",",
          "220:     ERROR_INTEGER_OVERFLOW);",
          "222:   assert_error(  // integer overflow",
          "223:     \"rule test { condition: 9223372036854775807 + 1 > 0 }\",",
          "224:     ERROR_INTEGER_OVERFLOW);",
          "226:   assert_error(  // integer overflow",
          "227:     \"rule test { condition: -9223372036854775807 - 2 > 0 }\",",
          "228:     ERROR_INTEGER_OVERFLOW);",
          "230:   assert_error(  // integer overflow",
          "231:     \"rule test { condition: 0x4000000000000000 * 2 }\",",
          "232:     ERROR_INTEGER_OVERFLOW);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3191bd529bd973aa4351c85a0735357a9a37b268",
      "candidate_info": {
        "commit_hash": "3191bd529bd973aa4351c85a0735357a9a37b268",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/3191bd529bd973aa4351c85a0735357a9a37b268",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y"
        ],
        "message": "Prevent integer overflow.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:     1431,  1435,  1443,  1444,  1449,  1471,  1483,  1499,  1498,  1504,",
          "625:     1515,  1516,  1521,  1528,  1539,  1540,  1544,  1552,  1556,  1566,",
          "626:     1580,  1596,  1606,  1615,  1640,  1652,  1664,  1680,  1692,  1708,",
          "629: };",
          "630: #endif",
          "",
          "[Removed Lines]",
          "627:     1753,  1772,  1804,  1837,  1869,  1894,  1912,  1922,  1932,  1942,",
          "628:     1952,  1962,  1972",
          "",
          "[Added Lines]",
          "627:     1753,  1772,  1806,  1841,  1875,  1900,  1918,  1928,  1938,  1948,",
          "628:     1958,  1968,  1978",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3517:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3518:           }",
          "3522:         }",
          "3523:         else",
          "3524:         {",
          "",
          "[Removed Lines]",
          "3520:           (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3521:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "3519:           else",
          "3520:           {",
          "3521:             (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3522:             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3523:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3554:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3555:           }",
          "3559:         }",
          "3560:         else",
          "3561:         {",
          "",
          "[Removed Lines]",
          "3557:           (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3558:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "3558:           else",
          "3559:           {",
          "3560:             (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3561:             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3562:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3590:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3591:           }",
          "3595:         }",
          "3596:         else",
          "3597:         {",
          "",
          "[Removed Lines]",
          "3593:           (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3594:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "3596:           else",
          "3597:           {",
          "3598:             (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3599:             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3600:           }",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1791:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1792:           }",
          "1796:         }",
          "1797:         else",
          "1798:         {",
          "",
          "[Removed Lines]",
          "1794:           $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);",
          "1795:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "1793:           else",
          "1794:           {",
          "1795:             $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);",
          "1796:             $$.type = EXPRESSION_TYPE_INTEGER;",
          "1797:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1824:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1825:           }",
          "1829:         }",
          "1830:         else",
          "1831:         {",
          "",
          "[Removed Lines]",
          "1827:           $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);",
          "1828:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "1828:           else",
          "1829:           {",
          "1830:             $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);",
          "1831:             $$.type = EXPRESSION_TYPE_INTEGER;",
          "1832:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1856:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1857:           }",
          "1861:         }",
          "1862:         else",
          "1863:         {",
          "",
          "[Removed Lines]",
          "1859:           $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);",
          "1860:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "",
          "[Added Lines]",
          "1862:           else",
          "1863:           {",
          "1864:             $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);",
          "1865:             $$.type = EXPRESSION_TYPE_INTEGER;",
          "1866:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}