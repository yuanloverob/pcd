{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
      "candidate_info": {
        "commit_hash": "87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ae34ba1ab96e0e6811c0c49324d562bbb9e6a0",
        "files": [
          "ext/misc/regexp.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add some static to the 'regexp' extension.\n\nFossilOrigin-Name: a21d1dde73f811244b5b43f9fed5877263a9c5061470221f417e501f5530edfa",
        "before_after_code_files": [
          "ext/misc/regexp.c||ext/misc/regexp.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/regexp.c||ext/misc/regexp.c": [
          "File: ext/misc/regexp.c -> ext/misc/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   if( pRe ){",
          "615:     sqlite3_free(pRe->aOp);",
          "616:     sqlite3_free(pRe->aArg);",
          "",
          "[Removed Lines]",
          "613: void re_free(ReCompiled *pRe){",
          "",
          "[Added Lines]",
          "613: static void re_free(ReCompiled *pRe){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:   ReCompiled *pRe;",
          "629:   const char *zErr;",
          "630:   int i, j;",
          "",
          "[Removed Lines]",
          "627: const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "[Added Lines]",
          "627: static const char *re_compile(ReCompiled **ppRe, const char *zIn, int noCase){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 408144a1832569ced8e04840f0dd36a3867405f36b13631b0f13c0f7b8a0fb01",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
      "candidate_info": {
        "commit_hash": "dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd6cc9b52abf6c4ae15a57a9f3d6e3c1e848f589",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/update.c"
        ],
        "message": "Work toward getting generated columns to work with triggers.  Still more work to do in this area.\n\nFossilOrigin-Name: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb9c9bb284d441bd7aa34c87b6fd8ce57d036c17623d82354154fc6286bdd134",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   for(i=0, n=0; i<iCol; i++){",
          "935:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "936:   }",
          "938: }",
          "939: #endif",
          "",
          "[Removed Lines]",
          "937:   return n;",
          "",
          "[Added Lines]",
          "959:   if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "961:     return pTab->nNVCol + i - n;",
          "962:   }else{",
          "964:     return n;",
          "965:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3604:               return 0;",
          "3605:             }",
          "3606:             pCol->colFlags |= COLFLAG_BUSY;",
          "3614:             }",
          "3615:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3617:           }else",
          "3619:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "",
          "[Removed Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3608:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3609:             }else{",
          "3610:               target = iSrc;",
          "3611:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3612:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3613:               }",
          "3616:             return target;",
          "",
          "[Added Lines]",
          "3607:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3608:               sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:             return iSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4090:       Table *pTab = pExpr->y.pTab;",
          "4093:       assert( pExpr->iTable==0 || pExpr->iTable==1 );",
          "4096:       assert( p1>=0 && p1<(pTab->nCol*2+2) );",
          "4098:       sqlite3VdbeAddOp2(v, OP_Param, p1, target);",
          "4099:       VdbeComment((v, \"r[%d]=%s.%s\", target,",
          "4100:         (pExpr->iTable ? \"new\" : \"old\"),",
          "4102:       ));",
          "4104: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "4091:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1 + pExpr->iColumn;",
          "4094:       assert( pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol );",
          "4095:       assert( pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey );",
          "4101:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[pExpr->iColumn].zName)",
          "",
          "[Added Lines]",
          "4086:       int iCol = pExpr->iColumn;",
          "4087:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1",
          "4088:                      + (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);",
          "4091:       assert( iCol>=-1 && iCol<pTab->nCol );",
          "4092:       assert( pTab->iPKey<0 || iCol!=pTab->iPKey );",
          "4098:         (pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[iCol].zName)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4113:         sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "4114:       }",
          "4115: #endif",
          "",
          "[Removed Lines]",
          "4110:       if( pExpr->iColumn>=0",
          "4111:        && pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "4112:       ){",
          "",
          "[Added Lines]",
          "4107:       if( iCol>=0 && pTab->aCol[iCol].affinity==SQLITE_AFF_REAL ){",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "",
          "[Removed Lines]",
          "212: void sqlite3ComputeStoredColumns(",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "",
          "[Added Lines]",
          "212: void sqlite3ComputeGeneratedColumns(",
          "218:   int nv;",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   pParse->iSelfTab = -iRegStore;",
          "234:     u32 colFlags = pTab->aCol[i].colFlags;",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "242:     }",
          "243:   }",
          "244:   pParse->iSelfTab = 0;",
          "245: }",
          "",
          "[Removed Lines]",
          "233:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "235:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "237:       iRegStore--;",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "240:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "",
          "[Added Lines]",
          "234:   for(i=nv=0; i<pTab->nCol; i++){",
          "236:     if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "237:       assert( colFlags & COLFLAG_GENERATED );",
          "238:       if( colFlags & COLFLAG_VIRTUAL ){",
          "240:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "241:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt,",
          "242:                         iRegStore+pTab->nNVCol+nv);",
          "243:       }else{",
          "245:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "246:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore+i-nv);",
          "247:       }",
          "250:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1055:       int k;",
          "1056:       u32 colFlags;",
          "1057:       assert( i>=nHidden );",
          "1059:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1058:       assert( iRegStore==sqlite3TableColumnToStorage(pTab,i)+regRowid+1 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1108:     }",
          "1110: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1115:     }",
          "1116: #endif",
          "",
          "[Removed Lines]",
          "1113:     if( pTab->tabFlags & TF_HasStored ){",
          "1114:       sqlite3ComputeStoredColumns(pParse, regRowid+1, pTab);",
          "",
          "[Added Lines]",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1455:         || onError==OE_Ignore || onError==OE_Replace );",
          "1456:     addr1 = 0;",
          "1470:     switch( onError ){",
          "1471:       case OE_Replace: {",
          "1472:         assert( onError==OE_Replace );",
          "",
          "[Removed Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1468:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1469:     }",
          "",
          "[Added Lines]",
          "1464:     testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1465:     testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1466:     testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1467:     testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "1468:     iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4044: #endif",
          "4045: void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int, Upsert*);",
          "4046: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4048: #endif",
          "4049: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "4050: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "",
          "[Removed Lines]",
          "4047:   void sqlite3ComputeStoredColumns(Parse*, int, Table*);",
          "",
          "[Added Lines]",
          "4047:   void sqlite3ComputeGeneratedColumns(Parse*, int, Table*);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:     }",
          "694:   }",
          "695: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "698:   }",
          "699: #endif",
          "",
          "[Removed Lines]",
          "696:   if( pTab->tabFlags & TF_HasStored ){",
          "697:     sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "696:   if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "697:     sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       }",
          "738:     }",
          "739: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "742:     }",
          "743: #endif",
          "744:   }",
          "",
          "[Removed Lines]",
          "740:     if( pTab->tabFlags & TF_HasStored ){",
          "741:       sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "",
          "[Added Lines]",
          "740:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "741:       sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
      "candidate_info": {
        "commit_hash": "418454c63fe1d6f3083542110d17cf561b8f369f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/418454c63fe1d6f3083542110d17cf561b8f369f",
        "files": [
          "ext/session/sessionwor.test",
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "For SQLITE_ENABLE_PREUPDATE_HOOK builds, disable the optimization for a REPLACE command on a WITHOUT ROWID table with no indexes, triggers or foreign key constraints that causes SQLite to clobber any existing row without separately checking for it. This optimization causes SQLite to omit the expected pre-update-hook callbacks.\n\nFossilOrigin-Name: 6281ef974c0ac7a7133c9e1e04c09fdbd627c019c6ff3227293548caf8283864",
        "before_after_code_files": [
          "ext/session/sessionwor.test||ext/session/sessionwor.test",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionwor.test||ext/session/sessionwor.test": [
          "File: ext/session/sessionwor.test -> ext/session/sessionwor.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   sqlite3 db2 test.db2",
          "31: }",
          "40: } {",
          "48: }",
          "52: } {",
          "54: }",
          "56: finish_test",
          "",
          "[Removed Lines]",
          "34: do_execsql_test 1.0 {",
          "35:   CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT ROWID;",
          "36: }",
          "38: do_iterator_test 1.1 t1 {",
          "39:   INSERT INTO t1 VALUES('one', 'two');",
          "41:   {INSERT t1 0 X. {} {t one t two}}",
          "42: }",
          "44: do_iterator_test 1.2 t1 {",
          "45:   UPDATE t1 SET b='three'",
          "46: } {",
          "47:   {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "50: do_iterator_test 1.3 t1 {",
          "51:   DELETE FROM t1;",
          "53:   {DELETE t1 0 X. {t one t three} {}}",
          "",
          "[Added Lines]",
          "33: foreach {tn wo} {",
          "34:   1 \"\"",
          "35:   2 \"WITHOUT ROWID\"",
          "37:   reset_db",
          "39:   do_execsql_test 1.$tn.0 \"CREATE TABLE t1(a PRIMARY KEY, b) $wo ;\"",
          "41:   do_iterator_test 1.$tn.1 t1 {",
          "42:     INSERT INTO t1 VALUES('one', 'two');",
          "43:   } {",
          "44:     {INSERT t1 0 X. {} {t one t two}}",
          "45:   }",
          "47:   do_iterator_test 1.$tn.2 t1 {",
          "48:     UPDATE t1 SET b='three'",
          "49:   } {",
          "50:     {UPDATE t1 0 X. {t one t two} {{} {} t three}}",
          "51:   }",
          "53:   do_iterator_test 1.$tn.3 t1 {",
          "54:     REPLACE INTO t1 VALUES('one', 'four');",
          "55:   } {",
          "56:     {UPDATE t1 0 X. {t one t three} {{} {} t four}}",
          "57:   }",
          "59:   do_iterator_test 1.$tn.4 t1 {",
          "60:     DELETE FROM t1;",
          "61:   } {",
          "62:     {DELETE t1 0 X. {t one t four} {}}",
          "63:   }",
          "66: foreach {tn wo} {",
          "67:   1 \"\"",
          "68:   2 \"WITHOUT ROWID\"",
          "70:   reset_db",
          "72:   do_execsql_test 2.$tn.0 \"CREATE TABLE t1(a INTEGER PRIMARY KEY, b) $wo ;\"",
          "74:   do_iterator_test 1.1 t1 {",
          "75:     INSERT INTO t1 VALUES(1, 'two');",
          "76:   } {",
          "77:     {INSERT t1 0 X. {} {i 1 t two}}",
          "78:   }",
          "80:   do_iterator_test 2.$tn.2 t1 {",
          "81:     UPDATE t1 SET b='three'",
          "82:   } {",
          "83:     {UPDATE t1 0 X. {i 1 t two} {{} {} t three}}",
          "84:   }",
          "86:   do_iterator_test 2.$tn.3 t1 {",
          "87:     REPLACE INTO t1 VALUES(1, 'four');",
          "88:   } {",
          "89:     {UPDATE t1 0 X. {i 1 t three} {{} {} t four}}",
          "90:   }",
          "92:   do_iterator_test 2.$tn.4 t1 {",
          "93:     DELETE FROM t1;",
          "94:   } {",
          "95:     {DELETE t1 0 X. {i 1 t four} {}}",
          "96:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6064584d578f0ac7aba3f67912a5d9eb1a3c6001469f6b9becbe68871131f887",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719: #ifndef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
      "candidate_info": {
        "commit_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window6.test",
          "test/window8.tcl",
          "test/window8.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Add support for RANGE window frames. Some cases still do not work.\n\nFossilOrigin-Name: ffc32b246d92d53c66094afe11950b53ffab6a1c230c602eebbfedafb2eb57f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window6.test||test/window6.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53ea550ce759ae4683bcf0ae3af655bfe04f85db70f74edee6bcab56d83bb041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }else{",
          "560:     sqlite3WindowChain(pParse, pWin, pList);",
          "561:   }",
          "562:   if( pFunc->funcFlags & SQLITE_FUNC_WINDOW ){",
          "563:     sqlite3 *db = pParse->db;",
          "564:     if( pWin->pFilter ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:   if( (pWin->eType==TK_RANGE)",
          "563:    && (pWin->pStart || pWin->pEnd)",
          "564:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "565:   ){",
          "566:     sqlite3ErrorMsg(pParse,",
          "567:       \"RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression\"",
          "568:     );",
          "569:   }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:     eType = TK_RANGE;",
          "928:   }",
          "",
          "[Removed Lines]",
          "933:   if( eType==TK_RANGE && (pStart!=0 || pEnd!=0) ){",
          "934:     sqlite3ErrorMsg(pParse, \"RANGE must use only UNBOUNDED or CURRENT ROW\");",
          "935:     goto windowAllocErr;",
          "936:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:   if( (eStart==TK_CURRENT && eEnd==TK_PRECEDING)",
          "953:    || (eStart==TK_FOLLOWING && (eEnd==TK_PRECEDING || eEnd==TK_CURRENT))",
          "954:   ){",
          "956:     goto windowAllocErr;",
          "957:   }",
          "",
          "[Removed Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame delimiter for ROWS\");",
          "",
          "[Added Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame specification\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1485:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1486:     addr = sqlite3VdbeAddOp3(",
          "1487:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1489:     VdbeCoverageEqNe(v);",
          "1490:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1491:   }else{",
          "",
          "[Removed Lines]",
          "1488:         );",
          "",
          "[Added Lines]",
          "1488:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   }",
          "1540: }",
          "1542: static int windowCodeOp(",
          "1543:  WindowCodeArg *p,",
          "1544:  int op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: static void windowCodeRangeTest(",
          "1551:   WindowCodeArg *p,",
          "1553:   int csr1,",
          "1554:   int regVal,",
          "1555:   int csr2,",
          "1556:   int lbl",
          "1557: ){",
          "1558:   Parse *pParse = p->pParse;",
          "1559:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1560:   int reg1 = sqlite3GetTempReg(pParse);",
          "1561:   int reg2 = sqlite3GetTempReg(pParse);",
          "1562:   windowReadPeerValues(p, csr1, reg1);",
          "1563:   windowReadPeerValues(p, csr2, reg2);",
          "1564:   sqlite3VdbeAddOp3(v, OP_Add, reg1, regVal, reg1);",
          "1565:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1566:   sqlite3VdbeAddOp2(v, OP_Rowid, csr1, reg1);",
          "1567:   sqlite3VdbeAddOp2(v, OP_Rowid, csr2, reg2);",
          "1568:   sqlite3VdbeAddOp3(v, OP_Gt, reg2, lbl, reg1);",
          "1569:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1570:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1572:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1573: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1555:   int addrGoto = 0;",
          "1556:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "1560:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1592:   int addrNextRange = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:   }",
          "1565:   if( regCountdown>0 ){",
          "1567:   }",
          "1569:   if( op==WINDOW_RETURN_ROW ){",
          "",
          "[Removed Lines]",
          "1566:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "1602:     if( pMWin->eType==TK_RANGE ){",
          "1603:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1605:       switch( op ){",
          "1606:         case WINDOW_RETURN_ROW: {",
          "1607:           assert( 0 );",
          "1608:           break;",
          "1609:         }",
          "1611:         case WINDOW_AGGINVERSE: {",
          "1612:           if( pMWin->eStart==TK_FOLLOWING ){",
          "1613:             windowCodeRangeTest(",
          "1614:                 p, OP_Le, p->current.csr, regCountdown, p->start.csr, lblDone",
          "1615:             );",
          "1616:           }else{",
          "1617:             windowCodeRangeTest(",
          "1618:                 p, OP_Ge, p->start.csr, regCountdown, p->current.csr, lblDone",
          "1619:             );",
          "1620:           }",
          "1621:           break;",
          "1622:         }",
          "1624:         case WINDOW_AGGSTEP: {",
          "1625:           windowCodeRangeTest(",
          "1626:             p, OP_Gt, p->end.csr, regCountdown, p->current.csr, lblDone",
          "1627:           );",
          "1628:           break;",
          "1629:         }",
          "1630:       }",
          "1632:     }else{",
          "1633:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1634:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1610:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1611:   }",
          "1613:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "1614:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1615:   return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1681:   if( addrNextRange ){",
          "1682:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "1683:   }",
          "1684:   sqlite3VdbeResolveLabel(v, lblDone);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1724:   int regNewPeer = 0;",
          "1725:   WindowCodeArg s;",
          "1727:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1728:   s.pParse = pParse;",
          "1729:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1800:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "1801:   );",
          "1802:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "1803:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1804:   );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1758:     s.end.reg = pParse->nMem+1;     pParse->nMem += nPeer;",
          "1759:   }",
          "",
          "[Removed Lines]",
          "1761:   assert( pMWin->eStart==TK_PRECEDING",
          "1762:        || pMWin->eStart==TK_CURRENT",
          "1763:        || pMWin->eStart==TK_FOLLOWING",
          "1764:        || pMWin->eStart==TK_UNBOUNDED",
          "1765:   );",
          "1766:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1767:        || pMWin->eEnd==TK_CURRENT",
          "1768:        || pMWin->eEnd==TK_UNBOUNDED",
          "1769:        || pMWin->eEnd==TK_PRECEDING",
          "1770:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1791:     int regNewPart = reg + pMWin->nBufferCol;",
          "1792:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1795:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1796:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1797:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1798:     VdbeCoverageEqNe(v);",
          "1799:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1800:     VdbeComment((v, \"call flush_partition\"));",
          "1802:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1803:   }",
          "",
          "[Removed Lines]",
          "1794:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1801:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1848:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1849:     sqlite3VdbeJumpHere(v, addrGe);",
          "1850:   }",
          "1852:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1853:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1854:   }",
          "",
          "[Removed Lines]",
          "1851:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "",
          "[Added Lines]",
          "1917:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1888:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1889:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1890:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1893:     }",
          "1894:   }else",
          "1895:   if( pMWin->eEnd==TK_PRECEDING ){",
          "",
          "[Removed Lines]",
          "1891:       windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1892:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "1957:       if( pMWin->eType==TK_RANGE ){",
          "1958:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1959:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "1960:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1961:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1962:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1963:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "1964:         sqlite3VdbeResolveLabel(v, lbl);",
          "1965:       }else{",
          "1966:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1967:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1968:       }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1900:     int addr;",
          "1901:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1902:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1907:     }",
          "1908:   }",
          "1909:   if( addrPeerJump ){",
          "",
          "[Removed Lines]",
          "1903:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1904:       windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1905:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1906:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1979:       if( pMWin->eType==TK_RANGE ){",
          "1980:         int lbl;",
          "1981:         addr = sqlite3VdbeCurrentAddr(v);",
          "1982:         if( regEnd ){",
          "1983:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "1984:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1985:         }",
          "1986:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1987:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1988:         if( regEnd ){",
          "1989:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "1990:           sqlite3VdbeResolveLabel(v, lbl);",
          "1991:         }",
          "1992:       }else{",
          "1993:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1994:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1995:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1996:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1997:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1938:     int addrBreak2;",
          "1939:     int addrBreak3;",
          "1940:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1941:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1942:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1943:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:     if( pMWin->eType==TK_RANGE ){",
          "2033:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2034:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2035:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2036:     }else",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "",
          "[Removed Lines]",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "",
          "[Added Lines]",
          "75:   set msg [lindex [split [string trim $msg] \"\\n\"] 0]",
          "76:   puts $::fd \"# PG says $msg\"",
          "",
          "---------------"
        ],
        "test/window6.test||test/window6.test": [
          "File: test/window6.test -> test/window6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: } {",
          "220:   1 1  2 1,2  3 1,2,3  4 2,3,4  5 3,4,5",
          "221: }",
          "234: do_catchsql_test 9.3 {",
          "235:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "",
          "[Removed Lines]",
          "222: do_catchsql_test 9.1 {",
          "223:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225:   FROM c;",
          "226: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "228: do_catchsql_test 9.2 {",
          "229:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231:   FROM c;",
          "232: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "[Added Lines]",
          "222: #do_catchsql_test 9.1 {",
          "223: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225: #  FROM c;",
          "226: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "227: #",
          "228: #do_catchsql_test 9.2 {",
          "229: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231: #  FROM c;",
          "232: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     SELECT count() OVER (",
          "263:         ORDER BY x ROWS $frame",
          "264:     ) FROM c;",
          "266: }",
          "268: do_catchsql_test 9.8.1 {",
          "",
          "[Removed Lines]",
          "265:   \" {1 {unsupported frame delimiter for ROWS}}",
          "",
          "[Added Lines]",
          "265:   \" {1 {unsupported frame specification}}",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: ==========",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "98:       (13, 26), (15, 30);",
          "99: }",
          "101: foreach {tn frame} {",
          "102:   1 { ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "103:   2 { ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "104:   3 { ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "105: } {",
          "106:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "107: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: #==========================================================================",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "442:       (13, 26), (15, 30);",
          "443: } {}",
          "445: do_execsql_test 2.1 {",
          "446:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "447: } {13 56   15 56}",
          "449: do_execsql_test 2.2 {",
          "450:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "451: } {13 {}   15 {}}",
          "453: do_execsql_test 2.3 {",
          "454:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "455: } {13 30   15 {}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   INSERT INTO t1 VALUES(1, 1);",
          "24:   INSERT INTO t1 VALUES(2, 2);",
          "25:   INSERT INTO t1 VALUES(3, 3);",
          "26:   INSERT INTO t1 VALUES(4, 4);",
          "27:   INSERT INTO t1 VALUES(5, 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "39:   \"",
          "40: }",
          "",
          "[Removed Lines]",
          "38:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "40:   7 \"ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING\"",
          "45:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "33: } } } 1",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "40: } } } 1",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "47: } } } 1",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "54: } } } 1",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "61: } } } 1",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "68: } } } 1",
          "70: finish_test",
          "",
          "[Removed Lines]",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "32:   ) FROM t3 ORDER BY 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "39:   ) FROM t3 ORDER BY 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "46:   ) FROM t3 ORDER BY 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "53:   ) FROM t3 ORDER BY 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "60:   ) FROM t3 ORDER BY 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "67:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "26:   INSERT INTO t1 VALUES(1, 1);",
          "27:   INSERT INTO t1 VALUES(2, 2);",
          "28:   INSERT INTO t1 VALUES(3, 3);",
          "29:   INSERT INTO t1 VALUES(4, 4);",
          "30:   INSERT INTO t1 VALUES(5, 5);",
          "33: # PG says ERROR:  frame starting offset must not be negative",
          "37:   ) FROM t1 ORDER BY 1",
          "40: # PG says ERROR:  frame ending offset must not be negative",
          "44:   ) FROM t1 ORDER BY 1",
          "47: # PG says ERROR:  invalid preceding or following size in window function",
          "51:   ) FROM t1 ORDER BY 1",
          "54: # PG says ERROR:  invalid preceding or following size in window function",
          "58:   ) FROM t1 ORDER BY 1",
          "61: # PG says ERROR:  frame starting offset must not be negative",
          "65:   ) FROM t1 ORDER BY 1",
          "68: # PG says ERROR:  frame ending offset must not be negative",
          "72:   ) FROM t1 ORDER BY 1",
          "73: } } } 1",
          "75: # PG says ERROR:  RANGE with offset PRECEDING/FOLLOWING requires exactly one ORDER BY column",
          "76: do_test 1.7 { catch { execsql {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
      "candidate_info": {
        "commit_hash": "c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2909bf8ac88e2819fb9fc86024012b74a1f14c9",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with handling corrupt databases in the fts5 integrity-check function.\n\nFossilOrigin-Name: 9bad745d373f4686a2726c3f77a2ccad60e7181645d7ed483a2e43075a4ef30c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5859:       iOff = fts5LeafFirstTermOff(pLeaf);",
          "5860:       iRowidOff = fts5LeafFirstRowidOff(pLeaf);",
          "5862:         p->rc = FTS5_CORRUPT;",
          "5863:       }else{",
          "5864:         iOff += fts5GetVarint32(&pLeaf->p[iOff], nTerm);",
          "",
          "[Removed Lines]",
          "5861:       if( iRowidOff>=iOff ){",
          "",
          "[Added Lines]",
          "5861:       if( iRowidOff>=iOff || iOff>=pLeaf->szLeaf ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: | end c14b.db",
          "872: }]} {}",
          "875: do_catchsql_test 14.1 {",
          "876:   INSERT INTO t1(t1) VALUES('optimize');",
          "877: } {1 {database disk image is malformed}}",
          "879: sqlite3_fts5_may_be_corrupt 0",
          "880: finish_test",
          "",
          "[Removed Lines]",
          "874: breakpoint",
          "",
          "[Added Lines]",
          "878: #---------------------------------------------------------------------------",
          "879: #",
          "880: reset_db",
          "881: do_test 15.0 {",
          "882:   sqlite3 db {}",
          "883:   db deserialize [decode_hexdb {",
          "884: | size 32768 pagesize 4096 filename c16.db",
          "885: | page 1 offset 0",
          "886: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "887: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "888: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "889: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "890: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "891: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "892: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "893: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "894: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "895: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "896: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "897: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "898: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "899: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "900: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 00 0f f6 0f ec   ..!!...tabl.....",
          "901: |   3680: 0f e0 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ..sizet1_docsize",
          "902: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "903: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "904: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "905: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "906: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "907: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "908: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "909: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "910: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "911: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "912: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "913: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "914: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "915: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "916: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "917: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "918: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "919: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "920: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "921: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "922: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "923: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "924: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "925: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "926: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "927: | page 2 offset 4096",
          "928: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "929: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "930: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "931: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "932: |   4064: 6f 6e 04 67 90 38 2a 07 05 01 03 00 10 03 03 0f   on.g.8*.........",
          "933: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "934: | page 3 offset 8192",
          "935: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "936: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "937: | page 4 offset 12288",
          "938: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "939: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "940: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "941: | page 5 offset 16384",
          "942: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "943: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "944: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "945: | page 6 offset 20480",
          "946: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "947: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "948: | page 7 offset 24576",
          "949: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "950: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "951: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "952: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "953: | page 8 offset 28672",
          "954: |      0: 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74 31 5f   .......-tablet1_",
          "955: |     16: 69 64 78 74 31 5f 69 64 78 03 43 52 45 41 54 45   idxt1_idx.CREATE",
          "956: |     32: 20 54 41 42 4c 45 20 27 74 31 5f 66 17 42 03 30    TABLE 't1_f.B.0",
          "957: |     48: 01 00 00 10 10 04 02 02 00 00 00 00 00 00 00 00   ................",
          "958: |     64: 70 00 00 00 00 00 00 00 00 00 00 00 70 00 00 00   p...........p...",
          "959: | end c16.db",
          "960: }]} {}",
          "962: do_catchsql_test 15.1 {",
          "963:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "964: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c80bb15b44e9b6a3c0c5a49d5e93e66376c3520ecefc1db7425c8a7e09d3eade",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}