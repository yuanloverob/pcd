{
  "cve_id": "CVE-2022-0080",
  "cve_desc": "mruby is vulnerable to Heap-based Buffer Overflow",
  "repo": "mruby/mruby",
  "patch_hash": "28ccc664e5dcd3f9d55173e9afde77c4705a9ab6",
  "patch_info": {
    "commit_hash": "28ccc664e5dcd3f9d55173e9afde77c4705a9ab6",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/28ccc664e5dcd3f9d55173e9afde77c4705a9ab6",
    "files": [
      "src/proc.c"
    ],
    "message": "proc.c: should not reference `irep` when copying failed.\n\nIt may cause broken reference count numbers.",
    "before_after_code_files": [
      "src/proc.c||src/proc.c"
    ]
  },
  "patch_diff": {
    "src/proc.c||src/proc.c": [
      "File: src/proc.c -> src/proc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     return;",
      "209:   }",
      "210:   a->flags = b->flags;",
      "211:   a->body = b->body;",
      "212:   a->upper = b->upper;",
      "216:   a->e.env = b->e.env;",
      "218: }",
      "",
      "[Removed Lines]",
      "213:   if (!MRB_PROC_CFUNC_P(a) && a->body.irep) {",
      "214:     mrb_irep_incref(mrb, (mrb_irep*)a->body.irep);",
      "215:   }",
      "",
      "[Added Lines]",
      "210:   if (!MRB_PROC_CFUNC_P(b) && b->body.irep) {",
      "211:     mrb_irep_incref(mrb, (mrb_irep*)b->body.irep);",
      "212:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e10c5a79a17939af763b1dcf5232ce47e24a34",
      "candidate_info": {
        "commit_hash": "f5e10c5a79a17939af763b1dcf5232ce47e24a34",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/f5e10c5a79a17939af763b1dcf5232ce47e24a34",
        "files": [
          "include/mruby/proc.h",
          "src/class.c",
          "src/proc.c"
        ],
        "message": "proc.c: add `mrb_state` argument to `mrb_proc_copy()`.\n\nThe function may invoke the garbage collection and it requires\n`mrb_state` to run.",
        "before_after_code_files": [
          "include/mruby/proc.h||include/mruby/proc.h",
          "src/class.c||src/class.c",
          "src/proc.c||src/proc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/proc.c||src/proc.c"
          ],
          "candidate": [
            "src/proc.c||src/proc.c"
          ]
        }
      },
      "candidate_diff": {
        "include/mruby/proc.h||include/mruby/proc.h": [
          "File: include/mruby/proc.h -> include/mruby/proc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: struct RProc *mrb_closure_new(mrb_state*, const mrb_irep*);",
          "93: MRB_API struct RProc *mrb_proc_new_cfunc(mrb_state*, mrb_func_t);",
          "94: MRB_API struct RProc *mrb_closure_new_cfunc(mrb_state *mrb, mrb_func_t func, int nlocals);",
          "96: mrb_int mrb_proc_arity(const struct RProc *p);",
          "",
          "[Removed Lines]",
          "95: void mrb_proc_copy(struct RProc *a, struct RProc *b);",
          "",
          "[Added Lines]",
          "95: void mrb_proc_copy(mrb_state *mrb, struct RProc *a, struct RProc *b);",
          "",
          "---------------"
        ],
        "src/class.c||src/class.c": [
          "File: src/class.c -> src/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     mrb_raise(mrb, E_ARGUMENT_ERROR, \"no block given\");",
          "2570:   }",
          "2571:   p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb->proc_class);",
          "2573:   p->flags |= MRB_PROC_STRICT;",
          "2574:   MRB_METHOD_FROM_PROC(m, p);",
          "2575:   mrb_define_method_raw(mrb, c, mid, m);",
          "",
          "[Removed Lines]",
          "2572:   mrb_proc_copy(p, mrb_proc_ptr(blk));",
          "",
          "[Added Lines]",
          "2572:   mrb_proc_copy(mrb, p, mrb_proc_ptr(blk));",
          "",
          "---------------"
        ],
        "src/proc.c||src/proc.c": [
          "File: src/proc.c -> src/proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: }",
          "203: void",
          "205: {",
          "206:   if (a->body.irep) {",
          "",
          "[Removed Lines]",
          "204: mrb_proc_copy(struct RProc *a, struct RProc *b)",
          "",
          "[Added Lines]",
          "204: mrb_proc_copy(mrb_state *mrb, struct RProc *a, struct RProc *b)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:   }",
          "210:   a->flags = b->flags;",
          "211:   a->body = b->body;",
          "212:   if (!MRB_PROC_CFUNC_P(a) && a->body.irep) {",
          "214:   }",
          "216:   a->e.env = b->e.env;",
          "218: }",
          "",
          "[Removed Lines]",
          "213:     mrb_irep_incref(NULL, (mrb_irep*)a->body.irep);",
          "215:   a->upper = b->upper;",
          "",
          "[Added Lines]",
          "212:   a->upper = b->upper;",
          "214:     mrb_irep_incref(mrb, (mrb_irep*)a->body.irep);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:   mrb_get_args(mrb, \"&!\", &blk);",
          "229:   p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb_class_ptr(proc_class));",
          "231:   proc = mrb_obj_value(p);",
          "232:   mrb_funcall_with_block(mrb, proc, MRB_SYM(initialize), 0, NULL, proc);",
          "233:   if (!MRB_PROC_STRICT_P(p) &&",
          "",
          "[Removed Lines]",
          "230:   mrb_proc_copy(p, mrb_proc_ptr(blk));",
          "",
          "[Added Lines]",
          "230:   mrb_proc_copy(mrb, p, mrb_proc_ptr(blk));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:   if (!mrb_proc_p(proc)) {",
          "246:     mrb_raise(mrb, E_ARGUMENT_ERROR, \"not a proc\");",
          "247:   }",
          "249:   return self;",
          "250: }",
          "",
          "[Removed Lines]",
          "248:   mrb_proc_copy(mrb_proc_ptr(self), mrb_proc_ptr(proc));",
          "",
          "[Added Lines]",
          "248:   mrb_proc_copy(mrb, mrb_proc_ptr(self), mrb_proc_ptr(proc));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "281:   p = mrb_proc_ptr(blk);",
          "282:   if (!MRB_PROC_STRICT_P(p)) {",
          "283:     struct RProc *p2 = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, p->c);",
          "285:     p2->flags |= MRB_PROC_STRICT;",
          "286:     return mrb_obj_value(p2);",
          "287:   }",
          "",
          "[Removed Lines]",
          "284:     mrb_proc_copy(p2, p);",
          "",
          "[Added Lines]",
          "284:     mrb_proc_copy(mrb, p2, p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}