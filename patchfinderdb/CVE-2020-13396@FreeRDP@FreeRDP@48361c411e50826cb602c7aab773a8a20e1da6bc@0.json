{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47b4867729c0b9e636a3466e3bad81ce94767b13",
      "candidate_info": {
        "commit_hash": "47b4867729c0b9e636a3466e3bad81ce94767b13",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/47b4867729c0b9e636a3466e3bad81ce94767b13",
        "files": [
          "channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c",
          "channels/video/client/video_main.c"
        ],
        "message": "Destroy channel listeners on terminate\n\n(cherry picked from commit 2f5e5359f60c26a2de244cd6d9f7957b039cd121)",
        "before_after_code_files": [
          "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c",
          "channels/video/client/video_main.c||channels/video/client/video_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c": [
          "File: channels/audin/client/audin_main.c -> channels/audin/client/audin_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:  audin->listener_callback->plugin = pPlugin;",
          "688:  audin->listener_callback->channel_mgr = pChannelMgr;",
          "689:  return pChannelMgr->CreateListener(pChannelMgr, \"AUDIO_INPUT\", 0,",
          "691: }",
          "",
          "[Removed Lines]",
          "690:                                     (IWTSListenerCallback*)audin->listener_callback, NULL);",
          "",
          "[Added Lines]",
          "690:                                     &audin->listener_callback->iface, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "706:  WLog_Print(audin->log, WLOG_TRACE, \"...\");",
          "707:  audio_formats_free(audin->fixed_format, 1);",
          "709:  if (audin->device)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:  if (audin->listener_callback)",
          "709:  {",
          "710:   IWTSVirtualChannelManager* mgr = audin->listener_callback->channel_mgr;",
          "711:   if (mgr)",
          "712:    IFCALL(mgr->DestroyListener, mgr, &audin->iface);",
          "713:  }",
          "",
          "---------------"
        ],
        "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c": [
          "File: channels/disp/client/disp_main.c -> channels/disp/client/disp_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:  disp->listener_callback->plugin = pPlugin;",
          "309:  disp->listener_callback->channel_mgr = pChannelMgr;",
          "310:  status = pChannelMgr->CreateListener(pChannelMgr, DISP_DVC_CHANNEL_NAME, 0,",
          "313:  disp->listener->pInterface = disp->iface.pInterface;",
          "314:  return status;",
          "315: }",
          "",
          "[Removed Lines]",
          "311:                                       (IWTSListenerCallback*)disp->listener_callback,",
          "312:                                       &(disp->listener));",
          "",
          "[Added Lines]",
          "311:                                       &disp->listener_callback->iface, &(disp->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: static UINT disp_plugin_terminated(IWTSPlugin* pPlugin)",
          "323: {",
          "324:  DISP_PLUGIN* disp = (DISP_PLUGIN*)pPlugin;",
          "325:  free(disp->listener_callback);",
          "326:  free(disp->iface.pInterface);",
          "327:  free(pPlugin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:  if (disp && disp->listener_callback)",
          "326:  {",
          "327:   IWTSVirtualChannelManager* mgr = disp->listener_callback->channel_mgr;",
          "328:   if (mgr)",
          "329:    IFCALL(mgr->DestroyListener, mgr, &disp->iface);",
          "330:  }",
          "",
          "---------------"
        ],
        "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c": [
          "File: channels/echo/client/echo_main.c -> channels/echo/client/echo_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  echo->listener_callback->plugin = pPlugin;",
          "143:  echo->listener_callback->channel_mgr = pChannelMgr;",
          "147: }",
          "",
          "[Removed Lines]",
          "145:  return pChannelMgr->CreateListener(pChannelMgr, \"ECHO\", 0,",
          "146:                                     (IWTSListenerCallback*)echo->listener_callback, NULL);",
          "",
          "[Added Lines]",
          "145:  return pChannelMgr->CreateListener(pChannelMgr, \"ECHO\", 0, &echo->listener_callback->iface,",
          "146:                                     NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: static UINT echo_plugin_terminated(IWTSPlugin* pPlugin)",
          "155: {",
          "156:  ECHO_PLUGIN* echo = (ECHO_PLUGIN*)pPlugin;",
          "158:  free(echo);",
          "160:  return CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:  if (echo && echo->listener_callback)",
          "158:  {",
          "159:   IWTSVirtualChannelManager* mgr = echo->listener_callback->channel_mgr;",
          "160:   if (mgr)",
          "161:    IFCALL(mgr->DestroyListener, mgr, &echo->iface);",
          "162:  }",
          "",
          "---------------"
        ],
        "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c": [
          "File: channels/geometry/client/geometry_main.c -> channels/geometry/client/geometry_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:  geometry->listener_callback->iface.OnNewChannelConnection = geometry_on_new_channel_connection;",
          "411:  geometry->listener_callback->plugin = pPlugin;",
          "412:  geometry->listener_callback->channel_mgr = pChannelMgr;",
          "416:  geometry->listener->pInterface = geometry->iface.pInterface;",
          "417:  return status;",
          "418: }",
          "",
          "[Removed Lines]",
          "413:  status = pChannelMgr->CreateListener(pChannelMgr, GEOMETRY_DVC_CHANNEL_NAME, 0,",
          "414:                                       (IWTSListenerCallback*)geometry->listener_callback,",
          "415:                                       &(geometry->listener));",
          "",
          "[Added Lines]",
          "413:  status =",
          "414:      pChannelMgr->CreateListener(pChannelMgr, GEOMETRY_DVC_CHANNEL_NAME, 0,",
          "415:                                  &geometry->listener_callback->iface, &(geometry->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  GEOMETRY_PLUGIN* geometry = (GEOMETRY_PLUGIN*)pPlugin;",
          "428:  GeometryClientContext* context = (GeometryClientContext*)geometry->iface.pInterface;",
          "430:  if (context)",
          "431:   HashTable_Free(context->geometries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:  if (geometry && geometry->listener_callback)",
          "431:  {",
          "432:   IWTSVirtualChannelManager* mgr = geometry->listener_callback->channel_mgr;",
          "433:   if (mgr)",
          "434:    IFCALL(mgr->DestroyListener, mgr, &geometry->iface);",
          "435:  }",
          "",
          "---------------"
        ],
        "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c": [
          "File: channels/rdpei/client/rdpei_main.c -> channels/rdpei/client/rdpei_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:  rdpei->listener_callback->channel_mgr = pChannelMgr;",
          "573:  if ((error = pChannelMgr->CreateListener(pChannelMgr, RDPEI_DVC_CHANNEL_NAME, 0,",
          "576:  {",
          "577:   WLog_ERR(TAG, \"ChannelMgr->CreateListener failed with error %\" PRIu32 \"!\", error);",
          "578:   goto error_out;",
          "",
          "[Removed Lines]",
          "574:                                           (IWTSListenerCallback*)rdpei->listener_callback,",
          "575:                                           &(rdpei->listener))))",
          "",
          "[Added Lines]",
          "574:                                           &rdpei->listener_callback->iface, &(rdpei->listener))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:  if (!pPlugin)",
          "599:   return ERROR_INVALID_PARAMETER;",
          "601:  free(rdpei->listener_callback);",
          "602:  free(rdpei->context);",
          "603:  free(rdpei);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:  if (rdpei && rdpei->listener_callback)",
          "601:  {",
          "602:   IWTSVirtualChannelManager* mgr = rdpei->listener_callback->channel_mgr;",
          "603:   if (mgr)",
          "604:    IFCALL(mgr->DestroyListener, mgr, &rdpei->iface);",
          "605:  }",
          "",
          "---------------"
        ],
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1896:  gfx->listener_callback->plugin = pPlugin;",
          "1897:  gfx->listener_callback->channel_mgr = pChannelMgr;",
          "1898:  error = pChannelMgr->CreateListener(pChannelMgr, RDPGFX_DVC_CHANNEL_NAME, 0,",
          "1901:  gfx->listener->pInterface = gfx->iface.pInterface;",
          "1902:  DEBUG_RDPGFX(gfx->log, \"Initialize\");",
          "1903:  return error;",
          "",
          "[Removed Lines]",
          "1899:                                      (IWTSListenerCallback*)gfx->listener_callback,",
          "1900:                                      &(gfx->listener));",
          "",
          "[Added Lines]",
          "1899:                                      &gfx->listener_callback->iface, &(gfx->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1913:  RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)pPlugin;",
          "1914:  RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;",
          "1915:  DEBUG_RDPGFX(gfx->log, \"Terminated\");",
          "1916:  rdpgfx_client_context_free(context);",
          "1917:  return CHANNEL_RC_OK;",
          "1918: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:  if (gfx && gfx->listener_callback)",
          "1916:  {",
          "1917:   IWTSVirtualChannelManager* mgr = gfx->listener_callback->channel_mgr;",
          "1918:   if (mgr)",
          "1919:    IFCALL(mgr->DestroyListener, mgr, &gfx->iface);",
          "1920:  }",
          "",
          "---------------"
        ],
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1541:  rdpsnd->listener_callback->plugin = pPlugin;",
          "1542:  rdpsnd->listener_callback->channel_mgr = pChannelMgr;",
          "1543:  status = pChannelMgr->CreateListener(pChannelMgr, RDPSND_DVC_CHANNEL_NAME, 0,",
          "1546:  rdpsnd->listener->pInterface = rdpsnd->iface.pInterface;",
          "1547:  return rdpsnd_virtual_channel_event_initialized(rdpsnd);",
          "1548: }",
          "",
          "[Removed Lines]",
          "1544:                                       (IWTSListenerCallback*)rdpsnd->listener_callback,",
          "1545:                                       &(rdpsnd->listener));",
          "",
          "[Added Lines]",
          "1544:                                       &rdpsnd->listener_callback->iface, &(rdpsnd->listener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1557:  rdpsndPlugin* rdpsnd = (rdpsndPlugin*)pPlugin;",
          "1558:  if (rdpsnd)",
          "1559:  {",
          "1560:   free(rdpsnd->listener_callback);",
          "1561:   free(rdpsnd->iface.pInterface);",
          "1562:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1559:   if (rdpsnd->listener_callback)",
          "1560:   {",
          "1561:    IWTSVirtualChannelManager* mgr = rdpsnd->listener_callback->channel_mgr;",
          "1562:    if (mgr)",
          "1563:     IFCALL(mgr->DestroyListener, mgr, &rdpsnd->iface);",
          "1564:   }",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  if (!urbdrc)",
          "711:   return ERROR_INVALID_DATA;",
          "713:  udevman = urbdrc->udevman;",
          "715:  if (udevman)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "712:  if (urbdrc->listener_callback)",
          "713:  {",
          "714:   IWTSVirtualChannelManager* mgr = urbdrc->listener_callback->channel_mgr;",
          "715:   if (mgr)",
          "716:    IFCALL(mgr->DestroyListener, mgr, &urbdrc->iface);",
          "717:  }",
          "",
          "---------------"
        ],
        "channels/video/client/video_main.c||channels/video/client/video_main.c": [
          "File: channels/video/client/video_main.c -> channels/video/client/video_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1048:  callback->channel_mgr = channelMgr;",
          "1050:  status = channelMgr->CreateListener(channelMgr, VIDEO_CONTROL_DVC_CHANNEL_NAME, 0,",
          "1053:  if (status != CHANNEL_RC_OK)",
          "1054:   return status;",
          "",
          "[Removed Lines]",
          "1051:                                      (IWTSListenerCallback*)callback, &(video->controlListener));",
          "",
          "[Added Lines]",
          "1051:                                      &callback->iface, &(video->controlListener));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1067:  callback->channel_mgr = channelMgr;",
          "1069:  status = channelMgr->CreateListener(channelMgr, VIDEO_DATA_DVC_CHANNEL_NAME, 0,",
          "1072:  if (status == CHANNEL_RC_OK)",
          "1073:   video->dataListener->pInterface = video->wtsPlugin.pInterface;",
          "",
          "[Removed Lines]",
          "1070:                                      (IWTSListenerCallback*)callback, &(video->dataListener));",
          "",
          "[Added Lines]",
          "1070:                                      &callback->iface, &(video->dataListener));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1084: {",
          "1085:  VIDEO_PLUGIN* video = (VIDEO_PLUGIN*)pPlugin;",
          "1087:  if (video->context)",
          "1088:   VideoClientContextPriv_free(video->context->priv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:  if (video->control_callback)",
          "1088:  {",
          "1089:   IWTSVirtualChannelManager* mgr = video->control_callback->channel_mgr;",
          "1090:   if (mgr)",
          "1091:    IFCALL(mgr->DestroyListener, mgr, &video->control_callback->iface);",
          "1092:  }",
          "1093:  if (video->data_callback)",
          "1094:  {",
          "1095:   IWTSVirtualChannelManager* mgr = video->data_callback->channel_mgr;",
          "1096:   if (mgr)",
          "1097:    IFCALL(mgr->DestroyListener, mgr, &video->data_callback->iface);",
          "1098:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f75c4ac8de7bc4532b4059342521c755b2245d5",
      "candidate_info": {
        "commit_hash": "2f75c4ac8de7bc4532b4059342521c755b2245d5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2f75c4ac8de7bc4532b4059342521c755b2245d5",
        "files": [
          "libfreerdp/core/transport.c"
        ],
        "message": "Ensure all NLA structs are freed up\n\n(cherry picked from commit 477ad675f31a1965833304f79406599e0ad97b82)",
        "before_after_code_files": [
          "libfreerdp/core/transport.c||libfreerdp/core/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/transport.c||libfreerdp/core/transport.c": [
          "File: libfreerdp/core/transport.c -> libfreerdp/core/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:  if (!settings->Authentication)",
          "326:   return TRUE;",
          "328:  rdp->nla = nla_new(instance, transport, settings);",
          "330:  if (!rdp->nla)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:  nla_free(rdp->nla);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1214:  if (transport->ReceiveBuffer)",
          "1215:   Stream_Release(transport->ReceiveBuffer);",
          "1217:  StreamPool_Free(transport->ReceivePool);",
          "1218:  CloseHandle(transport->connectedEvent);",
          "1219:  CloseHandle(transport->rereadEvent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218:  nla_free(transport->nla);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d9464fbc5d6f4de0e401d0d189d8566cc47227a",
      "candidate_info": {
        "commit_hash": "8d9464fbc5d6f4de0e401d0d189d8566cc47227a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8d9464fbc5d6f4de0e401d0d189d8566cc47227a",
        "files": [
          "client/common/file.c"
        ],
        "message": "Fixed BehaviourSanitizer warning in rdp parser\n\n(cherry picked from commit 771332c04e2dbad964d0cb11a86ff561e792bc35)",
        "before_after_code_files": [
          "client/common/file.c||client/common/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/common/file.c||client/common/file.c": [
          "File: client/common/file.c -> client/common/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  DWORD flags;",
          "204: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: static void freerdp_client_file_string_check_free(LPSTR str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "841:  return status;",
          "842: }",
          "853:  } while (0)",
          "855: BOOL freerdp_client_populate_rdp_file_from_settings(rdpFile* file, const rdpSettings* settings)",
          "",
          "[Removed Lines]",
          "844: #define FILE_POPULATE_STRING(_target, _setting) \\",
          "845:  do                                          \\",
          "846:  {                                           \\",
          "847:   if (_setting)                           \\",
          "848:   {                                       \\",
          "849:    _target = _strdup(_setting);        \\",
          "850:    if (!_target)                       \\",
          "851:     return FALSE;                   \\",
          "852:   }                                       \\",
          "",
          "[Added Lines]",
          "845: #define FILE_POPULATE_STRING(_target, _setting)             \\",
          "846:  do                                                      \\",
          "847:  {                                                       \\",
          "848:   if (_setting)                                       \\",
          "849:   {                                                   \\",
          "850:    freerdp_client_file_string_check_free(_target); \\",
          "851:    _target = _strdup(_setting);                    \\",
          "852:    if (!_target)                                   \\",
          "853:     return FALSE;                               \\",
          "854:   }                                                   \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
      "candidate_info": {
        "commit_hash": "b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b222b10c7bde3df2ae2803c6bd1a7ce8a6352f37",
        "files": [
          "server/shadow/freerdp-shadow-cli.1.in",
          "winpr/tools/makecert-cli/winpr-makecert.1.in"
        ],
        "message": "Fixed typos (Otherweise)\n\nOtherweise ->\nOtherw ise\n      ^\n\n(cherry picked from commit 148f3c675d02da2c7f19b3099ba8792f5594416b)",
        "before_after_code_files": [
          "server/shadow/freerdp-shadow-cli.1.in||server/shadow/freerdp-shadow-cli.1.in",
          "winpr/tools/makecert-cli/winpr-makecert.1.in||winpr/tools/makecert-cli/winpr-makecert.1.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/freerdp-shadow-cli.1.in||server/shadow/freerdp-shadow-cli.1.in": [
          "File: server/shadow/freerdp-shadow-cli.1.in -> server/shadow/freerdp-shadow-cli.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: Successful program execution.",
          "77: .TP",
          "78: .B 1",
          "81: .SH SEE ALSO",
          "82: wlog(7)",
          "",
          "[Removed Lines]",
          "79: Otherweise.",
          "",
          "[Added Lines]",
          "79: Otherwise.",
          "",
          "---------------"
        ],
        "winpr/tools/makecert-cli/winpr-makecert.1.in||winpr/tools/makecert-cli/winpr-makecert.1.in": [
          "File: winpr/tools/makecert-cli/winpr-makecert.1.in -> winpr/tools/makecert-cli/winpr-makecert.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: Successful program execution.",
          "107: .TP",
          "108: .B 1",
          "111: .SH SEE ALSO",
          "",
          "[Removed Lines]",
          "109: Otherweise.",
          "",
          "[Added Lines]",
          "109: Otherwise.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
      "candidate_info": {
        "commit_hash": "5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
        "files": [
          "channels/urbdrc/client/urbdrc_main.c"
        ],
        "message": "Fixed #6197: NULL check in urbdrc\n\n(cherry picked from commit fb3a0e6b5ae3b4e6523509a0ec0c522425968989)",
        "before_after_code_files": [
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "668: {",
          "669:  UINT status;",
          "670:  URBDRC_PLUGIN* urbdrc = (URBDRC_PLUGIN*)pPlugin;",
          "672:  char channelName[sizeof(URBDRC_CHANNEL_NAME)] = { URBDRC_CHANNEL_NAME };",
          "675:   return ERROR_INVALID_PARAMETER;",
          "677:  urbdrc->listener_callback =",
          "678:      (URBDRC_LISTENER_CALLBACK*)calloc(1, sizeof(URBDRC_LISTENER_CALLBACK));",
          "",
          "[Removed Lines]",
          "671:  IUDEVMAN* udevman = urbdrc->udevman;",
          "674:  if (!urbdrc)",
          "",
          "[Added Lines]",
          "671:  IUDEVMAN* udevman;",
          "674:  if (!urbdrc || !urbdrc->udevman)",
          "677:  udevman = urbdrc->udevman;",
          "",
          "---------------"
        ]
      }
    }
  ]
}