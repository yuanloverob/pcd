{
  "cve_id": "CVE-2016-8654",
  "cve_desc": "A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.",
  "repo": "mdadams/jasper",
  "patch_hash": "4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a",
  "patch_info": {
    "commit_hash": "4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a",
    "repo": "mdadams/jasper",
    "commit_url": "https://github.com/mdadams/jasper/commit/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a",
    "files": [
      "data/test/bad/PoC1.jpc",
      "src/libjasper/jpc/jpc_qmfb.c"
    ],
    "message": "Fixed a buffer overrun problem in the QMFB code in the JPC codec that was caused by a buffer being allocated with a size that was too small in some cases. Added a new regression test case.",
    "before_after_code_files": [
      "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
    ]
  },
  "patch_diff": {
    "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c": [
      "File: src/libjasper/jpc/jpc_qmfb.c -> src/libjasper/jpc/jpc_qmfb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "374:  register jpc_fix_t *dstptr;",
      "375:  register int n;",
      "376:  register int m;",
      "380:  if (bufsize > QMFB_SPLITBUFSIZE) {",
      "",
      "[Removed Lines]",
      "377:  int hstartcol;",
      "",
      "[Added Lines]",
      "377:  int hstartrow;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "385:  }",
      "387:  if (numrows >= 2) {",
      "393:   n = m;",
      "",
      "[Removed Lines]",
      "388:   hstartcol = (numrows + 1 - parity) >> 1;",
      "390:   m = numrows - hstartcol;",
      "",
      "[Added Lines]",
      "388:   hstartrow = (numrows + 1 - parity) >> 1;",
      "390:   m = numrows - hstartrow;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "408:    srcptr += stride << 1;",
      "409:   }",
      "412:   srcptr = buf;",
      "413:   n = m;",
      "414:   while (n-- > 0) {",
      "",
      "[Removed Lines]",
      "411:   dstptr = &a[hstartcol * stride];",
      "",
      "[Added Lines]",
      "411:   dstptr = &a[hstartrow * stride];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:  register int n;",
      "440:  register int i;",
      "441:  int m;",
      "445:  if (bufsize > QMFB_SPLITBUFSIZE) {",
      "448:    abort();",
      "449:   }",
      "450:  }",
      "452:  if (numrows >= 2) {",
      "458:   n = m;",
      "",
      "[Removed Lines]",
      "442:  int hstartcol;",
      "446:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
      "453:   hstartcol = (numrows + 1 - parity) >> 1;",
      "455:   m = numrows - hstartcol;",
      "",
      "[Added Lines]",
      "442:  int hstartrow;",
      "446:   if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,",
      "447:     sizeof(jpc_fix_t)))) {",
      "454:   hstartrow = (numrows + 1 - parity) >> 1;",
      "456:   m = numrows - hstartrow;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "485:    srcptr += stride << 1;",
      "486:   }",
      "489:   srcptr = buf;",
      "490:   n = m;",
      "491:   while (n-- > 0) {",
      "",
      "[Removed Lines]",
      "488:   dstptr = &a[hstartcol * stride];",
      "",
      "[Added Lines]",
      "489:   dstptr = &a[hstartrow * stride];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "528:  if (bufsize > QMFB_SPLITBUFSIZE) {",
      "531:    abort();",
      "532:   }",
      "",
      "[Removed Lines]",
      "529:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
      "",
      "[Added Lines]",
      "530:   if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "723:  if (bufsize > QMFB_JOINBUFSIZE) {",
      "726:    abort();",
      "727:   }",
      "",
      "[Removed Lines]",
      "724:   if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {",
      "",
      "[Added Lines]",
      "725:   if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,",
      "726:     sizeof(jpc_fix_t)))) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c55b399c36ef46befcb21e4ebc4799367f89684",
      "candidate_info": {
        "commit_hash": "3c55b399c36ef46befcb21e4ebc4799367f89684",
        "repo": "mdadams/jasper",
        "commit_url": "https://github.com/mdadams/jasper/commit/3c55b399c36ef46befcb21e4ebc4799367f89684",
        "files": [
          "src/libjasper/base/jas_cm.c",
          "src/libjasper/base/jas_icc.c",
          "src/libjasper/base/jas_image.c",
          "src/libjasper/base/jas_malloc.c",
          "src/libjasper/base/jas_seq.c",
          "src/libjasper/base/jas_stream.c",
          "src/libjasper/base/jas_string.c",
          "src/libjasper/bmp/bmp_dec.c",
          "src/libjasper/include/jasper/jas_malloc.h",
          "src/libjasper/jp2/jp2_cod.c",
          "src/libjasper/jp2/jp2_dec.c",
          "src/libjasper/jp2/jp2_enc.c",
          "src/libjasper/jpc/jpc_cs.c",
          "src/libjasper/jpc/jpc_dec.c",
          "src/libjasper/jpc/jpc_enc.c",
          "src/libjasper/jpc/jpc_mqdec.c",
          "src/libjasper/jpc/jpc_mqenc.c",
          "src/libjasper/jpc/jpc_qmfb.c",
          "src/libjasper/jpc/jpc_t1enc.c",
          "src/libjasper/jpc/jpc_t2cod.c",
          "src/libjasper/jpc/jpc_t2dec.c",
          "src/libjasper/jpc/jpc_t2enc.c",
          "src/libjasper/jpc/jpc_tagtree.c",
          "src/libjasper/jpc/jpc_util.c",
          "src/libjasper/mif/mif_cod.c"
        ],
        "message": "At many places in the code, jas_malloc or jas_recalloc was being invoked with the size argument being computed in a manner that would not allow integer overflow to be detected.  Now, these places in the code have been modified to use special-purpose memory allocation functions (e.g., jas_alloc2, jas_alloc3, jas_realloc2) that check for overflow. This should fix many security problems.",
        "before_after_code_files": [
          "src/libjasper/base/jas_cm.c||src/libjasper/base/jas_cm.c",
          "src/libjasper/base/jas_icc.c||src/libjasper/base/jas_icc.c",
          "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c",
          "src/libjasper/base/jas_malloc.c||src/libjasper/base/jas_malloc.c",
          "src/libjasper/base/jas_seq.c||src/libjasper/base/jas_seq.c",
          "src/libjasper/base/jas_stream.c||src/libjasper/base/jas_stream.c",
          "src/libjasper/base/jas_string.c||src/libjasper/base/jas_string.c",
          "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c",
          "src/libjasper/include/jasper/jas_malloc.h||src/libjasper/include/jasper/jas_malloc.h",
          "src/libjasper/jp2/jp2_cod.c||src/libjasper/jp2/jp2_cod.c",
          "src/libjasper/jp2/jp2_dec.c||src/libjasper/jp2/jp2_dec.c",
          "src/libjasper/jp2/jp2_enc.c||src/libjasper/jp2/jp2_enc.c",
          "src/libjasper/jpc/jpc_cs.c||src/libjasper/jpc/jpc_cs.c",
          "src/libjasper/jpc/jpc_dec.c||src/libjasper/jpc/jpc_dec.c",
          "src/libjasper/jpc/jpc_enc.c||src/libjasper/jpc/jpc_enc.c",
          "src/libjasper/jpc/jpc_mqdec.c||src/libjasper/jpc/jpc_mqdec.c",
          "src/libjasper/jpc/jpc_mqenc.c||src/libjasper/jpc/jpc_mqenc.c",
          "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c",
          "src/libjasper/jpc/jpc_t1enc.c||src/libjasper/jpc/jpc_t1enc.c",
          "src/libjasper/jpc/jpc_t2cod.c||src/libjasper/jpc/jpc_t2cod.c",
          "src/libjasper/jpc/jpc_t2dec.c||src/libjasper/jpc/jpc_t2dec.c",
          "src/libjasper/jpc/jpc_t2enc.c||src/libjasper/jpc/jpc_t2enc.c",
          "src/libjasper/jpc/jpc_tagtree.c||src/libjasper/jpc/jpc_tagtree.c",
          "src/libjasper/jpc/jpc_util.c||src/libjasper/jpc/jpc_util.c",
          "src/libjasper/mif/mif_cod.c||src/libjasper/mif/mif_cod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
          ],
          "candidate": [
            "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libjasper/base/jas_cm.c||src/libjasper/base/jas_cm.c": [
          "File: src/libjasper/base/jas_cm.c -> src/libjasper/base/jas_cm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: {",
          "705:  jas_cmpxform_t **p;",
          "706:  assert(n >= pxformseq->numpxforms);",
          "709:  if (!p) {",
          "710:   return -1;",
          "711:  }",
          "",
          "[Removed Lines]",
          "707:  p = (!pxformseq->pxforms) ? jas_malloc(n * sizeof(jas_cmpxform_t *)) :",
          "708:    jas_realloc(pxformseq->pxforms, n * sizeof(jas_cmpxform_t *));",
          "",
          "[Added Lines]",
          "707:  p = (!pxformseq->pxforms) ? jas_alloc2(n, sizeof(jas_cmpxform_t *)) :",
          "708:    jas_realloc2(pxformseq->pxforms, n, sizeof(jas_cmpxform_t *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889:  jas_cmshapmatlut_cleanup(lut);",
          "890:  if (curv->numents == 0) {",
          "891:   lut->size = 2;",
          "893:    goto error;",
          "894:   lut->data[0] = 0.0;",
          "895:   lut->data[1] = 1.0;",
          "896:  } else if (curv->numents == 1) {",
          "897:   lut->size = 256;",
          "899:    goto error;",
          "900:   gamma = curv->ents[0] / 256.0;",
          "901:   for (i = 0; i < lut->size; ++i) {",
          "",
          "[Removed Lines]",
          "892:   if (!(lut->data = jas_malloc(lut->size * sizeof(jas_cmreal_t))))",
          "898:   if (!(lut->data = jas_malloc(lut->size * sizeof(jas_cmreal_t))))",
          "",
          "[Added Lines]",
          "892:   if (!(lut->data = jas_alloc2(lut->size, sizeof(jas_cmreal_t))))",
          "898:   if (!(lut->data = jas_alloc2(lut->size, sizeof(jas_cmreal_t))))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:   }",
          "904:  } else {",
          "905:   lut->size = curv->numents;",
          "907:    goto error;",
          "908:   for (i = 0; i < lut->size; ++i) {",
          "909:    lut->data[i] = curv->ents[i] / 65535.0;",
          "",
          "[Removed Lines]",
          "906:   if (!(lut->data = jas_malloc(lut->size * sizeof(jas_cmreal_t))))",
          "",
          "[Added Lines]",
          "906:   if (!(lut->data = jas_alloc2(lut->size, sizeof(jas_cmreal_t))))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "953:    return -1;",
          "954:   }",
          "955:  }",
          "957:   return -1;",
          "958:  invlut->size = n;",
          "959:  for (i = 0; i < invlut->size; ++i) {",
          "",
          "[Removed Lines]",
          "956:  if (!(invlut->data = jas_malloc(n * sizeof(jas_cmreal_t))))",
          "",
          "[Added Lines]",
          "956:  if (!(invlut->data = jas_alloc2(n, sizeof(jas_cmreal_t))))",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_icc.c||src/libjasper/base/jas_icc.c": [
          "File: src/libjasper/base/jas_icc.c -> src/libjasper/base/jas_icc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:  jas_icctagtab_t *tagtab;",
          "375:  tagtab = &prof->tagtab;",
          "377:    sizeof(jas_icctagtabent_t))))",
          "378:   goto error;",
          "379:  tagtab->numents = prof->attrtab->numattrs;",
          "",
          "[Removed Lines]",
          "376:  if (!(tagtab->ents = jas_malloc(prof->attrtab->numattrs *",
          "",
          "[Added Lines]",
          "376:  if (!(tagtab->ents = jas_alloc2(prof->attrtab->numattrs,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:  }",
          "523:  if (jas_iccgetuint32(in, &tagtab->numents))",
          "524:   goto error;",
          "526:    sizeof(jas_icctagtabent_t))))",
          "527:   goto error;",
          "528:  tagtabent = tagtab->ents;",
          "",
          "[Removed Lines]",
          "525:  if (!(tagtab->ents = jas_malloc(tagtab->numents *",
          "",
          "[Added Lines]",
          "525:  if (!(tagtab->ents = jas_alloc2(tagtab->numents,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "743: {",
          "744:  jas_iccattr_t *newattrs;",
          "745:  assert(maxents >= tab->numattrs);",
          "748:  if (!newattrs)",
          "749:   return -1;",
          "750:  tab->attrs = newattrs;",
          "",
          "[Removed Lines]",
          "746:  newattrs = tab->attrs ? jas_realloc(tab->attrs, maxents *",
          "747:    sizeof(jas_iccattr_t)) : jas_malloc(maxents * sizeof(jas_iccattr_t));",
          "",
          "[Added Lines]",
          "746:  newattrs = tab->attrs ? jas_realloc2(tab->attrs, maxents,",
          "747:    sizeof(jas_iccattr_t)) : jas_alloc2(maxents, sizeof(jas_iccattr_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1002:  if (jas_iccgetuint32(in, &curv->numents))",
          "1003:   goto error;",
          "1005:   goto error;",
          "1006:  for (i = 0; i < curv->numents; ++i) {",
          "1007:   if (jas_iccgetuint16(in, &curv->ents[i]))",
          "",
          "[Removed Lines]",
          "1004:  if (!(curv->ents = jas_malloc(curv->numents * sizeof(jas_iccuint16_t))))",
          "",
          "[Added Lines]",
          "1004:  if (!(curv->ents = jas_alloc2(curv->numents, sizeof(jas_iccuint16_t))))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1106:  if (jas_iccgetuint32(in, &txtdesc->uclangcode) ||",
          "1107:    jas_iccgetuint32(in, &txtdesc->uclen))",
          "1108:   goto error;",
          "1110:   goto error;",
          "1111:  if (jas_stream_read(in, txtdesc->ucdata, txtdesc->uclen * 2) !=",
          "1112:    JAS_CAST(int, txtdesc->uclen * 2))",
          "",
          "[Removed Lines]",
          "1109:  if (!(txtdesc->ucdata = jas_malloc(txtdesc->uclen * 2)))",
          "",
          "[Added Lines]",
          "1109:  if (!(txtdesc->ucdata = jas_alloc2(txtdesc->uclen, 2)))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1309:    jas_iccgetuint16(in, &lut8->numouttabents))",
          "1310:   goto error;",
          "1311:  clutsize = jas_iccpowi(lut8->clutlen, lut8->numinchans) * lut8->numoutchans;",
          "1316:    sizeof(jas_iccuint8_t *))))",
          "1317:   goto error;",
          "1318:  for (i = 0; i < lut8->numinchans; ++i)",
          "1319:   lut8->intabs[i] = &lut8->intabsbuf[i * lut8->numintabents];",
          "1323:    sizeof(jas_iccuint8_t *))))",
          "1324:   goto error;",
          "1325:  for (i = 0; i < lut8->numoutchans; ++i)",
          "",
          "[Removed Lines]",
          "1312:  if (!(lut8->clut = jas_malloc(clutsize * sizeof(jas_iccuint8_t))) ||",
          "1313:    !(lut8->intabsbuf = jas_malloc(lut8->numinchans *",
          "1314:    lut8->numintabents * sizeof(jas_iccuint8_t))) ||",
          "1315:    !(lut8->intabs = jas_malloc(lut8->numinchans *",
          "1320:  if (!(lut8->outtabsbuf = jas_malloc(lut8->numoutchans *",
          "1321:    lut8->numouttabents * sizeof(jas_iccuint8_t))) ||",
          "1322:    !(lut8->outtabs = jas_malloc(lut8->numoutchans *",
          "",
          "[Added Lines]",
          "1312:  if (!(lut8->clut = jas_alloc2(clutsize, sizeof(jas_iccuint8_t))) ||",
          "1313:    !(lut8->intabsbuf = jas_alloc3(lut8->numinchans,",
          "1314:    lut8->numintabents, sizeof(jas_iccuint8_t))) ||",
          "1315:    !(lut8->intabs = jas_alloc2(lut8->numinchans,",
          "1320:  if (!(lut8->outtabsbuf = jas_alloc3(lut8->numoutchans,",
          "1321:    lut8->numouttabents, sizeof(jas_iccuint8_t))) ||",
          "1322:    !(lut8->outtabs = jas_alloc2(lut8->numoutchans,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1488:    jas_iccgetuint16(in, &lut16->numouttabents))",
          "1489:   goto error;",
          "1490:  clutsize = jas_iccpowi(lut16->clutlen, lut16->numinchans) * lut16->numoutchans;",
          "1495:    sizeof(jas_iccuint16_t *))))",
          "1496:   goto error;",
          "1497:  for (i = 0; i < lut16->numinchans; ++i)",
          "1498:   lut16->intabs[i] = &lut16->intabsbuf[i * lut16->numintabents];",
          "1502:    sizeof(jas_iccuint16_t *))))",
          "1503:   goto error;",
          "1504:  for (i = 0; i < lut16->numoutchans; ++i)",
          "",
          "[Removed Lines]",
          "1491:  if (!(lut16->clut = jas_malloc(clutsize * sizeof(jas_iccuint16_t))) ||",
          "1492:    !(lut16->intabsbuf = jas_malloc(lut16->numinchans *",
          "1493:    lut16->numintabents * sizeof(jas_iccuint16_t))) ||",
          "1494:    !(lut16->intabs = jas_malloc(lut16->numinchans *",
          "1499:  if (!(lut16->outtabsbuf = jas_malloc(lut16->numoutchans *",
          "1500:    lut16->numouttabents * sizeof(jas_iccuint16_t))) ||",
          "1501:    !(lut16->outtabs = jas_malloc(lut16->numoutchans *",
          "",
          "[Added Lines]",
          "1491:  if (!(lut16->clut = jas_alloc2(clutsize, sizeof(jas_iccuint16_t))) ||",
          "1492:    !(lut16->intabsbuf = jas_alloc3(lut16->numinchans,",
          "1493:    lut16->numintabents, sizeof(jas_iccuint16_t))) ||",
          "1494:    !(lut16->intabs = jas_alloc2(lut16->numinchans,",
          "1499:  if (!(lut16->outtabsbuf = jas_alloc3(lut16->numoutchans,",
          "1500:    lut16->numouttabents, sizeof(jas_iccuint16_t))) ||",
          "1501:    !(lut16->outtabs = jas_alloc2(lut16->numoutchans,",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_image.c||src/libjasper/base/jas_image.c": [
          "File: src/libjasper/base/jas_image.c -> src/libjasper/base/jas_image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  image->inmem_ = true;",
          "146:    sizeof(jas_image_cmpt_t *)))) {",
          "147:   jas_image_destroy(image);",
          "148:   return 0;",
          "",
          "[Removed Lines]",
          "145:  if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *",
          "",
          "[Added Lines]",
          "145:  if (!(image->cmpts_ = jas_alloc2(image->maxcmpts_,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:  jas_image_cmpt_t **newcmpts;",
          "783:  int cmptno;",
          "787:  if (!newcmpts) {",
          "788:   return -1;",
          "789:  }",
          "",
          "[Removed Lines]",
          "785:  newcmpts = (!image->cmpts_) ? jas_malloc(maxcmpts * sizeof(jas_image_cmpt_t *)) :",
          "786:    jas_realloc(image->cmpts_, maxcmpts * sizeof(jas_image_cmpt_t *));",
          "",
          "[Added Lines]",
          "785:  newcmpts = (!image->cmpts_) ? jas_alloc2(maxcmpts, sizeof(jas_image_cmpt_t *)) :",
          "786:    jas_realloc2(image->cmpts_, maxcmpts, sizeof(jas_image_cmpt_t *));",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_malloc.c||src/libjasper/base/jas_malloc.c": [
          "File: src/libjasper/base/jas_malloc.c -> src/libjasper/base/jas_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #include <stdio.h>",
          "75: #include <stdlib.h>",
          "78: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: #include <stdint.h>",
          "77: #include <stdbool.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: #if !defined(DEBUG_MEMALLOC)",
          "97: {",
          "103:  }",
          "106:  return malloc(size);",
          "107: }",
          "109: void jas_free(void *ptr)",
          "110: {",
          "111:  free(ptr);",
          "112: }",
          "115: {",
          "116:  return realloc(ptr, size);",
          "117: }",
          "120: {",
          "121:  void *ptr;",
          "125:   return 0;",
          "126:  }",
          "128:  return ptr;",
          "129: }",
          "",
          "[Removed Lines]",
          "92: #define MEMALLOC_ALIGNMENT 32",
          "93: #define MEMALLOC_ALIGN2",
          "94: #undef MEMALLOC_ALIGN2",
          "96: void *jas_malloc(size_t size)",
          "98: #if defined(MEMALLOC_ALIGN2)",
          "99:  void *ptr;",
          "100: abort();",
          "101:  if (posix_memalign(&ptr, MEMALLOC_ALIGNMENT, size)) {",
          "102:   return 0;",
          "104:  return ptr;",
          "105: #endif",
          "114: void *jas_realloc(void *ptr, size_t size)",
          "119: void *jas_calloc(size_t nmemb, size_t size)",
          "122:  size_t n;",
          "123:  n = nmemb * size;",
          "124:  if (!(ptr = jas_malloc(n * sizeof(char)))) {",
          "127:  memset(ptr, 0, n);",
          "",
          "[Added Lines]",
          "99: inline bool jas_safe_size_mul(size_t x, size_t y, size_t* result)",
          "102:  if (x && y > SIZE_MAX / x) {",
          "105:   return false;",
          "108:  return true;",
          "109: }",
          "115: void *jas_malloc(size_t size)",
          "116: {",
          "120: void *jas_realloc(void *ptr, size_t size)",
          "121: {",
          "122:  return realloc(ptr, size);",
          "123: }",
          "135: void *jas_alloc2(size_t num_elements, size_t element_size)",
          "136: {",
          "137:  size_t size;",
          "138:  if (!jas_safe_size_mul(num_elements, element_size, &size)) {",
          "139:   return 0;",
          "140:  }",
          "141:  return jas_malloc(size);",
          "142: }",
          "144: void *jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size)",
          "146:  size_t size;",
          "147:  if (!jas_safe_size_mul(array_size, element_size, &size) ||",
          "148:    !jas_safe_size_mul(size, num_arrays, &size)) {",
          "149:   return 0;",
          "150:  }",
          "151:  return jas_malloc(size);",
          "152: }",
          "154: void *jas_realloc2(void *ptr, size_t num_elements, size_t element_size)",
          "155: {",
          "156:  size_t size;",
          "157:  if (!jas_safe_size_mul(num_elements, element_size, &size)) {",
          "158:   return 0;",
          "159:  }",
          "163: void *jas_calloc(size_t num_elements, size_t element_size)",
          "166:  size_t size;",
          "167:  if (!jas_safe_size_mul(num_elements, element_size, &size)) {",
          "168:   return 0;",
          "169:  }",
          "170:  if (!(ptr = jas_malloc(size))) {",
          "173:  memset(ptr, 0, size);",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_seq.c||src/libjasper/base/jas_seq.c": [
          "File: src/libjasper/base/jas_seq.c -> src/libjasper/base/jas_seq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  matrix->datasize_ = numrows * numcols;",
          "116:  if (matrix->maxrows_ > 0) {",
          "118:     sizeof(jas_seqent_t *)))) {",
          "119:    jas_matrix_destroy(matrix);",
          "120:    return 0;",
          "",
          "[Removed Lines]",
          "117:   if (!(matrix->rows_ = jas_malloc(matrix->maxrows_ *",
          "",
          "[Added Lines]",
          "117:   if (!(matrix->rows_ = jas_alloc2(matrix->maxrows_,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  }",
          "124:  if (matrix->datasize_ > 0) {",
          "126:     sizeof(jas_seqent_t)))) {",
          "127:    jas_matrix_destroy(matrix);",
          "128:    return 0;",
          "",
          "[Removed Lines]",
          "125:   if (!(matrix->data_ = jas_malloc(matrix->datasize_ *",
          "",
          "[Added Lines]",
          "125:   if (!(matrix->data_ = jas_alloc2(matrix->datasize_,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  mat0->numrows_ = r1 - r0 + 1;",
          "221:  mat0->numcols_ = c1 - c0 + 1;",
          "222:  mat0->maxrows_ = mat0->numrows_;",
          "224:  for (i = 0; i < mat0->numrows_; ++i) {",
          "225:   mat0->rows_[i] = mat1->rows_[r0 + i] + c0;",
          "226:  }",
          "",
          "[Removed Lines]",
          "223:  mat0->rows_ = jas_malloc(mat0->maxrows_ * sizeof(jas_seqent_t *));",
          "",
          "[Added Lines]",
          "223:  mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *));",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_stream.c||src/libjasper/base/jas_stream.c": [
          "File: src/libjasper/base/jas_stream.c -> src/libjasper/base/jas_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:  if (buf) {",
          "213:   obj->buf_ = (unsigned char *) buf;",
          "214:  } else {",
          "216:   obj->myalloc_ = 1;",
          "217:  }",
          "218:  if (!obj->buf_) {",
          "",
          "[Removed Lines]",
          "215:   obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));",
          "",
          "[Added Lines]",
          "215:   obj->buf_ = jas_malloc(obj->bufsize_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "992:  unsigned char *buf;",
          "994:  assert(m->buf_);",
          "996:   return -1;",
          "997:  }",
          "998:  m->buf_ = buf;",
          "",
          "[Removed Lines]",
          "995:  if (!(buf = jas_realloc(m->buf_, bufsize * sizeof(unsigned char)))) {",
          "",
          "[Added Lines]",
          "995:  if (!(buf = jas_realloc2(m->buf_, bufsize, sizeof(unsigned char)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/base/jas_string.c||src/libjasper/base/jas_string.c": [
          "File: src/libjasper/base/jas_string.c -> src/libjasper/base/jas_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  int n;",
          "89:  char *p;",
          "90:  n = strlen(s) + 1;",
          "92:   return 0;",
          "93:  }",
          "94:  strcpy(p, s);",
          "",
          "[Removed Lines]",
          "91:  if (!(p = jas_malloc(n * sizeof(char)))) {",
          "",
          "[Added Lines]",
          "91:  if (!(p = jas_malloc(n))) {",
          "",
          "---------------"
        ],
        "src/libjasper/bmp/bmp_dec.c||src/libjasper/bmp/bmp_dec.c": [
          "File: src/libjasper/bmp/bmp_dec.c -> src/libjasper/bmp/bmp_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  }",
          "285:  if (info->numcolors > 0) {",
          "287:     sizeof(bmp_palent_t)))) {",
          "288:    bmp_info_destroy(info);",
          "289:    return 0;",
          "",
          "[Removed Lines]",
          "286:   if (!(info->palents = jas_malloc(info->numcolors *",
          "",
          "[Added Lines]",
          "286:   if (!(info->palents = jas_alloc2(info->numcolors,",
          "",
          "---------------"
        ],
        "src/libjasper/include/jasper/jas_malloc.h||src/libjasper/include/jasper/jas_malloc.h": [
          "File: src/libjasper/include/jasper/jas_malloc.h -> src/libjasper/include/jasper/jas_malloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: void *jas_realloc(void *ptr, size_t size);",
          "118: #endif",
          "",
          "[Removed Lines]",
          "116: void *jas_calloc(size_t nmemb, size_t size);",
          "",
          "[Added Lines]",
          "116: void *jas_calloc(size_t num_elements, size_t element_size);",
          "119: void *jas_alloc2(size_t num_elements, size_t element_size);",
          "122: void *jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size);",
          "125: void *jas_realloc2(void *ptr, size_t num_elements, size_t element_size);",
          "",
          "---------------"
        ],
        "src/libjasper/jp2/jp2_cod.c||src/libjasper/jp2/jp2_cod.c": [
          "File: src/libjasper/jp2/jp2_cod.c -> src/libjasper/jp2/jp2_cod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:  jp2_bpcc_t *bpcc = &box->data.bpcc;",
          "372:  unsigned int i;",
          "373:  bpcc->numcmpts = box->datalen;",
          "375:   return -1;",
          "376:  }",
          "377:  for (i = 0; i < bpcc->numcmpts; ++i) {",
          "",
          "[Removed Lines]",
          "374:  if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts * sizeof(uint_fast8_t)))) {",
          "",
          "[Added Lines]",
          "374:  if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts, sizeof(uint_fast8_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   break;",
          "416:  case JP2_COLR_ICC:",
          "417:   colr->iccplen = box->datalen - 3;",
          "419:    return -1;",
          "420:   }",
          "421:   if (jas_stream_read(in, colr->iccp, colr->iccplen) != colr->iccplen) {",
          "",
          "[Removed Lines]",
          "418:   if (!(colr->iccp = jas_malloc(colr->iccplen * sizeof(uint_fast8_t)))) {",
          "",
          "[Added Lines]",
          "418:   if (!(colr->iccp = jas_alloc2(colr->iccplen, sizeof(uint_fast8_t)))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "452:  if (jp2_getuint16(in, &cdef->numchans)) {",
          "453:   return -1;",
          "454:  }",
          "456:   return -1;",
          "457:  }",
          "458:  for (channo = 0; channo < cdef->numchans; ++channo) {",
          "",
          "[Removed Lines]",
          "455:  if (!(cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t)))) {",
          "",
          "[Added Lines]",
          "455:  if (!(cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t)))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764:  unsigned int i;",
          "766:  cmap->numchans = (box->datalen) / 4;",
          "768:   return -1;",
          "769:  }",
          "770:  for (i = 0; i < cmap->numchans; ++i) {",
          "",
          "[Removed Lines]",
          "767:  if (!(cmap->ents = jas_malloc(cmap->numchans * sizeof(jp2_cmapent_t)))) {",
          "",
          "[Added Lines]",
          "767:  if (!(cmap->ents = jas_alloc2(cmap->numchans, sizeof(jp2_cmapent_t)))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:   return -1;",
          "827:  }",
          "828:  lutsize = pclr->numlutents * pclr->numchans;",
          "830:   return -1;",
          "831:  }",
          "833:   return -1;",
          "834:  }",
          "835:  for (i = 0; i < pclr->numchans; ++i) {",
          "",
          "[Removed Lines]",
          "829:  if (!(pclr->lutdata = jas_malloc(lutsize * sizeof(int_fast32_t)))) {",
          "832:  if (!(pclr->bpc = jas_malloc(pclr->numchans * sizeof(uint_fast8_t)))) {",
          "",
          "[Added Lines]",
          "829:  if (!(pclr->lutdata = jas_alloc2(lutsize, sizeof(int_fast32_t)))) {",
          "832:  if (!(pclr->bpc = jas_alloc2(pclr->numchans, sizeof(uint_fast8_t)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jp2/jp2_dec.c||src/libjasper/jp2/jp2_dec.c": [
          "File: src/libjasper/jp2/jp2_dec.c -> src/libjasper/jp2/jp2_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:  }",
          "343:   jas_eprintf(\"error: no memory\\n\");",
          "344:   goto error;",
          "345:  }",
          "",
          "[Removed Lines]",
          "342:  if (!(dec->chantocmptlut = jas_malloc(dec->numchans * sizeof(uint_fast16_t)))) {",
          "",
          "[Added Lines]",
          "342:  if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:    if (cmapent->map == JP2_CMAP_DIRECT) {",
          "358:     dec->chantocmptlut[channo] = channo;",
          "359:    } else if (cmapent->map == JP2_CMAP_PALETTE) {",
          "361:     for (i = 0; i < pclrd->numlutents; ++i) {",
          "362:      lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];",
          "363:     }",
          "",
          "[Removed Lines]",
          "360:     lutents = jas_malloc(pclrd->numlutents * sizeof(int_fast32_t));",
          "",
          "[Added Lines]",
          "360:     lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));",
          "",
          "---------------"
        ],
        "src/libjasper/jp2/jp2_enc.c||src/libjasper/jp2/jp2_enc.c": [
          "File: src/libjasper/jp2/jp2_enc.c -> src/libjasper/jp2/jp2_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   }",
          "192:   bpcc = &box->data.bpcc;",
          "193:   bpcc->numcmpts = jas_image_numcmpts(image);",
          "195:     sizeof(uint_fast8_t)))) {",
          "196:    goto error;",
          "197:   }",
          "",
          "[Removed Lines]",
          "194:   if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *",
          "",
          "[Added Lines]",
          "194:   if (!(bpcc->bpcs = jas_alloc2(bpcc->numcmpts,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:   }",
          "286:   cdef = &box->data.cdef;",
          "287:   cdef->numchans = jas_image_numcmpts(image);",
          "289:   for (i = 0; i < jas_image_numcmpts(image); ++i) {",
          "290:    cdefchanent = &cdef->ents[i];",
          "291:    cdefchanent->channo = i;",
          "",
          "[Removed Lines]",
          "288:   cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));",
          "",
          "[Added Lines]",
          "288:   cdef->ents = jas_alloc2(cdef->numchans, sizeof(jp2_cdefchan_t));",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_cs.c||src/libjasper/jpc/jpc_cs.c": [
          "File: src/libjasper/jpc/jpc_cs.c -> src/libjasper/jpc/jpc_cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:    !siz->tileheight || !siz->numcomps) {",
          "503:   return -1;",
          "504:  }",
          "506:   return -1;",
          "507:  }",
          "508:  for (i = 0; i < siz->numcomps; ++i) {",
          "",
          "[Removed Lines]",
          "505:  if (!(siz->comps = jas_malloc(siz->numcomps * sizeof(jpc_sizcomp_t)))) {",
          "",
          "[Added Lines]",
          "505:  if (!(siz->comps = jas_alloc2(siz->numcomps, sizeof(jpc_sizcomp_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:   break;",
          "994:  }",
          "995:  if (compparms->numstepsizes > 0) {",
          "997:     sizeof(uint_fast16_t));",
          "998:   assert(compparms->stepsizes);",
          "999:   for (i = 0; i < compparms->numstepsizes; ++i) {",
          "",
          "[Removed Lines]",
          "996:   compparms->stepsizes = jas_malloc(compparms->numstepsizes *",
          "",
          "[Added Lines]",
          "996:   compparms->stepsizes = jas_alloc2(compparms->numstepsizes,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1110:  ppm->len = ms->len - 1;",
          "1111:  if (ppm->len > 0) {",
          "1113:    goto error;",
          "1114:   }",
          "1115:   if (JAS_CAST(uint, jas_stream_read(in, ppm->data, ppm->len)) != ppm->len) {",
          "",
          "[Removed Lines]",
          "1112:   if (!(ppm->data = jas_malloc(ppm->len * sizeof(unsigned char)))) {",
          "",
          "[Added Lines]",
          "1112:   if (!(ppm->data = jas_malloc(ppm->len))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1178:  }",
          "1179:  ppt->len = ms->len - 1;",
          "1180:  if (ppt->len > 0) {",
          "1182:    goto error;",
          "1183:   }",
          "1184:   if (jas_stream_read(in, (char *) ppt->data, ppt->len) != JAS_CAST(int, ppt->len)) {",
          "",
          "[Removed Lines]",
          "1181:   if (!(ppt->data = jas_malloc(ppt->len * sizeof(unsigned char)))) {",
          "",
          "[Added Lines]",
          "1181:   if (!(ppt->data = jas_malloc(ppt->len))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1241:  uint_fast8_t tmp;",
          "1242:  poc->numpchgs = (cstate->numcomps > 256) ? (ms->len / 9) :",
          "1243:    (ms->len / 7);",
          "1245:   goto error;",
          "1246:  }",
          "1247:  for (pchgno = 0, pchg = poc->pchgs; pchgno < poc->numpchgs; ++pchgno,",
          "",
          "[Removed Lines]",
          "1244:  if (!(poc->pchgs = jas_malloc(poc->numpchgs * sizeof(jpc_pocpchg_t)))) {",
          "",
          "[Added Lines]",
          "1244:  if (!(poc->pchgs = jas_alloc2(poc->numpchgs, sizeof(jpc_pocpchg_t)))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1346:  jpc_crgcomp_t *comp;",
          "1347:  uint_fast16_t compno;",
          "1348:  crg->numcomps = cstate->numcomps;",
          "1350:   return -1;",
          "1351:  }",
          "1352:  for (compno = 0, comp = crg->comps; compno < cstate->numcomps;",
          "",
          "[Removed Lines]",
          "1349:  if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {",
          "",
          "[Added Lines]",
          "1349:  if (!(crg->comps = jas_alloc2(cstate->numcomps, sizeof(uint_fast16_t)))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485:  cstate = 0;",
          "1487:  if (ms->len > 0) {",
          "1489:    return -1;",
          "1490:   }",
          "1491:   if (jas_stream_read(in, (char *) unk->data, ms->len) != JAS_CAST(int, ms->len)) {",
          "",
          "[Removed Lines]",
          "1488:   if (!(unk->data = jas_malloc(ms->len * sizeof(unsigned char)))) {",
          "",
          "[Added Lines]",
          "1488:   if (!(unk->data = jas_alloc2(ms->len, sizeof(unsigned char)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_dec.c||src/libjasper/jpc/jpc_dec.c": [
          "File: src/libjasper/jpc/jpc_dec.c -> src/libjasper/jpc/jpc_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:  if (dec->state == JPC_MH) {",
          "453:   assert(compinfos);",
          "454:   for (cmptno = 0, cmpt = dec->cmpts, compinfo = compinfos;",
          "455:     cmptno < dec->numcomps; ++cmptno, ++cmpt, ++compinfo) {",
          "",
          "[Removed Lines]",
          "452:   compinfos = jas_malloc(dec->numcomps * sizeof(jas_image_cmptparm_t));",
          "",
          "[Added Lines]",
          "452:   compinfos = jas_alloc2(dec->numcomps, sizeof(jas_image_cmptparm_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:    tile->realmode = 1;",
          "693:   }",
          "694:   tcomp->numrlvls = ccp->numrlvls;",
          "696:     sizeof(jpc_dec_rlvl_t)))) {",
          "697:    return -1;",
          "698:   }",
          "",
          "[Removed Lines]",
          "695:   if (!(tcomp->rlvls = jas_malloc(tcomp->numrlvls *",
          "",
          "[Added Lines]",
          "695:   if (!(tcomp->rlvls = jas_alloc2(tcomp->numrlvls,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:      rlvl->cbgheightexpn);",
          "766:    rlvl->numbands = (!rlvlno) ? 1 : 3;",
          "768:      sizeof(jpc_dec_band_t)))) {",
          "769:     return -1;",
          "770:    }",
          "",
          "[Removed Lines]",
          "767:    if (!(rlvl->bands = jas_malloc(rlvl->numbands *",
          "",
          "[Added Lines]",
          "767:    if (!(rlvl->bands = jas_alloc2(rlvl->numbands,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "798:     assert(rlvl->numprcs);",
          "801:      return -1;",
          "802:     }",
          "",
          "[Removed Lines]",
          "800:     if (!(band->prcs = jas_malloc(rlvl->numprcs * sizeof(jpc_dec_prc_t)))) {",
          "",
          "[Added Lines]",
          "800:     if (!(band->prcs = jas_alloc2(rlvl->numprcs, sizeof(jpc_dec_prc_t)))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "834:    if (!(prc->numimsbstagtree = jpc_tagtree_create(prc->numhcblks, prc->numvcblks))) {",
          "835:     return -1;",
          "836:    }",
          "838:     return -1;",
          "839:    }",
          "",
          "[Removed Lines]",
          "837:    if (!(prc->cblks = jas_malloc(prc->numcblks * sizeof(jpc_dec_cblk_t)))) {",
          "",
          "[Added Lines]",
          "837:    if (!(prc->cblks = jas_alloc2(prc->numcblks, sizeof(jpc_dec_cblk_t)))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1181:   return -1;",
          "1182:  }",
          "1185:   return -1;",
          "1186:  }",
          "",
          "[Removed Lines]",
          "1184:  if (!(dec->cmpts = jas_malloc(dec->numcomps * sizeof(jpc_dec_cmpt_t)))) {",
          "",
          "[Added Lines]",
          "1184:  if (!(dec->cmpts = jas_alloc2(dec->numcomps, sizeof(jpc_dec_cmpt_t)))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1204:  dec->numhtiles = JPC_CEILDIV(dec->xend - dec->tilexoff, dec->tilewidth);",
          "1205:  dec->numvtiles = JPC_CEILDIV(dec->yend - dec->tileyoff, dec->tileheight);",
          "1206:  dec->numtiles = dec->numhtiles * dec->numvtiles;",
          "1208:   return -1;",
          "1209:  }",
          "",
          "[Removed Lines]",
          "1207:  if (!(dec->tiles = jas_malloc(dec->numtiles * sizeof(jpc_dec_tile_t)))) {",
          "",
          "[Added Lines]",
          "1207:  if (!(dec->tiles = jas_alloc2(dec->numtiles, sizeof(jpc_dec_tile_t)))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1228:   tile->pkthdrstreampos = 0;",
          "1229:   tile->pptstab = 0;",
          "1230:   tile->cp = 0;",
          "1232:     sizeof(jpc_dec_tcomp_t)))) {",
          "1233:    return -1;",
          "1234:   }",
          "",
          "[Removed Lines]",
          "1231:   if (!(tile->tcomps = jas_malloc(dec->numcomps *",
          "",
          "[Added Lines]",
          "1231:   if (!(tile->tcomps = jas_alloc2(dec->numcomps,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1489:  cp->numlyrs = 0;",
          "1490:  cp->mctid = 0;",
          "1491:  cp->csty = 0;",
          "1493:   return 0;",
          "1494:  }",
          "1495:  if (!(cp->pchglist = jpc_pchglist_create())) {",
          "",
          "[Removed Lines]",
          "1492:  if (!(cp->ccps = jas_malloc(cp->numcomps * sizeof(jpc_dec_ccp_t)))) {",
          "",
          "[Added Lines]",
          "1492:  if (!(cp->ccps = jas_alloc2(cp->numcomps, sizeof(jpc_dec_ccp_t)))) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2048:  }",
          "2049:  streamlist->numstreams = 0;",
          "2050:  streamlist->maxstreams = 100;",
          "2052:    sizeof(jas_stream_t *)))) {",
          "2053:   jas_free(streamlist);",
          "2054:   return 0;",
          "",
          "[Removed Lines]",
          "2051:  if (!(streamlist->streams = jas_malloc(streamlist->maxstreams *",
          "",
          "[Added Lines]",
          "2051:  if (!(streamlist->streams = jas_alloc2(streamlist->maxstreams,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2069:  if (streamlist->numstreams >= streamlist->maxstreams) {",
          "2070:   newmaxstreams = streamlist->maxstreams + 1024;",
          "2073:    return -1;",
          "2074:   }",
          "2075:   for (i = streamlist->numstreams; i < streamlist->maxstreams; ++i) {",
          "",
          "[Removed Lines]",
          "2071:   if (!(newstreams = jas_realloc(streamlist->streams,",
          "2072:     (newmaxstreams + 1024) * sizeof(jas_stream_t *)))) {",
          "",
          "[Added Lines]",
          "2071:   if (!(newstreams = jas_realloc2(streamlist->streams,",
          "2072:     (newmaxstreams + 1024), sizeof(jas_stream_t *)))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2155: {",
          "2156:  jpc_ppxstabent_t **newents;",
          "2157:  if (tab->maxents < maxents) {",
          "2160:   if (!newents) {",
          "2161:    return -1;",
          "2162:   }",
          "",
          "[Removed Lines]",
          "2158:   newents = (tab->ents) ? jas_realloc(tab->ents, maxents *",
          "2159:     sizeof(jpc_ppxstabent_t *)) : jas_malloc(maxents * sizeof(jpc_ppxstabent_t *));",
          "",
          "[Added Lines]",
          "2158:   newents = (tab->ents) ? jas_realloc2(tab->ents, maxents,",
          "2159:     sizeof(jpc_ppxstabent_t *)) : jas_alloc2(maxents, sizeof(jpc_ppxstabent_t *));",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_enc.c||src/libjasper/jpc/jpc_enc.c": [
          "File: src/libjasper/jpc/jpc_enc.c -> src/libjasper/jpc/jpc_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:   vsteplcm *= jas_image_cmptvstep(image, cmptno);",
          "404:  }",
          "407:   goto error;",
          "408:  }",
          "409:  for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,",
          "",
          "[Removed Lines]",
          "406:  if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))) {",
          "",
          "[Added Lines]",
          "406:  if (!(cp->ccps = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_ccp_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:  if (ilyrrates && numilyrrates > 0) {",
          "658:   tcp->numlyrs = numilyrrates + 1;",
          "660:     sizeof(jpc_fix_t)))) {",
          "661:    goto error;",
          "662:   }",
          "",
          "[Removed Lines]",
          "659:   if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *",
          "",
          "[Added Lines]",
          "659:   if (!(tcp->ilyrrates = jas_alloc2((tcp->numlyrs - 1),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:  siz->tilewidth = cp->tilewidth;",
          "940:  siz->tileheight = cp->tileheight;",
          "941:  siz->numcomps = cp->numcmpts;",
          "943:  assert(siz->comps);",
          "944:  for (i = 0; i < JAS_CAST(int, cp->numcmpts); ++i) {",
          "945:   siz->comps[i].prec = cp->ccps[i].prec;",
          "",
          "[Removed Lines]",
          "942:  siz->comps = jas_malloc(siz->numcomps * sizeof(jpc_sizcomp_t));",
          "",
          "[Added Lines]",
          "942:  siz->comps = jas_alloc2(siz->numcomps, sizeof(jpc_sizcomp_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "976:   return -1;",
          "977:  }",
          "978:  crg = &enc->mrk->parms.crg;",
          "980:  if (jpc_putms(enc->out, enc->cstate, enc->mrk)) {",
          "981:   jas_eprintf(\"cannot write CRG marker\\n\");",
          "982:   return -1;",
          "",
          "[Removed Lines]",
          "979:  crg->comps = jas_malloc(crg->numcomps * sizeof(jpc_crgcomp_t));",
          "",
          "[Added Lines]",
          "979:  crg->comps = jas_alloc2(crg->numcomps, sizeof(jpc_crgcomp_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1954:  tile->mctid = cp->tcp.mctid;",
          "1956:  tile->numlyrs = cp->tcp.numlyrs;",
          "1958:    sizeof(uint_fast32_t)))) {",
          "1959:   goto error;",
          "1960:  }",
          "",
          "[Removed Lines]",
          "1957:  if (!(tile->lyrsizes = jas_malloc(tile->numlyrs *",
          "",
          "[Added Lines]",
          "1957:  if (!(tile->lyrsizes = jas_alloc2(tile->numlyrs,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1963:  }",
          "1967:   goto error;",
          "1968:  }",
          "",
          "[Removed Lines]",
          "1966:  if (!(tile->tcmpts = jas_malloc(cp->numcmpts * sizeof(jpc_enc_tcmpt_t)))) {",
          "",
          "[Added Lines]",
          "1966:  if (!(tile->tcmpts = jas_alloc2(cp->numcmpts, sizeof(jpc_enc_tcmpt_t)))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2108:    jas_seq2d_ystart(tcmpt->data), jas_seq2d_xend(tcmpt->data),",
          "2109:    jas_seq2d_yend(tcmpt->data), bandinfos);",
          "2112:   goto error;",
          "2113:  }",
          "2114:  for (rlvlno = 0, rlvl = tcmpt->rlvls; rlvlno < tcmpt->numrlvls;",
          "",
          "[Removed Lines]",
          "2111:  if (!(tcmpt->rlvls = jas_malloc(tcmpt->numrlvls * sizeof(jpc_enc_rlvl_t)))) {",
          "",
          "[Added Lines]",
          "2111:  if (!(tcmpt->rlvls = jas_alloc2(tcmpt->numrlvls, sizeof(jpc_enc_rlvl_t)))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2211:  rlvl->numvprcs = JPC_FLOORDIVPOW2(brprcbry - tlprctly, rlvl->prcheightexpn);",
          "2212:  rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs;",
          "2215:   goto error;",
          "2216:  }",
          "2217:  for (bandno = 0, band = rlvl->bands; bandno < rlvl->numbands;",
          "",
          "[Removed Lines]",
          "2214:  if (!(rlvl->bands = jas_malloc(rlvl->numbands * sizeof(jpc_enc_band_t)))) {",
          "",
          "[Added Lines]",
          "2214:  if (!(rlvl->bands = jas_alloc2(rlvl->numbands, sizeof(jpc_enc_band_t)))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2288:  band->synweight = bandinfo->synenergywt;",
          "2290: if (band->data) {",
          "2292:   goto error;",
          "2293:  }",
          "2294:  for (prcno = 0, prc = band->prcs; prcno < rlvl->numprcs; ++prcno,",
          "",
          "[Removed Lines]",
          "2291:  if (!(band->prcs = jas_malloc(rlvl->numprcs * sizeof(jpc_enc_prc_t)))) {",
          "",
          "[Added Lines]",
          "2291:  if (!(band->prcs = jas_alloc2(rlvl->numprcs, sizeof(jpc_enc_prc_t)))) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2420:    goto error;",
          "2421:   }",
          "2424:    goto error;",
          "2425:   }",
          "2426:   for (cblkno = 0, cblk = prc->cblks; cblkno < prc->numcblks;",
          "",
          "[Removed Lines]",
          "2423:   if (!(prc->cblks = jas_malloc(prc->numcblks * sizeof(jpc_enc_cblk_t)))) {",
          "",
          "[Added Lines]",
          "2423:   if (!(prc->cblks = jas_alloc2(prc->numcblks, sizeof(jpc_enc_cblk_t)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_mqdec.c||src/libjasper/jpc/jpc_mqdec.c": [
          "File: src/libjasper/jpc/jpc_mqdec.c -> src/libjasper/jpc/jpc_mqdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  mqdec->in = in;",
          "119:  mqdec->maxctxs = maxctxs;",
          "122:   goto error;",
          "123:  }",
          "",
          "[Removed Lines]",
          "121:  if (!(mqdec->ctxs = jas_malloc(mqdec->maxctxs * sizeof(jpc_mqstate_t *)))) {",
          "",
          "[Added Lines]",
          "121:  if (!(mqdec->ctxs = jas_alloc2(mqdec->maxctxs, sizeof(jpc_mqstate_t *)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_mqenc.c||src/libjasper/jpc/jpc_mqenc.c": [
          "File: src/libjasper/jpc/jpc_mqenc.c -> src/libjasper/jpc/jpc_mqenc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:  mqenc->maxctxs = maxctxs;",
          "201:   goto error;",
          "202:  }",
          "",
          "[Removed Lines]",
          "200:  if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))) {",
          "",
          "[Added Lines]",
          "200:  if (!(mqenc->ctxs = jas_alloc2(mqenc->maxctxs, sizeof(jpc_mqstate_t *)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c": [
          "File: src/libjasper/jpc/jpc_qmfb.c -> src/libjasper/jpc/jpc_qmfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:  if (bufsize > QMFB_SPLITBUFSIZE) {",
          "321:    abort();",
          "322:   }",
          "",
          "[Removed Lines]",
          "319:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "319:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:  if (bufsize > QMFB_SPLITBUFSIZE) {",
          "381:    abort();",
          "382:   }",
          "",
          "[Removed Lines]",
          "379:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "379:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:  if (bufsize > QMFB_SPLITBUFSIZE) {",
          "444:    abort();",
          "445:   }",
          "",
          "[Removed Lines]",
          "442:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "442:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:  if (bufsize > QMFB_SPLITBUFSIZE) {",
          "525:    abort();",
          "526:   }",
          "",
          "[Removed Lines]",
          "523:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "523:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "598:  if (bufsize > QMFB_JOINBUFSIZE) {",
          "601:    abort();",
          "602:   }",
          "",
          "[Removed Lines]",
          "599:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "599:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655:  if (bufsize > QMFB_JOINBUFSIZE) {",
          "658:    abort();",
          "659:   }",
          "",
          "[Removed Lines]",
          "656:   if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "656:   if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "715:  if (bufsize > QMFB_JOINBUFSIZE) {",
          "718:    abort();",
          "719:   }",
          "",
          "[Removed Lines]",
          "716:   if (!(buf = jas_malloc(bufsize * JPC_QMFB_COLGRPSIZE * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "716:   if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "793:  if (bufsize > QMFB_JOINBUFSIZE) {",
          "796:    abort();",
          "797:   }",
          "",
          "[Removed Lines]",
          "794:   if (!(buf = jas_malloc(bufsize * numcols * sizeof(jpc_fix_t)))) {",
          "",
          "[Added Lines]",
          "794:   if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_t1enc.c||src/libjasper/jpc/jpc_t1enc.c": [
          "File: src/libjasper/jpc/jpc_t1enc.c -> src/libjasper/jpc/jpc_t1enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:  cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;",
          "221:  if (cblk->numpasses > 0) {",
          "223:   assert(cblk->passes);",
          "224:  } else {",
          "225:   cblk->passes = 0;",
          "",
          "[Removed Lines]",
          "222:   cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));",
          "",
          "[Added Lines]",
          "222:   cblk->passes = jas_alloc2(cblk->numpasses, sizeof(jpc_enc_pass_t));",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_t2cod.c||src/libjasper/jpc/jpc_t2cod.c": [
          "File: src/libjasper/jpc/jpc_t2cod.c -> src/libjasper/jpc/jpc_t2cod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:  }",
          "574:  if (pchglist->numpchgs >= pchglist->maxpchgs) {",
          "575:   newmaxpchgs = pchglist->maxpchgs + 128;",
          "577:    return -1;",
          "578:   }",
          "579:   pchglist->maxpchgs = newmaxpchgs;",
          "",
          "[Removed Lines]",
          "576:   if (!(newpchgs = jas_realloc(pchglist->pchgs, newmaxpchgs * sizeof(jpc_pchg_t *)))) {",
          "",
          "[Added Lines]",
          "576:   if (!(newpchgs = jas_realloc2(pchglist->pchgs, newmaxpchgs,",
          "577:     sizeof(jpc_pchg_t *)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_t2dec.c||src/libjasper/jpc/jpc_t2dec.c": [
          "File: src/libjasper/jpc/jpc_t2dec.c -> src/libjasper/jpc/jpc_t2dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   return 0;",
          "479:  }",
          "480:  pi->numcomps = dec->numcomps;",
          "482:   jpc_pi_destroy(pi);",
          "483:   return 0;",
          "484:  }",
          "",
          "[Removed Lines]",
          "481:  if (!(pi->picomps = jas_malloc(pi->numcomps * sizeof(jpc_picomp_t)))) {",
          "",
          "[Added Lines]",
          "481:  if (!(pi->picomps = jas_alloc2(pi->numcomps, sizeof(jpc_picomp_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:  for (compno = 0, tcomp = tile->tcomps, picomp = pi->picomps;",
          "491:    compno < pi->numcomps; ++compno, ++tcomp, ++picomp) {",
          "492:   picomp->numrlvls = tcomp->numrlvls;",
          "494:     sizeof(jpc_pirlvl_t)))) {",
          "495:    jpc_pi_destroy(pi);",
          "496:    return 0;",
          "",
          "[Removed Lines]",
          "493:   if (!(picomp->pirlvls = jas_malloc(picomp->numrlvls *",
          "",
          "[Added Lines]",
          "493:   if (!(picomp->pirlvls = jas_alloc2(picomp->numrlvls,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:     rlvlno < picomp->numrlvls; ++rlvlno, ++pirlvl, ++rlvl) {",
          "505:    pirlvl->numprcs = rlvl->numprcs;",
          "507:      sizeof(long)))) {",
          "508:     jpc_pi_destroy(pi);",
          "509:     return 0;",
          "",
          "[Removed Lines]",
          "506:    if (!(pirlvl->prclyrnos = jas_malloc(pirlvl->numprcs *",
          "",
          "[Added Lines]",
          "506:    if (!(pirlvl->prclyrnos = jas_alloc2(pirlvl->numprcs,",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_t2enc.c||src/libjasper/jpc/jpc_t2enc.c": [
          "File: src/libjasper/jpc/jpc_t2enc.c -> src/libjasper/jpc/jpc_t2enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:  }",
          "568:  pi->pktno = -1;",
          "569:  pi->numcomps = cp->numcmpts;",
          "571:   jpc_pi_destroy(pi);",
          "572:   return 0;",
          "573:  }",
          "",
          "[Removed Lines]",
          "570:  if (!(pi->picomps = jas_malloc(pi->numcomps * sizeof(jpc_picomp_t)))) {",
          "",
          "[Added Lines]",
          "570:  if (!(pi->picomps = jas_alloc2(pi->numcomps, sizeof(jpc_picomp_t)))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:  for (compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;",
          "580:    compno < pi->numcomps; ++compno, ++tcomp, ++picomp) {",
          "581:   picomp->numrlvls = tcomp->numrlvls;",
          "583:     sizeof(jpc_pirlvl_t)))) {",
          "584:    jpc_pi_destroy(pi);",
          "585:    return 0;",
          "",
          "[Removed Lines]",
          "582:   if (!(picomp->pirlvls = jas_malloc(picomp->numrlvls *",
          "",
          "[Added Lines]",
          "582:   if (!(picomp->pirlvls = jas_alloc2(picomp->numrlvls,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "594:    pirlvl->numprcs = rlvl->numprcs;",
          "595:    if (rlvl->numprcs) {",
          "597:       sizeof(long)))) {",
          "598:      jpc_pi_destroy(pi);",
          "599:      return 0;",
          "",
          "[Removed Lines]",
          "596:     if (!(pirlvl->prclyrnos = jas_malloc(pirlvl->numprcs *",
          "",
          "[Added Lines]",
          "596:     if (!(pirlvl->prclyrnos = jas_alloc2(pirlvl->numprcs,",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_tagtree.c||src/libjasper/jpc/jpc_tagtree.c": [
          "File: src/libjasper/jpc/jpc_tagtree.c -> src/libjasper/jpc/jpc_tagtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   ++numlvls;",
          "126:  } while (n > 1);",
          "129:   return 0;",
          "130:  }",
          "",
          "[Removed Lines]",
          "128:  if (!(tree->nodes_ = jas_malloc(tree->numnodes_ * sizeof(jpc_tagtreenode_t)))) {",
          "",
          "[Added Lines]",
          "128:  if (!(tree->nodes_ = jas_alloc2(tree->numnodes_, sizeof(jpc_tagtreenode_t)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/jpc/jpc_util.c||src/libjasper/jpc/jpc_util.c": [
          "File: src/libjasper/jpc/jpc_util.c -> src/libjasper/jpc/jpc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  }",
          "111:  if (n) {",
          "113:    return -1;",
          "114:   }",
          "",
          "[Removed Lines]",
          "112:   if (!(vs = jas_malloc(n * sizeof(double)))) {",
          "",
          "[Added Lines]",
          "112:   if (!(vs = jas_alloc2(n, sizeof(double)))) {",
          "",
          "---------------"
        ],
        "src/libjasper/mif/mif_cod.c||src/libjasper/mif/mif_cod.c": [
          "File: src/libjasper/mif/mif_cod.c -> src/libjasper/mif/mif_cod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  int cmptno;",
          "439:  mif_cmpt_t **newcmpts;",
          "440:  assert(maxcmpts >= hdr->numcmpts);",
          "443:  if (!newcmpts) {",
          "444:   return -1;",
          "445:  }",
          "",
          "[Removed Lines]",
          "441:  newcmpts = (!hdr->cmpts) ? jas_malloc(maxcmpts * sizeof(mif_cmpt_t *)) :",
          "442:    jas_realloc(hdr->cmpts, maxcmpts * sizeof(mif_cmpt_t *));",
          "",
          "[Added Lines]",
          "441:  newcmpts = (!hdr->cmpts) ? jas_alloc2(maxcmpts, sizeof(mif_cmpt_t *)) :",
          "442:    jas_realloc2(hdr->cmpts, maxcmpts, sizeof(mif_cmpt_t *));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92bab75eabec8b601065494ff4540dc3c0be13ea",
      "candidate_info": {
        "commit_hash": "92bab75eabec8b601065494ff4540dc3c0be13ea",
        "repo": "mdadams/jasper",
        "commit_url": "https://github.com/mdadams/jasper/commit/92bab75eabec8b601065494ff4540dc3c0be13ea",
        "files": [
          "src/libjasper/jpc/jpc_qmfb.c"
        ],
        "message": "Fixed a bug in the row/column split operations for QMFBs.",
        "before_after_code_files": [
          "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
          ],
          "candidate": [
            "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libjasper/jpc/jpc_qmfb.c||src/libjasper/jpc/jpc_qmfb.c": [
          "File: src/libjasper/jpc/jpc_qmfb.c -> src/libjasper/jpc/jpc_qmfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:  if (numcols >= 2) {",
          "326:   hstartcol = (numcols + 1 - parity) >> 1;",
          "329:   n = m;",
          "330:   dstptr = buf;",
          "",
          "[Removed Lines]",
          "327:   m = (parity) ? hstartcol : (numcols - hstartcol);",
          "",
          "[Added Lines]",
          "328:   m = numcols - hstartcol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:  if (numrows >= 2) {",
          "386:   hstartcol = (numrows + 1 - parity) >> 1;",
          "389:   n = m;",
          "390:   dstptr = buf;",
          "",
          "[Removed Lines]",
          "387:   m = (parity) ? hstartcol : (numrows - hstartcol);",
          "",
          "[Added Lines]",
          "390:   m = numrows - hstartcol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:  if (numrows >= 2) {",
          "449:   hstartcol = (numrows + 1 - parity) >> 1;",
          "452:   n = m;",
          "453:   dstptr = buf;",
          "",
          "[Removed Lines]",
          "450:   m = (parity) ? hstartcol : (numrows - hstartcol);",
          "",
          "[Added Lines]",
          "455:   m = numrows - hstartcol;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "529:  if (numrows >= 2) {",
          "530:   hstartcol = (numrows + 1 - parity) >> 1;",
          "533:   n = m;",
          "534:   dstptr = buf;",
          "",
          "[Removed Lines]",
          "531:   m = (parity) ? hstartcol : (numrows - hstartcol);",
          "",
          "[Added Lines]",
          "538:   m = numrows - hstartcol;",
          "",
          "---------------"
        ]
      }
    }
  ]
}