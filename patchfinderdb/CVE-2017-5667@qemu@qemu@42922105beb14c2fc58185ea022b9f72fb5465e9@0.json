{
  "cve_id": "CVE-2017-5667",
  "cve_desc": "The sdhci_sdma_transfer_multi_blocks function in hw/sd/sdhci.c in QEMU (aka Quick Emulator) allows local guest OS privileged users to cause a denial of service (out-of-bounds heap access and crash) or execute arbitrary code on the QEMU host via vectors involving the data transfer length.",
  "repo": "qemu/qemu",
  "patch_hash": "42922105beb14c2fc58185ea022b9f72fb5465e9",
  "patch_info": {
    "commit_hash": "42922105beb14c2fc58185ea022b9f72fb5465e9",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/42922105beb14c2fc58185ea022b9f72fb5465e9",
    "files": [
      "hw/sd/sdhci.c"
    ],
    "message": "sd: sdhci: check data length during dma_memory_read\n\nWhile doing multi block SDMA transfer in routine\n'sdhci_sdma_transfer_multi_blocks', the 's->fifo_buffer' starting\nindex 'begin' and data length 's->data_count' could end up to be same.\nThis could lead to an OOB access issue. Correct transfer data length\nto avoid it.\n\nCc: qemu-stable@nongnu.org\nReported-by: Jiang Xin <jiangxin1@huawei.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nReviewed-by: Peter Maydell <peter.maydell@linaro.org>\nMessage-id: 20170130064736.9236-1-ppandit@redhat.com\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
    "before_after_code_files": [
      "hw/sd/sdhci.c||hw/sd/sdhci.c"
    ]
  },
  "patch_diff": {
    "hw/sd/sdhci.c||hw/sd/sdhci.c": [
      "File: hw/sd/sdhci.c -> hw/sd/sdhci.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "536:                 boundary_count -= block_size - begin;",
      "537:             }",
      "538:             dma_memory_read(&address_space_memory, s->sdmasysad,",
      "540:             s->sdmasysad += s->data_count - begin;",
      "541:             if (s->data_count == block_size) {",
      "542:                 for (n = 0; n < block_size; n++) {",
      "",
      "[Removed Lines]",
      "539:                             &s->fifo_buffer[begin], s->data_count);",
      "",
      "[Added Lines]",
      "539:                             &s->fifo_buffer[begin], s->data_count - begin);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a156ae5d1fa2b8117e5e0a2bd73e21480df9bdb",
      "candidate_info": {
        "commit_hash": "1a156ae5d1fa2b8117e5e0a2bd73e21480df9bdb",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/1a156ae5d1fa2b8117e5e0a2bd73e21480df9bdb",
        "files": [
          "hw/sd/sdhci.c"
        ],
        "message": "sd: sdhci: check data length during dma_memory_read\n\nWhile doing multi block SDMA transfer in routine\n'sdhci_sdma_transfer_multi_blocks', the 's->fifo_buffer' starting\nindex 'begin' and data length 's->data_count' could end up to be same.\nThis could lead to an OOB access issue. Correct transfer data length\nto avoid it.\n\nCc: qemu-stable@nongnu.org\nReported-by: Jiang Xin <jiangxin1@huawei.com>\nSigned-off-by: Prasad J Pandit <pjp@fedoraproject.org>\nReviewed-by: Peter Maydell <peter.maydell@linaro.org>\nMessage-id: 20170130064736.9236-1-ppandit@redhat.com\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\n(cherry picked from commit 42922105beb14c2fc58185ea022b9f72fb5465e9)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/sd/sdhci.c||hw/sd/sdhci.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/sd/sdhci.c||hw/sd/sdhci.c"
          ],
          "candidate": [
            "hw/sd/sdhci.c||hw/sd/sdhci.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/sd/sdhci.c||hw/sd/sdhci.c": [
          "File: hw/sd/sdhci.c -> hw/sd/sdhci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:                 boundary_count -= block_size - begin;",
          "537:             }",
          "538:             dma_memory_read(&address_space_memory, s->sdmasysad,",
          "540:             s->sdmasysad += s->data_count - begin;",
          "541:             if (s->data_count == block_size) {",
          "542:                 for (n = 0; n < block_size; n++) {",
          "",
          "[Removed Lines]",
          "539:                             &s->fifo_buffer[begin], s->data_count);",
          "",
          "[Added Lines]",
          "539:                             &s->fifo_buffer[begin], s->data_count - begin);",
          "",
          "---------------"
        ]
      }
    }
  ]
}