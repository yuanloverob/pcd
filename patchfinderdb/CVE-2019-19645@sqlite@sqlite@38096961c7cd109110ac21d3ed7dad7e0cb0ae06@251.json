{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
      "candidate_info": {
        "commit_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f414c0c0c503ab968f7072fcd28a876eacff427",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/wherecode.c",
          "test/where.test"
        ],
        "message": "Check-in [fa792714ae62fa98] is incorrect.  Add a test case to refute it and also a fix to make it right. Then add an alternative fix to ticket [df46dfb631f75694] in which all ephemeral tables used as the RHS of an IN operator be index btrees and never table btrees so that they can always be reused.\n\nFossilOrigin-Name: d3915230e3ee5878fe2e65a0afb7e91ee124aaf46b4e28c6e00053d6df13d445",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:     eType = IN_INDEX_EPH;",
          "2553:     if( inFlags & IN_INDEX_LOOP ){",
          "2554:       pParse->nQueryLoop = 0;",
          "2558:     }else if( prRhsHasNull ){",
          "2560:     }",
          "2561:     assert( pX->op==TK_IN );",
          "2563:     if( rMayHaveNull ){",
          "2564:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "2565:     }",
          "",
          "[Removed Lines]",
          "2555:       if( pX->pLeft->iColumn<0 && !ExprHasProperty(pX, EP_xIsSelect) ){",
          "2556:         eType = IN_INDEX_ROWID;",
          "2557:       }",
          "2562:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "",
          "[Added Lines]",
          "2559:     sqlite3CodeRhsOfIN(pParse, pX, iTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2732:   pLeft = pExpr->pLeft;",
          "2733:   nVal = sqlite3ExprVectorSize(pLeft);",
          "2739:   pExpr->iTable = iTab;",
          "2742: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2743:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2744:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "",
          "[Removed Lines]",
          "2734:   assert( !isRowid || nVal==1 );",
          "2740:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2741:       pExpr->iTable, (isRowid?0:nVal));",
          "",
          "[Added Lines]",
          "2729:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pExpr->iTable, nVal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:     VdbeComment((v, \"RHS of IN operator\"));",
          "2747:   }",
          "2748: #endif",
          "2751:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2749:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "[Added Lines]",
          "2737:   pKeyInfo = sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2761:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "2762:     ));",
          "2766:     if( ALWAYS(pEList->nExpr==nVal) ){",
          "",
          "[Removed Lines]",
          "2763:     assert( !isRowid );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2814:     r1 = sqlite3GetTempReg(pParse);",
          "2815:     r2 = sqlite3GetTempReg(pParse);",
          "2817:     for(i=pList->nExpr, pItem=pList->a; i>0; i--, pItem++){",
          "2818:       Expr *pE2 = pItem->pExpr;",
          "",
          "[Removed Lines]",
          "2816:     if( isRowid ) sqlite3VdbeAddOp4(v, OP_Blob, 0, r2, 0, \"\", P4_STATIC);",
          "2819:       int iValToIns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2829:       }",
          "2846:     }",
          "2847:     sqlite3ReleaseTempReg(pParse, r1);",
          "2848:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2832:       if( isRowid && sqlite3ExprIsInteger(pE2, &iValToIns) ){",
          "2833:         sqlite3VdbeAddOp3(v, OP_InsertInt, iTab, r2, iValToIns);",
          "2834:       }else{",
          "2835:         r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2836:         if( isRowid ){",
          "2837:           sqlite3VdbeAddOp2(v, OP_MustBeInt, r3,",
          "2838:                             sqlite3VdbeCurrentAddr(v)+2);",
          "2839:           VdbeCoverage(v);",
          "2840:           sqlite3VdbeAddOp3(v, OP_Insert, iTab, r2, r3);",
          "2841:         }else{",
          "2842:           sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2843:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "2844:         }",
          "2845:       }",
          "",
          "[Added Lines]",
          "2817:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2818:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2819:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:       pik_flags |= (update_flags & OPFLAG_SAVEPOSITION);",
          "1922: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1923:       if( update_flags==0 ){",
          "1926:         );",
          "1927:         sqlite3VdbeChangeP5(v, OPFLAG_ISNOOP);",
          "1928:       }",
          "1929: #endif",
          "1930:     }",
          "",
          "[Removed Lines]",
          "1924:         sqlite3VdbeAddOp4(v, OP_InsertInt,",
          "1925:             iIdxCur+i, aRegIdx[i], 0, (char*)pTab, P4_TABLE",
          "",
          "[Added Lines]",
          "1924:         int r = sqlite3GetTempReg(pParse);",
          "1925:         sqlite3VdbeAddOp2(v, OP_Integer, 0, r);",
          "1926:         sqlite3VdbeAddOp4(v, OP_Insert,",
          "1927:             iIdxCur+i, aRegIdx[i], r, (char*)pTab, P4_TABLE",
          "1930:         sqlite3ReleaseTempReg(pParse, r);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4281: int sqlite3GetToken(const unsigned char *, int *);",
          "4282: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4283: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4285: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4286: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4287: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "[Added Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4578: case OP_Insert:",
          "4579: case OP_InsertInt: {",
          "",
          "[Added Lines]",
          "4572: case OP_Insert: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4597:   REGISTER_TRACE(pOp->p2, pData);",
          "4598:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "4611:   if( pOp->p4type==P4_TABLE && HAS_UPDATE_HOOK(db) ){",
          "4612:     assert( pC->iDb>=0 );",
          "",
          "[Removed Lines]",
          "4600:   if( pOp->opcode==OP_Insert ){",
          "4601:     pKey = &aMem[pOp->p3];",
          "4602:     assert( pKey->flags & MEM_Int );",
          "4603:     assert( memIsValid(pKey) );",
          "4604:     REGISTER_TRACE(pOp->p3, pKey);",
          "4605:     x.nKey = pKey->u.i;",
          "4606:   }else{",
          "4607:     assert( pOp->opcode==OP_InsertInt );",
          "4608:     x.nKey = pOp->p3;",
          "4609:   }",
          "",
          "[Added Lines]",
          "4593:   pKey = &aMem[pOp->p3];",
          "4594:   assert( pKey->flags & MEM_Int );",
          "4595:   assert( memIsValid(pKey) );",
          "4596:   REGISTER_TRACE(pOp->p3, pKey);",
          "4597:   x.nKey = pKey->u.i;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1344:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iCur, addrNxt, iRowidReg);",
          "1345:     VdbeCoverage(v);",
          "1346:     pLevel->op = OP_Noop;",
          "1348:   }else if( (pLoop->wsFlags & WHERE_IPK)!=0",
          "1349:          && (pLoop->wsFlags & WHERE_COLUMN_RANGE)!=0",
          "1350:   ){",
          "",
          "[Removed Lines]",
          "1347:     pTerm->wtFlags |= TERM_CODED;",
          "",
          "[Added Lines]",
          "1346:     if( (pTerm->prereqAll & pLevel->notReady)==0 ){",
          "1347:       pTerm->wtFlags |= TERM_CODED;",
          "1348:     }",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:   SELECT count(*) FROM t1 LEFT JOIN t2 ON a IS NOT NULL;",
          "1426: } {5}",
          "1429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1428: # 20190-02-22:  A bug introduced by checkin",
          "1429: # https://www.sqlite.org/src/info/fa792714ae62fa98.",
          "1430: #",
          "1431: do_execsql_test where-23.0 {",
          "1432:   DROP TABLE IF EXISTS t1;",
          "1433:   DROP TABLE IF EXISTS t2;",
          "1434:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "1435:   INSERT INTO t1(a) VALUES(1),(2),(3);",
          "1436:   CREATE TABLE t2(x INTEGER PRIMARY KEY, y INT);",
          "1437:   INSERT INTO t2(y) VALUES(2),(3);",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
      "candidate_info": {
        "commit_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "Simple INSERT and SELECT operations working with VIRTUAL columns.\n\nFossilOrigin-Name: 7f9f90b1b885fa9905b296f2e0fcc9b2341019b42fc839722a93cf60e49a9252",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "",
          "[Removed Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "",
          "[Added Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "41:     VdbeComment((v, \"%s\", pTab->zName));",
          "42:   }else{",
          "43:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:           if( j==pTab->iPKey ){",
          "674:             ipkColumn = i;  assert( !withoutRowid );",
          "675:           }",
          "676:           break;",
          "677:         }",
          "678:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "678:           if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "679:             sqlite3ErrorMsg(pParse,",
          "680:                \"cannot INSERT into generated column \\\"%s\\\"\",",
          "681:                pTab->aCol[j].zName);",
          "682:             goto insert_cleanup;",
          "683:           }",
          "684: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790:   for(i=0; i<pTab->nCol; i++){",
          "792:   }",
          "793:   if( pColumn==0 && nColumn && nColumn!=(pTab->nCol-nHidden) ){",
          "794:     sqlite3ErrorMsg(pParse,",
          "",
          "[Removed Lines]",
          "791:     nHidden += (IsHiddenColumn(&pTab->aCol[i]) ? 1 : 0);",
          "",
          "[Added Lines]",
          "800:     if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ) nHidden++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1006:         continue;",
          "1007:       }",
          "1008:       if( pColumn==0 ){",
          "1010:           j = -1;",
          "1011:           nHidden++;",
          "1012:         }else{",
          "1013:           j = i - nHidden;",
          "1014:         }",
          "",
          "[Removed Lines]",
          "1009:         if( IsHiddenColumn(&pTab->aCol[i]) ){",
          "",
          "[Added Lines]",
          "1018:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1021:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1022:             continue;",
          "1023:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1863:   if( HasRowid(pTab) ){",
          "1864:     int regRec = aRegIdx[ix];",
          "1866:     sqlite3SetMakeRecordP5(v, pTab);",
          "1867:     if( !bAffinityDone ){",
          "1868:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1865:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nCol, regRec);",
          "",
          "[Added Lines]",
          "1877:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1878:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "358: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "[Added Lines]",
          "352: generated ::= LP expr(E) RP.          {sqlite3AddGenerated(pParse,E,0);}",
          "353: generated ::= LP expr(E) RP ID(TYPE). {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1578:         if( !isQuick ){",
          "1581:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1582:         }",
          "",
          "[Removed Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-1, 3);",
          "",
          "[Added Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
      "candidate_info": {
        "commit_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Mark a single branch as no longer reachable.\n\nFossilOrigin-Name: 4f35b3b78a461b0617a5cd04f60d2ab277bcc7c994dae463851a3cb5d041a723",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cf16703fd4a835c249c947006ae4a4bf81873c8ca1803945453c9845f882dc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
      "candidate_info": {
        "commit_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Additional small performance increase and size reduction to the sqlite3VdbeMakeLabel() mechanism.\n\nFossilOrigin-Name: 1bdee199a71e0a6c247b85e72de9e3a3099b7179c33288735721facef3b96459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #endif",
          "",
          "[Removed Lines]",
          "164: #define ADDR(X)  (-1-(X))",
          "",
          "[Added Lines]",
          "163: #define ADDR(X)  (~(X))",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "453: }",
          "",
          "[Removed Lines]",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "[Added Lines]",
          "463:   return --pParse->nLabel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "",
          "[Removed Lines]",
          "461:   int nNewSize = p->nLabel+10;",
          "",
          "[Added Lines]",
          "472:   int nNewSize = 10 - p->nLabel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:   Parse *p = v->pParse;",
          "477:   int j = ADDR(x);",
          "478:   assert( v->magic==VDBE_MAGIC_INIT );",
          "480:   assert( j>=0 );",
          "481: #ifdef SQLITE_DEBUG",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "485: #endif",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "[Removed Lines]",
          "479:   assert( j<p->nLabel );",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "",
          "[Added Lines]",
          "490:   assert( j<-p->nLabel );",
          "497:   if( p->nLabelAlloc + p->nLabel < 0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "763:             assert( (sqlite3OpcodeProperty[pOp->opcode] & OPFLG_JUMP)!=0 );",
          "765:             pOp->p2 = aLabel[ADDR(pOp->p2)];",
          "766:           }",
          "767:           break;",
          "",
          "[Removed Lines]",
          "764:             assert( ADDR(pOp->p2)<pParse->nLabel );",
          "",
          "[Added Lines]",
          "775:             assert( ADDR(pOp->p2)<-pParse->nLabel );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3fcc000cb7bd5b12816512834e6484c68658576",
      "candidate_info": {
        "commit_hash": "a3fcc000cb7bd5b12816512834e6484c68658576",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3fcc000cb7bd5b12816512834e6484c68658576",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Ensure that SQLite does not attempt to process incompatible window functions in a single scan. Fix for [256741a1].\n\nFossilOrigin-Name: 4f5b2d938194fab7627486e2ced633def2c90d9d3328e3700612feb9dbfa3d9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1325:     assert( pWin );",
          "1326:     assert( IsWindowFunc(pExpr) );",
          "1327:     assert( pWin->ppThis==0 );",
          "1334:   }",
          "1335:   return WRC_Continue;",
          "1336: }",
          "",
          "[Removed Lines]",
          "1328:     if( pSelect->pWin ){",
          "1329:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1330:     }",
          "1331:     pWin->pNextWin = pSelect->pWin;",
          "1332:     pWin->ppThis = &pSelect->pWin;",
          "1333:     pSelect->pWin = pWin;",
          "",
          "[Added Lines]",
          "1328:     sqlite3WindowLink(pSelect, pWin);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "909:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "910:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "921:           pNC->ncFlags |= NC_HasWin;",
          "922:         }else",
          "",
          "[Removed Lines]",
          "911:           if( 0==pSel->pWin",
          "912:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "913:           ){",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "920:           }",
          "",
          "[Added Lines]",
          "911:           sqlite3WindowLink(pSel, pWin);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3609: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3610: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3611: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3612: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "3613: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3614: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3612: void sqlite3WindowLink(Select *pSel, Window *pWin);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229:   }",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1238: void sqlite3WindowLink(Select *pSel, Window *pWin){",
          "1239:   if( 0==pSel->pWin",
          "1240:    || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0)",
          "1241:   ){",
          "1242:     pWin->pNextWin = pSel->pWin;",
          "1243:     if( pSel->pWin ){",
          "1244:       pSel->pWin->ppThis = &pWin->pNextWin;",
          "1245:     }",
          "1246:     pSel->pWin = pWin;",
          "1247:     pWin->ppThis = &pSel->pWin;",
          "1248:   }",
          "1249: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:     int nArg = windowArgCount(pWin);",
          "1417:     int i;",
          "1419:     for(i=0; i<nArg; i++){",
          "1420:       if( i!=1 || pFunc->zName!=nth_valueName ){",
          "1421:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   } {~/ORDER/}",
          "172: }",
          "176: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: #-------------------------------------------------------------------------",
          "175: reset_db",
          "176: do_execsql_test 6.0 {",
          "177:   CREATE TABLE t0(c0);",
          "178:   INSERT INTO t0(c0) VALUES (0);",
          "179: }",
          "181: do_execsql_test 6.1 {",
          "182:   SELECT * FROM t0 WHERE",
          "183:   EXISTS (",
          "184:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "185:   ) >=1 AND",
          "186:   EXISTS (",
          "187:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "188:   ) <=1;",
          "189: } {0}",
          "191: do_execsql_test 6.2 {",
          "192:   SELECT * FROM t0 WHERE EXISTS (",
          "193:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "194:   )",
          "195:   BETWEEN 1 AND 1;",
          "196: } {0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}