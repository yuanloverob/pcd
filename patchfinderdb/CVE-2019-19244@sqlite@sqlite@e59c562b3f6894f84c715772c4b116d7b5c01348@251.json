{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea7e83b7806773bf6a2c60786ff8f95b218d4622",
      "candidate_info": {
        "commit_hash": "ea7e83b7806773bf6a2c60786ff8f95b218d4622",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea7e83b7806773bf6a2c60786ff8f95b218d4622",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.29.0\n\nFossilOrigin-Name: fc82b73eaac8b36950e527f12c4b5dc1e147e6f4ad2217ae43ad82882a88bfa6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6f328c35947d6b3a0741514757b8944692203e89bdb2e7f9bbce8ad9288be344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
      "candidate_info": {
        "commit_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3967d946c7a1fe956e963b0a2e67a8353404a454",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix the query planner so that it is able to use an index on a CAST expression.\n\nFossilOrigin-Name: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   return 0;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static SQLITE_NOINLINE WhereTerm *whereScanInitIndexExpr(WhereScan *pScan){",
          "320:   pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "321:   return whereScanNext(pScan);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   pScan->pIdxExpr = 0;",
          "343:   pScan->idxaff = 0;",
          "344:   pScan->zCollName = 0;",
          "345:   if( pIdx ){",
          "346:     int j = iColumn;",
          "347:     iColumn = pIdx->aiColumn[j];",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   pScan->opMask = opMask;",
          "357:   pScan->k = 0;",
          "358:   pScan->aiCur[0] = iCur;",
          "359:   pScan->nEquiv = 1;",
          "360:   pScan->iEquiv = 1;",
          "367:       pScan->aiColumn[0] = XN_EXPR;",
          "368:       return whereScanInitIndexExpr(pScan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:   }else if( iColumn==XN_EXPR ){",
          "358:     return 0;",
          "359:   }",
          "363:   pScan->aiColumn[0] = iColumn;",
          "366:   return whereScanNext(pScan);",
          "367: }",
          "",
          "[Removed Lines]",
          "360:   pScan->opMask = opMask;",
          "361:   pScan->k = 0;",
          "362:   pScan->aiCur[0] = iCur;",
          "364:   pScan->nEquiv = 1;",
          "365:   pScan->iEquiv = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
      "candidate_info": {
        "commit_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: a870c196d78d8b72c7353fa0015e96b2abd4be154541d76328e3a4f9e5da5d04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
      "candidate_info": {
        "commit_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/rowvalue7.test"
        ],
        "message": "Improved detection of number of column mismatch for vector assignment in UPDATE statements.  Ticket [78acc9d40f0786e8]\n\nFossilOrigin-Name: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/rowvalue7.test||test/rowvalue7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0cc06d8a30444125e5655f6587a6355471c3447c08a2e5f7a046a4ed5cc5f09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1633:   for(i=0; i<pColumns->nId; i++){",
          "1634:     Expr *pSubExpr = sqlite3ExprForVectorField(pParse, pExpr, i);",
          "1635:     pList = sqlite3ExprListAppend(pParse, pList, pSubExpr);",
          "1636:     if( pList ){",
          "1637:       assert( pList->nExpr==iFirst+i+1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:     assert( pSubExpr!=0 || db->mallocFailed );",
          "1636:     assert( pSubExpr==0 || pSubExpr->iTable==0 );",
          "1637:     if( pSubExpr==0 ) continue;",
          "1638:     pSubExpr->iTable = pColumns->nId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3906:         pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);",
          "3907:       }",
          "3908:       assert( pExpr->iTable==0 || pExpr->pLeft->op==TK_SELECT );",
          "3911:       ){",
          "3912:         sqlite3ErrorMsg(pParse, \"%d columns assigned %d values\",",
          "3913:                                 pExpr->iTable, n);",
          "",
          "[Removed Lines]",
          "3909:       if( pExpr->iTable",
          "3910:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "[Added Lines]",
          "3913:       if( pExpr->iTable!=0",
          "3914:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/rowvalue7.test||test/rowvalue7.test": [
          "File: test/rowvalue7.test -> test/rowvalue7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   UPDATE t1 SET (b,c,d) = (SELECT x,y FROM t2 WHERE w=a);",
          "56: } {1 {3 columns assigned 2 values}}",
          "58: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: # 2019-08-26",
          "59: # ticket https://www.sqlite.org/src/info/78acc9d40f0786e8",
          "60: #",
          "61: do_catchsql_test 3.0 {",
          "62:   DROP TABLE IF EXISTS t1;",
          "63:   CREATE TABLE t1(a,b);",
          "64:   INSERT INTO t1 VALUES(1,2);",
          "65:   UPDATE t1 SET (a,a,a,b)=(SELECT 99,100);",
          "66: } {1 {4 columns assigned 2 values}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
      "candidate_info": {
        "commit_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/skipscan1.test",
          "test/where.test"
        ],
        "message": "Add further tests so that veryquick.test covers all vdbe branches.\n\nFossilOrigin-Name: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/skipscan1.test||test/skipscan1.test",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 08b29672c552e5a6a3874746c6cc7025295e0e44dec43a1bfba3022acce849ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: } {/{SCAN TABLE t9a}/}",
          "346: optimization_control db skip-scan 1",
          "348: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: do_execsql_test skipscan1-2.1 {",
          "349:   CREATE TABLE t6(a TEXT, b INT, c INT, d INT);",
          "350:   CREATE INDEX t6abc ON t6(a,b,c);",
          "351:   INSERT INTO t6 VALUES('abc',123,4,5);",
          "353:   ANALYZE;",
          "354:   DELETE FROM sqlite_stat1;",
          "355:   INSERT INTO sqlite_stat1 VALUES('t6','t6abc','10000 5000 2000 10');",
          "356:   ANALYZE sqlite_master;",
          "357:   DELETE FROM t6;",
          "358: } {}",
          "360: do_execsql_test skipscan1-2.2eqp {",
          "361:   EXPLAIN QUERY PLAN",
          "362:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "363: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "364: do_execsql_test skipscan1-2.2 {",
          "365:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "366: } {}",
          "368: do_execsql_test skipscan1-2.3eqp {",
          "369:   EXPLAIN QUERY PLAN",
          "370:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "371: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "372: do_execsql_test skipscan1-2.3 {",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "1441: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441: #-------------------------------------------------------------------------",
          "1442: #",
          "1443: reset_db",
          "1444: do_execsql_test where-24.0 {",
          "1445:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "1446:   INSERT INTO t1 VALUES(1, 'one');",
          "1447:   INSERT INTO t1 VALUES(2, 'two');",
          "1448:   INSERT INTO t1 VALUES(3, 'three');",
          "1449:   INSERT INTO t1 VALUES(4, 'four');",
          "1450: }",
          "1452: foreach {tn sql res} {",
          "1453:   1 \"SELECT b FROM t1\"                   {one two three four}",
          "1454:   2 \"SELECT b FROM t1 WHERE a<4\"         {one two three}",
          "1455:   3 \"SELECT b FROM t1 WHERE a>1\"         {two three four}",
          "1456:   4 \"SELECT b FROM t1 WHERE a>1 AND a<4\" {two three}",
          "1458:   5 \"SELECT b FROM t1 WHERE a>? AND a<4\" {}",
          "1459:   6 \"SELECT b FROM t1 WHERE a>1 AND a<?\" {}",
          "1460:   7 \"SELECT b FROM t1 WHERE a>? AND a<?\" {}",
          "1462:   7 \"SELECT b FROM t1 WHERE a>=? AND a<=4\" {}",
          "1463:   8 \"SELECT b FROM t1 WHERE a>=1 AND a<=?\" {}",
          "1464:   9 \"SELECT b FROM t1 WHERE a>=? AND a<=?\" {}",
          "1465: } {",
          "1466:   set rev [list]",
          "1467:   foreach r $res { set rev [concat $r $rev] }",
          "1469:   do_execsql_test where-24.$tn.1 \"$sql\"                     $res",
          "1470:   do_execsql_test where-24.$tn.2 \"$sql ORDER BY rowid\"      $res",
          "1471:   do_execsql_test where-24.$tn.3 \"$sql ORDER BY rowid DESC\" $rev",
          "1473:   do_execsql_test where-24-$tn.4 \"",
          "1474:     BEGIN;",
          "1475:       DELETE FROM t1;",
          "1476:       $sql;",
          "1477:       $sql ORDER BY rowid;",
          "1478:       $sql ORDER BY rowid DESC;",
          "1479:     ROLLBACK;",
          "1480:   \"",
          "1481: }",
          "1483: #-------------------------------------------------------------------------",
          "1484: #",
          "1485: reset_db",
          "1486: do_execsql_test where-25.0 {",
          "1487:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "1488:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1489:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1490:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1492:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1493:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1494:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1495:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1496:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1498:   PRAGMA writable_schema = 1;",
          "1499:   UPDATE sqlite_master SET rootpage = (",
          "1500:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1501:   ) WHERE name = 'i1';",
          "1502: }",
          "1503: db close",
          "1504: sqlite3 db test.db",
          "1505: do_catchsql_test where-25.1 {",
          "1506:   DELETE FROM t1 WHERE c='iii'",
          "1507: } {1 {database disk image is malformed}}",
          "1508: do_catchsql_test where-25.2 {",
          "1509:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1510:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1511: } {1 {database disk image is malformed}}",
          "1513: reset_db",
          "1514: do_execsql_test where-25.3 {",
          "1515:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "1516:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1517:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1518:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1520:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1521:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1522:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1523:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1524:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1526:   PRAGMA writable_schema = 1;",
          "1527:   UPDATE sqlite_master SET rootpage = (",
          "1528:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1529:   ) WHERE name = 'i1';",
          "1530: }",
          "1531: db close",
          "1532: sqlite3 db test.db",
          "1533: do_catchsql_test where-25.4 {",
          "1534:   SELECT * FROM t1 WHERE c='iii'",
          "1535: } {0 {}}",
          "1536: do_catchsql_test where-25.5 {",
          "1537:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}