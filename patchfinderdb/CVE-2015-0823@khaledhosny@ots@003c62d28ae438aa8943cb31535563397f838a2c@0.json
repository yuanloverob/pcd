{
  "cve_id": "CVE-2015-0823",
  "cve_desc": "Multiple use-after-free vulnerabilities in OpenType Sanitiser, as used in Mozilla Firefox before 36.0, might allow remote attackers to trigger problematic Developer Console information or possibly have unspecified other impact by leveraging incorrect macro expansion, related to the ots::ots_gasp_parse function.",
  "repo": "khaledhosny/ots",
  "patch_hash": "003c62d28ae438aa8943cb31535563397f838a2c",
  "patch_info": {
    "commit_hash": "003c62d28ae438aa8943cb31535563397f838a2c",
    "repo": "khaledhosny/ots",
    "commit_url": "https://github.com/khaledhosny/ots/commit/003c62d28ae438aa8943cb31535563397f838a2c",
    "files": [
      "src/gasp.cc",
      "src/gdef.cc",
      "src/gpos.cc",
      "src/gsub.cc",
      "src/hdmx.cc",
      "src/kern.cc",
      "src/ltsh.cc",
      "src/math.cc",
      "src/vdmx.cc",
      "src/vorg.cc"
    ],
    "message": "[ots] Fix (potential) use-after-free bugs\n\nMake sure we don\u2019t try to access the table after deleting it. Not all\nthe changed files are affected, but I changed them all for the sake of\nconsistency.",
    "before_after_code_files": [
      "src/gasp.cc||src/gasp.cc",
      "src/gdef.cc||src/gdef.cc",
      "src/gpos.cc||src/gpos.cc",
      "src/gsub.cc||src/gsub.cc",
      "src/hdmx.cc||src/hdmx.cc",
      "src/kern.cc||src/kern.cc",
      "src/ltsh.cc||src/ltsh.cc",
      "src/math.cc||src/math.cc",
      "src/vdmx.cc||src/vdmx.cc",
      "src/vorg.cc||src/vorg.cc"
    ]
  },
  "patch_diff": {
    "src/gasp.cc||src/gasp.cc": [
      "File: src/gasp.cc -> src/gasp.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: #define DROP_THIS_TABLE(...) \\",
      "13:   do { \\",
      "16:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
      "17:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
      "18:   } while (0)",
      "20: namespace ots {",
      "",
      "[Removed Lines]",
      "14:     delete file->gasp; \\",
      "15:     file->gasp = 0; \\",
      "",
      "[Added Lines]",
      "16:     delete file->gasp; \\",
      "17:     file->gasp = 0; \\",
      "",
      "---------------"
    ],
    "src/gdef.cc||src/gdef.cc": [
      "File: src/gdef.cc -> src/gdef.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "232: #define DROP_THIS_TABLE(msg_) \\",
      "233:   do { \\",
      "234:     file->gdef->data = 0; \\",
      "235:     file->gdef->length = 0; \\",
      "237:   } while (0)",
      "239: namespace ots {",
      "",
      "[Removed Lines]",
      "236:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "[Added Lines]",
      "234:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "---------------"
    ],
    "src/gpos.cc||src/gpos.cc": [
      "File: src/gpos.cc -> src/gpos.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "678: #define DROP_THIS_TABLE(msg_) \\",
      "679:   do { \\",
      "680:     file->gpos->data = 0; \\",
      "681:     file->gpos->length = 0; \\",
      "683:   } while (0)",
      "685: namespace ots {",
      "",
      "[Removed Lines]",
      "682:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "[Added Lines]",
      "680:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "---------------"
    ],
    "src/gsub.cc||src/gsub.cc": [
      "File: src/gsub.cc -> src/gsub.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "531: #define DROP_THIS_TABLE(msg_) \\",
      "532:   do { \\",
      "533:     file->gsub->data = 0; \\",
      "534:     file->gsub->length = 0; \\",
      "536:   } while (0)",
      "538: namespace ots {",
      "",
      "[Removed Lines]",
      "535:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "[Added Lines]",
      "533:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "---------------"
    ],
    "src/hdmx.cc||src/hdmx.cc": [
      "File: src/hdmx.cc -> src/hdmx.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: #define DROP_THIS_TABLE(...) \\",
      "15:   do { \\",
      "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
      "19:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
      "20:   } while (0)",
      "22: namespace ots {",
      "",
      "[Removed Lines]",
      "16:     delete file->hdmx; \\",
      "17:     file->hdmx = 0; \\",
      "",
      "[Added Lines]",
      "18:     delete file->hdmx; \\",
      "19:     file->hdmx = 0; \\",
      "",
      "---------------"
    ],
    "src/kern.cc||src/kern.cc": [
      "File: src/kern.cc -> src/kern.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: #define DROP_THIS_TABLE(msg_) \\",
      "13:   do { \\",
      "14:     delete file->kern; \\",
      "15:     file->kern = 0; \\",
      "17:   } while (0)",
      "19: namespace ots {",
      "",
      "[Removed Lines]",
      "16:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "[Added Lines]",
      "14:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "---------------"
    ],
    "src/ltsh.cc||src/ltsh.cc": [
      "File: src/ltsh.cc -> src/ltsh.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: #define DROP_THIS_TABLE(...) \\",
      "15:   do { \\",
      "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
      "19:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
      "20:   } while (0)",
      "22: namespace ots {",
      "",
      "[Removed Lines]",
      "16:     delete file->ltsh; \\",
      "17:     file->ltsh = 0; \\",
      "",
      "[Added Lines]",
      "18:     delete file->ltsh; \\",
      "19:     file->ltsh = 0; \\",
      "",
      "---------------"
    ],
    "src/math.cc||src/math.cc": [
      "File: src/math.cc -> src/math.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "519: #define DROP_THIS_TABLE(msg_) \\",
      "520:   do { \\",
      "521:     file->math->data = 0; \\",
      "522:     file->math->length = 0; \\",
      "524:   } while (0)",
      "526: namespace ots {",
      "",
      "[Removed Lines]",
      "523:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "[Added Lines]",
      "521:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
      "",
      "---------------"
    ],
    "src/vdmx.cc||src/vdmx.cc": [
      "File: src/vdmx.cc -> src/vdmx.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: #define DROP_THIS_TABLE(...) \\",
      "13:   do { \\",
      "16:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
      "17:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
      "18:   } while (0)",
      "20: namespace ots {",
      "",
      "[Removed Lines]",
      "14:     delete file->vdmx; \\",
      "15:     file->vdmx = 0; \\",
      "",
      "[Added Lines]",
      "16:     delete file->vdmx; \\",
      "17:     file->vdmx = 0; \\",
      "",
      "---------------"
    ],
    "src/vorg.cc||src/vorg.cc": [
      "File: src/vorg.cc -> src/vorg.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: #define DROP_THIS_TABLE(...) \\",
      "15:   do { \\",
      "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
      "19:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
      "20:   } while (0)",
      "22: namespace ots {",
      "",
      "[Removed Lines]",
      "16:     delete file->vorg; \\",
      "17:     file->vorg = 0; \\",
      "",
      "[Added Lines]",
      "18:     delete file->vorg; \\",
      "19:     file->vorg = 0; \\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "080d3a89d568e029cdc0b74f19081b61af1f25d1",
      "candidate_info": {
        "commit_hash": "080d3a89d568e029cdc0b74f19081b61af1f25d1",
        "repo": "khaledhosny/ots",
        "commit_url": "https://github.com/khaledhosny/ots/commit/080d3a89d568e029cdc0b74f19081b61af1f25d1",
        "files": [
          "src/cff_type2_charstring.cc",
          "src/gasp.cc",
          "src/hdmx.cc",
          "src/kern.cc",
          "src/layout.cc",
          "src/ltsh.cc",
          "src/math.cc",
          "src/ots.cc",
          "src/ots.h",
          "src/vdmx.cc",
          "src/vorg.cc"
        ],
        "message": "Switch OTS_WARNING to use message callback",
        "before_after_code_files": [
          "src/cff_type2_charstring.cc||src/cff_type2_charstring.cc",
          "src/gasp.cc||src/gasp.cc",
          "src/hdmx.cc||src/hdmx.cc",
          "src/kern.cc||src/kern.cc",
          "src/layout.cc||src/layout.cc",
          "src/ltsh.cc||src/ltsh.cc",
          "src/math.cc||src/math.cc",
          "src/ots.cc||src/ots.cc",
          "src/ots.h||src/ots.h",
          "src/vdmx.cc||src/vdmx.cc",
          "src/vorg.cc||src/vorg.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gasp.cc||src/gasp.cc",
            "src/hdmx.cc||src/hdmx.cc",
            "src/kern.cc||src/kern.cc",
            "src/ltsh.cc||src/ltsh.cc",
            "src/math.cc||src/math.cc",
            "src/vdmx.cc||src/vdmx.cc",
            "src/vorg.cc||src/vorg.cc"
          ],
          "candidate": [
            "src/gasp.cc||src/gasp.cc",
            "src/hdmx.cc||src/hdmx.cc",
            "src/kern.cc||src/kern.cc",
            "src/ltsh.cc||src/ltsh.cc",
            "src/math.cc||src/math.cc",
            "src/vdmx.cc||src/vdmx.cc",
            "src/vorg.cc||src/vorg.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/cff_type2_charstring.cc||src/cff_type2_charstring.cc": [
          "File: src/cff_type2_charstring.cc -> src/cff_type2_charstring.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "708:     return true;",
          "709:   }",
          "712:   return OTS_FAILURE();",
          "713: }",
          "",
          "[Removed Lines]",
          "711:   OTS_WARNING(\"Undefined operator: %d (0x%x)\", op, op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/gasp.cc||src/gasp.cc": [
          "File: src/gasp.cc -> src/gasp.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define TABLE_NAME \"gasp\"",
          "13:   do { \\",
          "14:     delete file->gasp; \\",
          "15:     file->gasp = 0; \\",
          "16:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "17:   } while (0)",
          "",
          "[Removed Lines]",
          "12: #define DROP_THIS_TABLE \\",
          "",
          "[Added Lines]",
          "12: #define DROP_THIS_TABLE(...) \\",
          "16:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   if (gasp->version > 1) {",
          "37:     return true;",
          "38:   }",
          "40:   if (num_ranges == 0) {",
          "43:     return true;",
          "44:   }",
          "",
          "[Removed Lines]",
          "35:     OTS_WARNING(\"bad version: %u\", gasp->version);",
          "36:     DROP_THIS_TABLE;",
          "41:     OTS_WARNING(\"num_ranges is zero\");",
          "42:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "36:     DROP_THIS_TABLE(\"bad version: %u\", gasp->version);",
          "41:     DROP_THIS_TABLE(\"num_ranges is zero\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     if ((i > 0) && (gasp->gasp_ranges[i - 1].first >= max_ppem)) {",
          "59:       return true;",
          "60:     }",
          "61:     if ((i == num_ranges - 1u) &&  // never underflow.",
          "62:         (max_ppem != 0xffffu)) {",
          "64:                   \"for rangeMaxPPEM\");",
          "66:       return true;",
          "67:     }",
          "",
          "[Removed Lines]",
          "57:       OTS_WARNING(\"ranges are not sorted\");",
          "58:       DROP_THIS_TABLE;",
          "63:       OTS_WARNING(\"The last record should be 0xFFFF as a sentinel value \"",
          "65:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "56:       DROP_THIS_TABLE(\"ranges are not sorted\");",
          "61:       DROP_THIS_TABLE(\"The last record should be 0xFFFF as a sentinel value \"",
          "",
          "---------------"
        ],
        "src/hdmx.cc||src/hdmx.cc": [
          "File: src/hdmx.cc -> src/hdmx.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define TABLE_NAME \"hdmx\"",
          "15:   do { \\",
          "16:     delete file->hdmx; \\",
          "17:     file->hdmx = 0; \\",
          "18:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "19:   } while (0)",
          "",
          "[Removed Lines]",
          "14: #define DROP_THIS_TABLE \\",
          "",
          "[Added Lines]",
          "14: #define DROP_THIS_TABLE(...) \\",
          "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   if ((file->head->flags & 0x14) == 0) {",
          "37:     return true;",
          "38:   }",
          "",
          "[Removed Lines]",
          "34:     OTS_WARNING(\"the table should not be present when bit 2 and 4 of the \"",
          "35:                 \"head->flags are not set\");",
          "36:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "35:     DROP_THIS_TABLE(\"the table should not be present when bit 2 and 4 of the \"",
          "36:                     \"head->flags are not set\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     return OTS_FAILURE_MSG(\"Failed to read hdmx header\");",
          "45:   }",
          "46:   if (hdmx->version != 0) {",
          "49:     return true;",
          "50:   }",
          "51:   if (num_recs <= 0) {",
          "54:     return true;",
          "55:   }",
          "56:   const int32_t actual_size_device_record = file->maxp->num_glyphs + 2;",
          "57:   if (hdmx->size_device_record < actual_size_device_record) {",
          "60:     return true;",
          "61:   }",
          "",
          "[Removed Lines]",
          "47:     OTS_WARNING(\"bad version: %u\", hdmx->version);",
          "48:     DROP_THIS_TABLE;",
          "52:     OTS_WARNING(\"bad num_recs: %d\", num_recs);",
          "53:     DROP_THIS_TABLE;",
          "58:     OTS_WARNING(\"bad hdmx->size_device_record: %d\", hdmx->size_device_record);",
          "59:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "47:     DROP_THIS_TABLE(\"bad version: %u\", hdmx->version);",
          "51:     DROP_THIS_TABLE(\"bad num_recs: %d\", num_recs);",
          "56:     DROP_THIS_TABLE(\"bad hdmx->size_device_record: %d\", hdmx->size_device_record);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:     }",
          "77:     if ((i != 0) &&",
          "78:         (rec.pixel_size <= last_pixel_size)) {",
          "81:       return true;",
          "82:     }",
          "83:     last_pixel_size = rec.pixel_size;",
          "",
          "[Removed Lines]",
          "79:       OTS_WARNING(\"records are not sorted\");",
          "80:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "76:       DROP_THIS_TABLE(\"records are not sorted\");",
          "",
          "---------------"
        ],
        "src/kern.cc||src/kern.cc": [
          "File: src/kern.cc -> src/kern.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define TABLE_NAME \"kern\"",
          "13:   do { \\",
          "14:     delete file->kern; \\",
          "15:     file->kern = 0; \\",
          "17:   } while (0)",
          "19: namespace ots {",
          "",
          "[Removed Lines]",
          "12: #define DROP_THIS_TABLE \\",
          "16:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "",
          "[Added Lines]",
          "12: #define DROP_THIS_TABLE(msg_) \\",
          "16:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   }",
          "33:   if (kern->version > 0) {",
          "35:     return true;",
          "36:   }",
          "38:   if (num_tables == 0) {",
          "41:     return true;",
          "42:   }",
          "",
          "[Removed Lines]",
          "34:     DROP_THIS_TABLE;",
          "39:     OTS_WARNING(\"num_tables is zero\");",
          "40:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "34:     DROP_THIS_TABLE(\"bad table version\");",
          "39:     DROP_THIS_TABLE(\"num_tables is zero\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:       continue;",
          "72:     }",
          "73:     if (subtable.coverage & 0xF0) {",
          "76:       return true;",
          "77:     }",
          "78:     const uint32_t format = (subtable.coverage & 0xFF00) >> 8;",
          "",
          "[Removed Lines]",
          "74:       OTS_WARNING(\"Reserved fields should zero-filled.\");",
          "75:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "73:       DROP_THIS_TABLE(\"Reserved fields should zero-filled.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     }",
          "93:     if (!num_pairs) {",
          "96:       return true;",
          "97:     }",
          "",
          "[Removed Lines]",
          "94:       OTS_WARNING(\"Zero length subtable is found.\");",
          "95:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "92:       DROP_THIS_TABLE(\"Zero length subtable is found.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:     const size_t kFormat0PairSize = 6;  // left, right, and value. 2 bytes each.",
          "102:     if (num_pairs > (65536 / kFormat0PairSize)) {",
          "106:       return true;",
          "107:     }",
          "108:     unsigned max_pow2 = 0;",
          "",
          "[Removed Lines]",
          "104:       OTS_WARNING(\"Too large subtable.\");",
          "105:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "101:       DROP_THIS_TABLE(\"Too large subtable.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:       const uint32_t current_pair",
          "138:           = (kerning_pair.left << 16) + kerning_pair.right;",
          "139:       if (j != 0 && current_pair <= last_pair) {",
          "144:         return true;",
          "145:       }",
          "146:       last_pair = current_pair;",
          "",
          "[Removed Lines]",
          "140:         OTS_WARNING(\"Kerning pairs are not sorted.\");",
          "143:         DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "138:         DROP_THIS_TABLE(\"Kerning pairs are not sorted.\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151:   }",
          "153:   if (!kern->subtables.size()) {",
          "156:     return true;",
          "157:   }",
          "",
          "[Removed Lines]",
          "154:     OTS_WARNING(\"All subtables are removed.\");",
          "155:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "149:     DROP_THIS_TABLE(\"All subtables are removed.\");",
          "",
          "---------------"
        ],
        "src/layout.cc||src/layout.cc": [
          "File: src/layout.cc -> src/layout.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     return OTS_FAILURE_MSG(\"Failed to read starting glyph of class definition\");",
          "271:   }",
          "272:   if (start_glyph > num_glyphs) {",
          "274:     return OTS_FAILURE_MSG(\"Bad starting glyph %d in class definition\", start_glyph);",
          "275:   }",
          "",
          "[Removed Lines]",
          "273:     OTS_WARNING(\"bad start glyph ID: %u\", start_glyph);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:       return OTS_FAILURE_MSG(\"Failed to read class value for glyph %d in class definition\", i);",
          "288:     }",
          "289:     if (class_value > num_classes) {",
          "291:       return OTS_FAILURE_MSG(\"Bad class value %d for glyph %d in class definition\", class_value, i);",
          "292:     }",
          "293:   }",
          "",
          "[Removed Lines]",
          "290:       OTS_WARNING(\"bad class value: %u\", class_value);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ltsh.cc||src/ltsh.cc": [
          "File: src/ltsh.cc -> src/ltsh.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define TABLE_NAME \"LTSH\"",
          "15:   do { \\",
          "16:     delete file->ltsh; \\",
          "17:     file->ltsh = 0; \\",
          "18:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "19:   } while (0)",
          "",
          "[Removed Lines]",
          "14: #define DROP_THIS_TABLE \\",
          "",
          "[Added Lines]",
          "14: #define DROP_THIS_TABLE(...) \\",
          "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   }",
          "39:   if (ltsh->version != 0) {",
          "42:     return true;",
          "43:   }",
          "45:   if (num_glyphs != file->maxp->num_glyphs) {",
          "48:     return true;",
          "49:   }",
          "",
          "[Removed Lines]",
          "40:     OTS_WARNING(\"bad version: %u\", ltsh->version);",
          "41:     DROP_THIS_TABLE;",
          "46:     OTS_WARNING(\"bad num_glyphs: %u\", num_glyphs);",
          "47:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "41:     DROP_THIS_TABLE(\"bad version: %u\", ltsh->version);",
          "46:     DROP_THIS_TABLE(\"bad num_glyphs: %u\", num_glyphs);",
          "",
          "---------------"
        ],
        "src/math.cc||src/math.cc": [
          "File: src/math.cc -> src/math.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:       return OTS_FAILURE();",
          "385:     }",
          "386:     if (glyph >= num_glyphs) {",
          "389:     }",
          "390:     if (part_flags & ~0x00000001) {",
          "393:     }",
          "394:   }",
          "",
          "[Removed Lines]",
          "387:       OTS_WARNING(\"bad glyph ID: %u\", glyph);",
          "388:       return OTS_FAILURE();",
          "391:       OTS_WARNING(\"unknown part flag: %u\", part_flags);",
          "392:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "387:       return OTS_FAILURE_MSG(\"bad glyph ID: %u\", glyph);",
          "390:       return OTS_FAILURE_MSG(\"unknown part flag: %u\", part_flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:       return OTS_FAILURE();",
          "436:     }",
          "437:     if (glyph >= num_glyphs) {",
          "440:     }",
          "441:   }",
          "",
          "[Removed Lines]",
          "438:       OTS_WARNING(\"bad glyph ID: %u\", glyph);",
          "439:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "436:       return OTS_FAILURE_MSG(\"bad glyph ID: %u\", glyph);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520: }  // namespace",
          "525: namespace ots {",
          "",
          "[Removed Lines]",
          "522: #define DROP_THIS_TABLE \\",
          "523:   do { file->math->data = 0; file->math->length = 0; } while (0)",
          "",
          "[Added Lines]",
          "519: #define DROP_THIS_TABLE(msg_) \\",
          "520:   do { \\",
          "521:     file->math->data = 0; \\",
          "522:     file->math->length = 0; \\",
          "523:     OTS_FAILURE_MSG(msg_ \", table discarded\"); \\",
          "524:   } while (0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     return OTS_FAILURE();",
          "543:   }",
          "544:   if (version != 0x00010000) {",
          "547:     return true;",
          "548:   }",
          "",
          "[Removed Lines]",
          "545:     OTS_WARNING(\"bad MATH version\");",
          "546:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "546:     DROP_THIS_TABLE(\"bad MATH version\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:       offset_math_glyph_info < kMathHeaderSize ||",
          "563:       offset_math_variants >= length ||",
          "564:       offset_math_variants < kMathHeaderSize) {",
          "567:     return true;",
          "568:   }",
          "570:   if (!ParseMathConstantsTable(file, data + offset_math_constants,",
          "571:                                length - offset_math_constants)) {",
          "573:     return true;",
          "574:   }",
          "575:   if (!ParseMathGlyphInfoTable(file, data + offset_math_glyph_info,",
          "576:                                length - offset_math_glyph_info, num_glyphs)) {",
          "578:     return true;",
          "579:   }",
          "580:   if (!ParseMathVariantsTable(file, data + offset_math_variants,",
          "581:                               length - offset_math_variants, num_glyphs)) {",
          "583:     return true;",
          "584:   }",
          "",
          "[Removed Lines]",
          "565:     OTS_WARNING(\"bad offset in MATH header\");",
          "566:     DROP_THIS_TABLE;",
          "572:     DROP_THIS_TABLE;",
          "577:     DROP_THIS_TABLE;",
          "582:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "565:     DROP_THIS_TABLE(\"bad offset in MATH header\");",
          "571:     DROP_THIS_TABLE(\"failed to parse MathConstants table\");",
          "576:     DROP_THIS_TABLE(\"failed to parse MathGlyphInfo table\");",
          "581:     DROP_THIS_TABLE(\"failed to parse MathVariants table\");",
          "",
          "---------------"
        ],
        "src/ots.cc||src/ots.cc": [
          "File: src/ots.cc -> src/ots.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   if (header->search_range != expected_search_range) {",
          "203:     header->search_range = expected_search_range;  // Fix the value.",
          "204:   }",
          "",
          "[Removed Lines]",
          "202:     OTS_WARNING(\"bad search range\");",
          "",
          "[Added Lines]",
          "202:     OTS_FAILURE_MSG_HDR(\"bad search range\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:   const uint32_t expected_range_shift",
          "215:       = 16 * header->num_tables - header->search_range;",
          "216:   if (header->range_shift != expected_range_shift) {",
          "218:     header->range_shift = expected_range_shift;  // the same as above.",
          "219:   }",
          "",
          "[Removed Lines]",
          "217:     OTS_WARNING(\"bad range shift\");",
          "",
          "[Added Lines]",
          "217:     OTS_FAILURE_MSG_HDR(\"bad range shift\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:   }",
          "840:   return false;",
          "841: }",
          "854: #endif",
          "856: }  // namespace ots",
          "",
          "[Removed Lines]",
          "843: void Warning(const char *f, int l, const char *format, ...) {",
          "844:   if (g_debug_output) {",
          "845:     std::fprintf(stderr, \"WARNING at %s:%d: \", f, l);",
          "846:     std::va_list va;",
          "847:     va_start(va, format);",
          "848:     std::vfprintf(stderr, format, va);",
          "849:     va_end(va);",
          "850:     std::fprintf(stderr, \"\\n\");",
          "851:     std::fflush(stderr);",
          "852:   }",
          "853: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ots.h||src/ots.h": [
          "File: src/ots.h -> src/ots.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: bool Failure(const char *f, int l, const char *fn);",
          "30: #endif",
          "",
          "[Removed Lines]",
          "32: #if defined(_MSC_VER)",
          "34: #define OTS_WARNING(format, ...)",
          "35: #else",
          "37: #if defined(OTS_DEBUG)",
          "38: #define OTS_WARNING(format, args...) \\",
          "39:     ots::Warning(__FILE__, __LINE__, format, ##args)",
          "40: void Warning(const char *f, int l, const char *format, ...)",
          "41:      __attribute__((format(printf, 3, 4)));",
          "42: #else",
          "43: #define OTS_WARNING(format, args...)",
          "44: #endif",
          "45: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: #define OTS_FAILURE_MSG(...) OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #define OTS_WARNING OTS_FAILURE_MSG",
          "",
          "---------------"
        ],
        "src/vdmx.cc||src/vdmx.cc": [
          "File: src/vdmx.cc -> src/vdmx.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define TABLE_NAME \"VDMX\"",
          "13:   do { \\",
          "14:     delete file->vdmx; \\",
          "15:     file->vdmx = 0; \\",
          "16:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "17:   } while (0)",
          "",
          "[Removed Lines]",
          "12: #define DROP_THIS_TABLE \\",
          "",
          "[Added Lines]",
          "12: #define DROP_THIS_TABLE(...) \\",
          "16:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   }",
          "32:   if (vdmx->version > 1) {",
          "35:     return true;  // continue transcoding",
          "36:   }",
          "",
          "[Removed Lines]",
          "33:     OTS_WARNING(\"bad version: %u\", vdmx->version);",
          "34:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "34:     DROP_THIS_TABLE(\"bad version: %u\", vdmx->version);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     }",
          "49:     if (rec.charset > 1) {",
          "52:       return true;",
          "53:     }",
          "55:     if (rec.y_start_ratio > rec.y_end_ratio) {",
          "58:       return true;",
          "59:     }",
          "",
          "[Removed Lines]",
          "50:       OTS_WARNING(\"bad charset: %u\", rec.charset);",
          "51:       DROP_THIS_TABLE;",
          "56:       OTS_WARNING(\"bad y ratio\");",
          "57:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "50:       DROP_THIS_TABLE(\"bad charset: %u\", rec.charset);",
          "55:       DROP_THIS_TABLE(\"bad y ratio\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:         (rec.y_start_ratio == 0) &&",
          "66:         (rec.y_end_ratio == 0)) {",
          "70:       return true;",
          "71:     }",
          "",
          "[Removed Lines]",
          "68:       OTS_WARNING(\"superfluous terminator found\");",
          "69:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "66:       DROP_THIS_TABLE(\"superfluous terminator found\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:         return OTS_FAILURE_MSG(\"Failed to read reacord %d group %d\", i, j);",
          "106:       }",
          "107:       if (vt.y_max < vt.y_min) {",
          "110:         return true;",
          "111:       }",
          "115:       if ((j != 0) && (group.entries[j - 1].y_pel_height >= vt.y_pel_height)) {",
          "118:         return true;",
          "119:       }",
          "",
          "[Removed Lines]",
          "108:         OTS_WARNING(\"bad y min/max\");",
          "109:         DROP_THIS_TABLE;",
          "116:         OTS_WARNING(\"the table is not sorted\");",
          "117:         DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "105:         DROP_THIS_TABLE(\"bad y min/max\");",
          "112:         DROP_THIS_TABLE(\"the table is not sorted\");",
          "",
          "---------------"
        ],
        "src/vorg.cc||src/vorg.cc": [
          "File: src/vorg.cc -> src/vorg.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define TABLE_NAME \"VORG\"",
          "15:   do { \\",
          "16:     delete file->vorg; \\",
          "17:     file->vorg = 0; \\",
          "18:     OTS_FAILURE_MSG(\"Table discarded\"); \\",
          "19:   } while (0)",
          "",
          "[Removed Lines]",
          "14: #define DROP_THIS_TABLE \\",
          "",
          "[Added Lines]",
          "14: #define DROP_THIS_TABLE(...) \\",
          "18:     OTS_FAILURE_MSG_(file, TABLE_NAME \": \" __VA_ARGS__); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     return OTS_FAILURE_MSG(\"Failed to read header\");",
          "34:   }",
          "35:   if (vorg->major_version != 1) {",
          "38:     return true;",
          "39:   }",
          "40:   if (vorg->minor_version != 0) {",
          "43:     return true;",
          "44:   }",
          "",
          "[Removed Lines]",
          "36:     OTS_WARNING(\"bad major version: %u\", vorg->major_version);",
          "37:     DROP_THIS_TABLE;",
          "41:     OTS_WARNING(\"bad minor version: %u\", vorg->minor_version);",
          "42:     DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "37:     DROP_THIS_TABLE(\"bad major version: %u\", vorg->major_version);",
          "41:     DROP_THIS_TABLE(\"bad minor version: %u\", vorg->minor_version);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:       return OTS_FAILURE_MSG(\"Failed to read record %d\", i);",
          "59:     }",
          "60:     if ((i != 0) && (rec.glyph_index <= last_glyph_index)) {",
          "63:       return true;",
          "64:     }",
          "65:     last_glyph_index = rec.glyph_index;",
          "",
          "[Removed Lines]",
          "61:       OTS_WARNING(\"the table is not sorted\");",
          "62:       DROP_THIS_TABLE;",
          "",
          "[Added Lines]",
          "60:       DROP_THIS_TABLE(\"the table is not sorted\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8769fa09bcdd1e0f5712af4dd32a0b1f81c5ff5",
      "candidate_info": {
        "commit_hash": "e8769fa09bcdd1e0f5712af4dd32a0b1f81c5ff5",
        "repo": "khaledhosny/ots",
        "commit_url": "https://github.com/khaledhosny/ots/commit/e8769fa09bcdd1e0f5712af4dd32a0b1f81c5ff5",
        "files": [
          "include/opentype-sanitiser.h",
          "src/gdef.cc",
          "src/gpos.cc",
          "src/gsub.cc",
          "src/ots.cc",
          "src/ots.h"
        ],
        "message": "Add support for an error-message callback to OTS",
        "before_after_code_files": [
          "include/opentype-sanitiser.h||include/opentype-sanitiser.h",
          "src/gdef.cc||src/gdef.cc",
          "src/gpos.cc||src/gpos.cc",
          "src/gsub.cc||src/gsub.cc",
          "src/ots.cc||src/ots.cc",
          "src/ots.h||src/ots.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gdef.cc||src/gdef.cc",
            "src/gpos.cc||src/gpos.cc",
            "src/gsub.cc||src/gsub.cc"
          ],
          "candidate": [
            "src/gdef.cc||src/gdef.cc",
            "src/gpos.cc||src/gpos.cc",
            "src/gsub.cc||src/gsub.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/opentype-sanitiser.h||include/opentype-sanitiser.h": [
          "File: include/opentype-sanitiser.h -> include/opentype-sanitiser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   unsigned chksum_buffer_offset_;",
          "178: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: #ifdef __GCC__",
          "184: #define MSGFUNC_FMT_ATTR __attribute__((format(printf, 2, 3)))",
          "185: #else",
          "186: #define MSGFUNC_FMT_ATTR",
          "187: #endif",
          "188: typedef bool (*MessageFunc)(void *user_data, const char *format, ...)  MSGFUNC_FMT_ATTR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "188: bool Process(OTSStream *output, const uint8_t *input, size_t length);",
          "",
          "[Added Lines]",
          "200: bool Process(OTSStream *output, const uint8_t *input, size_t length,",
          "201:              MessageFunc message_func = NULL, void *user_data = NULL);",
          "",
          "---------------"
        ],
        "src/gdef.cc||src/gdef.cc": [
          "File: src/gdef.cc -> src/gdef.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #define TABLE_NAME \"GDEF\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: }  // namespace",
          "244: #define DROP_THIS_TABLE \\",
          "247: namespace ots {",
          "",
          "[Removed Lines]",
          "245:   do { file->gdef->data = 0; file->gdef->length = 0; } while (0)",
          "",
          "[Added Lines]",
          "247:   do { \\",
          "248:     file->gdef->data = 0; \\",
          "249:     file->gdef->length = 0; \\",
          "250:     OTS_FAILURE_MSG(\"OpenType layout data discarded\"); \\",
          "251:   } while (0)",
          "",
          "---------------"
        ],
        "src/gpos.cc||src/gpos.cc": [
          "File: src/gpos.cc -> src/gpos.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace {",
          "20: enum GPOS_TYPE {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #define TABLE_NAME \"GPOS\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668: }  // namespace",
          "670: #define DROP_THIS_TABLE \\",
          "673: namespace ots {",
          "",
          "[Removed Lines]",
          "671:   do { file->gpos->data = 0; file->gpos->length = 0; } while (0)",
          "",
          "[Added Lines]",
          "673:   do { \\",
          "674:     file->gpos->data = 0; \\",
          "675:     file->gpos->length = 0; \\",
          "676:     OTS_FAILURE_MSG(\"OpenType layout data discarded\"); \\",
          "677:   } while (0)",
          "",
          "---------------"
        ],
        "src/gsub.cc||src/gsub.cc": [
          "File: src/gsub.cc -> src/gsub.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #define TABLE_NAME \"GSUB\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528: }  // namespace",
          "530: #define DROP_THIS_TABLE \\",
          "533: namespace ots {",
          "",
          "[Removed Lines]",
          "531:   do { file->gsub->data = 0; file->gsub->length = 0; } while (0)",
          "",
          "[Added Lines]",
          "533:   do { \\",
          "534:     file->gsub->data = 0; \\",
          "535:     file->gsub->length = 0; \\",
          "536:     OTS_FAILURE_MSG(\"OpenType layout data discarded\"); \\",
          "537:   } while (0)",
          "",
          "---------------"
        ],
        "src/ots.cc||src/ots.cc": [
          "File: src/ots.cc -> src/ots.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: bool g_debug_output = true;",
          "25: bool g_enable_woff2 = false;",
          "27: struct OpenTypeTable {",
          "28:   uint32_t tag;",
          "29:   uint32_t chksum;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #ifdef MOZ_OTS_REPORT_ERRORS",
          "30: #define OTS_FAILURE_MSG_TAG(msg_,tag_) OTS_FAILURE_MSG_TAG_(header, msg_, tag_)",
          "31: #define OTS_FAILURE_MSG_HDR(msg_)      OTS_FAILURE_MSG_(header, msg_)",
          "33: #else",
          "35: #define OTS_FAILURE_MSG_TAG(msg_,tag_) OTS_FAILURE()",
          "36: #define OTS_FAILURE_MSG_HDR(msg_)      OTS_FAILURE()",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   if (length > 1024 * 1024 * 1024) {",
          "162:   }",
          "164:   if (!file.ReadTag(&header->version)) {",
          "166:   }",
          "167:   if (!ots::IsValidVersionTag(header->version)) {",
          "169:   }",
          "171:   if (!file.ReadU16(&header->num_tables) ||",
          "172:       !file.ReadU16(&header->search_range) ||",
          "173:       !file.ReadU16(&header->entry_selector) ||",
          "174:       !file.ReadU16(&header->range_shift)) {",
          "176:   }",
          "180:   if (header->num_tables >= 4096 || header->num_tables < 1) {",
          "182:   }",
          "184:   unsigned max_pow2 = 0;",
          "",
          "[Removed Lines]",
          "161:     return OTS_FAILURE();",
          "165:     return OTS_FAILURE();",
          "168:       return OTS_FAILURE();",
          "175:     return OTS_FAILURE();",
          "181:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "175:     return OTS_FAILURE_MSG_HDR(\"file exceeds 1GB\");",
          "179:     return OTS_FAILURE_MSG_HDR(\"error reading version tag\");",
          "182:       return OTS_FAILURE_MSG_HDR(\"invalid version tag\");",
          "189:     return OTS_FAILURE_MSG_HDR(\"error reading table directory search header\");",
          "195:     return OTS_FAILURE_MSG_HDR(\"excessive (or zero) number of tables\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:   if (header->entry_selector != max_pow2) {",
          "200:   }",
          "",
          "[Removed Lines]",
          "199:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "213:     return OTS_FAILURE_MSG_HDR(\"incorrect entrySelector for table directory\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "218:         !file.ReadU32(&table.chksum) ||",
          "219:         !file.ReadU32(&table.offset) ||",
          "220:         !file.ReadU32(&table.length)) {",
          "222:     }",
          "224:     table.uncompressed_length = table.length;",
          "",
          "[Removed Lines]",
          "221:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "235:       return OTS_FAILURE_MSG_HDR(\"error reading table directory\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:   if (length > 1024 * 1024 * 1024) {",
          "239:   }",
          "241:   uint32_t woff_tag;",
          "242:   if (!file.ReadTag(&woff_tag)) {",
          "244:   }",
          "246:   if (woff_tag != Tag(\"wOFF\")) {",
          "248:   }",
          "250:   if (!file.ReadTag(&header->version)) {",
          "252:   }",
          "253:   if (!ots::IsValidVersionTag(header->version)) {",
          "255:   }",
          "257:   header->search_range = 0;",
          "",
          "[Removed Lines]",
          "238:     return OTS_FAILURE();",
          "243:     return OTS_FAILURE();",
          "247:     return OTS_FAILURE();",
          "251:     return OTS_FAILURE();",
          "254:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "252:     return OTS_FAILURE_MSG_HDR(\"file exceeds 1GB\");",
          "257:     return OTS_FAILURE_MSG_HDR(\"error reading WOFF marker\");",
          "261:     return OTS_FAILURE_MSG_HDR(\"invalid WOFF marker\");",
          "265:     return OTS_FAILURE_MSG_HDR(\"error reading version tag\");",
          "268:     return OTS_FAILURE_MSG_HDR(\"invalid version tag\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:   uint32_t reported_length;",
          "262:   if (!file.ReadU32(&reported_length) || length != reported_length) {",
          "264:   }",
          "266:   if (!file.ReadU16(&header->num_tables) || !header->num_tables) {",
          "268:   }",
          "270:   uint16_t reserved_value;",
          "271:   if (!file.ReadU16(&reserved_value) || reserved_value) {",
          "273:   }",
          "275:   uint32_t reported_total_sfnt_size;",
          "276:   if (!file.ReadU32(&reported_total_sfnt_size)) {",
          "278:   }",
          "282:   if (!file.Skip(2 * 2)) {",
          "284:   }",
          "",
          "[Removed Lines]",
          "263:     return OTS_FAILURE();",
          "267:     return OTS_FAILURE();",
          "272:     return OTS_FAILURE();",
          "277:     return OTS_FAILURE();",
          "283:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "277:     return OTS_FAILURE_MSG_HDR(\"incorrect file size in WOFF header\");",
          "281:     return OTS_FAILURE_MSG_HDR(\"error reading number of tables\");",
          "286:     return OTS_FAILURE_MSG_HDR(\"error in reserved field of WOFF header\");",
          "291:     return OTS_FAILURE_MSG_HDR(\"error reading total sfnt size\");",
          "297:     return OTS_FAILURE_MSG_HDR(\"error skipping WOFF header fields\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290:   if (!file.ReadU32(&meta_offset) ||",
          "291:       !file.ReadU32(&meta_length) ||",
          "292:       !file.ReadU32(&meta_length_orig)) {",
          "294:   }",
          "295:   if (meta_offset) {",
          "296:     if (meta_offset >= length || length - meta_offset < meta_length) {",
          "298:     }",
          "299:   }",
          "",
          "[Removed Lines]",
          "293:     return OTS_FAILURE();",
          "297:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "307:     return OTS_FAILURE_MSG_HDR(\"error reading WOFF header fields\");",
          "311:       return OTS_FAILURE_MSG_HDR(\"invalid metadata block location/size\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "303:   uint32_t priv_length;",
          "304:   if (!file.ReadU32(&priv_offset) ||",
          "305:       !file.ReadU32(&priv_length)) {",
          "307:   }",
          "308:   if (priv_offset) {",
          "309:     if (priv_offset >= length || length - priv_offset < priv_length) {",
          "311:     }",
          "312:   }",
          "",
          "[Removed Lines]",
          "306:     return OTS_FAILURE();",
          "310:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "320:     return OTS_FAILURE_MSG_HDR(\"error reading WOFF header fields\");",
          "324:       return OTS_FAILURE_MSG_HDR(\"invalid private block location/size\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "325:         !file.ReadU32(&table.length) ||",
          "326:         !file.ReadU32(&table.uncompressed_length) ||",
          "327:         !file.ReadU32(&table.chksum)) {",
          "329:     }",
          "331:     total_sfnt_size += ots::Round4(table.uncompressed_length);",
          "332:     if (total_sfnt_size > std::numeric_limits<uint32_t>::max()) {",
          "334:     }",
          "335:     tables.push_back(table);",
          "336:     if (i == 0 || tables[first_index].offset > table.offset)",
          "",
          "[Removed Lines]",
          "328:       return OTS_FAILURE();",
          "333:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "342:       return OTS_FAILURE_MSG_HDR(\"error reading table directory\");",
          "347:       return OTS_FAILURE_MSG_HDR(\"sfnt size overflow\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "340:   }",
          "342:   if (reported_total_sfnt_size != total_sfnt_size) {",
          "344:   }",
          "347:   if (tables[first_index].offset != ots::Round4(file.offset())) {",
          "349:   }",
          "351:   if (tables[last_index].offset >= length ||",
          "352:       length - tables[last_index].offset < tables[last_index].length) {",
          "354:   }",
          "",
          "[Removed Lines]",
          "343:     return OTS_FAILURE();",
          "348:     return OTS_FAILURE();",
          "353:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "357:     return OTS_FAILURE_MSG_HDR(\"uncompressed sfnt size mismatch\");",
          "362:     return OTS_FAILURE_MSG_HDR(\"junk before tables in WOFF file\");",
          "367:     return OTS_FAILURE_MSG_HDR(\"invalid table location/size\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "358:       static_cast<uint64_t>(tables[last_index].offset) +",
          "359:       static_cast<uint64_t>(tables[last_index].length));",
          "360:   if (block_end > std::numeric_limits<uint32_t>::max()) {",
          "362:   }",
          "363:   if (meta_offset) {",
          "364:     if (block_end != meta_offset) {",
          "366:     }",
          "367:     block_end = ots::Round4(static_cast<uint64_t>(meta_offset) +",
          "368:                             static_cast<uint64_t>(meta_length));",
          "369:     if (block_end > std::numeric_limits<uint32_t>::max()) {",
          "371:     }",
          "372:   }",
          "373:   if (priv_offset) {",
          "374:     if (block_end != priv_offset) {",
          "376:     }",
          "377:     block_end = ots::Round4(static_cast<uint64_t>(priv_offset) +",
          "378:                             static_cast<uint64_t>(priv_length));",
          "379:     if (block_end > std::numeric_limits<uint32_t>::max()) {",
          "381:     }",
          "382:   }",
          "383:   if (block_end != ots::Round4(length)) {",
          "385:   }",
          "387:   return ProcessGeneric(header, woff_tag, output, data, length, tables, file);",
          "",
          "[Removed Lines]",
          "361:     return OTS_FAILURE();",
          "365:       return OTS_FAILURE();",
          "370:       return OTS_FAILURE();",
          "375:       return OTS_FAILURE();",
          "380:       return OTS_FAILURE();",
          "384:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "375:     return OTS_FAILURE_MSG_HDR(\"invalid table location/size\");",
          "379:       return OTS_FAILURE_MSG_HDR(\"invalid metadata block location\");",
          "384:       return OTS_FAILURE_MSG_HDR(\"invalid metadata block size\");",
          "389:       return OTS_FAILURE_MSG_HDR(\"invalid private block location\");",
          "394:       return OTS_FAILURE_MSG_HDR(\"invalid private block size\");",
          "398:     return OTS_FAILURE_MSG_HDR(\"file length mismatch (trailing junk?)\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "422:       const uint32_t this_tag = ntohl(tables[i].tag);",
          "423:       const uint32_t prev_tag = ntohl(tables[i - 1].tag);",
          "424:       if (this_tag <= prev_tag) {",
          "426:       }",
          "427:     }",
          "430:     if (!CheckTag(tables[i].tag)) {",
          "432:     }",
          "435:     if (tables[i].offset & 3) {",
          "437:     }",
          "440:     if (tables[i].offset < data_offset || tables[i].offset >= length) {",
          "442:     }",
          "444:     if (tables[i].length < 1) {",
          "447:     }",
          "449:     if (tables[i].length > 1024 * 1024 * 1024) {",
          "451:     }",
          "453:     if (tables[i].uncompressed_length < tables[i].length) {",
          "455:     }",
          "456:     if (tables[i].uncompressed_length > tables[i].length) {",
          "460:       if (tables[i].uncompressed_length > 30 * 1024 * 1024) {",
          "462:       }",
          "463:       if (uncompressed_sum + tables[i].uncompressed_length < uncompressed_sum) {",
          "465:       }",
          "467:       uncompressed_sum += tables[i].uncompressed_length;",
          "",
          "[Removed Lines]",
          "425:         return OTS_FAILURE();",
          "431:       return OTS_FAILURE();",
          "436:       return OTS_FAILURE();",
          "441:       return OTS_FAILURE();",
          "446:       return OTS_FAILURE();",
          "450:       return OTS_FAILURE();",
          "454:       return OTS_FAILURE();",
          "461:         return OTS_FAILURE();",
          "464:         return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "439:         return OTS_FAILURE_MSG_HDR(\"table directory not correctly ordered\");",
          "445:       return OTS_FAILURE_MSG_TAG(\"invalid table tag\", &tables[i].tag);",
          "450:       return OTS_FAILURE_MSG_TAG(\"misaligned table\", &tables[i].tag);",
          "455:       return OTS_FAILURE_MSG_TAG(\"invalid table offset\", &tables[i].tag);",
          "460:       return OTS_FAILURE_MSG_TAG(\"zero-length table\", &tables[i].tag);",
          "464:       return OTS_FAILURE_MSG_TAG(\"table length exceeds 1GB\", &tables[i].tag);",
          "468:       return OTS_FAILURE_MSG_TAG(\"invalid compressed table\", &tables[i].tag);",
          "475:         return OTS_FAILURE_MSG_TAG(\"uncompressed length exceeds 30MB\", &tables[i].tag);",
          "478:         return OTS_FAILURE_MSG_TAG(\"overflow of uncompressed sum\", &tables[i].tag);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "474:         end_byte = ots::Round4(end_byte);",
          "475:     }",
          "476:     if (!end_byte || end_byte > length) {",
          "478:     }",
          "479:   }",
          "482:   if (uncompressed_sum > 30 * 1024 * 1024) {",
          "484:   }",
          "486:   std::map<uint32_t, OpenTypeTable> table_map;",
          "",
          "[Removed Lines]",
          "477:       return OTS_FAILURE();",
          "483:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "491:       return OTS_FAILURE_MSG_TAG(\"table overruns end of file\", &tables[i].tag);",
          "497:     return OTS_FAILURE_MSG_HDR(\"uncompressed sum exceeds 30MB\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "502:   for (unsigned i = 0; i < overlap_checker.size(); ++i) {",
          "503:     overlap_count += (overlap_checker[i].second ? 1 : -1);",
          "504:     if (overlap_count > 1) {",
          "506:     }",
          "507:   }",
          "",
          "[Removed Lines]",
          "505:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "519:       return OTS_FAILURE_MSG_HDR(\"overlapping tables\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "517:     if (it == table_map.end()) {",
          "518:       if (table_parsers[i].required) {",
          "520:       }",
          "521:       continue;",
          "522:     }",
          "",
          "[Removed Lines]",
          "519:         return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "533:         return OTS_FAILURE_MSG_TAG(\"missing required table\", table_parsers[i].tag);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "532:       int r = uncompress((Bytef*) table_data, &dest_len,",
          "533:                          data + it->second.offset, it->second.length);",
          "534:       if (r != Z_OK || dest_len != table_length) {",
          "536:       }",
          "537:     } else {",
          "",
          "[Removed Lines]",
          "535:         return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "549:         return OTS_FAILURE_MSG_TAG(\"uncompress failed\", table_parsers[i].tag);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "541:     }",
          "543:     if (!table_parsers[i].parse(header, table_data, table_length)) {",
          "545:     }",
          "546:   }",
          "548:   if (header->cff) {",
          "550:     if (header->version != Tag(\"OTTO\")) {",
          "552:     }",
          "553:     if (header->glyf || header->loca) {",
          "556:     }",
          "557:   } else {",
          "558:     if (!header->glyf || !header->loca) {",
          "562:     }",
          "563:   }",
          "",
          "[Removed Lines]",
          "544:       return OTS_FAILURE();",
          "551:       return OTS_FAILURE();",
          "555:       return OTS_FAILURE();",
          "561:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "560:       return OTS_FAILURE_MSG_TAG(\"failed to parse table\", table_parsers[i].tag);",
          "567:       return OTS_FAILURE_MSG_HDR(\"wrong font version for PostScript glyph data\");",
          "571:       return OTS_FAILURE_MSG_HDR(\"font contains both PS and TT glyphs\");",
          "577:       return OTS_FAILURE_MSG_HDR(\"neither PS nor TT glyphs present\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "579:   }",
          "580:   const uint16_t output_search_range = (1u << max_pow2) << 4;",
          "582:   output->ResetChecksum();",
          "583:   if (!output->WriteTag(header->version) ||",
          "584:       !output->WriteU16(num_output_tables) ||",
          "585:       !output->WriteU16(output_search_range) ||",
          "586:       !output->WriteU16(max_pow2) ||",
          "587:       !output->WriteU16((num_output_tables << 4) - output_search_range)) {",
          "589:   }",
          "590:   const uint32_t offset_table_chksum = output->chksum();",
          "592:   const size_t table_record_offset = output->Tell();",
          "593:   if (!output->Pad(16 * num_output_tables)) {",
          "595:   }",
          "597:   std::vector<OutputTable> out_tables;",
          "",
          "[Removed Lines]",
          "588:     return OTS_FAILURE();",
          "594:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "606:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "612:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "616:       head_table_offset = out.offset;",
          "617:     }",
          "618:     if (!table_parsers[i].serialise(output, header)) {",
          "620:     }",
          "622:     const size_t end_offset = output->Tell();",
          "623:     if (end_offset <= out.offset) {",
          "627:     }",
          "628:     out.length = end_offset - out.offset;",
          "631:     if (!output->Pad((4 - (end_offset & 3)) % 4)) {",
          "633:     }",
          "634:     out.chksum = output->chksum();",
          "635:     out_tables.push_back(out);",
          "",
          "[Removed Lines]",
          "619:       return OTS_FAILURE();",
          "626:       return OTS_FAILURE();",
          "632:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "637:       return OTS_FAILURE_MSG_TAG(\"failed to serialize table\", table_parsers[i].tag);",
          "644:       return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "650:       return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "641:   std::sort(out_tables.begin(), out_tables.end(), OutputTable::SortByTag);",
          "642:   if (!output->Seek(table_record_offset)) {",
          "644:   }",
          "646:   output->ResetChecksum();",
          "",
          "[Removed Lines]",
          "643:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "661:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "650:         !output->WriteU32(out_tables[i].chksum) ||",
          "651:         !output->WriteU32(out_tables[i].offset) ||",
          "652:         !output->WriteU32(out_tables[i].length)) {",
          "654:     }",
          "655:     tables_chksum += out_tables[i].chksum;",
          "656:   }",
          "",
          "[Removed Lines]",
          "653:       return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "671:       return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "665:   if (!head_table_offset) {",
          "667:   }",
          "668:   if (!output->Seek(head_table_offset + 8)) {",
          "670:   }",
          "671:   if (!output->WriteU32(chksum_magic)) {",
          "673:   }",
          "675:   if (!output->Seek(end_of_file)) {",
          "677:   }",
          "679:   return true;",
          "",
          "[Removed Lines]",
          "666:     return OTS_FAILURE();  // not reached.",
          "669:     return OTS_FAILURE();",
          "672:     return OTS_FAILURE();",
          "676:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "684:     return OTS_FAILURE_MSG_HDR(\"internal error!\");",
          "687:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "690:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "694:     return OTS_FAILURE_MSG_HDR(\"error writing output\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "700:   g_enable_woff2 = true;",
          "701: }",
          "704:   OpenTypeFile header;",
          "705:   if (length < 4) {",
          "707:   }",
          "709:   bool result;",
          "",
          "[Removed Lines]",
          "703: bool Process(OTSStream *output, const uint8_t *data, size_t length) {",
          "706:     return OTS_FAILURE();",
          "",
          "[Added Lines]",
          "721: bool Process(OTSStream *output, const uint8_t *data, size_t length,",
          "722:              MessageFunc message_func, void *user_data) {",
          "725:   header.message_func = message_func;",
          "726:   header.user_data = user_data;",
          "729:     return OTS_FAILURE_MSG_(&header, \"file less than 4 bytes\");",
          "",
          "---------------"
        ],
        "src/ots.h||src/ots.h": [
          "File: src/ots.h -> src/ots.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #endif",
          "45: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #define OTS_FAILURE_MSG_(otf_,msg_) \\",
          "55:   ((otf_)->message_func && \\",
          "56:     (*(otf_)->message_func)((otf_)->user_data, \"%s\", msg_) && \\",
          "57:     false)",
          "60: #define OTS_FAILURE_MSG_TAG_(otf_,msg_,tag_) \\",
          "61:   ((otf_)->message_func && \\",
          "62:     (*(otf_)->message_func)((otf_)->user_data, \"table '%4.4s': %s\", tag_, msg_) && \\",
          "63:     false)",
          "68: #define OTS_FAILURE_MSG(msg_) OTS_FAILURE_MSG_TAG_(file, msg_, TABLE_NAME)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   uint16_t entry_selector;",
          "227:   uint16_t range_shift;",
          "229: #define F(name, capname) OpenType##capname *name;",
          "230: FOR_EACH_TABLE_TYPE",
          "231: #undef F",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   MessageFunc message_func;",
          "253:   void        *user_data;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6ec615c8fbad28865cd3a78be45ba8030e17002",
      "candidate_info": {
        "commit_hash": "b6ec615c8fbad28865cd3a78be45ba8030e17002",
        "repo": "khaledhosny/ots",
        "commit_url": "https://github.com/khaledhosny/ots/commit/b6ec615c8fbad28865cd3a78be45ba8030e17002",
        "files": [
          "ots-common.gypi",
          "src/layout.cc",
          "src/layout.h",
          "src/math.cc",
          "src/math_.h",
          "src/ots.cc",
          "src/ots.h"
        ],
        "message": "Add support for the MATH table.\n\nPatch from Fr\u00e9d\u00e9ric Wang <fred.wang@free.fr>\nBUG=334318\nR=ksakamoto@chromium.org\nReview URL:https://codereview.chromium.org/139563002/\n\nFixes #3\n\nConflicts:\n\tsrc/layout.cc\n\tsrc/layout.h",
        "before_after_code_files": [
          "ots-common.gypi||ots-common.gypi",
          "src/layout.cc||src/layout.cc",
          "src/layout.h||src/layout.h",
          "src/math.cc||src/math.cc",
          "src/math_.h||src/math_.h",
          "src/ots.cc||src/ots.cc",
          "src/ots.h||src/ots.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/math.cc||src/math.cc"
          ],
          "candidate": [
            "src/math.cc||src/math.cc"
          ]
        }
      },
      "candidate_diff": {
        "ots-common.gypi||ots-common.gypi": [
          "File: ots-common.gypi -> ots-common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:       'src/ltsh.h',",
          "48:       'src/maxp.cc',",
          "49:       'src/maxp.h',",
          "50:       'src/metrics.cc',",
          "51:       'src/metrics.h',",
          "52:       'src/name.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:       'src/math.cc',",
          "51:       'src/math_.h',",
          "",
          "---------------"
        ],
        "src/layout.cc||src/layout.cc": [
          "File: src/layout.cc -> src/layout.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: bool ParseCoverageFormat1(const ots::OpenTypeFile *file,",
          "340:                           const uint8_t *data, size_t length,",
          "342:   ots::Buffer subtable(data, length);",
          "",
          "[Removed Lines]",
          "341:                           const uint16_t num_glyphs) {",
          "",
          "[Added Lines]",
          "341:                           const uint16_t num_glyphs,",
          "342:                           const uint16_t expected_num_glyphs) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:     }",
          "364:   }",
          "366:   return true;",
          "367: }",
          "369: bool ParseCoverageFormat2(const ots::OpenTypeFile *file,",
          "370:                           const uint8_t *data, size_t length,",
          "372:   ots::Buffer subtable(data, length);",
          "",
          "[Removed Lines]",
          "371:                           const uint16_t num_glyphs) {",
          "",
          "[Added Lines]",
          "367:   if (expected_num_glyphs && expected_num_glyphs != glyph_count) {",
          "368:       return OTS_FAILURE_MSG(\"unexpected number of glyphs: %u\", glyph_count);",
          "369:   }",
          "376:                           const uint16_t num_glyphs,",
          "377:                           const uint16_t expected_num_glyphs) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:     last_start_coverage_index += end - start + 1;",
          "410:   }",
          "412:   return true;",
          "413: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   if (expected_num_glyphs &&",
          "419:       expected_num_glyphs != last_start_coverage_index) {",
          "420:       return OTS_FAILURE_MSG(\"unexpected number of glyphs: %u\", last_start_coverage_index);",
          "421:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1353: bool ParseCoverageTable(const ots::OpenTypeFile *file,",
          "1354:                         const uint8_t *data, size_t length,",
          "1356:   Buffer subtable(data, length);",
          "1358:   uint16_t format = 0;",
          "",
          "[Removed Lines]",
          "1355:                         const uint16_t num_glyphs) {",
          "",
          "[Added Lines]",
          "1366:                         const uint16_t num_glyphs,",
          "1367:                         const uint16_t expected_num_glyphs) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1360:     return OTS_FAILURE_MSG(\"Failed to read coverage table format\");",
          "1361:   }",
          "1362:   if (format == 1) {",
          "1364:   } else if (format == 2) {",
          "1366:   }",
          "1368:   return OTS_FAILURE_MSG(\"Bad coverage table format %d\", format);",
          "",
          "[Removed Lines]",
          "1363:     return ParseCoverageFormat1(file, data, length, num_glyphs);",
          "1365:     return ParseCoverageFormat2(file, data, length, num_glyphs);",
          "",
          "[Added Lines]",
          "1375:     return ParseCoverageFormat1(file, data, length, num_glyphs, expected_num_glyphs);",
          "1377:     return ParseCoverageFormat2(file, data, length, num_glyphs, expected_num_glyphs);",
          "",
          "---------------"
        ],
        "src/layout.h||src/layout.h": [
          "File: src/layout.h -> src/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: bool ParseCoverageTable(const ots::OpenTypeFile *file,",
          "50:                         const uint8_t *data, size_t length,",
          "53: bool ParseDeviceTable(const ots::OpenTypeFile *file,",
          "54:                       const uint8_t *data, size_t length);",
          "",
          "[Removed Lines]",
          "51:                         const uint16_t num_glyphs);",
          "",
          "[Added Lines]",
          "51:                         const uint16_t num_glyphs,",
          "52:                         const uint16_t expected_num_glyphs = 0);",
          "",
          "---------------"
        ],
        "src/math.cc||src/math.cc": [
          "File: src/math.cc -> src/math.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"math_.h\"",
          "8: #include <limits>",
          "9: #include <vector>",
          "11: #include \"layout.h\"",
          "12: #include \"maxp.h\"",
          "20: #define TABLE_NAME \"MATH\"",
          "22: namespace {",
          "29: const unsigned kMathHeaderSize = 4 + 3 * 2;",
          "36: const unsigned kMathGlyphInfoHeaderSize = 4 * 2;",
          "41: const unsigned kMathValueRecordSize = 2 * 2;",
          "49: const unsigned kGlyphPartRecordSize = 5 * 2;",
          "53: bool ParseMathValueRecord(const ots::OpenTypeFile *file,",
          "54:                           ots::Buffer* subtable, const uint8_t *data,",
          "55:                           const size_t length) {",
          "57:   if (!subtable->Skip(2)) {",
          "58:     return OTS_FAILURE();",
          "59:   }",
          "62:   uint16_t offset = 0;",
          "63:   if (!subtable->ReadU16(&offset)) {",
          "64:     return OTS_FAILURE();",
          "65:   }",
          "66:   if (offset) {",
          "67:     if (offset >= length) {",
          "68:       return OTS_FAILURE();",
          "69:     }",
          "70:     if (!ots::ParseDeviceTable(file, data + offset, length - offset)) {",
          "71:       return OTS_FAILURE();",
          "72:     }",
          "73:   }",
          "75:   return true;",
          "76: }",
          "78: bool ParseMathConstantsTable(const ots::OpenTypeFile *file,",
          "79:                              const uint8_t *data, size_t length) {",
          "80:   ots::Buffer subtable(data, length);",
          "87:   if (!subtable.Skip(4 * 2)) {",
          "88:     return OTS_FAILURE();",
          "89:   }",
          "148:   for (unsigned i = 0; i < static_cast<unsigned>(51); ++i) {",
          "149:     if (!ParseMathValueRecord(file, &subtable, data, length)) {",
          "150:       return OTS_FAILURE();",
          "151:     }",
          "152:   }",
          "156:   if (!subtable.Skip(2)) {",
          "157:     return OTS_FAILURE();",
          "158:   }",
          "160:   return true;",
          "161: }",
          "163: bool ParseMathValueRecordSequenceForGlyphs(const ots::OpenTypeFile *file,",
          "164:                                            ots::Buffer* subtable,",
          "165:                                            const uint8_t *data,",
          "166:                                            const size_t length,",
          "167:                                            const uint16_t num_glyphs) {",
          "169:   uint16_t offset_coverage = 0;",
          "170:   uint16_t sequence_count = 0;",
          "171:   if (!subtable->ReadU16(&offset_coverage) ||",
          "172:       !subtable->ReadU16(&sequence_count)) {",
          "173:     return OTS_FAILURE();",
          "174:   }",
          "176:   const unsigned sequence_end = static_cast<unsigned>(2 * 2) +",
          "177:       sequence_count * kMathValueRecordSize;",
          "178:   if (sequence_end > std::numeric_limits<uint16_t>::max()) {",
          "179:     return OTS_FAILURE();",
          "180:   }",
          "183:   if (offset_coverage < sequence_end || offset_coverage >= length) {",
          "184:     return OTS_FAILURE();",
          "185:   }",
          "186:   if (!ots::ParseCoverageTable(file, data + offset_coverage,",
          "187:                                length - offset_coverage,",
          "188:                                num_glyphs, sequence_count)) {",
          "189:     return OTS_FAILURE();",
          "190:   }",
          "193:   for (unsigned i = 0; i < sequence_count; ++i) {",
          "194:     if (!ParseMathValueRecord(file, subtable, data, length)) {",
          "195:       return OTS_FAILURE();",
          "196:     }",
          "197:   }",
          "199:   return true;",
          "200: }",
          "202: bool ParseMathItalicsCorrectionInfoTable(const ots::OpenTypeFile *file,",
          "203:                                          const uint8_t *data,",
          "204:                                          size_t length,",
          "205:                                          const uint16_t num_glyphs) {",
          "206:   ots::Buffer subtable(data, length);",
          "207:   return ParseMathValueRecordSequenceForGlyphs(file, &subtable, data, length,",
          "208:                                                num_glyphs);",
          "209: }",
          "211: bool ParseMathTopAccentAttachmentTable(const ots::OpenTypeFile *file,",
          "212:                                        const uint8_t *data,",
          "213:                                        size_t length,",
          "214:                                        const uint16_t num_glyphs) {",
          "215:   ots::Buffer subtable(data, length);",
          "216:   return ParseMathValueRecordSequenceForGlyphs(file, &subtable, data, length,",
          "217:                                                num_glyphs);",
          "218: }",
          "220: bool ParseMathKernTable(const ots::OpenTypeFile *file,",
          "221:                         const uint8_t *data, size_t length) {",
          "222:   ots::Buffer subtable(data, length);",
          "225:   uint16_t height_count = 0;",
          "226:   if (!subtable.ReadU16(&height_count)) {",
          "227:     return OTS_FAILURE();",
          "228:   }",
          "231:   for (unsigned i = 0; i < height_count; ++i) {",
          "232:     if (!ParseMathValueRecord(file, &subtable, data, length)) {",
          "233:       return OTS_FAILURE();",
          "234:     }",
          "235:   }",
          "238:   for (unsigned i = 0; i <= height_count; ++i) {",
          "239:     if (!ParseMathValueRecord(file, &subtable, data, length)) {",
          "240:       return OTS_FAILURE();",
          "241:     }",
          "242:   }",
          "244:   return true;",
          "245: }",
          "247: bool ParseMathKernInfoTable(const ots::OpenTypeFile *file,",
          "248:                             const uint8_t *data, size_t length,",
          "249:                             const uint16_t num_glyphs) {",
          "250:   ots::Buffer subtable(data, length);",
          "253:   uint16_t offset_coverage = 0;",
          "254:   uint16_t sequence_count = 0;",
          "255:   if (!subtable.ReadU16(&offset_coverage) ||",
          "256:       !subtable.ReadU16(&sequence_count)) {",
          "257:     return OTS_FAILURE();",
          "258:   }",
          "260:   const unsigned sequence_end = static_cast<unsigned>(2 * 2) +",
          "261:     sequence_count * 4 * 2;",
          "262:   if (sequence_end > std::numeric_limits<uint16_t>::max()) {",
          "263:     return OTS_FAILURE();",
          "264:   }",
          "267:   if (offset_coverage < sequence_end || offset_coverage >= length) {",
          "268:     return OTS_FAILURE();",
          "269:   }",
          "270:   if (!ots::ParseCoverageTable(file, data + offset_coverage, length - offset_coverage,",
          "271:                                num_glyphs, sequence_count)) {",
          "272:     return OTS_FAILURE();",
          "273:   }",
          "276:   for (unsigned i = 0; i < sequence_count; ++i) {",
          "278:     for (unsigned j = 0; j < 4; ++j) {",
          "279:       uint16_t offset_math_kern = 0;",
          "280:       if (!subtable.ReadU16(&offset_math_kern)) {",
          "281:         return OTS_FAILURE();",
          "282:       }",
          "283:       if (offset_math_kern) {",
          "284:         if (offset_math_kern < sequence_end || offset_math_kern >= length ||",
          "285:             !ParseMathKernTable(file, data + offset_math_kern,",
          "286:                                 length - offset_math_kern)) {",
          "287:           return OTS_FAILURE();",
          "288:         }",
          "289:       }",
          "290:     }",
          "291:   }",
          "293:   return true;",
          "294: }",
          "296: bool ParseMathGlyphInfoTable(const ots::OpenTypeFile *file,",
          "297:                              const uint8_t *data, size_t length,",
          "298:                              const uint16_t num_glyphs) {",
          "299:   ots::Buffer subtable(data, length);",
          "302:   uint16_t offset_math_italics_correction_info = 0;",
          "303:   uint16_t offset_math_top_accent_attachment = 0;",
          "304:   uint16_t offset_extended_shaped_coverage = 0;",
          "305:   uint16_t offset_math_kern_info = 0;",
          "306:   if (!subtable.ReadU16(&offset_math_italics_correction_info) ||",
          "307:       !subtable.ReadU16(&offset_math_top_accent_attachment) ||",
          "308:       !subtable.ReadU16(&offset_extended_shaped_coverage) ||",
          "309:       !subtable.ReadU16(&offset_math_kern_info)) {",
          "310:     return OTS_FAILURE();",
          "311:   }",
          "317:   if (offset_math_italics_correction_info) {",
          "318:     if (offset_math_italics_correction_info >= length ||",
          "319:         offset_math_italics_correction_info < kMathGlyphInfoHeaderSize ||",
          "320:         !ParseMathItalicsCorrectionInfoTable(",
          "321:             file, data + offset_math_italics_correction_info,",
          "322:             length - offset_math_italics_correction_info,",
          "323:             num_glyphs)) {",
          "324:       return OTS_FAILURE();",
          "325:     }",
          "326:   }",
          "327:   if (offset_math_top_accent_attachment) {",
          "328:     if (offset_math_top_accent_attachment >= length ||",
          "329:         offset_math_top_accent_attachment < kMathGlyphInfoHeaderSize ||",
          "330:         !ParseMathTopAccentAttachmentTable(file, data +",
          "331:                                            offset_math_top_accent_attachment,",
          "332:                                            length -",
          "333:                                            offset_math_top_accent_attachment,",
          "334:                                            num_glyphs)) {",
          "335:       return OTS_FAILURE();",
          "336:     }",
          "337:   }",
          "338:   if (offset_extended_shaped_coverage) {",
          "339:     if (offset_extended_shaped_coverage >= length ||",
          "340:         offset_extended_shaped_coverage < kMathGlyphInfoHeaderSize ||",
          "341:         !ots::ParseCoverageTable(file, data + offset_extended_shaped_coverage,",
          "342:                                  length - offset_extended_shaped_coverage,",
          "343:                                  num_glyphs)) {",
          "344:       return OTS_FAILURE();",
          "345:     }",
          "346:   }",
          "347:   if (offset_math_kern_info) {",
          "348:     if (offset_math_kern_info >= length ||",
          "349:         offset_math_kern_info < kMathGlyphInfoHeaderSize ||",
          "350:         !ParseMathKernInfoTable(file, data + offset_math_kern_info,",
          "351:                                 length - offset_math_kern_info, num_glyphs)) {",
          "352:       return OTS_FAILURE();",
          "353:     }",
          "354:   }",
          "356:   return true;",
          "357: }",
          "359: bool ParseGlyphAssemblyTable(const ots::OpenTypeFile *file,",
          "360:                              const uint8_t *data,",
          "361:                              size_t length, const uint16_t num_glyphs) {",
          "362:   ots::Buffer subtable(data, length);",
          "365:   uint16_t part_count = 0;",
          "366:   if (!ParseMathValueRecord(file, &subtable, data, length) ||",
          "367:       !subtable.ReadU16(&part_count)) {",
          "368:     return OTS_FAILURE();",
          "369:   }",
          "371:   const unsigned sequence_end = kMathValueRecordSize +",
          "372:     static_cast<unsigned>(2) + part_count * kGlyphPartRecordSize;",
          "373:   if (sequence_end > std::numeric_limits<uint16_t>::max()) {",
          "374:     return OTS_FAILURE();",
          "375:   }",
          "378:   for (unsigned i = 0; i < part_count; ++i) {",
          "379:     uint16_t glyph = 0;",
          "380:     uint16_t part_flags = 0;",
          "381:     if (!subtable.ReadU16(&glyph) ||",
          "382:         !subtable.Skip(2 * 3) ||",
          "383:         !subtable.ReadU16(&part_flags)) {",
          "384:       return OTS_FAILURE();",
          "385:     }",
          "386:     if (glyph >= num_glyphs) {",
          "387:       OTS_WARNING(\"bad glyph ID: %u\", glyph);",
          "388:       return OTS_FAILURE();",
          "389:     }",
          "390:     if (part_flags & ~0x00000001) {",
          "391:       OTS_WARNING(\"unknown part flag: %u\", part_flags);",
          "392:       return OTS_FAILURE();",
          "393:     }",
          "394:   }",
          "396:   return true;",
          "397: }",
          "399: bool ParseMathGlyphConstructionTable(const ots::OpenTypeFile *file,",
          "400:                                      const uint8_t *data,",
          "401:                                      size_t length, const uint16_t num_glyphs) {",
          "402:   ots::Buffer subtable(data, length);",
          "405:   uint16_t offset_glyph_assembly = 0;",
          "406:   uint16_t variant_count = 0;",
          "407:   if (!subtable.ReadU16(&offset_glyph_assembly) ||",
          "408:       !subtable.ReadU16(&variant_count)) {",
          "409:     return OTS_FAILURE();",
          "410:   }",
          "412:   const unsigned sequence_end = static_cast<unsigned>(2 * 2) +",
          "413:     variant_count * 2 * 2;",
          "414:   if (sequence_end > std::numeric_limits<uint16_t>::max()) {",
          "415:     return OTS_FAILURE();",
          "416:   }",
          "419:   if (offset_glyph_assembly) {",
          "420:     if (offset_glyph_assembly >= length ||",
          "421:         offset_glyph_assembly < sequence_end) {",
          "422:       return OTS_FAILURE();",
          "423:     }",
          "424:     if (!ParseGlyphAssemblyTable(file, data + offset_glyph_assembly,",
          "425:                                  length - offset_glyph_assembly, num_glyphs)) {",
          "426:       return OTS_FAILURE();",
          "427:     }",
          "428:   }",
          "431:   for (unsigned i = 0; i < variant_count; ++i) {",
          "432:     uint16_t glyph = 0;",
          "433:     if (!subtable.ReadU16(&glyph) ||",
          "434:         !subtable.Skip(2)) {",
          "435:       return OTS_FAILURE();",
          "436:     }",
          "437:     if (glyph >= num_glyphs) {",
          "438:       OTS_WARNING(\"bad glyph ID: %u\", glyph);",
          "439:       return OTS_FAILURE();",
          "440:     }",
          "441:   }",
          "443:   return true;",
          "444: }",
          "446: bool ParseMathGlyphConstructionSequence(const ots::OpenTypeFile *file,",
          "447:                                         ots::Buffer* subtable,",
          "448:                                         const uint8_t *data,",
          "449:                                         size_t length,",
          "450:                                         const uint16_t num_glyphs,",
          "451:                                         uint16_t offset_coverage,",
          "452:                                         uint16_t glyph_count,",
          "453:                                         const unsigned sequence_end) {",
          "455:   if (offset_coverage < sequence_end || offset_coverage >= length) {",
          "456:     return OTS_FAILURE();",
          "457:   }",
          "458:   if (!ots::ParseCoverageTable(file, data + offset_coverage,",
          "459:                                length - offset_coverage,",
          "460:                                num_glyphs, glyph_count)) {",
          "461:     return OTS_FAILURE();",
          "462:   }",
          "465:   for (unsigned i = 0; i < glyph_count; ++i) {",
          "466:       uint16_t offset_glyph_construction = 0;",
          "467:       if (!subtable->ReadU16(&offset_glyph_construction)) {",
          "468:         return OTS_FAILURE();",
          "469:       }",
          "470:       if (offset_glyph_construction < sequence_end ||",
          "471:           offset_glyph_construction >= length ||",
          "472:           !ParseMathGlyphConstructionTable(file, data + offset_glyph_construction,",
          "473:                                            length - offset_glyph_construction,",
          "474:                                            num_glyphs)) {",
          "475:         return OTS_FAILURE();",
          "476:       }",
          "477:   }",
          "479:   return true;",
          "480: }",
          "482: bool ParseMathVariantsTable(const ots::OpenTypeFile *file,",
          "483:                             const uint8_t *data,",
          "484:                             size_t length, const uint16_t num_glyphs) {",
          "485:   ots::Buffer subtable(data, length);",
          "488:   uint16_t offset_vert_glyph_coverage = 0;",
          "489:   uint16_t offset_horiz_glyph_coverage = 0;",
          "490:   uint16_t vert_glyph_count = 0;",
          "491:   uint16_t horiz_glyph_count = 0;",
          "492:   if (!subtable.Skip(2) ||  // MinConnectorOverlap",
          "493:       !subtable.ReadU16(&offset_vert_glyph_coverage) ||",
          "494:       !subtable.ReadU16(&offset_horiz_glyph_coverage) ||",
          "495:       !subtable.ReadU16(&vert_glyph_count) ||",
          "496:       !subtable.ReadU16(&horiz_glyph_count)) {",
          "497:     return OTS_FAILURE();",
          "498:   }",
          "500:   const unsigned sequence_end = 5 * 2 + vert_glyph_count * 2 +",
          "501:     horiz_glyph_count * 2;",
          "502:   if (sequence_end > std::numeric_limits<uint16_t>::max()) {",
          "503:     return OTS_FAILURE();",
          "504:   }",
          "506:   if (!ParseMathGlyphConstructionSequence(file, &subtable, data, length, num_glyphs,",
          "507:                                           offset_vert_glyph_coverage,",
          "508:                                           vert_glyph_count,",
          "509:                                           sequence_end) ||",
          "510:       !ParseMathGlyphConstructionSequence(file, &subtable, data, length, num_glyphs,",
          "511:                                           offset_horiz_glyph_coverage,",
          "512:                                           horiz_glyph_count,",
          "513:                                           sequence_end)) {",
          "514:     return OTS_FAILURE();",
          "515:   }",
          "517:   return true;",
          "518: }",
          "520: }  // namespace",
          "522: #define DROP_THIS_TABLE \\",
          "523:   do { file->math->data = 0; file->math->length = 0; } while (0)",
          "525: namespace ots {",
          "527: bool ots_math_parse(OpenTypeFile *file, const uint8_t *data, size_t length) {",
          "530:   if (!file->maxp) {",
          "531:     return OTS_FAILURE();",
          "532:   }",
          "533:   const uint16_t num_glyphs = file->maxp->num_glyphs;",
          "535:   Buffer table(data, length);",
          "537:   OpenTypeMATH* math = new OpenTypeMATH;",
          "538:   file->math = math;",
          "540:   uint32_t version = 0;",
          "541:   if (!table.ReadU32(&version)) {",
          "542:     return OTS_FAILURE();",
          "543:   }",
          "544:   if (version != 0x00010000) {",
          "545:     OTS_WARNING(\"bad MATH version\");",
          "546:     DROP_THIS_TABLE;",
          "547:     return true;",
          "548:   }",
          "550:   uint16_t offset_math_constants = 0;",
          "551:   uint16_t offset_math_glyph_info = 0;",
          "552:   uint16_t offset_math_variants = 0;",
          "553:   if (!table.ReadU16(&offset_math_constants) ||",
          "554:       !table.ReadU16(&offset_math_glyph_info) ||",
          "555:       !table.ReadU16(&offset_math_variants)) {",
          "556:     return OTS_FAILURE();",
          "557:   }",
          "559:   if (offset_math_constants >= length ||",
          "560:       offset_math_constants < kMathHeaderSize ||",
          "561:       offset_math_glyph_info >= length ||",
          "562:       offset_math_glyph_info < kMathHeaderSize ||",
          "563:       offset_math_variants >= length ||",
          "564:       offset_math_variants < kMathHeaderSize) {",
          "565:     OTS_WARNING(\"bad offset in MATH header\");",
          "566:     DROP_THIS_TABLE;",
          "567:     return true;",
          "568:   }",
          "570:   if (!ParseMathConstantsTable(file, data + offset_math_constants,",
          "571:                                length - offset_math_constants)) {",
          "572:     DROP_THIS_TABLE;",
          "573:     return true;",
          "574:   }",
          "575:   if (!ParseMathGlyphInfoTable(file, data + offset_math_glyph_info,",
          "576:                                length - offset_math_glyph_info, num_glyphs)) {",
          "577:     DROP_THIS_TABLE;",
          "578:     return true;",
          "579:   }",
          "580:   if (!ParseMathVariantsTable(file, data + offset_math_variants,",
          "581:                               length - offset_math_variants, num_glyphs)) {",
          "582:     DROP_THIS_TABLE;",
          "583:     return true;",
          "584:   }",
          "586:   math->data = data;",
          "587:   math->length = length;",
          "588:   return true;",
          "589: }",
          "591: bool ots_math_should_serialise(OpenTypeFile *file) {",
          "592:   return file->math != NULL && file->math->data != NULL;",
          "593: }",
          "595: bool ots_math_serialise(OTSStream *out, OpenTypeFile *file) {",
          "596:   if (!out->Write(file->math->data, file->math->length)) {",
          "597:     return OTS_FAILURE();",
          "598:   }",
          "600:   return true;",
          "601: }",
          "603: void ots_math_free(OpenTypeFile *file) {",
          "604:   delete file->math;",
          "605: }",
          "607: }  // namespace ots",
          "",
          "---------------"
        ],
        "src/math_.h||src/math_.h": [
          "File: src/math_.h -> src/math_.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifndef OTS_MATH_H_",
          "6: #define OTS_MATH_H_",
          "8: #include \"ots.h\"",
          "10: namespace ots {",
          "12: struct OpenTypeMATH {",
          "13:   OpenTypeMATH()",
          "14:       : data(NULL),",
          "15:         length(0) {",
          "16:   }",
          "18:   const uint8_t *data;",
          "19:   size_t length;",
          "20: };",
          "22: }  // namespace ots",
          "24: #endif",
          "",
          "---------------"
        ],
        "src/ots.cc||src/ots.cc": [
          "File: src/ots.cc -> src/ots.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     ots::ots_glat_should_serialise, ots::ots_glat_free, false },",
          "159:   { \"Feat\", ots::ots_feat_parse, ots::ots_feat_serialise,",
          "160:     ots::ots_feat_should_serialise, ots::ots_feat_free, false },",
          "162:   { 0, NULL, NULL, NULL, NULL, false },",
          "163: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   { \"MATH\", ots::ots_math_parse, ots::ots_math_serialise,",
          "162:     ots::ots_math_should_serialise, ots::ots_math_free, false },",
          "",
          "---------------"
        ],
        "src/ots.h||src/ots.h": [
          "File: src/ots.h -> src/ots.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   F(kern, KERN) \\",
          "223:   F(loca, LOCA) \\",
          "224:   F(ltsh, LTSH) \\",
          "225:   F(maxp, MAXP) \\",
          "226:   F(name, NAME) \\",
          "227:   F(os2, OS2) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:   F(math, MATH) \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}