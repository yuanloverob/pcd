{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05921223c25ae385a5e17bbf5484f5885bb78f2c",
      "candidate_info": {
        "commit_hash": "05921223c25ae385a5e17bbf5484f5885bb78f2c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05921223c25ae385a5e17bbf5484f5885bb78f2c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbeaux.c"
        ],
        "message": "Smaller and faster sqlite3IsNaN() implementation makes deserialization of floating point values much faster.\n\nFossilOrigin-Name: ea748edecb261f2b862d542daff6e99a6fd8879a8ace94b440d99e110577d1c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1d8a3f65490eef2216f360d708b1746cbaa6dadce42c0950dc8e09b9ab28ee2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3802: #endif",
          "3804: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "3805:   int sqlite3IsNaN(double);",
          "3806: #else",
          "3807: # define sqlite3IsNaN(X)  0",
          "3808: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3805: # define EXP754 (((u64)0x7ff)<<52)",
          "3806: # define MAN754 ((((u64)1)<<52)-1)",
          "3807: # define IsNaN(X) (((X)&EXP754)==EXP754 && ((X)&MAN754)!=0)",
          "3810: # define IsNaN(X)         0",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "65: int sqlite3IsNaN(double x){",
          "102: }",
          "",
          "[Removed Lines]",
          "67: #if !SQLITE_HAVE_ISNAN && !HAVE_ISNAN",
          "91: #ifdef __FAST_MATH__",
          "92: # error SQLite will not work correctly with the -ffast-math option of GCC.",
          "93: #endif",
          "94:   volatile double y = x;",
          "95:   volatile double z = y;",
          "96:   rc = (y!=z);",
          "98:   rc = isnan(x);",
          "100:   testcase( rc );",
          "101:   return rc;",
          "",
          "[Added Lines]",
          "63:   u64 y;",
          "64:   memcpy(&y,&x,sizeof(y));",
          "65:   return IsNaN(y);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3655: static u32 SQLITE_NOINLINE serialGet(",
          "",
          "[Added Lines]",
          "3655: static u32 serialGet(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3684:     assert( sizeof(x)==8 && sizeof(pMem->u.r)==8 );",
          "3685:     swapMixedEndianFloat(x);",
          "3686:     memcpy(&pMem->u.r, &x, sizeof(x));",
          "3688:   }",
          "3689:   return 8;",
          "3690: }",
          "",
          "[Removed Lines]",
          "3687:     pMem->flags = sqlite3IsNaN(pMem->u.r) ? MEM_Null : MEM_Real;",
          "",
          "[Added Lines]",
          "3687:     pMem->flags = IsNaN(x) ? MEM_Null : MEM_Real;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
      "candidate_info": {
        "commit_hash": "9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9942ef0d95c5a34bec24b669f454fc157bbf8eee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "STORED columns can now reference other STORED columns, in any order, as long as there are not loops.\n\nFossilOrigin-Name: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:       }",
          "3578:       if( iTab<0 ){",
          "3579:         if( pParse->iSelfTab<0 ){",
          "3582:           assert( pExpr->iColumn>=XN_ROWID );",
          "3583:           assert( pExpr->iColumn<pExpr->y.pTab->nCol );",
          "3589:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3590:             return target;",
          "3591:           }else{",
          "3593:           }",
          "3594:         }else{",
          "",
          "[Removed Lines]",
          "3581:           assert( pExpr->y.pTab!=0 );",
          "3584:           if( pExpr->iColumn>=0",
          "3585:             && pExpr->y.pTab->aCol[pExpr->iColumn].affinity==SQLITE_AFF_REAL",
          "3586:           ){",
          "3587:             sqlite3VdbeAddOp2(v, OP_SCopy, pExpr->iColumn - pParse->iSelfTab,",
          "3588:                               target);",
          "3592:             return pExpr->iColumn - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3586:           Column *pCol;",
          "3587:           Table *pTab = pExpr->y.pTab;",
          "3588:           int iSrc;",
          "3589:           assert( pTab!=0 );",
          "3592:           if( pExpr->iColumn<0 ){",
          "3593:             return -1-pParse->iSelfTab;",
          "3594:           }",
          "3595:           pCol = pTab->aCol + pExpr->iColumn;",
          "3596:           iSrc = sqlite3ColumnOfTable(pTab, pExpr->iColumn) - pParse->iSelfTab;",
          "3597: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3598:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3599:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3600:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3601:                               pCol->zName);",
          "3602:               return 0;",
          "3603:             }",
          "3604:             pCol->colFlags |= COLFLAG_BUSY;",
          "3605:             if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "3606:               target = sqlite3ExprCodeTarget(pParse, pCol->pDflt, target);",
          "3607:             }else{",
          "3608:               target = iSrc;",
          "3609:               if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3610:                 sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "3611:               }",
          "3612:             }",
          "3613:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3614:             return target;",
          "3615:           }else",
          "3617:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3618:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "3622:             return iSrc;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "218:   pParse->iSelfTab = -iRegStore;",
          "219:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "220:     u32 colFlags = pTab->aCol[i].colFlags;",
          "221:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "223:       iRegStore--;",
          "226:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "227:     }",
          "228:   }",
          "229:   pParse->iSelfTab = 0;",
          "",
          "[Removed Lines]",
          "224:     }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "",
          "[Added Lines]",
          "222:   for(i=0; i<pTab->nCol; i++){",
          "223:     if( pTab->aCol[i].colFlags & COLFLAG_STORED ){",
          "224:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "225:     }",
          "226:   }",
          "238:     }else if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "241:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
      "candidate_info": {
        "commit_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a typo in the wapptest.tcl script.\n\nFossilOrigin-Name: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
      "candidate_info": {
        "commit_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Extra comments on fields of the Window object.\n\nFossilOrigin-Name: 3dbed162518a73213bbfb137c763064518fdc2daeae3952cfab39ce0e6813d3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3604:   int regAccum;",
          "3605:   int regResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3613:   int regStartRowid;",
          "3614:   int regEndRowid;",
          "3616: };",
          "3618: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;           /* Defer evaluation of window function arguments",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
      "candidate_info": {
        "commit_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/select3.test"
        ],
        "message": "Disable the optimization where a REAL value with no fractional part is stored as an INTEGER when the integer uses as much space as the real value it proposes to stand in for (8 bytes).  This avoids corner cases of comparing integers against real values that are beyond the resolution of an IEEE 754 double.  Fix for ticket [6c1d3febc00b22d457c78c2]\n\nFossilOrigin-Name: 9b0915272f4d4052aa31e9297424a7db9a0234b676e8e2a44c3f2dc54236705a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/select3.test||test/select3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 20f06bf2e659212a68dcf138e444da7bd4220548ec15a97cfd7eb82e028b3630",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3458:     if( u<=2147483647 ){ *pLen = 4; return 4; }",
          "3459:     if( u<=MAX_6BYTE ){ *pLen = 6; return 5; }",
          "3461:     return 6;",
          "3462:   }",
          "3463:   if( flags&MEM_Real ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3463:     if( flags&MEM_IntReal ){",
          "3467:       pMem->u.r = (double)pMem->u.i;",
          "3468:       pMem->flags &= ~MEM_IntReal;",
          "3469:       pMem->flags |= MEM_Real;",
          "3470:       return 7;",
          "3471:     }",
          "",
          "---------------"
        ],
        "test/select3.test||test/select3.test": [
          "File: test/select3.test -> test/select3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   }",
          "262: } {real}",
          "264: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: # 2019-05-09 ticket https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7",
          "265: #",
          "266: unset -nocomplain x",
          "267: foreach {id x} {",
          "268:   100 127",
          "269:   101 128",
          "270:   102 -127",
          "271:   103 -128",
          "272:   104 -129",
          "273:   110 32767",
          "274:   111 32768",
          "275:   112 -32767",
          "276:   113 -32768",
          "277:   114 -32769",
          "278:   120 2147483647",
          "279:   121 2147483648",
          "280:   122 -2147483647",
          "281:   123 -2147483648",
          "282:   124 -2147483649",
          "283:   130 140737488355327",
          "284:   131 140737488355328",
          "285:   132 -140737488355327",
          "286:   133 -140737488355328",
          "287:   134 -140737488355329",
          "288:   140 9223372036854775807",
          "289:   141 -9223372036854775807",
          "290:   142 -9223372036854775808",
          "291:   143 9223372036854775806",
          "292:   144 9223372036854775805",
          "293:   145 -9223372036854775806",
          "294:   146 -9223372036854775805",
          "296: } {",
          "297:   set x [expr {$x+0}]",
          "298:   do_execsql_test select3-8.$id {",
          "299:      DROP TABLE IF EXISTS t1;",
          "300:      CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);",
          "301:      INSERT INTO t1(c0, c1) VALUES (0, $x), (0, 0);",
          "302:      UPDATE t1 SET c0 = NULL;",
          "303:      UPDATE OR REPLACE t1 SET c1 = 1;",
          "304:      SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL);",
          "305:      PRAGMA integrity_check;",
          "306:   } {{} 1.0 ok}",
          "307: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}