{
  "cve_id": "CVE-2015-8735",
  "cve_desc": "The get_value function in epan/dissectors/packet-btatt.c in the Bluetooth Attribute (aka BT ATT) dissector in Wireshark 2.0.x before 2.0.1 uses an incorrect integer data type, which allows remote attackers to cause a denial of service (invalid write operation and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "83bad0215dae54e77d34f8b187900125f672366e",
  "patch_info": {
    "commit_hash": "83bad0215dae54e77d34f8b187900125f672366e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/83bad0215dae54e77d34f8b187900125f672366e",
    "files": [
      "epan/dissectors/packet-btatt.c"
    ],
    "message": "btatt - make size 32-bit in get_value()\n\nBug: 11817\nChange-Id: I118ff55f9a709167976a2522114d65ec03fc68c5\nReviewed-on: https://code.wireshark.org/review/12353\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
      "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5983:     guint32           frame_number;",
      "5984:     fragment_data_t  *fragment_data;",
      "5985:     wmem_tree_t      *sub_wmemtree;",
      "5988:     gboolean          first = TRUE;",
      "5989:     guint8           *data = NULL;",
      "",
      "[Removed Lines]",
      "5986:     guint16           last_offset = 0xFFFF;",
      "5987:     guint16           size;",
      "",
      "[Added Lines]",
      "5986:     guint             last_offset = G_MAXUINT;",
      "5987:     guint             size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6110aeb1bb95564251cb5928a5e37a83513722dc",
      "candidate_info": {
        "commit_hash": "6110aeb1bb95564251cb5928a5e37a83513722dc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6110aeb1bb95564251cb5928a5e37a83513722dc",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "btatt - make size 32-bit in get_value()\n\nBug: 11817\nChange-Id: I118ff55f9a709167976a2522114d65ec03fc68c5\nReviewed-on: https://code.wireshark.org/review/12353\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 83bad0215dae54e77d34f8b187900125f672366e)\nReviewed-on: https://code.wireshark.org/review/12360",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5903:     guint32           frame_number;",
          "5904:     fragment_data_t  *fragment_data;",
          "5905:     wmem_tree_t      *sub_wmemtree;",
          "5908:     gboolean          first = TRUE;",
          "5909:     guint8           *data = NULL;",
          "",
          "[Removed Lines]",
          "5906:     guint16           last_offset = 0xFFFF;",
          "5907:     guint16           size;",
          "",
          "[Added Lines]",
          "5906:     guint             last_offset = G_MAXUINT;",
          "5907:     guint             size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f85d738c0003e98b5fff4ec1b08b246f82d4840",
      "candidate_info": {
        "commit_hash": "3f85d738c0003e98b5fff4ec1b08b246f82d4840",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3f85d738c0003e98b5fff4ec1b08b246f82d4840",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "Bluetooth: ATT: Add remaining attributes\n\nAdd 34 attributes.\nAll attributes for this day should be supported now.\nExpect 3:\n    0x2906 - Valid Range\n    0x2A2A - IEEE 11073-20601 Regulatory Certification Data List\n    0x2A4D - Report\nThe first is hard to implement now, the second needs to buy\nspecification, the last one will be implemented later - when USB HID\nimplementation will be full.\nPlease note that FLOAT/SFLOAT types are now supported right now.\n\nChange-Id: I0499e17257aa8cb831fbd0cf1524d8e59c98cac7\nReviewed-on: https://code.wireshark.org/review/10526\nPetri-Dish: Michal Labedzki <michal.labedzki@tieto.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Michal Labedzki <michal.labedzki@tieto.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501: static int hf_btatt_record_access_control_point_operand_number_of_records = -1;",
          "502: static int hf_btatt_record_access_control_point_request_opcode = -1;",
          "503: static int hf_btatt_record_access_control_point_response_code = -1;",
          "504: static int hf_request_in_frame = -1;",
          "505: static int hf_response_in_frame = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504: static int hf_btatt_value_trigger_setting_condition = -1;",
          "505: static int hf_btatt_value_trigger_setting_analog = -1;",
          "506: static int hf_btatt_value_trigger_setting_analog_one = -1;",
          "507: static int hf_btatt_value_trigger_setting_analog_two = -1;",
          "508: static int hf_btatt_digital = -1;",
          "509: static int hf_btatt_analog = -1;",
          "510: static int hf_btatt_location_name = -1;",
          "511: static int hf_btatt_uncertainty = -1;",
          "512: static int hf_btatt_uncertainty_reserved = -1;",
          "513: static int hf_btatt_uncertainty_precision = -1;",
          "514: static int hf_btatt_uncertainty_update_time = -1;",
          "515: static int hf_btatt_uncertainty_stationary = -1;",
          "516: static int hf_btatt_latitude = -1;",
          "517: static int hf_btatt_longitude = -1;",
          "518: static int hf_btatt_local_north_coordinate = -1;",
          "519: static int hf_btatt_local_east_coordinate = -1;",
          "520: static int hf_btatt_floor_number = -1;",
          "521: static int hf_btatt_altitude = -1;",
          "522: static int hf_btatt_indoor_positioning_configuration = -1;",
          "523: static int hf_btatt_indoor_positioning_configuration_reserved = -1;",
          "524: static int hf_btatt_indoor_positioning_configuration_location_name = -1;",
          "525: static int hf_btatt_indoor_positioning_configuration_floor_number = -1;",
          "526: static int hf_btatt_indoor_positioning_configuration_altitude = -1;",
          "527: static int hf_btatt_indoor_positioning_configuration_tx_power = -1;",
          "528: static int hf_btatt_indoor_positioning_configuration_coordinate_system_used_in_advertising_packets = -1;",
          "529: static int hf_btatt_indoor_positioning_configuration_coordinates = -1;",
          "530: static int hf_btatt_number_of_digitals = -1;",
          "531: static int hf_btatt_time_trigger_setting_condition = -1;",
          "532: static int hf_btatt_time_trigger_setting_value = -1;",
          "533: static int hf_btatt_time_trigger_setting_value_count = -1;",
          "534: static int hf_btatt_time_trigger_setting_value_time_interval = -1;",
          "535: static int hf_btatt_rsc_measurement_flags = -1;",
          "536: static int hf_btatt_rsc_measurement_flags_reserved = -1;",
          "537: static int hf_btatt_rsc_measurement_flags_type_of_movement = -1;",
          "538: static int hf_btatt_rsc_measurement_flags_total_distance_present = -1;",
          "539: static int hf_btatt_rsc_measurement_flags_instantaneous_stride_length_present = -1;",
          "540: static int hf_btatt_rsc_measurement_instantaneous_speed = -1;",
          "541: static int hf_btatt_rsc_measurement_instantaneous_cadence = -1;",
          "542: static int hf_btatt_rsc_measurement_instantaneous_stride_length = -1;",
          "543: static int hf_btatt_rsc_measurement_total_distance = -1;",
          "544: static int hf_btatt_sc_control_point_opcode = -1;",
          "545: static int hf_btatt_sc_control_point_cumulative_value = -1;",
          "546: static int hf_btatt_sc_control_point_request_opcode = -1;",
          "547: static int hf_btatt_sc_control_point_response_value = -1;",
          "548: static int hf_btatt_cycling_power_measurement_flags = -1;",
          "549: static int hf_btatt_cycling_power_measurement_flags_reserved = -1;",
          "550: static int hf_btatt_cycling_power_measurement_flags_offset_compensation_indicator = -1;",
          "551: static int hf_btatt_cycling_power_measurement_flags_accumulated_energy = -1;",
          "552: static int hf_btatt_cycling_power_measurement_flags_bottom_dead_spot_angle = -1;",
          "553: static int hf_btatt_cycling_power_measurement_flags_top_dead_spot_angle = -1;",
          "554: static int hf_btatt_cycling_power_measurement_flags_extreme_angles = -1;",
          "555: static int hf_btatt_cycling_power_measurement_flags_extreme_torque_magnitudes = -1;",
          "556: static int hf_btatt_cycling_power_measurement_flags_extreme_force_magnitudes = -1;",
          "557: static int hf_btatt_cycling_power_measurement_flags_crank_revolution_data = -1;",
          "558: static int hf_btatt_cycling_power_measurement_flags_wheel_revolution_data = -1;",
          "559: static int hf_btatt_cycling_power_measurement_flags_accumulated_torque_source = -1;",
          "560: static int hf_btatt_cycling_power_measurement_flags_accumulated_torque = -1;",
          "561: static int hf_btatt_cycling_power_measurement_flags_pedal_power_balance_reference = -1;",
          "562: static int hf_btatt_cycling_power_measurement_flags_pedal_power_balance = -1;",
          "563: static int hf_btatt_cycling_power_measurement_instantaneous_power = -1;",
          "564: static int hf_btatt_cycling_power_measurement_pedal_power_balance = -1;",
          "565: static int hf_btatt_cycling_power_measurement_accumulated_torque = -1;",
          "566: static int hf_btatt_cycling_power_measurement_wheel_revolution_data_cumulative_wheel_revolutions = -1;",
          "567: static int hf_btatt_cycling_power_measurement_wheel_revolution_data_last_wheel_event_time = -1;",
          "568: static int hf_btatt_cycling_power_measurement_crank_revolution_data_cumulative_crank_revolutions = -1;",
          "569: static int hf_btatt_cycling_power_measurement_crank_revolution_data_last_crank_event_time = -1;",
          "570: static int hf_btatt_cycling_power_measurement_extreme_force_magnitudes_maximum_force_magnitude = -1;",
          "571: static int hf_btatt_cycling_power_measurement_extreme_force_magnitudes_minimum_force_magnitude = -1;",
          "572: static int hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_maximum_torque_magnitude = -1;",
          "573: static int hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_minimum_torque_magnitude = -1;",
          "574: static int hf_btatt_cycling_power_measurement_extreme_angles = -1;",
          "575: static int hf_btatt_cycling_power_measurement_extreme_angles_maximum = -1;",
          "576: static int hf_btatt_cycling_power_measurement_extreme_angles_minimum = -1;",
          "577: static int hf_btatt_cycling_power_measurement_top_dead_spot_angle = -1;",
          "578: static int hf_btatt_cycling_power_measurement_bottom_dead_spot_angle = -1;",
          "579: static int hf_btatt_cycling_power_measurement_accumulated_energy = -1;",
          "580: static int hf_btatt_csc_measurement_flags = -1;",
          "581: static int hf_btatt_csc_measurement_flags_reserved = -1;",
          "582: static int hf_btatt_csc_measurement_flags_crank_revolution_data = -1;",
          "583: static int hf_btatt_csc_measurement_flags_wheel_revolution_data = -1;",
          "584: static int hf_btatt_csc_measurement_cumulative_wheel_revolutions = -1;",
          "585: static int hf_btatt_csc_measurement_cumulative_crank_revolutions = -1;",
          "586: static int hf_btatt_csc_measurement_last_event_time = -1;",
          "587: static int hf_btatt_cycling_power_vector_flags = -1;",
          "588: static int hf_btatt_cycling_power_vector_flags_reserved = -1;",
          "589: static int hf_btatt_cycling_power_vector_flags_instantaneous_measurement_direction = -1;",
          "590: static int hf_btatt_cycling_power_vector_flags_instantaneous_torque_magnitude_array = -1;",
          "591: static int hf_btatt_cycling_power_vector_flags_instantaneous_force_magnitude_array = -1;",
          "592: static int hf_btatt_cycling_power_vector_flags_first_crank_measurement_angle = -1;",
          "593: static int hf_btatt_cycling_power_vector_flags_crank_revolution_data = -1;",
          "594: static int hf_btatt_cycling_power_vector_crank_revolution_data_cumulative_crank_revolutions = -1;",
          "595: static int hf_btatt_cycling_power_vector_crank_revolution_data_last_crank_event_time = -1;",
          "596: static int hf_btatt_cycling_power_vector_first_crank_measurement_angle = -1;",
          "597: static int hf_btatt_cycling_power_vector_instantaneous_force_magnitude_array = -1;",
          "598: static int hf_btatt_cycling_power_vector_instantaneous_torque_magnitude_array = -1;",
          "599: static int hf_btatt_cycling_power_control_point_opcode = -1;",
          "600: static int hf_btatt_cycling_power_control_point_cumulative_value = -1;",
          "601: static int hf_btatt_cycling_power_control_point_sensor_location = -1;",
          "602: static int hf_btatt_cycling_power_control_point_crank_length = -1;",
          "603: static int hf_btatt_cycling_power_control_point_chain_length = -1;",
          "604: static int hf_btatt_cycling_power_control_point_chain_weight = -1;",
          "605: static int hf_btatt_cycling_power_control_point_span_length = -1;",
          "606: static int hf_btatt_cycling_power_control_point_content_mask = -1;",
          "607: static int hf_btatt_cycling_power_control_point_content_mask_reserved = -1;",
          "608: static int hf_btatt_cycling_power_control_point_content_mask_accumulated_energy = -1;",
          "609: static int hf_btatt_cycling_power_control_point_content_mask_bottom_dead_spot_angle = -1;",
          "610: static int hf_btatt_cycling_power_control_point_content_mask_top_dead_spot_angle = -1;",
          "611: static int hf_btatt_cycling_power_control_point_content_mask_extreme_angles = -1;",
          "612: static int hf_btatt_cycling_power_control_point_content_mask_extreme_magnitudes = -1;",
          "613: static int hf_btatt_cycling_power_control_point_content_mask_crank_revolution_data = -1;",
          "614: static int hf_btatt_cycling_power_control_point_content_mask_wheel_revolution_data = -1;",
          "615: static int hf_btatt_cycling_power_control_point_content_mask_accumulated_torque = -1;",
          "616: static int hf_btatt_cycling_power_control_point_content_mask_pedal_power_balance = -1;",
          "617: static int hf_btatt_cycling_power_control_point_request_opcode = -1;",
          "618: static int hf_btatt_cycling_power_control_point_response_value = -1;",
          "619: static int hf_btatt_cycling_power_control_point_start_offset_compensation = -1;",
          "620: static int hf_btatt_cycling_power_control_point_sampling_rate = -1;",
          "621: static int hf_btatt_cycling_power_control_point_factory_calibration_date = -1;",
          "622: static int hf_btatt_location_and_speed_flags = -1;",
          "623: static int hf_btatt_location_and_speed_flags_reserved = -1;",
          "624: static int hf_btatt_location_and_speed_flags_heading_source = -1;",
          "625: static int hf_btatt_location_and_speed_flags_elevation_source = -1;",
          "626: static int hf_btatt_location_and_speed_flags_speed_and_distance_format = -1;",
          "627: static int hf_btatt_location_and_speed_flags_position_status = -1;",
          "628: static int hf_btatt_location_and_speed_flags_utc_time = -1;",
          "629: static int hf_btatt_location_and_speed_flags_rolling_time = -1;",
          "630: static int hf_btatt_location_and_speed_flags_heading = -1;",
          "631: static int hf_btatt_location_and_speed_flags_elevation = -1;",
          "632: static int hf_btatt_location_and_speed_flags_location = -1;",
          "633: static int hf_btatt_location_and_speed_flags_total_distance = -1;",
          "634: static int hf_btatt_location_and_speed_flags_instantaneous_speed = -1;",
          "635: static int hf_btatt_location_and_speed_instantaneous_speed = -1;",
          "636: static int hf_btatt_location_and_speed_total_distance = -1;",
          "637: static int hf_btatt_location_and_speed_location_latitude = -1;",
          "638: static int hf_btatt_location_and_speed_location_longitude = -1;",
          "639: static int hf_btatt_location_and_speed_elevation = -1;",
          "640: static int hf_btatt_location_and_speed_heading = -1;",
          "641: static int hf_btatt_location_and_speed_rolling_time = -1;",
          "642: static int hf_btatt_location_and_speed_utc_time = -1;",
          "643: static int hf_btatt_navigation_flags = -1;",
          "644: static int hf_btatt_navigation_flags_reserved = -1;",
          "645: static int hf_btatt_navigation_flags_destination_reached = -1;",
          "646: static int hf_btatt_navigation_flags_waypoint_reached = -1;",
          "647: static int hf_btatt_navigation_flags_navigation_indicator_type = -1;",
          "648: static int hf_btatt_navigation_flags_heading_source = -1;",
          "649: static int hf_btatt_navigation_flags_position_status = -1;",
          "650: static int hf_btatt_navigation_flags_estimated_time_of_arrival = -1;",
          "651: static int hf_btatt_navigation_flags_remaining_vertical_distance = -1;",
          "652: static int hf_btatt_navigation_flags_remaining_distance = -1;",
          "653: static int hf_btatt_navigation_bearing = -1;",
          "654: static int hf_btatt_navigation_heading = -1;",
          "655: static int hf_btatt_navigation_remaining_distance = -1;",
          "656: static int hf_btatt_navigation_remaining_vertical_distance = -1;",
          "657: static int hf_btatt_navigation_estimated_time_of_arrival = -1;",
          "658: static int hf_btatt_position_quality_flags = -1;",
          "659: static int hf_btatt_position_quality_flags_reserved = -1;",
          "660: static int hf_btatt_position_quality_flags_position_status = -1;",
          "661: static int hf_btatt_position_quality_flags_vdop = -1;",
          "662: static int hf_btatt_position_quality_flags_hdop = -1;",
          "663: static int hf_btatt_position_quality_flags_evpe = -1;",
          "664: static int hf_btatt_position_quality_flags_ehpe = -1;",
          "665: static int hf_btatt_position_quality_flags_time_to_first_fix = -1;",
          "666: static int hf_btatt_position_quality_flags_number_of_beacons_in_view = -1;",
          "667: static int hf_btatt_position_quality_flags_number_of_beacons_in_solution = -1;",
          "668: static int hf_btatt_position_quality_number_of_beacons_in_solution = -1;",
          "669: static int hf_btatt_position_quality_number_of_beacons_in_view = -1;",
          "670: static int hf_btatt_position_quality_time_to_first_fix = -1;",
          "671: static int hf_btatt_position_quality_ehpe = -1;",
          "672: static int hf_btatt_position_quality_evpe = -1;",
          "673: static int hf_btatt_position_quality_hdop = -1;",
          "674: static int hf_btatt_position_quality_vdop = -1;",
          "675: static int hf_btatt_ln_control_point_opcode = -1;",
          "676: static int hf_btatt_ln_control_point_cumulative_value = -1;",
          "677: static int hf_btatt_ln_control_point_content_mask = -1;",
          "678: static int hf_btatt_ln_control_point_content_mask_reserved = -1;",
          "679: static int hf_btatt_ln_control_point_content_mask_utc_time = -1;",
          "680: static int hf_btatt_ln_control_point_content_mask_rolling_time = -1;",
          "681: static int hf_btatt_ln_control_point_content_mask_heading = -1;",
          "682: static int hf_btatt_ln_control_point_content_mask_elevation = -1;",
          "683: static int hf_btatt_ln_control_point_content_mask_location = -1;",
          "684: static int hf_btatt_ln_control_point_content_mask_total_distance = -1;",
          "685: static int hf_btatt_ln_control_point_content_mask_instantaneous_speed = -1;",
          "686: static int hf_btatt_ln_control_point_navigation_control = -1;",
          "687: static int hf_btatt_ln_control_point_route_number = -1;",
          "688: static int hf_btatt_ln_control_point_fix_rate = -1;",
          "689: static int hf_btatt_ln_control_point_elevation = -1;",
          "690: static int hf_btatt_ln_control_point_request_opcode = -1;",
          "691: static int hf_btatt_ln_control_point_response_value = -1;",
          "692: static int hf_btatt_ln_control_point_response_value_number_of_routes = -1;",
          "693: static int hf_btatt_ln_control_point_response_value_name_of_route = -1;",
          "694: static int hf_btatt_body_composition_measurement_flags = -1;",
          "695: static int hf_btatt_body_composition_measurement_flags_reserved = -1;",
          "696: static int hf_btatt_body_composition_measurement_flags_multiple_packet_measurement = -1;",
          "697: static int hf_btatt_body_composition_measurement_flags_height = -1;",
          "698: static int hf_btatt_body_composition_measurement_flags_weight = -1;",
          "699: static int hf_btatt_body_composition_measurement_flags_impedance = -1;",
          "700: static int hf_btatt_body_composition_measurement_flags_body_water_mass = -1;",
          "701: static int hf_btatt_body_composition_measurement_flags_soft_lean_mass = -1;",
          "702: static int hf_btatt_body_composition_measurement_flags_fat_free_mass = -1;",
          "703: static int hf_btatt_body_composition_measurement_flags_muscle_mass = -1;",
          "704: static int hf_btatt_body_composition_measurement_flags_muscle_percentage = -1;",
          "705: static int hf_btatt_body_composition_measurement_flags_basal_metabolism = -1;",
          "706: static int hf_btatt_body_composition_measurement_flags_user_id = -1;",
          "707: static int hf_btatt_body_composition_measurement_flags_timestamp = -1;",
          "708: static int hf_btatt_body_composition_measurement_flags_measurement_units = -1;",
          "709: static int hf_btatt_body_composition_measurement_body_fat_percentage = -1;",
          "710: static int hf_btatt_body_composition_measurement_timestamp = -1;",
          "711: static int hf_btatt_body_composition_measurement_user_id = -1;",
          "712: static int hf_btatt_body_composition_measurement_basal_metabolism = -1;",
          "713: static int hf_btatt_body_composition_measurement_muscle_percentage = -1;",
          "714: static int hf_btatt_body_composition_measurement_muscle_mass_lb = -1;",
          "715: static int hf_btatt_body_composition_measurement_muscle_mass_kg = -1;",
          "716: static int hf_btatt_body_composition_measurement_fat_free_mass_lb = -1;",
          "717: static int hf_btatt_body_composition_measurement_fat_free_mass_kg = -1;",
          "718: static int hf_btatt_body_composition_measurement_soft_lean_mass_lb = -1;",
          "719: static int hf_btatt_body_composition_measurement_soft_lean_mass_kg = -1;",
          "720: static int hf_btatt_body_composition_measurement_body_water_mass_lb = -1;",
          "721: static int hf_btatt_body_composition_measurement_body_water_mass_kg = -1;",
          "722: static int hf_btatt_body_composition_measurement_impedance = -1;",
          "723: static int hf_btatt_body_composition_measurement_weight_lb = -1;",
          "724: static int hf_btatt_body_composition_measurement_weight_kg = -1;",
          "725: static int hf_btatt_body_composition_measurement_height_inches = -1;",
          "726: static int hf_btatt_body_composition_measurement_height_meter = -1;",
          "727: static int hf_btatt_weight_measurement_flags = -1;",
          "728: static int hf_btatt_weight_measurement_flags_reserved = -1;",
          "729: static int hf_btatt_weight_measurement_flags_bmi_and_height = -1;",
          "730: static int hf_btatt_weight_measurement_flags_user_id = -1;",
          "731: static int hf_btatt_weight_measurement_flags_timestamp = -1;",
          "732: static int hf_btatt_weight_measurement_flags_measurement_units = -1;",
          "733: static int hf_btatt_weight_measurement_weight_lb = -1;",
          "734: static int hf_btatt_weight_measurement_weight_kg = -1;",
          "735: static int hf_btatt_weight_measurement_timestamp = -1;",
          "736: static int hf_btatt_weight_measurement_user_id = -1;",
          "737: static int hf_btatt_weight_measurement_bmi = -1;",
          "738: static int hf_btatt_weight_measurement_height_in = -1;",
          "739: static int hf_btatt_weight_measurement_height_m = -1;",
          "740: static int hf_btatt_user_control_point_opcode = -1;",
          "741: static int hf_btatt_user_control_point_request_opcode = -1;",
          "742: static int hf_btatt_user_control_point_response_value = -1;",
          "743: static int hf_btatt_user_control_point_consent_code = -1;",
          "744: static int hf_btatt_cgm_measurement_size = -1;",
          "745: static int hf_btatt_cgm_measurement_flags = -1;",
          "746: static int hf_btatt_cgm_measurement_flags_cgm_trend_information = -1;",
          "747: static int hf_btatt_cgm_measurement_flags_cgm_quality = -1;",
          "748: static int hf_btatt_cgm_measurement_flags_reserved = -1;",
          "749: static int hf_btatt_cgm_measurement_flags_sensor_status_annunciation_warning = -1;",
          "750: static int hf_btatt_cgm_measurement_flags_sensor_status_annunciation_cal_temp = -1;",
          "751: static int hf_btatt_cgm_measurement_flags_sensor_status_annunciation_status = -1;",
          "752: static int hf_btatt_cgm_measurement_glucose_concentration = -1;",
          "753: static int hf_btatt_cgm_measurement_time_offset = -1;",
          "754: static int hf_btatt_cgm_sensor_status_annunciation = -1;",
          "755: static int hf_btatt_cgm_sensor_status_annunciation_status = -1;",
          "756: static int hf_btatt_cgm_sensor_status_annunciation_status_reserved = -1;",
          "757: static int hf_btatt_cgm_sensor_status_annunciation_status_general_device_fault_has_occurred_in_the_sensor = -1;",
          "758: static int hf_btatt_cgm_sensor_status_annunciation_status_device_specific_alert = -1;",
          "759: static int hf_btatt_cgm_sensor_status_annunciation_status_sensor_malfunction = -1;",
          "760: static int hf_btatt_cgm_sensor_status_annunciation_status_sensor_type_incorrect_for_device = -1;",
          "761: static int hf_btatt_cgm_sensor_status_annunciation_status_device_battery_low = -1;",
          "762: static int hf_btatt_cgm_sensor_status_annunciation_status_session_stopped = -1;",
          "763: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp = -1;",
          "764: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_reserved = -1;",
          "765: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_low_for_valid_test_result_at_time_of_measurement = -1;",
          "766: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_high_for_valid_test_result_at_time_of_measurement = -1;",
          "767: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_required = -1;",
          "768: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_recommended = -1;",
          "769: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_not_allowed = -1;",
          "770: static int hf_btatt_cgm_sensor_status_annunciation_cal_temp_time_synchronization_between_sensor_and_collector_required = -1;",
          "771: static int hf_btatt_cgm_sensor_status_annunciation_warning = -1;",
          "772: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_device_can_process = -1;",
          "773: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_device_can_process = -1;",
          "774: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_increase_exceeded = -1;",
          "775: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_decrease_exceeded = -1;",
          "776: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_hyper_level = -1;",
          "777: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_hypo_level = -1;",
          "778: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_patient_high_level = -1;",
          "779: static int hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_patient_low_level = -1;",
          "780: static int hf_btatt_cgm_measurement_trend_information = -1;",
          "781: static int hf_btatt_cgm_measurement_quality = -1;",
          "782: static int hf_btatt_cgm_e2e_crc = -1;",
          "783: static int hf_btatt_cgm_feature_feature = -1;",
          "784: static int hf_btatt_cgm_feature_feature_reserved = -1;",
          "785: static int hf_btatt_cgm_feature_feature_quality = -1;",
          "786: static int hf_btatt_cgm_feature_feature_trend_information = -1;",
          "787: static int hf_btatt_cgm_feature_feature_multiple_sessions = -1;",
          "788: static int hf_btatt_cgm_feature_feature_multiple_bond = -1;",
          "789: static int hf_btatt_cgm_feature_feature_e2e_crc = -1;",
          "790: static int hf_btatt_cgm_feature_feature_general_device_fault = -1;",
          "791: static int hf_btatt_cgm_feature_feature_sensor_type_error_detection = -1;",
          "792: static int hf_btatt_cgm_feature_feature_low_battery_detection = -1;",
          "793: static int hf_btatt_cgm_feature_feature_sensor_result_high_low_detection = -1;",
          "794: static int hf_btatt_cgm_feature_feature_sensor_temperature_high_low_detection = -1;",
          "795: static int hf_btatt_cgm_feature_feature_sensor_malfunction_detection = -1;",
          "796: static int hf_btatt_cgm_feature_feature_device_specific_alert = -1;",
          "797: static int hf_btatt_cgm_feature_feature_rate_of_increase_decrease_alerts = -1;",
          "798: static int hf_btatt_cgm_feature_feature_hyper_alerts = -1;",
          "799: static int hf_btatt_cgm_feature_feature_hypo_alerts = -1;",
          "800: static int hf_btatt_cgm_feature_feature_patient_high_low_alerts = -1;",
          "801: static int hf_btatt_cgm_feature_feature_calibration = -1;",
          "802: static int hf_btatt_cgm_type_and_sample_location = -1;",
          "803: static int hf_btatt_cgm_type = -1;",
          "804: static int hf_btatt_cgm_sample_location = -1;",
          "805: static int hf_btatt_cgm_time_offset = -1;",
          "806: static int hf_btatt_cgm_status = -1;",
          "807: static int hf_btatt_cgm_session_start_time = -1;",
          "808: static int hf_btatt_cgm_session_run_time = -1;",
          "809: static int hf_btatt_cgm_specific_ops_control_point_opcode = -1;",
          "810: static int hf_btatt_cgm_specific_ops_control_point_operand = -1;",
          "811: static int hf_btatt_cgm_specific_ops_control_point_operand_communication_interval = -1;",
          "812: static int hf_btatt_cgm_specific_ops_control_point_calibration_glucose_concentration = -1;",
          "813: static int hf_btatt_cgm_specific_ops_control_point_calibration_time = -1;",
          "814: static int hf_btatt_cgm_specific_ops_control_point_next_calibration_time = -1;",
          "815: static int hf_btatt_cgm_specific_ops_control_point_calibration_data_record_number = -1;",
          "816: static int hf_btatt_cgm_specific_ops_control_point_calibration_status = -1;",
          "817: static int hf_btatt_cgm_specific_ops_control_point_calibration_status_reserved = -1;",
          "818: static int hf_btatt_cgm_specific_ops_control_point_calibration_status_pending = -1;",
          "819: static int hf_btatt_cgm_specific_ops_control_point_calibration_status_out_of_range = -1;",
          "820: static int hf_btatt_cgm_specific_ops_control_point_calibration_status_rejected = -1;",
          "821: static int hf_btatt_cgm_specific_ops_control_point_operand_calibration_data_record_number = -1;",
          "822: static int hf_btatt_cgm_specific_ops_control_point_operand_alert_level = -1;",
          "823: static int hf_btatt_cgm_specific_ops_control_point_operand_alert_level_rate = -1;",
          "824: static int hf_btatt_cgm_specific_ops_control_point_request_opcode = -1;",
          "825: static int hf_btatt_cgm_specific_ops_control_point_response_code = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "906:     NULL",
          "907: };",
          "911: static gint ett_btatt = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1231: static const int *hfx_btatt_uncertainty[] = {",
          "1232:     &hf_btatt_uncertainty_reserved,",
          "1233:     &hf_btatt_uncertainty_precision,",
          "1234:     &hf_btatt_uncertainty_update_time,",
          "1235:     &hf_btatt_uncertainty_stationary,",
          "1236:     NULL",
          "1237: };",
          "1239: static const int *hfx_btatt_indoor_positioning_configuration[] = {",
          "1240:     &hf_btatt_indoor_positioning_configuration_reserved,",
          "1241:     &hf_btatt_indoor_positioning_configuration_location_name,",
          "1242:     &hf_btatt_indoor_positioning_configuration_floor_number,",
          "1243:     &hf_btatt_indoor_positioning_configuration_altitude,",
          "1244:     &hf_btatt_indoor_positioning_configuration_tx_power,",
          "1245:     &hf_btatt_indoor_positioning_configuration_coordinate_system_used_in_advertising_packets,",
          "1246:     &hf_btatt_indoor_positioning_configuration_coordinates,",
          "1247:     NULL",
          "1248: };",
          "1250: static const int *hfx_btatt_rsc_measurement_flags[] = {",
          "1251:     &hf_btatt_rsc_measurement_flags_reserved,",
          "1252:     &hf_btatt_rsc_measurement_flags_type_of_movement,",
          "1253:     &hf_btatt_rsc_measurement_flags_total_distance_present,",
          "1254:     &hf_btatt_rsc_measurement_flags_instantaneous_stride_length_present,",
          "1255:     NULL",
          "1256: };",
          "1258: static const int *hfx_btatt_cycling_power_measurement_flags[] = {",
          "1259:     &hf_btatt_cycling_power_measurement_flags_reserved,",
          "1260:     &hf_btatt_cycling_power_measurement_flags_offset_compensation_indicator,",
          "1261:     &hf_btatt_cycling_power_measurement_flags_accumulated_energy,",
          "1262:     &hf_btatt_cycling_power_measurement_flags_bottom_dead_spot_angle,",
          "1263:     &hf_btatt_cycling_power_measurement_flags_top_dead_spot_angle,",
          "1264:     &hf_btatt_cycling_power_measurement_flags_extreme_angles,",
          "1265:     &hf_btatt_cycling_power_measurement_flags_extreme_torque_magnitudes,",
          "1266:     &hf_btatt_cycling_power_measurement_flags_extreme_force_magnitudes,",
          "1267:     &hf_btatt_cycling_power_measurement_flags_crank_revolution_data,",
          "1268:     &hf_btatt_cycling_power_measurement_flags_wheel_revolution_data,",
          "1269:     &hf_btatt_cycling_power_measurement_flags_accumulated_torque_source,",
          "1270:     &hf_btatt_cycling_power_measurement_flags_accumulated_torque,",
          "1271:     &hf_btatt_cycling_power_measurement_flags_pedal_power_balance_reference,",
          "1272:     &hf_btatt_cycling_power_measurement_flags_pedal_power_balance,",
          "1273:     NULL",
          "1274: };",
          "1276: static const int *hfx_btatt_cycling_power_measurement_extreme_angles[] = {",
          "1277:     &hf_btatt_cycling_power_measurement_extreme_angles_maximum,",
          "1278:     &hf_btatt_cycling_power_measurement_extreme_angles_minimum,",
          "1279:     NULL",
          "1280: };",
          "1282: static const int *hfx_btatt_csc_measurement_flags[] = {",
          "1283:     &hf_btatt_csc_measurement_flags_reserved,",
          "1284:     &hf_btatt_csc_measurement_flags_crank_revolution_data,",
          "1285:     &hf_btatt_csc_measurement_flags_wheel_revolution_data,",
          "1286:     NULL",
          "1287: };",
          "1289: static const int *hfx_btatt_cycling_power_vector_flags[] = {",
          "1290:     &hf_btatt_cycling_power_vector_flags_reserved,",
          "1291:     &hf_btatt_cycling_power_vector_flags_instantaneous_measurement_direction,",
          "1292:     &hf_btatt_cycling_power_vector_flags_instantaneous_torque_magnitude_array,",
          "1293:     &hf_btatt_cycling_power_vector_flags_instantaneous_force_magnitude_array,",
          "1294:     &hf_btatt_cycling_power_vector_flags_first_crank_measurement_angle,",
          "1295:     &hf_btatt_cycling_power_vector_flags_crank_revolution_data,",
          "1296:     NULL",
          "1297: };",
          "1299: static const int *hfx_btatt_cycling_power_control_point_content_mask[] = {",
          "1300:     &hf_btatt_cycling_power_control_point_content_mask_reserved,",
          "1301:     &hf_btatt_cycling_power_control_point_content_mask_accumulated_energy,",
          "1302:     &hf_btatt_cycling_power_control_point_content_mask_bottom_dead_spot_angle,",
          "1303:     &hf_btatt_cycling_power_control_point_content_mask_top_dead_spot_angle,",
          "1304:     &hf_btatt_cycling_power_control_point_content_mask_extreme_angles,",
          "1305:     &hf_btatt_cycling_power_control_point_content_mask_extreme_magnitudes,",
          "1306:     &hf_btatt_cycling_power_control_point_content_mask_crank_revolution_data,",
          "1307:     &hf_btatt_cycling_power_control_point_content_mask_wheel_revolution_data,",
          "1308:     &hf_btatt_cycling_power_control_point_content_mask_accumulated_torque,",
          "1309:     &hf_btatt_cycling_power_control_point_content_mask_pedal_power_balance,",
          "1310:     NULL",
          "1311: };",
          "1313: static const int *hfx_btatt_location_and_speed_flags[] = {",
          "1314:     &hf_btatt_location_and_speed_flags_reserved,",
          "1315:     &hf_btatt_location_and_speed_flags_heading_source,",
          "1316:     &hf_btatt_location_and_speed_flags_elevation_source,",
          "1317:     &hf_btatt_location_and_speed_flags_speed_and_distance_format,",
          "1318:     &hf_btatt_location_and_speed_flags_position_status,",
          "1319:     &hf_btatt_location_and_speed_flags_utc_time,",
          "1320:     &hf_btatt_location_and_speed_flags_rolling_time,",
          "1321:     &hf_btatt_location_and_speed_flags_heading,",
          "1322:     &hf_btatt_location_and_speed_flags_elevation,",
          "1323:     &hf_btatt_location_and_speed_flags_location,",
          "1324:     &hf_btatt_location_and_speed_flags_total_distance,",
          "1325:     &hf_btatt_location_and_speed_flags_instantaneous_speed,",
          "1326:     NULL",
          "1327: };",
          "1329: static const int *hfx_btatt_navigation_flags[] = {",
          "1330:     &hf_btatt_navigation_flags_reserved,",
          "1331:     &hf_btatt_navigation_flags_destination_reached,",
          "1332:     &hf_btatt_navigation_flags_waypoint_reached,",
          "1333:     &hf_btatt_navigation_flags_navigation_indicator_type,",
          "1334:     &hf_btatt_navigation_flags_heading_source,",
          "1335:     &hf_btatt_navigation_flags_position_status,",
          "1336:     &hf_btatt_navigation_flags_estimated_time_of_arrival,",
          "1337:     &hf_btatt_navigation_flags_remaining_vertical_distance,",
          "1338:     &hf_btatt_navigation_flags_remaining_distance,",
          "1339:     NULL",
          "1340: };",
          "1342: static const int *hfx_btatt_position_quality_flags[] = {",
          "1343:     &hf_btatt_position_quality_flags_reserved,",
          "1344:     &hf_btatt_position_quality_flags_position_status,",
          "1345:     &hf_btatt_position_quality_flags_vdop,",
          "1346:     &hf_btatt_position_quality_flags_hdop,",
          "1347:     &hf_btatt_position_quality_flags_evpe,",
          "1348:     &hf_btatt_position_quality_flags_ehpe,",
          "1349:     &hf_btatt_position_quality_flags_time_to_first_fix,",
          "1350:     &hf_btatt_position_quality_flags_number_of_beacons_in_view,",
          "1351:     &hf_btatt_position_quality_flags_number_of_beacons_in_solution,",
          "1352:     NULL",
          "1353: };",
          "1355: static const int *hfx_btatt_ln_control_point_content_mask[] = {",
          "1356:     &hf_btatt_ln_control_point_content_mask_reserved,",
          "1357:     &hf_btatt_ln_control_point_content_mask_utc_time,",
          "1358:     &hf_btatt_ln_control_point_content_mask_rolling_time,",
          "1359:     &hf_btatt_ln_control_point_content_mask_heading,",
          "1360:     &hf_btatt_ln_control_point_content_mask_elevation,",
          "1361:     &hf_btatt_ln_control_point_content_mask_location,",
          "1362:     &hf_btatt_ln_control_point_content_mask_total_distance,",
          "1363:     &hf_btatt_ln_control_point_content_mask_instantaneous_speed,",
          "1364:     NULL",
          "1365: };",
          "1367: static const int *hfx_btatt_body_composition_measurement_flags[] = {",
          "1368:     &hf_btatt_body_composition_measurement_flags_reserved,",
          "1369:     &hf_btatt_body_composition_measurement_flags_multiple_packet_measurement,",
          "1370:     &hf_btatt_body_composition_measurement_flags_height,",
          "1371:     &hf_btatt_body_composition_measurement_flags_weight,",
          "1372:     &hf_btatt_body_composition_measurement_flags_impedance,",
          "1373:     &hf_btatt_body_composition_measurement_flags_body_water_mass,",
          "1374:     &hf_btatt_body_composition_measurement_flags_soft_lean_mass,",
          "1375:     &hf_btatt_body_composition_measurement_flags_fat_free_mass,",
          "1376:     &hf_btatt_body_composition_measurement_flags_muscle_mass,",
          "1377:     &hf_btatt_body_composition_measurement_flags_muscle_percentage,",
          "1378:     &hf_btatt_body_composition_measurement_flags_basal_metabolism,",
          "1379:     &hf_btatt_body_composition_measurement_flags_user_id,",
          "1380:     &hf_btatt_body_composition_measurement_flags_timestamp,",
          "1381:     &hf_btatt_body_composition_measurement_flags_measurement_units,",
          "1382:     NULL",
          "1383: };",
          "1385: static const int *hfx_btatt_weight_measurement_flags[] = {",
          "1386:     &hf_btatt_weight_measurement_flags_reserved,",
          "1387:     &hf_btatt_weight_measurement_flags_bmi_and_height,",
          "1388:     &hf_btatt_weight_measurement_flags_user_id,",
          "1389:     &hf_btatt_weight_measurement_flags_timestamp,",
          "1390:     &hf_btatt_weight_measurement_flags_measurement_units,",
          "1391:     NULL",
          "1392: };",
          "1394: static const int *hfx_btatt_cgm_measurement_flags[] = {",
          "1395:     &hf_btatt_cgm_measurement_flags_cgm_trend_information,",
          "1396:     &hf_btatt_cgm_measurement_flags_cgm_quality,",
          "1397:     &hf_btatt_cgm_measurement_flags_reserved,",
          "1398:     &hf_btatt_cgm_measurement_flags_sensor_status_annunciation_warning,",
          "1399:     &hf_btatt_cgm_measurement_flags_sensor_status_annunciation_cal_temp,",
          "1400:     &hf_btatt_cgm_measurement_flags_sensor_status_annunciation_status,",
          "1401:     NULL",
          "1402: };",
          "1404: static const int *hfx_btatt_cgm_sensor_status_annunciation_status[] = {",
          "1405:     &hf_btatt_cgm_sensor_status_annunciation_status_reserved,",
          "1406:     &hf_btatt_cgm_sensor_status_annunciation_status_general_device_fault_has_occurred_in_the_sensor,",
          "1407:     &hf_btatt_cgm_sensor_status_annunciation_status_device_specific_alert,",
          "1408:     &hf_btatt_cgm_sensor_status_annunciation_status_sensor_malfunction,",
          "1409:     &hf_btatt_cgm_sensor_status_annunciation_status_sensor_type_incorrect_for_device,",
          "1410:     &hf_btatt_cgm_sensor_status_annunciation_status_device_battery_low,",
          "1411:     &hf_btatt_cgm_sensor_status_annunciation_status_session_stopped,",
          "1412:     NULL",
          "1413: };",
          "1415: static const int *hfx_btatt_cgm_sensor_status_annunciation_cal_temp[] = {",
          "1416:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_reserved,",
          "1417:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_low_for_valid_test_result_at_time_of_measurement,",
          "1418:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_high_for_valid_test_result_at_time_of_measurement,",
          "1419:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_required,",
          "1420:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_recommended,",
          "1421:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_not_allowed,",
          "1422:     &hf_btatt_cgm_sensor_status_annunciation_cal_temp_time_synchronization_between_sensor_and_collector_required,",
          "1423:     NULL",
          "1424: };",
          "1426: static const int *hfx_btatt_cgm_sensor_status_annunciation_warning[] = {",
          "1427:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_device_can_process,",
          "1428:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_device_can_process,",
          "1429:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_increase_exceeded,",
          "1430:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_decrease_exceeded,",
          "1431:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_hyper_level,",
          "1432:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_hypo_level,",
          "1433:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_patient_high_level,",
          "1434:     &hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_patient_low_level,",
          "1435:     NULL",
          "1436: };",
          "1438: static const int *hfx_btatt_cgm_feature_feature[] = {",
          "1439:     &hf_btatt_cgm_feature_feature_reserved,",
          "1440:     &hf_btatt_cgm_feature_feature_quality,",
          "1441:     &hf_btatt_cgm_feature_feature_trend_information,",
          "1442:     &hf_btatt_cgm_feature_feature_multiple_sessions,",
          "1443:     &hf_btatt_cgm_feature_feature_multiple_bond,",
          "1444:     &hf_btatt_cgm_feature_feature_e2e_crc,",
          "1445:     &hf_btatt_cgm_feature_feature_general_device_fault,",
          "1446:     &hf_btatt_cgm_feature_feature_sensor_type_error_detection,",
          "1447:     &hf_btatt_cgm_feature_feature_low_battery_detection,",
          "1448:     &hf_btatt_cgm_feature_feature_sensor_result_high_low_detection,",
          "1449:     &hf_btatt_cgm_feature_feature_sensor_temperature_high_low_detection,",
          "1450:     &hf_btatt_cgm_feature_feature_sensor_malfunction_detection,",
          "1451:     &hf_btatt_cgm_feature_feature_device_specific_alert,",
          "1452:     &hf_btatt_cgm_feature_feature_rate_of_increase_decrease_alerts,",
          "1453:     &hf_btatt_cgm_feature_feature_hyper_alerts,",
          "1454:     &hf_btatt_cgm_feature_feature_hypo_alerts,",
          "1455:     &hf_btatt_cgm_feature_feature_patient_high_low_alerts,",
          "1456:     &hf_btatt_cgm_feature_feature_calibration,",
          "1457:     NULL",
          "1458: };",
          "1460: static const int *hfx_btatt_cgm_type_and_sample_location[] = {",
          "1461:     &hf_btatt_cgm_type,",
          "1462:     &hf_btatt_cgm_sample_location,",
          "1463:     NULL",
          "1464: };",
          "1466: static const int *hfx_btatt_cgm_specific_ops_control_point_calibration_status[] = {",
          "1467:     &hf_btatt_cgm_specific_ops_control_point_calibration_status_reserved,",
          "1468:     &hf_btatt_cgm_specific_ops_control_point_calibration_status_pending,",
          "1469:     &hf_btatt_cgm_specific_ops_control_point_calibration_status_out_of_range,",
          "1470:     &hf_btatt_cgm_specific_ops_control_point_calibration_status_rejected,",
          "1471:     NULL",
          "1472: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "920: static expert_field ei_btatt_handle_too_few = EI_INIT;",
          "921: static expert_field ei_btatt_mtu_exceeded = EI_INIT;",
          "922: static expert_field ei_btatt_mtu_full = EI_INIT;",
          "923: static expert_field ei_btatt_undecoded = EI_INIT;",
          "925: static wmem_tree_t *mtus = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1487: static expert_field ei_btatt_consent_out_of_bounds = EI_INIT;",
          "1488: static expert_field ei_btatt_cgm_size_too_small = EI_INIT;",
          "1489: static expert_field ei_btatt_opcode_invalid_request = EI_INIT;",
          "1490: static expert_field ei_btatt_opcode_invalid_response = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1941:     {0x0, NULL}",
          "1942: };",
          "1945: union request_parameters_union {",
          "1946:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2512: static const value_string value_trigger_setting_condition_vals[] = {",
          "2513:     { 0x00,   \"None\"},",
          "2514:     { 0x01,   \"Analog - Crossed a boundary\"},",
          "2515:     { 0x02,   \"Analog - On the boundary\"},",
          "2516:     { 0x03,   \"Analog - Exceeds a boundary\"},",
          "2517:     { 0x04,   \"Bitmask\"},",
          "2518:     { 0x05,   \"Analog Interval - Inside or outside the boundaries\"},",
          "2519:     { 0x06,   \"Analog Interval - On the boundaries\"},",
          "2520:     { 0x07,   \"No value trigger\"},",
          "2521:     {0x0, NULL}",
          "2522: };",
          "2525: static const value_string digital_vals[] = {",
          "2526:     { 0x00,   \"Inactive\"},",
          "2527:     { 0x01,   \"Active\"},",
          "2528:     { 0x02,   \"Tri-state\"},",
          "2529:     { 0x03,   \"Output-state\"},",
          "2530:     {0x0, NULL}",
          "2531: };",
          "2534: static const value_string uncertainty_stationary_vals[] = {",
          "2535:     { 0x00,   \"Stationary\"},",
          "2536:     { 0x01,   \"Mobile\"},",
          "2537:     {0x0, NULL}",
          "2538: };",
          "2541: static const value_string uncertainty_update_time_vals[] = {",
          "2542:     { 0x00,   \"Up to 3s\"},",
          "2543:     { 0x01,   \"Up to 4s\"},",
          "2544:     { 0x02,   \"Up to 6s\"},",
          "2545:     { 0x03,   \"Up to 12s\"},",
          "2546:     { 0x04,   \"Up to 28s\"},",
          "2547:     { 0x05,   \"Up to 89s\"},",
          "2548:     { 0x06,   \"Up to 426s\"},",
          "2549:     { 0x07,   \"3541s\"},",
          "2550:     {0x0, NULL}",
          "2551: };",
          "2554: static const value_string uncertainty_precision_vals[] = {",
          "2555:     { 0x00,   \"Less than 0.1m\"},",
          "2556:     { 0x01,   \"0.1-1m\"},",
          "2557:     { 0x02,   \"1-2m\"},",
          "2558:     { 0x03,   \"2-5m\"},",
          "2559:     { 0x04,   \"5-10m\"},",
          "2560:     { 0x05,   \"10-50m\"},",
          "2561:     { 0x06,   \"Greater than 50m\"},",
          "2562:     { 0x07,   \"N/A\"},",
          "2563:     {0x0, NULL}",
          "2564: };",
          "2567: static const value_string indoor_positioning_configuration_coordinate_system_used_in_advertising_packets_vals[] = {",
          "2568:     { 0x00,   \"WGS84 Coordinate System\"},",
          "2569:     { 0x01,   \"Local Coordinate System\"},",
          "2570:     {0x0, NULL}",
          "2571: };",
          "2574: static const value_string time_trigger_setting_condition_vals[] = {",
          "2575:     { 0x00,   \"No time-based triggering used\"},",
          "2576:     { 0x01,   \"Indicates or notifies unconditionally after a settable time\"},",
          "2577:     { 0x02,   \"Not indicated or notified more often than a settable time\"},",
          "2578:     { 0x03,   \"Changed more often than\"},",
          "2579:     {0x0, NULL}",
          "2580: };",
          "2583: static const value_string rsc_measurement_flags_type_of_movement_vals[] = {",
          "2584:     { 0x00,   \"Walking\"},",
          "2585:     { 0x01,   \"Running\"},",
          "2586:     {0x0, NULL}",
          "2587: };",
          "2589: static const value_string sc_control_point_opcode_vals[] = {",
          "2590:     { 0x01,   \"Set Cumulative Value\"},",
          "2591:     { 0x02,   \"Start Sensor Calibration\"},",
          "2592:     { 0x03,   \"Update Sensor Location\"},",
          "2593:     { 0x04,   \"Request Supported Sensor Locations\"},",
          "2594:     { 0x10,   \"Response Code\"},",
          "2595:     {0x0, NULL}",
          "2596: };",
          "2598: static const value_string sc_control_point_response_value_vals[] = {",
          "2599:     { 0x01,   \"Success\"},",
          "2600:     { 0x02,   \"Opcode not Supported\"},",
          "2601:     { 0x03,   \"Invalid Parameter\"},",
          "2602:     { 0x04,   \"Operation Failed\"},",
          "2603:     {0x0, NULL}",
          "2604: };",
          "2606: static const value_string cycling_power_measurement_flags_accumulated_torque_source_vals[] = {",
          "2607:     { 0x00,   \"Wheel Based\"},",
          "2608:     { 0x01,   \"Crank Based\"},",
          "2609:     {0x0, NULL}",
          "2610: };",
          "2612: static const value_string cycling_power_vector_flags_instantaneous_measurement_direction_vals[] = {",
          "2613:     { 0x00,   \"Unknown\"},",
          "2614:     { 0x01,   \"Tangential Component\"},",
          "2615:     { 0x02,   \"Radial Component\"},",
          "2616:     { 0x03,   \"Lateral Component\"},",
          "2617:     {0x0, NULL}",
          "2618: };",
          "2620: static const value_string cycling_power_control_point_opcode[] = {",
          "2621:     { 0x01,   \"Set Cumulative Value\"},",
          "2622:     { 0x02,   \"Update Sensor Location\"},",
          "2623:     { 0x03,   \"Request Supported Sensor Locations\"},",
          "2624:     { 0x04,   \"Set Crank Length\"},",
          "2625:     { 0x05,   \"Request Crank Length\"},",
          "2626:     { 0x06,   \"Set Chain Length\"},",
          "2627:     { 0x07,   \"Request Chain Length\"},",
          "2628:     { 0x08,   \"Set Chain Weight\"},",
          "2629:     { 0x09,   \"Request Chain Weight\"},",
          "2630:     { 0x0A,   \"Set Span Length\"},",
          "2631:     { 0x0B,   \"Request Span Length\"},",
          "2632:     { 0x0C,   \"Start Offset Compensation\"},",
          "2633:     { 0x0D,   \"Mask Cycling Power Measurement Characteristic Content\"},",
          "2634:     { 0x0E,   \"Request Sampling Rate\"},",
          "2635:     { 0x0F,   \"Request Factory Calibration Date\"},",
          "2636:     { 0x20,   \"Response Code\"},",
          "2637:     {0x0, NULL}",
          "2638: };",
          "2640: static const value_string cycling_power_control_point_response_value[] = {",
          "2641:     { 0x01,   \"Success\"},",
          "2642:     { 0x02,   \"Opcode not Supported\"},",
          "2643:     { 0x03,   \"Invalid Parameter\"},",
          "2644:     { 0x04,   \"Operation Failed\"},",
          "2645:     {0x0, NULL}",
          "2646: };",
          "2648: static const value_string location_and_speed_flags_elevation_source_vals[] = {",
          "2649:     { 0x00,   \"Positioning System\"},",
          "2650:     { 0x01,   \"Barometric Air Pressure\"},",
          "2651:     { 0x02,   \"Database Service (or similiar)\"},",
          "2652:     { 0x03,   \"Other\"},",
          "2653:     {0x0, NULL}",
          "2654: };",
          "2656: static const value_string flags_position_status_vals[] = {",
          "2657:     { 0x00,   \"No Position\"},",
          "2658:     { 0x01,   \"Position Ok\"},",
          "2659:     { 0x02,   \"Estimated Position\"},",
          "2660:     { 0x03,   \"Last Known Position\"},",
          "2661:     {0x0, NULL}",
          "2662: };",
          "2664: static const value_string ln_control_point_opcode[] = {",
          "2665:     { 0x01,   \"Set Cumulative Value\"},",
          "2666:     { 0x02,   \"Mask Location and Speed Characteristic Content\"},",
          "2667:     { 0x03,   \"Navigation Control\"},",
          "2668:     { 0x04,   \"Request Number of Routes\"},",
          "2669:     { 0x05,   \"Request Name of Route\"},",
          "2670:     { 0x06,   \"Select Route\"},",
          "2671:     { 0x07,   \"Set Fix Rate\"},",
          "2672:     { 0x08,   \"Set Elevation\"},",
          "2673:     { 0x20,   \"Response Code\"},",
          "2674:     {0x0, NULL}",
          "2675: };",
          "2677: static const value_string ln_control_point_navigation_control_vals[] = {",
          "2678:     { 0x00,   \"Stop Notification of the Navigation characteristic. Stop Navigation.\"},",
          "2679:     { 0x01,   \"Start Notification of the Navigation characteristic. Start Navigation to the first waypoint on a route.\"},",
          "2680:     { 0x02,   \"Stop Notification of the Navigation characteristic. Pause Navigation keeping the next waypoint on the route in the memory for continuing the navigation later.\"},",
          "2681:     { 0x03,   \"Start Notification of the Navigation characteristic. Continue Navigation from the point where navigation was paused to the next waypoint on the route.\"},",
          "2682:     { 0x04,   \"Notification of the Navigation characteristic not affected. Skip Waypoint: disregard next waypoint and continue navigation to the waypoint following next waypoint on the route.\"},",
          "2683:     { 0x05,   \"Start Notification of the Navigation characteristic. Select Nearest Waypoint on a Route: measure the distance to all waypoints on the route, and start navigation to the closest or optimal waypoint on the route (left to the implementation) and from there to waypoints following next waypoint along the route.\"},",
          "2684:     {0x0, NULL}",
          "2685: };",
          "2687: static const value_string ln_control_point_response_value[] = {",
          "2688:     { 0x01,   \"Success\"},",
          "2689:     { 0x02,   \"Opcode not Supported\"},",
          "2690:     { 0x03,   \"Invalid Parameter\"},",
          "2691:     { 0x04,   \"Operation Failed\"},",
          "2692:     {0x0, NULL}",
          "2693: };",
          "2695: static const value_string body_composition_measurement_flags_measurement_units_vals[] = {",
          "2696:     { 0,   \"SI (kg & m)\"},",
          "2697:     { 1,   \"Imperial (lb & in)\"},",
          "2698:     {0x0, NULL}",
          "2699: };",
          "2701: static const value_string user_control_point_opcode_vals[] = {",
          "2702:     { 0x01,   \"Register New User\"},",
          "2703:     { 0x02,   \"Consent\"},",
          "2704:     { 0x03,   \"Delete User Data\"},",
          "2705:     { 0x20,   \"Response Code\"},",
          "2706:     {0x0, NULL}",
          "2707: };",
          "2709: static const value_string user_control_point_response_value_vals[] = {",
          "2710:     { 0x01,   \"Success\"},",
          "2711:     { 0x02,   \"Opcode not Supported\"},",
          "2712:     { 0x03,   \"Invalid Parameter\"},",
          "2713:     { 0x04,   \"Operation Failed\"},",
          "2714:     { 0x04,   \"User not Authorized\"},",
          "2715:     {0x0, NULL}",
          "2716: };",
          "2718: static const value_string cgm_feature_type_vals[] = {",
          "2719:     { 0x01,   \"Capillary Whole Blood\"},",
          "2720:     { 0x02,   \"Capillary Plasma\"},",
          "2721:     { 0x03,   \"Capillary Whole Blood\"},",
          "2722:     { 0x04,   \"Venous Plasma\"},",
          "2723:     { 0x05,   \"Arterial Whole Blood\"},",
          "2724:     { 0x06,   \"Arterial Plasma\"},",
          "2725:     { 0x07,   \"Undetermined Whole Blood\"},",
          "2726:     { 0x08,   \"Undetermined Plasma\"},",
          "2727:     { 0x09,   \"Interstitial Fluid (ISF)\"},",
          "2728:     { 0x0A,   \"Control Solution\"},",
          "2729:     {0x0, NULL}",
          "2730: };",
          "2732: static const value_string cgm_feature_sample_location_vals[] = {",
          "2733:     { 0x01,   \"Finger\"},",
          "2734:     { 0x02,   \"Alternate Site Test (AST)\"},",
          "2735:     { 0x03,   \"Earlobe\"},",
          "2736:     { 0x04,   \"Control Solution\"},",
          "2737:     { 0x05,   \"Subcutaneous Tissue\"},",
          "2738:     { 0x0F,   \"Sample Location Value not Available\"},",
          "2739:     {0x0, NULL}",
          "2740: };",
          "2742: static const value_string cgm_specific_ops_control_point_opcode_vals[] = {",
          "2743:     { 0x01,   \"Set CGM Communication Interval\"},",
          "2744:     { 0x02,   \"Get CGM Communication Interval\"},",
          "2745:     { 0x03,   \"CGM Communication Interval response\"},",
          "2746:     { 0x04,   \"Set Glucose Calibration Value\"},",
          "2747:     { 0x05,   \"Get Glucose Calibration Value\"},",
          "2748:     { 0x06,   \"Glucose Calibration Value response\"},",
          "2749:     { 0x07,   \"Set Patient High Alert Level\"},",
          "2750:     { 0x08,   \"Get Patient High Alert Level\"},",
          "2751:     { 0x09,   \"Patient High Alert Level Response\"},",
          "2752:     { 0x0A,   \"Set Patient Low Alert Level\"},",
          "2753:     { 0x0B,   \"Get Patient Low Alert Level\"},",
          "2754:     { 0x0C,   \"Patient Low Alert Level Response\"},",
          "2755:     { 0x0D,   \"Set Hypo Alert Level\"},",
          "2756:     { 0x0E,   \"Get Hypo Alert Level\"},",
          "2757:     { 0x0F,   \"Hypo Alert Level Response\"},",
          "2758:     { 0x10,   \"Set Hyper Alert Level\"},",
          "2759:     { 0x11,   \"Get Hyper Alert Level\"},",
          "2760:     { 0x12,   \"Hyper Alert Level Response\"},",
          "2761:     { 0x13,   \"Set Rate of Decrease Alert Level\"},",
          "2762:     { 0x14,   \"Get Rate of Decrease Alert Level\"},",
          "2763:     { 0x15,   \"Rate of Decrease Alert Level Response\"},",
          "2764:     { 0x16,   \"Set Rate of Increase Alert Level\"},",
          "2765:     { 0x17,   \"Get Rate of Increase Alert Level\"},",
          "2766:     { 0x18,   \"Rate of Increase Alert Level Response\"},",
          "2767:     { 0x19,   \"Reset Device Specific Alert\"},",
          "2768:     { 0x1A,   \"Start the Session\"},",
          "2769:     { 0x1B,   \"Stop the Session\"},",
          "2770:     { 0x1C,   \"Response Code\"},",
          "2771:     {0x0, NULL}",
          "2772: };",
          "2774: static const value_string cgm_specific_ops_control_point_response_code_vals[] = {",
          "2775:     { 0x01,   \"Success\"},",
          "2776:     { 0x02,   \"Op Code not Supported\"},",
          "2777:     { 0x03,   \"Invalid Operand\"},",
          "2778:     { 0x04,   \"Procedure not Completed\"},",
          "2779:     { 0x05,   \"Parameter Out of Range\"},",
          "2780:     {0x0, NULL}",
          "2781: };",
          "2783: static const true_false_string control_point_mask_value_tfs = {",
          "2784:     \"Leave as Default\",",
          "2785:     \"Turn Off\" };",
          "2787: static const true_false_string flags_heading_source_tfs = {",
          "2788:     \"Magnetic Compass\",",
          "2789:     \"Movement\" };",
          "2791: static const true_false_string location_and_speed_flags_speed_and_distance_format_tfs = {",
          "2792:     \"3D\",",
          "2793:     \"2D\" };",
          "2795: static const true_false_string navigation_indicator_type_tfs = {",
          "2796:     \"To Destination\",",
          "2797:     \"To Waypoint\" };",
          "2799: static const true_false_string weight_measurement_flags_measurement_units_tfs = {",
          "2800:     \"Imperial (lb & in)\",",
          "2801:     \"SI (kg & m)\" };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2326:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, bluetooth_data_t *bluetooth_data)",
          "2327: {",
          "2328:     proto_item  *sub_item;",
          "2330:     tvbuff_t    *tvb;",
          "2331:     gint         offset = 0;",
          "2332:     bluetooth_uuid_t sub_uuid;",
          "",
          "[Removed Lines]",
          "2329:     proto_tree  *sub_tree;",
          "",
          "[Added Lines]",
          "3188:     proto_tree  *sub_tree = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2518:         proto_tree_add_item(tree, hf_btatt_report_reference_report_type, tvb, offset, 1, ENC_NA);",
          "2519:         offset += 1;",
          "2521:         break;",
          "2523:         proto_tree_add_item(tree, hf_btatt_esp_trigger_logic, tvb, offset, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3380:         break;",
          "3383:         proto_tree_add_item(tree, hf_btatt_number_of_digitals, tvb, offset, 1, ENC_NA);",
          "3384:         offset += 1;",
          "3386:         break;",
          "3388:         proto_tree_add_item(tree, hf_btatt_value_trigger_setting_condition, tvb, offset, 1, ENC_NA);",
          "3389:         value = tvb_get_guint8(tvb, offset);",
          "3390:         offset += 1;",
          "3392:         if (value >= 1 && value <= 3) {",
          "3393:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3394:             offset += 2;",
          "3395:         } else if (value == 4) {",
          "3396:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, NULL);",
          "3397:             offset += 1;",
          "3398:         } else if (value == 5 || value == 6) {",
          "3399:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3400:             offset += 2;",
          "3402:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_two, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3403:             offset += 2;",
          "3404:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2551:         proto_tree_add_item(tree, hf_btatt_esp_operand, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA);",
          "2552:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2553:         break;",
          "2555:         proto_tree_add_item(tree, hf_btatt_hogp_bcd_hid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3438:         break;",
          "3441:         proto_tree_add_item(tree, hf_btatt_time_trigger_setting_condition, tvb, offset, 1, ENC_NA);",
          "3442:         value = tvb_get_guint8(tvb, offset);",
          "3443:         offset += 1;",
          "3445:         if (value == 0) {",
          "3446:             proto_tree_add_item(tree, hf_btatt_time_trigger_setting_value, tvb, offset, 1, ENC_NA);",
          "3447:             offset += 1;",
          "3448:         } else if (value == 1 || value == 2) {",
          "3449:             proto_tree_add_item(tree, hf_btatt_time_trigger_setting_value_time_interval, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "3450:             offset += 3;",
          "3451:         } else if (value == 3) {",
          "3452:             proto_tree_add_item(tree, hf_btatt_time_trigger_setting_value_count, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3453:             offset += 2;",
          "3454:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3333:         proto_item_set_len(sub_item, offset - operand_offset);",
          "3335:         break;",
          "3338:         offset += 2;",
          "3340:         break;",
          "3343:         offset += 2;",
          "3345:         break;",
          "3348:         offset += 1;",
          "3380:         break;",
          "3385:         break;",
          "3388:         offset += 2;",
          "3390:         break;",
          "3393:         offset += 2;",
          "3395:         break;",
          "3403:         offset += 1;",
          "3425:         break;",
          "3430:         break;",
          "3433:         offset += 1;",
          "3435:         break;",
          "3443:         offset += 2;",
          "3447:             offset += 2;",
          "3454:         }",
          "3513:         break;",
          "3516:         offset += 1;",
          "3537:         break;",
          "3542:         break;",
          "3545:         offset += 1;",
          "3669:         }",
          "3671:         break;",
          "3892:         }",
          "3902:         }",
          "3907:         }",
          "3952:             break;",
          "3955:             break;",
          "3958:             break;",
          "3993:         break;",
          "3998:         offset += 2;",
          "4008:         break;",
          "4022:         break;",
          "4028:         offset += 2;",
          "4031:         offset += 2;",
          "4042:         break;",
          "4093:         break;",
          "4108:         offset += 2;",
          "4124:         break;",
          "4145:         break;",
          "4156:         offset += 2;",
          "4190:         break;",
          "4245:         }",
          "4251:         }",
          "4263:             else",
          "4267:         }",
          "4287:         }",
          "4288:         break;",
          "4333:         }",
          "4339:         }",
          "4349:         }",
          "4364:         break;",
          "4396:             }",
          "4402:         }",
          "4421:         }",
          "4422:         break;",
          "4426:         break;",
          "4436:         offset += 2;",
          "4444:         }",
          "4469:         }",
          "4473:         break;",
          "4487:         }",
          "4492:         break;",
          "4513:         }",
          "4515:         break;",
          "4522:         }",
          "4563:             NULL, HFILL}",
          "4564:         },",
          "4568:             NULL, HFILL}",
          "4569:         },",
          "4573:             NULL, HFILL}",
          "4574:         },",
          "4578:             NULL, HFILL}",
          "4579:         },",
          "4583:             NULL, HFILL}",
          "4584:         },",
          "4588:             NULL, HFILL}",
          "4589:         },",
          "4593:             NULL, HFILL}",
          "4594:         },",
          "4598:             NULL, HFILL}",
          "4599:         },",
          "4603:             NULL, HFILL}",
          "4604:         },",
          "4608:             NULL, HFILL}",
          "4609:         },",
          "4613:             NULL, HFILL}",
          "4614:         },",
          "4618:             NULL, HFILL}",
          "4619:         },",
          "4623:             NULL, HFILL}",
          "4624:         },",
          "4628:             NULL, HFILL}",
          "4629:         },",
          "4633:             NULL, HFILL}",
          "4634:         },",
          "4638:             NULL, HFILL}",
          "4639:         },",
          "4648:             NULL, HFILL}",
          "4649:         },",
          "4653:             NULL, HFILL}",
          "4654:         },",
          "4658:             NULL, HFILL}",
          "4659:         },",
          "4663:             NULL, HFILL}",
          "4664:         },",
          "4668:             NULL, HFILL}",
          "4669:         },",
          "4673:             NULL, HFILL}",
          "4674:         },",
          "4678:             NULL, HFILL}",
          "4679:         },",
          "4683:             NULL, HFILL}",
          "4684:         },",
          "4688:             NULL, HFILL}",
          "4689:         },",
          "4693:             NULL, HFILL}",
          "4694:         },",
          "4698:             NULL, HFILL}",
          "4699:         },",
          "4703:             NULL, HFILL}",
          "4704:         },",
          "4708:             NULL, HFILL}",
          "4709:         },",
          "4712:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4713:             NULL, HFILL}",
          "4714:         },",
          "4718:             NULL, HFILL}",
          "4719:         },",
          "4723:             NULL, HFILL}",
          "4724:         },",
          "4728:             NULL, HFILL}",
          "4729:         },",
          "4733:             NULL, HFILL}",
          "4734:         },",
          "4738:             NULL, HFILL}",
          "4739:         },",
          "4743:             NULL, HFILL}",
          "4744:         },",
          "4748:             NULL, HFILL}",
          "4749:         },",
          "4753:             NULL, HFILL}",
          "4754:         },",
          "4758:             NULL, HFILL}",
          "4759:         },",
          "4763:             NULL, HFILL}",
          "4764:         },",
          "4768:             NULL, HFILL}",
          "4769:         },",
          "4773:             NULL, HFILL}",
          "4774:         },",
          "4778:             NULL, HFILL}",
          "4779:         },",
          "4783:             NULL, HFILL}",
          "4784:         },",
          "4788:             NULL, HFILL}",
          "4789:         },",
          "4793:             NULL, HFILL}",
          "4794:         },",
          "4798:             NULL, HFILL}",
          "4799:         },",
          "4803:             NULL, HFILL}",
          "4804:         },",
          "4808:             NULL, HFILL}",
          "4809:         },",
          "4813:             NULL, HFILL}",
          "4814:         },",
          "4818:             NULL, HFILL}",
          "4819:         },",
          "4823:             NULL, HFILL}",
          "4824:         },",
          "4828:             NULL, HFILL}",
          "4829:         },",
          "4833:             NULL, HFILL}",
          "4834:         },",
          "4838:             NULL, HFILL}",
          "4839:         },",
          "4843:             NULL, HFILL}",
          "4844:         },",
          "4848:             NULL, HFILL}",
          "4849:         },",
          "4853:             NULL, HFILL}",
          "4854:         },",
          "4858:             NULL, HFILL}",
          "4859:         },",
          "4863:             NULL, HFILL}",
          "4864:         },",
          "4868:             NULL, HFILL}",
          "4869:         },",
          "4873:             NULL, HFILL}",
          "4874:         },",
          "4878:             NULL, HFILL}",
          "4879:         },",
          "4883:             NULL, HFILL}",
          "4884:         },",
          "4888:             NULL, HFILL}",
          "4889:         },",
          "4893:             NULL, HFILL}",
          "4894:         },",
          "4898:             NULL, HFILL}",
          "4899:         },",
          "4903:             NULL, HFILL}",
          "4904:         },",
          "4907:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4908:             NULL, HFILL}",
          "4909:         },",
          "4913:             NULL, HFILL}",
          "4914:         },",
          "4918:             NULL, HFILL}",
          "4919:         },",
          "4923:             NULL, HFILL}",
          "4924:         },",
          "4928:             NULL, HFILL}",
          "4929:         },",
          "4933:             NULL, HFILL}",
          "4934:         },",
          "4938:             NULL, HFILL}",
          "4939:         },",
          "4943:             NULL, HFILL}",
          "4944:         },",
          "4948:             NULL, HFILL}",
          "4949:         },",
          "4953:             NULL, HFILL}",
          "4954:         },",
          "4958:             NULL, HFILL}",
          "4959:         },",
          "4963:             NULL, HFILL}",
          "4964:         },",
          "4968:             NULL, HFILL}",
          "4969:         },",
          "4973:             NULL, HFILL}",
          "4974:         },",
          "4979:         },",
          "4983:             NULL, HFILL}",
          "4984:         },",
          "4988:             NULL, HFILL}",
          "4989:         },",
          "4993:             NULL, HFILL}",
          "4994:         },",
          "4997:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4998:             NULL, HFILL}",
          "4999:         },",
          "5003:             NULL, HFILL}",
          "5004:         },",
          "5008:             NULL, HFILL}",
          "5009:         },",
          "5013:             NULL, HFILL}",
          "5014:         },",
          "5018:             NULL, HFILL}",
          "5019:         },",
          "5023:             NULL, HFILL}",
          "5024:         },",
          "5028:             NULL, HFILL}",
          "5029:         },",
          "5033:             NULL, HFILL}",
          "5034:         },",
          "5038:             NULL, HFILL}",
          "5039:         },",
          "5043:             NULL, HFILL}",
          "5044:         },",
          "5047:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5053:             NULL, HFILL}",
          "5054:         },",
          "5058:             NULL, HFILL}",
          "5059:         },",
          "5063:             NULL, HFILL}",
          "5064:         },",
          "5068:             NULL, HFILL}",
          "5069:         },",
          "5073:             NULL, HFILL}",
          "5074:         },",
          "5078:             NULL, HFILL}",
          "5079:         },",
          "5083:             NULL, HFILL}",
          "5084:         },",
          "5088:             NULL, HFILL}",
          "5089:         },",
          "5093:             NULL, HFILL}",
          "5094:         },",
          "5098:             NULL, HFILL}",
          "5099:         },",
          "5103:             NULL, HFILL}",
          "5104:         },",
          "5108:             NULL, HFILL}",
          "5109:         },",
          "5113:             NULL, HFILL}",
          "5114:         },",
          "5118:             NULL, HFILL}",
          "5119:         },",
          "5123:             NULL, HFILL}",
          "5124:         },",
          "5128:             NULL, HFILL}",
          "5129:         },",
          "5133:             NULL, HFILL}",
          "5134:         },",
          "5138:             NULL, HFILL}",
          "5139:         },",
          "5143:             NULL, HFILL}",
          "5144:         },",
          "5148:             NULL, HFILL}",
          "5149:         },",
          "5152:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5153:             NULL, HFILL}",
          "5154:         },",
          "5158:             NULL, HFILL}",
          "5159:         },",
          "5163:             NULL, HFILL}",
          "5164:         },",
          "5168:             NULL, HFILL}",
          "5169:         },",
          "5173:             NULL, HFILL}",
          "5174:         },",
          "5178:             NULL, HFILL}",
          "5179:         },",
          "5183:             NULL, HFILL}",
          "5184:         },",
          "5188:             NULL, HFILL}",
          "5189:         },",
          "5193:             NULL, HFILL}",
          "5194:         },",
          "5198:             NULL, HFILL}",
          "5199:         },",
          "5203:             NULL, HFILL}",
          "5204:         },",
          "5208:             NULL, HFILL}",
          "5209:         },",
          "5213:             NULL, HFILL}",
          "5214:         },",
          "5218:             NULL, HFILL}",
          "5219:         },",
          "5223:             NULL, HFILL}",
          "5224:         },",
          "5228:             NULL, HFILL}",
          "5229:         },",
          "5233:             NULL, HFILL}",
          "5234:         },",
          "5238:             NULL, HFILL}",
          "5239:         },",
          "5243:             NULL, HFILL}",
          "5244:         },",
          "5248:             NULL, HFILL}",
          "5249:         },",
          "5253:             NULL, HFILL}",
          "5254:         },",
          "5258:             NULL, HFILL}",
          "5259:         },",
          "5263:             NULL, HFILL}",
          "5264:         },",
          "5268:             NULL, HFILL}",
          "5269:         },",
          "5273:             NULL, HFILL}",
          "5274:         },",
          "5278:             NULL, HFILL}",
          "5279:         },",
          "5283:             NULL, HFILL}",
          "5284:         },",
          "5288:             NULL, HFILL}",
          "5289:         },",
          "5293:             NULL, HFILL}",
          "5294:         },",
          "5298:             NULL, HFILL}",
          "5299:         },",
          "5303:             NULL, HFILL}",
          "5304:         },",
          "5308:             NULL, HFILL}",
          "5309:         },",
          "5313:             NULL, HFILL}",
          "5314:         },",
          "5318:             NULL, HFILL}",
          "5319:         },",
          "5322:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5323:             NULL, HFILL}",
          "5324:         },",
          "5328:             NULL, HFILL}",
          "5329:         },",
          "5333:             NULL, HFILL}",
          "5334:         },",
          "5338:             NULL, HFILL}",
          "5339:         },",
          "5343:             NULL, HFILL}",
          "5344:         },",
          "5348:             NULL, HFILL}",
          "5349:         },",
          "5353:             NULL, HFILL}",
          "5354:         },",
          "5358:             NULL, HFILL}",
          "5359:         },",
          "5363:             NULL, HFILL}",
          "5364:         },",
          "5368:             NULL, HFILL}",
          "5369:         },",
          "5373:             NULL, HFILL}",
          "5374:         },",
          "5378:             NULL, HFILL}",
          "5379:         },",
          "5389:         },",
          "5394:         },",
          "5399:         },",
          "5404:         },",
          "5409:         },",
          "5413:             NULL, HFILL}",
          "5414:         },",
          "5418:             NULL, HFILL}",
          "5419:         },",
          "5423:             NULL, HFILL}",
          "5424:         },",
          "5428:             NULL, HFILL}",
          "5429:         },",
          "5433:             NULL, HFILL}",
          "5434:         },",
          "5438:             NULL, HFILL}",
          "5439:         },",
          "5443:             NULL, HFILL}",
          "5444:         },",
          "5448:             NULL, HFILL}",
          "5449:         },",
          "5453:             NULL, HFILL}",
          "5454:         },",
          "5458:             NULL, HFILL}",
          "5459:         },",
          "5463:             NULL, HFILL}",
          "5464:         },",
          "5468:             NULL, HFILL}",
          "5469:         },",
          "5473:             NULL, HFILL}",
          "5474:         },",
          "5478:             NULL, HFILL}",
          "5479:         },",
          "5483:             NULL, HFILL}",
          "5484:         },",
          "5488:             NULL, HFILL}",
          "5489:         },",
          "5493:             NULL, HFILL}",
          "5494:         },",
          "5498:             NULL, HFILL}",
          "5499:         },",
          "5503:             NULL, HFILL}",
          "5504:         },",
          "5508:             NULL, HFILL}",
          "5509:         },",
          "5512:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5513:             NULL, HFILL}",
          "5514:         },",
          "5518:             NULL, HFILL}",
          "5519:         },",
          "5523:             NULL, HFILL}",
          "5524:         },",
          "5528:             NULL, HFILL}",
          "5529:         },",
          "5533:             NULL, HFILL}",
          "5534:         },",
          "5538:             NULL, HFILL}",
          "5539:         },",
          "5543:             NULL, HFILL}",
          "5544:         },",
          "5548:             NULL, HFILL}",
          "5549:         },",
          "5553:             NULL, HFILL}",
          "5554:         },",
          "5558:             NULL, HFILL}",
          "5559:         },",
          "5563:             NULL, HFILL}",
          "5564:         },",
          "5568:             NULL, HFILL}",
          "5569:         },",
          "5573:             NULL, HFILL}",
          "5574:         },",
          "5578:             NULL, HFILL}",
          "5579:         },",
          "5583:             NULL, HFILL}",
          "5584:         },",
          "5588:             NULL, HFILL}",
          "5589:         },",
          "5592:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5593:             NULL, HFILL}",
          "5594:         },",
          "5598:             NULL, HFILL}",
          "5599:         },",
          "5603:             NULL, HFILL}",
          "5604:         },",
          "5608:             NULL, HFILL}",
          "5609:         },",
          "5613:             NULL, HFILL}",
          "5614:         },",
          "5618:             NULL, HFILL}",
          "5619:         },",
          "5623:             NULL, HFILL}",
          "5624:         },",
          "5628:             NULL, HFILL}",
          "5629:         },",
          "5633:             NULL, HFILL}",
          "5634:         },",
          "5638:             NULL, HFILL}",
          "5639:         },",
          "5643:             NULL, HFILL}",
          "5644:         },",
          "5648:             NULL, HFILL}",
          "5649:         },",
          "5653:             NULL, HFILL}",
          "5654:         },",
          "5658:             NULL, HFILL}",
          "5659:         },",
          "5663:             NULL, HFILL}",
          "5664:         },",
          "5668:             NULL, HFILL}",
          "5669:         },",
          "5673:             NULL, HFILL}",
          "5674:         },",
          "5678:             NULL, HFILL}",
          "5679:         },",
          "5683:             NULL, HFILL}",
          "5684:         },",
          "5688:             NULL, HFILL}",
          "5689:         },",
          "5693:             NULL, HFILL}",
          "5694:         },",
          "5698:             NULL, HFILL}",
          "5699:         },",
          "5703:             NULL, HFILL}",
          "5704:         },",
          "5708:             NULL, HFILL}",
          "5709:         },",
          "5713:             NULL, HFILL}",
          "5714:         },",
          "5718:             NULL, HFILL}",
          "5719:         },",
          "5723:             NULL, HFILL}",
          "5724:         },",
          "5728:             NULL, HFILL}",
          "5729:         },",
          "5733:             NULL, HFILL}",
          "5734:         },",
          "5738:             NULL, HFILL}",
          "5739:         },",
          "5742:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5743:             NULL, HFILL}",
          "5744:         },",
          "5747:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5748:             NULL, HFILL}",
          "5749:         },",
          "5758:             NULL, HFILL}",
          "5759:         },",
          "5763:             NULL, HFILL}",
          "5764:         },",
          "5768:             NULL, HFILL}",
          "5769:         },",
          "5773:             NULL, HFILL}",
          "5774:         },",
          "5778:             NULL, HFILL}",
          "5779:         },",
          "5782:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5783:             NULL, HFILL}",
          "5784:         },",
          "5788:             NULL, HFILL}",
          "5789:         },",
          "5792:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5793:             NULL, HFILL}",
          "5794:         },",
          "5797:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5798:             NULL, HFILL}",
          "5799:         },",
          "5803:             NULL, HFILL}",
          "5804:         },",
          "5808:             NULL, HFILL}",
          "5809:         },",
          "5813:             NULL, HFILL}",
          "5814:         },",
          "5818:             NULL, HFILL}",
          "5819:         },",
          "5823:             NULL, HFILL}",
          "5824:         },",
          "5828:             NULL, HFILL}",
          "5829:         },",
          "5833:             NULL, HFILL}",
          "5834:         },",
          "5838:             NULL, HFILL}",
          "5839:         },",
          "5843:             NULL, HFILL}",
          "5844:         },",
          "5848:             NULL, HFILL}",
          "5849:         },",
          "5853:             NULL, HFILL}",
          "5854:         },",
          "5858:             NULL, HFILL}",
          "5859:         },",
          "5863:             NULL, HFILL}",
          "5864:         },",
          "5868:             NULL, HFILL}",
          "5869:         },",
          "5873:             NULL, HFILL}",
          "5874:         },",
          "5878:             NULL, HFILL}",
          "5879:         },",
          "5883:             NULL, HFILL}",
          "5884:         },",
          "5888:             NULL, HFILL}",
          "5889:         },",
          "5893:             NULL, HFILL}",
          "5894:         },",
          "5898:             NULL, HFILL}",
          "5899:         },",
          "5903:             NULL, HFILL}",
          "5904:         },",
          "5908:             NULL, HFILL}",
          "5909:         },",
          "5913:             NULL, HFILL}",
          "5914:         },",
          "5918:             NULL, HFILL}",
          "5919:         },",
          "5923:             NULL, HFILL}",
          "5924:         },",
          "5928:             NULL, HFILL}",
          "5929:         },",
          "5933:             NULL, HFILL}",
          "5934:         },",
          "5938:             NULL, HFILL}",
          "5939:         },",
          "5943:             NULL, HFILL}",
          "5944:         },",
          "5948:             NULL, HFILL}",
          "5949:         },",
          "5953:             NULL, HFILL}",
          "5954:         },",
          "5958:             NULL, HFILL}",
          "5959:         },",
          "5963:             NULL, HFILL}",
          "5964:         },",
          "5968:             NULL, HFILL}",
          "5969:         },",
          "5973:             NULL, HFILL}",
          "5974:         },",
          "5978:             NULL, HFILL}",
          "5979:         },",
          "5983:             NULL, HFILL}",
          "5984:         },",
          "5988:             NULL, HFILL}",
          "5989:         },",
          "5993:             NULL, HFILL}",
          "5994:         },",
          "5998:             NULL, HFILL}",
          "5999:         },",
          "6003:             NULL, HFILL}",
          "6004:         },",
          "6008:             NULL, HFILL}",
          "6009:         },",
          "6013:             NULL, HFILL}",
          "6014:         },",
          "6018:             NULL, HFILL}",
          "6019:         },",
          "6023:             NULL, HFILL}",
          "6024:         },",
          "6028:             NULL, HFILL}",
          "6029:         },",
          "6033:             NULL, HFILL}",
          "6034:         },",
          "6038:             NULL, HFILL}",
          "6039:         },",
          "6043:             NULL, HFILL}",
          "6044:         },",
          "6048:             NULL, HFILL}",
          "6049:         },",
          "6053:             NULL, HFILL}",
          "6054:         },",
          "6058:             NULL, HFILL}",
          "6059:         },",
          "6063:             NULL, HFILL}",
          "6064:         },",
          "6068:             NULL, HFILL}",
          "6069:         },",
          "6073:             NULL, HFILL}",
          "6074:         },",
          "6078:             NULL, HFILL}",
          "6079:         },",
          "6083:             NULL, HFILL}",
          "6084:         },",
          "6088:             NULL, HFILL}",
          "6089:         },",
          "6093:             NULL, HFILL}",
          "6094:         },",
          "6098:             NULL, HFILL}",
          "6099:         },",
          "6103:             NULL, HFILL}",
          "6104:         },",
          "6108:             NULL, HFILL}",
          "6109:         },",
          "6113:             NULL, HFILL}",
          "6114:         },",
          "6118:             NULL, HFILL}",
          "6119:         },",
          "6123:             NULL, HFILL}",
          "6124:         },",
          "6128:             NULL, HFILL}",
          "6129:         },",
          "6133:             NULL, HFILL}",
          "6134:         },",
          "6138:             NULL, HFILL}",
          "6139:         },",
          "6143:             NULL, HFILL}",
          "6144:         },",
          "6148:             NULL, HFILL}",
          "6149:         },",
          "6153:             NULL, HFILL}",
          "6154:         },",
          "6158:             NULL, HFILL}",
          "6159:         },",
          "6163:             NULL, HFILL}",
          "6164:         },",
          "6168:             NULL, HFILL}",
          "6169:         },",
          "6173:             NULL, HFILL}",
          "6174:         },",
          "6178:             NULL, HFILL}",
          "6179:         },",
          "6183:             NULL, HFILL}",
          "6184:         },",
          "6188:             NULL, HFILL}",
          "6189:         },",
          "6193:             NULL, HFILL}",
          "6194:         },",
          "6198:             NULL, HFILL}",
          "6199:         },",
          "6203:             NULL, HFILL}",
          "6204:         },",
          "6207:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6208:             NULL, HFILL}",
          "6209:         },",
          "6213:             NULL, HFILL}",
          "6214:         },",
          "6218:             NULL, HFILL}",
          "6219:         },",
          "6224:             NULL, HFILL}",
          "6225:         },",
          "6230:             NULL, HFILL}",
          "6231:         },",
          "6235:             NULL, HFILL}",
          "6236:         },",
          "6240:             NULL, HFILL}",
          "6241:         },",
          "6245:             NULL, HFILL}",
          "6246:         },",
          "6250:             NULL, HFILL}",
          "6251:         },",
          "6255:             NULL, HFILL}",
          "6256:         },",
          "6259:             FT_BOOLEAN, 16, NULL, 0x0800,",
          "6260:             NULL, HFILL}",
          "6261:         },",
          "6264:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "6265:             NULL, HFILL}",
          "6266:         },",
          "6269:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "6270:             NULL, HFILL}",
          "6271:         },",
          "6274:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "6275:             NULL, HFILL}",
          "6276:         },",
          "6279:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "6280:             NULL, HFILL}",
          "6281:         },",
          "6284:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "6285:             NULL, HFILL}",
          "6286:         },",
          "6289:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "6290:             NULL, HFILL}",
          "6291:         },",
          "6294:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "6295:             NULL, HFILL}",
          "6296:         },",
          "6299:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "6300:             NULL, HFILL}",
          "6301:         },",
          "6304:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "6305:             NULL, HFILL}",
          "6306:         },",
          "6309:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "6310:             NULL, HFILL}",
          "6311:         },",
          "6315:             NULL, HFILL}",
          "6316:         },",
          "6320:             NULL, HFILL}",
          "6321:         },",
          "6325:             NULL, HFILL}",
          "6326:         },",
          "6330:             NULL, HFILL}",
          "6331:         },",
          "6335:             NULL, HFILL}",
          "6336:         },",
          "6340:             NULL, HFILL}",
          "6341:         },",
          "6345:             NULL, HFILL}",
          "6346:         },",
          "6350:             NULL, HFILL}",
          "6351:         },",
          "6355:             NULL, HFILL}",
          "6356:         },",
          "6360:             NULL, HFILL}",
          "6361:         },",
          "6365:             NULL, HFILL}",
          "6366:         },",
          "6370:             NULL, HFILL}",
          "6371:         },",
          "6375:             NULL, HFILL}",
          "6376:         },",
          "6380:             NULL, HFILL}",
          "6381:         },",
          "6385:             NULL, HFILL}",
          "6386:         },",
          "6390:             NULL, HFILL}",
          "6391:         },",
          "6395:             NULL, HFILL}",
          "6396:         },",
          "6400:             NULL, HFILL}",
          "6401:         },",
          "6405:             NULL, HFILL}",
          "6406:         },",
          "6410:             NULL, HFILL}",
          "6411:         },",
          "6415:             NULL, HFILL}",
          "6416:         },",
          "6420:             NULL, HFILL}",
          "6421:         },",
          "6425:             NULL, HFILL}",
          "6426:         },",
          "6430:             NULL, HFILL}",
          "6431:         },",
          "6435:             NULL, HFILL}",
          "6436:         },",
          "6440:             NULL, HFILL}",
          "6441:         },",
          "6445:             NULL, HFILL}",
          "6446:         },",
          "6450:             NULL, HFILL}",
          "6451:         },",
          "6455:             NULL, HFILL}",
          "6456:         },",
          "6460:             NULL, HFILL}",
          "6461:         },",
          "6465:             NULL, HFILL}",
          "6466:         },",
          "6470:             NULL, HFILL}",
          "6471:         },",
          "6475:             NULL, HFILL}",
          "6476:         },",
          "6481:             NULL, HFILL}",
          "6482:         },",
          "6487:             NULL, HFILL}",
          "6488:         },",
          "6492:             NULL, HFILL}",
          "6493:         },",
          "6496:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6497:             NULL, HFILL}",
          "6498:         },",
          "6501:             FT_BOOLEAN, 8, NULL, 0x80,",
          "6502:             NULL, HFILL}",
          "6503:         },",
          "6507:             NULL, HFILL}",
          "6508:         },",
          "6512:             NULL, HFILL}",
          "6513:         },",
          "6516:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6517:             NULL, HFILL}",
          "6518:         },",
          "6521:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6522:             NULL, HFILL}",
          "6523:         },",
          "6526:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6527:             NULL, HFILL}",
          "6528:         },",
          "6531:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6532:             NULL, HFILL}",
          "6533:         },",
          "6536:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6537:             NULL, HFILL}",
          "6538:         },",
          "6542:             NULL, HFILL}",
          "6543:         },",
          "6547:             NULL, HFILL}",
          "6548:         },",
          "6552:             NULL, HFILL}",
          "6553:         },",
          "6557:             NULL, HFILL}",
          "6558:         },",
          "6563:             NULL, HFILL}",
          "6564:         },",
          "6568:             NULL, HFILL}",
          "6569:         },",
          "6572:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6573:             NULL, HFILL}",
          "6574:         },",
          "6578:             NULL, HFILL}",
          "6579:         },",
          "6583:             NULL, HFILL}",
          "6584:         },",
          "6588:             NULL, HFILL}",
          "6589:         },",
          "6593:             NULL, HFILL}",
          "6594:         },",
          "6598:             NULL, HFILL}",
          "6599:         },",
          "6604:             NULL, HFILL}",
          "6605:         },",
          "6609:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6610:             NULL, HFILL}",
          "6611:         },",
          "6615:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6616:             NULL, HFILL}",
          "6617:         },",
          "6621:             NULL, HFILL}",
          "6622:         },",
          "6626:             NULL, HFILL}",
          "6627:         },",
          "6631:             NULL, HFILL}",
          "6632:         },",
          "6636:             NULL, HFILL}",
          "6637:         },",
          "6641:             NULL, HFILL}",
          "6642:         },",
          "6646:             NULL, HFILL}",
          "6647:         },",
          "6651:             NULL, HFILL}",
          "6652:         },",
          "6657:             NULL, HFILL}",
          "6658:         },",
          "6663:             NULL, HFILL}",
          "6664:         },",
          "6669:             NULL, HFILL}",
          "6670:         },",
          "6675:             NULL, HFILL}",
          "6676:         },",
          "6681:             NULL, HFILL}",
          "6682:         },",
          "6687:             NULL, HFILL}",
          "6688:         },",
          "6692:             NULL, HFILL}",
          "6693:         },",
          "6698:             NULL, HFILL}",
          "6699:         },",
          "6703:             NULL, HFILL}",
          "6704:         },",
          "6708:             NULL, HFILL}",
          "6709:         },",
          "6713:             NULL, HFILL}",
          "6714:         },",
          "6718:             NULL, HFILL}",
          "6719:         },",
          "6723:             NULL, HFILL}",
          "6724:         },",
          "6728:             NULL, HFILL}",
          "6729:         },",
          "6733:             NULL, HFILL}",
          "6734:         },",
          "6738:             NULL, HFILL}",
          "6739:         },",
          "6743:             NULL, HFILL}",
          "6744:         },",
          "6748:             NULL, HFILL}",
          "6749:         },",
          "6753:             NULL, HFILL}",
          "6754:         },",
          "6758:             NULL, HFILL}",
          "6759:         },",
          "6763:             NULL, HFILL}",
          "6764:         },",
          "6768:             NULL, HFILL}",
          "6769:         },",
          "6773:             NULL, HFILL}",
          "6774:         },",
          "6778:             NULL, HFILL}",
          "6779:         },",
          "6782:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6783:             NULL, HFILL}",
          "6784:         },",
          "6787:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6788:             NULL, HFILL}",
          "6789:         },",
          "6792:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6793:             NULL, HFILL}",
          "6794:         },",
          "6798:             NULL, HFILL}",
          "6799:         },",
          "6803:             NULL, HFILL}",
          "6804:         },",
          "6808:             NULL, HFILL}",
          "6809:         },",
          "6813:             NULL, HFILL}",
          "6814:         },",
          "6818:             NULL, HFILL}",
          "6819:         },",
          "6822:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6823:             NULL, HFILL}",
          "6824:         },",
          "6828:             NULL, HFILL}",
          "6829:         },",
          "6833:             NULL, HFILL}",
          "6834:         },",
          "6838:             NULL, HFILL}",
          "6839:         },",
          "6840:         {&hf_request_in_frame,",
          "",
          "[Removed Lines]",
          "3337:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_rsc_feature, ett_btatt_value, hfx_btatt_rsc_feature, ENC_LITTLE_ENDIAN);",
          "3342:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_csc_feature, ett_btatt_value, hfx_btatt_csc_feature, ENC_LITTLE_ENDIAN);",
          "3347:         proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "3350:         break;",
          "3352:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_feature, ett_btatt_value, hfx_btatt_cycling_power_feature, ENC_LITTLE_ENDIAN);",
          "3353:         offset += 4;",
          "3355:         break;",
          "3357:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_ln_feature, ett_btatt_value, hfx_btatt_ln_feature, ENC_LITTLE_ENDIAN);",
          "3358:         offset += 4;",
          "3360:         break;",
          "3362:         proto_tree_add_item(tree, hf_btatt_elevation, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "3363:         offset += 3;",
          "3365:         break;",
          "3367:         proto_tree_add_item(tree, hf_btatt_pressure, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3368:         offset += 4;",
          "3370:         break;",
          "3372:         proto_tree_add_item(tree, hf_btatt_temperature, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3373:         offset += 2;",
          "3375:         break;",
          "3377:         proto_tree_add_item(tree, hf_btatt_humidity, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3378:         offset += 2;",
          "3382:         proto_tree_add_item(tree, hf_btatt_true_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3383:         offset += 2;",
          "3387:         proto_tree_add_item(tree, hf_btatt_true_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3392:         proto_tree_add_item(tree, hf_btatt_apparent_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3397:         proto_tree_add_item(tree, hf_btatt_apparent_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3398:         offset += 2;",
          "3400:         break;",
          "3402:         proto_tree_add_item(tree, hf_btatt_gust_factor, tvb, offset, 1, ENC_NA);",
          "3405:         break;",
          "3407:         proto_tree_add_item(tree, hf_btatt_pollen_concentration, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "3408:         offset += 3;",
          "3410:         break;",
          "3412:         proto_tree_add_item(tree, hf_btatt_uv_index, tvb, offset, 1, ENC_NA);",
          "3413:         offset += 1;",
          "3415:         break;",
          "3417:         proto_tree_add_item(tree, hf_btatt_irradiance, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3418:         offset += 2;",
          "3420:         break;",
          "3422:         proto_tree_add_item(tree, hf_btatt_rainfall, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3423:         offset += 2;",
          "3427:         proto_tree_add_item(tree, hf_btatt_wind_chill, tvb, offset, 1, ENC_NA);",
          "3428:         offset += 1;",
          "3432:         proto_tree_add_item(tree, hf_btatt_heart_index, tvb, offset, 1, ENC_NA);",
          "3437:         proto_tree_add_item(tree, hf_btatt_dew_point, tvb, offset, 1, ENC_NA);",
          "3438:         offset += 1;",
          "3440:         break;",
          "3442:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_descriptor_value_changed_flags , ett_btatt_value, hfx_btatt_descriptor_value_changed_flags, ENC_LITTLE_ENDIAN);",
          "3445:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "3446:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3448:         } else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "3449:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "3450:             offset += 16;",
          "3451:         } else {",
          "3452:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3453:             offset = tvb_captured_length(tvb);",
          "3456:         break;",
          "3458:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "3459:         offset += 1;",
          "3461:         break;",
          "3463:         proto_tree_add_item(tree, hf_btatt_aerobic_threshold, tvb, offset, 1, ENC_NA);",
          "3464:         offset += 1;",
          "3466:         break;",
          "3468:         proto_tree_add_item(tree, hf_btatt_age, tvb, offset, 1, ENC_NA);",
          "3469:         offset += 1;",
          "3471:         break;",
          "3473:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "3474:         offset += 1;",
          "3476:         break;",
          "3478:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "3479:         offset += 1;",
          "3481:         break;",
          "3483:         proto_tree_add_item(tree, hf_btatt_anaerobic_threshold, tvb, offset, 1, ENC_NA);",
          "3484:         offset += 1;",
          "3486:         break;",
          "3488:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "3489:         offset += 1;",
          "3491:         break;",
          "3494:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3495:         offset += 2;",
          "3497:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "3498:         offset += 1;",
          "3500:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "3501:         offset += 1;",
          "3503:         break;",
          "3505:         proto_tree_add_item(tree, hf_btatt_email_address, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "3506:         offset += tvb_captured_length_remaining(tvb, offset);",
          "3508:         break;",
          "3510:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "3511:         offset += 1;",
          "3515:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "3518:         break;",
          "3520:         proto_tree_add_item(tree, hf_btatt_first_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "3521:         offset += tvb_captured_length_remaining(tvb, offset);",
          "3523:         break;",
          "3525:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_very_light_light_limit, tvb, offset, 1, ENC_NA);",
          "3526:         offset += 1;",
          "3528:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_light_moderate_limit, tvb, offset, 1, ENC_NA);",
          "3529:         offset += 1;",
          "3531:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit, tvb, offset, 1, ENC_NA);",
          "3532:         offset += 1;",
          "3534:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit, tvb, offset, 1, ENC_NA);",
          "3535:         offset += 1;",
          "3539:         proto_tree_add_item(tree, hf_btatt_gender, tvb, offset, 1, ENC_NA);",
          "3540:         offset += 1;",
          "3544:         proto_tree_add_item(tree, hf_btatt_heart_rate_max, tvb, offset, 1, ENC_NA);",
          "3547:         break;",
          "3549:         proto_tree_add_item(tree, hf_btatt_height, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3550:         offset += 2;",
          "3552:         break;",
          "3554:         proto_tree_add_item(tree, hf_btatt_hip_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3555:         offset += 2;",
          "3557:         break;",
          "3559:         proto_tree_add_item(tree, hf_btatt_last_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "3560:         offset += tvb_captured_length_remaining(tvb, offset);",
          "3562:         break;",
          "3564:         proto_tree_add_item(tree, hf_btatt_maximum_recommended_heart_rate, tvb, offset, 1, ENC_NA);",
          "3565:         offset += 1;",
          "3567:         break;",
          "3569:         proto_tree_add_item(tree, hf_btatt_resting_heart_rate, tvb, offset, 1, ENC_NA);",
          "3570:         offset += 1;",
          "3572:         break;",
          "3574:         proto_tree_add_item(tree, hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds, tvb, offset, 1, ENC_NA);",
          "3575:         offset += 1;",
          "3577:         break;",
          "3579:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_light_moderate, tvb, offset, 1, ENC_NA);",
          "3580:         offset += 1;",
          "3582:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_moderate_hard, tvb, offset, 1, ENC_NA);",
          "3583:         offset += 1;",
          "3585:         break;",
          "3587:         proto_tree_add_item(tree, hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness, tvb, offset, 1, ENC_NA);",
          "3588:         offset += 1;",
          "3590:         break;",
          "3592:         proto_tree_add_item(tree, hf_btatt_vo2_max, tvb, offset, 1, ENC_NA);",
          "3593:         offset += 1;",
          "3595:         break;",
          "3597:         proto_tree_add_item(tree, hf_btatt_waist_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3598:         offset += 2;",
          "3600:         break;",
          "3602:         proto_tree_add_item(tree, hf_btatt_weight, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3603:         offset += 2;",
          "3605:         break;",
          "3607:         proto_tree_add_item(tree, hf_btatt_database_change_increment, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3608:         offset += 4;",
          "3610:         break;",
          "3612:         proto_tree_add_item(tree, hf_btatt_user_index, tvb, offset, 1, ENC_NA);",
          "3613:         offset += 1;",
          "3615:         break;",
          "3617:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_body_composition_feature, ett_btatt_value, hfx_btatt_body_composition_feature, ENC_LITTLE_ENDIAN);",
          "3618:         offset += 4;",
          "3620:         break;",
          "3622:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_weight_scale_feature, ett_btatt_value, hfx_btatt_weight_scale_feature, ENC_LITTLE_ENDIAN);",
          "3623:         offset += 4;",
          "3625:         break;",
          "3628:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_x, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3629:         offset += 2;",
          "3631:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_y, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3632:         offset += 2;",
          "3634:         if (uuid.bt_uuid == 0x2AA1) {",
          "3635:             proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_z, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3636:             offset += 2;",
          "3637:         }",
          "3639:         break;",
          "3641:         proto_tree_add_item(tree, hf_btatt_language, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "3642:         offset += tvb_captured_length_remaining(tvb, offset);",
          "3644:         break;",
          "3646:         proto_tree_add_item(tree, hf_btatt_barometric_pressure_trend, tvb, offset, 1, ENC_NA);",
          "3647:         offset += 1;",
          "3649:         break;",
          "3651:         proto_tree_add_item(tree, hf_btatt_bond_management_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "3652:         offset += 1;",
          "3654:         if (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "3655:             proto_tree_add_item(tree, hf_btatt_bond_management_control_point_authorization_code, tvb, offset, length -1, ENC_NA | ENC_UTF_8);",
          "3656:             offset += tvb_reported_length_remaining(tvb, offset);",
          "3657:         }",
          "3658:         break;",
          "3660:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_bond_management_feature, ett_btatt_value, hfx_btatt_bond_management_feature, ENC_LITTLE_ENDIAN);",
          "3661:         flags = tvb_get_guint24(tvb, offset, ENC_LITTLE_ENDIAN);",
          "3662:         offset += 3;",
          "3664:         if (flags & 0x800000) {",
          "3665:             do {",
          "3666:                 proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_bond_management_feature_nth, ett_btatt_value, hfx_btatt_bond_management_feature_nth, ENC_LITTLE_ENDIAN);",
          "3667:                 offset += 1;",
          "3668:             } while (tvb_get_guint8(tvb, offset - 1) & 0x80);",
          "3673:         proto_tree_add_item(tree, hf_btatt_central_address_resolution, tvb, offset, 1, ENC_NA);",
          "3674:         offset += 1;",
          "3676:         break;",
          "3719:         sub_item = proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3720:         expert_add_info(pinfo, sub_item, &ei_btatt_undecoded);",
          "3721:         offset = tvb_captured_length(tvb);",
          "3723:         break;",
          "3724:     default:",
          "3725:         proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3726:         offset = tvb_captured_length(tvb);",
          "3727:     }",
          "3729:     return old_offset + offset;",
          "3730: }",
          "3732: static int",
          "3733: dissect_btgatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "3734: {",
          "3735:     proto_item  *main_item;",
          "3736:     proto_tree  *main_tree;",
          "3737:     proto_item  *patron_item = NULL;",
          "3738:     bluetooth_uuid_t uuid;",
          "3740:     main_item = proto_tree_add_item(tree, (gint) GPOINTER_TO_UINT(wmem_list_frame_data(wmem_list_tail(pinfo->layers))), tvb, 0, tvb_captured_length(tvb), ENC_NA);",
          "3741:     main_tree = proto_item_add_subtree(main_item, ett_btgatt);",
          "3743:     if (strlen(pinfo->current_proto) > 7) {",
          "3744:         uuid.size = 2;",
          "3745:         uuid.bt_uuid = (guint16) g_ascii_strtoull(pinfo->current_proto + strlen(pinfo->current_proto) - 7, NULL, 16);",
          "3746:         uuid.data[0] = uuid.bt_uuid & 0xFF;",
          "3747:         uuid.data[1] = (uuid.bt_uuid >> 8) & 0xFF;",
          "3748:     } else {",
          "3749:         uuid.size = 2;",
          "3750:         uuid.bt_uuid = 0;",
          "3751:     }",
          "3753:     return dissect_attribute_value(main_tree, patron_item, pinfo, tvb,",
          "3754:             0, tvb_captured_length(tvb), 0, uuid, (bluetooth_data_t *) data);",
          "3756: }",
          "3758: static gboolean",
          "3759: is_long_attribute_value(bluetooth_uuid_t uuid)",
          "3760: {",
          "3761:     switch (uuid.bt_uuid) {",
          "3774:         return TRUE;",
          "3775:     }",
          "3777:     return FALSE;",
          "3778: }",
          "3780: static guint",
          "3781: get_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data)",
          "3782: {",
          "3783:     wmem_tree_key_t  key[3];",
          "3784:     guint32          frame_number;",
          "3785:     mtu_data_t      *mtu_data;",
          "3786:     wmem_tree_t     *sub_wmemtree;",
          "3787:     guint            mtu = 23;",
          "3789:     frame_number = pinfo->fd->num;",
          "3791:     key[0].length = 1;",
          "3792:     key[0].key    = &bluetooth_data->interface_id;",
          "3793:     key[1].length = 1;",
          "3794:     key[1].key    = &bluetooth_data->adapter_id;",
          "3795:     key[2].length = 0;",
          "3796:     key[2].key    = NULL;",
          "3798:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(mtus, key);",
          "3799:     mtu_data = (sub_wmemtree) ? (mtu_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "3801:     if (mtu_data)",
          "3802:         mtu = mtu_data->mtu;",
          "3804:     return mtu;",
          "3805: }",
          "3807: static void",
          "3808: save_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data, guint mtu)",
          "3809: {",
          "3810:     wmem_tree_key_t  key[4];",
          "3811:     guint32          frame_number;",
          "3812:     mtu_data_t      *mtu_data;",
          "3814:     frame_number = pinfo->fd->num;",
          "3816:     key[0].length = 1;",
          "3817:     key[0].key    = &bluetooth_data->interface_id;",
          "3818:     key[1].length = 1;",
          "3819:     key[1].key    = &bluetooth_data->adapter_id;",
          "3820:     key[2].length = 1;",
          "3821:     key[2].key    = &frame_number;",
          "3822:     key[3].length = 0;",
          "3823:     key[3].key    = NULL;",
          "3825:     mtu_data = wmem_new(wmem_file_scope(), mtu_data_t);",
          "3826:     mtu_data->mtu = mtu;",
          "3828:     wmem_tree_insert32_array(mtus, key, mtu_data);",
          "3829: }",
          "3831: static void",
          "3832: save_value_fragment(packet_info *pinfo, tvbuff_t *tvb, gint offset,",
          "3833:         guint32 handle, guint data_offset, bluetooth_data_t *bluetooth_data)",
          "3834: {",
          "3835:     wmem_tree_key_t   key[5];",
          "3836:     guint32           frame_number;",
          "3837:     fragment_data_t  *fragment_data;",
          "3839:     frame_number = pinfo->fd->num;",
          "3841:     key[0].length = 1;",
          "3842:     key[0].key    = &bluetooth_data->interface_id;",
          "3843:     key[1].length = 1;",
          "3844:     key[1].key    = &bluetooth_data->adapter_id;",
          "3845:     key[2].length = 1;",
          "3846:     key[2].key    = &handle;",
          "3847:     key[3].length = 1;",
          "3848:     key[3].key    = &frame_number;",
          "3849:     key[4].length = 0;",
          "3850:     key[4].key    = NULL;",
          "3852:     fragment_data = wmem_new(wmem_file_scope(), fragment_data_t);",
          "3853:     fragment_data->length = tvb_captured_length_remaining(tvb, offset);",
          "3854:     fragment_data->offset = data_offset;",
          "3855:     fragment_data->data_in_frame = frame_number;",
          "3856:     fragment_data->data = (guint8 *) tvb_memdup(wmem_file_scope(), tvb, offset, fragment_data->length);",
          "3858:     wmem_tree_insert32_array(fragments, key, fragment_data);",
          "3859: }",
          "3861: static guint8 *",
          "3862: get_value(packet_info *pinfo, guint32 handle, bluetooth_data_t *bluetooth_data, guint *length)",
          "3863: {",
          "3864:     wmem_tree_key_t   key[4];",
          "3865:     guint32           frame_number;",
          "3866:     fragment_data_t  *fragment_data;",
          "3867:     wmem_tree_t      *sub_wmemtree;",
          "3868:     guint16           last_offset = 0xFFFF;",
          "3869:     guint16           size;",
          "3870:     gboolean          first = TRUE;",
          "3871:     guint8           *data = NULL;",
          "3874:     frame_number = pinfo->fd->num;",
          "3876:     key[0].length = 1;",
          "3877:     key[0].key    = &bluetooth_data->interface_id;",
          "3878:     key[1].length = 1;",
          "3879:     key[1].key    = &bluetooth_data->adapter_id;",
          "3880:     key[2].length = 1;",
          "3881:     key[2].key    = &handle;",
          "3882:     key[3].length = 0;",
          "3883:     key[3].key    = NULL;",
          "3885:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(fragments, key);",
          "3886:     while (1) {",
          "3887:         fragment_data = (sub_wmemtree) ? (fragment_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "3888:         if (!fragment_data || (fragment_data && fragment_data->offset >= last_offset)) {",
          "3889:             if (length)",
          "3891:             return NULL;",
          "3894:         if (first) {",
          "3895:             size = fragment_data->offset + fragment_data->length;",
          "3896:             data = (guint8 *) wmem_alloc(pinfo->pool, size);",
          "3898:             if (length)",
          "3901:             first = FALSE;",
          "3903:         else if (fragment_data->offset + fragment_data->length != last_offset) {",
          "3904:             if (length)",
          "3906:             return NULL;",
          "3909:         memcpy(data + fragment_data->offset, fragment_data->data, fragment_data->length);",
          "3911:         if (fragment_data->offset == 0)",
          "3912:             return data;",
          "3913:         frame_number = fragment_data->data_in_frame - 1;",
          "3914:         last_offset = fragment_data->offset;",
          "3915:     }",
          "3917:     return NULL;",
          "3918: }",
          "3920: static int",
          "3921: dissect_btatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "3922: {",
          "3923:     proto_item        *main_item;",
          "3924:     proto_tree        *main_tree;",
          "3925:     proto_item        *sub_item;",
          "3926:     proto_tree        *sub_tree;",
          "3927:     int                offset = 0;",
          "3928:     guint8             opcode;",
          "3929:     guint8             request_opcode;",
          "3930:     bluetooth_data_t  *bluetooth_data;",
          "3931:     request_data_t    *request_data;",
          "3932:     guint16            handle;",
          "3933:     bluetooth_uuid_t   uuid;",
          "3934:     guint              mtu;",
          "3936:     uuid.size = 0;",
          "3937:     uuid.bt_uuid = 0;",
          "3939:     bluetooth_data = (bluetooth_data_t *) data;",
          "3941:     if (tvb_reported_length_remaining(tvb, 0) < 1)",
          "3942:         return 0;",
          "3944:     main_item = proto_tree_add_item(tree, proto_btatt, tvb, 0, -1, ENC_NA);",
          "3945:     main_tree = proto_item_add_subtree(main_item, ett_btatt);",
          "3947:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"ATT\");",
          "3949:     switch (pinfo->p2p_dir) {",
          "3950:         case P2P_DIR_SENT:",
          "3951:             col_set_str(pinfo->cinfo, COL_INFO, \"Sent \");",
          "3953:         case P2P_DIR_RECV:",
          "3954:             col_set_str(pinfo->cinfo, COL_INFO, \"Rcvd \");",
          "3956:         default:",
          "3957:             col_set_str(pinfo->cinfo, COL_INFO, \"UnknownDirection \");",
          "3959:     }",
          "3961:     mtu = get_mtu(pinfo, bluetooth_data);",
          "3962:     if (tvb_reported_length(tvb) > mtu)",
          "3963:         expert_add_info(pinfo, main_item, &ei_btatt_mtu_exceeded);",
          "3965:     proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_opcode, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "3966:     opcode = tvb_get_guint8(tvb, 0);",
          "3967:     offset++;",
          "3969:     request_data = get_request(tvb, offset, pinfo, opcode, bluetooth_data);",
          "3971:     col_append_str(pinfo->cinfo, COL_INFO, val_to_str_const(opcode, opcode_vals, \"<unknown>\"));",
          "3973:     switch (opcode) {",
          "3975:         proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_req_opcode_in_error, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "3976:         request_opcode = tvb_get_guint8(tvb, offset);",
          "3977:         offset += 1;",
          "3979:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle_in_error, tvb, offset, bluetooth_data, NULL);",
          "3981:         col_append_fstr(pinfo->cinfo, COL_INFO, \" - %s, Handle: 0x%04x\",",
          "3982:                         val_to_str_const(tvb_get_guint8(tvb, offset), error_vals, \"<unknown>\"),",
          "3983:                         tvb_get_letohs(tvb, offset - 2));",
          "3985:         proto_tree_add_item(main_tree, hf_btatt_error_code, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3986:         offset++;",
          "3988:         if (request_data && (request_opcode == 0x08 || request_opcode == 0x10)) {",
          "3989:             sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "3990:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "3991:         }",
          "3996:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Client Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "3997:         proto_tree_add_item(main_tree, hf_btatt_client_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4000:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4001:             union request_parameters_union  request_parameters;",
          "4003:             request_parameters.mtu.mtu = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4005:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4006:         }",
          "4011:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Server Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "4012:         proto_tree_add_item(main_tree, hf_btatt_server_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4013:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data) {",
          "4014:             guint new_mtu;",
          "4016:             new_mtu = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4017:             if (new_mtu > request_data->parameters.mtu.mtu)",
          "4018:                 new_mtu = request_data->parameters.mtu.mtu;",
          "4019:             save_mtu(pinfo, bluetooth_data, new_mtu);",
          "4020:         }",
          "4021:         offset += 2;",
          "4025:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handles: 0x%04x..0x%04x\",",
          "4026:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4027:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4030:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4033:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4034:             union request_parameters_union  request_parameters;",
          "4036:             request_parameters.find_information.starting_handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "4037:             request_parameters.find_information.ending_handle   = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4039:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4040:         }",
          "4045:         {",
          "4046:             guint8  format = tvb_get_guint8(tvb, offset);",
          "4048:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid_format, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "4049:             offset++;",
          "4051:             if (format == 1) {",
          "4052:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "4053:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "4054:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4056:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4057:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4059:                     proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4060:                     uuid = get_uuid(tvb, offset, 2);",
          "4061:                     offset += 2;",
          "4063:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "4064:                             tvb_get_letohs(tvb, offset - 4),",
          "4065:                             print_uuid(&uuid));",
          "4067:                     save_handle(pinfo, uuid, handle, bluetooth_data);",
          "4068:                 }",
          "4069:             }",
          "4070:             else if (format == 2) {",
          "4071:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "4072:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "4073:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4075:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4076:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4078:                     proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "4079:                     uuid = get_uuid(tvb, offset, 16);",
          "4080:                     offset += 16;",
          "4082:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "4083:                             tvb_get_letohs(tvb, offset - 4),",
          "4084:                             print_uuid(&uuid));",
          "4086:                     save_handle(pinfo, uuid, handle, bluetooth_data);",
          "4087:                 }",
          "4088:             }",
          "4089:             else {",
          "4090:                 expert_add_info(pinfo, sub_item, &ei_btatt_uuid_format_unknown);",
          "4091:             }",
          "4092:         }",
          "4096:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "4097:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "4098:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4100:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4101:         offset += 2;",
          "4103:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4104:         offset += 2;",
          "4106:         proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4107:         uuid = get_uuid(tvb, offset - 2, 2);",
          "4110:         dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), 0, uuid, bluetooth_data);",
          "4112:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4113:             union request_parameters_union  request_parameters;",
          "4115:             request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "4116:             request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "4117:             request_parameters.read_by_type.uuid = uuid;",
          "4119:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4120:         }",
          "4122:         offset = tvb_reported_length(tvb);",
          "4127:         while( tvb_reported_length_remaining(tvb, offset) > 0 ) {",
          "4128:             sub_item = proto_tree_add_none_format(main_tree, hf_btatt_handles_info, tvb, offset, 4,",
          "4129:                                             \"Handles Info, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "4130:                                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4132:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4134:             offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4136:             proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4137:             offset += 2;",
          "4139:             if (request_data)",
          "4140:                 save_handle(pinfo, request_data->parameters.read_by_type.uuid,",
          "4141:                         tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "4142:                         bluetooth_data);",
          "4144:         }",
          "4149:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "4150:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "4151:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4153:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4154:         offset += 2;",
          "4155:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4158:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "4159:             proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4160:             offset += 2;",
          "4162:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4163:                 union request_parameters_union  request_parameters;",
          "4165:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "4166:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "4167:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 2, 2);",
          "4169:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4170:             }",
          "4171:         }",
          "4172:         else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "4173:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "4174:             proto_item_append_text(sub_item, \" (%s)\", val_to_str_ext_const(tvb_get_letohs(tvb, offset),",
          "4175:                                             &bluetooth_uuid_vals_ext, \"<unknown>\"));",
          "4176:             offset += 16;",
          "4178:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4179:                 union request_parameters_union  request_parameters;",
          "4181:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 20, ENC_LITTLE_ENDIAN);",
          "4182:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 18, ENC_LITTLE_ENDIAN);",
          "4183:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 16, 16);",
          "4185:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4186:             }",
          "4187:         }",
          "4193:         {",
          "4194:             guint8  length = tvb_get_guint8(tvb, offset);",
          "4196:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "4197:             offset++;",
          "4199:             if(length > 0) {",
          "4200:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\",",
          "4201:                                         tvb_reported_length_remaining(tvb, offset)/length);",
          "4203:                 while (tvb_reported_length_remaining(tvb, offset) >= length)",
          "4204:                 {",
          "4205:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb,",
          "4206:                                                     offset, length, \"Attribute Data, Handle: 0x%04x\",",
          "4207:                                                     tvb_get_letohs(tvb, offset));",
          "4209:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4211:                     if (request_data) {",
          "4212:                         save_handle(pinfo, request_data->parameters.read_by_type.uuid, tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN), bluetooth_data);",
          "4213:                     }",
          "4215:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4217:                     if (request_data) {",
          "4218:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 2, tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "4219:                     } else {",
          "4220:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 2, ENC_NA);",
          "4221:                         offset += length - 2;",
          "4222:                     }",
          "4223:                 }",
          "4224:             }",
          "4226:             if (request_data) {",
          "4227:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "4228:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "4229:             }",
          "4230:         }",
          "4231:         break;",
          "4234:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "4236:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4238:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4239:             union request_parameters_union  request_parameters;",
          "4241:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4242:             request_parameters.read_write.offset = 0;",
          "4244:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4246:         break;",
          "4249:         if (request_data) {",
          "4250:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "4253:         if (is_long_attribute_value(uuid) && tvb_captured_length(tvb) >= mtu) {",
          "4254:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4255:             if (!pinfo->fd->flags.visited && request_data && bluetooth_data)",
          "4256:                 save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, 0, bluetooth_data);",
          "4257:             offset = tvb_captured_length(tvb);",
          "4259:             expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "4260:         } else {",
          "4261:             if (request_data)",
          "4262:                 handle = request_data->parameters.read_write.handle;",
          "4264:                 handle = 0;",
          "4266:             offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), handle, uuid, bluetooth_data);",
          "4268:         break;",
          "4271:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "4272:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4274:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4276:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4277:         offset += 2;",
          "4280:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4281:             union request_parameters_union  request_parameters;",
          "4283:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "4284:             request_parameters.read_write.offset = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4286:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4291:         if (request_data) {",
          "4292:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "4294:             if (request_data->parameters.read_write.offset == 0 && !is_long_attribute_value(uuid)) {",
          "4295:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "4296:             } else {",
          "4297:                 if (!pinfo->fd->flags.visited && bluetooth_data)",
          "4298:                     save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, request_data->parameters.read_write.offset, bluetooth_data);",
          "4300:                 if (tvb_captured_length(tvb) < mtu) {",
          "4301:                     tvbuff_t  *next_tvb;",
          "4302:                     guint      reassembled_length;",
          "4303:                     guint8    *reassembled_data;",
          "4305:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4306:                     offset = tvb_captured_length(tvb);",
          "4308:                     reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "4309:                     if (reassembled_data) {",
          "4310:                         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "4311:                         next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "4312:                         add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "4313:                         dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "4314:                     }",
          "4315:                 } else {",
          "4316:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4317:                     offset = tvb_captured_length(tvb);",
          "4319:                     expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "4320:                 }",
          "4321:             }",
          "4322:         } else {",
          "4323:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4324:             offset = tvb_captured_length(tvb);",
          "4325:         }",
          "4327:         break;",
          "4330:         if(tvb_reported_length_remaining(tvb, offset) < 4) {",
          "4331:             expert_add_info(pinfo, main_item, &ei_btatt_handle_too_few);",
          "4332:             break;",
          "4335:         col_append_str(pinfo->cinfo, COL_INFO, \", Handles: \");",
          "4336:         while (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "4337:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4338:             col_append_fstr(pinfo->cinfo, COL_INFO, \"0x%04x \", tvb_get_letohs(tvb, offset - 2));",
          "4341:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4342:             union request_parameters_union  request_parameters;",
          "4344:             request_parameters.read_multiple.number_of_handles = (tvb_captured_length(tvb) - 1) / 2;",
          "4345:             request_parameters.read_multiple.handle = (guint16 *) tvb_memdup(wmem_file_scope(),",
          "4346:                     tvb, 1, request_parameters.read_multiple.number_of_handles * 2);",
          "4348:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4350:         break;",
          "4353:         if (request_data) {",
          "4354:             guint  i_handle;",
          "4356:             for (i_handle = 0; i_handle < request_data->parameters.read_multiple.number_of_handles; i_handle += 1) {",
          "4357:                 dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_multiple.handle[i_handle]);",
          "4358:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_multiple.handle[i_handle], uuid, bluetooth_data);",
          "4359:             }",
          "4360:         } else {",
          "4361:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4362:             offset = tvb_reported_length(tvb);",
          "4363:         }",
          "4367:         {",
          "4368:             guint8  length = tvb_get_guint8(tvb, offset);",
          "4370:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "4371:             offset++;",
          "4373:             if (length > 0) {",
          "4374:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\", tvb_reported_length_remaining(tvb, offset)/length);",
          "4376:                 while (tvb_reported_length_remaining(tvb, offset) >= length) {",
          "4377:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb, offset, length,",
          "4378:                                                     \"Attribute Data, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "4379:                                                     tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4381:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4383:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4384:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "4386:                     proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4387:                     offset += 2;",
          "4389:                     if (request_data) {",
          "4390:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 4, handle, request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "4391:                     } else {",
          "4392:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 4, ENC_NA);",
          "4393:                         offset += length - 4;",
          "4394:                     }",
          "4395:                 }",
          "4398:             if (request_data) {",
          "4399:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "4400:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "4401:             }",
          "4403:         break;",
          "4409:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "4411:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "4413:         offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), uuid, bluetooth_data);",
          "4415:         if (!pinfo->fd->flags.visited && bluetooth_data && (opcode == 0x12 || opcode == 0x1d)) {",
          "4416:             union request_parameters_union  request_parameters;",
          "4418:             request_parameters.data = NULL;",
          "4420:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4430:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "4431:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "4433:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "4435:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4438:         if (!pinfo->fd->flags.visited && bluetooth_data && opcode == 0x16) {",
          "4439:             union request_parameters_union  request_parameters;",
          "4441:             request_parameters.data = NULL;",
          "4443:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4445:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data && opcode == 0x16)",
          "4446:             save_value_fragment(pinfo, tvb, offset,",
          "4447:                     tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "4448:                     tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN),",
          "4449:                     bluetooth_data);",
          "4453:         if (request_data && tvb_captured_length(tvb) < mtu) {",
          "4454:             tvbuff_t  *next_tvb;",
          "4455:             guint      reassembled_length;",
          "4456:             guint8    *reassembled_data;",
          "4458:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4460:             reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "4461:             if (reassembled_data) {",
          "4462:                 sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "4463:                 next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "4464:                 add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "4465:                 dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "4466:             }",
          "4467:         } else {",
          "4468:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4471:         offset = tvb_reported_length(tvb);",
          "4476:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",",
          "4477:                         val_to_str_const(tvb_get_guint8(tvb, offset), flags_vals, \"<unknown>\"));",
          "4478:         proto_tree_add_item(main_tree, hf_btatt_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "4479:         offset++;",
          "4481:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "4482:             union request_parameters_union  request_parameters;",
          "4484:             request_parameters.data = NULL;",
          "4486:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "4488:         break;",
          "4495:         {",
          "4496:             guint8 length;",
          "4498:             col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "4500:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "4502:             length = tvb_reported_length_remaining(tvb, offset);",
          "4503:             if (length > 12) {",
          "4504:                 proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, length-12, ENC_NA);",
          "4505:                 offset+=length-12;",
          "4506:             }",
          "4508:             proto_tree_add_item(main_tree, hf_btatt_sign_counter, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4509:             offset+=4;",
          "4510:             proto_tree_add_item(main_tree, hf_btatt_signature, tvb, offset, 8, ENC_NA);",
          "4511:             offset+=8;",
          "4512:         break;",
          "4514:     default:",
          "4516:     }",
          "4518:     if (request_data) {",
          "4519:         if (request_data->request_in_frame > 0  && request_data->request_in_frame != pinfo->fd->num) {",
          "4520:             sub_item = proto_tree_add_uint(main_tree, hf_request_in_frame, tvb, 0, 0, request_data->request_in_frame);",
          "4521:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "4524:         if (!pinfo->fd->flags.visited && request_data->response_in_frame == 0 &&",
          "4525:                 pinfo->fd->num > request_data->request_in_frame)",
          "4526:             request_data->response_in_frame = pinfo->fd->num;",
          "4528:         if (request_data->response_in_frame > 0 && request_data->response_in_frame != pinfo->fd->num) {",
          "4529:             sub_item = proto_tree_add_uint(main_tree, hf_response_in_frame, tvb, 0, 0, request_data->response_in_frame);",
          "4530:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "4531:         }",
          "4532:     }",
          "4534:     return offset;",
          "4535: }",
          "4537: void",
          "4538: proto_register_btatt(void)",
          "4539: {",
          "4540:     module_t         *module;",
          "4541:     expert_module_t  *expert_btatt;",
          "4544:     static hf_register_info hf[] = {",
          "4545:         {&hf_btatt_opcode,",
          "4546:             {\"Opcode\", \"btatt.opcode\",",
          "4547:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "4548:             NULL, HFILL}",
          "4549:         },",
          "4550:         {&hf_btatt_opcode_authentication_signature,",
          "4551:             {\"Authentication Signature\", \"btatt.opcode.authentication_signature\",",
          "4552:             FT_BOOLEAN, 8, NULL, 0x80,",
          "4553:             NULL, HFILL}",
          "4554:         },",
          "4555:         {&hf_btatt_opcode_command,",
          "4556:             {\"Command\", \"btatt.opcode.command\",",
          "4557:             FT_BOOLEAN, 8, NULL, 0x40,",
          "4558:             NULL, HFILL}",
          "4559:         },",
          "4560:         {&hf_btatt_opcode_method,",
          "4561:             {\"Method\", \"btatt.opcode.method\",",
          "4562:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x3F,",
          "4565:         {&hf_btatt_handles_info,",
          "4566:             {\"Handles Info\", \"btatt.handles_info\",",
          "4567:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "4570:         {&hf_btatt_attribute_data,",
          "4571:             {\"Attribute Data\", \"btatt.attribute_data\",",
          "4572:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "4575:         {&hf_btatt_handle,",
          "4576:             {\"Handle\", \"btatt.handle\",",
          "4577:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4580:         {&hf_btatt_starting_handle,",
          "4581:             {\"Starting Handle\", \"btatt.starting_handle\",",
          "4582:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4585:         {&hf_btatt_ending_handle,",
          "4586:             {\"Ending Handle\", \"btatt.ending_handle\",",
          "4587:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4590:         {&hf_btatt_group_end_handle,",
          "4591:             {\"Group End Handle\", \"btatt.group_end_handle\",",
          "4592:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4595:         {&hf_btatt_value,",
          "4596:             {\"Value\", \"btatt.value\",",
          "4597:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "4600:         {&hf_btatt_req_opcode_in_error,",
          "4601:             {\"Request Opcode in Error\", \"btatt.req_opcode_in_error\",",
          "4602:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "4605:         {&hf_btatt_handle_in_error,",
          "4606:             {\"Handle in Error\", \"btatt.handle\",",
          "4607:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4610:         {&hf_btatt_error_code,",
          "4611:             {\"Error Code\", \"btatt.error_code\",",
          "4612:             FT_UINT8, BASE_HEX, VALS(error_vals), 0x0,",
          "4615:         {&hf_btatt_uuid16,",
          "4616:             {\"UUID\", \"btatt.uuid16\",",
          "4617:             FT_UINT16, BASE_HEX |BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "4620:         {&hf_btatt_uuid128,",
          "4621:             {\"UUID\", \"btatt.uuid128\",",
          "4622:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "4625:         {&hf_btatt_client_rx_mtu,",
          "4626:             {\"Client Rx MTU\", \"btatt.client_rx_mtu\",",
          "4627:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4630:         {&hf_btatt_server_rx_mtu,",
          "4631:             {\"Server Rx MTU\", \"btatt.server_rx_mtu\",",
          "4632:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4635:         {&hf_btatt_uuid_format,",
          "4636:             {\"UUID Format\", \"btatt.uuid_format\",",
          "4637:             FT_UINT8, BASE_HEX, VALS(uuid_format_vals), 0x0,",
          "4640:         {&hf_btatt_length,",
          "4641:             {\"Length\", \"btatt.length\",",
          "4642:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4643:             \"Length of Handle/Value Pair\", HFILL}",
          "4644:         },",
          "4645:         {&hf_btatt_offset,",
          "4646:             {\"Offset\", \"btatt.offset\",",
          "4647:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4650:         {&hf_btatt_flags,",
          "4651:             {\"Flags\", \"btatt.flags\",",
          "4652:             FT_UINT8, BASE_HEX, VALS(flags_vals), 0x0,",
          "4655:         {&hf_btatt_sign_counter,",
          "4656:             {\"Sign Counter\", \"btatt.sign_counter\",",
          "4657:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "4660:         {&hf_btatt_signature,",
          "4661:             {\"Signature\", \"btatt.signature\",",
          "4662:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "4665:         {&hf_btatt_characteristic_properties,",
          "4666:             {\"Characteristic Properties\", \"btatt.characteristic_properties\",",
          "4667:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4670:         {&hf_btatt_characteristic_properties_extended_properties,",
          "4671:             {\"Extended Properties\", \"btatt.characteristic_properties.extended_properties\",",
          "4672:             FT_BOOLEAN, 8, NULL, 0x80,",
          "4675:         {&hf_btatt_characteristic_properties_authenticated_signed_writes,",
          "4676:             {\"Authenticated Signed Writes\", \"btatt.characteristic_properties.authenticated_signed_writes\",",
          "4677:             FT_BOOLEAN, 8, NULL, 0x40,",
          "4680:         {&hf_btatt_characteristic_properties_indicate,",
          "4681:             {\"Indicate\", \"btatt.characteristic_properties.indicate\",",
          "4682:             FT_BOOLEAN, 8, NULL, 0x20,",
          "4685:         {&hf_btatt_characteristic_properties_notify,",
          "4686:             {\"Notify\", \"btatt.characteristic_properties.notify\",",
          "4687:             FT_BOOLEAN, 8, NULL, 0x10,",
          "4690:         {&hf_btatt_characteristic_properties_write,",
          "4691:             {\"Write\", \"btatt.characteristic_properties.write\",",
          "4692:             FT_BOOLEAN, 8, NULL, 0x08,",
          "4695:         {&hf_btatt_characteristic_properties_write_without_response,",
          "4696:             {\"Write without Response\", \"btatt.characteristic_properties.write_without_response\",",
          "4697:             FT_BOOLEAN, 8, NULL, 0x04,",
          "4700:         {&hf_btatt_characteristic_properties_read,",
          "4701:             {\"Read\", \"btatt.characteristic_properties.read\",",
          "4702:             FT_BOOLEAN, 8, NULL, 0x02,",
          "4705:         {&hf_btatt_characteristic_properties_broadcast,",
          "4706:             {\"Broadcast\", \"btatt.characteristic_properties.broadcast\",",
          "4707:             FT_BOOLEAN, 8, NULL, 0x01,",
          "4710:         {&hf_btatt_characteristic_value_handle,",
          "4711:             {\"Characteristic Value Handle\", \"btatt.handle\",",
          "4715:         {&hf_btatt_included_service_handle,",
          "4716:             {\"Included Service Handle\", \"btatt.handle\",",
          "4717:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4720:         {&hf_btatt_information_data,",
          "4721:             {\"Information Data\", \"btatt.information_data\",",
          "4722:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "4725:         {&hf_btatt_characteristic_configuration_client,",
          "4726:             {\"Characteristic Configuration Client\", \"btatt.characteristic_configuration_client\",",
          "4727:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4730:         {&hf_btatt_characteristic_configuration_client_reserved,",
          "4731:             {\"Reseved\", \"btatt.characteristic_configuration_client.reserved\",",
          "4732:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "4735:         {&hf_btatt_characteristic_configuration_client_indication,",
          "4736:             {\"Indication\", \"btatt.characteristic_configuration_client.indication\",",
          "4737:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "4740:         {&hf_btatt_characteristic_configuration_client_notification,",
          "4741:             {\"Notification\", \"btatt.characteristic_configuration_client.notification\",",
          "4742:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4745:         {&hf_btatt_characteristic_configuration_server,",
          "4746:             {\"Characteristic Configuration Server\", \"btatt.characteristic_configuration_server\",",
          "4747:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4750:         {&hf_btatt_characteristic_configuration_server_reserved,",
          "4751:             {\"Reseved\", \"btatt.characteristic_configuration_server.reserved\",",
          "4752:             FT_UINT16, BASE_HEX, NULL, 0xFFFE,",
          "4755:         {&hf_btatt_characteristic_configuration_server_broadcast,",
          "4756:             {\"Broadcast\", \"btatt.characteristic_configuration_server.broadcast\",",
          "4757:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4760:         {&hf_btatt_hogp_protocol_mode,",
          "4761:             {\"Protocol Mode\", \"btatt.hogp.protocol_mode\",",
          "4762:             FT_UINT8, BASE_HEX, VALS(hogp_protocol_mode_vals), 0x0,",
          "4765:         {&hf_btatt_report_reference_report_id,",
          "4766:             {\"Report ID\", \"btatt.report_reference.report_id\",",
          "4767:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4770:         {&hf_btatt_report_reference_report_type,",
          "4771:             {\"Report Type\", \"btatt.report_reference.report_id\",",
          "4772:             FT_UINT8, BASE_HEX, VALS(report_reference_report_type_vals), 0x0,",
          "4775:         {&hf_btatt_hogp_bcd_hid,",
          "4776:             {\"bcdHID\", \"btatt.hogp.bcd_hid\",",
          "4777:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4780:         {&hf_btatt_hogp_b_country_code,",
          "4781:             {\"bCountryCode\", \"btatt.hogp.b_country_code\",",
          "4782:             FT_UINT8, BASE_HEX, VALS(hid_country_code_vals), 0x0,",
          "4785:         {&hf_btatt_hogp_flags,",
          "4786:             {\"Flags\", \"btatt.hogp.flags\",",
          "4787:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4790:         {&hf_btatt_hogp_flags_reserved,",
          "4791:             {\"Reserved\", \"btatt.hogp.flags.reserved\",",
          "4792:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "4795:         {&hf_btatt_hogp_flags_normally_connectable,",
          "4796:             {\"Normally Connectable\", \"btatt.hogp.flags.normally_connectable\",",
          "4797:             FT_BOOLEAN, 8, NULL, 0x02,",
          "4800:         {&hf_btatt_hogp_flags_remote_wake,",
          "4801:             {\"Remote Wake\", \"btatt.hogp.flags.remote_wake\",",
          "4802:             FT_BOOLEAN, 8, NULL, 0x01,",
          "4805:         {&hf_btatt_characteristic_user_description,",
          "4806:             {\"Characteristic User Description\", \"btatt.characteristic_user_description\",",
          "4807:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4810:         {&hf_btatt_characteristic_extended_properties,",
          "4811:             {\"Characteristic Extended Properties\", \"btatt.characteristic_extended_properties\",",
          "4812:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4815:         {&hf_btatt_characteristic_extended_properties_reserved,",
          "4816:             {\"Reserved\", \"btatt.characteristic_extended_properties.reserved\",",
          "4817:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "4820:         {&hf_btatt_characteristic_extended_properties_writable_auxiliaries,",
          "4821:             {\"Writable Auxiliaries\", \"btatt.characteristic_extended_properties.writable_auxiliaries\",",
          "4822:             FT_UINT16, BASE_HEX, NULL, 0x0002,",
          "4825:         {&hf_btatt_characteristic_extended_properties_reliable_write,",
          "4826:             {\"Reliable Write\", \"btatt.characteristic_extended_properties.reliable_write\",",
          "4827:             FT_UINT16, BASE_HEX, NULL, 0x0001,",
          "4830:         {&hf_btatt_characteristic_presentation_format,",
          "4831:             {\"Format\", \"btatt.characteristic_presentation.format\",",
          "4832:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_format_vals), 0x0,",
          "4835:         {&hf_btatt_characteristic_presentation_exponent,",
          "4836:             {\"Exponent\", \"btatt.characteristic_presentation.exponent\",",
          "4837:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4840:         {&hf_btatt_characteristic_presentation_unit,",
          "4841:             {\"Unit\", \"btatt.characteristic_presentation.unit\",",
          "4842:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "4845:         {&hf_btatt_characteristic_presentation_namespace,",
          "4846:             {\"Namespace\", \"btatt.characteristic_presentation.namespace\",",
          "4847:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_namespace_vals), 0x0,",
          "4850:         {&hf_btatt_characteristic_presentation_namespace_description,",
          "4851:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "4852:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4855:         {&hf_btatt_characteristic_presentation_namespace_description_btsig,",
          "4856:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "4857:             FT_UINT16, BASE_HEX, VALS(characteristic_presentation_namespace_description_btsig_vals), 0x0,",
          "4860:         {&hf_btatt_esp_trigger_logic,",
          "4861:             {\"Trigger Logic\", \"btatt.esp.trigger_logic\",",
          "4862:             FT_UINT8, BASE_HEX, VALS(esp_trigger_logic_vals), 0x0,",
          "4865:         {&hf_btatt_esp_condition,",
          "4866:             {\"Trigger Logic\", \"btatt.esp.condition\",",
          "4867:             FT_UINT8, BASE_HEX, VALS(esp_condition_vals), 0x0,",
          "4870:         {&hf_btatt_esp_operand,",
          "4871:             {\"Operand\", \"btatt.esp.operand\",",
          "4872:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "4875:         {&hf_btatt_esp_flags,",
          "4876:             {\"Flags\", \"btatt.esp.flags\",",
          "4877:             FT_UINT16, BASE_HEX, NULL, 0xFFFF,",
          "4880:         {&hf_btatt_esp_sampling_function,",
          "4881:             {\"Sampling Function\", \"btatt.esp.sampling_function\",",
          "4882:             FT_UINT8, BASE_HEX, VALS(esp_sampling_function_vals), 0x0,",
          "4885:         {&hf_btatt_esp_measurement_period,",
          "4886:             {\"Measurement Period\", \"btatt.esp.measurement_period\",",
          "4887:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "4890:         {&hf_btatt_esp_update_interval,",
          "4891:             {\"Update Interval\", \"btatt.esp.update_interval\",",
          "4892:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "4895:         {&hf_btatt_esp_application,",
          "4896:             {\"Application\", \"btatt.esp.application\",",
          "4897:             FT_UINT8, BASE_HEX, VALS(esp_application_vals), 0x0,",
          "4900:         {&hf_btatt_esp_measurement_uncertainty,",
          "4901:             {\"Measurement Uncertainty\", \"btatt.esp.measurement_uncertainty\",",
          "4902:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4905:         {&hf_btatt_device_name,",
          "4906:             {\"Device Name\", \"btatt.device_name\",",
          "4910:         {&hf_btatt_appearance,",
          "4911:             {\"Appearance\", \"btatt.appearance\",",
          "4912:             FT_UINT16, BASE_DEC_HEX, NULL, 0x0,",
          "4915:         {&hf_btatt_appearance_category,",
          "4916:             {\"Category\", \"btatt.appearance.category\",",
          "4917:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_category_vals), 0xFFC0,",
          "4920:         {&hf_btatt_appearance_subcategory,",
          "4921:             {\"Subcategory\", \"btatt.appearance.subcategory\",",
          "4922:             FT_UINT16, BASE_DEC_HEX, NULL, 0x003F,",
          "4925:         {&hf_btatt_appearance_subcategory_watch,",
          "4926:             {\"Subcategory\", \"btatt.appearance.subcategory.watch\",",
          "4927:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_watch_vals), 0x003F,",
          "4930:         {&hf_btatt_appearance_subcategory_thermometer,",
          "4931:             {\"Subcategory\", \"btatt.appearance.subcategory.thermometer\",",
          "4932:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_thermometer_vals), 0x003F,",
          "4935:         {&hf_btatt_appearance_subcategory_heart_rate,",
          "4936:             {\"Subcategory\", \"btatt.appearance.subcategory.heart_rate\",",
          "4937:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_heart_rate_vals), 0x003F,",
          "4940:         {&hf_btatt_appearance_subcategory_blood_pressure,",
          "4941:             {\"Subcategory\", \"btatt.appearance.subcategory.blood_pressure\",",
          "4942:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_blood_pressure_vals), 0x003F,",
          "4945:         {&hf_btatt_appearance_subcategory_hid,",
          "4946:             {\"Subcategory\", \"btatt.appearance.subcategory.hid\",",
          "4947:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_hid_vals), 0x003F,",
          "4950:         {&hf_btatt_appearance_subcategory_running_walking_sensor,",
          "4951:             {\"Subcategory\", \"btatt.appearance.subcategory.running_walking_sensor\",",
          "4952:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_running_walking_sensor_vals), 0x003F,",
          "4955:         {&hf_btatt_appearance_subcategory_cycling,",
          "4956:             {\"Subcategory\", \"btatt.appearance.subcategory.cycling\",",
          "4957:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_cycling_vals), 0x003F,",
          "4960:         {&hf_btatt_appearance_subcategory_pulse_oximeter,",
          "4961:             {\"Subcategory\", \"btatt.appearance.subcategory.pulse_oximeter\",",
          "4962:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_pulse_oximeter_vals), 0x003F,",
          "4965:         {&hf_btatt_appearance_subcategory_outdoor_sports_activity,",
          "4966:             {\"Subcategory\", \"btatt.appearance.subcategory.outdoor_sports_activity\",",
          "4967:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_outdoor_sports_activity_vals), 0x003F,",
          "4970:         {&hf_btatt_peripheral_privacy_flag,",
          "4971:             {\"Peripheral Privacy\", \"btatt.peripheral_privacy_flag\",",
          "4972:             FT_BOOLEAN, 8, NULL, 0x0,",
          "4975:         { &hf_btatt_reconnection_address,",
          "4976:             { \"Reconnection Address\", \"btatt.reconnection_address\",",
          "4977:             FT_ETHER, BASE_NONE, NULL, 0x0,",
          "4978:             NULL, HFILL }",
          "4980:         {&hf_btatt_minimum_connection_interval,",
          "4981:             {\"Minimum Connection Interval\", \"btatt.minimum_connection_interval\",",
          "4982:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4985:         {&hf_btatt_maximum_connection_interval,",
          "4986:             {\"Maximum Connection Interval\", \"btatt.maximum_connection_interval\",",
          "4987:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4990:         {&hf_btatt_slave_latency,",
          "4991:             {\"Slave Latency\", \"btatt.slave_latency\",",
          "4992:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4995:         {&hf_btatt_connection_supervision_timeout_multiplier,",
          "4996:             {\"Connection Supervision Timeout Multiplier\", \"btatt.connection_supervision_timeout_multiplier\",",
          "5000:         {&hf_btatt_alert_level,",
          "5001:             {\"Alert Level\", \"btatt.alert_level\",",
          "5002:             FT_UINT8, BASE_HEX, VALS(alert_level_vals), 0x0,",
          "5005:         {&hf_btatt_tx_power_level,",
          "5006:             {\"Tx Power Level\", \"btatt.tx_power_level\",",
          "5007:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "5010:         {&hf_btatt_year,",
          "5011:             {\"Year\", \"btatt.year\",",
          "5012:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5015:         {&hf_btatt_month,",
          "5016:             {\"Month\", \"btatt.month\",",
          "5017:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5020:         {&hf_btatt_day,",
          "5021:             {\"Day\", \"btatt.day\",",
          "5022:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5025:         {&hf_btatt_hours,",
          "5026:             {\"Hours\", \"btatt.hours\",",
          "5027:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5030:         {&hf_btatt_minutes,",
          "5031:             {\"Minutes\", \"btatt.minutes\",",
          "5032:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5035:         {&hf_btatt_seconds,",
          "5036:             {\"Seconds\", \"btatt.seconds\",",
          "5037:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5040:         {&hf_btatt_day_of_week,",
          "5041:             {\"Day of Week\", \"btatt.day_of_week\",",
          "5042:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5045:         {&hf_btatt_fractions256,",
          "5046:             {\"Fractions256\", \"btatt.fractions256\",",
          "5048:             \"1/256th of a second\", HFILL}",
          "5049:         },",
          "5050:         {&hf_btatt_dst_offset,",
          "5051:             {\"Daylight Saving Time Offset\", \"btatt.dst_offset\",",
          "5052:             FT_UINT8, BASE_HEX, VALS(dst_offset_vals), 0x0,",
          "5055:         {&hf_btatt_model_number_string,",
          "5056:             {\"Model Number String\", \"btatt.model_number_string\",",
          "5057:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5060:         {&hf_btatt_serial_number_string,",
          "5061:             {\"Serial Number String\", \"btatt.serial_number_string\",",
          "5062:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5065:         {&hf_btatt_firmware_revision_string,",
          "5066:             {\"Firmware Revision String\", \"btatt.firmware_revision_string\",",
          "5067:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5070:         {&hf_btatt_hardware_revision_string,",
          "5071:             {\"Hardware Revision String\", \"btatt.hardware_revision_string\",",
          "5072:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5075:         {&hf_btatt_software_revision_string,",
          "5076:             {\"Software Revision String\", \"btatt.software_revision_string\",",
          "5077:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5080:         {&hf_btatt_manufacturer_string,",
          "5081:             {\"Manufacturer String\", \"btatt.manufacturer_string\",",
          "5082:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5085:         {&hf_btatt_system_id_manufacturer_identifier,",
          "5086:             {\"Manufacturer Identifier\", \"btatt.system_id.manufacturer_identifier\",",
          "5087:             FT_UINT40, BASE_HEX, NULL, 0x0,",
          "5090:         {&hf_btatt_system_id_organizationally_unique_identifier,",
          "5091:             {\"Organizationally Unique Identifier\", \"btatt.system_id.organizationally_unique_identifier\",",
          "5092:             FT_UINT24, BASE_HEX, VALS(oui_vals), 0x0,",
          "5095:         {&hf_btatt_timezone,",
          "5096:             {\"Timezone\", \"btatt.timezone\",",
          "5097:             FT_INT8, BASE_DEC, VALS(timezone_vals), 0x0,",
          "5100:         {&hf_btatt_time_accuracy,",
          "5101:             {\"Time Accuracy\", \"btatt.time_accuracy\",",
          "5102:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5105:         {&hf_btatt_time_source,",
          "5106:             {\"Time Source\", \"btatt.time_source\",",
          "5107:             FT_UINT8, BASE_DEC, VALS(time_source_vals), 0x0,",
          "5110:         {&hf_btatt_time_days_since_update,",
          "5111:             {\"Days Since Update\", \"btatt.days_since_update\",",
          "5112:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5115:         {&hf_btatt_time_hours_since_update,",
          "5116:             {\"Hours Since Update\", \"btatt.hours_since_update\",",
          "5117:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5120:         {&hf_btatt_time_update_control_point,",
          "5121:             {\"Update Control Point\", \"btatt.update_control_point\",",
          "5122:             FT_UINT8, BASE_HEX, VALS(time_update_control_point_vals), 0x0,",
          "5125:         {&hf_btatt_time_current_state,",
          "5126:             {\"Current State\", \"btatt.time_current_state\",",
          "5127:             FT_UINT8, BASE_HEX, VALS(time_current_state_vals), 0x0,",
          "5130:         {&hf_btatt_time_result,",
          "5131:             {\"Result\", \"btatt.time_result\",",
          "5132:             FT_UINT8, BASE_HEX, VALS(time_result_vals), 0x0,",
          "5135:         {&hf_btatt_battery_level,",
          "5136:             {\"Battery Level\", \"btatt.battery_level\",",
          "5137:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5140:         {&hf_btatt_temperature_type,",
          "5141:             {\"Temperature Type\", \"btatt.temperature_type\",",
          "5142:             FT_UINT8, BASE_HEX, VALS(temperature_type_vals), 0x0,",
          "5145:         {&hf_btatt_measurement_interval,",
          "5146:             {\"Measurement Interval\", \"btatt.measurement_interval\",",
          "5147:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5150:         {&hf_btatt_time_adjust_reason,",
          "5151:             {\"Adjust Reason\", \"btatt.adjust_reason\",",
          "5155:         {&hf_btatt_time_adjust_reason_reserved,",
          "5156:             {\"Reserved\", \"btatt.adjust_reason.reserved\",",
          "5157:             FT_UINT8, BASE_HEX, NULL, 0xF0,",
          "5160:         {&hf_btatt_time_adjust_reason_change_of_dst,",
          "5161:             {\"Change of DST\", \"btatt.adjust_reason.change_of_dst\",",
          "5162:             FT_BOOLEAN, 8, NULL, 0x08,",
          "5165:         {&hf_btatt_time_adjust_reason_change_of_timezone,",
          "5166:             {\"Change of Timezone\", \"btatt.adjust_reason.change_of_timezone\",",
          "5167:             FT_BOOLEAN, 8, NULL, 0x04,",
          "5170:         {&hf_btatt_time_adjust_reason_external_reference_time_update,",
          "5171:             {\"External Reference Time Update\", \"btatt.adjust_reason.external_reference_time_update\",",
          "5172:             FT_BOOLEAN, 8, NULL, 0x02,",
          "5175:         {&hf_btatt_time_adjust_reason_manual_time_update,",
          "5176:             {\"Manual Time Update\", \"btatt.adjust_reason.manual_time_update\",",
          "5177:             FT_BOOLEAN, 8, NULL, 0x01,",
          "5180:         {&hf_btatt_magnetic_declination,",
          "5181:             {\"Magnetic Declination\", \"btatt.magnetic_declination\",",
          "5182:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5185:         {&hf_btatt_scan_refresh,",
          "5186:             {\"Scan Refresh\", \"btatt.scan_refresh\",",
          "5187:             FT_UINT8, BASE_HEX, VALS(scan_refresh_vals), 0x0,",
          "5190:         {&hf_btatt_body_sensor_location,",
          "5191:             {\"Body Sensor Location\", \"btatt.body_sensor_location\",",
          "5192:             FT_UINT8, BASE_HEX, VALS(body_sensor_location_vals), 0x0,",
          "5195:         {&hf_btatt_heart_rate_control_point,",
          "5196:             {\"Heart Rate Control Point\", \"btatt.heart_rate_control_point\",",
          "5197:             FT_UINT8, BASE_HEX, VALS(heart_rate_control_point_vals), 0x0,",
          "5200:         {&hf_btatt_alert_status,",
          "5201:             {\"Alert Status\", \"btatt.alert.status\",",
          "5202:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5205:         {&hf_btatt_alert_status_reserved,",
          "5206:             {\"Reserved\", \"btatt.alert.status.reserved\",",
          "5207:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "5210:         {&hf_btatt_alert_status_display_alert_status,",
          "5211:             {\"Display Alert Status\", \"btatt.alert.status.display_alert_status\",",
          "5212:             FT_BOOLEAN, 8, NULL, 0x04,",
          "5215:         {&hf_btatt_alert_status_vibrate_state,",
          "5216:             {\"Vibrate State\", \"btatt.alert.status.vibrate_state\",",
          "5217:             FT_BOOLEAN, 8, NULL, 0x02,",
          "5220:         {&hf_btatt_alert_status_ringer_state,",
          "5221:             {\"Ringer State\", \"btatt.alert_status.ringer_state\",",
          "5222:             FT_BOOLEAN, 8, NULL, 0x01,",
          "5225:         {&hf_btatt_ringer_control_point,",
          "5226:             {\"Ringer Control Point\", \"btatt.ringer_control_point\",",
          "5227:             FT_UINT8, BASE_HEX, VALS(ringer_control_point_vals), 0x0,",
          "5230:         {&hf_btatt_ringer_setting,",
          "5231:             {\"Ringer Setting\", \"btatt.ringer_setting\",",
          "5232:             FT_UINT8, BASE_HEX, VALS(ringer_setting_vals), 0x0,",
          "5235:         {&hf_btatt_alert_category_id_bitmask_1,",
          "5236:             {\"Alert Category ID Bitmask 1\", \"btatt.alert.category_id_bitmask_1\",",
          "5237:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5240:         {&hf_btatt_alert_category_id_bitmask_1_schedule,",
          "5241:             {\"Schedule\", \"btatt.alert.category_id_bitmask_1.schedule\",",
          "5242:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "5245:         {&hf_btatt_alert_category_id_bitmask_1_voice_mail,",
          "5246:             {\"Voice Mail\", \"btatt.alert.category_id_bitmask_1.voice_mail\",",
          "5247:             FT_UINT8, BASE_HEX, NULL, 0x40,",
          "5250:         {&hf_btatt_alert_category_id_bitmask_1_sms_mms,",
          "5251:             {\"SMS/MMS\", \"btatt.alert.category_id_bitmask_1.sms_mms\",",
          "5252:             FT_UINT8, BASE_HEX, NULL, 0x20,",
          "5255:         {&hf_btatt_alert_category_id_bitmask_1_missed_call,",
          "5256:             {\"Missed Call\", \"btatt.alert.category_id_bitmask_1.missed_call\",",
          "5257:             FT_UINT8, BASE_HEX, NULL, 0x10,",
          "5260:         {&hf_btatt_alert_category_id_bitmask_1_call,",
          "5261:             {\"Call\", \"btatt.alert.category_id_bitmask_1.call\",",
          "5262:             FT_UINT8, BASE_HEX, NULL, 0x08,",
          "5265:         {&hf_btatt_alert_category_id_bitmask_1_news,",
          "5266:             {\"News\", \"btatt.alert.category_id_bitmask_1.news\",",
          "5267:             FT_UINT8, BASE_HEX, NULL, 0x04,",
          "5270:         {&hf_btatt_alert_category_id_bitmask_1_email,",
          "5271:             {\"Email\", \"btatt.alert.category_id_bitmask_1.email\",",
          "5272:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "5275:         {&hf_btatt_alert_category_id_bitmask_1_simple_alert,",
          "5276:             {\"Simple Alert\", \"btatt.alert.category_id_bitmask_1.simple_alert\",",
          "5277:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "5280:         {&hf_btatt_alert_category_id_bitmask_2,",
          "5281:             {\"Alert Category ID Bitmask 2\", \"btatt.alert.category_id_bitmask_2\",",
          "5282:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5285:         {&hf_btatt_alert_category_id_bitmask_2_reserved,",
          "5286:             {\"Reserved\", \"btatt.alert.category_id_bitmask_2.reserved\",",
          "5287:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "5290:         {&hf_btatt_alert_category_id_bitmask_2_instant_message,",
          "5291:             {\"Instant Message\", \"btatt.alert.category_id_bitmask_2.instant_message\",",
          "5292:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "5295:         {&hf_btatt_alert_category_id_bitmask_2_high_prioritized_alert,",
          "5296:             {\"High Prioritized Alert\", \"btatt.alert.category_id_bitmask_2.high_prioritized_alert\",",
          "5297:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "5300:         {&hf_btatt_alert_category_id,",
          "5301:             {\"Alert Category ID\", \"btatt.alert.category_id\",",
          "5302:             FT_UINT8, BASE_HEX, VALS(alert_category_id_vals), 0x0,",
          "5305:         {&hf_btatt_alert_command_id,",
          "5306:             {\"Alert Command ID\", \"btatt.alert.command_id\",",
          "5307:             FT_UINT8, BASE_HEX, VALS(alert_command_id_vals), 0x0,",
          "5310:         {&hf_btatt_alert_unread_count,",
          "5311:             {\"Unread Count\", \"btatt.alert.unread_count\",",
          "5312:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5315:         {&hf_btatt_alert_number_of_new_alert,",
          "5316:             {\"Number of New Alert\", \"btatt.alert.number_of_new_alert\",",
          "5317:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5320:         {&hf_btatt_alert_text_string_information,",
          "5321:             {\"Text String Information\", \"btatt.text_string_information\",",
          "5325:         {&hf_btatt_blood_pressure_feature,",
          "5326:             {\"Blood Pressure Feature\", \"btatt.blood_pressure.feature\",",
          "5327:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5330:         {&hf_btatt_blood_pressure_feature_reserved,",
          "5331:             {\"Reserved\", \"btatt.blood_pressure.feature.reserved\",",
          "5332:             FT_UINT16, BASE_HEX, NULL, 0xFFC0,",
          "5335:         {&hf_btatt_blood_pressure_feature_multiple_bond,",
          "5336:             {\"Multiple Bond\", \"btatt.blood_pressure.feature.multiple_bond\",",
          "5337:             FT_BOOLEAN, 16, NULL, 0x20,",
          "5340:         {&hf_btatt_blood_pressure_feature_measurement_position_detection,",
          "5341:             {\"Measurement Position Detection\", \"btatt.blood_pressure.feature.measurement_position_detection\",",
          "5342:             FT_BOOLEAN, 16, NULL, 0x10,",
          "5345:         {&hf_btatt_blood_pressure_feature_puls_rate_range,",
          "5346:             {\"Puls Rate Range\", \"btatt.blood_pressure.feature.puls_rate_range\",",
          "5347:             FT_BOOLEAN, 16, NULL, 0x08,",
          "5350:         {&hf_btatt_blood_pressure_feature_irregular_pulse_detection,",
          "5351:             {\"Irregular Pulse Detection\", \"btatt.blood_pressure.feature.irregular_pulse_detection\",",
          "5352:             FT_BOOLEAN, 16, NULL, 0x04,",
          "5355:         {&hf_btatt_blood_pressure_feature_cuff_fit_detection,",
          "5356:             {\"Cuff Fit Detection\", \"btatt.blood_pressure.feature.cuff_fit_detection\",",
          "5357:             FT_BOOLEAN, 16, NULL, 0x02,",
          "5360:         {&hf_btatt_blood_pressure_feature_body_movement_detection,",
          "5361:             {\"Body Movement Detection\", \"btatt.blood_pressure.feature.body_movement_detection\",",
          "5362:             FT_BOOLEAN, 16, NULL, 0x01,",
          "5365:         {&hf_btatt_hogp_hid_control_point_command,",
          "5366:             {\"HID Control Point Command\", \"btatt.hogp.hid_control_point_command\",",
          "5367:             FT_UINT8, BASE_HEX, VALS(hid_control_point_command_vals), 0x0,",
          "5370:         {&hf_btatt_le_scan_interval,",
          "5371:             {\"LE Scan Interval\", \"btatt.le_scan_interval\",",
          "5372:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5375:         {&hf_btatt_le_scan_window,",
          "5376:             {\"LE Scan Window\", \"btatt.le_scan_window\",",
          "5377:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5380:         { &hf_btatt_pnp_id_vendor_id_source,",
          "5381:             { \"Vendor ID Source\",                \"btatt.pnp_id.vendor_id_source\",",
          "5382:             FT_UINT16, BASE_HEX, VALS(pnp_id_vendor_id_source_vals), 0,",
          "5383:             NULL, HFILL }",
          "5384:         },",
          "5385:         { &hf_btatt_pnp_id_vendor_id,",
          "5386:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "5387:             FT_UINT16, BASE_HEX, NULL, 0,",
          "5388:             NULL, HFILL }",
          "5390:         { &hf_btatt_pnp_id_vendor_id_bluetooth_sig,",
          "5391:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "5392:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_company_id_vals_ext, 0,",
          "5393:             NULL, HFILL }",
          "5395:         { &hf_btatt_pnp_id_vendor_id_usb_forum,",
          "5396:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "5397:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &ext_usb_vendors_vals, 0,",
          "5398:             NULL, HFILL }",
          "5400:         { &hf_btatt_pnp_id_product_id,",
          "5401:             { \"Product ID\",                      \"btatt.pnp_id.product_id\",",
          "5402:             FT_UINT16, BASE_HEX, NULL, 0,",
          "5403:             NULL, HFILL }",
          "5405:         { &hf_btatt_pnp_id_product_version,",
          "5406:             { \"Version\",                         \"btatt.pnp_id.product_version\",",
          "5407:             FT_UINT16, BASE_HEX, NULL, 0,",
          "5408:             NULL, HFILL }",
          "5410:         {&hf_btatt_glucose_feature,",
          "5411:             {\"Glucose Feature\", \"btatt.glucose.feature\",",
          "5412:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5415:         {&hf_btatt_glucose_feature_reserved,",
          "5416:             {\"Reserved\", \"btatt.glucose.feature.reserved\",",
          "5417:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "5420:         {&hf_btatt_glucose_feature_multiple_bond,",
          "5421:             {\"Multiple Bond\", \"btatt.glucose.feature.multiple_bond\",",
          "5422:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "5425:         {&hf_btatt_glucose_feature_time_fault,",
          "5426:             {\"Time Fault\", \"btatt.glucose.feature.time_fault\",",
          "5427:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "5430:         {&hf_btatt_glucose_feature_general_device_fault,",
          "5431:             {\"General Device Fault\", \"btatt.glucose.feature.general_device_fault\",",
          "5432:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "5435:         {&hf_btatt_glucose_feature_sensor_read_interrupt_detection,",
          "5436:             {\"Sensor Read Interrupt Detection\", \"btatt.glucose.feature.sensor_read_interrupt_detection\",",
          "5437:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "5440:         {&hf_btatt_glucose_feature_sensor_temperature_high_low_detection,",
          "5441:             {\"Sensor Temperature High-Low Detection\", \"btatt.glucose.feature.sensor_temperature_high_low_detection\",",
          "5442:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "5445:         {&hf_btatt_glucose_feature_sensor_result_high_low_detection,",
          "5446:             {\"Sensor Result High-Low Detection\", \"btatt.glucose.feature.sensor_result_high_low_detection\",",
          "5447:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "5450:         {&hf_btatt_glucose_feature_sensor_strip_type_error_detection,",
          "5451:             {\"Sensor Strip Type Error Detection\", \"btatt.glucose.feature.sensor_strip_type_error_detection\",",
          "5452:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "5455:         {&hf_btatt_glucose_feature_sensor_strip_insertion_error_detection,",
          "5456:             {\"Sensor Strip Insertion Error Detection\", \"btatt.glucose.feature.sensor_strip_insertion_error_detection\",",
          "5457:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "5460:         {&hf_btatt_glucose_feature_sensor_sample_size,",
          "5461:             {\"Sensor Sample Size\", \"btatt.glucose.feature.sensor_sample_size\",",
          "5462:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "5465:         {&hf_btatt_glucose_feature_sensor_malfunction_detection,",
          "5466:             {\"Sensor Malfunction Detection\", \"btatt.glucose.feature.sensor_malfunction_detection\",",
          "5467:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "5470:         {&hf_btatt_glucose_feature_low_battery_detection_during_measurement,",
          "5471:             {\"Low Battery Detection During Measurement\", \"btatt.glucose.feature.low_battery_detection_during_measurement\",",
          "5472:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "5475:         {&hf_btatt_rsc_feature,",
          "5476:             {\"RSC Feature\", \"btatt.rsc.feature\",",
          "5477:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5480:         {&hf_btatt_rsc_feature_reserved,",
          "5481:             {\"Reserved\", \"btatt.rsc.feature.reserved\",",
          "5482:             FT_BOOLEAN, 16, NULL, 0xFF80,",
          "5485:         {&hf_btatt_rsc_feature_multiple_sensor_locations,",
          "5486:             {\"Multiple Sensor Locations\", \"btatt.rsc.feature.multiple_sensor_locations\",",
          "5487:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "5490:         {&hf_btatt_rsc_feature_calibration_procedure,",
          "5491:             {\"Calibration Procedure\", \"btatt.rsc.feature.calibration_procedure\",",
          "5492:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "5495:         {&hf_btatt_rsc_feature_walking_or_running_status,",
          "5496:             {\"Walking_or Running Status\", \"btatt.rsc.feature.walking_or_running_status\",",
          "5497:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "5500:         {&hf_btatt_rsc_feature_total_distance_measurement,",
          "5501:             {\"Total Distance Measurement\", \"btatt.rsc.feature.total_distance_measurement\",",
          "5502:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "5505:         {&hf_btatt_rsc_feature_instantaneous_stride_length_measurement,",
          "5506:             {\"Instantaneous Stride Length Measurement\", \"btatt.rsc.feature.instantaneous_stride_length_measurement\",",
          "5507:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "5510:         {&hf_btatt_csc_feature,",
          "5511:             {\"CSC Feature\", \"btatt.csc.feature\",",
          "5515:         {&hf_btatt_csc_feature_reserved,",
          "5516:             {\"Reserved\", \"btatt.csc.feature.reserved\",",
          "5517:             FT_BOOLEAN, 16, NULL, 0xFFF8,",
          "5520:         {&hf_btatt_csc_feature_multiple_sensor_locations,",
          "5521:             {\"Multiple Sensor Locations\", \"btatt.csc.feature.multiple_sensor_locations\",",
          "5522:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "5525:         {&hf_btatt_csc_feature_crank_revolution_data,",
          "5526:             {\"Crank Revolution Data\", \"btatt.csc.feature.crank_revolution_data\",",
          "5527:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "5530:         {&hf_btatt_csc_feature_wheel_revolution_data,",
          "5531:             {\"Wheel Revolution Data\", \"btatt.csc.feature.wheel_revolution_data\",",
          "5532:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "5535:         {&hf_btatt_sensor_location,",
          "5536:             {\"Sensor Location\", \"btatt.sensor_location\",",
          "5537:             FT_UINT8, BASE_HEX, VALS(sensor_location_vals), 0x0,",
          "5540:         {&hf_btatt_elevation,",
          "5541:             {\"Elevation\", \"btatt.elevation\",",
          "5542:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "5545:         {&hf_btatt_pressure,",
          "5546:             {\"Pressure\", \"btatt.pressure\",",
          "5547:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "5550:         {&hf_btatt_temperature,",
          "5551:             {\"Temperature\", \"btatt.temperature\",",
          "5552:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "5555:         {&hf_btatt_humidity,",
          "5556:             {\"Humidity\", \"btatt.humidity\",",
          "5557:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5560:         {&hf_btatt_true_wind_speed,",
          "5561:             {\"True Wind Speed\", \"btatt.true_wind_speed\",",
          "5562:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5565:         {&hf_btatt_true_wind_direction,",
          "5566:             {\"True Wind Direction\", \"btatt.true_wind_direction\",",
          "5567:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5570:         {&hf_btatt_apparent_wind_speed,",
          "5571:             {\"Apparent Wind Speed\", \"btatt.apparent_wind_speed\",",
          "5572:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5575:         {&hf_btatt_apparent_wind_direction,",
          "5576:             {\"Apparent Wind Direction\", \"btatt.apparent_wind_direction\",",
          "5577:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5580:         {&hf_btatt_gust_factor,",
          "5581:             {\"Gust Factor\", \"btatt.gust_factor\",",
          "5582:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5585:         {&hf_btatt_pollen_concentration,",
          "5586:             {\"Pollen Concentration\", \"btatt.pollen_concentration\",",
          "5587:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "5590:         {&hf_btatt_uv_index,",
          "5591:             {\"UV Index\", \"btatt.uv_index\",",
          "5595:         {&hf_btatt_irradiance,",
          "5596:             {\"Irradiance\", \"btatt.irradiance\",",
          "5597:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5600:         {&hf_btatt_rainfall,",
          "5601:             {\"Rainfall\", \"btatt.rainfall\",",
          "5602:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5605:         {&hf_btatt_wind_chill,",
          "5606:             {\"Wind Chill\", \"btatt.wind_chill\",",
          "5607:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "5610:         {&hf_btatt_heart_index,",
          "5611:             {\"Heart Index\", \"btatt.heart_index\",",
          "5612:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "5615:         {&hf_btatt_dew_point,",
          "5616:             {\"Dew Point\", \"btatt.dew_point\",",
          "5617:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "5620:         {&hf_btatt_descriptor_value_changed_flags,",
          "5621:             {\"Flags\", \"btatt.descriptor_value_changed.flags\",",
          "5622:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5625:         {&hf_btatt_descriptor_value_changed_flags_reserved,",
          "5626:             {\"Reserved\", \"btatt.descriptor_value_changed.flags.reserved\",",
          "5627:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "5630:         {&hf_btatt_descriptor_value_changed_flags_change_to_characteristic_user_description_descriptor,",
          "5631:             {\"Change to Characteristic User Description Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_characteristic_user_description_descriptor\",",
          "5632:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "5635:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_measurement_descriptor,",
          "5636:             {\"Change to ES Measurement Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_measurement_descriptor\",",
          "5637:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "5640:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_configuration_descriptor,",
          "5641:             {\"Change to ES Configuration Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_configuration_descriptor\",",
          "5642:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "5645:         {&hf_btatt_descriptor_value_changed_flags_change_to_one_or_more_es_trigger_setting_descriptors,",
          "5646:             {\"Change to One or More ES Trigger Setting Descriptors\", \"btatt.descriptor_value_changed.flags.change_to_one_or_more_es_trigger_setting_descriptors\",",
          "5647:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "5650:         {&hf_btatt_descriptor_value_changed_flags_source_of_change,",
          "5651:             {\"Source of Change\", \"btatt.descriptor_value_changed.flags.source_of_change\",",
          "5652:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "5655:         {&hf_btatt_aerobic_heart_rate_lower_limit,",
          "5656:             {\"Aerobic Heart Rate Lower Limit\", \"btatt.aerobic_heart_rate_lower_limit\",",
          "5657:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5660:         {&hf_btatt_aerobic_threshold,",
          "5661:             {\"Aerobic Threshold\", \"btatt.aerobic_threshold\",",
          "5662:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5665:         {&hf_btatt_age,",
          "5666:             {\"Age\", \"btatt.age\",",
          "5667:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5670:         {&hf_btatt_anaerobic_heart_rate_lower_limit,",
          "5671:             {\"Anaerobic Heart Rate Lower Limit\", \"btatt.anaerobic_heart_rate_lower_limit\",",
          "5672:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5675:         {&hf_btatt_anaerobic_heart_rate_upper_limit,",
          "5676:             {\"Anaerobic Heart Rate Upper Limit\", \"btatt.anaerobic_heart_rate_upper_limit\",",
          "5677:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5680:         {&hf_btatt_anaerobic_threshold,",
          "5681:             {\"Anaerobic Threshold\", \"btatt.anaerobic_threshold\",",
          "5682:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5685:         {&hf_btatt_aerobic_heart_rate_upper_limit,",
          "5686:             {\"Aerobic Heart Rate Upper Limit\", \"btatt.aerobic_heart_rate_upper_limit\",",
          "5687:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5690:         {&hf_btatt_email_address,",
          "5691:             {\"Email Address\", \"btatt.email_address\",",
          "5692:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5695:         {&hf_btatt_fat_burn_heart_rate_lower_limit,",
          "5696:             {\"Fat Burn Heart Rate Lower Limit\", \"btatt.fat_burn_heart_rate_lower_limit\",",
          "5697:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5700:         {&hf_btatt_fat_burn_heart_rate_upper_limit,",
          "5701:             {\"Fat Burn Heart Rate Upper Limit\", \"btatt.fat_burn_heart_rate_upper_limit\",",
          "5702:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5705:         {&hf_btatt_first_name,",
          "5706:             {\"First Name\", \"btatt.first_name\",",
          "5707:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5710:         {&hf_btatt_five_zone_heart_rate_limits_very_light_light_limit,",
          "5711:             {\"Very Light/Light Limit\", \"btatt.five_zone_heart_rate_limits.very_light_light_limit\",",
          "5712:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5715:         {&hf_btatt_five_zone_heart_rate_limits_light_moderate_limit,",
          "5716:             {\"Light/Moderate Limit,\", \"btatt.five_zone_heart_rate_limits.light_moderate_limit\",",
          "5717:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5720:         {&hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit,",
          "5721:             {\"Moderate/Hard Limit\", \"btatt.five_zone_heart_rate_limits.moderate_hard_limit\",",
          "5722:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5725:         {&hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit,",
          "5726:             {\"Hard/Maximum Limit\", \"btatt.five_zone_heart_rate_limits.hard_maximum_limit\",",
          "5727:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5730:         {&hf_btatt_gender,",
          "5731:             {\"Gender\", \"btatt.gender\",",
          "5732:             FT_UINT8, BASE_HEX, VALS(gender_vals), 0x0,",
          "5735:         {&hf_btatt_heart_rate_max,",
          "5736:             {\"Heart Rate Max\", \"btatt.heart_rate_max\",",
          "5737:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5740:         {&hf_btatt_height,",
          "5741:             {\"Height\", \"btatt.height\",",
          "5745:         {&hf_btatt_hip_circumference,",
          "5746:             {\"Hip Circumference\", \"btatt.hip_circumference\",",
          "5750:         {&hf_btatt_last_name,",
          "5751:             {\"Last Name\", \"btatt.last_name\",",
          "5752:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5753:             NULL, HFILL}",
          "5754:         },",
          "5755:         {&hf_btatt_maximum_recommended_heart_rate,",
          "5756:             {\"Maximum Recommended Heart Rate\", \"btatt.maximum_recommended_heart_rate\",",
          "5757:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5760:         {&hf_btatt_resting_heart_rate,",
          "5761:             {\"Resting Heart Rate\", \"btatt.resting_heart_rate\",",
          "5762:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5765:         {&hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds,",
          "5766:             {\"Sport Type for Aerobic and Anaerobic Thresholds\", \"btatt.sport_type_for_aerobic_and_anaerobic_thresholds\",",
          "5767:             FT_UINT8, BASE_DEC, VALS(sport_type_for_aerobic_and_anaerobic_thresholds_vals), 0x0,",
          "5770:         {&hf_btatt_three_zone_heart_rate_limits_light_moderate,",
          "5771:             {\"Three zone Heart Rate Limits - Light (Fat burn) / Moderate (Aerobic) Limit\", \"btatt.three_zone_heart_rate_limits.light_moderate\",",
          "5772:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5775:         {&hf_btatt_three_zone_heart_rate_limits_moderate_hard,",
          "5776:             {\"Three zone Heart Rate Limits - Moderate (Aerobic) / Hard (Anaerobic) Limit\", \"btatt.three_zone_heart_rate_limits.moderate_hard\",",
          "5777:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5780:         {&hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness,",
          "5781:             {\"Two zone Heart Rate Limit - Fat burn / Fitness Limit\", \"btatt.two_zone_heart_rate_limit.fat_burn_fitness\",",
          "5785:         {&hf_btatt_vo2_max,",
          "5786:             {\"VO2 Max\", \"btatt.vo2_max\",",
          "5787:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5790:         {&hf_btatt_waist_circumference,",
          "5791:             {\"Waist Circumference\", \"btatt.waist_circumference\",",
          "5795:         {&hf_btatt_weight,",
          "5796:             {\"Weight\", \"btatt.weight\",",
          "5800:         {&hf_btatt_database_change_increment,",
          "5801:             {\"Database Change Increment\", \"btatt.database_change_increment\",",
          "5802:             FT_UINT32, BASE_DEC_HEX, NULL, 0x0,",
          "5805:         {&hf_btatt_user_index,",
          "5806:             {\"User Index\", \"btatt.user_index\",",
          "5807:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5810:         {&hf_btatt_magnetic_flux_density_x,",
          "5811:             {\"X\", \"btatt.hf_btatt_magnetic_flux_density.x\",",
          "5812:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "5815:         {&hf_btatt_magnetic_flux_density_y,",
          "5816:             {\"Y\", \"btatt.hf_btatt_magnetic_flux_density.y\",",
          "5817:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "5820:         {&hf_btatt_magnetic_flux_density_z,",
          "5821:             {\"Z\", \"btatt.hf_btatt_magnetic_flux_density.z\",",
          "5822:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "5825:         {&hf_btatt_language,",
          "5826:             {\"Language\", \"btatt.language\",",
          "5827:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "5830:         {&hf_btatt_barometric_pressure_trend,",
          "5831:             {\"Barometric Pressure Trend\", \"btatt.barometric_pressure_trend\",",
          "5832:             FT_UINT8, BASE_DEC, VALS(barometric_pressure_trend_vals), 0x0,",
          "5835:         {&hf_btatt_central_address_resolution,",
          "5836:             {\"Central Address Resolution\", \"btatt.central_address_resolution\",",
          "5837:             FT_UINT8, BASE_DEC, VALS(central_address_resolution_vals), 0x0,",
          "5840:         {&hf_btatt_cycling_power_feature,",
          "5841:             {\"Cycling Power Feature\", \"btatt.cycling_power_feature\",",
          "5842:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "5845:         {&hf_btatt_cycling_power_feature_reserved,",
          "5846:             {\"Reserved\", \"btatt.cycling_power_feature.reserved\",",
          "5847:             FT_UINT32, BASE_HEX, NULL, 0xFFF80000,",
          "5850:         {&hf_btatt_cycling_power_feature_factory_calibration_date,",
          "5851:             {\"Factory Calibration Date\", \"btatt.cycling_power_feature.factory_calibration_date\",",
          "5852:             FT_BOOLEAN, 32, NULL, 0x00040000,",
          "5855:         {&hf_btatt_cycling_power_feature_instantaneous_measurement_direction,",
          "5856:             {\"Instantaneous Measurement Direction\", \"btatt.cycling_power_feature.instantaneous_measurement_direction\",",
          "5857:             FT_BOOLEAN, 32, NULL, 0x00020000,",
          "5860:         {&hf_btatt_cycling_power_feature_sensor_measurement_context,",
          "5861:             {\"Sensor Measurement Context\", \"btatt.cycling_power_feature.sensor_measurement_context\",",
          "5862:             FT_UINT32, BASE_HEX, VALS(cycling_power_feature_sensor_measurement_context_vals), 0x00010000,",
          "5865:         {&hf_btatt_cycling_power_feature_span_length_adjustment,",
          "5866:             {\"Span Length Adjustment\", \"btatt.cycling_power_feature.span_length_adjustment\",",
          "5867:             FT_BOOLEAN, 32, NULL, 0x00008000,",
          "5870:         {&hf_btatt_cycling_power_feature_chain_weight_adjustment,",
          "5871:             {\"Chain Weight Adjustment\", \"btatt.cycling_power_feature.chain_weight_adjustment\",",
          "5872:             FT_BOOLEAN, 32, NULL, 0x00004000,",
          "5875:         {&hf_btatt_cycling_power_feature_chain_length_adjustment,",
          "5876:             {\"Chain Length Adjustment\", \"btatt.cycling_power_feature.chain_length_adjustment\",",
          "5877:             FT_BOOLEAN, 32, NULL, 0x00002000,",
          "5880:         {&hf_btatt_cycling_power_feature_crank_length_adjustment,",
          "5881:             {\"Crank Length Adjustment\", \"btatt.cycling_power_feature.crank_length_adjustment\",",
          "5882:             FT_BOOLEAN, 32, NULL, 0x00001000,",
          "5885:         {&hf_btatt_cycling_power_feature_multiple_sensor_locations,",
          "5886:             {\"Multiple Sensor Locations\", \"btatt.cycling_power_feature.multiple_sensor_locations\",",
          "5887:             FT_BOOLEAN, 32, NULL, 0x00000800,",
          "5890:         {&hf_btatt_cycling_power_feature_cycling_power_measurement_characteristic_content_masking,",
          "5891:             {\"Cycling Power Measurement Characteristic Content Masking\", \"btatt.cycling_power_feature.cycling_power_measurement_characteristic_content_masking\",",
          "5892:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "5895:         {&hf_btatt_cycling_power_feature_offset_compensation,",
          "5896:             {\"Offset Compensation\", \"btatt.cycling_power_feature.offset_compensation\",",
          "5897:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "5900:         {&hf_btatt_cycling_power_feature_offset_compensation_indicator,",
          "5901:             {\"Offset Compensation Indicator\", \"btatt.cycling_power_feature.offset_compensation_indicator\",",
          "5902:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "5905:         {&hf_btatt_cycling_power_feature_accumulated_energy,",
          "5906:             {\"Accumulated Energy\", \"btatt.cycling_power_feature.accumulated_energy\",",
          "5907:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "5910:         {&hf_btatt_cycling_power_feature_top_and_bottom_dead_spot_angles,",
          "5911:             {\"Top and Bottom Dead Spot Angles\", \"btatt.cycling_power_feature.top_and_bottom_dead_spot_angles\",",
          "5912:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "5915:         {&hf_btatt_cycling_power_feature_extreme_angles,",
          "5916:             {\"Extreme Angles\", \"btatt.cycling_power_feature.extreme_angles\",",
          "5917:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "5920:         {&hf_btatt_cycling_power_feature_extreme_magnitudes,",
          "5921:             {\"Extreme Magnitudes\", \"btatt.cycling_power_feature.extreme_magnitudes\",",
          "5922:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "5925:         {&hf_btatt_cycling_power_feature_crank_revolution_data,",
          "5926:             {\"Crank Revolution Data\", \"btatt.cycling_power_feature.crank_revolution_data\",",
          "5927:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "5930:         {&hf_btatt_cycling_power_feature_wheel_revolution_data,",
          "5931:             {\"Wheel Revolution Data\", \"btatt.cycling_power_feature.wheel_revolution_data\",",
          "5932:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "5935:         {&hf_btatt_cycling_power_feature_accumulated_torque,",
          "5936:             {\"Accumulated Torque\", \"btatt.cycling_power_feature.accumulated_torque\",",
          "5937:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "5940:         {&hf_btatt_cycling_power_feature_pedal_power_balance,",
          "5941:             {\"Pedal Power Balance\", \"btatt.cycling_power_feature.pedal_power_balance\",",
          "5942:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "5945:         {&hf_btatt_ln_feature,",
          "5946:             {\"LN Feature\", \"btatt.ln_feature\",",
          "5947:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "5950:         {&hf_btatt_ln_feature_reserved,",
          "5951:             {\"Reserved\", \"btatt.ln_feature.reserved\",",
          "5952:             FT_UINT32, BASE_HEX, NULL, 0xFFE00000,",
          "5955:         {&hf_btatt_ln_feature_position_status,",
          "5956:             {\"Position Status\", \"btatt.ln_feature.position_status\",",
          "5957:             FT_BOOLEAN, 32, NULL, 0x00100000,",
          "5960:         {&hf_btatt_ln_feature_elevation_setting,",
          "5961:             {\"Elevation Setting,\", \"btatt.ln_feature.elevation_setting\",",
          "5962:             FT_BOOLEAN, 32, NULL, 0x00080000,",
          "5965:         {&hf_btatt_ln_feature_fix_rate_setting,",
          "5966:             {\"Fix Rate Setting\", \"btatt.ln_feature.fix_rate_setting\",",
          "5967:             FT_BOOLEAN, 32, NULL, 0x00040000,",
          "5970:         {&hf_btatt_ln_feature_location_and_speed_characteristic_content_masking,",
          "5971:             {\"Location and Speed Characteristic Content Masking\", \"btatt.ln_feature.location_and_speed_characteristic_content_masking\",",
          "5972:             FT_BOOLEAN, 32, NULL, 0x00020000,",
          "5975:         {&hf_btatt_ln_feature_vertical_dilution_of_precision,",
          "5976:             {\"Vertical Dilution of Precision\", \"btatt.ln_feature.vertical_dilution_of_precision\",",
          "5977:             FT_BOOLEAN, 32, NULL, 0x00010000,",
          "5980:         {&hf_btatt_ln_feature_horizontal_dilution_of_precision,",
          "5981:             {\"Horizontal Dilution of Precision\", \"btatt.ln_feature.horizontal_dilution_of_precision\",",
          "5982:             FT_BOOLEAN, 32, NULL, 0x00008000,",
          "5985:         {&hf_btatt_ln_feature_estimated_vertical_position_error,",
          "5986:             {\"Estimated Vertical Position Error\", \"btatt.ln_feature.estimated_vertical_position_error\",",
          "5987:             FT_BOOLEAN, 32, NULL, 0x00004000,",
          "5990:         {&hf_btatt_ln_feature_estimated_horizontal_position_error,",
          "5991:             {\"Estimated Horizontal Position Error\", \"btatt.ln_feature.estimated_horizontal_position_error\",",
          "5992:             FT_BOOLEAN, 32, NULL, 0x00002000,",
          "5995:         {&hf_btatt_ln_feature_time_to_first_fix,",
          "5996:             {\"Time to First Fix\", \"btatt.ln_feature.time_to_first_fix\",",
          "5997:             FT_BOOLEAN, 32, NULL, 0x00001000,",
          "6000:         {&hf_btatt_ln_feature_number_of_beacons_in_view,",
          "6001:             {\"Number of Beacons in View\", \"btatt.ln_feature.number_of_beacons_in_view\",",
          "6002:             FT_BOOLEAN, 32, NULL, 0x00000800,",
          "6005:         {&hf_btatt_ln_feature_number_of_beacons_in_solution,",
          "6006:             {\"Number of Beacons in Solution\", \"btatt.ln_feature.number_of_beacons_in_solution\",",
          "6007:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "6010:         {&hf_btatt_ln_feature_estimated_time_of_arrival,",
          "6011:             {\"Estimated Time of Arrival\", \"btatt.ln_feature.estimated_time_of_arrival\",",
          "6012:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "6015:         {&hf_btatt_ln_feature_remaining_vertical_distance,",
          "6016:             {\"Remaining Vertical Distance\", \"btatt.ln_feature.remaining_vertical_distance\",",
          "6017:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "6020:         {&hf_btatt_ln_feature_remaining_distance,",
          "6021:             {\"Remaining Distance\", \"btatt.ln_feature.remaining_distance\",",
          "6022:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "6025:         {&hf_btatt_ln_feature_utc_time,",
          "6026:             {\"UTC Time\", \"btatt.ln_feature.utc_time\",",
          "6027:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "6030:         {&hf_btatt_ln_feature_rolling_time,",
          "6031:             {\"Rolling Time\", \"btatt.ln_feature.rolling_time\",",
          "6032:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "6035:         {&hf_btatt_ln_feature_heading,",
          "6036:             {\"Heading\", \"btatt.ln_feature.heading\",",
          "6037:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "6040:         {&hf_btatt_ln_feature_elevation,",
          "6041:             {\"Elevation\", \"btatt.ln_feature.elevation\",",
          "6042:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "6045:         {&hf_btatt_ln_feature_location,",
          "6046:             {\"Location\", \"btatt.ln_feature.location\",",
          "6047:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "6050:         {&hf_btatt_ln_feature_total_distance,",
          "6051:             {\"Total Distance\", \"btatt.ln_feature.total_distance\",",
          "6052:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "6055:         {&hf_btatt_ln_feature_instantaneous_speed,",
          "6056:             {\"Instantaneous Speed\", \"btatt.ln_feature.instantaneous_speed\",",
          "6057:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "6060:         {&hf_btatt_body_composition_feature,",
          "6061:             {\"Body Composition Feature\", \"btatt.body_composition_feature\",",
          "6062:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "6065:         {&hf_btatt_body_composition_feature_reserved,",
          "6066:             {\"Reserved\", \"btatt.body_composition_feature.reserved\",",
          "6067:             FT_UINT32, BASE_HEX, NULL, 0xFFFC0000,",
          "6070:         {&hf_btatt_body_composition_feature_height_measurement_resolution,",
          "6071:             {\"Height Measurement Resolution\", \"btatt.body_composition_feature.height_measurement_resolution\",",
          "6072:             FT_UINT32, BASE_HEX, VALS(body_composition_feature_height_measurement_resolution_vals), 0x00038000,",
          "6075:         {&hf_btatt_body_composition_feature_mass_measurement_resolution,",
          "6076:             {\"Mass Measurement Resolution\", \"btatt.body_composition_feature.mass_measurement_resolution\",",
          "6077:             FT_UINT32, BASE_HEX, VALS(body_composition_feature_mass_measurement_resolution_vals), 0x00007800,",
          "6080:         {&hf_btatt_body_composition_feature_height,",
          "6081:             {\"Height\", \"btatt.body_composition_feature.height\",",
          "6082:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "6085:         {&hf_btatt_body_composition_feature_weight,",
          "6086:             {\"Weight\", \"btatt.body_composition_feature.weight\",",
          "6087:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "6090:         {&hf_btatt_body_composition_feature_impedance,",
          "6091:             {\"Impedance\", \"btatt.body_composition_feature.impedance\",",
          "6092:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "6095:         {&hf_btatt_body_composition_feature_body_water_mass,",
          "6096:             {\"Body Water Mass\", \"btatt.body_composition_feature.body_water_mass\",",
          "6097:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "6100:         {&hf_btatt_body_composition_feature_soft_lean_mass,",
          "6101:             {\"Soft Lean Mass\", \"btatt.body_composition_feature.soft_lean_mass\",",
          "6102:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "6105:         {&hf_btatt_body_composition_feature_fat_free_mass,",
          "6106:             {\"Fat Free Mass\", \"btatt.body_composition_feature.fat_free_mass\",",
          "6107:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "6110:         {&hf_btatt_body_composition_feature_muscle_mass,",
          "6111:             {\"Muscle Mass\", \"btatt.body_composition_feature.muscle_mass\",",
          "6112:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "6115:         {&hf_btatt_body_composition_feature_muscle_percentage,",
          "6116:             {\"Muscle Percentage\", \"btatt.body_composition_feature.muscle_percentage\",",
          "6117:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "6120:         {&hf_btatt_body_composition_feature_basal_metabolism,",
          "6121:             {\"Basal Metabolism\", \"btatt.body_composition_feature.basal_metabolism\",",
          "6122:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "6125:         {&hf_btatt_body_composition_feature_multiple_users,",
          "6126:             {\"Multiple Users\", \"btatt.body_composition_feature.multiple_users\",",
          "6127:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "6130:         {&hf_btatt_body_composition_feature_timestamp,",
          "6131:             {\"Timestamp\", \"btatt.body_composition_feature.timestamp\",",
          "6132:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "6135:         {&hf_btatt_weight_scale_feature,",
          "6136:             {\"Body Composition Feature\", \"btatt.weight_scale_feature\",",
          "6137:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "6140:         {&hf_btatt_weight_scale_feature_reserved,",
          "6141:             {\"Reserved\", \"btatt.weight_scale_feature.reserved\",",
          "6142:             FT_UINT32, BASE_HEX, NULL, 0xFFFFFC00,",
          "6145:         {&hf_btatt_weight_scale_feature_height_measurement_resolution,",
          "6146:             {\"Height Measurement Resolution\", \"btatt.weight_scale_feature.height_measurement_resolution\",",
          "6147:             FT_UINT32, BASE_HEX, VALS(weight_scale_feature_height_measurement_resolution_vals), 0x00000380,",
          "6150:         {&hf_btatt_weight_scale_feature_weight_measurement_resolution,",
          "6151:             {\"Mass Measurement Resolution\", \"btatt.weight_scale_feature.weight_measurement_resolution\",",
          "6152:             FT_UINT32, BASE_HEX, VALS(weight_scale_feature_weight_measurement_resolution_vals), 0x000000078,",
          "6155:         {&hf_btatt_weight_scale_feature_bmi,",
          "6156:             {\"BMI\", \"btatt.weight_scale_feature.bmi\",",
          "6157:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "6160:         {&hf_btatt_weight_scale_feature_multiple_users,",
          "6161:             {\"Multiple Users\", \"btatt.weight_scale_feature.multiple_users\",",
          "6162:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "6165:         {&hf_btatt_weight_scale_feature_timestamp,",
          "6166:             {\"Timestamp\", \"btatt.weight_scale_feature.timestamp\",",
          "6167:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "6170:         {&hf_btatt_glucose_measurement_flags,",
          "6171:             {\"Flags\", \"btatt.glucose_measurement.flags\",",
          "6172:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6175:         {&hf_btatt_glucose_measurement_flags_reserved,",
          "6176:             {\"Reserved\", \"btatt.glucose_measurement.flags.reserved\",",
          "6177:             FT_UINT8, BASE_HEX, NULL, 0xE0,",
          "6180:         {&hf_btatt_glucose_measurement_flags_context_information_follows,",
          "6181:             {\"Context Information Follows\", \"btatt.glucose_measurement.flags.context_information_follows\",",
          "6182:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6185:         {&hf_btatt_glucose_measurement_flags_sensor_status_annunciation_present,",
          "6186:             {\"Sensor Status Annunciation Present\", \"btatt.glucose_measurement.flags.sensor_status_annunciation_present\",",
          "6187:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6190:         {&hf_btatt_glucose_measurement_flags_glucose_concentration_units,",
          "6191:             {\"Glucose Concentration Units\", \"btatt.glucose_measurement.flags.glucose_concentration_units\",",
          "6192:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_flags_glucose_concentration_units_vals), 0x04,",
          "6195:         {&hf_btatt_glucose_measurement_flags_glucose_concentration_type_and_sample_location_present,",
          "6196:             {\"Glucose Concentration, Type and Sample Location Present\", \"btatt.glucose_measurement.flags.glucose_concentration_type_and_sample_location_present\",",
          "6197:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6200:         {&hf_btatt_glucose_measurement_flags_time_offset_present,",
          "6201:             {\"Time Offset Present\", \"btatt.glucose_measurement.flags.time_offset_present\",",
          "6202:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6205:         {&hf_btatt_glucose_measurement_sequence_number,",
          "6206:             {\"Body Composition Feature\", \"btatt.glucose_measurement.sequence_number\",",
          "6210:         {&hf_btatt_glucose_measurement_base_time,",
          "6211:             {\"Base Time\", \"btatt.glucose_measurement.base_time\",",
          "6212:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6215:         {&hf_btatt_glucose_measurement_time_offset,",
          "6216:             {\"Time Offset\", \"btatt.glucose_measurement.time_offset\",",
          "6217:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "6221:         {&hf_btatt_glucose_measurement_glucose_concentration_kg_per_l,",
          "6222:             {\"Glucose Concentration [kg/l]\", \"btatt.glucose_measurement.glucose_concentration.kg_per_l\",",
          "6223:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6227:         {&hf_btatt_glucose_measurement_glucose_concentration_mol_per_l,",
          "6228:             {\"Glucose Concentration [mol/l]\", \"btatt.glucose_measurement.glucose_concentration.mol_per_l\",",
          "6229:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6232:         {&hf_btatt_glucose_measurement_type_and_sample_location,",
          "6233:             {\"Glucose Concentration [mol/l]\", \"btatt.glucose_measurement.type_and_sample_location\",",
          "6234:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6237:         {&hf_btatt_glucose_measurement_type_and_sample_location_type,",
          "6238:             {\"Type\", \"btatt.glucose_measurement.type_and_sample_location.type\",",
          "6239:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_type_and_sample_location_type_vals), 0x0,",
          "6242:         {&hf_btatt_glucose_measurement_type_and_sample_location_sample_location,",
          "6243:             {\"Sample Location\", \"btatt.glucose_measurement.type_and_sample_location.sample_location\",",
          "6244:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_type_and_sample_location_sample_location_vals), 0x0,",
          "6247:         {&hf_btatt_glucose_measurement_sensor_status_annunciation,",
          "6248:             {\"Sensor Status Annunciation\", \"btatt.glucose_measurement.sensor_status_annunciation\",",
          "6249:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6252:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_reserved,",
          "6253:             {\"Reserved\", \"btatt.glucose_measurement.sensor_status_annunciation.reserved\",",
          "6254:             FT_UINT16, BASE_HEX, NULL, 0xF000,",
          "6257:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_time_fault,",
          "6258:             {\"Time fault has occurred in the sensor and time may be inaccurate\", \"btatt.glucose_measurement.sensor_status_annunciation.time_fault\",",
          "6262:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_general_fault,",
          "6263:             {\"General device fault has occurred in the sensor\", \"btatt.glucose_measurement.sensor_status_annunciation.general_fault\",",
          "6267:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_read_interrupted,",
          "6268:             {\"Sensor read interrupted because strip was pulled too soon at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.read_interrupted\",",
          "6272:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_temperature_too_low,",
          "6273:             {\"Sensor temperature too low for valid test/result at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.temperature_too_low\",",
          "6277:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_temperature_too_high,",
          "6278:             {\"Sensor temperature too high for valid test/result at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.temperature_too_high\",",
          "6282:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_result_too_lower,",
          "6283:             {\"Sensor result lower than the device can process\", \"btatt.glucose_measurement.sensor_status_annunciation.result_too_lower\",",
          "6287:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_result_too_high,",
          "6288:             {\"Sensor result higher than the device can process\", \"btatt.glucose_measurement.sensor_status_annunciation.result_too_high\",",
          "6292:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_strip_type_incorrect,",
          "6293:             {\"Strip type incorrect for device\", \"btatt.glucose_measurement.sensor_status_annunciation.strip_type_incorrect\",",
          "6297:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_strip_insertion_error,",
          "6298:             {\"Strip insertion error\", \"btatt.glucose_measurement.sensor_status_annunciation.strip_insertion_error\",",
          "6302:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_size_insufficient,",
          "6303:             {\"Sample size for blood or control solution insufficient at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.size_insufficient\",",
          "6307:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_fault,",
          "6308:             {\"Sensor malfunction or faulting at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.fault\",",
          "6312:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_battery_low,",
          "6313:             {\"Device battery low at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.battery_low\",",
          "6314:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "6317:         {&hf_btatt_bond_management_feature,",
          "6318:             {\"Sensor Status Annunciation\", \"btatt.bond_management_feature\",",
          "6319:             FT_UINT24, BASE_HEX, NULL, 0x0,",
          "6322:         {&hf_btatt_bond_management_feature_feature_extension,",
          "6323:             {\"Feature Extension\", \"btatt.bond_management_feature.feature_extension\",",
          "6324:             FT_BOOLEAN, 24, NULL, 0x800000,",
          "6327:         {&hf_btatt_bond_management_feature_reserved,",
          "6328:             {\"Reserved\", \"btatt.bond_management_feature.reserved\",",
          "6329:             FT_UINT24, BASE_HEX, NULL, 0x780000,",
          "6332:         {&hf_btatt_bond_management_feature_identify_yourself,",
          "6333:             {\"Identify Yourself\", \"btatt.bond_management_feature.identify_yourself\",",
          "6334:             FT_BOOLEAN, 24, NULL, 0x040000,",
          "6337:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_9,",
          "6338:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.9\",",
          "6339:             FT_BOOLEAN, 24, NULL, 0x020000,",
          "6342:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_le_transport_only_server,",
          "6343:             {\"Remove all but the active bond on server (LE transport only)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_le_transport_only_server\",",
          "6344:             FT_BOOLEAN, 24, NULL, 0x010000,",
          "6347:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_8,",
          "6348:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.8\",",
          "6349:             FT_BOOLEAN, 24, NULL, 0x008000,",
          "6352:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_br_edr_transport_only_server,",
          "6353:             {\"Remove all but the active bond on server (BR/EDR transport only)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_br_edr_transport_only_server\",",
          "6354:             FT_BOOLEAN, 24, NULL, 0x004000,",
          "6357:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_7,",
          "6358:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.7\",",
          "6359:             FT_BOOLEAN, 24, NULL, 0x002000,",
          "6362:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_br_edr_and_le_server,",
          "6363:             {\"Remove all but the active bond on server (BR/EDR and LE)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_br_edr_and_le_server\",",
          "6364:             FT_BOOLEAN, 24, NULL, 0x001000,",
          "6367:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_6,",
          "6368:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.6\",",
          "6369:             FT_BOOLEAN, 24, NULL, 0x000800,",
          "6372:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_le_transport_only_server,",
          "6373:             {\"Remove all bonds on server (LE transport only)\", \"btatt.bond_management_feature.remove_all_bonds_on_le_transport_only_server\",",
          "6374:             FT_BOOLEAN, 24, NULL, 0x000400,",
          "6377:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_5,",
          "6378:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.5\",",
          "6379:             FT_BOOLEAN, 24, NULL, 0x000200,",
          "6382:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_br_edr_transport_only_server,",
          "6383:             {\"Remove all bonds on server (BR/EDR transport only)\", \"btatt.bond_management_feature.remove_all_bonds_on_br_edr_transport_only_server\",",
          "6384:             FT_BOOLEAN, 24, NULL, 0x000100,",
          "6387:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_4,",
          "6388:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.4\",",
          "6389:             FT_BOOLEAN, 24, NULL, 0x000080,",
          "6392:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_br_edr_and_le_server,",
          "6393:             {\"Remove all bonds on server (BR/EDR and LE)\", \"btatt.bond_management_feature.remove_all_bonds_on_br_edr_and_le_server\",",
          "6394:             FT_BOOLEAN, 24, NULL, 0x000040,",
          "6397:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_3,",
          "6398:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.3\",",
          "6399:             FT_BOOLEAN, 24, NULL, 0x000020,",
          "6402:         {&hf_btatt_bond_management_feature_delete_bond_of_current_le_transport_only_connection,",
          "6403:             {\"Delete bond of current connection (LE transport only)\", \"btatt.bond_management_feature.delete_bond_of_current_le_transport_only_connection\",",
          "6404:             FT_BOOLEAN, 24, NULL, 0x000010,",
          "6407:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_2,",
          "6408:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.2\",",
          "6409:             FT_BOOLEAN, 24, NULL, 0x000008,",
          "6412:         {&hf_btatt_bond_management_feature_delete_bond_of_current_br_edr_transport_only_connection,",
          "6413:             {\"Delete bond of current connection (BR/EDR transport only)\", \"btatt.bond_management_feature.delete_bond_of_current_br_edr_transport_only_connection\",",
          "6414:             FT_BOOLEAN, 24, NULL, 0x000004,",
          "6417:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_1,",
          "6418:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.1\",",
          "6419:             FT_BOOLEAN, 24, NULL, 0x000002,",
          "6422:         {&hf_btatt_bond_management_feature_delete_bond_of_current_br_edr_and_le_connection,",
          "6423:             {\"Delete Bond of current connection (BR/EDR and LE)\", \"btatt.bond_management_feature.delete_bond_of_current_br_edr_and_le_connection\",",
          "6424:             FT_BOOLEAN, 24, NULL, 0x000001,",
          "6427:         {&hf_btatt_bond_management_feature_nth,",
          "6428:             {\"Extended Features\", \"btatt.bond_management_feature.nth\",",
          "6429:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6432:         {&hf_btatt_bond_management_feature_nth_feature_extension,",
          "6433:             {\"Feature Extension\", \"btatt.bond_management_feature.nth.feature_extension\",",
          "6434:             FT_BOOLEAN, 8, NULL, 0x80,",
          "6437:         {&hf_btatt_bond_management_feature_nth_reserved,",
          "6438:             {\"Reserved\", \"btatt.bond_management_feature.nth.reserved\",",
          "6439:             FT_UINT8, BASE_HEX, NULL, 0x7F,",
          "6442:         {&hf_btatt_bond_management_control_point_opcode,",
          "6443:             {\"Opcode\", \"btatt.bond_management_control_point.opcode\",",
          "6444:             FT_UINT8, BASE_HEX, VALS(bond_management_control_point_opcode_vals), 0x0,",
          "6447:         {&hf_btatt_bond_management_control_point_authorization_code,",
          "6448:             {\"Authorization Code\", \"btatt.bond_management_control_point.authorization_code\",",
          "6449:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "6452:         {&hf_btatt_temperature_measurement_flags,",
          "6453:             {\"Sensor Status Annunciation\", \"btatt.temperature_measurement.flags\",",
          "6454:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6457:         {&hf_btatt_temperature_measurement_flags_reserved,",
          "6458:             {\"Reserved\", \"btatt.temperature_measurement.flags.reserved\",",
          "6459:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "6462:         {&hf_btatt_temperature_measurement_flags_temperature_type,",
          "6463:             {\"Temperature Type\", \"btatt.temperature_measurement.flags.temperature_type\",",
          "6464:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6467:         {&hf_btatt_temperature_measurement_flags_timestamp,",
          "6468:             {\"Timestamp\", \"btatt.temperature_measurement.flags.timestamp\",",
          "6469:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6472:         {&hf_btatt_temperature_measurement_flags_temperature_unit,",
          "6473:             {\"Temperature Unit\", \"btatt.temperature_measurement.flags.temperature_unit\",",
          "6474:             FT_UINT8, BASE_HEX, VALS(temperature_measurement_flags_temperature_unit_vals), 0x01,",
          "6478:         {&hf_btatt_temperature_measurement_value_celsius,",
          "6479:             {\"Value [Celsius]\", \"btatt.temperature_measurement.value.celsius\",",
          "6480:             FT_UINT32, BASE_HEX, NULL, 0x00,",
          "6484:         {&hf_btatt_temperature_measurement_value_fahrenheit,",
          "6485:             {\"Value [Fahrenheit]\", \"btatt.temperature_measurement.value.fahrenheit\",",
          "6486:             FT_UINT32, BASE_HEX, NULL, 0x00,",
          "6489:         {&hf_btatt_temperature_measurement_timestamp,",
          "6490:             {\"Timestamp\", \"btatt.temperature_measurement.timestamp\",",
          "6491:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6494:         {&hf_btatt_glucose_measurement_context_flags,",
          "6495:             {\"Glucose Measurement Context\", \"btatt.glucose_measurement_context.flags\",",
          "6499:         {&hf_btatt_glucose_measurement_context_flags_extended_flags,",
          "6500:             {\"Extended Flags\", \"btatt.glucose_measurement_context.flags.extended_flags\",",
          "6504:         {&hf_btatt_glucose_measurement_context_flags_hba1c,",
          "6505:             {\"HbA1c\", \"btatt.glucose_measurement_context.flags.hba1c\",",
          "6506:             FT_BOOLEAN, 8, NULL, 0x40,",
          "6509:         {&hf_btatt_glucose_measurement_context_flags_medication_value_units,",
          "6510:             {\"Medication Value Units\", \"btatt.glucose_measurement_context.flags.medication_value_units\",",
          "6511:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_flags_medication_value_units_vals), 0x20,",
          "6514:         {&hf_btatt_glucose_measurement_context_flags_medication_id_and_medication,",
          "6515:             {\"Medication ID And Medication\", \"btatt.glucose_measurement_context.flags.\",",
          "6519:         {&hf_btatt_glucose_measurement_context_flags_exercise_duration_and_exercise_intensity,",
          "6520:             {\"Exercise Duration And Exercise Intensity\", \"btatt.glucose_measurement_context.flags.\",",
          "6524:         {&hf_btatt_glucose_measurement_context_flags_tester_health,",
          "6525:             {\"Tester Health\", \"btatt.glucose_measurement_context.flags.\",",
          "6529:         {&hf_btatt_glucose_measurement_context_flags_meal,",
          "6530:             {\"Meal\", \"btatt.glucose_measurement_context.flags.\",",
          "6534:         {&hf_btatt_glucose_measurement_context_flags_carbohydrate_id_and_carbohydrate,",
          "6535:             {\"Carbohydrate ID And Carbohydrate\", \"btatt.glucose_measurement_context.flags.\",",
          "6539:         {&hf_btatt_glucose_measurement_context_sequence_number,",
          "6540:             {\"Sequence Number\", \"btatt.glucose_measurement_context.sequence_number\",",
          "6541:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6544:         {&hf_btatt_glucose_measurement_context_extended_flags,",
          "6545:             {\"Extended Flags\", \"btatt.glucose_measurement_context.extended_flags\",",
          "6546:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6549:         {&hf_btatt_glucose_measurement_context_extended_flags_reserved,",
          "6550:             {\"Reserved\", \"btatt.glucose_measurement_context.extended_flags.reserved\",",
          "6551:             FT_UINT8, BASE_HEX, NULL, 0xFF,",
          "6554:         {&hf_btatt_glucose_measurement_context_carbohydrate_id,",
          "6555:             {\"Carbohydrate ID\", \"btatt.glucose_measurement_context.carbohydrate_id\",",
          "6556:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_carbohydrate_id_vals), 0x0,",
          "6560:         {&hf_btatt_glucose_measurement_context_carbohydrate_kg,",
          "6561:             {\"Carbohydrate [kg]\", \"btatt.glucose_measurement_context.carbohydrate.kg\",",
          "6562:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6565:         {&hf_btatt_glucose_measurement_context_meal,",
          "6566:             {\"Meal\", \"btatt.glucose_measurement_context.meal\",",
          "6567:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_meal_vals), 0x0,",
          "6570:         {&hf_btatt_glucose_measurement_context_tester_health,",
          "6571:             {\"Tester and Health\", \"btatt.glucose_measurement_context.tester_and_health\",",
          "6575:         {&hf_btatt_glucose_measurement_context_tester,",
          "6576:             {\"Tester\", \"btatt.glucose_measurement_context.tester_and_health.tester\",",
          "6577:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_tester_vals), 0xF0,",
          "6580:         {&hf_btatt_glucose_measurement_context_health,",
          "6581:             {\"Health\", \"btatt.glucose_measurement_context.tester_and_health.health\",",
          "6582:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_health_vals), 0x0F,",
          "6585:         {&hf_btatt_glucose_measurement_context_exercise_duration,",
          "6586:             {\"Exercise Duration\", \"btatt.glucose_measurement_context.exercise_duration\",",
          "6587:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6590:         {&hf_btatt_glucose_measurement_context_exercise_intensity,",
          "6591:             {\"Exercise Intensity\", \"btatt.glucose_measurement_context.exercise_intensity\",",
          "6592:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6595:         {&hf_btatt_glucose_measurement_context_medication_id,",
          "6596:             {\"Medication ID\", \"btatt.glucose_measurement_context.medication_id\",",
          "6597:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_medication_id_vals), 0x0,",
          "6601:         {&hf_btatt_glucose_measurement_context_medication_l,",
          "6602:             {\"Medication [l]\", \"btatt.glucose_measurement_context.medication.l\",",
          "6603:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6607:         {&hf_btatt_glucose_measurement_context_medication_kg,",
          "6608:             {\"Medication [kg]\", \"btatt.glucose_measurement_context.medication.kg\",",
          "6613:         {&hf_btatt_glucose_measurement_context_hba1c,",
          "6614:             {\"HbA1c\", \"btatt.glucose_measurement_context.hba1c\",",
          "6618:         {&hf_btatt_blood_pressure_measurement_flags,",
          "6619:             {\"Flags\", \"btatt.blood_pressure_measurement.flags\",",
          "6620:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6623:         {&hf_btatt_blood_pressure_measurement_flags_reserved,",
          "6624:             {\"Reserved\", \"btatt.blood_pressure_measurement.flags.reserved\",",
          "6625:             FT_UINT8, BASE_HEX, NULL, 0xE0,",
          "6628:         {&hf_btatt_blood_pressure_measurement_flags_measurement_status,",
          "6629:             {\"Measurement Status\", \"btatt.blood_pressure_measurement.flags.measurement_status\",",
          "6630:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6633:         {&hf_btatt_blood_pressure_measurement_flags_user_id,",
          "6634:             {\"User ID\", \"btatt.blood_pressure_measurement.flags.user_id\",",
          "6635:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6638:         {&hf_btatt_blood_pressure_measurement_flags_pulse_rate,",
          "6639:             {\"Pulse Rate\", \"btatt.blood_pressure_measurement.flags.pulse_rate\",",
          "6640:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6643:         {&hf_btatt_blood_pressure_measurement_flags_timestamp,",
          "6644:             {\"Timestamp\", \"btatt.blood_pressure_measurement.flags.timestamp\",",
          "6645:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6648:         {&hf_btatt_blood_pressure_measurement_flags_unit,",
          "6649:             {\"Unit\", \"btatt.blood_pressure_measurement.flags.unit\",",
          "6650:             FT_UINT8, BASE_HEX, VALS(blood_pressure_measurement_unit_vals), 0x01,",
          "6654:         {&hf_btatt_blood_pressure_measurement_compound_value_systolic_kpa,",
          "6655:             {\"Systolic [kPa]\", \"btatt.blood_pressure_measurement.compound_value.systolic.kpa\",",
          "6656:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6660:         {&hf_btatt_blood_pressure_measurement_compound_value_diastolic_kpa,",
          "6661:             {\"Diastolic [kPa]\", \"btatt.blood_pressure_measurement.compound_value.diastolic.kpa\",",
          "6662:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6666:         {&hf_btatt_blood_pressure_measurement_compound_value_mean_arterial_pressure_kpa,",
          "6667:             {\"Arterial Pressure [kPa]\", \"btatt.blood_pressure_measurement.compound_value.arterial_pressure.kpa\",",
          "6668:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6672:         {&hf_btatt_blood_pressure_measurement_compound_value_systolic_mmhg,",
          "6673:             {\"Systolic [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.systolic.mmhg\",",
          "6674:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6678:         {&hf_btatt_blood_pressure_measurement_compound_value_diastolic_mmhg,",
          "6679:             {\"Diastolic [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.diastolic.mmhg\",",
          "6680:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6684:         {&hf_btatt_blood_pressure_measurement_compound_value_mean_arterial_pressure_mmhg,",
          "6685:             {\"Arterial Pressure [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.arterial_pressure.mmhg\",",
          "6686:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6689:         {&hf_btatt_blood_pressure_measurement_timestamp,",
          "6690:             {\"Timestamp\", \"btatt.blood_pressure_measurement.compound_value.timestamp\",",
          "6691:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6695:         {&hf_btatt_blood_pressure_measurement_pulse_rate,",
          "6696:             {\"Pulse Rate\", \"btatt.blood_pressure_measurement.pulse_rate\",",
          "6697:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6700:         {&hf_btatt_blood_pressure_measurement_user_id,",
          "6701:             {\"User ID\", \"btatt.blood_pressure_measurement.user_id\",",
          "6702:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6705:         {&hf_btatt_blood_pressure_measurement_status,",
          "6706:             {\"Flags\", \"btatt.blood_pressure_measurement.status\",",
          "6707:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6710:         {&hf_btatt_blood_pressure_measurement_status_reserved,",
          "6711:             {\"Reserved\", \"btatt.blood_pressure_measurement.status.reserved\",",
          "6712:             FT_UINT16, BASE_HEX, NULL, 0xFFC0,",
          "6715:         {&hf_btatt_blood_pressure_measurement_status_improper_measurement_position,",
          "6716:             {\"Improper Measurement Position\", \"btatt.blood_pressure_measurement.status.improper_measurement_position\",",
          "6717:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "6720:         {&hf_btatt_blood_pressure_measurement_status_pulse_rate_range_detection,",
          "6721:             {\"Pulse_Rate Range Detection\", \"btatt.blood_pressure_measurement.status.pulse_rate_range_detection\",",
          "6722:             FT_UINT16, BASE_HEX, VALS(blood_pressure_measurement_status_pulse_rate_range_detection_vals), 0x0018,",
          "6725:         {&hf_btatt_blood_pressure_measurement_status_irregular_pulse,",
          "6726:             {\"Irregular Pulse\", \"btatt.blood_pressure_measurement.status.irregular_pulse\",",
          "6727:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "6730:         {&hf_btatt_blood_pressure_measurement_status_cuff_fit_too_loose,",
          "6731:             {\"Cuff Fit too Loose\", \"btatt.blood_pressure_measurement.status.cuff_fit_too_loose\",",
          "6732:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "6735:         {&hf_btatt_blood_pressure_measurement_status_body_movement,",
          "6736:             {\"Body Movement\", \"btatt.blood_pressure_measurement.status.body_movement\",",
          "6737:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "6740:         {&hf_btatt_heart_rate_measurement_flags,",
          "6741:             {\"Flags\", \"btatt.heart_rate_measurement.flags\",",
          "6742:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6745:         {&hf_btatt_heart_rate_measurement_flags_reserved,",
          "6746:             {\"Reserved\", \"btatt.heart_rate_measurement.flags.reserved\",",
          "6747:             FT_UINT16, BASE_HEX, NULL, 0xE0,",
          "6750:         {&hf_btatt_heart_rate_measurement_flags_rr_interval,",
          "6751:             {\"RR Interval\", \"btatt.heart_rate_measurement.flags.rr_interval\",",
          "6752:             FT_BOOLEAN, 16, NULL, 0x10,",
          "6755:         {&hf_btatt_heart_rate_measurement_flags_energy_expended,",
          "6756:             {\"Energy Expended\", \"btatt.heart_rate_measurement.flags.energy_expended\",",
          "6757:             FT_BOOLEAN, 16, NULL, 0x08,",
          "6760:         {&hf_btatt_heart_rate_measurement_flags_sensor_contact_status_support,",
          "6761:             {\"Sensor Support\", \"btatt.heart_rate_measurement.flags.sensor_contact_status.support\",",
          "6762:             FT_BOOLEAN, 16, NULL, 0x04,",
          "6765:         {&hf_btatt_heart_rate_measurement_flags_sensor_contact_status_contact,",
          "6766:             {\"Sensor Contact\", \"btatt.heart_rate_measurement.flags.sensor_contact_status.contact\",",
          "6767:             FT_BOOLEAN, 16, NULL, 0x02,",
          "6770:         {&hf_btatt_heart_rate_measurement_flags_value_16,",
          "6771:             {\"Value is UINT16\", \"btatt.heart_rate_measurement.flags.value_16\",",
          "6772:             FT_BOOLEAN, 16, NULL, 0x01,",
          "6775:         {&hf_btatt_heart_rate_measurement_value_8,",
          "6776:             {\"Value\", \"btatt.heart_rate_measurement.value.8\",",
          "6777:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6780:         {&hf_btatt_heart_rate_measurement_value_16,",
          "6781:             {\"Value\", \"btatt.heart_rate_measurement.value.16\",",
          "6785:         {&hf_btatt_heart_rate_measurement_energy_expended,",
          "6786:             {\"Energy Expended\", \"btatt.heart_rate_measurement.energy_expended\",",
          "6790:         {&hf_btatt_heart_rate_measurement_rr_interval,",
          "6791:             {\"RR Interval\", \"btatt.heart_rate_measurement.rr_interval\",",
          "6795:         {&hf_btatt_record_access_control_point_opcode,",
          "6796:             {\"Opcode\", \"btatt.record_access_control_point.opcode\",",
          "6797:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_opcode_vals), 0x0,",
          "6800:         {&hf_btatt_record_access_control_point_operator,",
          "6801:             {\"Operator\", \"btatt.record_access_control_point.operator\",",
          "6802:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_operator_vals), 0x0,",
          "6805:         {&hf_btatt_record_access_control_point_operand,",
          "6806:             {\"Operand\", \"btatt.record_access_control_point.operand\",",
          "6807:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6810:         {&hf_btatt_record_access_control_point_operand_filter_type,",
          "6811:             {\"Filter Type\", \"btatt.record_access_control_point.operand.filter_type\",",
          "6812:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_operand_filter_type_vals), 0x0,",
          "6815:         {&hf_btatt_record_access_control_point_operand_min_time_offset,",
          "6816:             {\"Min Time Offset\", \"btatt.record_access_control_point_operand.min_time_offset\",",
          "6817:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6820:         {&hf_btatt_record_access_control_point_operand_max_time_offset,",
          "6821:             {\"Max Time Offset\", \"btatt.record_access_control_point_operand.max_time_offset\",",
          "6825:         {&hf_btatt_record_access_control_point_operand_number_of_records,",
          "6826:             {\"Number of Records\", \"btatt.record_access_control_point_operand.number_of_records\",",
          "6827:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6830:         {&hf_btatt_record_access_control_point_request_opcode,",
          "6831:             {\"Request Opcode\", \"btatt.record_access_control_point.request_opcode\",",
          "6832:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_opcode_vals), 0x0,",
          "6835:         {&hf_btatt_record_access_control_point_response_code,",
          "6836:             {\"Request Opcode\", \"btatt.record_access_control_point.response_code\",",
          "6837:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_response_code_vals), 0x0,",
          "",
          "[Added Lines]",
          "4240:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_rsc_measurement_flags, ett_btatt_value, hfx_btatt_rsc_measurement_flags, ENC_NA);",
          "4241:         flags = tvb_get_guint8(tvb, offset);",
          "4242:         offset += 1;",
          "4244:         proto_tree_add_item(tree, hf_btatt_rsc_measurement_instantaneous_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4247:         proto_tree_add_item(tree, hf_btatt_rsc_measurement_instantaneous_cadence, tvb, offset, 1, ENC_NA);",
          "4248:         offset += 1;",
          "4250:         if (flags & 0x01) {",
          "4251:             proto_tree_add_item(tree, hf_btatt_rsc_measurement_instantaneous_stride_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4252:             offset += 2;",
          "4253:         }",
          "4255:         if (flags & 0x02) {",
          "4256:             proto_tree_add_item(tree, hf_btatt_rsc_measurement_total_distance, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4257:             offset += 4;",
          "4258:         }",
          "4262:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_rsc_feature, ett_btatt_value, hfx_btatt_rsc_feature, ENC_LITTLE_ENDIAN);",
          "4267:         proto_tree_add_item(tree, hf_btatt_sc_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "4268:         opcode = tvb_get_guint8(tvb, offset);",
          "4271:         switch (opcode) {",
          "4273:             proto_tree_add_item(tree, hf_btatt_sc_control_point_cumulative_value, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4274:             offset += 4;",
          "4276:             break;",
          "4278:             proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "4279:             offset += 1;",
          "4281:             break;",
          "4283:             proto_tree_add_item(tree, hf_btatt_sc_control_point_request_opcode, tvb, offset, 1, ENC_NA);",
          "4284:             value = tvb_get_guint8(tvb, offset);",
          "4285:             offset += 1;",
          "4287:             proto_tree_add_item(tree, hf_btatt_sc_control_point_response_value, tvb, offset, 1, ENC_NA);",
          "4288:             offset += 1;",
          "4291:                 while (tvb_captured_length_remaining(tvb, offset)) {",
          "4292:                     proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "4293:                     offset += 1;",
          "4294:                 }",
          "4295:             }",
          "4297:             break;",
          "4301:             break;",
          "4302:         }",
          "4306:         proto_tree_add_item(tree, hf_btatt_digital, tvb, offset, 1, ENC_NA);",
          "4307:         offset += 1;",
          "4311:         proto_tree_add_item(tree, hf_btatt_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4316:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, NULL);",
          "4317:         offset += 1;",
          "4319:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset(tvb, offset, 2, 2), pinfo, tree, NULL);",
          "4324:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_csc_measurement_flags, ett_btatt_value, hfx_btatt_csc_measurement_flags, ENC_NA);",
          "4325:         flags = tvb_get_guint8(tvb, offset);",
          "4328:         if (flags & 0x01) {",
          "4329:             proto_tree_add_item(tree, hf_btatt_csc_measurement_cumulative_wheel_revolutions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4330:             offset += 4;",
          "4332:             proto_tree_add_item(tree, hf_btatt_csc_measurement_last_event_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4333:             offset += 2;",
          "4334:         }",
          "4336:         if (flags & 0x02) {",
          "4337:             proto_tree_add_item(tree, hf_btatt_csc_measurement_cumulative_crank_revolutions, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4338:             offset += 2;",
          "4340:             proto_tree_add_item(tree, hf_btatt_csc_measurement_last_event_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4341:             offset += 2;",
          "4342:         }",
          "4346:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_csc_feature, ett_btatt_value, hfx_btatt_csc_feature, ENC_LITTLE_ENDIAN);",
          "4347:         offset += 2;",
          "4351:         proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "4356:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_measurement_flags, ett_btatt_value, hfx_btatt_cycling_power_measurement_flags, ENC_LITTLE_ENDIAN);",
          "4357:         flags = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4358:         offset += 2;",
          "4360:         proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_instantaneous_power, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4363:         if (flags & 0x01) {",
          "4364:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_pedal_power_balance, tvb, offset, 1, ENC_NA);",
          "4365:             offset += 1;",
          "4366:         }",
          "4368:         if (flags & 0x04) {",
          "4369:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_accumulated_torque, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4373:         if (flags & 0x10) {",
          "4374:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_wheel_revolution_data_cumulative_wheel_revolutions, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4375:             offset += 4;",
          "4377:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_wheel_revolution_data_last_wheel_event_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4378:             offset += 2;",
          "4379:         }",
          "4381:         if (flags & 0x20) {",
          "4382:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_crank_revolution_data_cumulative_crank_revolutions, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4383:             offset += 2;",
          "4385:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_crank_revolution_data_last_crank_event_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4386:             offset += 2;",
          "4387:         }",
          "4389:         if (flags & 0x40) {",
          "4390:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_extreme_force_magnitudes_maximum_force_magnitude, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4391:             offset += 2;",
          "4393:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_extreme_force_magnitudes_minimum_force_magnitude, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4394:             offset += 2;",
          "4395:         }",
          "4397:         if (flags & 0x80) {",
          "4398:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_maximum_torque_magnitude, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4399:             offset += 2;",
          "4401:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_minimum_torque_magnitude, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4402:             offset += 2;",
          "4403:         }",
          "4405:         if (flags & 0x100) {",
          "4406:             proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_measurement_extreme_angles, ett_btatt_value, hfx_btatt_cycling_power_measurement_extreme_angles, ENC_NA);",
          "4407:             offset += 3;",
          "4408:         }",
          "4410:         if (flags & 0x200) {",
          "4411:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_top_dead_spot_angle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4412:             offset += 2;",
          "4413:         }",
          "4415:         if (flags & 0x400) {",
          "4416:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_bottom_dead_spot_angle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4417:             offset += 2;",
          "4418:         }",
          "4420:         if (flags & 0x800) {",
          "4421:             proto_tree_add_item(tree, hf_btatt_cycling_power_measurement_accumulated_energy, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4422:             offset += 2;",
          "4423:         }",
          "4427:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_vector_flags, ett_btatt_value, hfx_btatt_cycling_power_vector_flags, ENC_NA);",
          "4428:         flags = tvb_get_guint8(tvb, offset);",
          "4431:         if (flags & 0x01) {",
          "4432:             proto_tree_add_item(tree, hf_btatt_cycling_power_vector_crank_revolution_data_cumulative_crank_revolutions, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4433:             offset += 2;",
          "4435:             proto_tree_add_item(tree, hf_btatt_cycling_power_vector_crank_revolution_data_last_crank_event_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4436:             offset += 2;",
          "4437:         }",
          "4439:         if (flags & 0x02) {",
          "4440:             proto_tree_add_item(tree, hf_btatt_cycling_power_vector_first_crank_measurement_angle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4441:             offset += 2;",
          "4442:         }",
          "4444:         if (flags & 0x04) {",
          "4445:             while (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "4446:                 proto_tree_add_item(tree, hf_btatt_cycling_power_vector_instantaneous_force_magnitude_array, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4447:                 offset += 2;",
          "4448:             }",
          "4449:         }",
          "4451:         if (flags & 0x08) {",
          "4452:             while (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "4453:                 proto_tree_add_item(tree, hf_btatt_cycling_power_vector_instantaneous_torque_magnitude_array, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4454:                 offset += 2;",
          "4455:             }",
          "4456:         }",
          "4460:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_feature, ett_btatt_value, hfx_btatt_cycling_power_feature, ENC_LITTLE_ENDIAN);",
          "4461:         offset += 4;",
          "4465:         proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "4466:         opcode = tvb_get_guint8(tvb, offset);",
          "4469:         switch (opcode) {",
          "4471:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_cumulative_value, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4472:             offset += 4;",
          "4474:             break;",
          "4476:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_sensor_location, tvb, offset, 1, ENC_NA);",
          "4477:             offset += 1;",
          "4479:             break;",
          "4481:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_crank_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4482:             offset += 2;",
          "4484:             break;",
          "4486:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_chain_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4487:             offset += 2;",
          "4489:             break;",
          "4491:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_chain_weight, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4492:             offset += 2;",
          "4494:             break;",
          "4496:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_span_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4497:             offset += 2;",
          "4499:             break;",
          "4501:             proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cycling_power_control_point_content_mask, ett_btatt_value, hfx_btatt_cycling_power_control_point_content_mask, ENC_LITTLE_ENDIAN);",
          "4502:             offset += 2;",
          "4504:             break;",
          "4515:             break;",
          "4517:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_request_opcode, tvb, offset, 1, ENC_NA);",
          "4518:             offset += 1;",
          "4520:             proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_response_value, tvb, offset, 1, ENC_NA);",
          "4521:             offset += 1;",
          "4523:             switch (tvb_get_guint8(tvb, offset - 2)) {",
          "4533:                 break;",
          "4535:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4536:                     while (tvb_captured_length_remaining(tvb, offset)) {",
          "4537:                         proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "4538:                         offset += 1;",
          "4539:                     }",
          "4540:                 }",
          "4542:                 break;",
          "4544:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4545:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_crank_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4546:                     offset += 2;",
          "4547:                 }",
          "4549:                 break;",
          "4551:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4552:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_chain_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4553:                     offset += 2;",
          "4554:                 }",
          "4556:                 break;",
          "4558:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4559:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_chain_weight, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4560:                     offset += 2;",
          "4561:                 }",
          "4563:                 break;",
          "4565:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4566:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_span_length, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4567:                     offset += 2;",
          "4568:                 }",
          "4570:                 break;",
          "4572:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4573:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_start_offset_compensation, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4574:                     offset += 2;",
          "4575:                 }",
          "4577:                 break;",
          "4579:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4580:                     proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_sampling_rate, tvb, offset, 1, ENC_NA);",
          "4581:                     offset += 1;",
          "4582:                 }",
          "4584:                 break;",
          "4586:                 if (tvb_get_guint8(tvb, offset - 1) == 0x01) /* Success */ {",
          "4587:                     sub_item = proto_tree_add_item(tree, hf_btatt_cycling_power_control_point_factory_calibration_date, tvb, offset, 7, ENC_NA);",
          "4588:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4590:                     proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4591:                     offset += 2;",
          "4593:                     proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "4594:                     offset += 1;",
          "4596:                     proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "4597:                     offset += 1;",
          "4599:                     proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "4600:                     offset += 1;",
          "4602:                     proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "4603:                     offset += 1;",
          "4605:                     proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "4606:                     offset += 1;",
          "4607:                 }",
          "4609:                 break;",
          "4610:             }",
          "4611:             break;",
          "4616:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_location_and_speed_flags, ett_btatt_value, hfx_btatt_location_and_speed_flags, ENC_LITTLE_ENDIAN);",
          "4617:         flags = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4618:         offset += 2;",
          "4620:         if (flags & 0x01) {",
          "4621:             proto_tree_add_item(tree, hf_btatt_location_and_speed_instantaneous_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4622:             offset += 2;",
          "4623:         }",
          "4625:         if (flags & 0x02) {",
          "4626:             proto_tree_add_item(tree, hf_btatt_location_and_speed_total_distance, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4627:             offset += 3;",
          "4628:         }",
          "4630:         if (flags & 0x04) {",
          "4631:             proto_tree_add_item(tree, hf_btatt_location_and_speed_location_latitude, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4632:             offset += 4;",
          "4634:             proto_tree_add_item(tree, hf_btatt_location_and_speed_location_longitude, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4635:             offset += 4;",
          "4636:         }",
          "4638:         if (flags & 0x08) {",
          "4639:             proto_tree_add_item(tree, hf_btatt_location_and_speed_elevation, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4640:             offset += 3;",
          "4641:         }",
          "4643:         if (flags & 0x10) {",
          "4644:             proto_tree_add_item(tree, hf_btatt_location_and_speed_heading, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4645:             offset += 2;",
          "4646:         }",
          "4648:         if (flags & 0x20) {",
          "4649:             proto_tree_add_item(tree, hf_btatt_location_and_speed_rolling_time, tvb, offset, 1, ENC_NA);",
          "4650:             offset += 1;",
          "4651:         }",
          "4653:         if (flags & 0x40) {",
          "4654:             sub_item = proto_tree_add_item(tree, hf_btatt_location_and_speed_utc_time, tvb, offset, 7, ENC_NA);",
          "4655:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4657:             proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4658:             offset += 2;",
          "4660:             proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "4661:             offset += 1;",
          "4663:             proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "4664:             offset += 1;",
          "4666:             proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "4667:             offset += 1;",
          "4669:             proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "4670:             offset += 1;",
          "4672:             proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "4673:             offset += 1;",
          "4674:         }",
          "4676:         break;",
          "4678:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_navigation_flags, ett_btatt_value, hfx_btatt_navigation_flags, ENC_LITTLE_ENDIAN);",
          "4679:         flags = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4680:         offset += 2;",
          "4682:         proto_tree_add_item(tree, hf_btatt_navigation_bearing, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4683:         offset += 2;",
          "4685:         proto_tree_add_item(tree, hf_btatt_navigation_heading, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4686:         offset += 2;",
          "4688:         if (flags & 0x01) {",
          "4689:             proto_tree_add_item(tree, hf_btatt_navigation_remaining_distance, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4690:             offset += 3;",
          "4691:         }",
          "4693:         if (flags & 0x02) {",
          "4694:             proto_tree_add_item(tree, hf_btatt_navigation_remaining_vertical_distance, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4695:             offset += 3;",
          "4696:         }",
          "4698:         if (flags & 0x04) {",
          "4699:             sub_item = proto_tree_add_item(tree, hf_btatt_navigation_estimated_time_of_arrival, tvb, offset, 7, ENC_NA);",
          "4700:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "4702:             proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4703:             offset += 2;",
          "4705:             proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "4706:             offset += 1;",
          "4708:             proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "4709:             offset += 1;",
          "4711:             proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "4712:             offset += 1;",
          "4714:             proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "4715:             offset += 1;",
          "4717:             proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "4718:             offset += 1;",
          "4719:         }",
          "4721:         break;",
          "4723:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_position_quality_flags, ett_btatt_value, hfx_btatt_position_quality_flags, ENC_LITTLE_ENDIAN);",
          "4724:         flags = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4725:         offset += 2;",
          "4727:         if (flags & 0x01) {",
          "4728:             proto_tree_add_item(tree, hf_btatt_position_quality_number_of_beacons_in_solution, tvb, offset, 1, ENC_NA);",
          "4729:             offset += 1;",
          "4732:         if (flags & 0x02) {",
          "4733:             proto_tree_add_item(tree, hf_btatt_position_quality_number_of_beacons_in_view, tvb, offset, 1, ENC_NA);",
          "4734:             offset += 1;",
          "4735:         }",
          "4737:         if (flags & 0x04) {",
          "4738:             proto_tree_add_item(tree, hf_btatt_position_quality_time_to_first_fix, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4739:             offset += 2;",
          "4740:         }",
          "4742:         if (flags & 0x08) {",
          "4743:             proto_tree_add_item(tree, hf_btatt_position_quality_ehpe, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4744:             offset += 4;",
          "4747:         if (flags & 0x10) {",
          "4748:             proto_tree_add_item(tree, hf_btatt_position_quality_evpe, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4749:             offset += 4;",
          "4752:         if (flags & 0x20) {",
          "4753:             proto_tree_add_item(tree, hf_btatt_position_quality_hdop, tvb, offset, 1, ENC_NA);",
          "4754:             offset += 1;",
          "4755:         }",
          "4757:         if (flags & 0x40) {",
          "4758:             proto_tree_add_item(tree, hf_btatt_position_quality_vdop, tvb, offset, 1, ENC_NA);",
          "4759:             offset += 1;",
          "4760:         }",
          "4763:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_ln_feature, ett_btatt_value, hfx_btatt_ln_feature, ENC_LITTLE_ENDIAN);",
          "4764:         offset += 4;",
          "4766:         break;",
          "4768:         proto_tree_add_item(tree, hf_btatt_ln_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "4769:         opcode = tvb_get_guint8(tvb, offset);",
          "4770:         offset += 1;",
          "4772:         switch (opcode) {",
          "4774:             proto_tree_add_item(tree, hf_btatt_ln_control_point_cumulative_value, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4775:             offset += 3;",
          "4777:             break;",
          "4779:             proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_ln_control_point_content_mask, ett_btatt_value, hfx_btatt_ln_control_point_content_mask, ENC_LITTLE_ENDIAN);",
          "4780:             offset += 2;",
          "4782:             break;",
          "4784:             proto_tree_add_item(tree, hf_btatt_ln_control_point_navigation_control, tvb, offset, 1, ENC_NA);",
          "4785:             offset += 1;",
          "4787:             break;",
          "4791:             break;",
          "4794:             proto_tree_add_item(tree, hf_btatt_ln_control_point_route_number, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4795:             offset += 2;",
          "4799:             proto_tree_add_item(tree, hf_btatt_ln_control_point_fix_rate, tvb, offset, 1, ENC_NA);",
          "4800:             offset += 1;",
          "4804:             proto_tree_add_item(tree, hf_btatt_ln_control_point_elevation, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4805:             offset += 3;",
          "4809:             proto_tree_add_item(tree, hf_btatt_ln_control_point_request_opcode, tvb, offset, 1, ENC_NA);",
          "4810:             offset += 1;",
          "4812:             proto_tree_add_item(tree, hf_btatt_ln_control_point_response_value, tvb, offset, 1, ENC_NA);",
          "4813:             offset += 1;",
          "4815:             switch (tvb_get_guint8(tvb, offset - 2)) {",
          "4824:                 break;",
          "4826:                 proto_tree_add_item(tree, hf_btatt_ln_control_point_response_value_number_of_routes, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4827:                 offset += 2;",
          "4829:                 break;",
          "4831:                 proto_tree_add_item(tree, hf_btatt_ln_control_point_response_value_name_of_route, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "4832:                 offset += tvb_captured_length_remaining(tvb, offset);",
          "4834:                 break;",
          "4835:             }",
          "4837:             break;",
          "4838:         }",
          "4840:         break;",
          "4842:         proto_tree_add_item(tree, hf_btatt_elevation, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4843:         offset += 3;",
          "4845:         break;",
          "4847:         proto_tree_add_item(tree, hf_btatt_pressure, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "4848:         offset += 4;",
          "4850:         break;",
          "4852:         proto_tree_add_item(tree, hf_btatt_temperature, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4853:         offset += 2;",
          "4857:         proto_tree_add_item(tree, hf_btatt_humidity, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4858:         offset += 2;",
          "4860:         break;",
          "4862:         proto_tree_add_item(tree, hf_btatt_true_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4865:         break;",
          "4867:         proto_tree_add_item(tree, hf_btatt_true_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4868:         offset += 2;",
          "4870:         break;",
          "4872:         proto_tree_add_item(tree, hf_btatt_apparent_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4873:         offset += 2;",
          "4875:         break;",
          "4877:         proto_tree_add_item(tree, hf_btatt_apparent_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4878:         offset += 2;",
          "4882:         proto_tree_add_item(tree, hf_btatt_gust_factor, tvb, offset, 1, ENC_NA);",
          "4883:         offset += 1;",
          "4885:         break;",
          "4887:         proto_tree_add_item(tree, hf_btatt_pollen_concentration, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "4888:         offset += 3;",
          "4892:         proto_tree_add_item(tree, hf_btatt_uv_index, tvb, offset, 1, ENC_NA);",
          "4893:         offset += 1;",
          "4895:         break;",
          "4897:         proto_tree_add_item(tree, hf_btatt_irradiance, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4900:         break;",
          "4902:         proto_tree_add_item(tree, hf_btatt_rainfall, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4905:         break;",
          "4907:         proto_tree_add_item(tree, hf_btatt_wind_chill, tvb, offset, 1, ENC_NA);",
          "4908:         offset += 1;",
          "4910:         break;",
          "4912:         proto_tree_add_item(tree, hf_btatt_heart_index, tvb, offset, 1, ENC_NA);",
          "4913:         offset += 1;",
          "4917:         proto_tree_add_item(tree, hf_btatt_dew_point, tvb, offset, 1, ENC_NA);",
          "4918:         offset += 1;",
          "4920:         break;",
          "4922:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_descriptor_value_changed_flags , ett_btatt_value, hfx_btatt_descriptor_value_changed_flags, ENC_LITTLE_ENDIAN);",
          "4923:         offset += 2;",
          "4925:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "4926:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4927:             offset += 2;",
          "4928:         } else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "4929:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "4930:             offset += 16;",
          "4931:         } else {",
          "4932:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "4933:             offset = tvb_captured_length(tvb);",
          "4934:         }",
          "4936:         break;",
          "4938:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "4939:         offset += 1;",
          "4941:         break;",
          "4943:         proto_tree_add_item(tree, hf_btatt_aerobic_threshold, tvb, offset, 1, ENC_NA);",
          "4944:         offset += 1;",
          "4946:         break;",
          "4948:         proto_tree_add_item(tree, hf_btatt_age, tvb, offset, 1, ENC_NA);",
          "4949:         offset += 1;",
          "4953:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "4954:         offset += 1;",
          "4956:         break;",
          "4958:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "4959:         offset += 1;",
          "4961:         break;",
          "4963:         proto_tree_add_item(tree, hf_btatt_anaerobic_threshold, tvb, offset, 1, ENC_NA);",
          "4964:         offset += 1;",
          "4966:         break;",
          "4968:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "4969:         offset += 1;",
          "4971:         break;",
          "4974:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4977:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "4978:         offset += 1;",
          "4980:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "4981:         offset += 1;",
          "4983:         break;",
          "4985:         proto_tree_add_item(tree, hf_btatt_email_address, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "4986:         offset += tvb_captured_length_remaining(tvb, offset);",
          "4988:         break;",
          "4990:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "4991:         offset += 1;",
          "4995:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "4996:         offset += 1;",
          "4998:         break;",
          "5000:         proto_tree_add_item(tree, hf_btatt_first_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "5001:         offset += tvb_captured_length_remaining(tvb, offset);",
          "5003:         break;",
          "5005:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_very_light_light_limit, tvb, offset, 1, ENC_NA);",
          "5006:         offset += 1;",
          "5008:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_light_moderate_limit, tvb, offset, 1, ENC_NA);",
          "5009:         offset += 1;",
          "5011:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit, tvb, offset, 1, ENC_NA);",
          "5012:         offset += 1;",
          "5014:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit, tvb, offset, 1, ENC_NA);",
          "5015:         offset += 1;",
          "5019:         proto_tree_add_item(tree, hf_btatt_gender, tvb, offset, 1, ENC_NA);",
          "5020:         offset += 1;",
          "5022:         break;",
          "5024:         proto_tree_add_item(tree, hf_btatt_heart_rate_max, tvb, offset, 1, ENC_NA);",
          "5025:         offset += 1;",
          "5027:         break;",
          "5029:         proto_tree_add_item(tree, hf_btatt_height, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5032:         break;",
          "5034:         proto_tree_add_item(tree, hf_btatt_hip_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5035:         offset += 2;",
          "5037:         break;",
          "5039:         proto_tree_add_item(tree, hf_btatt_last_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "5040:         offset += tvb_captured_length_remaining(tvb, offset);",
          "5042:         break;",
          "5044:         proto_tree_add_item(tree, hf_btatt_maximum_recommended_heart_rate, tvb, offset, 1, ENC_NA);",
          "5045:         offset += 1;",
          "5047:         break;",
          "5049:         proto_tree_add_item(tree, hf_btatt_resting_heart_rate, tvb, offset, 1, ENC_NA);",
          "5050:         offset += 1;",
          "5052:         break;",
          "5054:         proto_tree_add_item(tree, hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds, tvb, offset, 1, ENC_NA);",
          "5055:         offset += 1;",
          "5057:         break;",
          "5059:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_light_moderate, tvb, offset, 1, ENC_NA);",
          "5060:         offset += 1;",
          "5062:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_moderate_hard, tvb, offset, 1, ENC_NA);",
          "5063:         offset += 1;",
          "5065:         break;",
          "5067:         proto_tree_add_item(tree, hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness, tvb, offset, 1, ENC_NA);",
          "5068:         offset += 1;",
          "5072:         proto_tree_add_item(tree, hf_btatt_vo2_max, tvb, offset, 1, ENC_NA);",
          "5073:         offset += 1;",
          "5075:         break;",
          "5077:         proto_tree_add_item(tree, hf_btatt_waist_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5078:         offset += 2;",
          "5080:         break;",
          "5082:         proto_tree_add_item(tree, hf_btatt_weight, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5083:         offset += 2;",
          "5085:         break;",
          "5087:         proto_tree_add_item(tree, hf_btatt_database_change_increment, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5088:         offset += 4;",
          "5090:         break;",
          "5092:         proto_tree_add_item(tree, hf_btatt_user_index, tvb, offset, 1, ENC_NA);",
          "5093:         offset += 1;",
          "5095:         break;",
          "5097:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_body_composition_feature, ett_btatt_value, hfx_btatt_body_composition_feature, ENC_LITTLE_ENDIAN);",
          "5098:         offset += 4;",
          "5100:         break;",
          "5102:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_body_composition_measurement_flags, ett_btatt_value, hfx_btatt_body_composition_measurement_flags, ENC_LITTLE_ENDIAN);",
          "5103:         flags = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "5104:         offset += 2;",
          "5106:         proto_tree_add_item(tree, hf_btatt_body_composition_measurement_body_fat_percentage, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5107:         offset += 2;",
          "5109:         if (flags & 0x02) {",
          "5110:             sub_item = proto_tree_add_item(tree, hf_btatt_body_composition_measurement_timestamp, tvb, offset, 7, ENC_NA);",
          "5111:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5113:             proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5114:             offset += 2;",
          "5116:             proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "5117:             offset += 1;",
          "5119:             proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "5120:             offset += 1;",
          "5122:             proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "5123:             offset += 1;",
          "5125:             proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "5126:             offset += 1;",
          "5128:             proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "5129:             offset += 1;",
          "5132:         if (flags & 0x04) {",
          "5133:             proto_tree_add_item(tree, hf_btatt_body_composition_measurement_user_id, tvb, offset, 1, ENC_NA);",
          "5134:             offset += 1;",
          "5137:         if (flags & 0x08) {",
          "5138:             proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_basal_metabolism, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5139:             offset += 2;",
          "5140:         }",
          "5142:         if (flags & 0x10) {",
          "5143:             proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_muscle_percentage, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5144:             offset += 2;",
          "5145:         }",
          "5147:         if (flags & 0x20) {",
          "5148:             if (flags & 0x01)",
          "5149:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_muscle_mass_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5151:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_muscle_mass_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5152:             offset += 2;",
          "5156:         if (flags & 0x40) {",
          "5157:             if (flags & 0x01)",
          "5158:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_fat_free_mass_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5159:             else",
          "5160:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_fat_free_mass_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5161:             offset += 2;",
          "5163:         }",
          "5165:         if (flags & 0x80) {",
          "5166:             if (flags & 0x01)",
          "5167:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_soft_lean_mass_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5168:             else",
          "5169:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_soft_lean_mass_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5170:             offset += 2;",
          "5171:         }",
          "5173:         if (flags & 0x100) {",
          "5174:             if (flags & 0x01)",
          "5175:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_body_water_mass_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5176:             else",
          "5177:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_body_water_mass_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5178:             offset += 2;",
          "5179:         }",
          "5181:         if (flags & 0x200) {",
          "5182:             proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_impedance, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5183:             offset += 2;",
          "5184:         }",
          "5186:         if (flags & 0x400) {",
          "5187:             if (flags & 0x01)",
          "5188:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_weight_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5189:             else",
          "5190:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_weight_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5191:             offset += 2;",
          "5192:         }",
          "5194:         if (flags & 0x800) {",
          "5195:             if (flags & 0x01)",
          "5196:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_height_inches, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5197:             else",
          "5198:                 proto_tree_add_item(sub_tree, hf_btatt_body_composition_measurement_height_meter, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5199:             offset += 2;",
          "5204:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_weight_measurement_flags, ett_btatt_value, hfx_btatt_weight_measurement_flags, ENC_NA);",
          "5205:         flags = tvb_get_guint8(tvb, offset);",
          "5206:         offset += 1;",
          "5208:         if (flags & 0x01)",
          "5209:             proto_tree_add_item(tree, hf_btatt_weight_measurement_weight_lb, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5210:         else",
          "5211:             proto_tree_add_item(tree, hf_btatt_weight_measurement_weight_kg, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5212:         offset += 2;",
          "5214:         if (flags & 0x02) {",
          "5215:             sub_item = proto_tree_add_item(tree, hf_btatt_weight_measurement_timestamp, tvb, offset, 7, ENC_NA);",
          "5216:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5218:             proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5219:             offset += 2;",
          "5221:             proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "5222:             offset += 1;",
          "5224:             proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "5225:             offset += 1;",
          "5227:             proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "5228:             offset += 1;",
          "5230:             proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "5231:             offset += 1;",
          "5233:             proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "5234:             offset += 1;",
          "5237:         if (flags & 0x04) {",
          "5238:             proto_tree_add_item(tree, hf_btatt_weight_measurement_user_id, tvb, offset, 1, ENC_NA);",
          "5239:             offset += 1;",
          "5242:         if (flags & 0x08) {",
          "5243:             proto_tree_add_item(sub_tree, hf_btatt_weight_measurement_bmi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5244:             offset += 2;",
          "5246:             if (flags & 0x01)",
          "5247:                 proto_tree_add_item(sub_tree, hf_btatt_weight_measurement_height_in, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5248:             else",
          "5249:                 proto_tree_add_item(sub_tree, hf_btatt_weight_measurement_height_m, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5250:             offset += 2;",
          "5255:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_weight_scale_feature, ett_btatt_value, hfx_btatt_weight_scale_feature, ENC_LITTLE_ENDIAN);",
          "5256:         offset += 4;",
          "5258:         break;",
          "5260:         proto_tree_add_item(tree, hf_btatt_user_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "5261:         opcode = tvb_get_guint8(tvb, offset);",
          "5262:         offset += 1;",
          "5264:         switch (opcode) {",
          "5266:             sub_item = proto_tree_add_item(tree, hf_btatt_user_control_point_consent_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5267:             value =  tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "5268:             if (value > 9999)",
          "5269:                 expert_add_info(pinfo, sub_item, &ei_btatt_consent_out_of_bounds);",
          "5270:             offset += 2;",
          "5272:             break;",
          "5274:             proto_tree_add_item(tree, hf_btatt_user_index, tvb, offset, 1, ENC_NA);",
          "5275:             offset += 1;",
          "5277:             sub_item = proto_tree_add_item(tree, hf_btatt_user_control_point_consent_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5278:             value =  tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "5279:             if (value > 9999)",
          "5280:                 expert_add_info(pinfo, sub_item, &ei_btatt_consent_out_of_bounds);",
          "5281:             offset += 2;",
          "5283:             break;",
          "5286:             break;",
          "5288:             proto_tree_add_item(tree, hf_btatt_user_control_point_request_opcode, tvb, offset, 1, ENC_NA);",
          "5289:             offset += 1;",
          "5291:             proto_tree_add_item(tree, hf_btatt_user_control_point_response_value, tvb, offset, 1, ENC_NA);",
          "5292:             offset += 1;",
          "5295:                 proto_tree_add_item(tree, hf_btatt_user_index, tvb, offset, 1, ENC_NA);",
          "5296:                 offset += 1;",
          "5299:             break;",
          "5302:         break;",
          "5305:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_x, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5306:         offset += 2;",
          "5308:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_y, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5309:         offset += 2;",
          "5311:         if (uuid.bt_uuid == 0x2AA1) {",
          "5312:             proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_z, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5313:             offset += 2;",
          "5314:         }",
          "5316:         break;",
          "5318:         proto_tree_add_item(tree, hf_btatt_language, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "5319:         offset += tvb_captured_length_remaining(tvb, offset);",
          "5321:         break;",
          "5323:         proto_tree_add_item(tree, hf_btatt_barometric_pressure_trend, tvb, offset, 1, ENC_NA);",
          "5324:         offset += 1;",
          "5326:         break;",
          "5328:         proto_tree_add_item(tree, hf_btatt_bond_management_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "5329:         offset += 1;",
          "5331:         if (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "5332:             proto_tree_add_item(tree, hf_btatt_bond_management_control_point_authorization_code, tvb, offset, length -1, ENC_NA | ENC_UTF_8);",
          "5333:             offset += tvb_reported_length_remaining(tvb, offset);",
          "5337:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_bond_management_feature, ett_btatt_value, hfx_btatt_bond_management_feature, ENC_LITTLE_ENDIAN);",
          "5338:         flags = tvb_get_guint24(tvb, offset, ENC_LITTLE_ENDIAN);",
          "5339:         offset += 3;",
          "5341:         if (flags & 0x800000) {",
          "5342:             do {",
          "5343:                 proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_bond_management_feature_nth, ett_btatt_value, hfx_btatt_bond_management_feature_nth, ENC_LITTLE_ENDIAN);",
          "5344:                 offset += 1;",
          "5345:             } while (tvb_get_guint8(tvb, offset - 1) & 0x80);",
          "5346:         }",
          "5350:         proto_tree_add_item(tree, hf_btatt_central_address_resolution, tvb, offset, 1, ENC_NA);",
          "5351:         offset += 1;",
          "5353:         break;",
          "5355:         sub_item = proto_tree_add_item(tree, hf_btatt_cgm_measurement_size, tvb, offset, 1, ENC_NA);",
          "5356:         if (tvb_get_guint8(tvb, offset) >= 6)",
          "5357:             expert_add_info(pinfo, sub_item, &ei_btatt_cgm_size_too_small);",
          "5358:         offset += 1;",
          "5360:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cgm_measurement_flags, ett_btatt_value, hfx_btatt_cgm_measurement_flags, ENC_NA);",
          "5361:         flags = tvb_get_guint8(tvb, offset);",
          "5362:         offset += 1;",
          "5364:         proto_tree_add_item(tree, hf_btatt_cgm_measurement_glucose_concentration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5367:         proto_tree_add_item(tree, hf_btatt_cgm_measurement_time_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5368:         offset += 2;",
          "5370:         if (flags & 0xE0) {",
          "5371:             value = 0;",
          "5372:             if (flags & 0x80)",
          "5373:                 value += 1;",
          "5374:             if (flags & 0x40)",
          "5375:                 value += 1;",
          "5376:             if (flags & 0x20)",
          "5377:                 value += 1;",
          "5379:             sub_item = proto_tree_add_item(tree, hf_btatt_cgm_sensor_status_annunciation, tvb, offset, value, ENC_NA);",
          "5380:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5383:         if (flags & 0x80) {",
          "5384:             proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_status, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_status, ENC_NA);",
          "5385:             offset += 1;",
          "5386:         }",
          "5388:         if (flags & 0x40) {",
          "5389:             proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_cal_temp, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_cal_temp, ENC_NA);",
          "5390:             offset += 1;",
          "5391:         }",
          "5393:         if (flags & 0x20) {",
          "5394:             proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_warning, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_warning, ENC_NA);",
          "5395:             offset += 1;",
          "5398:         if (flags & 0x01) {",
          "5399:             proto_tree_add_item(tree, hf_btatt_cgm_measurement_trend_information, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5400:             offset += 2;",
          "5401:         }",
          "5403:         if (flags & 0x02) {",
          "5404:             proto_tree_add_item(tree, hf_btatt_cgm_measurement_quality, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5405:             offset += 2;",
          "5406:         }",
          "5409:         if (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "5410:             proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5411:             offset += 2;",
          "5412:         }",
          "5416:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cgm_feature_feature, ett_btatt_value, hfx_btatt_cgm_feature_feature, ENC_LITTLE_ENDIAN);",
          "5417:         offset += 3;",
          "5419:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_cgm_type_and_sample_location, ett_btatt_value, hfx_btatt_cgm_type_and_sample_location, ENC_NA);",
          "5420:         offset += 1;",
          "5423:         proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5424:         offset += 2;",
          "5426:         break;",
          "5428:         proto_tree_add_item(tree, hf_btatt_cgm_time_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5429:         offset += 2;",
          "5431:         sub_item = proto_tree_add_item(tree, hf_btatt_cgm_status, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "5432:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5434:         proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_status, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_status, ENC_NA);",
          "5435:         offset += 1;",
          "5437:         proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_cal_temp, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_cal_temp, ENC_NA);",
          "5438:         offset += 1;",
          "5440:         proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_sensor_status_annunciation_warning, ett_btatt_value, hfx_btatt_cgm_sensor_status_annunciation_warning, ENC_NA);",
          "5441:         offset += 1;",
          "5445:         if (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "5446:             proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5447:             offset += 2;",
          "5452:         sub_item = proto_tree_add_item(tree, hf_btatt_cgm_session_start_time, tvb, offset, 7, ENC_NA);",
          "5453:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5455:         proto_tree_add_item(sub_tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5456:         offset += 2;",
          "5458:         proto_tree_add_item(sub_tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "5459:         offset += 1;",
          "5461:         proto_tree_add_item(sub_tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "5462:         offset += 1;",
          "5464:         proto_tree_add_item(sub_tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "5465:         offset += 1;",
          "5467:         proto_tree_add_item(sub_tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "5468:         offset += 1;",
          "5470:         proto_tree_add_item(sub_tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "5471:         offset += 1;",
          "5473:         proto_tree_add_item(tree, hf_btatt_timezone, tvb, offset, 1, ENC_NA);",
          "5474:         offset += 1;",
          "5476:         proto_tree_add_item(tree, hf_btatt_dst_offset, tvb, offset, 1, ENC_NA);",
          "5477:         offset += 1;",
          "5480:         if (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "5481:             proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5482:             offset += 2;",
          "5487:         proto_tree_add_item(tree, hf_btatt_cgm_session_run_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5488:         offset += 2;",
          "5491:         if (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "5492:             proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5493:             offset += 2;",
          "5496:         break;",
          "5498:         proto_tree_add_item(tree, hf_btatt_cgm_specific_ops_control_point_opcode, tvb, offset, 1, ENC_NA);",
          "5499:         opcode = tvb_get_guint8(tvb, offset);",
          "5500:         offset += 1;",
          "5502:         sub_item = proto_tree_add_item(tree, hf_btatt_cgm_specific_ops_control_point_operand, tvb, offset, 0, ENC_NA);",
          "5503:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "5504:         operand_offset = offset;",
          "5506:         switch (opcode) {",
          "5508:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_communication_interval, tvb, offset, 1, ENC_NA);",
          "5509:             offset += 1;",
          "5511:             break;",
          "5524:             break;",
          "5526:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_glucose_concentration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5527:             offset += 2;",
          "5529:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5530:             offset += 2;",
          "5532:             proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_type_and_sample_location, ett_btatt_value, hfx_btatt_cgm_type_and_sample_location, ENC_NA);",
          "5533:             offset += 1;",
          "5535:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_next_calibration_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5536:             offset += 2;",
          "5538:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_data_record_number, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5539:             offset += 2;",
          "5541:             proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_specific_ops_control_point_calibration_status, ett_btatt_value, hfx_btatt_cgm_specific_ops_control_point_calibration_status, ENC_NA);",
          "5542:             offset += 1;",
          "5544:             break;",
          "5546:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_calibration_data_record_number, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5547:             offset += 2;",
          "5549:             break;",
          "5554:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_alert_level, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5555:             offset += 2;",
          "5557:             break;",
          "5560:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_alert_level_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5561:             offset += 2;",
          "5563:             break;",
          "5572:             expert_add_info(pinfo, sub_item, &ei_btatt_opcode_invalid_request);",
          "5573:             break;",
          "5576:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_request_opcode, tvb, offset, 1, ENC_NA);",
          "5577:             offset += 1;",
          "5579:             proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_response_code, tvb, offset, 1, ENC_NA);",
          "5580:             offset += 1;",
          "5582:             switch (tvb_get_guint8(tvb, offset - 2)) {",
          "5602:                 expert_add_info(pinfo, sub_item, &ei_btatt_opcode_invalid_response);",
          "5603:                 break;",
          "5606:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_communication_interval, tvb, offset, 1, ENC_NA);",
          "5607:                 offset += 1;",
          "5609:                 break;",
          "5611:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_glucose_concentration, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5612:                 offset += 2;",
          "5614:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5615:                 offset += 2;",
          "5617:                 proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_type_and_sample_location, ett_btatt_value, hfx_btatt_cgm_type_and_sample_location, ENC_NA);",
          "5618:                 offset += 1;",
          "5620:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_next_calibration_time, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5621:                 offset += 2;",
          "5623:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_calibration_data_record_number, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5624:                 offset += 2;",
          "5626:                 proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_cgm_specific_ops_control_point_calibration_status, ett_btatt_value, hfx_btatt_cgm_specific_ops_control_point_calibration_status, ENC_NA);",
          "5627:                 offset += 1;",
          "5629:                 break;",
          "5634:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_alert_level, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5635:                 offset += 2;",
          "5637:                 break;",
          "5640:                 proto_tree_add_item(sub_tree, hf_btatt_cgm_specific_ops_control_point_operand_alert_level_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5641:                 offset += 2;",
          "5643:                 break;",
          "5644:             }",
          "5646:             break;",
          "5647:         };",
          "5649:         proto_item_set_len(sub_item, offset - operand_offset);",
          "5652:         if (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "5653:             proto_tree_add_item(tree, hf_btatt_cgm_e2e_crc, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5654:             offset += 2;",
          "5655:         }",
          "5657:         break;",
          "5659:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_indoor_positioning_configuration, ett_btatt_value, hfx_btatt_indoor_positioning_configuration, ENC_NA);",
          "5660:         offset += 1;",
          "5662:         break;",
          "5664:         proto_tree_add_item(tree, hf_btatt_latitude, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5665:         offset += 4;",
          "5667:         break;",
          "5669:         proto_tree_add_item(tree, hf_btatt_longitude, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "5670:         offset += 4;",
          "5672:         break;",
          "5674:         proto_tree_add_item(tree, hf_btatt_local_north_coordinate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5675:         offset += 2;",
          "5677:         break;",
          "5679:         proto_tree_add_item(tree, hf_btatt_local_east_coordinate, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5680:         offset += 2;",
          "5682:         break;",
          "5684:         proto_tree_add_item(tree, hf_btatt_floor_number, tvb, offset, 1, ENC_NA);",
          "5685:         offset += 1;",
          "5687:         break;",
          "5689:         proto_tree_add_item(tree, hf_btatt_altitude, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5690:         offset += 2;",
          "5692:         break;",
          "5694:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_uncertainty, ett_btatt_value, hfx_btatt_uncertainty, ENC_NA);",
          "5695:         offset += 1;",
          "5697:         break;",
          "5699:         proto_tree_add_item(tree, hf_btatt_location_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "5700:         offset += tvb_captured_length_remaining(tvb, offset);",
          "5702:         break;",
          "5708:         sub_item = proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "5709:         expert_add_info(pinfo, sub_item, &ei_btatt_undecoded);",
          "5710:         offset = tvb_captured_length(tvb);",
          "5712:         break;",
          "5713:     default:",
          "5714:         proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "5715:         offset = tvb_captured_length(tvb);",
          "5716:     }",
          "5718:     return old_offset + offset;",
          "5719: }",
          "5721: static int",
          "5722: dissect_btgatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5723: {",
          "5724:     proto_item  *main_item;",
          "5725:     proto_tree  *main_tree;",
          "5726:     proto_item  *patron_item = NULL;",
          "5727:     bluetooth_uuid_t uuid;",
          "5729:     main_item = proto_tree_add_item(tree, (gint) GPOINTER_TO_UINT(wmem_list_frame_data(wmem_list_tail(pinfo->layers))), tvb, 0, tvb_captured_length(tvb), ENC_NA);",
          "5730:     main_tree = proto_item_add_subtree(main_item, ett_btgatt);",
          "5732:     if (strlen(pinfo->current_proto) > 7) {",
          "5733:         uuid.size = 2;",
          "5734:         uuid.bt_uuid = (guint16) g_ascii_strtoull(pinfo->current_proto + strlen(pinfo->current_proto) - 7, NULL, 16);",
          "5735:         uuid.data[0] = uuid.bt_uuid & 0xFF;",
          "5736:         uuid.data[1] = (uuid.bt_uuid >> 8) & 0xFF;",
          "5737:     } else {",
          "5738:         uuid.size = 2;",
          "5739:         uuid.bt_uuid = 0;",
          "5740:     }",
          "5742:     return dissect_attribute_value(main_tree, patron_item, pinfo, tvb,",
          "5743:             0, tvb_captured_length(tvb), 0, uuid, (bluetooth_data_t *) data);",
          "5745: }",
          "5747: static gboolean",
          "5748: is_long_attribute_value(bluetooth_uuid_t uuid)",
          "5749: {",
          "5750:     switch (uuid.bt_uuid) {",
          "5764:         return TRUE;",
          "5765:     }",
          "5767:     return FALSE;",
          "5768: }",
          "5770: static guint",
          "5771: get_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data)",
          "5772: {",
          "5773:     wmem_tree_key_t  key[3];",
          "5774:     guint32          frame_number;",
          "5775:     mtu_data_t      *mtu_data;",
          "5776:     wmem_tree_t     *sub_wmemtree;",
          "5777:     guint            mtu = 23;",
          "5779:     frame_number = pinfo->fd->num;",
          "5781:     key[0].length = 1;",
          "5782:     key[0].key    = &bluetooth_data->interface_id;",
          "5783:     key[1].length = 1;",
          "5784:     key[1].key    = &bluetooth_data->adapter_id;",
          "5785:     key[2].length = 0;",
          "5786:     key[2].key    = NULL;",
          "5788:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(mtus, key);",
          "5789:     mtu_data = (sub_wmemtree) ? (mtu_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "5791:     if (mtu_data)",
          "5792:         mtu = mtu_data->mtu;",
          "5794:     return mtu;",
          "5795: }",
          "5797: static void",
          "5798: save_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data, guint mtu)",
          "5799: {",
          "5800:     wmem_tree_key_t  key[4];",
          "5801:     guint32          frame_number;",
          "5802:     mtu_data_t      *mtu_data;",
          "5804:     frame_number = pinfo->fd->num;",
          "5806:     key[0].length = 1;",
          "5807:     key[0].key    = &bluetooth_data->interface_id;",
          "5808:     key[1].length = 1;",
          "5809:     key[1].key    = &bluetooth_data->adapter_id;",
          "5810:     key[2].length = 1;",
          "5811:     key[2].key    = &frame_number;",
          "5812:     key[3].length = 0;",
          "5813:     key[3].key    = NULL;",
          "5815:     mtu_data = wmem_new(wmem_file_scope(), mtu_data_t);",
          "5816:     mtu_data->mtu = mtu;",
          "5818:     wmem_tree_insert32_array(mtus, key, mtu_data);",
          "5819: }",
          "5821: static void",
          "5822: save_value_fragment(packet_info *pinfo, tvbuff_t *tvb, gint offset,",
          "5823:         guint32 handle, guint data_offset, bluetooth_data_t *bluetooth_data)",
          "5824: {",
          "5825:     wmem_tree_key_t   key[5];",
          "5826:     guint32           frame_number;",
          "5827:     fragment_data_t  *fragment_data;",
          "5829:     frame_number = pinfo->fd->num;",
          "5831:     key[0].length = 1;",
          "5832:     key[0].key    = &bluetooth_data->interface_id;",
          "5833:     key[1].length = 1;",
          "5834:     key[1].key    = &bluetooth_data->adapter_id;",
          "5835:     key[2].length = 1;",
          "5836:     key[2].key    = &handle;",
          "5837:     key[3].length = 1;",
          "5838:     key[3].key    = &frame_number;",
          "5839:     key[4].length = 0;",
          "5840:     key[4].key    = NULL;",
          "5842:     fragment_data = wmem_new(wmem_file_scope(), fragment_data_t);",
          "5843:     fragment_data->length = tvb_captured_length_remaining(tvb, offset);",
          "5844:     fragment_data->offset = data_offset;",
          "5845:     fragment_data->data_in_frame = frame_number;",
          "5846:     fragment_data->data = (guint8 *) tvb_memdup(wmem_file_scope(), tvb, offset, fragment_data->length);",
          "5848:     wmem_tree_insert32_array(fragments, key, fragment_data);",
          "5849: }",
          "5851: static guint8 *",
          "5852: get_value(packet_info *pinfo, guint32 handle, bluetooth_data_t *bluetooth_data, guint *length)",
          "5853: {",
          "5854:     wmem_tree_key_t   key[4];",
          "5855:     guint32           frame_number;",
          "5856:     fragment_data_t  *fragment_data;",
          "5857:     wmem_tree_t      *sub_wmemtree;",
          "5858:     guint16           last_offset = 0xFFFF;",
          "5859:     guint16           size;",
          "5860:     gboolean          first = TRUE;",
          "5861:     guint8           *data = NULL;",
          "5864:     frame_number = pinfo->fd->num;",
          "5866:     key[0].length = 1;",
          "5867:     key[0].key    = &bluetooth_data->interface_id;",
          "5868:     key[1].length = 1;",
          "5869:     key[1].key    = &bluetooth_data->adapter_id;",
          "5870:     key[2].length = 1;",
          "5871:     key[2].key    = &handle;",
          "5872:     key[3].length = 0;",
          "5873:     key[3].key    = NULL;",
          "5875:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(fragments, key);",
          "5876:     while (1) {",
          "5877:         fragment_data = (sub_wmemtree) ? (fragment_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "5878:         if (!fragment_data || (fragment_data && fragment_data->offset >= last_offset))",
          "5879:             break;",
          "5881:         if (first) {",
          "5882:             size = fragment_data->offset + fragment_data->length;",
          "5883:             data = (guint8 *) wmem_alloc(pinfo->pool, size);",
          "5885:             if (length)",
          "5888:             first = FALSE;",
          "5889:         } else if (fragment_data->offset + fragment_data->length != last_offset) {",
          "5890:             break;",
          "5891:         }",
          "5893:         memcpy(data + fragment_data->offset, fragment_data->data, fragment_data->length);",
          "5895:         if (fragment_data->offset == 0)",
          "5896:             return data;",
          "5897:         frame_number = fragment_data->data_in_frame - 1;",
          "5898:         last_offset = fragment_data->offset;",
          "5899:     }",
          "5901:     if (length)",
          "5903:     return NULL;",
          "5904: }",
          "5906: static int",
          "5907: dissect_btatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5908: {",
          "5909:     proto_item        *main_item;",
          "5910:     proto_tree        *main_tree;",
          "5911:     proto_item        *sub_item;",
          "5912:     proto_tree        *sub_tree;",
          "5913:     int                offset = 0;",
          "5914:     guint8             opcode;",
          "5915:     guint8             request_opcode;",
          "5916:     bluetooth_data_t  *bluetooth_data;",
          "5917:     request_data_t    *request_data;",
          "5918:     guint16            handle;",
          "5919:     bluetooth_uuid_t   uuid;",
          "5920:     guint              mtu;",
          "5922:     uuid.size = 0;",
          "5923:     uuid.bt_uuid = 0;",
          "5925:     bluetooth_data = (bluetooth_data_t *) data;",
          "5927:     if (tvb_reported_length_remaining(tvb, 0) < 1)",
          "5928:         return 0;",
          "5930:     main_item = proto_tree_add_item(tree, proto_btatt, tvb, 0, -1, ENC_NA);",
          "5931:     main_tree = proto_item_add_subtree(main_item, ett_btatt);",
          "5933:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"ATT\");",
          "5935:     switch (pinfo->p2p_dir) {",
          "5936:         case P2P_DIR_SENT:",
          "5937:             col_set_str(pinfo->cinfo, COL_INFO, \"Sent \");",
          "5938:             break;",
          "5939:         case P2P_DIR_RECV:",
          "5940:             col_set_str(pinfo->cinfo, COL_INFO, \"Rcvd \");",
          "5941:             break;",
          "5942:         default:",
          "5943:             col_set_str(pinfo->cinfo, COL_INFO, \"UnknownDirection \");",
          "5944:             break;",
          "5945:     }",
          "5947:     mtu = get_mtu(pinfo, bluetooth_data);",
          "5948:     if (tvb_reported_length(tvb) > mtu)",
          "5949:         expert_add_info(pinfo, main_item, &ei_btatt_mtu_exceeded);",
          "5951:     proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_opcode, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "5952:     opcode = tvb_get_guint8(tvb, 0);",
          "5953:     offset++;",
          "5955:     request_data = get_request(tvb, offset, pinfo, opcode, bluetooth_data);",
          "5957:     col_append_str(pinfo->cinfo, COL_INFO, val_to_str_const(opcode, opcode_vals, \"<unknown>\"));",
          "5959:     switch (opcode) {",
          "5961:         proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_req_opcode_in_error, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "5962:         request_opcode = tvb_get_guint8(tvb, offset);",
          "5963:         offset += 1;",
          "5965:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle_in_error, tvb, offset, bluetooth_data, NULL);",
          "5967:         col_append_fstr(pinfo->cinfo, COL_INFO, \" - %s, Handle: 0x%04x\",",
          "5968:                         val_to_str_const(tvb_get_guint8(tvb, offset), error_vals, \"<unknown>\"),",
          "5969:                         tvb_get_letohs(tvb, offset - 2));",
          "5971:         proto_tree_add_item(main_tree, hf_btatt_error_code, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "5972:         offset++;",
          "5974:         if (request_data && (request_opcode == 0x08 || request_opcode == 0x10)) {",
          "5975:             sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "5976:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "5977:         }",
          "5979:         break;",
          "5982:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Client Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "5983:         proto_tree_add_item(main_tree, hf_btatt_client_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5984:         offset += 2;",
          "5986:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "5987:             union request_parameters_union  request_parameters;",
          "5989:             request_parameters.mtu.mtu = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "5991:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "5992:         }",
          "5994:         break;",
          "5997:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Server Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "5998:         proto_tree_add_item(main_tree, hf_btatt_server_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "5999:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data) {",
          "6000:             guint new_mtu;",
          "6002:             new_mtu = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "6003:             if (new_mtu > request_data->parameters.mtu.mtu)",
          "6004:                 new_mtu = request_data->parameters.mtu.mtu;",
          "6005:             save_mtu(pinfo, bluetooth_data, new_mtu);",
          "6006:         }",
          "6007:         offset += 2;",
          "6008:         break;",
          "6011:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handles: 0x%04x..0x%04x\",",
          "6012:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6013:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6014:         offset += 2;",
          "6016:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6017:         offset += 2;",
          "6019:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6020:             union request_parameters_union  request_parameters;",
          "6022:             request_parameters.find_information.starting_handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "6023:             request_parameters.find_information.ending_handle   = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6025:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6026:         }",
          "6028:         break;",
          "6031:         {",
          "6032:             guint8  format = tvb_get_guint8(tvb, offset);",
          "6034:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid_format, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "6035:             offset++;",
          "6037:             if (format == 1) {",
          "6038:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "6039:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "6040:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "6042:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6043:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6045:                     proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6046:                     uuid = get_uuid(tvb, offset, 2);",
          "6047:                     offset += 2;",
          "6049:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "6050:                             tvb_get_letohs(tvb, offset - 4),",
          "6051:                             print_uuid(&uuid));",
          "6053:                     save_handle(pinfo, uuid, handle, bluetooth_data);",
          "6054:                 }",
          "6055:             }",
          "6056:             else if (format == 2) {",
          "6057:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "6058:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "6059:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "6061:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6062:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6064:                     proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "6065:                     uuid = get_uuid(tvb, offset, 16);",
          "6066:                     offset += 16;",
          "6068:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "6069:                             tvb_get_letohs(tvb, offset - 4),",
          "6070:                             print_uuid(&uuid));",
          "6072:                     save_handle(pinfo, uuid, handle, bluetooth_data);",
          "6073:                 }",
          "6074:             }",
          "6075:             else {",
          "6076:                 expert_add_info(pinfo, sub_item, &ei_btatt_uuid_format_unknown);",
          "6077:             }",
          "6078:         }",
          "6079:         break;",
          "6082:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "6083:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "6084:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6086:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6087:         offset += 2;",
          "6089:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6090:         offset += 2;",
          "6092:         proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6093:         uuid = get_uuid(tvb, offset - 2, 2);",
          "6094:         offset += 2;",
          "6096:         dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), 0, uuid, bluetooth_data);",
          "6098:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6099:             union request_parameters_union  request_parameters;",
          "6101:             request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "6102:             request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "6103:             request_parameters.read_by_type.uuid = uuid;",
          "6105:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6106:         }",
          "6108:         offset = tvb_reported_length(tvb);",
          "6110:         break;",
          "6113:         while( tvb_reported_length_remaining(tvb, offset) > 0 ) {",
          "6114:             sub_item = proto_tree_add_none_format(main_tree, hf_btatt_handles_info, tvb, offset, 4,",
          "6115:                                             \"Handles Info, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "6116:                                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6118:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "6120:             offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6122:             proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6123:             offset += 2;",
          "6125:             if (request_data)",
          "6126:                 save_handle(pinfo, request_data->parameters.read_by_type.uuid,",
          "6127:                         tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "6128:                         bluetooth_data);",
          "6130:         }",
          "6131:         break;",
          "6135:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "6136:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "6137:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6139:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6140:         offset += 2;",
          "6141:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6142:         offset += 2;",
          "6144:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "6145:             proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6146:             offset += 2;",
          "6148:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6149:                 union request_parameters_union  request_parameters;",
          "6151:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "6152:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "6153:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 2, 2);",
          "6155:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6156:             }",
          "6157:         }",
          "6158:         else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "6159:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "6160:             proto_item_append_text(sub_item, \" (%s)\", val_to_str_ext_const(tvb_get_letohs(tvb, offset),",
          "6161:                                             &bluetooth_uuid_vals_ext, \"<unknown>\"));",
          "6162:             offset += 16;",
          "6164:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6165:                 union request_parameters_union  request_parameters;",
          "6167:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 20, ENC_LITTLE_ENDIAN);",
          "6168:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 18, ENC_LITTLE_ENDIAN);",
          "6169:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 16, 16);",
          "6171:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6172:             }",
          "6173:         }",
          "6176:         break;",
          "6179:         {",
          "6180:             guint8  length = tvb_get_guint8(tvb, offset);",
          "6182:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "6183:             offset++;",
          "6185:             if(length > 0) {",
          "6186:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\",",
          "6187:                                         tvb_reported_length_remaining(tvb, offset)/length);",
          "6189:                 while (tvb_reported_length_remaining(tvb, offset) >= length)",
          "6190:                 {",
          "6191:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb,",
          "6192:                                                     offset, length, \"Attribute Data, Handle: 0x%04x\",",
          "6193:                                                     tvb_get_letohs(tvb, offset));",
          "6195:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "6197:                     if (request_data) {",
          "6198:                         save_handle(pinfo, request_data->parameters.read_by_type.uuid, tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN), bluetooth_data);",
          "6199:                     }",
          "6201:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6203:                     if (request_data) {",
          "6204:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 2, tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "6205:                     } else {",
          "6206:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 2, ENC_NA);",
          "6207:                         offset += length - 2;",
          "6208:                     }",
          "6209:                 }",
          "6210:             }",
          "6212:             if (request_data) {",
          "6213:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "6214:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "6215:             }",
          "6216:         }",
          "6217:         break;",
          "6220:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "6222:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6224:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6225:             union request_parameters_union  request_parameters;",
          "6227:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6228:             request_parameters.read_write.offset = 0;",
          "6230:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6231:         }",
          "6232:         break;",
          "6235:         if (request_data) {",
          "6236:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "6237:         }",
          "6239:         if (is_long_attribute_value(uuid) && tvb_captured_length(tvb) >= mtu) {",
          "6240:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6241:             if (!pinfo->fd->flags.visited && request_data && bluetooth_data)",
          "6242:                 save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, 0, bluetooth_data);",
          "6243:             offset = tvb_captured_length(tvb);",
          "6245:             expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "6246:         } else {",
          "6247:             if (request_data)",
          "6248:                 handle = request_data->parameters.read_write.handle;",
          "6249:             else",
          "6250:                 handle = 0;",
          "6252:             offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), handle, uuid, bluetooth_data);",
          "6253:         }",
          "6254:         break;",
          "6257:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "6258:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6260:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6262:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6263:         offset += 2;",
          "6266:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6267:             union request_parameters_union  request_parameters;",
          "6269:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "6270:             request_parameters.read_write.offset = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6272:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6273:         }",
          "6274:         break;",
          "6277:         if (request_data) {",
          "6278:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "6280:             if (request_data->parameters.read_write.offset == 0 && !is_long_attribute_value(uuid)) {",
          "6281:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "6282:             } else {",
          "6283:                 if (!pinfo->fd->flags.visited && bluetooth_data)",
          "6284:                     save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, request_data->parameters.read_write.offset, bluetooth_data);",
          "6286:                 if (tvb_captured_length(tvb) < mtu) {",
          "6287:                     tvbuff_t  *next_tvb;",
          "6288:                     guint      reassembled_length;",
          "6289:                     guint8    *reassembled_data;",
          "6291:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6292:                     offset = tvb_captured_length(tvb);",
          "6294:                     reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "6295:                     if (reassembled_data) {",
          "6296:                         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "6297:                         next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "6298:                         add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "6299:                         dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "6300:                     }",
          "6301:                 } else {",
          "6302:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6303:                     offset = tvb_captured_length(tvb);",
          "6305:                     expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "6306:                 }",
          "6307:             }",
          "6308:         } else {",
          "6309:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6310:             offset = tvb_captured_length(tvb);",
          "6311:         }",
          "6313:         break;",
          "6316:         if(tvb_reported_length_remaining(tvb, offset) < 4) {",
          "6317:             expert_add_info(pinfo, main_item, &ei_btatt_handle_too_few);",
          "6318:             break;",
          "6319:         }",
          "6321:         col_append_str(pinfo->cinfo, COL_INFO, \", Handles: \");",
          "6322:         while (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "6323:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6324:             col_append_fstr(pinfo->cinfo, COL_INFO, \"0x%04x \", tvb_get_letohs(tvb, offset - 2));",
          "6325:         }",
          "6327:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6328:             union request_parameters_union  request_parameters;",
          "6330:             request_parameters.read_multiple.number_of_handles = (tvb_captured_length(tvb) - 1) / 2;",
          "6331:             request_parameters.read_multiple.handle = (guint16 *) tvb_memdup(wmem_file_scope(),",
          "6332:                     tvb, 1, request_parameters.read_multiple.number_of_handles * 2);",
          "6334:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6335:         }",
          "6336:         break;",
          "6339:         if (request_data) {",
          "6340:             guint  i_handle;",
          "6342:             for (i_handle = 0; i_handle < request_data->parameters.read_multiple.number_of_handles; i_handle += 1) {",
          "6343:                 dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_multiple.handle[i_handle]);",
          "6344:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_multiple.handle[i_handle], uuid, bluetooth_data);",
          "6345:             }",
          "6346:         } else {",
          "6347:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6348:             offset = tvb_reported_length(tvb);",
          "6349:         }",
          "6350:         break;",
          "6353:         {",
          "6354:             guint8  length = tvb_get_guint8(tvb, offset);",
          "6356:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "6357:             offset++;",
          "6359:             if (length > 0) {",
          "6360:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\", tvb_reported_length_remaining(tvb, offset)/length);",
          "6362:                 while (tvb_reported_length_remaining(tvb, offset) >= length) {",
          "6363:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb, offset, length,",
          "6364:                                                     \"Attribute Data, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "6365:                                                     tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6367:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "6369:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6370:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "6372:                     proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6373:                     offset += 2;",
          "6375:                     if (request_data) {",
          "6376:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 4, handle, request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "6377:                     } else {",
          "6378:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 4, ENC_NA);",
          "6379:                         offset += length - 4;",
          "6380:                     }",
          "6381:                 }",
          "6382:             }",
          "6384:             if (request_data) {",
          "6385:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "6386:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "6387:             }",
          "6388:         }",
          "6389:         break;",
          "6395:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "6397:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "6399:         offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), uuid, bluetooth_data);",
          "6401:         if (!pinfo->fd->flags.visited && bluetooth_data && (opcode == 0x12 || opcode == 0x1d)) {",
          "6402:             union request_parameters_union  request_parameters;",
          "6404:             request_parameters.data = NULL;",
          "6406:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6407:         }",
          "6408:         break;",
          "6412:         break;",
          "6416:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "6417:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "6419:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "6421:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "6422:         offset += 2;",
          "6424:         if (!pinfo->fd->flags.visited && bluetooth_data && opcode == 0x16) {",
          "6425:             union request_parameters_union  request_parameters;",
          "6427:             request_parameters.data = NULL;",
          "6429:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6430:         }",
          "6431:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data && opcode == 0x16)",
          "6432:             save_value_fragment(pinfo, tvb, offset,",
          "6433:                     tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "6434:                     tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN),",
          "6435:                     bluetooth_data);",
          "6439:         if (request_data && tvb_captured_length(tvb) < mtu) {",
          "6440:             tvbuff_t  *next_tvb;",
          "6441:             guint      reassembled_length;",
          "6442:             guint8    *reassembled_data;",
          "6444:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6446:             reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "6447:             if (reassembled_data) {",
          "6448:                 sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "6449:                 next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "6450:                 add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "6451:                 dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "6452:             }",
          "6453:         } else {",
          "6454:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "6455:         }",
          "6457:         offset = tvb_reported_length(tvb);",
          "6459:         break;",
          "6462:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",",
          "6463:                         val_to_str_const(tvb_get_guint8(tvb, offset), flags_vals, \"<unknown>\"));",
          "6464:         proto_tree_add_item(main_tree, hf_btatt_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "6465:         offset++;",
          "6467:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "6468:             union request_parameters_union  request_parameters;",
          "6470:             request_parameters.data = NULL;",
          "6472:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "6473:         }",
          "6474:         break;",
          "6478:         break;",
          "6481:         {",
          "6482:             guint8 length;",
          "6484:             col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "6486:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "6488:             length = tvb_reported_length_remaining(tvb, offset);",
          "6489:             if (length > 12) {",
          "6490:                 proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, length-12, ENC_NA);",
          "6491:                 offset+=length-12;",
          "6492:             }",
          "6494:             proto_tree_add_item(main_tree, hf_btatt_sign_counter, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "6495:             offset+=4;",
          "6496:             proto_tree_add_item(main_tree, hf_btatt_signature, tvb, offset, 8, ENC_NA);",
          "6497:             offset+=8;",
          "6498:         break;",
          "6499:         }",
          "6500:     default:",
          "6501:         break;",
          "6502:     }",
          "6504:     if (request_data) {",
          "6505:         if (request_data->request_in_frame > 0  && request_data->request_in_frame != pinfo->fd->num) {",
          "6506:             sub_item = proto_tree_add_uint(main_tree, hf_request_in_frame, tvb, 0, 0, request_data->request_in_frame);",
          "6507:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "6508:         }",
          "6510:         if (!pinfo->fd->flags.visited && request_data->response_in_frame == 0 &&",
          "6511:                 pinfo->fd->num > request_data->request_in_frame)",
          "6512:             request_data->response_in_frame = pinfo->fd->num;",
          "6514:         if (request_data->response_in_frame > 0 && request_data->response_in_frame != pinfo->fd->num) {",
          "6515:             sub_item = proto_tree_add_uint(main_tree, hf_response_in_frame, tvb, 0, 0, request_data->response_in_frame);",
          "6516:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "6517:         }",
          "6518:     }",
          "6520:     return offset;",
          "6521: }",
          "6523: void",
          "6524: proto_register_btatt(void)",
          "6525: {",
          "6526:     module_t         *module;",
          "6527:     expert_module_t  *expert_btatt;",
          "6530:     static hf_register_info hf[] = {",
          "6531:         {&hf_btatt_opcode,",
          "6532:             {\"Opcode\", \"btatt.opcode\",",
          "6533:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "6534:             NULL, HFILL}",
          "6535:         },",
          "6536:         {&hf_btatt_opcode_authentication_signature,",
          "6537:             {\"Authentication Signature\", \"btatt.opcode.authentication_signature\",",
          "6538:             FT_BOOLEAN, 8, NULL, 0x80,",
          "6539:             NULL, HFILL}",
          "6540:         },",
          "6541:         {&hf_btatt_opcode_command,",
          "6542:             {\"Command\", \"btatt.opcode.command\",",
          "6543:             FT_BOOLEAN, 8, NULL, 0x40,",
          "6544:             NULL, HFILL}",
          "6545:         },",
          "6546:         {&hf_btatt_opcode_method,",
          "6547:             {\"Method\", \"btatt.opcode.method\",",
          "6548:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x3F,",
          "6549:             NULL, HFILL}",
          "6550:         },",
          "6551:         {&hf_btatt_handles_info,",
          "6552:             {\"Handles Info\", \"btatt.handles_info\",",
          "6553:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6554:             NULL, HFILL}",
          "6555:         },",
          "6556:         {&hf_btatt_attribute_data,",
          "6557:             {\"Attribute Data\", \"btatt.attribute_data\",",
          "6558:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6559:             NULL, HFILL}",
          "6560:         },",
          "6561:         {&hf_btatt_handle,",
          "6562:             {\"Handle\", \"btatt.handle\",",
          "6563:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6564:             NULL, HFILL}",
          "6565:         },",
          "6566:         {&hf_btatt_starting_handle,",
          "6567:             {\"Starting Handle\", \"btatt.starting_handle\",",
          "6568:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6569:             NULL, HFILL}",
          "6570:         },",
          "6571:         {&hf_btatt_ending_handle,",
          "6572:             {\"Ending Handle\", \"btatt.ending_handle\",",
          "6573:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6574:             NULL, HFILL}",
          "6575:         },",
          "6576:         {&hf_btatt_group_end_handle,",
          "6577:             {\"Group End Handle\", \"btatt.group_end_handle\",",
          "6578:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6579:             NULL, HFILL}",
          "6580:         },",
          "6581:         {&hf_btatt_value,",
          "6582:             {\"Value\", \"btatt.value\",",
          "6583:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "6584:             NULL, HFILL}",
          "6585:         },",
          "6586:         {&hf_btatt_req_opcode_in_error,",
          "6587:             {\"Request Opcode in Error\", \"btatt.req_opcode_in_error\",",
          "6588:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "6589:             NULL, HFILL}",
          "6590:         },",
          "6591:         {&hf_btatt_handle_in_error,",
          "6592:             {\"Handle in Error\", \"btatt.handle\",",
          "6593:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6594:             NULL, HFILL}",
          "6595:         },",
          "6596:         {&hf_btatt_error_code,",
          "6597:             {\"Error Code\", \"btatt.error_code\",",
          "6598:             FT_UINT8, BASE_HEX, VALS(error_vals), 0x0,",
          "6599:             NULL, HFILL}",
          "6600:         },",
          "6601:         {&hf_btatt_uuid16,",
          "6602:             {\"UUID\", \"btatt.uuid16\",",
          "6603:             FT_UINT16, BASE_HEX |BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "6604:             NULL, HFILL}",
          "6605:         },",
          "6606:         {&hf_btatt_uuid128,",
          "6607:             {\"UUID\", \"btatt.uuid128\",",
          "6608:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "6609:             NULL, HFILL}",
          "6610:         },",
          "6611:         {&hf_btatt_client_rx_mtu,",
          "6612:             {\"Client Rx MTU\", \"btatt.client_rx_mtu\",",
          "6613:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6614:             NULL, HFILL}",
          "6615:         },",
          "6616:         {&hf_btatt_server_rx_mtu,",
          "6617:             {\"Server Rx MTU\", \"btatt.server_rx_mtu\",",
          "6618:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6619:             NULL, HFILL}",
          "6620:         },",
          "6621:         {&hf_btatt_uuid_format,",
          "6622:             {\"UUID Format\", \"btatt.uuid_format\",",
          "6623:             FT_UINT8, BASE_HEX, VALS(uuid_format_vals), 0x0,",
          "6624:             NULL, HFILL}",
          "6625:         },",
          "6626:         {&hf_btatt_length,",
          "6627:             {\"Length\", \"btatt.length\",",
          "6628:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6629:             \"Length of Handle/Value Pair\", HFILL}",
          "6630:         },",
          "6631:         {&hf_btatt_offset,",
          "6632:             {\"Offset\", \"btatt.offset\",",
          "6633:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6634:             NULL, HFILL}",
          "6635:         },",
          "6636:         {&hf_btatt_flags,",
          "6637:             {\"Flags\", \"btatt.flags\",",
          "6638:             FT_UINT8, BASE_HEX, VALS(flags_vals), 0x0,",
          "6639:             NULL, HFILL}",
          "6640:         },",
          "6641:         {&hf_btatt_sign_counter,",
          "6642:             {\"Sign Counter\", \"btatt.sign_counter\",",
          "6643:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "6644:             NULL, HFILL}",
          "6645:         },",
          "6646:         {&hf_btatt_signature,",
          "6647:             {\"Signature\", \"btatt.signature\",",
          "6648:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "6649:             NULL, HFILL}",
          "6650:         },",
          "6651:         {&hf_btatt_characteristic_properties,",
          "6652:             {\"Characteristic Properties\", \"btatt.characteristic_properties\",",
          "6653:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6654:             NULL, HFILL}",
          "6655:         },",
          "6656:         {&hf_btatt_characteristic_properties_extended_properties,",
          "6657:             {\"Extended Properties\", \"btatt.characteristic_properties.extended_properties\",",
          "6658:             FT_BOOLEAN, 8, NULL, 0x80,",
          "6659:             NULL, HFILL}",
          "6660:         },",
          "6661:         {&hf_btatt_characteristic_properties_authenticated_signed_writes,",
          "6662:             {\"Authenticated Signed Writes\", \"btatt.characteristic_properties.authenticated_signed_writes\",",
          "6663:             FT_BOOLEAN, 8, NULL, 0x40,",
          "6664:             NULL, HFILL}",
          "6665:         },",
          "6666:         {&hf_btatt_characteristic_properties_indicate,",
          "6667:             {\"Indicate\", \"btatt.characteristic_properties.indicate\",",
          "6668:             FT_BOOLEAN, 8, NULL, 0x20,",
          "6669:             NULL, HFILL}",
          "6670:         },",
          "6671:         {&hf_btatt_characteristic_properties_notify,",
          "6672:             {\"Notify\", \"btatt.characteristic_properties.notify\",",
          "6673:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6674:             NULL, HFILL}",
          "6675:         },",
          "6676:         {&hf_btatt_characteristic_properties_write,",
          "6677:             {\"Write\", \"btatt.characteristic_properties.write\",",
          "6678:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6679:             NULL, HFILL}",
          "6680:         },",
          "6681:         {&hf_btatt_characteristic_properties_write_without_response,",
          "6682:             {\"Write without Response\", \"btatt.characteristic_properties.write_without_response\",",
          "6683:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6684:             NULL, HFILL}",
          "6685:         },",
          "6686:         {&hf_btatt_characteristic_properties_read,",
          "6687:             {\"Read\", \"btatt.characteristic_properties.read\",",
          "6688:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6689:             NULL, HFILL}",
          "6690:         },",
          "6691:         {&hf_btatt_characteristic_properties_broadcast,",
          "6692:             {\"Broadcast\", \"btatt.characteristic_properties.broadcast\",",
          "6693:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6694:             NULL, HFILL}",
          "6695:         },",
          "6696:         {&hf_btatt_characteristic_value_handle,",
          "6697:             {\"Characteristic Value Handle\", \"btatt.handle\",",
          "6698:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6699:             NULL, HFILL}",
          "6700:         },",
          "6701:         {&hf_btatt_included_service_handle,",
          "6702:             {\"Included Service Handle\", \"btatt.handle\",",
          "6703:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6704:             NULL, HFILL}",
          "6705:         },",
          "6706:         {&hf_btatt_information_data,",
          "6707:             {\"Information Data\", \"btatt.information_data\",",
          "6708:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "6709:             NULL, HFILL}",
          "6710:         },",
          "6711:         {&hf_btatt_characteristic_configuration_client,",
          "6712:             {\"Characteristic Configuration Client\", \"btatt.characteristic_configuration_client\",",
          "6713:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6714:             NULL, HFILL}",
          "6715:         },",
          "6716:         {&hf_btatt_characteristic_configuration_client_reserved,",
          "6717:             {\"Reseved\", \"btatt.characteristic_configuration_client.reserved\",",
          "6718:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "6719:             NULL, HFILL}",
          "6720:         },",
          "6721:         {&hf_btatt_characteristic_configuration_client_indication,",
          "6722:             {\"Indication\", \"btatt.characteristic_configuration_client.indication\",",
          "6723:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "6724:             NULL, HFILL}",
          "6725:         },",
          "6726:         {&hf_btatt_characteristic_configuration_client_notification,",
          "6727:             {\"Notification\", \"btatt.characteristic_configuration_client.notification\",",
          "6728:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "6729:             NULL, HFILL}",
          "6730:         },",
          "6731:         {&hf_btatt_characteristic_configuration_server,",
          "6732:             {\"Characteristic Configuration Server\", \"btatt.characteristic_configuration_server\",",
          "6733:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6734:             NULL, HFILL}",
          "6735:         },",
          "6736:         {&hf_btatt_characteristic_configuration_server_reserved,",
          "6737:             {\"Reseved\", \"btatt.characteristic_configuration_server.reserved\",",
          "6738:             FT_UINT16, BASE_HEX, NULL, 0xFFFE,",
          "6739:             NULL, HFILL}",
          "6740:         },",
          "6741:         {&hf_btatt_characteristic_configuration_server_broadcast,",
          "6742:             {\"Broadcast\", \"btatt.characteristic_configuration_server.broadcast\",",
          "6743:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "6744:             NULL, HFILL}",
          "6745:         },",
          "6746:         {&hf_btatt_hogp_protocol_mode,",
          "6747:             {\"Protocol Mode\", \"btatt.hogp.protocol_mode\",",
          "6748:             FT_UINT8, BASE_HEX, VALS(hogp_protocol_mode_vals), 0x0,",
          "6749:             NULL, HFILL}",
          "6750:         },",
          "6751:         {&hf_btatt_report_reference_report_id,",
          "6752:             {\"Report ID\", \"btatt.report_reference.report_id\",",
          "6753:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6754:             NULL, HFILL}",
          "6755:         },",
          "6756:         {&hf_btatt_report_reference_report_type,",
          "6757:             {\"Report Type\", \"btatt.report_reference.report_id\",",
          "6758:             FT_UINT8, BASE_HEX, VALS(report_reference_report_type_vals), 0x0,",
          "6759:             NULL, HFILL}",
          "6760:         },",
          "6761:         {&hf_btatt_hogp_bcd_hid,",
          "6762:             {\"bcdHID\", \"btatt.hogp.bcd_hid\",",
          "6763:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6764:             NULL, HFILL}",
          "6765:         },",
          "6766:         {&hf_btatt_hogp_b_country_code,",
          "6767:             {\"bCountryCode\", \"btatt.hogp.b_country_code\",",
          "6768:             FT_UINT8, BASE_HEX, VALS(hid_country_code_vals), 0x0,",
          "6769:             NULL, HFILL}",
          "6770:         },",
          "6771:         {&hf_btatt_hogp_flags,",
          "6772:             {\"Flags\", \"btatt.hogp.flags\",",
          "6773:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6774:             NULL, HFILL}",
          "6775:         },",
          "6776:         {&hf_btatt_hogp_flags_reserved,",
          "6777:             {\"Reserved\", \"btatt.hogp.flags.reserved\",",
          "6778:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "6779:             NULL, HFILL}",
          "6780:         },",
          "6781:         {&hf_btatt_hogp_flags_normally_connectable,",
          "6782:             {\"Normally Connectable\", \"btatt.hogp.flags.normally_connectable\",",
          "6783:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6784:             NULL, HFILL}",
          "6785:         },",
          "6786:         {&hf_btatt_hogp_flags_remote_wake,",
          "6787:             {\"Remote Wake\", \"btatt.hogp.flags.remote_wake\",",
          "6788:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6789:             NULL, HFILL}",
          "6790:         },",
          "6791:         {&hf_btatt_characteristic_user_description,",
          "6792:             {\"Characteristic User Description\", \"btatt.characteristic_user_description\",",
          "6793:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "6794:             NULL, HFILL}",
          "6795:         },",
          "6796:         {&hf_btatt_characteristic_extended_properties,",
          "6797:             {\"Characteristic Extended Properties\", \"btatt.characteristic_extended_properties\",",
          "6798:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6799:             NULL, HFILL}",
          "6800:         },",
          "6801:         {&hf_btatt_characteristic_extended_properties_reserved,",
          "6802:             {\"Reserved\", \"btatt.characteristic_extended_properties.reserved\",",
          "6803:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "6804:             NULL, HFILL}",
          "6805:         },",
          "6806:         {&hf_btatt_characteristic_extended_properties_writable_auxiliaries,",
          "6807:             {\"Writable Auxiliaries\", \"btatt.characteristic_extended_properties.writable_auxiliaries\",",
          "6808:             FT_UINT16, BASE_HEX, NULL, 0x0002,",
          "6809:             NULL, HFILL}",
          "6810:         },",
          "6811:         {&hf_btatt_characteristic_extended_properties_reliable_write,",
          "6812:             {\"Reliable Write\", \"btatt.characteristic_extended_properties.reliable_write\",",
          "6813:             FT_UINT16, BASE_HEX, NULL, 0x0001,",
          "6814:             NULL, HFILL}",
          "6815:         },",
          "6816:         {&hf_btatt_characteristic_presentation_format,",
          "6817:             {\"Format\", \"btatt.characteristic_presentation.format\",",
          "6818:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_format_vals), 0x0,",
          "6819:             NULL, HFILL}",
          "6820:         },",
          "6821:         {&hf_btatt_characteristic_presentation_exponent,",
          "6822:             {\"Exponent\", \"btatt.characteristic_presentation.exponent\",",
          "6823:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6824:             NULL, HFILL}",
          "6825:         },",
          "6826:         {&hf_btatt_characteristic_presentation_unit,",
          "6827:             {\"Unit\", \"btatt.characteristic_presentation.unit\",",
          "6828:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "6829:             NULL, HFILL}",
          "6830:         },",
          "6831:         {&hf_btatt_characteristic_presentation_namespace,",
          "6832:             {\"Namespace\", \"btatt.characteristic_presentation.namespace\",",
          "6833:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_namespace_vals), 0x0,",
          "6834:             NULL, HFILL}",
          "6835:         },",
          "6836:         {&hf_btatt_characteristic_presentation_namespace_description,",
          "6837:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "6838:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6839:             NULL, HFILL}",
          "6840:         },",
          "6841:         {&hf_btatt_characteristic_presentation_namespace_description_btsig,",
          "6842:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "6843:             FT_UINT16, BASE_HEX, VALS(characteristic_presentation_namespace_description_btsig_vals), 0x0,",
          "6844:             NULL, HFILL}",
          "6845:         },",
          "6846:         {&hf_btatt_esp_trigger_logic,",
          "6847:             {\"Trigger Logic\", \"btatt.esp.trigger_logic\",",
          "6848:             FT_UINT8, BASE_HEX, VALS(esp_trigger_logic_vals), 0x0,",
          "6849:             NULL, HFILL}",
          "6850:         },",
          "6851:         {&hf_btatt_esp_condition,",
          "6852:             {\"Trigger Logic\", \"btatt.esp.condition\",",
          "6853:             FT_UINT8, BASE_HEX, VALS(esp_condition_vals), 0x0,",
          "6854:             NULL, HFILL}",
          "6855:         },",
          "6856:         {&hf_btatt_esp_operand,",
          "6857:             {\"Operand\", \"btatt.esp.operand\",",
          "6858:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "6859:             NULL, HFILL}",
          "6860:         },",
          "6861:         {&hf_btatt_esp_flags,",
          "6862:             {\"Flags\", \"btatt.esp.flags\",",
          "6863:             FT_UINT16, BASE_HEX, NULL, 0xFFFF,",
          "6864:             NULL, HFILL}",
          "6865:         },",
          "6866:         {&hf_btatt_esp_sampling_function,",
          "6867:             {\"Sampling Function\", \"btatt.esp.sampling_function\",",
          "6868:             FT_UINT8, BASE_HEX, VALS(esp_sampling_function_vals), 0x0,",
          "6869:             NULL, HFILL}",
          "6870:         },",
          "6871:         {&hf_btatt_esp_measurement_period,",
          "6872:             {\"Measurement Period\", \"btatt.esp.measurement_period\",",
          "6873:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6874:             NULL, HFILL}",
          "6875:         },",
          "6876:         {&hf_btatt_esp_update_interval,",
          "6877:             {\"Update Interval\", \"btatt.esp.update_interval\",",
          "6878:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6879:             NULL, HFILL}",
          "6880:         },",
          "6881:         {&hf_btatt_esp_application,",
          "6882:             {\"Application\", \"btatt.esp.application\",",
          "6883:             FT_UINT8, BASE_HEX, VALS(esp_application_vals), 0x0,",
          "6884:             NULL, HFILL}",
          "6885:         },",
          "6886:         {&hf_btatt_esp_measurement_uncertainty,",
          "6887:             {\"Measurement Uncertainty\", \"btatt.esp.measurement_uncertainty\",",
          "6888:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6889:             NULL, HFILL}",
          "6890:         },",
          "6891:         {&hf_btatt_device_name,",
          "6892:             {\"Device Name\", \"btatt.device_name\",",
          "6893:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "6894:             NULL, HFILL}",
          "6895:         },",
          "6896:         {&hf_btatt_appearance,",
          "6897:             {\"Appearance\", \"btatt.appearance\",",
          "6898:             FT_UINT16, BASE_DEC_HEX, NULL, 0x0,",
          "6899:             NULL, HFILL}",
          "6900:         },",
          "6901:         {&hf_btatt_appearance_category,",
          "6902:             {\"Category\", \"btatt.appearance.category\",",
          "6903:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_category_vals), 0xFFC0,",
          "6904:             NULL, HFILL}",
          "6905:         },",
          "6906:         {&hf_btatt_appearance_subcategory,",
          "6907:             {\"Subcategory\", \"btatt.appearance.subcategory\",",
          "6908:             FT_UINT16, BASE_DEC_HEX, NULL, 0x003F,",
          "6909:             NULL, HFILL}",
          "6910:         },",
          "6911:         {&hf_btatt_appearance_subcategory_watch,",
          "6912:             {\"Subcategory\", \"btatt.appearance.subcategory.watch\",",
          "6913:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_watch_vals), 0x003F,",
          "6914:             NULL, HFILL}",
          "6915:         },",
          "6916:         {&hf_btatt_appearance_subcategory_thermometer,",
          "6917:             {\"Subcategory\", \"btatt.appearance.subcategory.thermometer\",",
          "6918:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_thermometer_vals), 0x003F,",
          "6919:             NULL, HFILL}",
          "6920:         },",
          "6921:         {&hf_btatt_appearance_subcategory_heart_rate,",
          "6922:             {\"Subcategory\", \"btatt.appearance.subcategory.heart_rate\",",
          "6923:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_heart_rate_vals), 0x003F,",
          "6924:             NULL, HFILL}",
          "6925:         },",
          "6926:         {&hf_btatt_appearance_subcategory_blood_pressure,",
          "6927:             {\"Subcategory\", \"btatt.appearance.subcategory.blood_pressure\",",
          "6928:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_blood_pressure_vals), 0x003F,",
          "6929:             NULL, HFILL}",
          "6930:         },",
          "6931:         {&hf_btatt_appearance_subcategory_hid,",
          "6932:             {\"Subcategory\", \"btatt.appearance.subcategory.hid\",",
          "6933:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_hid_vals), 0x003F,",
          "6934:             NULL, HFILL}",
          "6935:         },",
          "6936:         {&hf_btatt_appearance_subcategory_running_walking_sensor,",
          "6937:             {\"Subcategory\", \"btatt.appearance.subcategory.running_walking_sensor\",",
          "6938:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_running_walking_sensor_vals), 0x003F,",
          "6939:             NULL, HFILL}",
          "6940:         },",
          "6941:         {&hf_btatt_appearance_subcategory_cycling,",
          "6942:             {\"Subcategory\", \"btatt.appearance.subcategory.cycling\",",
          "6943:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_cycling_vals), 0x003F,",
          "6944:             NULL, HFILL}",
          "6945:         },",
          "6946:         {&hf_btatt_appearance_subcategory_pulse_oximeter,",
          "6947:             {\"Subcategory\", \"btatt.appearance.subcategory.pulse_oximeter\",",
          "6948:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_pulse_oximeter_vals), 0x003F,",
          "6949:             NULL, HFILL}",
          "6950:         },",
          "6951:         {&hf_btatt_appearance_subcategory_outdoor_sports_activity,",
          "6952:             {\"Subcategory\", \"btatt.appearance.subcategory.outdoor_sports_activity\",",
          "6953:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_outdoor_sports_activity_vals), 0x003F,",
          "6954:             NULL, HFILL}",
          "6955:         },",
          "6956:         {&hf_btatt_peripheral_privacy_flag,",
          "6957:             {\"Peripheral Privacy\", \"btatt.peripheral_privacy_flag\",",
          "6958:             FT_BOOLEAN, 8, NULL, 0x0,",
          "6959:             NULL, HFILL}",
          "6960:         },",
          "6961:         { &hf_btatt_reconnection_address,",
          "6962:             { \"Reconnection Address\", \"btatt.reconnection_address\",",
          "6963:             FT_ETHER, BASE_NONE, NULL, 0x0,",
          "6964:             NULL, HFILL }",
          "6965:         },",
          "6966:         {&hf_btatt_minimum_connection_interval,",
          "6967:             {\"Minimum Connection Interval\", \"btatt.minimum_connection_interval\",",
          "6968:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6969:             NULL, HFILL}",
          "6970:         },",
          "6971:         {&hf_btatt_maximum_connection_interval,",
          "6972:             {\"Maximum Connection Interval\", \"btatt.maximum_connection_interval\",",
          "6973:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6974:             NULL, HFILL}",
          "6975:         },",
          "6976:         {&hf_btatt_slave_latency,",
          "6977:             {\"Slave Latency\", \"btatt.slave_latency\",",
          "6978:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6979:             NULL, HFILL}",
          "6980:         },",
          "6981:         {&hf_btatt_connection_supervision_timeout_multiplier,",
          "6982:             {\"Connection Supervision Timeout Multiplier\", \"btatt.connection_supervision_timeout_multiplier\",",
          "6983:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6984:             NULL, HFILL}",
          "6985:         },",
          "6986:         {&hf_btatt_alert_level,",
          "6987:             {\"Alert Level\", \"btatt.alert_level\",",
          "6988:             FT_UINT8, BASE_HEX, VALS(alert_level_vals), 0x0,",
          "6989:             NULL, HFILL}",
          "6990:         },",
          "6991:         {&hf_btatt_tx_power_level,",
          "6992:             {\"Tx Power Level\", \"btatt.tx_power_level\",",
          "6993:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "6994:             NULL, HFILL}",
          "6995:         },",
          "6996:         {&hf_btatt_year,",
          "6997:             {\"Year\", \"btatt.year\",",
          "6998:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6999:             NULL, HFILL}",
          "7000:         },",
          "7001:         {&hf_btatt_month,",
          "7002:             {\"Month\", \"btatt.month\",",
          "7003:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7004:             NULL, HFILL}",
          "7005:         },",
          "7006:         {&hf_btatt_day,",
          "7007:             {\"Day\", \"btatt.day\",",
          "7008:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7009:             NULL, HFILL}",
          "7010:         },",
          "7011:         {&hf_btatt_hours,",
          "7012:             {\"Hours\", \"btatt.hours\",",
          "7013:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7014:             NULL, HFILL}",
          "7015:         },",
          "7016:         {&hf_btatt_minutes,",
          "7017:             {\"Minutes\", \"btatt.minutes\",",
          "7018:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7019:             NULL, HFILL}",
          "7020:         },",
          "7021:         {&hf_btatt_seconds,",
          "7022:             {\"Seconds\", \"btatt.seconds\",",
          "7023:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7024:             NULL, HFILL}",
          "7025:         },",
          "7026:         {&hf_btatt_day_of_week,",
          "7027:             {\"Day of Week\", \"btatt.day_of_week\",",
          "7028:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7029:             NULL, HFILL}",
          "7030:         },",
          "7031:         {&hf_btatt_fractions256,",
          "7032:             {\"Fractions256\", \"btatt.fractions256\",",
          "7033:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7034:             \"1/256th of a second\", HFILL}",
          "7035:         },",
          "7036:         {&hf_btatt_dst_offset,",
          "7037:             {\"Daylight Saving Time Offset\", \"btatt.dst_offset\",",
          "7038:             FT_UINT8, BASE_HEX, VALS(dst_offset_vals), 0x0,",
          "7039:             NULL, HFILL}",
          "7040:         },",
          "7041:         {&hf_btatt_model_number_string,",
          "7042:             {\"Model Number String\", \"btatt.model_number_string\",",
          "7043:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7044:             NULL, HFILL}",
          "7045:         },",
          "7046:         {&hf_btatt_serial_number_string,",
          "7047:             {\"Serial Number String\", \"btatt.serial_number_string\",",
          "7048:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7049:             NULL, HFILL}",
          "7050:         },",
          "7051:         {&hf_btatt_firmware_revision_string,",
          "7052:             {\"Firmware Revision String\", \"btatt.firmware_revision_string\",",
          "7053:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7054:             NULL, HFILL}",
          "7055:         },",
          "7056:         {&hf_btatt_hardware_revision_string,",
          "7057:             {\"Hardware Revision String\", \"btatt.hardware_revision_string\",",
          "7058:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7059:             NULL, HFILL}",
          "7060:         },",
          "7061:         {&hf_btatt_software_revision_string,",
          "7062:             {\"Software Revision String\", \"btatt.software_revision_string\",",
          "7063:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7064:             NULL, HFILL}",
          "7065:         },",
          "7066:         {&hf_btatt_manufacturer_string,",
          "7067:             {\"Manufacturer String\", \"btatt.manufacturer_string\",",
          "7068:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7069:             NULL, HFILL}",
          "7070:         },",
          "7071:         {&hf_btatt_system_id_manufacturer_identifier,",
          "7072:             {\"Manufacturer Identifier\", \"btatt.system_id.manufacturer_identifier\",",
          "7073:             FT_UINT40, BASE_HEX, NULL, 0x0,",
          "7074:             NULL, HFILL}",
          "7075:         },",
          "7076:         {&hf_btatt_system_id_organizationally_unique_identifier,",
          "7077:             {\"Organizationally Unique Identifier\", \"btatt.system_id.organizationally_unique_identifier\",",
          "7078:             FT_UINT24, BASE_HEX, VALS(oui_vals), 0x0,",
          "7079:             NULL, HFILL}",
          "7080:         },",
          "7081:         {&hf_btatt_timezone,",
          "7082:             {\"Timezone\", \"btatt.timezone\",",
          "7083:             FT_INT8, BASE_DEC, VALS(timezone_vals), 0x0,",
          "7084:             NULL, HFILL}",
          "7085:         },",
          "7086:         {&hf_btatt_time_accuracy,",
          "7087:             {\"Time Accuracy\", \"btatt.time_accuracy\",",
          "7088:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7089:             NULL, HFILL}",
          "7090:         },",
          "7091:         {&hf_btatt_time_source,",
          "7092:             {\"Time Source\", \"btatt.time_source\",",
          "7093:             FT_UINT8, BASE_DEC, VALS(time_source_vals), 0x0,",
          "7094:             NULL, HFILL}",
          "7095:         },",
          "7096:         {&hf_btatt_time_days_since_update,",
          "7097:             {\"Days Since Update\", \"btatt.days_since_update\",",
          "7098:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7099:             NULL, HFILL}",
          "7100:         },",
          "7101:         {&hf_btatt_time_hours_since_update,",
          "7102:             {\"Hours Since Update\", \"btatt.hours_since_update\",",
          "7103:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7104:             NULL, HFILL}",
          "7105:         },",
          "7106:         {&hf_btatt_time_update_control_point,",
          "7107:             {\"Update Control Point\", \"btatt.update_control_point\",",
          "7108:             FT_UINT8, BASE_HEX, VALS(time_update_control_point_vals), 0x0,",
          "7109:             NULL, HFILL}",
          "7110:         },",
          "7111:         {&hf_btatt_time_current_state,",
          "7112:             {\"Current State\", \"btatt.time_current_state\",",
          "7113:             FT_UINT8, BASE_HEX, VALS(time_current_state_vals), 0x0,",
          "7114:             NULL, HFILL}",
          "7115:         },",
          "7116:         {&hf_btatt_time_result,",
          "7117:             {\"Result\", \"btatt.time_result\",",
          "7118:             FT_UINT8, BASE_HEX, VALS(time_result_vals), 0x0,",
          "7119:             NULL, HFILL}",
          "7120:         },",
          "7121:         {&hf_btatt_battery_level,",
          "7122:             {\"Battery Level\", \"btatt.battery_level\",",
          "7123:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7124:             NULL, HFILL}",
          "7125:         },",
          "7126:         {&hf_btatt_temperature_type,",
          "7127:             {\"Temperature Type\", \"btatt.temperature_type\",",
          "7128:             FT_UINT8, BASE_HEX, VALS(temperature_type_vals), 0x0,",
          "7129:             NULL, HFILL}",
          "7130:         },",
          "7131:         {&hf_btatt_measurement_interval,",
          "7132:             {\"Measurement Interval\", \"btatt.measurement_interval\",",
          "7133:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7134:             NULL, HFILL}",
          "7135:         },",
          "7136:         {&hf_btatt_time_adjust_reason,",
          "7137:             {\"Adjust Reason\", \"btatt.adjust_reason\",",
          "7138:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "7139:             NULL, HFILL}",
          "7140:         },",
          "7141:         {&hf_btatt_time_adjust_reason_reserved,",
          "7142:             {\"Reserved\", \"btatt.adjust_reason.reserved\",",
          "7143:             FT_UINT8, BASE_HEX, NULL, 0xF0,",
          "7144:             NULL, HFILL}",
          "7145:         },",
          "7146:         {&hf_btatt_time_adjust_reason_change_of_dst,",
          "7147:             {\"Change of DST\", \"btatt.adjust_reason.change_of_dst\",",
          "7148:             FT_BOOLEAN, 8, NULL, 0x08,",
          "7149:             NULL, HFILL}",
          "7150:         },",
          "7151:         {&hf_btatt_time_adjust_reason_change_of_timezone,",
          "7152:             {\"Change of Timezone\", \"btatt.adjust_reason.change_of_timezone\",",
          "7153:             FT_BOOLEAN, 8, NULL, 0x04,",
          "7154:             NULL, HFILL}",
          "7155:         },",
          "7156:         {&hf_btatt_time_adjust_reason_external_reference_time_update,",
          "7157:             {\"External Reference Time Update\", \"btatt.adjust_reason.external_reference_time_update\",",
          "7158:             FT_BOOLEAN, 8, NULL, 0x02,",
          "7159:             NULL, HFILL}",
          "7160:         },",
          "7161:         {&hf_btatt_time_adjust_reason_manual_time_update,",
          "7162:             {\"Manual Time Update\", \"btatt.adjust_reason.manual_time_update\",",
          "7163:             FT_BOOLEAN, 8, NULL, 0x01,",
          "7164:             NULL, HFILL}",
          "7165:         },",
          "7166:         {&hf_btatt_magnetic_declination,",
          "7167:             {\"Magnetic Declination\", \"btatt.magnetic_declination\",",
          "7168:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7169:             NULL, HFILL}",
          "7170:         },",
          "7171:         {&hf_btatt_scan_refresh,",
          "7172:             {\"Scan Refresh\", \"btatt.scan_refresh\",",
          "7173:             FT_UINT8, BASE_HEX, VALS(scan_refresh_vals), 0x0,",
          "7174:             NULL, HFILL}",
          "7175:         },",
          "7176:         {&hf_btatt_body_sensor_location,",
          "7177:             {\"Body Sensor Location\", \"btatt.body_sensor_location\",",
          "7178:             FT_UINT8, BASE_HEX, VALS(body_sensor_location_vals), 0x0,",
          "7179:             NULL, HFILL}",
          "7180:         },",
          "7181:         {&hf_btatt_heart_rate_control_point,",
          "7182:             {\"Heart Rate Control Point\", \"btatt.heart_rate_control_point\",",
          "7183:             FT_UINT8, BASE_HEX, VALS(heart_rate_control_point_vals), 0x0,",
          "7184:             NULL, HFILL}",
          "7185:         },",
          "7186:         {&hf_btatt_alert_status,",
          "7187:             {\"Alert Status\", \"btatt.alert.status\",",
          "7188:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "7189:             NULL, HFILL}",
          "7190:         },",
          "7191:         {&hf_btatt_alert_status_reserved,",
          "7192:             {\"Reserved\", \"btatt.alert.status.reserved\",",
          "7193:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "7194:             NULL, HFILL}",
          "7195:         },",
          "7196:         {&hf_btatt_alert_status_display_alert_status,",
          "7197:             {\"Display Alert Status\", \"btatt.alert.status.display_alert_status\",",
          "7198:             FT_BOOLEAN, 8, NULL, 0x04,",
          "7199:             NULL, HFILL}",
          "7200:         },",
          "7201:         {&hf_btatt_alert_status_vibrate_state,",
          "7202:             {\"Vibrate State\", \"btatt.alert.status.vibrate_state\",",
          "7203:             FT_BOOLEAN, 8, NULL, 0x02,",
          "7204:             NULL, HFILL}",
          "7205:         },",
          "7206:         {&hf_btatt_alert_status_ringer_state,",
          "7207:             {\"Ringer State\", \"btatt.alert_status.ringer_state\",",
          "7208:             FT_BOOLEAN, 8, NULL, 0x01,",
          "7209:             NULL, HFILL}",
          "7210:         },",
          "7211:         {&hf_btatt_ringer_control_point,",
          "7212:             {\"Ringer Control Point\", \"btatt.ringer_control_point\",",
          "7213:             FT_UINT8, BASE_HEX, VALS(ringer_control_point_vals), 0x0,",
          "7214:             NULL, HFILL}",
          "7215:         },",
          "7216:         {&hf_btatt_ringer_setting,",
          "7217:             {\"Ringer Setting\", \"btatt.ringer_setting\",",
          "7218:             FT_UINT8, BASE_HEX, VALS(ringer_setting_vals), 0x0,",
          "7219:             NULL, HFILL}",
          "7220:         },",
          "7221:         {&hf_btatt_alert_category_id_bitmask_1,",
          "7222:             {\"Alert Category ID Bitmask 1\", \"btatt.alert.category_id_bitmask_1\",",
          "7223:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "7224:             NULL, HFILL}",
          "7225:         },",
          "7226:         {&hf_btatt_alert_category_id_bitmask_1_schedule,",
          "7227:             {\"Schedule\", \"btatt.alert.category_id_bitmask_1.schedule\",",
          "7228:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "7229:             NULL, HFILL}",
          "7230:         },",
          "7231:         {&hf_btatt_alert_category_id_bitmask_1_voice_mail,",
          "7232:             {\"Voice Mail\", \"btatt.alert.category_id_bitmask_1.voice_mail\",",
          "7233:             FT_UINT8, BASE_HEX, NULL, 0x40,",
          "7234:             NULL, HFILL}",
          "7235:         },",
          "7236:         {&hf_btatt_alert_category_id_bitmask_1_sms_mms,",
          "7237:             {\"SMS/MMS\", \"btatt.alert.category_id_bitmask_1.sms_mms\",",
          "7238:             FT_UINT8, BASE_HEX, NULL, 0x20,",
          "7239:             NULL, HFILL}",
          "7240:         },",
          "7241:         {&hf_btatt_alert_category_id_bitmask_1_missed_call,",
          "7242:             {\"Missed Call\", \"btatt.alert.category_id_bitmask_1.missed_call\",",
          "7243:             FT_UINT8, BASE_HEX, NULL, 0x10,",
          "7244:             NULL, HFILL}",
          "7245:         },",
          "7246:         {&hf_btatt_alert_category_id_bitmask_1_call,",
          "7247:             {\"Call\", \"btatt.alert.category_id_bitmask_1.call\",",
          "7248:             FT_UINT8, BASE_HEX, NULL, 0x08,",
          "7249:             NULL, HFILL}",
          "7250:         },",
          "7251:         {&hf_btatt_alert_category_id_bitmask_1_news,",
          "7252:             {\"News\", \"btatt.alert.category_id_bitmask_1.news\",",
          "7253:             FT_UINT8, BASE_HEX, NULL, 0x04,",
          "7254:             NULL, HFILL}",
          "7255:         },",
          "7256:         {&hf_btatt_alert_category_id_bitmask_1_email,",
          "7257:             {\"Email\", \"btatt.alert.category_id_bitmask_1.email\",",
          "7258:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "7259:             NULL, HFILL}",
          "7260:         },",
          "7261:         {&hf_btatt_alert_category_id_bitmask_1_simple_alert,",
          "7262:             {\"Simple Alert\", \"btatt.alert.category_id_bitmask_1.simple_alert\",",
          "7263:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "7264:             NULL, HFILL}",
          "7265:         },",
          "7266:         {&hf_btatt_alert_category_id_bitmask_2,",
          "7267:             {\"Alert Category ID Bitmask 2\", \"btatt.alert.category_id_bitmask_2\",",
          "7268:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "7269:             NULL, HFILL}",
          "7270:         },",
          "7271:         {&hf_btatt_alert_category_id_bitmask_2_reserved,",
          "7272:             {\"Reserved\", \"btatt.alert.category_id_bitmask_2.reserved\",",
          "7273:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "7274:             NULL, HFILL}",
          "7275:         },",
          "7276:         {&hf_btatt_alert_category_id_bitmask_2_instant_message,",
          "7277:             {\"Instant Message\", \"btatt.alert.category_id_bitmask_2.instant_message\",",
          "7278:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "7279:             NULL, HFILL}",
          "7280:         },",
          "7281:         {&hf_btatt_alert_category_id_bitmask_2_high_prioritized_alert,",
          "7282:             {\"High Prioritized Alert\", \"btatt.alert.category_id_bitmask_2.high_prioritized_alert\",",
          "7283:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "7284:             NULL, HFILL}",
          "7285:         },",
          "7286:         {&hf_btatt_alert_category_id,",
          "7287:             {\"Alert Category ID\", \"btatt.alert.category_id\",",
          "7288:             FT_UINT8, BASE_HEX, VALS(alert_category_id_vals), 0x0,",
          "7289:             NULL, HFILL}",
          "7290:         },",
          "7291:         {&hf_btatt_alert_command_id,",
          "7292:             {\"Alert Command ID\", \"btatt.alert.command_id\",",
          "7293:             FT_UINT8, BASE_HEX, VALS(alert_command_id_vals), 0x0,",
          "7294:             NULL, HFILL}",
          "7295:         },",
          "7296:         {&hf_btatt_alert_unread_count,",
          "7297:             {\"Unread Count\", \"btatt.alert.unread_count\",",
          "7298:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7299:             NULL, HFILL}",
          "7300:         },",
          "7301:         {&hf_btatt_alert_number_of_new_alert,",
          "7302:             {\"Number of New Alert\", \"btatt.alert.number_of_new_alert\",",
          "7303:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7304:             NULL, HFILL}",
          "7305:         },",
          "7306:         {&hf_btatt_alert_text_string_information,",
          "7307:             {\"Text String Information\", \"btatt.text_string_information\",",
          "7308:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7309:             NULL, HFILL}",
          "7310:         },",
          "7311:         {&hf_btatt_blood_pressure_feature,",
          "7312:             {\"Blood Pressure Feature\", \"btatt.blood_pressure.feature\",",
          "7313:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7314:             NULL, HFILL}",
          "7315:         },",
          "7316:         {&hf_btatt_blood_pressure_feature_reserved,",
          "7317:             {\"Reserved\", \"btatt.blood_pressure.feature.reserved\",",
          "7318:             FT_UINT16, BASE_HEX, NULL, 0xFFC0,",
          "7319:             NULL, HFILL}",
          "7320:         },",
          "7321:         {&hf_btatt_blood_pressure_feature_multiple_bond,",
          "7322:             {\"Multiple Bond\", \"btatt.blood_pressure.feature.multiple_bond\",",
          "7323:             FT_BOOLEAN, 16, NULL, 0x20,",
          "7324:             NULL, HFILL}",
          "7325:         },",
          "7326:         {&hf_btatt_blood_pressure_feature_measurement_position_detection,",
          "7327:             {\"Measurement Position Detection\", \"btatt.blood_pressure.feature.measurement_position_detection\",",
          "7328:             FT_BOOLEAN, 16, NULL, 0x10,",
          "7329:             NULL, HFILL}",
          "7330:         },",
          "7331:         {&hf_btatt_blood_pressure_feature_puls_rate_range,",
          "7332:             {\"Puls Rate Range\", \"btatt.blood_pressure.feature.puls_rate_range\",",
          "7333:             FT_BOOLEAN, 16, NULL, 0x08,",
          "7334:             NULL, HFILL}",
          "7335:         },",
          "7336:         {&hf_btatt_blood_pressure_feature_irregular_pulse_detection,",
          "7337:             {\"Irregular Pulse Detection\", \"btatt.blood_pressure.feature.irregular_pulse_detection\",",
          "7338:             FT_BOOLEAN, 16, NULL, 0x04,",
          "7339:             NULL, HFILL}",
          "7340:         },",
          "7341:         {&hf_btatt_blood_pressure_feature_cuff_fit_detection,",
          "7342:             {\"Cuff Fit Detection\", \"btatt.blood_pressure.feature.cuff_fit_detection\",",
          "7343:             FT_BOOLEAN, 16, NULL, 0x02,",
          "7344:             NULL, HFILL}",
          "7345:         },",
          "7346:         {&hf_btatt_blood_pressure_feature_body_movement_detection,",
          "7347:             {\"Body Movement Detection\", \"btatt.blood_pressure.feature.body_movement_detection\",",
          "7348:             FT_BOOLEAN, 16, NULL, 0x01,",
          "7349:             NULL, HFILL}",
          "7350:         },",
          "7351:         {&hf_btatt_hogp_hid_control_point_command,",
          "7352:             {\"HID Control Point Command\", \"btatt.hogp.hid_control_point_command\",",
          "7353:             FT_UINT8, BASE_HEX, VALS(hid_control_point_command_vals), 0x0,",
          "7354:             NULL, HFILL}",
          "7355:         },",
          "7356:         {&hf_btatt_le_scan_interval,",
          "7357:             {\"LE Scan Interval\", \"btatt.le_scan_interval\",",
          "7358:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7359:             NULL, HFILL}",
          "7360:         },",
          "7361:         {&hf_btatt_le_scan_window,",
          "7362:             {\"LE Scan Window\", \"btatt.le_scan_window\",",
          "7363:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7364:             NULL, HFILL}",
          "7365:         },",
          "7366:         { &hf_btatt_pnp_id_vendor_id_source,",
          "7367:             { \"Vendor ID Source\",                \"btatt.pnp_id.vendor_id_source\",",
          "7368:             FT_UINT16, BASE_HEX, VALS(pnp_id_vendor_id_source_vals), 0,",
          "7369:             NULL, HFILL }",
          "7370:         },",
          "7371:         { &hf_btatt_pnp_id_vendor_id,",
          "7372:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "7373:             FT_UINT16, BASE_HEX, NULL, 0,",
          "7374:             NULL, HFILL }",
          "7375:         },",
          "7376:         { &hf_btatt_pnp_id_vendor_id_bluetooth_sig,",
          "7377:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "7378:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_company_id_vals_ext, 0,",
          "7379:             NULL, HFILL }",
          "7380:         },",
          "7381:         { &hf_btatt_pnp_id_vendor_id_usb_forum,",
          "7382:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "7383:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &ext_usb_vendors_vals, 0,",
          "7384:             NULL, HFILL }",
          "7385:         },",
          "7386:         { &hf_btatt_pnp_id_product_id,",
          "7387:             { \"Product ID\",                      \"btatt.pnp_id.product_id\",",
          "7388:             FT_UINT16, BASE_HEX, NULL, 0,",
          "7389:             NULL, HFILL }",
          "7390:         },",
          "7391:         { &hf_btatt_pnp_id_product_version,",
          "7392:             { \"Version\",                         \"btatt.pnp_id.product_version\",",
          "7393:             FT_UINT16, BASE_HEX, NULL, 0,",
          "7394:             NULL, HFILL }",
          "7395:         },",
          "7396:         {&hf_btatt_glucose_feature,",
          "7397:             {\"Glucose Feature\", \"btatt.glucose.feature\",",
          "7398:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7399:             NULL, HFILL}",
          "7400:         },",
          "7401:         {&hf_btatt_glucose_feature_reserved,",
          "7402:             {\"Reserved\", \"btatt.glucose.feature.reserved\",",
          "7403:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "7404:             NULL, HFILL}",
          "7405:         },",
          "7406:         {&hf_btatt_glucose_feature_multiple_bond,",
          "7407:             {\"Multiple Bond\", \"btatt.glucose.feature.multiple_bond\",",
          "7408:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "7409:             NULL, HFILL}",
          "7410:         },",
          "7411:         {&hf_btatt_glucose_feature_time_fault,",
          "7412:             {\"Time Fault\", \"btatt.glucose.feature.time_fault\",",
          "7413:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "7414:             NULL, HFILL}",
          "7415:         },",
          "7416:         {&hf_btatt_glucose_feature_general_device_fault,",
          "7417:             {\"General Device Fault\", \"btatt.glucose.feature.general_device_fault\",",
          "7418:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "7419:             NULL, HFILL}",
          "7420:         },",
          "7421:         {&hf_btatt_glucose_feature_sensor_read_interrupt_detection,",
          "7422:             {\"Sensor Read Interrupt Detection\", \"btatt.glucose.feature.sensor_read_interrupt_detection\",",
          "7423:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "7424:             NULL, HFILL}",
          "7425:         },",
          "7426:         {&hf_btatt_glucose_feature_sensor_temperature_high_low_detection,",
          "7427:             {\"Sensor Temperature High-Low Detection\", \"btatt.glucose.feature.sensor_temperature_high_low_detection\",",
          "7428:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "7429:             NULL, HFILL}",
          "7430:         },",
          "7431:         {&hf_btatt_glucose_feature_sensor_result_high_low_detection,",
          "7432:             {\"Sensor Result High-Low Detection\", \"btatt.glucose.feature.sensor_result_high_low_detection\",",
          "7433:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "7434:             NULL, HFILL}",
          "7435:         },",
          "7436:         {&hf_btatt_glucose_feature_sensor_strip_type_error_detection,",
          "7437:             {\"Sensor Strip Type Error Detection\", \"btatt.glucose.feature.sensor_strip_type_error_detection\",",
          "7438:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "7439:             NULL, HFILL}",
          "7440:         },",
          "7441:         {&hf_btatt_glucose_feature_sensor_strip_insertion_error_detection,",
          "7442:             {\"Sensor Strip Insertion Error Detection\", \"btatt.glucose.feature.sensor_strip_insertion_error_detection\",",
          "7443:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "7444:             NULL, HFILL}",
          "7445:         },",
          "7446:         {&hf_btatt_glucose_feature_sensor_sample_size,",
          "7447:             {\"Sensor Sample Size\", \"btatt.glucose.feature.sensor_sample_size\",",
          "7448:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "7449:             NULL, HFILL}",
          "7450:         },",
          "7451:         {&hf_btatt_glucose_feature_sensor_malfunction_detection,",
          "7452:             {\"Sensor Malfunction Detection\", \"btatt.glucose.feature.sensor_malfunction_detection\",",
          "7453:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "7454:             NULL, HFILL}",
          "7455:         },",
          "7456:         {&hf_btatt_glucose_feature_low_battery_detection_during_measurement,",
          "7457:             {\"Low Battery Detection During Measurement\", \"btatt.glucose.feature.low_battery_detection_during_measurement\",",
          "7458:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "7459:             NULL, HFILL}",
          "7460:         },",
          "7461:         {&hf_btatt_rsc_feature,",
          "7462:             {\"RSC Feature\", \"btatt.rsc.feature\",",
          "7463:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7464:             NULL, HFILL}",
          "7465:         },",
          "7466:         {&hf_btatt_rsc_feature_reserved,",
          "7467:             {\"Reserved\", \"btatt.rsc.feature.reserved\",",
          "7468:             FT_BOOLEAN, 16, NULL, 0xFF80,",
          "7469:             NULL, HFILL}",
          "7470:         },",
          "7471:         {&hf_btatt_rsc_feature_multiple_sensor_locations,",
          "7472:             {\"Multiple Sensor Locations\", \"btatt.rsc.feature.multiple_sensor_locations\",",
          "7473:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "7474:             NULL, HFILL}",
          "7475:         },",
          "7476:         {&hf_btatt_rsc_feature_calibration_procedure,",
          "7477:             {\"Calibration Procedure\", \"btatt.rsc.feature.calibration_procedure\",",
          "7478:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "7479:             NULL, HFILL}",
          "7480:         },",
          "7481:         {&hf_btatt_rsc_feature_walking_or_running_status,",
          "7482:             {\"Walking_or Running Status\", \"btatt.rsc.feature.walking_or_running_status\",",
          "7483:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "7484:             NULL, HFILL}",
          "7485:         },",
          "7486:         {&hf_btatt_rsc_feature_total_distance_measurement,",
          "7487:             {\"Total Distance Measurement\", \"btatt.rsc.feature.total_distance_measurement\",",
          "7488:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "7489:             NULL, HFILL}",
          "7490:         },",
          "7491:         {&hf_btatt_rsc_feature_instantaneous_stride_length_measurement,",
          "7492:             {\"Instantaneous Stride Length Measurement\", \"btatt.rsc.feature.instantaneous_stride_length_measurement\",",
          "7493:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "7494:             NULL, HFILL}",
          "7495:         },",
          "7496:         {&hf_btatt_csc_feature,",
          "7497:             {\"CSC Feature\", \"btatt.csc.feature\",",
          "7498:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7499:             NULL, HFILL}",
          "7500:         },",
          "7501:         {&hf_btatt_csc_feature_reserved,",
          "7502:             {\"Reserved\", \"btatt.csc.feature.reserved\",",
          "7503:             FT_BOOLEAN, 16, NULL, 0xFFF8,",
          "7504:             NULL, HFILL}",
          "7505:         },",
          "7506:         {&hf_btatt_csc_feature_multiple_sensor_locations,",
          "7507:             {\"Multiple Sensor Locations\", \"btatt.csc.feature.multiple_sensor_locations\",",
          "7508:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "7509:             NULL, HFILL}",
          "7510:         },",
          "7511:         {&hf_btatt_csc_feature_crank_revolution_data,",
          "7512:             {\"Crank Revolution Data\", \"btatt.csc.feature.crank_revolution_data\",",
          "7513:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "7514:             NULL, HFILL}",
          "7515:         },",
          "7516:         {&hf_btatt_csc_feature_wheel_revolution_data,",
          "7517:             {\"Wheel Revolution Data\", \"btatt.csc.feature.wheel_revolution_data\",",
          "7518:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "7519:             NULL, HFILL}",
          "7520:         },",
          "7521:         {&hf_btatt_sensor_location,",
          "7522:             {\"Sensor Location\", \"btatt.sensor_location\",",
          "7523:             FT_UINT8, BASE_HEX, VALS(sensor_location_vals), 0x0,",
          "7524:             NULL, HFILL}",
          "7525:         },",
          "7526:         {&hf_btatt_elevation,",
          "7527:             {\"Elevation\", \"btatt.elevation\",",
          "7528:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "7529:             NULL, HFILL}",
          "7530:         },",
          "7531:         {&hf_btatt_pressure,",
          "7532:             {\"Pressure\", \"btatt.pressure\",",
          "7533:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "7534:             NULL, HFILL}",
          "7535:         },",
          "7536:         {&hf_btatt_temperature,",
          "7537:             {\"Temperature\", \"btatt.temperature\",",
          "7538:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "7539:             NULL, HFILL}",
          "7540:         },",
          "7541:         {&hf_btatt_humidity,",
          "7542:             {\"Humidity\", \"btatt.humidity\",",
          "7543:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7544:             NULL, HFILL}",
          "7545:         },",
          "7546:         {&hf_btatt_true_wind_speed,",
          "7547:             {\"True Wind Speed\", \"btatt.true_wind_speed\",",
          "7548:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7549:             NULL, HFILL}",
          "7550:         },",
          "7551:         {&hf_btatt_true_wind_direction,",
          "7552:             {\"True Wind Direction\", \"btatt.true_wind_direction\",",
          "7553:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7554:             NULL, HFILL}",
          "7555:         },",
          "7556:         {&hf_btatt_apparent_wind_speed,",
          "7557:             {\"Apparent Wind Speed\", \"btatt.apparent_wind_speed\",",
          "7558:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7559:             NULL, HFILL}",
          "7560:         },",
          "7561:         {&hf_btatt_apparent_wind_direction,",
          "7562:             {\"Apparent Wind Direction\", \"btatt.apparent_wind_direction\",",
          "7563:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7564:             NULL, HFILL}",
          "7565:         },",
          "7566:         {&hf_btatt_gust_factor,",
          "7567:             {\"Gust Factor\", \"btatt.gust_factor\",",
          "7568:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "7569:             NULL, HFILL}",
          "7570:         },",
          "7571:         {&hf_btatt_pollen_concentration,",
          "7572:             {\"Pollen Concentration\", \"btatt.pollen_concentration\",",
          "7573:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "7574:             NULL, HFILL}",
          "7575:         },",
          "7576:         {&hf_btatt_uv_index,",
          "7577:             {\"UV Index\", \"btatt.uv_index\",",
          "7578:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7579:             NULL, HFILL}",
          "7580:         },",
          "7581:         {&hf_btatt_irradiance,",
          "7582:             {\"Irradiance\", \"btatt.irradiance\",",
          "7583:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7584:             NULL, HFILL}",
          "7585:         },",
          "7586:         {&hf_btatt_rainfall,",
          "7587:             {\"Rainfall\", \"btatt.rainfall\",",
          "7588:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7589:             NULL, HFILL}",
          "7590:         },",
          "7591:         {&hf_btatt_wind_chill,",
          "7592:             {\"Wind Chill\", \"btatt.wind_chill\",",
          "7593:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "7594:             NULL, HFILL}",
          "7595:         },",
          "7596:         {&hf_btatt_heart_index,",
          "7597:             {\"Heart Index\", \"btatt.heart_index\",",
          "7598:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "7599:             NULL, HFILL}",
          "7600:         },",
          "7601:         {&hf_btatt_dew_point,",
          "7602:             {\"Dew Point\", \"btatt.dew_point\",",
          "7603:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "7604:             NULL, HFILL}",
          "7605:         },",
          "7606:         {&hf_btatt_descriptor_value_changed_flags,",
          "7607:             {\"Flags\", \"btatt.descriptor_value_changed.flags\",",
          "7608:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "7609:             NULL, HFILL}",
          "7610:         },",
          "7611:         {&hf_btatt_descriptor_value_changed_flags_reserved,",
          "7612:             {\"Reserved\", \"btatt.descriptor_value_changed.flags.reserved\",",
          "7613:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "7614:             NULL, HFILL}",
          "7615:         },",
          "7616:         {&hf_btatt_descriptor_value_changed_flags_change_to_characteristic_user_description_descriptor,",
          "7617:             {\"Change to Characteristic User Description Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_characteristic_user_description_descriptor\",",
          "7618:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "7619:             NULL, HFILL}",
          "7620:         },",
          "7621:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_measurement_descriptor,",
          "7622:             {\"Change to ES Measurement Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_measurement_descriptor\",",
          "7623:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "7624:             NULL, HFILL}",
          "7625:         },",
          "7626:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_configuration_descriptor,",
          "7627:             {\"Change to ES Configuration Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_configuration_descriptor\",",
          "7628:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "7629:             NULL, HFILL}",
          "7630:         },",
          "7631:         {&hf_btatt_descriptor_value_changed_flags_change_to_one_or_more_es_trigger_setting_descriptors,",
          "7632:             {\"Change to One or More ES Trigger Setting Descriptors\", \"btatt.descriptor_value_changed.flags.change_to_one_or_more_es_trigger_setting_descriptors\",",
          "7633:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "7634:             NULL, HFILL}",
          "7635:         },",
          "7636:         {&hf_btatt_descriptor_value_changed_flags_source_of_change,",
          "7637:             {\"Source of Change\", \"btatt.descriptor_value_changed.flags.source_of_change\",",
          "7638:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "7639:             NULL, HFILL}",
          "7640:         },",
          "7641:         {&hf_btatt_aerobic_heart_rate_lower_limit,",
          "7642:             {\"Aerobic Heart Rate Lower Limit\", \"btatt.aerobic_heart_rate_lower_limit\",",
          "7643:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7644:             NULL, HFILL}",
          "7645:         },",
          "7646:         {&hf_btatt_aerobic_threshold,",
          "7647:             {\"Aerobic Threshold\", \"btatt.aerobic_threshold\",",
          "7648:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7649:             NULL, HFILL}",
          "7650:         },",
          "7651:         {&hf_btatt_age,",
          "7652:             {\"Age\", \"btatt.age\",",
          "7653:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7654:             NULL, HFILL}",
          "7655:         },",
          "7656:         {&hf_btatt_anaerobic_heart_rate_lower_limit,",
          "7657:             {\"Anaerobic Heart Rate Lower Limit\", \"btatt.anaerobic_heart_rate_lower_limit\",",
          "7658:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7659:             NULL, HFILL}",
          "7660:         },",
          "7661:         {&hf_btatt_anaerobic_heart_rate_upper_limit,",
          "7662:             {\"Anaerobic Heart Rate Upper Limit\", \"btatt.anaerobic_heart_rate_upper_limit\",",
          "7663:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7664:             NULL, HFILL}",
          "7665:         },",
          "7666:         {&hf_btatt_anaerobic_threshold,",
          "7667:             {\"Anaerobic Threshold\", \"btatt.anaerobic_threshold\",",
          "7668:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7669:             NULL, HFILL}",
          "7670:         },",
          "7671:         {&hf_btatt_aerobic_heart_rate_upper_limit,",
          "7672:             {\"Aerobic Heart Rate Upper Limit\", \"btatt.aerobic_heart_rate_upper_limit\",",
          "7673:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7674:             NULL, HFILL}",
          "7675:         },",
          "7676:         {&hf_btatt_email_address,",
          "7677:             {\"Email Address\", \"btatt.email_address\",",
          "7678:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7679:             NULL, HFILL}",
          "7680:         },",
          "7681:         {&hf_btatt_fat_burn_heart_rate_lower_limit,",
          "7682:             {\"Fat Burn Heart Rate Lower Limit\", \"btatt.fat_burn_heart_rate_lower_limit\",",
          "7683:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7684:             NULL, HFILL}",
          "7685:         },",
          "7686:         {&hf_btatt_fat_burn_heart_rate_upper_limit,",
          "7687:             {\"Fat Burn Heart Rate Upper Limit\", \"btatt.fat_burn_heart_rate_upper_limit\",",
          "7688:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7689:             NULL, HFILL}",
          "7690:         },",
          "7691:         {&hf_btatt_first_name,",
          "7692:             {\"First Name\", \"btatt.first_name\",",
          "7693:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7694:             NULL, HFILL}",
          "7695:         },",
          "7696:         {&hf_btatt_five_zone_heart_rate_limits_very_light_light_limit,",
          "7697:             {\"Very Light/Light Limit\", \"btatt.five_zone_heart_rate_limits.very_light_light_limit\",",
          "7698:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7699:             NULL, HFILL}",
          "7700:         },",
          "7701:         {&hf_btatt_five_zone_heart_rate_limits_light_moderate_limit,",
          "7702:             {\"Light/Moderate Limit,\", \"btatt.five_zone_heart_rate_limits.light_moderate_limit\",",
          "7703:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7704:             NULL, HFILL}",
          "7705:         },",
          "7706:         {&hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit,",
          "7707:             {\"Moderate/Hard Limit\", \"btatt.five_zone_heart_rate_limits.moderate_hard_limit\",",
          "7708:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7709:             NULL, HFILL}",
          "7710:         },",
          "7711:         {&hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit,",
          "7712:             {\"Hard/Maximum Limit\", \"btatt.five_zone_heart_rate_limits.hard_maximum_limit\",",
          "7713:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7714:             NULL, HFILL}",
          "7715:         },",
          "7716:         {&hf_btatt_gender,",
          "7717:             {\"Gender\", \"btatt.gender\",",
          "7718:             FT_UINT8, BASE_HEX, VALS(gender_vals), 0x0,",
          "7719:             NULL, HFILL}",
          "7720:         },",
          "7721:         {&hf_btatt_heart_rate_max,",
          "7722:             {\"Heart Rate Max\", \"btatt.heart_rate_max\",",
          "7723:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7724:             NULL, HFILL}",
          "7725:         },",
          "7726:         {&hf_btatt_height,",
          "7727:             {\"Height\", \"btatt.height\",",
          "7728:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7729:             NULL, HFILL}",
          "7730:         },",
          "7731:         {&hf_btatt_hip_circumference,",
          "7732:             {\"Hip Circumference\", \"btatt.hip_circumference\",",
          "7733:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7734:             NULL, HFILL}",
          "7735:         },",
          "7736:         {&hf_btatt_last_name,",
          "7737:             {\"Last Name\", \"btatt.last_name\",",
          "7738:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7739:             NULL, HFILL}",
          "7740:         },",
          "7741:         {&hf_btatt_maximum_recommended_heart_rate,",
          "7742:             {\"Maximum Recommended Heart Rate\", \"btatt.maximum_recommended_heart_rate\",",
          "7743:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7744:             NULL, HFILL}",
          "7745:         },",
          "7746:         {&hf_btatt_resting_heart_rate,",
          "7747:             {\"Resting Heart Rate\", \"btatt.resting_heart_rate\",",
          "7748:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7749:             NULL, HFILL}",
          "7750:         },",
          "7751:         {&hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds,",
          "7752:             {\"Sport Type for Aerobic and Anaerobic Thresholds\", \"btatt.sport_type_for_aerobic_and_anaerobic_thresholds\",",
          "7753:             FT_UINT8, BASE_DEC, VALS(sport_type_for_aerobic_and_anaerobic_thresholds_vals), 0x0,",
          "7754:             NULL, HFILL}",
          "7755:         },",
          "7756:         {&hf_btatt_three_zone_heart_rate_limits_light_moderate,",
          "7757:             {\"Three zone Heart Rate Limits - Light (Fat burn) / Moderate (Aerobic) Limit\", \"btatt.three_zone_heart_rate_limits.light_moderate\",",
          "7758:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7759:             NULL, HFILL}",
          "7760:         },",
          "7761:         {&hf_btatt_three_zone_heart_rate_limits_moderate_hard,",
          "7762:             {\"Three zone Heart Rate Limits - Moderate (Aerobic) / Hard (Anaerobic) Limit\", \"btatt.three_zone_heart_rate_limits.moderate_hard\",",
          "7763:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7764:             NULL, HFILL}",
          "7765:         },",
          "7766:         {&hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness,",
          "7767:             {\"Two zone Heart Rate Limit - Fat burn / Fitness Limit\", \"btatt.two_zone_heart_rate_limit.fat_burn_fitness\",",
          "7768:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7769:             NULL, HFILL}",
          "7770:         },",
          "7771:         {&hf_btatt_vo2_max,",
          "7772:             {\"VO2 Max\", \"btatt.vo2_max\",",
          "7773:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7774:             NULL, HFILL}",
          "7775:         },",
          "7776:         {&hf_btatt_waist_circumference,",
          "7777:             {\"Waist Circumference\", \"btatt.waist_circumference\",",
          "7778:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7779:             NULL, HFILL}",
          "7780:         },",
          "7781:         {&hf_btatt_weight,",
          "7782:             {\"Weight\", \"btatt.weight\",",
          "7783:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7784:             NULL, HFILL}",
          "7785:         },",
          "7786:         {&hf_btatt_database_change_increment,",
          "7787:             {\"Database Change Increment\", \"btatt.database_change_increment\",",
          "7788:             FT_UINT32, BASE_DEC_HEX, NULL, 0x0,",
          "7789:             NULL, HFILL}",
          "7790:         },",
          "7791:         {&hf_btatt_user_index,",
          "7792:             {\"User Index\", \"btatt.user_index\",",
          "7793:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7794:             NULL, HFILL}",
          "7795:         },",
          "7796:         {&hf_btatt_magnetic_flux_density_x,",
          "7797:             {\"X\", \"btatt.hf_btatt_magnetic_flux_density.x\",",
          "7798:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "7799:             NULL, HFILL}",
          "7800:         },",
          "7801:         {&hf_btatt_magnetic_flux_density_y,",
          "7802:             {\"Y\", \"btatt.hf_btatt_magnetic_flux_density.y\",",
          "7803:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "7804:             NULL, HFILL}",
          "7805:         },",
          "7806:         {&hf_btatt_magnetic_flux_density_z,",
          "7807:             {\"Z\", \"btatt.hf_btatt_magnetic_flux_density.z\",",
          "7808:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "7809:             NULL, HFILL}",
          "7810:         },",
          "7811:         {&hf_btatt_language,",
          "7812:             {\"Language\", \"btatt.language\",",
          "7813:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "7814:             NULL, HFILL}",
          "7815:         },",
          "7816:         {&hf_btatt_barometric_pressure_trend,",
          "7817:             {\"Barometric Pressure Trend\", \"btatt.barometric_pressure_trend\",",
          "7818:             FT_UINT8, BASE_DEC, VALS(barometric_pressure_trend_vals), 0x0,",
          "7819:             NULL, HFILL}",
          "7820:         },",
          "7821:         {&hf_btatt_central_address_resolution,",
          "7822:             {\"Central Address Resolution\", \"btatt.central_address_resolution\",",
          "7823:             FT_UINT8, BASE_DEC, VALS(central_address_resolution_vals), 0x0,",
          "7824:             NULL, HFILL}",
          "7825:         },",
          "7826:         {&hf_btatt_cycling_power_feature,",
          "7827:             {\"Cycling Power Feature\", \"btatt.cycling_power_feature\",",
          "7828:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "7829:             NULL, HFILL}",
          "7830:         },",
          "7831:         {&hf_btatt_cycling_power_feature_reserved,",
          "7832:             {\"Reserved\", \"btatt.cycling_power_feature.reserved\",",
          "7833:             FT_UINT32, BASE_HEX, NULL, 0xFFF80000,",
          "7834:             NULL, HFILL}",
          "7835:         },",
          "7836:         {&hf_btatt_cycling_power_feature_factory_calibration_date,",
          "7837:             {\"Factory Calibration Date\", \"btatt.cycling_power_feature.factory_calibration_date\",",
          "7838:             FT_BOOLEAN, 32, NULL, 0x00040000,",
          "7839:             NULL, HFILL}",
          "7840:         },",
          "7841:         {&hf_btatt_cycling_power_feature_instantaneous_measurement_direction,",
          "7842:             {\"Instantaneous Measurement Direction\", \"btatt.cycling_power_feature.instantaneous_measurement_direction\",",
          "7843:             FT_BOOLEAN, 32, NULL, 0x00020000,",
          "7844:             NULL, HFILL}",
          "7845:         },",
          "7846:         {&hf_btatt_cycling_power_feature_sensor_measurement_context,",
          "7847:             {\"Sensor Measurement Context\", \"btatt.cycling_power_feature.sensor_measurement_context\",",
          "7848:             FT_UINT32, BASE_HEX, VALS(cycling_power_feature_sensor_measurement_context_vals), 0x00010000,",
          "7849:             NULL, HFILL}",
          "7850:         },",
          "7851:         {&hf_btatt_cycling_power_feature_span_length_adjustment,",
          "7852:             {\"Span Length Adjustment\", \"btatt.cycling_power_feature.span_length_adjustment\",",
          "7853:             FT_BOOLEAN, 32, NULL, 0x00008000,",
          "7854:             NULL, HFILL}",
          "7855:         },",
          "7856:         {&hf_btatt_cycling_power_feature_chain_weight_adjustment,",
          "7857:             {\"Chain Weight Adjustment\", \"btatt.cycling_power_feature.chain_weight_adjustment\",",
          "7858:             FT_BOOLEAN, 32, NULL, 0x00004000,",
          "7859:             NULL, HFILL}",
          "7860:         },",
          "7861:         {&hf_btatt_cycling_power_feature_chain_length_adjustment,",
          "7862:             {\"Chain Length Adjustment\", \"btatt.cycling_power_feature.chain_length_adjustment\",",
          "7863:             FT_BOOLEAN, 32, NULL, 0x00002000,",
          "7864:             NULL, HFILL}",
          "7865:         },",
          "7866:         {&hf_btatt_cycling_power_feature_crank_length_adjustment,",
          "7867:             {\"Crank Length Adjustment\", \"btatt.cycling_power_feature.crank_length_adjustment\",",
          "7868:             FT_BOOLEAN, 32, NULL, 0x00001000,",
          "7869:             NULL, HFILL}",
          "7870:         },",
          "7871:         {&hf_btatt_cycling_power_feature_multiple_sensor_locations,",
          "7872:             {\"Multiple Sensor Locations\", \"btatt.cycling_power_feature.multiple_sensor_locations\",",
          "7873:             FT_BOOLEAN, 32, NULL, 0x00000800,",
          "7874:             NULL, HFILL}",
          "7875:         },",
          "7876:         {&hf_btatt_cycling_power_feature_cycling_power_measurement_characteristic_content_masking,",
          "7877:             {\"Cycling Power Measurement Characteristic Content Masking\", \"btatt.cycling_power_feature.cycling_power_measurement_characteristic_content_masking\",",
          "7878:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "7879:             NULL, HFILL}",
          "7880:         },",
          "7881:         {&hf_btatt_cycling_power_feature_offset_compensation,",
          "7882:             {\"Offset Compensation\", \"btatt.cycling_power_feature.offset_compensation\",",
          "7883:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "7884:             NULL, HFILL}",
          "7885:         },",
          "7886:         {&hf_btatt_cycling_power_feature_offset_compensation_indicator,",
          "7887:             {\"Offset Compensation Indicator\", \"btatt.cycling_power_feature.offset_compensation_indicator\",",
          "7888:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "7889:             NULL, HFILL}",
          "7890:         },",
          "7891:         {&hf_btatt_cycling_power_feature_accumulated_energy,",
          "7892:             {\"Accumulated Energy\", \"btatt.cycling_power_feature.accumulated_energy\",",
          "7893:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "7894:             NULL, HFILL}",
          "7895:         },",
          "7896:         {&hf_btatt_cycling_power_feature_top_and_bottom_dead_spot_angles,",
          "7897:             {\"Top and Bottom Dead Spot Angles\", \"btatt.cycling_power_feature.top_and_bottom_dead_spot_angles\",",
          "7898:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "7899:             NULL, HFILL}",
          "7900:         },",
          "7901:         {&hf_btatt_cycling_power_feature_extreme_angles,",
          "7902:             {\"Extreme Angles\", \"btatt.cycling_power_feature.extreme_angles\",",
          "7903:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "7904:             NULL, HFILL}",
          "7905:         },",
          "7906:         {&hf_btatt_cycling_power_feature_extreme_magnitudes,",
          "7907:             {\"Extreme Magnitudes\", \"btatt.cycling_power_feature.extreme_magnitudes\",",
          "7908:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "7909:             NULL, HFILL}",
          "7910:         },",
          "7911:         {&hf_btatt_cycling_power_feature_crank_revolution_data,",
          "7912:             {\"Crank Revolution Data\", \"btatt.cycling_power_feature.crank_revolution_data\",",
          "7913:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "7914:             NULL, HFILL}",
          "7915:         },",
          "7916:         {&hf_btatt_cycling_power_feature_wheel_revolution_data,",
          "7917:             {\"Wheel Revolution Data\", \"btatt.cycling_power_feature.wheel_revolution_data\",",
          "7918:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "7919:             NULL, HFILL}",
          "7920:         },",
          "7921:         {&hf_btatt_cycling_power_feature_accumulated_torque,",
          "7922:             {\"Accumulated Torque\", \"btatt.cycling_power_feature.accumulated_torque\",",
          "7923:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "7924:             NULL, HFILL}",
          "7925:         },",
          "7926:         {&hf_btatt_cycling_power_feature_pedal_power_balance,",
          "7927:             {\"Pedal Power Balance\", \"btatt.cycling_power_feature.pedal_power_balance\",",
          "7928:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "7929:             NULL, HFILL}",
          "7930:         },",
          "7931:         {&hf_btatt_ln_feature,",
          "7932:             {\"LN Feature\", \"btatt.ln_feature\",",
          "7933:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "7934:             NULL, HFILL}",
          "7935:         },",
          "7936:         {&hf_btatt_ln_feature_reserved,",
          "7937:             {\"Reserved\", \"btatt.ln_feature.reserved\",",
          "7938:             FT_UINT32, BASE_HEX, NULL, 0xFFE00000,",
          "7939:             NULL, HFILL}",
          "7940:         },",
          "7941:         {&hf_btatt_ln_feature_position_status,",
          "7942:             {\"Position Status\", \"btatt.ln_feature.position_status\",",
          "7943:             FT_BOOLEAN, 32, NULL, 0x00100000,",
          "7944:             NULL, HFILL}",
          "7945:         },",
          "7946:         {&hf_btatt_ln_feature_elevation_setting,",
          "7947:             {\"Elevation Setting,\", \"btatt.ln_feature.elevation_setting\",",
          "7948:             FT_BOOLEAN, 32, NULL, 0x00080000,",
          "7949:             NULL, HFILL}",
          "7950:         },",
          "7951:         {&hf_btatt_ln_feature_fix_rate_setting,",
          "7952:             {\"Fix Rate Setting\", \"btatt.ln_feature.fix_rate_setting\",",
          "7953:             FT_BOOLEAN, 32, NULL, 0x00040000,",
          "7954:             NULL, HFILL}",
          "7955:         },",
          "7956:         {&hf_btatt_ln_feature_location_and_speed_characteristic_content_masking,",
          "7957:             {\"Location and Speed Characteristic Content Masking\", \"btatt.ln_feature.location_and_speed_characteristic_content_masking\",",
          "7958:             FT_BOOLEAN, 32, NULL, 0x00020000,",
          "7959:             NULL, HFILL}",
          "7960:         },",
          "7961:         {&hf_btatt_ln_feature_vertical_dilution_of_precision,",
          "7962:             {\"Vertical Dilution of Precision\", \"btatt.ln_feature.vertical_dilution_of_precision\",",
          "7963:             FT_BOOLEAN, 32, NULL, 0x00010000,",
          "7964:             NULL, HFILL}",
          "7965:         },",
          "7966:         {&hf_btatt_ln_feature_horizontal_dilution_of_precision,",
          "7967:             {\"Horizontal Dilution of Precision\", \"btatt.ln_feature.horizontal_dilution_of_precision\",",
          "7968:             FT_BOOLEAN, 32, NULL, 0x00008000,",
          "7969:             NULL, HFILL}",
          "7970:         },",
          "7971:         {&hf_btatt_ln_feature_estimated_vertical_position_error,",
          "7972:             {\"Estimated Vertical Position Error\", \"btatt.ln_feature.estimated_vertical_position_error\",",
          "7973:             FT_BOOLEAN, 32, NULL, 0x00004000,",
          "7974:             NULL, HFILL}",
          "7975:         },",
          "7976:         {&hf_btatt_ln_feature_estimated_horizontal_position_error,",
          "7977:             {\"Estimated Horizontal Position Error\", \"btatt.ln_feature.estimated_horizontal_position_error\",",
          "7978:             FT_BOOLEAN, 32, NULL, 0x00002000,",
          "7979:             NULL, HFILL}",
          "7980:         },",
          "7981:         {&hf_btatt_ln_feature_time_to_first_fix,",
          "7982:             {\"Time to First Fix\", \"btatt.ln_feature.time_to_first_fix\",",
          "7983:             FT_BOOLEAN, 32, NULL, 0x00001000,",
          "7984:             NULL, HFILL}",
          "7985:         },",
          "7986:         {&hf_btatt_ln_feature_number_of_beacons_in_view,",
          "7987:             {\"Number of Beacons in View\", \"btatt.ln_feature.number_of_beacons_in_view\",",
          "7988:             FT_BOOLEAN, 32, NULL, 0x00000800,",
          "7989:             NULL, HFILL}",
          "7990:         },",
          "7991:         {&hf_btatt_ln_feature_number_of_beacons_in_solution,",
          "7992:             {\"Number of Beacons in Solution\", \"btatt.ln_feature.number_of_beacons_in_solution\",",
          "7993:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "7994:             NULL, HFILL}",
          "7995:         },",
          "7996:         {&hf_btatt_ln_feature_estimated_time_of_arrival,",
          "7997:             {\"Estimated Time of Arrival\", \"btatt.ln_feature.estimated_time_of_arrival\",",
          "7998:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "7999:             NULL, HFILL}",
          "8000:         },",
          "8001:         {&hf_btatt_ln_feature_remaining_vertical_distance,",
          "8002:             {\"Remaining Vertical Distance\", \"btatt.ln_feature.remaining_vertical_distance\",",
          "8003:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "8004:             NULL, HFILL}",
          "8005:         },",
          "8006:         {&hf_btatt_ln_feature_remaining_distance,",
          "8007:             {\"Remaining Distance\", \"btatt.ln_feature.remaining_distance\",",
          "8008:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "8009:             NULL, HFILL}",
          "8010:         },",
          "8011:         {&hf_btatt_ln_feature_utc_time,",
          "8012:             {\"UTC Time\", \"btatt.ln_feature.utc_time\",",
          "8013:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "8014:             NULL, HFILL}",
          "8015:         },",
          "8016:         {&hf_btatt_ln_feature_rolling_time,",
          "8017:             {\"Rolling Time\", \"btatt.ln_feature.rolling_time\",",
          "8018:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "8019:             NULL, HFILL}",
          "8020:         },",
          "8021:         {&hf_btatt_ln_feature_heading,",
          "8022:             {\"Heading\", \"btatt.ln_feature.heading\",",
          "8023:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "8024:             NULL, HFILL}",
          "8025:         },",
          "8026:         {&hf_btatt_ln_feature_elevation,",
          "8027:             {\"Elevation\", \"btatt.ln_feature.elevation\",",
          "8028:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "8029:             NULL, HFILL}",
          "8030:         },",
          "8031:         {&hf_btatt_ln_feature_location,",
          "8032:             {\"Location\", \"btatt.ln_feature.location\",",
          "8033:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "8034:             NULL, HFILL}",
          "8035:         },",
          "8036:         {&hf_btatt_ln_feature_total_distance,",
          "8037:             {\"Total Distance\", \"btatt.ln_feature.total_distance\",",
          "8038:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "8039:             NULL, HFILL}",
          "8040:         },",
          "8041:         {&hf_btatt_ln_feature_instantaneous_speed,",
          "8042:             {\"Instantaneous Speed\", \"btatt.ln_feature.instantaneous_speed\",",
          "8043:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "8044:             NULL, HFILL}",
          "8045:         },",
          "8046:         {&hf_btatt_body_composition_feature,",
          "8047:             {\"Body Composition Feature\", \"btatt.body_composition_feature\",",
          "8048:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "8049:             NULL, HFILL}",
          "8050:         },",
          "8051:         {&hf_btatt_body_composition_feature_reserved,",
          "8052:             {\"Reserved\", \"btatt.body_composition_feature.reserved\",",
          "8053:             FT_UINT32, BASE_HEX, NULL, 0xFFFC0000,",
          "8054:             NULL, HFILL}",
          "8055:         },",
          "8056:         {&hf_btatt_body_composition_feature_height_measurement_resolution,",
          "8057:             {\"Height Measurement Resolution\", \"btatt.body_composition_feature.height_measurement_resolution\",",
          "8058:             FT_UINT32, BASE_HEX, VALS(body_composition_feature_height_measurement_resolution_vals), 0x00038000,",
          "8059:             NULL, HFILL}",
          "8060:         },",
          "8061:         {&hf_btatt_body_composition_feature_mass_measurement_resolution,",
          "8062:             {\"Mass Measurement Resolution\", \"btatt.body_composition_feature.mass_measurement_resolution\",",
          "8063:             FT_UINT32, BASE_HEX, VALS(body_composition_feature_mass_measurement_resolution_vals), 0x00007800,",
          "8064:             NULL, HFILL}",
          "8065:         },",
          "8066:         {&hf_btatt_body_composition_feature_height,",
          "8067:             {\"Height\", \"btatt.body_composition_feature.height\",",
          "8068:             FT_BOOLEAN, 32, NULL, 0x00000400,",
          "8069:             NULL, HFILL}",
          "8070:         },",
          "8071:         {&hf_btatt_body_composition_feature_weight,",
          "8072:             {\"Weight\", \"btatt.body_composition_feature.weight\",",
          "8073:             FT_BOOLEAN, 32, NULL, 0x00000200,",
          "8074:             NULL, HFILL}",
          "8075:         },",
          "8076:         {&hf_btatt_body_composition_feature_impedance,",
          "8077:             {\"Impedance\", \"btatt.body_composition_feature.impedance\",",
          "8078:             FT_BOOLEAN, 32, NULL, 0x00000100,",
          "8079:             NULL, HFILL}",
          "8080:         },",
          "8081:         {&hf_btatt_body_composition_feature_body_water_mass,",
          "8082:             {\"Body Water Mass\", \"btatt.body_composition_feature.body_water_mass\",",
          "8083:             FT_BOOLEAN, 32, NULL, 0x00000080,",
          "8084:             NULL, HFILL}",
          "8085:         },",
          "8086:         {&hf_btatt_body_composition_feature_soft_lean_mass,",
          "8087:             {\"Soft Lean Mass\", \"btatt.body_composition_feature.soft_lean_mass\",",
          "8088:             FT_BOOLEAN, 32, NULL, 0x00000040,",
          "8091:         {&hf_btatt_body_composition_feature_fat_free_mass,",
          "8092:             {\"Fat Free Mass\", \"btatt.body_composition_feature.fat_free_mass\",",
          "8093:             FT_BOOLEAN, 32, NULL, 0x00000020,",
          "8096:         {&hf_btatt_body_composition_feature_muscle_mass,",
          "8097:             {\"Muscle Mass\", \"btatt.body_composition_feature.muscle_mass\",",
          "8098:             FT_BOOLEAN, 32, NULL, 0x00000010,",
          "8101:         {&hf_btatt_body_composition_feature_muscle_percentage,",
          "8102:             {\"Muscle Percentage\", \"btatt.body_composition_feature.muscle_percentage\",",
          "8103:             FT_BOOLEAN, 32, NULL, 0x00000008,",
          "8106:         {&hf_btatt_body_composition_feature_basal_metabolism,",
          "8107:             {\"Basal Metabolism\", \"btatt.body_composition_feature.basal_metabolism\",",
          "8108:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "8111:         {&hf_btatt_body_composition_feature_multiple_users,",
          "8112:             {\"Multiple Users\", \"btatt.body_composition_feature.multiple_users\",",
          "8113:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "8116:         {&hf_btatt_body_composition_feature_timestamp,",
          "8117:             {\"Timestamp\", \"btatt.body_composition_feature.timestamp\",",
          "8118:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "8121:         {&hf_btatt_weight_scale_feature,",
          "8122:             {\"Body Composition Feature\", \"btatt.weight_scale_feature\",",
          "8123:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "8126:         {&hf_btatt_weight_scale_feature_reserved,",
          "8127:             {\"Reserved\", \"btatt.weight_scale_feature.reserved\",",
          "8128:             FT_UINT32, BASE_HEX, NULL, 0xFFFFFC00,",
          "8131:         {&hf_btatt_weight_scale_feature_height_measurement_resolution,",
          "8132:             {\"Height Measurement Resolution\", \"btatt.weight_scale_feature.height_measurement_resolution\",",
          "8133:             FT_UINT32, BASE_HEX, VALS(weight_scale_feature_height_measurement_resolution_vals), 0x00000380,",
          "8136:         {&hf_btatt_weight_scale_feature_weight_measurement_resolution,",
          "8137:             {\"Mass Measurement Resolution\", \"btatt.weight_scale_feature.weight_measurement_resolution\",",
          "8138:             FT_UINT32, BASE_HEX, VALS(weight_scale_feature_weight_measurement_resolution_vals), 0x000000078,",
          "8141:         {&hf_btatt_weight_scale_feature_bmi,",
          "8142:             {\"BMI\", \"btatt.weight_scale_feature.bmi\",",
          "8143:             FT_BOOLEAN, 32, NULL, 0x00000004,",
          "8146:         {&hf_btatt_weight_scale_feature_multiple_users,",
          "8147:             {\"Multiple Users\", \"btatt.weight_scale_feature.multiple_users\",",
          "8148:             FT_BOOLEAN, 32, NULL, 0x00000002,",
          "8151:         {&hf_btatt_weight_scale_feature_timestamp,",
          "8152:             {\"Timestamp\", \"btatt.weight_scale_feature.timestamp\",",
          "8153:             FT_BOOLEAN, 32, NULL, 0x00000001,",
          "8156:         {&hf_btatt_glucose_measurement_flags,",
          "8157:             {\"Flags\", \"btatt.glucose_measurement.flags\",",
          "8158:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8161:         {&hf_btatt_glucose_measurement_flags_reserved,",
          "8162:             {\"Reserved\", \"btatt.glucose_measurement.flags.reserved\",",
          "8163:             FT_UINT8, BASE_HEX, NULL, 0xE0,",
          "8166:         {&hf_btatt_glucose_measurement_flags_context_information_follows,",
          "8167:             {\"Context Information Follows\", \"btatt.glucose_measurement.flags.context_information_follows\",",
          "8168:             FT_BOOLEAN, 8, NULL, 0x10,",
          "8171:         {&hf_btatt_glucose_measurement_flags_sensor_status_annunciation_present,",
          "8172:             {\"Sensor Status Annunciation Present\", \"btatt.glucose_measurement.flags.sensor_status_annunciation_present\",",
          "8173:             FT_BOOLEAN, 8, NULL, 0x08,",
          "8176:         {&hf_btatt_glucose_measurement_flags_glucose_concentration_units,",
          "8177:             {\"Glucose Concentration Units\", \"btatt.glucose_measurement.flags.glucose_concentration_units\",",
          "8178:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_flags_glucose_concentration_units_vals), 0x04,",
          "8181:         {&hf_btatt_glucose_measurement_flags_glucose_concentration_type_and_sample_location_present,",
          "8182:             {\"Glucose Concentration, Type and Sample Location Present\", \"btatt.glucose_measurement.flags.glucose_concentration_type_and_sample_location_present\",",
          "8183:             FT_BOOLEAN, 8, NULL, 0x02,",
          "8186:         {&hf_btatt_glucose_measurement_flags_time_offset_present,",
          "8187:             {\"Time Offset Present\", \"btatt.glucose_measurement.flags.time_offset_present\",",
          "8188:             FT_BOOLEAN, 8, NULL, 0x01,",
          "8191:         {&hf_btatt_glucose_measurement_sequence_number,",
          "8192:             {\"Body Composition Feature\", \"btatt.glucose_measurement.sequence_number\",",
          "8193:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8196:         {&hf_btatt_glucose_measurement_base_time,",
          "8197:             {\"Base Time\", \"btatt.glucose_measurement.base_time\",",
          "8198:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "8201:         {&hf_btatt_glucose_measurement_time_offset,",
          "8202:             {\"Time Offset\", \"btatt.glucose_measurement.time_offset\",",
          "8203:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "8207:         {&hf_btatt_glucose_measurement_glucose_concentration_kg_per_l,",
          "8208:             {\"Glucose Concentration [kg/l]\", \"btatt.glucose_measurement.glucose_concentration.kg_per_l\",",
          "8209:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8213:         {&hf_btatt_glucose_measurement_glucose_concentration_mol_per_l,",
          "8214:             {\"Glucose Concentration [mol/l]\", \"btatt.glucose_measurement.glucose_concentration.mol_per_l\",",
          "8215:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8218:         {&hf_btatt_glucose_measurement_type_and_sample_location,",
          "8219:             {\"Glucose Concentration [mol/l]\", \"btatt.glucose_measurement.type_and_sample_location\",",
          "8220:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8223:         {&hf_btatt_glucose_measurement_type_and_sample_location_type,",
          "8224:             {\"Type\", \"btatt.glucose_measurement.type_and_sample_location.type\",",
          "8225:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_type_and_sample_location_type_vals), 0x0,",
          "8228:         {&hf_btatt_glucose_measurement_type_and_sample_location_sample_location,",
          "8229:             {\"Sample Location\", \"btatt.glucose_measurement.type_and_sample_location.sample_location\",",
          "8230:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_type_and_sample_location_sample_location_vals), 0x0,",
          "8233:         {&hf_btatt_glucose_measurement_sensor_status_annunciation,",
          "8234:             {\"Sensor Status Annunciation\", \"btatt.glucose_measurement.sensor_status_annunciation\",",
          "8238:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_reserved,",
          "8239:             {\"Reserved\", \"btatt.glucose_measurement.sensor_status_annunciation.reserved\",",
          "8240:             FT_UINT16, BASE_HEX, NULL, 0xF000,",
          "8243:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_time_fault,",
          "8244:             {\"Time fault has occurred in the sensor and time may be inaccurate\", \"btatt.glucose_measurement.sensor_status_annunciation.time_fault\",",
          "8245:             FT_BOOLEAN, 16, NULL, 0x0800,",
          "8248:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_general_fault,",
          "8249:             {\"General device fault has occurred in the sensor\", \"btatt.glucose_measurement.sensor_status_annunciation.general_fault\",",
          "8250:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "8253:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_read_interrupted,",
          "8254:             {\"Sensor read interrupted because strip was pulled too soon at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.read_interrupted\",",
          "8255:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "8258:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_temperature_too_low,",
          "8259:             {\"Sensor temperature too low for valid test/result at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.temperature_too_low\",",
          "8260:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "8263:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_temperature_too_high,",
          "8264:             {\"Sensor temperature too high for valid test/result at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.temperature_too_high\",",
          "8265:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "8268:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_result_too_lower,",
          "8269:             {\"Sensor result lower than the device can process\", \"btatt.glucose_measurement.sensor_status_annunciation.result_too_lower\",",
          "8270:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "8273:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_result_too_high,",
          "8274:             {\"Sensor result higher than the device can process\", \"btatt.glucose_measurement.sensor_status_annunciation.result_too_high\",",
          "8275:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "8278:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_strip_type_incorrect,",
          "8279:             {\"Strip type incorrect for device\", \"btatt.glucose_measurement.sensor_status_annunciation.strip_type_incorrect\",",
          "8280:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "8283:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_strip_insertion_error,",
          "8284:             {\"Strip insertion error\", \"btatt.glucose_measurement.sensor_status_annunciation.strip_insertion_error\",",
          "8285:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "8288:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_size_insufficient,",
          "8289:             {\"Sample size for blood or control solution insufficient at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.size_insufficient\",",
          "8290:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "8293:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_fault,",
          "8294:             {\"Sensor malfunction or faulting at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.fault\",",
          "8295:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "8296:             NULL, HFILL}",
          "8297:         },",
          "8298:         {&hf_btatt_glucose_measurement_sensor_status_annunciation_battery_low,",
          "8299:             {\"Device battery low at time of measurement\", \"btatt.glucose_measurement.sensor_status_annunciation.battery_low\",",
          "8300:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "8303:         {&hf_btatt_bond_management_feature,",
          "8304:             {\"Sensor Status Annunciation\", \"btatt.bond_management_feature\",",
          "8305:             FT_UINT24, BASE_HEX, NULL, 0x0,",
          "8308:         {&hf_btatt_bond_management_feature_feature_extension,",
          "8309:             {\"Feature Extension\", \"btatt.bond_management_feature.feature_extension\",",
          "8310:             FT_BOOLEAN, 24, NULL, 0x800000,",
          "8313:         {&hf_btatt_bond_management_feature_reserved,",
          "8314:             {\"Reserved\", \"btatt.bond_management_feature.reserved\",",
          "8315:             FT_UINT24, BASE_HEX, NULL, 0x780000,",
          "8318:         {&hf_btatt_bond_management_feature_identify_yourself,",
          "8319:             {\"Identify Yourself\", \"btatt.bond_management_feature.identify_yourself\",",
          "8320:             FT_BOOLEAN, 24, NULL, 0x040000,",
          "8323:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_9,",
          "8324:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.9\",",
          "8325:             FT_BOOLEAN, 24, NULL, 0x020000,",
          "8328:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_le_transport_only_server,",
          "8329:             {\"Remove all but the active bond on server (LE transport only)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_le_transport_only_server\",",
          "8330:             FT_BOOLEAN, 24, NULL, 0x010000,",
          "8333:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_8,",
          "8334:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.8\",",
          "8335:             FT_BOOLEAN, 24, NULL, 0x008000,",
          "8338:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_br_edr_transport_only_server,",
          "8339:             {\"Remove all but the active bond on server (BR/EDR transport only)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_br_edr_transport_only_server\",",
          "8340:             FT_BOOLEAN, 24, NULL, 0x004000,",
          "8343:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_7,",
          "8344:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.7\",",
          "8345:             FT_BOOLEAN, 24, NULL, 0x002000,",
          "8348:         {&hf_btatt_bond_management_feature_remove_all_but_the_active_bond_on_br_edr_and_le_server,",
          "8349:             {\"Remove all but the active bond on server (BR/EDR and LE)\", \"btatt.bond_management_feature.remove_all_but_the_active_bond_on_br_edr_and_le_server\",",
          "8350:             FT_BOOLEAN, 24, NULL, 0x001000,",
          "8353:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_6,",
          "8354:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.6\",",
          "8355:             FT_BOOLEAN, 24, NULL, 0x000800,",
          "8358:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_le_transport_only_server,",
          "8359:             {\"Remove all bonds on server (LE transport only)\", \"btatt.bond_management_feature.remove_all_bonds_on_le_transport_only_server\",",
          "8360:             FT_BOOLEAN, 24, NULL, 0x000400,",
          "8363:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_5,",
          "8364:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.5\",",
          "8365:             FT_BOOLEAN, 24, NULL, 0x000200,",
          "8368:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_br_edr_transport_only_server,",
          "8369:             {\"Remove all bonds on server (BR/EDR transport only)\", \"btatt.bond_management_feature.remove_all_bonds_on_br_edr_transport_only_server\",",
          "8370:             FT_BOOLEAN, 24, NULL, 0x000100,",
          "8373:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_4,",
          "8374:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.4\",",
          "8375:             FT_BOOLEAN, 24, NULL, 0x000080,",
          "8378:         {&hf_btatt_bond_management_feature_remove_all_bonds_on_br_edr_and_le_server,",
          "8379:             {\"Remove all bonds on server (BR/EDR and LE)\", \"btatt.bond_management_feature.remove_all_bonds_on_br_edr_and_le_server\",",
          "8380:             FT_BOOLEAN, 24, NULL, 0x000040,",
          "8383:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_3,",
          "8384:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.3\",",
          "8385:             FT_BOOLEAN, 24, NULL, 0x000020,",
          "8388:         {&hf_btatt_bond_management_feature_delete_bond_of_current_le_transport_only_connection,",
          "8389:             {\"Delete bond of current connection (LE transport only)\", \"btatt.bond_management_feature.delete_bond_of_current_le_transport_only_connection\",",
          "8390:             FT_BOOLEAN, 24, NULL, 0x000010,",
          "8393:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_2,",
          "8394:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.2\",",
          "8395:             FT_BOOLEAN, 24, NULL, 0x000008,",
          "8398:         {&hf_btatt_bond_management_feature_delete_bond_of_current_br_edr_transport_only_connection,",
          "8399:             {\"Delete bond of current connection (BR/EDR transport only)\", \"btatt.bond_management_feature.delete_bond_of_current_br_edr_transport_only_connection\",",
          "8400:             FT_BOOLEAN, 24, NULL, 0x000004,",
          "8403:         {&hf_btatt_bond_management_feature_authorization_code_required_for_feature_above_1,",
          "8404:             {\"Authorization Code Required for Feature Above\", \"btatt.bond_management_feature.authorization_code_required_for_feature_above.1\",",
          "8405:             FT_BOOLEAN, 24, NULL, 0x000002,",
          "8408:         {&hf_btatt_bond_management_feature_delete_bond_of_current_br_edr_and_le_connection,",
          "8409:             {\"Delete Bond of current connection (BR/EDR and LE)\", \"btatt.bond_management_feature.delete_bond_of_current_br_edr_and_le_connection\",",
          "8410:             FT_BOOLEAN, 24, NULL, 0x000001,",
          "8413:         {&hf_btatt_bond_management_feature_nth,",
          "8414:             {\"Extended Features\", \"btatt.bond_management_feature.nth\",",
          "8415:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8418:         {&hf_btatt_bond_management_feature_nth_feature_extension,",
          "8419:             {\"Feature Extension\", \"btatt.bond_management_feature.nth.feature_extension\",",
          "8420:             FT_BOOLEAN, 8, NULL, 0x80,",
          "8423:         {&hf_btatt_bond_management_feature_nth_reserved,",
          "8424:             {\"Reserved\", \"btatt.bond_management_feature.nth.reserved\",",
          "8425:             FT_UINT8, BASE_HEX, NULL, 0x7F,",
          "8428:         {&hf_btatt_bond_management_control_point_opcode,",
          "8429:             {\"Opcode\", \"btatt.bond_management_control_point.opcode\",",
          "8430:             FT_UINT8, BASE_HEX, VALS(bond_management_control_point_opcode_vals), 0x0,",
          "8433:         {&hf_btatt_bond_management_control_point_authorization_code,",
          "8434:             {\"Authorization Code\", \"btatt.bond_management_control_point.authorization_code\",",
          "8438:         {&hf_btatt_temperature_measurement_flags,",
          "8439:             {\"Sensor Status Annunciation\", \"btatt.temperature_measurement.flags\",",
          "8440:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8443:         {&hf_btatt_temperature_measurement_flags_reserved,",
          "8444:             {\"Reserved\", \"btatt.temperature_measurement.flags.reserved\",",
          "8445:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "8448:         {&hf_btatt_temperature_measurement_flags_temperature_type,",
          "8449:             {\"Temperature Type\", \"btatt.temperature_measurement.flags.temperature_type\",",
          "8450:             FT_BOOLEAN, 8, NULL, 0x04,",
          "8453:         {&hf_btatt_temperature_measurement_flags_timestamp,",
          "8454:             {\"Timestamp\", \"btatt.temperature_measurement.flags.timestamp\",",
          "8455:             FT_BOOLEAN, 8, NULL, 0x02,",
          "8458:         {&hf_btatt_temperature_measurement_flags_temperature_unit,",
          "8459:             {\"Temperature Unit\", \"btatt.temperature_measurement.flags.temperature_unit\",",
          "8460:             FT_UINT8, BASE_HEX, VALS(temperature_measurement_flags_temperature_unit_vals), 0x01,",
          "8464:         {&hf_btatt_temperature_measurement_value_celsius,",
          "8465:             {\"Value [Celsius]\", \"btatt.temperature_measurement.value.celsius\",",
          "8466:             FT_UINT32, BASE_HEX, NULL, 0x00,",
          "8470:         {&hf_btatt_temperature_measurement_value_fahrenheit,",
          "8471:             {\"Value [Fahrenheit]\", \"btatt.temperature_measurement.value.fahrenheit\",",
          "8472:             FT_UINT32, BASE_HEX, NULL, 0x00,",
          "8475:         {&hf_btatt_temperature_measurement_timestamp,",
          "8476:             {\"Timestamp\", \"btatt.temperature_measurement.timestamp\",",
          "8477:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "8480:         {&hf_btatt_glucose_measurement_context_flags,",
          "8481:             {\"Glucose Measurement Context\", \"btatt.glucose_measurement_context.flags\",",
          "8482:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8485:         {&hf_btatt_glucose_measurement_context_flags_extended_flags,",
          "8486:             {\"Extended Flags\", \"btatt.glucose_measurement_context.flags.extended_flags\",",
          "8487:             FT_BOOLEAN, 8, NULL, 0x80,",
          "8490:         {&hf_btatt_glucose_measurement_context_flags_hba1c,",
          "8491:             {\"HbA1c\", \"btatt.glucose_measurement_context.flags.hba1c\",",
          "8492:             FT_BOOLEAN, 8, NULL, 0x40,",
          "8495:         {&hf_btatt_glucose_measurement_context_flags_medication_value_units,",
          "8496:             {\"Medication Value Units\", \"btatt.glucose_measurement_context.flags.medication_value_units\",",
          "8497:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_flags_medication_value_units_vals), 0x20,",
          "8500:         {&hf_btatt_glucose_measurement_context_flags_medication_id_and_medication,",
          "8501:             {\"Medication ID And Medication\", \"btatt.glucose_measurement_context.flags.\",",
          "8502:             FT_BOOLEAN, 8, NULL, 0x10,",
          "8505:         {&hf_btatt_glucose_measurement_context_flags_exercise_duration_and_exercise_intensity,",
          "8506:             {\"Exercise Duration And Exercise Intensity\", \"btatt.glucose_measurement_context.flags.\",",
          "8507:             FT_BOOLEAN, 8, NULL, 0x08,",
          "8508:             NULL, HFILL}",
          "8510:         {&hf_btatt_glucose_measurement_context_flags_tester_health,",
          "8511:             {\"Tester Health\", \"btatt.glucose_measurement_context.flags.\",",
          "8512:             FT_BOOLEAN, 8, NULL, 0x04,",
          "8515:         {&hf_btatt_glucose_measurement_context_flags_meal,",
          "8516:             {\"Meal\", \"btatt.glucose_measurement_context.flags.\",",
          "8517:             FT_BOOLEAN, 8, NULL, 0x02,",
          "8520:         {&hf_btatt_glucose_measurement_context_flags_carbohydrate_id_and_carbohydrate,",
          "8521:             {\"Carbohydrate ID And Carbohydrate\", \"btatt.glucose_measurement_context.flags.\",",
          "8522:             FT_BOOLEAN, 8, NULL, 0x01,",
          "8525:         {&hf_btatt_glucose_measurement_context_sequence_number,",
          "8526:             {\"Sequence Number\", \"btatt.glucose_measurement_context.sequence_number\",",
          "8530:         {&hf_btatt_glucose_measurement_context_extended_flags,",
          "8531:             {\"Extended Flags\", \"btatt.glucose_measurement_context.extended_flags\",",
          "8532:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8535:         {&hf_btatt_glucose_measurement_context_extended_flags_reserved,",
          "8536:             {\"Reserved\", \"btatt.glucose_measurement_context.extended_flags.reserved\",",
          "8537:             FT_UINT8, BASE_HEX, NULL, 0xFF,",
          "8540:         {&hf_btatt_glucose_measurement_context_carbohydrate_id,",
          "8541:             {\"Carbohydrate ID\", \"btatt.glucose_measurement_context.carbohydrate_id\",",
          "8542:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_carbohydrate_id_vals), 0x0,",
          "8546:         {&hf_btatt_glucose_measurement_context_carbohydrate_kg,",
          "8547:             {\"Carbohydrate [kg]\", \"btatt.glucose_measurement_context.carbohydrate.kg\",",
          "8548:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8551:         {&hf_btatt_glucose_measurement_context_meal,",
          "8552:             {\"Meal\", \"btatt.glucose_measurement_context.meal\",",
          "8553:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_meal_vals), 0x0,",
          "8556:         {&hf_btatt_glucose_measurement_context_tester_health,",
          "8557:             {\"Tester and Health\", \"btatt.glucose_measurement_context.tester_and_health\",",
          "8558:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8561:         {&hf_btatt_glucose_measurement_context_tester,",
          "8562:             {\"Tester\", \"btatt.glucose_measurement_context.tester_and_health.tester\",",
          "8563:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_tester_vals), 0xF0,",
          "8566:         {&hf_btatt_glucose_measurement_context_health,",
          "8567:             {\"Health\", \"btatt.glucose_measurement_context.tester_and_health.health\",",
          "8568:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_health_vals), 0x0F,",
          "8571:         {&hf_btatt_glucose_measurement_context_exercise_duration,",
          "8572:             {\"Exercise Duration\", \"btatt.glucose_measurement_context.exercise_duration\",",
          "8573:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8576:         {&hf_btatt_glucose_measurement_context_exercise_intensity,",
          "8577:             {\"Exercise Intensity\", \"btatt.glucose_measurement_context.exercise_intensity\",",
          "8581:         {&hf_btatt_glucose_measurement_context_medication_id,",
          "8582:             {\"Medication ID\", \"btatt.glucose_measurement_context.medication_id\",",
          "8583:             FT_UINT8, BASE_HEX, VALS(glucose_measurement_context_medication_id_vals), 0x0,",
          "8587:         {&hf_btatt_glucose_measurement_context_medication_l,",
          "8588:             {\"Medication [l]\", \"btatt.glucose_measurement_context.medication.l\",",
          "8589:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8593:         {&hf_btatt_glucose_measurement_context_medication_kg,",
          "8594:             {\"Medication [kg]\", \"btatt.glucose_measurement_context.medication.kg\",",
          "8595:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8599:         {&hf_btatt_glucose_measurement_context_hba1c,",
          "8600:             {\"HbA1c\", \"btatt.glucose_measurement_context.hba1c\",",
          "8601:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8604:         {&hf_btatt_blood_pressure_measurement_flags,",
          "8605:             {\"Flags\", \"btatt.blood_pressure_measurement.flags\",",
          "8606:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8609:         {&hf_btatt_blood_pressure_measurement_flags_reserved,",
          "8610:             {\"Reserved\", \"btatt.blood_pressure_measurement.flags.reserved\",",
          "8611:             FT_UINT8, BASE_HEX, NULL, 0xE0,",
          "8614:         {&hf_btatt_blood_pressure_measurement_flags_measurement_status,",
          "8615:             {\"Measurement Status\", \"btatt.blood_pressure_measurement.flags.measurement_status\",",
          "8616:             FT_BOOLEAN, 8, NULL, 0x10,",
          "8619:         {&hf_btatt_blood_pressure_measurement_flags_user_id,",
          "8620:             {\"User ID\", \"btatt.blood_pressure_measurement.flags.user_id\",",
          "8621:             FT_BOOLEAN, 8, NULL, 0x08,",
          "8624:         {&hf_btatt_blood_pressure_measurement_flags_pulse_rate,",
          "8625:             {\"Pulse Rate\", \"btatt.blood_pressure_measurement.flags.pulse_rate\",",
          "8626:             FT_BOOLEAN, 8, NULL, 0x04,",
          "8629:         {&hf_btatt_blood_pressure_measurement_flags_timestamp,",
          "8630:             {\"Timestamp\", \"btatt.blood_pressure_measurement.flags.timestamp\",",
          "8631:             FT_BOOLEAN, 8, NULL, 0x02,",
          "8634:         {&hf_btatt_blood_pressure_measurement_flags_unit,",
          "8635:             {\"Unit\", \"btatt.blood_pressure_measurement.flags.unit\",",
          "8636:             FT_UINT8, BASE_HEX, VALS(blood_pressure_measurement_unit_vals), 0x01,",
          "8640:         {&hf_btatt_blood_pressure_measurement_compound_value_systolic_kpa,",
          "8641:             {\"Systolic [kPa]\", \"btatt.blood_pressure_measurement.compound_value.systolic.kpa\",",
          "8642:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8646:         {&hf_btatt_blood_pressure_measurement_compound_value_diastolic_kpa,",
          "8647:             {\"Diastolic [kPa]\", \"btatt.blood_pressure_measurement.compound_value.diastolic.kpa\",",
          "8648:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8652:         {&hf_btatt_blood_pressure_measurement_compound_value_mean_arterial_pressure_kpa,",
          "8653:             {\"Arterial Pressure [kPa]\", \"btatt.blood_pressure_measurement.compound_value.arterial_pressure.kpa\",",
          "8654:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8658:         {&hf_btatt_blood_pressure_measurement_compound_value_systolic_mmhg,",
          "8659:             {\"Systolic [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.systolic.mmhg\",",
          "8660:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8664:         {&hf_btatt_blood_pressure_measurement_compound_value_diastolic_mmhg,",
          "8665:             {\"Diastolic [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.diastolic.mmhg\",",
          "8666:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8670:         {&hf_btatt_blood_pressure_measurement_compound_value_mean_arterial_pressure_mmhg,",
          "8671:             {\"Arterial Pressure [mmHg]\", \"btatt.blood_pressure_measurement.compound_value.arterial_pressure.mmhg\",",
          "8672:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8675:         {&hf_btatt_blood_pressure_measurement_timestamp,",
          "8676:             {\"Timestamp\", \"btatt.blood_pressure_measurement.compound_value.timestamp\",",
          "8677:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "8681:         {&hf_btatt_blood_pressure_measurement_pulse_rate,",
          "8682:             {\"Pulse Rate\", \"btatt.blood_pressure_measurement.pulse_rate\",",
          "8683:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8686:         {&hf_btatt_blood_pressure_measurement_user_id,",
          "8687:             {\"User ID\", \"btatt.blood_pressure_measurement.user_id\",",
          "8691:         {&hf_btatt_blood_pressure_measurement_status,",
          "8692:             {\"Flags\", \"btatt.blood_pressure_measurement.status\",",
          "8693:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8696:         {&hf_btatt_blood_pressure_measurement_status_reserved,",
          "8697:             {\"Reserved\", \"btatt.blood_pressure_measurement.status.reserved\",",
          "8698:             FT_UINT16, BASE_HEX, NULL, 0xFFC0,",
          "8701:         {&hf_btatt_blood_pressure_measurement_status_improper_measurement_position,",
          "8702:             {\"Improper Measurement Position\", \"btatt.blood_pressure_measurement.status.improper_measurement_position\",",
          "8703:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "8706:         {&hf_btatt_blood_pressure_measurement_status_pulse_rate_range_detection,",
          "8707:             {\"Pulse_Rate Range Detection\", \"btatt.blood_pressure_measurement.status.pulse_rate_range_detection\",",
          "8708:             FT_UINT16, BASE_HEX, VALS(blood_pressure_measurement_status_pulse_rate_range_detection_vals), 0x0018,",
          "8711:         {&hf_btatt_blood_pressure_measurement_status_irregular_pulse,",
          "8712:             {\"Irregular Pulse\", \"btatt.blood_pressure_measurement.status.irregular_pulse\",",
          "8713:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "8716:         {&hf_btatt_blood_pressure_measurement_status_cuff_fit_too_loose,",
          "8717:             {\"Cuff Fit too Loose\", \"btatt.blood_pressure_measurement.status.cuff_fit_too_loose\",",
          "8718:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "8721:         {&hf_btatt_blood_pressure_measurement_status_body_movement,",
          "8722:             {\"Body Movement\", \"btatt.blood_pressure_measurement.status.body_movement\",",
          "8723:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "8726:         {&hf_btatt_heart_rate_measurement_flags,",
          "8727:             {\"Flags\", \"btatt.heart_rate_measurement.flags\",",
          "8728:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "8731:         {&hf_btatt_heart_rate_measurement_flags_reserved,",
          "8732:             {\"Reserved\", \"btatt.heart_rate_measurement.flags.reserved\",",
          "8733:             FT_UINT16, BASE_HEX, NULL, 0xE0,",
          "8736:         {&hf_btatt_heart_rate_measurement_flags_rr_interval,",
          "8737:             {\"RR Interval\", \"btatt.heart_rate_measurement.flags.rr_interval\",",
          "8738:             FT_BOOLEAN, 16, NULL, 0x10,",
          "8741:         {&hf_btatt_heart_rate_measurement_flags_energy_expended,",
          "8742:             {\"Energy Expended\", \"btatt.heart_rate_measurement.flags.energy_expended\",",
          "8743:             FT_BOOLEAN, 16, NULL, 0x08,",
          "8746:         {&hf_btatt_heart_rate_measurement_flags_sensor_contact_status_support,",
          "8747:             {\"Sensor Support\", \"btatt.heart_rate_measurement.flags.sensor_contact_status.support\",",
          "8748:             FT_BOOLEAN, 16, NULL, 0x04,",
          "8751:         {&hf_btatt_heart_rate_measurement_flags_sensor_contact_status_contact,",
          "8752:             {\"Sensor Contact\", \"btatt.heart_rate_measurement.flags.sensor_contact_status.contact\",",
          "8753:             FT_BOOLEAN, 16, NULL, 0x02,",
          "8756:         {&hf_btatt_heart_rate_measurement_flags_value_16,",
          "8757:             {\"Value is UINT16\", \"btatt.heart_rate_measurement.flags.value_16\",",
          "8758:             FT_BOOLEAN, 16, NULL, 0x01,",
          "8761:         {&hf_btatt_heart_rate_measurement_value_8,",
          "8762:             {\"Value\", \"btatt.heart_rate_measurement.value.8\",",
          "8763:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "8766:         {&hf_btatt_heart_rate_measurement_value_16,",
          "8767:             {\"Value\", \"btatt.heart_rate_measurement.value.16\",",
          "8768:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8771:         {&hf_btatt_heart_rate_measurement_energy_expended,",
          "8772:             {\"Energy Expended\", \"btatt.heart_rate_measurement.energy_expended\",",
          "8773:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8776:         {&hf_btatt_heart_rate_measurement_rr_interval,",
          "8777:             {\"RR Interval\", \"btatt.heart_rate_measurement.rr_interval\",",
          "8778:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8781:         {&hf_btatt_record_access_control_point_opcode,",
          "8782:             {\"Opcode\", \"btatt.record_access_control_point.opcode\",",
          "8783:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_opcode_vals), 0x0,",
          "8786:         {&hf_btatt_record_access_control_point_operator,",
          "8787:             {\"Operator\", \"btatt.record_access_control_point.operator\",",
          "8788:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_operator_vals), 0x0,",
          "8791:         {&hf_btatt_record_access_control_point_operand,",
          "8792:             {\"Operand\", \"btatt.record_access_control_point.operand\",",
          "8793:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "8796:         {&hf_btatt_record_access_control_point_operand_filter_type,",
          "8797:             {\"Filter Type\", \"btatt.record_access_control_point.operand.filter_type\",",
          "8798:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_operand_filter_type_vals), 0x0,",
          "8801:         {&hf_btatt_record_access_control_point_operand_min_time_offset,",
          "8802:             {\"Min Time Offset\", \"btatt.record_access_control_point_operand.min_time_offset\",",
          "8803:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8806:         {&hf_btatt_record_access_control_point_operand_max_time_offset,",
          "8807:             {\"Max Time Offset\", \"btatt.record_access_control_point_operand.max_time_offset\",",
          "8808:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8811:         {&hf_btatt_record_access_control_point_operand_number_of_records,",
          "8812:             {\"Number of Records\", \"btatt.record_access_control_point_operand.number_of_records\",",
          "8813:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8816:         {&hf_btatt_record_access_control_point_request_opcode,",
          "8817:             {\"Request Opcode\", \"btatt.record_access_control_point.request_opcode\",",
          "8818:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_opcode_vals), 0x0,",
          "8821:         {&hf_btatt_record_access_control_point_response_code,",
          "8822:             {\"Request Opcode\", \"btatt.record_access_control_point.response_code\",",
          "8823:             FT_UINT8, BASE_DEC, VALS(record_access_control_point_response_code_vals), 0x0,",
          "8826:         {&hf_btatt_value_trigger_setting_condition,",
          "8827:             {\"Condition\", \"btatt.value_trigger_setting.condition\",",
          "8828:             FT_UINT8, BASE_DEC, VALS(value_trigger_setting_condition_vals), 0x0,",
          "8831:         {&hf_btatt_value_trigger_setting_analog,",
          "8832:             {\"Analog\", \"btatt.value_trigger_setting.analog\",",
          "8833:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8836:         {&hf_btatt_value_trigger_setting_analog_one,",
          "8837:             {\"Analog One\", \"btatt.value_trigger_setting.analog_one\",",
          "8838:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8841:         {&hf_btatt_value_trigger_setting_analog_two,",
          "8842:             {\"Analog Two\", \"btatt.value_trigger_setting.analog_two\",",
          "8843:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8846:         {&hf_btatt_digital,",
          "8847:             {\"Digital\", \"btatt.digital\",",
          "8848:             FT_UINT8, BASE_DEC, VALS(digital_vals), 0x0,",
          "8851:         {&hf_btatt_analog,",
          "8852:             {\"Analog\", \"btatt.analog\",",
          "8853:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8856:         {&hf_btatt_location_name,",
          "8857:             {\"Location Name\", \"btatt.location_name\",",
          "8861:         {&hf_btatt_uncertainty,",
          "8862:             {\"Uncertainty\", \"btatt.uncertainty\",",
          "8863:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8866:         {&hf_btatt_uncertainty_reserved,",
          "8867:             {\"Reserved\", \"btatt.uncertainty.reserved\",",
          "8868:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "8871:         {&hf_btatt_uncertainty_precision,",
          "8872:             {\"Precision\", \"btatt.uncertainty.precision\",",
          "8873:             FT_UINT8, BASE_HEX, VALS(uncertainty_precision_vals), 0x70,",
          "8876:         {&hf_btatt_uncertainty_update_time,",
          "8877:             {\"Update Time\", \"btatt.uncertainty.update_time\",",
          "8878:             FT_UINT8, BASE_HEX, VALS(uncertainty_update_time_vals), 0x0E,",
          "8881:         {&hf_btatt_uncertainty_stationary,",
          "8882:             {\"Stationary\", \"btatt.uncertainty.stationary\",",
          "8883:             FT_UINT8, BASE_HEX, VALS(uncertainty_stationary_vals), 0x01,",
          "8886:         {&hf_btatt_latitude,",
          "8887:             {\"Latitude\", \"btatt.latitude\",",
          "8888:             FT_INT32, BASE_DEC, NULL, 0x0,",
          "8891:         {&hf_btatt_longitude,",
          "8892:             {\"Longitude\", \"btatt.longitude\",",
          "8893:             FT_INT32, BASE_DEC, NULL, 0x0,",
          "8896:         {&hf_btatt_local_north_coordinate,",
          "8897:             {\"Local North Coordinate\", \"btatt.local_north_coordinate\",",
          "8898:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "8901:         {&hf_btatt_local_east_coordinate,",
          "8902:             {\"Local East Coordinate\", \"btatt.local_east_coordinate\",",
          "8903:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "8906:         {&hf_btatt_floor_number,",
          "8907:             {\"Floor Number\", \"btatt.floor_number\",",
          "8908:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "8911:         {&hf_btatt_altitude,",
          "8912:             {\"Altitude\", \"btatt.altitude\",",
          "8913:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8916:         {&hf_btatt_indoor_positioning_configuration,",
          "8917:             {\"Indoor Positioning Configuration\", \"btatt.indoor_positioning_configuration\",",
          "8918:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8919:             NULL, HFILL}",
          "8921:         {&hf_btatt_indoor_positioning_configuration_reserved,",
          "8922:             {\"Reserved\", \"btatt.indoor_positioning_configuration.reserved\",",
          "8923:             FT_UINT8, BASE_HEX, NULL, 0xC0,",
          "8924:             NULL, HFILL}",
          "8926:         {&hf_btatt_indoor_positioning_configuration_location_name,",
          "8927:             {\"Location Name\", \"btatt.indoor_positioning_configuration.location_name\",",
          "8928:             FT_BOOLEAN, 8, NULL, 0x20,",
          "8929:             NULL, HFILL}",
          "8931:         {&hf_btatt_indoor_positioning_configuration_floor_number,",
          "8932:             {\"Floor Number\", \"btatt.indoor_positioning_configuration.floor_number\",",
          "8933:             FT_BOOLEAN, 8, NULL, 0x10,",
          "8934:             NULL, HFILL}",
          "8936:         {&hf_btatt_indoor_positioning_configuration_altitude,",
          "8937:             {\"Altitude\", \"btatt.indoor_positioning_configuration.altitude\",",
          "8938:             FT_BOOLEAN, 8, NULL, 0x08,",
          "8939:             NULL, HFILL}",
          "8941:         {&hf_btatt_indoor_positioning_configuration_tx_power,",
          "8942:             {\"Tx Power\", \"btatt.indoor_positioning_configuration.tx_power\",",
          "8943:             FT_BOOLEAN, 8, NULL, 0x04,",
          "8946:         {&hf_btatt_indoor_positioning_configuration_coordinate_system_used_in_advertising_packets,",
          "8947:             {\"Coordinate System Used in Advertising Packets\", \"btatt.indoor_positioning_configuration.coordinate_system_used_in_advertising_packets\",",
          "8948:             FT_UINT8, BASE_HEX, VALS(indoor_positioning_configuration_coordinate_system_used_in_advertising_packets_vals), 0x02,",
          "8951:         {&hf_btatt_indoor_positioning_configuration_coordinates,",
          "8952:             {\"Coordinates\", \"btatt.indoor_positioning_configuration.coordinates\",",
          "8953:             FT_BOOLEAN, 8, NULL, 0x01,",
          "8956:         {&hf_btatt_number_of_digitals,",
          "8957:             {\"Number of Digitals\", \"btatt.number_of_digitals\",",
          "8958:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "8961:         {&hf_btatt_time_trigger_setting_condition,",
          "8962:             {\"Condition\", \"btatt.time_trigger_setting.condition\",",
          "8963:             FT_UINT8, BASE_HEX, VALS(time_trigger_setting_condition_vals), 0x0,",
          "8966:         {&hf_btatt_time_trigger_setting_value,",
          "8967:             {\"Value\", \"btatt.time_trigger_setting.value\",",
          "8968:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "8971:         {&hf_btatt_time_trigger_setting_value_count,",
          "8972:             {\"Count\", \"btatt.time_trigger_setting.count\",",
          "8973:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "8976:         {&hf_btatt_time_trigger_setting_value_time_interval,",
          "8977:             {\"Time Interval\", \"btatt.time_trigger_setting.time_interval\",",
          "8978:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "8981:         {&hf_btatt_rsc_measurement_flags,",
          "8982:             {\"Flags\", \"btatt.rsc_measurement.flags\",",
          "8983:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "8986:         {&hf_btatt_rsc_measurement_flags_reserved,",
          "8987:             {\"Reserved\", \"btatt.rsc_measurement.flags.reserved\",",
          "8988:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "8991:         {&hf_btatt_rsc_measurement_flags_type_of_movement,",
          "8992:             {\"Type of Movement\", \"btatt.rsc_measurement.flags.type_of_movement\",",
          "8993:             FT_UINT8, BASE_HEX, VALS(rsc_measurement_flags_type_of_movement_vals), 0x04,",
          "8996:         {&hf_btatt_rsc_measurement_flags_total_distance_present,",
          "8997:             {\"Total Distance Present\", \"btatt.rsc_measurement.flags.total_distance_present\",",
          "8998:             FT_BOOLEAN, 8, NULL, 0x02,",
          "9001:         {&hf_btatt_rsc_measurement_flags_instantaneous_stride_length_present,",
          "9002:             {\"Instantaneous Stride Length Present\", \"btatt.rsc_measurement.flags.instantaneous_stride_length_present\",",
          "9003:             FT_BOOLEAN, 8, NULL, 0x01,",
          "9006:         {&hf_btatt_rsc_measurement_instantaneous_speed,",
          "9007:             {\"Instantaneous Speed\", \"btatt.rsc_measurement.instantaneous_speed\",",
          "9008:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9011:         {&hf_btatt_rsc_measurement_instantaneous_cadence,",
          "9012:             {\"Instantaneous Cadence\", \"btatt.rsc_measurement.instantaneous_cadence\",",
          "9013:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9016:         {&hf_btatt_rsc_measurement_instantaneous_stride_length,",
          "9017:             {\"Instantaneous Stride Length\", \"btatt.rsc_measurement.instantaneous_stride_length\",",
          "9018:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9021:         {&hf_btatt_rsc_measurement_total_distance,",
          "9022:             {\"Total Distance\", \"btatt.rsc_measurement.total_distance\",",
          "9023:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9026:         {&hf_btatt_sc_control_point_opcode,",
          "9027:             {\"Opcode\", \"btatt.sc_control_point.opcode\",",
          "9028:             FT_UINT8, BASE_HEX, VALS(sc_control_point_opcode_vals), 0x0,",
          "9031:         {&hf_btatt_sc_control_point_request_opcode,",
          "9032:             {\"Request Opcode\", \"btatt.sc_control_point.request_opcode\",",
          "9033:             FT_UINT8, BASE_HEX, VALS(sc_control_point_opcode_vals), 0x0,",
          "9036:         {&hf_btatt_sc_control_point_cumulative_value,",
          "9037:             {\"Cumulative Value\", \"btatt.sc_control_point.cumulative_value\",",
          "9038:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9041:         {&hf_btatt_sc_control_point_response_value,",
          "9042:             {\"Response Value\", \"btatt.sc_control_point.response_value\",",
          "9043:             FT_UINT8, BASE_HEX, VALS(sc_control_point_response_value_vals), 0x0,",
          "9044:             NULL, HFILL}",
          "9045:         },",
          "9046:         {&hf_btatt_cycling_power_measurement_flags,",
          "9047:             {\"Flags\", \"btatt.cycling_power_measurement.flags\",",
          "9051:         {&hf_btatt_cycling_power_measurement_flags_reserved,",
          "9052:             {\"Reserved\", \"btatt.cycling_power_measurement.flags.reserved\",",
          "9053:             FT_UINT16, BASE_HEX, NULL, 0xE000,",
          "9056:         {&hf_btatt_cycling_power_measurement_flags_offset_compensation_indicator,",
          "9057:             {\"Offset Compensation Indicator\", \"btatt.cycling_power_measurement.flags.offset_compensation_indicator\",",
          "9058:             FT_BOOLEAN, 16, NULL, 0x1000,",
          "9061:         {&hf_btatt_cycling_power_measurement_flags_accumulated_energy,",
          "9062:             {\"Accumulated Energy\", \"btatt.cycling_power_measurement.flags.accumulated_energy\",",
          "9063:             FT_BOOLEAN, 16, NULL, 0x0800,",
          "9066:         {&hf_btatt_cycling_power_measurement_flags_bottom_dead_spot_angle,",
          "9067:             {\"Bottom Dead Spot Angle\", \"btatt.cycling_power_measurement.flags.bottom_dead_spot_angle\",",
          "9068:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "9071:         {&hf_btatt_cycling_power_measurement_flags_top_dead_spot_angle,",
          "9072:             {\"Top Dead Spot Angle\", \"btatt.cycling_power_measurement.flags.top_dead_spot_angle\",",
          "9073:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "9076:         {&hf_btatt_cycling_power_measurement_flags_extreme_angles,",
          "9077:             {\"Extreme_angles\", \"btatt.cycling_power_measurement.flags.extreme_angles\",",
          "9078:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "9081:         {&hf_btatt_cycling_power_measurement_flags_extreme_torque_magnitudes,",
          "9082:             {\"Extreme Torque Magnitudes\", \"btatt.cycling_power_measurement.flags.extreme_torque_magnitudes\",",
          "9083:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "9086:         {&hf_btatt_cycling_power_measurement_flags_extreme_force_magnitudes,",
          "9087:             {\"Extreme Force Magnitudes\", \"btatt.cycling_power_measurement.flags.extreme_force_magnitudes\",",
          "9088:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "9091:         {&hf_btatt_cycling_power_measurement_flags_crank_revolution_data,",
          "9092:             {\"Crank Revolution Data\", \"btatt.cycling_power_measurement.flags.crank_revolution_data\",",
          "9093:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "9096:         {&hf_btatt_cycling_power_measurement_flags_wheel_revolution_data,",
          "9097:             {\"Wheel Revolution Data\", \"btatt.cycling_power_measurement.flags.wheel_revolution_data\",",
          "9098:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "9101:         {&hf_btatt_cycling_power_measurement_flags_accumulated_torque_source,",
          "9102:             {\"accumulated_torque_source\", \"btatt.cycling_power_measurement.flags.accumulated_torque_source\",",
          "9103:             FT_UINT16, BASE_HEX, VALS(cycling_power_measurement_flags_accumulated_torque_source_vals), 0x0008,",
          "9106:         {&hf_btatt_cycling_power_measurement_flags_accumulated_torque,",
          "9107:             {\"Accumulated Torque\", \"btatt.cycling_power_measurement.flags.accumulated_torque\",",
          "9108:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "9111:         {&hf_btatt_cycling_power_measurement_flags_pedal_power_balance_reference,",
          "9112:             {\"Pedal Power Balance Reference\", \"btatt.cycling_power_measurement.flags.pedal_power_balance_reference\",",
          "9113:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "9116:         {&hf_btatt_cycling_power_measurement_flags_pedal_power_balance,",
          "9117:             {\"Pedal Power Balance\", \"btatt.cycling_power_measurement.flags.pedal_power_balance\",",
          "9118:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "9121:         {&hf_btatt_cycling_power_measurement_instantaneous_power,",
          "9122:             {\"Instantaneous Power\", \"btatt.cycling_power_measurement.instantaneous_power\",",
          "9123:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9126:         {&hf_btatt_cycling_power_measurement_pedal_power_balance,",
          "9127:             {\"Pedal Power Balance\", \"btatt.cycling_power_measurement.pedal_power_balance\",",
          "9131:         {&hf_btatt_cycling_power_measurement_accumulated_torque,",
          "9132:             {\"Accumulated Torque\", \"btatt.cycling_power_measurement.accumulated_torque\",",
          "9133:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9136:         {&hf_btatt_cycling_power_measurement_wheel_revolution_data_cumulative_wheel_revolutions,",
          "9137:             {\"Wheel Revolution Data Cumulative Wheel Revolutions\", \"btatt.cycling_power_measurement.wheel_revolution_data_cumulative_wheel_revolutions\",",
          "9138:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9141:         {&hf_btatt_cycling_power_measurement_wheel_revolution_data_last_wheel_event_time,",
          "9142:             {\"Wheel Revolution Data Last Wheel Event Time\", \"btatt.cycling_power_measurement.wheel_revolution_data_last_wheel_event_time\",",
          "9143:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9146:         {&hf_btatt_cycling_power_measurement_crank_revolution_data_cumulative_crank_revolutions,",
          "9147:             {\"Crank Revolution Data Cumulative Crank Revolutions\", \"btatt.cycling_power_measurement.crank_revolution_data_cumulative_crank_revolutions\",",
          "9148:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9151:         {&hf_btatt_cycling_power_measurement_crank_revolution_data_last_crank_event_time,",
          "9152:             {\"Crank Revolution Data Last Crank Event Time\", \"btatt.cycling_power_measurement.crank_revolution_data_last_crank_event_time\",",
          "9153:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9156:         {&hf_btatt_cycling_power_measurement_extreme_force_magnitudes_maximum_force_magnitude,",
          "9157:             {\"Extreme Force Magnitudes Maximum Force Magnitude\", \"btatt.cycling_power_measurement.extreme_force_magnitudes_maximum_force_magnitude\",",
          "9158:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9161:         {&hf_btatt_cycling_power_measurement_extreme_force_magnitudes_minimum_force_magnitude,",
          "9162:             {\"Extreme Force Magnitudes Minimum Force Magnitude\", \"btatt.cycling_power_measurement.extreme_force_magnitudes_minimum_force_magnitude\",",
          "9163:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9166:         {&hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_maximum_torque_magnitude,",
          "9167:             {\"Extreme Torque Magnitudes Maximum Torque Magnitude\", \"btatt.cycling_power_measurement.extreme_torque_magnitudes_maximum_torque_magnitude\",",
          "9168:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9171:         {&hf_btatt_cycling_power_measurement_extreme_torque_magnitudes_minimum_torque_magnitude,",
          "9172:             {\"Extreme Torque Magnitudes Minimum Torque Magnitude\", \"btatt.cycling_power_measurement.extreme_torque_magnitudes_minimum_torque_magnitude\",",
          "9173:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9176:         {&hf_btatt_cycling_power_measurement_extreme_angles,",
          "9177:             {\"Extreme Angles\", \"btatt.cycling_power_measurement.extreme_angles\",",
          "9178:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9181:         {&hf_btatt_cycling_power_measurement_extreme_angles_maximum,",
          "9182:             {\"Minimum\", \"btatt.cycling_power_measurement.extreme_angles.maximum\",",
          "9183:             FT_UINT24, BASE_DEC, NULL, 0xFFF000,",
          "9186:         {&hf_btatt_cycling_power_measurement_extreme_angles_minimum,",
          "9187:             {\"Maximum\", \"btatt.cycling_power_measurement.extreme_angles.minimum\",",
          "9188:             FT_UINT24, BASE_DEC, NULL, 0x000FFF,",
          "9191:         {&hf_btatt_cycling_power_measurement_top_dead_spot_angle,",
          "9192:             {\"Top Dead Spot Angle\", \"btatt.cycling_power_measurement.top_dead_spot_angle\",",
          "9193:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9196:         {&hf_btatt_cycling_power_measurement_bottom_dead_spot_angle,",
          "9197:             {\"Bottom Dead Spot Angle\", \"btatt.cycling_power_measurement.bottom_dead_spot_angle\",",
          "9198:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9201:         {&hf_btatt_cycling_power_measurement_accumulated_energy,",
          "9202:             {\"Accumulated Energy\", \"btatt.cycling_power_measurement.accumulated_energy\",",
          "9203:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9206:         {&hf_btatt_csc_measurement_flags,",
          "9207:             {\"Flags\", \"btatt.csc_measurement.flags\",",
          "9208:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "9211:         {&hf_btatt_csc_measurement_flags_reserved,",
          "9212:             {\"Reserved\", \"btatt.csc_measurement.flags.reserved\",",
          "9213:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "9216:         {&hf_btatt_csc_measurement_flags_crank_revolution_data,",
          "9217:             {\"Crank Revolution Data\", \"btatt.csc_measurement.flags.crank_revolution_data\",",
          "9218:             FT_BOOLEAN, 8, NULL, 0x02,",
          "9221:         {&hf_btatt_csc_measurement_flags_wheel_revolution_data,",
          "9222:             {\"Wheel Revolution Data\", \"btatt.csc_measurement.flags.wheel_revolution_data\",",
          "9223:             FT_BOOLEAN, 8, NULL, 0x01,",
          "9226:         {&hf_btatt_csc_measurement_cumulative_wheel_revolutions,",
          "9227:             {\"Cumulative Wheel Revolutions\", \"btatt.csc_measurement.cumulative_wheel_revolutions\",",
          "9228:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9231:         {&hf_btatt_csc_measurement_cumulative_crank_revolutions,",
          "9232:             {\"Cumulative Crank Revolutions\", \"btatt.csc_measurement.cumulative_crank_revolutions\",",
          "9233:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9236:         {&hf_btatt_csc_measurement_last_event_time,",
          "9237:             {\"Last Event Time\", \"btatt.csc_measurement.last_event_time\",",
          "9238:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9241:         {&hf_btatt_cycling_power_vector_flags,",
          "9242:             {\"Flags\", \"btatt.csc_measurement.flags\",",
          "9243:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "9246:         {&hf_btatt_cycling_power_vector_flags_reserved,",
          "9247:             {\"Reserved\", \"btatt.csc_measurement.flags.reserved\",",
          "9248:             FT_UINT8, BASE_HEX, NULL, 0xC0,",
          "9251:         {&hf_btatt_cycling_power_vector_flags_instantaneous_measurement_direction,",
          "9252:             {\"Instantaneous Measurement Direction\", \"btatt.cycling_power_vector.flags.instantaneous_measurement_direction\",",
          "9253:             FT_UINT8, BASE_HEX, VALS(cycling_power_vector_flags_instantaneous_measurement_direction_vals), 0x30,",
          "9256:         {&hf_btatt_cycling_power_vector_flags_instantaneous_torque_magnitude_array,",
          "9257:             {\"Instantaneous Torque Magnitude Array\", \"btatt.cycling_power_vector.flags.instantaneous_torque_magnitude_array\",",
          "9258:             FT_BOOLEAN, 8, NULL, 0x08,",
          "9261:         {&hf_btatt_cycling_power_vector_flags_instantaneous_force_magnitude_array,",
          "9262:             {\"Instantaneous Force Magnitude Array\", \"btatt.cycling_power_vector.flags.instantaneous_force_magnitude_array\",",
          "9263:             FT_BOOLEAN, 8, NULL, 0x04,",
          "9266:         {&hf_btatt_cycling_power_vector_flags_first_crank_measurement_angle,",
          "9267:             {\"First Crank Measurement Angle\", \"btatt.cycling_power_vector.flags.first_crank_measurement_angle\",",
          "9268:             FT_BOOLEAN, 8, NULL, 0x02,",
          "9271:         {&hf_btatt_cycling_power_vector_flags_crank_revolution_data,",
          "9272:             {\"Crank Revolution Data\", \"btatt.cycling_power_vector.flags.crank_revolution_data\",",
          "9273:             FT_BOOLEAN, 8, NULL, 0x01,",
          "9277:         {&hf_btatt_cycling_power_vector_crank_revolution_data_cumulative_crank_revolutions,",
          "9278:             {\"cumulative_crank_revolutions\", \"btatt.csc_measurement.cumulative_crank_revolutions\",",
          "9282:         {&hf_btatt_cycling_power_vector_crank_revolution_data_last_crank_event_time,",
          "9283:             {\"Last Crank Event Time\", \"btatt.csc_measurement.last_crank_event_time\",",
          "9287:         {&hf_btatt_cycling_power_vector_first_crank_measurement_angle,",
          "9288:             {\"First Crank Measurement Angle\", \"btatt.csc_measurement.first_crank_measurement_angle\",",
          "9289:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9293:         {&hf_btatt_cycling_power_vector_instantaneous_force_magnitude_array,",
          "9294:             {\"Instantaneous Force Magnitude Array\", \"btatt.csc_measurement.instantaneous_force_magnitude_array\",",
          "9295:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9298:         {&hf_btatt_cycling_power_vector_instantaneous_torque_magnitude_array,",
          "9299:             {\"Instantaneous Torque Magnitude Array\", \"btatt.csc_measurement.instantaneous_torque_magnitude_array\",",
          "9300:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9303:         {&hf_btatt_cycling_power_control_point_opcode,",
          "9304:             {\"Opcode\", \"btatt.cycling_power_control_point.opcode\",",
          "9305:             FT_UINT8, BASE_HEX, VALS(cycling_power_control_point_opcode), 0x0,",
          "9308:         {&hf_btatt_cycling_power_control_point_cumulative_value,",
          "9309:             {\"Cumulative Value\", \"btatt.cycling_power_control_point.cumulative_value\",",
          "9310:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9313:         {&hf_btatt_cycling_power_control_point_sensor_location,",
          "9314:             {\"Sensor Location\", \"btatt.cycling_power_control_point.sensor_location\",",
          "9318:         {&hf_btatt_cycling_power_control_point_crank_length,",
          "9319:             {\"Crank Length\", \"btatt.cycling_power_control_point.crank_length\",",
          "9320:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9323:         {&hf_btatt_cycling_power_control_point_chain_length,",
          "9324:             {\"Chain Length\", \"btatt.cycling_power_control_point.chain_length\",",
          "9328:         {&hf_btatt_cycling_power_control_point_chain_weight,",
          "9329:             {\"Chain Weight\", \"btatt.cycling_power_control_point.chain_weight\",",
          "9333:         {&hf_btatt_cycling_power_control_point_span_length,",
          "9334:             {\"Span Length\", \"btatt.cycling_power_control_point.span_length\",",
          "9335:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9338:         {&hf_btatt_cycling_power_control_point_content_mask,",
          "9339:             {\"Content Mask\", \"btatt.cycling_power_control_point.content_mask\",",
          "9340:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9343:         {&hf_btatt_cycling_power_control_point_content_mask_reserved,",
          "9344:             {\"Reserved\", \"btatt.cycling_power_control_point.content_mask.reserved\",",
          "9345:             FT_UINT16, BASE_HEX, NULL, 0xFE0,",
          "9348:         {&hf_btatt_cycling_power_control_point_content_mask_accumulated_energy,",
          "9349:             {\"Accumulated Energy\", \"btatt.cycling_power_control_point.content_mask.accumulated_energy\",",
          "9350:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x100,",
          "9353:         {&hf_btatt_cycling_power_control_point_content_mask_bottom_dead_spot_angle,",
          "9354:             {\"Bottom Dead Spot Angle\", \"btatt.cycling_power_control_point.content_mask.bottom_dead_spot_angle\",",
          "9355:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x080,",
          "9358:         {&hf_btatt_cycling_power_control_point_content_mask_top_dead_spot_angle,",
          "9359:             {\"Top Dead Spot Angle\", \"btatt.cycling_power_control_point.content_mask.top_dead_spot_angle\",",
          "9360:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x040,",
          "9363:         {&hf_btatt_cycling_power_control_point_content_mask_extreme_angles,",
          "9364:             {\"Extreme Angles\", \"btatt.cycling_power_control_point.content_mask.extreme_angles\",",
          "9365:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x020,",
          "9368:         {&hf_btatt_cycling_power_control_point_content_mask_extreme_magnitudes,",
          "9369:             {\"Extreme Magnitudes\", \"btatt.cycling_power_control_point.content_mask.extreme_magnitudes\",",
          "9370:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x010,",
          "9373:         {&hf_btatt_cycling_power_control_point_content_mask_crank_revolution_data,",
          "9374:             {\"Crank Revolution Data\", \"btatt.cycling_power_control_point.content_mask.crank_revolution_data\",",
          "9375:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x008,",
          "9378:         {&hf_btatt_cycling_power_control_point_content_mask_wheel_revolution_data,",
          "9379:             {\"Wheel Revolution Data\", \"btatt.cycling_power_control_point.content_mask.wheel_revolution_data\",",
          "9380:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x004,",
          "9383:         {&hf_btatt_cycling_power_control_point_content_mask_accumulated_torque,",
          "9384:             {\"Accumulated Torque\", \"btatt.cycling_power_control_point.content_mask.accumulated_torque\",",
          "9385:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x002,",
          "9388:         {&hf_btatt_cycling_power_control_point_content_mask_pedal_power_balance,",
          "9389:             {\"Pedal Power Balance\", \"btatt.cycling_power_control_point.content_mask.pedal_power_balance\",",
          "9390:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x001,",
          "9393:         {&hf_btatt_cycling_power_control_point_request_opcode,",
          "9394:             {\"Request Opcode\", \"btatt.cycling_power_control_point.request_opcode\",",
          "9395:             FT_UINT8, BASE_HEX, VALS(cycling_power_control_point_opcode), 0x0,",
          "9398:         {&hf_btatt_cycling_power_control_point_response_value,",
          "9399:             {\"Response Value\", \"btatt.cycling_power_control_point.response_value\",",
          "9400:             FT_UINT8, BASE_HEX, VALS(cycling_power_control_point_response_value), 0x0,",
          "9403:         {&hf_btatt_cycling_power_control_point_start_offset_compensation,",
          "9404:             {\"Start Offset Compensation\", \"btatt.cycling_power_control_point.start_offset_compensation\",",
          "9405:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "9408:         {&hf_btatt_cycling_power_control_point_sampling_rate,",
          "9409:             {\"Sampling Rate\", \"btatt.cycling_power_control_point.sampling_rate\",",
          "9410:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9413:         {&hf_btatt_cycling_power_control_point_factory_calibration_date,",
          "9414:             {\"Factory Calibration Date\", \"btatt.cycling_power_control_point.factory_calibration_date\",",
          "9415:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9418:         {&hf_btatt_location_and_speed_flags,",
          "9419:             {\"Flags\", \"btatt.location_and_speed.flags\",",
          "9420:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9423:         {&hf_btatt_location_and_speed_flags_reserved,",
          "9424:             {\"Reserved\", \"btatt.location_and_speed.flags.reserved\",",
          "9425:             FT_UINT16, BASE_HEX, NULL, 0xC000,",
          "9428:         {&hf_btatt_location_and_speed_flags_heading_source,",
          "9429:             {\"Heading Source\", \"btatt.location_and_speed.flags.heading_source\",",
          "9430:             FT_BOOLEAN, 16, TFS(&flags_heading_source_tfs), 0x3000,",
          "9433:         {&hf_btatt_location_and_speed_flags_elevation_source,",
          "9434:             {\"Elevation Source\", \"btatt.location_and_speed.flags.elevation_source\",",
          "9435:             FT_UINT16, BASE_HEX, VALS(location_and_speed_flags_elevation_source_vals), 0x0C00,",
          "9438:         {&hf_btatt_location_and_speed_flags_speed_and_distance_format,",
          "9439:             {\"Speed_and Distance Format\", \"btatt.location_and_speed.flags.speed_and_distance_format\",",
          "9440:             FT_BOOLEAN, 16, TFS(&location_and_speed_flags_speed_and_distance_format_tfs), 0x0200,",
          "9443:         {&hf_btatt_location_and_speed_flags_position_status,",
          "9444:             {\"Position Status\", \"btatt.location_and_speed.flags.position_status\",",
          "9445:             FT_UINT16, BASE_HEX, VALS(flags_position_status_vals), 0x0180,",
          "9448:         {&hf_btatt_location_and_speed_flags_utc_time,",
          "9449:             {\"UTC Time Present\", \"btatt.location_and_speed.flags.utc_time\",",
          "9450:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "9453:         {&hf_btatt_location_and_speed_flags_rolling_time,",
          "9454:             {\"Rolling Time\", \"btatt.location_and_speed.flags.rolling_time\",",
          "9455:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "9458:         {&hf_btatt_location_and_speed_flags_heading,",
          "9459:             {\"Heading\", \"btatt.location_and_speed.flags.heading\",",
          "9460:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "9463:         {&hf_btatt_location_and_speed_flags_elevation,",
          "9464:             {\"Elevation\", \"btatt.location_and_speed.flags.elevation\",",
          "9465:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "9468:         {&hf_btatt_location_and_speed_flags_location,",
          "9469:             {\"Location\", \"btatt.location_and_speed.flags.location\",",
          "9470:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "9473:         {&hf_btatt_location_and_speed_flags_total_distance,",
          "9474:             {\"Total Distance Present\", \"btatt.location_and_speed.flags.total_distance\",",
          "9475:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "9478:         {&hf_btatt_location_and_speed_flags_instantaneous_speed,",
          "9479:             {\"Instantaneous Speed\", \"btatt.location_and_speed.flags.instantaneous_speed\",",
          "9480:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "9483:         {&hf_btatt_location_and_speed_instantaneous_speed,",
          "9484:             {\"Instantaneous Speed\", \"btatt.location_and_speed.instantaneous_speed\",",
          "9485:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9488:         {&hf_btatt_location_and_speed_total_distance,",
          "9489:             {\"Total Distance\", \"btatt.location_and_speed.total_distance\",",
          "9490:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "9493:         {&hf_btatt_location_and_speed_location_longitude,",
          "9494:             {\"Location Longitude\", \"btatt.location_and_speed.location.longitude\",",
          "9495:             FT_INT32, BASE_DEC, NULL, 0x0,",
          "9498:         {&hf_btatt_location_and_speed_location_latitude,",
          "9499:             {\"Location Latitude\", \"btatt.location_and_speed.location.latitude\",",
          "9500:             FT_INT32, BASE_DEC, NULL, 0x0,",
          "9503:         {&hf_btatt_location_and_speed_elevation,",
          "9504:             {\"Elevation\", \"btatt.location_and_speed.elevation\",",
          "9505:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "9508:         {&hf_btatt_location_and_speed_heading,",
          "9509:             {\"Heading\", \"btatt.location_and_speed.heading\",",
          "9510:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9513:         {&hf_btatt_location_and_speed_rolling_time,",
          "9514:             {\"Rolling Time\", \"btatt.location_and_speed.rolling_time\",",
          "9515:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9518:         {&hf_btatt_location_and_speed_utc_time,",
          "9519:             {\"UTC Time\", \"btatt.location_and_speed.utc_time\",",
          "9520:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9523:         {&hf_btatt_navigation_flags,",
          "9524:             {\"Flags\", \"btatt.navigation.flags\",",
          "9525:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9528:         {&hf_btatt_navigation_flags_reserved,",
          "9529:             {\"Reserved\", \"btatt.navigation.flags.reserved\",",
          "9530:             FT_UINT16, BASE_HEX, NULL, 0xFE00,",
          "9533:         {&hf_btatt_navigation_flags_destination_reached,",
          "9534:             {\"Destination Reached\", \"btatt.navigation.flags.destination_reached\",",
          "9535:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "9538:         {&hf_btatt_navigation_flags_waypoint_reached,",
          "9539:             {\"Waypoint Reached\", \"btatt.navigation.flags.waypoint_reached\",",
          "9540:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "9543:         {&hf_btatt_navigation_flags_navigation_indicator_type,",
          "9544:             {\"Navigation Indicator Type\", \"btatt.navigation.flags.navigation_indicator_type\",",
          "9545:             FT_BOOLEAN, 16, TFS(&navigation_indicator_type_tfs), 0x0040,",
          "9548:         {&hf_btatt_navigation_flags_heading_source,",
          "9549:             {\"Heading Source\", \"btatt.navigation.flags.heading_source\",",
          "9550:             FT_BOOLEAN, 16, TFS(&flags_heading_source_tfs), 0x0020,",
          "9553:         {&hf_btatt_navigation_flags_position_status,",
          "9554:             {\"Position Status\", \"btatt.navigation.flags.position_status\",",
          "9555:             FT_UINT16, BASE_HEX, VALS(flags_position_status_vals), 0x0018,",
          "9558:         {&hf_btatt_navigation_flags_estimated_time_of_arrival,",
          "9559:             {\"Estimated Time of Arrival\", \"btatt.navigation.flags.estimated_time_of_arrival\",",
          "9560:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "9563:         {&hf_btatt_navigation_flags_remaining_vertical_distance,",
          "9564:             {\"Remaining Vertical Distance\", \"btatt.navigation.flags.remaining_vertical_distance\",",
          "9565:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "9568:         {&hf_btatt_navigation_flags_remaining_distance,",
          "9569:             {\"Remaining Distance\", \"btatt.navigation.flags.remaining_distance\",",
          "9570:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "9573:         {&hf_btatt_navigation_bearing,",
          "9574:             {\"Bearing\", \"btatt.navigation.bearing\",",
          "9575:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9578:         {&hf_btatt_navigation_heading,",
          "9579:             {\"Heading\", \"btatt.navigation.heading\",",
          "9580:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9583:         {&hf_btatt_navigation_remaining_distance,",
          "9584:             {\"Remaining Distance\", \"btatt.navigation.remaining_distance\",",
          "9585:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "9588:         {&hf_btatt_navigation_remaining_vertical_distance,",
          "9589:             {\"Remaining Vertical Distance\", \"btatt.navigation.remaining_vertical_distance\",",
          "9590:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "9593:         {&hf_btatt_navigation_estimated_time_of_arrival,",
          "9594:             {\"Estimated Time of Arrival\", \"btatt.navigation.estimated_time_of_arrival\",",
          "9595:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9598:         {&hf_btatt_position_quality_flags,",
          "9599:             {\"Flags\", \"btatt.position_quality.flags\",",
          "9600:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9603:         {&hf_btatt_position_quality_flags_reserved,",
          "9604:             {\"Reserved\", \"btatt.position_quality.flags.reserved\",",
          "9605:             FT_UINT16, BASE_HEX, NULL, 0xFE00,",
          "9608:         {&hf_btatt_position_quality_flags_position_status,",
          "9609:             {\"Position Status\", \"btatt.position_quality.flags.position_status\",",
          "9610:             FT_UINT16, BASE_HEX, VALS(flags_position_status_vals), 0x0180,",
          "9613:         {&hf_btatt_position_quality_flags_vdop,",
          "9614:             {\"VDOP\", \"btatt.position_quality.flags.vdop\",",
          "9615:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "9618:         {&hf_btatt_position_quality_flags_hdop,",
          "9619:             {\"HDOP\", \"btatt.position_quality.flags.hdop\",",
          "9620:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "9623:         {&hf_btatt_position_quality_flags_evpe,",
          "9624:             {\"EVPE\", \"btatt.position_quality.flags.evpe\",",
          "9625:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "9628:         {&hf_btatt_position_quality_flags_ehpe,",
          "9629:             {\"EHPE\", \"btatt.position_quality.flags.ehpe\",",
          "9630:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "9633:         {&hf_btatt_position_quality_flags_time_to_first_fix,",
          "9634:             {\"Time to First Fix\", \"btatt.position_quality.flags.time_to_first_fix\",",
          "9635:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "9638:         {&hf_btatt_position_quality_flags_number_of_beacons_in_view,",
          "9639:             {\"Number of Beacons in View\", \"btatt.position_quality.flags.number_of_beacons_in_view\",",
          "9640:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "9643:         {&hf_btatt_position_quality_flags_number_of_beacons_in_solution,",
          "9644:             {\"Number of Beacons_in Solution\", \"btatt.position_quality.flags.number_of_beacons_in_solution\",",
          "9645:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "9648:         {&hf_btatt_position_quality_number_of_beacons_in_solution,",
          "9649:             {\"number_of_beacons_in_solution\", \"btatt.position_quality.number_of_beacons_in_solution\",",
          "9650:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9653:         {&hf_btatt_position_quality_number_of_beacons_in_view,",
          "9654:             {\"number_of_beacons_in_view\", \"btatt.position_quality.number_of_beacons_in_view\",",
          "9655:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9658:         {&hf_btatt_position_quality_time_to_first_fix,",
          "9659:             {\"time_to_first_fix\", \"btatt.position_quality.time_to_first_fix\",",
          "9660:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9663:         {&hf_btatt_position_quality_ehpe,",
          "9664:             {\"EHPE\", \"btatt.position_quality.ehpe\",",
          "9665:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9668:         {&hf_btatt_position_quality_evpe,",
          "9669:             {\"EVPE\", \"btatt.position_quality.evpe\",",
          "9670:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "9673:         {&hf_btatt_position_quality_hdop,",
          "9674:             {\"HDOP\", \"btatt.position_quality.hdop\",",
          "9675:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9678:         {&hf_btatt_position_quality_vdop,",
          "9679:             {\"VDOP\", \"btatt.position_quality.vdop\",",
          "9680:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9683:         {&hf_btatt_ln_control_point_opcode,",
          "9684:             {\"Opcode\", \"btatt.ln_control_point.opcode\",",
          "9685:             FT_UINT8, BASE_HEX, VALS(ln_control_point_opcode), 0x0,",
          "9688:         {&hf_btatt_ln_control_point_cumulative_value,",
          "9689:             {\"Cumulative Value\", \"btatt.ln_control_point.cumulative_value\",",
          "9690:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "9693:         {&hf_btatt_ln_control_point_content_mask,",
          "9694:             {\"Content Mask\", \"btatt.ln_control_point.content_mask\",",
          "9695:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9696:             NULL, HFILL}",
          "9697:         },",
          "9698:         {&hf_btatt_ln_control_point_content_mask_reserved,",
          "9699:             {\"Reserved\", \"btatt.ln_control_point.content_mask.reserved\",",
          "9700:             FT_UINT16, BASE_HEX, NULL, 0xFF80,",
          "9703:         {&hf_btatt_ln_control_point_content_mask_utc_time,",
          "9704:             {\"UTC Time\", \"btatt.ln_control_point.content_mask.utc_time\",",
          "9705:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0040,",
          "9708:         {&hf_btatt_ln_control_point_content_mask_rolling_time,",
          "9709:             {\"Rolling Time\", \"btatt.ln_control_point.content_mask.rolling_time\",",
          "9710:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0020,",
          "9713:         {&hf_btatt_ln_control_point_content_mask_heading,",
          "9714:             {\"Heading\", \"btatt.ln_control_point.content_mask.heading\",",
          "9715:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0010,",
          "9718:         {&hf_btatt_ln_control_point_content_mask_elevation,",
          "9719:             {\"Elevation\", \"btatt.ln_control_point.content_mask.elevation\",",
          "9720:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0008,",
          "9723:         {&hf_btatt_ln_control_point_content_mask_location,",
          "9724:             {\"Location\", \"btatt.ln_control_point.content_mask.location\",",
          "9725:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0004,",
          "9728:         {&hf_btatt_ln_control_point_content_mask_total_distance,",
          "9729:             {\"Total Distance\", \"btatt.ln_control_point.content_mask.total_distance\",",
          "9730:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0002,",
          "9733:         {&hf_btatt_ln_control_point_content_mask_instantaneous_speed,",
          "9734:             {\"Instantaneous Speed\", \"btatt.ln_control_point.content_mask.instantaneous_speed\",",
          "9735:             FT_BOOLEAN, 16, TFS(&control_point_mask_value_tfs), 0x0001,",
          "9738:         {&hf_btatt_ln_control_point_navigation_control,",
          "9739:             {\"Navigation Control\", \"btatt.ln_control_point.navigation_control\",",
          "9740:             FT_UINT8, BASE_HEX, VALS(ln_control_point_navigation_control_vals), 0x0,",
          "9743:         {&hf_btatt_ln_control_point_route_number,",
          "9744:             {\"Route Number\", \"btatt.ln_control_point.route_number\",",
          "9748:         {&hf_btatt_ln_control_point_fix_rate,",
          "9749:             {\"Fix Rate\", \"btatt.ln_control_point.fix_rate\",",
          "9750:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9753:         {&hf_btatt_ln_control_point_elevation,",
          "9754:             {\"Elevation\", \"btatt.ln_control_point.elevation\",",
          "9755:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "9758:         {&hf_btatt_ln_control_point_request_opcode,",
          "9759:             {\"Request Opcode\", \"btatt.ln_control_point.request_opcode\",",
          "9760:             FT_UINT8, BASE_HEX, VALS(ln_control_point_opcode), 0x0,",
          "9763:         {&hf_btatt_ln_control_point_response_value,",
          "9764:             {\"Response Value\", \"btatt.ln_control_point.response_value\",",
          "9765:             FT_UINT8, BASE_HEX, VALS(ln_control_point_response_value), 0x0,",
          "9768:         {&hf_btatt_ln_control_point_response_value_number_of_routes,",
          "9769:             {\"Number of Routes\", \"btatt.ln_control_point.number_of_routes\",",
          "9770:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9773:         {&hf_btatt_ln_control_point_response_value_name_of_route,",
          "9774:             {\"Name_of Route\", \"btatt.ln_control_point.name_of_route\",",
          "9775:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "9778:         {&hf_btatt_body_composition_measurement_flags,",
          "9779:             {\"Flags\", \"btatt.body_composition_measurement.flags\",",
          "9780:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "9783:         {&hf_btatt_body_composition_measurement_flags_reserved,",
          "9784:             {\"Reserved\", \"btatt.body_composition_measurement.flags.reserved\",",
          "9785:             FT_UINT16, BASE_HEX, NULL, 0xE000,",
          "9788:         {&hf_btatt_body_composition_measurement_flags_multiple_packet_measurement,",
          "9789:             {\"Multiple Packet Measurement\", \"btatt.body_composition_measurement.flags.multiple_packet_measurement\",",
          "9790:             FT_BOOLEAN, 16, NULL, 0x1000,",
          "9793:         {&hf_btatt_body_composition_measurement_flags_height,",
          "9794:             {\"Height\", \"btatt.body_composition_measurement.flags.height\",",
          "9798:         {&hf_btatt_body_composition_measurement_flags_weight,",
          "9799:             {\"Weight\", \"btatt.body_composition_measurement.flags.weight\",",
          "9803:         {&hf_btatt_body_composition_measurement_flags_impedance,",
          "9804:             {\"Impedance\", \"btatt.body_composition_measurement.flags.impedance\",",
          "9808:         {&hf_btatt_body_composition_measurement_flags_body_water_mass,",
          "9809:             {\"Body Water Mass\", \"btatt.body_composition_measurement.flags.body_water_mass\",",
          "9813:         {&hf_btatt_body_composition_measurement_flags_soft_lean_mass,",
          "9814:             {\"Soft Lean Mass\", \"btatt.body_composition_measurement.flags.soft_lean_mass\",",
          "9818:         {&hf_btatt_body_composition_measurement_flags_fat_free_mass,",
          "9819:             {\"Fat Free Mass\", \"btatt.body_composition_measurement.flags.fat_free_mass\",",
          "9823:         {&hf_btatt_body_composition_measurement_flags_muscle_mass,",
          "9824:             {\"Muscle Mass\", \"btatt.body_composition_measurement.flags.muscle_mass\",",
          "9828:         {&hf_btatt_body_composition_measurement_flags_muscle_percentage,",
          "9829:             {\"Muscle Percentage\", \"btatt.body_composition_measurement.flags.muscle_percentage\",",
          "9833:         {&hf_btatt_body_composition_measurement_flags_basal_metabolism,",
          "9834:             {\"Basal Metabolism\", \"btatt.body_composition_measurement.flags.basal_metabolism\",",
          "9838:         {&hf_btatt_body_composition_measurement_flags_user_id,",
          "9839:             {\"User ID\", \"btatt.body_composition_measurement.flags.user_id\",",
          "9843:         {&hf_btatt_body_composition_measurement_flags_timestamp,",
          "9844:             {\"Timestamp\", \"btatt.body_composition_measurement.flags.timestamp\",",
          "9848:         {&hf_btatt_body_composition_measurement_flags_measurement_units,",
          "9849:             {\"Measurement Units\", \"btatt.body_composition_measurement.flags.measurement_units\",",
          "9850:             FT_UINT16, BASE_HEX, VALS(body_composition_measurement_flags_measurement_units_vals), 0x0001,",
          "9853:         {&hf_btatt_body_composition_measurement_body_fat_percentage,",
          "9854:             {\"Body Fat Percentage\", \"btatt.body_composition_measurement.body_fat_percentage\",",
          "9855:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9858:         {&hf_btatt_body_composition_measurement_timestamp,",
          "9859:             {\"Timestamp\", \"btatt.body_composition_measurement.timestamp\",",
          "9860:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9863:         {&hf_btatt_body_composition_measurement_user_id,",
          "9864:             {\"User ID\", \"btatt.body_composition_measurement.user_id\",",
          "9865:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9868:         {&hf_btatt_body_composition_measurement_basal_metabolism,",
          "9869:             {\"Basal Metabolism\", \"btatt.body_composition_measurement.basal_metabolism\",",
          "9870:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9873:         {&hf_btatt_body_composition_measurement_muscle_percentage,",
          "9874:             {\"Muscle Percentage\", \"btatt.body_composition_measurement.muscle_percentage\",",
          "9875:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9878:         {&hf_btatt_body_composition_measurement_muscle_mass_lb,",
          "9879:             {\"Muscle Mass [lb]\", \"btatt.body_composition_measurement.muscle_mass.lb\",",
          "9880:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9883:         {&hf_btatt_body_composition_measurement_muscle_mass_kg,",
          "9884:             {\"Muscle Mass [kg]\", \"btatt.body_composition_measurement.muscle_mass.kg\",",
          "9885:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9888:         {&hf_btatt_body_composition_measurement_fat_free_mass_lb,",
          "9889:             {\"Fat Free Mass [lb]\", \"btatt.body_composition_measurement.fat_free_mass.lb\",",
          "9890:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9893:         {&hf_btatt_body_composition_measurement_fat_free_mass_kg,",
          "9894:             {\"Fat Free Mass [kg]\", \"btatt.body_composition_measurement.fat_free_mass.kg\",",
          "9895:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9898:         {&hf_btatt_body_composition_measurement_soft_lean_mass_lb,",
          "9899:             {\"Soft Lean Mass [lb]\", \"btatt.body_composition_measurement.soft_lean_mass.lb\",",
          "9900:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9903:         {&hf_btatt_body_composition_measurement_soft_lean_mass_kg,",
          "9904:             {\"Soft Lean Mass [kg]\", \"btatt.body_composition_measurement.soft_lean_mass.kg\",",
          "9905:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9908:         {&hf_btatt_body_composition_measurement_body_water_mass_lb,",
          "9909:             {\"Body Water Mass [lb]\", \"btatt.body_composition_measurement.body_water_mass.lb\",",
          "9910:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9913:         {&hf_btatt_body_composition_measurement_body_water_mass_kg,",
          "9914:             {\"Body Water Mass [kg]\", \"btatt.body_composition_measurement.body_water_mass.kg\",",
          "9915:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9918:         {&hf_btatt_body_composition_measurement_impedance,",
          "9919:             {\"Impedance\", \"btatt.body_composition_measurement.impedance\",",
          "9920:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9923:         {&hf_btatt_body_composition_measurement_weight_lb,",
          "9924:             {\"Weight [lb]\", \"btatt.body_composition_measurement.weight.lb\",",
          "9925:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9928:         {&hf_btatt_body_composition_measurement_weight_kg,",
          "9929:             {\"Weight [kg]\", \"btatt.body_composition_measurement.weight.kg\",",
          "9930:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9933:         {&hf_btatt_body_composition_measurement_height_inches,",
          "9934:             {\"Height [inches]\", \"btatt.body_composition_measurement.height.inches\",",
          "9935:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9938:         {&hf_btatt_body_composition_measurement_height_meter,",
          "9939:             {\"Height [meter]\", \"btatt.body_composition_measurement.height.meter\",",
          "9940:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9943:         {&hf_btatt_weight_measurement_flags,",
          "9944:             {\"Flags\", \"btatt.weight_measurement.flags\",",
          "9945:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "9948:         {&hf_btatt_weight_measurement_flags_reserved,",
          "9949:             {\"Reserved\", \"btatt.weight_measurement.flags.reserved\",",
          "9950:             FT_UINT8, BASE_HEX, NULL, 0xF0,",
          "9953:         {&hf_btatt_weight_measurement_flags_bmi_and_height,",
          "9954:             {\"BMI and Height\", \"btatt.weight_measurement.flags.bmi_and_height\",",
          "9955:             FT_BOOLEAN, 8, NULL, 0x08,",
          "9958:         {&hf_btatt_weight_measurement_flags_user_id,",
          "9959:             {\"User ID\", \"btatt.weight_measurement.flags.user_id\",",
          "9960:             FT_BOOLEAN, 8, NULL, 0x04,",
          "9963:         {&hf_btatt_weight_measurement_flags_timestamp,",
          "9964:             {\"Timestamp\", \"btatt.weight_measurement.flags.timestamp\",",
          "9965:             FT_BOOLEAN, 8, NULL, 0x02,",
          "9968:         {&hf_btatt_weight_measurement_flags_measurement_units,",
          "9969:             {\"Measurement Units\", \"btatt.weight_measurement.flags.measurement_units\",",
          "9970:             FT_BOOLEAN, 8, TFS(&weight_measurement_flags_measurement_units_tfs), 0x01,",
          "9973:         {&hf_btatt_weight_measurement_weight_lb,",
          "9974:             {\"Weight [lb]\", \"btatt.weight_measurement.weight.lb\",",
          "9975:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9978:         {&hf_btatt_weight_measurement_weight_kg,",
          "9979:             {\"Weight [kg]\", \"btatt.weight_measurement.weight.kg\",",
          "9980:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9983:         {&hf_btatt_weight_measurement_timestamp,",
          "9984:             {\"Timestamp\", \"btatt.weight_measurement.timestamp\",",
          "9985:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "9988:         {&hf_btatt_weight_measurement_user_id,",
          "9989:             {\"User ID\", \"btatt.weight_measurement.user_id\",",
          "9990:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "9993:         {&hf_btatt_weight_measurement_bmi,",
          "9994:             {\"BMI\", \"btatt.weight_measurement.bmi\",",
          "9995:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "9998:         {&hf_btatt_weight_measurement_height_in,",
          "9999:             {\"Height [in]\", \"btatt.weight_measurement.height.in\",",
          "10000:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10003:         {&hf_btatt_weight_measurement_height_m,",
          "10004:             {\"Height [m]\", \"btatt.weight_measurement.height.m\",",
          "10005:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10008:         {&hf_btatt_user_control_point_opcode,",
          "10009:             {\"Opcode\", \"btatt.user_control_point.opcode\",",
          "10010:             FT_UINT8, BASE_HEX, VALS(user_control_point_opcode_vals), 0x0,",
          "10013:         {&hf_btatt_user_control_point_request_opcode,",
          "10014:             {\"Request Opcode\", \"btatt.user_control_point.request_opcode\",",
          "10015:             FT_UINT8, BASE_HEX, VALS(user_control_point_opcode_vals), 0x0,",
          "10018:         {&hf_btatt_user_control_point_response_value,",
          "10019:             {\"Response Value\", \"btatt.user_control_point.response_value\",",
          "10020:             FT_UINT8, BASE_HEX, VALS(user_control_point_response_value_vals), 0x0,",
          "10023:         {&hf_btatt_user_control_point_consent_code,",
          "10024:             {\"Consent Code\", \"btatt.user_control_point.consent_code\",",
          "10025:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10028:         {&hf_btatt_cgm_measurement_size,",
          "10029:             {\"Size\", \"btatt.cgm_measurement.size\",",
          "10030:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10031:             NULL, HFILL}",
          "10032:         },",
          "10033:         {&hf_btatt_cgm_measurement_flags,",
          "10034:             {\"Flags\", \"btatt.cgm_measurement.flags\",",
          "10038:         {&hf_btatt_cgm_measurement_flags_cgm_trend_information,",
          "10039:             {\"CGM Trend Information\", \"btatt.cgm_measurement.flags.cgm_trend_information\",",
          "10043:         {&hf_btatt_cgm_measurement_flags_cgm_quality,",
          "10044:             {\"CGM Quality\", \"btatt.cgm_measurement.flags.cgm_quality\",",
          "10045:             FT_BOOLEAN, 8, NULL, 0x40,",
          "10046:             NULL, HFILL}",
          "10047:         },",
          "10048:         {&hf_btatt_cgm_measurement_flags_reserved,",
          "10049:             {\"Reserved\", \"btatt.cgm_measurement.flags.reserved\",",
          "10050:             FT_UINT8, BASE_HEX, NULL, 0x38,",
          "10051:             NULL, HFILL}",
          "10052:         },",
          "10053:         {&hf_btatt_cgm_measurement_flags_sensor_status_annunciation_warning,",
          "10054:             {\"Sensor Status Annunciation - Warning\", \"btatt.cgm_measurement.flags.sensor_status_annunciation.warning\",",
          "10055:             FT_BOOLEAN, 8, NULL, 0x04,",
          "10056:             NULL, HFILL}",
          "10057:         },",
          "10058:         {&hf_btatt_cgm_measurement_flags_sensor_status_annunciation_cal_temp,",
          "10059:             {\"Sensor Status Annunciation - Cal/Temp\", \"btatt.cgm_measurement.flags.sensor_status_annunciation.cal_temp\",",
          "10060:             FT_BOOLEAN, 8, NULL, 0x02,",
          "10061:             NULL, HFILL}",
          "10062:         },",
          "10063:         {&hf_btatt_cgm_measurement_flags_sensor_status_annunciation_status,",
          "10064:             {\"Sensor Status Annunciation - Status\", \"btatt.cgm_measurement.flags.sensor_status_annunciation.status\",",
          "10065:             FT_BOOLEAN, 8, NULL, 0x01,",
          "10066:             NULL, HFILL}",
          "10067:         },",
          "10069:         {&hf_btatt_cgm_measurement_glucose_concentration,",
          "10070:             {\"Glucose Concentration\", \"btatt.cgm_measurement.glucose_concentration\",",
          "10071:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10072:             NULL, HFILL}",
          "10073:         },",
          "10074:         {&hf_btatt_cgm_measurement_time_offset,",
          "10075:             {\"Time Offset\", \"btatt.cgm_measurement.time_offset\",",
          "10076:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10077:             NULL, HFILL}",
          "10078:         },",
          "10079:         {&hf_btatt_cgm_sensor_status_annunciation,",
          "10080:             {\"Sensor Status Annunciation\", \"btatt.cgm.sensor_status_annunciation\",",
          "10081:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "10082:             NULL, HFILL}",
          "10083:         },",
          "10084:         {&hf_btatt_cgm_sensor_status_annunciation_status,",
          "10085:             {\"Status\", \"btatt.cgm.sensor_status_annunciation.status\",",
          "10086:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "10087:             NULL, HFILL}",
          "10088:         },",
          "10089:         {&hf_btatt_cgm_sensor_status_annunciation_status_reserved,",
          "10090:             {\"Reserved\", \"btatt.cgm.sensor_status_annunciation.status.reserved\",",
          "10091:             FT_UINT8, BASE_HEX, NULL, 0xC0,",
          "10094:         {&hf_btatt_cgm_sensor_status_annunciation_status_general_device_fault_has_occurred_in_the_sensor,",
          "10095:             {\"General Device Fault has Occurred in the Sensor\", \"btatt.cgm.sensor_status_annunciation.status.general_device_fault_has_occurred_in_the_sensor\",",
          "10096:             FT_BOOLEAN, 8, NULL, 0x20,",
          "10099:         {&hf_btatt_cgm_sensor_status_annunciation_status_device_specific_alert,",
          "10100:             {\"Device Specific Alert\", \"btatt.cgm.sensor_status_annunciation.status.device_specific_alert\",",
          "10104:         {&hf_btatt_cgm_sensor_status_annunciation_status_sensor_malfunction,",
          "10105:             {\"Sensor Malfunction\", \"btatt.cgm.sensor_status_annunciation.status.sensor_malfunction\",",
          "10109:         {&hf_btatt_cgm_sensor_status_annunciation_status_sensor_type_incorrect_for_device,",
          "10110:             {\"Sensor Type Incorrect for Device\", \"btatt.cgm.sensor_status_annunciation.status.sensor_type_incorrect_for_device\",",
          "10114:         {&hf_btatt_cgm_sensor_status_annunciation_status_device_battery_low,",
          "10115:             {\"Device Battery Low\", \"btatt.cgm.sensor_status_annunciation.status.device_battery_low\",",
          "10119:         {&hf_btatt_cgm_sensor_status_annunciation_status_session_stopped,",
          "10120:             {\"Session Stopped\", \"btatt.cgm.sensor_status_annunciation.status.session_stopped\",",
          "10124:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp,",
          "10125:             {\"Cal/Temp\", \"btatt.cgm.sensor_status_annunciation.cal_temp\",",
          "10126:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "10129:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_reserved,",
          "10130:             {\"Reserved\", \"btatt.cgm.sensor_status_annunciation.cal_temp.reserved\",",
          "10131:             FT_UINT8, BASE_HEX, NULL, 0xC0,",
          "10134:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_low_for_valid_test_result_at_time_of_measurement,",
          "10135:             {\"Sensor Temperature too Low for Valid Test Result at Time of Measurement\", \"btatt.cgm.sensor_status_annunciation.cal_temp.sensor_temperature_too_low_for_valid_test_result_at_time_of_measurement\",",
          "10136:             FT_BOOLEAN, 8, NULL, 0x20,",
          "10139:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_sensor_temperature_too_high_for_valid_test_result_at_time_of_measurement,",
          "10140:             {\"Sensor Temperature too High for Valid Test Result at Time of Measurement\", \"btatt.cgm_measurement.sensor_cal_temp_annunciation.cal_temp.sensor_temperature_too_high_for_valid_test_result_at_time_of_measurement\",",
          "10141:             FT_BOOLEAN, 8, NULL, 0x10,",
          "10144:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_required,",
          "10145:             {\"Calibration Required\", \"btatt.cgm_measurement.sensor_cal_temp_annunciation.cal_temp.calibration_required\",",
          "10146:             FT_BOOLEAN, 8, NULL, 0x08,",
          "10149:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_recommended,",
          "10150:             {\"Calibration Recommended\", \"btatt.cgm_measurement.sensor_cal_temp_annunciation.cal_temp.calibration_recommended\",",
          "10151:             FT_BOOLEAN, 8, NULL, 0x04,",
          "10154:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_calibration_not_allowed,",
          "10155:             {\"Calibration not Allowed\", \"btatt.cgm_measurement.sensor_cal_temp_annunciation.cal_temp.calibration_not_allowed\",",
          "10156:             FT_BOOLEAN, 8, NULL, 0x02,",
          "10157:             NULL, HFILL}",
          "10158:         },",
          "10159:         {&hf_btatt_cgm_sensor_status_annunciation_cal_temp_time_synchronization_between_sensor_and_collector_required,",
          "10160:             {\"Time Synchronization between Sensor and Collector Required\", \"btatt.cgm_measurement.sensor_cal_temp_annunciation.cal_temp.time_synchronization_between_sensor_and_collector_required\",",
          "10161:             FT_BOOLEAN, 8, NULL, 0x01,",
          "10162:             NULL, HFILL}",
          "10163:         },",
          "10164:         {&hf_btatt_cgm_sensor_status_annunciation_warning,",
          "10165:             {\"Warning\", \"btatt.cgm.sensor_status_annunciation.warning\",",
          "10169:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_device_can_process,",
          "10170:             {\"Sensor Result Higher than the Device Can Process\", \"btatt.cgm.sensor_status_annunciation.warning.sensor_result_higher_than_the_device_can_process\",",
          "10171:             FT_BOOLEAN, 8, NULL, 0x80,",
          "10174:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_device_can_process,",
          "10175:             {\"Sensor Result Lower than the Device Can Process\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_result_lower_than_the_device_can_process\",",
          "10176:             FT_BOOLEAN, 8, NULL, 0x40,",
          "10179:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_increase_exceeded,",
          "10180:             {\"Sensor Rate of Increase Exceeded\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_rate_of_increase_exceeded\",",
          "10181:             FT_BOOLEAN, 8, NULL, 0x20,",
          "10184:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_rate_of_decrease_exceeded,",
          "10185:             {\"Sensor Rate of Decrease Exceeded\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_rate_of_decrease_exceeded\",",
          "10186:             FT_BOOLEAN, 8, NULL, 0x10,",
          "10189:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_hyper_level,",
          "10190:             {\"Sensor Result Higher than the Hyper Level\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_result_higher_than_the_hyper_level\",",
          "10191:             FT_BOOLEAN, 8, NULL, 0x08,",
          "10194:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_hypo_level,",
          "10195:             {\"Sensor Result Lower than the Hypo Level\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_result_lower_than_the_hypo_level\",",
          "10196:             FT_BOOLEAN, 8, NULL, 0x04,",
          "10197:             NULL, HFILL}",
          "10198:         },",
          "10199:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_higher_than_the_patient_high_level,",
          "10200:             {\"Sensor Result Higher than the Patient High Level\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_result_higher_than_the_patient_high_level\",",
          "10201:             FT_BOOLEAN, 8, NULL, 0x02,",
          "10202:             NULL, HFILL}",
          "10203:         },",
          "10204:         {&hf_btatt_cgm_sensor_status_annunciation_warning_sensor_result_lower_than_the_patient_low_level,",
          "10205:             {\"Sensor Result Lower than the Patient Low Level\", \"btatt.cgm_measurement.sensor_warning_annunciation.warning.sensor_result_lower_than_the_patient_low_level\",",
          "10206:             FT_BOOLEAN, 8, NULL, 0x01,",
          "10210:         {&hf_btatt_cgm_measurement_trend_information,",
          "10211:             {\"Trend Information\", \"btatt.cgm_measurement.trend_information\",",
          "10216:         {&hf_btatt_cgm_measurement_quality,",
          "10217:             {\"Quality\", \"btatt.cgm_measurement.quality\",",
          "10221:         {&hf_btatt_cgm_e2e_crc,",
          "10222:             {\"E2E-CRC\", \"btatt.cgm.e2e_crc.\",",
          "10223:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10226:         {&hf_btatt_cgm_feature_feature,",
          "10227:             {\"Feature\", \"btatt.cgm_feature.feature\",",
          "10228:             FT_UINT24, BASE_HEX, NULL, 0x0,",
          "10231:         {&hf_btatt_cgm_feature_feature_reserved,",
          "10232:             {\"Reserved\", \"btatt.cgm_feature.feature.reserved\",",
          "10233:             FT_UINT24, BASE_HEX, NULL, 0xFE0000,",
          "10236:         {&hf_btatt_cgm_feature_feature_quality,",
          "10237:             {\"Quality\", \"btatt.cgm_feature.feature.quality\",",
          "10238:             FT_BOOLEAN, 24, NULL, 0x010000,",
          "10241:         {&hf_btatt_cgm_feature_feature_trend_information,",
          "10242:             {\"Trend Information\", \"btatt.cgm_feature.feature.trend_information\",",
          "10243:             FT_BOOLEAN, 24, NULL, 0x008000,",
          "10246:         {&hf_btatt_cgm_feature_feature_multiple_sessions,",
          "10247:             {\"Multiple Sessions\", \"btatt.cgm_feature.feature.multiple_sessions\",",
          "10248:             FT_BOOLEAN, 24, NULL, 0x004000,",
          "10251:         {&hf_btatt_cgm_feature_feature_multiple_bond,",
          "10252:             {\"Multiple Bond\", \"btatt.cgm_feature.feature.multiple_bond\",",
          "10253:             FT_BOOLEAN, 24, NULL, 0x002000,",
          "10256:         {&hf_btatt_cgm_feature_feature_e2e_crc,",
          "10257:             {\"E2E-CRC\", \"btatt.cgm_feature.feature.e2e_crc\",",
          "10258:             FT_BOOLEAN, 24, NULL, 0x001000,",
          "10261:         {&hf_btatt_cgm_feature_feature_general_device_fault,",
          "10262:             {\"General Device Fault\", \"btatt.cgm_feature.feature.general_device_fault\",",
          "10263:             FT_BOOLEAN, 24, NULL, 0x000800,",
          "10266:         {&hf_btatt_cgm_feature_feature_sensor_type_error_detection,",
          "10267:             {\"Sensor Type Error Detection\", \"btatt.cgm_feature.feature.sensor_type_error_detection\",",
          "10268:             FT_BOOLEAN, 24, NULL, 0x000400,",
          "10271:         {&hf_btatt_cgm_feature_feature_low_battery_detection,",
          "10272:             {\"Low Battery Detection\", \"btatt.cgm_feature.feature.low_battery_detection\",",
          "10273:             FT_BOOLEAN, 24, NULL, 0x000200,",
          "10276:         {&hf_btatt_cgm_feature_feature_sensor_result_high_low_detection,",
          "10277:             {\"Sensor Result High-Low Detection\", \"btatt.cgm_feature.feature.sensor_result_high_low_detection\",",
          "10278:             FT_BOOLEAN, 24, NULL, 0x000100,",
          "10281:         {&hf_btatt_cgm_feature_feature_sensor_temperature_high_low_detection,",
          "10282:             {\"Sensor Temperature High-Low Detection\", \"btatt.cgm_feature.feature.sensor_temperature_high_low_detection\",",
          "10283:             FT_BOOLEAN, 24, NULL, 0x000080,",
          "10286:         {&hf_btatt_cgm_feature_feature_sensor_malfunction_detection,",
          "10287:             {\"Sensor Malfunction Detection\", \"btatt.cgm_feature.feature.sensor_malfunction_detection\",",
          "10288:             FT_BOOLEAN, 24, NULL, 0x000040,",
          "10291:         {&hf_btatt_cgm_feature_feature_device_specific_alert,",
          "10292:             {\"Device Specific Alert\", \"btatt.cgm_feature.feature.device_specific_alert\",",
          "10293:             FT_BOOLEAN, 24, NULL, 0x000020,",
          "10296:         {&hf_btatt_cgm_feature_feature_rate_of_increase_decrease_alerts,",
          "10297:             {\"Rate of Increase Decrease Alerts\", \"btatt.cgm_feature.feature.rate_of_increase_decrease_alerts\",",
          "10298:             FT_BOOLEAN, 24, NULL, 0x000010,",
          "10301:         {&hf_btatt_cgm_feature_feature_hyper_alerts,",
          "10302:             {\"Hyper Alerts\", \"btatt.cgm_feature.feature.hyper_alerts\",",
          "10303:             FT_BOOLEAN, 24, NULL, 0x000008,",
          "10306:         {&hf_btatt_cgm_feature_feature_hypo_alerts,",
          "10307:             {\"Hypo Alerts\", \"btatt.cgm_feature.feature.hypo_alerts\",",
          "10308:             FT_BOOLEAN, 24, NULL, 0x000004,",
          "10311:         {&hf_btatt_cgm_feature_feature_patient_high_low_alerts,",
          "10312:             {\"Patient High-Low Alerts\", \"btatt.cgm_feature.feature.patient_high_low_alerts\",",
          "10313:             FT_BOOLEAN, 24, NULL, 0x000002,",
          "10316:         {&hf_btatt_cgm_feature_feature_calibration,",
          "10317:             {\"Calibration\", \"btatt.cgm_feature.feature.calibration\",",
          "10318:             FT_BOOLEAN, 24, NULL, 0x000001,",
          "10321:         {&hf_btatt_cgm_type_and_sample_location,",
          "10322:             {\"Type and Sample Location\", \"btatt.cgm.type_and_sample_location\",",
          "10323:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "10326:         {&hf_btatt_cgm_type,",
          "10327:             {\"Type and Sample Location\", \"btatt.cgm.type_and_sample_location.type\",",
          "10328:             FT_UINT8, BASE_HEX, VALS(cgm_feature_type_vals), 0xF0,",
          "10331:         {&hf_btatt_cgm_sample_location,",
          "10332:             {\"Sample Location\", \"btatt.cgm.type_and_sample_location.sample_location\",",
          "10333:             FT_UINT8, BASE_HEX, VALS(cgm_feature_sample_location_vals), 0x0F,",
          "10336:         {&hf_btatt_cgm_time_offset,",
          "10337:             {\"Time Offset\", \"btatt.cgm.time_offset\",",
          "10338:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10341:         {&hf_btatt_cgm_status,",
          "10342:             {\"Status\", \"btatt.cgm.status\",",
          "10343:             FT_UINT24, BASE_HEX, NULL, 0x0,",
          "10346:         {&hf_btatt_cgm_session_start_time,",
          "10347:             {\"Session Start Time\", \"btatt.cgm.session_start_time\",",
          "10348:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "10351:         {&hf_btatt_cgm_session_run_time,",
          "10352:             {\"Session Run Time\", \"btatt.cgm.session_run_time\",",
          "10353:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10356:         {&hf_btatt_cgm_specific_ops_control_point_opcode,",
          "10357:             {\"Opcode\", \"btatt.cgm_specific_ops_control_point.opcode\",",
          "10358:             FT_UINT8, BASE_HEX, VALS(cgm_specific_ops_control_point_opcode_vals), 0x0,",
          "10361:         {&hf_btatt_cgm_specific_ops_control_point_operand,",
          "10362:             {\"Operand\", \"btatt.cgm_specific_ops_control_point.operand\",",
          "10363:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "10366:         {&hf_btatt_cgm_specific_ops_control_point_operand_communication_interval,",
          "10367:             {\"Communication Interval\", \"btatt.cgm_specific_ops_control_point.operand.communication_interval\",",
          "10368:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "10372:         {&hf_btatt_cgm_specific_ops_control_point_calibration_glucose_concentration,",
          "10373:             {\"Calibration Glucose Concentration\", \"btatt.cgm_specific_ops_control_point.operand.calibration_glucose_concentration\",",
          "10374:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10377:         {&hf_btatt_cgm_specific_ops_control_point_calibration_time,",
          "10378:             {\"Calibration Time\", \"btatt.cgm_specific_ops_control_point.operand.calibration_time\",",
          "10382:         {&hf_btatt_cgm_specific_ops_control_point_next_calibration_time,",
          "10383:             {\"Next Calibration Time\", \"btatt.cgm_specific_ops_control_point.operand.next_calibration_time\",",
          "10387:         {&hf_btatt_cgm_specific_ops_control_point_calibration_data_record_number,",
          "10388:             {\"Calibration Data Record Number\", \"btatt.cgm_specific_ops_control_point.operand.calibration_data_record_number\",",
          "10392:         {&hf_btatt_cgm_specific_ops_control_point_calibration_status,",
          "10393:             {\"Calibration Status\", \"btatt.cgm_specific_ops_control_point.operand.calibration_status\",",
          "10394:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "10397:         {&hf_btatt_cgm_specific_ops_control_point_calibration_status_reserved,",
          "10398:             {\"Reserved\", \"btatt.cgm_specific_ops_control_point.operand.calibration_status.reserved\",",
          "10399:             FT_UINT8, BASE_DEC, NULL, 0xF8,",
          "10402:         {&hf_btatt_cgm_specific_ops_control_point_calibration_status_pending,",
          "10403:             {\"Pending\", \"btatt.cgm_specific_ops_control_point.operand.calibration_status.pending\",",
          "10404:             FT_BOOLEAN, 8, NULL, 0x04,",
          "10407:         {&hf_btatt_cgm_specific_ops_control_point_calibration_status_out_of_range,",
          "10408:             {\"Out of Range\", \"btatt.cgm_specific_ops_control_point.operand.calibration_status.out_of_range\",",
          "10409:             FT_BOOLEAN, 8, NULL, 0x02,",
          "10412:         {&hf_btatt_cgm_specific_ops_control_point_calibration_status_rejected,",
          "10413:             {\"Rejected\", \"btatt.cgm_specific_ops_control_point.operand.calibration_status.rejected\",",
          "10414:             FT_BOOLEAN, 8, NULL, 0x01,",
          "10417:         {&hf_btatt_cgm_specific_ops_control_point_operand_calibration_data_record_number,",
          "10418:             {\"Calibration Data Record Number\", \"btatt.cgm_specific_ops_control_point.operand.calibration_data_record_number\",",
          "10423:         {&hf_btatt_cgm_specific_ops_control_point_operand_alert_level,",
          "10424:             {\"Alert Level [mg/dL]\", \"btatt.cgm_specific_ops_control_point.operand.alert_level\",",
          "10425:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10429:         {&hf_btatt_cgm_specific_ops_control_point_operand_alert_level_rate,",
          "10430:             {\"Alert Level Rate [mg/dL/min]\", \"btatt.cgm_specific_ops_control_point.operand.alert_level_rate\",",
          "10431:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "10434:         {&hf_btatt_cgm_specific_ops_control_point_request_opcode,",
          "10435:             {\"Request Opcode\", \"btatt.cgm_specific_ops_control_point.request_opcode\",",
          "10436:             FT_UINT8, BASE_HEX, VALS(cgm_specific_ops_control_point_opcode_vals), 0x0,",
          "10437:             NULL, HFILL}",
          "10438:         },",
          "10439:         {&hf_btatt_cgm_specific_ops_control_point_response_code,",
          "10440:             {\"Response Code\", \"btatt.cgm_specific_ops_control_point.response_code\",",
          "10441:             FT_UINT8, BASE_HEX, VALS(cgm_specific_ops_control_point_response_code_vals), 0x0,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6861:     };",
          "6863:     static ei_register_info ei[] = {",
          "6869:     };",
          "6871:     static build_valid_func btatt_handle_da_build_value[1] = {btatt_handle_value};",
          "",
          "[Removed Lines]",
          "6864:         { &ei_btatt_uuid_format_unknown, { \"btatt.uuid_format.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown format\", EXPFILL }},",
          "6865:         { &ei_btatt_handle_too_few,      { \"btatt.handle.too_few\",      PI_PROTOCOL, PI_WARN, \"Too few handles, should be 2 or more\", EXPFILL }},",
          "6866:         { &ei_btatt_mtu_exceeded,        { \"btatt.mtu.exceeded\",        PI_PROTOCOL, PI_WARN, \"Packet size exceed current ATT_MTU\", EXPFILL }},",
          "6867:         { &ei_btatt_mtu_full,            { \"btatt.mtu.full\",            PI_PROTOCOL, PI_NOTE, \"Reached ATT_MTU. Attribute value may be longer.\", EXPFILL }},",
          "6868:         { &ei_btatt_undecoded,           { \"btatt.undecoded\",           PI_PROTOCOL, PI_UNDECODED, \"Undecoded\", EXPFILL }},",
          "",
          "[Added Lines]",
          "10468:         { &ei_btatt_uuid_format_unknown,    { \"btatt.uuid_format.unknown\",            PI_PROTOCOL, PI_WARN, \"Unknown format\", EXPFILL }},",
          "10469:         { &ei_btatt_handle_too_few,         { \"btatt.handle.too_few\",                 PI_PROTOCOL, PI_WARN, \"Too few handles, should be 2 or more\", EXPFILL }},",
          "10470:         { &ei_btatt_mtu_exceeded,           { \"btatt.mtu.exceeded\",                   PI_PROTOCOL, PI_WARN, \"Packet size exceed current ATT_MTU\", EXPFILL }},",
          "10471:         { &ei_btatt_mtu_full,               { \"btatt.mtu.full\",                       PI_PROTOCOL, PI_NOTE, \"Reached ATT_MTU. Attribute value may be longer.\", EXPFILL }},",
          "10472:         { &ei_btatt_consent_out_of_bounds,  { \"btatt.consent.out_of_bounds\",          PI_PROTOCOL, PI_WARN, \"Consent Code is out of bounds (0 to 9999)\", EXPFILL }},",
          "10473:         { &ei_btatt_cgm_size_too_small,     { \"btatt.cgm_measurement.size.too_small\", PI_PROTOCOL, PI_WARN, \"Size too small (6 or geater)\", EXPFILL }},",
          "10474:         { &ei_btatt_opcode_invalid_request, { \"btatt.opcode.invalid_request\" ,        PI_PROTOCOL, PI_WARN, \"Invalid request\", EXPFILL }},",
          "10475:         { &ei_btatt_opcode_invalid_response,{ \"btatt.opcode.invalid_response\",        PI_PROTOCOL, PI_WARN, \"Invalid response\", EXPFILL }},",
          "10476:         { &ei_btatt_undecoded,              { \"btatt.undecoded\",                      PI_PROTOCOL, PI_UNDECODED, \"Undecoded\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6953:                 bluetooth_uuid_vals[i_array].value);",
          "6955:         proto_tmp = proto_register_protocol(name, short_name, abbrev);",
          "6958:         dissector_add_for_decode_as(\"btatt.handle\", handle_tmp);",
          "6959:     }",
          "",
          "[Removed Lines]",
          "6956:         handle_tmp = new_register_dissector(short_name, dissect_btgatt, proto_tmp);",
          "",
          "[Added Lines]",
          "10564:         handle_tmp = new_register_dissector(abbrev, dissect_btgatt, proto_tmp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca3fe281f586e07b0e0d47a946a5d5d1b0263f97",
      "candidate_info": {
        "commit_hash": "ca3fe281f586e07b0e0d47a946a5d5d1b0263f97",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ca3fe281f586e07b0e0d47a946a5d5d1b0263f97",
        "files": [
          "epan/dissectors/packet-bluetooth.c",
          "epan/dissectors/packet-bluetooth.h",
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "Bluetooth: ATT: Dissect almost all attributes\n\nChange-Id: Ia388c07150d9664327daf2d1990b4465b5f4ae28\nReviewed-on: https://code.wireshark.org/review/6910\nPetri-Dish: Michal Labedzki <michal.labedzki@tieto.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michal Labedzki <michal.labedzki@tieto.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-bluetooth.c||epan/dissectors/packet-bluetooth.c",
          "epan/dissectors/packet-bluetooth.h||epan/dissectors/packet-bluetooth.h",
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bluetooth.c||epan/dissectors/packet-bluetooth.c": [
          "File: epan/dissectors/packet-bluetooth.c -> epan/dissectors/packet-bluetooth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: static int bluetooth_tap = -1;",
          "66:     { 0x0001,   \"SDP\" },",
          "67:     { 0x0002,   \"UDP\" },",
          "",
          "[Removed Lines]",
          "64: static const value_string bluetooth_uuid_vals[] = {",
          "",
          "[Added Lines]",
          "64: const value_string bluetooth_uuid_vals[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1228:     }",
          "1229: }",
          "1232: static gint",
          "1233: dissect_bluetooth(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1231: gchar *",
          "1232: print_numeric_uuid(uuid_t *uuid)",
          "1233: {",
          "1234:     if (uuid && uuid->size > 0)",
          "1235:         return bytes_to_str(wmem_packet_scope(), uuid->data, uuid->size);",
          "1237:     return NULL;",
          "1238: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bluetooth.h||epan/dissectors/packet-bluetooth.h": [
          "File: epan/dissectors/packet-bluetooth.h -> epan/dissectors/packet-bluetooth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     const gchar  *name;",
          "210: } custom_uuid_t;",
          "214: extern value_string_ext  bluetooth_uuid_vals_ext;",
          "215: extern value_string_ext  bluetooth_company_id_vals_ext;",
          "",
          "[Removed Lines]",
          "212: extern const custom_uuid_t custom_uuid[];",
          "",
          "[Added Lines]",
          "212: extern const value_string   bluetooth_uuid_vals[];",
          "213: extern const custom_uuid_t  custom_uuid[];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: extern uuid_t  get_uuid(tvbuff_t *tvb, gint offset, gint size);",
          "222: extern gchar  *print_uuid(uuid_t *uuid);",
          "224: extern void save_local_device_name_from_eir_ad(tvbuff_t *tvb, gint offset,",
          "225:         packet_info *pinfo, guint8 size, bluetooth_data_t *bluetooth_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: extern gchar  *print_numeric_uuid(uuid_t *uuid);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"config.h\"",
          "29: #include <epan/packet.h>",
          "30: #include <epan/prefs.h>",
          "31: #include <epan/expert.h>",
          "33: #include \"packet-bluetooth.h\"",
          "34: #include \"packet-btl2cap.h\"",
          "35: #include \"packet-btsdp.h\"",
          "38: static int proto_btatt = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <glib.h>",
          "30: #include <glib/gprintf.h>",
          "35: #include <epan/oui.h>",
          "36: #include <epan/decode_as.h>",
          "41: #include \"packet-usb-hid.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: static int hf_btatt_characteristic_properties_read = -1;",
          "73: static int hf_btatt_characteristic_properties_broadcast = -1;",
          "74: static int hf_btatt_information_data = -1;",
          "79: static int hf_btatt_hogp_protocol_mode = -1;",
          "80: static int hf_btatt_hogp_bcd_hid = -1;",
          "81: static int hf_btatt_hogp_b_country_code = -1;",
          "",
          "[Removed Lines]",
          "75: static int hf_btatt_characteristic_configuration_bits = -1;",
          "76: static int hf_btatt_characteristic_configuration_bits_reserved = -1;",
          "77: static int hf_btatt_characteristic_configuration_bits_indication = -1;",
          "78: static int hf_btatt_characteristic_configuration_bits_notification = -1;",
          "",
          "[Added Lines]",
          "81: static int hf_btatt_included_service_handle = -1;",
          "82: static int hf_btatt_characteristic_configuration_client = -1;",
          "83: static int hf_btatt_characteristic_configuration_client_reserved = -1;",
          "84: static int hf_btatt_characteristic_configuration_client_indication = -1;",
          "85: static int hf_btatt_characteristic_configuration_client_notification = -1;",
          "86: static int hf_btatt_characteristic_configuration_server = -1;",
          "87: static int hf_btatt_characteristic_configuration_server_reserved = -1;",
          "88: static int hf_btatt_characteristic_configuration_server_broadcast = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: static int hf_btatt_hogp_flags_reserved = -1;",
          "84: static int hf_btatt_hogp_flags_normally_connectable = -1;",
          "85: static int hf_btatt_hogp_flags_remote_wake = -1;",
          "86: static int hf_btatt_report_reference_report_id = -1;",
          "87: static int hf_btatt_report_reference_report_type = -1;",
          "88: static int hf_request_in_frame = -1;",
          "89: static int hf_response_in_frame = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: static int hf_btatt_hogp_hid_control_point_command = -1;",
          "99: static int hf_btatt_characteristic_user_description = -1;",
          "100: static int hf_btatt_characteristic_extended_properties = -1;",
          "101: static int hf_btatt_characteristic_extended_properties_reserved = -1;",
          "102: static int hf_btatt_characteristic_extended_properties_writable_auxiliaries = -1;",
          "103: static int hf_btatt_characteristic_extended_properties_reliable_write = -1;",
          "104: static int hf_btatt_characteristic_presentation_format = -1;",
          "105: static int hf_btatt_characteristic_presentation_exponent = -1;",
          "106: static int hf_btatt_characteristic_presentation_unit = -1;",
          "107: static int hf_btatt_characteristic_presentation_namespace = -1;",
          "108: static int hf_btatt_characteristic_presentation_namespace_description_btsig = -1;",
          "109: static int hf_btatt_characteristic_presentation_namespace_description = -1;",
          "110: static int hf_btatt_esp_trigger_logic = -1;",
          "111: static int hf_btatt_esp_condition = -1;",
          "112: static int hf_btatt_esp_operand = -1;",
          "113: static int hf_btatt_esp_flags = -1;",
          "114: static int hf_btatt_esp_sampling_function = -1;",
          "115: static int hf_btatt_esp_measurement_period = -1;",
          "116: static int hf_btatt_esp_update_interval = -1;",
          "117: static int hf_btatt_esp_application = -1;",
          "118: static int hf_btatt_esp_measurement_uncertainty = -1;",
          "119: static int hf_btatt_device_name = -1;",
          "120: static int hf_btatt_appearance = -1;",
          "121: static int hf_btatt_appearance_category = -1;",
          "122: static int hf_btatt_appearance_subcategory = -1;",
          "123: static int hf_btatt_appearance_subcategory_watch = -1;",
          "124: static int hf_btatt_appearance_subcategory_thermometer = -1;",
          "125: static int hf_btatt_appearance_subcategory_heart_rate = -1;",
          "126: static int hf_btatt_appearance_subcategory_blood_pressure = -1;",
          "127: static int hf_btatt_appearance_subcategory_hid = -1;",
          "128: static int hf_btatt_appearance_subcategory_running_walking_sensor = -1;",
          "129: static int hf_btatt_appearance_subcategory_cycling = -1;",
          "130: static int hf_btatt_appearance_subcategory_pulse_oximeter = -1;",
          "131: static int hf_btatt_appearance_subcategory_outdoor_sports_activity = -1;",
          "132: static int hf_btatt_peripheral_privacy_flag = -1;",
          "133: static int hf_btatt_minimum_connection_interval = -1;",
          "134: static int hf_btatt_maximum_connection_interval = -1;",
          "135: static int hf_btatt_slave_latency = -1;",
          "136: static int hf_btatt_connection_supervision_timeout_multiplier = -1;",
          "137: static int hf_btatt_reconnection_address = -1;",
          "138: static int hf_btatt_alert_level = -1;",
          "139: static int hf_btatt_tx_power_level = -1;",
          "140: static int hf_btatt_year = -1;",
          "141: static int hf_btatt_month = -1;",
          "142: static int hf_btatt_day = -1;",
          "143: static int hf_btatt_hours = -1;",
          "144: static int hf_btatt_minutes = -1;",
          "145: static int hf_btatt_seconds = -1;",
          "146: static int hf_btatt_day_of_week = -1;",
          "147: static int hf_btatt_fractions256 = -1;",
          "148: static int hf_btatt_dst_offset = -1;",
          "149: static int hf_btatt_model_number_string = -1;",
          "150: static int hf_btatt_serial_number_string = -1;",
          "151: static int hf_btatt_firmware_revision_string = -1;",
          "152: static int hf_btatt_hardware_revision_string = -1;",
          "153: static int hf_btatt_software_revision_string = -1;",
          "154: static int hf_btatt_manufacturer_string = -1;",
          "155: static int hf_btatt_system_id_manufacturer_identifier = -1;",
          "156: static int hf_btatt_system_id_organizationally_unique_identifier = -1;",
          "157: static int hf_btatt_timezone = -1;",
          "158: static int hf_btatt_time_accuracy = -1;",
          "159: static int hf_btatt_time_source = -1;",
          "160: static int hf_btatt_time_days_since_update = -1;",
          "161: static int hf_btatt_time_hours_since_update = -1;",
          "162: static int hf_btatt_time_update_control_point = -1;",
          "163: static int hf_btatt_time_current_state = -1;",
          "164: static int hf_btatt_time_result = -1;",
          "165: static int hf_btatt_battery_level = -1;",
          "166: static int hf_btatt_temperature_type = -1;",
          "167: static int hf_btatt_measurement_interval = -1;",
          "168: static int hf_btatt_time_adjust_reason = -1;",
          "169: static int hf_btatt_time_adjust_reason_reserved = -1;",
          "170: static int hf_btatt_time_adjust_reason_change_of_dst = -1;",
          "171: static int hf_btatt_time_adjust_reason_change_of_timezone = -1;",
          "172: static int hf_btatt_time_adjust_reason_external_reference_time_update = -1;",
          "173: static int hf_btatt_time_adjust_reason_manual_time_update = -1;",
          "174: static int hf_btatt_magnetic_declination = -1;",
          "175: static int hf_btatt_scan_refresh = -1;",
          "176: static int hf_btatt_body_sensor_location = -1;",
          "177: static int hf_btatt_heart_rate_control_point = -1;",
          "178: static int hf_btatt_alert_status = -1;",
          "179: static int hf_btatt_alert_status_reserved = -1;",
          "180: static int hf_btatt_alert_status_display_alert_status = -1;",
          "181: static int hf_btatt_alert_status_vibrate_state = -1;",
          "182: static int hf_btatt_alert_status_ringer_state = -1;",
          "183: static int hf_btatt_ringer_control_point = -1;",
          "184: static int hf_btatt_ringer_setting = -1;",
          "185: static int hf_btatt_alert_category_id_bitmask_1 = -1;",
          "186: static int hf_btatt_alert_category_id_bitmask_1_schedule = -1;",
          "187: static int hf_btatt_alert_category_id_bitmask_1_voice_mail = -1;",
          "188: static int hf_btatt_alert_category_id_bitmask_1_sms_mms = -1;",
          "189: static int hf_btatt_alert_category_id_bitmask_1_missed_call = -1;",
          "190: static int hf_btatt_alert_category_id_bitmask_1_call = -1;",
          "191: static int hf_btatt_alert_category_id_bitmask_1_news = -1;",
          "192: static int hf_btatt_alert_category_id_bitmask_1_email = -1;",
          "193: static int hf_btatt_alert_category_id_bitmask_1_simple_alert = -1;",
          "194: static int hf_btatt_alert_category_id_bitmask_2 = -1;",
          "195: static int hf_btatt_alert_category_id_bitmask_2_reserved = -1;",
          "196: static int hf_btatt_alert_category_id_bitmask_2_instant_message = -1;",
          "197: static int hf_btatt_alert_category_id_bitmask_2_high_prioritized_alert = -1;",
          "198: static int hf_btatt_alert_category_id = -1;",
          "199: static int hf_btatt_alert_command_id = -1;",
          "200: static int hf_btatt_alert_unread_count = -1;",
          "201: static int hf_btatt_alert_number_of_new_alert = -1;",
          "202: static int hf_btatt_alert_text_string_information = -1;",
          "203: static int hf_btatt_blood_pressure_feature = -1;",
          "204: static int hf_btatt_blood_pressure_feature_reserved = -1;",
          "205: static int hf_btatt_blood_pressure_feature_multiple_bond = -1;",
          "206: static int hf_btatt_blood_pressure_feature_measurement_position_detection = -1;",
          "207: static int hf_btatt_blood_pressure_feature_puls_rate_range = -1;",
          "208: static int hf_btatt_blood_pressure_feature_irregular_pulse_detection = -1;",
          "209: static int hf_btatt_blood_pressure_feature_cuff_fit_detection = -1;",
          "210: static int hf_btatt_blood_pressure_feature_body_movement_detection = -1;",
          "211: static int hf_btatt_le_scan_interval = -1;",
          "212: static int hf_btatt_le_scan_window = -1;",
          "213: static int hf_btatt_pnp_id_vendor_id_source = -1;",
          "214: static int hf_btatt_pnp_id_vendor_id = -1;",
          "215: static int hf_btatt_pnp_id_vendor_id_bluetooth_sig = -1;",
          "216: static int hf_btatt_pnp_id_vendor_id_usb_forum = -1;",
          "217: static int hf_btatt_pnp_id_product_id = -1;",
          "218: static int hf_btatt_pnp_id_product_version = -1;",
          "219: static int hf_btatt_glucose_feature = -1;",
          "220: static int hf_btatt_glucose_feature_reserved = -1;",
          "221: static int hf_btatt_glucose_feature_multiple_bond = -1;",
          "222: static int hf_btatt_glucose_feature_time_fault = -1;",
          "223: static int hf_btatt_glucose_feature_general_device_fault = -1;",
          "224: static int hf_btatt_glucose_feature_sensor_read_interrupt_detection = -1;",
          "225: static int hf_btatt_glucose_feature_sensor_temperature_high_low_detection = -1;",
          "226: static int hf_btatt_glucose_feature_sensor_result_high_low_detection = -1;",
          "227: static int hf_btatt_glucose_feature_sensor_strip_type_error_detection = -1;",
          "228: static int hf_btatt_glucose_feature_sensor_strip_insertion_error_detection = -1;",
          "229: static int hf_btatt_glucose_feature_sensor_sample_size = -1;",
          "230: static int hf_btatt_glucose_feature_sensor_malfunction_detection = -1;",
          "231: static int hf_btatt_glucose_feature_low_battery_detection_during_measurement = -1;",
          "232: static int hf_btatt_rsc_feature = -1;",
          "233: static int hf_btatt_rsc_feature_reserved = -1;",
          "234: static int hf_btatt_rsc_feature_multiple_sensor_locations = -1;",
          "235: static int hf_btatt_rsc_feature_calibration_procedure = -1;",
          "236: static int hf_btatt_rsc_feature_walking_or_running_status = -1;",
          "237: static int hf_btatt_rsc_feature_total_distance_measurement = -1;",
          "238: static int hf_btatt_rsc_feature_instantaneous_stride_length_measurement = -1;",
          "239: static int hf_btatt_csc_feature = -1;",
          "240: static int hf_btatt_csc_feature_reserved = -1;",
          "241: static int hf_btatt_csc_feature_multiple_sensor_locations = -1;",
          "242: static int hf_btatt_csc_feature_crank_revolution_data = -1;",
          "243: static int hf_btatt_csc_feature_wheel_revolution_data = -1;",
          "244: static int hf_btatt_sensor_location = -1;",
          "245: static int hf_btatt_elevation = -1;",
          "246: static int hf_btatt_pressure = -1;",
          "247: static int hf_btatt_temperature = -1;",
          "248: static int hf_btatt_humidity = -1;",
          "249: static int hf_btatt_true_wind_speed = -1;",
          "250: static int hf_btatt_true_wind_direction = -1;",
          "251: static int hf_btatt_apparent_wind_speed = -1;",
          "252: static int hf_btatt_apparent_wind_direction = -1;",
          "253: static int hf_btatt_gust_factor = -1;",
          "254: static int hf_btatt_pollen_concentration = -1;",
          "255: static int hf_btatt_uv_index = -1;",
          "256: static int hf_btatt_irradiance = -1;",
          "257: static int hf_btatt_rainfall = -1;",
          "258: static int hf_btatt_wind_chill = -1;",
          "259: static int hf_btatt_heart_index = -1;",
          "260: static int hf_btatt_dew_point = -1;",
          "261: static int hf_btatt_descriptor_value_changed_flags = -1;",
          "262: static int hf_btatt_descriptor_value_changed_flags_reserved = -1;",
          "263: static int hf_btatt_descriptor_value_changed_flags_change_to_characteristic_user_description_descriptor = -1;",
          "264: static int hf_btatt_descriptor_value_changed_flags_change_to_es_measurement_descriptor = -1;",
          "265: static int hf_btatt_descriptor_value_changed_flags_change_to_es_configuration_descriptor = -1;",
          "266: static int hf_btatt_descriptor_value_changed_flags_change_to_one_or_more_es_trigger_setting_descriptors = -1;",
          "267: static int hf_btatt_descriptor_value_changed_flags_source_of_change = -1;",
          "268: static int hf_btatt_aerobic_heart_rate_lower_limit = -1;",
          "269: static int hf_btatt_aerobic_threshold = -1;",
          "270: static int hf_btatt_age = -1;",
          "271: static int hf_btatt_anaerobic_heart_rate_lower_limit = -1;",
          "272: static int hf_btatt_anaerobic_heart_rate_upper_limit = -1;",
          "273: static int hf_btatt_anaerobic_threshold = -1;",
          "274: static int hf_btatt_aerobic_heart_rate_upper_limit = -1;",
          "275: static int hf_btatt_email_address = -1;",
          "276: static int hf_btatt_fat_burn_heart_rate_lower_limit = -1;",
          "277: static int hf_btatt_fat_burn_heart_rate_upper_limit = -1;",
          "278: static int hf_btatt_first_name = -1;",
          "279: static int hf_btatt_five_zone_heart_rate_limits_very_light_light_limit = -1;",
          "280: static int hf_btatt_five_zone_heart_rate_limits_light_moderate_limit = -1;",
          "281: static int hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit = -1;",
          "282: static int hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit = -1;",
          "283: static int hf_btatt_gender = -1;",
          "284: static int hf_btatt_heart_rate_max = -1;",
          "285: static int hf_btatt_height = -1;",
          "286: static int hf_btatt_hip_circumference = -1;",
          "287: static int hf_btatt_last_name = -1;",
          "288: static int hf_btatt_maximum_recommended_heart_rate = -1;",
          "289: static int hf_btatt_resting_heart_rate = -1;",
          "290: static int hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds = -1;",
          "291: static int hf_btatt_three_zone_heart_rate_limits_light_moderate = -1;",
          "292: static int hf_btatt_three_zone_heart_rate_limits_moderate_hard = -1;",
          "293: static int hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness = -1;",
          "294: static int hf_btatt_vo2_max =-1;",
          "295: static int hf_btatt_waist_circumference =-1;",
          "296: static int hf_btatt_weight =-1;",
          "297: static int hf_btatt_database_change_increment =-1;",
          "298: static int hf_btatt_user_index = -1;",
          "299: static int hf_btatt_magnetic_flux_density_x = -1;",
          "300: static int hf_btatt_magnetic_flux_density_y = -1;",
          "301: static int hf_btatt_magnetic_flux_density_z = -1;",
          "302: static int hf_btatt_language = -1;",
          "303: static int hf_btatt_barometric_pressure_trend = -1;",
          "304: static int hf_btatt_central_address_resolution = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     NULL",
          "108: };",
          "114:     NULL",
          "115: };",
          "",
          "[Removed Lines]",
          "110: static const int *hfx_btatt_characteristic_configuration_bits[] = {",
          "111:     &hf_btatt_characteristic_configuration_bits_reserved,",
          "112:     &hf_btatt_characteristic_configuration_bits_indication,",
          "113:     &hf_btatt_characteristic_configuration_bits_notification,",
          "",
          "[Added Lines]",
          "327: static const int *hfx_btatt_characteristic_configuration_client[] = {",
          "328:     &hf_btatt_characteristic_configuration_client_reserved,",
          "329:     &hf_btatt_characteristic_configuration_client_indication,",
          "330:     &hf_btatt_characteristic_configuration_client_notification,",
          "331:     NULL",
          "332: };",
          "334: static const int *hfx_btatt_characteristic_configuration_server[] = {",
          "335:     &hf_btatt_characteristic_configuration_server_reserved,",
          "336:     &hf_btatt_characteristic_configuration_server_broadcast,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:     NULL",
          "122: };",
          "126: static gint ett_btatt = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: static const int *hfx_btatt_characteristic_extended_properties[] = {",
          "348:     &hf_btatt_characteristic_extended_properties_reserved,",
          "349:     &hf_btatt_characteristic_extended_properties_writable_auxiliaries,",
          "350:     &hf_btatt_characteristic_extended_properties_reliable_write,",
          "351:     NULL",
          "352: };",
          "354: static const int *hfx_btatt_appearance[] = {",
          "355:     &hf_btatt_appearance_category,",
          "356:     &hf_btatt_appearance_subcategory,",
          "357:     NULL",
          "358: };",
          "360: static const int *hfx_btatt_appearance_watch[] = {",
          "361:     &hf_btatt_appearance_category,",
          "362:     &hf_btatt_appearance_subcategory_watch,",
          "363:     NULL",
          "364: };",
          "366: static const int *hfx_btatt_appearance_thermometer[] = {",
          "367:     &hf_btatt_appearance_category,",
          "368:     &hf_btatt_appearance_subcategory_thermometer,",
          "369:     NULL",
          "370: };",
          "372: static const int *hfx_btatt_appearance_heart_rate[] = {",
          "373:     &hf_btatt_appearance_category,",
          "374:     &hf_btatt_appearance_subcategory_heart_rate,",
          "375:     NULL",
          "376: };",
          "378: static const int *hfx_btatt_appearance_blood_pressure[] = {",
          "379:     &hf_btatt_appearance_category,",
          "380:     &hf_btatt_appearance_subcategory_blood_pressure,",
          "381:     NULL",
          "382: };",
          "384: static const int *hfx_btatt_appearance_hid[] = {",
          "385:     &hf_btatt_appearance_category,",
          "386:     &hf_btatt_appearance_subcategory_hid,",
          "387:     NULL",
          "388: };",
          "390: static const int *hfx_btatt_appearance_running_walking_sensor[] = {",
          "391:     &hf_btatt_appearance_category,",
          "392:     &hf_btatt_appearance_subcategory_running_walking_sensor,",
          "393:     NULL",
          "394: };",
          "396: static const int *hfx_btatt_appearance_cycling[] = {",
          "397:     &hf_btatt_appearance_category,",
          "398:     &hf_btatt_appearance_subcategory_cycling,",
          "399:     NULL",
          "400: };",
          "402: static const int *hfx_btatt_appearance_pulse_oximeter[] = {",
          "403:     &hf_btatt_appearance_category,",
          "404:     &hf_btatt_appearance_subcategory_pulse_oximeter,",
          "405:     NULL",
          "406: };",
          "408: static const int *hfx_btatt_appearance_outdoor_sports_activity[] = {",
          "409:     &hf_btatt_appearance_category,",
          "410:     &hf_btatt_appearance_subcategory_outdoor_sports_activity,",
          "411:     NULL",
          "412: };",
          "414: static const int *hfx_btatt_time_adjust_reason[] = {",
          "415:     &hf_btatt_time_adjust_reason_reserved,",
          "416:     &hf_btatt_time_adjust_reason_change_of_dst,",
          "417:     &hf_btatt_time_adjust_reason_change_of_timezone,",
          "418:     &hf_btatt_time_adjust_reason_external_reference_time_update,",
          "419:     &hf_btatt_time_adjust_reason_manual_time_update,",
          "420:     NULL",
          "421: };",
          "423: static const int *hfx_btatt_alert_status[] = {",
          "424:     &hf_btatt_alert_status_reserved,",
          "425:     &hf_btatt_alert_status_display_alert_status,",
          "426:     &hf_btatt_alert_status_vibrate_state,",
          "427:     &hf_btatt_alert_status_ringer_state,",
          "428:     NULL",
          "429: };",
          "431: static const int *hfx_btatt_alert_category_id_bitmask_1[] = {",
          "432:     &hf_btatt_alert_category_id_bitmask_1_schedule,",
          "433:     &hf_btatt_alert_category_id_bitmask_1_voice_mail,",
          "434:     &hf_btatt_alert_category_id_bitmask_1_sms_mms,",
          "435:     &hf_btatt_alert_category_id_bitmask_1_missed_call,",
          "436:     &hf_btatt_alert_category_id_bitmask_1_call,",
          "437:     &hf_btatt_alert_category_id_bitmask_1_news,",
          "438:     &hf_btatt_alert_category_id_bitmask_1_email,",
          "439:     &hf_btatt_alert_category_id_bitmask_1_simple_alert,",
          "440:     NULL",
          "441: };",
          "443: static const int *hfx_btatt_alert_category_id_bitmask_2[] = {",
          "444:     &hf_btatt_alert_category_id_bitmask_2_reserved,",
          "445:     &hf_btatt_alert_category_id_bitmask_2_instant_message,",
          "446:     &hf_btatt_alert_category_id_bitmask_2_high_prioritized_alert,",
          "447:     NULL",
          "448: };",
          "450: static const int *hfx_btatt_blood_pressure_feature[] = {",
          "451:     &hf_btatt_blood_pressure_feature_reserved,",
          "452:     &hf_btatt_blood_pressure_feature_multiple_bond,",
          "453:     &hf_btatt_blood_pressure_feature_measurement_position_detection,",
          "454:     &hf_btatt_blood_pressure_feature_puls_rate_range,",
          "455:     &hf_btatt_blood_pressure_feature_irregular_pulse_detection,",
          "456:     &hf_btatt_blood_pressure_feature_cuff_fit_detection,",
          "457:     &hf_btatt_blood_pressure_feature_body_movement_detection,",
          "458:     NULL",
          "459: };",
          "461: static const int *hfx_btatt_glucose_feature[] = {",
          "462:     &hf_btatt_glucose_feature_reserved,",
          "463:     &hf_btatt_glucose_feature_multiple_bond,",
          "464:     &hf_btatt_glucose_feature_time_fault,",
          "465:     &hf_btatt_glucose_feature_general_device_fault,",
          "466:     &hf_btatt_glucose_feature_sensor_read_interrupt_detection,",
          "467:     &hf_btatt_glucose_feature_sensor_temperature_high_low_detection,",
          "468:     &hf_btatt_glucose_feature_sensor_result_high_low_detection,",
          "469:     &hf_btatt_glucose_feature_sensor_strip_type_error_detection,",
          "470:     &hf_btatt_glucose_feature_sensor_strip_insertion_error_detection,",
          "471:     &hf_btatt_glucose_feature_sensor_sample_size,",
          "472:     &hf_btatt_glucose_feature_sensor_malfunction_detection,",
          "473:     &hf_btatt_glucose_feature_low_battery_detection_during_measurement,",
          "474:     NULL",
          "475: };",
          "477: static const int *hfx_btatt_rsc_feature[] = {",
          "478:     &hf_btatt_rsc_feature_reserved,",
          "479:     &hf_btatt_rsc_feature_multiple_sensor_locations,",
          "480:     &hf_btatt_rsc_feature_calibration_procedure,",
          "481:     &hf_btatt_rsc_feature_walking_or_running_status,",
          "482:     &hf_btatt_rsc_feature_total_distance_measurement,",
          "483:     &hf_btatt_rsc_feature_instantaneous_stride_length_measurement,",
          "484:     NULL",
          "485: };",
          "487: static const int *hfx_btatt_csc_feature[] = {",
          "488:     &hf_btatt_csc_feature_reserved,",
          "489:     &hf_btatt_csc_feature_multiple_sensor_locations,",
          "490:     &hf_btatt_csc_feature_crank_revolution_data,",
          "491:     &hf_btatt_csc_feature_wheel_revolution_data,",
          "492:     NULL",
          "493: };",
          "495: static const int *hfx_btatt_descriptor_value_changed_flags[] = {",
          "496:     &hf_btatt_descriptor_value_changed_flags_reserved,",
          "497:     &hf_btatt_descriptor_value_changed_flags_change_to_characteristic_user_description_descriptor,",
          "498:     &hf_btatt_descriptor_value_changed_flags_change_to_es_measurement_descriptor,",
          "499:     &hf_btatt_descriptor_value_changed_flags_change_to_es_configuration_descriptor,",
          "500:     &hf_btatt_descriptor_value_changed_flags_change_to_one_or_more_es_trigger_setting_descriptors,",
          "501:     &hf_btatt_descriptor_value_changed_flags_source_of_change,",
          "502:     NULL",
          "503: };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129: static gint ett_btatt_opcode = -1;",
          "130: static gint ett_btatt_handle = -1;",
          "131: static gint ett_btatt_characteristic_properties = -1;",
          "133: static expert_field ei_btatt_uuid_format_unknown = EI_INIT;",
          "134: static expert_field ei_btatt_handle_too_few = EI_INIT;",
          "136: static wmem_tree_t *requests = NULL;",
          "137: static wmem_tree_t *handle_to_uuid = NULL;",
          "139: static dissector_handle_t btatt_handle;",
          "142: static const value_string opcode_vals[] = {",
          "143:     {0x01, \"Error Response\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513: static gint ett_btgatt = -1;",
          "517: static expert_field ei_btatt_mtu_exceeded = EI_INIT;",
          "518: static expert_field ei_btatt_mtu_full = EI_INIT;",
          "520: static wmem_tree_t *mtus = NULL;",
          "522: static wmem_tree_t *fragments = NULL;",
          "527: static dissector_table_t att_handle_dissector_table;",
          "528: static dissector_table_t att_uuid16_dissector_table;",
          "529: static dissector_table_t att_uuid128_dissector_table;",
          "531: extern value_string_ext ext_usb_vendors_vals;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "222:     {0x0, NULL}",
          "223: };",
          "226: union request_parameters_union {",
          "227:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617: static const value_string characteristic_presentation_format_vals[] = {",
          "618:     {0x01, \"unsigned 1-bit\"},",
          "619:     {0x02, \"unsigned 2-bit integer\"},",
          "620:     {0x03, \"unsigned 4-bit integer\"},",
          "621:     {0x04, \"unsigned 8-bit integer\"},",
          "622:     {0x05, \"unsigned 12-bit integer\"},",
          "623:     {0x06, \"unsigned 16-bit integer\"},",
          "624:     {0x07, \"unsigned 24-bit integer\"},",
          "625:     {0x08, \"unsigned 32-bit integer\"},",
          "626:     {0x09, \"unsigned 48-bit integer\"},",
          "627:     {0x0A, \"unsigned 64-bit integer\"},",
          "628:     {0x0B, \"unsigned 128-bit integer\"},",
          "629:     {0x0C, \"signed 8-bit integer\"},",
          "630:     {0x0D, \"signed 12-bit integer\"},",
          "631:     {0x0E, \"signed 16-bit integer\"},",
          "632:     {0x0F, \"signed 24-bit integer\"},",
          "633:     {0x10, \"signed 32-bit integer\"},",
          "634:     {0x11, \"signed 48-bit integer\"},",
          "635:     {0x12, \"signed 64-bit integer\"},",
          "636:     {0x13, \"signed 128-bit integer\"},",
          "637:     {0x14, \"IEEE-754 32-bit floating point\"},",
          "638:     {0x15, \"IEEE-754 64-bit floating point\"},",
          "639:     {0x16, \"IEEE-11073 16-bit SFLOAT\"},",
          "640:     {0x17, \"IEEE-11073 32-bit FLOAT\"},",
          "641:     {0x18, \"IEEE-20601 format\"},",
          "642:     {0x19, \"UTF-8 string\"},",
          "643:     {0x1A, \"UTF-16 string\"},",
          "644:     {0x1B, \"Opaque structure\"},",
          "645:     {0x0, NULL}",
          "646: };",
          "648: static const value_string characteristic_presentation_namespace_vals[] = {",
          "649:     {0x01, \"Bluetooth SIG\"},",
          "650:     {0x0, NULL}",
          "651: };",
          "653: static const value_string characteristic_presentation_namespace_description_btsig_vals[] = {",
          "654:     {0x0000, \"unknown\"},",
          "655:     {0x0001, \"first\"},",
          "656:     {0x0002, \"second\"},",
          "657:     {0x0003, \"third\"},",
          "658:     {0x0004, \"fourth\"},",
          "659:     {0x0005, \"fifth\"},",
          "660:     {0x0006, \"sixth\"},",
          "661:     {0x0007, \"seventh\"},",
          "662:     {0x0008, \"eighth\"},",
          "663:     {0x0009, \"nineth\"},",
          "664:     {0x000a, \"tenth\"},",
          "665:     {0x000b, \"eleventh\"},",
          "666:     {0x000c, \"twelveth\"},",
          "667:     {0x000d, \"thirteenth\"},",
          "668:     {0x000e, \"fourteenth\"},",
          "669:     {0x000f, \"fifteenth\"},",
          "670:     {0x0010, \"sixteenth\"},",
          "671:     {0x0011, \"seventeenth\"},",
          "672:     {0x0012, \"eighteenth\"},",
          "673:     {0x0013, \"nineteenth\"},",
          "674:     {0x0014, \"twentieth\"},",
          "675:     {0x0015, \"twenty-first\"},",
          "676:     {0x0016, \"twenty-second\"},",
          "677:     {0x0017, \"twenty-third\"},",
          "678:     {0x0018, \"twenty-fourth\"},",
          "679:     {0x0019, \"twenty-fifth\"},",
          "680:     {0x001a, \"twenty-sixth\"},",
          "681:     {0x001b, \"twenty-seventh\"},",
          "682:     {0x001c, \"twenty-eighth\"},",
          "683:     {0x001d, \"twenty-nineth\"},",
          "684:     {0x001e, \"thirtieth\"},",
          "685:     {0x001f, \"thirty-first\"},",
          "686:     {0x0020, \"thirty-second\"},",
          "687:     {0x0021, \"thirty-third\"},",
          "688:     {0x0022, \"thirty-fourth\"},",
          "689:     {0x0023, \"thirty-fifth\"},",
          "690:     {0x0024, \"thirty-sixth\"},",
          "691:     {0x0025, \"thirty-seventh\"},",
          "692:     {0x0026, \"thirty-eighth\"},",
          "693:     {0x0027, \"thirty-nineth\"},",
          "694:     {0x0028, \"fortieth\"},",
          "695:     {0x0029, \"fourty-first\"},",
          "696:     {0x002a, \"fourty-second\"},",
          "697:     {0x002b, \"fourty-third\"},",
          "698:     {0x002c, \"fourty-fourth\"},",
          "699:     {0x002d, \"fourty-fifth\"},",
          "700:     {0x002e, \"fourty-sixth\"},",
          "701:     {0x002f, \"fourty-seventh\"},",
          "702:     {0x0030, \"fourty-eighth\"},",
          "703:     {0x0031, \"fourty-nineth\"},",
          "704:     {0x0032, \"fiftieth\"},",
          "705:     {0x0033, \"fifty-first\"},",
          "706:     {0x0034, \"fifty-second\"},",
          "707:     {0x0035, \"fifty-third\"},",
          "708:     {0x0036, \"fifty-fourth\"},",
          "709:     {0x0037, \"fifty-fifth\"},",
          "710:     {0x0038, \"fifty-sixth\"},",
          "711:     {0x0039, \"fifty-seventh\"},",
          "712:     {0x003a, \"fifty-eighth\"},",
          "713:     {0x003b, \"fifty-nineth\"},",
          "714:     {0x003c, \"sixtieth\"},",
          "715:     {0x003d, \"sixty-first\"},",
          "716:     {0x003e, \"sixty-second\"},",
          "717:     {0x003f, \"sixty-third\"},",
          "718:     {0x0040, \"sixty-fourth\"},",
          "719:     {0x0041, \"sixty-fifth\"},",
          "720:     {0x0042, \"sixty-sixth\"},",
          "721:     {0x0043, \"sixty-seventh\"},",
          "722:     {0x0044, \"sixty-eighth\"},",
          "723:     {0x0045, \"sixty-nineth\"},",
          "724:     {0x0046, \"seventieth\"},",
          "725:     {0x0047, \"seventy-first\"},",
          "726:     {0x0048, \"seventy-second\"},",
          "727:     {0x0049, \"seventy-third\"},",
          "728:     {0x004a, \"seventy-fourth\"},",
          "729:     {0x004b, \"seventy-fifth\"},",
          "730:     {0x004c, \"seventy-sixth\"},",
          "731:     {0x004d, \"seventy-seventh\"},",
          "732:     {0x004e, \"seventy-eighth\"},",
          "733:     {0x004f, \"seventy-nineth\"},",
          "734:     {0x0050, \"eightieth\"},",
          "735:     {0x0051, \"eighty-first\"},",
          "736:     {0x0052, \"eighty-second\"},",
          "737:     {0x0053, \"eighty-third\"},",
          "738:     {0x0054, \"eighty-fourth\"},",
          "739:     {0x0055, \"eighty-fifth\"},",
          "740:     {0x0056, \"eighty-sixth\"},",
          "741:     {0x0057, \"eighty-seventh\"},",
          "742:     {0x0058, \"eighty-eighth\"},",
          "743:     {0x0059, \"eighty-nineth\"},",
          "744:     {0x005a, \"ninetieth\"},",
          "745:     {0x005b, \"ninety-first\"},",
          "746:     {0x005c, \"ninety-second\"},",
          "747:     {0x005d, \"ninety-third\"},",
          "748:     {0x005e, \"ninety-fourth\"},",
          "749:     {0x005f, \"ninety-fifth\"},",
          "750:     {0x0060, \"ninety-sixth\"},",
          "751:     {0x0061, \"ninety-seventh\"},",
          "752:     {0x0062, \"ninety-eighth\"},",
          "753:     {0x0063, \"ninety-nineth\"},",
          "754:     {0x0064, \"one-hundredth\"},",
          "755:     {0x0065, \"one-hundred-and-first\"},",
          "756:     {0x0066, \"one-hundred-and-second\"},",
          "757:     {0x0067, \"one-hundred-and-third\"},",
          "758:     {0x0068, \"one-hundred-and-fourth\"},",
          "759:     {0x0069, \"one-hundred-and-fifth\"},",
          "760:     {0x006a, \"one-hundred-and-sixth\"},",
          "761:     {0x006b, \"one-hundred-and-seventh\"},",
          "762:     {0x006c, \"one-hundred-and-eighth\"},",
          "763:     {0x006d, \"one-hundred-and-nineth\"},",
          "764:     {0x006e, \"one-hundred-and-tenth\"},",
          "765:     {0x006f, \"one-hundred-and-eleventh\"},",
          "766:     {0x0070, \"one-hundred-and-twelveth\"},",
          "767:     {0x0071, \"one-hundred-and-thirteenth\"},",
          "768:     {0x0072, \"one-hundred-and-fourteenth\"},",
          "769:     {0x0073, \"one-hundred-and-fifteenth\"},",
          "770:     {0x0074, \"one-hundred-and-sixteenth\"},",
          "771:     {0x0075, \"one-hundred-and-seventeenth\"},",
          "772:     {0x0076, \"one-hundred-and-eighteenth\"},",
          "773:     {0x0077, \"one-hundred-and-nineteenth\"},",
          "774:     {0x0078, \"one-hundred-twentieth\"},",
          "775:     {0x0079, \"one-hundred-and-twenty-first\"},",
          "776:     {0x007a, \"one-hundred-and-twenty-second\"},",
          "777:     {0x007b, \"one-hundred-and-twenty-third\"},",
          "778:     {0x007c, \"one-hundred-and-twenty-fourth\"},",
          "779:     {0x007d, \"one-hundred-and-twenty-fifth\"},",
          "780:     {0x007e, \"one-hundred-and-twenty-sixth\"},",
          "781:     {0x007f, \"one-hundred-and-twenty-seventh\"},",
          "782:     {0x0080, \"one-hundred-and-twenty-eighth\"},",
          "783:     {0x0081, \"one-hundred-and-twenty-nineth\"},",
          "784:     {0x0082, \"one-hundred-thirtieth\"},",
          "785:     {0x0083, \"one-hundred-and-thirty-first\"},",
          "786:     {0x0084, \"one-hundred-and-thirty-second\"},",
          "787:     {0x0085, \"one-hundred-and-thirty-third\"},",
          "788:     {0x0086, \"one-hundred-and-thirty-fourth\"},",
          "789:     {0x0087, \"one-hundred-and-thirty-fifth\"},",
          "790:     {0x0088, \"one-hundred-and-thirty-sixth\"},",
          "791:     {0x0089, \"one-hundred-and-thirty-seventh\"},",
          "792:     {0x008a, \"one-hundred-and-thirty-eighth\"},",
          "793:     {0x008b, \"one-hundred-and-thirty-nineth\"},",
          "794:     {0x008c, \"one-hundred-fortieth\"},",
          "795:     {0x008d, \"one-hundred-and-fourty-first\"},",
          "796:     {0x008e, \"one-hundred-and-fourty-second\"},",
          "797:     {0x008f, \"one-hundred-and-fourty-third\"},",
          "798:     {0x0090, \"one-hundred-and-fourty-fourth\"},",
          "799:     {0x0091, \"one-hundred-and-fourty-fifth\"},",
          "800:     {0x0092, \"one-hundred-and-fourty-sixth\"},",
          "801:     {0x0093, \"one-hundred-and-fourty-seventh\"},",
          "802:     {0x0094, \"one-hundred-and-fourty-eighth\"},",
          "803:     {0x0095, \"one-hundred-and-fourty-nineth\"},",
          "804:     {0x0096, \"one-hundred-fiftieth\"},",
          "805:     {0x0097, \"one-hundred-and-fifty-first\"},",
          "806:     {0x0098, \"one-hundred-and-fifty-second\"},",
          "807:     {0x0099, \"one-hundred-and-fifty-third\"},",
          "808:     {0x009a, \"one-hundred-and-fifty-fourth\"},",
          "809:     {0x009b, \"one-hundred-and-fifty-fifth\"},",
          "810:     {0x009c, \"one-hundred-and-fifty-sixth\"},",
          "811:     {0x009d, \"one-hundred-and-fifty-seventh\"},",
          "812:     {0x009e, \"one-hundred-and-fifty-eighth\"},",
          "813:     {0x009f, \"one-hundred-and-fifty-nineth\"},",
          "814:     {0x00a0, \"one-hundred-sixtieth\"},",
          "815:     {0x00a1, \"one-hundred-and-sixty-first\"},",
          "816:     {0x00a2, \"one-hundred-and-sixty-second\"},",
          "817:     {0x00a3, \"one-hundred-and-sixty-third\"},",
          "818:     {0x00a4, \"one-hundred-and-sixty-fourth\"},",
          "819:     {0x00a5, \"one-hundred-and-sixty-fifth\"},",
          "820:     {0x00a6, \"one-hundred-and-sixty-sixth\"},",
          "821:     {0x00a7, \"one-hundred-and-sixty-seventh\"},",
          "822:     {0x00a8, \"one-hundred-and-sixty-eighth\"},",
          "823:     {0x00a9, \"one-hundred-and-sixty-nineth\"},",
          "824:     {0x00aa, \"one-hundred-seventieth\"},",
          "825:     {0x00ab, \"one-hundred-and-seventy-first\"},",
          "826:     {0x00ac, \"one-hundred-and-seventy-second\"},",
          "827:     {0x00ad, \"one-hundred-and-seventy-third\"},",
          "828:     {0x00ae, \"one-hundred-and-seventy-fourth\"},",
          "829:     {0x00af, \"one-hundred-and-seventy-fifth\"},",
          "830:     {0x00b0, \"one-hundred-and-seventy-sixth\"},",
          "831:     {0x00b1, \"one-hundred-and-seventy-seventh\"},",
          "832:     {0x00b2, \"one-hundred-and-seventy-eighth\"},",
          "833:     {0x00b3, \"one-hundred-and-seventy-nineth\"},",
          "834:     {0x00b4, \"one-hundred-eightieth\"},",
          "835:     {0x00b5, \"one-hundred-and-eighty-first\"},",
          "836:     {0x00b6, \"one-hundred-and-eighty-second\"},",
          "837:     {0x00b7, \"one-hundred-and-eighty-third\"},",
          "838:     {0x00b8, \"one-hundred-and-eighty-fourth\"},",
          "839:     {0x00b9, \"one-hundred-and-eighty-fifth\"},",
          "840:     {0x00ba, \"one-hundred-and-eighty-sixth\"},",
          "841:     {0x00bb, \"one-hundred-and-eighty-seventh\"},",
          "842:     {0x00bc, \"one-hundred-and-eighty-eighth\"},",
          "843:     {0x00bd, \"one-hundred-and-eighty-nineth\"},",
          "844:     {0x00be, \"one-hundred-ninetieth\"},",
          "845:     {0x00bf, \"one-hundred-and-ninety-first\"},",
          "846:     {0x00c0, \"one-hundred-and-ninety-second\"},",
          "847:     {0x00c1, \"one-hundred-and-ninety-third\"},",
          "848:     {0x00c2, \"one-hundred-and-ninety-fourth\"},",
          "849:     {0x00c3, \"one-hundred-and-ninety-fifth\"},",
          "850:     {0x00c4, \"one-hundred-and-ninety-sixth\"},",
          "851:     {0x00c5, \"one-hundred-and-ninety-seventh\"},",
          "852:     {0x00c6, \"one-hundred-and-ninety-eighth\"},",
          "853:     {0x00c7, \"one-hundred-and-ninety-nineth\"},",
          "854:     {0x00c8, \"two-hundredth\"},",
          "855:     {0x00c9, \"two-hundred-and-first\"},",
          "856:     {0x00ca, \"two-hundred-and-second\"},",
          "857:     {0x00cb, \"two-hundred-and-third\"},",
          "858:     {0x00cc, \"two-hundred-and-fourth\"},",
          "859:     {0x00cd, \"two-hundred-and-fifth\"},",
          "860:     {0x00ce, \"two-hundred-and-sixth\"},",
          "861:     {0x00cf, \"two-hundred-and-seventh\"},",
          "862:     {0x00d0, \"two-hundred-and-eighth\"},",
          "863:     {0x00d1, \"two-hundred-and-nineth\"},",
          "864:     {0x00d2, \"two-hundred-and-tenth\"},",
          "865:     {0x00d3, \"two-hundred-and-eleventh\"},",
          "866:     {0x00d4, \"two-hundred-and-twelveth\"},",
          "867:     {0x00d5, \"two-hundred-and-thirteenth\"},",
          "868:     {0x00d6, \"two-hundred-and-fourteenth\"},",
          "869:     {0x00d7, \"two-hundred-and-fifteenth\"},",
          "870:     {0x00d8, \"two-hundred-and-sixteenth\"},",
          "871:     {0x00d9, \"two-hundred-and-seventeenth\"},",
          "872:     {0x00da, \"two-hundred-and-eighteenth\"},",
          "873:     {0x00db, \"two-hundred-and-nineteenth\"},",
          "874:     {0x00dc, \"two-hundred-twentieth\"},",
          "875:     {0x00dd, \"two-hundred-and-twenty-first\"},",
          "876:     {0x00de, \"two-hundred-and-twenty-second\"},",
          "877:     {0x00df, \"two-hundred-and-twenty-third\"},",
          "878:     {0x00e0, \"two-hundred-and-twenty-fourth\"},",
          "879:     {0x00e1, \"two-hundred-and-twenty-fifth\"},",
          "880:     {0x00e2, \"two-hundred-and-twenty-sixth\"},",
          "881:     {0x00e3, \"two-hundred-and-twenty-seventh\"},",
          "882:     {0x00e4, \"two-hundred-and-twenty-eighth\"},",
          "883:     {0x00e5, \"two-hundred-and-twenty-nineth\"},",
          "884:     {0x00e6, \"two-hundred-thirtieth\"},",
          "885:     {0x00e7, \"two-hundred-and-thirty-first\"},",
          "886:     {0x00e8, \"two-hundred-and-thirty-second\"},",
          "887:     {0x00e9, \"two-hundred-and-thirty-third\"},",
          "888:     {0x00ea, \"two-hundred-and-thirty-fourth\"},",
          "889:     {0x00eb, \"two-hundred-and-thirty-fifth\"},",
          "890:     {0x00ec, \"two-hundred-and-thirty-sixth\"},",
          "891:     {0x00ed, \"two-hundred-and-thirty-seventh\"},",
          "892:     {0x00ee, \"two-hundred-and-thirty-eighth\"},",
          "893:     {0x00ef, \"two-hundred-and-thirty-nineth\"},",
          "894:     {0x00f0, \"two-hundred-fortieth\"},",
          "895:     {0x00f1, \"two-hundred-and-fourty-first\"},",
          "896:     {0x00f2, \"two-hundred-and-fourty-second\"},",
          "897:     {0x00f3, \"two-hundred-and-fourty-third\"},",
          "898:     {0x00f4, \"two-hundred-and-fourty-fourth\"},",
          "899:     {0x00f5, \"two-hundred-and-fourty-fifth\"},",
          "900:     {0x00f6, \"two-hundred-and-fourty-sixth\"},",
          "901:     {0x00f7, \"two-hundred-and-fourty-seventh\"},",
          "902:     {0x00f8, \"two-hundred-and-fourty-eighth\"},",
          "903:     {0x00f9, \"two-hundred-and-fourty-nineth\"},",
          "904:     {0x00fa, \"two-hundred-fiftieth\"},",
          "905:     {0x00fb, \"two-hundred-and-fifty-first\"},",
          "906:     {0x00fc, \"two-hundred-and-fifty-second\"},",
          "907:     {0x00fd, \"two-hundred-and-fifty-third\"},",
          "908:     {0x00fe, \"two-hundred-and-fifty-fourth\"},",
          "909:     {0x00ff, \"two-hundred-and-fifty-fifth\"},",
          "910:     {0x0100, \"front\"},",
          "911:     {0x0101, \"back\"},",
          "912:     {0x0102, \"top\"},",
          "913:     {0x0103, \"bottom\"},",
          "914:     {0x0104, \"upper\"},",
          "915:     {0x0105, \"lower\"},",
          "916:     {0x0106, \"main\"},",
          "917:     {0x0107, \"backup\"},",
          "918:     {0x0108, \"auxiliary\"},",
          "919:     {0x0109, \"supplementary\"},",
          "920:     {0x010A, \"flash\"},",
          "921:     {0x010B, \"inside\"},",
          "922:     {0x010C, \"outside\"},",
          "923:     {0x010D, \"left\"},",
          "924:     {0x010E, \"right\"},",
          "925:     {0x010F, \"internal\"},",
          "926:     {0x0110, \"external\"},",
          "927:     {0x0, NULL}",
          "928: };",
          "930: static const value_string esp_trigger_logic_vals[] = {",
          "931:     {0x00, \"Boolean AND\"},",
          "932:     {0x01, \"Boolean OR\"},",
          "933:     {0x0, NULL}",
          "934: };",
          "936: static const value_string esp_condition_vals[] = {",
          "937:     {0x00, \"Trigger inactive\"},",
          "938:     {0x01, \"Use a fixed time interval between\"},",
          "939:     {0x02, \"No less than the specified time between\"},",
          "940:     {0x03, \"When value changes compared to\"},",
          "941:     {0x04, \"While less than the specified value\"},",
          "942:     {0x05, \"While less than or equal to the specified\"},",
          "943:     {0x06, \"While greater than the specified value\"},",
          "944:     {0x07, \"While greater than or equal to the\"},",
          "945:     {0x08, \"While equal to the specified value\"},",
          "946:     {0x09, \"While not equal to the specified value\"},",
          "947:     {0x0, NULL}",
          "948: };",
          "950: static const value_string esp_sampling_function_vals[] = {",
          "951:     {0x00, \"Unspecified\"},",
          "952:     {0x01, \"Instantaneous\"},",
          "953:     {0x02, \"Arithmetic Mean\"},",
          "954:     {0x03, \"RMS\"},",
          "955:     {0x04, \"Maximum\"},",
          "956:     {0x05, \"Minimum\"},",
          "957:     {0x06, \"Accumulated\"},",
          "958:     {0x07, \"Count\"},",
          "959:     {0x0, NULL}",
          "960: };",
          "962: static const value_string esp_application_vals[] = {",
          "963:     {0x00, \"Unspecified\"},",
          "964:     {0x01, \"Air\"},",
          "965:     {0x02, \"Water\"},",
          "966:     {0x03, \"Barometric\"},",
          "967:     {0x04, \"Soil\"},",
          "968:     {0x05, \"Infrared\"},",
          "969:     {0x06, \"Map Database\"},",
          "970:     {0x07, \"Barometric Elevation Source\"},",
          "971:     {0x08, \"GPS only Elevation Source\"},",
          "972:     {0x09, \"GPS and Map database Elevation Source\"},",
          "973:     {0x0A, \"Vertical datum Elevation Source\"},",
          "974:     {0x0B, \"Onshore\"},",
          "975:     {0x0C, \"Onboard vessel or vehicle\"},",
          "976:     {0x0D, \"Front\"},",
          "977:     {0x0E, \"Back/Rear\"},",
          "978:     {0x0F, \"Upper\"},",
          "979:     {0x10, \"Lower\"},",
          "980:     {0x11, \"Primary\"},",
          "981:     {0x12, \"Secondary\"},",
          "982:     {0x13, \"Outdoor\"},",
          "983:     {0x14, \"Indoor\"},",
          "984:     {0x15, \"Top\"},",
          "985:     {0x16, \"Bottom\"},",
          "986:     {0x17, \"Main\"},",
          "987:     {0x18, \"Backup\"},",
          "988:     {0x19, \"Auxiliary\"},",
          "989:     {0x1A, \"Supplementary\"},",
          "990:     {0x1B, \"Inside\"},",
          "991:     {0x1C, \"Outside\"},",
          "992:     {0x1D, \"Left\"},",
          "993:     {0x1E, \"Right\"},",
          "994:     {0x1F, \"Internal\"},",
          "995:     {0x20, \"External\"},",
          "996:     {0x21, \"Solar\"},",
          "997:     {0x0, NULL}",
          "998: };",
          "1000: static const value_string appearance_category_vals[] = {",
          "1001:     {0x01, \"Phone\"},",
          "1002:     {0x02, \"Computer\"},",
          "1003:     {0x03, \"Watch\"},",
          "1004:     {0x04, \"Clock\"},",
          "1005:     {0x05, \"Display\"},",
          "1006:     {0x06, \"Remote Control\"},",
          "1007:     {0x07, \"Eye Glasses\"},",
          "1008:     {0x08, \"Tag\"},",
          "1009:     {0x09, \"Keyring\"},",
          "1010:     {0x0A, \"Media Player\"},",
          "1011:     {0x0B, \"Barcode Scanner\"},",
          "1012:     {0x0C, \"Thermometer\"},",
          "1013:     {0x0D, \"Heart Rate Sensor\"},",
          "1014:     {0x0E, \"Blood Pressure\"},",
          "1015:     {0x0F, \"Human Interface Device\"},",
          "1016:     {0x10, \"Glucose Meter\"},",
          "1017:     {0x11, \"Running Walking Sensor\"},",
          "1018:     {0x12, \"Cycling\"},",
          "1019:     {0x31, \"Pulse Oximeter\"},",
          "1020:     {0x32, \"Weight Scale\"},",
          "1021:     {0x51, \"Outdoor Sports Activity\"},",
          "1022:     {0x0, NULL}",
          "1023: };",
          "1025: static const value_string appearance_subcategory_watch_vals[] = {",
          "1026:     {0x01, \"Sports Watch\"},",
          "1027:     {0x0, NULL}",
          "1028: };",
          "1030: static const value_string appearance_subcategory_thermometer_vals[] = {",
          "1031:     {0x01, \"Ear\"},",
          "1032:     {0x0, NULL}",
          "1033: };",
          "1035: static const value_string appearance_subcategory_heart_rate_vals[] = {",
          "1036:     {0x01, \"Heart Rate Belt\"},",
          "1037:     {0x0, NULL}",
          "1038: };",
          "1040: static const value_string appearance_subcategory_blood_pressure_vals[] = {",
          "1041:     {0x01, \"Arm\"},",
          "1042:     {0x02, \"Wrist\"},",
          "1043:     {0x0, NULL}",
          "1044: };",
          "1046: static const value_string appearance_subcategory_hid_vals[] = {",
          "1047:     {0x01, \"Keyboard\"},",
          "1048:     {0x02, \"Mouse\"},",
          "1049:     {0x03, \"Joystick\"},",
          "1050:     {0x04, \"Gamepad\"},",
          "1051:     {0x05, \"Digitizer Tablet\"},",
          "1052:     {0x06, \"Card Reader\"},",
          "1053:     {0x07, \"Digital Pen\"},",
          "1054:     {0x08, \"Barcode\"},",
          "1055:     {0x0, NULL}",
          "1056: };",
          "1058: static const value_string appearance_subcategory_running_walking_sensor_vals[] = {",
          "1059:     {0x01, \"In-Shoe\"},",
          "1060:     {0x02, \"On-Shoe\"},",
          "1061:     {0x03, \"On-Hip\"},",
          "1062:     {0x0, NULL}",
          "1063: };",
          "1065: static const value_string appearance_subcategory_cycling_vals[] = {",
          "1066:     {0x01, \"Cycling Computer\"},",
          "1067:     {0x02, \"Speed Sensor\"},",
          "1068:     {0x03, \"Cadence Sensor\"},",
          "1069:     {0x04, \"Power Sensor\"},",
          "1070:     {0x05, \"Speed and Cadence Sensor\"},",
          "1071:     {0x0, NULL}",
          "1072: };",
          "1074: static const value_string appearance_subcategory_pulse_oximeter_vals[] = {",
          "1075:     {0x01, \"Fingertip\"},",
          "1076:     {0x02, \"Wrist Worn\"},",
          "1077:     {0x0, NULL}",
          "1078: };",
          "1080: static const value_string appearance_subcategory_outdoor_sports_activity_vals[] = {",
          "1081:     {0x01, \"Location Display Device\"},",
          "1082:     {0x02, \"Location and Navigation Display Device\"},",
          "1083:     {0x03, \"Location Pod\"},",
          "1084:     {0x04, \"Location and Navigation Pod\"},",
          "1085:     {0x0, NULL}",
          "1086: };",
          "1088: static const value_string alert_level_vals[] = {",
          "1089:     {0x00, \"No Alert\"},",
          "1090:     {0x01, \"Mild Alert\"},",
          "1091:     {0x02, \"High Alert\"},",
          "1092:     {0x0, NULL}",
          "1093: };",
          "1095: static const value_string dst_offset_vals[] = {",
          "1096:     {0x00, \"Standard Time\"},",
          "1097:     {0x02, \"Half an Hour Daylight Time (+0.5h)\"},",
          "1098:     {0x04, \"Daylight Time (+1h)\"},",
          "1099:     {0x08, \"Double Daylight Time (+2h)\"},",
          "1100:     {0xFF, \"DST is not known\"},",
          "1101:     {0x0, NULL}",
          "1102: };",
          "1104: static const value_string timezone_vals[] = {",
          "1105:     {-128, \"Time zone offset is not known\"},",
          "1106:     {-48, \"UTC-12:00\"},",
          "1107:     {-44, \"UTC-11:00\"},",
          "1108:     {-40, \"UTC-10:00\"},",
          "1109:     {-38, \"UTC-9:30\"},",
          "1110:     {-36, \"UTC-9:00\"},",
          "1111:     {-32, \"UTC-8:00\"},",
          "1112:     {-28, \"UTC-7:00\"},",
          "1113:     {-24, \"UTC-6:00\"},",
          "1114:     {-20, \"UTC-5:00\"},",
          "1115:     {-18, \"UTC-4:30\"},",
          "1116:     {-16, \"UTC-4:00\"},",
          "1117:     {-14, \"UTC-3:30\"},",
          "1118:     {-12, \"UTC-3:00\"},",
          "1119:     {-8,  \"UTC-2:00\"},",
          "1120:     {-4,  \"UTC-1:00\"},",
          "1121:     {0,   \"UTC+0:00\"},",
          "1122:     {4,   \"UTC+1:00\"},",
          "1123:     {8,   \"UTC+2:00\"},",
          "1124:     {12,  \"UTC+3:00\"},",
          "1125:     {14,  \"UTC+3:30\"},",
          "1126:     {16,  \"UTC+4:00\"},",
          "1127:     {18,  \"UTC+4:30\"},",
          "1128:     {20,  \"UTC+5:00\"},",
          "1129:     {22,  \"UTC+5:30\"},",
          "1130:     {23,  \"UTC+5:45\"},",
          "1131:     {24,  \"UTC+6:00\"},",
          "1132:     {26,  \"UTC+6:30\"},",
          "1133:     {28,  \"UTC+7:00\"},",
          "1134:     {32,  \"UTC+8:00\"},",
          "1135:     {35,  \"UTC+8:45\"},",
          "1136:     {36,  \"UTC+9:00\"},",
          "1137:     {38,  \"UTC+9:30\"},",
          "1138:     {40,  \"UTC+10:00\"},",
          "1139:     {42,  \"UTC+10:30\"},",
          "1140:     {44,  \"UTC+11:00\"},",
          "1141:     {46,  \"UTC+11:30\"},",
          "1142:     {48,  \"UTC+12:00\"},",
          "1143:     {51,  \"UTC+12:45\"},",
          "1144:     {52,  \"UTC+13:00\"},",
          "1145:     {56,  \"UTC+14:00\"},",
          "1146:     {0x0, NULL}",
          "1147: };",
          "1149: static const value_string time_source_vals[] = {",
          "1150:     {0x00, \"Unknown\"},",
          "1151:     {0x01, \"Network Time Protocol\"},",
          "1152:     {0x02, \"GPS\"},",
          "1153:     {0x03, \"Radio Time Signal\"},",
          "1154:     {0x04, \"Manual\"},",
          "1155:     {0x05, \"Atomic Clock\"},",
          "1156:     {0x06, \"Cellular Network\"},",
          "1157:     {0x0, NULL}",
          "1158: };",
          "1160: static const value_string time_update_control_point_vals[] = {",
          "1161:     {0x01, \"Get Reference Update\"},",
          "1162:     {0x02, \"Cancel Reference Update\"},",
          "1163:     {0x0, NULL}",
          "1164: };",
          "1166: static const value_string time_current_state_vals[] = {",
          "1167:     {0x00, \"Idle\"},",
          "1168:     {0x01, \"Update Pending\"},",
          "1169:     {0x0, NULL}",
          "1170: };",
          "1172: static const value_string time_result_vals[] = {",
          "1173:     {0x00, \"Successful\"},",
          "1174:     {0x01, \"Canceled\"},",
          "1175:     {0x02, \"No Connection To Reference\"},",
          "1176:     {0x03, \"Reference responded with an error\"},",
          "1177:     {0x04, \"Timeout\"},",
          "1178:     {0x05, \"Update not attempted after reset\"},",
          "1179:     {0x0, NULL}",
          "1180: };",
          "1182: static const value_string temperature_type_vals[] = {",
          "1183:     {0x01, \"Armpit\"},",
          "1184:     {0x02, \"Body (general)\"},",
          "1185:     {0x03, \"Ear (usually ear lobe)\"},",
          "1186:     {0x04, \"Finger\"},",
          "1187:     {0x05, \"Gastro-intestinal Tract\"},",
          "1188:     {0x06, \"Mouth\"},",
          "1189:     {0x07, \"Rectum\"},",
          "1190:     {0x08, \"Toe\"},",
          "1191:     {0x09, \"Tympanum (ear drum)\"},",
          "1192:     {0x0, NULL}",
          "1193: };",
          "1195: static const value_string scan_refresh_vals[] = {",
          "1196:     {0x00, \"Server Requires Refresh\"},",
          "1197:     {0x0, NULL}",
          "1198: };",
          "1200: static const value_string body_sensor_location_vals[] = {",
          "1201:     {0x00, \"Other\"},",
          "1202:     {0x01, \"Chest\"},",
          "1203:     {0x02, \"Wrist\"},",
          "1204:     {0x03, \"Finger\"},",
          "1205:     {0x04, \"Hand\"},",
          "1206:     {0x05, \"Ear Lobe\"},",
          "1207:     {0x06, \"Foot\"},",
          "1208:     {0x0, NULL}",
          "1209: };",
          "1211: static const value_string heart_rate_control_point_vals[] = {",
          "1212:     {0x01, \"Reset Energy Expended\"},",
          "1213:     {0x0, NULL}",
          "1214: };",
          "1216: static const value_string ringer_control_point_vals[] = {",
          "1217:     {0x01, \"Silent Mode\"},",
          "1218:     {0x02, \"Mute Once\"},",
          "1219:     {0x03, \"Cancel Silent Mode\"},",
          "1220:     {0x0, NULL}",
          "1221: };",
          "1223: static const value_string ringer_setting_vals[] = {",
          "1224:     {0x00, \"Ringer Silent\"},",
          "1225:     {0x01, \"Ringer Normal\"},",
          "1226:     {0x0, NULL}",
          "1227: };",
          "1229: static const value_string alert_category_id_vals[] = {",
          "1230:     {0x00, \"Simple Alert: General text alert or non-text alert\"},",
          "1231:     {0x01, \"Email: Alert when Email messages arrives\"},",
          "1232:     {0x02, \"News: News feeds such as RSS, Atom\"},",
          "1233:     {0x03, \"Call: Incoming call\"},",
          "1234:     {0x04, \"Missed call: Missed Call\"},",
          "1235:     {0x05, \"SMS/MMS: SMS/MMS message arrives\"},",
          "1236:     {0x06, \"Voice mail: Voice mail\"},",
          "1237:     {0x07, \"Schedule: Alert occurred on calendar, planner\"},",
          "1238:     {0x08, \"High Prioritized Alert: Alert that should be handled as high priority\"},",
          "1239:     {0x09, \"Instant Message: Alert for incoming instant messages\"},",
          "1240:     {0xFB, \"Defined by service specification\"},",
          "1241:     {0xFC, \"Defined by service specification\"},",
          "1242:     {0xFD, \"Defined by service specification\"},",
          "1243:     {0xFE, \"Defined by service specification\"},",
          "1244:     {0xFF, \"Defined by service specification\"},",
          "1245:     {0x0, NULL}",
          "1246: };",
          "1248: static const value_string alert_command_id_vals[] = {",
          "1249:     {0x00, \"Enable New Incoming Alert Notification\"},",
          "1250:     {0x01, \"Enable Unread Category Status Notification\"},",
          "1251:     {0x02, \"Disable New Incoming Alert Notification\"},",
          "1252:     {0x03, \"Disable Unread Category Status Notification\"},",
          "1253:     {0x04, \"Notify New Incoming Alert immediately\"},",
          "1254:     {0x05, \"Notify Unread Category Status immediately\"},",
          "1255:     {0x0, NULL}",
          "1256: };",
          "1258: static const value_string hid_control_point_command_vals[] = {",
          "1259:     {0x00, \"Suspend\"},",
          "1260:     {0x01, \"Exit Suspend\"},",
          "1261:     {0x0, NULL}",
          "1262: };",
          "1264: static const value_string pnp_id_vendor_id_source_vals[] = {",
          "1265:     {0x01,   \"Bluetooth SIG\"},",
          "1266:     {0x02,   \"USB Implementer's Forum\"},",
          "1267:     {0x0, NULL}",
          "1268: };",
          "1270: static const value_string sensor_location_vals[] = {",
          "1271:     {0x00,   \"Other\"},",
          "1272:     {0x01,   \"Top of shoe\"},",
          "1273:     {0x02,   \"In shoe\"},",
          "1274:     {0x03,   \"Hip\"},",
          "1275:     {0x04,   \"Front Wheel\"},",
          "1276:     {0x05,   \"Left Crank\"},",
          "1277:     {0x06,   \"Right Crank\"},",
          "1278:     {0x07,   \"Left Pedal\"},",
          "1279:     {0x08,   \"Right Pedal\"},",
          "1280:     {0x09,   \"Front Hub\"},",
          "1281:     {0x0A,   \"Rear Dropout\"},",
          "1282:     {0x0B,   \"Chainstay\"},",
          "1283:     {0x0C,   \"Rear Wheel\"},",
          "1284:     {0x0D,   \"Rear Hub\"},",
          "1285:     {0x0E,   \"Chest\"},",
          "1286:     {0x0, NULL}",
          "1287: };",
          "1289: static const value_string gender_vals[] = {",
          "1290:     {0x00,   \"Male\"},",
          "1291:     {0x01,   \"Female\"},",
          "1292:     {0x02,   \"Unspecified\"},",
          "1293:     {0x0, NULL}",
          "1294: };",
          "1296: static const value_string sport_type_for_aerobic_and_anaerobic_thresholds_vals[] = {",
          "1297:     {0x00,   \"Unspecified\"},",
          "1298:     {0x01,   \"Running (Treadmill)\"},",
          "1299:     {0x02,   \"Cycling (Ergometer)\"},",
          "1300:     {0x03,   \"Rowing (Ergometer)\"},",
          "1301:     {0x04,   \"Cross Training (Elliptical)\"},",
          "1302:     {0x05,   \"Climbing\"},",
          "1303:     {0x06,   \"Skiing\"},",
          "1304:     {0x07,   \"Skating\"},",
          "1305:     {0x08,   \"Arm exercising\"},",
          "1306:     {0x09,   \"Lower body exercising\"},",
          "1307:     {0x0A,   \"Upper body exercising\"},",
          "1308:     {0x0B,   \"Whole body exercising\"},",
          "1309:     {0x0, NULL}",
          "1310: };",
          "1312: static const value_string barometric_pressure_trend_vals[] = {",
          "1313:     {0x00,   \"Unknown\"},",
          "1314:     {0x01,   \"Continuously falling\"},",
          "1315:     {0x02,   \"Continuously rising\"},",
          "1316:     {0x03,   \"Falling, then steady\"},",
          "1317:     {0x04,   \"Rising, then steady\"},",
          "1318:     {0x05,   \"Falling before a lesser rise\"},",
          "1319:     {0x06,   \"Falling before a greater rise\"},",
          "1320:     {0x07,   \"Rising before a greater fall\"},",
          "1321:     {0x08,   \"Rising before a lesser fall\"},",
          "1322:     {0x09,   \"Steady\"},",
          "1323:     {0x0, NULL}",
          "1324: };",
          "1326: static const value_string central_address_resolution_vals[] = {",
          "1327:     {0x00,   \"Not supported\"},",
          "1328:     {0x01,   \"Supported\"},",
          "1329:     {0x02,   \"\"},",
          "1330:     {0x0, NULL}",
          "1331: };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "264:     uuid_t  uuid;",
          "265: } handle_data_t;",
          "268: void proto_register_btatt(void);",
          "269: void proto_reg_handoff_btatt(void);",
          "271: static request_data_t *",
          "272: get_request(tvbuff_t *tvb, gint offset, packet_info *pinfo, guint8 opcode,",
          "273:         bluetooth_data_t *bluetooth_data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1376: typedef struct _mtu_data_t {",
          "1377:     guint  mtu;",
          "1378: } mtu_data_t;",
          "1380: typedef struct _fragment_data_t {",
          "1381:     guint    length;",
          "1382:     guint    offset;",
          "1383:     gint     data_in_frame;",
          "1384:     guint8  *data;",
          "1385: } fragment_data_t;",
          "1391: #define PROTO_DATA_BTATT_HANDLE   0x00",
          "1392: #define PROTO_DATA_BTATT_UUID16   0x01",
          "1393: #define PROTO_DATA_BTATT_UUID128  0x02",
          "1395: static void btatt_handle_prompt(packet_info *pinfo, gchar* result)",
          "1396: {",
          "1397:     gulong *value_data;",
          "1399:     value_data = (gulong *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_HANDLE);",
          "1400:     if (value_data)",
          "1401:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"ATT Handle 0x%04x as\", (guint) *value_data);",
          "1402:     else",
          "1403:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"Unknown ATT Handle\");",
          "1404: }",
          "1406: static gpointer btatt_handle_value(packet_info *pinfo)",
          "1407: {",
          "1408:     gulong *value_data;",
          "1410:     value_data = (gulong *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_HANDLE);",
          "1412:     if (value_data)",
          "1413:         return (gpointer) *value_data;",
          "1415:     return NULL;",
          "1416: }",
          "1418: static void btatt_uuid16_prompt(packet_info *pinfo, gchar* result)",
          "1419: {",
          "1420:     gulong *value_data;",
          "1422:     value_data = (gulong *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID16);",
          "1423:     if (value_data)",
          "1424:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"ATT UUID16 0x%04x as\", (guint) *value_data);",
          "1425:     else",
          "1426:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"Unknown ATT UUID16\");",
          "1427: }",
          "1429: static gpointer btatt_uuid16_value(packet_info *pinfo)",
          "1430: {",
          "1431:     gulong *value_data;",
          "1433:     value_data = (gulong *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID16);",
          "1435:     if (value_data)",
          "1436:         return (gpointer) *value_data;",
          "1438:     return NULL;",
          "1439: }",
          "1441: static void btatt_uuid128_prompt(packet_info *pinfo, gchar* result)",
          "1442: {",
          "1443:     gchar *value_data;",
          "1445:     value_data = (gchar *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID128);",
          "1446:     if (value_data)",
          "1447:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"ATT UUID128 %s as\", (gchar *) value_data);",
          "1448:     else",
          "1449:         g_snprintf(result, MAX_DECODE_AS_PROMPT_LEN, \"Unknown ATT UUID128\");",
          "1450: }",
          "1452: static gpointer btatt_uuid128_value(packet_info *pinfo)",
          "1453: {",
          "1454:     gchar *value_data;",
          "1456:     value_data = (gchar *) p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID128);",
          "1458:     if (value_data)",
          "1459:         return (gpointer) value_data;",
          "1461:     return NULL;",
          "1462: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "503: }",
          "505: static gint",
          "508: {",
          "509:     if (!uuid.bt_uuid) {",
          "510:         proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "513:     }",
          "515:     switch (uuid.bt_uuid) {",
          "528:         break;",
          "531:         offset += 2;",
          "539:         break;",
          "542:         offset += 1;",
          "605:         offset += 1;",
          "619:         }",
          "621:         break;",
          "626:         offset += 2;",
          "642:         break;",
          "648:         offset += 2;",
          "662:         break;",
          "714:         }",
          "715:         break;",
          "723:         offset += 2;",
          "726:         offset += 2;",
          "730:         offset += 2;",
          "746:         break;",
          "767:         break;",
          "778:         offset += 2;",
          "809:         }",
          "812:         break;",
          "879:         break;",
          "894:         break;",
          "902:         break;",
          "911:         offset += 2;",
          "922:         break;",
          "932:         break;",
          "938:         }",
          "955:         break;",
          "969:         break;",
          "1028:         break;",
          "1047:         break;",
          "1057:         offset += 2;",
          "1069:         break;",
          "1083:         }",
          "1084:         break;",
          "1089:         break;",
          "1109:         break;",
          "1110:         }",
          "1112:         break;",
          "1113:     }",
          "1119:         }",
          "1128:         }",
          "1129:     }",
          "1132: }",
          "1136: {",
          "1143:             NULL, HFILL}",
          "1144:         },",
          "1148:             NULL, HFILL}",
          "1149:         },",
          "1153:             NULL, HFILL}",
          "1154:         },",
          "1158:             NULL, HFILL}",
          "1159:         },",
          "1163:             NULL, HFILL}",
          "1164:         },",
          "1168:             NULL, HFILL}",
          "1169:         },",
          "1172:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1173:             NULL, HFILL}",
          "1174:         },",
          "1177:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1178:             NULL, HFILL}",
          "1179:         },",
          "1182:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1183:             NULL, HFILL}",
          "1184:         },",
          "1187:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1188:             NULL, HFILL}",
          "1189:         },",
          "1193:             NULL, HFILL}",
          "1194:         },",
          "1198:             NULL, HFILL}",
          "1199:         },",
          "1202:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1203:             NULL, HFILL}",
          "1204:         },",
          "1208:             NULL, HFILL}",
          "1209:         },",
          "1213:             NULL, HFILL}",
          "1214:         },",
          "1218:             NULL, HFILL}",
          "1219:         },",
          "1223:             NULL, HFILL}",
          "1224:         },",
          "1228:             NULL, HFILL}",
          "1229:         },",
          "1233:             NULL, HFILL}",
          "1234:         },",
          "1237:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "1239:         },",
          "1243:             NULL, HFILL}",
          "1244:         },",
          "1248:             NULL, HFILL}",
          "1249:         },",
          "1253:             NULL, HFILL}",
          "1254:         },",
          "1258:             NULL, HFILL}",
          "1259:         },",
          "1263:             NULL, HFILL}",
          "1264:         },",
          "1268:             NULL, HFILL}",
          "1269:         },",
          "1273:             NULL, HFILL}",
          "1274:         },",
          "1278:             NULL, HFILL}",
          "1279:         },",
          "1283:             NULL, HFILL}",
          "1284:         },",
          "1288:             NULL, HFILL}",
          "1289:         },",
          "1293:             NULL, HFILL}",
          "1294:         },",
          "1298:             NULL, HFILL}",
          "1299:         },",
          "1303:             NULL, HFILL}",
          "1304:         },",
          "1308:             NULL, HFILL}",
          "1309:         },",
          "1313:             NULL, HFILL}",
          "1314:         },",
          "1318:             NULL, HFILL}",
          "1319:         },",
          "1323:             NULL, HFILL}",
          "1324:         },",
          "1328:             NULL, HFILL}",
          "1329:         },",
          "1333:             NULL, HFILL}",
          "1334:         },",
          "1338:             NULL, HFILL}",
          "1339:         },",
          "1343:             NULL, HFILL}",
          "1344:         },",
          "1348:             NULL, HFILL}",
          "1349:         },",
          "1353:             NULL, HFILL}",
          "1354:         },",
          "1358:             NULL, HFILL}",
          "1359:         },",
          "1363:             NULL, HFILL}",
          "1364:         },",
          "1368:             NULL, HFILL}",
          "1369:         },",
          "1373:             NULL, HFILL}",
          "1374:         },",
          "1378:             NULL, HFILL}",
          "1379:         },",
          "1380:         {&hf_request_in_frame,",
          "",
          "[Removed Lines]",
          "506: dissect_attribute_value(proto_tree *tree, packet_info *pinfo _U_, tvbuff_t *tvb,",
          "507:         gint offset, uuid_t uuid)",
          "512:         return tvb_captured_length(tvb);",
          "517:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_characteristic_configuration_bits, ett_btatt_value, hfx_btatt_characteristic_configuration_bits, ENC_LITTLE_ENDIAN);",
          "518:         offset += 2;",
          "520:         break;",
          "522:         proto_tree_add_item(tree, hf_btatt_report_reference_report_id, tvb, offset, 1, ENC_NA);",
          "523:         offset += 1;",
          "525:         proto_tree_add_item(tree, hf_btatt_report_reference_report_type, tvb, offset, 1, ENC_NA);",
          "526:         offset += 1;",
          "530:         proto_tree_add_item(tree, hf_btatt_hogp_bcd_hid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "533:         proto_tree_add_item(tree, hf_btatt_hogp_b_country_code, tvb, offset, 1, ENC_NA);",
          "534:         offset += 1;",
          "536:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_hogp_flags, ett_btatt_value, hfx_btatt_hogp_flags, ENC_NA);",
          "537:         offset += 1;",
          "541:         proto_tree_add_item(tree, hf_btatt_hogp_protocol_mode, tvb, offset, 1, ENC_NA);",
          "544:         break;",
          "548:     default:",
          "549:         proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "550:         offset = tvb_captured_length(tvb);",
          "551:     }",
          "553:     return offset;",
          "554: }",
          "556: static int",
          "557: dissect_btatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "558: {",
          "559:     proto_item        *main_item;",
          "560:     proto_tree        *main_tree;",
          "561:     proto_item        *sub_item;",
          "562:     proto_tree        *sub_tree;",
          "563:     int                offset = 0;",
          "564:     guint8             opcode;",
          "565:     guint8             request_opcode;",
          "566:     bluetooth_data_t  *bluetooth_data;",
          "567:     request_data_t    *request_data;",
          "568:     guint16            handle;",
          "569:     uuid_t             uuid;",
          "571:     bluetooth_data = (bluetooth_data_t *) data;",
          "573:     if (tvb_length_remaining(tvb, 0) < 1)",
          "574:         return 0;",
          "576:     main_item = proto_tree_add_item(tree, proto_btatt, tvb, 0, -1, ENC_NA);",
          "577:     main_tree = proto_item_add_subtree(main_item, ett_btatt);",
          "579:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"ATT\");",
          "581:     switch (pinfo->p2p_dir) {",
          "582:         case P2P_DIR_SENT:",
          "583:             col_set_str(pinfo->cinfo, COL_INFO, \"Sent \");",
          "584:             break;",
          "585:         case P2P_DIR_RECV:",
          "586:             col_set_str(pinfo->cinfo, COL_INFO, \"Rcvd \");",
          "587:             break;",
          "588:         default:",
          "589:             col_set_str(pinfo->cinfo, COL_INFO, \"UnknownDirection \");",
          "590:             break;",
          "591:     }",
          "593:     proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_opcode, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "594:     opcode = tvb_get_guint8(tvb, 0);",
          "595:     offset++;",
          "597:     request_data = get_request(tvb, offset, pinfo, opcode, bluetooth_data);",
          "599:     col_append_str(pinfo->cinfo, COL_INFO, val_to_str_const(opcode, opcode_vals, \"<unknown>\"));",
          "601:     switch (opcode) {",
          "603:         proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_req_opcode_in_error, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "604:         request_opcode = tvb_get_guint8(tvb, offset);",
          "607:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle_in_error, tvb, offset, bluetooth_data, NULL);",
          "609:         col_append_fstr(pinfo->cinfo, COL_INFO, \" - %s, Handle: 0x%04x\",",
          "610:                         val_to_str_const(tvb_get_guint8(tvb, offset), error_vals, \"<unknown>\"),",
          "611:                         tvb_get_letohs(tvb, offset - 2));",
          "613:         proto_tree_add_item(main_tree, hf_btatt_error_code, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "614:         offset++;",
          "616:         if (request_data && (request_opcode == 0x08 || request_opcode == 0x10)) {",
          "617:             sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "618:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "624:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Client Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "625:         proto_tree_add_item(main_tree, hf_btatt_client_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "628:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "629:             union request_parameters_union  request_parameters;",
          "631:             request_parameters.mtu.mtu = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "633:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "634:         }",
          "636:         break;",
          "639:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Server Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "640:         proto_tree_add_item(main_tree, hf_btatt_server_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "641:         offset += 2;",
          "645:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handles: 0x%04x..0x%04x\",",
          "646:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "647:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "650:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "651:         offset += 2;",
          "653:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "654:             union request_parameters_union  request_parameters;",
          "656:             request_parameters.find_information.starting_handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "657:             request_parameters.find_information.ending_handle   = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "659:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "660:         }",
          "665:         {",
          "666:             guint8  format = tvb_get_guint8(tvb, offset);",
          "668:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid_format, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "669:             offset++;",
          "671:             if (format == 1) {",
          "672:                 while( tvb_length_remaining(tvb, offset) > 0) {",
          "673:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "674:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "676:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "677:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "679:                     proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "680:                     uuid = get_uuid(tvb, offset, 2);",
          "681:                     offset += 2;",
          "683:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "684:                             tvb_get_letohs(tvb, offset - 4),",
          "685:                             print_uuid(&uuid));",
          "687:                     if (!pinfo->fd->flags.visited && bluetooth_data)",
          "688:                         save_handle(pinfo, uuid, handle, bluetooth_data);",
          "689:                 }",
          "690:             }",
          "691:             else if (format == 2) {",
          "692:                 while( tvb_length_remaining(tvb, offset) > 0) {",
          "693:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "694:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "696:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "697:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "699:                     proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "700:                     uuid = get_uuid(tvb, offset, 16);",
          "701:                     offset += 16;",
          "703:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "704:                             tvb_get_letohs(tvb, offset - 4),",
          "705:                             print_uuid(&uuid));",
          "707:                     if (!pinfo->fd->flags.visited && bluetooth_data)",
          "708:                         save_handle(pinfo, uuid, handle, bluetooth_data);",
          "709:                 }",
          "710:             }",
          "711:             else {",
          "712:                 expert_add_info(pinfo, sub_item, &ei_btatt_uuid_format_unknown);",
          "713:             }",
          "718:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "719:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "720:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "722:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "725:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "728:         proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "729:         uuid = get_uuid(tvb, offset - 2, 2);",
          "732:         dissect_attribute_value(main_tree, pinfo, tvb, offset, uuid);",
          "734:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "735:             union request_parameters_union  request_parameters;",
          "737:             request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "738:             request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "739:             request_parameters.read_by_type.uuid = uuid;",
          "741:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "742:         }",
          "744:         offset = tvb_reported_length(tvb);",
          "749:         while( tvb_length_remaining(tvb, offset) > 0 ) {",
          "750:             sub_item = proto_tree_add_none_format(main_tree, hf_btatt_handles_info, tvb, offset, 4,",
          "751:                                             \"Handles Info, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "752:                                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "754:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "756:             offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "758:             proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "759:             offset += 2;",
          "761:             if (!pinfo->fd->flags.visited && bluetooth_data && request_data)",
          "762:                 save_handle(pinfo, request_data->parameters.read_by_type.uuid,",
          "763:                         tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "764:                         bluetooth_data);",
          "766:         }",
          "771:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "772:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "773:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "775:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "776:         offset += 2;",
          "777:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "780:         if (tvb_length_remaining(tvb, offset) == 2) {",
          "781:             proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "782:             offset += 2;",
          "784:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "785:                 union request_parameters_union  request_parameters;",
          "787:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "788:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "789:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 2, 2);",
          "791:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "792:             }",
          "793:         }",
          "794:         else if (tvb_length_remaining(tvb, offset) == 16) {",
          "795:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "796:             proto_item_append_text(sub_item, \" (%s)\", val_to_str_ext_const(tvb_get_letohs(tvb, offset),",
          "797:                                             &bluetooth_uuid_vals_ext, \"<unknown>\"));",
          "798:             offset += 16;",
          "800:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "801:                 union request_parameters_union  request_parameters;",
          "803:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 20, ENC_LITTLE_ENDIAN);",
          "804:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 18, ENC_LITTLE_ENDIAN);",
          "805:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 16, 16);",
          "807:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "808:             }",
          "815:         {",
          "816:             guint8  length = tvb_get_guint8(tvb, offset);",
          "818:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "819:             offset++;",
          "821:             if(length > 0) {",
          "822:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\",",
          "823:                                         tvb_length_remaining(tvb, offset)/length);",
          "825:                 while (tvb_length_remaining(tvb, offset) >= length)",
          "826:                 {",
          "827:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb,",
          "828:                                                     offset, length, \"Attribute Data, Handle: 0x%04x\",",
          "829:                                                     tvb_get_letohs(tvb, offset));",
          "831:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "833:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "835:                     if (request_data && length - 2 == 5 &&",
          "836:                             request_data->parameters.read_by_type.uuid.bt_uuid == UUID_GATT_CHARACTERISTIC_DECLARATION) {",
          "837:                         proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_characteristic_properties, ett_btatt_characteristic_properties,  hfx_btatt_characteristic_properties, ENC_NA);",
          "838:                         offset += 1;",
          "840:                         offset = dissect_handle(sub_tree, pinfo, hf_btatt_characteristic_value_handle, tvb, offset, bluetooth_data, NULL);",
          "841:                         handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "843:                         proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "844:                         uuid = get_uuid(tvb, offset, 2);",
          "845:                         proto_item_append_text(sub_item, \", Characteristic Handle: 0x%04x, UUID: %s\", handle, print_uuid(&uuid));",
          "846:                         offset += 2;",
          "848:                         if (!pinfo->fd->flags.visited && bluetooth_data)",
          "849:                             save_handle(pinfo, uuid, handle, bluetooth_data);",
          "851:                     } else if (request_data && length - 2 == 19 &&",
          "852:                             request_data->parameters.read_by_type.uuid.bt_uuid == UUID_GATT_CHARACTERISTIC_DECLARATION) {",
          "854:                         proto_tree_add_bitmask(sub_tree, tvb, offset, hf_btatt_characteristic_properties, ett_btatt_characteristic_properties,  hfx_btatt_characteristic_properties, ENC_NA);",
          "855:                         offset += 1;",
          "857:                         offset = dissect_handle(sub_tree, pinfo, hf_btatt_characteristic_value_handle, tvb, offset, bluetooth_data, NULL);",
          "858:                         handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "860:                         proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "861:                         uuid = get_uuid(tvb, offset, 16);",
          "862:                         proto_item_append_text(sub_item, \", Characteristic Handle: 0x%04x, UUID128: %s\", tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), print_uuid(&uuid));",
          "863:                         offset += 16;",
          "865:                         if (!pinfo->fd->flags.visited && bluetooth_data)",
          "866:                             save_handle(pinfo, uuid, handle, bluetooth_data);",
          "867:                     } else {",
          "868:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 2, ENC_NA);",
          "869:                         offset += (length-2);",
          "870:                     }",
          "871:                 }",
          "872:             }",
          "874:             if (request_data) {",
          "875:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "876:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "877:             }",
          "878:         }",
          "882:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "884:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "886:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "887:             union request_parameters_union  request_parameters;",
          "889:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "890:             request_parameters.read_write.offset = 0;",
          "892:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "893:         }",
          "897:         if (request_data) {",
          "898:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "899:         }",
          "901:         offset = dissect_attribute_value(main_tree, pinfo, tvb, offset, uuid);",
          "905:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "906:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "908:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "910:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "914:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "915:             union request_parameters_union  request_parameters;",
          "917:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "918:             request_parameters.read_write.offset = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "920:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "921:         }",
          "925:         if (request_data) {",
          "926:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "927:         }",
          "929:         proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "930:         offset = tvb_reported_length(tvb);",
          "935:         if(tvb_length_remaining(tvb, offset) < 4) {",
          "936:             expert_add_info(pinfo, main_item, &ei_btatt_handle_too_few);",
          "937:             break;",
          "940:         col_append_str(pinfo->cinfo, COL_INFO, \", Handles: \");",
          "941:         while (tvb_length_remaining(tvb, offset) >= 2) {",
          "942:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "943:             col_append_fstr(pinfo->cinfo, COL_INFO, \"0x%04x \", tvb_get_letohs(tvb, offset - 2));",
          "944:         }",
          "946:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "947:             union request_parameters_union  request_parameters;",
          "949:             request_parameters.read_multiple.number_of_handles = (tvb_captured_length(tvb) - 1) / 2;",
          "950:             request_parameters.read_multiple.handle = (guint16 *) tvb_memdup(wmem_file_scope(),",
          "951:                     tvb, 1, request_parameters.read_multiple.number_of_handles * 2);",
          "953:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "954:         }",
          "958:         if (request_data) {",
          "959:             guint  i_handle;",
          "961:             for (i_handle = 0; i_handle < request_data->parameters.read_multiple.number_of_handles; i_handle += 1) {",
          "962:                 dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_multiple.handle[i_handle]);",
          "963:                 offset = dissect_attribute_value(main_tree, pinfo, tvb, offset, uuid);",
          "964:             }",
          "965:         } else {",
          "966:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "967:             offset = tvb_reported_length(tvb);",
          "968:         }",
          "972:         {",
          "973:             guint8  length = tvb_get_guint8(tvb, offset);",
          "975:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "976:             offset++;",
          "978:             if(length > 0) {",
          "979:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\", tvb_length_remaining(tvb, offset)/length);",
          "981:                 while (tvb_length_remaining(tvb, offset) >= length) {",
          "982:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb, offset, length,",
          "983:                                                     \"Attribute Data, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "984:                                                     tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "986:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "988:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "989:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "991:                     proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "992:                     offset += 2;",
          "994:                     if (request_data &&",
          "995:                             (request_data->parameters.read_by_type.uuid.bt_uuid == UUID_GATT_PRIMARY_SERVICE_DECLARATION ||",
          "996:                             request_data->parameters.read_by_type.uuid.bt_uuid == UUID_GATT_SECONDARY_SERVICE_DECLARATION) &&",
          "997:                             (length - 4 == 2 || length - 4 == 16)) {",
          "998:                         if (length - 4 == 2) {",
          "999:                             proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1001:                             uuid = get_uuid(tvb, offset, 2);",
          "1002:                             proto_item_append_text(sub_item, \", UUID: %s\", print_uuid(&uuid));",
          "1004:                             if (!pinfo->fd->flags.visited && bluetooth_data)",
          "1005:                                 save_handle(pinfo, uuid, handle, bluetooth_data);",
          "1006:                         } else if (length - 4 == 16) {",
          "1008:                             proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "1010:                             uuid = get_uuid(tvb, offset, 16);",
          "1011:                             proto_item_append_text(sub_item, \", UUID128: %s\", print_uuid(&uuid));",
          "1013:                             if (!pinfo->fd->flags.visited && bluetooth_data)",
          "1014:                                 save_handle(pinfo, uuid, handle, bluetooth_data);",
          "1015:                         }",
          "1016:                     } else {",
          "1017:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 4, ENC_NA);",
          "1018:                     }",
          "1019:                     offset += (length-4);",
          "1020:                 }",
          "1021:             }",
          "1023:             if (request_data) {",
          "1024:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "1025:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "1026:             }",
          "1027:         }",
          "1034:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "1036:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "1038:         offset = dissect_attribute_value(main_tree, pinfo, tvb, offset, uuid);",
          "1040:         if (!pinfo->fd->flags.visited && bluetooth_data && (opcode == 0x12 || opcode == 0x1d)) {",
          "1041:             union request_parameters_union  request_parameters;",
          "1043:             request_parameters.data = NULL;",
          "1045:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "1046:         }",
          "1051:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "1052:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "1054:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "1056:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1059:         offset = dissect_attribute_value(main_tree, pinfo, tvb, offset, uuid);",
          "1060:         offset = tvb_reported_length(tvb);",
          "1062:         if (!pinfo->fd->flags.visited && bluetooth_data && opcode == 0x16) {",
          "1063:             union request_parameters_union  request_parameters;",
          "1065:             request_parameters.data = NULL;",
          "1067:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "1068:         }",
          "1072:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",",
          "1073:                         val_to_str_const(tvb_get_guint8(tvb, offset), flags_vals, \"<unknown>\"));",
          "1074:         proto_tree_add_item(main_tree, hf_btatt_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "1075:         offset++;",
          "1077:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "1078:             union request_parameters_union  request_parameters;",
          "1080:             request_parameters.data = NULL;",
          "1082:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "1092:         {",
          "1093:             guint8 length;",
          "1095:             col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "1097:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "1099:             length = tvb_length_remaining(tvb, offset);",
          "1100:             if (length > 12) {",
          "1101:                 proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, length-12, ENC_NA);",
          "1102:                 offset+=length-12;",
          "1103:             }",
          "1105:             proto_tree_add_item(main_tree, hf_btatt_sign_counter, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1106:             offset+=4;",
          "1107:             proto_tree_add_item(main_tree, hf_btatt_signature, tvb, offset, 8, ENC_NA);",
          "1108:             offset+=8;",
          "1111:     default:",
          "1115:     if (request_data) {",
          "1116:         if (request_data->request_in_frame > 0  && request_data->request_in_frame != pinfo->fd->num) {",
          "1117:             sub_item = proto_tree_add_uint(main_tree, hf_request_in_frame, tvb, 0, 0, request_data->request_in_frame);",
          "1118:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "1121:         if (!pinfo->fd->flags.visited && request_data->response_in_frame == 0 &&",
          "1122:                 pinfo->fd->num > request_data->request_in_frame)",
          "1123:             request_data->response_in_frame = pinfo->fd->num;",
          "1125:         if (request_data->response_in_frame > 0 && request_data->response_in_frame != pinfo->fd->num) {",
          "1126:             sub_item = proto_tree_add_uint(main_tree, hf_response_in_frame, tvb, 0, 0, request_data->response_in_frame);",
          "1127:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "1131:     return offset;",
          "1134: void",
          "1135: proto_register_btatt(void)",
          "1137:     module_t *module;",
          "1139:     static hf_register_info hf[] = {",
          "1140:         {&hf_btatt_opcode,",
          "1141:             {\"Opcode\", \"btatt.opcode\",",
          "1142:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "1145:         {&hf_btatt_opcode_authentication_signature,",
          "1146:             {\"Authentication Signature\", \"btatt.opcode.authentication_signature\",",
          "1147:             FT_BOOLEAN, 8, NULL, 0x80,",
          "1150:         {&hf_btatt_opcode_command,",
          "1151:             {\"Command\", \"btatt.opcode.command\",",
          "1152:             FT_BOOLEAN, 8, NULL, 0x40,",
          "1155:         {&hf_btatt_opcode_method,",
          "1156:             {\"Method\", \"btatt.opcode.method\",",
          "1157:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x3F,",
          "1160:         {&hf_btatt_handles_info,",
          "1161:             {\"Handles Info\", \"btatt.handles_info\",",
          "1162:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "1165:         {&hf_btatt_attribute_data,",
          "1166:             {\"Attribute Data\", \"btatt.attribute_data\",",
          "1167:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "1170:         {&hf_btatt_handle,",
          "1171:             {\"Handle\", \"btatt.handle\",",
          "1175:         {&hf_btatt_starting_handle,",
          "1176:             {\"Starting Handle\", \"btatt.starting_handle\",",
          "1180:         {&hf_btatt_ending_handle,",
          "1181:             {\"Ending Handle\", \"btatt.ending_handle\",",
          "1185:         {&hf_btatt_group_end_handle,",
          "1186:             {\"Group End Handle\", \"btatt.group_end_handle\",",
          "1190:         {&hf_btatt_value,",
          "1191:             {\"Value\", \"btatt.value\",",
          "1192:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1195:         {&hf_btatt_req_opcode_in_error,",
          "1196:             {\"Request Opcode in Error\", \"btatt.req_opcode_in_error\",",
          "1197:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "1200:         {&hf_btatt_handle_in_error,",
          "1201:             {\"Handle in Error\", \"btatt.handle\",",
          "1205:         {&hf_btatt_error_code,",
          "1206:             {\"Error Code\", \"btatt.error_code\",",
          "1207:             FT_UINT8, BASE_HEX, VALS(error_vals), 0x0,",
          "1210:         {&hf_btatt_uuid16,",
          "1211:             {\"UUID\", \"btatt.uuid16\",",
          "1212:             FT_UINT16, BASE_HEX |BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "1215:         {&hf_btatt_uuid128,",
          "1216:             {\"UUID\", \"btatt.uuid128\",",
          "1217:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1220:         {&hf_btatt_client_rx_mtu,",
          "1221:             {\"Client Rx MTU\", \"btatt.client_rx_mtu\",",
          "1222:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "1225:         {&hf_btatt_server_rx_mtu,",
          "1226:             {\"Server Rx MTU\", \"btatt.server_rx_mtu\",",
          "1227:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "1230:         {&hf_btatt_uuid_format,",
          "1231:             {\"UUID Format\", \"btatt.uuid_format\",",
          "1232:             FT_UINT8, BASE_HEX, VALS(uuid_format_vals), 0x0,",
          "1235:         {&hf_btatt_length,",
          "1236:             {\"Length\", \"btatt.length\",",
          "1238:             \"Length of Handle/Value Pair\", HFILL}",
          "1240:         {&hf_btatt_offset,",
          "1241:             {\"Offset\", \"btatt.offset\",",
          "1242:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "1245:         {&hf_btatt_flags,",
          "1246:             {\"Flags\", \"btatt.flags\",",
          "1247:             FT_UINT8, BASE_HEX, VALS(flags_vals), 0x0,",
          "1250:         {&hf_btatt_sign_counter,",
          "1251:             {\"Sign Counter\", \"btatt.sign_counter\",",
          "1252:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "1255:         {&hf_btatt_signature,",
          "1256:             {\"Signature\", \"btatt.signature\",",
          "1257:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1260:         {&hf_btatt_characteristic_properties,",
          "1261:             {\"Characteristic Properties\", \"btatt.characteristic_properties\",",
          "1262:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "1265:         {&hf_btatt_characteristic_properties_extended_properties,",
          "1266:             {\"Extended Properties\", \"btatt.characteristic_properties.extended_properties\",",
          "1267:             FT_BOOLEAN, 8, NULL, 0x80,",
          "1270:         {&hf_btatt_characteristic_properties_authenticated_signed_writes,",
          "1271:             {\"Authenticated Signed Writes\", \"btatt.characteristic_properties.authenticated_signed_writes\",",
          "1272:             FT_BOOLEAN, 8, NULL, 0x40,",
          "1275:         {&hf_btatt_characteristic_properties_indicate,",
          "1276:             {\"Indicate\", \"btatt.characteristic_properties.indicate\",",
          "1277:             FT_BOOLEAN, 8, NULL, 0x20,",
          "1280:         {&hf_btatt_characteristic_properties_notify,",
          "1281:             {\"Notify\", \"btatt.characteristic_properties.notify\",",
          "1282:             FT_BOOLEAN, 8, NULL, 0x10,",
          "1285:         {&hf_btatt_characteristic_properties_write,",
          "1286:             {\"Write\", \"btatt.characteristic_properties.write\",",
          "1287:             FT_BOOLEAN, 8, NULL, 0x08,",
          "1290:         {&hf_btatt_characteristic_properties_write_without_response,",
          "1291:             {\"Write without Response\", \"btatt.characteristic_properties.write_without_response\",",
          "1292:             FT_BOOLEAN, 8, NULL, 0x04,",
          "1295:         {&hf_btatt_characteristic_properties_read,",
          "1296:             {\"Read\", \"btatt.characteristic_properties.read\",",
          "1297:             FT_BOOLEAN, 8, NULL, 0x02,",
          "1300:         {&hf_btatt_characteristic_properties_broadcast,",
          "1301:             {\"Broadcast\", \"btatt.characteristic_properties.broadcast\",",
          "1302:             FT_BOOLEAN, 8, NULL, 0x01,",
          "1305:         {&hf_btatt_characteristic_value_handle,",
          "1306:             {\"Characteristic Value Handle\", \"btatt.handle\",",
          "1307:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1310:         {&hf_btatt_information_data,",
          "1311:             {\"Information Data\", \"btatt.information_data\",",
          "1312:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "1315:         {&hf_btatt_characteristic_configuration_bits,",
          "1316:             {\"Characteristic Configuration Bits\", \"btatt.characteristic_configuration_bits\",",
          "1317:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1320:         {&hf_btatt_characteristic_configuration_bits_reserved,",
          "1321:             {\"Reseved\", \"btatt.characteristic_configuration_bits.reserved\",",
          "1322:             FT_UINT16, BASE_HEX, NULL, 0xFFF4,",
          "1325:         {&hf_btatt_characteristic_configuration_bits_indication,",
          "1326:             {\"Indication\", \"btatt.characteristic_configuration_bits.indication\",",
          "1327:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "1330:         {&hf_btatt_characteristic_configuration_bits_notification,",
          "1331:             {\"Notification\", \"btatt.characteristic_configuration_bits.notification\",",
          "1332:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "1335:         {&hf_btatt_hogp_protocol_mode,",
          "1336:             {\"Protocol Mode\", \"btatt.hogp.protocol_mode\",",
          "1337:             FT_UINT8, BASE_HEX, VALS(hogp_protocol_mode_vals), 0x0,",
          "1340:         {&hf_btatt_report_reference_report_id,",
          "1341:             {\"Report ID\", \"btatt.report_reference.report_id\",",
          "1342:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "1345:         {&hf_btatt_report_reference_report_type,",
          "1346:             {\"Report Type\", \"btatt.report_reference.report_id\",",
          "1347:             FT_UINT8, BASE_HEX, VALS(report_reference_report_type_vals), 0x0,",
          "1350:         {&hf_btatt_hogp_bcd_hid,",
          "1351:             {\"bcdHID\", \"btatt.hogp.bcd_hid\",",
          "1352:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "1355:         {&hf_btatt_hogp_b_country_code,",
          "1356:             {\"bCountryCode\", \"btatt.hogp.b_country_code\",",
          "1357:             FT_UINT8, BASE_HEX, VALS(hid_country_code_vals), 0x0,",
          "1360:         {&hf_btatt_hogp_flags,",
          "1361:             {\"Flags\", \"btatt.hogp.flags\",",
          "1362:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "1365:         {&hf_btatt_hogp_flags_reserved,",
          "1366:             {\"Reserved\", \"btatt.hogp.flags.reserved\",",
          "1367:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "1370:         {&hf_btatt_hogp_flags_normally_connectable,",
          "1371:             {\"Normally Connectable\", \"btatt.hogp.flags.normally_connectable\",",
          "1372:             FT_BOOLEAN, 8, NULL, 0x02,",
          "1375:         {&hf_btatt_hogp_flags_remote_wake,",
          "1376:             {\"Remote Wake\", \"btatt.hogp.flags.remote_wake\",",
          "1377:             FT_BOOLEAN, 8, NULL, 0x01,",
          "",
          "[Added Lines]",
          "1699: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
          "1700:         gint old_offset, gint length, guint16 handle, uuid_t uuid, bluetooth_data_t *bluetooth_data)",
          "1702:     proto_item  *sub_item;",
          "1703:     proto_tree  *sub_tree;",
          "1704:     tvbuff_t    *tvb;",
          "1705:     gint         offset = 0;",
          "1706:     uuid_t       sub_uuid;",
          "1707:     guint16      sub_handle;",
          "1708:     guint32      value;",
          "1709:     const gint  **hfs;",
          "1711:     tvb = tvb_new_subset(old_tvb, old_offset, length, length);",
          "1713:     if (p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_HANDLE) == NULL) {",
          "1714:         guint16 *value_data;",
          "1716:         value_data = wmem_new(wmem_file_scope(), guint16);",
          "1719:         p_add_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_HANDLE, value_data);",
          "1720:     }",
          "1722:     if (dissector_try_uint_new(att_handle_dissector_table, handle, tvb, pinfo, tree, TRUE, bluetooth_data))",
          "1723:         return old_offset + length;",
          "1725:     if (uuid.size == 2) {",
          "1726:         if (p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID16) == NULL) {",
          "1727:             guint16 *value_data;",
          "1729:             value_data = wmem_new(wmem_file_scope(), guint16);",
          "1732:             p_add_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID16, value_data);",
          "1733:         }",
          "1734:     } else if (uuid.size == 16) {",
          "1735:         if (p_get_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID128) == NULL) {",
          "1736:             guint8 *value_data;",
          "1738:             value_data = wmem_strdup(wmem_file_scope(), print_numeric_uuid(&uuid));",
          "1740:             p_add_proto_data(pinfo->pool, pinfo, proto_btatt, PROTO_DATA_BTATT_UUID128, value_data);",
          "1741:         }",
          "1742:     }",
          "1747:         return old_offset + tvb_captured_length(tvb);",
          "1750:     if (dissector_try_string(att_uuid128_dissector_table, print_uuid(&uuid), tvb, pinfo, tree, bluetooth_data))",
          "1751:         return old_offset + length;",
          "1753:     if (dissector_try_uint_new(att_uuid16_dissector_table, uuid.bt_uuid, tvb, pinfo, tree, TRUE, bluetooth_data))",
          "1754:         return old_offset + length;",
          "1760:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "1761:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1762:             sub_uuid = get_uuid(tvb, offset, 2);",
          "1763:             proto_item_append_text(patron_item, \", UUID: %s\", print_uuid(&sub_uuid));",
          "1764:             offset += 2;",
          "1766:             if (!pinfo->fd->flags.visited && bluetooth_data && handle)",
          "1767:                 save_handle(pinfo, sub_uuid, handle, bluetooth_data);",
          "1768:         } else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "1769:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "1770:             sub_uuid = get_uuid(tvb, offset, 16);",
          "1771:             proto_item_append_text(patron_item, \", UUID128: %s\", print_uuid(&sub_uuid));",
          "1772:             offset += 16;",
          "1774:             if (!pinfo->fd->flags.visited && bluetooth_data && handle)",
          "1775:                 save_handle(pinfo, sub_uuid, handle, bluetooth_data);",
          "1776:         } else {",
          "1777:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "1778:             offset = tvb_captured_length(tvb);",
          "1779:         }",
          "1783:         offset = dissect_handle(tree, pinfo, hf_btatt_included_service_handle, tvb, offset, bluetooth_data, NULL);",
          "1784:         sub_handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "1786:         proto_tree_add_item(tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1789:         proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1790:         sub_uuid = get_uuid(tvb, offset, 2);",
          "1791:         proto_item_append_text(patron_item, \", Included Handle: 0x%04x, UUID: %s\", sub_handle, print_uuid(&sub_uuid));",
          "1792:         offset += 2;",
          "1794:         if (!pinfo->fd->flags.visited && bluetooth_data)",
          "1795:             save_handle(pinfo, sub_uuid, sub_handle, bluetooth_data);",
          "1799:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_characteristic_properties, ett_btatt_characteristic_properties,  hfx_btatt_characteristic_properties, ENC_NA);",
          "1802:         offset = dissect_handle(tree, pinfo, hf_btatt_characteristic_value_handle, tvb, offset, bluetooth_data, NULL);",
          "1803:         sub_handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "1805:         if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "1806:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "1807:             sub_uuid = get_uuid(tvb, offset, 16);",
          "1808:             proto_item_append_text(patron_item, \", Characteristic Handle: 0x%04x, UUID128: %s\", tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), print_uuid(&sub_uuid));",
          "1809:             offset += 16;",
          "1811:             if (!pinfo->fd->flags.visited && bluetooth_data)",
          "1812:                 save_handle(pinfo, sub_uuid, sub_handle, bluetooth_data);",
          "1813:         } else if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "1814:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1815:             sub_uuid = get_uuid(tvb, offset, 2);",
          "1816:             proto_item_append_text(patron_item, \", Characteristic Handle: 0x%04x, UUID: %s\", sub_handle, print_uuid(&sub_uuid));",
          "1817:             offset += 2;",
          "1819:             if (!pinfo->fd->flags.visited && bluetooth_data)",
          "1820:                 save_handle(pinfo, sub_uuid, sub_handle, bluetooth_data);",
          "1821:         } else {",
          "1822:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "1823:             offset = tvb_captured_length(tvb);",
          "1824:         }",
          "1826:         break;",
          "1828:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_characteristic_extended_properties, ett_btatt_value, hfx_btatt_characteristic_extended_properties, ENC_LITTLE_ENDIAN);",
          "1829:         offset += 2;",
          "1831:         break;",
          "1833:         proto_tree_add_item(tree, hf_btatt_characteristic_user_description, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "1834:         offset += tvb_captured_length_remaining(tvb, offset);",
          "1836:         break;",
          "1838:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_characteristic_configuration_client, ett_btatt_value, hfx_btatt_characteristic_configuration_client, ENC_LITTLE_ENDIAN);",
          "1839:         offset += 2;",
          "1841:         break;",
          "1843:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_characteristic_configuration_server, ett_btatt_value, hfx_btatt_characteristic_configuration_server, ENC_LITTLE_ENDIAN);",
          "1844:         offset += 2;",
          "1846:         break;",
          "1848:         proto_tree_add_item(tree, hf_btatt_characteristic_presentation_format, tvb, offset, 1, ENC_NA);",
          "1849:         offset += 1;",
          "1851:         proto_tree_add_item(tree, hf_btatt_characteristic_presentation_exponent, tvb, offset, 1, ENC_NA);",
          "1852:         offset += 1;",
          "1854:         proto_tree_add_item(tree, hf_btatt_characteristic_presentation_unit, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1855:         offset += 2;",
          "1857:         proto_tree_add_item(tree, hf_btatt_characteristic_presentation_namespace, tvb, offset, 1, ENC_NA);",
          "1858:         value = tvb_get_guint8(tvb, offset);",
          "1862:             proto_tree_add_item(tree, hf_btatt_characteristic_presentation_namespace_description_btsig, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1863:         else",
          "1864:             proto_tree_add_item(tree, hf_btatt_characteristic_presentation_namespace_description, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1865:         offset += 2;",
          "1867:         break;",
          "1869:         sub_item = proto_tree_add_none_format(tree, hf_btatt_handles_info,",
          "1870:                 tvb, offset, tvb_captured_length(tvb), \"Handles (%i items)\",",
          "1871:                 tvb_captured_length(tvb) / 2);",
          "1872:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "1874:         while (offset < (gint64) tvb_captured_length(tvb)) {",
          "1875:             offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "1877:         break;",
          "1879:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "1880:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1881:             offset += 2;",
          "1882:         } else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "1883:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "1884:             offset += 16;",
          "1885:         } else {",
          "1886:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "1887:             offset = tvb_captured_length(tvb);",
          "1888:         }",
          "1889:         break;",
          "1891:         proto_tree_add_item(tree, hf_btatt_report_reference_report_id, tvb, offset, 1, ENC_NA);",
          "1892:         offset += 1;",
          "1894:         proto_tree_add_item(tree, hf_btatt_report_reference_report_type, tvb, offset, 1, ENC_NA);",
          "1895:         offset += 1;",
          "1899:         proto_tree_add_item(tree, hf_btatt_esp_trigger_logic, tvb, offset, 1, ENC_NA);",
          "1900:         offset += 1;",
          "1902:         break;",
          "1904:         proto_tree_add_item(tree, hf_btatt_esp_flags, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1907:         proto_tree_add_item(tree, hf_btatt_esp_sampling_function, tvb, offset, 1, ENC_NA);",
          "1908:         offset += 1;",
          "1910:         proto_tree_add_item(tree, hf_btatt_esp_measurement_period, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "1911:         offset += 3;",
          "1913:         proto_tree_add_item(tree, hf_btatt_esp_update_interval, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "1914:         offset += 3;",
          "1916:         proto_tree_add_item(tree, hf_btatt_esp_application, tvb, offset, 1, ENC_NA);",
          "1917:         offset += 1;",
          "1919:         proto_tree_add_item(tree, hf_btatt_esp_measurement_uncertainty, tvb, offset, 1, ENC_NA);",
          "1920:         offset += 1;",
          "1924:         proto_tree_add_item(tree, hf_btatt_esp_condition, tvb, offset, 1, ENC_NA);",
          "1925:         offset += 1;",
          "1927:         proto_tree_add_item(tree, hf_btatt_esp_operand, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA);",
          "1928:         offset += tvb_captured_length_remaining(tvb, offset);",
          "1929:         break;",
          "1931:         proto_tree_add_item(tree, hf_btatt_hogp_bcd_hid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1934:         proto_tree_add_item(tree, hf_btatt_hogp_b_country_code, tvb, offset, 1, ENC_NA);",
          "1935:         offset += 1;",
          "1937:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_hogp_flags, ett_btatt_value, hfx_btatt_hogp_flags, ENC_NA);",
          "1938:         offset += 1;",
          "1940:         break;",
          "1942:         offset = dissect_usb_hid_get_report_descriptor(pinfo, tree, tvb, offset, NULL);",
          "1944:         break;",
          "1946:         proto_tree_add_item(tree, hf_btatt_hogp_protocol_mode, tvb, offset, 1, ENC_NA);",
          "1947:         offset += 1;",
          "1952:         proto_tree_add_item(tree, hf_btatt_device_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "1953:         offset += tvb_captured_length_remaining(tvb, offset);",
          "1955:         break;",
          "1957:         switch (tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN) & 0xFFC0) {",
          "1959:             hfs = hfx_btatt_appearance_watch;",
          "1960:             break;",
          "1963:             hfs = hfx_btatt_appearance_thermometer;",
          "1964:             break;",
          "1967:             hfs = hfx_btatt_appearance_heart_rate;",
          "1968:             break;",
          "1971:             hfs = hfx_btatt_appearance_blood_pressure;",
          "1972:             break;",
          "1975:             hfs = hfx_btatt_appearance_hid;",
          "1976:             break;",
          "1979:             hfs = hfx_btatt_appearance_running_walking_sensor;",
          "1980:             break;",
          "1983:             hfs = hfx_btatt_appearance_cycling;",
          "1984:             break;",
          "1987:             hfs = hfx_btatt_appearance_pulse_oximeter;",
          "1988:             break;",
          "1991:             hfs = hfx_btatt_appearance_outdoor_sports_activity;",
          "1992:             break;",
          "1994:         default:",
          "1995:             hfs = hfx_btatt_appearance;",
          "1997:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_appearance, ett_btatt_value, hfs, ENC_LITTLE_ENDIAN);",
          "1998:         offset += 2;",
          "2002:         proto_tree_add_item(tree, hf_btatt_peripheral_privacy_flag, tvb, offset, 1, ENC_NA);",
          "2003:         offset += 1;",
          "2005:         break;",
          "2007:         offset = dissect_bd_addr(hf_btatt_reconnection_address, tree, tvb, offset, NULL);",
          "2009:         break;",
          "2011:         proto_tree_add_item(tree, hf_btatt_minimum_connection_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2014:         proto_tree_add_item(tree, hf_btatt_maximum_connection_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2017:         proto_tree_add_item(tree, hf_btatt_slave_latency, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2020:         proto_tree_add_item(tree, hf_btatt_connection_supervision_timeout_multiplier, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2021:         offset += 2;",
          "2023:         break;",
          "2025:         proto_tree_add_item(tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2026:         offset += 2;",
          "2028:         proto_tree_add_item(tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2029:         offset += 2;",
          "2031:         break;",
          "2033:         proto_tree_add_item(tree, hf_btatt_alert_level, tvb, offset, 1, ENC_NA);",
          "2034:         offset += 1;",
          "2038:         proto_tree_add_item(tree, hf_btatt_tx_power_level, tvb, offset, 1, ENC_NA);",
          "2039:         offset += 1;",
          "2041:         break;",
          "2043:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2044:         offset += 2;",
          "2046:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "2047:         offset += 1;",
          "2049:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "2050:         offset += 1;",
          "2052:         proto_tree_add_item(tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "2053:         offset += 1;",
          "2055:         proto_tree_add_item(tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "2056:         offset += 1;",
          "2058:         proto_tree_add_item(tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "2059:         offset += 1;",
          "2062:         proto_tree_add_item(tree, hf_btatt_day_of_week, tvb, offset, 1, ENC_NA);",
          "2063:         offset += 1;",
          "2065:         break;",
          "2069:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2072:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "2073:         offset += 1;",
          "2075:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "2076:         offset += 1;",
          "2078:         proto_tree_add_item(tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "2079:         offset += 1;",
          "2081:         proto_tree_add_item(tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "2082:         offset += 1;",
          "2084:         proto_tree_add_item(tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "2085:         offset += 1;",
          "2087:         proto_tree_add_item(tree, hf_btatt_day_of_week, tvb, offset, 1, ENC_NA);",
          "2088:         offset += 1;",
          "2090:         if (uuid.bt_uuid == 0x2A0C || uuid.bt_uuid == 0x2A2B) {",
          "2091:             proto_tree_add_item(tree, hf_btatt_fractions256, tvb, offset, 1, ENC_NA);",
          "2092:             offset += 1;",
          "2095:          if (uuid.bt_uuid == 0x2A2B) {",
          "2096:             proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_time_adjust_reason, ett_btatt_value, hfx_btatt_time_adjust_reason, ENC_NA);",
          "2097:             offset += 1;",
          "2098:          }",
          "2102:         proto_tree_add_item(tree, hf_btatt_dst_offset, tvb, offset, 1, ENC_NA);",
          "2103:         offset += 1;",
          "2105:         break;",
          "2107:         proto_tree_add_item(tree, hf_btatt_timezone, tvb, offset, 1, ENC_NA);",
          "2108:         offset += 1;",
          "2110:         break;",
          "2112:         proto_tree_add_item(tree, hf_btatt_timezone, tvb, offset, 1, ENC_NA);",
          "2113:         offset += 1;",
          "2115:         proto_tree_add_item(tree, hf_btatt_dst_offset, tvb, offset, 1, ENC_NA);",
          "2116:         offset += 1;",
          "2118:         break;",
          "2120:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2121:         offset += 2;",
          "2123:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "2124:         offset += 1;",
          "2126:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "2127:         offset += 1;",
          "2129:         proto_tree_add_item(tree, hf_btatt_hours, tvb, offset, 1, ENC_NA);",
          "2130:         offset += 1;",
          "2132:         proto_tree_add_item(tree, hf_btatt_minutes, tvb, offset, 1, ENC_NA);",
          "2133:         offset += 1;",
          "2135:         proto_tree_add_item(tree, hf_btatt_seconds, tvb, offset, 1, ENC_NA);",
          "2136:         offset += 1;",
          "2138:         proto_tree_add_item(tree, hf_btatt_dst_offset, tvb, offset, 1, ENC_NA);",
          "2139:         offset += 1;",
          "2141:         break;",
          "2143:         proto_tree_add_item(tree, hf_btatt_time_accuracy, tvb, offset, 1, ENC_NA);",
          "2144:         offset += 1;",
          "2146:         break;",
          "2148:         proto_tree_add_item(tree, hf_btatt_time_source, tvb, offset, 1, ENC_NA);",
          "2149:         offset += 1;",
          "2151:         break;",
          "2153:         proto_tree_add_item(tree, hf_btatt_time_source, tvb, offset, 1, ENC_NA);",
          "2154:         offset += 1;",
          "2156:         proto_tree_add_item(tree, hf_btatt_time_accuracy, tvb, offset, 1, ENC_NA);",
          "2157:         offset += 1;",
          "2159:         proto_tree_add_item(tree, hf_btatt_time_days_since_update, tvb, offset, 1, ENC_NA);",
          "2160:         offset += 1;",
          "2162:         proto_tree_add_item(tree, hf_btatt_time_hours_since_update, tvb, offset, 1, ENC_NA);",
          "2163:         offset += 1;",
          "2167:         proto_tree_add_item(tree, hf_btatt_time_update_control_point, tvb, offset, 1, ENC_NA);",
          "2168:         offset += 1;",
          "2170:         break;",
          "2172:         proto_tree_add_item(tree, hf_btatt_time_current_state, tvb, offset, 1, ENC_NA);",
          "2173:         offset += 1;",
          "2175:         proto_tree_add_item(tree, hf_btatt_time_result, tvb, offset, 1, ENC_NA);",
          "2176:         offset += 1;",
          "2178:         break;",
          "2180:         proto_tree_add_item(tree, hf_btatt_battery_level, tvb, offset, 1, ENC_NA);",
          "2181:         offset += 1;",
          "2183:         break;",
          "2185:         proto_tree_add_item(tree, hf_btatt_temperature_type, tvb, offset, 1, ENC_NA);",
          "2186:         offset += 1;",
          "2190:         proto_tree_add_item(tree, hf_btatt_measurement_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2191:         offset += 2;",
          "2193:         break;",
          "2195:         proto_tree_add_item(tree, hf_btatt_system_id_manufacturer_identifier, tvb, offset, 5, ENC_LITTLE_ENDIAN);",
          "2196:         offset += 5;",
          "2198:         proto_tree_add_item(tree, hf_btatt_system_id_organizationally_unique_identifier, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "2199:         offset += 3;",
          "2202:         proto_tree_add_item(tree, hf_btatt_model_number_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2203:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2205:         break;",
          "2207:         proto_tree_add_item(tree, hf_btatt_serial_number_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2208:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2210:         break;",
          "2212:         proto_tree_add_item(tree, hf_btatt_firmware_revision_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2213:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2215:         break;",
          "2217:         proto_tree_add_item(tree, hf_btatt_hardware_revision_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2218:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2220:         break;",
          "2222:         proto_tree_add_item(tree, hf_btatt_software_revision_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2223:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2225:         break;",
          "2227:         proto_tree_add_item(tree, hf_btatt_manufacturer_string, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2228:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2230:         break;",
          "2232:         proto_tree_add_item(tree, hf_btatt_magnetic_declination, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2235:         break;",
          "2237:         proto_tree_add_item(tree, hf_btatt_scan_refresh, tvb, offset, 1, ENC_NA);",
          "2238:         offset += 1;",
          "2240:         break;",
          "2242:         proto_tree_add_item(tree, hf_btatt_body_sensor_location, tvb, offset, 1, ENC_NA);",
          "2243:         offset += 1;",
          "2245:         break;",
          "2247:         proto_tree_add_item(tree, hf_btatt_heart_rate_control_point, tvb, offset, 1, ENC_NA);",
          "2248:         offset += 1;",
          "2252:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_alert_status, ett_btatt_value, hfx_btatt_alert_status, ENC_NA);",
          "2253:         offset += 1;",
          "2255:         break;",
          "2257:         proto_tree_add_item(tree, hf_btatt_ringer_control_point, tvb, offset, 1, ENC_NA);",
          "2258:         offset += 1;",
          "2260:         break;",
          "2262:         proto_tree_add_item(tree, hf_btatt_ringer_setting, tvb, offset, 1, ENC_NA);",
          "2263:         offset += 1;",
          "2269:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_alert_category_id_bitmask_1, ett_btatt_value, hfx_btatt_alert_category_id_bitmask_1, ENC_NA);",
          "2270:         offset += 1;",
          "2272:         if (tvb_reported_length_remaining(tvb, offset) >= 1) {",
          "2273:             proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_alert_category_id_bitmask_2, ett_btatt_value, hfx_btatt_alert_category_id_bitmask_2, ENC_NA);",
          "2274:             offset += 1;",
          "2277:         break;",
          "2279:         proto_tree_add_item(tree, hf_btatt_alert_category_id, tvb, offset, 1, ENC_NA);",
          "2280:         offset += 1;",
          "2282:         break;",
          "2284:         proto_tree_add_item(tree, hf_btatt_alert_command_id, tvb, offset, 1, ENC_NA);",
          "2285:         offset += 1;",
          "2287:         proto_tree_add_item(tree, hf_btatt_alert_category_id, tvb, offset, 1, ENC_NA);",
          "2288:         offset += 1;",
          "2292:         proto_tree_add_item(tree, hf_btatt_alert_category_id, tvb, offset, 1, ENC_NA);",
          "2293:         offset += 1;",
          "2295:         proto_tree_add_item(tree, hf_btatt_alert_unread_count, tvb, offset, 1, ENC_NA);",
          "2296:         offset += 1;",
          "2300:         proto_tree_add_item(tree, hf_btatt_alert_category_id, tvb, offset, 1, ENC_NA);",
          "2301:         offset += 1;",
          "2303:         proto_tree_add_item(tree, hf_btatt_alert_number_of_new_alert, tvb, offset, 1, ENC_NA);",
          "2304:         offset += 1;",
          "2306:         if (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "2307:             proto_tree_add_item(tree, hf_btatt_alert_text_string_information, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2308:             offset += tvb_captured_length_remaining(tvb, offset);",
          "2309:         }",
          "2311:         break;",
          "2313:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_blood_pressure_feature, ett_btatt_value, hfx_btatt_blood_pressure_feature, ENC_LITTLE_ENDIAN);",
          "2314:         offset += 2;",
          "2316:         break;",
          "2318:         proto_tree_add_item(tree, hf_btatt_hogp_hid_control_point_command, tvb, offset, 1, ENC_NA);",
          "2319:         offset += 1;",
          "2321:         break;",
          "2323:         proto_tree_add_item(tree, hf_btatt_le_scan_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2324:         offset += 2;",
          "2326:         proto_tree_add_item(tree, hf_btatt_le_scan_window, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2327:         offset += 2;",
          "2329:         break;",
          "2331:         proto_tree_add_item(tree, hf_btatt_pnp_id_vendor_id_source, tvb, offset, 1, ENC_NA);",
          "2332:         value = tvb_get_guint8(tvb, offset);",
          "2333:         offset += 1;",
          "2335:         if (value == 1)",
          "2336:             proto_tree_add_item(tree, hf_btatt_pnp_id_vendor_id_bluetooth_sig, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2337:         else if (value == 2)",
          "2338:             proto_tree_add_item(tree, hf_btatt_pnp_id_vendor_id_usb_forum, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2339:         else",
          "2340:             proto_tree_add_item(tree, hf_btatt_pnp_id_vendor_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2341:         offset += 2;",
          "2343:         proto_tree_add_item(tree, hf_btatt_pnp_id_product_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2344:         offset += 2;",
          "2346:         proto_tree_add_item(tree, hf_btatt_pnp_id_product_version, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2347:         offset += 2;",
          "2349:         break;",
          "2351:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_glucose_feature, ett_btatt_value, hfx_btatt_glucose_feature, ENC_LITTLE_ENDIAN);",
          "2352:         offset += 2;",
          "2354:         break;",
          "2356:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_rsc_feature, ett_btatt_value, hfx_btatt_rsc_feature, ENC_LITTLE_ENDIAN);",
          "2357:         offset += 2;",
          "2361:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_csc_feature, ett_btatt_value, hfx_btatt_csc_feature, ENC_LITTLE_ENDIAN);",
          "2362:         offset += 2;",
          "2364:         break;",
          "2366:         proto_tree_add_item(tree, hf_btatt_sensor_location, tvb, offset, 1, ENC_NA);",
          "2367:         offset += 1;",
          "2369:         break;",
          "2371:         proto_tree_add_item(tree, hf_btatt_elevation, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "2372:         offset += 3;",
          "2374:         break;",
          "2376:         proto_tree_add_item(tree, hf_btatt_pressure, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2377:         offset += 4;",
          "2379:         break;",
          "2381:         proto_tree_add_item(tree, hf_btatt_temperature, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2382:         offset += 2;",
          "2384:         break;",
          "2386:         proto_tree_add_item(tree, hf_btatt_humidity, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2387:         offset += 2;",
          "2391:         proto_tree_add_item(tree, hf_btatt_true_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2392:         offset += 2;",
          "2394:         break;",
          "2396:         proto_tree_add_item(tree, hf_btatt_true_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2397:         offset += 2;",
          "2399:         break;",
          "2401:         proto_tree_add_item(tree, hf_btatt_apparent_wind_speed, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2402:         offset += 2;",
          "2404:         break;",
          "2406:         proto_tree_add_item(tree, hf_btatt_apparent_wind_direction, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2409:         break;",
          "2411:         proto_tree_add_item(tree, hf_btatt_gust_factor, tvb, offset, 1, ENC_NA);",
          "2412:         offset += 1;",
          "2414:         break;",
          "2416:         proto_tree_add_item(tree, hf_btatt_pollen_concentration, tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "2417:         offset += 3;",
          "2419:         break;",
          "2421:         proto_tree_add_item(tree, hf_btatt_uv_index, tvb, offset, 1, ENC_NA);",
          "2422:         offset += 1;",
          "2426:         proto_tree_add_item(tree, hf_btatt_irradiance, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2427:         offset += 2;",
          "2429:         break;",
          "2431:         proto_tree_add_item(tree, hf_btatt_rainfall, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2432:         offset += 2;",
          "2434:         break;",
          "2436:         proto_tree_add_item(tree, hf_btatt_wind_chill, tvb, offset, 1, ENC_NA);",
          "2437:         offset += 1;",
          "2439:         break;",
          "2441:         proto_tree_add_item(tree, hf_btatt_heart_index, tvb, offset, 1, ENC_NA);",
          "2442:         offset += 1;",
          "2444:         break;",
          "2446:         proto_tree_add_item(tree, hf_btatt_dew_point, tvb, offset, 1, ENC_NA);",
          "2447:         offset += 1;",
          "2449:         break;",
          "2451:         proto_tree_add_bitmask(tree, tvb, offset, hf_btatt_descriptor_value_changed_flags , ett_btatt_value, hfx_btatt_descriptor_value_changed_flags, ENC_LITTLE_ENDIAN);",
          "2452:         offset += 2;",
          "2454:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "2455:             proto_tree_add_item(tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2456:             offset += 2;",
          "2457:         } else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "2458:             proto_tree_add_item(tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "2459:             offset += 16;",
          "2460:         } else {",
          "2461:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "2462:             offset = tvb_captured_length(tvb);",
          "2467:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "2468:         offset += 1;",
          "2472:         proto_tree_add_item(tree, hf_btatt_aerobic_threshold, tvb, offset, 1, ENC_NA);",
          "2473:         offset += 1;",
          "2475:         break;",
          "2477:         proto_tree_add_item(tree, hf_btatt_age, tvb, offset, 1, ENC_NA);",
          "2478:         offset += 1;",
          "2480:         break;",
          "2482:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "2483:         offset += 1;",
          "2485:         break;",
          "2487:         proto_tree_add_item(tree, hf_btatt_anaerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "2488:         offset += 1;",
          "2490:         break;",
          "2492:         proto_tree_add_item(tree, hf_btatt_anaerobic_threshold, tvb, offset, 1, ENC_NA);",
          "2493:         offset += 1;",
          "2495:         break;",
          "2497:         proto_tree_add_item(tree, hf_btatt_aerobic_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "2498:         offset += 1;",
          "2500:         break;",
          "2503:         proto_tree_add_item(tree, hf_btatt_year, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2504:         offset += 2;",
          "2506:         proto_tree_add_item(tree, hf_btatt_month, tvb, offset, 1, ENC_NA);",
          "2507:         offset += 1;",
          "2509:         proto_tree_add_item(tree, hf_btatt_day, tvb, offset, 1, ENC_NA);",
          "2510:         offset += 1;",
          "2512:         break;",
          "2514:         proto_tree_add_item(tree, hf_btatt_email_address, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2515:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2517:         break;",
          "2519:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_lower_limit, tvb, offset, 1, ENC_NA);",
          "2520:         offset += 1;",
          "2522:         break;",
          "2524:         proto_tree_add_item(tree, hf_btatt_fat_burn_heart_rate_upper_limit, tvb, offset, 1, ENC_NA);",
          "2525:         offset += 1;",
          "2527:         break;",
          "2529:         proto_tree_add_item(tree, hf_btatt_first_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2530:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2532:         break;",
          "2534:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_very_light_light_limit, tvb, offset, 1, ENC_NA);",
          "2535:         offset += 1;",
          "2537:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_light_moderate_limit, tvb, offset, 1, ENC_NA);",
          "2538:         offset += 1;",
          "2540:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit, tvb, offset, 1, ENC_NA);",
          "2541:         offset += 1;",
          "2543:         proto_tree_add_item(tree, hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit, tvb, offset, 1, ENC_NA);",
          "2544:         offset += 1;",
          "2546:         break;",
          "2548:         proto_tree_add_item(tree, hf_btatt_gender, tvb, offset, 1, ENC_NA);",
          "2549:         offset += 1;",
          "2551:         break;",
          "2553:         proto_tree_add_item(tree, hf_btatt_heart_rate_max, tvb, offset, 1, ENC_NA);",
          "2554:         offset += 1;",
          "2556:         break;",
          "2558:         proto_tree_add_item(tree, hf_btatt_height, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2559:         offset += 2;",
          "2561:         break;",
          "2563:         proto_tree_add_item(tree, hf_btatt_hip_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2564:         offset += 2;",
          "2566:         break;",
          "2568:         proto_tree_add_item(tree, hf_btatt_last_name, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2569:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2571:         break;",
          "2573:         proto_tree_add_item(tree, hf_btatt_maximum_recommended_heart_rate, tvb, offset, 1, ENC_NA);",
          "2574:         offset += 1;",
          "2576:         break;",
          "2578:         proto_tree_add_item(tree, hf_btatt_resting_heart_rate, tvb, offset, 1, ENC_NA);",
          "2579:         offset += 1;",
          "2581:         break;",
          "2583:         proto_tree_add_item(tree, hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds, tvb, offset, 1, ENC_NA);",
          "2584:         offset += 1;",
          "2586:         break;",
          "2588:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_light_moderate, tvb, offset, 1, ENC_NA);",
          "2589:         offset += 1;",
          "2591:         proto_tree_add_item(tree, hf_btatt_three_zone_heart_rate_limits_moderate_hard, tvb, offset, 1, ENC_NA);",
          "2592:         offset += 1;",
          "2594:         break;",
          "2596:         proto_tree_add_item(tree, hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness, tvb, offset, 1, ENC_NA);",
          "2597:         offset += 1;",
          "2599:         break;",
          "2601:         proto_tree_add_item(tree, hf_btatt_vo2_max, tvb, offset, 1, ENC_NA);",
          "2602:         offset += 1;",
          "2604:         break;",
          "2606:         proto_tree_add_item(tree, hf_btatt_waist_circumference, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2607:         offset += 2;",
          "2609:         break;",
          "2611:         proto_tree_add_item(tree, hf_btatt_weight, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2612:         offset += 2;",
          "2614:         break;",
          "2616:         proto_tree_add_item(tree, hf_btatt_database_change_increment, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2617:         offset += 4;",
          "2619:         break;",
          "2621:         proto_tree_add_item(tree, hf_btatt_user_index, tvb, offset, 1, ENC_NA);",
          "2622:         offset += 1;",
          "2627:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_x, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2628:         offset += 2;",
          "2630:         proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_y, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2631:         offset += 2;",
          "2633:         if (uuid.bt_uuid == 0x2AA1) {",
          "2634:             proto_tree_add_item(tree, hf_btatt_magnetic_flux_density_z, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2635:             offset += 2;",
          "2638:         break;",
          "2640:         proto_tree_add_item(tree, hf_btatt_language, tvb, offset, tvb_captured_length_remaining(tvb, offset), ENC_NA | ENC_UTF_8);",
          "2641:         offset += tvb_captured_length_remaining(tvb, offset);",
          "2643:         break;",
          "2645:         proto_tree_add_item(tree, hf_btatt_barometric_pressure_trend, tvb, offset, 1, ENC_NA);",
          "2646:         offset += 1;",
          "2648:         break;",
          "2650:         proto_tree_add_item(tree, hf_btatt_central_address_resolution, tvb, offset, 1, ENC_NA);",
          "2651:         offset += 1;",
          "2695:     default:",
          "2696:         proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "2697:         offset = tvb_captured_length(tvb);",
          "2700:     return old_offset + offset;",
          "2701: }",
          "2703: static int",
          "2704: dissect_btgatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2705: {",
          "2706:     proto_item  *main_item;",
          "2707:     proto_tree  *main_tree;",
          "2708:     proto_item  *patron_item = NULL;",
          "2709:     uuid_t       uuid;",
          "2711:     main_item = proto_tree_add_item(tree, (gint) GPOINTER_TO_UINT(wmem_list_frame_data(wmem_list_tail(pinfo->layers))), tvb, 0, -1, ENC_NA);",
          "2712:     main_tree = proto_item_add_subtree(main_item, ett_btgatt);",
          "2714:     uuid.size = 2;",
          "2715:     uuid.bt_uuid = (guint16) g_ascii_strtoull(pinfo->current_proto + strlen(pinfo->current_proto) - 7, NULL, 16);",
          "2716:     uuid.data[0] = uuid.bt_uuid & 0xFF;",
          "2717:     uuid.data[1] = (uuid.bt_uuid >> 8) & 0xFF;",
          "2719:     return dissect_attribute_value(main_tree, patron_item, pinfo, tvb,",
          "2720:             0, tvb_captured_length(tvb), 0, uuid, (bluetooth_data_t *) data);",
          "2722: }",
          "2724: static gboolean",
          "2725: is_long_attribute_value(uuid_t uuid)",
          "2726: {",
          "2727:     switch (uuid.bt_uuid) {",
          "2739:         return TRUE;",
          "2740:     }",
          "2742:     return FALSE;",
          "2743: }",
          "2745: static guint",
          "2746: get_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data)",
          "2747: {",
          "2748:     wmem_tree_key_t  key[3];",
          "2749:     guint32          frame_number;",
          "2750:     mtu_data_t      *mtu_data;",
          "2751:     wmem_tree_t     *sub_wmemtree;",
          "2752:     guint            mtu = 23;",
          "2754:     frame_number = pinfo->fd->num;",
          "2756:     key[0].length = 1;",
          "2757:     key[0].key    = &bluetooth_data->interface_id;",
          "2758:     key[1].length = 1;",
          "2759:     key[1].key    = &bluetooth_data->adapter_id;",
          "2760:     key[2].length = 0;",
          "2761:     key[2].key    = NULL;",
          "2763:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(mtus, key);",
          "2764:     mtu_data = (sub_wmemtree) ? (mtu_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "2766:     if (mtu_data)",
          "2767:         mtu = mtu_data->mtu;",
          "2769:     return mtu;",
          "2770: }",
          "2772: static void",
          "2773: save_mtu(packet_info *pinfo, bluetooth_data_t *bluetooth_data, guint mtu)",
          "2774: {",
          "2775:     wmem_tree_key_t  key[4];",
          "2776:     guint32          frame_number;",
          "2777:     mtu_data_t      *mtu_data;",
          "2779:     frame_number = pinfo->fd->num;",
          "2781:     key[0].length = 1;",
          "2782:     key[0].key    = &bluetooth_data->interface_id;",
          "2783:     key[1].length = 1;",
          "2784:     key[1].key    = &bluetooth_data->adapter_id;",
          "2785:     key[2].length = 1;",
          "2786:     key[2].key    = &frame_number;",
          "2787:     key[3].length = 0;",
          "2788:     key[3].key    = NULL;",
          "2790:     mtu_data = wmem_new(wmem_file_scope(), mtu_data_t);",
          "2791:     mtu_data->mtu = mtu;",
          "2793:     wmem_tree_insert32_array(mtus, key, mtu_data);",
          "2794: }",
          "2796: static void",
          "2797: save_value_fragment(packet_info *pinfo, tvbuff_t *tvb, gint offset,",
          "2798:         guint32 handle, guint data_offset, bluetooth_data_t *bluetooth_data)",
          "2799: {",
          "2800:     wmem_tree_key_t   key[5];",
          "2801:     guint32           frame_number;",
          "2802:     fragment_data_t  *fragment_data;",
          "2804:     frame_number = pinfo->fd->num;",
          "2806:     key[0].length = 1;",
          "2807:     key[0].key    = &bluetooth_data->interface_id;",
          "2808:     key[1].length = 1;",
          "2809:     key[1].key    = &bluetooth_data->adapter_id;",
          "2810:     key[2].length = 1;",
          "2811:     key[2].key    = &handle;",
          "2812:     key[3].length = 1;",
          "2813:     key[3].key    = &frame_number;",
          "2814:     key[4].length = 0;",
          "2815:     key[4].key    = NULL;",
          "2817:     fragment_data = wmem_new(wmem_file_scope(), fragment_data_t);",
          "2818:     fragment_data->length = tvb_captured_length_remaining(tvb, offset);",
          "2819:     fragment_data->offset = data_offset;",
          "2820:     fragment_data->data_in_frame = frame_number;",
          "2821:     fragment_data->data = (guint8 *) tvb_memdup(wmem_file_scope(), tvb, offset, fragment_data->length);",
          "2823:     wmem_tree_insert32_array(fragments, key, fragment_data);",
          "2824: }",
          "2826: static guint8 *",
          "2827: get_value(packet_info *pinfo, guint32 handle, bluetooth_data_t *bluetooth_data, guint *length)",
          "2828: {",
          "2829:     wmem_tree_key_t   key[4];",
          "2830:     guint32           frame_number;",
          "2831:     fragment_data_t  *fragment_data;",
          "2832:     wmem_tree_t      *sub_wmemtree;",
          "2833:     guint16           last_offset = 0xFFFF;",
          "2834:     guint16           size;",
          "2835:     gboolean          first = TRUE;",
          "2836:     guint8           *data = NULL;",
          "2839:     frame_number = pinfo->fd->num;",
          "2841:     key[0].length = 1;",
          "2842:     key[0].key    = &bluetooth_data->interface_id;",
          "2843:     key[1].length = 1;",
          "2844:     key[1].key    = &bluetooth_data->adapter_id;",
          "2845:     key[2].length = 1;",
          "2846:     key[2].key    = &handle;",
          "2847:     key[3].length = 0;",
          "2848:     key[3].key    = NULL;",
          "2850:     sub_wmemtree = (wmem_tree_t *) wmem_tree_lookup32_array(fragments, key);",
          "2851:     while (1) {",
          "2852:         fragment_data = (sub_wmemtree) ? (fragment_data_t *) wmem_tree_lookup32_le(sub_wmemtree, frame_number) : NULL;",
          "2853:         if (!fragment_data || (fragment_data && fragment_data->offset >= last_offset)) {",
          "2854:             if (length)",
          "2856:             return NULL;",
          "2859:         last_offset = fragment_data->offset;",
          "2860:         if (first) {",
          "2861:             size = fragment_data->offset + fragment_data->length;",
          "2862:             data = (guint8 *) wmem_alloc(wmem_packet_scope(), size);",
          "2864:             if (length)",
          "2867:             first = FALSE;",
          "2870:         memcpy(data + fragment_data->offset, fragment_data->data, fragment_data->length);",
          "2872:         if (fragment_data->offset == 0)",
          "2873:             return data;",
          "2874:         frame_number = fragment_data->data_in_frame - 1;",
          "2877:     if (length)",
          "2879:     return NULL;",
          "2882: static int",
          "2883: dissect_btatt(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2885:     proto_item        *main_item;",
          "2886:     proto_tree        *main_tree;",
          "2887:     proto_item        *sub_item;",
          "2888:     proto_tree        *sub_tree;",
          "2889:     int                offset = 0;",
          "2890:     guint8             opcode;",
          "2891:     guint8             request_opcode;",
          "2892:     bluetooth_data_t  *bluetooth_data;",
          "2893:     request_data_t    *request_data;",
          "2894:     guint16            handle;",
          "2895:     uuid_t             uuid;",
          "2896:     guint              mtu;",
          "2898:     uuid.size = 0;",
          "2899:     uuid.bt_uuid = 0;",
          "2901:     bluetooth_data = (bluetooth_data_t *) data;",
          "2903:     if (tvb_reported_length_remaining(tvb, 0) < 1)",
          "2904:         return 0;",
          "2906:     main_item = proto_tree_add_item(tree, proto_btatt, tvb, 0, -1, ENC_NA);",
          "2907:     main_tree = proto_item_add_subtree(main_item, ett_btatt);",
          "2909:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"ATT\");",
          "2911:     switch (pinfo->p2p_dir) {",
          "2912:         case P2P_DIR_SENT:",
          "2913:             col_set_str(pinfo->cinfo, COL_INFO, \"Sent \");",
          "2914:             break;",
          "2915:         case P2P_DIR_RECV:",
          "2916:             col_set_str(pinfo->cinfo, COL_INFO, \"Rcvd \");",
          "2917:             break;",
          "2918:         default:",
          "2919:             col_set_str(pinfo->cinfo, COL_INFO, \"UnknownDirection \");",
          "2920:             break;",
          "2921:     }",
          "2923:     mtu = get_mtu(pinfo, bluetooth_data);",
          "2924:     if (tvb_reported_length(tvb) > mtu)",
          "2925:         expert_add_info(pinfo, main_item, &ei_btatt_mtu_exceeded);",
          "2927:     proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_opcode, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "2928:     opcode = tvb_get_guint8(tvb, 0);",
          "2929:     offset++;",
          "2931:     request_data = get_request(tvb, offset, pinfo, opcode, bluetooth_data);",
          "2933:     col_append_str(pinfo->cinfo, COL_INFO, val_to_str_const(opcode, opcode_vals, \"<unknown>\"));",
          "2935:     switch (opcode) {",
          "2937:         proto_tree_add_bitmask_with_flags(main_tree, tvb, offset, hf_btatt_req_opcode_in_error, ett_btatt_opcode,  hfx_btatt_opcode, ENC_NA, BMT_NO_APPEND);",
          "2938:         request_opcode = tvb_get_guint8(tvb, offset);",
          "2939:         offset += 1;",
          "2941:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle_in_error, tvb, offset, bluetooth_data, NULL);",
          "2943:         col_append_fstr(pinfo->cinfo, COL_INFO, \" - %s, Handle: 0x%04x\",",
          "2944:                         val_to_str_const(tvb_get_guint8(tvb, offset), error_vals, \"<unknown>\"),",
          "2945:                         tvb_get_letohs(tvb, offset - 2));",
          "2947:         proto_tree_add_item(main_tree, hf_btatt_error_code, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "2948:         offset++;",
          "2950:         if (request_data && (request_opcode == 0x08 || request_opcode == 0x10)) {",
          "2951:             sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "2952:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "2953:         }",
          "2955:         break;",
          "2958:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Client Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "2959:         proto_tree_add_item(main_tree, hf_btatt_client_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2960:         offset += 2;",
          "2962:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "2963:             union request_parameters_union  request_parameters;",
          "2965:             request_parameters.mtu.mtu = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "2967:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "2968:         }",
          "2970:         break;",
          "2973:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Server Rx MTU: %u\", tvb_get_letohs(tvb, offset));",
          "2974:         proto_tree_add_item(main_tree, hf_btatt_server_rx_mtu, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2975:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data) {",
          "2976:             guint new_mtu;",
          "2978:             new_mtu = tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN);",
          "2979:             if (new_mtu > request_data->parameters.mtu.mtu)",
          "2980:                 new_mtu = request_data->parameters.mtu.mtu;",
          "2981:             save_mtu(pinfo, bluetooth_data, new_mtu);",
          "2982:         }",
          "2983:         offset += 2;",
          "2984:         break;",
          "2987:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handles: 0x%04x..0x%04x\",",
          "2988:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "2989:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2990:         offset += 2;",
          "2992:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2993:         offset += 2;",
          "2995:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "2996:             union request_parameters_union  request_parameters;",
          "2998:             request_parameters.find_information.starting_handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "2999:             request_parameters.find_information.ending_handle   = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3001:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3002:         }",
          "3004:         break;",
          "3007:         {",
          "3008:             guint8  format = tvb_get_guint8(tvb, offset);",
          "3010:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid_format, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3011:             offset++;",
          "3013:             if (format == 1) {",
          "3014:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "3015:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "3016:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "3018:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3019:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3021:                     proto_tree_add_item(sub_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3022:                     uuid = get_uuid(tvb, offset, 2);",
          "3023:                     offset += 2;",
          "3025:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "3026:                             tvb_get_letohs(tvb, offset - 4),",
          "3027:                             print_uuid(&uuid));",
          "3029:                     if (!pinfo->fd->flags.visited && bluetooth_data)",
          "3030:                         save_handle(pinfo, uuid, handle, bluetooth_data);",
          "3031:                 }",
          "3032:             }",
          "3033:             else if (format == 2) {",
          "3034:                 while( tvb_reported_length_remaining(tvb, offset) > 0) {",
          "3035:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_information_data, tvb, offset, 4, ENC_NA),",
          "3036:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "3038:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3039:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3041:                     proto_tree_add_item(sub_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "3042:                     uuid = get_uuid(tvb, offset, 16);",
          "3043:                     offset += 16;",
          "3045:                     proto_item_append_text(sub_item, \", Handle: 0x%04x, UUID: %s\",",
          "3046:                             tvb_get_letohs(tvb, offset - 4),",
          "3047:                             print_uuid(&uuid));",
          "3049:                     if (!pinfo->fd->flags.visited && bluetooth_data)",
          "3050:                         save_handle(pinfo, uuid, handle, bluetooth_data);",
          "3051:                 }",
          "3052:             }",
          "3053:             else {",
          "3054:                 expert_add_info(pinfo, sub_item, &ei_btatt_uuid_format_unknown);",
          "3055:             }",
          "3056:         }",
          "3057:         break;",
          "3060:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "3061:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "3062:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3064:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3065:         offset += 2;",
          "3067:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3068:         offset += 2;",
          "3070:         proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3071:         uuid = get_uuid(tvb, offset - 2, 2);",
          "3072:         offset += 2;",
          "3074:         dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), 0, uuid, bluetooth_data);",
          "3076:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3077:             union request_parameters_union  request_parameters;",
          "3079:             request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "3080:             request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "3081:             request_parameters.read_by_type.uuid = uuid;",
          "3083:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3084:         }",
          "3086:         offset = tvb_reported_length(tvb);",
          "3088:         break;",
          "3091:         while( tvb_reported_length_remaining(tvb, offset) > 0 ) {",
          "3092:             sub_item = proto_tree_add_none_format(main_tree, hf_btatt_handles_info, tvb, offset, 4,",
          "3093:                                             \"Handles Info, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "3094:                                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3096:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "3098:             offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3100:             proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3101:             offset += 2;",
          "3103:             if (!pinfo->fd->flags.visited && bluetooth_data && request_data)",
          "3104:                 save_handle(pinfo, request_data->parameters.read_by_type.uuid,",
          "3105:                         tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "3106:                         bluetooth_data);",
          "3108:         }",
          "3109:         break;",
          "3113:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s, Handles: 0x%04x..0x%04x\",",
          "3114:                             val_to_str_ext_const(tvb_get_letohs(tvb, offset+4), &bluetooth_uuid_vals_ext, \"<unknown>\"),",
          "3115:                             tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3117:         proto_tree_add_item(main_tree, hf_btatt_starting_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3118:         offset += 2;",
          "3119:         proto_tree_add_item(main_tree, hf_btatt_ending_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3120:         offset += 2;",
          "3122:         if (tvb_reported_length_remaining(tvb, offset) == 2) {",
          "3123:             proto_tree_add_item(main_tree, hf_btatt_uuid16, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3124:             offset += 2;",
          "3126:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3127:                 union request_parameters_union  request_parameters;",
          "3129:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 6, ENC_LITTLE_ENDIAN);",
          "3130:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "3131:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 2, 2);",
          "3133:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3134:             }",
          "3135:         }",
          "3136:         else if (tvb_reported_length_remaining(tvb, offset) == 16) {",
          "3137:             sub_item = proto_tree_add_item(main_tree, hf_btatt_uuid128, tvb, offset, 16, ENC_NA);",
          "3138:             proto_item_append_text(sub_item, \" (%s)\", val_to_str_ext_const(tvb_get_letohs(tvb, offset),",
          "3139:                                             &bluetooth_uuid_vals_ext, \"<unknown>\"));",
          "3140:             offset += 16;",
          "3142:             if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3143:                 union request_parameters_union  request_parameters;",
          "3145:                 request_parameters.read_by_type.starting_handle = tvb_get_guint16(tvb, offset - 20, ENC_LITTLE_ENDIAN);",
          "3146:                 request_parameters.read_by_type.ending_handle   = tvb_get_guint16(tvb, offset - 18, ENC_LITTLE_ENDIAN);",
          "3147:                 request_parameters.read_by_type.uuid = get_uuid(tvb, offset - 16, 16);",
          "3149:                 save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3150:             }",
          "3151:         }",
          "3154:         break;",
          "3157:         {",
          "3158:             guint8  length = tvb_get_guint8(tvb, offset);",
          "3160:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3161:             offset++;",
          "3163:             if(length > 0) {",
          "3164:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\",",
          "3165:                                         tvb_reported_length_remaining(tvb, offset)/length);",
          "3167:                 while (tvb_reported_length_remaining(tvb, offset) >= length)",
          "3168:                 {",
          "3169:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb,",
          "3170:                                                     offset, length, \"Attribute Data, Handle: 0x%04x\",",
          "3171:                                                     tvb_get_letohs(tvb, offset));",
          "3173:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "3175:                     if (request_data) {",
          "3176:                         if (!pinfo->fd->flags.visited && bluetooth_data)",
          "3177:                             save_handle(pinfo, request_data->parameters.read_by_type.uuid, tvb_get_guint16(tvb, offset, ENC_LITTLE_ENDIAN), bluetooth_data);",
          "3178:                     }",
          "3180:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3182:                     if (request_data) {",
          "3183:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 2, tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "3184:                     } else {",
          "3185:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 2, ENC_NA);",
          "3186:                         offset += length - 2;",
          "3187:                     }",
          "3188:                 }",
          "3189:             }",
          "3191:             if (request_data) {",
          "3192:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "3193:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "3194:             }",
          "3195:         }",
          "3196:         break;",
          "3199:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "3201:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3203:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3204:             union request_parameters_union  request_parameters;",
          "3206:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3207:             request_parameters.read_write.offset = 0;",
          "3209:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3210:         }",
          "3211:         break;",
          "3214:         if (request_data) {",
          "3215:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "3216:         }",
          "3218:         if (is_long_attribute_value(uuid) && tvb_captured_length(tvb) >= mtu) {",
          "3219:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3220:             if (!pinfo->fd->flags.visited && request_data && bluetooth_data)",
          "3221:                 save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, 0, bluetooth_data);",
          "3222:             offset = tvb_captured_length(tvb);",
          "3224:             expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "3225:         } else {",
          "3226:             if (request_data)",
          "3227:                 handle = request_data->parameters.read_write.handle;",
          "3228:             else",
          "3229:                 handle = 0;",
          "3231:             offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), handle, uuid, bluetooth_data);",
          "3232:         }",
          "3233:         break;",
          "3236:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "3237:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3239:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3241:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3242:         offset += 2;",
          "3245:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3246:             union request_parameters_union  request_parameters;",
          "3248:             request_parameters.read_write.handle = tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN);",
          "3249:             request_parameters.read_write.offset = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3251:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3252:         }",
          "3253:         break;",
          "3256:         if (request_data) {",
          "3257:             dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_write.handle);",
          "3259:             if (request_data->parameters.read_write.offset == 0 && !is_long_attribute_value(uuid)) {",
          "3260:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "3261:             } else {",
          "3262:                 if (!pinfo->fd->flags.visited && bluetooth_data)",
          "3263:                     save_value_fragment(pinfo, tvb, offset, request_data->parameters.read_write.handle, request_data->parameters.read_write.offset, bluetooth_data);",
          "3265:                 if (tvb_captured_length(tvb) < mtu) {",
          "3266:                     tvbuff_t  *next_tvb;",
          "3267:                     guint      reassembled_length;",
          "3268:                     guint8    *reassembled_data;",
          "3270:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3271:                     offset = tvb_captured_length(tvb);",
          "3273:                     reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "3274:                     if (reassembled_data) {",
          "3275:                         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "3276:                         next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "3277:                         add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "3278:                         dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "3279:                     }",
          "3280:                 } else {",
          "3281:                     sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3282:                     offset = tvb_captured_length(tvb);",
          "3284:                     expert_add_info(pinfo, sub_item, &ei_btatt_mtu_full);",
          "3285:                 }",
          "3286:             }",
          "3287:         } else {",
          "3288:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3289:             offset = tvb_captured_length(tvb);",
          "3290:         }",
          "3292:         break;",
          "3295:         if(tvb_reported_length_remaining(tvb, offset) < 4) {",
          "3296:             expert_add_info(pinfo, main_item, &ei_btatt_handle_too_few);",
          "3297:             break;",
          "3298:         }",
          "3300:         col_append_str(pinfo->cinfo, COL_INFO, \", Handles: \");",
          "3301:         while (tvb_reported_length_remaining(tvb, offset) >= 2) {",
          "3302:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3303:             col_append_fstr(pinfo->cinfo, COL_INFO, \"0x%04x \", tvb_get_letohs(tvb, offset - 2));",
          "3304:         }",
          "3306:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3307:             union request_parameters_union  request_parameters;",
          "3309:             request_parameters.read_multiple.number_of_handles = (tvb_captured_length(tvb) - 1) / 2;",
          "3310:             request_parameters.read_multiple.handle = (guint16 *) tvb_memdup(wmem_file_scope(),",
          "3311:                     tvb, 1, request_parameters.read_multiple.number_of_handles * 2);",
          "3313:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3314:         }",
          "3315:         break;",
          "3318:         if (request_data) {",
          "3319:             guint  i_handle;",
          "3321:             for (i_handle = 0; i_handle < request_data->parameters.read_multiple.number_of_handles; i_handle += 1) {",
          "3322:                 dissect_handle_uint(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid, request_data->parameters.read_multiple.handle[i_handle]);",
          "3323:                 offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), request_data->parameters.read_multiple.handle[i_handle], uuid, bluetooth_data);",
          "3324:             }",
          "3325:         } else {",
          "3326:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3327:             offset = tvb_reported_length(tvb);",
          "3328:         }",
          "3329:         break;",
          "3332:         {",
          "3333:             guint8  length = tvb_get_guint8(tvb, offset);",
          "3335:             proto_tree_add_item(main_tree, hf_btatt_length, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3336:             offset++;",
          "3338:             if (length > 0) {",
          "3339:                 col_append_fstr(pinfo->cinfo, COL_INFO, \", Attribute List Length: %u\", tvb_reported_length_remaining(tvb, offset)/length);",
          "3341:                 while (tvb_reported_length_remaining(tvb, offset) >= length) {",
          "3342:                     sub_item = proto_tree_add_none_format(main_tree, hf_btatt_attribute_data, tvb, offset, length,",
          "3343:                                                     \"Attribute Data, Handle: 0x%04x, Group End Handle: 0x%04x\",",
          "3344:                                                     tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3346:                     sub_tree = proto_item_add_subtree(sub_item, ett_btatt_list);",
          "3348:                     offset = dissect_handle(sub_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3349:                     handle = tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN);",
          "3351:                     proto_tree_add_item(sub_tree, hf_btatt_group_end_handle, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3352:                     offset += 2;",
          "3354:                     if (request_data) {",
          "3355:                         offset = dissect_attribute_value(sub_tree, sub_item, pinfo, tvb, offset, length - 4, handle, request_data->parameters.read_by_type.uuid, bluetooth_data);",
          "3356:                     } else {",
          "3357:                         proto_tree_add_item(sub_tree, hf_btatt_value, tvb, offset, length - 4, ENC_NA);",
          "3358:                         offset += length - 4;",
          "3359:                     }",
          "3360:                 }",
          "3361:             }",
          "3363:             if (request_data) {",
          "3364:                 sub_item = proto_tree_add_uint(main_tree, hf_btatt_uuid16, tvb, 0, 0, request_data->parameters.read_by_type.uuid.bt_uuid);",
          "3365:                 PROTO_ITEM_SET_GENERATED(sub_item);",
          "3366:             }",
          "3367:         }",
          "3368:         break;",
          "3374:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "3376:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "3378:         offset = dissect_attribute_value(main_tree, NULL, pinfo, tvb, offset, tvb_captured_length_remaining(tvb, offset), tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN), uuid, bluetooth_data);",
          "3380:         if (!pinfo->fd->flags.visited && bluetooth_data && (opcode == 0x12 || opcode == 0x1d)) {",
          "3381:             union request_parameters_union  request_parameters;",
          "3383:             request_parameters.data = NULL;",
          "3385:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3386:         }",
          "3387:         break;",
          "3391:         break;",
          "3395:         col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x, Offset: %u\",",
          "3396:                         tvb_get_letohs(tvb, offset), tvb_get_letohs(tvb, offset+2));",
          "3398:         offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, &uuid);",
          "3400:         proto_tree_add_item(main_tree, hf_btatt_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "3401:         offset += 2;",
          "3403:         if (!pinfo->fd->flags.visited && bluetooth_data && opcode == 0x16) {",
          "3404:             union request_parameters_union  request_parameters;",
          "3406:             request_parameters.data = NULL;",
          "3408:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3409:         }",
          "3410:         if (!pinfo->fd->flags.visited && request_data && bluetooth_data && opcode == 0x16)",
          "3411:             save_value_fragment(pinfo, tvb, offset,",
          "3412:                     tvb_get_guint16(tvb, offset - 4, ENC_LITTLE_ENDIAN),",
          "3413:                     tvb_get_guint16(tvb, offset - 2, ENC_LITTLE_ENDIAN),",
          "3414:                     bluetooth_data);",
          "3418:         if (request_data && tvb_captured_length(tvb) < mtu) {",
          "3419:             tvbuff_t  *next_tvb;",
          "3420:             guint      reassembled_length;",
          "3421:             guint8    *reassembled_data;",
          "3423:             sub_item = proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3424:             offset = tvb_captured_length(tvb);",
          "3426:             reassembled_data = get_value(pinfo, request_data->parameters.read_write.handle, bluetooth_data, &reassembled_length);",
          "3427:             if (reassembled_data) {",
          "3428:                 sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "3429:                 next_tvb = tvb_new_child_real_data(tvb, reassembled_data, reassembled_length, reassembled_length);",
          "3430:                 add_new_data_source(pinfo, next_tvb, \"Reassembled ATT\");",
          "3431:                 dissect_attribute_value(sub_tree, NULL, pinfo, next_tvb, 0, tvb_captured_length(next_tvb), request_data->parameters.read_write.handle, uuid, bluetooth_data);",
          "3432:             }",
          "3433:         } else {",
          "3434:             proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "3435:             offset = tvb_captured_length(tvb);",
          "3436:         }",
          "3438:         offset = tvb_reported_length(tvb);",
          "3440:         break;",
          "3443:         col_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",",
          "3444:                         val_to_str_const(tvb_get_guint8(tvb, offset), flags_vals, \"<unknown>\"));",
          "3445:         proto_tree_add_item(main_tree, hf_btatt_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);",
          "3446:         offset++;",
          "3448:         if (!pinfo->fd->flags.visited && bluetooth_data) {",
          "3449:             union request_parameters_union  request_parameters;",
          "3451:             request_parameters.data = NULL;",
          "3453:             save_request(pinfo, opcode, request_parameters, bluetooth_data);",
          "3454:         }",
          "3455:         break;",
          "3459:         break;",
          "3462:         {",
          "3463:             guint8 length;",
          "3465:             col_append_fstr(pinfo->cinfo, COL_INFO, \", Handle: 0x%04x\", tvb_get_letohs(tvb, offset));",
          "3467:             offset = dissect_handle(main_tree, pinfo, hf_btatt_handle, tvb, offset, bluetooth_data, NULL);",
          "3469:             length = tvb_reported_length_remaining(tvb, offset);",
          "3470:             if (length > 12) {",
          "3471:                 proto_tree_add_item(main_tree, hf_btatt_value, tvb, offset, length-12, ENC_NA);",
          "3472:                 offset+=length-12;",
          "3473:             }",
          "3475:             proto_tree_add_item(main_tree, hf_btatt_sign_counter, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "3476:             offset+=4;",
          "3477:             proto_tree_add_item(main_tree, hf_btatt_signature, tvb, offset, 8, ENC_NA);",
          "3478:             offset+=8;",
          "3479:         break;",
          "3480:         }",
          "3481:     default:",
          "3482:         break;",
          "3483:     }",
          "3485:     if (request_data) {",
          "3486:         if (request_data->request_in_frame > 0  && request_data->request_in_frame != pinfo->fd->num) {",
          "3487:             sub_item = proto_tree_add_uint(main_tree, hf_request_in_frame, tvb, 0, 0, request_data->request_in_frame);",
          "3488:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "3489:         }",
          "3491:         if (!pinfo->fd->flags.visited && request_data->response_in_frame == 0 &&",
          "3492:                 pinfo->fd->num > request_data->request_in_frame)",
          "3493:             request_data->response_in_frame = pinfo->fd->num;",
          "3495:         if (request_data->response_in_frame > 0 && request_data->response_in_frame != pinfo->fd->num) {",
          "3496:             sub_item = proto_tree_add_uint(main_tree, hf_response_in_frame, tvb, 0, 0, request_data->response_in_frame);",
          "3497:             PROTO_ITEM_SET_GENERATED(sub_item);",
          "3498:         }",
          "3499:     }",
          "3501:     return offset;",
          "3502: }",
          "3504: void",
          "3505: proto_register_btatt(void)",
          "3506: {",
          "3507:     module_t         *module;",
          "3508:     expert_module_t  *expert_btatt;",
          "3511:     static hf_register_info hf[] = {",
          "3512:         {&hf_btatt_opcode,",
          "3513:             {\"Opcode\", \"btatt.opcode\",",
          "3514:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "3515:             NULL, HFILL}",
          "3516:         },",
          "3517:         {&hf_btatt_opcode_authentication_signature,",
          "3518:             {\"Authentication Signature\", \"btatt.opcode.authentication_signature\",",
          "3519:             FT_BOOLEAN, 8, NULL, 0x80,",
          "3520:             NULL, HFILL}",
          "3521:         },",
          "3522:         {&hf_btatt_opcode_command,",
          "3523:             {\"Command\", \"btatt.opcode.command\",",
          "3524:             FT_BOOLEAN, 8, NULL, 0x40,",
          "3525:             NULL, HFILL}",
          "3526:         },",
          "3527:         {&hf_btatt_opcode_method,",
          "3528:             {\"Method\", \"btatt.opcode.method\",",
          "3529:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x3F,",
          "3530:             NULL, HFILL}",
          "3531:         },",
          "3532:         {&hf_btatt_handles_info,",
          "3533:             {\"Handles Info\", \"btatt.handles_info\",",
          "3534:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "3535:             NULL, HFILL}",
          "3536:         },",
          "3537:         {&hf_btatt_attribute_data,",
          "3538:             {\"Attribute Data\", \"btatt.attribute_data\",",
          "3539:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "3540:             NULL, HFILL}",
          "3541:         },",
          "3542:         {&hf_btatt_handle,",
          "3543:             {\"Handle\", \"btatt.handle\",",
          "3544:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3545:             NULL, HFILL}",
          "3546:         },",
          "3547:         {&hf_btatt_starting_handle,",
          "3548:             {\"Starting Handle\", \"btatt.starting_handle\",",
          "3549:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3550:             NULL, HFILL}",
          "3551:         },",
          "3552:         {&hf_btatt_ending_handle,",
          "3553:             {\"Ending Handle\", \"btatt.ending_handle\",",
          "3554:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3555:             NULL, HFILL}",
          "3556:         },",
          "3557:         {&hf_btatt_group_end_handle,",
          "3558:             {\"Group End Handle\", \"btatt.group_end_handle\",",
          "3559:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3560:             NULL, HFILL}",
          "3561:         },",
          "3562:         {&hf_btatt_value,",
          "3563:             {\"Value\", \"btatt.value\",",
          "3564:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "3565:             NULL, HFILL}",
          "3566:         },",
          "3567:         {&hf_btatt_req_opcode_in_error,",
          "3568:             {\"Request Opcode in Error\", \"btatt.req_opcode_in_error\",",
          "3569:             FT_UINT8, BASE_HEX, VALS(opcode_vals), 0x0,",
          "3570:             NULL, HFILL}",
          "3571:         },",
          "3572:         {&hf_btatt_handle_in_error,",
          "3573:             {\"Handle in Error\", \"btatt.handle\",",
          "3574:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3575:             NULL, HFILL}",
          "3576:         },",
          "3577:         {&hf_btatt_error_code,",
          "3578:             {\"Error Code\", \"btatt.error_code\",",
          "3579:             FT_UINT8, BASE_HEX, VALS(error_vals), 0x0,",
          "3580:             NULL, HFILL}",
          "3581:         },",
          "3582:         {&hf_btatt_uuid16,",
          "3583:             {\"UUID\", \"btatt.uuid16\",",
          "3584:             FT_UINT16, BASE_HEX |BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "3585:             NULL, HFILL}",
          "3586:         },",
          "3587:         {&hf_btatt_uuid128,",
          "3588:             {\"UUID\", \"btatt.uuid128\",",
          "3589:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "3590:             NULL, HFILL}",
          "3591:         },",
          "3592:         {&hf_btatt_client_rx_mtu,",
          "3593:             {\"Client Rx MTU\", \"btatt.client_rx_mtu\",",
          "3594:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3595:             NULL, HFILL}",
          "3596:         },",
          "3597:         {&hf_btatt_server_rx_mtu,",
          "3598:             {\"Server Rx MTU\", \"btatt.server_rx_mtu\",",
          "3599:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3600:             NULL, HFILL}",
          "3601:         },",
          "3602:         {&hf_btatt_uuid_format,",
          "3603:             {\"UUID Format\", \"btatt.uuid_format\",",
          "3604:             FT_UINT8, BASE_HEX, VALS(uuid_format_vals), 0x0,",
          "3605:             NULL, HFILL}",
          "3606:         },",
          "3607:         {&hf_btatt_length,",
          "3608:             {\"Length\", \"btatt.length\",",
          "3609:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3610:             \"Length of Handle/Value Pair\", HFILL}",
          "3611:         },",
          "3612:         {&hf_btatt_offset,",
          "3613:             {\"Offset\", \"btatt.offset\",",
          "3614:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3615:             NULL, HFILL}",
          "3616:         },",
          "3617:         {&hf_btatt_flags,",
          "3618:             {\"Flags\", \"btatt.flags\",",
          "3619:             FT_UINT8, BASE_HEX, VALS(flags_vals), 0x0,",
          "3620:             NULL, HFILL}",
          "3621:         },",
          "3622:         {&hf_btatt_sign_counter,",
          "3623:             {\"Sign Counter\", \"btatt.sign_counter\",",
          "3624:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "3625:             NULL, HFILL}",
          "3626:         },",
          "3627:         {&hf_btatt_signature,",
          "3628:             {\"Signature\", \"btatt.signature\",",
          "3629:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "3630:             NULL, HFILL}",
          "3631:         },",
          "3632:         {&hf_btatt_characteristic_properties,",
          "3633:             {\"Characteristic Properties\", \"btatt.characteristic_properties\",",
          "3634:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "3635:             NULL, HFILL}",
          "3636:         },",
          "3637:         {&hf_btatt_characteristic_properties_extended_properties,",
          "3638:             {\"Extended Properties\", \"btatt.characteristic_properties.extended_properties\",",
          "3639:             FT_BOOLEAN, 8, NULL, 0x80,",
          "3640:             NULL, HFILL}",
          "3641:         },",
          "3642:         {&hf_btatt_characteristic_properties_authenticated_signed_writes,",
          "3643:             {\"Authenticated Signed Writes\", \"btatt.characteristic_properties.authenticated_signed_writes\",",
          "3644:             FT_BOOLEAN, 8, NULL, 0x40,",
          "3645:             NULL, HFILL}",
          "3646:         },",
          "3647:         {&hf_btatt_characteristic_properties_indicate,",
          "3648:             {\"Indicate\", \"btatt.characteristic_properties.indicate\",",
          "3649:             FT_BOOLEAN, 8, NULL, 0x20,",
          "3650:             NULL, HFILL}",
          "3651:         },",
          "3652:         {&hf_btatt_characteristic_properties_notify,",
          "3653:             {\"Notify\", \"btatt.characteristic_properties.notify\",",
          "3654:             FT_BOOLEAN, 8, NULL, 0x10,",
          "3655:             NULL, HFILL}",
          "3656:         },",
          "3657:         {&hf_btatt_characteristic_properties_write,",
          "3658:             {\"Write\", \"btatt.characteristic_properties.write\",",
          "3659:             FT_BOOLEAN, 8, NULL, 0x08,",
          "3660:             NULL, HFILL}",
          "3661:         },",
          "3662:         {&hf_btatt_characteristic_properties_write_without_response,",
          "3663:             {\"Write without Response\", \"btatt.characteristic_properties.write_without_response\",",
          "3664:             FT_BOOLEAN, 8, NULL, 0x04,",
          "3665:             NULL, HFILL}",
          "3666:         },",
          "3667:         {&hf_btatt_characteristic_properties_read,",
          "3668:             {\"Read\", \"btatt.characteristic_properties.read\",",
          "3669:             FT_BOOLEAN, 8, NULL, 0x02,",
          "3670:             NULL, HFILL}",
          "3671:         },",
          "3672:         {&hf_btatt_characteristic_properties_broadcast,",
          "3673:             {\"Broadcast\", \"btatt.characteristic_properties.broadcast\",",
          "3674:             FT_BOOLEAN, 8, NULL, 0x01,",
          "3675:             NULL, HFILL}",
          "3676:         },",
          "3677:         {&hf_btatt_characteristic_value_handle,",
          "3678:             {\"Characteristic Value Handle\", \"btatt.handle\",",
          "3679:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3680:             NULL, HFILL}",
          "3681:         },",
          "3682:         {&hf_btatt_included_service_handle,",
          "3683:             {\"Included Service Handle\", \"btatt.handle\",",
          "3684:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3685:             NULL, HFILL}",
          "3686:         },",
          "3687:         {&hf_btatt_information_data,",
          "3688:             {\"Information Data\", \"btatt.information_data\",",
          "3689:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "3690:             NULL, HFILL}",
          "3691:         },",
          "3692:         {&hf_btatt_characteristic_configuration_client,",
          "3693:             {\"Characteristic Configuration Client\", \"btatt.characteristic_configuration_client\",",
          "3694:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3695:             NULL, HFILL}",
          "3696:         },",
          "3697:         {&hf_btatt_characteristic_configuration_client_reserved,",
          "3698:             {\"Reseved\", \"btatt.characteristic_configuration_client.reserved\",",
          "3699:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "3700:             NULL, HFILL}",
          "3701:         },",
          "3702:         {&hf_btatt_characteristic_configuration_client_indication,",
          "3703:             {\"Indication\", \"btatt.characteristic_configuration_client.indication\",",
          "3704:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "3705:             NULL, HFILL}",
          "3706:         },",
          "3707:         {&hf_btatt_characteristic_configuration_client_notification,",
          "3708:             {\"Notification\", \"btatt.characteristic_configuration_client.notification\",",
          "3709:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "3710:             NULL, HFILL}",
          "3711:         },",
          "3712:         {&hf_btatt_characteristic_configuration_server,",
          "3713:             {\"Characteristic Configuration Server\", \"btatt.characteristic_configuration_server\",",
          "3714:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3715:             NULL, HFILL}",
          "3716:         },",
          "3717:         {&hf_btatt_characteristic_configuration_server_reserved,",
          "3718:             {\"Reseved\", \"btatt.characteristic_configuration_server.reserved\",",
          "3719:             FT_UINT16, BASE_HEX, NULL, 0xFFFE,",
          "3720:             NULL, HFILL}",
          "3721:         },",
          "3722:         {&hf_btatt_characteristic_configuration_server_broadcast,",
          "3723:             {\"Broadcast\", \"btatt.characteristic_configuration_server.broadcast\",",
          "3724:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "3725:             NULL, HFILL}",
          "3726:         },",
          "3727:         {&hf_btatt_hogp_protocol_mode,",
          "3728:             {\"Protocol Mode\", \"btatt.hogp.protocol_mode\",",
          "3729:             FT_UINT8, BASE_HEX, VALS(hogp_protocol_mode_vals), 0x0,",
          "3730:             NULL, HFILL}",
          "3731:         },",
          "3732:         {&hf_btatt_report_reference_report_id,",
          "3733:             {\"Report ID\", \"btatt.report_reference.report_id\",",
          "3734:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "3735:             NULL, HFILL}",
          "3736:         },",
          "3737:         {&hf_btatt_report_reference_report_type,",
          "3738:             {\"Report Type\", \"btatt.report_reference.report_id\",",
          "3739:             FT_UINT8, BASE_HEX, VALS(report_reference_report_type_vals), 0x0,",
          "3740:             NULL, HFILL}",
          "3741:         },",
          "3742:         {&hf_btatt_hogp_bcd_hid,",
          "3743:             {\"bcdHID\", \"btatt.hogp.bcd_hid\",",
          "3744:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3745:             NULL, HFILL}",
          "3746:         },",
          "3747:         {&hf_btatt_hogp_b_country_code,",
          "3748:             {\"bCountryCode\", \"btatt.hogp.b_country_code\",",
          "3749:             FT_UINT8, BASE_HEX, VALS(hid_country_code_vals), 0x0,",
          "3750:             NULL, HFILL}",
          "3751:         },",
          "3752:         {&hf_btatt_hogp_flags,",
          "3753:             {\"Flags\", \"btatt.hogp.flags\",",
          "3754:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "3755:             NULL, HFILL}",
          "3756:         },",
          "3757:         {&hf_btatt_hogp_flags_reserved,",
          "3758:             {\"Reserved\", \"btatt.hogp.flags.reserved\",",
          "3759:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "3760:             NULL, HFILL}",
          "3761:         },",
          "3762:         {&hf_btatt_hogp_flags_normally_connectable,",
          "3763:             {\"Normally Connectable\", \"btatt.hogp.flags.normally_connectable\",",
          "3764:             FT_BOOLEAN, 8, NULL, 0x02,",
          "3765:             NULL, HFILL}",
          "3766:         },",
          "3767:         {&hf_btatt_hogp_flags_remote_wake,",
          "3768:             {\"Remote Wake\", \"btatt.hogp.flags.remote_wake\",",
          "3769:             FT_BOOLEAN, 8, NULL, 0x01,",
          "3770:             NULL, HFILL}",
          "3771:         },",
          "3772:         {&hf_btatt_characteristic_user_description,",
          "3773:             {\"Characteristic User Description\", \"btatt.characteristic_user_description\",",
          "3774:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "3775:             NULL, HFILL}",
          "3776:         },",
          "3777:         {&hf_btatt_characteristic_extended_properties,",
          "3778:             {\"Characteristic Extended Properties\", \"btatt.characteristic_extended_properties\",",
          "3779:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3780:             NULL, HFILL}",
          "3781:         },",
          "3782:         {&hf_btatt_characteristic_extended_properties_reserved,",
          "3783:             {\"Reserved\", \"btatt.characteristic_extended_properties.reserved\",",
          "3784:             FT_UINT16, BASE_HEX, NULL, 0xFFFC,",
          "3785:             NULL, HFILL}",
          "3786:         },",
          "3787:         {&hf_btatt_characteristic_extended_properties_writable_auxiliaries,",
          "3788:             {\"Writable Auxiliaries\", \"btatt.characteristic_extended_properties.writable_auxiliaries\",",
          "3789:             FT_UINT16, BASE_HEX, NULL, 0x0002,",
          "3790:             NULL, HFILL}",
          "3791:         },",
          "3792:         {&hf_btatt_characteristic_extended_properties_reliable_write,",
          "3793:             {\"Reliable Write\", \"btatt.characteristic_extended_properties.reliable_write\",",
          "3794:             FT_UINT16, BASE_HEX, NULL, 0x0001,",
          "3795:             NULL, HFILL}",
          "3796:         },",
          "3797:         {&hf_btatt_characteristic_presentation_format,",
          "3798:             {\"Format\", \"btatt.characteristic_presentation.format\",",
          "3799:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_format_vals), 0x0,",
          "3800:             NULL, HFILL}",
          "3801:         },",
          "3802:         {&hf_btatt_characteristic_presentation_exponent,",
          "3803:             {\"Exponent\", \"btatt.characteristic_presentation.exponent\",",
          "3804:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3805:             NULL, HFILL}",
          "3806:         },",
          "3807:         {&hf_btatt_characteristic_presentation_unit,",
          "3808:             {\"Unit\", \"btatt.characteristic_presentation.unit\",",
          "3809:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_uuid_vals_ext, 0x0,",
          "3810:             NULL, HFILL}",
          "3811:         },",
          "3812:         {&hf_btatt_characteristic_presentation_namespace,",
          "3813:             {\"Namespace\", \"btatt.characteristic_presentation.namespace\",",
          "3814:             FT_UINT8, BASE_HEX, VALS(characteristic_presentation_namespace_vals), 0x0,",
          "3815:             NULL, HFILL}",
          "3816:         },",
          "3817:         {&hf_btatt_characteristic_presentation_namespace_description,",
          "3818:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "3819:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3820:             NULL, HFILL}",
          "3821:         },",
          "3822:         {&hf_btatt_characteristic_presentation_namespace_description_btsig,",
          "3823:             {\"Namespace Descrition\", \"btatt.characteristic_presentation.namespace_description\",",
          "3824:             FT_UINT16, BASE_HEX, VALS(characteristic_presentation_namespace_description_btsig_vals), 0x0,",
          "3825:             NULL, HFILL}",
          "3826:         },",
          "3827:         {&hf_btatt_esp_trigger_logic,",
          "3828:             {\"Trigger Logic\", \"btatt.esp.trigger_logic\",",
          "3829:             FT_UINT8, BASE_HEX, VALS(esp_trigger_logic_vals), 0x0,",
          "3830:             NULL, HFILL}",
          "3831:         },",
          "3832:         {&hf_btatt_esp_condition,",
          "3833:             {\"Trigger Logic\", \"btatt.esp.condition\",",
          "3834:             FT_UINT8, BASE_HEX, VALS(esp_condition_vals), 0x0,",
          "3835:             NULL, HFILL}",
          "3836:         },",
          "3837:         {&hf_btatt_esp_operand,",
          "3838:             {\"Operand\", \"btatt.esp.operand\",",
          "3839:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "3840:             NULL, HFILL}",
          "3841:         },",
          "3842:         {&hf_btatt_esp_flags,",
          "3843:             {\"Flags\", \"btatt.esp.flags\",",
          "3844:             FT_UINT16, BASE_HEX, NULL, 0xFFFF,",
          "3845:             NULL, HFILL}",
          "3846:         },",
          "3847:         {&hf_btatt_esp_sampling_function,",
          "3848:             {\"Sampling Function\", \"btatt.esp.sampling_function\",",
          "3849:             FT_UINT8, BASE_HEX, VALS(esp_sampling_function_vals), 0x0,",
          "3850:             NULL, HFILL}",
          "3851:         },",
          "3852:         {&hf_btatt_esp_measurement_period,",
          "3853:             {\"Measurement Period\", \"btatt.esp.measurement_period\",",
          "3854:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "3855:             NULL, HFILL}",
          "3856:         },",
          "3857:         {&hf_btatt_esp_update_interval,",
          "3858:             {\"Update Interval\", \"btatt.esp.update_interval\",",
          "3859:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "3860:             NULL, HFILL}",
          "3861:         },",
          "3862:         {&hf_btatt_esp_application,",
          "3863:             {\"Application\", \"btatt.esp.application\",",
          "3864:             FT_UINT8, BASE_HEX, VALS(esp_application_vals), 0x0,",
          "3865:             NULL, HFILL}",
          "3866:         },",
          "3867:         {&hf_btatt_esp_measurement_uncertainty,",
          "3868:             {\"Measurement Uncertainty\", \"btatt.esp.measurement_uncertainty\",",
          "3869:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3870:             NULL, HFILL}",
          "3871:         },",
          "3872:         {&hf_btatt_device_name,",
          "3873:             {\"Device Name\", \"btatt.device_name\",",
          "3874:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "3875:             NULL, HFILL}",
          "3876:         },",
          "3877:         {&hf_btatt_appearance,",
          "3878:             {\"Appearance\", \"btatt.appearance\",",
          "3879:             FT_UINT16, BASE_DEC_HEX, NULL, 0x0,",
          "3880:             NULL, HFILL}",
          "3881:         },",
          "3882:         {&hf_btatt_appearance_category,",
          "3883:             {\"Category\", \"btatt.appearance.category\",",
          "3884:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_category_vals), 0xFFC0,",
          "3885:             NULL, HFILL}",
          "3886:         },",
          "3887:         {&hf_btatt_appearance_subcategory,",
          "3888:             {\"Subcategory\", \"btatt.appearance.subcategory\",",
          "3889:             FT_UINT16, BASE_DEC_HEX, NULL, 0x003F,",
          "3890:             NULL, HFILL}",
          "3891:         },",
          "3892:         {&hf_btatt_appearance_subcategory_watch,",
          "3893:             {\"Subcategory\", \"btatt.appearance.subcategory.watch\",",
          "3894:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_watch_vals), 0x003F,",
          "3895:             NULL, HFILL}",
          "3896:         },",
          "3897:         {&hf_btatt_appearance_subcategory_thermometer,",
          "3898:             {\"Subcategory\", \"btatt.appearance.subcategory.thermometer\",",
          "3899:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_thermometer_vals), 0x003F,",
          "3900:             NULL, HFILL}",
          "3901:         },",
          "3902:         {&hf_btatt_appearance_subcategory_heart_rate,",
          "3903:             {\"Subcategory\", \"btatt.appearance.subcategory.heart_rate\",",
          "3904:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_heart_rate_vals), 0x003F,",
          "3905:             NULL, HFILL}",
          "3906:         },",
          "3907:         {&hf_btatt_appearance_subcategory_blood_pressure,",
          "3908:             {\"Subcategory\", \"btatt.appearance.subcategory.blood_pressure\",",
          "3909:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_blood_pressure_vals), 0x003F,",
          "3910:             NULL, HFILL}",
          "3911:         },",
          "3912:         {&hf_btatt_appearance_subcategory_hid,",
          "3913:             {\"Subcategory\", \"btatt.appearance.subcategory.hid\",",
          "3914:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_hid_vals), 0x003F,",
          "3915:             NULL, HFILL}",
          "3916:         },",
          "3917:         {&hf_btatt_appearance_subcategory_running_walking_sensor,",
          "3918:             {\"Subcategory\", \"btatt.appearance.subcategory.watch\",",
          "3919:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_watch_vals), 0x003F,",
          "3920:             NULL, HFILL}",
          "3921:         },",
          "3922:         {&hf_btatt_appearance_subcategory_cycling,",
          "3923:             {\"Subcategory\", \"btatt.appearance.subcategory.cycling\",",
          "3924:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_cycling_vals), 0x003F,",
          "3925:             NULL, HFILL}",
          "3926:         },",
          "3927:         {&hf_btatt_appearance_subcategory_pulse_oximeter,",
          "3928:             {\"Subcategory\", \"btatt.appearance.subcategory.pulse_oximeter\",",
          "3929:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_pulse_oximeter_vals), 0x003F,",
          "3930:             NULL, HFILL}",
          "3931:         },",
          "3932:         {&hf_btatt_appearance_subcategory_outdoor_sports_activity,",
          "3933:             {\"Subcategory\", \"btatt.appearance.subcategory.outdoor_sports_activity\",",
          "3934:             FT_UINT16, BASE_DEC_HEX, VALS(appearance_subcategory_outdoor_sports_activity_vals), 0x003F,",
          "3935:             NULL, HFILL}",
          "3936:         },",
          "3937:         {&hf_btatt_peripheral_privacy_flag,",
          "3938:             {\"Peripheral Privacy\", \"btatt.peripheral_privacy_flag\",",
          "3939:             FT_BOOLEAN, 8, NULL, 0x0,",
          "3940:             NULL, HFILL}",
          "3941:         },",
          "3942:         { &hf_btatt_reconnection_address,",
          "3943:             { \"Reconnection Address\", \"btatt.reconnection_address\",",
          "3944:             FT_ETHER, BASE_NONE, NULL, 0x0,",
          "3945:             NULL, HFILL }",
          "3946:         },",
          "3947:         {&hf_btatt_minimum_connection_interval,",
          "3948:             {\"Minimum Connection Interval\", \"btatt.minimum_connection_interval\",",
          "3949:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3950:             NULL, HFILL}",
          "3951:         },",
          "3952:         {&hf_btatt_maximum_connection_interval,",
          "3953:             {\"Maximum Connection Interval\", \"btatt.maximum_connection_interval\",",
          "3954:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3955:             NULL, HFILL}",
          "3956:         },",
          "3957:         {&hf_btatt_slave_latency,",
          "3958:             {\"Slave Latency\", \"btatt.slave_latency\",",
          "3959:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3960:             NULL, HFILL}",
          "3961:         },",
          "3962:         {&hf_btatt_connection_supervision_timeout_multiplier,",
          "3963:             {\"Connection Supervision Timeout Multiplier\", \"btatt.connection_supervision_timeout_multiplier\",",
          "3964:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3965:             NULL, HFILL}",
          "3966:         },",
          "3967:         {&hf_btatt_alert_level,",
          "3968:             {\"Alert Level\", \"btatt.alert_level\",",
          "3969:             FT_UINT8, BASE_HEX, VALS(alert_level_vals), 0x0,",
          "3970:             NULL, HFILL}",
          "3971:         },",
          "3972:         {&hf_btatt_tx_power_level,",
          "3973:             {\"Tx Power Level\", \"btatt.tx_power_level\",",
          "3974:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "3975:             NULL, HFILL}",
          "3976:         },",
          "3977:         {&hf_btatt_year,",
          "3978:             {\"Year\", \"btatt.year\",",
          "3979:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3980:             NULL, HFILL}",
          "3981:         },",
          "3982:         {&hf_btatt_month,",
          "3983:             {\"Month\", \"btatt.month\",",
          "3984:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3985:             NULL, HFILL}",
          "3986:         },",
          "3987:         {&hf_btatt_day,",
          "3988:             {\"Day\", \"btatt.day\",",
          "3989:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3990:             NULL, HFILL}",
          "3991:         },",
          "3992:         {&hf_btatt_hours,",
          "3993:             {\"Hours\", \"btatt.hours\",",
          "3994:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3995:             NULL, HFILL}",
          "3996:         },",
          "3997:         {&hf_btatt_minutes,",
          "3998:             {\"Minutes\", \"btatt.minutes\",",
          "3999:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4000:             NULL, HFILL}",
          "4001:         },",
          "4002:         {&hf_btatt_seconds,",
          "4003:             {\"Seconds\", \"btatt.seconds\",",
          "4004:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4005:             NULL, HFILL}",
          "4006:         },",
          "4007:         {&hf_btatt_day_of_week,",
          "4008:             {\"Day of Week\", \"btatt.day_of_week\",",
          "4009:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4010:             NULL, HFILL}",
          "4011:         },",
          "4012:         {&hf_btatt_fractions256,",
          "4013:             {\"Fractions256\", \"btatt.fractions256\",",
          "4014:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4015:             \"1/256th of a second\", HFILL}",
          "4016:         },",
          "4017:         {&hf_btatt_dst_offset,",
          "4018:             {\"Daylight Saving Time Offset\", \"btatt.dst_offset\",",
          "4019:             FT_UINT8, BASE_HEX, VALS(dst_offset_vals), 0x0,",
          "4020:             NULL, HFILL}",
          "4021:         },",
          "4022:         {&hf_btatt_model_number_string,",
          "4023:             {\"Model Number String\", \"btatt.model_number_string\",",
          "4024:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4025:             NULL, HFILL}",
          "4026:         },",
          "4027:         {&hf_btatt_serial_number_string,",
          "4028:             {\"Serial Number String\", \"btatt.serial_number_string\",",
          "4029:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4030:             NULL, HFILL}",
          "4031:         },",
          "4032:         {&hf_btatt_firmware_revision_string,",
          "4033:             {\"Firmware Revision String\", \"btatt.firmware_revision_string\",",
          "4034:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4035:             NULL, HFILL}",
          "4036:         },",
          "4037:         {&hf_btatt_hardware_revision_string,",
          "4038:             {\"Hardware Revision String\", \"btatt.hardware_revision_string\",",
          "4039:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4040:             NULL, HFILL}",
          "4041:         },",
          "4042:         {&hf_btatt_software_revision_string,",
          "4043:             {\"Software Revision String\", \"btatt.software_revision_string\",",
          "4044:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4045:             NULL, HFILL}",
          "4046:         },",
          "4047:         {&hf_btatt_manufacturer_string,",
          "4048:             {\"Manufacturer String\", \"btatt.manufacturer_string\",",
          "4049:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4050:             NULL, HFILL}",
          "4051:         },",
          "4053:         {&hf_btatt_system_id_manufacturer_identifier,",
          "4054:             {\"Manufacturer Identifier\", \"btatt.system_id.manufacturer_identifier\",",
          "4055:             FT_UINT64, BASE_HEX, NULL, 0x0,",
          "4056:             NULL, HFILL}",
          "4057:         },",
          "4058:         {&hf_btatt_system_id_organizationally_unique_identifier,",
          "4059:             {\"Organizationally Unique Identifier\", \"btatt.system_id.organizationally_unique_identifier\",",
          "4060:             FT_UINT24, BASE_HEX, VALS(oui_vals), 0x0,",
          "4061:             NULL, HFILL}",
          "4062:         },",
          "4063:         {&hf_btatt_timezone,",
          "4064:             {\"Timezone\", \"btatt.timezone\",",
          "4065:             FT_INT8, BASE_DEC, VALS(timezone_vals), 0x0,",
          "4066:             NULL, HFILL}",
          "4067:         },",
          "4068:         {&hf_btatt_time_accuracy,",
          "4069:             {\"Time Accuracy\", \"btatt.time_accuracy\",",
          "4070:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4071:             NULL, HFILL}",
          "4072:         },",
          "4073:         {&hf_btatt_time_source,",
          "4074:             {\"Time Source\", \"btatt.time_source\",",
          "4075:             FT_UINT8, BASE_DEC, VALS(time_source_vals), 0x0,",
          "4076:             NULL, HFILL}",
          "4077:         },",
          "4078:         {&hf_btatt_time_days_since_update,",
          "4079:             {\"Days Since Update\", \"btatt.days_since_update\",",
          "4080:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4081:             NULL, HFILL}",
          "4082:         },",
          "4083:         {&hf_btatt_time_hours_since_update,",
          "4084:             {\"Hours Since Update\", \"btatt.hours_since_update\",",
          "4085:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4086:             NULL, HFILL}",
          "4087:         },",
          "4088:         {&hf_btatt_time_update_control_point,",
          "4089:             {\"Update Control Point\", \"btatt.update_control_point\",",
          "4090:             FT_UINT8, BASE_HEX, VALS(time_update_control_point_vals), 0x0,",
          "4091:             NULL, HFILL}",
          "4092:         },",
          "4093:         {&hf_btatt_time_current_state,",
          "4094:             {\"Current State\", \"btatt.time_current_state\",",
          "4095:             FT_UINT8, BASE_HEX, VALS(time_current_state_vals), 0x0,",
          "4096:             NULL, HFILL}",
          "4097:         },",
          "4098:         {&hf_btatt_time_result,",
          "4099:             {\"Result\", \"btatt.time_result\",",
          "4100:             FT_UINT8, BASE_HEX, VALS(time_result_vals), 0x0,",
          "4101:             NULL, HFILL}",
          "4102:         },",
          "4103:         {&hf_btatt_battery_level,",
          "4104:             {\"Battery Level\", \"btatt.battery_level\",",
          "4105:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4106:             NULL, HFILL}",
          "4107:         },",
          "4108:         {&hf_btatt_temperature_type,",
          "4109:             {\"Temperature Type\", \"btatt.temperature_type\",",
          "4110:             FT_UINT8, BASE_HEX, VALS(temperature_type_vals), 0x0,",
          "4111:             NULL, HFILL}",
          "4112:         },",
          "4113:         {&hf_btatt_measurement_interval,",
          "4114:             {\"Measurement Interval\", \"btatt.measurement_interval\",",
          "4115:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4116:             NULL, HFILL}",
          "4117:         },",
          "4118:         {&hf_btatt_time_adjust_reason,",
          "4119:             {\"Adjust Reason\", \"btatt.adjust_reason\",",
          "4120:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4121:             NULL, HFILL}",
          "4122:         },",
          "4123:         {&hf_btatt_time_adjust_reason_reserved,",
          "4124:             {\"Reserved\", \"btatt.adjust_reason.reserved\",",
          "4125:             FT_UINT8, BASE_HEX, NULL, 0xF0,",
          "4126:             NULL, HFILL}",
          "4127:         },",
          "4128:         {&hf_btatt_time_adjust_reason_change_of_dst,",
          "4129:             {\"Change of DST\", \"btatt.adjust_reason.change_of_dst\",",
          "4130:             FT_BOOLEAN, 8, NULL, 0x08,",
          "4131:             NULL, HFILL}",
          "4132:         },",
          "4133:         {&hf_btatt_time_adjust_reason_change_of_timezone,",
          "4134:             {\"Change of Timezone\", \"btatt.adjust_reason.change_of_timezone\",",
          "4135:             FT_BOOLEAN, 8, NULL, 0x04,",
          "4136:             NULL, HFILL}",
          "4137:         },",
          "4138:         {&hf_btatt_time_adjust_reason_external_reference_time_update,",
          "4139:             {\"External Reference Time Update\", \"btatt.adjust_reason.external_reference_time_update\",",
          "4140:             FT_BOOLEAN, 8, NULL, 0x02,",
          "4141:             NULL, HFILL}",
          "4142:         },",
          "4143:         {&hf_btatt_time_adjust_reason_manual_time_update,",
          "4144:             {\"Manual Time Update\", \"btatt.adjust_reason.manual_time_update\",",
          "4145:             FT_BOOLEAN, 8, NULL, 0x01,",
          "4146:             NULL, HFILL}",
          "4147:         },",
          "4148:         {&hf_btatt_magnetic_declination,",
          "4149:             {\"Magnetic Declination\", \"btatt.magnetic_declination\",",
          "4150:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4151:             NULL, HFILL}",
          "4152:         },",
          "4153:         {&hf_btatt_scan_refresh,",
          "4154:             {\"Scan Refresh\", \"btatt.scan_refresh\",",
          "4155:             FT_UINT8, BASE_HEX, VALS(scan_refresh_vals), 0x0,",
          "4156:             NULL, HFILL}",
          "4157:         },",
          "4158:         {&hf_btatt_body_sensor_location,",
          "4159:             {\"Body Sensor Location\", \"btatt.body_sensor_location\",",
          "4160:             FT_UINT8, BASE_HEX, VALS(body_sensor_location_vals), 0x0,",
          "4161:             NULL, HFILL}",
          "4162:         },",
          "4163:         {&hf_btatt_heart_rate_control_point,",
          "4164:             {\"Heart Rate Control Point\", \"btatt.heart_rate_control_point\",",
          "4165:             FT_UINT8, BASE_HEX, VALS(heart_rate_control_point_vals), 0x0,",
          "4166:             NULL, HFILL}",
          "4167:         },",
          "4168:         {&hf_btatt_alert_status,",
          "4169:             {\"Alert Status\", \"btatt.alert.status\",",
          "4170:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4171:             NULL, HFILL}",
          "4172:         },",
          "4173:         {&hf_btatt_alert_status_reserved,",
          "4174:             {\"Reserved\", \"btatt.alert.status.reserved\",",
          "4175:             FT_UINT8, BASE_HEX, NULL, 0xF8,",
          "4176:             NULL, HFILL}",
          "4177:         },",
          "4178:         {&hf_btatt_alert_status_display_alert_status,",
          "4179:             {\"Display Alert Status\", \"btatt.alert.status.display_alert_status\",",
          "4180:             FT_BOOLEAN, 8, NULL, 0x04,",
          "4181:             NULL, HFILL}",
          "4182:         },",
          "4183:         {&hf_btatt_alert_status_vibrate_state,",
          "4184:             {\"Vibrate State\", \"btatt.alert.status.vibrate_state\",",
          "4185:             FT_BOOLEAN, 8, NULL, 0x02,",
          "4186:             NULL, HFILL}",
          "4187:         },",
          "4188:         {&hf_btatt_alert_status_ringer_state,",
          "4189:             {\"Ringer State\", \"btatt.alert_status.ringer_state\",",
          "4190:             FT_BOOLEAN, 8, NULL, 0x01,",
          "4191:             NULL, HFILL}",
          "4192:         },",
          "4193:         {&hf_btatt_ringer_control_point,",
          "4194:             {\"Ringer Control Point\", \"btatt.ringer_control_point\",",
          "4195:             FT_UINT8, BASE_HEX, VALS(ringer_control_point_vals), 0x0,",
          "4196:             NULL, HFILL}",
          "4197:         },",
          "4198:         {&hf_btatt_ringer_setting,",
          "4199:             {\"Ringer Setting\", \"btatt.ringer_setting\",",
          "4200:             FT_UINT8, BASE_HEX, VALS(ringer_setting_vals), 0x0,",
          "4201:             NULL, HFILL}",
          "4202:         },",
          "4203:         {&hf_btatt_alert_category_id_bitmask_1,",
          "4204:             {\"Alert Category ID Bitmask 1\", \"btatt.alert.category_id_bitmask_1\",",
          "4205:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4206:             NULL, HFILL}",
          "4207:         },",
          "4208:         {&hf_btatt_alert_category_id_bitmask_1_schedule,",
          "4209:             {\"Schedule\", \"btatt.alert.category_id_bitmask_1.schedule\",",
          "4210:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "4211:             NULL, HFILL}",
          "4212:         },",
          "4213:         {&hf_btatt_alert_category_id_bitmask_1_voice_mail,",
          "4214:             {\"Voice Mail\", \"btatt.alert.category_id_bitmask_1.voice_mail\",",
          "4215:             FT_UINT8, BASE_HEX, NULL, 0x40,",
          "4216:             NULL, HFILL}",
          "4217:         },",
          "4218:         {&hf_btatt_alert_category_id_bitmask_1_sms_mms,",
          "4219:             {\"SMS/MMS\", \"btatt.alert.category_id_bitmask_1.sms_mms\",",
          "4220:             FT_UINT8, BASE_HEX, NULL, 0x20,",
          "4221:             NULL, HFILL}",
          "4222:         },",
          "4223:         {&hf_btatt_alert_category_id_bitmask_1_missed_call,",
          "4224:             {\"Missed Call\", \"btatt.alert.category_id_bitmask_1.missed_call\",",
          "4225:             FT_UINT8, BASE_HEX, NULL, 0x10,",
          "4226:             NULL, HFILL}",
          "4227:         },",
          "4228:         {&hf_btatt_alert_category_id_bitmask_1_call,",
          "4229:             {\"Call\", \"btatt.alert.category_id_bitmask_1.call\",",
          "4230:             FT_UINT8, BASE_HEX, NULL, 0x08,",
          "4231:             NULL, HFILL}",
          "4232:         },",
          "4233:         {&hf_btatt_alert_category_id_bitmask_1_news,",
          "4234:             {\"News\", \"btatt.alert.category_id_bitmask_1.news\",",
          "4235:             FT_UINT8, BASE_HEX, NULL, 0x04,",
          "4236:             NULL, HFILL}",
          "4237:         },",
          "4238:         {&hf_btatt_alert_category_id_bitmask_1_email,",
          "4239:             {\"Email\", \"btatt.alert.category_id_bitmask_1.email\",",
          "4240:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "4241:             NULL, HFILL}",
          "4242:         },",
          "4243:         {&hf_btatt_alert_category_id_bitmask_1_simple_alert,",
          "4244:             {\"Simple Alert\", \"btatt.alert.category_id_bitmask_1.simple_alert\",",
          "4245:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "4246:             NULL, HFILL}",
          "4247:         },",
          "4248:         {&hf_btatt_alert_category_id_bitmask_2,",
          "4249:             {\"Alert Category ID Bitmask 2\", \"btatt.alert.category_id_bitmask_2\",",
          "4250:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4251:             NULL, HFILL}",
          "4252:         },",
          "4253:         {&hf_btatt_alert_category_id_bitmask_2_reserved,",
          "4254:             {\"Reserved\", \"btatt.alert.category_id_bitmask_2.reserved\",",
          "4255:             FT_UINT8, BASE_HEX, NULL, 0xFC,",
          "4256:             NULL, HFILL}",
          "4257:         },",
          "4258:         {&hf_btatt_alert_category_id_bitmask_2_instant_message,",
          "4259:             {\"Instant Message\", \"btatt.alert.category_id_bitmask_2.instant_message\",",
          "4260:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "4261:             NULL, HFILL}",
          "4262:         },",
          "4263:         {&hf_btatt_alert_category_id_bitmask_2_high_prioritized_alert,",
          "4264:             {\"High Prioritized Alert\", \"btatt.alert.category_id_bitmask_2.high_prioritized_alert\",",
          "4265:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "4266:             NULL, HFILL}",
          "4267:         },",
          "4268:         {&hf_btatt_alert_category_id,",
          "4269:             {\"Alert Category ID\", \"btatt.alert.category_id\",",
          "4270:             FT_UINT8, BASE_HEX, VALS(alert_category_id_vals), 0x0,",
          "4271:             NULL, HFILL}",
          "4272:         },",
          "4273:         {&hf_btatt_alert_command_id,",
          "4274:             {\"Alert Command ID\", \"btatt.alert.command_id\",",
          "4275:             FT_UINT8, BASE_HEX, VALS(alert_command_id_vals), 0x0,",
          "4276:             NULL, HFILL}",
          "4277:         },",
          "4278:         {&hf_btatt_alert_unread_count,",
          "4279:             {\"Unread Count\", \"btatt.alert.unread_count\",",
          "4280:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4281:             NULL, HFILL}",
          "4282:         },",
          "4283:         {&hf_btatt_alert_number_of_new_alert,",
          "4284:             {\"Number of New Alert\", \"btatt.alert.number_of_new_alert\",",
          "4285:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4286:             NULL, HFILL}",
          "4287:         },",
          "4288:         {&hf_btatt_alert_text_string_information,",
          "4289:             {\"Text String Information\", \"btatt.text_string_information\",",
          "4290:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4291:             NULL, HFILL}",
          "4292:         },",
          "4293:         {&hf_btatt_blood_pressure_feature,",
          "4294:             {\"Blood Pressure Feature\", \"btatt.blood_pressure.feature\",",
          "4295:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4296:             NULL, HFILL}",
          "4297:         },",
          "4298:         {&hf_btatt_blood_pressure_feature_reserved,",
          "4299:             {\"Reserved\", \"btatt.blood_pressure.feature.reserved\",",
          "4300:             FT_UINT16, BASE_HEX, NULL, 0xFFC0,",
          "4301:             NULL, HFILL}",
          "4302:         },",
          "4303:         {&hf_btatt_blood_pressure_feature_multiple_bond,",
          "4304:             {\"Multiple Bond\", \"btatt.blood_pressure.feature.multiple_bond\",",
          "4305:             FT_BOOLEAN, 16, NULL, 0x20,",
          "4306:             NULL, HFILL}",
          "4307:         },",
          "4308:         {&hf_btatt_blood_pressure_feature_measurement_position_detection,",
          "4309:             {\"Measurement Position Detection\", \"btatt.blood_pressure.feature.measurement_position_detection\",",
          "4310:             FT_BOOLEAN, 16, NULL, 0x10,",
          "4311:             NULL, HFILL}",
          "4312:         },",
          "4313:         {&hf_btatt_blood_pressure_feature_puls_rate_range,",
          "4314:             {\"Puls Rate Range\", \"btatt.blood_pressure.feature.puls_rate_range\",",
          "4315:             FT_BOOLEAN, 16, NULL, 0x08,",
          "4316:             NULL, HFILL}",
          "4317:         },",
          "4318:         {&hf_btatt_blood_pressure_feature_irregular_pulse_detection,",
          "4319:             {\"Irregular Pulse Detection\", \"btatt.blood_pressure.feature.irregular_pulse_detection\",",
          "4320:             FT_BOOLEAN, 16, NULL, 0x04,",
          "4321:             NULL, HFILL}",
          "4322:         },",
          "4323:         {&hf_btatt_blood_pressure_feature_cuff_fit_detection,",
          "4324:             {\"Cuff Fit Detection\", \"btatt.blood_pressure.feature.cuff_fit_detection\",",
          "4325:             FT_BOOLEAN, 16, NULL, 0x02,",
          "4326:             NULL, HFILL}",
          "4327:         },",
          "4328:         {&hf_btatt_blood_pressure_feature_body_movement_detection,",
          "4329:             {\"Body Movement Detection\", \"btatt.blood_pressure.feature.body_movement_detection\",",
          "4330:             FT_BOOLEAN, 16, NULL, 0x01,",
          "4331:             NULL, HFILL}",
          "4332:         },",
          "4333:         {&hf_btatt_hogp_hid_control_point_command,",
          "4334:             {\"HID Control Point Command\", \"btatt.hogp.hid_control_point_command\",",
          "4335:             FT_UINT8, BASE_HEX, VALS(hid_control_point_command_vals), 0x0,",
          "4336:             NULL, HFILL}",
          "4337:         },",
          "4338:         {&hf_btatt_le_scan_interval,",
          "4339:             {\"LE Scan Interval\", \"btatt.le_scan_interval\",",
          "4340:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4341:             NULL, HFILL}",
          "4342:         },",
          "4343:         {&hf_btatt_le_scan_window,",
          "4344:             {\"LE Scan Window\", \"btatt.le_scan_window\",",
          "4345:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4346:             NULL, HFILL}",
          "4347:         },",
          "4348:         { &hf_btatt_pnp_id_vendor_id_source,",
          "4349:             { \"Vendor ID Source\",                \"btatt.pnp_id.vendor_id_source\",",
          "4350:             FT_UINT16, BASE_HEX, VALS(pnp_id_vendor_id_source_vals), 0,",
          "4351:             NULL, HFILL }",
          "4352:         },",
          "4353:         { &hf_btatt_pnp_id_vendor_id,",
          "4354:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "4355:             FT_UINT16, BASE_HEX, NULL, 0,",
          "4356:             NULL, HFILL }",
          "4357:         },",
          "4358:         { &hf_btatt_pnp_id_vendor_id_bluetooth_sig,",
          "4359:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "4360:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &bluetooth_company_id_vals_ext, 0,",
          "4361:             NULL, HFILL }",
          "4362:         },",
          "4363:         { &hf_btatt_pnp_id_vendor_id_usb_forum,",
          "4364:             { \"Vendor ID\",                       \"btatt.pnp_id.vendor_id\",",
          "4365:             FT_UINT16, BASE_HEX | BASE_EXT_STRING, &ext_usb_vendors_vals, 0,",
          "4366:             NULL, HFILL }",
          "4367:         },",
          "4368:         { &hf_btatt_pnp_id_product_id,",
          "4369:             { \"Product ID\",                      \"btatt.pnp_id.product_id\",",
          "4370:             FT_UINT16, BASE_HEX, NULL, 0,",
          "4371:             NULL, HFILL }",
          "4372:         },",
          "4373:         { &hf_btatt_pnp_id_product_version,",
          "4374:             { \"Version\",                         \"btatt.pnp_id.product_version\",",
          "4375:             FT_UINT16, BASE_HEX, NULL, 0,",
          "4376:             NULL, HFILL }",
          "4377:         },",
          "4378:         {&hf_btatt_glucose_feature,",
          "4379:             {\"Glucose Feature\", \"btatt.glucose.feature\",",
          "4380:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4381:             NULL, HFILL}",
          "4382:         },",
          "4383:         {&hf_btatt_glucose_feature_reserved,",
          "4384:             {\"Reserved\", \"btatt.glucose.feature.reserved\",",
          "4385:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "4388:         {&hf_btatt_glucose_feature_multiple_bond,",
          "4389:             {\"Multiple Bond\", \"btatt.glucose.feature.multiple_bond\",",
          "4390:             FT_BOOLEAN, 16, NULL, 0x0400,",
          "4393:         {&hf_btatt_glucose_feature_time_fault,",
          "4394:             {\"Time Fault\", \"btatt.glucose.feature.time_fault\",",
          "4395:             FT_BOOLEAN, 16, NULL, 0x0200,",
          "4398:         {&hf_btatt_glucose_feature_general_device_fault,",
          "4399:             {\"General Device Fault\", \"btatt.glucose.feature.general_device_fault\",",
          "4400:             FT_BOOLEAN, 16, NULL, 0x0100,",
          "4403:         {&hf_btatt_glucose_feature_sensor_read_interrupt_detection,",
          "4404:             {\"Sensor Read Interrupt Detection\", \"btatt.glucose.feature.sensor_read_interrupt_detection\",",
          "4405:             FT_BOOLEAN, 16, NULL, 0x0080,",
          "4408:         {&hf_btatt_glucose_feature_sensor_temperature_high_low_detection,",
          "4409:             {\"Sensor Temperature High-Low Detection\", \"btatt.glucose.feature.sensor_temperature_high_low_detection\",",
          "4410:             FT_BOOLEAN, 16, NULL, 0x0040,",
          "4413:         {&hf_btatt_glucose_feature_sensor_result_high_low_detection,",
          "4414:             {\"Sensor Result High-Low Detection\", \"btatt.glucose.feature.sensor_result_high_low_detection\",",
          "4415:             FT_BOOLEAN, 16, NULL, 0x0020,",
          "4416:             NULL, HFILL}",
          "4417:         },",
          "4418:         {&hf_btatt_glucose_feature_sensor_strip_type_error_detection,",
          "4419:             {\"Sensor Strip Type Error Detection\", \"btatt.glucose.feature.sensor_strip_type_error_detection\",",
          "4420:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "4421:             NULL, HFILL}",
          "4422:         },",
          "4423:         {&hf_btatt_glucose_feature_sensor_strip_insertion_error_detection,",
          "4424:             {\"Sensor Strip Insertion Error Detection\", \"btatt.glucose.feature.sensor_strip_insertion_error_detection\",",
          "4425:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "4426:             NULL, HFILL}",
          "4427:         },",
          "4428:         {&hf_btatt_glucose_feature_sensor_sample_size,",
          "4429:             {\"Sensor Sample Size\", \"btatt.glucose.feature.sensor_sample_size\",",
          "4430:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "4431:             NULL, HFILL}",
          "4432:         },",
          "4433:         {&hf_btatt_glucose_feature_sensor_malfunction_detection,",
          "4434:             {\"Sensor Malfunction Detection\", \"btatt.glucose.feature.sensor_malfunction_detection\",",
          "4435:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "4436:             NULL, HFILL}",
          "4437:         },",
          "4438:         {&hf_btatt_glucose_feature_low_battery_detection_during_measurement,",
          "4439:             {\"Low Battery Detection During Measurement\", \"btatt.glucose.feature.low_battery_detection_during_measurement\",",
          "4440:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4441:             NULL, HFILL}",
          "4442:         },",
          "4443:         {&hf_btatt_rsc_feature,",
          "4444:             {\"RSC Feature\", \"btatt.rsc.feature\",",
          "4448:         {&hf_btatt_rsc_feature_reserved,",
          "4449:             {\"Reserved\", \"btatt.rsc.feature.reserved\",",
          "4450:             FT_BOOLEAN, 16, NULL, 0xFF80,",
          "4451:             NULL, HFILL}",
          "4452:         },",
          "4453:         {&hf_btatt_rsc_feature_multiple_sensor_locations,",
          "4454:             {\"Multiple Sensor Locations\", \"btatt.rsc.feature.multiple_sensor_locations\",",
          "4455:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "4456:             NULL, HFILL}",
          "4457:         },",
          "4458:         {&hf_btatt_rsc_feature_calibration_procedure,",
          "4459:             {\"Calibration Procedure\", \"btatt.rsc.feature.calibration_procedure\",",
          "4460:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "4461:             NULL, HFILL}",
          "4462:         },",
          "4463:         {&hf_btatt_rsc_feature_walking_or_running_status,",
          "4464:             {\"Walking_or Running Status\", \"btatt.rsc.feature.walking_or_running_status\",",
          "4465:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "4466:             NULL, HFILL}",
          "4467:         },",
          "4468:         {&hf_btatt_rsc_feature_total_distance_measurement,",
          "4469:             {\"Total Distance Measurement\", \"btatt.rsc.feature.total_distance_measurement\",",
          "4470:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "4471:             NULL, HFILL}",
          "4472:         },",
          "4473:         {&hf_btatt_rsc_feature_instantaneous_stride_length_measurement,",
          "4474:             {\"Instantaneous Stride Length Measurement\", \"btatt.rsc.feature.instantaneous_stride_length_measurement\",",
          "4475:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4476:             NULL, HFILL}",
          "4477:         },",
          "4478:         {&hf_btatt_csc_feature,",
          "4479:             {\"CSC Feature\", \"btatt.csc.feature\",",
          "4483:         {&hf_btatt_csc_feature_reserved,",
          "4484:             {\"Reserved\", \"btatt.csc.feature.reserved\",",
          "4485:             FT_BOOLEAN, 16, NULL, 0xFFF8,",
          "4486:             NULL, HFILL}",
          "4487:         },",
          "4488:         {&hf_btatt_csc_feature_multiple_sensor_locations,",
          "4489:             {\"Multiple Sensor Locations\", \"btatt.csc.feature.multiple_sensor_locations\",",
          "4490:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "4491:             NULL, HFILL}",
          "4492:         },",
          "4493:         {&hf_btatt_csc_feature_crank_revolution_data,",
          "4494:             {\"Crank Revolution Data\", \"btatt.csc.feature.crank_revolution_data\",",
          "4495:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "4496:             NULL, HFILL}",
          "4497:         },",
          "4498:         {&hf_btatt_csc_feature_wheel_revolution_data,",
          "4499:             {\"Wheel Revolution Data\", \"btatt.csc.feature.wheel_revolution_data\",",
          "4500:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4501:             NULL, HFILL}",
          "4502:         },",
          "4503:         {&hf_btatt_sensor_location,",
          "4504:             {\"Sensor Location\", \"btatt.sensor_location\",",
          "4505:             FT_UINT8, BASE_HEX, VALS(sensor_location_vals), 0x0,",
          "4506:             NULL, HFILL}",
          "4507:         },",
          "4508:         {&hf_btatt_elevation,",
          "4509:             {\"Elevation\", \"btatt.elevation\",",
          "4510:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "4511:             NULL, HFILL}",
          "4512:         },",
          "4513:         {&hf_btatt_pressure,",
          "4514:             {\"Pressure\", \"btatt.pressure\",",
          "4515:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4516:             NULL, HFILL}",
          "4517:         },",
          "4518:         {&hf_btatt_temperature,",
          "4519:             {\"Temperature\", \"btatt.temperature\",",
          "4520:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "4521:             NULL, HFILL}",
          "4522:         },",
          "4523:         {&hf_btatt_humidity,",
          "4524:             {\"Humidity\", \"btatt.humidity\",",
          "4528:         {&hf_btatt_true_wind_speed,",
          "4529:             {\"True Wind Speed\", \"btatt.true_wind_speed\",",
          "4533:         {&hf_btatt_true_wind_direction,",
          "4534:             {\"True Wind Direction\", \"btatt.true_wind_direction\",",
          "4535:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4538:         {&hf_btatt_apparent_wind_speed,",
          "4539:             {\"Apparent Wind Speed\", \"btatt.apparent_wind_speed\",",
          "4540:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4543:         {&hf_btatt_apparent_wind_direction,",
          "4544:             {\"Apparent Wind Direction\", \"btatt.apparent_wind_direction\",",
          "4545:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4546:             NULL, HFILL}",
          "4547:         },",
          "4548:         {&hf_btatt_gust_factor,",
          "4549:             {\"Gust Factor\", \"btatt.gust_factor\",",
          "4550:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "4551:             NULL, HFILL}",
          "4552:         },",
          "4553:         {&hf_btatt_pollen_concentration,",
          "4554:             {\"Pollen Concentration\", \"btatt.pollen_concentration\",",
          "4555:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "4556:             NULL, HFILL}",
          "4557:         },",
          "4558:         {&hf_btatt_uv_index,",
          "4559:             {\"UV Index\", \"btatt.uv_index\",",
          "4560:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4561:             NULL, HFILL}",
          "4562:         },",
          "4563:         {&hf_btatt_irradiance,",
          "4564:             {\"Irradiance\", \"btatt.irradiance\",",
          "4568:         {&hf_btatt_rainfall,",
          "4569:             {\"Rainfall\", \"btatt.rainfall\",",
          "4570:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4573:         {&hf_btatt_wind_chill,",
          "4574:             {\"Wind Chill\", \"btatt.wind_chill\",",
          "4575:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "4578:         {&hf_btatt_heart_index,",
          "4579:             {\"Heart Index\", \"btatt.heart_index\",",
          "4580:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "4583:         {&hf_btatt_dew_point,",
          "4584:             {\"Dew Point\", \"btatt.dew_point\",",
          "4585:             FT_INT8, BASE_DEC, NULL, 0x0,",
          "4588:         {&hf_btatt_descriptor_value_changed_flags,",
          "4589:             {\"Flags\", \"btatt.descriptor_value_changed.flags\",",
          "4590:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "4593:         {&hf_btatt_descriptor_value_changed_flags_reserved,",
          "4594:             {\"Reserved\", \"btatt.descriptor_value_changed.flags.reserved\",",
          "4595:             FT_BOOLEAN, 16, NULL, 0xF800,",
          "4598:         {&hf_btatt_descriptor_value_changed_flags_change_to_characteristic_user_description_descriptor,",
          "4599:             {\"Change to Characteristic User Description Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_characteristic_user_description_descriptor\",",
          "4600:             FT_BOOLEAN, 16, NULL, 0x0010,",
          "4601:             NULL, HFILL}",
          "4602:         },",
          "4603:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_measurement_descriptor,",
          "4604:             {\"Change to ES Measurement Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_measurement_descriptor\",",
          "4605:             FT_BOOLEAN, 16, NULL, 0x0008,",
          "4606:             NULL, HFILL}",
          "4607:         },",
          "4608:         {&hf_btatt_descriptor_value_changed_flags_change_to_es_configuration_descriptor,",
          "4609:             {\"Change to ES Configuration Descriptor\", \"btatt.descriptor_value_changed.flags.change_to_es_configuration_descriptor\",",
          "4610:             FT_BOOLEAN, 16, NULL, 0x0004,",
          "4611:             NULL, HFILL}",
          "4612:         },",
          "4613:         {&hf_btatt_descriptor_value_changed_flags_change_to_one_or_more_es_trigger_setting_descriptors,",
          "4614:             {\"Change to One or More ES Trigger Setting Descriptors\", \"btatt.descriptor_value_changed.flags.change_to_one_or_more_es_trigger_setting_descriptors\",",
          "4615:             FT_BOOLEAN, 16, NULL, 0x0002,",
          "4616:             NULL, HFILL}",
          "4617:         },",
          "4618:         {&hf_btatt_descriptor_value_changed_flags_source_of_change,",
          "4619:             {\"Source of Change\", \"btatt.descriptor_value_changed.flags.source_of_change\",",
          "4620:             FT_BOOLEAN, 16, NULL, 0x0001,",
          "4621:             NULL, HFILL}",
          "4622:         },",
          "4623:         {&hf_btatt_aerobic_heart_rate_lower_limit,",
          "4624:             {\"Aerobic Heart Rate Lower Limit\", \"btatt.aerobic_heart_rate_lower_limit\",",
          "4626:             NULL, HFILL}",
          "4628:         {&hf_btatt_aerobic_threshold,",
          "4629:             {\"Aerobic Threshold\", \"btatt.aerobic_threshold\",",
          "4630:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4633:         {&hf_btatt_age,",
          "4634:             {\"Age\", \"btatt.age\",",
          "4635:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4638:         {&hf_btatt_anaerobic_heart_rate_lower_limit,",
          "4639:             {\"Anaerobic Heart Rate Lower Limit\", \"btatt.anaerobic_heart_rate_lower_limit\",",
          "4640:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4643:         {&hf_btatt_anaerobic_heart_rate_upper_limit,",
          "4644:             {\"Anaerobic Heart Rate Upper Limit\", \"btatt.anaerobic_heart_rate_upper_limit\",",
          "4645:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4648:         {&hf_btatt_anaerobic_threshold,",
          "4649:             {\"Anaerobic Threshold\", \"btatt.anaerobic_threshold\",",
          "4650:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4653:         {&hf_btatt_aerobic_heart_rate_upper_limit,",
          "4654:             {\"Aerobic Heart Rate Upper Limit\", \"btatt.aerobic_heart_rate_upper_limit\",",
          "4655:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4658:         {&hf_btatt_email_address,",
          "4659:             {\"Email Address\", \"btatt.email_address\",",
          "4660:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4663:         {&hf_btatt_fat_burn_heart_rate_lower_limit,",
          "4664:             {\"Fat Burn Heart Rate Lower Limit\", \"btatt.fat_burn_heart_rate_lower_limit\",",
          "4665:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4668:         {&hf_btatt_fat_burn_heart_rate_upper_limit,",
          "4669:             {\"Fat Burn Heart Rate Upper Limit\", \"btatt.fat_burn_heart_rate_upper_limit\",",
          "4670:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4673:         {&hf_btatt_first_name,",
          "4674:             {\"First Name\", \"btatt.first_name\",",
          "4675:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4678:         {&hf_btatt_five_zone_heart_rate_limits_very_light_light_limit,",
          "4679:             {\"Very Light/Light Limit\", \"btatt.five_zone_heart_rate_limits.very_light_light_limit\",",
          "4680:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4683:         {&hf_btatt_five_zone_heart_rate_limits_light_moderate_limit,",
          "4684:             {\"Light/Moderate Limit,\", \"btatt.five_zone_heart_rate_limits.light_moderate_limit\",",
          "4685:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4688:         {&hf_btatt_five_zone_heart_rate_limits_moderate_hard_limit,",
          "4689:             {\"Moderate/Hard Limit\", \"btatt.five_zone_heart_rate_limits.moderate_hard_limit\",",
          "4690:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4693:         {&hf_btatt_five_zone_heart_rate_limits_hard_maximum_limit,",
          "4694:             {\"Hard/Maximum Limit\", \"btatt.five_zone_heart_rate_limits.hard_maximum_limit\",",
          "4695:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4698:         {&hf_btatt_gender,",
          "4699:             {\"Gender\", \"btatt.gender\",",
          "4700:             FT_UINT8, BASE_HEX, VALS(gender_vals), 0x0,",
          "4703:         {&hf_btatt_heart_rate_max,",
          "4704:             {\"Heart Rate Max\", \"btatt.heart_rate_max\",",
          "4705:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4708:         {&hf_btatt_height,",
          "4709:             {\"Height\", \"btatt.height\",",
          "4710:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4713:         {&hf_btatt_hip_circumference,",
          "4714:             {\"Hip Circumference\", \"btatt.hip_circumference\",",
          "4715:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4718:         {&hf_btatt_last_name,",
          "4719:             {\"Last Name\", \"btatt.last_name\",",
          "4720:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4723:         {&hf_btatt_maximum_recommended_heart_rate,",
          "4724:             {\"Maximum Recommended Heart Rate\", \"btatt.maximum_recommended_heart_rate\",",
          "4725:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4728:         {&hf_btatt_resting_heart_rate,",
          "4729:             {\"Resting Heart Rate\", \"btatt.resting_heart_rate\",",
          "4730:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4733:         {&hf_btatt_sport_type_for_aerobic_and_anaerobic_thresholds,",
          "4734:             {\"Sport Type for Aerobic and Anaerobic Thresholds\", \"btatt.sport_type_for_aerobic_and_anaerobic_thresholds\",",
          "4735:             FT_UINT8, BASE_DEC, VALS(sport_type_for_aerobic_and_anaerobic_thresholds_vals), 0x0,",
          "4738:         {&hf_btatt_three_zone_heart_rate_limits_light_moderate,",
          "4739:             {\"Three zone Heart Rate Limits - Light (Fat burn) / Moderate (Aerobic) Limit\", \"btatt.three_zone_heart_rate_limits.light_moderate\",",
          "4740:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4743:         {&hf_btatt_three_zone_heart_rate_limits_moderate_hard,",
          "4744:             {\"Three zone Heart Rate Limits - Moderate (Aerobic) / Hard (Anaerobic) Limit\", \"btatt.three_zone_heart_rate_limits.moderate_hard\",",
          "4745:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4748:         {&hf_btatt_two_zone_heart_rate_limit_fat_burn_fitness,",
          "4749:             {\"Two zone Heart Rate Limit - Fat burn / Fitness Limit\", \"btatt.two_zone_heart_rate_limit.fat_burn_fitness\",",
          "4750:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4753:         {&hf_btatt_vo2_max,",
          "4754:             {\"VO2 Max\", \"btatt.vo2_max\",",
          "4755:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4758:         {&hf_btatt_waist_circumference,",
          "4759:             {\"Waist Circumference\", \"btatt.waist_circumference\",",
          "4760:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4763:         {&hf_btatt_weight,",
          "4764:             {\"Weight\", \"btatt.weight\",",
          "4765:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "4766:             NULL, HFILL}",
          "4767:         },",
          "4768:         {&hf_btatt_database_change_increment,",
          "4769:             {\"Database Change Increment\", \"btatt.database_change_increment\",",
          "4770:             FT_UINT32, BASE_DEC_HEX, NULL, 0x0,",
          "4771:             NULL, HFILL}",
          "4772:         },",
          "4773:         {&hf_btatt_user_index,",
          "4774:             {\"User Index\", \"btatt.user_index\",",
          "4775:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "4776:             NULL, HFILL}",
          "4777:         },",
          "4778:         {&hf_btatt_magnetic_flux_density_x,",
          "4779:             {\"X\", \"btatt.hf_btatt_magnetic_flux_density.x\",",
          "4780:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "4781:             NULL, HFILL}",
          "4782:         },",
          "4783:         {&hf_btatt_magnetic_flux_density_y,",
          "4784:             {\"Y\", \"btatt.hf_btatt_magnetic_flux_density.y\",",
          "4785:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "4786:             NULL, HFILL}",
          "4787:         },",
          "4788:         {&hf_btatt_magnetic_flux_density_z,",
          "4789:             {\"Z\", \"btatt.hf_btatt_magnetic_flux_density.z\",",
          "4790:             FT_INT16, BASE_DEC, NULL, 0x0,",
          "4791:             NULL, HFILL}",
          "4792:         },",
          "4793:         {&hf_btatt_language,",
          "4794:             {\"Language\", \"btatt.language\",",
          "4795:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "4796:             NULL, HFILL}",
          "4797:         },",
          "4798:         {&hf_btatt_barometric_pressure_trend,",
          "4799:             {\"Barometric Pressure Trend\", \"btatt.barometric_pressure_trend\",",
          "4800:             FT_UINT8, BASE_DEC, VALS(barometric_pressure_trend_vals), 0x0,",
          "4801:             NULL, HFILL}",
          "4802:         },",
          "4803:         {&hf_btatt_central_address_resolution,",
          "4804:             {\"Central Address Resolution\", \"btatt.central_address_resolution\",",
          "4805:             FT_UINT8, BASE_DEC, VALS(central_address_resolution_vals), 0x0,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1396:         &ett_btatt_value,",
          "1397:         &ett_btatt_opcode,",
          "1398:         &ett_btatt_handle,",
          "1400:     };",
          "1402:     static ei_register_info ei[] = {",
          "1403:         { &ei_btatt_uuid_format_unknown, { \"btatt.uuid_format.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown format\", EXPFILL }},",
          "1405:     };",
          "1410:     proto_btatt = proto_register_protocol(\"Bluetooth Attribute Protocol\", \"BT ATT\", \"btatt\");",
          "1412:     btatt_handle = new_register_dissector(\"btatt\", dissect_btatt, proto_btatt);",
          "1415:     proto_register_field_array(proto_btatt, hf, array_length(hf));",
          "1416:     proto_register_subtree_array(ett, array_length(ett));",
          "1417:     expert_btatt = expert_register_protocol(proto_btatt);",
          "1418:     expert_register_field_array(expert_btatt, ei, array_length(ei));",
          "1420:     requests = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "1421:     handle_to_uuid = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "1423:     module = prefs_register_protocol(proto_btatt, NULL);",
          "1424:     prefs_register_static_text_preference(module, \"att.version\",",
          "1425:             \"Bluetooth Protocol ATT version from Core 4.0\",",
          "1426:             \"Version of protocol supported by this dissector.\");",
          "1427: }",
          "1429: void",
          "1430: proto_reg_handoff_btatt(void)",
          "1431: {",
          "1432:     dissector_add_uint(\"btl2cap.psm\", BTL2CAP_PSM_ATT, btatt_handle);",
          "1433:     dissector_add_uint(\"btl2cap.cid\", BTL2CAP_FIXED_CID_ATT, btatt_handle);",
          "1434: }",
          "",
          "[Removed Lines]",
          "1399:         &ett_btatt_characteristic_properties",
          "1404:         { &ei_btatt_handle_too_few, { \"btatt.handle.too_few\", PI_PROTOCOL, PI_WARN, \"Too few handles, should be 2 or more\", EXPFILL }},",
          "1407:     expert_module_t* expert_btatt;",
          "",
          "[Added Lines]",
          "4827:         &ett_btatt_characteristic_properties,",
          "4828:         &ett_btgatt",
          "4833:         { &ei_btatt_handle_too_few,      { \"btatt.handle.too_few\",      PI_PROTOCOL, PI_WARN, \"Too few handles, should be 2 or more\", EXPFILL }},",
          "4834:         { &ei_btatt_mtu_exceeded,        { \"btatt.mtu.exceeded\",        PI_PROTOCOL, PI_WARN, \"Packet size exceed current ATT_MTU\", EXPFILL }},",
          "4835:         { &ei_btatt_mtu_full,            { \"btatt.mtu.full\",            PI_PROTOCOL, PI_NOTE, \"Reached ATT_MTU. Attribute value may be longer.\", EXPFILL }},",
          "4838:     static build_valid_func btatt_handle_da_build_value[1] = {btatt_handle_value};",
          "4839:     static decode_as_value_t btatt_handle_da_values = {btatt_handle_prompt, 1, btatt_handle_da_build_value};",
          "4840:     static decode_as_t btatt_handle_da = {\"btatt\", \"ATT Handle\", \"btatt.handle\",",
          "4841:             1, 0, &btatt_handle_da_values, NULL, NULL,",
          "4842:             decode_as_default_populate_list, decode_as_default_reset, decode_as_default_change, NULL};",
          "4844:     static build_valid_func btatt_uuid16_da_build_value[1] = {btatt_uuid16_value};",
          "4845:     static decode_as_value_t btatt_uuid16_da_values = {btatt_uuid16_prompt, 1, btatt_uuid16_da_build_value};",
          "4846:     static decode_as_t btatt_uuid16_da = {\"btatt\", \"ATT UUID16\", \"btatt.uuid16\",",
          "4847:             1, 0, &btatt_uuid16_da_values, NULL, NULL,",
          "4848:             decode_as_default_populate_list, decode_as_default_reset, decode_as_default_change, NULL};",
          "4850:     static build_valid_func btatt_uuid128_da_build_value[1] = {btatt_uuid128_value};",
          "4851:     static decode_as_value_t btatt_uuid128_da_values = {btatt_uuid128_prompt, 1, btatt_uuid128_da_build_value};",
          "4852:     static decode_as_t btatt_uuid128_da = {\"btatt\", \"ATT UUID128\", \"btatt.uuid128\",",
          "4853:             1, 0, &btatt_uuid128_da_values, NULL, NULL,",
          "4854:             decode_as_default_populate_list, decode_as_default_reset, decode_as_default_change, NULL};",
          "4861:     att_handle_dissector_table  = register_dissector_table(\"btatt.handle\",  \"BT ATT Handle\",  FT_UINT16, BASE_HEX);",
          "4862:     att_uuid16_dissector_table  = register_dissector_table(\"btatt.uuid16\",  \"BT ATT UUID16\",  FT_UINT16, BASE_HEX);",
          "4863:     att_uuid128_dissector_table = register_dissector_table(\"btatt.uuid128\", \"BT ATT UUID128\", FT_STRING,  BASE_NONE);",
          "4871:     mtus = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "4873:     fragments = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "4881:   register_decode_as(&btatt_handle_da);",
          "4882:   register_decode_as(&btatt_uuid16_da);",
          "4883:   register_decode_as(&btatt_uuid128_da);",
          "4889:     gint i_array;",
          "4894:     for (i_array = 0; bluetooth_uuid_vals[i_array].strptr != NULL; i_array += 1) {",
          "4895:         gchar *name;",
          "4896:         gchar *short_name;",
          "4897:         gchar *abbrev;",
          "4898:         dissector_handle_t  handle_tmp;",
          "4899:         gint proto_tmp = -1;",
          "4901:         if (bluetooth_uuid_vals[i_array].value < 0x1800) {",
          "4902:             continue;",
          "4903:         }",
          "4905:         if ((bluetooth_uuid_vals[i_array].value & 0xFF00) == 0x2700) {",
          "4906:             continue;",
          "4907:         }",
          "4909:         name       = wmem_strdup_printf(wmem_epan_scope(), \"Bluetooth GATT Attribute %s (UUID 0x%04x)\",",
          "4910:                 bluetooth_uuid_vals[i_array].strptr, bluetooth_uuid_vals[i_array].value);",
          "4911:         short_name = wmem_strdup_printf(wmem_epan_scope(), \"BT GATT %s (UUID 0x%04x)\",",
          "4912:                 bluetooth_uuid_vals[i_array].strptr, bluetooth_uuid_vals[i_array].value);",
          "4913:         abbrev     = wmem_strdup_printf(wmem_epan_scope(), \"btgatt.uuid0x%04x\",",
          "4914:                 bluetooth_uuid_vals[i_array].value);",
          "4916:         proto_tmp = proto_register_protocol(name, short_name, abbrev);",
          "4917:         handle_tmp = new_register_dissector(short_name, dissect_btgatt, proto_tmp);",
          "4919:         dissector_add_for_decode_as(\"btatt.handle\", handle_tmp);",
          "4920:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}