{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17467da86cbc4957dab341dc329ab2db1b004fe5",
      "candidate_info": {
        "commit_hash": "17467da86cbc4957dab341dc329ab2db1b004fe5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/17467da86cbc4957dab341dc329ab2db1b004fe5",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Clean up uClinux targets\n\nThe uClinux targets included some attributes that would result in\ncircular references of CFLAGS and LDCLAGS.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5034)\n\n(cherry picked from commit f720194cbc174806fe1ce9c349edd249d8076c02)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:     \"uClinux-dist\" => {",
          "1724:         inherit_from     => [ \"BASE_unix\" ],",
          "1725:         cc               => \"$ENV{'CC'}\",",
          "1729:         ex_libs          => add(\"\\$(LDLIBS)\"),",
          "1730:         bn_ops           => \"BN_LLONG\",",
          "1731:         thread_scheme    => \"pthreads\",",
          "",
          "[Removed Lines]",
          "1726:         cflags           => combine(\"\\$(CFLAGS)\",",
          "1727:                                     threads(\"-D_REENTRANT\")),",
          "1728:         plib_lflags      => \"\\$(LDFLAGS)\",",
          "",
          "[Added Lines]",
          "1726:         cflags           => combine(threads(\"-D_REENTRANT\")),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1739:     \"uClinux-dist64\" => {",
          "1740:         inherit_from     => [ \"BASE_unix\" ],",
          "1741:         cc               => \"$ENV{'CC'}\",",
          "1745:         ex_libs          => add(\"\\$(LDLIBS)\"),",
          "1746:         bn_ops           => \"SIXTY_FOUR_BIT_LONG\",",
          "1747:         thread_scheme    => \"pthreads\",",
          "",
          "[Removed Lines]",
          "1742:         cflags           => combine(\"\\$(CFLAGS)\",",
          "1743:                                     threads(\"-D_REENTRANT\")),",
          "1744:         plib_lflags      => \"\\$(LDFLAGS)\",",
          "",
          "[Added Lines]",
          "1740:         cflags           => combine(threads(\"-D_REENTRANT\")),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba8376b59ce803a512ffef30d5daace7489a3da0",
      "candidate_info": {
        "commit_hash": "ba8376b59ce803a512ffef30d5daace7489a3da0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ba8376b59ce803a512ffef30d5daace7489a3da0",
        "files": [
          "crypto/buffer/buffer.c",
          "crypto/ec/ecx_meth.c",
          "crypto/mem_sec.c",
          "doc/crypto/OPENSSL_secure_malloc.pod",
          "include/openssl/crypto.h",
          "util/libcrypto.num"
        ],
        "message": "Implement the CRYPTO_secure_clear_free function. Use OPENSSL_secure_clear_free for secure mem BIOs and X25519 private keys.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4048)",
        "before_after_code_files": [
          "crypto/buffer/buffer.c||crypto/buffer/buffer.c",
          "crypto/ec/ecx_meth.c||crypto/ec/ecx_meth.c",
          "crypto/mem_sec.c||crypto/mem_sec.c",
          "include/openssl/crypto.h||include/openssl/crypto.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/buffer/buffer.c||crypto/buffer/buffer.c": [
          "File: crypto/buffer/buffer.c -> crypto/buffer/buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     if (a->data != NULL) {",
          "49:         if (a->flags & BUF_MEM_FLAG_SECURE)",
          "51:         else",
          "52:             OPENSSL_clear_free(a->data, a->max);",
          "53:     }",
          "",
          "[Removed Lines]",
          "50:             OPENSSL_secure_free(a->data);",
          "",
          "[Added Lines]",
          "50:             OPENSSL_secure_clear_free(a->data, a->max);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     if (str->data != NULL) {",
          "65:         if (ret != NULL) {",
          "66:             memcpy(ret, str->data, str->length);",
          "68:             str->data = NULL;",
          "69:         }",
          "70:     }",
          "",
          "[Removed Lines]",
          "67:             OPENSSL_secure_free(str->data);",
          "",
          "[Added Lines]",
          "67:             OPENSSL_secure_clear_free(str->data, str->length);",
          "",
          "---------------"
        ],
        "crypto/ec/ecx_meth.c||crypto/ec/ecx_meth.c": [
          "File: crypto/ec/ecx_meth.c -> crypto/ec/ecx_meth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     X25519_KEY *xkey = pkey->pkey.ptr;",
          "214:     if (xkey)",
          "216:     OPENSSL_free(xkey);",
          "217: }",
          "",
          "[Removed Lines]",
          "215:         OPENSSL_secure_free(xkey->privkey);",
          "",
          "[Added Lines]",
          "215:         OPENSSL_secure_clear_free(xkey->privkey, X25519_KEYLEN);",
          "",
          "---------------"
        ],
        "crypto/mem_sec.c||crypto/mem_sec.c": [
          "File: crypto/mem_sec.c -> crypto/mem_sec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "159: int CRYPTO_secure_allocated(const void *ptr)",
          "160: {",
          "161: #ifdef IMPLEMENTED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: void CRYPTO_secure_clear_free(void *ptr, size_t num,",
          "160:                               const char *file, int line)",
          "161: {",
          "162: #ifdef IMPLEMENTED",
          "163:     size_t actual_size;",
          "165:     if (ptr == NULL)",
          "166:         return;",
          "167:     if (!CRYPTO_secure_allocated(ptr)) {",
          "168:         OPENSSL_cleanse(ptr, num);",
          "169:         CRYPTO_free(ptr, file, line);",
          "170:         return;",
          "171:     }",
          "172:     CRYPTO_THREAD_write_lock(sec_malloc_lock);",
          "173:     actual_size = sh_actual_size(ptr);",
          "174:     CLEAR(ptr, actual_size);",
          "175:     secure_mem_used -= actual_size;",
          "176:     sh_free(ptr);",
          "177:     CRYPTO_THREAD_unlock(sec_malloc_lock);",
          "178: #else",
          "179:     if (ptr == NULL)",
          "180:         return;",
          "181:     OPENSSL_cleanse(ptr, num);",
          "182:     CRYPTO_free(ptr, file, line);",
          "184: }",
          "",
          "---------------"
        ],
        "include/openssl/crypto.h||include/openssl/crypto.h": [
          "File: include/openssl/crypto.h -> include/openssl/crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)",
          "147: # define OPENSSL_secure_free(addr) \\",
          "148:         CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE)",
          "149: # define OPENSSL_secure_actual_size(ptr) \\",
          "150:         CRYPTO_secure_actual_size(ptr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: # define OPENSSL_secure_clear_free(addr, num) \\",
          "150:         CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285: void *CRYPTO_secure_malloc(size_t num, const char *file, int line);",
          "286: void *CRYPTO_secure_zalloc(size_t num, const char *file, int line);",
          "287: void CRYPTO_secure_free(void *ptr, const char *file, int line);",
          "288: int CRYPTO_secure_allocated(const void *ptr);",
          "289: int CRYPTO_secure_malloc_initialized(void);",
          "290: size_t CRYPTO_secure_actual_size(void *ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: void CRYPTO_secure_clear_free(void *ptr, size_t num,",
          "291:                               const char *file, int line);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4230: UINT32_it                               4214 1_1_0f EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "4231: ZINT64_it                               4215 1_1_0f EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "4232: ZINT64_it                               4215 1_1_0f EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4233: CRYPTO_secure_clear_free                4315 1_1_0g EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de6db95d7bc9a0f8993d4e125028a02a7ec46e96",
      "candidate_info": {
        "commit_hash": "de6db95d7bc9a0f8993d4e125028a02a7ec46e96",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/de6db95d7bc9a0f8993d4e125028a02a7ec46e96",
        "files": [
          "crypto/ct/ct_log.c"
        ],
        "message": "Null pointer used. Address coverity report of null pointer being dereferenced.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4381)\n\n(cherry picked from commit 9be34ee5c8576539a929d5b396ad071aed525f43)",
        "before_after_code_files": [
          "crypto/ct/ct_log.c||crypto/ct/ct_log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_log.c||crypto/ct/ct_log.c": [
          "File: crypto/ct/ct_log.c -> crypto/ct/ct_log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     CTLOG_STORE_LOAD_CTX* load_ctx = ctlog_store_load_ctx_new();",
          "201:     if (load_ctx == NULL)",
          "203:     load_ctx->log_store = store;",
          "204:     load_ctx->conf = NCONF_new(NULL);",
          "205:     if (load_ctx->conf == NULL)",
          "",
          "[Removed Lines]",
          "202:         goto end;",
          "",
          "[Added Lines]",
          "202:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77b072504ec464eac5e0f9aab19cadb9c4e311d1",
      "candidate_info": {
        "commit_hash": "77b072504ec464eac5e0f9aab19cadb9c4e311d1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/77b072504ec464eac5e0f9aab19cadb9c4e311d1",
        "files": [
          "crypto/err/err.c"
        ],
        "message": "Fix the error handling in ERR_get_state:\n\n- Ignoring the return code of ossl_init_thread_start created a memory leak.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3712)\n(cherry picked from commit af6de400b49c011600cfd557319d1142da6e5cbd)",
        "before_after_code_files": [
          "crypto/err/err.c||crypto/err/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: void err_delete_thread_state(void)",
          "627: {",
          "629:     if (state == NULL)",
          "630:         return;",
          "",
          "[Removed Lines]",
          "628:     ERR_STATE *state = ERR_get_state();",
          "",
          "[Added Lines]",
          "628:     ERR_STATE *state = CRYPTO_THREAD_get_local(&err_thread_local);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665:         if (state == NULL)",
          "666:             return NULL;",
          "669:             ERR_STATE_free(state);",
          "670:             return NULL;",
          "671:         }",
          "674:         OPENSSL_init_crypto(OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);",
          "676:     }",
          "678:     return state;",
          "",
          "[Removed Lines]",
          "668:         if (!CRYPTO_THREAD_set_local(&err_thread_local, state)) {",
          "675:         ossl_init_thread_start(OPENSSL_INIT_THREAD_ERR_STATE);",
          "",
          "[Added Lines]",
          "668:         if (!ossl_init_thread_start(OPENSSL_INIT_THREAD_ERR_STATE)",
          "669:             || !CRYPTO_THREAD_set_local(&err_thread_local, state)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8b85c5ffee1f5adf7a27fcc5613b752b1a28b63",
      "candidate_info": {
        "commit_hash": "a8b85c5ffee1f5adf7a27fcc5613b752b1a28b63",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a8b85c5ffee1f5adf7a27fcc5613b752b1a28b63",
        "files": [
          "ssl/ssl_lib.c"
        ],
        "message": "Error out when forcing an unsupported TLS version\n\nIf the result of a SSL_{CTX_,}set_{min,max}_proto_version() call\nleaves the min and max version identical, and support for that version\nis compiled out of the library, return an error.  Such an object has\nno hope of successfully completing a handshake, and this error may\nbe easier to decipher than the resulting handshake failure.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n\n(cherry picked from commit c8feba723a33e15201009d716d9ead02e653dfe6)\n\nUpdated the cherry-pick to not reference TLS1_3_VERSION, which does\nnot exist on this branch.\n\n(Merged from https://github.com/openssl/openssl/pull/4376)",
        "before_after_code_files": [
          "ssl/ssl_lib.c||ssl/ssl_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:     return 1;",
          "433: }",
          "435: static void clear_ciphers(SSL *s)",
          "436: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: static int ssl_check_allowed_versions(int min_version, int max_version)",
          "440: {",
          "441:     int minisdtls = 0, maxisdtls = 0;",
          "444:     if (min_version == DTLS1_BAD_VER",
          "445:         || min_version >> 8 == DTLS1_VERSION_MAJOR)",
          "446:         minisdtls = 1;",
          "447:     if (max_version == DTLS1_BAD_VER",
          "448:         || max_version >> 8 == DTLS1_VERSION_MAJOR)",
          "449:         maxisdtls = 1;",
          "451:     if ((minisdtls && !maxisdtls && max_version != 0)",
          "452:         || (maxisdtls && !minisdtls && min_version != 0)) {",
          "454:         return 0;",
          "455:     }",
          "457:     if (minisdtls || maxisdtls) {",
          "459:         if (min_version == 0)",
          "461:             min_version = DTLS1_VERSION;",
          "462:         if (max_version == 0)",
          "463:             max_version = DTLS1_2_VERSION;",
          "464: #ifdef OPENSSL_NO_DTLS1_2",
          "465:         if (max_version == DTLS1_2_VERSION)",
          "466:             max_version = DTLS1_VERSION;",
          "467: #endif",
          "468: #ifdef OPENSSL_NO_DTLS1",
          "469:         if (min_version == DTLS1_VERSION)",
          "470:             min_version = DTLS1_2_VERSION;",
          "471: #endif",
          "473:  if (0",
          "474: #ifdef OPENSSL_NO_DTLS1",
          "475:             || (DTLS_VERSION_GE(min_version, DTLS1_VERSION)",
          "476:                 && DTLS_VERSION_GE(DTLS1_VERSION, max_version))",
          "477: #endif",
          "478: #ifdef OPENSSL_NO_DTLS1_2",
          "479:             || (DTLS_VERSION_GE(min_version, DTLS1_2_VERSION)",
          "480:                 && DTLS_VERSION_GE(DTLS1_2_VERSION, max_version))",
          "481: #endif",
          "482:             )",
          "483:             return 0;",
          "484:     } else {",
          "486:  if (min_version == 0)",
          "487:      min_version = SSL3_VERSION;",
          "488:  if (max_version == 0)",
          "489:      max_version = TLS1_2_VERSION;",
          "490: #ifdef OPENSSL_NO_TLS1_2",
          "491:  if (max_version == TLS1_2_VERSION)",
          "492:      max_version = TLS1_1_VERSION;",
          "493: #endif",
          "494: #ifdef OPENSSL_NO_TLS1_1",
          "495:  if (max_version == TLS1_1_VERSION)",
          "496:      max_version = TLS1_VERSION;",
          "497: #endif",
          "498: #ifdef OPENSSL_NO_TLS1",
          "499:  if (max_version == TLS1_VERSION)",
          "500:      max_version = SSL3_VERSION;",
          "501: #endif",
          "502: #ifdef OPENSSL_NO_SSL3",
          "503:  if (min_version == SSL3_VERSION)",
          "504:      min_version = TLS1_VERSION;",
          "505: #endif",
          "506: #ifdef OPENSSL_NO_TLS1",
          "507:  if (min_version == TLS1_VERSION)",
          "508:      min_version = TLS1_1_VERSION;",
          "509: #endif",
          "510: #ifdef OPENSSL_NO_TLS1_1",
          "511:  if (min_version == TLS1_1_VERSION)",
          "512:      min_version = TLS1_2_VERSION;",
          "513: #endif",
          "515:  if (0",
          "516: #ifdef OPENSSL_NO_SSL3",
          "517:             || (min_version <= SSL3_VERSION && SSL3_VERSION <= max_version)",
          "518: #endif",
          "519: #ifdef OPENSSL_NO_TLS1",
          "520:             || (min_version <= TLS1_VERSION && TLS1_VERSION <= max_version)",
          "521: #endif",
          "522: #ifdef OPENSSL_NO_TLS1_1",
          "523:             || (min_version <= TLS1_1_VERSION && TLS1_1_VERSION <= max_version)",
          "524: #endif",
          "525: #ifdef OPENSSL_NO_TLS1_2",
          "526:             || (min_version <= TLS1_2_VERSION && TLS1_2_VERSION <= max_version)",
          "527: #endif",
          "528:             )",
          "529:             return 0;",
          "530:     }",
          "531:     return 1;",
          "532: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1739:         else",
          "1740:             return 0;",
          "1741:     case SSL_CTRL_SET_MIN_PROTO_VERSION:",
          "1744:     case SSL_CTRL_SET_MAX_PROTO_VERSION:",
          "1747:     default:",
          "1748:         return (s->method->ssl_ctrl(s, cmd, larg, parg));",
          "1749:     }",
          "",
          "[Removed Lines]",
          "1742:         return ssl_set_version_bound(s->ctx->method->version, (int)larg,",
          "1743:                                      &s->min_proto_version);",
          "1745:         return ssl_set_version_bound(s->ctx->method->version, (int)larg,",
          "1746:                                      &s->max_proto_version);",
          "",
          "[Added Lines]",
          "1841:         return ssl_check_allowed_versions(larg, s->max_proto_version)",
          "1842:                && ssl_set_version_bound(s->ctx->method->version, (int)larg,",
          "1843:                                         &s->min_proto_version);",
          "1845:         return ssl_check_allowed_versions(s->min_proto_version, larg)",
          "1846:                && ssl_set_version_bound(s->ctx->method->version, (int)larg,",
          "1847:                                         &s->max_proto_version);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1869:     case SSL_CTRL_CLEAR_CERT_FLAGS:",
          "1870:         return (ctx->cert->cert_flags &= ~larg);",
          "1871:     case SSL_CTRL_SET_MIN_PROTO_VERSION:",
          "1874:     case SSL_CTRL_SET_MAX_PROTO_VERSION:",
          "1877:     default:",
          "1878:         return (ctx->method->ssl_ctx_ctrl(ctx, cmd, larg, parg));",
          "1879:     }",
          "",
          "[Removed Lines]",
          "1872:         return ssl_set_version_bound(ctx->method->version, (int)larg,",
          "1873:                                      &ctx->min_proto_version);",
          "1875:         return ssl_set_version_bound(ctx->method->version, (int)larg,",
          "1876:                                      &ctx->max_proto_version);",
          "",
          "[Added Lines]",
          "1973:         return ssl_check_allowed_versions(larg, ctx->max_proto_version)",
          "1974:                && ssl_set_version_bound(ctx->method->version, (int)larg,",
          "1975:                                         &ctx->min_proto_version);",
          "1977:         return ssl_check_allowed_versions(ctx->min_proto_version, larg)",
          "1978:                && ssl_set_version_bound(ctx->method->version, (int)larg,",
          "1979:                                         &ctx->max_proto_version);",
          "",
          "---------------"
        ]
      }
    }
  ]
}