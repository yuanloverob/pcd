{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
      "candidate_info": {
        "commit_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c285ded26c1a8b368777691cf40ad7385f27919b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test"
        ],
        "message": "Make sure a CAST to \"NUMERIC\" results in an integer if the value can be losslessly expressed as an integer, as the documentation requires. Ticket [dd6bffbfb6e61db9].\n\nFossilOrigin-Name: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "[Removed Lines]",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "",
          "[Added Lines]",
          "289:     return 1;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "703: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "",
          "[Added Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "722:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "",
          "[Removed Lines]",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "727:         MemSetTypeFlag(pMem, MEM_Int);",
          "728:       }else{",
          "729:         MemSetTypeFlag(pMem, MEM_Real);",
          "730:       }",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "725:     if( ((rc==0 || rc==1) && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1)",
          "726:      || sqlite3RealSameAsInt(pMem->u.r, (ix = (i64)pMem->u.r))",
          "727:     ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: do_execsql_test case-5.3 {",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "377: # The following does not have anything to do with the CAST operator,",
          "",
          "[Removed Lines]",
          "374: } {123 12300000.0}",
          "",
          "[Added Lines]",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "375: } {123 12300000 12300000.0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419: # 2019-06-10",
          "420: # https://www.sqlite.org/src/info/dd6bffbfb6e61db9",
          "421: #",
          "422: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "423: # first does a forced conversion into REAL but then further converts the",
          "424: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "425: # is lossless and reversible.",
          "426: #",
          "427: do_execsql_test cast-7.20 {",
          "428:   DROP TABLE IF EXISTS t0;",
          "429:   CREATE TABLE t0 (c0 TEXT);",
          "430:   INSERT INTO t0(c0) VALUES ('1.0');",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1709:  real 9.22337203685478e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "[Added Lines]",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34da2a4806336001082c522b833fac4fb8a814e7",
      "candidate_info": {
        "commit_hash": "34da2a4806336001082c522b833fac4fb8a814e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/34da2a4806336001082c522b833fac4fb8a814e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Convert an ALWAYS() into an assert() with an extra error term. Dbsqlfuzz find, with test case in TH3.\n\nFossilOrigin-Name: b473ad35c5ce355853e1805a5c0658bda1500775f22f59c6b6759ae990e65aca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 401c9d30e06191d938503aae024bc453d960fa64dc812ed86c661f94533247fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:         idxCols |= cMask;",
          "802:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "805:         n++;",
          "806:       }",
          "807:     }",
          "",
          "[Removed Lines]",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
      "candidate_info": {
        "commit_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "Fix the OP_Cast operator so that when casting to TEXT, it always leaves the result in the encoding of the database.  Ticket [0911b5d161b039c6]. Test cases in TH3.\n\nFossilOrigin-Name: f347744e0d576f0250c29259cca755e57afded8956224114c01603c1bca5b3a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c44c73499154bc57634a54cb743642d0aacc93a1336fbb8bb3eb5dbbf616357",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   pIn1 = &aMem[pOp->p1];",
          "1867:   memAboutToChange(p, pIn1);",
          "1868:   rc = ExpandBlob(pIn1);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   REGISTER_TRACE(pOp->p1, pIn1);",
          "1873:   break;",
          "1874: }",
          "",
          "[Removed Lines]",
          "1869:   sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1870:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "[Added Lines]",
          "1870:   rc = sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "529: void sqlite3VdbeIntegerAffinity(Mem*);",
          "530: int sqlite3VdbeMemRealify(Mem*);",
          "531: int sqlite3VdbeMemNumerify(Mem*);",
          "533: int sqlite3VdbeMemFromBtree(BtCursor*,u32,u32,Mem*);",
          "534: void sqlite3VdbeMemRelease(Mem *p);",
          "535: int sqlite3VdbeMemFinalize(Mem*, FuncDef*);",
          "",
          "[Removed Lines]",
          "532: void sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "[Added Lines]",
          "532: int sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   switch( aff ){",
          "754:       if( (pMem->flags & MEM_Blob)==0 ){",
          "",
          "[Removed Lines]",
          "750: void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return;",
          "",
          "[Added Lines]",
          "750: int sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "780:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "781:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "783:     }",
          "784:   }",
          "785: }",
          "",
          "[Removed Lines]",
          "782:       break;",
          "",
          "[Added Lines]",
          "782:       return sqlite3VdbeChangeEncoding(pMem, encoding);",
          "785:   return SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
      "candidate_info": {
        "commit_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Minor tweak to patch on this branch to reclaim some cycles.\n\nFossilOrigin-Name: 81eed055de856068109a7e332cca0c3ff1120ebe2bfa5ed6383b165c726e0a7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6244: #endif",
          "6245:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6246:     }",
          "",
          "[Removed Lines]",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6243:       if( pExpr->y.pFilter ){",
          "6244:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6245:       }",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25050f26206456c62f400bdd95215701095b00a0",
      "candidate_info": {
        "commit_hash": "25050f26206456c62f400bdd95215701095b00a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25050f26206456c62f400bdd95215701095b00a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Use an unsigned integer to count free pages in btree.c:freePage2().\n\nFossilOrigin-Name: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}