{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e74a733024ba96d8ebf2b7d088030730fc8e18dd",
      "candidate_info": {
        "commit_hash": "e74a733024ba96d8ebf2b7d088030730fc8e18dd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e74a733024ba96d8ebf2b7d088030730fc8e18dd",
        "files": [
          "test/simple/test-regress-GH-1697.js"
        ],
        "message": "Fix #3448 Use listen callback in test-regress-GH-1697",
        "before_after_code_files": [
          "test/simple/test-regress-GH-1697.js||test/simple/test-regress-GH-1697.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-regress-GH-1697.js||test/simple/test-regress-GH-1697.js": [
          "File: test/simple/test-regress-GH-1697.js -> test/simple/test-regress-GH-1697.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:       server.close();",
          "37:     });",
          "38:   });",
          "42: } else {",
          "",
          "[Removed Lines]",
          "39:   server.listen(1234, '127.0.0.1');",
          "41:   console.log('Server running.');",
          "",
          "[Added Lines]",
          "40:   server.listen(1234, '127.0.0.1', function() {",
          "41:     console.log('Server running.');",
          "42:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b5c8b600528bc31e1bcae2fdcca95ed07427333",
      "candidate_info": {
        "commit_hash": "5b5c8b600528bc31e1bcae2fdcca95ed07427333",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5b5c8b600528bc31e1bcae2fdcca95ed07427333",
        "files": [
          "deps/v8/build/common.gypi",
          "deps/v8/src/heap.cc",
          "deps/v8/src/mark-compact.cc",
          "deps/v8/src/version.cc",
          "deps/v8/test/cctest/test-alloc.cc",
          "deps/v8/test/cctest/test-heap.cc",
          "deps/v8/tools/merge-to-branch.sh"
        ],
        "message": "v8: Upgrade to 3.11.10.14",
        "before_after_code_files": [
          "deps/v8/build/common.gypi||deps/v8/build/common.gypi",
          "deps/v8/src/heap.cc||deps/v8/src/heap.cc",
          "deps/v8/src/mark-compact.cc||deps/v8/src/mark-compact.cc",
          "deps/v8/src/version.cc||deps/v8/src/version.cc",
          "deps/v8/test/cctest/test-alloc.cc||deps/v8/test/cctest/test-alloc.cc",
          "deps/v8/test/cctest/test-heap.cc||deps/v8/test/cctest/test-heap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/build/common.gypi||deps/v8/build/common.gypi": [
          "File: deps/v8/build/common.gypi -> deps/v8/build/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:           'WIN32',",
          "240:         ],",
          "241:         'msvs_configuration_attributes': {",
          "242:           'IntermediateDirectory': '$(OutDir)\\\\obj\\\\$(ProjectName)',",
          "243:           'CharacterSet': '1',",
          "244:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:           'OutputDirectory': '<(DEPTH)\\\\build\\\\$(ConfigurationName)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:         'target_conditions': [",
          "271:           ['_toolset==\"host\"', {",
          "272:             'variables': {",
          "274:             },",
          "275:             'cflags': [ '<(m32flag)' ],",
          "276:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "273:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "274:               'm32flag': '<!((echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:           }],",
          "281:           ['_toolset==\"target\"', {",
          "282:             'variables': {",
          "284:             },",
          "285:             'cflags': [ '<(m32flag)' ],",
          "286:             'ldflags': [ '<(m32flag)' ],",
          "",
          "[Removed Lines]",
          "283:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo \"-m32\" || true)',",
          "",
          "[Added Lines]",
          "284:               'm32flag': '<!((echo | $(echo ${CXX_target:-${CXX:-$(which g++)}}) -m32 -E - > /dev/null 2>&1) && echo -n \"-m32\" || true)',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:         },",
          "324:         'conditions': [",
          "325:           ['OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "327:                         '-Wnon-virtual-dtor', '-Woverloaded-virtual' ],",
          "328:           }],",
          "329:         ],",
          "",
          "[Removed Lines]",
          "326:             'cflags': [ '-Wno-unused-parameter',",
          "",
          "[Added Lines]",
          "327:             'cflags': [ '-Wall', '<(werror)', '-W', '-Wno-unused-parameter',",
          "",
          "---------------"
        ],
        "deps/v8/src/heap.cc||deps/v8/src/heap.cc": [
          "File: deps/v8/src/heap.cc -> deps/v8/src/heap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5015: bool Heap::IdleNotification(int hint) {",
          "5016:   const int kMaxHint = 1000;",
          "5017:   intptr_t size_factor = Min(Max(hint, 20), kMaxHint) / 4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5020:   const int kMinHintForFullGC = 100;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5081:   mark_sweeps_since_idle_round_started_ += new_mark_sweeps;",
          "5082:   ms_count_at_last_idle_notification_ = ms_count_;",
          "5085:     FinishIdleRound();",
          "5086:     return true;",
          "5087:   }",
          "5089:   if (incremental_marking()->IsStopped()) {",
          "5091:   }",
          "5094:   return false;",
          "5095: }",
          "",
          "[Removed Lines]",
          "5084:   if (mark_sweeps_since_idle_round_started_ >= kMaxMarkSweepsInIdleRound) {",
          "5090:     incremental_marking()->Start();",
          "5093:   AdvanceIdleIncrementalMarking(step_size);",
          "",
          "[Added Lines]",
          "5088:   int remaining_mark_sweeps = kMaxMarkSweepsInIdleRound -",
          "5089:                               mark_sweeps_since_idle_round_started_;",
          "5091:   if (remaining_mark_sweeps <= 0) {",
          "5102:     if (remaining_mark_sweeps <= 2 && hint >= kMinHintForFullGC) {",
          "5103:       CollectAllGarbage(kReduceMemoryFootprintMask,",
          "5104:                         \"idle notification: finalize idle round\");",
          "5105:     } else {",
          "5106:       incremental_marking()->Start();",
          "5107:     }",
          "5108:   }",
          "5109:   if (!incremental_marking()->IsStopped()) {",
          "5110:     AdvanceIdleIncrementalMarking(step_size);",
          "",
          "---------------"
        ],
        "deps/v8/src/mark-compact.cc||deps/v8/src/mark-compact.cc": [
          "File: deps/v8/src/mark-compact.cc -> deps/v8/src/mark-compact.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:          space->identity() == OLD_DATA_SPACE ||",
          "501:          space->identity() == CODE_SPACE);",
          "503:   int number_of_pages = space->CountTotalPages();",
          "510:   if (FLAG_stress_compaction || FLAG_always_compact) {",
          "511:     max_evacuation_candidates = kMaxMaxEvacuationCandidates;",
          "",
          "[Removed Lines]",
          "505:   const int kMaxMaxEvacuationCandidates = 1000;",
          "506:   int max_evacuation_candidates = Min(",
          "507:     kMaxMaxEvacuationCandidates,",
          "508:     static_cast<int>(sqrt(static_cast<double>(number_of_pages / 2)) + 1));",
          "",
          "[Added Lines]",
          "503:   static const int kMaxMaxEvacuationCandidates = 1000;",
          "505:   int max_evacuation_candidates =",
          "506:       static_cast<int>(sqrt(static_cast<double>(number_of_pages / 2)) + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:   intptr_t over_reserved = reserved - space->SizeOfObjects();",
          "536:   static const intptr_t kFreenessThreshold = 50;",
          "548:              static_cast<double>(over_reserved) / MB,",
          "549:              static_cast<int>(kFreenessThreshold));",
          "550:     }",
          "551:   }",
          "",
          "[Removed Lines]",
          "538:   if (over_reserved >= 2 * space->AreaSize() &&",
          "539:       reduce_memory_footprint_) {",
          "540:     mode = REDUCE_MEMORY_FOOTPRINT;",
          "544:     max_evacuation_candidates += 2;",
          "546:     if (FLAG_trace_fragmentation) {",
          "547:       PrintF(\"Estimated over reserved memory: %.1f MB (setting threshold %d)\\n\",",
          "",
          "[Added Lines]",
          "536:   if (over_reserved >= 2 * space->AreaSize()) {",
          "540:     if (reduce_memory_footprint_) {",
          "541:       mode = REDUCE_MEMORY_FOOTPRINT;",
          "542:       max_evacuation_candidates += 2;",
          "543:     }",
          "548:     if (over_reserved > reserved / 3) {",
          "549:       mode = REDUCE_MEMORY_FOOTPRINT;",
          "550:       max_evacuation_candidates *= 2;",
          "551:     }",
          "553:     if (FLAG_trace_fragmentation && mode == REDUCE_MEMORY_FOOTPRINT) {",
          "554:       PrintF(\"Estimated over reserved memory: %.1f / %.1f MB (threshold %d)\\n\",",
          "556:              static_cast<double>(reserved) / MB,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:   Candidate candidates[kMaxMaxEvacuationCandidates];",
          "557:   int count = 0;",
          "558:   int fragmentation = 0;",
          "559:   Candidate* least = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:   max_evacuation_candidates =",
          "566:       Min(kMaxMaxEvacuationCandidates, max_evacuation_candidates);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3817:   bool lazy_sweeping_active = false;",
          "3818:   bool unused_page_present = false;",
          "3825:   while (it.has_next()) {",
          "3826:     Page* p = it.next();",
          "",
          "[Removed Lines]",
          "3820:   intptr_t old_space_size = heap()->PromotedSpaceSizeOfObjects();",
          "3821:   intptr_t space_left =",
          "3822:       Min(heap()->OldGenPromotionLimit(old_space_size),",
          "3823:           heap()->OldGenAllocationLimit(old_space_size)) - old_space_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3881:         }",
          "3882:         freed_bytes += SweepConservatively(space, p);",
          "3883:         pages_swept++;",
          "3885:           space->SetPagesToSweep(p->next_page());",
          "3886:           lazy_sweeping_active = true;",
          "3887:         } else {",
          "",
          "[Removed Lines]",
          "3884:         if (space_left + freed_bytes > newspace_size) {",
          "",
          "[Added Lines]",
          "3890:         if (freed_bytes > 2 * newspace_size) {",
          "",
          "---------------"
        ],
        "deps/v8/src/version.cc||deps/v8/src/version.cc": [
          "File: deps/v8/src/version.cc -> deps/v8/src/version.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define MAJOR_VERSION     3",
          "36: #define MINOR_VERSION     11",
          "37: #define BUILD_NUMBER      10",
          "41: #define IS_CANDIDATE_VERSION 0",
          "",
          "[Removed Lines]",
          "38: #define PATCH_LEVEL       12",
          "",
          "[Added Lines]",
          "38: #define PATCH_LEVEL       14",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-alloc.cc||deps/v8/test/cctest/test-alloc.cc": [
          "File: deps/v8/test/cctest/test-alloc.cc -> deps/v8/test/cctest/test-alloc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: using namespace v8::internal;",
          "38:   int old_linear_size = static_cast<int>(space->limit() - space->top());",
          "39:   space->Free(space->top(), old_linear_size);",
          "40:   space->SetTop(space->limit(), space->limit());",
          "",
          "[Removed Lines]",
          "37: static inline void SimulateFullSpace(PagedSpace* space) {",
          "",
          "[Added Lines]",
          "38: void SimulateFullSpace(PagedSpace* space) {",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-heap.cc||deps/v8/test/cctest/test-heap.cc": [
          "File: deps/v8/test/cctest/test-heap.cc -> deps/v8/test/cctest/test-heap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1898:   CHECK(root->IsJSObject());",
          "1899:   CHECK(root->map()->IsMap());",
          "1900: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1904: void SimulateFullSpace(PagedSpace* space);",
          "1907: TEST(ReleaseOverReservedPages) {",
          "1908:   i::FLAG_trace_gc = true;",
          "1909:   InitializeVM();",
          "1910:   v8::HandleScope scope;",
          "1911:   static const int number_of_test_pages = 20;",
          "1914:   PagedSpace* old_pointer_space = HEAP->old_pointer_space();",
          "1915:   CHECK_EQ(1, old_pointer_space->CountTotalPages());",
          "1916:   for (int i = 0; i < number_of_test_pages; i++) {",
          "1917:     AlwaysAllocateScope always_allocate;",
          "1918:     SimulateFullSpace(old_pointer_space);",
          "1919:     FACTORY->NewFixedArray(1, TENURED);",
          "1920:   }",
          "1921:   CHECK_EQ(number_of_test_pages + 1, old_pointer_space->CountTotalPages());",
          "1925:   HEAP->CollectAllGarbage(Heap::kNoGCFlags, \"triggered for preparation\");",
          "1926:   CHECK_EQ(number_of_test_pages + 1, old_pointer_space->CountTotalPages());",
          "1930:   HEAP->CollectAllGarbage(Heap::kNoGCFlags, \"triggered by test 1\");",
          "1931:   CHECK_GE(number_of_test_pages + 1, old_pointer_space->CountTotalPages());",
          "1932:   HEAP->CollectAllGarbage(Heap::kNoGCFlags, \"triggered by test 2\");",
          "1933:   CHECK_GE(number_of_test_pages + 1, old_pointer_space->CountTotalPages() * 2);",
          "1937:   HEAP->CollectAllAvailableGarbage(\"triggered really hard\");",
          "1938:   CHECK_EQ(1, old_pointer_space->CountTotalPages());",
          "1939: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1a62ec6e168876493688cfa45097567a332267",
      "candidate_info": {
        "commit_hash": "7a1a62ec6e168876493688cfa45097567a332267",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7a1a62ec6e168876493688cfa45097567a332267",
        "files": [
          "deps/uv/include/uv-private/uv-win.h",
          "deps/uv/src/unix/tty.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs.c"
        ],
        "message": "Upgrade uv to 86ebe48660e",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h",
          "deps/uv/src/unix/tty.c||deps/uv/src/unix/tty.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h": [
          "File: deps/uv/include/uv-private/uv-win.h -> deps/uv/include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: #define UV_FS_PRIVATE_FIELDS              \\",
          "389:   wchar_t* pathw;                         \\",
          "390:   int flags;                              \\",
          "392:   struct _stati64 stat;                   \\",
          "393:   void* arg0;                             \\",
          "394:   union {                                 \\",
          "",
          "[Removed Lines]",
          "391:   int last_error;                         \\",
          "",
          "[Added Lines]",
          "391:   DWORD sys_errno_;                       \\",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tty.c||deps/uv/src/unix/tty.c": [
          "File: deps/uv/src/unix/tty.c -> deps/uv/src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     raw.c_cc[VMIN] = 1;",
          "77:     raw.c_cc[VTIME] = 0;",
          "81:       goto fatal;",
          "82:     }",
          "",
          "[Removed Lines]",
          "80:     if (tcsetattr(fd, TCSAFLUSH, &raw)) {",
          "",
          "[Added Lines]",
          "80:     if (tcsetattr(fd, TCSADRAIN, &raw)) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     case WSAECONNREFUSED:                   return UV_ECONNREFUSED;",
          "85:     case ERROR_NETNAME_DELETED:             return UV_ECONNRESET;",
          "86:     case WSAECONNRESET:                     return UV_ECONNRESET;",
          "87:     case WSAEFAULT:                         return UV_EFAULT;",
          "88:     case ERROR_HOST_UNREACHABLE:            return UV_EHOSTUNREACH;",
          "89:     case WSAEHOSTUNREACH:                   return UV_EHOSTUNREACH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     case ERROR_ALREADY_EXISTS:              return UV_EEXIST;",
          "88:     case ERROR_FILE_EXISTS:                 return UV_EEXIST;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     case ERROR_TOO_MANY_OPEN_FILES:         return UV_EMFILE;",
          "94:     case WSAEMFILE:                         return UV_EMFILE;",
          "95:     case WSAEMSGSIZE:                       return UV_EMSGSIZE;",
          "96:     case ERROR_NETWORK_UNREACHABLE:         return UV_ENETUNREACH;",
          "97:     case WSAENETUNREACH:                    return UV_ENETUNREACH;",
          "98:     case WSAENOBUFS:                        return UV_ENOBUFS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     case ERROR_FILENAME_EXCED_RANGE:        return UV_ENAMETOOLONG;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     case ERROR_INVALID_PARAMETER:           return UV_EINVAL;",
          "106:     case ERROR_NO_UNICODE_TRANSLATION:      return UV_ECHARSET;",
          "107:     case ERROR_BROKEN_PIPE:                 return UV_EOF;",
          "108:     case ERROR_PIPE_BUSY:                   return UV_EBUSY;",
          "109:     case ERROR_SEM_TIMEOUT:                 return UV_ETIMEDOUT;",
          "111:     case WSAHOST_NOT_FOUND:                 return UV_ENOENT;",
          "112:     default:                                return UV_UNKNOWN;",
          "113:   }",
          "",
          "[Removed Lines]",
          "110:     case ERROR_ALREADY_EXISTS:              return UV_EEXIST;",
          "",
          "[Added Lines]",
          "111:     case ERROR_BAD_PIPE:                    return UV_EPIPE;",
          "112:     case ERROR_NO_DATA:                     return UV_EPIPE;",
          "113:     case ERROR_PIPE_NOT_CONNECTED:          return UV_EPIPE;",
          "116:     case WSAETIMEDOUT:                      return UV_ETIMEDOUT;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #define UV_FS_FREE_ARG1          0x0004",
          "39: #define UV_FS_FREE_PTR           0x0008",
          "40: #define UV_FS_CLEANEDUP          0x0010",
          "44: #define UTF8_TO_UTF16(s, t)                                                 \\",
          "",
          "[Removed Lines]",
          "41: #define UV_FS_LAST_ERROR_SET     0x0020",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   uv_ref((loop));",
          "90: #define SET_UV_LAST_ERROR_FROM_REQ(req)                                     \\",
          "101: #define SET_REQ_RESULT(req, result_value)                                   \\",
          "102:   req->result = (result_value);                                             \\",
          "103:   if (req->result == -1) {                                                  \\",
          "106:   }",
          "109:   req->result = -1;                                                         \\",
          "113: #define VERIFY_UV_FILE(file, req)                                           \\",
          "114:   if (file == -1) {                                                         \\",
          "115:     req->result = -1;                                                       \\",
          "116:     req->errorno = UV_EBADF;                                                \\",
          "118:     return;                                                                 \\",
          "119:   }",
          "",
          "[Removed Lines]",
          "91:   if (req->flags & UV_FS_LAST_ERROR_SET) {                                  \\",
          "92:     uv__set_sys_error(req->loop, req->last_error);                          \\",
          "93:   } else if (req->result == -1) {                                           \\",
          "94:     uv__set_error(req->loop, (uv_err_code)req->errorno, req->last_error);   \\",
          "95:   }",
          "97: #define SET_REQ_LAST_ERROR(req, error)                                      \\",
          "98:   req->last_error = error;                                                  \\",
          "99:   req->flags |= UV_FS_LAST_ERROR_SET;",
          "104:     req->last_error = _doserrno;                                            \\",
          "105:     req->errorno = uv_translate_sys_error(req->last_error);                 \\",
          "108: #define SET_REQ_RESULT_WIN32_ERROR(req, sys_errno)                          \\",
          "110:   req->errorno = uv_translate_sys_error(sys_errno);                         \\",
          "111:   SET_REQ_LAST_ERROR(req, sys_errno);",
          "117:     req->last_error = ERROR_SUCCESS;                                        \\",
          "",
          "[Added Lines]",
          "90:   uv__set_error(req->loop, req->errorno, req->sys_errno_);",
          "95:     req->sys_errno_ = _doserrno;                                            \\",
          "96:     req->errorno = uv_translate_sys_error(req->sys_errno_);                 \\",
          "99: #define SET_REQ_WIN32_ERROR(req, sys_errno)                                 \\",
          "100:   req->result = -1;                                                         \\",
          "101:   req->sys_errno_ = (sys_errno);                                            \\",
          "102:   req->errorno = uv_translate_sys_error(req->sys_errno_);",
          "104: #define SET_REQ_UV_ERROR(req, uv_errno, sys_errno)                          \\",
          "106:   req->sys_errno_ = (sys_errno);                                            \\",
          "107:   req->errorno = (uv_errno);",
          "113:     req->sys_errno_ = ERROR_SUCCESS;                                        \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   req->path = path ? strdup(path) : NULL;",
          "138:   req->pathw = (wchar_t*)pathw;",
          "139:   req->errorno = 0;",
          "141:   memset(&req->overlapped, 0, sizeof(req->overlapped));",
          "142: }",
          "",
          "[Removed Lines]",
          "140:   req->last_error = 0;",
          "",
          "[Added Lines]",
          "136:   req->sys_errno_ = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "266:                      attributes,",
          "267:                      NULL);",
          "268:   if (file == INVALID_HANDLE_VALUE) {",
          "270:     return;",
          "271:   }",
          "272:   result = _open_osfhandle((intptr_t)file, flags);",
          "",
          "[Removed Lines]",
          "269:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "265:     DWORD error = GetLastError();",
          "266:     if (error == ERROR_FILE_EXISTS && (flags & _O_CREAT) &&",
          "267:         !(flags & _O_EXCL)) {",
          "270:       SET_REQ_UV_ERROR(req, UV_EISDIR, error);",
          "271:     } else {",
          "272:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "273:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:   }",
          "302:   if (length > INT_MAX) {",
          "304:     return;",
          "305:   }",
          "",
          "[Removed Lines]",
          "303:     SET_REQ_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "",
          "[Added Lines]",
          "307:     SET_REQ_WIN32_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "319:   if (ReadFile(handle, buf, length, &bytes, overlapped_ptr)) {",
          "320:     SET_REQ_RESULT(req, bytes);",
          "321:   } else {",
          "323:   }",
          "324: }",
          "",
          "[Removed Lines]",
          "322:     SET_REQ_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "326:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340:   }",
          "342:   if (length > INT_MAX) {",
          "344:     return;",
          "345:   }",
          "",
          "[Removed Lines]",
          "343:     SET_REQ_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "",
          "[Added Lines]",
          "347:     SET_REQ_WIN32_ERROR(req, ERROR_INSUFFICIENT_BUFFER);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "359:   if (WriteFile(handle, buf, length, &bytes, overlapped_ptr)) {",
          "360:     SET_REQ_RESULT(req, bytes);",
          "361:   } else {",
          "363:   }",
          "364: }",
          "",
          "[Removed Lines]",
          "362:     SET_REQ_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "366:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:   if (!(GetFileAttributesW(path) & FILE_ATTRIBUTE_DIRECTORY)) {",
          "399:     req->result = -1;",
          "400:     req->errorno = UV_ENOTDIR;",
          "402:     return;",
          "403:   }",
          "",
          "[Removed Lines]",
          "401:     req->last_error = ERROR_SUCCESS;",
          "",
          "[Added Lines]",
          "405:     req->sys_errno_ = ERROR_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "416:   free(path2);",
          "418:   if(dir == INVALID_HANDLE_VALUE) {",
          "420:     return;",
          "421:   }",
          "",
          "[Removed Lines]",
          "419:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "423:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "461:     size = uv_utf16_to_utf8(buf, buf_char_len, NULL, 0);",
          "462:     if (!size) {",
          "464:       return;",
          "465:     }",
          "",
          "[Removed Lines]",
          "463:       SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "467:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "474:       free(buf);",
          "475:       free(req->ptr);",
          "476:       req->ptr = NULL;",
          "478:       return;",
          "479:     }",
          "480:     free(buf);",
          "",
          "[Removed Lines]",
          "477:       SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "481:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "492: static void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "493:   HANDLE handle;",
          "495:   BY_HANDLE_FILE_INFORMATION info;",
          "497:   req->ptr = NULL;",
          "",
          "[Removed Lines]",
          "494:   int result;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "504:                        FILE_FLAG_BACKUP_SEMANTICS,",
          "505:                        NULL);",
          "506:   if (handle == INVALID_HANDLE_VALUE) {",
          "508:     return;",
          "509:   }",
          "511:   if (!GetFileInformationByHandle(handle, &info)) {",
          "513:     CloseHandle(handle);",
          "514:     return;",
          "515:   }",
          "",
          "[Removed Lines]",
          "507:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "512:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "510:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "515:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "566: void fs__rename(uv_fs_t* req, const wchar_t* path, const wchar_t* new_path) {",
          "567:   if (!MoveFileExW(path, new_path, MOVEFILE_REPLACE_EXISTING)) {",
          "569:     return;",
          "570:   }",
          "",
          "[Removed Lines]",
          "568:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "571:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "581:   result = FlushFileBuffers((HANDLE)_get_osfhandle(file)) ? 0 : -1;",
          "582:   if (result == -1) {",
          "584:   } else {",
          "585:     SET_REQ_RESULT(req, result);",
          "586:   }",
          "",
          "[Removed Lines]",
          "583:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "586:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "711: void fs__link(uv_fs_t* req, const wchar_t* path, const wchar_t* new_path) {",
          "712:   int result = CreateHardLinkW(new_path, path, NULL) ? 0 : -1;",
          "713:   if (result == -1) {",
          "715:   } else {",
          "716:     SET_REQ_RESULT(req, result);",
          "717:   }",
          "",
          "[Removed Lines]",
          "714:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "717:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "726:                                   path,",
          "727:                                   flags & UV_FS_SYMLINK_DIR ? SYMBOLIC_LINK_FLAG_DIRECTORY : 0) ? 0 : -1;",
          "728:     if (result == -1) {",
          "730:       return;",
          "731:     }",
          "732:   } else {",
          "736:     return;",
          "737:   }",
          "",
          "[Removed Lines]",
          "729:       SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "733:     req->result = -1;",
          "734:     req->errorno = UV_ENOTSUP;",
          "735:     req->last_error = ERROR_SUCCESS;",
          "",
          "[Added Lines]",
          "732:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "736:     SET_REQ_UV_ERROR(req, UV_ENOSYS, ERROR_NOT_SUPPORTED);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "762:   if (INVALID_HANDLE_VALUE == symlink) {",
          "763:     result = -1;",
          "765:     goto done;",
          "766:   }",
          "",
          "[Removed Lines]",
          "764:     SET_REQ_LAST_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "765:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "782:   if (!rv) {",
          "783:     result = -1;",
          "785:     goto done;",
          "786:   }",
          "",
          "[Removed Lines]",
          "784:     SET_REQ_LAST_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "785:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "789:   if (reparse_data->ReparseTag != IO_REPARSE_TAG_SYMLINK) {",
          "790:     result = -1;",
          "793:     goto done;",
          "794:   }",
          "",
          "[Removed Lines]",
          "792:     SET_REQ_LAST_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "793:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "810:                               0);",
          "811:   if (!utf8size) {",
          "812:     result = -1;",
          "814:     goto done;",
          "815:   }",
          "",
          "[Removed Lines]",
          "813:     SET_REQ_LAST_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "814:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "825:                               utf8size);",
          "826:   if (!utf8size) {",
          "827:     result = -1;",
          "829:     goto done;",
          "830:   }",
          "",
          "[Removed Lines]",
          "828:     SET_REQ_LAST_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "829:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: # define close _close",
          "46: #endif",
          "50: typedef struct {",
          "51:   const char* path;",
          "",
          "[Removed Lines]",
          "48: #define TOO_LONG_NAME_LENGTH 8192",
          "",
          "[Added Lines]",
          "48: #define TOO_LONG_NAME_LENGTH 65536",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b45a10818e56f8db8d692c5b5abe8bae3a6e0586",
      "candidate_info": {
        "commit_hash": "b45a10818e56f8db8d692c5b5abe8bae3a6e0586",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b45a10818e56f8db8d692c5b5abe8bae3a6e0586",
        "files": [
          "src/udp_wrap.cc"
        ],
        "message": "udp: slightly optimize address family property",
        "before_after_code_files": [
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static Persistent<String> address_sym;",
          "69: static Persistent<String> port_sym;",
          "70: static Persistent<String> family_sym;",
          "71: static Persistent<String> buffer_sym;",
          "72: static Persistent<String> oncomplete_sym;",
          "73: static Persistent<String> onmessage_sym;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: static Persistent<String> ipv4_sym;",
          "72: static Persistent<String> ipv6_sym;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   oncomplete_sym = NODE_PSYMBOL(\"oncomplete\");",
          "137:   onmessage_sym = NODE_PSYMBOL(\"onmessage\");",
          "138:   family_sym = NODE_PSYMBOL(\"family\");",
          "140:   Local<FunctionTemplate> t = FunctionTemplate::New(New);",
          "141:   t->InstanceTemplate()->SetInternalFieldCount(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:   ipv4_sym = NODE_PSYMBOL(\"IPv4\");",
          "142:   ipv6_sym = NODE_PSYMBOL(\"IPv6\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:   const sockaddr_in *a4;",
          "450:   const sockaddr_in6 *a6;",
          "451:   int port;",
          "454:   Local<Object> info = Object::New();",
          "",
          "[Removed Lines]",
          "452:   const char *family_name;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:     a6 = reinterpret_cast<const sockaddr_in6*>(addr);",
          "459:     uv_inet_ntop(AF_INET6, &a6->sin6_addr, ip, sizeof ip);",
          "460:     port = ntohs(a6->sin6_port);",
          "462:     info->Set(address_sym, String::New(ip));",
          "464:     info->Set(port_sym, Integer::New(port));",
          "465:     break;",
          "467:   case AF_INET:",
          "468:     a4 = reinterpret_cast<const sockaddr_in*>(addr);",
          "469:     uv_inet_ntop(AF_INET, &a4->sin_addr, ip, sizeof ip);",
          "470:     port = ntohs(a4->sin_port);",
          "472:     info->Set(address_sym, String::New(ip));",
          "474:     info->Set(port_sym, Integer::New(port));",
          "475:     break;",
          "477:   default:",
          "",
          "[Removed Lines]",
          "461:     family_name = \"IPv6\";",
          "463:     info->Set(family_sym, String::New(family_name));",
          "471:     family_name = \"IPv4\";",
          "473:     info->Set(family_sym, String::New(family_name));",
          "",
          "[Added Lines]",
          "466:     info->Set(family_sym, ipv6_sym);",
          "475:     info->Set(family_sym, ipv4_sym);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9164fa6aaaa6e483c570d34109bcb06736ef5750",
      "candidate_info": {
        "commit_hash": "9164fa6aaaa6e483c570d34109bcb06736ef5750",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9164fa6aaaa6e483c570d34109bcb06736ef5750",
        "files": [
          "lib/http.js"
        ],
        "message": "Null references to request object on socket errors.\n\nRegarding #3199 and #3179 and issues seen in production.\nHopefully this fixes them.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1362:         req.emit('error', createHangUpError());",
          "1363:       }",
          "1364:     }",
          "1365:     socket.on('close', closeListener);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}