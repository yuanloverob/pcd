{
  "cve_id": "CVE-2018-16426",
  "cve_desc": "Endless recursion when handling responses from an IAS-ECC card in iasecc_select_file in libopensc/card-iasecc.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to hang or crash the opensc library using programs.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "03628449b75a93787eb2359412a3980365dda49b",
  "patch_info": {
    "commit_hash": "03628449b75a93787eb2359412a3980365dda49b",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/03628449b75a93787eb2359412a3980365dda49b",
    "files": [
      "src/libopensc/card-iasecc.c"
    ],
    "message": "iasecc: fixed unbound recursion",
    "before_after_code_files": [
      "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c": [
      "File: src/libopensc/card-iasecc.c -> src/libopensc/card-iasecc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "827:  sc_log(ctx, \"iasecc_select_file() path:%s\", sc_print_path(path));",
      "829:  sc_print_cache(card);",
      "831:   sc_log(ctx, \"EF.ATR(aid:'%s')\", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : \"\");",
      "833:   rv = iasecc_select_mf(card, file_out);",
      "834:   LOG_TEST_RET(ctx, rv, \"MF selection error\");",
      "840:  }",
      "842:  if (lpath.aid.len) {",
      "",
      "[Removed Lines]",
      "830:  if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {",
      "836:   if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)    {",
      "837:    memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);",
      "838:    lpath.len -=  2;",
      "839:   }",
      "",
      "[Added Lines]",
      "830:  if (path->type != SC_PATH_TYPE_DF_NAME",
      "831:    && lpath.len >= 2",
      "832:    && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {",
      "838:   memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);",
      "839:   lpath.len -=  2;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
      "candidate_info": {
        "commit_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/83f45cda2af16b65264103fbe0394fd422f0120d",
        "files": [
          "src/libopensc/card-setcos.c",
          "src/libopensc/errors.c",
          "src/libopensc/errors.h",
          "src/libopensc/simpletlv.c",
          "src/tools/util.c"
        ],
        "message": "Added bounds checking to sc_simpletlv_read_tag()\n\n- Logic is identical to sc_asn1_read_tag()\n- Fixes out of bounds access e.g. in cac_parse_CCC",
        "before_after_code_files": [
          "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c",
          "src/libopensc/errors.c||src/libopensc/errors.c",
          "src/libopensc/errors.h||src/libopensc/errors.h",
          "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c",
          "src/tools/util.c||src/tools/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c": [
          "File: src/libopensc/card-setcos.c -> src/libopensc/card-setcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:    break;",
          "",
          "[Removed Lines]",
          "791:   int iACLen   = buf[iOffset] & 0x0F;",
          "792:   if ((size_t) iACLen > len)",
          "",
          "[Added Lines]",
          "791:   size_t iACLen   = buf[iOffset] & 0x0F;",
          "792:   if (iACLen > len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:    if(iKeyLen) {",
          "811:     int iSC;",
          "813:      break;",
          "814:     iSC = buf[iOffset+iACLen];",
          "",
          "[Removed Lines]",
          "812:     if (len < 1+iACLen)",
          "",
          "[Added Lines]",
          "812:     if (len < 1+(size_t)iACLen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "834:      break;",
          "836:     iMethod = SC_AC_CHV;",
          "",
          "[Removed Lines]",
          "833:     if (len < 1+1+1+iParmLen)",
          "",
          "[Added Lines]",
          "833:     if (len < 1+1+1+(size_t)iParmLen)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:    if (buf[iOffset] & 0x20) {",
          "875:     int iSC;",
          "877:      break;",
          "878:     iSC = buf[iOffset + iACLen];",
          "",
          "[Removed Lines]",
          "876:     if (len < 1 + iACLen)",
          "",
          "[Added Lines]",
          "876:     if (len < 1 + (size_t)iACLen)",
          "",
          "---------------"
        ],
        "src/libopensc/errors.c||src/libopensc/errors.c": [
          "File: src/libopensc/errors.c -> src/libopensc/errors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   \"Unable to load external module\",",
          "105:   \"EF offset too large\",",
          "106:   \"Not implemented\"",
          "107:  };",
          "108:  const int int_base = -SC_ERROR_INTERNAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:   \"Invalid Simple TLV object\",",
          "108:   \"Premature end of Simple TLV stream\",",
          "",
          "---------------"
        ],
        "src/libopensc/errors.h||src/libopensc/errors.h": [
          "File: src/libopensc/errors.h -> src/libopensc/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define SC_ERROR_CANNOT_LOAD_MODULE  -1414",
          "96: #define SC_ERROR_OFFSET_TOO_LARGE  -1415",
          "97: #define SC_ERROR_NOT_IMPLEMENTED  -1416",
          "100: #define SC_ERROR_PKCS15INIT   -1500",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #define SC_ERROR_INVALID_TLV_OBJECT  -1417",
          "99: #define SC_ERROR_TLV_END_OF_CONTENTS -1418",
          "",
          "---------------"
        ],
        "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c": [
          "File: src/libopensc/simpletlv.c -> src/libopensc/simpletlv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int",
          "75: sc_simpletlv_read_tag(u8 **buf, size_t buflen, u8 *tag_out, size_t *taglen)",
          "76: {",
          "78:  u8 *p = *buf;",
          "83:  }",
          "87:  if (len == 0xff) {",
          "92:   }",
          "94:   len = lebytes2ushort(p);",
          "96:  }",
          "99:  return SC_SUCCESS;",
          "100: }",
          "",
          "[Removed Lines]",
          "77:  size_t len;",
          "80:  if (buflen < 2) {",
          "82:   return SC_ERROR_INVALID_ARGUMENTS;",
          "86:  len = *p++;",
          "89:   if (buflen < 4) {",
          "91:    return SC_ERROR_INVALID_ARGUMENTS;",
          "95:   p+=2;",
          "",
          "[Added Lines]",
          "77:  u8 tag;",
          "78:  size_t left = buflen, len;",
          "83:  if (left < 2) {",
          "84:   return SC_ERROR_INVALID_TLV_OBJECT;",
          "86:  tag = *p;",
          "87:  p++;",
          "88:  len = *p;",
          "89:  p++;",
          "90:  left -= 2;",
          "94:   if (left < 2) {",
          "95:    return SC_ERROR_INVALID_TLV_OBJECT;",
          "99:   p += 2;",
          "100:   left -= 2;",
          "107:  if (len > left)",
          "108:   return SC_ERROR_TLV_END_OF_CONTENTS;",
          "",
          "---------------"
        ],
        "src/tools/util.c||src/tools/util.c": [
          "File: src/tools/util.c -> src/tools/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <ctype.h>",
          "32: #include \"util.h\"",
          "33: #include \"ui/notify.h\"",
          "35: int",
          "36: is_string_valid_atr(const char *atr_str)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"common/compat_strlcat.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:    strcpy(buf, \"????\");",
          "340:    break;",
          "341:   }",
          "344:   e = e->next;",
          "345:  }",
          "",
          "[Removed Lines]",
          "342:   strncat(line, buf, sizeof line);",
          "343:   strncat(line, \" \", sizeof line);",
          "",
          "[Added Lines]",
          "343:   strlcat(line, buf, sizeof line);",
          "344:   strlcat(line, \" \", sizeof line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ec26573da7e6f21364d40c5c74962ef60a07000",
      "candidate_info": {
        "commit_hash": "5ec26573da7e6f21364d40c5c74962ef60a07000",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/5ec26573da7e6f21364d40c5c74962ef60a07000",
        "files": [
          "src/libopensc/card-coolkey.c"
        ],
        "message": "coolkey: Do not overflow allocated buffer",
        "before_after_code_files": [
          "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-coolkey.c||src/libopensc/card-coolkey.c": [
          "File: src/libopensc/card-coolkey.c -> src/libopensc/card-coolkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:  do {",
          "1130:   ulong2bebytes(&params.offset[0], offset);",
          "1131:   params.length = MIN(left, COOLKEY_MAX_CHUNK_SIZE);",
          "1133:   r = coolkey_apdu_io(card, COOLKEY_CLASS, COOLKEY_INS_READ_OBJECT, 0, 0,",
          "1134:    (u8 *)&params, sizeof(params), &out_ptr, &len, nonce, nonce_size);",
          "1135:   if (r < 0) {",
          "",
          "[Removed Lines]",
          "1132:   len = left+2;",
          "",
          "[Added Lines]",
          "1132:   len = left;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50b000047c44b1f2c6f0134094c19519d512e5b6",
      "candidate_info": {
        "commit_hash": "50b000047c44b1f2c6f0134094c19519d512e5b6",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/50b000047c44b1f2c6f0134094c19519d512e5b6",
        "files": [
          "src/libopensc/card-iasecc.c"
        ],
        "message": "ias/ecc: disable iccsn parsing\n\nif someone wants to implement this with memory bounds checking, please\nraise your hands",
        "before_after_code_files": [
          "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c"
          ],
          "candidate": [
            "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-iasecc.c||src/libopensc/card-iasecc.c": [
          "File: src/libopensc/card-iasecc.c -> src/libopensc/card-iasecc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: static int",
          "2505: iasecc_get_serialnr(struct sc_card *card, struct sc_serial_number *serial)",
          "2506: {",
          "2507:  struct sc_context *ctx = card->ctx;",
          "2508:  struct sc_iin *iin = &card->serialnr.iin;",
          "2509:  struct sc_apdu apdu;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2507: #if 1",
          "2511:  LOG_FUNC_RETURN(card->ctx, SC_ERROR_NOT_SUPPORTED);",
          "2512: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2573:   memcpy(serial, &card->serialnr, sizeof(*serial));",
          "2575:  LOG_FUNC_RETURN(ctx, SC_SUCCESS);",
          "2576: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2582: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
      "candidate_info": {
        "commit_hash": "5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/5807368ed44a6feb78e6107eaa2f337d474a8d36",
        "files": [
          "src/libopensc/card-cac.c"
        ],
        "message": "fixed bad memory access",
        "before_after_code_files": [
          "src/libopensc/card-cac.c||src/libopensc/card-cac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
          "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:  }",
          "1391:  sc_mem_clear(path, sizeof(sc_path_t));",
          "1392:  memcpy(path->aid.value, &val->rid, sizeof(val->rid));",
          "1394:  path->aid.len = sizeof(val->rid) + sizeof(val->applicationID);",
          "1396:  path->len = sizeof(val->objectID);",
          "1397:  path->type = SC_PATH_TYPE_FILE_ID;",
          "1398:  sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE,",
          "",
          "[Removed Lines]",
          "1393:  memcpy(&path->aid.value[5], &val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, &val->objectID, sizeof(val->objectID));",
          "",
          "[Added Lines]",
          "1393:  memcpy(&path->aid.value[5], val->applicationID, sizeof(val->applicationID));",
          "1395:  memcpy(path->value, val->objectID, sizeof(val->objectID));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
      "candidate_info": {
        "commit_hash": "92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/92a98cb3bb1719b0100b033aae1c3c1f2679e7c8",
        "files": [
          "src/libopensc/card-mcrd.c"
        ],
        "message": "mcrd: converted assert to proper error handling",
        "before_after_code_files": [
          "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/1447"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card-mcrd.c||src/libopensc/card-mcrd.c": [
          "File: src/libopensc/card-mcrd.c -> src/libopensc/card-mcrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  struct mcrd_priv_data *priv = DRVDATA(card);",
          "150:  struct df_info_s *dfi;",
          "154:  if (!priv->curpathlen) {",
          "155:   sc_log(ctx, \"no current path to find the df_info\\n\");",
          "",
          "[Removed Lines]",
          "152:  assert(!priv->is_ef);",
          "",
          "[Added Lines]",
          "152:  if(!(!priv->is_ef))",
          "153:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  int r;",
          "203:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "206:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xA4);",
          "208:  sbuf[0] = 0x83;",
          "",
          "[Removed Lines]",
          "205:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "206:  if(!(card != NULL))",
          "207:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  sc_apdu_t apdu;",
          "221:  int r;",
          "222:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "225:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB6);",
          "",
          "[Removed Lines]",
          "223:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "225:  if(!(card != NULL))",
          "226:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:  int r;",
          "243:  u8 sbuf[SC_MAX_APDU_BUFFER_SIZE];",
          "244:  u8 keyref_data[SC_ESTEID_KEYREF_FILE_RECLEN];",
          "247:  sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x22, 0x41, 0xB8);",
          "",
          "[Removed Lines]",
          "245:  assert(card != NULL);",
          "",
          "[Added Lines]",
          "248:  if(!(card != NULL))",
          "249:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "957:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "961:  if (pathlen && *pathptr == 0x3FFF) {",
          "962:   pathlen--;",
          "",
          "[Removed Lines]",
          "959:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "963:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "964:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998:        we need to get the FCI, so we have",
          "1001:     priv->curpathlen--;",
          "1002:     priv->is_ef = 0;",
          "1003:     r = select_down(card, pathptr + pathlen - 1, 1,",
          "",
          "[Removed Lines]",
          "1000:     assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1005:     if (!(priv->curpathlen > 1))",
          "1006:      return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1022:    priv->is_ef = 0;",
          "1023:   }",
          "1024:   if (priv->is_ef) {",
          "1026:    priv->curpathlen--;",
          "1027:    priv->is_ef = 0;",
          "1028:   }",
          "",
          "[Removed Lines]",
          "1025:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1031:    if(!(priv->curpathlen > 1))",
          "1032:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1041:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",
          "1045:  if (pathlen > 1)",
          "1046:   return SC_ERROR_INVALID_ARGUMENTS;",
          "",
          "[Removed Lines]",
          "1043:  assert(!priv->curpathlen || priv->curpath[0] == MFID);",
          "",
          "[Added Lines]",
          "1050:  if (!(!priv->curpathlen || priv->curpath[0] == MFID))",
          "1051:   return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1057:    r = SC_ERROR_INTERNAL;",
          "1058:   } else {",
          "1060:    priv->curpathlen--;",
          "1061:    priv->is_ef = 0;",
          "1062:    r = select_down(card, pathptr, 1, 0, file);",
          "",
          "[Removed Lines]",
          "1059:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1067:    if (!(priv->curpathlen > 1))",
          "1068:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1081:    priv->is_ef = 0;",
          "1082:   }",
          "1083:   if (priv->is_ef) {",
          "1085:    priv->curpathlen--;",
          "1086:    priv->is_ef = 0;",
          "1087:   }",
          "",
          "[Removed Lines]",
          "1084:    assert(priv->curpathlen > 1);",
          "",
          "[Added Lines]",
          "1093:    if (!(priv->curpathlen > 1))",
          "1094:     return SC_ERROR_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1209:  u8 *p;",
          "1210:  int r, locked = 0;",
          "1213:  SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_NORMAL);",
          "",
          "[Removed Lines]",
          "1212:  assert(card != NULL && env != NULL);",
          "",
          "[Added Lines]",
          "1222:  if (!(card != NULL && env != NULL))",
          "1223:   return SC_ERROR_INTERNAL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}