{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
      "candidate_info": {
        "commit_hash": "1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a39d2bb5cb1a72f5e91aaabfd94fc0e9759bf82",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Handle SQL NULL values without crashing in the fts5 snippet() and highlight() functions.\n\nFossilOrigin-Name: a5e9cc794f17566160c4b2b5791601a744a21ace987b19ff8a5816fd78dce56a",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   HighlightContext *p,",
          "137:   const char *z, int n",
          "138: ){",
          "140:     if( n<0 ) n = (int)strlen(z);",
          "141:     p->zOut = sqlite3_mprintf(\"%z%.*s\", p->zOut, n, z);",
          "142:     if( p->zOut==0 ) *pRc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "139:   if( *pRc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "139:   if( *pRc==SQLITE_OK && z ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5ak.test||ext/fts5/test/fts5ak.test": [
          "File: ext/fts5/test/fts5ak.test -> ext/fts5/test/fts5ak.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   {[a b c d e]}",
          "145: }",
          "147: }",
          "149: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: do_execsql_test 3.2 {",
          "148:   SELECT highlight(ft, 0, NULL, NULL) FROM ft WHERE ft MATCH 'a+b+c AND c+d+e';",
          "149: } {",
          "150:   {a b c x c d e}",
          "151:   {a b c c d e}",
          "152:   {a b c d e}",
          "153: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e54efd60c20bbfc5d70ddb9e1dd6ffb68cbbcfa57b4f07cb104767ef08c1a559",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
      "candidate_info": {
        "commit_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Revert the OP_MustBeInt opcode implementation on this branch so that it again matches trunk. The extra functionality is no longer required.\n\nFossilOrigin-Name: c02f77b1b4d025d4243f883d6f3a2b3abcaf4944e0209f641b62c576415343dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98cc26598718e5557ee00aa77336024c91e483ec6de650e172ad1b44a6f0a77b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:   break;",
          "1724: }",
          "1740:   pIn1 = &aMem[pOp->p1];",
          "1742:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1745:       if( pOp->p2==0 ){",
          "1746:         rc = SQLITE_MISMATCH;",
          "1747:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1738:   u8 f;",
          "1739:   f = (pOp->p5 ? (MEM_Int|MEM_Real) : MEM_Int);",
          "1741:   if( (pIn1->flags & f)==0 ){",
          "1743:     VdbeBranchTaken((pIn1->flags&f)==0, 2);",
          "1744:     if( (pIn1->flags & f)==0 ){",
          "",
          "[Added Lines]",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1750:       }",
          "1751:     }",
          "1752:   }",
          "1754:   break;",
          "1755: }",
          "",
          "[Removed Lines]",
          "1753:   if( f==MEM_Int ) MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "[Added Lines]",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:   int regZero = sqlite3GetTempReg(pParse);",
          "1303:   assert( eCond>=0 && eCond<ArraySize(azErr) );",
          "1304:   sqlite3VdbeAddOp2(v, OP_Integer, 0, regZero);",
          "1307:   VdbeCoverageIf(v, eCond==0);",
          "1308:   VdbeCoverageIf(v, eCond==1);",
          "1309:   VdbeCoverageIf(v, eCond==2);",
          "",
          "[Removed Lines]",
          "1305:   sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1306:   if( eCond>=WINDOW_STARTING_NUM ) sqlite3VdbeChangeP5(v, 1);",
          "",
          "[Added Lines]",
          "1305:   if( eCond>=WINDOW_STARTING_NUM ){",
          "1306:     int regString = sqlite3GetTempReg(pParse);",
          "1307:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1308:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1309:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1310:   }else{",
          "1311:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1312:   }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:   FROM keyword_tab",
          "939: }",
          "941: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941: #-------------------------------------------------------------------------",
          "942: foreach {tn expr err} {",
          "943:   1   4.5      0",
          "944:   2   NULL     1",
          "945:   3   0.0      0",
          "946:   4   0.1      0",
          "947:   5  -0.1      1",
          "948:   6  ''        1",
          "949:   7  '2.0'     0",
          "950:   8  '2.0x'    1",
          "951:   9  x'1234'   1",
          "952:  10  '1.2'     0",
          "953: } {",
          "954:   set res {0 1}",
          "955:   if {$err} {set res {1 {frame starting offset must be a non-negative number}} }",
          "956:   do_catchsql_test 22.$tn.1 \"",
          "957:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "958:     SELECT sum(x) OVER (",
          "959:       ORDER BY y RANGE BETWEEN $expr PRECEDING AND UNBOUNDED FOLLOWING",
          "960:     ) FROM a",
          "961:   \" $res",
          "963:   set res {0 1}",
          "964:   if {$err} {set res {1 {frame ending offset must be a non-negative number}} }",
          "965:   do_catchsql_test 22.$tn.2 \"",
          "966:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "967:     SELECT sum(x) OVER (",
          "968:       ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND $expr FOLLOWING",
          "969:     ) FROM a",
          "970:   \" $res",
          "971: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
      "candidate_info": {
        "commit_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c"
        ],
        "message": "Move the sqlite3LocateCollSeq(), sqlite3FindCollSeq(), and sqlite3GetCollSeq() routines so that they are all beside one another in the callback.c source file.  No logic changes.\n\nFossilOrigin-Name: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "1543: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1544:   sqlite3 *db = pParse->db;",
          "1545:   u8 enc = ENC(db);",
          "1546:   u8 initbusy = db->init.busy;",
          "1547:   CollSeq *pColl;",
          "1549:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1550:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1551:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1552:   }",
          "1554:   return pColl;",
          "1555: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc1be957c11718c28a107e5c9c6df2d72d55b57c",
      "candidate_info": {
        "commit_hash": "bc1be957c11718c28a107e5c9c6df2d72d55b57c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc1be957c11718c28a107e5c9c6df2d72d55b57c",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the Makefile so that it honors CFLAGS when building sessionfuzz.\n\nFossilOrigin-Name: 54231ac4ca506e6c34c31bc02bb8d3db22f14e1b01679bc70529b165d7dabb83",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:              $(TOP)/test/ossfuzz.c sqlite3.c $(TLIBS)",
          "671: sessionfuzz$(TEXE): $(TOP)/test/sessionfuzz.c sqlite3.c sqlite3.h",
          "674: dbfuzz$(TEXE): $(TOP)/test/dbfuzz.c sqlite3.c sqlite3.h",
          "675:  $(LTLINK) -o $@ $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c $(TLIBS)",
          "",
          "[Removed Lines]",
          "672:  $(CC) $(CFLAGS) -I. -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "[Added Lines]",
          "672:  $(LTLINK) -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b690dbdffe144bd69ca0aa291c230faf3d9d73f7a2985d50f016fe54003f9a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91f473b5cc179b8bfa6521ff339665754a15462a",
      "candidate_info": {
        "commit_hash": "91f473b5cc179b8bfa6521ff339665754a15462a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91f473b5cc179b8bfa6521ff339665754a15462a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Do not attempt the LIKE optimization for non-text columns and a pattern prefix of \"-\".  Ticket [0f0428096f17252a]\n\nFossilOrigin-Name: 6fe0367f9a337b7c62886b7771f3ce0642faa13f4e4f3d9a0c848abbab514cd0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f06ef3d75d85545dd58c6dda10f7ad04fafbb7ae8706b3821be21f86a94795f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:           double rDummy;",
          "294:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "295:           if( isNum<=0 ){",
          "299:           }",
          "300:           if( isNum>0 ){",
          "301:             sqlite3ExprDelete(db, pPrefix);",
          "",
          "[Removed Lines]",
          "296:             zNew[iTo-1]++;",
          "297:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "298:             zNew[iTo-1]--;",
          "",
          "[Added Lines]",
          "297:             if( iTo==1 && zNew[0]=='-' ){",
          "298:               isNum = +1;",
          "299:             }else{",
          "300:               zNew[iTo-1]++;",
          "301:               isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "302:               zNew[iTo-1]--;",
          "303:             }",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "211: # 2019-02-27",
          "212: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: # 2019-09-03",
          "211: # Ticket https://www.sqlite.org/src/info/0f0428096f",
          "212: do_execsql_test like3-5.420 {",
          "213:   DROP TABLE IF EXISTS t0;",
          "214:   CREATE TABLE t0(c0 UNIQUE);",
          "215:   INSERT INTO t0(c0) VALUES(-1);",
          "216:   SELECT * FROM t0 WHERE t0.c0 GLOB '-*';",
          "217: } {-1}",
          "218: do_execsql_test like3-5.421 {",
          "219:   SELECT t0.c0 GLOB '-*' FROM t0;",
          "220: } {1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}