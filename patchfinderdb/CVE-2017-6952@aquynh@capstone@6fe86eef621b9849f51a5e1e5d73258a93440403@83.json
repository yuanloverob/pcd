{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d09f56545c74b875e557cfc60cfc7076e0dc4962",
      "candidate_info": {
        "commit_hash": "d09f56545c74b875e557cfc60cfc7076e0dc4962",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/d09f56545c74b875e557cfc60cfc7076e0dc4962",
        "files": [
          "arch/X86/X86DisassemblerDecoder.c"
        ],
        "message": "fix merged conflicts",
        "before_after_code_files": [
          "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c": [
          "File: arch/X86/X86DisassemblerDecoder.c -> arch/X86/X86DisassemblerDecoder.c"
        ]
      }
    },
    {
      "candidate_hash": "cffb61e89299513c88d203bc0118a47424944c98",
      "candidate_info": {
        "commit_hash": "cffb61e89299513c88d203bc0118a47424944c98",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/cffb61e89299513c88d203bc0118a47424944c98",
        "files": [
          "arch/X86/X86MappingInsnOp.inc"
        ],
        "message": "Fix register access for 16-bit mov instructions",
        "before_after_code_files": [
          "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc": [
          "File: arch/X86/X86MappingInsnOp.inc -> arch/X86/X86MappingInsnOp.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5851: },",
          "5853:  0,",
          "5855: },",
          "5857:  0,",
          "5859: },",
          "5861:  0,",
          "",
          "[Removed Lines]",
          "5854:  { CS_AC_IGNORE, CS_AC_READ, 0 }",
          "5858:  { CS_AC_IGNORE, CS_AC_READ, 0 }",
          "",
          "[Added Lines]",
          "5854:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "5858:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a19fd659749310b45eb6b32c79a910d87559bb68",
      "candidate_info": {
        "commit_hash": "a19fd659749310b45eb6b32c79a910d87559bb68",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a19fd659749310b45eb6b32c79a910d87559bb68",
        "files": [
          "tests/test_arm.c",
          "tests/test_mips.c",
          "tests/test_ppc.c"
        ],
        "message": "Fixed trivial (all) compiler warnings\n\nSome enumeration compares were using the wrong (but in this case\nharmless) enumeration in the test suite. Replaced to make the compiler\nhappy.",
        "before_after_code_files": [
          "tests/test_arm.c||tests/test_arm.c",
          "tests/test_mips.c||tests/test_mips.c",
          "tests/test_ppc.c||tests/test_ppc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     break;",
          "63:    case ARM_OP_MEM:",
          "64:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "66:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "67:        i, cs_reg_name(handle, op->mem.base));",
          "69:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "70:        i, cs_reg_name(handle, op->mem.index));",
          "71:     if (op->mem.scale != 1)",
          "",
          "[Removed Lines]",
          "65:     if (op->mem.base != X86_REG_INVALID)",
          "68:     if (op->mem.index != X86_REG_INVALID)",
          "",
          "[Added Lines]",
          "65:     if (op->mem.base != ARM_REG_INVALID)",
          "68:     if (op->mem.index != ARM_REG_INVALID)",
          "",
          "---------------"
        ],
        "tests/test_mips.c||tests/test_mips.c": [
          "File: tests/test_mips.c -> tests/test_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     break;",
          "56:    case MIPS_OP_MEM:",
          "57:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "59:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "60:        i, cs_reg_name(handle, op->mem.base));",
          "61:     if (op->mem.disp != 0)",
          "",
          "[Removed Lines]",
          "58:     if (op->mem.base != X86_REG_INVALID)",
          "",
          "[Added Lines]",
          "58:     if (op->mem.base != MIPS_REG_INVALID)",
          "",
          "---------------"
        ],
        "tests/test_ppc.c||tests/test_ppc.c": [
          "File: tests/test_ppc.c -> tests/test_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     break;",
          "84:    case PPC_OP_MEM:",
          "85:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "87:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "88:        i, cs_reg_name(handle, op->mem.base));",
          "89:     if (op->mem.disp != 0)",
          "",
          "[Removed Lines]",
          "86:     if (op->mem.base != X86_REG_INVALID)",
          "",
          "[Added Lines]",
          "86:     if (op->mem.base != PPC_REG_INVALID)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8998a3a1d5efd7f4f641fac2a54cd427dec270d1",
      "candidate_info": {
        "commit_hash": "8998a3a1d5efd7f4f641fac2a54cd427dec270d1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8998a3a1d5efd7f4f641fac2a54cd427dec270d1",
        "files": [
          ".travis.yml",
          "arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64Module.c",
          "arch/ARM/ARMDisassembler.c",
          "arch/ARM/ARMModule.c",
          "arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c",
          "arch/PowerPC/PPCDisassembler.c",
          "arch/PowerPC/PPCModule.c",
          "arch/Sparc/SparcModule.c",
          "arch/SystemZ/SystemZModule.c",
          "arch/X86/X86Module.c",
          "arch/XCore/XCoreModule.c",
          "cs.c",
          "cs_priv.h"
        ],
        "message": "ppc: fix endian check (#1029)\n\n* Remove `big_endian` field of `cs_struct`\n\nAdded a helper macro `MODE_IS_BIG_ENDIAN()` to check if\n`CS_MODE_BIG_ENDIAN` is set.\n\nRefactored `cs_open()` check for valid mode out of arch-specific code\ninto arch-independent code. Also added a valid mode check to\n`cs_option()`.  The checks use a new global array\n`arch_disallowed_mode_mask[]`, which is initialized in the arch-specific\n`*_enable()` functions.\n\nFixes bug where endianness could not be set for ppc.\n\n* Fix Mac OS brew for Travis CI",
        "before_after_code_files": [
          "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64Module.c||arch/AArch64/AArch64Module.c",
          "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c",
          "arch/ARM/ARMModule.c||arch/ARM/ARMModule.c",
          "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c",
          "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c",
          "arch/PowerPC/PPCDisassembler.c||arch/PowerPC/PPCDisassembler.c",
          "arch/PowerPC/PPCModule.c||arch/PowerPC/PPCModule.c",
          "arch/Sparc/SparcModule.c||arch/Sparc/SparcModule.c",
          "arch/SystemZ/SystemZModule.c||arch/SystemZ/SystemZModule.c",
          "arch/X86/X86Module.c||arch/X86/X86Module.c",
          "arch/XCore/XCoreModule.c||arch/XCore/XCoreModule.c",
          "cs.c||cs.c",
          "cs_priv.h||cs_priv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c": [
          "File: arch/AArch64/AArch64Disassembler.c -> arch/AArch64/AArch64Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:    MI->flat_insn->detail->arm64.operands[i].vector_index = -1;",
          "239:  }",
          "242:   insn = (code[3] << 0) | (code[2] << 8) |",
          "243:    (code[1] <<  16) | (code[0] <<  24);",
          "244:  else",
          "",
          "[Removed Lines]",
          "241:  if (ud->big_endian)",
          "",
          "[Added Lines]",
          "241:  if (MODE_IS_BIG_ENDIAN(ud->mode))",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64Module.c||arch/AArch64/AArch64Module.c": [
          "File: arch/AArch64/AArch64Module.c -> arch/AArch64/AArch64Module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "20:  mri = cs_mem_malloc(sizeof(*mri));",
          "22:  AArch64_init(mri);",
          "",
          "[Removed Lines]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_ARM | CS_MODE_BIG_ENDIAN))",
          "18:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: static cs_err option(cs_struct *handle, cs_opt_type type, size_t value)",
          "37: {",
          "38:  if (type == CS_OPT_MODE) {",
          "40:  }",
          "42:  return CS_ERR_OK;",
          "",
          "[Removed Lines]",
          "39:   handle->big_endian = (((cs_mode)value & CS_MODE_BIG_ENDIAN) != 0);",
          "",
          "[Added Lines]",
          "34:   handle->mode = (cs_mode)value;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:  arch_init[CS_ARCH_ARM64] = init;",
          "52:  arch_option[CS_ARCH_ARM64] = option;",
          "53:  arch_destroy[CS_ARCH_ARM64] = destroy;",
          "56:  all_arch |= (1 << CS_ARCH_ARM64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:  arch_disallowed_mode_mask[CS_ARCH_ARM64] = ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_ARM | CS_MODE_BIG_ENDIAN);",
          "",
          "---------------"
        ],
        "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c": [
          "File: arch/ARM/ARMDisassembler.c -> arch/ARM/ARMDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:  memcpy(bytes, code, 4);",
          "466:   insn = (bytes[3] << 0) |",
          "467:    (bytes[2] << 8) |",
          "468:    (bytes[1] <<  16) |",
          "",
          "[Removed Lines]",
          "465:  if (ud->big_endian)",
          "",
          "[Added Lines]",
          "465:  if (MODE_IS_BIG_ENDIAN(ud->mode))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705:  memcpy(bytes, code, 2);",
          "708:   insn16 = (bytes[0] << 8) | bytes[1];",
          "709:  else",
          "710:   insn16 = (bytes[1] << 8) | bytes[0];",
          "",
          "[Removed Lines]",
          "707:  if (ud->big_endian)",
          "",
          "[Added Lines]",
          "707:  if (MODE_IS_BIG_ENDIAN(ud->mode))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:  memcpy(bytes, code, 4);",
          "761:   insn32 = (bytes[3] <<  0) |",
          "762:    (bytes[2] <<  8) |",
          "763:    (bytes[1] << 16) |",
          "",
          "[Removed Lines]",
          "760:  if (ud->big_endian)",
          "",
          "[Added Lines]",
          "760:  if (MODE_IS_BIG_ENDIAN(ud->mode))",
          "",
          "---------------"
        ],
        "arch/ARM/ARMModule.c||arch/ARM/ARMModule.c": [
          "File: arch/ARM/ARMModule.c -> arch/ARM/ARMModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "21:  mri = cs_mem_malloc(sizeof(*mri));",
          "23:  ARM_init(mri);",
          "",
          "[Removed Lines]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_ARM | CS_MODE_V8 |",
          "18:     CS_MODE_MCLASS | CS_MODE_THUMB | CS_MODE_BIG_ENDIAN))",
          "19:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     handle->disasm = ARM_getInstruction;",
          "51:    handle->mode = (cs_mode)value;",
          "54:    break;",
          "55:   case CS_OPT_SYNTAX:",
          "",
          "[Removed Lines]",
          "52:    handle->big_endian = ((handle->mode & CS_MODE_BIG_ENDIAN) != 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:  arch_init[CS_ARCH_ARM] = init;",
          "73:  arch_option[CS_ARCH_ARM] = option;",
          "74:  arch_destroy[CS_ARCH_ARM] = destroy;",
          "77:  all_arch |= (1 << CS_ARCH_ARM);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  arch_disallowed_mode_mask[CS_ARCH_ARM] = ~(CS_MODE_LITTLE_ENDIAN |",
          "69:   CS_MODE_ARM | CS_MODE_V8 | CS_MODE_MCLASS | CS_MODE_THUMB |",
          "70:   CS_MODE_BIG_ENDIAN);",
          "",
          "---------------"
        ],
        "arch/Mips/MipsDisassembler.c||arch/Mips/MipsDisassembler.c": [
          "File: arch/Mips/MipsDisassembler.c -> arch/Mips/MipsDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:  DecodeStatus status = MipsDisassembler_getInstruction(handle->mode, instr,",
          "399:    code, code_len,",
          "400:    size,",
          "403:  return status == MCDisassembler_Success;",
          "404: }",
          "",
          "[Removed Lines]",
          "401:    address, handle->big_endian, (MCRegisterInfo *)info);",
          "",
          "[Added Lines]",
          "401:    address, MODE_IS_BIG_ENDIAN(handle->mode), (MCRegisterInfo *)info);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:  cs_struct *handle = (cs_struct *)(uintptr_t)ud;",
          "452:  DecodeStatus status = Mips64Disassembler_getInstruction(handle->mode, instr,",
          "457:  return status == MCDisassembler_Success;",
          "458: }",
          "",
          "[Removed Lines]",
          "453:    code, code_len,",
          "454:    size,",
          "455:    address, handle->big_endian, (MCRegisterInfo *)info);",
          "",
          "[Added Lines]",
          "453:    code, code_len, size, address,",
          "454:    MODE_IS_BIG_ENDIAN(handle->mode), (MCRegisterInfo *)info);",
          "",
          "---------------"
        ],
        "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c": [
          "File: arch/Mips/MipsModule.c -> arch/Mips/MipsModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static cs_err init(cs_struct *ud)",
          "23: {",
          "24:  MCRegisterInfo *mri;",
          "32:  mri = cs_mem_malloc(sizeof(*mri));",
          "34:  Mips_init(mri);",
          "",
          "[Removed Lines]",
          "27:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_32 | CS_MODE_64 |",
          "28:     CS_MODE_MICRO | CS_MODE_MIPS32R6 |",
          "29:     CS_MODE_MIPSGP64 | CS_MODE_BIG_ENDIAN))",
          "30:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:    handle->disasm = Mips64_getInstruction;",
          "61:   handle->mode = (cs_mode)value;",
          "63:  }",
          "64:  return CS_ERR_OK;",
          "65: }",
          "",
          "[Removed Lines]",
          "62:   handle->big_endian = ((handle->mode & CS_MODE_BIG_ENDIAN) != 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:  arch_init[CS_ARCH_MIPS] = init;",
          "74:  arch_option[CS_ARCH_MIPS] = option;",
          "75:  arch_destroy[CS_ARCH_MIPS] = destroy;",
          "78:  all_arch |= (1 << CS_ARCH_MIPS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  arch_disallowed_mode_mask[CS_ARCH_MIPS] = ~(CS_MODE_LITTLE_ENDIAN |",
          "69:   CS_MODE_32 | CS_MODE_64 | CS_MODE_MICRO | CS_MODE_MIPS32R6 |",
          "70:   CS_MODE_MIPSGP64 | CS_MODE_BIG_ENDIAN);",
          "",
          "---------------"
        ],
        "arch/PowerPC/PPCDisassembler.c||arch/PowerPC/PPCDisassembler.c": [
          "File: arch/PowerPC/PPCDisassembler.c -> arch/PowerPC/PPCDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:  }",
          "346:   insn = (code[0] << 24) | (code[1] << 16) |",
          "347:    (code[2] <<  8) | (code[3] <<  0);",
          "348:  else",
          "",
          "[Removed Lines]",
          "345:  if (MI->csh->mode & CS_MODE_BIG_ENDIAN)",
          "",
          "[Added Lines]",
          "345:  if (MODE_IS_BIG_ENDIAN(MI->csh->mode))",
          "",
          "---------------"
        ],
        "arch/PowerPC/PPCModule.c||arch/PowerPC/PPCModule.c": [
          "File: arch/PowerPC/PPCModule.c -> arch/PowerPC/PPCModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "21:  mri = (MCRegisterInfo *) cs_mem_malloc(sizeof(*mri));",
          "23:  PPC_init(mri);",
          "",
          "[Removed Lines]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_32 | CS_MODE_64 |",
          "18:     CS_MODE_BIG_ENDIAN))",
          "19:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   handle->syntax = (int) value;",
          "43:  if (type == CS_OPT_MODE) {",
          "45:  }",
          "47:  return CS_ERR_OK;",
          "",
          "[Removed Lines]",
          "44:   handle->big_endian = (((cs_mode)value & CS_MODE_BIG_ENDIAN) != 0);",
          "",
          "[Added Lines]",
          "38:   handle->mode = (cs_mode)value;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:  arch_init[CS_ARCH_PPC] = init;",
          "57:  arch_option[CS_ARCH_PPC] = option;",
          "58:  arch_destroy[CS_ARCH_PPC] = destroy;",
          "61:  all_arch |= (1 << CS_ARCH_PPC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  arch_disallowed_mode_mask[CS_ARCH_PPC] = ~(CS_MODE_LITTLE_ENDIAN |",
          "54:   CS_MODE_32 | CS_MODE_64 | CS_MODE_BIG_ENDIAN);",
          "",
          "---------------"
        ],
        "arch/Sparc/SparcModule.c||arch/Sparc/SparcModule.c": [
          "File: arch/Sparc/SparcModule.c -> arch/Sparc/SparcModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "20:  mri = cs_mem_malloc(sizeof(*mri));",
          "22:  Sparc_init(mri);",
          "",
          "[Removed Lines]",
          "17:  if (ud->mode & ~(CS_MODE_BIG_ENDIAN | CS_MODE_V9))",
          "18:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   handle->syntax = (int) value;",
          "42:  if (type == CS_OPT_MODE) {",
          "44:  }",
          "46:  return CS_ERR_OK;",
          "",
          "[Removed Lines]",
          "43:   handle->big_endian = (((cs_mode)value & CS_MODE_BIG_ENDIAN) != 0);",
          "",
          "[Added Lines]",
          "38:   handle->mode = (cs_mode)value;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:  arch_init[CS_ARCH_SPARC] = init;",
          "56:  arch_option[CS_ARCH_SPARC] = option;",
          "57:  arch_destroy[CS_ARCH_SPARC] = destroy;",
          "60:  all_arch |= (1 << CS_ARCH_SPARC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  arch_disallowed_mode_mask[CS_ARCH_SPARC] =",
          "54:   ~(CS_MODE_BIG_ENDIAN | CS_MODE_V9);",
          "",
          "---------------"
        ],
        "arch/SystemZ/SystemZModule.c||arch/SystemZ/SystemZModule.c": [
          "File: arch/SystemZ/SystemZModule.c -> arch/SystemZ/SystemZModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  arch_init[CS_ARCH_SYSZ] = init;",
          "48:  arch_option[CS_ARCH_SYSZ] = option;",
          "49:  arch_destroy[CS_ARCH_SYSZ] = destroy;",
          "52:  all_arch |= (1 << CS_ARCH_SYSZ);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  arch_disallowed_mode_mask[CS_ARCH_SYSZ] = ~CS_MODE_BIG_ENDIAN;",
          "",
          "---------------"
        ],
        "arch/X86/X86Module.c||arch/X86/X86Module.c": [
          "File: arch/X86/X86Module.c -> arch/X86/X86Module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "20:  mri = cs_mem_malloc(sizeof(*mri));",
          "22:  X86_init(mri);",
          "",
          "[Removed Lines]",
          "17:  if (ud->mode & ~(CS_MODE_LITTLE_ENDIAN | CS_MODE_32 | CS_MODE_64 | CS_MODE_16))",
          "18:   return CS_ERR_MODE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  arch_init[CS_ARCH_X86] = init;",
          "97:  arch_option[CS_ARCH_X86] = option;",
          "98:  arch_destroy[CS_ARCH_X86] = destroy;",
          "101:  all_arch |= (1 << CS_ARCH_X86);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  arch_disallowed_mode_mask[CS_ARCH_X86] = ~(CS_MODE_LITTLE_ENDIAN |",
          "95:   CS_MODE_32 | CS_MODE_64 | CS_MODE_16);",
          "",
          "---------------"
        ],
        "arch/XCore/XCoreModule.c||arch/XCore/XCoreModule.c": [
          "File: arch/XCore/XCoreModule.c -> arch/XCore/XCoreModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  arch_init[CS_ARCH_XCORE] = init;",
          "45:  arch_option[CS_ARCH_XCORE] = option;",
          "46:  arch_destroy[CS_ARCH_XCORE] = destroy;",
          "49:  all_arch |= (1 << CS_ARCH_XCORE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:  arch_disallowed_mode_mask[CS_ARCH_XCORE] = ~CS_MODE_BIG_ENDIAN;",
          "",
          "---------------"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: cs_err (*arch_init[MAX_ARCH])(cs_struct *) = { NULL };",
          "55: cs_err (*arch_option[MAX_ARCH]) (cs_struct *, cs_opt_type, size_t value) = { NULL };",
          "56: void (*arch_destroy[MAX_ARCH]) (cs_struct *) = { NULL };",
          "58: extern void ARM_enable(void);",
          "59: extern void AArch64_enable(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: cs_mode arch_disallowed_mode_mask[MAX_ARCH] = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:  archs_enable();",
          "246:  if (arch < CS_ARCH_MAX && arch_init[arch]) {",
          "247:   ud = cs_mem_calloc(1, sizeof(*ud));",
          "248:   if (!ud) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   if (mode & arch_disallowed_mode_mask[arch]) {",
          "251:    return CS_ERR_MODE;",
          "252:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253:   ud->errnum = CS_ERR_OK;",
          "254:   ud->arch = arch;",
          "255:   ud->mode = mode;",
          "258:   ud->detail = CS_OPT_OFF;",
          "",
          "[Removed Lines]",
          "256:   ud->big_endian = (mode & CS_MODE_BIG_ENDIAN) != 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "429:    if (value)",
          "430:     handle->skipdata_setup = *((cs_opt_skipdata *)value);",
          "431:    return CS_ERR_OK;",
          "432:  }",
          "434:  return arch_option[handle->arch](handle, type, value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   case CS_OPT_MODE:",
          "440:    if (value & arch_disallowed_mode_mask[handle->arch]) {",
          "441:     return CS_ERR_OPTION;",
          "442:    }",
          "443:    break;",
          "",
          "---------------"
        ],
        "cs_priv.h||cs_priv.h": [
          "File: cs_priv.h -> cs_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  void *printer_info; // aux info for printer",
          "38:  Disasm_t disasm; // disassembler",
          "39:  void *getinsn_info; // auxiliary info for printer",
          "41:  GetName_t reg_name;",
          "42:  GetName_t insn_name;",
          "43:  GetName_t group_name;",
          "",
          "[Removed Lines]",
          "40:  bool big_endian;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: #define MAX_ARCH 8",
          "62: extern cs_err (*arch_init[MAX_ARCH]) (cs_struct *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #define MODE_IS_BIG_ENDIAN(mode) (((mode) & CS_MODE_BIG_ENDIAN) != 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: extern void (*arch_destroy[MAX_ARCH]) (cs_struct*);",
          "70: extern unsigned int all_arch;",
          "72: extern cs_malloc_t cs_mem_malloc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: extern cs_mode arch_disallowed_mode_mask[MAX_ARCH];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da38d99d51b81452a6d53d06d08439add3bc82e6",
      "candidate_info": {
        "commit_hash": "da38d99d51b81452a6d53d06d08439add3bc82e6",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/da38d99d51b81452a6d53d06d08439add3bc82e6",
        "files": [
          "arch/ARM/ARMDisassembler.c"
        ],
        "message": "Use the correct mapping for 32-bit Thumb Big-Endian insns",
        "before_after_code_files": [
          "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c": [
          "File: arch/ARM/ARMDisassembler.c -> arch/ARM/ARMDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:  memcpy(bytes, code, 4);",
          "760:  if (ud->big_endian)",
          "765:  else",
          "766:   insn32 = (bytes[3] <<  8) |",
          "767:    (bytes[2] <<  0) |",
          "",
          "[Removed Lines]",
          "761:   insn32 = (bytes[3] <<  24) |",
          "762:    (bytes[2] <<  16) |",
          "763:    (bytes[1] << 8) |",
          "764:    (bytes[0] << 0);",
          "",
          "[Added Lines]",
          "761:   insn32 = (bytes[3] <<  0) |",
          "762:    (bytes[2] <<  8) |",
          "763:    (bytes[1] << 16) |",
          "764:    (bytes[0] << 24);",
          "",
          "---------------"
        ]
      }
    }
  ]
}