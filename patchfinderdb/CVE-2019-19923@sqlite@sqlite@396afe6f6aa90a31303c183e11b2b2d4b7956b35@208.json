{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6712f363895e8634c396aae55a1257500337c34",
      "candidate_info": {
        "commit_hash": "d6712f363895e8634c396aae55a1257500337c34",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d6712f363895e8634c396aae55a1257500337c34",
        "files": [
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() failure in fts5 that could occur when processing a corrupt database.\n\nFossilOrigin-Name: f158c048be1dc7c80d38787a20495caa55b86416967efd57f4888548d42b4819",
        "before_after_code_files": [
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:       fts5FastGetVarint32(a, i, iVal);",
          "187:       iOff = ((i64)iVal) << 32;",
          "188:       fts5FastGetVarint32(a, i, iVal);",
          "189:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:       if( iVal<2 ){",
          "192:         return 1;",
          "193:       }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4965:         fts5BufferSafeAppendBlob(&out, i1.aPoslist, i1.nPoslist+i1.nSize);",
          "4966:         fts5DoclistIterNext(&i1);",
          "4967:         if( i1.aPoslist==0 ) break;",
          "4968:       }",
          "4969:       else if( i2.iRowid!=i1.iRowid ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4968:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4972:         fts5BufferSafeAppendBlob(&out, i2.aPoslist, i2.nPoslist+i2.nSize);",
          "4973:         fts5DoclistIterNext(&i2);",
          "4974:         if( i2.aPoslist==0 ) break;",
          "4975:       }",
          "4976:       else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4976:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5045:         fts5DoclistIterNext(&i2);",
          "5046:         assert( out.n<=(p1->n+p2->n+9) );",
          "5047:         if( i1.aPoslist==0 || i2.aPoslist==0 ) break;",
          "5048:       }",
          "5049:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5050:         assert( out.n<=((i1.aPoslist - p1->p) + (i2.aPoslist - p2->p) + 9) );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: sqlite3_fts5_may_be_corrupt 1",
          "26: database_may_be_corrupt",
          "28: proc create_t1 {} {",
          "29:   expr srand(0)",
          "30:   db func rnddoc fts5_rnddoc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: if 0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8338:   SELECT * FROM t1('t*');",
          "8339: } {{} {} {} {} {} {}}",
          "8341: sqlite3_fts5_may_be_corrupt 0",
          "8342: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8343: }",
          "8345: #-------------------------------------------------------------------------",
          "8346: do_test 59.0 {",
          "8347:   sqlite3 db {}",
          "8348:   db deserialize [decode_hexdb {",
          "8349: .open --hexdb",
          "8350: | size 32768 pagesize 4096 filename crash-96b136358d01ec.db",
          "8351: | page 1 offset 0",
          "8352: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "8353: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "8354: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "8355: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 00 00 00 00 00 00   ...k............",
          "8356: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "8357: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "8358: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "8359: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "8360: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "8361: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "8362: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "8363: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "8364: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "8365: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "8366: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "8367: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "8368: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "8369: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "8370: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "8371: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "8372: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "8373: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "8374: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "8375: |   3776: 63 30 2c 20 63 31 2c d6 63 32 29 69 04 07 17 19   c0, c1,.c2)i....",
          "8376: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "8377: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "8378: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "8379: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "8380: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "8381: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "8382: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "8383: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "8384: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "8385: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "8386: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "8387: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "8388: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "8389: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "8390: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "8391: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "8392: | page 3 offset 8192",
          "8393: |      0: 0d 00 00 00 03 0c 93 ff 0f e6 0f ef 0c 94 00 00   ................",
          "8394: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "8395: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "8396: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 31 31 36 30   ...........21160",
          "8397: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 01 01 33 f1   609...........3.",
          "8398: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 03 01 02   ..........5.....",
          "8399: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 3d   ......0000000..=",
          "8400: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "8401: |   3328: 01 02 02 03 06 01 01 f2 03 06 4e 02 02 03 06 01   ..........N.....",
          "8402: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8403: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "8404: |   3376: 03 06 01 02 02 03 06 01 02 02 01 08 63 6f 6d 70   ............comp",
          "8405: |   3392: 69 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64   iler...........d",
          "8406: |   3408: 62 73 74 61 74 07 02 03 01 02 13 01 02 03 02 04   bstat...........",
          "8407: |   3424: 65 62 75 67 04 02 02 01 02 02 01 02 02 01 07 65   ebug...........e",
          "8408: |   3440: 6e 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02   nable...........",
          "8409: |   3456: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "8410: |   3472: 01 02 02 01 02 02 01 02 01 f1 02 02 01 02 02 01   ................",
          "8411: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "8412: |   3504: 02 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02   ......xtension..",
          "8413: |   3520: 04 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03   .........fts4...",
          "8414: |   3536: 01 02 03 01 02 03 04 01 25 0d 02 03 01 02 03 01   ........%.......",
          "8415: |   3552: 02 03 01 03 67 63 63 01 02 03 01 02 03 01 02 03   ....gcc.........",
          "8416: |   3568: 02 06 65 6f 70 6f 6c 79 0f f2 03 01 02 03 01 02   ..eopoly........",
          "8417: |   3584: 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03 01 02   ...json1........",
          "8418: |   3600: 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01 02 03   ...load.........",
          "8419: |   3616: 00 03 6d 61 78 1c 02 02 01 02 02 01 02 02 02 05   ..max...........",
          "8420: |   3632: 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03 04 04   emory...........",
          "8421: |   3648: 73 79 73 35 16 02 03 01 02 03 01 02 03 01 06 6e   sys5...........n",
          "8422: |   3664: 6f 63 61 73 65 02 06 01 02 02 13 06 00 f2 02 03   ocase...........",
          "8423: |   3680: 06 01 02 02 13 06 01 02 02 03 06 01 02 02 03 06   ................",
          "8424: |   3696: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "8425: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8426: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 02   ...omit.........",
          "8427: |   3744: 01 0a 22 74 72 65 65 19 02 03 01 02 03 01 02 03   ...tree.........",
          "8428: |   3760: 04 02 69 6d 01 06 01 02 02 03 06 01 02 02 03 06   ..im............",
          "8429: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "8430: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "8431: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "8432: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "8433: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "8434: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "8435: |   3872: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "8436: |   3888: 01 06 01 11 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "8437: |   3904: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "8438: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "8439: |   3936: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "8440: |   3952: 02 01 06 01 01 01 f1 06 01 01 02 ad 06 01 01 02   ................",
          "8441: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "8442: |   3984: 06 01 01 01 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "8443: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "8444: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "8445: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "8446: |   4048: 12 44 13 11 0f 47 13 0e fc 0e 11 10 0f 0e 10 0f   .D...G..........",
          "8447: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "8448: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "8449: | page 4 offset 12288",
          "8450: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "8451: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "8452: | page 5 offset 16384",
          "8453: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "8454: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "8455: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "8456: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "8457: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 8f   DSAFE=0XNOCASE..",
          "8458: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "8459: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 45 ed   0XRTRIM.!..3..E.",
          "8460: |   3168: 49 54 20 4c 4f 41 44 21 45 58 54 45 4e 53 49 4f   IT LOAD!EXTENSIO",
          "8461: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "8462: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 5a 29   MIT LOAD EXTENZ)",
          "8463: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "8464: |   3232: 4f 4d 59 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMYT LOAD EXTENS",
          "8465: |   3248: 49 4f 4e 58 52 54 56 a9 4d 1f 1e 05 00 33 0f 19   IONXRTV.M....3..",
          "8466: |   3264: 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   MAX MEMORY=50000",
          "8467: |   3280: 30 30 30 57 42 49 4e 31 52 59 1f 1d 05 00 33 0f   000WBIN1RY....3.",
          "8468: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "8469: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 32   0000XNOCASE....2",
          "8470: |   3328: 0f 17 4e 41 58 20 4d 45 4d 4f 52 59 2d 35 30 30   ..NAX MEMORY-500",
          "8471: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "8472: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "8473: |   3376: 49 4e 41 52 59 18 1a 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "8474: |   3392: 4c 45 20 52 54 52 45 45 59 4e 4f 43 41 53 45 17   LE RTREEYNOCASE.",
          "8475: |   3408: 19 66 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   .f.%..ENABLE RTR",
          "8476: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "8477: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   NABLE MEMSYS5XBI",
          "8478: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "8479: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "8480: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "8481: |   3504: 4d 53 59 76 35 58 52 54 52 49 4d 18 15 05 10 25   MSYv5XRTRIM....%",
          "8482: |   3520: 0f 19 45 4e 40 42 4c 45 20 4a 53 4f 4e 31 58 42   ..EN@BLE JSON1XB",
          "8483: |   3536: 49 4e 41 52 59 18 14 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "8484: |   3552: 4c 45 20 4a 53 4f 4e 32 58 4e 4f 43 41 53 45 17   LE JSON2XNOCASE.",
          "8485: |   3568: 13 05 00 25 0f 17 45 4e 41 42 4c 45 20 4a 53 4f   ...%..ENABLE JSO",
          "8486: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 00 29 0f 19 45   N1XRTRIM....)..E",
          "8487: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 58 42 49   NABLE GEOPOLYXBI",
          "8488: |   3616: 4e 41 52 59 1a 11 05 00 29 0f 19 45 5f 81 42 4c   NARY....)..E_.BL",
          "8489: |   3632: 45 20 47 45 4f 50 4f 4c 59 58 4e 4f 43 51 53 45   E GEOPOLYXNOCQSE",
          "8490: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "8491: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "8492: |   3680: 0f 1a 45 4e 41 42 4c 45 20 56 54 43 35 58 42 49   ..ENABLE VTC5XBI",
          "8493: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "8494: |   3712: 45 20 46 54 53 35 48 4e 4f 43 41 53 45 16 1d 05   E FTS5HNOCASE...",
          "8495: |   3728: 00 23 0f a4 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "8496: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "8497: |   3760: 4c 45 20 46 55 53 34 58 42 49 4e 41 52 59 17 0b   LE FUS4XBINARY..",
          "8498: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "8499: |   3792: 57 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   WNOCASE....#..EN",
          "8500: |   3808: 41 42 4c 45 20 46 54 53 34 05 52 54 52 49 4d 1e   ABLE FTS4.RTRIM.",
          "8501: |   3824: 09 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8502: |   3840: 54 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAT VTABXBINARY.",
          "8503: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8504: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "8505: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "8506: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 49 4d 11 06   TAT VTABXRTRIM..",
          "8507: |   3920: 05 00 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "8508: |   3936: 59 11 05 05 00 17 0f 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "8509: |   3952: 43 41 53 45 10 04 05 00 17 0f 17 44 45 42 55 47   CASE.......DEBUG",
          "8510: |   3968: 58 52 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XRTRIM'...C..COM",
          "8511: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "8512: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "8513: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3f 87   ...C..COMPILER?.",
          "8514: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "8515: |   4048: 39 58 4e 4f 43 41 53 45 26 01 05 00 43 0f 17 43   9XNOCASE&...C..C",
          "8516: |   4064: 45 0d 60 59 4c 45 52 3d 67 63 63 2d 35 2e 34 00   E.`YLER=gcc-5.4.",
          "8517: | page 6 offset 20480",
          "8518: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "8519: |   3824: 06 22 03 01 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "8520: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 02 01   . ..............",
          "8521: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "8522: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "8523: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "8524: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "8525: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "8526: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "8527: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "8528: |   3968: 06 00 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "8529: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "8530: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 10 12 02 01 01   ................",
          "8531: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "8532: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "8533: |   4048: 07 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "8534: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 06 01 01   ................",
          "8535: |   4080: 06 02 03 00 12 06 01 01 06 01 03 00 12 06 01 01   ................",
          "8536: | page 7 offset 24576",
          "8537: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "8538: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "8539: | page 8 offset 28672",
          "8540: |   4048: 00 00 00 00 00 00 5d 03 02 2b 69 6e 74 00 00 00   ......]..+int...",
          "8541: | end crash-96b136358d01ec.db",
          "8542: }]} {}",
          "8544: do_catchsql_test 59.1 {",
          "8545:   SELECT (matchinfo(591,t1)) FROM t1 WHERE t1 MATCH 'e*e\u009f'",
          "8546: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3413197f57711f04102d8cc6ff1e8ddbe0f5f2bcb6e1989cf314fa97f0ff7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "680f0fe32aaf79d3e7ea5dba7a0c84c4693812ed",
      "candidate_info": {
        "commit_hash": "680f0fe32aaf79d3e7ea5dba7a0c84c4693812ed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/680f0fe32aaf79d3e7ea5dba7a0c84c4693812ed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Small performance and size optimization in sqlite3WalFindFrame().\n\nFossilOrigin-Name: 03f2e78899fad99b0a0951b3a408268276954d4cd785389ed9a0192c9217f6fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57638248de147efe8d663b3ae1389f590c7b2b7225ecfe295699d68c2893cd09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2908:     }",
          "2909:     nCollide = HASHTABLE_NSLOT;",
          "2910:     for(iKey=walHash(pgno); sLoc.aHash[iKey]; iKey=walNextHash(iKey)){",
          "2914:         assert( iFrame>iRead || CORRUPT_DB );",
          "2915:         iRead = iFrame;",
          "2916:       }",
          "",
          "[Removed Lines]",
          "2911:       u32 iFrame = sLoc.aHash[iKey] + sLoc.iZero;",
          "2912:       if( iFrame<=iLast && iFrame>=pWal->minFrame",
          "2913:        && sLoc.aPgno[sLoc.aHash[iKey]]==pgno ){",
          "",
          "[Added Lines]",
          "2911:       u32 iH = sLoc.aHash[iKey];",
          "2912:       u32 iFrame = iH + sLoc.iZero;",
          "2913:       if( iFrame<=iLast && iFrame>=pWal->minFrame && sLoc.aPgno[iH]==pgno ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
      "candidate_info": {
        "commit_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt.test"
        ],
        "message": "Further improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt.test||test/fts3corrupt.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4245:       pWriter->bNoLeafData = (pWriter->nLeafData==0);",
          "4246:       nRoot = sqlite3_column_bytes(pSelect, 4);",
          "4247:       aRoot = sqlite3_column_blob(pSelect, 4);",
          "4248:     }else{",
          "4249:       return sqlite3_reset(pSelect);",
          "4250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4248:       if( aRoot==0 ){",
          "4249:         sqlite3_reset(pSelect);",
          "4250:         return nRoot ? SQLITE_NOMEM : FTS_CORRUPT_VTAB;",
          "4251:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dfcf081d842629a0b177be7eb2eb8ce719324068991040a581e33ea1d5db3d27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt.test||test/fts3corrupt.test": [
          "File: test/fts3corrupt.test -> test/fts3corrupt.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: } {1 {database disk image is malformed}}",
          "166: do_test 5.3.1 { sqlite3_extended_errcode db } SQLITE_CORRUPT_VTAB",
          "169: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "169: # bug1",
          "170: db close",
          "171: sqlite3 db :memory:",
          "172: do_catchsql_test 6.10 {",
          "173:   CREATE VIRTUAL TABLE f using fts3(a,b);",
          "174:   CREATE TABLE f_stat(id INTEGER PRIMARY KEY, value BLOB);",
          "175:   INSERT INTO f_segdir VALUES (2000, 0,0,0, '16', '');",
          "176:   INSERT INTO f_segdir VALUES (1999, 0,0,0, '0 18',",
          "177:                                x'000131030102000103323334050101010200');",
          "178:   INSERT INTO f_segments (blockid) values (16);",
          "179:   INSERT INTO f_segments values (0, x'');",
          "180:   INSERT INTO f_stat VALUES (1,x'cf0f01');",
          "181:   INSERT INTO f(f) VALUES (\"merge=1\");",
          "182: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
      "candidate_info": {
        "commit_hash": "69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69a66a7be12600547ab1a91c83995fa6bd6375fd",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Include OPTS in the build of dbfuzz2.\n\nFossilOrigin-Name: eac9c0c49650b008951318a2225b932709a0a8dffbb01ed57684c40357b2e25c",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "690:  mkdir -p dbfuzz2-dir",
          "691:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "688:  clang-6.0 -I. -g -O0 -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "[Added Lines]",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54231ac4ca506e6c34c31bc02bb8d3db22f14e1b01679bc70529b165d7dabb83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
      "candidate_info": {
        "commit_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25fb50674f17198acfee9ac96ff5309adce37291",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with joining two or more fts5_vocab tables that access the same underlying fts5 table.\n\nFossilOrigin-Name: 49956395e14b61f6bf839e59ae7dd95eb32ebf32f3d16388844de6621b9c2d98",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "526: int sqlite3Fts5GetTokenizer(",
          "527:   Fts5Global*,",
          "528:   const char **azArg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529: typedef struct Fts5Table Fts5Table;",
          "530: struct Fts5Table {",
          "534: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:   char **pzErr",
          "533: );",
          "",
          "[Removed Lines]",
          "535: Fts5Index *sqlite3Fts5IndexFromCsrid(Fts5Global*, i64, Fts5Config **);",
          "",
          "[Added Lines]",
          "545: Fts5Table *sqlite3Fts5TableFromCsrid(Fts5Global*, i64);",
          "547: int sqlite3Fts5FlushToDisk(Fts5Table*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: typedef struct Fts5Auxdata Fts5Auxdata;",
          "29: typedef struct Fts5Auxiliary Fts5Auxiliary;",
          "30: typedef struct Fts5Cursor Fts5Cursor;",
          "31: typedef struct Fts5Sorter Fts5Sorter;",
          "33: typedef struct Fts5TokenizerModule Fts5TokenizerModule;",
          "",
          "[Removed Lines]",
          "32: typedef struct Fts5Table Fts5Table;",
          "",
          "[Added Lines]",
          "31: typedef struct Fts5FullTable Fts5FullTable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: };",
          "",
          "[Removed Lines]",
          "116: struct Fts5Table {",
          "",
          "[Added Lines]",
          "113: struct Fts5FullTable {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254: #define FTS5_SAVEPOINT  5",
          "255: #define FTS5_RELEASE    6",
          "256: #define FTS5_ROLLBACKTO 7",
          "258:   switch( op ){",
          "259:     case FTS5_BEGIN:",
          "260:       assert( p->ts.eState==0 );",
          "",
          "[Removed Lines]",
          "257: static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){",
          "",
          "[Added Lines]",
          "252: static void fts5CheckTransactionState(Fts5FullTable *p, int op, int iSavepoint){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: }",
          "317:   if( pTab ){",
          "319:     sqlite3Fts5StorageClose(pTab->pStorage);",
          "321:     sqlite3_free(pTab);",
          "322:   }",
          "323: }",
          "",
          "[Removed Lines]",
          "309: static int fts5IsContentless(Fts5Table *pTab){",
          "310:   return pTab->pConfig->eContent==FTS5_CONTENT_NONE;",
          "316: static void fts5FreeVtab(Fts5Table *pTab){",
          "318:     sqlite3Fts5IndexClose(pTab->pIndex);",
          "320:     sqlite3Fts5ConfigFree(pTab->pConfig);",
          "",
          "[Added Lines]",
          "304: static int fts5IsContentless(Fts5FullTable *pTab){",
          "305:   return pTab->p.pConfig->eContent==FTS5_CONTENT_NONE;",
          "311: static void fts5FreeVtab(Fts5FullTable *pTab){",
          "313:     sqlite3Fts5IndexClose(pTab->p.pIndex);",
          "315:     sqlite3Fts5ConfigFree(pTab->p.pConfig);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328: static int fts5DisconnectMethod(sqlite3_vtab *pVtab){",
          "330:   return SQLITE_OK;",
          "331: }",
          "",
          "[Removed Lines]",
          "329:   fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "324:   fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "338:   int rc = sqlite3Fts5DropAll(pTab->pConfig);",
          "339:   if( rc==SQLITE_OK ){",
          "341:   }",
          "342:   return rc;",
          "343: }",
          "",
          "[Removed Lines]",
          "340:     fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "335:     fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:   const char **azConfig = (const char**)argv;",
          "373:   if( rc==SQLITE_OK ){",
          "374:     rc = sqlite3Fts5ConfigParse(pGlobal, db, argc, azConfig, &pConfig, pzErr);",
          "375:     assert( (rc==SQLITE_OK && *pzErr==0) || pConfig==0 );",
          "376:   }",
          "377:   if( rc==SQLITE_OK ){",
          "379:     pTab->pGlobal = pGlobal;",
          "380:   }",
          "383:   if( rc==SQLITE_OK ){",
          "385:   }",
          "388:   if( rc==SQLITE_OK ){",
          "389:     rc = sqlite3Fts5StorageOpen(",
          "391:     );",
          "392:   }",
          "",
          "[Removed Lines]",
          "372:   pTab = (Fts5Table*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5Table));",
          "378:     pTab->pConfig = pConfig;",
          "384:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->pIndex, pzErr);",
          "390:         pConfig, pTab->pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "[Added Lines]",
          "367:   pTab = (Fts5FullTable*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5FullTable));",
          "373:     pTab->p.pConfig = pConfig;",
          "379:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->p.pIndex, pzErr);",
          "385:         pConfig, pTab->p.pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "400:   if( rc==SQLITE_OK ){",
          "401:     assert( pConfig->pzErrmsg==0 );",
          "402:     pConfig->pzErrmsg = pzErr;",
          "405:     pConfig->pzErrmsg = 0;",
          "406:   }",
          "",
          "[Removed Lines]",
          "403:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "404:     sqlite3Fts5IndexRollback(pTab->pIndex);",
          "",
          "[Added Lines]",
          "398:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "399:     sqlite3Fts5IndexRollback(pTab->p.pIndex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:   return SQLITE_OK;",
          "615: }",
          "618:   Fts5Cursor *pCsr;",
          "619:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "620:     if( pCsr->base.pVtab==(sqlite3_vtab*)pTab ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "617: static int fts5NewTransaction(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "612: static int fts5NewTransaction(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "628: static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){",
          "",
          "[Removed Lines]",
          "629:   Fts5Table *pTab = (Fts5Table*)pVTab;",
          "630:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "624:   Fts5FullTable *pTab = (Fts5FullTable*)pVTab;",
          "625:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "673: }",
          "675: static void fts5FreeCursorComponents(Fts5Cursor *pCsr){",
          "677:   Fts5Auxdata *pData;",
          "678:   Fts5Auxdata *pNext;",
          "",
          "[Removed Lines]",
          "676:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "671:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "718: static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){",
          "719:   if( pCursor ){",
          "721:     Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "722:     Fts5Cursor **pp;",
          "",
          "[Removed Lines]",
          "720:     Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "",
          "[Added Lines]",
          "715:     Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "778:   Fts5Cursor *pCsr;",
          "779:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "780:     if( pCsr->ePlan==FTS5_PLAN_MATCH",
          "",
          "[Removed Lines]",
          "777: static void fts5TripCursors(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "772: static void fts5TripCursors(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "801:   int rc = SQLITE_OK;",
          "802:   assert( *pbSkip==0 );",
          "803:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_RESEEK) ){",
          "805:     int bDesc = pCsr->bDesc;",
          "806:     i64 iRowid = sqlite3Fts5ExprRowid(pCsr->pExpr);",
          "809:     if( rc==SQLITE_OK &&  iRowid!=sqlite3Fts5ExprRowid(pCsr->pExpr) ){",
          "811:     }",
          "",
          "[Removed Lines]",
          "804:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "808:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->pIndex, iRowid, bDesc);",
          "",
          "[Added Lines]",
          "799:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "803:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->p.pIndex, iRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "902:   return rc;",
          "903: }",
          "907:   Fts5Sorter *pSorter;",
          "908:   int nPhrase;",
          "909:   sqlite3_int64 nByte;",
          "",
          "[Removed Lines]",
          "905: static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "906:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "900: static int fts5CursorFirstSorted(",
          "901:   Fts5FullTable *pTab,",
          "902:   Fts5Cursor *pCsr,",
          "903:   int bDesc",
          "904: ){",
          "905:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "950:   return rc;",
          "951: }",
          "954:   int rc;",
          "955:   Fts5Expr *pExpr = pCsr->pExpr;",
          "957:   if( sqlite3Fts5ExprEof(pExpr) ){",
          "958:     CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "959:   }",
          "",
          "[Removed Lines]",
          "953: static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "956:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "[Added Lines]",
          "952: static int fts5CursorFirst(Fts5FullTable *pTab, Fts5Cursor *pCsr, int bDesc){",
          "955:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->p.pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "970: static int fts5SpecialMatch(",
          "972:   Fts5Cursor *pCsr,",
          "973:   const char *zQuery",
          "974: ){",
          "",
          "[Removed Lines]",
          "971:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "970:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "979:   while( z[0]==' ' ) z++;",
          "980:   for(n=0; z[n] && z[n]!=' '; n++);",
          "983:   pCsr->ePlan = FTS5_PLAN_SPECIAL;",
          "985:   if( 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "987:   }",
          "988:   else if( 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "989:     pCsr->iSpecial = pCsr->iCsrId;",
          "990:   }",
          "991:   else{",
          "994:     rc = SQLITE_ERROR;",
          "995:   }",
          "",
          "[Removed Lines]",
          "982:   assert( pTab->base.zErrMsg==0 );",
          "986:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->pIndex);",
          "993:     pTab->base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "[Added Lines]",
          "981:   assert( pTab->p.base.zErrMsg==0 );",
          "985:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->p.pIndex);",
          "992:     pTab->p.base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1006:   Fts5Auxiliary *pAux;",
          "1008:   for(pAux=pTab->pGlobal->pAux; pAux; pAux=pAux->pNext){",
          "",
          "[Removed Lines]",
          "1005: static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){",
          "",
          "[Added Lines]",
          "1004: static Fts5Auxiliary *fts5FindAuxiliary(Fts5FullTable *pTab, const char *zName){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1017: static int fts5FindRankFunction(Fts5Cursor *pCsr){",
          "1020:   int rc = SQLITE_OK;",
          "1021:   Fts5Auxiliary *pAux = 0;",
          "1022:   const char *zRank = pCsr->zRank;",
          "",
          "[Removed Lines]",
          "1018:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1019:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1017:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1018:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1054:   if( rc==SQLITE_OK ){",
          "1055:     pAux = fts5FindAuxiliary(pTab, zRank);",
          "1056:     if( pAux==0 ){",
          "1059:       rc = SQLITE_ERROR;",
          "1060:     }",
          "1061:   }",
          "",
          "[Removed Lines]",
          "1057:       assert( pTab->base.zErrMsg==0 );",
          "1058:       pTab->base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "[Added Lines]",
          "1056:       assert( pTab->p.base.zErrMsg==0 );",
          "1057:       pTab->p.base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1132: ){",
          "1135:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "",
          "[Removed Lines]",
          "1133:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "1134:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1132:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "1133:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1160:   assert( pCsr->zRank==0 );",
          "1161:   assert( pCsr->zRankArgs==0 );",
          "",
          "[Removed Lines]",
          "1163:   assert( pzErrmsg==0 || pzErrmsg==&pTab->base.zErrMsg );",
          "1164:   pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1162:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1163:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1228:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1229:       }else{",
          "1231:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1232:         if( rc==SQLITE_OK ){",
          "1233:           if( bOrderByRank ){",
          "",
          "[Removed Lines]",
          "1230:         char **pzErr = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1229:         char **pzErr = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1251:     pCsr->ePlan = (pRowidEq ? FTS5_PLAN_ROWID : FTS5_PLAN_SCAN);",
          "1252:     rc = sqlite3Fts5StorageStmt(",
          "1254:     );",
          "1255:     if( rc==SQLITE_OK ){",
          "1256:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "",
          "[Removed Lines]",
          "1253:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->base.zErrMsg",
          "",
          "[Added Lines]",
          "1252:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->p.base.zErrMsg",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1335:   if( pCsr->pStmt==0 ){",
          "1337:     int eStmt = fts5StmtType(pCsr);",
          "1338:     rc = sqlite3Fts5StorageStmt(",
          "1340:     );",
          "1342:     assert( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) );",
          "1343:   }",
          "",
          "[Removed Lines]",
          "1336:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1339:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->base.zErrMsg:0)",
          "1341:     assert( rc!=SQLITE_OK || pTab->base.zErrMsg==0 );",
          "",
          "[Added Lines]",
          "1335:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1338:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->p.base.zErrMsg:0)",
          "1340:     assert( rc!=SQLITE_OK || pTab->p.base.zErrMsg==0 );",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1360:   return rc;",
          "1361: }",
          "1365:   va_start(ap, zFormat);",
          "1368:   va_end(ap);",
          "1369: }",
          "",
          "[Removed Lines]",
          "1363: static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){",
          "1366:   assert( p->base.zErrMsg==0 );",
          "1367:   p->base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "[Added Lines]",
          "1362: static void fts5SetVtabError(Fts5FullTable *p, const char *zFormat, ...){",
          "1365:   assert( p->p.base.zErrMsg==0 );",
          "1366:   p->p.base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1386: static int fts5SpecialInsert(",
          "1390: ){",
          "1392:   int rc = SQLITE_OK;",
          "1393:   int bError = 0;",
          "",
          "[Removed Lines]",
          "1391:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1390:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1423:     pConfig->bPrefixIndex = sqlite3_value_int(pVal);",
          "1424: #endif",
          "1425:   }else{",
          "1427:     if( rc==SQLITE_OK ){",
          "1429:     }",
          "1430:     if( rc==SQLITE_OK ){",
          "1431:       if( bError ){",
          "",
          "[Removed Lines]",
          "1426:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "1428:       rc = sqlite3Fts5ConfigSetValue(pTab->pConfig, zCmd, pVal, &bError);",
          "",
          "[Added Lines]",
          "1425:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "1427:       rc = sqlite3Fts5ConfigSetValue(pTab->p.pConfig, zCmd, pVal, &bError);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1439: }",
          "1441: static int fts5SpecialDelete(",
          "1443:   sqlite3_value **apVal",
          "1444: ){",
          "1445:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1442:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1441:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1454: static void fts5StorageInsert(",
          "1455:   int *pRc,",
          "1457:   sqlite3_value **apVal,",
          "1458:   i64 *piRowid",
          "1459: ){",
          "",
          "[Removed Lines]",
          "1456:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1455:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1489: ){",
          "",
          "[Removed Lines]",
          "1490:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1491:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1489:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1490:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "1502:   );",
          "1507:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "1503:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1504:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1502:   assert( pTab->p.pConfig->pzErrmsg==0 );",
          "1503:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1544:     if( eType0==SQLITE_INTEGER && fts5IsContentless(pTab) ){",
          "1546:           \"cannot %s contentless fts5 table: %s\",",
          "1547:           (nArg>1 ? \"UPDATE\" : \"DELETE from\"), pConfig->zName",
          "1548:       );",
          "",
          "[Removed Lines]",
          "1545:       pTab->base.zErrMsg = sqlite3_mprintf(",
          "",
          "[Added Lines]",
          "1544:       pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1600:     }",
          "1601:   }",
          "1604:   return rc;",
          "1605: }",
          "",
          "[Removed Lines]",
          "1603:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1602:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1610: static int fts5SyncMethod(sqlite3_vtab *pVtab){",
          "1611:   int rc;",
          "1613:   fts5CheckTransactionState(pTab, FTS5_SYNC, 0);",
          "1615:   fts5TripCursors(pTab);",
          "1616:   rc = sqlite3Fts5StorageSync(pTab->pStorage);",
          "1618:   return rc;",
          "1619: }",
          "",
          "[Removed Lines]",
          "1612:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1614:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "1617:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1611:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1613:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1616:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1624: static int fts5BeginMethod(sqlite3_vtab *pVtab){",
          "1627:   return SQLITE_OK;",
          "1628: }",
          "",
          "[Removed Lines]",
          "1625:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_BEGIN, 0);",
          "1626:   fts5NewTransaction((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "1624:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_BEGIN, 0);",
          "1625:   fts5NewTransaction((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1635: static int fts5CommitMethod(sqlite3_vtab *pVtab){",
          "1638:   return SQLITE_OK;",
          "1639: }",
          "",
          "[Removed Lines]",
          "1637:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_COMMIT, 0);",
          "",
          "[Added Lines]",
          "1636:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_COMMIT, 0);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1645: static int fts5RollbackMethod(sqlite3_vtab *pVtab){",
          "1646:   int rc;",
          "1648:   fts5CheckTransactionState(pTab, FTS5_ROLLBACK, 0);",
          "1649:   rc = sqlite3Fts5StorageRollback(pTab->pStorage);",
          "1650:   return rc;",
          "",
          "[Removed Lines]",
          "1647:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "1646:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1668:   sqlite3_int64 *pnToken",
          "1669: ){",
          "1670:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1672:   return sqlite3Fts5StorageSize(pTab->pStorage, iCol, pnToken);",
          "1673: }",
          "1675: static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){",
          "1676:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1678:   return sqlite3Fts5StorageRowCount(pTab->pStorage, pnRow);",
          "1679: }",
          "",
          "[Removed Lines]",
          "1671:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1677:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "1670:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1676:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1709: ){",
          "1710:   int rc = SQLITE_OK;",
          "1711:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1715:   }else{",
          "",
          "[Removed Lines]",
          "1712:   if( fts5IsContentless((Fts5Table*)(pCsr->base.pVtab)) ){",
          "",
          "[Added Lines]",
          "1711:   if( fts5IsContentless((Fts5FullTable*)(pCsr->base.pVtab)) ){",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1904: static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){",
          "1905:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1908:   int rc = SQLITE_OK;",
          "1910:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_DOCSIZE) ){",
          "",
          "[Removed Lines]",
          "1906:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1907:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1905:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1906:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2160:   int(*xCallback)(const Fts5ExtensionApi*, Fts5Context*, void*)",
          "2161: ){",
          "2162:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "2164:   int rc;",
          "2165:   Fts5Cursor *pNew = 0;",
          "",
          "[Removed Lines]",
          "2163:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "2162:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2250: ){",
          "2251:   Fts5Cursor *pCsr;",
          "2252:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2253:   if( pCsr ){",
          "2257:   }",
          "2258:   return 0;",
          "2259: }",
          "",
          "[Removed Lines]",
          "2246: Fts5Index *sqlite3Fts5IndexFromCsrid(",
          "2254:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2256:     return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2242: Fts5Table *sqlite3Fts5TableFromCsrid(",
          "2249:     return (Fts5Table*)pCsr->base.pVtab;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2337: ){",
          "2340:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "2341:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "2338:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "2339:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "2331:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "2332:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2390: ){",
          "2392:   Fts5Auxiliary *pAux;",
          "2394:   UNUSED_PARAM(nUnused);",
          "",
          "[Removed Lines]",
          "2391:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2384:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2412: ){",
          "2414:   return sqlite3Fts5StorageRename(pTab->pStorage, zName);",
          "2415: }",
          "2422: static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2428: }",
          "",
          "[Removed Lines]",
          "2413:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2423:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2425:   fts5CheckTransactionState(pTab, FTS5_SAVEPOINT, iSavepoint);",
          "2426:   fts5TripCursors(pTab);",
          "2427:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2406:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "2410: int sqlite3Fts5FlushToDisk(Fts5Table *pTab){",
          "2411:   fts5TripCursors((Fts5FullTable*)pTab);",
          "2412:   return sqlite3Fts5StorageSync(((Fts5FullTable*)pTab)->pStorage);",
          "2413: }",
          "2422:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_SAVEPOINT, iSavepoint);",
          "2423:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2435: static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2441: }",
          "",
          "[Removed Lines]",
          "2436:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2438:   fts5CheckTransactionState(pTab, FTS5_RELEASE, iSavepoint);",
          "2439:   fts5TripCursors(pTab);",
          "2440:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2433:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_RELEASE, iSavepoint);",
          "2434:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2448: static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2451:   fts5CheckTransactionState(pTab, FTS5_ROLLBACKTO, iSavepoint);",
          "2452:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "2449:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2443:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   sqlite3_vtab_cursor **ppCsr",
          "328: ){",
          "329:   Fts5VocabTable *pTab = (Fts5VocabTable*)pVTab;",
          "332:   Fts5VocabCursor *pCsr = 0;",
          "333:   int rc = SQLITE_OK;",
          "334:   sqlite3_stmt *pStmt = 0;",
          "",
          "[Removed Lines]",
          "330:   Fts5Index *pIndex = 0;",
          "331:   Fts5Config *pConfig = 0;",
          "",
          "[Added Lines]",
          "329:   Fts5Table *pFts5 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "349:     i64 iId = sqlite3_column_int64(pStmt, 0);",
          "351:   }",
          "361:     }",
          "362:   }",
          "364:   if( rc==SQLITE_OK ){",
          "366:     pCsr = (Fts5VocabCursor*)sqlite3Fts5MallocZero(&rc, nByte);",
          "367:   }",
          "369:   if( pCsr ){",
          "371:     pCsr->pStmt = pStmt;",
          "373:     pCsr->aCnt = (i64*)&pCsr[1];",
          "375:   }else{",
          "376:     sqlite3_finalize(pStmt);",
          "377:   }",
          "",
          "[Removed Lines]",
          "350:     pIndex = sqlite3Fts5IndexFromCsrid(pTab->pGlobal, iId, &pConfig);",
          "353:   if( rc==SQLITE_OK && pIndex==0 ){",
          "354:     rc = sqlite3_finalize(pStmt);",
          "355:     pStmt = 0;",
          "356:     if( rc==SQLITE_OK ){",
          "357:       pVTab->zErrMsg = sqlite3_mprintf(",
          "358:           \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "359:       );",
          "360:       rc = SQLITE_ERROR;",
          "365:     int nByte = pConfig->nCol * sizeof(i64) * 2 + sizeof(Fts5VocabCursor);",
          "370:     pCsr->pIndex = pIndex;",
          "372:     pCsr->pConfig = pConfig;",
          "374:     pCsr->aDoc = &pCsr->aCnt[pConfig->nCol];",
          "",
          "[Added Lines]",
          "348:     pFts5 = sqlite3Fts5TableFromCsrid(pTab->pGlobal, iId);",
          "351:   if( rc==SQLITE_OK ){",
          "352:     if( pFts5==0 ){",
          "353:       rc = sqlite3_finalize(pStmt);",
          "354:       pStmt = 0;",
          "355:       if( rc==SQLITE_OK ){",
          "356:         pVTab->zErrMsg = sqlite3_mprintf(",
          "357:             \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "358:             );",
          "359:         rc = SQLITE_ERROR;",
          "360:       }",
          "361:     }else{",
          "362:       rc = sqlite3Fts5FlushToDisk(pFts5);",
          "367:     int nByte = pFts5->pConfig->nCol * sizeof(i64)*2 + sizeof(Fts5VocabCursor);",
          "372:     pCsr->pFts5 = pFts5;",
          "375:     pCsr->aDoc = &pCsr->aCnt[pFts5->pConfig->nCol];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:   sqlite3_free(pCsr->zLeTerm);",
          "388:   pCsr->nLeTerm = -1;",
          "389:   pCsr->zLeTerm = 0;",
          "390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   pCsr->bEof = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425: }",
          "427: static int fts5VocabInstanceNext(Fts5VocabCursor *pCsr){",
          "429:   int rc = SQLITE_OK;",
          "430:   Fts5IndexIter *pIter = pCsr->pIter;",
          "431:   i64 *pp = &pCsr->iInstPos;",
          "",
          "[Removed Lines]",
          "428:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "430:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "461:   Fts5VocabTable *pTab = (Fts5VocabTable*)pCursor->pVtab;",
          "462:   int rc = SQLITE_OK;",
          "465:   pCsr->rowid++;",
          "",
          "[Removed Lines]",
          "463:   int nCol = pCsr->pConfig->nCol;",
          "",
          "[Added Lines]",
          "465:   int nCol = pCsr->pFts5->pConfig->nCol;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "499:       assert( pTab->eType==FTS5_VOCAB_COL || pTab->eType==FTS5_VOCAB_ROW );",
          "500:       while( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "501:         int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "503:         int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "570:   if( rc==SQLITE_OK && pCsr->bEof==0 && pTab->eType==FTS5_VOCAB_COL ){",
          "571:     while( pCsr->aDoc[pCsr->iCol]==0 ) pCsr->iCol++;",
          "573:   }",
          "574:   return rc;",
          "575: }",
          "",
          "[Removed Lines]",
          "572:     assert( pCsr->iCol<pCsr->pConfig->nCol );",
          "",
          "[Added Lines]",
          "574:     assert( pCsr->iCol<pCsr->pFts5->pConfig->nCol );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "627:   }",
          "629:   if( rc==SQLITE_OK ){",
          "631:   }",
          "632:   if( rc==SQLITE_OK && eType==FTS5_VOCAB_INSTANCE ){",
          "633:     rc = fts5VocabInstanceNewTerm(pCsr);",
          "634:   }",
          "638:   ){",
          "639:     rc = fts5VocabNextMethod(pCursor);",
          "640:   }",
          "",
          "[Removed Lines]",
          "630:     rc = sqlite3Fts5IndexQuery(pCsr->pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "635:   if( rc==SQLITE_OK",
          "636:    && !pCsr->bEof",
          "637:    && (eType!=FTS5_VOCAB_INSTANCE || pCsr->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "[Added Lines]",
          "632:     Fts5Index *pIndex = pCsr->pFts5->pIndex;",
          "633:     rc = sqlite3Fts5IndexQuery(pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "638:   if( rc==SQLITE_OK && !pCsr->bEof",
          "639:    && (eType!=FTS5_VOCAB_INSTANCE",
          "640:     || pCsr->pFts5->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "658: ){",
          "659:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "661:   int eType = ((Fts5VocabTable*)(pCursor->pVtab))->eType;",
          "662:   i64 iVal = 0;",
          "",
          "[Removed Lines]",
          "660:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "663:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "669:     assert( iCol==1 || iCol==2 || iCol==3 );",
          "670:     if( iCol==1 ){",
          "671:       if( eDetail!=FTS5_DETAIL_NONE ){",
          "673:         sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "674:       }",
          "675:     }else if( iCol==2 ){",
          "",
          "[Removed Lines]",
          "672:         const char *z = pCsr->pConfig->azCol[pCsr->iCol];",
          "",
          "[Added Lines]",
          "675:         const char *z = pCsr->pFts5->pConfig->azCol[pCsr->iCol];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:         }else if( eDetail==FTS5_DETAIL_COLUMNS ){",
          "698:           ii = (int)pCsr->iInstPos;",
          "699:         }",
          "702:           sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "703:         }",
          "704:         break;",
          "",
          "[Removed Lines]",
          "700:         if( ii>=0 && ii<pCsr->pConfig->nCol ){",
          "701:           const char *z = pCsr->pConfig->azCol[ii];",
          "",
          "[Added Lines]",
          "703:         if( ii>=0 && ii<pCsr->pFts5->pConfig->nCol ){",
          "704:           const char *z = pCsr->pFts5->pConfig->azCol[ii];",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:   expr [lsearch $e2 SorterSort]<0",
          "480: } 0",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: #-------------------------------------------------------------------------",
          "483: do_execsql_test 10.0 {",
          "484:   CREATE VIRTUAL TABLE ft USING fts5(a, b, c);",
          "485:   CREATE VIRTUAL TABLE t2 USING fts5vocab('ft','row');",
          "486:   CREATE VIRTUAL TABLE t3 USING fts5vocab('ft','row');",
          "487: }",
          "489: do_execsql_test 10.1 {",
          "490:   BEGIN;",
          "491:     INSERT INTO ft(b) VALUES('x y');",
          "492: }",
          "494: do_execsql_test 10.2 {",
          "495:   SELECT t2.term FROM t2;",
          "496: } {x y}",
          "498: do_execsql_test 10.3 {",
          "499:   SELECT t2.term, t3.term FROM t2, t3;",
          "500: } {x x x y y x y y}",
          "502: do_execsql_test 10.4 {",
          "503:   COMMIT;",
          "504: }",
          "506: do_execsql_test 10.5 {",
          "507:   BEGIN;",
          "508:     INSERT INTO ft(a) VALUES('1 2 3');",
          "509:     INSERT INTO ft(a) VALUES('4 5 6');",
          "510:     INSERT INTO ft(a) VALUES('1 2 3');",
          "511:     INSERT INTO ft(a) VALUES('4 5 6');",
          "512:     INSERT INTO ft(a) VALUES('1 2 3');",
          "513:     INSERT INTO ft(a) VALUES('4 5 6');",
          "514: }",
          "516: do_test 10.6 {",
          "517:   set res [list]",
          "518:   db eval { SELECT rowid FROM ft('4') } x {",
          "519:     db eval { SELECT * FROM t2 }",
          "520:     lappend res $x(rowid)",
          "521:   }",
          "522:   db eval COMMIT",
          "523:   set res",
          "524: } {3 5 7}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}