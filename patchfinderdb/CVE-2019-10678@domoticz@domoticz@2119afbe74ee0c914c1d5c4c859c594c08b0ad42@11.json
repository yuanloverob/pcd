{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "471d5a157da1decb95b6a4b92f9139640b1d8ac7",
      "candidate_info": {
        "commit_hash": "471d5a157da1decb95b6a4b92f9139640b1d8ac7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/471d5a157da1decb95b6a4b92f9139640b1d8ac7",
        "files": [
          "History.txt",
          "www/app/UtilityController.js",
          "www/i18n/domoticz-ar.json.gz",
          "www/i18n/domoticz-bg.json.gz",
          "www/i18n/domoticz-bs.json.gz",
          "www/i18n/domoticz-ca.json.gz",
          "www/i18n/domoticz-cs.json.gz",
          "www/i18n/domoticz-da.json.gz",
          "www/i18n/domoticz-de.json.gz",
          "www/i18n/domoticz-el.json.gz",
          "www/i18n/domoticz-en.json.gz",
          "www/i18n/domoticz-es.json.gz",
          "www/i18n/domoticz-et.json.gz",
          "www/i18n/domoticz-fa.json.gz",
          "www/i18n/domoticz-fi.json.gz",
          "www/i18n/domoticz-fr.json.gz",
          "www/i18n/domoticz-he.json.gz",
          "www/i18n/domoticz-hu.json.gz",
          "www/i18n/domoticz-is.json.gz",
          "www/i18n/domoticz-it.json.gz",
          "www/i18n/domoticz-lt.json.gz",
          "www/i18n/domoticz-lv.json.gz",
          "www/i18n/domoticz-mk.json.gz",
          "www/i18n/domoticz-nl.json.gz",
          "www/i18n/domoticz-no.json.gz",
          "www/i18n/domoticz-pl.json.gz",
          "www/i18n/domoticz-pt.json.gz",
          "www/i18n/domoticz-ro.json.gz",
          "www/i18n/domoticz-ru.json.gz",
          "www/i18n/domoticz-sk.json.gz",
          "www/i18n/domoticz-sl.json.gz",
          "www/i18n/domoticz-sq.json.gz",
          "www/i18n/domoticz-sr.json.gz",
          "www/i18n/domoticz-sv.json.gz",
          "www/i18n/domoticz-th.json.gz",
          "www/i18n/domoticz-tr.json.gz",
          "www/i18n/domoticz-uk.json.gz",
          "www/i18n/domoticz-zh.json.gz",
          "www/views/utility.html"
        ],
        "message": "- Implemented: RFXMeter, Option to specify meter divider",
        "before_after_code_files": [
          "www/app/UtilityController.js||www/app/UtilityController.js",
          "www/views/utility.html||www/views/utility.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/UtilityController.js||www/app/UtilityController.js": [
          "File: www/app/UtilityController.js -> www/app/UtilityController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:    $(\"#dialog-editdistancedevice\").dialog(\"open\");",
          "129:   }",
          "132:    if (typeof $scope.mytimer != 'undefined') {",
          "133:     $interval.cancel($scope.mytimer);",
          "134:     $scope.mytimer = undefined;",
          "",
          "[Removed Lines]",
          "131:   EditMeterDevice = function (idx, name, description, switchtype, meteroffset, valuequantity, valueunits) {",
          "",
          "[Added Lines]",
          "131:   EditMeterDevice = function (idx, name, description, switchtype, meteroffset, meterdivider, valuequantity, valueunits) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:    $(\"#dialog-editmeterdevice #devicename\").val(unescape(name));",
          "138:    $(\"#dialog-editmeterdevice #devicedescription\").val(unescape(description));",
          "139:    $(\"#dialog-editmeterdevice #combometertype\").val(switchtype);",
          "140:    $(\"#dialog-editmeterdevice #meteroffset\").val(meteroffset);",
          "141:    $(\"#dialog-editmeterdevice #valuequantity\").val(unescape(valuequantity));",
          "142:    $(\"#dialog-editmeterdevice #valueunits\").val(unescape(valueunits));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:    $(\"#dialog-editmeterdevice #meterdivider\").val(meterdivider);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "767:           xhtm += '<a class=\"btnsmall\" onclick=\"EditUtilityDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "768:          }",
          "769:          else {",
          "771:          }",
          "772:         }",
          "773:        }",
          "",
          "[Removed Lines]",
          "770:           xhtm += '<a class=\"btnsmall\" onclick=\"EditMeterDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\', ' + item.SwitchTypeVal + ',' + item.AddjValue + ',\\'' + escape(item.ValueQuantity) + '\\',\\'' + escape(item.ValueUnits) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "",
          "[Added Lines]",
          "771:           xhtm += '<a class=\"btnsmall\" onclick=\"EditMeterDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\', ' + item.SwitchTypeVal + ',' + item.AddjValue + ',' + item.AddjValue2 + ',\\'' + escape(item.ValueQuantity) + '\\',\\'' + escape(item.ValueUnits) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1248:     bValid = bValid && checkLength($(\"#dialog-editmeterdevice #devicename\"), 2, 100);",
          "1249:     if (bValid) {",
          "1250:      var meteroffset = $(\"#dialog-editmeterdevice #meteroffset\").val();",
          "1251:      if (meterType == 3) //Counter",
          "1252:      {",
          "1253:       devOptions.push(\"ValueQuantity:\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1252:      var meterdivider = $(\"#dialog-editmeterdevice #meterdivider\").val();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1265:       '&description=' + encodeURIComponent($(\"#dialog-editmeterdevice #devicedescription\").val()) +",
          "1266:       '&switchtype=' + meterType +",
          "1267:       '&addjvalue=' + meteroffset +",
          "1268:       '&used=true' +",
          "1269:       '&options=' + b64EncodeUnicode(devOptionsParam.join('')),",
          "1270:       async: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270:       '&addjvalue2=' + meterdivider +",
          "",
          "---------------"
        ],
        "www/views/utility.html||www/views/utility.html": [
          "File: www/views/utility.html -> www/views/utility.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:             <!--#embed metertypes -->",
          "55:           </select></td>",
          "56:   </tr>",
          "57:   <tr id=\"tdmeteroffset\">",
          "58:           <td align=\"right\"><label for=\"meteroffset\"><span data-i18n=\"Meter Offset\">Meter Offset</span>: </label></td>",
          "59:           <td><input type=\"text\" id=\"meteroffset\" style=\"width: 120px; padding: .4em;\" class=\"text ui-widget-content ui-corner-all\" /></td>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         <tr>",
          "58:           <td align=\"right\"><label for=\"meterdivider\"><span data-i18n=\"Counter Divider\">Counter Divider</span>: </label></td>",
          "59:           <td><input type=\"text\" id=\"meterdivider\" style=\"width: 60px; padding: .4em;\" class=\"text ui-widget-content ui-corner-all\" />&nbsp;<span data-i18n=\"(0 = Application default)\">(0 = Application default)</span></td>",
          "60:   </tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3897dbd1f49c7f9ab672fb03e8428f915ab8e9b9",
      "candidate_info": {
        "commit_hash": "3897dbd1f49c7f9ab672fb03e8428f915ab8e9b9",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3897dbd1f49c7f9ab672fb03e8428f915ab8e9b9",
        "files": [
          "www/app/ForecastController.js"
        ],
        "message": "Return darksky forecast in language properties",
        "before_after_code_files": [
          "www/app/ForecastController.js||www/app/ForecastController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/ForecastController.js||www/app/ForecastController.js": [
          "File: www/app/ForecastController.js -> www/app/ForecastController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   function init() {",
          "6:    $scope.MakeGlobalConfig();",
          "7:    var htmlcontent = '';",
          "9:    $('#maincontent').html(htmlcontent);",
          "10:    $('#maincontent').i18n();",
          "11:   };",
          "",
          "[Removed Lines]",
          "8:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '\"></iframe>';",
          "",
          "[Added Lines]",
          "8:    htmlcontent += '<iframe class=\"cIFrameLarge\" id=\"IMain\" src=\"//darksky.net/forecast/' + $scope.config.Latitude + ',' + $scope.config.Longitude + '?lang=' + $rootScope.config.language + '\"></iframe>';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62a36c72ad77cd33b895f33717ef974a82e94957",
      "candidate_info": {
        "commit_hash": "62a36c72ad77cd33b895f33717ef974a82e94957",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/62a36c72ad77cd33b895f33717ef974a82e94957",
        "files": [
          "main/RFXNames.cpp",
          "main/mainworker.cpp"
        ],
        "message": "Support for Westinghouse FAN",
        "before_after_code_files": [
          "main/RFXNames.cpp||main/RFXNames.cpp",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2046:   }",
          "2047:   break;",
          "2048:   case sTypeLucciAir:",
          "2049:   {",
          "2050:    switch (nValue)",
          "2051:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2049:   case sTypeWestinghouse:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3454:   }",
          "3455:   break;",
          "3456:   case sTypeLucciAir:",
          "3457:   {",
          "3458:    if (switchcmd == \"hi\")",
          "3459:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3458:   case sTypeWestinghouse:",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5736:   case sTypeLucciAirDCII:",
          "5737:    WriteMessage(\"subtype       = Lucci Air DC II\");",
          "5738:    break;",
          "5739:   default:",
          "5740:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pResponse->LIGHTING6.packettype, pResponse->LIGHTING6.subtype);",
          "5741:    WriteMessage(szTmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5739:   case sTypeWestinghouse:",
          "5740:    WriteMessage(\"subtype       = Westinghouse\");",
          "5741:    break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ad415420a78acccc7d19f9becda251c410d53ba",
      "candidate_info": {
        "commit_hash": "2ad415420a78acccc7d19f9becda251c410d53ba",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2ad415420a78acccc7d19f9becda251c410d53ba",
        "files": [
          "hardware/HarmonyHub.cpp",
          "hardware/Honeywell.cpp",
          "hardware/HttpPoller.cpp",
          "hardware/MQTT.cpp",
          "hardware/RelayNet.cpp",
          "hardware/plugins/PluginProtocols.cpp",
          "main/Camera.cpp",
          "main/SQLHelper.cpp",
          "main/WebServer.cpp",
          "notifications/NotificationBase.cpp",
          "notifications/NotificationPushsafer.cpp",
          "push/FibaroPush.cpp",
          "push/HttpPush.cpp",
          "webserver/Base64.cpp",
          "webserver/cWebem.cpp"
        ],
        "message": "Some code cleanup",
        "before_after_code_files": [
          "hardware/HarmonyHub.cpp||hardware/HarmonyHub.cpp",
          "hardware/Honeywell.cpp||hardware/Honeywell.cpp",
          "hardware/HttpPoller.cpp||hardware/HttpPoller.cpp",
          "hardware/MQTT.cpp||hardware/MQTT.cpp",
          "hardware/RelayNet.cpp||hardware/RelayNet.cpp",
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "main/Camera.cpp||main/Camera.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "notifications/NotificationBase.cpp||notifications/NotificationBase.cpp",
          "notifications/NotificationPushsafer.cpp||notifications/NotificationPushsafer.cpp",
          "push/FibaroPush.cpp||push/FibaroPush.cpp",
          "push/HttpPush.cpp||push/HttpPush.cpp",
          "webserver/Base64.cpp||webserver/Base64.cpp",
          "webserver/cWebem.cpp||webserver/cWebem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/HarmonyHub.cpp||hardware/HarmonyHub.cpp": [
          "File: hardware/HarmonyHub.cpp -> hardware/HarmonyHub.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:  szCred.append(szUserName);",
          "607:  szCred.append(\"\\0\");",
          "608:  szCred.append(szPassword);",
          "610:  szAuth.append(\"</auth>\");",
          "611:  return WriteToSocket(&szAuth);",
          "612: }",
          "",
          "[Removed Lines]",
          "609:  szAuth.append(base64_encode((const unsigned char*)szCred.c_str(), static_cast<unsigned int>(szCred.length())));",
          "",
          "[Added Lines]",
          "609:  szAuth.append(base64_encode(szCred));",
          "",
          "---------------"
        ],
        "hardware/Honeywell.cpp||hardware/Honeywell.cpp": [
          "File: hardware/Honeywell.cpp -> hardware/Honeywell.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  std::string auth = HONEYWELL_APIKEY;",
          "148:  auth += \":\";",
          "149:  auth += HONEYWELL_APISECRET;",
          "153:  std::vector<std::string> headers;",
          "",
          "[Removed Lines]",
          "150:  std::string encodedAuth = base64_encode((const unsigned char *)auth.c_str(), auth.length());",
          "",
          "[Added Lines]",
          "150:  std::string encodedAuth = base64_encode(auth);",
          "",
          "---------------"
        ],
        "hardware/HttpPoller.cpp||hardware/HttpPoller.cpp": [
          "File: hardware/HttpPoller.cpp -> hardware/HttpPoller.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   {",
          "131:    auth += m_password;",
          "132:   }",
          "134:   ExtraHeaders.push_back(\"Authorization:Basic \" + encodedAuth);",
          "135:  }",
          "",
          "[Removed Lines]",
          "133:   std::string encodedAuth = base64_encode((const unsigned char *)auth.c_str(), auth.length());",
          "",
          "[Added Lines]",
          "133:   std::string encodedAuth = base64_encode(auth);",
          "",
          "---------------"
        ],
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp"
        ],
        "hardware/RelayNet.cpp||hardware/RelayNet.cpp": [
          "File: hardware/RelayNet.cpp -> hardware/RelayNet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:    sLogin << m_username << \":\" << m_password;",
          "711:    ExtraHeaders.push_back(\"Authorization: Basic \" + sAccessToken);",
          "",
          "[Removed Lines]",
          "710:    sAccessToken = base64_encode((const unsigned char *)(sLogin.str().c_str()), strlen(sLogin.str().c_str()));",
          "",
          "[Added Lines]",
          "710:    sAccessToken = base64_encode(sLogin.str());",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:     {",
          "554:      auth += m_Password;",
          "555:     }",
          "557:     sHttp += \"Authorization:Basic \" + encodedAuth + \"\\r\\n\";",
          "558:    }",
          "",
          "[Removed Lines]",
          "556:     std::string encodedAuth = base64_encode((const unsigned char *)auth.c_str(), auth.length());",
          "",
          "[Added Lines]",
          "556:     std::string encodedAuth = base64_encode(auth);",
          "",
          "---------------"
        ],
        "main/Camera.cpp||main/Camera.cpp": [
          "File: main/Camera.cpp -> main/Camera.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:   filedata.insert(filedata.begin(), camimage.begin(), camimage.end());",
          "345:   std::string imgstring;",
          "346:   imgstring.insert(imgstring.end(), filedata.begin(), filedata.end());",
          "348:   imgstring = WrapBase64(imgstring);",
          "350:   htmlMsg +=",
          "",
          "[Removed Lines]",
          "347:   imgstring = base64_encode((const unsigned char*)imgstring.c_str(), filedata.size());",
          "",
          "[Added Lines]",
          "347:   imgstring = base64_encode(imgstring);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:      (senabled == \"true\") ? 1 : 0,",
          "478:      address.c_str(),",
          "479:      port,",
          "482:      imageurl.c_str(),",
          "483:      cprotocol",
          "484:     );",
          "",
          "[Removed Lines]",
          "480:      base64_encode((const unsigned char*)username.c_str(), username.size()).c_str(),",
          "481:      base64_encode((const unsigned char*)password.c_str(), password.size()).c_str(),",
          "",
          "[Added Lines]",
          "480:      base64_encode(username).c_str(),",
          "481:      base64_encode(password).c_str(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:      (senabled == \"true\") ? 1 : 0,",
          "530:      address.c_str(),",
          "531:      port,",
          "534:      imageurl.c_str(),",
          "535:      cprotocol,",
          "536:      idx.c_str()",
          "",
          "[Removed Lines]",
          "532:      base64_encode((const unsigned char*)username.c_str(), username.size()).c_str(),",
          "533:      base64_encode((const unsigned char*)password.c_str(), password.size()).c_str(),",
          "",
          "[Added Lines]",
          "532:      base64_encode(username).c_str(),",
          "533:      base64_encode(password).c_str(),",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "896:     for (const auto & itt : result)",
          "897:     {",
          "898:      std::vector<std::string> sd = itt;",
          "901:      safe_query(\"UPDATE Cameras SET Username='%q', Password='%q' WHERE (ID=='%q')\",",
          "902:       camuser.c_str(), campwd.c_str(), sd[0].c_str());",
          "903:     }",
          "",
          "[Removed Lines]",
          "899:      std::string camuser = base64_encode((const unsigned char*)sd[1].c_str(), sd[1].size());",
          "900:      std::string campwd = base64_encode((const unsigned char*)sd[2].c_str(), sd[2].size());",
          "",
          "[Added Lines]",
          "899:      std::string camuser = base64_encode(sd[1]);",
          "900:      std::string campwd = base64_encode(sd[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2125:    if ((sValue.size() > 100) || (sValue.empty()))",
          "2126:    {",
          "2127:     sValue = \"application/json\";",
          "2129:     UpdatePreferencesVar(\"HTTPPostContentType\", sencoded);",
          "2130:    }",
          "2131:   }",
          "",
          "[Removed Lines]",
          "2128:     std::string sencoded = base64_encode((const unsigned char*)sValue.c_str(), sValue.size());",
          "",
          "[Added Lines]",
          "2128:     std::string sencoded = base64_encode(sValue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2150:      std::vector<std::string> sd = itt;",
          "2151:      std::string id = sd[0];",
          "2152:      std::string extra = sd[1];",
          "2154:      szQuery2.clear();",
          "2155:      szQuery2.str(\"\");",
          "2156:      szQuery2 << \"UPDATE Hardware SET Mode1=0, Extra='%s' WHERE (ID=\" << id << \")\";",
          "",
          "[Removed Lines]",
          "2153:      std::string extraBase64 = base64_encode((const unsigned char *)extra.c_str(), extra.length());",
          "",
          "[Added Lines]",
          "2153:      std::string extraBase64 = base64_encode(extra);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2993:  if ((!GetPreferencesVar(\"HTTPURL\", sValue)) || (sValue.empty()))",
          "2994:  {",
          "2995:   sValue = \"https://www.somegateway.com/pushurl.php?username=#FIELD1&password=#FIELD2&apikey=#FIELD3&from=#FIELD4&to=#TO&message=#MESSAGE\";",
          "2997:   UpdatePreferencesVar(\"HTTPURL\", sencoded);",
          "2998:  }",
          "2999:  if ((!GetPreferencesVar(\"HTTPPostContentType\", sValue)) || (sValue.empty()))",
          "3000:  {",
          "3001:   sValue = \"application/json\";",
          "3003:   UpdatePreferencesVar(\"HTTPPostContentType\", sencoded);",
          "3004:  }",
          "3005:  if (!GetPreferencesVar(\"ShowUpdateEffect\", nValue))",
          "",
          "[Removed Lines]",
          "2996:   std::string sencoded = base64_encode((const unsigned char*)sValue.c_str(), sValue.size());",
          "3002:   std::string sencoded = base64_encode((const unsigned char*)sValue.c_str(), sValue.size());",
          "",
          "[Added Lines]",
          "2996:   std::string sencoded = base64_encode(sValue);",
          "3002:   std::string sencoded = base64_encode(sValue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8513:    i++;",
          "8515:    std::string optionName = itt.first.c_str();",
          "8517:    ssoptions << optionName << \":\" << optionValue;",
          "8518:    if (i < count) {",
          "8519:     ssoptions << \";\";",
          "",
          "[Removed Lines]",
          "8516:    std::string optionValue = base64_encode((const unsigned char*)itt.second.c_str(), itt.second.size());",
          "",
          "[Added Lines]",
          "8516:    std::string optionValue = base64_encode(itt.second);",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6153:     m_sql.safe_query(",
          "6154:      \"INSERT INTO Users (Active, Username, Password, Rights, RemoteSharing, TabsEnabled) VALUES (%d,'%q','%q','%d','%d','%d')\",",
          "6155:      (senabled == \"true\") ? 1 : 0,",
          "6157:      password.c_str(),",
          "6158:      rights,",
          "6159:      (sRemoteSharing == \"true\") ? 1 : 0,",
          "",
          "[Removed Lines]",
          "6156:      base64_encode((const unsigned char*)username.c_str(), username.size()).c_str(),",
          "",
          "[Added Lines]",
          "6156:      base64_encode(username).c_str(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6196:       return;",
          "6197:      }",
          "6198:     }",
          "6202:     std::string sOldUsername;",
          "",
          "[Removed Lines]",
          "6199:     std::string sHashedUsername = base64_encode((const unsigned char*)username.c_str(), username.size()).c_str();",
          "",
          "[Added Lines]",
          "6199:     std::string sHashedUsername = base64_encode(username);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7645:     WebUserName = \"\";",
          "7646:     WebPassword = \"\";",
          "7647:    }",
          "7649:    if (WebPassword.size() != 32)",
          "7650:    {",
          "7651:     WebPassword = GenerateMD5Hash(WebPassword);",
          "",
          "[Removed Lines]",
          "7648:    WebUserName = base64_encode((const unsigned char*)WebUserName.c_str(), WebUserName.size());",
          "",
          "[Added Lines]",
          "7648:    WebUserName = base64_encode(WebUserName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7926:    if (md_userid != pf_userid || md_password != pf_password || md_subsystems != pf_subsystems) {",
          "7927:     m_sql.UpdatePreferencesVar(\"MyDomoticzUserId\", md_userid);",
          "7928:     if (md_password != pf_password) {",
          "7930:      m_sql.UpdatePreferencesVar(\"MyDomoticzPassword\", md_password);",
          "7931:     }",
          "7932:     m_sql.UpdatePreferencesVar(\"MyDomoticzSubsystems\", md_subsystems);",
          "",
          "[Removed Lines]",
          "7929:      md_password = base64_encode((unsigned char const*)md_password.c_str(), md_password.size());",
          "",
          "[Added Lines]",
          "7929:      md_password = base64_encode(md_password);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7943:    int iIFTTTEnabled = (IFTTTEnabled == \"on\" ? 1 : 0);",
          "7944:    m_sql.UpdatePreferencesVar(\"IFTTTEnabled\", iIFTTTEnabled);",
          "7945:    std::string szKey = request::findValue(&req, \"IFTTTAPI\");",
          "7948:    m_notifications.LoadConfig();",
          "7949: #ifdef ENABLE_PYTHON",
          "",
          "[Removed Lines]",
          "7946:    m_sql.UpdatePreferencesVar(\"IFTTTAPI\", base64_encode((unsigned char const*)szKey.c_str(), szKey.size()));",
          "",
          "[Added Lines]",
          "7946:    m_sql.UpdatePreferencesVar(\"IFTTTAPI\", base64_encode(szKey));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8521:      double AddjMulti2 = atof(sd[18].c_str());",
          "8522:      int LastLevel = atoi(sd[19].c_str());",
          "8523:      int CustomImage = atoi(sd[20].c_str());",
          "8526:      int iProtected = atoi(sd[23].c_str());",
          "8528:      std::string Description = sd[27];",
          "",
          "[Removed Lines]",
          "8524:      std::string strParam1 = base64_encode((const unsigned char*)sd[21].c_str(), sd[21].size());",
          "8525:      std::string strParam2 = base64_encode((const unsigned char*)sd[22].c_str(), sd[22].size());",
          "",
          "[Added Lines]",
          "8524:      std::string strParam1 = base64_encode(sd[21]);",
          "8525:      std::string strParam2 = base64_encode(sd[22]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8733:        std::string forecast_url = pWHardware->GetForecastURL();",
          "8734:        if (forecast_url != \"\")",
          "8735:        {",
          "8737:        }",
          "8738:       }",
          "8739:       else if (pHardware->HwdType == HTYPE_DarkSky)",
          "",
          "[Removed Lines]",
          "8736:         root[\"result\"][ii][\"forecast_url\"] = base64_encode((const unsigned char*)forecast_url.c_str(), forecast_url.size());",
          "",
          "[Added Lines]",
          "8736:         root[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8742:        std::string forecast_url = pWHardware->GetForecastURL();",
          "8743:        if (forecast_url != \"\")",
          "8744:        {",
          "8746:        }",
          "8747:       }",
          "8748:       else if (pHardware->HwdType == HTYPE_AccuWeather)",
          "",
          "[Removed Lines]",
          "8745:         root[\"result\"][ii][\"forecast_url\"] = base64_encode((const unsigned char*)forecast_url.c_str(), forecast_url.size());",
          "",
          "[Added Lines]",
          "8745:         root[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8751:        std::string forecast_url = pWHardware->GetForecastURL();",
          "8752:        if (forecast_url != \"\")",
          "8753:        {",
          "8755:        }",
          "8756:       }",
          "8757:       else if (pHardware->HwdType == HTYPE_OpenWeatherMap)",
          "",
          "[Removed Lines]",
          "8754:         root[\"result\"][ii][\"forecast_url\"] = base64_encode((const unsigned char*)forecast_url.c_str(), forecast_url.size());",
          "",
          "[Added Lines]",
          "8754:         root[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8760:        std::string forecast_url = pWHardware->GetForecastURL();",
          "8761:        if (forecast_url != \"\")",
          "8762:        {",
          "8764:        }",
          "8765:       }",
          "8766:      }",
          "",
          "[Removed Lines]",
          "8763:         root[\"result\"][ii][\"forecast_url\"] = base64_encode((const unsigned char*)forecast_url.c_str(), forecast_url.size());",
          "",
          "[Added Lines]",
          "8763:         root[\"result\"][ii][\"forecast_url\"] = base64_encode(forecast_url);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9122:        root[\"result\"][ii][\"TypeImg\"] = \"Light\";",
          "9123:        root[\"result\"][ii][\"SelectorStyle\"] = atoi(selectorStyle.c_str());",
          "9124:        root[\"result\"][ii][\"LevelOffHidden\"] = (levelOffHidden == \"true\");",
          "9127:       }",
          "9128:       sprintf(szData, \"%s\", lstatus.c_str());",
          "9129:       root[\"result\"][ii][\"Data\"] = szData;",
          "",
          "[Removed Lines]",
          "9125:        root[\"result\"][ii][\"LevelNames\"] = base64_encode((const unsigned char*)levelNames.c_str(), levelNames.size());",
          "9126:        root[\"result\"][ii][\"LevelActions\"] = base64_encode((const unsigned char*)levelActions.c_str(), levelActions.size());",
          "",
          "[Added Lines]",
          "9125:        root[\"result\"][ii][\"LevelNames\"] = base64_encode(levelNames);",
          "9126:        root[\"result\"][ii][\"LevelActions\"] = base64_encode(levelActions);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "11230:      unsigned char scenetype = atoi(sd[5].c_str());",
          "11231:      int iProtected = atoi(sd[7].c_str());",
          "11236:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "11237:      root[\"result\"][ii][\"Name\"] = sName;",
          "",
          "[Removed Lines]",
          "11233:      std::string onaction = base64_encode((const unsigned char*)sd[8].c_str(), sd[8].size());",
          "11234:      std::string offaction = base64_encode((const unsigned char*)sd[9].c_str(), sd[9].size());",
          "",
          "[Added Lines]",
          "11233:      std::string onaction = base64_encode(sd[8]);",
          "11234:      std::string offaction = base64_encode(sd[9]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "17286:     m_sql.safe_query(",
          "17287:      \"INSERT INTO UserSessions (SessionID, Username, AuthToken, ExpirationDate, RemoteHost) VALUES ('%q', '%q', '%q', '%q', '%q')\",",
          "17288:      session.id.c_str(),",
          "17290:      session.auth_token.c_str(),",
          "17291:      szExpires,",
          "17292:      remote_host.c_str());",
          "",
          "[Removed Lines]",
          "17289:      base64_encode((const unsigned char*)session.username.c_str(), session.username.size()).c_str(),",
          "",
          "[Added Lines]",
          "17289:      base64_encode(session.username).c_str(),",
          "",
          "---------------"
        ],
        "notifications/NotificationBase.cpp||notifications/NotificationBase.cpp": [
          "File: notifications/NotificationBase.cpp -> notifications/NotificationBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:    std::string Value = CURLEncode::URLDecode(std::string(request::findValue(&req, iter3->first.c_str())));",
          "194:    if (save) {",
          "196:     m_sql.UpdatePreferencesVar(iter3->first, ValueBase64);",
          "197:    }",
          "198:   }",
          "",
          "[Removed Lines]",
          "195:     std::string ValueBase64 = base64_encode((const unsigned char*)Value.c_str(), Value.size());",
          "",
          "[Added Lines]",
          "195:     std::string ValueBase64 = base64_encode(Value);",
          "",
          "---------------"
        ],
        "notifications/NotificationPushsafer.cpp||notifications/NotificationPushsafer.cpp": [
          "File: notifications/NotificationPushsafer.cpp -> notifications/NotificationPushsafer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:    if (HTTPClient::GETBinary(CURLEncode::URLDecode(PS_p), ExtraHeadersBinary, camimage, 10))",
          "83:    {",
          "84:     std::string base64ImageString(camimage.begin(), camimage.end());",
          "86:     sPostData << \"&k=\" << _apikey << \"&d=\" << PS_d << \"&i=\" << PS_i << \"&s=\" << PS_s << \"&v=\" << PS_v << \"&t=\" << PS_t << \"&m=\" << PS_m << \"&p=data:image/jpeg;base64,\" << base64ImageString << \"&u=\" << PS_u << \"&ut=\" << PS_ut << \"&l=\" << PS_l;",
          "87:    }",
          "88:    else",
          "",
          "[Removed Lines]",
          "85:     base64ImageString = base64_encode((const unsigned char*)base64ImageString.c_str(), base64ImageString.size());",
          "",
          "[Added Lines]",
          "85:     base64ImageString = base64_encode(base64ImageString);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:    if (HTTPClient::GETBinary(CURLEncode::URLDecode(_apiuser.c_str()), ExtraHeadersBinary, camimage, 10))",
          "104:    {",
          "105:     std::string base64ImageString(camimage.begin(), camimage.end());",
          "107:     sPostData << \"i=12&k=\" << _apikey << \"&t=\" << cSubject << \"&m=\" << Text << \"&p=data:image/jpeg;base64,\" << base64ImageString;",
          "108:    }",
          "109:    else",
          "",
          "[Removed Lines]",
          "106:     base64ImageString = base64_encode((const unsigned char*)base64ImageString.c_str(), base64ImageString.size());",
          "",
          "[Added Lines]",
          "106:     base64ImageString = base64_encode(base64ImageString);",
          "",
          "---------------"
        ],
        "push/FibaroPush.cpp||push/FibaroPush.cpp": [
          "File: push/FibaroPush.cpp -> push/FibaroPush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:      std::stringstream sstr;",
          "143:      sstr << fibaroUsername << \":\" << fibaroPassword;",
          "145:      ExtraHeaders.push_back(\"Authorization:Basic \" + m_AccessToken);",
          "146:     }",
          "147:     else {",
          "",
          "[Removed Lines]",
          "144:      std::string m_AccessToken = base64_encode((const unsigned char *)(sstr.str().c_str()), strlen(sstr.str().c_str()));",
          "",
          "[Added Lines]",
          "144:      std::string m_AccessToken = base64_encode(sstr.str());",
          "",
          "---------------"
        ],
        "push/HttpPush.cpp||push/HttpPush.cpp": [
          "File: push/HttpPush.cpp -> push/HttpPush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     if (httpAuthInt == 1) {   // BASIC authentication",
          "207:      std::stringstream sstr;",
          "208:      sstr << httpAuthBasicLogin << \":\" << httpAuthBasicPassword;",
          "210:      ExtraHeaders.push_back(\"Authorization:Basic \" + m_AccessToken);",
          "211:     }",
          "212:     sendValue = CURLEncode::URLEncode(sendValue);",
          "",
          "[Removed Lines]",
          "209:      std::string m_AccessToken = base64_encode((const unsigned char *)(sstr.str().c_str()), strlen(sstr.str().c_str()));",
          "",
          "[Added Lines]",
          "209:      std::string m_AccessToken = base64_encode(sstr.str());",
          "",
          "---------------"
        ],
        "webserver/Base64.cpp||webserver/Base64.cpp": [
          "File: webserver/Base64.cpp -> webserver/Base64.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:    3. This notice may not be removed or altered from any source distribution.",
          "24:    Ren\ufffd Nyffenegger rene.nyffenegger@adp-gmbh.ch",
          "26:    Usages:",
          "27:     #include \"base64.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:    Extended by GizMoCuz",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     int main() {",
          "31:     const std::string s = \"ADP GmbH\\nAnalyse Design & Programmierung\\nGesellschaft mit beschr\ufffdnkter Haftung\" ;",
          "34:     std::string decoded = base64_decode(encoded);",
          "36:     std::cout << \"encoded: \" << encoded << std::endl;",
          "",
          "[Removed Lines]",
          "33:     std::string encoded = base64_encode(reinterpret_cast<const unsigned char*>(s.c_str()), s.length());",
          "",
          "[Added Lines]",
          "34:     std::string encoded = base64_encode(s);",
          "",
          "---------------"
        ],
        "webserver/cWebem.cpp||webserver/cWebem.cpp": [
          "File: webserver/cWebem.cpp -> webserver/cWebem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1336:    ss << u;",
          "1337:    randomValue = ss.str();",
          "1341:    _log.Debug(DEBUG_WEBSERVER, \"[web:%s] generate new session id token %s\", myWebem->GetPort().c_str(), sessionId.c_str());",
          "",
          "[Removed Lines]",
          "1339:    std::string sessionId = GenerateMD5Hash(base64_encode((const unsigned char*)randomValue.c_str(), randomValue.size()));",
          "",
          "[Added Lines]",
          "1339:    std::string sessionId = GenerateMD5Hash(base64_encode(randomValue));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1354:    ss << u;",
          "1355:    randomValue = ss.str();",
          "1359:    _log.Debug(DEBUG_WEBSERVER, \"[web:%s] generate new authentication token %s\", myWebem->GetPort().c_str(), authToken.c_str());",
          "",
          "[Removed Lines]",
          "1357:    std::string authToken = base64_encode((const unsigned char*)randomValue.c_str(), randomValue.size());",
          "",
          "[Added Lines]",
          "1357:    std::string authToken = base64_encode(randomValue);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61fed8ad433b5fcd8983180fd3a8518b821e5765",
      "candidate_info": {
        "commit_hash": "61fed8ad433b5fcd8983180fd3a8518b821e5765",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/61fed8ad433b5fcd8983180fd3a8518b821e5765",
        "files": [
          "www/app/DashboardController.js",
          "www/app/UtilityController.js",
          "www/js/domoticz.js"
        ],
        "message": "Fixed Fan/RMP sensor",
        "before_after_code_files": [
          "www/app/DashboardController.js||www/app/DashboardController.js",
          "www/app/UtilityController.js||www/app/UtilityController.js",
          "www/js/domoticz.js||www/js/domoticz.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/DashboardController.js||www/app/DashboardController.js": [
          "File: www/app/DashboardController.js -> www/app/DashboardController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1449:          (item.SubType == \"A/D\") ||",
          "1450:          (item.SubType == \"Thermostat Mode\") ||",
          "1451:          (item.SubType == \"Thermostat Fan Mode\") ||",
          "1452:          (item.SubType == \"Smartwares\") ||",
          "1453:          (item.SubType == \"Waterflow\") ||",
          "1454:          (item.SubType == \"Sound Level\") ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1452:          (item.SubType == \"Fan\") ||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1490:            (item.Type == \"Weight\") ||",
          "1491:            (item.Type == \"Usage\") ||",
          "1492:            (item.SubType == \"Percentage\") ||",
          "1494:            (item.SubType == \"Soil Moisture\") ||",
          "1495:            (item.SubType == \"Leaf Wetness\") ||",
          "1496:            (item.SubType == \"Voltage\") ||",
          "",
          "[Removed Lines]",
          "1493:            (item.Type == \"Fan\") ||",
          "",
          "[Added Lines]",
          "1494:            (item.SubType == \"Fan\") ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1606:            status = \"\";",
          "1607:            bigtext = item.Data;",
          "1608:           }",
          "1610:            status = \"\";",
          "1611:            bigtext = item.Data;",
          "1612:           }",
          "",
          "[Removed Lines]",
          "1609:           else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "1610:           else if (item.SubType == \"Fan\") {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3437:          (item.SubType == \"A/D\") ||",
          "3438:          (item.SubType == \"Thermostat Mode\") ||",
          "3439:          (item.SubType == \"Thermostat Fan Mode\") ||",
          "3440:          (item.SubType == \"Smartwares\") ||",
          "3441:          (item.SubType == \"Waterflow\") ||",
          "3442:          (item.SubType == \"Sound Level\") ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3438:          (item.SubType == \"Fan\") ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3511:          else if (item.SubType == \"Custom Sensor\") {",
          "3512:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/' + item.Image + '48_On.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "3513:          }",
          "3515:           vname = '<img src=\"images/next.png\" class=\"fanicon\" onclick=\"ShowFanLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3516:          }",
          "3517:          else if (item.Type == \"Lux\") {",
          "",
          "[Removed Lines]",
          "3514:          else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "3513:          else if (item.SubType == \"Fan\") {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3574:           (item.Type == \"Weight\") ||",
          "3575:           (item.Type == \"Usage\") ||",
          "3576:           (item.SubType == \"Percentage\") ||",
          "3578:           (item.SubType == \"Soil Moisture\") ||",
          "3579:           (item.SubType == \"Leaf Wetness\") ||",
          "3580:           (item.SubType == \"Voltage\") ||",
          "",
          "[Removed Lines]",
          "3577:           (item.Type == \"Fan\") ||",
          "",
          "[Added Lines]",
          "3576:           (item.SubType == \"Fan\") ||",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3708:           (item.Type == \"Weight\") ||",
          "3709:           (item.Type == \"Usage\") ||",
          "3710:           (item.SubType == \"Percentage\") ||",
          "3712:           (item.SubType == \"Soil Moisture\") ||",
          "3713:           (item.SubType == \"Leaf Wetness\") ||",
          "3714:           (item.SubType == \"Voltage\") ||",
          "",
          "[Removed Lines]",
          "3711:           (item.Type == \"Fan\") ||",
          "",
          "[Added Lines]",
          "3710:           (item.SubType == \"Fan\") ||",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3800:           imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Percentage48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3801:           statushtml = \"\";",
          "3802:          }",
          "3804:           imagehtml += 'Fan48_On.png\" class=\"lcursor fanicon\" onclick=\"ShowFanLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\" height=\"40\" width=\"40\"></td>\\n';",
          "3805:           statushtml = \"\";",
          "3806:          }",
          "",
          "[Removed Lines]",
          "3803:          else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "3802:          else if (item.SubType == \"Fan\") {",
          "",
          "---------------"
        ],
        "www/app/UtilityController.js||www/app/UtilityController.js": [
          "File: www/app/UtilityController.js -> www/app/UtilityController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:          status = \"\";",
          "336:          bigtext = item.Data;",
          "337:         }",
          "339:          status = \"\";",
          "340:          bigtext = item.Data;",
          "341:         }",
          "",
          "[Removed Lines]",
          "338:         else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "338:         else if (item.SubType == \"Fan\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:        else if (item.SubType == \"Percentage\") {",
          "572:         xhtm += item.Data;",
          "573:        }",
          "575:         xhtm += item.Data;",
          "576:        }",
          "577:        else if (item.SubType == \"Soil Moisture\") {",
          "",
          "[Removed Lines]",
          "574:        else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "574:        else if (item.SubType == \"Fan\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789:          xhtm += '<a class=\"btnsmall\" onclick=\"EditUtilityDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "790:         }",
          "791:        }",
          "793:         xhtm += '<a class=\"btnsmall\" onclick=\"ShowFanLog(\\'#utilitycontent\\',\\'ShowUtilities\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\" data-i18n=\"Log\">Log</a> ';",
          "794:         if (permissions.hasPermission(\"Admin\")) {",
          "795:          xhtm += '<a class=\"btnsmall\" onclick=\"EditUtilityDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "",
          "[Removed Lines]",
          "792:        else if (item.Type == \"Fan\") {",
          "",
          "[Added Lines]",
          "792:        else if (item.SubType == \"Fan\") {",
          "",
          "---------------"
        ],
        "www/js/domoticz.js||www/js/domoticz.js": [
          "File: www/js/domoticz.js -> www/js/domoticz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5477:    title: {",
          "5478:     text: 'RPM'",
          "5479:    },",
          "5481:    minorGridLineWidth: 0,",
          "5482:    alternateGridColor: null",
          "5483:   },",
          "",
          "[Removed Lines]",
          "5480:    min: 0,",
          "",
          "[Added Lines]",
          "5480:    allowDecimals: false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5582:    title: {",
          "5583:     text: 'RPM'",
          "5584:    },",
          "5586:    minorGridLineWidth: 0,",
          "5587:    alternateGridColor: null",
          "5588:   },",
          "",
          "[Removed Lines]",
          "5585:    min: 0,",
          "",
          "[Added Lines]",
          "5585:    allowDecimals: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5696:    title: {",
          "5697:     text: 'RPM'",
          "5698:    },",
          "5700:    minorGridLineWidth: 0,",
          "5701:    alternateGridColor: null",
          "5702:   },",
          "",
          "[Removed Lines]",
          "5699:    min: 0,",
          "",
          "[Added Lines]",
          "5699:    allowDecimals: false,",
          "",
          "---------------"
        ]
      }
    }
  ]
}