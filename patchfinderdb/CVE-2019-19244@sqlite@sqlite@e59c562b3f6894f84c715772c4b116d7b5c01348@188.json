{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "643d855da9625dd18f784674792dadd9697bb3ad",
      "candidate_info": {
        "commit_hash": "643d855da9625dd18f784674792dadd9697bb3ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/643d855da9625dd18f784674792dadd9697bb3ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Refactor the sqlite3_normalized_sql() implementation. This is a work-in-progress. There are still issues.\n\nFossilOrigin-Name: a4c890b0af9786295e6df05022009d8946550adb873535c610be805c2b7a4083",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   return rc;",
          "710: }",
          "",
          "[Removed Lines]",
          "712: #ifdef SQLITE_ENABLE_NORMALIZE",
          "721: static int estimateNormalizedSize(",
          "724: ){",
          "725:   int nOut = nSql + 4;",
          "726:   const char *z = zSql;",
          "727:   while( nOut<nSql*5 ){",
          "728:     while( z[0]!=0 && z[0]!='I' && z[0]!='i' ){ z++; }",
          "729:     if( z[0]==0 ) break;",
          "730:     z++;",
          "731:     if( z[0]!='N' && z[0]!='n' ) break;",
          "732:     z++;",
          "733:     while( sqlite3Isspace(z[0]) ){ z++; }",
          "734:     if( z[0]!='(' ) break;",
          "735:     z++;",
          "737:   }",
          "738:   return nOut;",
          "739: }",
          "747: static void copyNormalizedToken(",
          "754: ){",
          "755:   int bQuoted = tokenFlags & SQLITE_TOKEN_QUOTED;",
          "756:   int bKeyword = tokenFlags & SQLITE_TOKEN_KEYWORD;",
          "757:   int j = *piOut, k = 0;",
          "758:   for(; k<nToken; k++){",
          "759:     if( bQuoted ){",
          "760:       if( k==0 && iIn>0 ){",
          "761:         zOut[j++] = '\"';",
          "762:         continue;",
          "763:       }else if( k==nToken-1 ){",
          "764:         zOut[j++] = '\"';",
          "765:         continue;",
          "766:       }",
          "767:     }",
          "768:     if( bKeyword ){",
          "769:       zOut[j++] = sqlite3Toupper(zSql[iIn+k]);",
          "770:     }else{",
          "771:       zOut[j++] = sqlite3Tolower(zSql[iIn+k]);",
          "772:     }",
          "773:   }",
          "775: }",
          "782: char *sqlite3Normalize(",
          "786: ){",
          "799:   db = sqlite3VdbeDb(pVdbe);",
          "800:   assert( db!=0 );",
          "801:   if( zSql==0 ) return 0;",
          "802:   nZ = estimateNormalizedSize(zSql, nSql);",
          "803:   z = sqlite3DbMallocRawNN(db, nZ);",
          "804:   if( z==0 ) goto normalizeError;",
          "805:   for(i=j=0; i<nSql && zSql[i]; i+=n){",
          "806:     int flags = 0;",
          "807:     if( tokenType!=TK_SPACE ) prevTokenType = tokenType;",
          "808:     n = sqlite3GetTokenNormalized((unsigned char*)zSql+i, &tokenType, &flags);",
          "809:     switch( tokenType ){",
          "810:       case TK_SPACE: {",
          "811:         break;",
          "812:       }",
          "813:       case TK_ILLEGAL: {",
          "814:         goto normalizeError;",
          "815:       }",
          "816:       case TK_STRING:",
          "817:       case TK_INTEGER:",
          "818:       case TK_FLOAT:",
          "819:       case TK_VARIABLE:",
          "820:       case TK_BLOB: {",
          "821:         z[j++] = '?';",
          "822:         break;",
          "823:       }",
          "824:       case TK_LP:",
          "825:       case TK_RP: {",
          "826:         if( tokenType==TK_LP ){",
          "827:           nParen++;",
          "828:           if( prevTokenType==TK_IN ){",
          "829:             iStartIN = j;",
          "830:             nParenAtIN = nParen;",
          "831:           }",
          "832:         }else{",
          "833:           if( iStartIN>0 && nParen==nParenAtIN ){",
          "834:             assert( iStartIN+6<nZ );",
          "835:             memcpy(z+iStartIN+1, \"?,?,?\", 5);",
          "836:             j = iStartIN+6;",
          "837:             assert( nZ-1-j>=0 );",
          "838:             assert( nZ-1-j<nZ );",
          "839:             memset(z+j, 0, nZ-1-j);",
          "840:             iStartIN = 0;",
          "841:           }",
          "842:           nParen--;",
          "843:         }",
          "844:         assert( nParen>=0 );",
          "846:       }",
          "847:       case TK_MINUS:",
          "848:       case TK_SEMI:",
          "849:       case TK_PLUS:",
          "850:       case TK_STAR:",
          "851:       case TK_SLASH:",
          "852:       case TK_REM:",
          "853:       case TK_EQ:",
          "854:       case TK_LE:",
          "855:       case TK_NE:",
          "856:       case TK_LSHIFT:",
          "857:       case TK_LT:",
          "858:       case TK_RSHIFT:",
          "859:       case TK_GT:",
          "860:       case TK_GE:",
          "861:       case TK_BITOR:",
          "862:       case TK_CONCAT:",
          "863:       case TK_COMMA:",
          "864:       case TK_BITAND:",
          "865:       case TK_BITNOT:",
          "866:       case TK_DOT:",
          "867:       case TK_IN:",
          "868:       case TK_IS:",
          "869:       case TK_NOT:",
          "870:       case TK_NULL:",
          "871:       case TK_ID: {",
          "872:         if( tokenType==TK_NULL ){",
          "873:           if( prevTokenType==TK_IS || prevTokenType==TK_NOT ){",
          "875:           }else{",
          "877:             z[j++] = '?';",
          "878:             break;",
          "879:           }",
          "880:         }",
          "881:         if( j>0 && sqlite3IsIdChar(z[j-1]) && sqlite3IsIdChar(zSql[i]) ){",
          "882:           z[j++] = ' ';",
          "883:         }",
          "884:         if( tokenType==TK_ID ){",
          "885:           if( zSql[i]=='\"'",
          "886:            && sqlite3VdbeUsesDoubleQuotedString(db,pVdbe,zSql+i,n)",
          "887:           ){",
          "888:             z[j++] = '?';",
          "889:             break;",
          "890:           }",
          "891:           if( nParen==nParenAtIN ) iStartIN = 0;",
          "892:         }",
          "893:         copyNormalizedToken(zSql, i, n, flags, z, &j);",
          "894:         break;",
          "895:       }",
          "896:     }",
          "897:   }",
          "898:   assert( j<nZ && \"one\" );",
          "899:   while( j>0 && z[j-1]==' ' ){ j--; }",
          "900:   if( j>0 && z[j-1]!=';' ){ z[j++] = ';'; }",
          "901:   z[j] = 0;",
          "902:   assert( j<nZ && \"two\" );",
          "903:   return z;",
          "905: normalizeError:",
          "906:   sqlite3DbFree(db, z);",
          "907:   return 0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4255: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "4256: void sqlite3AlterRenameColumn(Parse*, SrcList*, Token*, Token*);",
          "4257: int sqlite3GetToken(const unsigned char *, int *);",
          "4261: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4262: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4263: int sqlite3CodeSubselect(Parse*, Expr *, int, int);",
          "",
          "[Removed Lines]",
          "4258: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4259: int sqlite3GetTokenNormalized(const unsigned char *, int *, int *);",
          "4260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:   return i;",
          "546: }",
          "",
          "[Removed Lines]",
          "548: #ifdef SQLITE_ENABLE_NORMALIZE",
          "560: int sqlite3GetTokenNormalized(",
          "561:   const unsigned char *z,",
          "562:   int *tokenType,",
          "563:   int *flags",
          "564: ){",
          "565:   int n;",
          "566:   unsigned char iClass = aiClass[*z];",
          "567:   if( iClass==CC_KYWD ){",
          "568:     int i;",
          "569:     for(i=1; aiClass[z[i]]<=CC_KYWD; i++){}",
          "570:     if( IdChar(z[i]) ){",
          "574:       i++;",
          "575:       while( IdChar(z[i]) ){ i++; }",
          "577:       return i;",
          "578:     }",
          "580:     n = keywordCode((char*)z, i, tokenType);",
          "585:     switch( *tokenType ){",
          "586:       case TK_ID: {",
          "588:         break;",
          "589:       }",
          "590:       case TK_IN:",
          "591:       case TK_IS:",
          "592:       case TK_NOT:",
          "593:       case TK_NULL: {",
          "595:         break;",
          "596:       }",
          "597:       default: {",
          "600:         break;",
          "601:       }",
          "602:     }",
          "603:   }else{",
          "604:     n = sqlite3GetToken(z, tokenType);",
          "607:     if( *tokenType==TK_ID && (iClass==CC_QUOTE || iClass==CC_QUOTE2) ){",
          "609:     }",
          "610:   }",
          "611:   return n;",
          "612: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "782:   return nErr;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifdef SQLITE_ENABLE_NORMALIZE",
          "724: static void addSpaceSeparator(sqlite3_str *pStr){",
          "725:   if( pStr->nChar && sqlite3IsIdChar(pStr->zText[pStr->nChar-1]) ){",
          "726:     sqlite3_str_append(pStr, \" \", 1);",
          "727:   }",
          "728: }",
          "735: char *sqlite3Normalize(",
          "739: ){",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "760:     n = sqlite3GetToken((unsigned char*)zSql+i, &tokenType);",
          "761:     if( NEVER(n<=0) ) break;",
          "762:     switch( tokenType ){",
          "763:       case TK_SPACE: {",
          "764:         break;",
          "765:       }",
          "766:       case TK_NULL: {",
          "767:         if( prevType==TK_IS || prevType==TK_NOT ){",
          "768:           sqlite3_str_append(pStr, \" NULL\", 5);",
          "769:           break;",
          "770:         }",
          "772:       }",
          "773:       case TK_STRING:",
          "774:       case TK_INTEGER:",
          "775:       case TK_FLOAT:",
          "776:       case TK_VARIABLE:",
          "777:       case TK_BLOB: {",
          "778:         sqlite3_str_append(pStr, \"?\", 1);",
          "779:         break;",
          "780:       }",
          "781:       case TK_LP: {",
          "782:         nParen++;",
          "783:         if( prevType==TK_IN ){",
          "784:           iStartIN = pStr->nChar;",
          "785:           nParenAtIN = nParen;",
          "786:         }",
          "787:         sqlite3_str_append(pStr, \"(\", 1);",
          "788:         break;",
          "789:       }",
          "790:       case TK_RP: {",
          "791:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "792:           assert( pStr->nChar>=iStartIN );",
          "793:           pStr->nChar = iStartIN+1;",
          "794:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "795:           iStartIN = 0;",
          "796:         }",
          "797:         nParen--;",
          "798:         sqlite3_str_append(pStr, \")\", 1);",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         j = pStr->nChar;",
          "803:         if( sqlite3Isquote(zSql[i]) ){",
          "804:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "805:           int nId;",
          "806:           int eType = 0;",
          "807:           if( zId==0 ) break;",
          "808:           sqlite3Dequote(zId);",
          "809:           if( zSql[i]=='\"' && sqlite3VdbeUsesDoubleQuotedString(pVdbe, zId) ){",
          "810:             sqlite3_str_append(pStr, \"?\", 1);",
          "811:             sqlite3DbFree(db, zId);",
          "812:             break;",
          "813:           }",
          "814:           nId = sqlite3Strlen30(zId);",
          "815:           if( sqlite3GetToken((u8*)zId, &eType)==nId && eType==TK_ID ){",
          "816:             addSpaceSeparator(pStr);",
          "817:             sqlite3_str_append(pStr, zId, nId);",
          "818:           }else{",
          "819:             sqlite3_str_appendf(pStr, \"\\\"%w\\\"\", zId);",
          "820:           }",
          "821:           sqlite3DbFree(db, zId);",
          "822:         }else{",
          "823:           addSpaceSeparator(pStr);",
          "824:           sqlite3_str_append(pStr, zSql+i, n);",
          "825:         }",
          "826:         while( j<pStr->nChar ){",
          "827:           pStr->zText[j] = sqlite3Tolower(pStr->zText[j]);",
          "828:           j++;",
          "829:         }",
          "830:         break;",
          "831:       }",
          "832:       default: {",
          "833:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "834:         j = pStr->nChar;",
          "835:         sqlite3_str_append(pStr, zSql+i, n);",
          "836:         while( j<pStr->nChar ){",
          "837:           pStr->zText[j] = sqlite3Toupper(pStr->zText[j]);",
          "838:           j++;",
          "839:         }",
          "840:         break;",
          "841:       }",
          "842:     }",
          "843:   }",
          "844:   return sqlite3_str_finish(pStr);",
          "845: }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, u8);",
          "254: #ifdef SQLITE_ENABLE_NORMALIZE",
          "255: void sqlite3VdbeAddDblquoteStr(sqlite3*,Vdbe*,const char*);",
          "257: #endif",
          "258: void sqlite3VdbeSwap(Vdbe*,Vdbe*);",
          "259: VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);",
          "",
          "[Removed Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(sqlite3*,Vdbe*,const char*,int);",
          "",
          "[Added Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(Vdbe*,const char*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int sqlite3VdbeUsesDoubleQuotedString(",
          "104: ){",
          "106:   DblquoteStr *pStr;",
          "107:   assert( zId!=0 );",
          "111:   if( pVdbe->pDblStr==0 ) return 0;",
          "115:   for(pStr=pVdbe->pDblStr; pStr; pStr=pStr->pNextStr){",
          "117:   }",
          "120: }",
          "121: #endif",
          "",
          "[Removed Lines]",
          "105:   char *z;",
          "108:   assert( zId[0]=='\"' );",
          "109:   assert( nId>=2 );",
          "110:   assert( zId[nId-1]=='\"' );",
          "112:   z = sqlite3DbStrNDup(db, zId, nId);",
          "113:   if( z==0 ) return 0;",
          "114:   sqlite3Dequote(z);",
          "116:     if( strcmp(z, pStr->z)==0 ) break;",
          "118:   sqlite3DbFree(db, z);",
          "119:   return pStr!=0;",
          "",
          "[Added Lines]",
          "107:     if( strcmp(zId, pStr->z)==0 ) return 1;",
          "109:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
      "candidate_info": {
        "commit_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97afa309d7bf31ec6856a74c13d41f118c780809",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Fix another pattern for which the LIKE optimization does not work for a non-TEXT affinity.  Case found by Manuel Rigger.\n\nFossilOrigin-Name: 740201107ae802c12b678e388ea524db01ad0eb70601c78490ad63eae0fe6cf1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (zNew[0]+1=='0' && iTo==1)",
          "",
          "[Added Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: # 2019-05-01",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "",
          "[Removed Lines]",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "",
          "[Added Lines]",
          "182: # another case of the above reported on the mailing list by Manuel Rigger.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "191: # 2019-02-27",
          "192: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "193: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # 2019-05-08",
          "192: # Yet another case for the above from Manuel Rigger.",
          "193: #",
          "194: do_execsql_test like3-5.400 {",
          "195:   DROP TABLE IF EXISTS t0;",
          "196:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "197:   INSERT INTO t0(c0) VALUES ('./');",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
      "candidate_info": {
        "commit_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9105fd51893062a8503c8850e5d88ad49de28495",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/nulls1.test"
        ],
        "message": "Prevent NULLS FIRST/LAST from being used in CREATE INDEX and other statements.\n\nFossilOrigin-Name: bb9767a287097a615aeb4abdba689b10e1a1c36c016c8e55905b508075e62c86",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f892066425671a8a0ac923e3ad4744677f6434a66f97b91afa8141f11f179975",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3153:   return p;",
          "3154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161: int sqlite3HasExplicitNulls(Parse *pParse, ExprList *pList){",
          "3162:   if( pList ){",
          "3163:     int i;",
          "3164:     for(i=0; i<pList->nExpr; i++){",
          "3165:       if( pList->a[i].bNulls ){",
          "3166:         u8 sf = pList->a[i].sortFlags;",
          "3167:         sqlite3ErrorMsg(pParse, \"unsupported use of NULLS %s\",",
          "3168:             (sf==0 || sf==3) ? \"FIRST\" : \"LAST\"",
          "3169:         );",
          "3170:         return 1;",
          "3171:       }",
          "3172:     }",
          "3173:   }",
          "3174:   return 0;",
          "3175: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3204:   if( SQLITE_OK!=sqlite3ReadSchema(pParse) ){",
          "3205:     goto exit_create_index;",
          "3206:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3228:   if( sqlite3HasExplicitNulls(pParse, pList) ){",
          "3229:     goto exit_create_index;",
          "3230:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1655: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1656:   if( p==0 ) return;",
          "1657:   assert( p->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1656:   struct ExprList_item *pItem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1666:        || eNulls==SQLITE_SO_DESC",
          "1667:   );",
          "1673:   }",
          "1674: }",
          "",
          "[Removed Lines]",
          "1669:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1670:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1671:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1672:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "[Added Lines]",
          "1670:   pItem = &p->a[p->nExpr-1];",
          "1671:   assert( pItem->bNulls==0 );",
          "1672:   if( iSortOrder==SQLITE_SO_UNDEFINED ){",
          "1673:     iSortOrder = SQLITE_SO_ASC;",
          "1674:   }",
          "1675:   pItem->sortFlags = (u8)iSortOrder;",
          "1677:   if( eNulls!=SQLITE_SO_UNDEFINED ){",
          "1678:     pItem->bNulls = 1;",
          "1679:     if( iSortOrder!=eNulls ){",
          "1680:       pItem->sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "1681:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:               pTab->zName);",
          "834:       goto insert_cleanup;",
          "835:     }",
          "836:     pTabList->a[0].iCursor = iDataCur;",
          "837:     pUpsert->pUpsertSrc = pTabList;",
          "838:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "837:       goto insert_cleanup;",
          "838:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4366: KeyInfo *sqlite3KeyInfoRef(KeyInfo*);",
          "4367: KeyInfo *sqlite3KeyInfoOfIndex(Parse*, Index*);",
          "4368: KeyInfo *sqlite3KeyInfoFromExprList(Parse*, ExprList*, int, int);",
          "4370: #ifdef SQLITE_DEBUG",
          "4371: int sqlite3KeyInfoIsWriteable(KeyInfo*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4370: int sqlite3HasExplicitNulls(Parse*, ExprList*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     pTriggerStep->pIdList = pColumn;",
          "464:     pTriggerStep->pUpsert = pUpsert;",
          "465:     pTriggerStep->orconf = orconf;",
          "466:   }else{",
          "467:     testcase( pColumn );",
          "468:     sqlite3IdListDelete(db, pColumn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if( pUpsert ){",
          "467:       sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget);",
          "468:     }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   1 1 1",
          "84: }",
          "87: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #-------------------------------------------------------------------------",
          "87: reset_db",
          "88: do_execsql_test 3.0 {",
          "89:   CREATE TABLE t1(a, b, c, d, UNIQUE (b));",
          "90: }",
          "91: foreach {tn sql err}  {",
          "92:   1 { CREATE INDEX i1 ON t1(a ASC NULLS LAST) }           LAST",
          "93:   2 { CREATE INDEX i1 ON t1(a ASC NULLS FIRST) }          FIRST",
          "94:   3 { CREATE INDEX i1 ON t1(a, b ASC NULLS LAST) }        LAST",
          "95:   4 { CREATE INDEX i1 ON t1(a, b ASC NULLS FIRST) }       FIRST",
          "96:   5 { CREATE INDEX i1 ON t1(a DESC NULLS LAST) }          LAST",
          "97:   6 { CREATE INDEX i1 ON t1(a DESC NULLS FIRST) }         FIRST",
          "98:   7 { CREATE INDEX i1 ON t1(a, b DESC NULLS LAST) }       LAST",
          "99:   8 { CREATE INDEX i1 ON t1(a, b DESC NULLS FIRST) }      FIRST",
          "100:   9  { CREATE TABLE t2(a, b, PRIMARY KEY(a DESC, b NULLS FIRST)) } FIRST",
          "101:   10 { CREATE TABLE t2(a, b, UNIQUE(a DESC NULLS FIRST, b)) }      FIRST",
          "102:   11 { INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "103:           ON CONFLICT (b DESC NULLS LAST) DO UPDATE SET a = a+1 } LAST",
          "104:   12 {",
          "105:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "106:       INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "107:       ON CONFLICT (b DESC NULLS FIRST) DO UPDATE SET a = a+1;",
          "108:     END",
          "109:   } FIRST",
          "110: } {",
          "111:   do_catchsql_test 3.1.$tn $sql \"1 {unsupported use of NULLS $err}\"",
          "112: }",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE first(nulls, last);",
          "116:   INSERT INTO first(last, nulls) VALUES(100,200), (300,400), (200,300);",
          "117:   SELECT * FROM first ORDER BY nulls;",
          "118: } {",
          "119:   200 100",
          "120:   300 200",
          "121:   400 300",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
      "candidate_info": {
        "commit_hash": "c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/vdbe.c",
          "test/corruptL.test",
          "test/corruptM.test",
          "test/dbfuzz001.test"
        ],
        "message": "Validate the type, name, and tbl_name fields of the sqlite_master table when loading the schema, unless writable_schema is engaged.\n\nFossilOrigin-Name: 724f4df9ccc2b683f7091a3f7a8c20ee210f44d7a610cd1b4c49da1c274add08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/vdbe.c||src/vdbe.c",
          "test/corruptL.test||test/corruptL.test",
          "test/corruptM.test||test/corruptM.test",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da01ba4fa47c6508b31533ccd769e637af04bd37f51463372fbc6c848d892a4d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "137:     goto exit_rename_table;",
          "138:   }",
          "141:   }",
          "143: #ifndef SQLITE_OMIT_VIEW",
          "",
          "[Removed Lines]",
          "139:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){ goto",
          "140:     exit_rename_table;",
          "",
          "[Added Lines]",
          "139:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse,zName,\"table\",zName) ){",
          "140:     goto exit_rename_table;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:   }",
          "840:   return SQLITE_OK;",
          "841: }",
          "",
          "[Removed Lines]",
          "833: int sqlite3CheckObjectName(Parse *pParse, const char *zName){",
          "834:   if( !pParse->db->init.busy && pParse->nested==0",
          "835:           && sqlite3WritableSchema(pParse->db)==0",
          "836:           && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7) ){",
          "837:     sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\", zName);",
          "838:     return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "837: int sqlite3CheckObjectName(",
          "842: ){",
          "843:   sqlite3 *db = pParse->db;",
          "844:   if( sqlite3WritableSchema(db) || db->init.imposterTable ){",
          "846:     return SQLITE_OK;",
          "847:   }",
          "848:   if( db->init.busy ){",
          "849:     if( sqlite3_stricmp(zType, db->init.azInit[0])",
          "850:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "851:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "852:     ){",
          "854:       return SQLITE_ERROR;",
          "855:     }",
          "856:   }else{",
          "857:     if( pParse->nested==0",
          "858:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "859:     ){",
          "860:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "861:                       zName);",
          "862:       return SQLITE_ERROR;",
          "863:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "916:   }",
          "917:   pParse->sNameToken = *pName;",
          "918:   if( zName==0 ) return;",
          "920:     goto begin_table_error;",
          "921:   }",
          "922:   if( db->init.iDb==1 ) isTemp = 1;",
          "",
          "[Removed Lines]",
          "919:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "944:   if( sqlite3CheckObjectName(pParse, zName, isView?\"view\":\"table\", zName) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3275:     zName = sqlite3NameFromToken(db, pName);",
          "3276:     if( zName==0 ) goto exit_create_index;",
          "3277:     assert( pName->z!=0 );",
          "3279:       goto exit_create_index;",
          "3280:     }",
          "3281:     if( !IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "3278:     if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "3303:     if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName,\"index\",pTab->zName) ){",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   sqlite3 *db = pData->db;",
          "75:   int iDb = pData->iDb;",
          "78:   UNUSED_PARAMETER2(NotUsed, argc);",
          "79:   assert( sqlite3_mutex_held(db->mutex) );",
          "80:   DbClearProperty(db, iDb, DB_Empty);",
          "81:   pData->nInitRow++;",
          "82:   if( db->mallocFailed ){",
          "84:     return 1;",
          "85:   }",
          "87:   assert( iDb>=0 && iDb<db->nDb );",
          "",
          "[Removed Lines]",
          "77:   assert( argc==3 );",
          "83:     corruptSchema(pData, argv[0], 0);",
          "89:   if( argv[1]==0 ){",
          "90:     corruptSchema(pData, argv[0], 0);",
          "91:   }else if( sqlite3_strnicmp(argv[2],\"create \",7)==0 ){",
          "",
          "[Added Lines]",
          "79:   assert( argc==5 );",
          "85:     corruptSchema(pData, argv[1], 0);",
          "91:   if( argv[3]==0 ){",
          "92:     corruptSchema(pData, argv[1], 0);",
          "93:   }else if( sqlite3_strnicmp(argv[4],\"create \",7)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     assert( db->init.busy );",
          "103:     db->init.iDb = iDb;",
          "105:     db->init.orphanTrigger = 0;",
          "107:     rc = db->errCode;",
          "108:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "109:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "104:     db->init.newTnum = sqlite3Atoi(argv[1]);",
          "106:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[2], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "108:     db->init.azInit = argv;",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         if( rc==SQLITE_NOMEM ){",
          "117:           sqlite3OomFault(db);",
          "118:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "120:         }",
          "121:       }",
          "122:     }",
          "123:     sqlite3_finalize(pStmt);",
          "126:   }else{",
          "",
          "[Removed Lines]",
          "119:           corruptSchema(pData, argv[0], sqlite3_errmsg(db));",
          "124:   }else if( argv[0]==0 || (argv[2]!=0 && argv[2][0]!=0) ){",
          "125:     corruptSchema(pData, argv[0], 0);",
          "",
          "[Added Lines]",
          "122:           corruptSchema(pData, argv[1], sqlite3_errmsg(db));",
          "127:   }else if( argv[1]==0 || (argv[4]!=0 && argv[4][0]!=0) ){",
          "128:     corruptSchema(pData, argv[1], 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     Index *pIndex;",
          "135:     if( pIndex==0",
          "137:      || pIndex->tnum<2",
          "138:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "139:     ){",
          "141:     }",
          "142:   }",
          "143:   return 0;",
          "",
          "[Removed Lines]",
          "134:     pIndex = sqlite3FindIndex(db, argv[0], db->aDb[iDb].zDbSName);",
          "136:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "140:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "[Added Lines]",
          "137:     pIndex = sqlite3FindIndex(db, argv[1], db->aDb[iDb].zDbSName);",
          "139:      || sqlite3GetInt32(argv[3],&pIndex->tnum)==0",
          "143:       corruptSchema(pData, argv[1], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   int size;",
          "159: #endif",
          "160:   Db *pDb;",
          "162:   int meta[5];",
          "163:   InitData initData;",
          "164:   const char *zMasterName;",
          "",
          "[Removed Lines]",
          "161:   char const *azArg[4];",
          "",
          "[Added Lines]",
          "164:   char const *azArg[6];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:                             \"rootpage int,sql text)\";",
          "185:   initData.db = db;",
          "186:   initData.iDb = iDb;",
          "187:   initData.rc = SQLITE_OK;",
          "188:   initData.pzErrMsg = pzErrMsg;",
          "189:   initData.mInitFlags = mFlags;",
          "190:   initData.nInitRow = 0;",
          "192:   if( initData.rc ){",
          "193:     rc = initData.rc;",
          "194:     goto error_out;",
          "",
          "[Removed Lines]",
          "180:   azArg[0] = zMasterName = SCHEMA_TABLE(iDb);",
          "181:   azArg[1] = \"1\";",
          "182:   azArg[2] = \"CREATE TABLE x(type text,name text,tbl_name text,\"",
          "184:   azArg[3] = 0;",
          "191:   sqlite3InitCallback(&initData, 3, (char **)azArg, 0);",
          "",
          "[Added Lines]",
          "183:   azArg[0] = \"table\";",
          "184:   azArg[1] = zMasterName = SCHEMA_TABLE(iDb);",
          "185:   azArg[2] = azArg[1];",
          "186:   azArg[3] = \"1\";",
          "187:   azArg[4] = \"CREATE TABLE x(type text,name text,tbl_name text,\"",
          "189:   azArg[5] = 0;",
          "196:   sqlite3InitCallback(&initData, 5, (char **)azArg, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:   {",
          "315:     char *zSql;",
          "316:     zSql = sqlite3MPrintf(db,",
          "318:         db->aDb[iDb].zDbSName, zMasterName);",
          "319: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "320:     {",
          "",
          "[Removed Lines]",
          "317:         \"SELECT name, rootpage, sql FROM \\\"%w\\\".%s ORDER BY rowid\",",
          "",
          "[Added Lines]",
          "322:         \"SELECT*FROM\\\"%w\\\".%s ORDER BY rowid\",",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4268: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4269: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4270: int sqlite3WritableSchema(sqlite3*);",
          "4272: void sqlite3VdbeSetChanges(sqlite3 *, int);",
          "4273: int sqlite3AddInt64(i64*,i64);",
          "4274: int sqlite3SubInt64(i64*,i64);",
          "",
          "[Removed Lines]",
          "4271: int sqlite3CheckObjectName(Parse *, const char *);",
          "",
          "[Added Lines]",
          "4272: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:   zName = sqlite3NameFromToken(db, pName);",
          "181:     goto trigger_cleanup;",
          "182:   }",
          "183:   assert( sqlite3SchemaMutexHeld(db, iDb, 0) );",
          "",
          "[Removed Lines]",
          "180:   if( !zName || SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "180:   if( zName==0 ){",
          "181:     assert( db->mallocFailed );",
          "182:     goto trigger_cleanup;",
          "183:   }",
          "184:   if( sqlite3CheckObjectName(pParse, zName, \"trigger\", pTab->zName) ){",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5963:     initData.pzErrMsg = &p->zErrMsg;",
          "5964:     initData.mInitFlags = 0;",
          "5965:     zSql = sqlite3MPrintf(db,",
          "5967:        db->aDb[iDb].zDbSName, zMaster, pOp->p4.z);",
          "5968:     if( zSql==0 ){",
          "5969:       rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "5966:        \"SELECT name, rootpage, sql FROM '%q'.%s WHERE %s ORDER BY rowid\",",
          "",
          "[Added Lines]",
          "5966:        \"SELECT*FROM\\\"%w\\\".%s WHERE %s ORDER BY rowid\",",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: }]} {}",
          "230: do_execsql_test 2.1 {",
          "231:   INSERT INTO t1(b) VALUES(X'a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6ac8ae0d0e7c3175946e62ba2b');",
          "232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377: }]} {}",
          "379: do_catchsql_test 4.1 {",
          "380:   INSERT INTO t3 SELECT * FROM t2;",
          "381: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605: |   3872: 75 65 6e 63 65 04 43 52 45 41 54 45 20 54 41 42   uence.CREATE TAB",
          "606: |   3888: 4c 45 20 73 71 6c 69 74 65 5f 73 65 71 75 65 6e   LE sqlite_sequen",
          "607: |   3904: 63 65 28 6e 61 6d 65 2c 73 65 71 29 81 04 01 07   ce(name,seq)....",
          "609: |   3936: 43 52 45 41 54 45 20 54 41 42 4c 45 20 74 31 28   CREATE TABLE t1(",
          "610: |   3952: 61 20 52 45 41 4c 20 4e 4f 54 20 4e 55 4c 4c 20   a REAL NOT NULL",
          "611: |   3968: 44 45 46 41 55 4c 54 28 32 35 2b 33 32 29 2c 62   DEFAULT(25+32),b",
          "",
          "[Removed Lines]",
          "608: |   3920: 17 11 11 01 81 73 74 61 c2 6c 65 74 31 74 31 02   .....sta.let1t1.",
          "",
          "[Added Lines]",
          "610: |   3920: 17 11 11 01 81 73 74 61 62 6c 65 74 31 74 31 02   .....stablet1t1.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "837: do_catchsql_test 8.1 {",
          "838:   INSERT INTO t3 SELECT * FROM t2;",
          "839: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1004: }]} {}",
          "1006: do_catchsql_test 10.1 {",
          "1007:   SELECT * FROM t1 WHERE a<='2019-05-09' ORDER BY a DESC;",
          "1008: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057: }]} {}",
          "1059: do_catchsql_test 11.1 {",
          "1060:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "1061: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------"
        ],
        "test/corruptM.test||test/corruptM.test": [
          "File: test/corruptM.test -> test/corruptM.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-12",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Check to ensure that the type, name, and tbl_name fields of the",
          "13: # sqlite_master table are validated and errors are reported if they",
          "14: # are inconsistent with the sql.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set testprefix corruptM",
          "21: # These tests deal with corrupt database files",
          "22: #",
          "23: database_may_be_corrupt",
          "25: db close",
          "26: forcedelete test.db",
          "27: sqlite3 db test.db",
          "28: do_execsql_test corruptM-100 {",
          "29:   CREATE TABLE t1(a,b,c);",
          "30:   INSERT INTO t1 VALUES(111,222,333);",
          "31:   CREATE INDEX i1 ON t1(b);",
          "32:   CREATE VIEW v2 AS SELECT 15,22;",
          "33:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN SELECT 5; END;",
          "34:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "35: } {table t1 t1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "36: do_execsql_test corruptM-101 {",
          "37:   PRAGMA writable_schema=on;",
          "38:   UPDATE sqlite_master SET tbl_name=NULL WHERE name='t1';",
          "39:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "40: } {table t1 {} | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "41: sqlite3 db2 test.db",
          "42: do_test corruptM-102 {",
          "43:   catchsql {",
          "44:     PRAGMA quick_check;",
          "45:   } db2",
          "46: } {1 {malformed database schema (t1)}}",
          "47: db2 close",
          "49: do_execsql_test corruptM-110 {",
          "50:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='t1';",
          "51:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "52: } {table t1 tx | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "53: sqlite3 db2 test.db",
          "54: do_test corruptM-111 {",
          "55:   catchsql {",
          "56:     PRAGMA quick_check;",
          "57:   } db2",
          "58: } {1 {malformed database schema (t1)}}",
          "59: db2 close",
          "60: do_execsql_test corruptM-112 {",
          "61:   UPDATE sqlite_master SET tbl_name='t1', type='tabl' WHERE name='t1';",
          "62:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "63: } {tabl t1 t1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "64: sqlite3 db2 test.db",
          "65: do_test corruptM-113 {",
          "66:   catchsql {",
          "67:     PRAGMA quick_check;",
          "68:   } db2",
          "69: } {1 {malformed database schema (t1)}}",
          "70: db2 close",
          "71: do_execsql_test corruptM-114 {",
          "72:   UPDATE sqlite_master SET tbl_name='t9',type='table',name='t9'WHERE name='t1';",
          "73:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "74: } {table t9 t9 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "75: sqlite3 db2 test.db",
          "76: do_test corruptM-114 {",
          "77:   catchsql {",
          "78:     PRAGMA quick_check;",
          "79:   } db2",
          "80: } {1 {malformed database schema (t9)}}",
          "81: db2 close",
          "83: do_execsql_test corruptM-120 {",
          "84:   UPDATE sqlite_master SET name='t1',tbl_name='T1' WHERE name='t9';",
          "85:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "86: } {table t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "87: sqlite3 db2 test.db",
          "88: do_test corruptM-121 {",
          "89:   catchsql {",
          "90:     PRAGMA quick_check;",
          "91:     SELECT * FROM t1, v2;",
          "92:   } db2",
          "93: } {0 {ok 111 222 333 15 22}}",
          "94: db2 close",
          "96: do_execsql_test corruptM-130 {",
          "97:   UPDATE sqlite_master SET type='view' WHERE name='t1';",
          "98:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "99: } {view t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "100: sqlite3 db2 test.db",
          "101: do_test corruptM-131 {",
          "102:   catchsql {",
          "103:     PRAGMA quick_check;",
          "104:     SELECT * FROM t1, v2;",
          "105:   } db2",
          "106: } {1 {malformed database schema (t1)}}",
          "107: db2 close",
          "109: do_execsql_test corruptM-140 {",
          "110:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='t1';",
          "111:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='i1';",
          "112:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "113: } {table t1 t1 | index i1 tx | view v2 v2 | trigger r1 t1 |}",
          "114: sqlite3 db2 test.db",
          "115: do_test corruptM-141 {",
          "116:   catchsql {",
          "117:     PRAGMA quick_check;",
          "118:     SELECT * FROM t1, v2;",
          "119:   } db2",
          "120: } {1 {malformed database schema (i1)}}",
          "121: db2 close",
          "123: do_execsql_test corruptM-150 {",
          "124:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='i1';",
          "125:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "126: } {table t1 t1 | table i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "127: sqlite3 db2 test.db",
          "128: do_test corruptM-151 {",
          "129:   catchsql {",
          "130:     PRAGMA quick_check;",
          "131:     SELECT * FROM t1, v2;",
          "132:   } db2",
          "133: } {1 {malformed database schema (i1)}}",
          "134: db2 close",
          "136: do_execsql_test corruptM-160 {",
          "137:   UPDATE sqlite_master SET type='view', tbl_name='t1' WHERE name='i1';",
          "138:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "139: } {table t1 t1 | view i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "140: sqlite3 db2 test.db",
          "141: do_test corruptM-161 {",
          "142:   catchsql {",
          "143:     PRAGMA quick_check;",
          "144:     SELECT * FROM t1, v2;",
          "145:   } db2",
          "146: } {1 {malformed database schema (i1)}}",
          "147: db2 close",
          "149: do_execsql_test corruptM-170 {",
          "150:   UPDATE sqlite_master SET type='index', tbl_name='t1' WHERE name='i1';",
          "151:   UPDATE sqlite_master SET type='table', tbl_name='v2' WHERE name='v2';",
          "152:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "153: } {table t1 t1 | index i1 t1 | table v2 v2 | trigger r1 t1 |}",
          "154: sqlite3 db2 test.db",
          "155: do_test corruptM-171 {",
          "156:   catchsql {",
          "157:     PRAGMA quick_check;",
          "158:     SELECT * FROM t1, v2;",
          "159:   } db2",
          "160: } {1 {malformed database schema (v2)}}",
          "161: db2 close",
          "163: do_execsql_test corruptM-180 {",
          "164:   UPDATE sqlite_master SET type='view',name='v3',tbl_name='v3' WHERE name='v2';",
          "165:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "166: } {table t1 t1 | index i1 t1 | view v3 v3 | trigger r1 t1 |}",
          "167: sqlite3 db2 test.db",
          "168: do_test corruptM-181 {",
          "169:   catchsql {",
          "170:     PRAGMA quick_check;",
          "171:     SELECT * FROM t1, v2;",
          "172:   } db2",
          "173: } {1 {malformed database schema (v3)}}",
          "174: db2 close",
          "176: do_execsql_test corruptM-190 {",
          "177:   UPDATE sqlite_master SET type='view',name='v2',tbl_name='v2' WHERE name='v3';",
          "178:   UPDATE sqlite_master SET type='view' WHERE name='r1';",
          "179:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "180: } {table t1 t1 | index i1 t1 | view v2 v2 | view r1 t1 |}",
          "181: sqlite3 db2 test.db",
          "182: do_test corruptM-191 {",
          "183:   catchsql {",
          "184:     PRAGMA quick_check;",
          "185:     SELECT * FROM t1, v2;",
          "186:   } db2",
          "187: } {1 {malformed database schema (r1)}}",
          "188: db2 close",
          "189: do_execsql_test corruptM-192 {",
          "190:   UPDATE sqlite_master SET type='trigger',tbl_name='v2' WHERE name='r1';",
          "191:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "192: } {table t1 t1 | index i1 t1 | view v2 v2 | trigger r1 v2 |}",
          "193: sqlite3 db2 test.db",
          "194: do_test corruptM-193 {",
          "195:   catchsql {",
          "196:     PRAGMA quick_check;",
          "197:     SELECT * FROM t1, v2;",
          "198:   } db2",
          "199: } {1 {malformed database schema (r1)}}",
          "200: db2 close",
          "202: finish_test",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "305: |    384: 32 28 63 2c 64 29 28 05 06 17 11 11 01 3d 74 61   2(c,d)(......=ta",
          "306: |    400: 62 6c 65 74 33 74 33 07 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "307: |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "309: |    448: 32 32 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   22CREATE TABLE t",
          "310: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "311: |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "",
          "[Removed Lines]",
          "308: |    432: 28 02 06 17 11 11 01 3d 74 61 74 65 6c 03 62 74   (......=tatel.bt",
          "",
          "[Added Lines]",
          "308: |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51caa04836a0504017f8204a6c179a6af5d007a5",
      "candidate_info": {
        "commit_hash": "51caa04836a0504017f8204a6c179a6af5d007a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51caa04836a0504017f8204a6c179a6af5d007a5",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "tool/dbtotxt.c",
          "tool/dbtotxt.md"
        ],
        "message": "Merge the dbtotxt enhancement from trunk.\n\nFossilOrigin-Name: b386fce9a23e628dce7362dcca2904b8d0af6da58a6fe6eb7f12f058a8363e49",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:              $(TOP)/test/ossfuzz.c sqlite3.c $(TLIBS)",
          "671: sessionfuzz$(TEXE): $(TOP)/test/sessionfuzz.c sqlite3.c sqlite3.h",
          "674: dbfuzz$(TEXE): $(TOP)/test/dbfuzz.c sqlite3.c sqlite3.h",
          "675:  $(LTLINK) -o $@ $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c $(TLIBS)",
          "",
          "[Removed Lines]",
          "672:  $(CC) $(CFLAGS) -I. -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "[Added Lines]",
          "672:  $(LTLINK) -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "690:  mkdir -p dbfuzz2-dir",
          "691:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "688:  clang-6.0 -I. -g -O0 -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "[Added Lines]",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1291:  $(LTLINK) -DDBDUMP_STANDALONE -o $@ \\",
          "1292:            $(TOP)/ext/misc/dbdump.c sqlite3.lo $(TLIBS)",
          "1294: showdb$(TEXE): $(TOP)/tool/showdb.c sqlite3.lo",
          "1295:  $(LTLINK) -o $@ $(TOP)/tool/showdb.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: dbtotxt$(TEXE): $(TOP)/tool/dbtotxt.c",
          "1296:  $(LTLINK)-o $@ $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2425: testloadext.dll: testloadext.lo",
          "2426:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ testloadext.lo",
          "2428: showdb.exe: $(TOP)\\tool\\showdb.c $(SQLITE3C) $(SQLITE3H)",
          "2429:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2430:   $(TOP)\\tool\\showdb.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428: dbtotxt.exe: $(TOP)\\tool\\dbtotxt.c",
          "2429:  $(LTLINK) $(NO_WARN) $(TOP)\\tool\\dbtotxt.c /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "976: extensiontest: testfixture$(EXE) $(TEST_EXTENSION)",
          "977:  ./testfixture$(EXE) $(TOP)/test/loadext.test",
          "979: showdb$(EXE): $(TOP)/tool/showdb.c sqlite3.o",
          "980:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -o showdb$(EXE) \\",
          "981:   $(TOP)/tool/showdb.c sqlite3.o $(THREADLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979: dbtotxt$(EXE): $(TOP)/tool/dbtotxt.c",
          "980:  $(TCC) -o dbtotxt$(EXE) $(TOP)/tool/dbtotxt.c",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4210d320c6426d2838d4cc08709fdfd015c1c95fcad9a5f9e8fd390c23b9fad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3444:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3445: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3446:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3447: #endif",
          "3448:   \"        --new           Initialize FILE to an empty database\",",
          "3449:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3448:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3723:   return rc;",
          "3724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3728: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3734: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3735:   unsigned char *a = 0;",
          "3736:   int nLine = 1;",
          "3737:   int n = 0;",
          "3738:   int pgsz = 0;",
          "3739:   int iOffset = 0;",
          "3740:   int j, k;",
          "3741:   int rc;",
          "3742:   FILE *in;",
          "3743:   unsigned char x[16];",
          "3744:   char zLine[100];",
          "3745:   if( p->zDbFilename ){",
          "3746:     in = fopen(p->zDbFilename, \"r\");",
          "3747:     if( in==0 ){",
          "3748:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3752:     in = stdin;",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3756:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3757:   if( rc!=2 ) goto readHexDb_error;",
          "3758:   if( n<=0 ) goto readHexDb_error;",
          "3759:   a = sqlite3_malloc( n );",
          "3760:   if( a==0 ){",
          "3761:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3762:     goto readHexDb_error;",
          "3763:   }",
          "3764:   memset(a, 0, n);",
          "3765:   if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){",
          "3766:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3767:     goto readHexDb_error;",
          "3768:   }",
          "3769:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "3770:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3771:     if( rc==2 ){",
          "3772:       iOffset = k;",
          "3773:       continue;",
          "3774:     }",
          "3775:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3776:       break;",
          "3777:     }",
          "3778:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3779:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3780:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3781:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3782:     if( rc==17 ){",
          "3783:       k = iOffset+j;",
          "3784:       if( k+16>n ){",
          "3785:         utf8_printf(stderr, \"continue exceeds file size\\n\");",
          "3786:         goto readHexDb_error;",
          "3787:       }",
          "3788:       memcpy(a+k, x, 16);",
          "3789:     }",
          "3790:   }",
          "3792:   if( in!=stdin ) fclose(in);",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "3803:   sqlite3_free(a);",
          "3804:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "3805:   return 0;",
          "3806: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3756:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "3757:         break;",
          "3758:       }",
          "3759:       case SHELL_OPEN_DESERIALIZE: {",
          "3760:         sqlite3_open(0, &p->db);",
          "3761:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3842:       case SHELL_OPEN_HEXDB:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3810:       sqlite3_free(zSql);",
          "3811:     }",
          "3812: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3814:       int nData = 0;",
          "3816:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "3817:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3818:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "",
          "[Removed Lines]",
          "3813:     else if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3815:       unsigned char *aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "",
          "[Added Lines]",
          "3897:     else",
          "3898:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3900:       unsigned char *aData;",
          "3901:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "3902:         aData = (unsigned char*)readFile(p->zDbFilename, &nData);",
          "3903:       }else{",
          "3904:         aData = readHexDb(p, &nData);",
          "3905:         if( aData==0 ){",
          "3906:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "3907:           return;",
          "3908:         }",
          "3909:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6749: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "6750:       }else if( optionMatch(z, \"deserialize\") ){",
          "6751:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6753:       }else if( z[0]=='-' ){",
          "6754:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "6755:         rc = 1;",
          "",
          "[Removed Lines]",
          "6752: #endif",
          "",
          "[Added Lines]",
          "6846:       }else if( optionMatch(z, \"hexdb\") ){",
          "6847:         p->openMode = SHELL_OPEN_HEXDB;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6758:     }",
          "6760:     zNewFilename = nArg>iName ? sqlite3_mprintf(\"%s\", azArg[iName]) : 0;",
          "6762:       if( newFlag ) shellDeleteFile(zNewFilename);",
          "6763:       p->zDbFilename = zNewFilename;",
          "6764:       open_db(p, OPEN_DB_KEEPALIVE);",
          "",
          "[Removed Lines]",
          "6761:     if( zNewFilename ){",
          "",
          "[Added Lines]",
          "6857:     if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <stdio.h>",
          "28: #include <string.h>",
          "29: #include <stdlib.h>",
          "32: static int allZero(unsigned char *aLine){",
          "33:   int i;",
          "34:   for(i=0; i<16 && aLine[i]==0; i++){}",
          "35:   return i==16;",
          "36: }",
          "38: int main(int argc, char **argv){",
          "50:   for(i=1; i<argc; i++){",
          "51:     if( argv[i][0]=='-' ){",
          "52:       const char *z = argv[i];",
          "53:       z++;",
          "54:       if( z[0]=='-' ) z++;",
          "55:       if( strcmp(z,\"pagesize\")==0 ){",
          "56:         i++;",
          "57:         pgsz = atoi(argv[i]);",
          "58:         if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "59:           fprintf(stderr, \"Page size must be a power of two between\"",
          "60:                           \" 512 and 65536.\\n\");",
          "61:           nErr++;",
          "62:         }",
          "63:         continue;",
          "64:       }",
          "65:       fprintf(stderr, \"Unknown option: %s\\n\", argv[i]);",
          "66:       nErr++;",
          "67:     }else if( zInputFile ){",
          "68:       fprintf(stderr, \"Already using a different input file: [%s]\\n\", argv[i]);",
          "69:       nErr++;",
          "70:     }else{",
          "71:       zInputFile = argv[i];",
          "72:     }",
          "73:   }",
          "74:   if( zInputFile==0 ){",
          "75:     fprintf(stderr, \"No input file specified.\\n\");",
          "76:     nErr++;",
          "77:   }",
          "78:   if( nErr ){",
          "79:     fprintf(stderr, \"Usage: %s [--pagesize N] FILENAME\\n\", argv[0]);",
          "80:     exit(1);",
          "81:   }",
          "82:   in = fopen(zInputFile, \"rb\");",
          "83:   if( in==0 ){",
          "84:     fprintf(stderr, \"Cannot open input file [%s]\\n\", zInputFile);",
          "85:     exit(1);",
          "86:   }",
          "87:   fseek(in, 0, SEEK_END);",
          "88:   szFile = ftell(in);",
          "89:   rewind(in);",
          "90:   if( szFile<512 ){",
          "91:     fprintf(stderr, \"File too short. Minimum size is 512 bytes.\\n\");",
          "92:     exit(1);",
          "93:   }",
          "94:   if( fread(aHdr, 100, 1, in)!=1 ){",
          "95:     fprintf(stderr, \"Cannot read file header\\n\");",
          "96:     exit(1);",
          "97:   }",
          "98:   rewind(in);",
          "99:   if( pgsz==0 ){",
          "100:     pgsz = (aHdr[16]<<8) | aHdr[17];",
          "101:     if( pgsz==1 ) pgsz = 65536;",
          "102:     if( pgsz<512 || (pgsz&(pgsz-1))!=0 ){",
          "103:       fprintf(stderr, \"Invalid page size in header: %d\\n\", pgsz);",
          "104:       exit(1);",
          "105:     }",
          "106:   }",
          "107:   zBaseName = zInputFile;",
          "108:   for(i=0; zInputFile[i]; i++){",
          "109:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "110:   }",
          "111:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "112:   for(i=0; i<szFile; i+=16){",
          "113:     int got = (int)fread(aLine, 1, 16, in);",
          "114:     if( got!=16 ){",
          "115:       static int once = 1;",
          "116:       if( once ){",
          "117:         fprintf(stderr, \"Could not read input file starting at byte %d\\n\",",
          "118:                          i+got);",
          "119:       }",
          "120:       memset(aLine+got, 0, 16-got);",
          "121:     }",
          "122:     if( allZero(aLine) ) continue;",
          "123:     iPage = i/pgsz + 1;",
          "124:     if( lastPage!=iPage ){",
          "125:       printf(\"| page %d offset %d\\n\", iPage, (iPage-1)*pgsz);",
          "126:       lastPage = iPage;",
          "127:     }",
          "128:     printf(\"|  %5d:\", i-(iPage-1)*pgsz);",
          "129:     for(j=0; j<16; j++) printf(\" %02x\", aLine[j]);",
          "130:     printf(\"   \");",
          "131:     for(j=0; j<16; j++){",
          "132:       char c = aLine[j];",
          "133:       fputc(c>=0x20 && c<=0x7e ? c : '.', stdout);",
          "134:     }",
          "135:     fputc('\\n', stdout);",
          "136:   }",
          "137:   fclose(in);",
          "138:   printf(\"| end %s\\n\", zBaseName);",
          "139:   return 0;",
          "140: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}