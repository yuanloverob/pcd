{
  "cve_id": "CVE-2021-33193",
  "cve_desc": "A crafted method sent through HTTP/2 will bypass validation and be forwarded by mod_proxy, which can lead to request splitting or cache poisoning. This issue affects Apache HTTP Server 2.4.17 to 2.4.48.",
  "repo": "apache/httpd",
  "patch_hash": "ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
  "patch_info": {
    "commit_hash": "ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
    "repo": "apache/httpd",
    "commit_url": "https://github.com/apache/httpd/commit/ecebcc035ccd8d0e2984fe41420d9e944f456b3c",
    "files": [
      "CHANGES",
      "docs/manual/mod/core.xml",
      "include/ap_mmn.h",
      "include/http_core.h",
      "include/http_protocol.h",
      "include/http_vhost.h",
      "modules/http2/h2_request.c",
      "server/core.c",
      "server/core_filters.c",
      "server/protocol.c",
      "server/vhost.c"
    ],
    "message": "Merged r1734009,r1734231,r1734281,r1838055,r1838079,r1840229,r1876664,r1876674,r1876784,r1879078,r1881620,r1887311,r1888871 from trunk:\n\n  *) core: Split ap_create_request() from ap_read_request(). [Graham Leggett]\n\n  *) core, h2: common ap_parse_request_line() and ap_check_request_header()\n     code. [Yann Ylavic]\n\n  *) core: Add StrictHostCheck to allow unconfigured hostnames to be\n     rejected. [Eric Covener]\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1890245 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "include/ap_mmn.h||include/ap_mmn.h",
      "include/http_core.h||include/http_core.h",
      "include/http_protocol.h||include/http_protocol.h",
      "include/http_vhost.h||include/http_vhost.h",
      "modules/http2/h2_request.c||modules/http2/h2_request.c",
      "server/core.c||server/core.c",
      "server/core_filters.c||server/core_filters.c",
      "server/protocol.c||server/protocol.c",
      "server/vhost.c||server/vhost.c"
    ]
  },
  "patch_diff": {
    "include/ap_mmn.h||include/ap_mmn.h": [
      "File: include/ap_mmn.h -> include/ap_mmn.h"
    ],
    "include/http_core.h||include/http_core.h": [
      "File: include/http_core.h -> include/http_core.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "755:     apr_size_t   flush_max_threshold;",
      "756:     apr_int32_t  flush_max_pipelined;",
      "757: } core_server_config;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:     unsigned int strict_host_check;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782: typedef struct core_output_filter_ctx core_output_filter_ctx_t;",
      "783: typedef struct core_filter_ctx        core_ctx_t;",
      "785: typedef struct core_net_rec {",
      "787:     apr_socket_t *client_socket;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "786: struct core_filter_ctx {",
      "787:     apr_bucket_brigade *b;",
      "788:     apr_bucket_brigade *tmpbb;",
      "789: };",
      "",
      "---------------"
    ],
    "include/http_protocol.h||include/http_protocol.h": [
      "File: include/http_protocol.h -> include/http_protocol.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: AP_DECLARE(request_rec *) ap_create_request(conn_rec *c);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: request_rec *ap_read_request(conn_rec *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: AP_DECLARE(int) ap_parse_request_line(request_rec *r);",
      "82: AP_DECLARE(int) ap_check_request_header(request_rec *r);",
      "",
      "---------------"
    ],
    "include/http_vhost.h||include/http_vhost.h": [
      "File: include/http_vhost.h -> include/http_vhost.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: AP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112: AP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match);",
      "",
      "---------------"
    ],
    "modules/http2/h2_request.c||modules/http2/h2_request.c": [
      "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:     return dst;",
      "211: }",
      "271: request_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)",
      "272: {",
      "276:     request_rec *r = ap_create_request(c);",
      "282:     ap_run_pre_read_request(r, c);",
      "",
      "[Removed Lines]",
      "213: #if !AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
      "214: static request_rec *my_ap_create_request(conn_rec *c)",
      "215: {",
      "216:     apr_pool_t *p;",
      "217:     request_rec *r;",
      "219:     apr_pool_create(&p, c->pool);",
      "220:     apr_pool_tag(p, \"request\");",
      "221:     r = apr_pcalloc(p, sizeof(request_rec));",
      "222:     AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)c);",
      "223:     r->pool            = p;",
      "224:     r->connection      = c;",
      "225:     r->server          = c->base_server;",
      "227:     r->user            = NULL;",
      "228:     r->ap_auth_type    = NULL;",
      "230:     r->allowed_methods = ap_make_method_list(p, 2);",
      "232:     r->headers_in      = apr_table_make(r->pool, 5);",
      "233:     r->trailers_in     = apr_table_make(r->pool, 5);",
      "234:     r->subprocess_env  = apr_table_make(r->pool, 25);",
      "235:     r->headers_out     = apr_table_make(r->pool, 12);",
      "236:     r->err_headers_out = apr_table_make(r->pool, 5);",
      "237:     r->trailers_out    = apr_table_make(r->pool, 5);",
      "238:     r->notes           = apr_table_make(r->pool, 5);",
      "240:     r->request_config  = ap_create_request_config(r->pool);",
      "243:     r->proto_output_filters = c->output_filters;",
      "244:     r->output_filters  = r->proto_output_filters;",
      "245:     r->proto_input_filters = c->input_filters;",
      "246:     r->input_filters   = r->proto_input_filters;",
      "247:     ap_run_create_request(r);",
      "248:     r->per_dir_config  = r->server->lookup_defaults;",
      "252:     r->read_length     = 0;",
      "253:     r->read_body       = REQUEST_NO_BODY;",
      "256:     r->header_only     = 0;",
      "257:     r->the_request     = NULL;",
      "262:     r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;",
      "264:     r->useragent_addr = c->client_addr;",
      "265:     r->useragent_ip = c->client_ip;",
      "267:     return r;",
      "268: }",
      "269: #endif",
      "273:     int access_status;",
      "275: #if AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
      "277: #else",
      "278:     request_rec *r = my_ap_create_request(c);",
      "279: #endif",
      "281: #if AP_MODULE_MAGIC_AT_LEAST(20200331, 3)",
      "",
      "[Added Lines]",
      "215:     int access_status = HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "307:         r->status = HTTP_OK;",
      "308:         goto die;",
      "309:     }",
      "355:     r->per_dir_config = r->server->lookup_defaults;",
      "",
      "[Removed Lines]",
      "310: #else",
      "311:     {",
      "312:         const char *s;",
      "314:         r->headers_in = apr_table_clone(r->pool, req->headers);",
      "315:         ap_run_pre_read_request(r, c);",
      "318:         r->request_time = req->request_time;",
      "319:         r->method = apr_pstrdup(r->pool, req->method);",
      "321:         r->method_number = ap_method_number_of(r->method);",
      "322:         if (r->method_number == M_GET && r->method[0] == 'H') {",
      "323:             r->header_only = 1;",
      "324:         }",
      "325:         ap_parse_uri(r, req->path ? req->path : \"\");",
      "326:         r->protocol = (char*)\"HTTP/2.0\";",
      "327:         r->proto_num = HTTP_VERSION(2, 0);",
      "328:         r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
      "329:                                       r->method, req->path ? req->path : \"\");",
      "334:         r->hostname = NULL;",
      "335:         ap_update_vhost_from_headers(r);",
      "338:          r->per_dir_config = r->server->lookup_defaults;",
      "340:          s = apr_table_get(r->headers_in, \"Expect\");",
      "341:          if (s && s[0]) {",
      "342:             if (ap_cstr_casecmp(s, \"100-continue\") == 0) {",
      "343:                 r->expecting_100 = 1;",
      "344:             }",
      "345:             else {",
      "346:                 r->status = HTTP_EXPECTATION_FAILED;",
      "347:                 access_status = r->status;",
      "348:                 goto die;",
      "349:             }",
      "350:          }",
      "351:     }",
      "352: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/core.c||server/core.c": [
      "File: server/core.c -> server/core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "511:     conf->protocols_honor_order = -1;",
      "512:     conf->merge_slashes = AP_CORE_CONFIG_UNSET;",
      "514:     return (void *)conf;",
      "515: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     conf->strict_host_check= AP_CORE_CONFIG_UNSET;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "585:                                   ? virt->flush_max_pipelined",
      "586:                                   : base->flush_max_pipelined;",
      "588:     return conf;",
      "589: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "590:     conf->strict_host_check = (virt->strict_host_check != AP_CORE_CONFIG_UNSET)",
      "591:                               ? virt->strict_host_check",
      "592:                               : base->strict_host_check;",
      "594:     AP_CORE_MERGE_FLAG(strict_host_check, conf, base, virt);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4623: AP_INIT_FLAG(\"QualifyRedirectURL\", set_qualify_redirect_url, NULL, OR_FILEINFO,",
      "4624:              \"Controls whether the REDIRECT_URL environment variable is fully \"",
      "4625:              \"qualified\"),",
      "4627: AP_INIT_TAKE1(\"ForceType\", ap_set_string_slot_lower,",
      "4628:        (void *)APR_OFFSETOF(core_dir_config, mime_type), OR_FILEINFO,",
      "4629:      \"a mime type that overrides other configured type\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4634: AP_INIT_FLAG(\"StrictHostCheck\", set_core_server_flag,",
      "4635:              (void *)APR_OFFSETOF(core_server_config, strict_host_check),",
      "4636:              RSRC_CONF,",
      "4637:              \"Controls whether a hostname match is required\"),",
      "",
      "---------------"
    ],
    "server/core_filters.c||server/core_filters.c": [
      "File: server/core_filters.c -> server/core_filters.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:     apr_size_t nvec;",
      "86: };",
      "94: apr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,",
      "95:                                   ap_input_mode_t mode, apr_read_type_e block,",
      "",
      "[Removed Lines]",
      "88: struct core_filter_ctx {",
      "89:     apr_bucket_brigade *b;",
      "90:     apr_bucket_brigade *tmpbb;",
      "91: };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "server/protocol.c||server/protocol.c": [
      "File: server/protocol.c -> server/protocol.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "609:         }",
      "611:         r->args = r->parsed_uri.query;",
      "615: #if defined(OS2) || defined(WIN32)",
      "",
      "[Removed Lines]",
      "612:         r->uri = r->parsed_uri.path ? r->parsed_uri.path",
      "613:                  : apr_pstrdup(r->pool, \"/\");",
      "",
      "[Added Lines]",
      "612:         if (r->parsed_uri.path) {",
      "613:             r->uri = r->parsed_uri.path;",
      "614:         }",
      "615:         else if (r->method_number == M_OPTIONS) {",
      "616:             r->uri = apr_pstrdup(r->pool, \"*\");",
      "617:         }",
      "618:         else {",
      "619:             r->uri = apr_pstrdup(r->pool, \"/\");",
      "620:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "646: static int read_request_line(request_rec *r, apr_bucket_brigade *bb)",
      "647: {",
      "655:     apr_size_t len;",
      "656:     int num_blank_lines = DEFAULT_LIMIT_BLANK_LINES;",
      "657:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "",
      "[Removed Lines]",
      "648:     enum {",
      "649:         rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,",
      "650:         rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,",
      "651:         rrl_badmethod09, rrl_reject09",
      "652:     } deferred_error = rrl_none;",
      "653:     char *ll;",
      "654:     char *uri;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "711:     }",
      "713:     r->request_time = apr_time_now();",
      "715:     r->method = r->the_request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "714:     return 1;",
      "715: }",
      "717: AP_DECLARE(int) ap_parse_request_line(request_rec *r)",
      "718: {",
      "719:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "720:     int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);",
      "721:     enum {",
      "722:         rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,",
      "723:         rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,",
      "724:         rrl_badmethod09, rrl_reject09",
      "725:     } deferred_error = rrl_none;",
      "726:     apr_size_t len = 0;",
      "727:     char *uri, *ll;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "742:         if (deferred_error == rrl_none)",
      "743:             deferred_error = rrl_missinguri;",
      "744:         r->protocol = uri = \"\";",
      "746:         goto rrl_done;",
      "747:     }",
      "748:     else if (strict && ll[0] && apr_isspace(ll[1])",
      "",
      "[Removed Lines]",
      "745:         len = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "774:     if (!ll) {",
      "775:         r->protocol = \"\";",
      "777:         goto rrl_done;",
      "778:     }",
      "779:     else if (strict && ll[0] && apr_isspace(ll[1])",
      "",
      "[Removed Lines]",
      "776:         len = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "866:         r->header_only = 1;",
      "868:     ap_parse_uri(r, uri);",
      "871:     if (r->proto_num == HTTP_VERSION(0, 9) && deferred_error == rrl_none) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881:     if (r->status == HTTP_OK",
      "882:             && (r->parsed_uri.path != NULL)",
      "883:             && (r->parsed_uri.path[0] != '/')",
      "884:             && (r->method_number != M_OPTIONS",
      "885:                 || strcmp(r->parsed_uri.path, \"*\") != 0)) {",
      "887:         r->status = HTTP_BAD_REQUEST;",
      "888:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "973:     return 0;",
      "974: }",
      "976: static int table_do_fn_check_lengths(void *r_, const char *key,",
      "977:                                      const char *value)",
      "978: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "996: AP_DECLARE(int) ap_check_request_header(request_rec *r)",
      "997: {",
      "998:     core_server_config *conf;",
      "999:     int strict_host_check;",
      "1000:     const char *expect;",
      "1001:     int access_status;",
      "1003:     conf = ap_get_core_module_config(r->server->module_config);",
      "1008:     strict_host_check = (conf->strict_host_check == AP_CORE_CONFIG_ON);",
      "1009:     access_status = ap_update_vhost_from_headers_ex(r, strict_host_check);",
      "1010:     if (strict_host_check && access_status != HTTP_OK) {",
      "1011:         if (r->server == ap_server_conf) {",
      "1012:             ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10156)",
      "1013:                           \"Requested hostname '%s' did not match any ServerName/ServerAlias \"",
      "1014:                           \"in the global server configuration \", r->hostname);",
      "1015:         }",
      "1016:         else {",
      "1017:             ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10157)",
      "1018:                           \"Requested hostname '%s' did not match any ServerName/ServerAlias \"",
      "1019:                           \"in the matching virtual host (default vhost for \"",
      "1020:                           \"current connection is %s:%u)\",",
      "1021:                           r->hostname, r->server->defn_name, r->server->defn_line_number);",
      "1022:         }",
      "1023:         r->status = access_status;",
      "1024:     }",
      "1025:     if (r->status != HTTP_OK) {",
      "1026:         return 0;",
      "1027:     }",
      "1029:     if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))",
      "1030:         || ((r->proto_num == HTTP_VERSION(1, 1))",
      "1031:             && !apr_table_get(r->headers_in, \"Host\"))) {",
      "1039:         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)",
      "1040:                       \"client sent HTTP/1.1 request without hostname \"",
      "1041:                       \"(see RFC2616 section 14.23): %s\", r->uri);",
      "1042:         r->status = HTTP_BAD_REQUEST;",
      "1043:         return 0;",
      "1044:     }",
      "1046:     if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)",
      "1047:         && (expect[0] != '\\0')) {",
      "1054:         if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {",
      "1055:             r->expecting_100 = 1;",
      "1056:         }",
      "1057:         else {",
      "1058:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)",
      "1059:                           \"client sent an unrecognized expectation value \"",
      "1060:                           \"of Expect: %s\", expect);",
      "1061:             r->status = HTTP_EXPECTATION_FAILED;",
      "1062:             return 0;",
      "1063:         }",
      "1064:     }",
      "1066:     return 1;",
      "1067: }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1256:     apr_brigade_destroy(tmp_bb);",
      "1257: }",
      "1260: {",
      "1261:     request_rec *r;",
      "1262:     apr_pool_t *p;",
      "1270:     apr_pool_create(&p, conn->pool);",
      "1271:     apr_pool_tag(p, \"request\");",
      "",
      "[Removed Lines]",
      "1259: request_rec *ap_read_request(conn_rec *conn)",
      "1263:     const char *expect;",
      "1264:     int access_status;",
      "1265:     apr_bucket_brigade *tmp_bb;",
      "1266:     apr_socket_t *csd;",
      "1267:     apr_interval_time_t cur_timeout;",
      "",
      "[Added Lines]",
      "1352: AP_DECLARE(request_rec *) ap_create_request(conn_rec *conn)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1304:     r->read_body       = REQUEST_NO_BODY;",
      "1307:     r->the_request     = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1394:     r->header_only     = 0;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1314:     r->useragent_addr = conn->client_addr;",
      "1315:     r->useragent_ip = conn->client_ip;",
      "1317:     tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);",
      "1318:     conn->keepalive = AP_CONN_UNKNOWN;",
      "1320:     ap_run_pre_read_request(r, conn);",
      "1324:         switch (r->status) {",
      "1325:         case HTTP_REQUEST_URI_TOO_LARGE:",
      "1326:         case HTTP_BAD_REQUEST:",
      "",
      "[Removed Lines]",
      "1323:     if (!read_request_line(r, tmp_bb)) {",
      "",
      "[Added Lines]",
      "1405:     return r;",
      "1406: }",
      "1409: static void apply_server_config(request_rec *r)",
      "1410: {",
      "1411:     apr_socket_t *csd;",
      "1413:     csd = ap_get_conn_socket(r->connection);",
      "1414:     apr_socket_timeout_set(csd, r->server->timeout);",
      "1416:     r->per_dir_config = r->server->lookup_defaults;",
      "1417: }",
      "1419: request_rec *ap_read_request(conn_rec *conn)",
      "1420: {",
      "1421:     int access_status;",
      "1422:     apr_bucket_brigade *tmp_bb;",
      "1424:     request_rec *r = ap_create_request(conn);",
      "1432:     if (!read_request_line(r, tmp_bb) || !ap_parse_request_line(r)) {",
      "1433:         apr_brigade_cleanup(tmp_bb);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1336:                               \"request failed: malformed request line\");",
      "1337:             }",
      "1338:             access_status = r->status;",
      "1346:         case HTTP_REQUEST_TIME_OUT:",
      "1347:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, NULL);",
      "1348:             if (!r->connection->keepalives)",
      "1349:                 ap_run_log_transaction(r);",
      "1356:         }",
      "1357:     }",
      "1370:     if (!r->assbackwards) {",
      "1371:         const char *tenc, *clen;",
      "1373:         ap_get_mime_headers_core(r, tmp_bb);",
      "1374:         if (r->status != HTTP_OK) {",
      "1375:             ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00567)",
      "1376:                           \"request failed: error reading the headers\");",
      "1382:         }",
      "1384:         clen = apr_table_get(r->headers_in, \"Content-Length\");",
      "",
      "[Removed Lines]",
      "1339:             r->status = HTTP_OK;",
      "1340:             ap_die(access_status, r);",
      "1341:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1342:             ap_run_log_transaction(r);",
      "1343:             r = NULL;",
      "1344:             apr_brigade_destroy(tmp_bb);",
      "1345:             goto traceout;",
      "1350:             apr_brigade_destroy(tmp_bb);",
      "1351:             goto traceout;",
      "1352:         default:",
      "1353:             apr_brigade_destroy(tmp_bb);",
      "1354:             r = NULL;",
      "1355:             goto traceout;",
      "1363:     csd = ap_get_conn_socket(conn);",
      "1364:     apr_socket_timeout_get(csd, &cur_timeout);",
      "1365:     if (cur_timeout != conn->base_server->timeout) {",
      "1366:         apr_socket_timeout_set(csd, conn->base_server->timeout);",
      "1367:         cur_timeout = conn->base_server->timeout;",
      "1368:     }",
      "1377:             ap_send_error_response(r, 0);",
      "1378:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1379:             ap_run_log_transaction(r);",
      "1380:             apr_brigade_destroy(tmp_bb);",
      "1381:             goto traceout;",
      "",
      "[Added Lines]",
      "1449:             goto die_unusable_input;",
      "1456:             break;",
      "1459:         conn->keepalive = AP_CONN_CLOSE;",
      "1460:         apr_pool_destroy(r->pool);",
      "1461:         goto ignore;",
      "1463:     apr_brigade_cleanup(tmp_bb);",
      "1469:     apply_server_config(r);",
      "1475:         apr_brigade_cleanup(tmp_bb);",
      "1479:             access_status = r->status;",
      "1480:             goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1389:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(10242)",
      "1390:                               \"client sent invalid Content-Length \"",
      "1391:                               \"(%s): %s\", clen, r->uri);",
      "1399:             }",
      "1400:         }",
      "",
      "[Removed Lines]",
      "1392:                 r->status = HTTP_BAD_REQUEST;",
      "1393:                 conn->keepalive = AP_CONN_CLOSE;",
      "1394:                 ap_send_error_response(r, 0);",
      "1395:                 ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1396:                 ap_run_log_transaction(r);",
      "1397:                 apr_brigade_destroy(tmp_bb);",
      "1398:                 goto traceout;",
      "",
      "[Added Lines]",
      "1491:                 access_status = HTTP_BAD_REQUEST;",
      "1492:                 goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1411:                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02539)",
      "1412:                               \"client sent unknown Transfer-Encoding \"",
      "1413:                               \"(%s): %s\", tenc, r->uri);",
      "1421:             }",
      "",
      "[Removed Lines]",
      "1414:                 r->status = HTTP_BAD_REQUEST;",
      "1415:                 conn->keepalive = AP_CONN_CLOSE;",
      "1416:                 ap_send_error_response(r, 0);",
      "1417:                 ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1418:                 ap_run_log_transaction(r);",
      "1419:                 apr_brigade_destroy(tmp_bb);",
      "1420:                 goto traceout;",
      "",
      "[Added Lines]",
      "1508:                 access_status = HTTP_BAD_REQUEST;",
      "1509:                 goto die_unusable_input;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1437:         }",
      "1438:     }",
      "1482:     ap_add_input_filter_handle(ap_http_input_filter_handle,",
      "1483:                                NULL, r, r->connection);",
      "1492:     }",
      "1515:     }",
      "1518:     return r;",
      "1520:     AP_READ_REQUEST_FAILURE((uintptr_t)r);",
      "1522: }",
      "",
      "[Removed Lines]",
      "1440:     apr_brigade_destroy(tmp_bb);",
      "1445:     ap_update_vhost_from_headers(r);",
      "1446:     access_status = r->status;",
      "1451:     if (cur_timeout != r->server->timeout) {",
      "1452:         apr_socket_timeout_set(csd, r->server->timeout);",
      "1453:         cur_timeout = r->server->timeout;",
      "1454:     }",
      "1457:     r->per_dir_config = r->server->lookup_defaults;",
      "1459:     if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))",
      "1460:         || ((r->proto_num == HTTP_VERSION(1, 1))",
      "1461:             && !apr_table_get(r->headers_in, \"Host\"))) {",
      "1469:         access_status = HTTP_BAD_REQUEST;",
      "1470:         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)",
      "1471:                       \"client sent HTTP/1.1 request without hostname \"",
      "1472:                       \"(see RFC2616 section 14.23): %s\", r->uri);",
      "1473:     }",
      "1485:     if (access_status != HTTP_OK",
      "1486:         || (access_status = ap_run_post_read_request(r))) {",
      "1487:         ap_die(access_status, r);",
      "1488:         ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1489:         ap_run_log_transaction(r);",
      "1490:         r = NULL;",
      "1491:         goto traceout;",
      "1494:     if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)",
      "1495:         && (expect[0] != '\\0')) {",
      "1502:         if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {",
      "1503:             r->expecting_100 = 1;",
      "1504:         }",
      "1505:         else {",
      "1506:             r->status = HTTP_EXPECTATION_FAILED;",
      "1507:             ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)",
      "1508:                           \"client sent an unrecognized expectation value of \"",
      "1509:                           \"Expect: %s\", expect);",
      "1510:             ap_send_error_response(r, 0);",
      "1511:             ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);",
      "1512:             ap_run_log_transaction(r);",
      "1513:             goto traceout;",
      "1514:         }",
      "1517:     AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method, (char *)r->uri, (char *)r->server->defn_name, r->status);",
      "1519:     traceout:",
      "1521:     return r;",
      "",
      "[Added Lines]",
      "1539:     if (!ap_check_request_header(r)) {",
      "1541:         apply_server_config(r);",
      "1542:         access_status = r->status;",
      "1543:         goto die_before_hooks;",
      "1547:     apply_server_config(r);",
      "1549:     if ((access_status = ap_run_post_read_request(r))) {",
      "1550:         goto die;",
      "1553:     AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method,",
      "1554:                             (char *)r->uri, (char *)r->server->defn_name,",
      "1555:                             r->status);",
      "1560: die_unusable_input:",
      "1564:     {",
      "1565:         ap_filter_t *f = conn->input_filters;",
      "1566:         while (f) {",
      "1567:             if (f->frec == ap_core_input_filter_handle) {",
      "1568:                 core_net_rec *net = f->ctx;",
      "1569:                 apr_brigade_cleanup(net->in_ctx->b);",
      "1570:                 break;",
      "1571:             }",
      "1572:             ap_remove_input_filter(f);",
      "1573:             f = f->next;",
      "1574:         }",
      "1575:         conn->input_filters = r->input_filters = f;",
      "1576:         conn->keepalive = AP_CONN_CLOSE;",
      "1577:     }",
      "1579: die_before_hooks:",
      "1581:     r->status = HTTP_OK;",
      "1583: die:",
      "1584:     ap_die(access_status, r);",
      "1589:     {",
      "1590:         apr_bucket_brigade *eor_bb;",
      "1591:         eor_bb = apr_brigade_create(conn->pool, conn->bucket_alloc);",
      "1592:         APR_BRIGADE_INSERT_TAIL(eor_bb,",
      "1593:                                 ap_bucket_eor_create(conn->bucket_alloc, r));",
      "1594:         ap_pass_brigade(conn->output_filters, eor_bb);",
      "1595:         apr_brigade_cleanup(eor_bb);",
      "1596:     }",
      "1598: ignore:",
      "1599:     r = NULL;",
      "1601:     return NULL;",
      "",
      "---------------"
    ],
    "server/vhost.c||server/vhost.c": [
      "File: server/vhost.c -> server/vhost.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #include \"http_vhost.h\"",
      "35: #include \"http_protocol.h\"",
      "36: #include \"http_core.h\"",
      "38: #if APR_HAVE_ARPA_INET_H",
      "39: #include <arpa/inet.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: #include \"http_main.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "973: }",
      "977: {",
      "",
      "[Removed Lines]",
      "976: static void check_hostalias(request_rec *r)",
      "",
      "[Added Lines]",
      "983: static int update_server_from_aliases(request_rec *r)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1051:         goto found;",
      "1052:     }",
      "1056: found:",
      "1058:     r->server = s;",
      "1059: }",
      "",
      "[Removed Lines]",
      "1054:     return;",
      "",
      "[Added Lines]",
      "1061:     if (!r->connection->vhost_lookup_data) {",
      "1062:         if (matches_aliases(r->server, host)) {",
      "1063:             s = r->server;",
      "1064:             goto found;",
      "1065:         }",
      "1066:     }",
      "1067:     return HTTP_BAD_REQUEST;",
      "1072:     return HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1135: }",
      "1137: AP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r)",
      "1138: {",
      "1139:     core_server_config *conf = ap_get_core_module_config(r->server->module_config);",
      "1140:     const char *host_header = apr_table_get(r->headers_in, \"Host\");",
      "1141:     int is_v6literal = 0;",
      "1142:     int have_hostname_from_url = 0;",
      "1144:     if (r->hostname) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1152: {",
      "1153:     ap_update_vhost_from_headers_ex(r, 0);",
      "1154: }",
      "1156: AP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match)",
      "1162:     int rc = HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1152:     else if (host_header != NULL) {",
      "1153:         is_v6literal = fix_hostname(r, host_header, conf->http_conformance);",
      "1154:     }",
      "1158:     if (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE) {",
      "",
      "[Removed Lines]",
      "1155:     if (r->status != HTTP_OK)",
      "1156:         return;",
      "",
      "[Added Lines]",
      "1175:     if (!require_match && r->status != HTTP_OK)",
      "1176:         return HTTP_OK;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1175:     if (r->connection->vhost_lookup_data) {",
      "1176:         if (r->hostname)",
      "1178:         else",
      "1179:             check_serverpath(r);",
      "1180:     }",
      "1181: }",
      "",
      "[Removed Lines]",
      "1177:             check_hostalias(r);",
      "",
      "[Added Lines]",
      "1197:             rc = update_server_from_aliases(r);",
      "1201:     else if (require_match && r->hostname) {",
      "1203:         rc = update_server_from_aliases(r);",
      "1204:     }",
      "1206:     return rc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc55d74fe008b846bf351c454f88d50b85c81dfa",
      "candidate_info": {
        "commit_hash": "dc55d74fe008b846bf351c454f88d50b85c81dfa",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/dc55d74fe008b846bf351c454f88d50b85c81dfa",
        "files": [
          "server/protocol.c"
        ],
        "message": "Validate request-target per RFC 7230 section 5.3.\n\nRFC 7230 requires that the request-line URI be absolute, besides\n\"CONNECT authority-form\" and \"OPTIONS asterisk-form\".\n\nEnforce it in ap_parse_request_line().\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1879078 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "server/protocol.c||server/protocol.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server/protocol.c||server/protocol.c"
          ],
          "candidate": [
            "server/protocol.c||server/protocol.c"
          ]
        }
      },
      "candidate_diff": {
        "server/protocol.c||server/protocol.c": [
          "File: server/protocol.c -> server/protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:         }",
          "642:         r->args = r->parsed_uri.query;",
          "646: #if defined(OS2) || defined(WIN32)",
          "",
          "[Removed Lines]",
          "643:         r->uri = r->parsed_uri.path ? r->parsed_uri.path",
          "644:                  : apr_pstrdup(r->pool, \"/\");",
          "",
          "[Added Lines]",
          "643:         if (r->parsed_uri.path) {",
          "644:             r->uri = r->parsed_uri.path;",
          "645:         }",
          "646:         else if (r->method_number == M_OPTIONS) {",
          "647:             r->uri = apr_pstrdup(r->pool, \"*\");",
          "648:         }",
          "649:         else {",
          "650:             r->uri = apr_pstrdup(r->pool, \"/\");",
          "651:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "905:         r->header_only = 1;",
          "907:     ap_parse_uri(r, uri);",
          "910:     if (r->proto_num == HTTP_VERSION(0, 9) && deferred_error == rrl_none) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915:     if (r->status == HTTP_OK",
          "916:             && (r->parsed_uri.path != NULL)",
          "917:             && (r->parsed_uri.path[0] != '/')",
          "918:             && (r->method_number != M_OPTIONS",
          "919:                 || strcmp(r->parsed_uri.path, \"*\") != 0)) {",
          "921:         r->status = HTTP_BAD_REQUEST;",
          "922:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a63c5ae6238a01ac698e1a0b2da8523bde2a8777",
      "candidate_info": {
        "commit_hash": "a63c5ae6238a01ac698e1a0b2da8523bde2a8777",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/a63c5ae6238a01ac698e1a0b2da8523bde2a8777",
        "files": [
          "modules/http2/h2_request.c"
        ],
        "message": "* mod_http2: using the ap_parse_request_line() unconditionally, now that it is available in 2.4.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1890247 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http2/h2_request.c||modules/http2/h2_request.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ],
          "candidate": [
            "modules/http2/h2_request.c||modules/http2/h2_request.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http2/h2_request.c||modules/http2/h2_request.c": [
          "File: modules/http2/h2_request.c -> modules/http2/h2_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     return dst;",
          "211: }",
          "271: request_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)",
          "272: {",
          "276:     request_rec *r = ap_create_request(c);",
          "282:     ap_run_pre_read_request(r, c);",
          "",
          "[Removed Lines]",
          "213: #if !AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
          "214: static request_rec *my_ap_create_request(conn_rec *c)",
          "215: {",
          "216:     apr_pool_t *p;",
          "217:     request_rec *r;",
          "219:     apr_pool_create(&p, c->pool);",
          "220:     apr_pool_tag(p, \"request\");",
          "221:     r = apr_pcalloc(p, sizeof(request_rec));",
          "222:     AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)c);",
          "223:     r->pool            = p;",
          "224:     r->connection      = c;",
          "225:     r->server          = c->base_server;",
          "227:     r->user            = NULL;",
          "228:     r->ap_auth_type    = NULL;",
          "230:     r->allowed_methods = ap_make_method_list(p, 2);",
          "232:     r->headers_in      = apr_table_make(r->pool, 5);",
          "233:     r->trailers_in     = apr_table_make(r->pool, 5);",
          "234:     r->subprocess_env  = apr_table_make(r->pool, 25);",
          "235:     r->headers_out     = apr_table_make(r->pool, 12);",
          "236:     r->err_headers_out = apr_table_make(r->pool, 5);",
          "237:     r->trailers_out    = apr_table_make(r->pool, 5);",
          "238:     r->notes           = apr_table_make(r->pool, 5);",
          "240:     r->request_config  = ap_create_request_config(r->pool);",
          "243:     r->proto_output_filters = c->output_filters;",
          "244:     r->output_filters  = r->proto_output_filters;",
          "245:     r->proto_input_filters = c->input_filters;",
          "246:     r->input_filters   = r->proto_input_filters;",
          "247:     ap_run_create_request(r);",
          "248:     r->per_dir_config  = r->server->lookup_defaults;",
          "252:     r->read_length     = 0;",
          "253:     r->read_body       = REQUEST_NO_BODY;",
          "256:     r->header_only     = 0;",
          "257:     r->the_request     = NULL;",
          "262:     r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;",
          "264:     r->useragent_addr = c->client_addr;",
          "265:     r->useragent_ip = c->client_ip;",
          "267:     return r;",
          "268: }",
          "269: #endif",
          "273:     int access_status;",
          "275: #if AP_MODULE_MAGIC_AT_LEAST(20150222, 13)",
          "277: #else",
          "278:     request_rec *r = my_ap_create_request(c);",
          "279: #endif",
          "281: #if AP_MODULE_MAGIC_AT_LEAST(20200331, 3)",
          "",
          "[Added Lines]",
          "215:     int access_status = HTTP_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         r->status = HTTP_OK;",
          "308:         goto die;",
          "309:     }",
          "355:     r->per_dir_config = r->server->lookup_defaults;",
          "",
          "[Removed Lines]",
          "310: #else",
          "311:     {",
          "312:         const char *s;",
          "314:         r->headers_in = apr_table_clone(r->pool, req->headers);",
          "315:         ap_run_pre_read_request(r, c);",
          "318:         r->request_time = req->request_time;",
          "319:         r->method = apr_pstrdup(r->pool, req->method);",
          "321:         r->method_number = ap_method_number_of(r->method);",
          "322:         if (r->method_number == M_GET && r->method[0] == 'H') {",
          "323:             r->header_only = 1;",
          "324:         }",
          "325:         ap_parse_uri(r, req->path ? req->path : \"\");",
          "326:         r->protocol = (char*)\"HTTP/2.0\";",
          "327:         r->proto_num = HTTP_VERSION(2, 0);",
          "328:         r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",",
          "329:                                       r->method, req->path ? req->path : \"\");",
          "334:         r->hostname = NULL;",
          "335:         ap_update_vhost_from_headers(r);",
          "338:          r->per_dir_config = r->server->lookup_defaults;",
          "340:          s = apr_table_get(r->headers_in, \"Expect\");",
          "341:          if (s && s[0]) {",
          "342:             if (ap_cstr_casecmp(s, \"100-continue\") == 0) {",
          "343:                 r->expecting_100 = 1;",
          "344:             }",
          "345:             else {",
          "346:                 r->status = HTTP_EXPECTATION_FAILED;",
          "347:                 access_status = r->status;",
          "348:                 goto die;",
          "349:             }",
          "350:          }",
          "351:     }",
          "352: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}