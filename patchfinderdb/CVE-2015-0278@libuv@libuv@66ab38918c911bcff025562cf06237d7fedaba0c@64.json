{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7d027c3a89ab81f9262e488e300cdc7f0355553",
      "candidate_info": {
        "commit_hash": "b7d027c3a89ab81f9262e488e300cdc7f0355553",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b7d027c3a89ab81f9262e488e300cdc7f0355553",
        "files": [
          "include/uv.h",
          "src/unix/stream.c",
          "src/win/pipe.c",
          "src/win/tcp.c",
          "src/win/tty.c",
          "test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c",
          "test/benchmark-pump.c",
          "test/benchmark-spawn.c",
          "test/blackhole-server.c",
          "test/dns-server.c",
          "test/echo-server.c",
          "test/test-callback-stack.c",
          "test/test-delayed-accept.c",
          "test/test-getsockname.c",
          "test/test-ipc-send-recv.c",
          "test/test-ipc.c",
          "test/test-osx-select.c",
          "test/test-ping-pong.c",
          "test/test-shutdown-eof.c",
          "test/test-spawn.c",
          "test/test-stdio-over-pipes.c",
          "test/test-tcp-open.c",
          "test/test-tcp-shutdown-after-write.c",
          "test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c",
          "test/test-tcp-writealot.c"
        ],
        "message": "include: uv_read{2}_cb now takes const uv_buf_t*\n\nPassing or returning structs as values makes life hard for people that\nwork with libuv through a foreign function interface. Switch to a\npointer-based approach.\n\nFixes #684.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/tcp.c||src/win/tcp.c",
          "src/win/tty.c||src/win/tty.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pound.c||test/benchmark-pound.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/benchmark-spawn.c||test/benchmark-spawn.c",
          "test/blackhole-server.c||test/blackhole-server.c",
          "test/dns-server.c||test/dns-server.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-callback-stack.c||test/test-callback-stack.c",
          "test/test-delayed-accept.c||test/test-delayed-accept.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-osx-select.c||test/test-osx-select.c",
          "test/test-ping-pong.c||test/test-ping-pong.c",
          "test/test-shutdown-eof.c||test/test-shutdown-eof.c",
          "test/test-spawn.c||test/test-spawn.c",
          "test/test-stdio-over-pipes.c||test/test-stdio-over-pipes.c",
          "test/test-tcp-open.c||test/test-tcp-open.c",
          "test/test-tcp-shutdown-after-write.c||test/test-tcp-shutdown-after-write.c",
          "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c",
          "test/test-tcp-writealot.c||test/test-tcp-writealot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: typedef void (*uv_write_cb)(uv_write_t* req, int status);",
          "378: typedef void (*uv_connect_cb)(uv_connect_t* req, int status);",
          "",
          "[Removed Lines]",
          "367: typedef void (*uv_read_cb)(uv_stream_t* stream, ssize_t nread, uv_buf_t buf);",
          "374: typedef void (*uv_read2_cb)(uv_pipe_t* pipe, ssize_t nread, uv_buf_t buf,",
          "375:     uv_handle_type pending);",
          "",
          "[Added Lines]",
          "367: typedef void (*uv_read_cb)(uv_stream_t* stream,",
          "368:                            ssize_t nread,",
          "369:                            const uv_buf_t* buf);",
          "376: typedef void (*uv_read2_cb)(uv_pipe_t* pipe,",
          "377:                             ssize_t nread,",
          "378:                             const uv_buf_t* buf,",
          "379:                             uv_handle_type pending);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939: static void uv__stream_read_cb(uv_stream_t* stream,",
          "940:                                int status,",
          "942:                                uv_handle_type type) {",
          "943:   if (stream->read_cb != NULL)",
          "944:     stream->read_cb(stream, status, buf);",
          "",
          "[Removed Lines]",
          "941:                                uv_buf_t buf,",
          "",
          "[Added Lines]",
          "941:                                const uv_buf_t* buf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "947: }",
          "951:   stream->flags |= UV_STREAM_READ_EOF;",
          "952:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "953:   if (!uv__io_active(&stream->io_watcher, UV__POLLOUT))",
          "",
          "[Removed Lines]",
          "950: static void uv__stream_eof(uv_stream_t* stream, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "950: static void uv__stream_eof(uv_stream_t* stream, const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "982:     stream->alloc_cb((uv_handle_t*)stream, 64 * 1024, &buf);",
          "983:     if (buf.len == 0) {",
          "986:       return;",
          "987:     }",
          "",
          "[Removed Lines]",
          "985:       uv__stream_read_cb(stream, UV_ENOBUFS, buf, UV_UNKNOWN_HANDLE);",
          "",
          "[Added Lines]",
          "985:       uv__stream_read_cb(stream, UV_ENOBUFS, &buf, UV_UNKNOWN_HANDLE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1019:         if (stream->flags & UV_STREAM_READING) {",
          "1020:           uv__io_start(stream->loop, &stream->io_watcher, UV__POLLIN);",
          "1021:         }",
          "1023:       } else {",
          "1026:         assert(!uv__io_active(&stream->io_watcher, UV__POLLIN) &&",
          "1027:                \"stream->read_cb(status=-1) did not call uv_close()\");",
          "1028:       }",
          "1029:       return;",
          "1030:     } else if (nread == 0) {",
          "1032:       return;",
          "1033:     } else {",
          "1035:       ssize_t buflen = buf.len;",
          "1037:       if (stream->read_cb) {",
          "1039:       } else {",
          "1040:         assert(stream->read2_cb);",
          "",
          "[Removed Lines]",
          "1022:         uv__stream_read_cb(stream, 0, buf, UV_UNKNOWN_HANDLE);",
          "1025:         uv__stream_read_cb(stream, -errno, buf, UV_UNKNOWN_HANDLE);",
          "1031:       uv__stream_eof(stream, buf);",
          "1038:         stream->read_cb(stream, nread, buf);",
          "",
          "[Added Lines]",
          "1022:         uv__stream_read_cb(stream, 0, &buf, UV_UNKNOWN_HANDLE);",
          "1025:         uv__stream_read_cb(stream, -errno, &buf, UV_UNKNOWN_HANDLE);",
          "1031:       uv__stream_eof(stream, &buf);",
          "1038:         stream->read_cb(stream, nread, &buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1072:         if (stream->accepted_fd >= 0) {",
          "1075:         } else {",
          "1077:         }",
          "1078:       }",
          "",
          "[Removed Lines]",
          "1073:           stream->read2_cb((uv_pipe_t*)stream, nread, buf,",
          "1074:               uv__handle_type(stream->accepted_fd));",
          "1076:           stream->read2_cb((uv_pipe_t*)stream, nread, buf, UV_UNKNOWN_HANDLE);",
          "",
          "[Added Lines]",
          "1073:           stream->read2_cb((uv_pipe_t*) stream,",
          "1074:                            nread,",
          "1075:                            &buf,",
          "1076:                            uv__handle_type(stream->accepted_fd));",
          "1078:           stream->read2_cb((uv_pipe_t*) stream, nread, &buf, UV_UNKNOWN_HANDLE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1147:       (stream->flags & UV_STREAM_READ_PARTIAL) &&",
          "1148:       !(stream->flags & UV_STREAM_READ_EOF)) {",
          "1149:     uv_buf_t buf = { NULL, 0 };",
          "1151:   }",
          "1153:   if (uv__stream_fd(stream) == -1)",
          "",
          "[Removed Lines]",
          "1150:     uv__stream_eof(stream, buf);",
          "",
          "[Added Lines]",
          "1152:     uv__stream_eof(stream, &buf);",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1296:   uv_read_stop((uv_stream_t*) handle);",
          "1298:   if (handle->read2_cb) {",
          "1300:   } else {",
          "1302:   }",
          "1303: }",
          "",
          "[Removed Lines]",
          "1299:     handle->read2_cb(handle, UV_EOF, uv_null_buf_, UV_UNKNOWN_HANDLE);",
          "1301:     handle->read_cb((uv_stream_t*) handle, UV_EOF, uv_null_buf_);",
          "",
          "[Added Lines]",
          "1299:     handle->read2_cb(handle, UV_EOF, &uv_null_buf_, UV_UNKNOWN_HANDLE);",
          "1301:     handle->read_cb((uv_stream_t*) handle, UV_EOF, &uv_null_buf_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1314:   if (handle->read2_cb) {",
          "1315:     handle->read2_cb(handle,",
          "1316:                      uv_translate_sys_error(error),",
          "1318:                      UV_UNKNOWN_HANDLE);",
          "1319:   } else {",
          "1321:   }",
          "1322: }",
          "",
          "[Removed Lines]",
          "1317:                      buf,",
          "1320:     handle->read_cb((uv_stream_t*)handle, uv_translate_sys_error(error), buf);",
          "",
          "[Added Lines]",
          "1317:                      &buf,",
          "1320:     handle->read_cb((uv_stream_t*)handle, uv_translate_sys_error(error), &buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1432:       handle->alloc_cb((uv_handle_t*) handle, avail, &buf);",
          "1433:       if (buf.len == 0) {",
          "1434:         if (handle->read2_cb) {",
          "1436:         } else if (handle->read_cb) {",
          "1438:         }",
          "1439:         break;",
          "1440:       }",
          "",
          "[Removed Lines]",
          "1435:           handle->read2_cb(handle, UV_ENOBUFS, buf, UV_UNKNOWN_HANDLE);",
          "1437:           handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "",
          "[Added Lines]",
          "1435:           handle->read2_cb(handle, UV_ENOBUFS, &buf, UV_UNKNOWN_HANDLE);",
          "1437:           handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, &buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1451:           handle->remaining_ipc_rawdata_bytes =",
          "1452:             handle->remaining_ipc_rawdata_bytes - bytes;",
          "1453:           if (handle->read2_cb) {",
          "1455:               handle->pending_ipc_info.socket_info ? UV_TCP : UV_UNKNOWN_HANDLE);",
          "1456:           } else if (handle->read_cb) {",
          "1458:           }",
          "1460:           if (handle->pending_ipc_info.socket_info) {",
          "",
          "[Removed Lines]",
          "1454:             handle->read2_cb(handle, bytes, buf,",
          "1457:             handle->read_cb((uv_stream_t*)handle, bytes, buf);",
          "",
          "[Added Lines]",
          "1454:             handle->read2_cb(handle, bytes, &buf,",
          "1457:             handle->read_cb((uv_stream_t*)handle, bytes, &buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1462:             handle->pending_ipc_info.socket_info = NULL;",
          "1463:           }",
          "1464:         } else {",
          "1466:         }",
          "",
          "[Removed Lines]",
          "1465:           handle->read_cb((uv_stream_t*)handle, bytes, buf);",
          "",
          "[Added Lines]",
          "1465:           handle->read_cb((uv_stream_t*)handle, bytes, &buf);",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     handle->flags &= ~UV_HANDLE_ZERO_READ;",
          "437:     handle->alloc_cb((uv_handle_t*) handle, 65536, &handle->read_buffer);",
          "438:     if (handle->read_buffer.len == 0) {",
          "440:       return;",
          "441:     }",
          "442:     assert(handle->read_buffer.base != NULL);",
          "",
          "[Removed Lines]",
          "439:       handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, handle->read_buffer);",
          "",
          "[Added Lines]",
          "439:       handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, &handle->read_buffer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:       handle->read_cb((uv_stream_t*)handle,",
          "918:                       uv_translate_sys_error(err),",
          "920:     }",
          "921:   } else {",
          "922:     if (!(handle->flags & UV_HANDLE_ZERO_READ)) {",
          "",
          "[Removed Lines]",
          "919:                       buf);",
          "",
          "[Added Lines]",
          "919:                       &buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "926:         handle->read_cb((uv_stream_t*)handle,",
          "927:                         req->overlapped.InternalHigh,",
          "930:         if (req->overlapped.InternalHigh < handle->read_buffer.len) {",
          "931:           goto done;",
          "",
          "[Removed Lines]",
          "928:                         handle->read_buffer);",
          "",
          "[Added Lines]",
          "928:                         &handle->read_buffer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "941:         buf.base = 0;",
          "942:         buf.len = 0;",
          "944:         goto done;",
          "945:       }",
          "946:     }",
          "",
          "[Removed Lines]",
          "943:         handle->read_cb((uv_stream_t*)handle, UV_EOF, handle->read_buffer);",
          "",
          "[Added Lines]",
          "943:         handle->read_cb((uv_stream_t*)handle, UV_EOF, &handle->read_buffer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "949:     while (handle->flags & UV_HANDLE_READING) {",
          "950:       handle->alloc_cb((uv_handle_t*) handle, 65536, &buf);",
          "951:       if (buf.len == 0) {",
          "953:         break;",
          "954:       }",
          "955:       assert(buf.base != NULL);",
          "",
          "[Removed Lines]",
          "952:         handle->read_cb(handle, UV_ENOBUFS, buf);",
          "",
          "[Added Lines]",
          "952:         handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, &buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "964:                   NULL) != SOCKET_ERROR) {",
          "965:         if (bytes > 0) {",
          "969:           if (bytes < buf.len) {",
          "970:             break;",
          "",
          "[Removed Lines]",
          "967:           handle->read_cb((uv_stream_t*)handle, bytes, buf);",
          "",
          "[Added Lines]",
          "967:           handle->read_cb((uv_stream_t*)handle, bytes, &buf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "974:           handle->flags &= ~(UV_HANDLE_READING | UV_HANDLE_READABLE);",
          "975:           DECREASE_ACTIVE_COUNT(loop, handle);",
          "978:           break;",
          "979:         }",
          "980:       } else {",
          "981:         err = WSAGetLastError();",
          "982:         if (err == WSAEWOULDBLOCK) {",
          "985:         } else {",
          "987:           handle->flags &= ~UV_HANDLE_READING;",
          "",
          "[Removed Lines]",
          "977:           handle->read_cb((uv_stream_t*)handle, UV_EOF, buf);",
          "984:           handle->read_cb((uv_stream_t*)handle, 0, buf);",
          "",
          "[Added Lines]",
          "977:           handle->read_cb((uv_stream_t*)handle, UV_EOF, &buf);",
          "984:           handle->read_cb((uv_stream_t*)handle, 0, &buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "996:           handle->read_cb((uv_stream_t*)handle,",
          "997:                           uv_translate_sys_error(err),",
          "999:         }",
          "1000:         break;",
          "1001:       }",
          "",
          "[Removed Lines]",
          "998:                           buf);",
          "",
          "[Added Lines]",
          "998:                           &buf);",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:   handle->alloc_cb((uv_handle_t*) handle, 8192, &handle->read_line_buffer);",
          "351:   if (handle->read_line_buffer.len == 0) {",
          "353:     return;",
          "354:   }",
          "355:   assert(handle->read_line_buffer.base != NULL);",
          "",
          "[Removed Lines]",
          "352:     handle->read_cb(handle, UV_ENOBUFS, handle->read_line_buffer);",
          "",
          "[Added Lines]",
          "352:     handle->read_cb((uv_stream_t*) handle,",
          "353:                     UV_ENOBUFS,",
          "354:                     &handle->read_line_buffer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486:       handle->flags &= ~UV_HANDLE_READING;",
          "487:       handle->read_cb((uv_stream_t*)handle,",
          "488:                       uv_translate_sys_error(GET_REQ_ERROR(req)),",
          "490:     }",
          "491:     goto out;",
          "492:   }",
          "",
          "[Removed Lines]",
          "489:                       uv_null_buf_);",
          "",
          "[Added Lines]",
          "491:                       &uv_null_buf_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "497:     DECREASE_ACTIVE_COUNT(loop, handle);",
          "498:     handle->read_cb((uv_stream_t*)handle,",
          "499:                     uv_translate_sys_error(GetLastError()),",
          "501:     goto out;",
          "502:   }",
          "",
          "[Removed Lines]",
          "500:                     uv_null_buf_);",
          "",
          "[Added Lines]",
          "502:                     &uv_null_buf_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "518:         DECREASE_ACTIVE_COUNT(loop, handle);",
          "519:         handle->read_cb((uv_stream_t*) handle,",
          "520:                         uv_translate_sys_error(GetLastError()),",
          "522:         goto out;",
          "523:       }",
          "524:       records_left--;",
          "",
          "[Removed Lines]",
          "521:                         buf);",
          "",
          "[Added Lines]",
          "523:                         &buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638:           DECREASE_ACTIVE_COUNT(loop, handle);",
          "639:           handle->read_cb((uv_stream_t*) handle,",
          "640:                           uv_translate_sys_error(GetLastError()),",
          "642:           goto out;",
          "643:         }",
          "",
          "[Removed Lines]",
          "641:                           buf);",
          "",
          "[Added Lines]",
          "643:                           &buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "686:         if (buf_used == 0) {",
          "687:           handle->alloc_cb((uv_handle_t*) handle, 1024, &buf);",
          "688:           if (buf.len == 0) {",
          "690:             goto out;",
          "691:           }",
          "692:           assert(buf.base != NULL);",
          "",
          "[Removed Lines]",
          "689:             handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "",
          "[Added Lines]",
          "691:             handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, &buf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "698:         if (buf_used == buf.len) {",
          "700:           buf = uv_null_buf_;",
          "701:           buf_used = 0;",
          "702:         }",
          "",
          "[Removed Lines]",
          "699:           handle->read_cb((uv_stream_t*) handle, buf_used, buf);",
          "",
          "[Added Lines]",
          "701:           handle->read_cb((uv_stream_t*) handle, buf_used, &buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "719:   if (buf_used > 0) {",
          "721:   }",
          "723:  out:",
          "",
          "[Removed Lines]",
          "720:     handle->read_cb((uv_stream_t*) handle, buf_used, buf);",
          "",
          "[Added Lines]",
          "722:     handle->read_cb((uv_stream_t*) handle, buf_used, &buf);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "755:       DECREASE_ACTIVE_COUNT(loop, handle);",
          "756:       handle->read_cb((uv_stream_t*) handle,",
          "757:                       uv_translate_sys_error(GET_REQ_ERROR(req)),",
          "759:     } else {",
          "762:     }",
          "764:   } else {",
          "767:     DWORD bytes = req->overlapped.InternalHigh;",
          "769:   }",
          "",
          "[Removed Lines]",
          "758:                       buf);",
          "761:       handle->read_cb((uv_stream_t*) handle, 0, buf);",
          "768:     handle->read_cb((uv_stream_t*) handle, bytes, buf);",
          "",
          "[Added Lines]",
          "760:                       &buf);",
          "763:       handle->read_cb((uv_stream_t*) handle, 0, &buf);",
          "770:     handle->read_cb((uv_stream_t*) handle, bytes, &buf);",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: static void ipc_connect_cb(uv_connect_t* req, int status);",
          "86: static void ipc_read2_cb(uv_pipe_t* ipc_pipe,",
          "87:                          ssize_t nread,",
          "89:                          uv_handle_type type);",
          "90: static void ipc_alloc_cb(uv_handle_t* handle,",
          "91:                          size_t suggested_size,",
          "",
          "[Removed Lines]",
          "88:                          uv_buf_t buf,",
          "",
          "[Added Lines]",
          "88:                          const uv_buf_t* buf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: static void sv_async_cb(uv_async_t* handle, int status);",
          "95: static void sv_connection_cb(uv_stream_t* server_handle, int status);",
          "97: static void sv_alloc_cb(uv_handle_t* handle,",
          "98:                         size_t suggested_size,",
          "99:                         uv_buf_t* buf);",
          "",
          "[Removed Lines]",
          "96: static void sv_read_cb(uv_stream_t* handle, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "96: static void sv_read_cb(uv_stream_t* handle, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174: static void ipc_read2_cb(uv_pipe_t* ipc_pipe,",
          "175:                          ssize_t nread,",
          "177:                          uv_handle_type type) {",
          "178:   struct ipc_client_ctx* ctx;",
          "179:   uv_loop_t* loop;",
          "",
          "[Removed Lines]",
          "176:                          uv_buf_t buf,",
          "",
          "[Added Lines]",
          "176:                          const uv_buf_t* buf,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: }",
          "315:   ASSERT(nread == UV_EOF);",
          "316:   uv_close((uv_handle_t*) handle, (uv_close_cb) free);",
          "317: }",
          "",
          "[Removed Lines]",
          "314: static void sv_read_cb(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "314: static void sv_read_cb(uv_stream_t* handle,",
          "315:                        ssize_t nread,",
          "316:                        const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: }",
          "75:   ab->next = buf_freelist;",
          "76:   buf_freelist = ab;",
          "77: }",
          "",
          "[Removed Lines]",
          "72: static void buf_free(uv_buf_t uv_buf_t) {",
          "73:   buf_t* ab = (buf_t*) (uv_buf_t.base - sizeof *ab);",
          "",
          "[Added Lines]",
          "72: static void buf_free(const uv_buf_t* buf) {",
          "73:   buf_t* ab = (buf_t*) buf->base - 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121: }",
          "125:   ssize_t i;",
          "126:   pinger_t* pinger;",
          "",
          "[Removed Lines]",
          "124: static void pinger_read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "123: static void pinger_read_cb(uv_stream_t* tcp,",
          "124:                            ssize_t nread,",
          "125:                            const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   if (nread < 0) {",
          "131:     ASSERT(nread == UV_EOF);",
          "134:       buf_free(buf);",
          "135:     }",
          "",
          "[Removed Lines]",
          "133:     if (buf.base) {",
          "",
          "[Added Lines]",
          "134:     if (buf->base) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:   for (i = 0; i < nread; i++) {",
          "146:     pinger->state = (pinger->state + 1) % (sizeof(PING) - 1);",
          "147:     if (pinger->state == 0) {",
          "148:       pinger->pongs++;",
          "",
          "[Removed Lines]",
          "145:     ASSERT(buf.base[i] == PING[pinger->state]);",
          "",
          "[Added Lines]",
          "146:     ASSERT(buf->base[i] == PING[pinger->state]);",
          "",
          "---------------"
        ],
        "test/benchmark-pound.c||test/benchmark-pound.c": [
          "File: test/benchmark-pound.c -> test/benchmark-pound.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static void alloc_cb(uv_handle_t* handle, size_t suggested_size, uv_buf_t* buf);",
          "79: static void connect_cb(uv_connect_t* conn_req, int status);",
          "81: static void close_cb(uv_handle_t* handle);",
          "",
          "[Removed Lines]",
          "80: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "80: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: }",
          "140:   ASSERT(stream != NULL);",
          "",
          "[Removed Lines]",
          "138: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "138: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static void req_free(uv_req_t* uv_req);",
          "44: static void buf_alloc(uv_handle_t* handle, size_t size, uv_buf_t* buf);",
          "47: static uv_loop_t* loop;",
          "",
          "[Removed Lines]",
          "45: static void buf_free(uv_buf_t uv_buf_t);",
          "",
          "[Added Lines]",
          "45: static void buf_free(const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: }",
          "162:   if (nrecv_total == 0) {",
          "163:     ASSERT(start_time == 0);",
          "164:     uv_update_time(loop);",
          "",
          "[Removed Lines]",
          "161: static void read_cb(uv_stream_t* stream, ssize_t bytes, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "161: static void read_cb(uv_stream_t* stream, ssize_t bytes, const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347: }",
          "355: }",
          "",
          "[Removed Lines]",
          "350: static void buf_free(uv_buf_t uv_buf_t) {",
          "351:   buf_list_t* buf = (buf_list_t*) (uv_buf_t.base - sizeof *buf);",
          "353:   buf->next = buf_freelist;",
          "354:   buf_freelist = buf;",
          "",
          "[Added Lines]",
          "350: static void buf_free(const uv_buf_t* buf) {",
          "351:   buf_list_t* ab = (buf_list_t*) buf->base - 1;",
          "352:   ab->next = buf_freelist;",
          "353:   buf_freelist = ab;",
          "",
          "---------------"
        ],
        "test/benchmark-spawn.c||test/benchmark-spawn.c": [
          "File: test/benchmark-spawn.c -> test/benchmark-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: }",
          "92:   if (nread > 0) {",
          "93:     ASSERT(pipe_open == 1);",
          "94:     output_used += nread;",
          "",
          "[Removed Lines]",
          "91: static void on_read(uv_stream_t* pipe, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "91: static void on_read(uv_stream_t* pipe, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/blackhole-server.c||test/blackhole-server.c": [
          "File: test/blackhole-server.c -> test/blackhole-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: static void connection_cb(uv_stream_t* stream, int status);",
          "36: static void alloc_cb(uv_handle_t* handle, size_t suggested_size, uv_buf_t* buf);",
          "38: static void shutdown_cb(uv_shutdown_t* req, int status);",
          "39: static void close_cb(uv_handle_t* handle);",
          "",
          "[Removed Lines]",
          "37: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "37: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: }",
          "73:   conn_rec* conn;",
          "74:   int r;",
          "",
          "[Removed Lines]",
          "72: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "72: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/dns-server.c||test/dns-server.c": [
          "File: test/dns-server.c -> test/dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: static void after_write(uv_write_t* req, int status);",
          "58: static void on_close(uv_handle_t* peer);",
          "59: static void on_connection(uv_stream_t*, int status);",
          "",
          "[Removed Lines]",
          "57: static void after_read(uv_stream_t*, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "57: static void after_read(uv_stream_t*, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   wr->buf.len += rsplen;",
          "125: }",
          "128:   write_req_t* wr;",
          "129:   dnshandle* dns = (dnshandle*)handle;",
          "130:   char hdrbuf[DNSREC_LEN];",
          "",
          "[Removed Lines]",
          "127: static void process_req(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "127: static void process_req(uv_stream_t* handle,",
          "128:                         ssize_t nread,",
          "129:                         const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     readbuf_remaining = dns->state.prevbuf_rem;",
          "145:     usingprev = 1;",
          "146:   } else {",
          "148:     readbuf_remaining = nread;",
          "149:   }",
          "150:   hdrstart = dnsreq;",
          "",
          "[Removed Lines]",
          "147:     dnsreq = buf.base;",
          "",
          "[Added Lines]",
          "149:     dnsreq = buf->base;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:     if (usingprev == 1) {",
          "196:       free(dns->state.prevbuf_ptr);",
          "198:       readbuf_remaining = nread;",
          "199:       usingprev = 0;",
          "200:     } else {",
          "",
          "[Removed Lines]",
          "197:       dnsreq = buf.base;",
          "",
          "[Added Lines]",
          "199:       dnsreq = buf->base;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:   if (readbuf_remaining > 0) {",
          "216:     dns->state.prevbuf_rem = nread - dns->state.prevbuf_pos;",
          "217:   } else {",
          "219:     dns->state.prevbuf_ptr = NULL;",
          "220:     dns->state.prevbuf_pos = 0;",
          "221:     dns->state.prevbuf_rem = 0;",
          "223:   }",
          "224: }",
          "227:   uv_shutdown_t* req;",
          "229:   if (nread < 0) {",
          "231:     ASSERT(nread == UV_EOF);",
          "235:     }",
          "237:     req = malloc(sizeof *req);",
          "",
          "[Removed Lines]",
          "214:     dns->state.prevbuf_ptr = buf.base;",
          "215:     dns->state.prevbuf_pos = hdrstart - buf.base;",
          "222:     free(buf.base);",
          "226: static void after_read(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "233:     if (buf.base) {",
          "234:       free(buf.base);",
          "",
          "[Added Lines]",
          "216:     dns->state.prevbuf_ptr = buf->base;",
          "217:     dns->state.prevbuf_pos = hdrstart - buf->base;",
          "224:     free(buf->base);",
          "228: static void after_read(uv_stream_t* handle,",
          "229:                        ssize_t nread,",
          "230:                        const uv_buf_t* buf) {",
          "237:     if (buf->base) {",
          "238:       free(buf->base);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:   if (nread == 0) {",
          "246:     return;",
          "247:   }",
          "",
          "[Removed Lines]",
          "245:     free(buf.base);",
          "",
          "[Added Lines]",
          "249:     free(buf->base);",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: static uv_handle_t* server;",
          "41: static void after_write(uv_write_t* req, int status);",
          "43: static void on_close(uv_handle_t* peer);",
          "44: static void on_server_close(uv_handle_t* handle);",
          "45: static void on_connection(uv_stream_t*, int status);",
          "",
          "[Removed Lines]",
          "42: static void after_read(uv_stream_t*, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "42: static void after_read(uv_stream_t*, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: }",
          "76:   int i;",
          "77:   write_req_t *wr;",
          "78:   uv_shutdown_t* req;",
          "",
          "[Removed Lines]",
          "75: static void after_read(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "75: static void after_read(uv_stream_t* handle,",
          "76:                        ssize_t nread,",
          "77:                        const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     ASSERT(nread == UV_EOF);",
          "86:     }",
          "88:     req = (uv_shutdown_t*) malloc(sizeof *req);",
          "",
          "[Removed Lines]",
          "84:     if (buf.base) {",
          "85:       free(buf.base);",
          "",
          "[Added Lines]",
          "86:     if (buf->base) {",
          "87:       free(buf->base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:   if (nread == 0) {",
          "97:     return;",
          "98:   }",
          "",
          "[Removed Lines]",
          "96:     free(buf.base);",
          "",
          "[Added Lines]",
          "98:     free(buf->base);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:   if (!server_closed) {",
          "105:     for (i = 0; i < nread; i++) {",
          "109:           uv_close((uv_handle_t*)handle, on_close);",
          "110:           return;",
          "111:         } else {",
          "",
          "[Removed Lines]",
          "106:       if (buf.base[i] == 'Q') {",
          "107:         if (i + 1 < nread && buf.base[i + 1] == 'S') {",
          "108:           free(buf.base);",
          "",
          "[Added Lines]",
          "108:       if (buf->base[i] == 'Q') {",
          "109:         if (i + 1 < nread && buf->base[i + 1] == 'S') {",
          "110:           free(buf->base);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:   wr = (write_req_t*) malloc(sizeof *wr);",
          "122:   if (uv_write(&wr->req, handle, &wr->buf, 1, after_write)) {",
          "123:     FATAL(\"uv_write failed\");",
          "124:   }",
          "",
          "[Removed Lines]",
          "121:   wr->buf = uv_buf_init(buf.base, nread);",
          "",
          "[Added Lines]",
          "123:   wr->buf = uv_buf_init(buf->base, nread);",
          "",
          "---------------"
        ],
        "test/test-callback-stack.c||test/test-callback-stack.c": [
          "File: test/test-callback-stack.c -> test/test-callback-stack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: }",
          "71:   ASSERT(nested == 0 && \"read_cb must be called from a fresh stack\");",
          "73:   printf(\"Read. nread == %d\\n\", (int)nread);",
          "76:   if (nread == 0) {",
          "77:     return;",
          "",
          "[Removed Lines]",
          "70: static void read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "74:   free(buf.base);",
          "",
          "[Added Lines]",
          "70: static void read_cb(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "74:   free(buf->base);",
          "",
          "---------------"
        ],
        "test/test-delayed-accept.c||test/test-delayed-accept.c": [
          "File: test/test-delayed-accept.c -> test/test-delayed-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: }",
          "123:   }",
          "125:   if (nread >= 0) {",
          "",
          "[Removed Lines]",
          "118: static void read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "121:   if (buf.base) {",
          "122:     free(buf.base);",
          "",
          "[Added Lines]",
          "118: static void read_cb(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "121:   if (buf->base) {",
          "122:     free(buf->base);",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: }",
          "64:   uv_shutdown_t* req;",
          "65:   int r;",
          "69:   }",
          "71:   req = (uv_shutdown_t*) malloc(sizeof *req);",
          "",
          "[Removed Lines]",
          "63: static void after_read(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "67:   if (buf.base) {",
          "68:     free(buf.base);",
          "",
          "[Added Lines]",
          "63: static void after_read(uv_stream_t* handle,",
          "64:                        ssize_t nread,",
          "65:                        const uv_buf_t* buf) {",
          "69:   if (buf->base) {",
          "70:     free(buf->base);",
          "",
          "---------------"
        ],
        "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c": [
          "File: test/test-ipc-send-recv.c -> test/test-ipc-send-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void recv_cb(uv_pipe_t* handle,",
          "64:                     ssize_t nread,",
          "66:                     uv_handle_type pending) {",
          "67:   int r;",
          "",
          "[Removed Lines]",
          "65:                     uv_buf_t buf,",
          "",
          "[Added Lines]",
          "65:                     const uv_buf_t* buf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: static void read2_cb(uv_pipe_t* handle,",
          "166:                      ssize_t nread,",
          "168:                      uv_handle_type pending) {",
          "169:   int r;",
          "171:   ASSERT(pending == UV_NAMED_PIPE || pending == UV_TCP);",
          "172:   ASSERT(handle == &ctx.channel);",
          "173:   ASSERT(nread >= 0);",
          "177:   if (pending == UV_NAMED_PIPE)",
          "178:     r = uv_pipe_init(ctx.channel.loop, &ctx.recv.pipe, 0);",
          "",
          "[Removed Lines]",
          "167:                      uv_buf_t buf,",
          "175:   buf = uv_buf_init(\".\", 1);",
          "",
          "[Added Lines]",
          "167:                      const uv_buf_t* rdbuf,",
          "169:   uv_buf_t wrbuf;",
          "176:   wrbuf = uv_buf_init(\".\", 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:   r = uv_write2(&ctx.write_req,",
          "189:                 (uv_stream_t*)&ctx.channel,",
          "191:                 &ctx.recv.stream,",
          "192:                 write2_cb);",
          "193:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "190:                 &buf, 1,",
          "",
          "[Added Lines]",
          "191:                 &wrbuf,",
          "192:                 1,",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: }",
          "140:   int r;",
          "141:   uv_buf_t outbuf;",
          "143:   if (nread == 0) {",
          "146:     return;",
          "147:   }",
          "149:   if (nread < 0) {",
          "150:     if (nread == UV_EOF) {",
          "152:       return;",
          "153:     }",
          "",
          "[Removed Lines]",
          "138: static void on_read(uv_pipe_t* pipe, ssize_t nread, uv_buf_t buf,",
          "139:     uv_handle_type pending) {",
          "145:     free(buf.base);",
          "151:       free(buf.base);",
          "",
          "[Added Lines]",
          "138: static void on_read(uv_pipe_t* pipe,",
          "139:                     ssize_t nread,",
          "140:                     const uv_buf_t* buf,",
          "141:                     uv_handle_type pending) {",
          "147:     free(buf->base);",
          "153:       free(buf->base);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   fprintf(stderr, \"got %d bytes\\n\", (int)nread);",
          "161:   if (!tcp_server_listening) {",
          "163:     read2_cb_called++;",
          "",
          "[Removed Lines]",
          "162:     ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);",
          "",
          "[Added Lines]",
          "164:     ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     tcp_server_listening = 1;",
          "181:     outbuf = uv_buf_init(\"world\\n\", 6);",
          "182:     r = uv_write(&write_req, (uv_stream_t*)pipe, &outbuf, 1, NULL);",
          "",
          "[Removed Lines]",
          "179:     ASSERT(memcmp(\"hello\\n\", buf.base, nread) == 0);",
          "",
          "[Added Lines]",
          "181:     ASSERT(memcmp(\"hello\\n\", buf->base, nread) == 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:     make_many_connections();",
          "189:     ASSERT(pending == UV_UNKNOWN_HANDLE);",
          "190:     remote_conn_accepted = 1;",
          "191:     uv_close((uv_handle_t*)&channel, NULL);",
          "192:   }",
          "195: }",
          "",
          "[Removed Lines]",
          "187:   } else if (memcmp(\"accepted_connection\\n\", buf.base, nread) == 0) {",
          "194:   free(buf.base);",
          "",
          "[Added Lines]",
          "189:   } else if (memcmp(\"accepted_connection\\n\", buf->base, nread) == 0) {",
          "196:   free(buf->base);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249: }",
          "253:   ASSERT(nread > 0);",
          "255:   ASSERT(tcp == (uv_stream_t*)&tcp_connection);",
          "258:   tcp_read_cb_called++;",
          "",
          "[Removed Lines]",
          "252: static void on_tcp_read(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "254:   ASSERT(memcmp(\"hello again\\n\", buf.base, nread) == 0);",
          "256:   free(buf.base);",
          "",
          "[Added Lines]",
          "254: static void on_tcp_read(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "256:   ASSERT(memcmp(\"hello again\\n\", buf->base, nread) == 0);",
          "258:   free(buf->base);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262: }",
          "267:   int r;",
          "268:   uv_buf_t outbuf;",
          "270:   if (nread == 0) {",
          "273:     return;",
          "274:   }",
          "276:   if (nread < 0) {",
          "277:     if (nread == UV_EOF) {",
          "279:       return;",
          "280:     }",
          "",
          "[Removed Lines]",
          "265: static void on_read_connection(uv_pipe_t* pipe, ssize_t nread, uv_buf_t buf,",
          "266:     uv_handle_type pending) {",
          "272:     free(buf.base);",
          "278:       free(buf.base);",
          "",
          "[Added Lines]",
          "267: static void on_read_connection(uv_pipe_t* pipe,",
          "268:                                ssize_t nread,",
          "269:                                const uv_buf_t* buf,",
          "270:                                uv_handle_type pending) {",
          "276:     free(buf->base);",
          "282:       free(buf->base);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286:   fprintf(stderr, \"got %d bytes\\n\", (int)nread);",
          "289:   read2_cb_called++;",
          "",
          "[Removed Lines]",
          "288:   ASSERT(nread > 0 && buf.base && pending != UV_UNKNOWN_HANDLE);",
          "",
          "[Added Lines]",
          "292:   ASSERT(nread > 0 && buf->base && pending != UV_UNKNOWN_HANDLE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   ASSERT(r == 0);",
          "303:   outbuf = uv_buf_init(\"world\\n\", 6);",
          "",
          "[Removed Lines]",
          "300:   ASSERT(memcmp(\"hello\\n\", buf.base, nread) == 0);",
          "",
          "[Added Lines]",
          "304:   ASSERT(memcmp(\"hello\\n\", buf->base, nread) == 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:   r = uv_read_start((uv_stream_t*)&tcp_connection, on_read_alloc, on_tcp_read);",
          "309:   ASSERT(r == 0);",
          "312: }",
          "",
          "[Removed Lines]",
          "311:   free(buf.base);",
          "",
          "[Added Lines]",
          "315:   free(buf->base);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "430: }",
          "434:   uv_buf_t outbuf;",
          "435:   int r;",
          "437:   if (nread < 0) {",
          "438:     if (nread == UV_EOF) {",
          "440:       return;",
          "441:     }",
          "",
          "[Removed Lines]",
          "433: static void on_tcp_child_process_read(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "439:       free(buf.base);",
          "",
          "[Added Lines]",
          "437: static void on_tcp_child_process_read(uv_stream_t* tcp,",
          "438:                                       ssize_t nread,",
          "439:                                       const uv_buf_t* buf) {",
          "445:       free(buf->base);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "445:   }",
          "447:   ASSERT(nread > 0);",
          "449:   on_pipe_read_called++;",
          "453:   outbuf = uv_buf_init(\"hello again\\n\", 12);",
          "",
          "[Removed Lines]",
          "448:   ASSERT(memcmp(\"world\\n\", buf.base, nread) == 0);",
          "450:   free(buf.base);",
          "",
          "[Added Lines]",
          "454:   ASSERT(memcmp(\"world\\n\", buf->base, nread) == 0);",
          "456:   free(buf->base);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "520:     (uv_stream_t*)conn, NULL);",
          "521:   ASSERT(r == 0);",
          "524:   ASSERT(r == 0);",
          "526:   uv_close((uv_handle_t*)conn, close_cb);",
          "",
          "[Removed Lines]",
          "523:   r = uv_read_start((uv_stream_t*)conn, on_read_alloc, on_tcp_child_process_read);",
          "",
          "[Added Lines]",
          "529:   r = uv_read_start((uv_stream_t*) conn,",
          "530:                     on_read_alloc,",
          "531:                     on_tcp_child_process_read);",
          "",
          "---------------"
        ],
        "test/test-osx-select.c||test/test-osx-select.c": [
          "File: test/test-osx-select.c -> test/test-osx-select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: }",
          "41:   fprintf(stdout, \"got data %d\\n\", ++read_count);",
          "43:   if (read_count == 3)",
          "",
          "[Removed Lines]",
          "40: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "40: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/test-ping-pong.c||test/test-ping-pong.c": [
          "File: test/test-ping-pong.c -> test/test-ping-pong.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: }",
          "90:   ssize_t i;",
          "91:   pinger_t* pinger;",
          "",
          "[Removed Lines]",
          "89: static void pinger_read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "89: static void pinger_read_cb(uv_stream_t* stream,",
          "90:                            ssize_t nread,",
          "91:                            const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     ASSERT(nread == UV_EOF);",
          "98:     puts(\"got EOF\");",
          "101:     uv_close((uv_handle_t*)(&pinger->stream.tcp), pinger_on_close);",
          "",
          "[Removed Lines]",
          "99:     free(buf.base);",
          "",
          "[Added Lines]",
          "101:     free(buf->base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   for (i = 0; i < nread; i++) {",
          "109:     pinger->state = (pinger->state + 1) % (sizeof(PING) - 1);",
          "111:     if (pinger->state != 0)",
          "",
          "[Removed Lines]",
          "108:     ASSERT(buf.base[i] == PING[pinger->state]);",
          "",
          "[Added Lines]",
          "110:     ASSERT(buf->base[i] == PING[pinger->state]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:     }",
          "123:   }",
          "126: }",
          "",
          "[Removed Lines]",
          "125:   free(buf.base);",
          "",
          "[Added Lines]",
          "127:   free(buf->base);",
          "",
          "---------------"
        ],
        "test/test-shutdown-eof.c||test/test-shutdown-eof.c": [
          "File: test/test-shutdown-eof.c -> test/test-shutdown-eof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: }",
          "49:   ASSERT((uv_tcp_t*)t == &tcp);",
          "51:   if (nread == 0) {",
          "53:     return;",
          "54:   }",
          "56:   if (!got_q) {",
          "57:     ASSERT(nread == 1);",
          "58:     ASSERT(!got_eof);",
          "61:     got_q = 1;",
          "62:     puts(\"got Q\");",
          "63:   } else {",
          "64:     ASSERT(nread == UV_EOF);",
          "67:     }",
          "68:     got_eof = 1;",
          "69:     puts(\"got EOF\");",
          "",
          "[Removed Lines]",
          "48: static void read_cb(uv_stream_t* t, ssize_t nread, uv_buf_t buf) {",
          "52:     free(buf.base);",
          "59:     ASSERT(buf.base[0] == 'Q');",
          "60:     free(buf.base);",
          "65:     if (buf.base) {",
          "66:       free(buf.base);",
          "",
          "[Added Lines]",
          "48: static void read_cb(uv_stream_t* t, ssize_t nread, const uv_buf_t* buf) {",
          "52:     free(buf->base);",
          "59:     ASSERT(buf->base[0] == 'Q');",
          "60:     free(buf->base);",
          "65:     if (buf->base) {",
          "66:       free(buf->base);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: }",
          "130:   if (nread > 0) {",
          "131:     output_used += nread;",
          "132:   } else if (nread < 0) {",
          "",
          "[Removed Lines]",
          "129: static void on_read(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "129: static void on_read(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/test-stdio-over-pipes.c||test/test-stdio-over-pipes.c": [
          "File: test/test-stdio-over-pipes.c -> test/test-stdio-over-pipes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: }",
          "99:   uv_write_t* req;",
          "100:   uv_buf_t wrbuf;",
          "101:   int r;",
          "",
          "[Removed Lines]",
          "98: static void on_read(uv_stream_t* tcp, ssize_t nread, uv_buf_t rdbuf) {",
          "",
          "[Added Lines]",
          "98: static void on_read(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* rdbuf) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: static uv_pipe_t stdin_pipe;",
          "165: static uv_pipe_t stdout_pipe;",
          "168:   ASSERT(nread > 0);",
          "170:   on_pipe_read_called++;",
          "174:   uv_close((uv_handle_t*)&stdin_pipe, close_cb);",
          "175:   uv_close((uv_handle_t*)&stdout_pipe, close_cb);",
          "",
          "[Removed Lines]",
          "167: static void on_pipe_read(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "169:   ASSERT(memcmp(\"hello world\\n\", buf.base, nread) == 0);",
          "172:   free(buf.base);",
          "",
          "[Added Lines]",
          "167: static void on_pipe_read(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "169:   ASSERT(memcmp(\"hello world\\n\", buf->base, nread) == 0);",
          "172:   free(buf->base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:   uv_ref((uv_handle_t*)&stdout_pipe);",
          "243:   uv_ref((uv_handle_t*)&stdin_pipe);",
          "247:   ASSERT(r == 0);",
          "249:   uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "245:   r = uv_read_start((uv_stream_t*)&stdin_pipe, on_read_alloc,",
          "246:     on_pipe_read);",
          "",
          "[Added Lines]",
          "245:   r = uv_read_start((uv_stream_t*)&stdin_pipe, on_read_alloc, on_pipe_read);",
          "",
          "---------------"
        ],
        "test/test-tcp-open.c||test/test-tcp-open.c": [
          "File: test/test-tcp-open.c -> test/test-tcp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: }",
          "100:   ASSERT(tcp != NULL);",
          "102:   if (nread >= 0) {",
          "103:     ASSERT(nread == 4);",
          "105:   }",
          "106:   else {",
          "107:     ASSERT(nread == UV_EOF);",
          "",
          "[Removed Lines]",
          "99: static void read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "104:     ASSERT(memcmp(\"PING\", buf.base, nread) == 0);",
          "",
          "[Added Lines]",
          "99: static void read_cb(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "104:     ASSERT(memcmp(\"PING\", buf->base, nread) == 0);",
          "",
          "---------------"
        ],
        "test/test-tcp-shutdown-after-write.c||test/test-tcp-shutdown-after-write.c": [
          "File: test/test-tcp-shutdown-after-write.c -> test/test-tcp-shutdown-after-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: }",
          "77: }",
          "",
          "[Removed Lines]",
          "76: static void read_cb(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "76: static void read_cb(uv_stream_t* handle, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c": [
          "File: test/test-tcp-unexpected-read.c -> test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "58:   ASSERT(0 && \"read_cb should not have been called\");",
          "59: }",
          "",
          "[Removed Lines]",
          "57: static void read_cb(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "57: static void read_cb(uv_stream_t* handle, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c": [
          "File: test/test-tcp-write-to-half-open-connection.c -> test/test-tcp-write-to-half-open-connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static void connection_cb(uv_stream_t* server, int status);",
          "30: static void connect_cb(uv_connect_t* req, int status);",
          "31: static void write_cb(uv_write_t* req, int status);",
          "33: static void alloc_cb(uv_handle_t* handle, size_t suggested_size, uv_buf_t* buf);",
          "35: static uv_tcp_t tcp_server;",
          "",
          "[Removed Lines]",
          "32: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf);",
          "",
          "[Added Lines]",
          "32: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: }",
          "78:   if (nread < 0) {",
          "79:     fprintf(stderr, \"read_cb error: %s\\n\", uv_err_name(nread));",
          "80:     ASSERT(nread == UV_ECONNRESET || nread == UV_EOF);",
          "",
          "[Removed Lines]",
          "77: static void read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "77: static void read_cb(uv_stream_t* stream, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------"
        ],
        "test/test-tcp-writealot.c||test/test-tcp-writealot.c": [
          "File: test/test-tcp-writealot.c -> test/test-tcp-writealot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: }",
          "81:   ASSERT(tcp != NULL);",
          "83:   if (nread >= 0) {",
          "",
          "[Removed Lines]",
          "80: static void read_cb(uv_stream_t* tcp, ssize_t nread, uv_buf_t buf) {",
          "",
          "[Added Lines]",
          "80: static void read_cb(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     uv_close((uv_handle_t*)tcp, close_cb);",
          "90:   }",
          "93: }",
          "",
          "[Removed Lines]",
          "92:   free(buf.base);",
          "",
          "[Added Lines]",
          "92:   free(buf->base);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6837e480fd8f43758758dd1a8288894903f2f7e7",
      "candidate_info": {
        "commit_hash": "6837e480fd8f43758758dd1a8288894903f2f7e7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6837e480fd8f43758758dd1a8288894903f2f7e7",
        "files": [
          "src/unix/stream.c"
        ],
        "message": "unix: fix missing return value warning in stream.c",
        "before_after_code_files": [
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444: int uv_stream_set_blocking(uv_stream_t* handle, int blocking) {",
          "1445:   assert(0 && \"implement me\");",
          "1446: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1446:   abort();",
          "1447:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abcad99e233d5ec5f5d69d2254c4f859baf7a768",
      "candidate_info": {
        "commit_hash": "abcad99e233d5ec5f5d69d2254c4f859baf7a768",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/abcad99e233d5ec5f5d69d2254c4f859baf7a768",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.9",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 8",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 9",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab2c4425a52926f8064dcf9790b3900e003218d6",
      "candidate_info": {
        "commit_hash": "ab2c4425a52926f8064dcf9790b3900e003218d6",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ab2c4425a52926f8064dcf9790b3900e003218d6",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/fs.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/fs.c",
          "test/test-fs.c"
        ],
        "message": "fs: introduce uv_readdir_next() and report types\n\nIntroduce:\n\n    int uv_fs_readdir_next(uv_fs_t* req, uv_dirent_t* ent);\n\n`uv_fs_readdir()` is not returning a file names list in `req->ptr`\nanymore, the proper way to gather them is to call `uv_fs_readdir_next()`\nin a callback.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <sys/types.h>",
          "26: #include <sys/stat.h>",
          "27: #include <fcntl.h>",
          "29: #include <sys/socket.h>",
          "30: #include <netinet/in.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <dirent.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: typedef gid_t uv_gid_t;",
          "156: typedef uid_t uv_uid_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: typedef struct dirent uv__dirent_t;",
          "161: #define UV__DT_DIR DT_DIR",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: typedef unsigned char uv_uid_t;",
          "290: typedef unsigned char uv_gid_t;",
          "293: #define UV_DYNAMIC FAR WINAPI",
          "294: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: typedef struct uv__dirent_s {",
          "293:   int d_type;",
          "294:   char d_name[1];",
          "295: } uv__dirent_t;",
          "297: #define UV__DT_DIR  UV_DIRENT_DIR",
          "298: #define UV__DT_FILE UV_DIRENT_FILE",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: typedef struct uv_cpu_info_s uv_cpu_info_t;",
          "229: typedef struct uv_interface_address_s uv_interface_address_t;",
          "232: typedef enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: typedef struct uv_dirent_s uv_dirent_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1786:   } netmask;",
          "1787: };",
          "1789: UV_EXTERN char** uv_setup_args(int argc, char** argv);",
          "1790: UV_EXTERN int uv_get_process_title(char* buffer, size_t size);",
          "1791: UV_EXTERN int uv_set_process_title(const char* title);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790: typedef enum {",
          "1791:   UV_DIRENT_FILE,",
          "1792:   UV_DIRENT_DIR",
          "1793: } uv_dirent_type_t;",
          "1795: struct uv_dirent_s {",
          "1796:   const char* name;",
          "1797:   uv_dirent_type_t type;",
          "1798: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1931: UV_EXTERN int uv_fs_readdir(uv_loop_t* loop, uv_fs_t* req,",
          "1932:     const char* path, int flags, uv_fs_cb cb);",
          "1934: UV_EXTERN int uv_fs_stat(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1935:     uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1952: UV_EXTERN int uv_fs_readdir_next(uv_fs_t* req, uv_dirent_t* ent);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <sys/stat.h>",
          "39: #include <sys/time.h>",
          "40: #include <pthread.h>",
          "42: #include <unistd.h>",
          "43: #include <fcntl.h>",
          "44: #include <utime.h>",
          "",
          "[Removed Lines]",
          "41: #include <dirent.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: #if defined(__OpenBSD__) || (defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_8))",
          "300: #else",
          "302: #endif",
          "303:   return strcmp(dent->d_name, \".\") != 0 && strcmp(dent->d_name, \"..\") != 0;",
          "304: }",
          "",
          "[Removed Lines]",
          "299: static int uv__fs_readdir_filter(struct dirent* dent) {",
          "301: static int uv__fs_readdir_filter(const struct dirent* dent) {",
          "",
          "[Added Lines]",
          "298: static int uv__fs_readdir_filter(uv__dirent_t* dent) {",
          "300: static int uv__fs_readdir_filter(const uv__dirent_t* dent) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308: static ssize_t uv__fs_readdir(uv_fs_t* req) {",
          "310:   int saved_errno;",
          "315:   int n;",
          "317:   dents = NULL;",
          "",
          "[Removed Lines]",
          "309:   struct dirent **dents;",
          "311:   size_t off;",
          "312:   size_t len;",
          "313:   char *buf;",
          "314:   int i;",
          "",
          "[Added Lines]",
          "308:   uv__dirent_t **dents;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:   else if (n == -1)",
          "323:     return n;",
          "348: out:",
          "349:   saved_errno = errno;",
          "350:   if (dents != NULL) {",
          "351:     for (i = 0; i < n; i++)",
          "352:       free(dents[i]);",
          "353:     free(dents);",
          "",
          "[Removed Lines]",
          "325:   len = 0;",
          "327:   for (i = 0; i < n; i++)",
          "328:     len += strlen(dents[i]->d_name) + 1;",
          "330:   buf = malloc(len);",
          "332:   if (buf == NULL) {",
          "333:     errno = ENOMEM;",
          "334:     n = -1;",
          "335:     goto out;",
          "336:   }",
          "338:   off = 0;",
          "340:   for (i = 0; i < n; i++) {",
          "341:     len = strlen(dents[i]->d_name) + 1;",
          "342:     memcpy(buf + off, dents[i]->d_name, len);",
          "343:     off += len;",
          "344:   }",
          "346:   req->ptr = buf;",
          "",
          "[Added Lines]",
          "321:   req->ptr = dents;",
          "322:   req->nbufs = 0;",
          "324:   return n;",
          "329:     int i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1184:   req->path = NULL;",
          "1185:   req->new_path = NULL;",
          "1187:   if (req->ptr != &req->statbuf)",
          "1188:     free(req->ptr);",
          "1189:   req->ptr = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167:   if (req->fs_type == UV_FS_READDIR && req->ptr != NULL)",
          "1168:     uv__fs_readdir_cleanup(req);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:   return 0;",
          "451: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454: void uv__fs_readdir_cleanup(uv_fs_t* req) {",
          "455:   uv__dirent_t** dents;",
          "457:   dents = req->ptr;",
          "458:   if (req->nbufs > 0 && req->nbufs != (unsigned int) req->result)",
          "459:     req->nbufs--;",
          "460:   for (; req->nbufs < (unsigned int) req->result; req->nbufs++)",
          "461:     free(dents[req->nbufs]);",
          "462: }",
          "465: int uv_fs_readdir_next(uv_fs_t* req, uv_dirent_t* ent) {",
          "466:   uv__dirent_t** dents;",
          "467:   uv__dirent_t* dent;",
          "469:   dents = req->ptr;",
          "472:   if (req->nbufs > 0)",
          "473:     free(dents[req->nbufs - 1]);",
          "476:   if (req->nbufs == (unsigned int) req->result) {",
          "477:     free(dents);",
          "478:     req->ptr = NULL;",
          "479:     return UV_EOF;",
          "480:   }",
          "482:   dent = dents[req->nbufs++];",
          "484:   ent->name = dent->d_name;",
          "485:   if (dent->d_type == UV__DT_DIR)",
          "486:     ent->type = UV_DIRENT_DIR;",
          "487:   else",
          "488:     ent->type = UV_DIRENT_FILE;",
          "490:   return 0;",
          "491: }",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: int uv__socket_sockopt(uv_handle_t* handle, int optname, int* value);",
          "112: #define uv__has_active_reqs(loop)                                             \\",
          "113:   (QUEUE_EMPTY(&(loop)->active_reqs) == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: void uv__fs_readdir_cleanup(uv_fs_t* req);",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #define UV_FS_FREE_PTR           0x0008",
          "44: #define UV_FS_CLEANEDUP          0x0010",
          "47: #define QUEUE_FS_TP_JOB(loop, req)                                          \\",
          "48:   do {                                                                      \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: static const int uv__fs_dirent_slide = 0x20;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "784: void fs__readdir(uv_fs_t* req) {",
          "785:   WCHAR* pathw = req->pathw;",
          "786:   size_t len = wcslen(pathw);",
          "789:   HANDLE dir;",
          "790:   WIN32_FIND_DATAW ent = { 0 };",
          "792:   WCHAR* path2;",
          "793:   const WCHAR* fmt;",
          "795:   if (len == 0) {",
          "796:     fmt = L\"./*\";",
          "",
          "[Removed Lines]",
          "787:   int result, size;",
          "788:   WCHAR* buf = NULL, *ptr, *name;",
          "791:   size_t buf_char_len = 4096;",
          "",
          "[Added Lines]",
          "789:   int result;",
          "790:   WCHAR* name;",
          "795:   uv__dirent_t** dents;",
          "796:   int dent_size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "810:   path2 = (WCHAR*)malloc(sizeof(WCHAR) * (len + 4));",
          "811:   if (!path2) {",
          "813:   }",
          "815:   _snwprintf(path2, len + 3, fmt, pathw);",
          "",
          "[Removed Lines]",
          "812:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "",
          "[Added Lines]",
          "815:     SET_REQ_UV_ERROR(req, UV_ENOMEM, ERROR_OUTOFMEMORY);",
          "816:     return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "822:   }",
          "824:   result = 0;",
          "826:   do {",
          "850:       }",
          "855:     }",
          "864:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "866:     }",
          "871:     }",
          "878:       SET_REQ_WIN32_ERROR(req, GetLastError());",
          "880:     }",
          "884:     req->flags |= UV_FS_FREE_PTR;",
          "889:   SET_REQ_RESULT(req, result);",
          "890: }",
          "",
          "[Removed Lines]",
          "827:     name = ent.cFileName;",
          "829:     if (name[0] != L'.' || (name[1] && (name[1] != L'.' || name[2]))) {",
          "830:       len = wcslen(name);",
          "832:       if (!buf) {",
          "833:         buf = (WCHAR*)malloc(buf_char_len * sizeof(WCHAR));",
          "834:         if (!buf) {",
          "835:           uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "836:         }",
          "838:         ptr = buf;",
          "839:       }",
          "841:       while ((ptr - buf) + len + 1 > buf_char_len) {",
          "842:         buf_char_len *= 2;",
          "843:         path2 = buf;",
          "844:         buf = (WCHAR*)realloc(buf, buf_char_len * sizeof(WCHAR));",
          "845:         if (!buf) {",
          "846:           uv_fatal_error(ERROR_OUTOFMEMORY, \"realloc\");",
          "847:         }",
          "849:         ptr = buf + (ptr - path2);",
          "852:       wcscpy(ptr, name);",
          "853:       ptr += len + 1;",
          "854:       result++;",
          "856:   } while(FindNextFileW(dir, &ent));",
          "858:   FindClose(dir);",
          "860:   if (buf) {",
          "862:     size = uv_utf16_to_utf8(buf, buf_char_len, NULL, 0);",
          "863:     if (!size) {",
          "865:       return;",
          "868:     req->ptr = (char*)malloc(size + 1);",
          "869:     if (!req->ptr) {",
          "870:       uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "873:     size = uv_utf16_to_utf8(buf, buf_char_len, (char*)req->ptr, size);",
          "874:     if (!size) {",
          "875:       free(buf);",
          "876:       free(req->ptr);",
          "877:       req->ptr = NULL;",
          "879:       return;",
          "881:     free(buf);",
          "883:     ((char*)req->ptr)[size] = '\\0';",
          "885:   } else {",
          "886:     req->ptr = NULL;",
          "887:   }",
          "",
          "[Added Lines]",
          "829:   dents = NULL;",
          "830:   dent_size = 0;",
          "833:     uv__dirent_t* dent;",
          "834:     int utf8_len;",
          "836:     name = ent.cFileName;",
          "838:     if (!(name[0] != L'.' || (name[1] && (name[1] != L'.' || name[2]))))",
          "839:       continue;",
          "842:     if (result >= dent_size) {",
          "843:       uv__dirent_t** tmp;",
          "845:       dent_size += uv__fs_dirent_slide;",
          "846:       tmp = realloc(dents, dent_size * sizeof(*dents));",
          "847:       if (tmp == NULL) {",
          "848:         SET_REQ_UV_ERROR(req, UV_ENOMEM, ERROR_OUTOFMEMORY);",
          "849:         goto fatal;",
          "851:       dents = tmp;",
          "855:     len = wcslen(name);",
          "856:     utf8_len = uv_utf16_to_utf8(name, len, NULL, 0);",
          "857:     if (!utf8_len) {",
          "859:       goto fatal;",
          "862:     dent = malloc(sizeof(*dent) + utf8_len + 1);",
          "863:     if (dent == NULL) {",
          "864:       SET_REQ_UV_ERROR(req, UV_ENOMEM, ERROR_OUTOFMEMORY);",
          "865:       goto fatal;",
          "869:     utf8_len = uv_utf16_to_utf8(name, len, dent->d_name, utf8_len);",
          "870:     if (!utf8_len) {",
          "871:       free(dent);",
          "873:       goto fatal;",
          "875:     dent->d_name[utf8_len] = '\\0';",
          "878:     if ((ent.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0)",
          "879:       dent->d_type = UV__DT_DIR;",
          "880:     else",
          "881:       dent->d_type = UV__DT_FILE;",
          "883:     dents[result++] = dent;",
          "884:   } while(FindNextFileW(dir, &ent));",
          "886:   FindClose(dir);",
          "888:   if (dents != NULL)",
          "892:   req->nbufs = 0;",
          "893:   req->ptr = dents;",
          "895:   return;",
          "897: fatal:",
          "899:   for (result--; result >= 0; result--)",
          "900:     free(dents[result]);",
          "901:   free(dents);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "419: static void readdir_cb(uv_fs_t* req) {",
          "420:   ASSERT(req == &readdir_req);",
          "421:   ASSERT(req->fs_type == UV_FS_READDIR);",
          "422:   ASSERT(req->result == 2);",
          "423:   ASSERT(req->ptr);",
          "426:   readdir_cb_count++;",
          "427:   ASSERT(req->path);",
          "428:   ASSERT(memcmp(req->path, \"test_dir\\0\", 9) == 0);",
          "",
          "[Removed Lines]",
          "424:   ASSERT(memcmp(req->ptr, \"file1\\0file2\\0\", 12) == 0",
          "425:       || memcmp(req->ptr, \"file2\\0file1\\0\", 12) == 0);",
          "",
          "[Added Lines]",
          "420:   uv_dirent_t dent;",
          "426:   while (UV_EOF != uv_fs_readdir_next(req, &dent)) {",
          "427:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "428:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "429:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803: TEST_IMPL(fs_async_dir) {",
          "804:   int r;",
          "807:   unlink(\"test_dir/file1\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:   uv_dirent_t dent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "844:   ASSERT(r == 2);",
          "845:   ASSERT(readdir_req.result == 2);",
          "846:   ASSERT(readdir_req.ptr);",
          "849:   uv_fs_req_cleanup(&readdir_req);",
          "850:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "847:   ASSERT(memcmp(readdir_req.ptr, \"file1\\0file2\\0\", 12) == 0",
          "848:       || memcmp(readdir_req.ptr, \"file2\\0file1\\0\", 12) == 0);",
          "",
          "[Added Lines]",
          "852:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "853:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "854:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "855:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1521:   uv_fs_t req;",
          "1522:   int r;",
          "1523:   char* test_dir;",
          "1526:   unlink(\"test_dir/file1\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1531:   uv_dirent_t dent;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1597:   ASSERT(r == 2);",
          "1598:   ASSERT(readdir_req.result == 2);",
          "1599:   ASSERT(readdir_req.ptr);",
          "1602:   uv_fs_req_cleanup(&readdir_req);",
          "1603:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "1600:   ASSERT(memcmp(readdir_req.ptr, \"file1\\0file2\\0\", 12) == 0",
          "1601:       || memcmp(readdir_req.ptr, \"file2\\0file1\\0\", 12) == 0);",
          "",
          "[Added Lines]",
          "1608:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "1609:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "1610:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "1611:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1615:   ASSERT(r == 2);",
          "1616:   ASSERT(readdir_req.result == 2);",
          "1617:   ASSERT(readdir_req.ptr);",
          "1620:   uv_fs_req_cleanup(&readdir_req);",
          "1621:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "1618:   ASSERT(memcmp(readdir_req.ptr, \"file1\\0file2\\0\", 12) == 0",
          "1619:       || memcmp(readdir_req.ptr, \"file2\\0file1\\0\", 12) == 0);",
          "",
          "[Added Lines]",
          "1628:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "1629:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "1630:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "1631:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8ab41bee3cd037a94dbaefc2b38d0799ec26b96",
      "candidate_info": {
        "commit_hash": "d8ab41bee3cd037a94dbaefc2b38d0799ec26b96",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d8ab41bee3cd037a94dbaefc2b38d0799ec26b96",
        "files": [
          "src/win/process-stdio.c",
          "src/win/tcp.c",
          "src/win/winapi.h"
        ],
        "message": "windows: fix stray comments",
        "before_after_code_files": [
          "src/win/process-stdio.c||src/win/process-stdio.c",
          "src/win/tcp.c||src/win/tcp.c",
          "src/win/winapi.h||src/win/winapi.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process-stdio.c||src/win/process-stdio.c": [
          "File: src/win/process-stdio.c -> src/win/process-stdio.c"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c"
        ],
        "src/win/winapi.h||src/win/winapi.h": [
          "File: src/win/winapi.h -> src/win/winapi.h"
        ]
      }
    }
  ]
}