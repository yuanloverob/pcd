{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76fd7be3a31d466202bc6ee9026d02150fcc12da",
      "candidate_info": {
        "commit_hash": "76fd7be3a31d466202bc6ee9026d02150fcc12da",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76fd7be3a31d466202bc6ee9026d02150fcc12da",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra testcase() macros on the serial-type computation logic in the OP_MakeRecord opcode.\n\nFossilOrigin-Name: 18bfb2179ce2c60cec8f5859a84b737731a5e53b28e35072cbb249f18b94262b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2578e3c64b0a92ab92143f18d107a1a180bd6fa87243661930771c4c080f8098",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2943:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2944:         pRec->uTemp = 10;",
          "2945:       }else{",
          "2947:       }",
          "2948:       nHdr++;",
          "2949:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2969:         pRec->uTemp = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2958:         u = i;",
          "2959:       }",
          "2960:       nHdr++;",
          "2961:       if( u<=127 ){",
          "2962:         if( (i&1)==i && file_format>=4 ){",
          "2963:           pRec->uTemp = 8+(u32)u;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2984:       testcase( u==127 );               testcase( u==128 );",
          "2985:       testcase( u==32767 );             testcase( u==32768 );",
          "2986:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2987:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "2988:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
      "candidate_info": {
        "commit_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "For the \".testctrl prng_seed\" command in the CLI, if the argument is \"random\" then select a random integer seed and print the seed value on stdout.\n\nFossilOrigin-Name: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48d9b48ab4ace234eb1a055cf33cb533a1c3aa82d0a6e086d96226bd9474ceca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9265:           if( nArg==3 || nArg==4 ){",
          "9266:             int ii = (int)integerValue(azArg[2]);",
          "9267:             sqlite3 *db;",
          "9268:             if( nArg==3 ){",
          "9269:               db = 0;",
          "9270:             }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9268:             if( ii==0 && strcmp(azArg[2],\"random\")==0 ){",
          "9269:               sqlite3_randomness(sizeof(ii),&ii);",
          "9270:               printf(\"-- random seed: %d\\n\", ii);",
          "9271:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
      "candidate_info": {
        "commit_hash": "0e1a574875a5cb3021adb2327f2919b85f186ede",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0e1a574875a5cb3021adb2327f2919b85f186ede",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test4.c"
        ],
        "message": "Change the name of some internal testing interfaces to avoid a name conflict in AIX.\n\nFossilOrigin-Name: c1cae7e7f0a612508c8f82b334d9ebc423f443e99b13092d52e26b348c7cbc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test4.c||src/test4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test4.c||src/test4.c": [
          "File: src/test4.c -> src/test4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   Thread *p = (Thread*)pArg;",
          "69:   if( p->db ){",
          "70:     sqlite3_close(p->db);",
          "",
          "[Removed Lines]",
          "67: static void *thread_main(void *pArg){",
          "",
          "[Added Lines]",
          "67: static void *test_thread_main(void *pArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   threadset[i].zFilename = sqlite3_mprintf(\"%s\", argv[2]);",
          "152:   threadset[i].opnum = 1;",
          "153:   threadset[i].completed = 0;",
          "155:   if( rc ){",
          "156:     Tcl_AppendResult(interp, \"failed to create the thread\", 0);",
          "157:     sqlite3_free(threadset[i].zFilename);",
          "",
          "[Removed Lines]",
          "154:   rc = pthread_create(&x, 0, thread_main, &threadset[i]);",
          "",
          "[Added Lines]",
          "154:   rc = pthread_create(&x, 0, test_thread_main, &threadset[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   while( p->opnum>p->completed ) sched_yield();",
          "170: }",
          "",
          "[Removed Lines]",
          "168: static void thread_wait(Thread *p){",
          "",
          "[Added Lines]",
          "168: static void test_thread_wait(Thread *p){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "194:     return TCL_ERROR;",
          "195:   }",
          "197:   return TCL_OK;",
          "198: }",
          "205:   p->xOp = 0;",
          "206:   p->opnum++;",
          "208:   sqlite3_free(p->zArg);",
          "209:   p->zArg = 0;",
          "210:   sqlite3_free(p->zFilename);",
          "",
          "[Removed Lines]",
          "196:   thread_wait(&threadset[i]);",
          "203: static void stop_thread(Thread *p){",
          "204:   thread_wait(p);",
          "207:   thread_wait(p);",
          "",
          "[Added Lines]",
          "196:   test_thread_wait(&threadset[i]);",
          "203: static void test_stop_thread(Thread *p){",
          "204:   test_thread_wait(p);",
          "207:   test_thread_wait(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   }",
          "234:   if( argv[1][0]=='*' && argv[1][1]==0 ){",
          "235:     for(i=0; i<N_THREAD; i++){",
          "237:     }",
          "238:   }else{",
          "239:     i = parse_thread_id(interp, argv[1]);",
          "",
          "[Removed Lines]",
          "236:       if( threadset[i].busy ) stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "236:       if( threadset[i].busy ) test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       Tcl_AppendResult(interp, \"no such thread\", 0);",
          "243:       return TCL_ERROR;",
          "244:     }",
          "246:   }",
          "247:   return TCL_OK;",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     stop_thread(&threadset[i]);",
          "",
          "[Added Lines]",
          "245:     test_stop_thread(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "274:     return TCL_ERROR;",
          "275:   }",
          "277:   sqlite3_snprintf(sizeof(zBuf), zBuf, \"%d\", threadset[i].argc);",
          "278:   Tcl_AppendResult(interp, zBuf, 0);",
          "279:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "276:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "276:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:     return TCL_ERROR;",
          "307:   }",
          "308:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "310:   if( n<0 || n>=threadset[i].argc ){",
          "311:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "312:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "309:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "309:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:     return TCL_ERROR;",
          "343:   }",
          "344:   if( Tcl_GetInt(interp, argv[2], &n) ) return TCL_ERROR;",
          "346:   if( n<0 || n>=threadset[i].argc ){",
          "347:     Tcl_AppendResult(interp, \"column number out of range\", 0);",
          "348:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "345:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "345:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "378:     return TCL_ERROR;",
          "379:   }",
          "381:   zName = sqlite3ErrName(threadset[i].rc);",
          "382:   Tcl_AppendResult(interp, zName, 0);",
          "383:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "380:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "380:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "409:     return TCL_ERROR;",
          "410:   }",
          "412:   Tcl_AppendResult(interp, threadset[i].zErr, 0);",
          "413:   return TCL_OK;",
          "414: }",
          "",
          "[Removed Lines]",
          "411:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "411:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "452:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "453:     return TCL_ERROR;",
          "454:   }",
          "456:   threadset[i].xOp = do_compile;",
          "457:   sqlite3_free(threadset[i].zArg);",
          "458:   threadset[i].zArg = sqlite3_mprintf(\"%s\", argv[2]);",
          "",
          "[Removed Lines]",
          "455:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "455:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "505:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "506:     return TCL_ERROR;",
          "507:   }",
          "509:   threadset[i].xOp = do_step;",
          "510:   threadset[i].opnum++;",
          "511:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "508:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "508:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "547:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "548:     return TCL_ERROR;",
          "549:   }",
          "551:   threadset[i].xOp = do_finalize;",
          "552:   sqlite3_free(threadset[i].zArg);",
          "553:   threadset[i].zArg = 0;",
          "",
          "[Removed Lines]",
          "550:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "550:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "580:     return TCL_ERROR;",
          "581:   }",
          "583:   j = parse_thread_id(interp, argv[2]);",
          "584:   if( j<0 ) return TCL_ERROR;",
          "585:   if( !threadset[j].busy ){",
          "586:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "587:     return TCL_ERROR;",
          "588:   }",
          "590:   temp = threadset[i].db;",
          "591:   threadset[i].db = threadset[j].db;",
          "592:   threadset[j].db = temp;",
          "",
          "[Removed Lines]",
          "582:   thread_wait(&threadset[i]);",
          "589:   thread_wait(&threadset[j]);",
          "",
          "[Added Lines]",
          "582:   test_thread_wait(&threadset[i]);",
          "589:   test_thread_wait(&threadset[j]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "620:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "621:     return TCL_ERROR;",
          "622:   }",
          "624:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].db);",
          "625:   threadset[i].db = 0;",
          "626:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "623:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "623:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "651:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "652:     return TCL_ERROR;",
          "653:   }",
          "655:   assert( !threadset[i].db );",
          "656:   threadset[i].db = (sqlite3*)sqlite3TestTextToPtr(argv[2]);",
          "657:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "654:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "654:   test_thread_wait(&threadset[i]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "683:     Tcl_AppendResult(interp, \"no such thread\", 0);",
          "684:     return TCL_ERROR;",
          "685:   }",
          "687:   sqlite3TestMakePointerStr(interp, zBuf, threadset[i].pStmt);",
          "688:   threadset[i].pStmt = 0;",
          "689:   Tcl_AppendResult(interp, zBuf, (char*)0);",
          "",
          "[Removed Lines]",
          "686:   thread_wait(&threadset[i]);",
          "",
          "[Added Lines]",
          "686:   test_thread_wait(&threadset[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
      "candidate_info": {
        "commit_hash": "855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/855b5d144aaa7ff9e52741a039e53ffcaaac7d65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/subquery2.test"
        ],
        "message": "Ensure that when an ephemeral cursor is reopened with a second invocation of to OP_OpenEphemeral, the sequence counter is reset and the cache marked as stale. Fix for [9cdc5c46].\n\nFossilOrigin-Name: 5fd20e09a522b62a529cf4d76fbdf0a09426f67ffa30430cac6b81ebf32ba43e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/subquery2.test||test/subquery2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c58522e49cd91426bca7efccf0d99e0f2803dcd5991ae5d56166fc5510e4c62",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3755:     assert( pCx->isEphemeral );",
          "3756:     if( pCx->pBtx ){",
          "3757:       rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3758:     }",
          "3759:   }else{",
          "3760:     pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3761:     if( pCx==0 ) goto no_mem;",
          "3763:     pCx->isEphemeral = 1;",
          "3764:     rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->pBtx,",
          "3765:                           BTREE_OMIT_JOURNAL | BTREE_SINGLE | pOp->p5,",
          "",
          "[Removed Lines]",
          "3762:     pCx->nullRow = 1;",
          "",
          "[Added Lines]",
          "3756:     pCx->seqCount = 0;",
          "3757:     pCx->cacheStatus = CACHE_STALE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3795:     pCx->isOrdered = (pOp->p5!=BTREE_UNORDERED);",
          "3796:   }",
          "3797:   if( rc ) goto abort_due_to_error;",
          "3798:   break;",
          "3799: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3799:   pCx->nullRow = 1;",
          "",
          "---------------"
        ],
        "test/subquery2.test||test/subquery2.test": [
          "File: test/subquery2.test -> test/subquery2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   }]",
          "198: }",
          "201: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: # Test that ticket [9cdc5c46] is fixed.",
          "202: #",
          "203: reset_db",
          "204: do_execsql_test 5.0 {",
          "205:   CREATE TABLE t1(x);",
          "206:   INSERT INTO t1 VALUES('ALFKI');",
          "207:   INSERT INTO t1 VALUES('ANATR');",
          "209:   CREATE TABLE t2(y, z);",
          "210:   CREATE INDEX t2y ON t2 (y);",
          "211:   INSERT INTO t2 VALUES('ANATR', '1997-08-08 00:00:00');",
          "212:   INSERT INTO t2 VALUES('ALFKI', '1997-08-25 00:00:00');",
          "213: }",
          "214: do_execsql_test 5.1 {",
          "215:   SELECT ( SELECT y FROM t2 WHERE x = y ORDER BY y, z) FROM t1;",
          "216: } {ALFKI ANATR}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
      "candidate_info": {
        "commit_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Handle renaming a column or table when the schema contains a (meaningless) index on the constant expression ('text' IN ()) or ('text' NOT IN()).\n\nFossilOrigin-Name: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94b58ab059cba9771e75f16d1460f313104a8fb879f9f8805725d362aa58cbcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       if( IN_RENAME_OBJECT==0 ){",
          "1177:         sqlite3ExprDelete(pParse->db, A);",
          "1178:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1179:       }",
          "1180:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: reset_db",
          "180: do_execsql_test 8.0 {",
          "181:   CREATE TABLE t0(c0);",
          "182:   CREATE INDEX i0 ON t0('1' IN ());",
          "183: }",
          "184: do_execsql_test 8.1 {",
          "185:   ALTER TABLE t0 RENAME TO t1;",
          "186:   SELECT sql FROM sqlite_master;",
          "187: } {",
          "188:   {CREATE TABLE \"t1\"(c0)}",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}