{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "052aaa4c4dbb52c9430b609cdfe81fc942a7df64",
      "candidate_info": {
        "commit_hash": "052aaa4c4dbb52c9430b609cdfe81fc942a7df64",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/052aaa4c4dbb52c9430b609cdfe81fc942a7df64",
        "files": [
          "src/node.h",
          "src/node_file.cc"
        ],
        "message": "windows: use 64bit offsets for uv_fs apis",
        "before_after_code_files": [
          "src/node.h||src/node.h",
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #define NODE_STRINGIFY_HELPER(n) #n",
          "92: #endif",
          "94: namespace node {",
          "96: int Start(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: #ifndef STATIC_ASSERT",
          "95: #if defined(_MSC_VER)",
          "96: #  define STATIC_ASSERT(expr) static_assert(expr, \"\")",
          "97: # else",
          "98: #  define STATIC_ASSERT(expr) static_cast<void>((sizeof(char[-1 + !!(expr)])))",
          "99: # endif",
          "100: #endif",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static Persistent<String> oncomplete_sym;",
          "75: #endif",
          "",
          "[Removed Lines]",
          "71: #ifdef _LARGEFILE_SOURCE",
          "72: static inline int IsInt64(double x) {",
          "73:   return x == static_cast<double>(static_cast<int64_t>(x));",
          "74: }",
          "",
          "[Added Lines]",
          "70: #ifndef _LARGEFILE_SOURCE",
          "71:   typedef off_t node_off_t;",
          "72: # define ASSERT_OFFSET(a) \\",
          "73:    STATIC_ASSERT(sizeof(node_off_t) * CHAR_BIT >= 32); \\",
          "74:    if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsInt32()) { \\",
          "75:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "76:    }",
          "77: # define ASSERT_TRUNCATE_LENGTH(a) \\",
          "78:    if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsUint32()) { \\",
          "79:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "80:    }",
          "81: # define GET_OFFSET(a) ((a)->IsNumber() ? (a)->Int32Value() : -1)",
          "82: # define GET_TRUNCATE_LENGTH(a) ((a)->Uint32Value())",
          "83: #else",
          "84: # ifdef _WIN32",
          "85: #   define NODE_USE_64BIT_UV_FS_API",
          "86:     typedef int64_t node_off_t;",
          "87: # else",
          "88:     typedef off_t node_off_t;",
          "89: # endif",
          "90: # define ASSERT_OFFSET(a) \\",
          "91:    STATIC_ASSERT(sizeof(node_off_t) * CHAR_BIT >= 64); \\",
          "92:    if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "93:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "94:    }",
          "95: # define ASSERT_TRUNCATE_LENGTH(a) \\",
          "96:    if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "97:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "98:    }",
          "99: # define GET_OFFSET(a) ((a)->IsNumber() ? (a)->IntegerValue() : -1)",
          "100: # define GET_TRUNCATE_LENGTH(a) ((a)->IntegerValue())",
          "102:   static inline int IsInt64(double x) {",
          "103:     return x == static_cast<double>(static_cast<int64_t>(x));",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470:   }",
          "471: }",
          "487: static Handle<Value> Truncate(const Arguments& args) {",
          "488:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "473: #ifndef _LARGEFILE_SOURCE",
          "474: #define ASSERT_TRUNCATE_LENGTH(a) \\",
          "475:   if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsUint32()) { \\",
          "476:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "477:   }",
          "478: #define GET_TRUNCATE_LENGTH(a) ((a)->Uint32Value())",
          "479: #else",
          "480: #define ASSERT_TRUNCATE_LENGTH(a) \\",
          "481:   if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "482:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "483:   }",
          "484: #define GET_TRUNCATE_LENGTH(a) ((a)->IntegerValue())",
          "485: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:   int fd = args[0]->Int32Value();",
          "496:   ASSERT_TRUNCATE_LENGTH(args[1]);",
          "499:   if (args[2]->IsFunction()) {",
          "500:     ASYNC_CALL(ftruncate, args[2], fd, len)",
          "501:   } else {",
          "502:     SYNC_CALL(ftruncate, 0, fd, len)",
          "503:     return Undefined();",
          "504:   }",
          "505: }",
          "",
          "[Removed Lines]",
          "497:   off_t len = GET_TRUNCATE_LENGTH(args[1]);",
          "",
          "[Added Lines]",
          "513:   node_off_t len = GET_TRUNCATE_LENGTH(args[1]);",
          "516: #ifdef NODE_USE_64BIT_UV_FS_API",
          "517:     ASYNC_CALL(ftruncate64, args[2], fd, len)",
          "518: #else",
          "520: #endif",
          "522: #ifdef NODE_USE_64BIT_UV_FS_API",
          "523:     SYNC_CALL(ftruncate64, 0, fd, len)",
          "524: #else",
          "526: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:   }",
          "672: }",
          "",
          "[Removed Lines]",
          "674: #ifndef _LARGEFILE_SOURCE",
          "675: #define ASSERT_OFFSET(a) \\",
          "676:   if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsInt32()) { \\",
          "677:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "678:   }",
          "679: #define GET_OFFSET(a) ((a)->IsNumber() ? (a)->Int32Value() : -1)",
          "680: #else",
          "681: #define ASSERT_OFFSET(a) \\",
          "682:   if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "683:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "684:   }",
          "685: #define GET_OFFSET(a) ((a)->IsNumber() ? (a)->IntegerValue() : -1)",
          "686: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "725:   }",
          "727:   ASSERT_OFFSET(args[4]);",
          "730:   char * buf = (char*)buffer_data + off;",
          "731:   Local<Value> cb = args[5];",
          "733:   if (cb->IsFunction()) {",
          "734:     ASYNC_CALL(write, cb, fd, buf, len, pos)",
          "735:   } else {",
          "736:     SYNC_CALL(write, 0, fd, buf, len, pos)",
          "737:     return scope.Close(Integer::New(SYNC_RESULT));",
          "738:   }",
          "739: }",
          "",
          "[Removed Lines]",
          "728:   off_t pos = GET_OFFSET(args[4]);",
          "",
          "[Added Lines]",
          "738:   node_off_t pos = GET_OFFSET(args[4]);",
          "744: #ifdef NODE_USE_64BIT_UV_FS_API",
          "745:     ASYNC_CALL(write64, cb, fd, buf, len, pos)",
          "746: #else",
          "748: #endif",
          "750: #ifdef NODE_USE_64BIT_UV_FS_API",
          "751:     SYNC_CALL(write64, 0, fd, buf, len, pos)",
          "752: #else",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "762:   Local<Value> cb;",
          "764:   size_t len;",
          "767:   char * buf = NULL;",
          "",
          "[Removed Lines]",
          "765:   off_t pos;",
          "",
          "[Added Lines]",
          "783:   node_off_t pos;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "794:   cb = args[5];",
          "796:   if (cb->IsFunction()) {",
          "797:     ASYNC_CALL(read, cb, fd, buf, len, pos);",
          "798:   } else {",
          "799:     SYNC_CALL(read, 0, fd, buf, len, pos)",
          "800:     Local<Integer> bytesRead = Integer::New(SYNC_RESULT);",
          "801:     return scope.Close(bytesRead);",
          "802:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815: #ifdef NODE_USE_64BIT_UV_FS_API",
          "816:     ASYNC_CALL(read64, cb, fd, buf, len, pos);",
          "817: #else",
          "819: #endif",
          "821: #ifdef NODE_USE_64BIT_UV_FS_API",
          "822:     SYNC_CALL(read64, 0, fd, buf, len, pos)",
          "823: #else",
          "825: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "578ba76e6c0e16827bf9e471bdef500aedf3b09e",
      "candidate_info": {
        "commit_hash": "578ba76e6c0e16827bf9e471bdef500aedf3b09e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/578ba76e6c0e16827bf9e471bdef500aedf3b09e",
        "files": [
          "lib/util.js",
          "test/simple/test-util-format.js"
        ],
        "message": "util: fix util.format() formatting of %%",
        "before_after_code_files": [
          "lib/util.js||liutil.js",
          "test/simple/test-util-format.js||test/simple/test-util-format.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   var args = arguments;",
          "34:   var len = args.length;",
          "35:   var str = String(f).replace(formatRegExp, function(x) {",
          "36:     if (i >= len) return x;",
          "37:     switch (x) {",
          "38:       case '%s': return String(args[i++]);",
          "39:       case '%d': return Number(args[i++]);",
          "40:       case '%j': return JSON.stringify(args[i++]);",
          "42:       default:",
          "43:         return x;",
          "44:     }",
          "",
          "[Removed Lines]",
          "41:       case '%%': return '%';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-util-format.js||test/simple/test-util-format.js": [
          "File: test/simple/test-util-format.js -> test/simple/test-util-format.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: assert.equal(util.format('%s:%s', 'foo'), 'foo:%s');",
          "59: assert.equal(util.format('%s:%s', 'foo', 'bar'), 'foo:bar');",
          "60: assert.equal(util.format('%s:%s', 'foo', 'bar', 'baz'), 'foo:bar baz');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: assert.equal(util.format('%%%s%%', 'hi'), '%hi%');",
          "62: assert.equal(util.format('%%%s%%%%', 'hi'), '%hi%%');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68db20656e99da5a179e7139e4f2c3ed9de34d1a",
      "candidate_info": {
        "commit_hash": "68db20656e99da5a179e7139e4f2c3ed9de34d1a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/68db20656e99da5a179e7139e4f2c3ed9de34d1a",
        "files": [
          "src/node.cc"
        ],
        "message": "Rename some occurrences of `process_1` back to `process`",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2429:   HandleScope scope;",
          "2430:   Handle<Value> rv = Undefined();",
          "2431:   DWORD pid;",
          "2433:   HANDLE thread = NULL;",
          "2434:   HANDLE mapping = NULL;",
          "2435:   char mapping_name[32];",
          "",
          "[Removed Lines]",
          "2432:   HANDLE process_l = NULL;",
          "",
          "[Added Lines]",
          "2432:   HANDLE process = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2443:   pid = (DWORD) args[0]->IntegerValue();",
          "2446:                             PROCESS_VM_OPERATION | PROCESS_VM_WRITE |",
          "2447:                             PROCESS_VM_READ,",
          "2448:                         FALSE,",
          "2449:                         pid);",
          "2451:     rv = ThrowException(WinapiErrnoException(GetLastError(), \"OpenProcess\"));",
          "2452:     goto out;",
          "2453:   }",
          "",
          "[Removed Lines]",
          "2445:   process_l = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |",
          "2450:   if (process_l == NULL) {",
          "",
          "[Added Lines]",
          "2445:   process = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |",
          "2450:   if (process == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2475:     goto out;",
          "2476:   }",
          "2479:                               NULL,",
          "2480:                               0,",
          "",
          "[Removed Lines]",
          "2478:   thread = CreateRemoteThread(process_l,",
          "",
          "[Added Lines]",
          "2478:   thread = CreateRemoteThread(process,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2496:   }",
          "2498:  out:",
          "2501:   }",
          "2502:   if (thread != NULL) {",
          "2503:     CloseHandle(thread);",
          "",
          "[Removed Lines]",
          "2499:   if (process_l != NULL) {",
          "2500:    CloseHandle(process_l);",
          "",
          "[Added Lines]",
          "2499:   if (process != NULL) {",
          "2500:    CloseHandle(process);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5d043f2d72e88669e2e3621651153316831034e",
      "candidate_info": {
        "commit_hash": "d5d043f2d72e88669e2e3621651153316831034e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d5d043f2d72e88669e2e3621651153316831034e",
        "files": [
          "src/handle_wrap.cc"
        ],
        "message": "handle_wrap: guard against uninitialized handle or double close",
        "before_after_code_files": [
          "src/handle_wrap.cc||src/handle_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   UNWRAP",
          "102:   assert(!wrap->object_.IsEmpty());",
          "103:   uv_close(wrap->handle__, OnClose);",
          "106:   HandleWrap::Ref(args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   if (wrap->handle__ == NULL) return v8::Null();",
          "106:   wrap->handle__ = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   assert(wrap->object_.IsEmpty() == false);",
          "146:   wrap->object_->SetPointerInInternalField(0, NULL);",
          "147:   wrap->object_.Dispose();",
          "148:   wrap->object_.Clear();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:   assert(wrap->handle__ == NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "036e59394a0d8055c19174e8834128712e6da9f4",
      "candidate_info": {
        "commit_hash": "036e59394a0d8055c19174e8834128712e6da9f4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/036e59394a0d8055c19174e8834128712e6da9f4",
        "files": [
          "src/node.cc"
        ],
        "message": "Add process.features.isolates",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1986:   obj->Set(String::NewSymbol(\"tls\"),",
          "1987:       Boolean::New(get_builtin_module(\"crypto\") != NULL));",
          "1989:   return scope.Close(obj);",
          "1990: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1990:   obj->Set(String::NewSymbol(\"isolates\"),",
          "1991: #if HAVE_ISOLATES",
          "1992:     True()",
          "1993: #else",
          "1994:     False()",
          "1995: #endif",
          "1996:   );",
          "",
          "---------------"
        ]
      }
    }
  ]
}