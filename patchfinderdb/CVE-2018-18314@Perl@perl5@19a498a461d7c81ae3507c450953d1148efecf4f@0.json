{
  "cve_id": "CVE-2018-18314",
  "cve_desc": "Perl before 5.26.3 has a buffer overflow via a crafted regular expression that triggers invalid write operations.",
  "repo": "Perl/perl5",
  "patch_hash": "19a498a461d7c81ae3507c450953d1148efecf4f",
  "patch_info": {
    "commit_hash": "19a498a461d7c81ae3507c450953d1148efecf4f",
    "repo": "Perl/perl5",
    "commit_url": "https://github.com/Perl/perl5/commit/19a498a461d7c81ae3507c450953d1148efecf4f",
    "files": [
      "pod/perldiag.pod",
      "pod/perlrecharclass.pod",
      "regcomp.c",
      "t/lib/warnings/regcomp",
      "t/re/reg_mesg.t",
      "t/re/regex_sets.t"
    ],
    "message": "fix #131649 - extended charclass can trigger assert\n\nThe extended charclass parser makes some assumptions during the\nfirst pass which are only true on well structured input, and it\ndoes not properly catch various errors. later on the code assumes\nthat things the first pass will let through are valid, when in\nfact they should trigger errors.",
    "before_after_code_files": [
      "pod/perldiag.pod||pod/perldiag.pod",
      "pod/perlrecharclass.pod||pod/perlrecharclass.pod",
      "regcomp.c||regcomp.c",
      "t/re/reg_mesg.t||t/re/reg_mesg.t",
      "t/re/regex_sets.t||t/re/regex_sets.t"
    ]
  },
  "patch_diff": {
    "pod/perldiag.pod||pod/perldiag.pod": [
      "File: pod/perldiag.pod -> pod/perldiag.pod",
      "--- Hunk 1 ---",
      "[Context before]",
      "5945: a perl4 interpreter, especially if the next 2 tokens are \"use strict\"",
      "5946: or \"my $var\" or \"our $var\".",
      "5950: (F) Perl could not figure out what you meant inside this construct; this",
      "5951: notifies you that it is giving up trying.",
      "",
      "[Removed Lines]",
      "5948: =item Syntax error in (?[...]) in regex m/%s/",
      "",
      "[Added Lines]",
      "5948: =item Syntax error in (?[...]) in regex; marked by <-- HERE in m/%s/",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6441: (F) The unexec() routine failed for some reason.  See your local FSF",
      "6442: representative, who probably put it there in the first place.",
      "6444: =item Unexpected binary operator '%c' with no preceding operand in regex;",
      "6445: marked by S<<-- HERE> in m/%s/",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6444: =item Unexpected ']' with no following ')' in (?[... in regex; marked by <-- HERE in m/%s/",
      "6446: (F) While parsing an extended character class a ']' character was encountered",
      "6447: at a point in the definition where the only legal use of ']' is to close the",
      "6448: character class definition as part of a '])', you may have forgotten the close",
      "6449: paren, or otherwise confused the parser.",
      "6451: =item Expecting close paren for nested extended charclass in regex; marked by <-- HERE in m/%s/",
      "6453: (F) While parsing a nested extended character class like:",
      "6455:     (?[ ... (?flags:(?[ ... ])) ... ])",
      "6456:                              ^",
      "6458: we expected to see a close paren ')' (marked by ^) but did not.",
      "6460: =item Expecting close paren for wrapper for nested extended charclass in regex; marked by <-- HERE in m/%s/",
      "6462: (F) While parsing a nested extended character class like:",
      "6464:     (?[ ... (?flags:(?[ ... ])) ... ])",
      "6465:                               ^",
      "6467: we expected to see a close paren ')' (marked by ^) but did not.",
      "",
      "---------------"
    ],
    "pod/perlrecharclass.pod||pod/perlrecharclass.pod": [
      "File: pod/perlrecharclass.pod -> pod/perlrecharclass.pod",
      "--- Hunk 1 ---",
      "[Context before]",
      "1128: Any contained POSIX character classes, including things like C<\\w> and C<\\D>",
      "1129: respect the C<E<sol>a> (and C<E<sol>aa>) modifiers.",
      "1133: expression is compiled is a fatal error.  In practice, this means",
      "1134: just three limitations:",
      "",
      "[Removed Lines]",
      "1131: C<< (?[ ]) >> is a regex-compile-time construct.  Any attempt to use",
      "1132: something which isn't knowable at the time the containing regular",
      "",
      "[Added Lines]",
      "1131: Note that C<< (?[ ]) >> is a regex-compile-time construct.  Any attempt",
      "1132: to use something which isn't knowable at the time the containing regular",
      "",
      "---------------"
    ],
    "regcomp.c||regcomp.c": [
      "File: regcomp.c -> regcomp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "14947:                                     TRUE /* Force /x */ );",
      "14949:             switch (*RExC_parse) {",
      "14953:                 default:",
      "14954:                     break;",
      "",
      "[Removed Lines]",
      "14950:                 case '?':",
      "14951:                     if (RExC_parse[1] == '[') nest_depth++, RExC_parse++;",
      "",
      "[Added Lines]",
      "14950:                 case '(':",
      "14951:                     if (RExC_parse[1] == '?' && RExC_parse[2] == '[')",
      "14952:                         nest_depth++, RExC_parse+=2;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15005:                 }",
      "15007:                 case ']':",
      "15011:                         node = reganode(pRExC_state, ANYOF, 0);",
      "15012:                         RExC_size += ANYOF_SKIP;",
      "15013:                         nextchar(pRExC_state);",
      "",
      "[Removed Lines]",
      "15008:                     if (nest_depth--) break;",
      "15009:                     RExC_parse++;",
      "15010:                     if (*RExC_parse == ')') {",
      "",
      "[Added Lines]",
      "15009:                     if (RExC_parse[1] == ')') {",
      "15010:                         RExC_parse++;",
      "15011:                         if (nest_depth--) break;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "15020:                         return node;",
      "15021:                     }",
      "15023:             }",
      "15025:             RExC_parse += UTF ? UTF8SKIP(RExC_parse) : 1;",
      "15026:         }",
      "15031:         if (posix_warnings && av_tindex_skip_len_mg(posix_warnings) >= 0) {",
      "15032:             output_or_return_posix_warnings(pRExC_state, posix_warnings, NULL);",
      "15033:         }",
      "15036:     }",
      "",
      "[Removed Lines]",
      "15022:                     goto no_close;",
      "15028:       no_close:",
      "15035:         FAIL(\"Syntax error in (?[...])\");",
      "",
      "[Added Lines]",
      "15025:                     if (posix_warnings && av_tindex_skip_len_mg(posix_warnings) >= 0) {",
      "15026:                         output_or_return_posix_warnings(pRExC_state, posix_warnings, NULL);",
      "15027:                     }",
      "15028:                     RExC_parse++;",
      "15029:                     vFAIL(\"Unexpected ']' with no following ')' in (?[...\");",
      "15041:         vFAIL(\"Syntax error in (?[...])\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "15214:                     RExC_parse++;",
      "15219:                     RExC_parse++;",
      "15222:                     RExC_parse++;",
      "15223:                     RExC_flags = save_flags;",
      "",
      "[Removed Lines]",
      "15215:                     assert(UCHARAT(RExC_parse) == ')');",
      "15220:                     assert(UCHARAT(RExC_parse) == ')');",
      "",
      "[Added Lines]",
      "15221:                     if (UCHARAT(RExC_parse) != ')')",
      "15222:                         vFAIL(\"Expecting close paren for nested extended charclass\");",
      "15227:                     if (UCHARAT(RExC_parse) != ')')",
      "15228:                         vFAIL(\"Expecting close paren for wrapper for nested extended charclass\");",
      "",
      "---------------"
    ],
    "t/re/reg_mesg.t||t/re/reg_mesg.t": [
      "File: t/re/reg_mesg.t -> t/re/reg_mesg.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:  '/\\b{gc}/' => \"'gc' is an unknown bound type {#} m/\\\\b{gc{#}}/\",",
      "235:  '/\\B{gc}/' => \"'gc' is an unknown bound type {#} m/\\\\B{gc{#}}/\",",
      "239:  '/(?[[:w:]])/' => \"\",",
      "240:  '/([.].*)[.]/'   => \"\",    # [perl #127582]",
      "241:  '/[.].*[.]/'     => \"\",    # [perl #127604]",
      "",
      "[Removed Lines]",
      "237:  '/(?[[[::]]])/' => \"Syntax error in (?[...]) in regex m/(?[[[::]]])/\",",
      "238:  '/(?[[[:w:]]])/' => \"Syntax error in (?[...]) in regex m/(?[[[:w:]]])/\",",
      "",
      "[Added Lines]",
      "238:  '/(?[[[::]]])/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[[[::]]{#}])/\",",
      "239:  '/(?[[[:w:]]])/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[[[:w:]]{#}])/\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "258:  '/(?[ \\p{foo} ])/' => 'Can\\'t find Unicode property definition \"foo\" {#} m/(?[ \\p{foo}{#} ])/',",
      "259:  '/(?[ \\p{ foo = bar } ])/' => 'Can\\'t find Unicode property definition \"foo = bar\" {#} m/(?[ \\p{ foo = bar }{#} ])/',",
      "260:  '/(?[ \\8 ])/' => 'Unrecognized escape \\8 in character class {#} m/(?[ \\8{#} ])/',",
      "266:  '/(?[ ])/' => 'Incomplete expression within \\'(?[ ])\\' {#} m/(?[ {#}])/',",
      "267:  'm/(?[[a-\\d]])/' => 'False [] range \"a-\\d\" {#} m/(?[[a-\\d{#}]])/',",
      "268:  'm/(?[[\\w-x]])/' => 'False [] range \"\\w-\" {#} m/(?[[\\w-{#}x]])/',",
      "",
      "[Removed Lines]",
      "261:  '/(?[ \\t ]/' => 'Syntax error in (?[...]) in regex m/(?[ \\t ]/',",
      "262:  '/(?[ [ \\t ]/' => 'Syntax error in (?[...]) in regex m/(?[ [ \\t ]/',",
      "263:  '/(?[ \\t ] ]/' => 'Syntax error in (?[...]) in regex m/(?[ \\t ] ]/',",
      "264:  '/(?[ [ ] ]/' => 'Syntax error in (?[...]) in regex m/(?[ [ ] ]/',",
      "265:  '/(?[ \\t + \\e # This was supposed to be a comment ])/' => 'Syntax error in (?[...]) in regex m/(?[ \\t + \\e # This was supposed to be a comment ])/',",
      "",
      "[Added Lines]",
      "262:  '/(?[ \\t ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[ \\\\t ]{#}/\",",
      "263:  '/(?[ [ \\t ]/' => \"Syntax error in (?[...]) {#} m/(?[ [ \\\\t ]{#}/\",",
      "264:  '/(?[ \\t ] ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[ \\\\t ]{#} ]/\",",
      "265:  '/(?[ [ ] ]/' => \"Syntax error in (?[...]) {#} m/(?[ [ ] ]{#}/\",",
      "266:  '/(?[ \\t + \\e # This was supposed to be a comment ])/' =>",
      "267:     \"Syntax error in (?[...]) {#} m/(?[ \\\\t + \\\\e # This was supposed to be a comment ]){#}/\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "453:  '/\u30cd\\p{}\u30cd/' => 'Empty \\p{} {#} m/\u30cd\\p{{#}}\u30cd/',",
      "459:  '/\u30cd(?[[:\u30cd:]])\u30cd/' => \"\",",
      "460:  '/\u30cd(?[\u30cd])\u30cd/' =>  'Unexpected character {#} m/\u30cd(?[\u30cd{#}])\u30cd/',",
      "461:  '/\u30cd(?[ + [\u30cd] ])/' => 'Unexpected binary operator \\'+\\' with no preceding operand {#} m/\u30cd(?[ +{#} [\u30cd] ])/',",
      "",
      "[Removed Lines]",
      "455:  '/\u30cd(?[[[:\u30cd]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd]]])\u30cd/\",",
      "456:  '/\u30cd(?[[[:\u30cd: ])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd: ])\u30cd/\",",
      "457:  '/\u30cd(?[[[::]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[::]]])\u30cd/\",",
      "458:  '/\u30cd(?[[[:\u30cd:]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd:]]])\u30cd/\",",
      "",
      "[Added Lines]",
      "457:  '/\u30cd(?[[[:\u30cd]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[:\u30cd]]{#}])\u30cd/\",",
      "458:  '/\u30cd(?[[[:\u30cd: ])\u30cd/' => \"Syntax error in (?[...]) {#} m/\u30cd(?[[[:\u30cd: ])\u30cd{#}/\",",
      "459:  '/\u30cd(?[[[::]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[::]]{#}])\u30cd/\",",
      "460:  '/\u30cd(?[[[:\u30cd:]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[:\u30cd:]]{#}])\u30cd/\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "468:  '/(?[ \\x{\u30cd} ])\u30cd/' => 'Non-hex character {#} m/(?[ \\x{\u30cd{#}} ])\u30cd/',",
      "469:  '/(?[ \\p{\u30cd} ])/' => 'Can\\'t find Unicode property definition \"\u30cd\" {#} m/(?[ \\p{\u30cd}{#} ])/',",
      "470:  '/(?[ \\p{ \u30cd = bar } ])/' => 'Can\\'t find Unicode property definition \"\u30cd = bar\" {#} m/(?[ \\p{ \u30cd = bar }{#} ])/',",
      "473:  'm/(*\u30cd)\u30cd/' => q<Unknown verb pattern '\u30cd' {#} m/(*\u30cd){#}\u30cd/>,",
      "474:  '/\\c\u30cd/' => \"Character following \\\"\\\\c\\\" must be printable ASCII\",",
      "475:  '/\\b{\u30cd}/' => \"'\u30cd' is an unknown bound type {#} m/\\\\b{\u30cd{#}}/\",",
      "",
      "[Removed Lines]",
      "471:  '/\u30cd(?[ \\t ]/' => 'Syntax error in (?[...]) in regex m/\u30cd(?[ \\t ]/',",
      "472:  '/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/' => 'Syntax error in (?[...]) in regex m/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/',",
      "",
      "[Added Lines]",
      "473:  '/\u30cd(?[ \\t ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[ \\\\t ]{#}/\",",
      "474:  '/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/' =>",
      "475:     \"Syntax error in (?[...]) {#} m/(?[ \\\\t + \\\\e # \u30cd This was supposed to be a comment ]){#}/\",",
      "",
      "---------------"
    ],
    "t/re/regex_sets.t||t/re/regex_sets.t": [
      "File: t/re/regex_sets.t -> t/re/regex_sets.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: # RT #126181: \\cX behaves strangely inside (?[])",
      "159: {",
      "160:  no warnings qw(syntax regexp);",
      "162:  eval { $_ = '/(?[(\\c]) /'; qr/$_/ };",
      "163:  like($@, qr/^Syntax error/, '/(?[(\\c]) / should not panic');",
      "164:  eval { $_ = '(?[\\c#]' . \"\\n])\"; qr/$_/ };",
      "166:  eval { $_ = '(?[(\\c])'; qr/$_/ };",
      "168:  eval { $_ = '(?[(\\c]) ]\\b'; qr/$_/ };",
      "169:  like($@, qr/^Syntax error/, '/(?[(\\c]) ]\\b/ should be a syntax error');",
      "170:  eval { $_ = '(?[\\c[]](])'; qr/$_/ };",
      "",
      "[Removed Lines]",
      "165:  like($@, qr/^Syntax error/, '/(?[(\\c]) / should not panic');",
      "167:  like($@, qr/^Syntax error/, '/(?[(\\c])/ should be a syntax error');",
      "",
      "[Added Lines]",
      "165:  like($@, qr/^Unexpected/, '/(?[(\\c]) / should not panic');",
      "167:  like($@, qr/^Syntax error/, '/(?[(\\c])/ should be a syntax error');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dabe076af345ab4512ea80245b4e4cd7ec0996cd",
      "candidate_info": {
        "commit_hash": "dabe076af345ab4512ea80245b4e4cd7ec0996cd",
        "repo": "Perl/perl5",
        "commit_url": "https://github.com/Perl/perl5/commit/dabe076af345ab4512ea80245b4e4cd7ec0996cd",
        "files": [
          "pod/perldiag.pod",
          "pod/perlrecharclass.pod",
          "regcomp.c",
          "t/lib/warnings/regcomp",
          "t/re/reg_mesg.t",
          "t/re/regex_sets.t"
        ],
        "message": "fix #131649 - extended charclass can trigger assert\n\nThe extended charclass parser makes some assumptions during the\nfirst pass which are only true on well structured input, and it\ndoes not properly catch various errors. later on the code assumes\nthat things the first pass will let through are valid, when in\nfact they should trigger errors.\n\n(cherry picked from commit 19a498a461d7c81ae3507c450953d1148efecf4f)",
        "before_after_code_files": [
          "pod/perldiag.pod||pod/perldiag.pod",
          "pod/perlrecharclass.pod||pod/perlrecharclass.pod",
          "regcomp.c||regcomp.c",
          "t/re/reg_mesg.t||t/re/reg_mesg.t",
          "t/re/regex_sets.t||t/re/regex_sets.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pod/perldiag.pod||pod/perldiag.pod",
            "pod/perlrecharclass.pod||pod/perlrecharclass.pod",
            "regcomp.c||regcomp.c",
            "t/re/reg_mesg.t||t/re/reg_mesg.t",
            "t/re/regex_sets.t||t/re/regex_sets.t"
          ],
          "candidate": [
            "pod/perldiag.pod||pod/perldiag.pod",
            "pod/perlrecharclass.pod||pod/perlrecharclass.pod",
            "regcomp.c||regcomp.c",
            "t/re/reg_mesg.t||t/re/reg_mesg.t",
            "t/re/regex_sets.t||t/re/regex_sets.t"
          ]
        }
      },
      "candidate_diff": {
        "pod/perldiag.pod||pod/perldiag.pod": [
          "File: pod/perldiag.pod -> pod/perldiag.pod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5904: a perl4 interpreter, especially if the next 2 tokens are \"use strict\"",
          "5905: or \"my $var\" or \"our $var\".",
          "5909: (F) Perl could not figure out what you meant inside this construct; this",
          "5910: notifies you that it is giving up trying.",
          "",
          "[Removed Lines]",
          "5907: =item Syntax error in (?[...]) in regex m/%s/",
          "",
          "[Added Lines]",
          "5907: =item Syntax error in (?[...]) in regex; marked by <-- HERE in m/%s/",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6402: (F) The unexec() routine failed for some reason.  See your local FSF",
          "6403: representative, who probably put it there in the first place.",
          "6405: =item Unexpected binary operator '%c' with no preceding operand in regex;",
          "6406: marked by S<<-- HERE> in m/%s/",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6405: =item Unexpected ']' with no following ')' in (?[... in regex; marked by <-- HERE in m/%s/",
          "6407: (F) While parsing an extended character class a ']' character was encountered",
          "6408: at a point in the definition where the only legal use of ']' is to close the",
          "6409: character class definition as part of a '])', you may have forgotten the close",
          "6410: paren, or otherwise confused the parser.",
          "6412: =item Expecting close paren for nested extended charclass in regex; marked by <-- HERE in m/%s/",
          "6414: (F) While parsing a nested extended character class like:",
          "6416:     (?[ ... (?flags:(?[ ... ])) ... ])",
          "6417:                              ^",
          "6419: we expected to see a close paren ')' (marked by ^) but did not.",
          "6421: =item Expecting close paren for wrapper for nested extended charclass in regex; marked by <-- HERE in m/%s/",
          "6423: (F) While parsing a nested extended character class like:",
          "6425:     (?[ ... (?flags:(?[ ... ])) ... ])",
          "6426:                               ^",
          "6428: we expected to see a close paren ')' (marked by ^) but did not.",
          "",
          "---------------"
        ],
        "pod/perlrecharclass.pod||pod/perlrecharclass.pod": [
          "File: pod/perlrecharclass.pod -> pod/perlrecharclass.pod",
          "--- Hunk 1 ---",
          "[Context before]",
          "1128: Any contained POSIX character classes, including things like C<\\w> and C<\\D>",
          "1129: respect the C<E<sol>a> (and C<E<sol>aa>) modifiers.",
          "1133: expression is compiled is a fatal error.  In practice, this means",
          "1134: just three limitations:",
          "",
          "[Removed Lines]",
          "1131: C<< (?[ ]) >> is a regex-compile-time construct.  Any attempt to use",
          "1132: something which isn't knowable at the time the containing regular",
          "",
          "[Added Lines]",
          "1131: Note that C<< (?[ ]) >> is a regex-compile-time construct.  Any attempt",
          "1132: to use something which isn't knowable at the time the containing regular",
          "",
          "---------------"
        ],
        "regcomp.c||regcomp.c": [
          "File: regcomp.c -> regcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14840:                                     TRUE /* Force /x */ );",
          "14842:             switch (*RExC_parse) {",
          "14846:                 default:",
          "14847:                     break;",
          "",
          "[Removed Lines]",
          "14843:                 case '?':",
          "14844:                     if (RExC_parse[1] == '[') depth++, RExC_parse++;",
          "",
          "[Added Lines]",
          "14843:                 case '(':",
          "14844:                     if (RExC_parse[1] == '?' && RExC_parse[2] == '[')",
          "14845:                         depth++, RExC_parse+=2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14898:                 }",
          "14900:                 case ']':",
          "14904:                         node = reganode(pRExC_state, ANYOF, 0);",
          "14905:                         RExC_size += ANYOF_SKIP;",
          "14906:                         nextchar(pRExC_state);",
          "",
          "[Removed Lines]",
          "14901:                     if (depth--) break;",
          "14902:                     RExC_parse++;",
          "14903:                     if (*RExC_parse == ')') {",
          "",
          "[Added Lines]",
          "14902:                     if (RExC_parse[1] == ')') {",
          "14903:                         RExC_parse++;",
          "14904:                         if (depth--) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14913:                         return node;",
          "14914:                     }",
          "14916:             }",
          "14918:             RExC_parse += UTF ? UTF8SKIP(RExC_parse) : 1;",
          "14919:         }",
          "14924:         if (posix_warnings && av_tindex_skip_len_mg(posix_warnings) >= 0) {",
          "14925:             output_or_return_posix_warnings(pRExC_state, posix_warnings, NULL);",
          "14926:         }",
          "14929:     }",
          "",
          "[Removed Lines]",
          "14915:                     goto no_close;",
          "14921:       no_close:",
          "14928:         FAIL(\"Syntax error in (?[...])\");",
          "",
          "[Added Lines]",
          "14918:                     if (posix_warnings && av_tindex_skip_len_mg(posix_warnings) >= 0) {",
          "14919:                         output_or_return_posix_warnings(pRExC_state, posix_warnings, NULL);",
          "14920:                     }",
          "14921:                     RExC_parse++;",
          "14922:                     vFAIL(\"Unexpected ']' with no following ')' in (?[...\");",
          "14934:         vFAIL(\"Syntax error in (?[...])\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "15107:                     RExC_parse++;",
          "15112:                     RExC_parse++;",
          "15115:                     RExC_flags = save_flags;",
          "15116:                     goto handle_operand;",
          "",
          "[Removed Lines]",
          "15108:                     assert(UCHARAT(RExC_parse) == ')');",
          "15113:                     assert(UCHARAT(RExC_parse) == ')');",
          "",
          "[Added Lines]",
          "15114:                     if (UCHARAT(RExC_parse) != ')')",
          "15115:                         vFAIL(\"Expecting close paren for nested extended charclass\");",
          "15120:                     if (UCHARAT(RExC_parse) != ')')",
          "15121:                         vFAIL(\"Expecting close paren for wrapper for nested extended charclass\");",
          "",
          "---------------"
        ],
        "t/re/reg_mesg.t||t/re/reg_mesg.t": [
          "File: t/re/reg_mesg.t -> t/re/reg_mesg.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:  '/\\b{gc}/' => \"'gc' is an unknown bound type {#} m/\\\\b{gc{#}}/\",",
          "216:  '/\\B{gc}/' => \"'gc' is an unknown bound type {#} m/\\\\B{gc{#}}/\",",
          "220:  '/(?[[:w:]])/' => \"\",",
          "221:  '/([.].*)[.]/'   => \"\",    # [perl #127582]",
          "222:  '/[.].*[.]/'     => \"\",    # [perl #127604]",
          "",
          "[Removed Lines]",
          "218:  '/(?[[[::]]])/' => \"Syntax error in (?[...]) in regex m/(?[[[::]]])/\",",
          "219:  '/(?[[[:w:]]])/' => \"Syntax error in (?[...]) in regex m/(?[[[:w:]]])/\",",
          "",
          "[Added Lines]",
          "219:  '/(?[[[::]]])/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[[[::]]{#}])/\",",
          "220:  '/(?[[[:w:]]])/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[[[:w:]]{#}])/\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:  '/(?[ \\p{foo} ])/' => 'Can\\'t find Unicode property definition \"foo\" {#} m/(?[ \\p{foo}{#} ])/',",
          "240:  '/(?[ \\p{ foo = bar } ])/' => 'Can\\'t find Unicode property definition \"foo = bar\" {#} m/(?[ \\p{ foo = bar }{#} ])/',",
          "241:  '/(?[ \\8 ])/' => 'Unrecognized escape \\8 in character class {#} m/(?[ \\8{#} ])/',",
          "247:  '/(?[ ])/' => 'Incomplete expression within \\'(?[ ])\\' {#} m/(?[ {#}])/',",
          "248:  'm/(?[[a-\\d]])/' => 'False [] range \"a-\\d\" {#} m/(?[[a-\\d{#}]])/',",
          "249:  'm/(?[[\\w-x]])/' => 'False [] range \"\\w-\" {#} m/(?[[\\w-{#}x]])/',",
          "",
          "[Removed Lines]",
          "242:  '/(?[ \\t ]/' => 'Syntax error in (?[...]) in regex m/(?[ \\t ]/',",
          "243:  '/(?[ [ \\t ]/' => 'Syntax error in (?[...]) in regex m/(?[ [ \\t ]/',",
          "244:  '/(?[ \\t ] ]/' => 'Syntax error in (?[...]) in regex m/(?[ \\t ] ]/',",
          "245:  '/(?[ [ ] ]/' => 'Syntax error in (?[...]) in regex m/(?[ [ ] ]/',",
          "246:  '/(?[ \\t + \\e # This was supposed to be a comment ])/' => 'Syntax error in (?[...]) in regex m/(?[ \\t + \\e # This was supposed to be a comment ])/',",
          "",
          "[Added Lines]",
          "243:  '/(?[ \\t ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[ \\\\t ]{#}/\",",
          "244:  '/(?[ [ \\t ]/' => \"Syntax error in (?[...]) {#} m/(?[ [ \\\\t ]{#}/\",",
          "245:  '/(?[ \\t ] ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/(?[ \\\\t ]{#} ]/\",",
          "246:  '/(?[ [ ] ]/' => \"Syntax error in (?[...]) {#} m/(?[ [ ] ]{#}/\",",
          "247:  '/(?[ \\t + \\e # This was supposed to be a comment ])/' =>",
          "248:     \"Syntax error in (?[...]) {#} m/(?[ \\\\t + \\\\e # This was supposed to be a comment ]){#}/\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432:  '/\u30cd\\p{}\u30cd/' => 'Empty \\p{} {#} m/\u30cd\\p{{#}}\u30cd/',",
          "438:  '/\u30cd(?[[:\u30cd:]])\u30cd/' => \"\",",
          "439:  '/\u30cd(?[\u30cd])\u30cd/' =>  'Unexpected character {#} m/\u30cd(?[\u30cd{#}])\u30cd/',",
          "440:  '/\u30cd(?[ + [\u30cd] ])/' => 'Unexpected binary operator \\'+\\' with no preceding operand {#} m/\u30cd(?[ +{#} [\u30cd] ])/',",
          "",
          "[Removed Lines]",
          "434:  '/\u30cd(?[[[:\u30cd]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd]]])\u30cd/\",",
          "435:  '/\u30cd(?[[[:\u30cd: ])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd: ])\u30cd/\",",
          "436:  '/\u30cd(?[[[::]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[::]]])\u30cd/\",",
          "437:  '/\u30cd(?[[[:\u30cd:]]])\u30cd/' => \"Syntax error in (?[...]) in regex m/\u30cd(?[[[:\u30cd:]]])\u30cd/\",",
          "",
          "[Added Lines]",
          "436:  '/\u30cd(?[[[:\u30cd]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[:\u30cd]]{#}])\u30cd/\",",
          "437:  '/\u30cd(?[[[:\u30cd: ])\u30cd/' => \"Syntax error in (?[...]) {#} m/\u30cd(?[[[:\u30cd: ])\u30cd{#}/\",",
          "438:  '/\u30cd(?[[[::]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[::]]{#}])\u30cd/\",",
          "439:  '/\u30cd(?[[[:\u30cd:]]])\u30cd/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[[[:\u30cd:]]{#}])\u30cd/\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:  '/(?[ \\x{\u30cd} ])\u30cd/' => 'Non-hex character {#} m/(?[ \\x{\u30cd{#}} ])\u30cd/',",
          "448:  '/(?[ \\p{\u30cd} ])/' => 'Can\\'t find Unicode property definition \"\u30cd\" {#} m/(?[ \\p{\u30cd}{#} ])/',",
          "449:  '/(?[ \\p{ \u30cd = bar } ])/' => 'Can\\'t find Unicode property definition \"\u30cd = bar\" {#} m/(?[ \\p{ \u30cd = bar }{#} ])/',",
          "452:  'm/(*\u30cd)\u30cd/' => q<Unknown verb pattern '\u30cd' {#} m/(*\u30cd){#}\u30cd/>,",
          "453:  '/\\c\u30cd/' => \"Character following \\\"\\\\c\\\" must be printable ASCII\",",
          "454:  '/\\b{\u30cd}/' => \"'\u30cd' is an unknown bound type {#} m/\\\\b{\u30cd{#}}/\",",
          "",
          "[Removed Lines]",
          "450:  '/\u30cd(?[ \\t ]/' => 'Syntax error in (?[...]) in regex m/\u30cd(?[ \\t ]/',",
          "451:  '/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/' => 'Syntax error in (?[...]) in regex m/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/',",
          "",
          "[Added Lines]",
          "452:  '/\u30cd(?[ \\t ]/' => \"Unexpected ']' with no following ')' in (?[... {#} m/\u30cd(?[ \\\\t ]{#}/\",",
          "453:  '/(?[ \\t + \\e # \u30cd This was supposed to be a comment ])/' =>",
          "454:     \"Syntax error in (?[...]) {#} m/(?[ \\\\t + \\\\e # \u30cd This was supposed to be a comment ]){#}/\",",
          "",
          "---------------"
        ],
        "t/re/regex_sets.t||t/re/regex_sets.t": [
          "File: t/re/regex_sets.t -> t/re/regex_sets.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: # RT #126181: \\cX behaves strangely inside (?[])",
          "159: {",
          "160:  no warnings qw(syntax regexp);",
          "162:  eval { $_ = '/(?[(\\c]) /'; qr/$_/ };",
          "163:  like($@, qr/^Syntax error/, '/(?[(\\c]) / should not panic');",
          "164:  eval { $_ = '(?[\\c#]' . \"\\n])\"; qr/$_/ };",
          "166:  eval { $_ = '(?[(\\c])'; qr/$_/ };",
          "168:  eval { $_ = '(?[(\\c]) ]\\b'; qr/$_/ };",
          "169:  like($@, qr/^Syntax error/, '/(?[(\\c]) ]\\b/ should be a syntax error');",
          "170:  eval { $_ = '(?[\\c[]](])'; qr/$_/ };",
          "",
          "[Removed Lines]",
          "165:  like($@, qr/^Syntax error/, '/(?[(\\c]) / should not panic');",
          "167:  like($@, qr/^Syntax error/, '/(?[(\\c])/ should be a syntax error');",
          "",
          "[Added Lines]",
          "165:  like($@, qr/^Unexpected/, '/(?[(\\c]) / should not panic');",
          "167:  like($@, qr/^Syntax error/, '/(?[(\\c])/ should be a syntax error');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3d05682766f714d475eab328af413b3634363bf",
      "candidate_info": {
        "commit_hash": "b3d05682766f714d475eab328af413b3634363bf",
        "repo": "Perl/perl5",
        "commit_url": "https://github.com/Perl/perl5/commit/b3d05682766f714d475eab328af413b3634363bf",
        "files": [
          "regcomp.c"
        ],
        "message": "regcomp.c: handle_regex_sets() - add DEBUG_PARSE and fixup 'depth' logic\n\n'depth' is used to track the recursion depth during compilation,\nand is used by things like DEBUG_PARSE() to show the compilation\nprocess.\n\nhandle_regex_sets() was using its own 'depth' for two different purposes,\nwhich is quite confusing.\n\nAt the same time, when we call handle_regex_sets() from reg() it is\nimportant to increment 'depth'.",
        "before_after_code_files": [
          "regcomp.c||regcomp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "regcomp.c||regcomp.c"
          ],
          "candidate": [
            "regcomp.c||regcomp.c"
          ]
        }
      },
      "candidate_diff": {
        "regcomp.c||regcomp.c": [
          "File: regcomp.c -> regcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11336:                 vFAIL(\"Unknown switch condition (?(...))\");",
          "11337:      }",
          "11340:                                          oregcomp_parse);",
          "",
          "[Removed Lines]",
          "11339:                 return handle_regex_sets(pRExC_state, NULL, flagp, depth,",
          "",
          "[Added Lines]",
          "11339:                 return handle_regex_sets(pRExC_state, NULL, flagp, depth+1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14920:     PERL_ARGS_ASSERT_HANDLE_REGEX_SETS;",
          "14922:     if (in_locale) {",
          "14923:         set_regex_charset(&RExC_flags, REGEX_UNICODE_CHARSET);",
          "14924:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14922:     DEBUG_PARSE(\"xcls\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14947:             switch (*RExC_parse) {",
          "14948:                 case '?':",
          "14951:                 default:",
          "14952:                     break;",
          "",
          "[Removed Lines]",
          "14949:                     if (RExC_parse[1] == '[') depth++, RExC_parse++;",
          "",
          "[Added Lines]",
          "14951:                     if (RExC_parse[1] == '[') nest_depth++, RExC_parse++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "15003:                 }",
          "15005:                 case ']':",
          "15007:                     RExC_parse++;",
          "15008:                     if (*RExC_parse == ')') {",
          "15009:                         node = reganode(pRExC_state, ANYOF, 0);",
          "",
          "[Removed Lines]",
          "15006:                     if (depth--) break;",
          "",
          "[Added Lines]",
          "15008:                     if (nest_depth--) break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}