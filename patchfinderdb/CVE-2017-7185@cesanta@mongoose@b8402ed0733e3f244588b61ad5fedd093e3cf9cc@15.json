{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d0cc95ff47299908613a538bb09c99174c6f51b",
      "candidate_info": {
        "commit_hash": "4d0cc95ff47299908613a538bb09c99174c6f51b",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/4d0cc95ff47299908613a538bb09c99174c6f51b",
        "files": [
          "mongoose.c"
        ],
        "message": "Add JS net api test\n\nPUBLISHED_FROM=f2821b104f8f2fc196ce4064b7c9f35ea152368d",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14636:   }",
          "14637:   struct udp_pcb *upcb = cs->pcb.udp;",
          "14638:   struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);",
          "14640:   u16_t port = ntohs(nc->sa.sin.sin_port);",
          "14641:   if (p == NULL) {",
          "14642:     DBG((\"OOM\"));",
          "14643:     return 0;",
          "14644:   }",
          "14645:   memcpy(p->payload, data, len);",
          "14647:   tcpip_callback(udp_sendto_tcpip, &ctx);",
          "14648:   cs->err = ctx.ret;",
          "14650:   pbuf_free(p);",
          "14651:   return (cs->err == ERR_OK ? len : -1);",
          "14652: }",
          "",
          "[Removed Lines]",
          "14639:   ip_addr_t *ip = (ip_addr_t *) &nc->sa.sin.sin_addr.s_addr;",
          "14646:   struct udp_sendto_ctx ctx = {.upcb = upcb, .p = p, .ip = ip, .port = port};",
          "14649:   DBG((\"%p udp_sendto = %d\", nc, cs->err));",
          "",
          "[Added Lines]",
          "14639: #if defined(LWIP_IPV4) && LWIP_IPV4 && defined(LWIP_IPV6) && LWIP_IPV6",
          "14640:   ip_addr_t ip = { .u_addr.ip4.addr = nc->sa.sin.sin_addr.s_addr, .type = 0 };",
          "14641: #else",
          "14642:   ip_addr_t ip = { .addr = nc->sa.sin.sin_addr.s_addr };",
          "14643: #endif",
          "14650:   struct udp_sendto_ctx ctx = {.upcb = upcb, .p = p, .ip = &ip, .port = port};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf0a969a65b9a3772d01a63d32de404a0e9c5202",
      "candidate_info": {
        "commit_hash": "cf0a969a65b9a3772d01a63d32de404a0e9c5202",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/cf0a969a65b9a3772d01a63d32de404a0e9c5202",
        "files": [
          "mongoose.c"
        ],
        "message": "ESP8266 and ESP32 build image updates\n\nESP32: 2.0-r6\nESP8266: 2.0.0-1.5.0-r5\n\nThis brings updated mbedTLS with support for on-disk CA chains:\nhttps://github.com/cesanta/mbedtls/compare/esp32_2.0-r5...esp32_2.0-r6\nESP8266 gets bigger rollup (ESP32 got those changes earlier, seems ok):\nhttps://github.com/cesanta/mbedtls/compare/esp8266...esp8266_2.0.0-1.5.0-r5\n\nSaves ~1.5K RAM for now, but will allow adding more roots to ca.pem without wasting RAM.\n\nRefactored docker build for ESP8266 in the same way as was done earlier for ESP32.\n\nPUBLISHED_FROM=db8eb0f91875d02266a8baaf1141c0d65eb59674",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4602:   }",
          "4603:   if (ctx->ca_cert != NULL) {",
          "4604:     mbedtls_ssl_conf_ca_chain(ctx->conf, NULL, NULL);",
          "4605:     mbedtls_x509_crt_free(ctx->ca_cert);",
          "4606:     MG_FREE(ctx->ca_cert);",
          "4607:     ctx->ca_cert = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4605: #ifdef MBEDTLS_X509_CA_CHAIN_ON_DISK",
          "4606:     if (ctx->ca_cert->ca_chain_file != NULL) {",
          "4607:       MG_FREE((void *) ctx->ca_cert->ca_chain_file);",
          "4608:       ctx->ca_cert->ca_chain_file = NULL;",
          "4609:     }",
          "4610: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4687:   }",
          "4688:   ctx->ca_cert = (mbedtls_x509_crt *) MG_CALLOC(1, sizeof(*ctx->ca_cert));",
          "4689:   mbedtls_x509_crt_init(ctx->ca_cert);",
          "4690:   if (mbedtls_x509_crt_parse_file(ctx->ca_cert, ca_cert) != 0) {",
          "4691:     return MG_SSL_ERROR;",
          "4692:   }",
          "4693:   mbedtls_ssl_conf_ca_chain(ctx->conf, ctx->ca_cert, NULL);",
          "4694:   mbedtls_ssl_conf_authmode(ctx->conf, MBEDTLS_SSL_VERIFY_REQUIRED);",
          "4695:   return MG_SSL_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4696: #ifdef MBEDTLS_X509_CA_CHAIN_ON_DISK",
          "4697:   ca_cert = strdup(ca_cert);",
          "4698:   if (mbedtls_x509_crt_set_ca_chain_file(ctx->ca_cert, ca_cert) != 0) {",
          "4699:     return MG_SSL_ERROR;",
          "4700:   }",
          "4701: #else",
          "4705: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a83e7d8c4294b2644d83386a8a44b541a0a2786c",
      "candidate_info": {
        "commit_hash": "a83e7d8c4294b2644d83386a8a44b541a0a2786c",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/a83e7d8c4294b2644d83386a8a44b541a0a2786c",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Properly shut down the SSL connection\n\nBy sending close_notify\n\nPUBLISHED_FROM=028a001cb9470a16cc7a6544805bfb042a435779",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2112: void mg_close_conn(struct mg_connection *conn) {",
          "2113:   DBG((\"%p %lu %d\", conn, conn->flags, conn->sock));",
          "2114:   mg_remove_conn(conn);",
          "2115:   conn->iface->vtable->destroy_conn(conn);",
          "2116:   mg_call(conn, NULL, conn->user_data, MG_EV_CLOSE, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2114: #if MG_ENABLE_SSL",
          "2115:   if (conn->flags & MG_F_SSL_HANDSHAKE_DONE) {",
          "2116:     mg_ssl_if_conn_close_notify(conn);",
          "2117:   }",
          "2118: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4150:   return n;",
          "4151: }",
          "4153: void mg_ssl_if_conn_free(struct mg_connection *nc) {",
          "4154:   struct mg_ssl_if_ctx *ctx = (struct mg_ssl_if_ctx *) nc->ssl_if_data;",
          "4155:   if (ctx == NULL) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4158: void mg_ssl_if_conn_close_notify(struct mg_connection *nc) {",
          "4159:   struct mg_ssl_if_ctx *ctx = (struct mg_ssl_if_ctx *) nc->ssl_if_data;",
          "4160:   if (ctx == NULL) return;",
          "4161:   SSL_shutdown(ctx->ssl);",
          "4162: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4637:   return n;",
          "4638: }",
          "4640: void mg_ssl_if_conn_free(struct mg_connection *nc) {",
          "4641:   struct mg_ssl_if_ctx *ctx = (struct mg_ssl_if_ctx *) nc->ssl_if_data;",
          "4642:   if (ctx == NULL) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4651: void mg_ssl_if_conn_close_notify(struct mg_connection *nc) {",
          "4652:   struct mg_ssl_if_ctx *ctx = (struct mg_ssl_if_ctx *) nc->ssl_if_data;",
          "4653:   if (ctx == NULL) return;",
          "4654:   mbedtls_ssl_close_notify(ctx->ssl);",
          "4655: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "13638:   return MG_SSL_OK;",
          "13639: }",
          "13641: void mg_ssl_if_conn_free(struct mg_connection *nc) {",
          "13642:   struct mg_ssl_if_ctx *ctx = (struct mg_ssl_if_ctx *) nc->ssl_if_data;",
          "13643:   if (ctx == NULL) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13658: void mg_ssl_if_conn_close_notify(struct mg_connection *nc) {",
          "13660:   (void) nc;",
          "13661: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3153:     const char **err_msg);",
          "3154: enum mg_ssl_if_result mg_ssl_if_conn_accept(struct mg_connection *nc,",
          "3155:                                             struct mg_connection *lc);",
          "3156: void mg_ssl_if_conn_free(struct mg_connection *nc);",
          "3158: enum mg_ssl_if_result mg_ssl_if_handshake(struct mg_connection *nc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3156: void mg_ssl_if_conn_close_notify(struct mg_connection *nc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9a7a2af1800955c808749bf9ed93e30ebd96ea2",
      "candidate_info": {
        "commit_hash": "e9a7a2af1800955c808749bf9ed93e30ebd96ea2",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/e9a7a2af1800955c808749bf9ed93e30ebd96ea2",
        "files": [
          "mongoose.h"
        ],
        "message": "Fix WinCE compilation\n\nPUBLISHED_FROM=51d68829414739b04fafc9198d86b817c38d71d2",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235: #define EWOULDBLOCK WSAEWOULDBLOCK",
          "1236: #endif",
          "1238: #ifndef __func__",
          "1239: #define STRX(x) #x",
          "1240: #define STR(x) STRX(x)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1238: #ifndef EAGAIN",
          "1239: #define EAGAIN EWOULDBLOCK",
          "1240: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82761bb87566fde0739303b2e8cf6e2362f54daf",
      "candidate_info": {
        "commit_hash": "82761bb87566fde0739303b2e8cf6e2362f54daf",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/82761bb87566fde0739303b2e8cf6e2362f54daf",
        "files": [
          "examples/ESP8266_RTOS/user/mongoose.h"
        ],
        "message": "Bobify format targets\n\nPUBLISHED_FROM=2c1d372e4db856e23266c29195c07968abc2ec81",
        "before_after_code_files": [
          "examples/ESP8266_RTOS/user/mongoose.h||examples/ESP8266_RTOS/user/mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ESP8266_RTOS/user/mongoose.h||examples/ESP8266_RTOS/user/mongoose.h": [
          "File: examples/ESP8266_RTOS/user/mongoose.h -> examples/ESP8266_RTOS/user/mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifdef MG_MODULE_LINES",
          "2: #line 1 \"mongoose/src/common.h\"",
          "3: #endif",
          "23: #ifndef CS_MONGOOSE_SRC_COMMON_H_",
          "24: #define CS_MONGOOSE_SRC_COMMON_H_",
          "26: #define MG_VERSION \"6.7\"",
          "29: #ifdef MG_LOCALS",
          "30: #include <mg_locals.h>",
          "31: #endif",
          "34: #ifdef MG_MODULE_LINES",
          "35: #line 1 \"common/platform.h\"",
          "36: #endif",
          "37: #ifndef CS_COMMON_PLATFORM_H_",
          "38: #define CS_COMMON_PLATFORM_H_",
          "44: #define CS_P_CUSTOM 0",
          "45: #define CS_P_UNIX 1",
          "46: #define CS_P_WINDOWS 2",
          "47: #define CS_P_ESP32 15",
          "48: #define CS_P_ESP8266 3",
          "49: #define CS_P_CC3200 4",
          "50: #define CS_P_MSP432 5",
          "51: #define CS_P_CC3100 6",
          "52: #define CS_P_TM4C129 14",
          "53: #define CS_P_MBED 7",
          "54: #define CS_P_WINCE 8",
          "55: #define CS_P_NXP_LPC 13",
          "56: #define CS_P_NXP_KINETIS 9",
          "57: #define CS_P_NRF51 12",
          "58: #define CS_P_NRF52 10",
          "59: #define CS_P_PIC32 11",
          "60: #define CS_P_STM32 16",
          "64: #ifndef CS_PLATFORM",
          "66: #if defined(TARGET_IS_MSP432P4XX) || defined(__MSP432P401R__)",
          "67: #define CS_PLATFORM CS_P_MSP432",
          "68: #elif defined(cc3200)",
          "69: #define CS_PLATFORM CS_P_CC3200",
          "70: #elif defined(__unix__) || defined(__APPLE__)",
          "71: #define CS_PLATFORM CS_P_UNIX",
          "72: #elif defined(WINCE)",
          "73: #define CS_PLATFORM CS_P_WINCE",
          "74: #elif defined(_WIN32)",
          "75: #define CS_PLATFORM CS_P_WINDOWS",
          "76: #elif defined(__MBED__)",
          "77: #define CS_PLATFORM CS_P_MBED",
          "78: #elif defined(__USE_LPCOPEN)",
          "79: #define CS_PLATFORM CS_P_NXP_LPC",
          "80: #elif defined(FRDM_K64F) || defined(FREEDOM)",
          "81: #define CS_PLATFORM CS_P_NXP_KINETIS",
          "82: #elif defined(PIC32)",
          "83: #define CS_PLATFORM CS_P_PIC32",
          "84: #elif defined(ESP_PLATFORM)",
          "85: #define CS_PLATFORM CS_P_ESP32",
          "86: #elif defined(ICACHE_FLASH)",
          "87: #define CS_PLATFORM CS_P_ESP8266",
          "88: #elif defined(TARGET_IS_TM4C129_RA0) || defined(TARGET_IS_TM4C129_RA1) || \\",
          "89:     defined(TARGET_IS_TM4C129_RA2)",
          "90: #define CS_PLATFORM CS_P_TM4C129",
          "91: #elif defined(STM32)",
          "92: #define CS_PLATFORM CS_P_STM32",
          "93: #endif",
          "95: #ifndef CS_PLATFORM",
          "96: #error \"CS_PLATFORM is not specified and we couldn't guess it.\"",
          "97: #endif",
          "101: #define MG_NET_IF_SOCKET 1",
          "102: #define MG_NET_IF_SIMPLELINK 2",
          "103: #define MG_NET_IF_LWIP_LOW_LEVEL 3",
          "104: #define MG_NET_IF_PIC32 4",
          "106: #define MG_SSL_IF_OPENSSL 1",
          "107: #define MG_SSL_IF_MBEDTLS 2",
          "108: #define MG_SSL_IF_SIMPLELINK 3",
          "127: #if !defined(WEAK)",
          "128: #if (defined(__GNUC__) || defined(__TI_COMPILER_VERSION__)) && !defined(_WIN32)",
          "129: #define WEAK __attribute__((weak))",
          "130: #else",
          "131: #define WEAK",
          "132: #endif",
          "133: #endif",
          "135: #ifdef __GNUC__",
          "136: #define NORETURN __attribute__((noreturn))",
          "137: #define NOINLINE __attribute__((noinline))",
          "138: #define WARN_UNUSED_RESULT __attribute__((warn_unused_result))",
          "139: #define NOINSTR __attribute__((no_instrument_function))",
          "140: #define DO_NOT_WARN_UNUSED __attribute__((unused))",
          "141: #else",
          "142: #define NORETURN",
          "143: #define NOINLINE",
          "144: #define WARN_UNUSED_RESULT",
          "145: #define NOINSTR",
          "146: #define DO_NOT_WARN_UNUSED",
          "149: #ifndef ARRAY_SIZE",
          "150: #define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))",
          "151: #endif",
          "154: #ifdef MG_MODULE_LINES",
          "155: #line 1 \"common/platforms/platform_windows.h\"",
          "156: #endif",
          "157: #ifndef CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_",
          "158: #define CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_",
          "159: #if CS_PLATFORM == CS_P_WINDOWS",
          "173: #ifdef _MSC_VER",
          "176: #endif",
          "178: #ifndef _WINSOCK_DEPRECATED_NO_WARNINGS",
          "179: #define _WINSOCK_DEPRECATED_NO_WARNINGS 1",
          "180: #endif",
          "182: #ifndef _CRT_SECURE_NO_WARNINGS",
          "183: #define _CRT_SECURE_NO_WARNINGS",
          "184: #endif",
          "186: #include <assert.h>",
          "187: #include <direct.h>",
          "188: #include <errno.h>",
          "189: #include <fcntl.h>",
          "190: #include <io.h>",
          "191: #include <limits.h>",
          "192: #include <signal.h>",
          "193: #include <stddef.h>",
          "194: #include <stdio.h>",
          "195: #include <stdlib.h>",
          "196: #include <sys/stat.h>",
          "197: #include <time.h>",
          "198: #include <ctype.h>",
          "200: #ifdef _MSC_VER",
          "202: #endif",
          "204: #include <winsock2.h>",
          "205: #include <ws2tcpip.h>",
          "206: #include <windows.h>",
          "207: #include <process.h>",
          "209: #if defined(_MSC_VER) && _MSC_VER >= 1800",
          "210: #define strdup _strdup",
          "211: #endif",
          "213: #ifndef EINPROGRESS",
          "214: #define EINPROGRESS WSAEINPROGRESS",
          "215: #endif",
          "216: #ifndef EWOULDBLOCK",
          "217: #define EWOULDBLOCK WSAEWOULDBLOCK",
          "218: #endif",
          "219: #ifndef __func__",
          "220: #define STRX(x) #x",
          "221: #define STR(x) STRX(x)",
          "222: #define __func__ __FILE__ \":\" STR(__LINE__)",
          "223: #endif",
          "224: #define snprintf _snprintf",
          "225: #define vsnprintf _vsnprintf",
          "226: #define sleep(x) Sleep((x) *1000)",
          "227: #define to64(x) _atoi64(x)",
          "228: #if !defined(__MINGW32__) && !defined(__MINGW64__)",
          "229: #define popen(x, y) _popen((x), (y))",
          "230: #define pclose(x) _pclose(x)",
          "231: #define fileno _fileno",
          "232: #endif",
          "233: #define rmdir _rmdir",
          "234: #if defined(_MSC_VER) && _MSC_VER >= 1400",
          "235: #define fseeko(x, y, z) _fseeki64((x), (y), (z))",
          "236: #else",
          "237: #define fseeko(x, y, z) fseek((x), (y), (z))",
          "238: #endif",
          "239: #if defined(_MSC_VER) && _MSC_VER <= 1200",
          "240: typedef unsigned long uintptr_t;",
          "241: typedef long intptr_t;",
          "242: #endif",
          "243: typedef int socklen_t;",
          "244: #if _MSC_VER >= 1700",
          "245: #include <stdint.h>",
          "246: #else",
          "247: typedef signed char int8_t;",
          "248: typedef unsigned char uint8_t;",
          "249: typedef int int32_t;",
          "250: typedef unsigned int uint32_t;",
          "251: typedef short int16_t;",
          "252: typedef unsigned short uint16_t;",
          "253: typedef __int64 int64_t;",
          "254: typedef unsigned __int64 uint64_t;",
          "255: #endif",
          "256: typedef SOCKET sock_t;",
          "257: typedef uint32_t in_addr_t;",
          "258: #ifndef UINT16_MAX",
          "259: #define UINT16_MAX 65535",
          "260: #endif",
          "261: #ifndef UINT32_MAX",
          "262: #define UINT32_MAX 4294967295",
          "263: #endif",
          "264: #ifndef pid_t",
          "265: #define pid_t HANDLE",
          "266: #endif",
          "267: #define INT64_FMT \"I64d\"",
          "268: #define INT64_X_FMT \"I64x\"",
          "269: #define SIZE_T_FMT \"Iu\"",
          "270: typedef struct _stati64 cs_stat_t;",
          "271: #ifndef S_ISDIR",
          "272: #define S_ISDIR(x) (((x) &_S_IFMT) == _S_IFDIR)",
          "273: #endif",
          "274: #ifndef S_ISREG",
          "275: #define S_ISREG(x) (((x) &_S_IFMT) == _S_IFREG)",
          "276: #endif",
          "277: #define DIRSEP '\\\\'",
          "278: #define CS_DEFINE_DIRENT",
          "280: #ifndef va_copy",
          "281: #ifdef __va_copy",
          "282: #define va_copy __va_copy",
          "283: #else",
          "284: #define va_copy(x, y) (x) = (y)",
          "285: #endif",
          "286: #endif",
          "288: #ifndef MG_MAX_HTTP_REQUEST_SIZE",
          "289: #define MG_MAX_HTTP_REQUEST_SIZE 8192",
          "290: #endif",
          "292: #ifndef MG_MAX_HTTP_SEND_MBUF",
          "293: #define MG_MAX_HTTP_SEND_MBUF 4096",
          "294: #endif",
          "296: #ifndef MG_MAX_HTTP_HEADERS",
          "297: #define MG_MAX_HTTP_HEADERS 40",
          "298: #endif",
          "300: #ifndef CS_ENABLE_STDIO",
          "301: #define CS_ENABLE_STDIO 1",
          "302: #endif",
          "304: #ifndef MG_ENABLE_BROADCAST",
          "305: #define MG_ENABLE_BROADCAST 1",
          "306: #endif",
          "308: #ifndef MG_ENABLE_DIRECTORY_LISTING",
          "309: #define MG_ENABLE_DIRECTORY_LISTING 1",
          "310: #endif",
          "312: #ifndef MG_ENABLE_FILESYSTEM",
          "313: #define MG_ENABLE_FILESYSTEM 1",
          "314: #endif",
          "316: #ifndef MG_ENABLE_HTTP_CGI",
          "317: #define MG_ENABLE_HTTP_CGI MG_ENABLE_FILESYSTEM",
          "318: #endif",
          "320: #ifndef MG_NET_IF",
          "321: #define MG_NET_IF MG_NET_IF_SOCKET",
          "322: #endif",
          "326: #ifdef MG_MODULE_LINES",
          "327: #line 1 \"common/platforms/platform_unix.h\"",
          "328: #endif",
          "329: #ifndef CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_",
          "330: #define CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_",
          "331: #if CS_PLATFORM == CS_P_UNIX",
          "333: #ifndef _XOPEN_SOURCE",
          "334: #define _XOPEN_SOURCE 600",
          "335: #endif",
          "338: #ifndef __STDC_FORMAT_MACROS",
          "339: #define __STDC_FORMAT_MACROS",
          "340: #endif",
          "343: #ifndef __STDC_LIMIT_MACROS",
          "344: #define __STDC_LIMIT_MACROS",
          "345: #endif",
          "348: #ifndef _LARGEFILE_SOURCE",
          "349: #define _LARGEFILE_SOURCE",
          "350: #endif",
          "353: #ifndef _FILE_OFFSET_BITS",
          "354: #define _FILE_OFFSET_BITS 64",
          "355: #endif",
          "357: #include <arpa/inet.h>",
          "358: #include <assert.h>",
          "359: #include <ctype.h>",
          "360: #include <dirent.h>",
          "361: #include <errno.h>",
          "362: #include <fcntl.h>",
          "363: #include <inttypes.h>",
          "364: #include <stdint.h>",
          "365: #include <limits.h>",
          "366: #include <math.h>",
          "367: #include <netdb.h>",
          "368: #include <netinet/in.h>",
          "369: #include <pthread.h>",
          "370: #include <signal.h>",
          "371: #include <stdarg.h>",
          "372: #include <stdio.h>",
          "373: #include <stdlib.h>",
          "374: #include <string.h>",
          "375: #include <sys/param.h>",
          "376: #include <sys/socket.h>",
          "377: #include <sys/select.h>",
          "378: #include <sys/stat.h>",
          "379: #include <sys/time.h>",
          "380: #include <sys/types.h>",
          "381: #include <unistd.h>",
          "383: #ifdef __APPLE__",
          "384: #include <machine/endian.h>",
          "385: #ifndef BYTE_ORDER",
          "386: #define LITTLE_ENDIAN __DARWIN_LITTLE_ENDIAN",
          "387: #define BIG_ENDIAN __DARWIN_BIG_ENDIAN",
          "388: #define PDP_ENDIAN __DARWIN_PDP_ENDIAN",
          "389: #define BYTE_ORDER __DARWIN_BYTE_ORDER",
          "390: #endif",
          "391: #endif",
          "399: #if !(defined(__cplusplus) && __cplusplus >= 201103L) && \\",
          "400:     !(defined(__DARWIN_C_LEVEL) && __DARWIN_C_LEVEL >= 200809L)",
          "401: long long strtoll(const char *, char **, int);",
          "402: #endif",
          "404: typedef int sock_t;",
          "405: #define INVALID_SOCKET (-1)",
          "406: #define SIZE_T_FMT \"zu\"",
          "407: typedef struct stat cs_stat_t;",
          "408: #define DIRSEP '/'",
          "409: #define to64(x) strtoll(x, NULL, 10)",
          "410: #define INT64_FMT PRId64",
          "411: #define INT64_X_FMT PRIx64",
          "413: #ifndef __cdecl",
          "414: #define __cdecl",
          "415: #endif",
          "417: #ifndef va_copy",
          "418: #ifdef __va_copy",
          "419: #define va_copy __va_copy",
          "420: #else",
          "421: #define va_copy(x, y) (x) = (y)",
          "422: #endif",
          "423: #endif",
          "425: #define closesocket(x) close(x)",
          "427: #ifndef MG_MAX_HTTP_REQUEST_SIZE",
          "428: #define MG_MAX_HTTP_REQUEST_SIZE 8192",
          "429: #endif",
          "431: #ifndef MG_MAX_HTTP_SEND_MBUF",
          "432: #define MG_MAX_HTTP_SEND_MBUF 4096",
          "433: #endif",
          "435: #ifndef MG_MAX_HTTP_HEADERS",
          "436: #define MG_MAX_HTTP_HEADERS 40",
          "437: #endif",
          "439: #ifndef CS_ENABLE_STDIO",
          "440: #define CS_ENABLE_STDIO 1",
          "441: #endif",
          "443: #ifndef MG_ENABLE_BROADCAST",
          "444: #define MG_ENABLE_BROADCAST 1",
          "445: #endif",
          "447: #ifndef MG_ENABLE_DIRECTORY_LISTING",
          "448: #define MG_ENABLE_DIRECTORY_LISTING 1",
          "449: #endif",
          "451: #ifndef MG_ENABLE_FILESYSTEM",
          "452: #define MG_ENABLE_FILESYSTEM 1",
          "453: #endif",
          "455: #ifndef MG_ENABLE_HTTP_CGI",
          "456: #define MG_ENABLE_HTTP_CGI MG_ENABLE_FILESYSTEM",
          "457: #endif",
          "459: #ifndef MG_NET_IF",
          "460: #define MG_NET_IF MG_NET_IF_SOCKET",
          "461: #endif",
          "465: #ifdef MG_MODULE_LINES",
          "466: #line 1 \"common/platforms/platform_esp32.h\"",
          "467: #endif",
          "473: #ifndef CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_",
          "474: #define CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_",
          "475: #if CS_PLATFORM == CS_P_ESP32",
          "477: #include <assert.h>",
          "478: #include <ctype.h>",
          "479: #include <dirent.h>",
          "480: #include <fcntl.h>",
          "481: #include <inttypes.h>",
          "482: #include <machine/endian.h>",
          "483: #include <stdint.h>",
          "484: #include <string.h>",
          "485: #include <sys/stat.h>",
          "486: #include <sys/time.h>",
          "488: #define SIZE_T_FMT \"u\"",
          "489: typedef struct stat cs_stat_t;",
          "490: #define DIRSEP '/'",
          "491: #define to64(x) strtoll(x, NULL, 10)",
          "492: #define INT64_FMT PRId64",
          "493: #define INT64_X_FMT PRIx64",
          "494: #define __cdecl",
          "495: #define _FILE_OFFSET_BITS 32",
          "497: #define MG_LWIP 1",
          "499: #ifndef MG_NET_IF",
          "500: #define MG_NET_IF MG_NET_IF_SOCKET",
          "501: #endif",
          "503: #ifndef CS_ENABLE_STDIO",
          "504: #define CS_ENABLE_STDIO 1",
          "505: #endif",
          "509: #ifdef MG_MODULE_LINES",
          "510: #line 1 \"common/platforms/platform_esp8266.h\"",
          "511: #endif",
          "517: #ifndef CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_",
          "518: #define CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_",
          "519: #if CS_PLATFORM == CS_P_ESP8266",
          "521: #include <assert.h>",
          "522: #include <ctype.h>",
          "523: #include <fcntl.h>",
          "524: #include <inttypes.h>",
          "525: #include <machine/endian.h>",
          "526: #include <string.h>",
          "527: #include <sys/stat.h>",
          "528: #include <sys/time.h>",
          "530: #define SIZE_T_FMT \"u\"",
          "531: typedef struct stat cs_stat_t;",
          "532: #define DIRSEP '/'",
          "533: #define CS_DEFINE_DIRENT",
          "535: #define to64(x) strtoll(x, NULL, 10)",
          "536: #define INT64_FMT PRId64",
          "537: #define INT64_X_FMT PRIx64",
          "538: #define __cdecl",
          "539: #define _FILE_OFFSET_BITS 32",
          "541: #ifndef RTOS_SDK",
          "542: #define fileno(x) -1",
          "543: #endif",
          "545: #define MG_LWIP 1",
          "548: #define LWIP_TIMEVAL_PRIVATE 0",
          "550: #ifndef MG_NET_IF",
          "551: #include <lwip/opt.h>",
          "553: #define MG_NET_IF MG_NET_IF_SOCKET",
          "554: #else",
          "555: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "556: #endif",
          "557: #endif",
          "559: #ifndef CS_ENABLE_STDIO",
          "560: #define CS_ENABLE_STDIO 1",
          "561: #endif",
          "565: #ifdef MG_MODULE_LINES",
          "566: #line 1 \"common/platforms/platform_cc3100.h\"",
          "567: #endif",
          "573: #ifndef CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_",
          "574: #define CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_",
          "575: #if CS_PLATFORM == CS_P_CC3100",
          "577: #include <assert.h>",
          "578: #include <ctype.h>",
          "579: #include <errno.h>",
          "580: #include <inttypes.h>",
          "581: #include <stdint.h>",
          "582: #include <string.h>",
          "583: #include <time.h>",
          "585: #define MG_NET_IF MG_NET_IF_SIMPLELINK",
          "586: #define MG_SSL_IF MG_SSL_IF_SIMPLELINK",
          "594: #include <simplelink.h>",
          "595: #include <netapp.h>",
          "596: #undef timeval",
          "598: typedef int sock_t;",
          "599: #define INVALID_SOCKET (-1)",
          "601: #define to64(x) strtoll(x, NULL, 10)",
          "602: #define INT64_FMT PRId64",
          "603: #define INT64_X_FMT PRIx64",
          "604: #define SIZE_T_FMT \"u\"",
          "606: #define SOMAXCONN 8",
          "608: const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);",
          "609: char *inet_ntoa(struct in_addr in);",
          "610: int inet_pton(int af, const char *src, void *dst);",
          "614: #ifdef MG_MODULE_LINES",
          "615: #line 1 \"common/platforms/platform_cc3200.h\"",
          "616: #endif",
          "622: #ifndef CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_",
          "623: #define CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_",
          "624: #if CS_PLATFORM == CS_P_CC3200",
          "626: #include <assert.h>",
          "627: #include <ctype.h>",
          "628: #include <errno.h>",
          "629: #include <inttypes.h>",
          "630: #include <stdint.h>",
          "631: #include <string.h>",
          "632: #include <time.h>",
          "634: #ifndef __TI_COMPILER_VERSION__",
          "635: #include <fcntl.h>",
          "636: #include <sys/time.h>",
          "637: #endif",
          "639: #define MG_NET_IF MG_NET_IF_SIMPLELINK",
          "640: #define MG_SSL_IF MG_SSL_IF_SIMPLELINK",
          "643: #if defined(CC3200_FS_SPIFFS) && !defined(MG_ENABLE_DIRECTORY_LISTING)",
          "644: #define MG_ENABLE_DIRECTORY_LISTING 1",
          "645: #endif",
          "649: typedef int sock_t;",
          "650: #define INVALID_SOCKET (-1)",
          "651: #define SIZE_T_FMT \"u\"",
          "652: typedef struct stat cs_stat_t;",
          "653: #define DIRSEP '/'",
          "654: #define to64(x) strtoll(x, NULL, 10)",
          "655: #define INT64_FMT PRId64",
          "656: #define INT64_X_FMT PRIx64",
          "657: #define __cdecl",
          "659: #define fileno(x) -1",
          "663: #ifdef __cplusplus",
          "664: extern \"C\" {",
          "665: #endif",
          "667: #ifdef __TI_COMPILER_VERSION__",
          "668: struct SlTimeval_t;",
          "669: #define timeval SlTimeval_t",
          "670: int gettimeofday(struct timeval *t, void *tz);",
          "672: int asprintf(char **strp, const char *fmt, ...);",
          "674: #endif",
          "677: #ifdef __TI_COMPILER_VERSION__",
          "679: #include <file.h>",
          "681: typedef unsigned int mode_t;",
          "682: typedef size_t _off_t;",
          "683: typedef long ssize_t;",
          "685: struct stat {",
          "686:   int st_ino;",
          "687:   mode_t st_mode;",
          "688:   int st_nlink;",
          "689:   time_t st_mtime;",
          "690:   off_t st_size;",
          "691: };",
          "693: int _stat(const char *pathname, struct stat *st);",
          "694: #define stat(a, b) _stat(a, b)",
          "696: #define __S_IFMT 0170000",
          "698: #define __S_IFDIR 0040000",
          "699: #define __S_IFCHR 0020000",
          "700: #define __S_IFREG 0100000",
          "702: #define __S_ISTYPE(mode, mask) (((mode) &__S_IFMT) == (mask))",
          "704: #define S_IFDIR __S_IFDIR",
          "705: #define S_IFCHR __S_IFCHR",
          "706: #define S_IFREG __S_IFREG",
          "707: #define S_ISDIR(mode) __S_ISTYPE((mode), __S_IFDIR)",
          "708: #define S_ISREG(mode) __S_ISTYPE((mode), __S_IFREG)",
          "711: #define va_copy(apc, ap) ((apc) = (ap))",
          "715: #ifdef CC3200_FS_SLFS",
          "716: #define MG_FS_SLFS",
          "717: #endif",
          "719: #if (defined(CC3200_FS_SPIFFS) || defined(CC3200_FS_SLFS)) && \\",
          "720:     !defined(MG_ENABLE_FILESYSTEM)",
          "721: #define MG_ENABLE_FILESYSTEM 1",
          "722: #define CS_DEFINE_DIRENT",
          "723: #endif",
          "725: #ifndef CS_ENABLE_STDIO",
          "726: #define CS_ENABLE_STDIO 1",
          "727: #endif",
          "729: #ifdef __cplusplus",
          "730: }",
          "731: #endif",
          "735: #ifdef MG_MODULE_LINES",
          "736: #line 1 \"common/platforms/platform_msp432.h\"",
          "737: #endif",
          "743: #ifndef CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_",
          "744: #define CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_",
          "745: #if CS_PLATFORM == CS_P_MSP432",
          "747: #include <assert.h>",
          "748: #include <ctype.h>",
          "749: #include <errno.h>",
          "750: #include <inttypes.h>",
          "751: #include <stdint.h>",
          "752: #include <string.h>",
          "753: #include <time.h>",
          "755: #ifndef __TI_COMPILER_VERSION__",
          "756: #include <fcntl.h>",
          "757: #include <sys/time.h>",
          "758: #endif",
          "760: #define MG_NET_IF MG_NET_IF_SIMPLELINK",
          "761: #define MG_SSL_IF MG_SSL_IF_SIMPLELINK",
          "765: typedef int sock_t;",
          "766: #define INVALID_SOCKET (-1)",
          "767: #define SIZE_T_FMT \"u\"",
          "768: typedef struct stat cs_stat_t;",
          "769: #define DIRSEP '/'",
          "770: #define to64(x) strtoll(x, NULL, 10)",
          "771: #define INT64_FMT PRId64",
          "772: #define INT64_X_FMT PRIx64",
          "773: #define __cdecl",
          "775: #define fileno(x) -1",
          "779: #ifdef __cplusplus",
          "780: extern \"C\" {",
          "781: #endif",
          "783: #ifdef __TI_COMPILER_VERSION__",
          "784: struct SlTimeval_t;",
          "785: #define timeval SlTimeval_t",
          "786: int gettimeofday(struct timeval *t, void *tz);",
          "787: #endif",
          "790: #ifdef __TI_COMPILER_VERSION__",
          "792: #include <file.h>",
          "794: typedef unsigned int mode_t;",
          "795: typedef size_t _off_t;",
          "796: typedef long ssize_t;",
          "798: struct stat {",
          "799:   int st_ino;",
          "800:   mode_t st_mode;",
          "801:   int st_nlink;",
          "802:   time_t st_mtime;",
          "803:   off_t st_size;",
          "804: };",
          "806: int _stat(const char *pathname, struct stat *st);",
          "807: #define stat(a, b) _stat(a, b)",
          "809: #define __S_IFMT 0170000",
          "811: #define __S_IFDIR 0040000",
          "812: #define __S_IFCHR 0020000",
          "813: #define __S_IFREG 0100000",
          "815: #define __S_ISTYPE(mode, mask) (((mode) &__S_IFMT) == (mask))",
          "817: #define S_IFDIR __S_IFDIR",
          "818: #define S_IFCHR __S_IFCHR",
          "819: #define S_IFREG __S_IFREG",
          "820: #define S_ISDIR(mode) __S_ISTYPE((mode), __S_IFDIR)",
          "821: #define S_ISREG(mode) __S_ISTYPE((mode), __S_IFREG)",
          "824: #define va_copy(apc, ap) ((apc) = (ap))",
          "828: #ifndef CS_ENABLE_STDIO",
          "829: #define CS_ENABLE_STDIO 1",
          "830: #endif",
          "832: #if (defined(CC3200_FS_SPIFFS) || defined(CC3200_FS_SLFS)) && \\",
          "833:     !defined(MG_ENABLE_FILESYSTEM)",
          "834: #define MG_ENABLE_FILESYSTEM 1",
          "835: #endif",
          "837: #ifdef __cplusplus",
          "838: }",
          "839: #endif",
          "843: #ifdef MG_MODULE_LINES",
          "844: #line 1 \"common/platforms/platform_tm4c129.h\"",
          "845: #endif",
          "851: #ifndef CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_",
          "852: #define CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_",
          "853: #if CS_PLATFORM == CS_P_TM4C129",
          "855: #include <assert.h>",
          "856: #include <ctype.h>",
          "857: #include <errno.h>",
          "858: #include <inttypes.h>",
          "859: #include <stdint.h>",
          "860: #include <string.h>",
          "861: #include <time.h>",
          "863: #ifndef __TI_COMPILER_VERSION__",
          "864: #include <fcntl.h>",
          "865: #include <sys/time.h>",
          "866: #endif",
          "868: #define SIZE_T_FMT \"u\"",
          "869: typedef struct stat cs_stat_t;",
          "870: #define DIRSEP '/'",
          "871: #define to64(x) strtoll(x, NULL, 10)",
          "872: #define INT64_FMT PRId64",
          "873: #define INT64_X_FMT PRIx64",
          "874: #define __cdecl",
          "876: #ifndef MG_NET_IF",
          "877: #include <lwip/opt.h>",
          "878: #if LWIP_SOCKET",
          "879: #define MG_NET_IF MG_NET_IF_SOCKET",
          "880: #else",
          "881: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "882: #endif",
          "883: #define MG_LWIP 1",
          "884: #elif MG_NET_IF == MG_NET_IF_SIMPLELINK",
          "885: #include \"common/platforms/simplelink/cs_simplelink.h\"",
          "886: #endif",
          "888: #ifndef CS_ENABLE_STDIO",
          "889: #define CS_ENABLE_STDIO 1",
          "890: #endif",
          "892: #ifdef __TI_COMPILER_VERSION__",
          "894: #define va_copy(apc, ap) ((apc) = (ap))",
          "897: #ifdef __cplusplus",
          "898: }",
          "899: #endif",
          "903: #ifdef MG_MODULE_LINES",
          "904: #line 1 \"common/platforms/platform_mbed.h\"",
          "905: #endif",
          "911: #ifndef CS_COMMON_PLATFORMS_PLATFORM_MBED_H_",
          "912: #define CS_COMMON_PLATFORMS_PLATFORM_MBED_H_",
          "913: #if CS_PLATFORM == CS_P_MBED",
          "919: #ifdef __cplusplus",
          "923: #include <assert.h>",
          "924: #include <ctype.h>",
          "925: #include <errno.h>",
          "926: #include <inttypes.h>",
          "927: #include <stdint.h>",
          "928: #include <string.h>",
          "929: #include <time.h>",
          "930: #include <sys/stat.h>",
          "931: #include <sys/types.h>",
          "932: #include <fcntl.h>",
          "933: #include <stdio.h>",
          "935: typedef struct stat cs_stat_t;",
          "936: #define DIRSEP '/'",
          "938: #ifndef CS_ENABLE_STDIO",
          "939: #define CS_ENABLE_STDIO 1",
          "940: #endif",
          "948: #if defined(__ARMCC_VERSION) || defined(__ICCARM__)",
          "949: #define _TIMEVAL_DEFINED",
          "950: #define gettimeofday _gettimeofday",
          "954: struct timeval {",
          "957: };",
          "959: #endif",
          "961: #if MG_NET_IF == MG_NET_IF_SIMPLELINK",
          "963: #define MG_SIMPLELINK_NO_OSI 1",
          "965: #include <simplelink.h>",
          "967: typedef int sock_t;",
          "968: #define INVALID_SOCKET (-1)",
          "970: #define to64(x) strtoll(x, NULL, 10)",
          "971: #define INT64_FMT PRId64",
          "972: #define INT64_X_FMT PRIx64",
          "973: #define SIZE_T_FMT \"u\"",
          "975: #define SOMAXCONN 8",
          "977: const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);",
          "978: char *inet_ntoa(struct in_addr in);",
          "979: int inet_pton(int af, const char *src, void *dst);",
          "980: int inet_aton(const char *cp, struct in_addr *inp);",
          "981: in_addr_t inet_addr(const char *cp);",
          "987: #ifdef MG_MODULE_LINES",
          "988: #line 1 \"common/platforms/platform_nrf51.h\"",
          "989: #endif",
          "994: #ifndef CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_",
          "995: #define CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_",
          "996: #if CS_PLATFORM == CS_P_NRF51",
          "998: #include <assert.h>",
          "999: #include <ctype.h>",
          "1000: #include <inttypes.h>",
          "1001: #include <stdint.h>",
          "1002: #include <string.h>",
          "1003: #include <time.h>",
          "1005: #define to64(x) strtoll(x, NULL, 10)",
          "1007: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "1008: #define MG_LWIP 1",
          "1009: #define MG_ENABLE_IPV6 1",
          "1015: #if !defined(__ARMCC_VERSION)",
          "1016: #define LWIP_TIMEVAL_PRIVATE 0",
          "1017: #else",
          "1018: struct timeval;",
          "1019: int gettimeofday(struct timeval *tp, void *tzp);",
          "1020: #endif",
          "1022: #define INT64_FMT PRId64",
          "1023: #define SIZE_T_FMT \"u\"",
          "1028: #define CS_ENABLE_STRDUP defined(__ARMCC_VERSION)",
          "1032: #ifdef MG_MODULE_LINES",
          "1033: #line 1 \"common/platforms/platform_nrf52.h\"",
          "1034: #endif",
          "1039: #ifndef CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_",
          "1040: #define CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_",
          "1041: #if CS_PLATFORM == CS_P_NRF52",
          "1043: #include <assert.h>",
          "1044: #include <ctype.h>",
          "1045: #include <errno.h>",
          "1046: #include <inttypes.h>",
          "1047: #include <stdint.h>",
          "1048: #include <string.h>",
          "1049: #include <time.h>",
          "1051: #define to64(x) strtoll(x, NULL, 10)",
          "1053: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "1054: #define MG_LWIP 1",
          "1055: #define MG_ENABLE_IPV6 1",
          "1057: #if !defined(ENOSPC)",
          "1059: #endif",
          "1065: #if !defined(__ARMCC_VERSION)",
          "1066: #define LWIP_TIMEVAL_PRIVATE 0",
          "1067: #endif",
          "1069: #define INT64_FMT PRId64",
          "1070: #define SIZE_T_FMT \"u\"",
          "1075: #define CS_ENABLE_STRDUP defined(__ARMCC_VERSION)",
          "1079: #ifdef MG_MODULE_LINES",
          "1080: #line 1 \"common/platforms/simplelink/cs_simplelink.h\"",
          "1081: #endif",
          "1087: #ifndef CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_",
          "1088: #define CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_",
          "1091: #if defined(MG_NET_IF) && MG_NET_IF == MG_NET_IF_SIMPLELINK && \\",
          "1092:     !defined(__SIMPLELINK_H__)",
          "1094: #include <stdbool.h>",
          "1096: #ifndef __TI_COMPILER_VERSION__",
          "1097: #undef __CONCAT",
          "1098: #undef FD_CLR",
          "1099: #undef FD_ISSET",
          "1100: #undef FD_SET",
          "1101: #undef FD_SETSIZE",
          "1102: #undef FD_ZERO",
          "1103: #undef fd_set",
          "1104: #endif",
          "1108: #define PROVISIONING_API_H_",
          "1109: #include <simplelink/user.h>",
          "1110: #undef PROVISIONING_API_H_",
          "1111: #undef SL_INC_STD_BSD_API_NAMING",
          "1113: #include <simplelink/include/simplelink.h>",
          "1114: #include <simplelink/include/netapp.h>",
          "1118: #define AF_INET SL_AF_INET",
          "1120: #define socklen_t SlSocklen_t",
          "1121: #define sockaddr SlSockAddr_t",
          "1122: #define sockaddr_in SlSockAddrIn_t",
          "1123: #define in_addr SlInAddr_t",
          "1125: #define SOCK_STREAM SL_SOCK_STREAM",
          "1126: #define SOCK_DGRAM SL_SOCK_DGRAM",
          "1128: #define htonl sl_Htonl",
          "1129: #define ntohl sl_Ntohl",
          "1130: #define htons sl_Htons",
          "1131: #define ntohs sl_Ntohs",
          "1133: #ifndef EACCES",
          "1134: #define EACCES SL_EACCES",
          "1135: #endif",
          "1136: #ifndef EAFNOSUPPORT",
          "1137: #define EAFNOSUPPORT SL_EAFNOSUPPORT",
          "1138: #endif",
          "1139: #ifndef EAGAIN",
          "1140: #define EAGAIN SL_EAGAIN",
          "1141: #endif",
          "1142: #ifndef EBADF",
          "1143: #define EBADF SL_EBADF",
          "1144: #endif",
          "1145: #ifndef EINVAL",
          "1146: #define EINVAL SL_EINVAL",
          "1147: #endif",
          "1148: #ifndef ENOMEM",
          "1149: #define ENOMEM SL_ENOMEM",
          "1150: #endif",
          "1151: #ifndef EWOULDBLOCK",
          "1152: #define EWOULDBLOCK SL_EWOULDBLOCK",
          "1153: #endif",
          "1155: #define SOMAXCONN 8",
          "1157: #ifdef __cplusplus",
          "1158: extern \"C\" {",
          "1159: #endif",
          "1161: const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);",
          "1162: char *inet_ntoa(struct in_addr in);",
          "1163: int inet_pton(int af, const char *src, void *dst);",
          "1165: struct mg_mgr;",
          "1166: struct mg_connection;",
          "1168: typedef void (*mg_init_cb)(struct mg_mgr *mgr);",
          "1169: bool mg_start_task(int priority, int stack_size, mg_init_cb mg_init);",
          "1171: void mg_run_in_task(void (*cb)(struct mg_mgr *mgr, void *arg), void *cb_arg);",
          "1173: int sl_fs_init(void);",
          "1175: void sl_restart_cb(struct mg_mgr *mgr);",
          "1177: int sl_set_ssl_opts(struct mg_connection *nc);",
          "1179: #ifdef __cplusplus",
          "1180: }",
          "1181: #endif",
          "1186: #ifdef MG_MODULE_LINES",
          "1187: #line 1 \"common/platforms/platform_wince.h\"",
          "1188: #endif",
          "1189: #ifndef CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_",
          "1190: #define CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_",
          "1192: #if CS_PLATFORM == CS_P_WINCE",
          "1209: #ifndef _WINSOCK_DEPRECATED_NO_WARNINGS",
          "1210: #define _WINSOCK_DEPRECATED_NO_WARNINGS 1",
          "1211: #endif",
          "1213: #ifndef _CRT_SECURE_NO_WARNINGS",
          "1214: #define _CRT_SECURE_NO_WARNINGS",
          "1215: #endif",
          "1217: #include <assert.h>",
          "1218: #include <limits.h>",
          "1219: #include <stddef.h>",
          "1220: #include <stdio.h>",
          "1221: #include <stdlib.h>",
          "1222: #include <time.h>",
          "1226: #include <winsock2.h>",
          "1227: #include <ws2tcpip.h>",
          "1228: #include <windows.h>",
          "1230: #define strdup _strdup",
          "1232: #ifndef EINPROGRESS",
          "1233: #define EINPROGRESS WSAEINPROGRESS",
          "1234: #endif",
          "1236: #ifndef EWOULDBLOCK",
          "1237: #define EWOULDBLOCK WSAEWOULDBLOCK",
          "1238: #endif",
          "1240: #ifndef EAGAIN",
          "1241: #define EAGAIN EWOULDBLOCK",
          "1242: #endif",
          "1244: #ifndef __func__",
          "1245: #define STRX(x) #x",
          "1246: #define STR(x) STRX(x)",
          "1247: #define __func__ __FILE__ \":\" STR(__LINE__)",
          "1248: #endif",
          "1250: #define snprintf _snprintf",
          "1251: #define fileno _fileno",
          "1252: #define vsnprintf _vsnprintf",
          "1253: #define sleep(x) Sleep((x) *1000)",
          "1254: #define to64(x) _atoi64(x)",
          "1255: #define rmdir _rmdir",
          "1257: #if defined(_MSC_VER) && _MSC_VER >= 1400",
          "1258: #define fseeko(x, y, z) _fseeki64((x), (y), (z))",
          "1259: #else",
          "1260: #define fseeko(x, y, z) fseek((x), (y), (z))",
          "1261: #endif",
          "1263: typedef int socklen_t;",
          "1265: #if _MSC_VER >= 1700",
          "1266: #include <stdint.h>",
          "1267: #else",
          "1268: typedef signed char int8_t;",
          "1269: typedef unsigned char uint8_t;",
          "1270: typedef int int32_t;",
          "1271: typedef unsigned int uint32_t;",
          "1272: typedef short int16_t;",
          "1273: typedef unsigned short uint16_t;",
          "1274: typedef __int64 int64_t;",
          "1275: typedef unsigned __int64 uint64_t;",
          "1276: #endif",
          "1278: typedef SOCKET sock_t;",
          "1279: typedef uint32_t in_addr_t;",
          "1281: #ifndef UINT16_MAX",
          "1282: #define UINT16_MAX 65535",
          "1283: #endif",
          "1285: #ifndef UINT32_MAX",
          "1286: #define UINT32_MAX 4294967295",
          "1287: #endif",
          "1289: #ifndef pid_t",
          "1290: #define pid_t HANDLE",
          "1291: #endif",
          "1293: #define INT64_FMT \"I64d\"",
          "1294: #define INT64_X_FMT \"I64x\"",
          "1296: #define SIZE_T_FMT \"u\"",
          "1298: #define DIRSEP '\\\\'",
          "1299: #define CS_DEFINE_DIRENT",
          "1301: #ifndef va_copy",
          "1302: #ifdef __va_copy",
          "1303: #define va_copy __va_copy",
          "1304: #else",
          "1305: #define va_copy(x, y) (x) = (y)",
          "1306: #endif",
          "1307: #endif",
          "1309: #ifndef MG_MAX_HTTP_REQUEST_SIZE",
          "1310: #define MG_MAX_HTTP_REQUEST_SIZE 8192",
          "1311: #endif",
          "1313: #ifndef MG_MAX_HTTP_SEND_MBUF",
          "1314: #define MG_MAX_HTTP_SEND_MBUF 4096",
          "1315: #endif",
          "1317: #ifndef MG_MAX_HTTP_HEADERS",
          "1318: #define MG_MAX_HTTP_HEADERS 40",
          "1319: #endif",
          "1321: #ifndef CS_ENABLE_STDIO",
          "1322: #define CS_ENABLE_STDIO 1",
          "1323: #endif",
          "1325: #define abort() DebugBreak();",
          "1327: #ifndef BUFSIZ",
          "1328: #define BUFSIZ 4096",
          "1329: #endif",
          "1334: #ifndef MG_ENABLE_THREADS",
          "1335: #define MG_ENABLE_THREADS 0",
          "1336: #endif",
          "1338: #ifndef MG_ENABLE_FILESYSTEM",
          "1339: #define MG_ENABLE_FILESYSTEM 1",
          "1340: #endif",
          "1342: #ifndef MG_NET_IF",
          "1343: #define MG_NET_IF MG_NET_IF_SOCKET",
          "1344: #endif",
          "1346: typedef struct _stati64 {",
          "1347:   uint32_t st_mtime;",
          "1348:   uint32_t st_size;",
          "1349:   uint32_t st_mode;",
          "1350: } cs_stat_t;",
          "1357: #ifndef ENOENT",
          "1358: #define ENOENT ERROR_PATH_NOT_FOUND",
          "1359: #endif",
          "1361: #ifndef EACCES",
          "1362: #define EACCES ERROR_ACCESS_DENIED",
          "1363: #endif",
          "1365: #ifndef ENOMEM",
          "1366: #define ENOMEM ERROR_NOT_ENOUGH_MEMORY",
          "1367: #endif",
          "1369: #ifndef _UINTPTR_T_DEFINED",
          "1370: typedef unsigned int *uintptr_t;",
          "1371: #endif",
          "1373: #define _S_IFREG 2",
          "1374: #define _S_IFDIR 4",
          "1376: #ifndef S_ISDIR",
          "1377: #define S_ISDIR(x) (((x) &_S_IFDIR) != 0)",
          "1378: #endif",
          "1380: #ifndef S_ISREG",
          "1381: #define S_ISREG(x) (((x) &_S_IFREG) != 0)",
          "1382: #endif",
          "1384: int open(const char *filename, int oflag, int pmode);",
          "1385: int _wstati64(const wchar_t *path, cs_stat_t *st);",
          "1386: const char *strerror();",
          "1390: #ifdef MG_MODULE_LINES",
          "1391: #line 1 \"common/platforms/platform_nxp_lpc.h\"",
          "1392: #endif",
          "1398: #ifndef CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_",
          "1399: #define CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_",
          "1401: #if CS_PLATFORM == CS_P_NXP_LPC",
          "1403: #include <ctype.h>",
          "1404: #include <stdint.h>",
          "1405: #include <string.h>",
          "1407: #define SIZE_T_FMT \"u\"",
          "1408: typedef struct stat cs_stat_t;",
          "1409: #define INT64_FMT \"lld\"",
          "1410: #define INT64_X_FMT \"llx\"",
          "1411: #define __cdecl",
          "1413: #define MG_LWIP 1",
          "1415: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "1424: #ifdef __REDLIB_INTERFACE_VERSION__",
          "1427: #define LWIP_TIMEVAL_PRIVATE 1",
          "1429: #define va_copy(d, s) __builtin_va_copy(d, s)",
          "1431: #define CS_ENABLE_TO64 1",
          "1432: #define to64(x) cs_to64(x)",
          "1434: #define CS_ENABLE_STRDUP 1",
          "1436: #else",
          "1438: #include <sys/time.h>",
          "1439: #define LWIP_TIMEVAL_PRIVATE 0",
          "1440: #define to64(x) strtoll(x, NULL, 10)",
          "1442: #endif",
          "1446: #ifdef MG_MODULE_LINES",
          "1447: #line 1 \"common/platforms/platform_nxp_kinetis.h\"",
          "1448: #endif",
          "1454: #ifndef CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_",
          "1455: #define CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_",
          "1457: #if CS_PLATFORM == CS_P_NXP_KINETIS",
          "1459: #include <ctype.h>",
          "1460: #include <inttypes.h>",
          "1461: #include <string.h>",
          "1462: #include <sys/time.h>",
          "1464: #define SIZE_T_FMT \"u\"",
          "1465: typedef struct stat cs_stat_t;",
          "1466: #define to64(x) strtoll(x, NULL, 10)",
          "1467: #define INT64_FMT \"lld\"",
          "1468: #define INT64_X_FMT \"llx\"",
          "1469: #define __cdecl",
          "1471: #define MG_LWIP 1",
          "1473: #define MG_NET_IF MG_NET_IF_LWIP_LOW_LEVEL",
          "1476: #define LWIP_TIMEVAL_PRIVATE 0",
          "1480: #ifdef MG_MODULE_LINES",
          "1481: #line 1 \"common/platforms/platform_pic32.h\"",
          "1482: #endif",
          "1488: #ifndef CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_",
          "1489: #define CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_",
          "1491: #if CS_PLATFORM == CS_P_PIC32",
          "1493: #define MG_NET_IF MG_NET_IF_PIC32",
          "1495: #include <stdint.h>",
          "1496: #include <time.h>",
          "1497: #include <ctype.h>",
          "1498: #include <stdlib.h>",
          "1500: #include <system_config.h>",
          "1501: #include <system_definitions.h>",
          "1503: #include <sys/types.h>",
          "1505: typedef TCP_SOCKET sock_t;",
          "1506: #define to64(x) strtoll(x, NULL, 10)",
          "1508: #define SIZE_T_FMT \"lu\"",
          "1509: #define INT64_FMT \"lld\"",
          "1511: #ifndef CS_ENABLE_STDIO",
          "1512: #define CS_ENABLE_STDIO 1",
          "1513: #endif",
          "1515: char *inet_ntoa(struct in_addr in);",
          "1520: #ifdef MG_MODULE_LINES",
          "1521: #line 1 \"common/platforms/platform_stm32.h\"",
          "1522: #endif",
          "1528: #ifndef CS_COMMON_PLATFORMS_PLATFORM_STM32_H_",
          "1529: #define CS_COMMON_PLATFORMS_PLATFORM_STM32_H_",
          "1530: #if CS_PLATFORM == CS_P_STM32",
          "1532: #include <sys/types.h>",
          "1533: #include <sys/stat.h>",
          "1534: #include <stdint.h>",
          "1535: #include <inttypes.h>",
          "1536: #include <stdio.h>",
          "1537: #include <ctype.h>",
          "1538: #include <errno.h>",
          "1539: #include <memory.h>",
          "1540: #include <fcntl.h>",
          "1541: #include <stm32_sdk_hal.h>",
          "1543: #define to64(x) strtoll(x, NULL, 10)",
          "1544: #define INT64_FMT PRId64",
          "1545: #define SIZE_T_FMT \"u\"",
          "1546: typedef struct stat cs_stat_t;",
          "1547: #define DIRSEP '/'",
          "1549: #ifndef CS_ENABLE_STDIO",
          "1550: #define CS_ENABLE_STDIO 1",
          "1551: #endif",
          "1553: #ifndef MG_ENABLE_FILESYSTEM",
          "1554: #define MG_ENABLE_FILESYSTEM 1",
          "1555: #endif",
          "1557: #define CS_DEFINE_DIRENT",
          "1561: #ifdef MG_MODULE_LINES",
          "1562: #line 1 \"common/platforms/lwip/mg_lwip.h\"",
          "1563: #endif",
          "1569: #ifndef CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_",
          "1570: #define CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_",
          "1572: #ifndef MG_LWIP",
          "1573: #define MG_LWIP 0",
          "1574: #endif",
          "1576: #if MG_LWIP",
          "1587: #if CS_PLATFORM == CS_P_NRF51 || CS_PLATFORM == CS_P_NRF52",
          "1588: #undef BYTE_ORDER",
          "1589: #endif",
          "1591: #include <lwip/opt.h>",
          "1592: #include <lwip/err.h>",
          "1593: #include <lwip/ip_addr.h>",
          "1594: #include <lwip/inet.h>",
          "1595: #include <lwip/netdb.h>",
          "1596: #include <lwip/dns.h>",
          "1598: #ifndef LWIP_PROVIDE_ERRNO",
          "1599: #include <errno.h>",
          "1600: #endif",
          "1602: #if LWIP_SOCKET",
          "1603: #include <lwip/sockets.h>",
          "1604: #else",
          "1606: #undef LWIP_SOCKET",
          "1607: #define LWIP_SOCKET 1",
          "1608: #include <lwip/sockets.h>",
          "1609: #undef LWIP_SOCKET",
          "1610: #define LWIP_SOCKET 0",
          "1611: #endif",
          "1613: #define INVALID_SOCKET (-1)",
          "1614: #define SOMAXCONN 10",
          "1615: typedef int sock_t;",
          "1617: #if MG_NET_IF == MG_NET_IF_LWIP_LOW_LEVEL",
          "1618: struct mg_mgr;",
          "1619: struct mg_connection;",
          "1620: uint32_t mg_lwip_get_poll_delay_ms(struct mg_mgr *mgr);",
          "1621: void mg_lwip_set_keepalive_params(struct mg_connection *nc, int idle,",
          "1622:                                   int interval, int count);",
          "1623: #endif",
          "1626: #ifndef ipX_2_ip",
          "1627: #define ipX_2_ip(x) (x)",
          "1628: #endif",
          "1633: #ifdef MG_MODULE_LINES",
          "1634: #line 1 \"common/cs_time.h\"",
          "1635: #endif",
          "1641: #ifndef CS_COMMON_CS_TIME_H_",
          "1642: #define CS_COMMON_CS_TIME_H_",
          "1646: #ifdef __cplusplus",
          "1647: extern \"C\" {",
          "1651: double cs_time(void);",
          "1653: #ifdef __cplusplus",
          "1654: }",
          "1658: #ifdef MG_MODULE_LINES",
          "1659: #line 1 \"common/mg_str.h\"",
          "1660: #endif",
          "1666: #ifndef CS_COMMON_MG_STR_H_",
          "1667: #define CS_COMMON_MG_STR_H_",
          "1669: #include <stddef.h>",
          "1673: #ifdef __cplusplus",
          "1674: extern \"C\" {",
          "1678: struct mg_str {",
          "1681: };",
          "1687: struct mg_str mg_mk_str(const char *s);",
          "1688: struct mg_str mg_mk_str_n(const char *s, size_t len);",
          "1691: #define MG_MK_STR(str_literal) \\",
          "1692:   { str_literal, sizeof(str_literal) - 1 }",
          "1698: int mg_vcmp(const struct mg_str *str2, const char *str1);",
          "1704: int mg_vcasecmp(const struct mg_str *str2, const char *str1);",
          "1706: struct mg_str mg_strdup(const struct mg_str s);",
          "1707: int mg_strcmp(const struct mg_str str1, const struct mg_str str2);",
          "1708: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n);",
          "1710: #ifdef __cplusplus",
          "1711: }",
          "1715: #ifdef MG_MODULE_LINES",
          "1716: #line 1 \"common/mbuf.h\"",
          "1717: #endif",
          "1732: #ifndef CS_COMMON_MBUF_H_",
          "1733: #define CS_COMMON_MBUF_H_",
          "1735: #include <stdlib.h>",
          "1738: #if defined(__cplusplus)",
          "1739: extern \"C\" {",
          "1740: #endif",
          "1742: #ifndef MBUF_SIZE_MULTIPLIER",
          "1743: #define MBUF_SIZE_MULTIPLIER 1.5",
          "1744: #endif",
          "1747: struct mbuf {",
          "1751: };",
          "1757: void mbuf_init(struct mbuf *, size_t initial_capacity);",
          "1760: void mbuf_free(struct mbuf *);",
          "1767: size_t mbuf_append(struct mbuf *, const void *data, size_t data_size);",
          "1776: size_t mbuf_insert(struct mbuf *, size_t, const void *, size_t);",
          "1779: void mbuf_remove(struct mbuf *, size_t data_size);",
          "1787: void mbuf_resize(struct mbuf *, size_t new_size);",
          "1790: void mbuf_trim(struct mbuf *);",
          "1792: #if defined(__cplusplus)",
          "1793: }",
          "1797: #ifdef MG_MODULE_LINES",
          "1798: #line 1 \"common/sha1.h\"",
          "1799: #endif",
          "1805: #ifndef CS_COMMON_SHA1_H_",
          "1806: #define CS_COMMON_SHA1_H_",
          "1808: #ifndef CS_DISABLE_SHA1",
          "1809: #define CS_DISABLE_SHA1 0",
          "1810: #endif",
          "1812: #if !CS_DISABLE_SHA1",
          "1816: #ifdef __cplusplus",
          "1817: extern \"C\" {",
          "1820: typedef struct {",
          "1821:   uint32_t state[5];",
          "1822:   uint32_t count[2];",
          "1823:   unsigned char buffer[64];",
          "1824: } cs_sha1_ctx;",
          "1826: void cs_sha1_init(cs_sha1_ctx *);",
          "1827: void cs_sha1_update(cs_sha1_ctx *, const unsigned char *data, uint32_t len);",
          "1828: void cs_sha1_final(unsigned char digest[20], cs_sha1_ctx *);",
          "1829: void cs_hmac_sha1(const unsigned char *key, size_t key_len,",
          "1830:                   const unsigned char *text, size_t text_len,",
          "1831:                   unsigned char out[20]);",
          "1832: #ifdef __cplusplus",
          "1833: }",
          "1839: #ifdef MG_MODULE_LINES",
          "1840: #line 1 \"common/md5.h\"",
          "1841: #endif",
          "1847: #ifndef CS_COMMON_MD5_H_",
          "1848: #define CS_COMMON_MD5_H_",
          "1852: #ifndef CS_DISABLE_MD5",
          "1853: #define CS_DISABLE_MD5 0",
          "1854: #endif",
          "1856: #ifdef __cplusplus",
          "1857: extern \"C\" {",
          "1860: typedef struct MD5Context {",
          "1861:   uint32_t buf[4];",
          "1862:   uint32_t bits[2];",
          "1863:   unsigned char in[64];",
          "1864: } MD5_CTX;",
          "1866: void MD5_Init(MD5_CTX *c);",
          "1867: void MD5_Update(MD5_CTX *c, const unsigned char *data, size_t len);",
          "1868: void MD5_Final(unsigned char *md, MD5_CTX *c);",
          "1878: char *cs_md5(char buf[33], ...);",
          "1880: #ifdef __cplusplus",
          "1881: }",
          "1885: #ifdef MG_MODULE_LINES",
          "1886: #line 1 \"common/base64.h\"",
          "1887: #endif",
          "1893: #ifndef CS_COMMON_BASE64_H_",
          "1894: #define CS_COMMON_BASE64_H_",
          "1896: #ifndef DISABLE_BASE64",
          "1897: #define DISABLE_BASE64 0",
          "1898: #endif",
          "1900: #if !DISABLE_BASE64",
          "1902: #include <stdio.h>",
          "1904: #ifdef __cplusplus",
          "1905: extern \"C\" {",
          "1906: #endif",
          "1908: typedef void (*cs_base64_putc_t)(char, void *);",
          "1910: struct cs_base64_ctx {",
          "1912:   cs_base64_putc_t b64_putc;",
          "1913:   unsigned char chunk[3];",
          "1914:   int chunk_size;",
          "1915:   void *user_data;",
          "1916: };",
          "1918: void cs_base64_init(struct cs_base64_ctx *ctx, cs_base64_putc_t putc,",
          "1919:                     void *user_data);",
          "1920: void cs_base64_update(struct cs_base64_ctx *ctx, const char *str, size_t len);",
          "1921: void cs_base64_finish(struct cs_base64_ctx *ctx);",
          "1923: void cs_base64_encode(const unsigned char *src, int src_len, char *dst);",
          "1924: void cs_fprint_base64(FILE *f, const unsigned char *src, int src_len);",
          "1925: int cs_base64_decode(const unsigned char *s, int len, char *dst, int *dec_len);",
          "1927: #ifdef __cplusplus",
          "1928: }",
          "1929: #endif",
          "1934: #ifdef MG_MODULE_LINES",
          "1935: #line 1 \"common/str_util.h\"",
          "1936: #endif",
          "1942: #ifndef CS_COMMON_STR_UTIL_H_",
          "1943: #define CS_COMMON_STR_UTIL_H_",
          "1945: #include <stdarg.h>",
          "1946: #include <stdlib.h>",
          "1950: #ifndef CS_ENABLE_STRDUP",
          "1951: #define CS_ENABLE_STRDUP 0",
          "1952: #endif",
          "1954: #ifndef CS_ENABLE_TO64",
          "1955: #define CS_ENABLE_TO64 0",
          "1956: #endif",
          "1962: #define CS_STRINGIFY_LIT(x) #x",
          "1973: #define CS_STRINGIFY_MACRO(x) CS_STRINGIFY_LIT(x)",
          "1975: #ifdef __cplusplus",
          "1976: extern \"C\" {",
          "1977: #endif",
          "1979: size_t c_strnlen(const char *s, size_t maxlen);",
          "1980: int c_snprintf(char *buf, size_t buf_size, const char *format, ...);",
          "1981: int c_vsnprintf(char *buf, size_t buf_size, const char *format, va_list ap);",
          "1986: const char *c_strnstr(const char *s, const char *find, size_t slen);",
          "1993: void cs_to_hex(char *to, const unsigned char *p, size_t len);",
          "1999: void cs_from_hex(char *to, const char *p, size_t len);",
          "2001: #if CS_ENABLE_STRDUP",
          "2002: char *strdup(const char *src);",
          "2003: #endif",
          "2005: #if CS_ENABLE_TO64",
          "2006: #include <stdint.h>",
          "2010: int64_t cs_to64(const char *s);",
          "2011: #endif",
          "2016: int mg_ncasecmp(const char *s1, const char *s2, size_t len);",
          "2021: int mg_casecmp(const char *s1, const char *s2);",
          "2038: int mg_asprintf(char **buf, size_t size, const char *fmt, ...);",
          "2041: int mg_avprintf(char **buf, size_t size, const char *fmt, va_list ap);",
          "2043: #ifdef __cplusplus",
          "2044: }",
          "2045: #endif",
          "2048: #ifdef MG_MODULE_LINES",
          "2049: #line 1 \"common/queue.h\"",
          "2050: #endif",
          "2084: #ifndef _SYS_QUEUE_H_",
          "2085: #define _SYS_QUEUE_H_",
          "2160: #ifdef QUEUE_MACRO_DEBUG",
          "2162: struct qm_trace {",
          "2163:  unsigned long  lastline;",
          "2164:  unsigned long  prevline;",
          "2165:  const char *lastfile;",
          "2166:  const char *prevfile;",
          "2167: };",
          "2169: #define TRACEBUF struct qm_trace trace;",
          "2170: #define TRACEBUF_INITIALIZER { __LINE__, 0, __FILE__, NULL } ,",
          "2171: #define TRASHIT(x) do {(x) = (void *)-1;} while (0)",
          "2172: #define QMD_SAVELINK(name, link) void **name = (void *)&(link)",
          "2174: #define QMD_TRACE_HEAD(head) do {     \\",
          "2175:  (head)->trace.prevline = (head)->trace.lastline;  \\",
          "2176:  (head)->trace.prevfile = (head)->trace.lastfile;  \\",
          "2177:  (head)->trace.lastline = __LINE__;    \\",
          "2178:  (head)->trace.lastfile = __FILE__;    \\",
          "2179: } while (0)",
          "2181: #define QMD_TRACE_ELEM(elem) do {     \\",
          "2182:  (elem)->trace.prevline = (elem)->trace.lastline;  \\",
          "2183:  (elem)->trace.prevfile = (elem)->trace.lastfile;  \\",
          "2184:  (elem)->trace.lastline = __LINE__;    \\",
          "2185:  (elem)->trace.lastfile = __FILE__;    \\",
          "2186: } while (0)",
          "2188: #else",
          "2189: #define QMD_TRACE_ELEM(elem)",
          "2190: #define QMD_TRACE_HEAD(head)",
          "2191: #define QMD_SAVELINK(name, link)",
          "2192: #define TRACEBUF",
          "2193: #define TRACEBUF_INITIALIZER",
          "2194: #define TRASHIT(x)",
          "2197: #ifdef __cplusplus",
          "2201: #define QUEUE_TYPEOF(type) type",
          "2202: #else",
          "2203: #define QUEUE_TYPEOF(type) struct type",
          "2204: #endif",
          "2209: #define SLIST_HEAD(name, type)      \\",
          "2210: struct name {        \\",
          "2211:  struct type *slh_first; /* first element */   \\",
          "2212: }",
          "2214: #define SLIST_CLASS_HEAD(name, type)     \\",
          "2215: struct name {        \\",
          "2216:  class type *slh_first; /* first element */   \\",
          "2217: }",
          "2219: #define SLIST_HEAD_INITIALIZER(head)     \\",
          "2220:  { NULL }",
          "2222: #define SLIST_ENTRY(type)      \\",
          "2223: struct {        \\",
          "2224:  struct type *sle_next; /* next element */   \\",
          "2225: }",
          "2227: #define SLIST_CLASS_ENTRY(type)      \\",
          "2228: struct {        \\",
          "2229:  class type *sle_next;  /* next element */  \\",
          "2230: }",
          "2235: #define SLIST_EMPTY(head) ((head)->slh_first == NULL)",
          "2237: #define SLIST_FIRST(head) ((head)->slh_first)",
          "2239: #define SLIST_FOREACH(var, head, field)     \\",
          "2240:  for ((var) = SLIST_FIRST((head));    \\",
          "2241:      (var);       \\",
          "2242:      (var) = SLIST_NEXT((var), field))",
          "2244: #define SLIST_FOREACH_FROM(var, head, field)    \\",
          "2245:  for ((var) = ((var) ? (var) : SLIST_FIRST((head)));  \\",
          "2246:      (var);       \\",
          "2247:      (var) = SLIST_NEXT((var), field))",
          "2249: #define SLIST_FOREACH_SAFE(var, head, field, tvar)   \\",
          "2250:  for ((var) = SLIST_FIRST((head));    \\",
          "2251:      (var) && ((tvar) = SLIST_NEXT((var), field), 1);  \\",
          "2252:      (var) = (tvar))",
          "2254: #define SLIST_FOREACH_FROM_SAFE(var, head, field, tvar)   \\",
          "2255:  for ((var) = ((var) ? (var) : SLIST_FIRST((head)));  \\",
          "2256:      (var) && ((tvar) = SLIST_NEXT((var), field), 1);  \\",
          "2257:      (var) = (tvar))",
          "2259: #define SLIST_FOREACH_PREVPTR(var, varp, head, field)   \\",
          "2260:  for ((varp) = &SLIST_FIRST((head));    \\",
          "2261:      ((var) = *(varp)) != NULL;     \\",
          "2262:      (varp) = &SLIST_NEXT((var), field))",
          "2264: #define SLIST_INIT(head) do {      \\",
          "2265:  SLIST_FIRST((head)) = NULL;     \\",
          "2266: } while (0)",
          "2268: #define SLIST_INSERT_AFTER(slistelm, elm, field) do {   \\",
          "2269:  SLIST_NEXT((elm), field) = SLIST_NEXT((slistelm), field); \\",
          "2270:  SLIST_NEXT((slistelm), field) = (elm);    \\",
          "2271: } while (0)",
          "2273: #define SLIST_INSERT_HEAD(head, elm, field) do {   \\",
          "2274:  SLIST_NEXT((elm), field) = SLIST_FIRST((head));   \\",
          "2275:  SLIST_FIRST((head)) = (elm);     \\",
          "2276: } while (0)",
          "2278: #define SLIST_NEXT(elm, field) ((elm)->field.sle_next)",
          "2280: #define SLIST_REMOVE(head, elm, type, field) do {   \\",
          "2281:  QMD_SAVELINK(oldnext, (elm)->field.sle_next);   \\",
          "2282:  if (SLIST_FIRST((head)) == (elm)) {    \\",
          "2283:   SLIST_REMOVE_HEAD((head), field);   \\",
          "2284:  }        \\",
          "2285:  else {        \\",
          "2286:   QUEUE_TYPEOF(type) *curelm = SLIST_FIRST(head);  \\",
          "2287:   while (SLIST_NEXT(curelm, field) != (elm))  \\",
          "2288:    curelm = SLIST_NEXT(curelm, field);  \\",
          "2289:   SLIST_REMOVE_AFTER(curelm, field);   \\",
          "2290:  }        \\",
          "2291:  TRASHIT(*oldnext);      \\",
          "2292: } while (0)",
          "2294: #define SLIST_REMOVE_AFTER(elm, field) do {    \\",
          "2295:  SLIST_NEXT(elm, field) =     \\",
          "2296:      SLIST_NEXT(SLIST_NEXT(elm, field), field);   \\",
          "2297: } while (0)",
          "2299: #define SLIST_REMOVE_HEAD(head, field) do {    \\",
          "2300:  SLIST_FIRST((head)) = SLIST_NEXT(SLIST_FIRST((head)), field); \\",
          "2301: } while (0)",
          "2303: #define SLIST_SWAP(head1, head2, type) do {    \\",
          "2304:  QUEUE_TYPEOF(type) *swap_first = SLIST_FIRST(head1);  \\",
          "2305:  SLIST_FIRST(head1) = SLIST_FIRST(head2);   \\",
          "2306:  SLIST_FIRST(head2) = swap_first;    \\",
          "2307: } while (0)",
          "2312: #define STAILQ_HEAD(name, type)      \\",
          "2313: struct name {        \\",
          "2314:  struct type *stqh_first;/* first element */   \\",
          "2315:  struct type **stqh_last;/* addr of last next element */  \\",
          "2316: }",
          "2318: #define STAILQ_CLASS_HEAD(name, type)     \\",
          "2319: struct name {        \\",
          "2320:  class type *stqh_first; /* first element */   \\",
          "2321:  class type **stqh_last; /* addr of last next element */  \\",
          "2322: }",
          "2324: #define STAILQ_HEAD_INITIALIZER(head)     \\",
          "2325:  { NULL, &(head).stqh_first }",
          "2327: #define STAILQ_ENTRY(type)      \\",
          "2328: struct {        \\",
          "2329:  struct type *stqe_next; /* next element */   \\",
          "2330: }",
          "2332: #define STAILQ_CLASS_ENTRY(type)     \\",
          "2333: struct {        \\",
          "2334:  class type *stqe_next; /* next element */   \\",
          "2335: }",
          "2340: #define STAILQ_CONCAT(head1, head2) do {    \\",
          "2341:  if (!STAILQ_EMPTY((head2))) {     \\",
          "2343:   (head1)->stqh_last = (head2)->stqh_last;  \\",
          "2344:   STAILQ_INIT((head2));     \\",
          "2345:  }        \\",
          "2346: } while (0)",
          "2348: #define STAILQ_EMPTY(head) ((head)->stqh_first == NULL)",
          "2350: #define STAILQ_FIRST(head) ((head)->stqh_first)",
          "2352: #define STAILQ_FOREACH(var, head, field)    \\",
          "2353:  for((var) = STAILQ_FIRST((head));    \\",
          "2354:     (var);       \\",
          "2355:     (var) = STAILQ_NEXT((var), field))",
          "2357: #define STAILQ_FOREACH_FROM(var, head, field)    \\",
          "2358:  for ((var) = ((var) ? (var) : STAILQ_FIRST((head)));  \\",
          "2359:     (var);       \\",
          "2360:     (var) = STAILQ_NEXT((var), field))",
          "2362: #define STAILQ_FOREACH_SAFE(var, head, field, tvar)   \\",
          "2363:  for ((var) = STAILQ_FIRST((head));    \\",
          "2364:      (var) && ((tvar) = STAILQ_NEXT((var), field), 1);  \\",
          "2365:      (var) = (tvar))",
          "2367: #define STAILQ_FOREACH_FROM_SAFE(var, head, field, tvar)  \\",
          "2368:  for ((var) = ((var) ? (var) : STAILQ_FIRST((head)));  \\",
          "2369:      (var) && ((tvar) = STAILQ_NEXT((var), field), 1);  \\",
          "2370:      (var) = (tvar))",
          "2372: #define STAILQ_INIT(head) do {      \\",
          "2373:  STAILQ_FIRST((head)) = NULL;     \\",
          "2374:  (head)->stqh_last = &STAILQ_FIRST((head));   \\",
          "2375: } while (0)",
          "2377: #define STAILQ_INSERT_AFTER(head, tqelm, elm, field) do {  \\",
          "2378:  if ((STAILQ_NEXT((elm), field) = STAILQ_NEXT((tqelm), field)) == NULL)\\",
          "2379:   (head)->stqh_last = &STAILQ_NEXT((elm), field);  \\",
          "2380:  STAILQ_NEXT((tqelm), field) = (elm);    \\",
          "2381: } while (0)",
          "2383: #define STAILQ_INSERT_HEAD(head, elm, field) do {   \\",
          "2384:  if ((STAILQ_NEXT((elm), field) = STAILQ_FIRST((head))) == NULL) \\",
          "2385:   (head)->stqh_last = &STAILQ_NEXT((elm), field);  \\",
          "2386:  STAILQ_FIRST((head)) = (elm);     \\",
          "2387: } while (0)",
          "2389: #define STAILQ_INSERT_TAIL(head, elm, field) do {   \\",
          "2390:  STAILQ_NEXT((elm), field) = NULL;    \\",
          "2392:  (head)->stqh_last = &STAILQ_NEXT((elm), field);   \\",
          "2393: } while (0)",
          "2395: #define STAILQ_LAST(head, type, field)    \\",
          "2396:  (STAILQ_EMPTY((head)) ? NULL :    \\",
          "2397:      __containerof((head)->stqh_last,   \\",
          "2398:      QUEUE_TYPEOF(type), field.stqe_next))",
          "2400: #define STAILQ_NEXT(elm, field) ((elm)->field.stqe_next)",
          "2402: #define STAILQ_REMOVE(head, elm, type, field) do {   \\",
          "2403:  QMD_SAVELINK(oldnext, (elm)->field.stqe_next);   \\",
          "2404:  if (STAILQ_FIRST((head)) == (elm)) {    \\",
          "2405:   STAILQ_REMOVE_HEAD((head), field);   \\",
          "2406:  }        \\",
          "2407:  else {        \\",
          "2408:   QUEUE_TYPEOF(type) *curelm = STAILQ_FIRST(head); \\",
          "2409:   while (STAILQ_NEXT(curelm, field) != (elm))  \\",
          "2410:    curelm = STAILQ_NEXT(curelm, field);  \\",
          "2411:   STAILQ_REMOVE_AFTER(head, curelm, field);  \\",
          "2412:  }        \\",
          "2413:  TRASHIT(*oldnext);      \\",
          "2414: } while (0)",
          "2416: #define STAILQ_REMOVE_AFTER(head, elm, field) do {   \\",
          "2417:  if ((STAILQ_NEXT(elm, field) =     \\",
          "2418:       STAILQ_NEXT(STAILQ_NEXT(elm, field), field)) == NULL) \\",
          "2419:   (head)->stqh_last = &STAILQ_NEXT((elm), field);  \\",
          "2420: } while (0)",
          "2422: #define STAILQ_REMOVE_HEAD(head, field) do {    \\",
          "2423:  if ((STAILQ_FIRST((head)) =     \\",
          "2424:       STAILQ_NEXT(STAILQ_FIRST((head)), field)) == NULL)  \\",
          "2425:   (head)->stqh_last = &STAILQ_FIRST((head));  \\",
          "2426: } while (0)",
          "2428: #define STAILQ_SWAP(head1, head2, type) do {    \\",
          "2429:  QUEUE_TYPEOF(type) *swap_first = STAILQ_FIRST(head1);  \\",
          "2430:  QUEUE_TYPEOF(type) **swap_last = (head1)->stqh_last;  \\",
          "2431:  STAILQ_FIRST(head1) = STAILQ_FIRST(head2);   \\",
          "2432:  (head1)->stqh_last = (head2)->stqh_last;   \\",
          "2433:  STAILQ_FIRST(head2) = swap_first;    \\",
          "2434:  (head2)->stqh_last = swap_last;     \\",
          "2435:  if (STAILQ_EMPTY(head1))     \\",
          "2436:   (head1)->stqh_last = &STAILQ_FIRST(head1);  \\",
          "2437:  if (STAILQ_EMPTY(head2))     \\",
          "2438:   (head2)->stqh_last = &STAILQ_FIRST(head2);  \\",
          "2439: } while (0)",
          "2445: #define LIST_HEAD(name, type)      \\",
          "2446: struct name {        \\",
          "2447:  struct type *lh_first; /* first element */   \\",
          "2448: }",
          "2450: #define LIST_CLASS_HEAD(name, type)     \\",
          "2451: struct name {        \\",
          "2452:  class type *lh_first; /* first element */   \\",
          "2453: }",
          "2455: #define LIST_HEAD_INITIALIZER(head)     \\",
          "2456:  { NULL }",
          "2458: #define LIST_ENTRY(type)      \\",
          "2459: struct {        \\",
          "2460:  struct type *le_next; /* next element */   \\",
          "2461:  struct type **le_prev; /* address of previous next element */ \\",
          "2462: }",
          "2464: #define LIST_CLASS_ENTRY(type)      \\",
          "2465: struct {        \\",
          "2466:  class type *le_next; /* next element */   \\",
          "2467:  class type **le_prev; /* address of previous next element */ \\",
          "2468: }",
          "2474: #if (defined(_KERNEL) && defined(INVARIANTS))",
          "2475: #define QMD_LIST_CHECK_HEAD(head, field) do {    \\",
          "2476:  if (LIST_FIRST((head)) != NULL &&    \\",
          "2477:      LIST_FIRST((head))->field.le_prev !=   \\",
          "2478:       &LIST_FIRST((head)))     \\",
          "2479:   panic(\"Bad list head %p first->prev != head\", (head)); \\",
          "2480: } while (0)",
          "2482: #define QMD_LIST_CHECK_NEXT(elm, field) do {    \\",
          "2483:  if (LIST_NEXT((elm), field) != NULL &&    \\",
          "2484:      LIST_NEXT((elm), field)->field.le_prev !=   \\",
          "2485:       &((elm)->field.le_next))     \\",
          "2486:        panic(\"Bad link elm %p next->prev != elm\", (elm)); \\",
          "2487: } while (0)",
          "2489: #define QMD_LIST_CHECK_PREV(elm, field) do {    \\",
          "2490:  if (*(elm)->field.le_prev != (elm))    \\",
          "2491:   panic(\"Bad link elm %p prev->next != elm\", (elm)); \\",
          "2492: } while (0)",
          "2493: #else",
          "2494: #define QMD_LIST_CHECK_HEAD(head, field)",
          "2495: #define QMD_LIST_CHECK_NEXT(elm, field)",
          "2496: #define QMD_LIST_CHECK_PREV(elm, field)",
          "2499: #define LIST_EMPTY(head) ((head)->lh_first == NULL)",
          "2501: #define LIST_FIRST(head) ((head)->lh_first)",
          "2503: #define LIST_FOREACH(var, head, field)     \\",
          "2504:  for ((var) = LIST_FIRST((head));    \\",
          "2505:      (var);       \\",
          "2506:      (var) = LIST_NEXT((var), field))",
          "2508: #define LIST_FOREACH_FROM(var, head, field)    \\",
          "2509:  for ((var) = ((var) ? (var) : LIST_FIRST((head)));  \\",
          "2510:      (var);       \\",
          "2511:      (var) = LIST_NEXT((var), field))",
          "2513: #define LIST_FOREACH_SAFE(var, head, field, tvar)   \\",
          "2514:  for ((var) = LIST_FIRST((head));    \\",
          "2515:      (var) && ((tvar) = LIST_NEXT((var), field), 1);  \\",
          "2516:      (var) = (tvar))",
          "2518: #define LIST_FOREACH_FROM_SAFE(var, head, field, tvar)   \\",
          "2519:  for ((var) = ((var) ? (var) : LIST_FIRST((head)));  \\",
          "2520:      (var) && ((tvar) = LIST_NEXT((var), field), 1);  \\",
          "2521:      (var) = (tvar))",
          "2523: #define LIST_INIT(head) do {      \\",
          "2524:  LIST_FIRST((head)) = NULL;     \\",
          "2525: } while (0)",
          "2527: #define LIST_INSERT_AFTER(listelm, elm, field) do {   \\",
          "2528:  QMD_LIST_CHECK_NEXT(listelm, field);    \\",
          "2529:  if ((LIST_NEXT((elm), field) = LIST_NEXT((listelm), field)) != NULL)\\",
          "2530:   LIST_NEXT((listelm), field)->field.le_prev =  \\",
          "2531:       &LIST_NEXT((elm), field);    \\",
          "2532:  LIST_NEXT((listelm), field) = (elm);    \\",
          "2533:  (elm)->field.le_prev = &LIST_NEXT((listelm), field);  \\",
          "2534: } while (0)",
          "2536: #define LIST_INSERT_BEFORE(listelm, elm, field) do {   \\",
          "2537:  QMD_LIST_CHECK_PREV(listelm, field);    \\",
          "2538:  (elm)->field.le_prev = (listelm)->field.le_prev;  \\",
          "2539:  LIST_NEXT((elm), field) = (listelm);    \\",
          "2541:  (listelm)->field.le_prev = &LIST_NEXT((elm), field);  \\",
          "2542: } while (0)",
          "2544: #define LIST_INSERT_HEAD(head, elm, field) do {    \\",
          "2545:  QMD_LIST_CHECK_HEAD((head), field);    \\",
          "2546:  if ((LIST_NEXT((elm), field) = LIST_FIRST((head))) != NULL) \\",
          "2547:   LIST_FIRST((head))->field.le_prev = &LIST_NEXT((elm), field);\\",
          "2548:  LIST_FIRST((head)) = (elm);     \\",
          "2549:  (elm)->field.le_prev = &LIST_FIRST((head));   \\",
          "2550: } while (0)",
          "2552: #define LIST_NEXT(elm, field) ((elm)->field.le_next)",
          "2554: #define LIST_PREV(elm, head, type, field)   \\",
          "2555:  ((elm)->field.le_prev == &LIST_FIRST((head)) ? NULL : \\",
          "2556:      __containerof((elm)->field.le_prev,   \\",
          "2557:      QUEUE_TYPEOF(type), field.le_next))",
          "2559: #define LIST_REMOVE(elm, field) do {     \\",
          "2560:  QMD_SAVELINK(oldnext, (elm)->field.le_next);   \\",
          "2561:  QMD_SAVELINK(oldprev, (elm)->field.le_prev);   \\",
          "2562:  QMD_LIST_CHECK_NEXT(elm, field);    \\",
          "2563:  QMD_LIST_CHECK_PREV(elm, field);    \\",
          "2564:  if (LIST_NEXT((elm), field) != NULL)    \\",
          "2565:   LIST_NEXT((elm), field)->field.le_prev =   \\",
          "2566:       (elm)->field.le_prev;    \\",
          "2568:  TRASHIT(*oldnext);      \\",
          "2569:  TRASHIT(*oldprev);      \\",
          "2570: } while (0)",
          "2572: #define LIST_SWAP(head1, head2, type, field) do {   \\",
          "2573:  QUEUE_TYPEOF(type) *swap_tmp = LIST_FIRST(head1);  \\",
          "2574:  LIST_FIRST((head1)) = LIST_FIRST((head2));   \\",
          "2575:  LIST_FIRST((head2)) = swap_tmp;     \\",
          "2576:  if ((swap_tmp = LIST_FIRST((head1))) != NULL)   \\",
          "2577:   swap_tmp->field.le_prev = &LIST_FIRST((head1));  \\",
          "2578:  if ((swap_tmp = LIST_FIRST((head2))) != NULL)   \\",
          "2579:   swap_tmp->field.le_prev = &LIST_FIRST((head2));  \\",
          "2580: } while (0)",
          "2585: #define TAILQ_HEAD(name, type)      \\",
          "2586: struct name {        \\",
          "2587:  struct type *tqh_first; /* first element */   \\",
          "2588:  struct type **tqh_last; /* addr of last next element */  \\",
          "2589:  TRACEBUF       \\",
          "2590: }",
          "2592: #define TAILQ_CLASS_HEAD(name, type)     \\",
          "2593: struct name {        \\",
          "2594:  class type *tqh_first; /* first element */   \\",
          "2595:  class type **tqh_last; /* addr of last next element */  \\",
          "2596:  TRACEBUF       \\",
          "2597: }",
          "2599: #define TAILQ_HEAD_INITIALIZER(head)     \\",
          "2600:  { NULL, &(head).tqh_first, TRACEBUF_INITIALIZER }",
          "2602: #define TAILQ_ENTRY(type)      \\",
          "2603: struct {        \\",
          "2604:  struct type *tqe_next; /* next element */   \\",
          "2605:  struct type **tqe_prev; /* address of previous next element */ \\",
          "2606:  TRACEBUF       \\",
          "2607: }",
          "2609: #define TAILQ_CLASS_ENTRY(type)      \\",
          "2610: struct {        \\",
          "2611:  class type *tqe_next; /* next element */   \\",
          "2612:  class type **tqe_prev; /* address of previous next element */ \\",
          "2613:  TRACEBUF       \\",
          "2614: }",
          "2619: #if (defined(_KERNEL) && defined(INVARIANTS))",
          "2620: #define QMD_TAILQ_CHECK_HEAD(head, field) do {    \\",
          "2621:  if (!TAILQ_EMPTY(head) &&     \\",
          "2622:      TAILQ_FIRST((head))->field.tqe_prev !=   \\",
          "2623:       &TAILQ_FIRST((head)))     \\",
          "2624:   panic(\"Bad tailq head %p first->prev != head\", (head)); \\",
          "2625: } while (0)",
          "2627: #define QMD_TAILQ_CHECK_TAIL(head, field) do {    \\",
          "2628:  if (*(head)->tqh_last != NULL)     \\",
          "2629:       panic(\"Bad tailq NEXT(%p->tqh_last) != NULL\", (head));  \\",
          "2630: } while (0)",
          "2632: #define QMD_TAILQ_CHECK_NEXT(elm, field) do {    \\",
          "2633:  if (TAILQ_NEXT((elm), field) != NULL &&    \\",
          "2634:      TAILQ_NEXT((elm), field)->field.tqe_prev !=   \\",
          "2635:       &((elm)->field.tqe_next))     \\",
          "2636:   panic(\"Bad link elm %p next->prev != elm\", (elm)); \\",
          "2637: } while (0)",
          "2639: #define QMD_TAILQ_CHECK_PREV(elm, field) do {    \\",
          "2640:  if (*(elm)->field.tqe_prev != (elm))    \\",
          "2641:   panic(\"Bad link elm %p prev->next != elm\", (elm)); \\",
          "2642: } while (0)",
          "2643: #else",
          "2644: #define QMD_TAILQ_CHECK_HEAD(head, field)",
          "2645: #define QMD_TAILQ_CHECK_TAIL(head, headname)",
          "2646: #define QMD_TAILQ_CHECK_NEXT(elm, field)",
          "2647: #define QMD_TAILQ_CHECK_PREV(elm, field)",
          "2650: #define TAILQ_CONCAT(head1, head2, field) do {    \\",
          "2651:  if (!TAILQ_EMPTY(head2)) {     \\",
          "2653:   (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last; \\",
          "2654:   (head1)->tqh_last = (head2)->tqh_last;   \\",
          "2655:   TAILQ_INIT((head2));     \\",
          "2656:   QMD_TRACE_HEAD(head1);     \\",
          "2657:   QMD_TRACE_HEAD(head2);     \\",
          "2658:  }        \\",
          "2659: } while (0)",
          "2661: #define TAILQ_EMPTY(head) ((head)->tqh_first == NULL)",
          "2663: #define TAILQ_FIRST(head) ((head)->tqh_first)",
          "2665: #define TAILQ_FOREACH(var, head, field)     \\",
          "2666:  for ((var) = TAILQ_FIRST((head));    \\",
          "2667:      (var);       \\",
          "2668:      (var) = TAILQ_NEXT((var), field))",
          "2670: #define TAILQ_FOREACH_FROM(var, head, field)    \\",
          "2671:  for ((var) = ((var) ? (var) : TAILQ_FIRST((head)));  \\",
          "2672:      (var);       \\",
          "2673:      (var) = TAILQ_NEXT((var), field))",
          "2675: #define TAILQ_FOREACH_SAFE(var, head, field, tvar)   \\",
          "2676:  for ((var) = TAILQ_FIRST((head));    \\",
          "2677:      (var) && ((tvar) = TAILQ_NEXT((var), field), 1);  \\",
          "2678:      (var) = (tvar))",
          "2680: #define TAILQ_FOREACH_FROM_SAFE(var, head, field, tvar)   \\",
          "2681:  for ((var) = ((var) ? (var) : TAILQ_FIRST((head)));  \\",
          "2682:      (var) && ((tvar) = TAILQ_NEXT((var), field), 1);  \\",
          "2683:      (var) = (tvar))",
          "2685: #define TAILQ_FOREACH_REVERSE(var, head, headname, field)  \\",
          "2686:  for ((var) = TAILQ_LAST((head), headname);   \\",
          "2687:      (var);       \\",
          "2688:      (var) = TAILQ_PREV((var), headname, field))",
          "2690: #define TAILQ_FOREACH_REVERSE_FROM(var, head, headname, field)  \\",
          "2691:  for ((var) = ((var) ? (var) : TAILQ_LAST((head), headname)); \\",
          "2692:      (var);       \\",
          "2693:      (var) = TAILQ_PREV((var), headname, field))",
          "2695: #define TAILQ_FOREACH_REVERSE_SAFE(var, head, headname, field, tvar) \\",
          "2696:  for ((var) = TAILQ_LAST((head), headname);   \\",
          "2697:      (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1); \\",
          "2698:      (var) = (tvar))",
          "2700: #define TAILQ_FOREACH_REVERSE_FROM_SAFE(var, head, headname, field, tvar) \\",
          "2701:  for ((var) = ((var) ? (var) : TAILQ_LAST((head), headname)); \\",
          "2702:      (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1); \\",
          "2703:      (var) = (tvar))",
          "2705: #define TAILQ_INIT(head) do {      \\",
          "2706:  TAILQ_FIRST((head)) = NULL;     \\",
          "2707:  (head)->tqh_last = &TAILQ_FIRST((head));   \\",
          "2708:  QMD_TRACE_HEAD(head);      \\",
          "2709: } while (0)",
          "2711: #define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {  \\",
          "2712:  QMD_TAILQ_CHECK_NEXT(listelm, field);    \\",
          "2713:  if ((TAILQ_NEXT((elm), field) = TAILQ_NEXT((listelm), field)) != NULL)\\",
          "2714:   TAILQ_NEXT((elm), field)->field.tqe_prev =   \\",
          "2715:       &TAILQ_NEXT((elm), field);    \\",
          "2716:  else {        \\",
          "2717:   (head)->tqh_last = &TAILQ_NEXT((elm), field);  \\",
          "2718:   QMD_TRACE_HEAD(head);     \\",
          "2719:  }        \\",
          "2720:  TAILQ_NEXT((listelm), field) = (elm);    \\",
          "2721:  (elm)->field.tqe_prev = &TAILQ_NEXT((listelm), field);  \\",
          "2722:  QMD_TRACE_ELEM(&(elm)->field);     \\",
          "2723:  QMD_TRACE_ELEM(&(listelm)->field);    \\",
          "2724: } while (0)",
          "2726: #define TAILQ_INSERT_BEFORE(listelm, elm, field) do {   \\",
          "2727:  QMD_TAILQ_CHECK_PREV(listelm, field);    \\",
          "2728:  (elm)->field.tqe_prev = (listelm)->field.tqe_prev;  \\",
          "2729:  TAILQ_NEXT((elm), field) = (listelm);    \\",
          "2731:  (listelm)->field.tqe_prev = &TAILQ_NEXT((elm), field);  \\",
          "2732:  QMD_TRACE_ELEM(&(elm)->field);     \\",
          "2733:  QMD_TRACE_ELEM(&(listelm)->field);    \\",
          "2734: } while (0)",
          "2736: #define TAILQ_INSERT_HEAD(head, elm, field) do {   \\",
          "2737:  QMD_TAILQ_CHECK_HEAD(head, field);    \\",
          "2738:  if ((TAILQ_NEXT((elm), field) = TAILQ_FIRST((head))) != NULL) \\",
          "2739:   TAILQ_FIRST((head))->field.tqe_prev =   \\",
          "2740:       &TAILQ_NEXT((elm), field);    \\",
          "2741:  else        \\",
          "2742:   (head)->tqh_last = &TAILQ_NEXT((elm), field);  \\",
          "2743:  TAILQ_FIRST((head)) = (elm);     \\",
          "2744:  (elm)->field.tqe_prev = &TAILQ_FIRST((head));   \\",
          "2745:  QMD_TRACE_HEAD(head);      \\",
          "2746:  QMD_TRACE_ELEM(&(elm)->field);     \\",
          "2747: } while (0)",
          "2749: #define TAILQ_INSERT_TAIL(head, elm, field) do {   \\",
          "2750:  QMD_TAILQ_CHECK_TAIL(head, field);    \\",
          "2751:  TAILQ_NEXT((elm), field) = NULL;    \\",
          "2752:  (elm)->field.tqe_prev = (head)->tqh_last;   \\",
          "2754:  (head)->tqh_last = &TAILQ_NEXT((elm), field);   \\",
          "2755:  QMD_TRACE_HEAD(head);      \\",
          "2756:  QMD_TRACE_ELEM(&(elm)->field);     \\",
          "2757: } while (0)",
          "2759: #define TAILQ_LAST(head, headname)     \\",
          "2760:  (*(((struct headname *)((head)->tqh_last))->tqh_last))",
          "2762: #define TAILQ_NEXT(elm, field) ((elm)->field.tqe_next)",
          "2764: #define TAILQ_PREV(elm, headname, field)    \\",
          "2765:  (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))",
          "2767: #define TAILQ_REMOVE(head, elm, field) do {    \\",
          "2768:  QMD_SAVELINK(oldnext, (elm)->field.tqe_next);   \\",
          "2769:  QMD_SAVELINK(oldprev, (elm)->field.tqe_prev);   \\",
          "2770:  QMD_TAILQ_CHECK_NEXT(elm, field);    \\",
          "2771:  QMD_TAILQ_CHECK_PREV(elm, field);    \\",
          "2772:  if ((TAILQ_NEXT((elm), field)) != NULL)    \\",
          "2773:   TAILQ_NEXT((elm), field)->field.tqe_prev =   \\",
          "2774:       (elm)->field.tqe_prev;    \\",
          "2775:  else {        \\",
          "2776:   (head)->tqh_last = (elm)->field.tqe_prev;  \\",
          "2777:   QMD_TRACE_HEAD(head);     \\",
          "2778:  }        \\",
          "2780:  TRASHIT(*oldnext);      \\",
          "2781:  TRASHIT(*oldprev);      \\",
          "2782:  QMD_TRACE_ELEM(&(elm)->field);     \\",
          "2783: } while (0)",
          "2785: #define TAILQ_SWAP(head1, head2, type, field) do {   \\",
          "2786:  QUEUE_TYPEOF(type) *swap_first = (head1)->tqh_first;  \\",
          "2787:  QUEUE_TYPEOF(type) **swap_last = (head1)->tqh_last;  \\",
          "2788:  (head1)->tqh_first = (head2)->tqh_first;   \\",
          "2789:  (head1)->tqh_last = (head2)->tqh_last;    \\",
          "2790:  (head2)->tqh_first = swap_first;    \\",
          "2791:  (head2)->tqh_last = swap_last;     \\",
          "2792:  if ((swap_first = (head1)->tqh_first) != NULL)   \\",
          "2793:   swap_first->field.tqe_prev = &(head1)->tqh_first; \\",
          "2794:  else        \\",
          "2795:   (head1)->tqh_last = &(head1)->tqh_first;  \\",
          "2796:  if ((swap_first = (head2)->tqh_first) != NULL)   \\",
          "2797:   swap_first->field.tqe_prev = &(head2)->tqh_first; \\",
          "2798:  else        \\",
          "2799:   (head2)->tqh_last = &(head2)->tqh_first;  \\",
          "2800: } while (0)",
          "2803: #ifdef MG_MODULE_LINES",
          "2804: #line 1 \"mongoose/src/features.h\"",
          "2805: #endif",
          "2811: #ifndef CS_MONGOOSE_SRC_FEATURES_H_",
          "2812: #define CS_MONGOOSE_SRC_FEATURES_H_",
          "2814: #ifndef MG_DISABLE_HTTP_DIGEST_AUTH",
          "2815: #define MG_DISABLE_HTTP_DIGEST_AUTH 0",
          "2816: #endif",
          "2818: #ifndef MG_DISABLE_HTTP_KEEP_ALIVE",
          "2819: #define MG_DISABLE_HTTP_KEEP_ALIVE 0",
          "2820: #endif",
          "2822: #ifndef MG_DISABLE_PFS",
          "2823: #define MG_DISABLE_PFS 0",
          "2824: #endif",
          "2826: #ifndef MG_DISABLE_WS_RANDOM_MASK",
          "2827: #define MG_DISABLE_WS_RANDOM_MASK 0",
          "2828: #endif",
          "2830: #ifndef MG_ENABLE_ASYNC_RESOLVER",
          "2831: #define MG_ENABLE_ASYNC_RESOLVER 1",
          "2832: #endif",
          "2834: #ifndef MG_ENABLE_BROADCAST",
          "2835: #define MG_ENABLE_BROADCAST 0",
          "2836: #endif",
          "2838: #ifndef MG_ENABLE_COAP",
          "2839: #define MG_ENABLE_COAP 0",
          "2840: #endif",
          "2842: #ifndef MG_ENABLE_DEBUG",
          "2843: #define MG_ENABLE_DEBUG 0",
          "2844: #endif",
          "2846: #ifndef MG_ENABLE_DIRECTORY_LISTING",
          "2847: #define MG_ENABLE_DIRECTORY_LISTING 0",
          "2848: #endif",
          "2850: #ifndef MG_ENABLE_DNS",
          "2851: #define MG_ENABLE_DNS 1",
          "2852: #endif",
          "2854: #ifndef MG_ENABLE_DNS_SERVER",
          "2855: #define MG_ENABLE_DNS_SERVER 0",
          "2856: #endif",
          "2858: #ifndef MG_ENABLE_FAKE_DAVLOCK",
          "2859: #define MG_ENABLE_FAKE_DAVLOCK 0",
          "2860: #endif",
          "2862: #ifndef MG_ENABLE_FILESYSTEM",
          "2863: #define MG_ENABLE_FILESYSTEM 0",
          "2864: #endif",
          "2866: #ifndef MG_ENABLE_GETADDRINFO",
          "2867: #define MG_ENABLE_GETADDRINFO 0",
          "2868: #endif",
          "2870: #ifndef MG_ENABLE_HEXDUMP",
          "2871: #define MG_ENABLE_HEXDUMP CS_ENABLE_STDIO",
          "2872: #endif",
          "2874: #ifndef MG_ENABLE_HTTP",
          "2875: #define MG_ENABLE_HTTP 1",
          "2876: #endif",
          "2878: #ifndef MG_ENABLE_HTTP_CGI",
          "2879: #define MG_ENABLE_HTTP_CGI 0",
          "2880: #endif",
          "2882: #ifndef MG_ENABLE_HTTP_SSI",
          "2883: #define MG_ENABLE_HTTP_SSI MG_ENABLE_FILESYSTEM",
          "2884: #endif",
          "2886: #ifndef MG_ENABLE_HTTP_SSI_EXEC",
          "2887: #define MG_ENABLE_HTTP_SSI_EXEC 0",
          "2888: #endif",
          "2890: #ifndef MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "2891: #define MG_ENABLE_HTTP_STREAMING_MULTIPART 0",
          "2892: #endif",
          "2894: #ifndef MG_ENABLE_HTTP_WEBDAV",
          "2895: #define MG_ENABLE_HTTP_WEBDAV 0",
          "2896: #endif",
          "2898: #ifndef MG_ENABLE_HTTP_WEBSOCKET",
          "2899: #define MG_ENABLE_HTTP_WEBSOCKET MG_ENABLE_HTTP",
          "2900: #endif",
          "2902: #ifndef MG_ENABLE_IPV6",
          "2903: #define MG_ENABLE_IPV6 0",
          "2904: #endif",
          "2906: #ifndef MG_ENABLE_JAVASCRIPT",
          "2907: #define MG_ENABLE_JAVASCRIPT 0",
          "2908: #endif",
          "2910: #ifndef MG_ENABLE_MQTT",
          "2911: #define MG_ENABLE_MQTT 1",
          "2912: #endif",
          "2914: #ifndef MG_ENABLE_MQTT_BROKER",
          "2915: #define MG_ENABLE_MQTT_BROKER 0",
          "2916: #endif",
          "2918: #ifndef MG_ENABLE_SSL",
          "2919: #define MG_ENABLE_SSL 0",
          "2920: #endif",
          "2922: #ifndef MG_ENABLE_SYNC_RESOLVER",
          "2923: #define MG_ENABLE_SYNC_RESOLVER 0",
          "2924: #endif",
          "2926: #ifndef MG_ENABLE_STDIO",
          "2927: #define MG_ENABLE_STDIO CS_ENABLE_STDIO",
          "2928: #endif",
          "2930: #ifndef MG_NET_IF",
          "2931: #define MG_NET_IF MG_NET_IF_SOCKET",
          "2932: #endif",
          "2934: #ifndef MG_SSL_IF",
          "2935: #define MG_SSL_IF MG_SSL_IF_OPENSSL",
          "2936: #endif",
          "2939: #ifdef _WIN32",
          "2940: #define MG_ENABLE_THREADS 1",
          "2941: #else",
          "2942: #define MG_ENABLE_THREADS 0",
          "2943: #endif",
          "2944: #endif",
          "2946: #if MG_ENABLE_DEBUG && !defined(CS_ENABLE_DEBUG)",
          "2947: #define CS_ENABLE_DEBUG 1",
          "2948: #endif",
          "2951: #if MG_ENABLE_MQTT_BROKER && !MG_ENABLE_MQTT",
          "2952: #undef MG_ENABLE_MQTT",
          "2953: #define MG_ENABLE_MQTT 1",
          "2954: #endif",
          "2956: #ifndef MG_ENABLE_HTTP_URL_REWRITES",
          "2957: #define MG_ENABLE_HTTP_URL_REWRITES \\",
          "2958:   (CS_PLATFORM == CS_P_WINDOWS || CS_PLATFORM == CS_P_UNIX)",
          "2959: #endif",
          "2961: #ifndef MG_ENABLE_TUN",
          "2962: #define MG_ENABLE_TUN MG_ENABLE_HTTP_WEBSOCKET",
          "2963: #endif",
          "2965: #ifndef MG_ENABLE_SNTP",
          "2966: #define MG_ENABLE_SNTP 0",
          "2967: #endif",
          "2969: #ifndef MG_ENABLE_EXTRA_ERRORS_DESC",
          "2970: #define MG_ENABLE_EXTRA_ERRORS_DESC 0",
          "2971: #endif",
          "2973: #ifndef MG_ENABLE_CALLBACK_USERDATA",
          "2974: #define MG_ENABLE_CALLBACK_USERDATA 0",
          "2975: #endif",
          "2977: #if MG_ENABLE_CALLBACK_USERDATA",
          "2978: #define MG_UD_ARG(ud) , ud",
          "2979: #define MG_CB(cb, ud) cb, ud",
          "2980: #else",
          "2981: #define MG_UD_ARG(ud)",
          "2982: #define MG_CB(cb, ud) cb",
          "2983: #endif",
          "2986: #ifdef MG_MODULE_LINES",
          "2987: #line 1 \"mongoose/src/net_if.h\"",
          "2988: #endif",
          "2994: #ifndef CS_MONGOOSE_SRC_NET_IF_H_",
          "2995: #define CS_MONGOOSE_SRC_NET_IF_H_",
          "3009: #ifdef __cplusplus",
          "3010: extern \"C\" {",
          "3013: #define MG_MAIN_IFACE 0",
          "3015: struct mg_mgr;",
          "3016: struct mg_connection;",
          "3017: union socket_address;",
          "3019: struct mg_iface_vtable;",
          "3021: struct mg_iface {",
          "3022:   struct mg_mgr *mgr;",
          "3024:   const struct mg_iface_vtable *vtable;",
          "3025: };",
          "3027: struct mg_iface_vtable {",
          "3028:   void (*init)(struct mg_iface *iface);",
          "3029:   void (*free)(struct mg_iface *iface);",
          "3030:   void (*add_conn)(struct mg_connection *nc);",
          "3031:   void (*remove_conn)(struct mg_connection *nc);",
          "3032:   time_t (*poll)(struct mg_iface *iface, int timeout_ms);",
          "3035:   int (*listen_tcp)(struct mg_connection *nc, union socket_address *sa);",
          "3037:   int (*listen_udp)(struct mg_connection *nc, union socket_address *sa);",
          "3040:   void (*connect_tcp)(struct mg_connection *nc, const union socket_address *sa);",
          "3042:   void (*connect_udp)(struct mg_connection *nc);",
          "3045:   void (*tcp_send)(struct mg_connection *nc, const void *buf, size_t len);",
          "3046:   void (*udp_send)(struct mg_connection *nc, const void *buf, size_t len);",
          "3048:   void (*recved)(struct mg_connection *nc, size_t len);",
          "3051:   int (*create_conn)(struct mg_connection *nc);",
          "3053:   void (*destroy_conn)(struct mg_connection *nc);",
          "3056:   void (*sock_set)(struct mg_connection *nc, sock_t sock);",
          "3059:   void (*get_conn_addr)(struct mg_connection *nc, int remote,",
          "3060:                         union socket_address *sa);",
          "3061: };",
          "3063: extern const struct mg_iface_vtable *mg_ifaces[];",
          "3064: extern int mg_num_ifaces;",
          "3067: struct mg_iface *mg_if_create_iface(const struct mg_iface_vtable *vtable,",
          "3068:                                     struct mg_mgr *mgr);",
          "3074: struct mg_iface *mg_find_iface(struct mg_mgr *mgr,",
          "3075:                                const struct mg_iface_vtable *vtable,",
          "3076:                                struct mg_iface *from);",
          "3083: struct mg_connection *mg_if_accept_new_conn(struct mg_connection *lc);",
          "3084: void mg_if_accept_tcp_cb(struct mg_connection *nc, union socket_address *sa,",
          "3085:                          size_t sa_len);",
          "3088: void mg_if_connect_cb(struct mg_connection *nc, int err);",
          "3090: void mg_if_sent_cb(struct mg_connection *nc, int num_sent);",
          "3097: void mg_if_recv_tcp_cb(struct mg_connection *nc, void *buf, int len, int own);",
          "3103: void mg_if_recv_udp_cb(struct mg_connection *nc, void *buf, int len,",
          "3104:                        union socket_address *sa, size_t sa_len);",
          "3109: void mg_if_poll(struct mg_connection *nc, time_t now);",
          "3112: void mg_if_timer(struct mg_connection *c, double now);",
          "3114: #ifdef __cplusplus",
          "3115: }",
          "3119: #ifdef MG_MODULE_LINES",
          "3120: #line 1 \"mongoose/src/ssl_if.h\"",
          "3121: #endif",
          "3127: #ifndef CS_MONGOOSE_SRC_SSL_IF_H_",
          "3128: #define CS_MONGOOSE_SRC_SSL_IF_H_",
          "3130: #if MG_ENABLE_SSL",
          "3132: #ifdef __cplusplus",
          "3133: extern \"C\" {",
          "3136: struct mg_ssl_if_ctx;",
          "3137: struct mg_connection;",
          "3139: void mg_ssl_if_init();",
          "3141: enum mg_ssl_if_result {",
          "3142:   MG_SSL_OK = 0,",
          "3143:   MG_SSL_WANT_READ = -1,",
          "3144:   MG_SSL_WANT_WRITE = -2,",
          "3145:   MG_SSL_ERROR = -3,",
          "3146: };",
          "3148: struct mg_ssl_if_conn_params {",
          "3149:   const char *cert;",
          "3150:   const char *key;",
          "3151:   const char *ca_cert;",
          "3152:   const char *server_name;",
          "3153:   const char *cipher_suites;",
          "3154:   const char *psk_identity;",
          "3155:   const char *psk_key;",
          "3156: };",
          "3158: enum mg_ssl_if_result mg_ssl_if_conn_init(",
          "3159:     struct mg_connection *nc, const struct mg_ssl_if_conn_params *params,",
          "3160:     const char **err_msg);",
          "3161: enum mg_ssl_if_result mg_ssl_if_conn_accept(struct mg_connection *nc,",
          "3162:                                             struct mg_connection *lc);",
          "3163: void mg_ssl_if_conn_close_notify(struct mg_connection *nc);",
          "3164: void mg_ssl_if_conn_free(struct mg_connection *nc);",
          "3166: enum mg_ssl_if_result mg_ssl_if_handshake(struct mg_connection *nc);",
          "3167: int mg_ssl_if_read(struct mg_connection *nc, void *buf, size_t buf_size);",
          "3168: int mg_ssl_if_write(struct mg_connection *nc, const void *data, size_t len);",
          "3170: #ifdef __cplusplus",
          "3171: }",
          "3177: #ifdef MG_MODULE_LINES",
          "3178: #line 1 \"mongoose/src/net.h\"",
          "3179: #endif",
          "3207: #ifndef CS_MONGOOSE_SRC_NET_H_",
          "3208: #define CS_MONGOOSE_SRC_NET_H_",
          "3210: #if MG_ENABLE_JAVASCRIPT",
          "3211: #define EXCLUDE_COMMON",
          "3212: #include <v7.h>",
          "3213: #endif",
          "3219: #ifndef MG_VPRINTF_BUFFER_SIZE",
          "3220: #define MG_VPRINTF_BUFFER_SIZE 100",
          "3221: #endif",
          "3223: #ifdef MG_USE_READ_WRITE",
          "3224: #define MG_RECV_FUNC(s, b, l, f) read(s, b, l)",
          "3225: #define MG_SEND_FUNC(s, b, l, f) write(s, b, l)",
          "3226: #else",
          "3227: #define MG_RECV_FUNC(s, b, l, f) recv(s, b, l, f)",
          "3228: #define MG_SEND_FUNC(s, b, l, f) send(s, b, l, f)",
          "3229: #endif",
          "3231: #ifdef __cplusplus",
          "3232: extern \"C\" {",
          "3235: union socket_address {",
          "3236:   struct sockaddr sa;",
          "3237:   struct sockaddr_in sin;",
          "3238: #if MG_ENABLE_IPV6",
          "3239:   struct sockaddr_in6 sin6;",
          "3240: #else",
          "3241:   struct sockaddr sin6;",
          "3242: #endif",
          "3243: };",
          "3245: struct mg_connection;",
          "3251: typedef void (*mg_event_handler_t)(struct mg_connection *nc, int ev,",
          "3252:                                    void *ev_data MG_UD_ARG(void *user_data));",
          "3266: struct mg_mgr {",
          "3267:   struct mg_connection *active_connections;",
          "3268: #if MG_ENABLE_HEXDUMP",
          "3270: #endif",
          "3271: #if MG_ENABLE_BROADCAST",
          "3273: #endif",
          "3275:   int num_ifaces;",
          "3277: #if MG_ENABLE_JAVASCRIPT",
          "3278:   struct v7 *v7;",
          "3279: #endif",
          "3281: };",
          "3286: struct mg_connection {",
          "3292:   int err;",
          "3299: #if MG_ENABLE_SSL",
          "3301: #endif",
          "3304:   void (*proto_data_destructor)(void *proto_data);",
          "3307:   union {",
          "3308:     void *v;",
          "3313:     mg_event_handler_t f;",
          "3314:   } priv_1;",
          "3315:   void *priv_2;",
          "3317:   struct mg_iface *iface;",
          "3318:   unsigned long flags;",
          "3339: #define MG_F_USER_2 (1 << 21)",
          "3340: #define MG_F_USER_3 (1 << 22)",
          "3341: #define MG_F_USER_4 (1 << 23)",
          "3342: #define MG_F_USER_5 (1 << 24)",
          "3343: #define MG_F_USER_6 (1 << 25)",
          "3344: };",
          "3354: void mg_mgr_init(struct mg_mgr *mgr, void *user_data);",
          "3371: struct mg_mgr_init_opts {",
          "3372:   const struct mg_iface_vtable *main_iface;",
          "3373:   int num_ifaces;",
          "3374:   const struct mg_iface_vtable **ifaces;",
          "3375:   const char *nameserver;",
          "3376: };",
          "3384: void mg_mgr_init_opt(struct mg_mgr *mgr, void *user_data,",
          "3385:                      struct mg_mgr_init_opts opts);",
          "3392: void mg_mgr_free(struct mg_mgr *);",
          "3402: time_t mg_mgr_poll(struct mg_mgr *, int milli);",
          "3404: #if MG_ENABLE_BROADCAST",
          "3417: void mg_broadcast(struct mg_mgr *mgr, mg_event_handler_t cb, void *data,",
          "3418:                   size_t len);",
          "3419: #endif",
          "3434: struct mg_connection *mg_next(struct mg_mgr *mgr, struct mg_connection *c);",
          "3442: struct mg_add_sock_opts {",
          "3447: };",
          "3455: struct mg_connection *mg_add_sock(struct mg_mgr *mgr, sock_t sock,",
          "3456:                                   MG_CB(mg_event_handler_t handler,",
          "3457:                                         void *user_data));",
          "3465: struct mg_connection *mg_add_sock_opt(struct mg_mgr *mgr, sock_t sock,",
          "3466:                                       MG_CB(mg_event_handler_t handler,",
          "3467:                                             void *user_data),",
          "3468:                                       struct mg_add_sock_opts opts);",
          "3476: struct mg_bind_opts {",
          "3481: #if MG_ENABLE_SSL",
          "3488:   const char *ssl_cert;",
          "3491:   const char *ssl_key;",
          "3493:   const char *ssl_ca_cert;",
          "3505:   const char *ssl_cipher_suites;",
          "3506: #endif",
          "3507: };",
          "3514: struct mg_connection *mg_bind(struct mg_mgr *mgr, const char *address,",
          "3515:                               MG_CB(mg_event_handler_t handler,",
          "3516:                                     void *user_data));",
          "3535: struct mg_connection *mg_bind_opt(struct mg_mgr *mgr, const char *address,",
          "3536:                                   MG_CB(mg_event_handler_t handler,",
          "3537:                                         void *user_data),",
          "3538:                                   struct mg_bind_opts opts);",
          "3541: struct mg_connect_opts {",
          "3547: #if MG_ENABLE_SSL",
          "3552:   const char *ssl_cert;",
          "3557:   const char *ssl_key;",
          "3562:   const char *ssl_ca_cert;",
          "3574:   const char *ssl_cipher_suites;",
          "3582:   const char *ssl_server_name;",
          "3590:   const char *ssl_psk_identity;",
          "3591:   const char *ssl_psk_key;",
          "3592: #endif",
          "3593: };",
          "3600: struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *address,",
          "3601:                                  MG_CB(mg_event_handler_t handler,",
          "3602:                                        void *user_data));",
          "3652: struct mg_connection *mg_connect_opt(struct mg_mgr *mgr, const char *address,",
          "3653:                                      MG_CB(mg_event_handler_t handler,",
          "3654:                                            void *user_data),",
          "3655:                                      struct mg_connect_opts opts);",
          "3657: #if MG_ENABLE_SSL && MG_NET_IF != MG_NET_IF_SIMPLELINK",
          "3672: const char *mg_set_ssl(struct mg_connection *nc, const char *cert,",
          "3673:                        const char *ca_cert);",
          "3674: #endif",
          "3683: void mg_send(struct mg_connection *, const void *buf, int len);",
          "3686: #if defined(__GNUC__)",
          "3687: __attribute__((format(printf, 2, 3)))",
          "3688: #endif",
          "3696: int mg_printf(struct mg_connection *, const char *fmt, ...);",
          "3699: int mg_vprintf(struct mg_connection *, const char *fmt, va_list ap);",
          "3706: int mg_socketpair(sock_t[2], int sock_type);",
          "3708: #if MG_ENABLE_SYNC_RESOLVER",
          "3719: int mg_resolve(const char *domain_name, char *ip_addr_buf, size_t buf_len);",
          "3720: #endif",
          "3742: int mg_check_ip_acl(const char *acl, uint32_t remote_ip);",
          "3744: #if MG_ENABLE_JAVASCRIPT",
          "3751: enum v7_err mg_enable_javascript(struct mg_mgr *m, struct v7 *v7,",
          "3752:                                  const char *init_js_file_name);",
          "3753: #endif",
          "3779: double mg_set_timer(struct mg_connection *c, double timestamp);",
          "3784: double mg_time(void);",
          "3786: #ifdef __cplusplus",
          "3787: }",
          "3791: #ifdef MG_MODULE_LINES",
          "3792: #line 1 \"mongoose/src/uri.h\"",
          "3793: #endif",
          "3803: #ifndef CS_MONGOOSE_SRC_URI_H_",
          "3804: #define CS_MONGOOSE_SRC_URI_H_",
          "3808: #ifdef __cplusplus",
          "3809: extern \"C\" {",
          "3835: int mg_parse_uri(struct mg_str uri, struct mg_str *scheme,",
          "3836:                  struct mg_str *user_info, struct mg_str *host,",
          "3837:                  unsigned int *port, struct mg_str *path, struct mg_str *query,",
          "3838:                  struct mg_str *fragment);",
          "3840: int mg_normalize_uri_path(const struct mg_str *in, struct mg_str *out);",
          "3842: #ifdef __cplusplus",
          "3843: }",
          "3846: #ifdef MG_MODULE_LINES",
          "3847: #line 1 \"mongoose/src/util.h\"",
          "3848: #endif",
          "3858: #ifndef CS_MONGOOSE_SRC_UTIL_H_",
          "3859: #define CS_MONGOOSE_SRC_UTIL_H_",
          "3861: #include <stdio.h>",
          "3866: #ifdef __cplusplus",
          "3867: extern \"C\" {",
          "3870: #ifndef MAX_PATH_SIZE",
          "3871: #define MAX_PATH_SIZE 500",
          "3872: #endif",
          "3883: const char *mg_skip(const char *s, const char *end_string,",
          "3884:                     const char *delimiters, struct mg_str *v);",
          "3896: int mg_base64_decode(const unsigned char *s, int len, char *dst);",
          "3903: void mg_base64_encode(const unsigned char *src, int src_len, char *dst);",
          "3905: #if MG_ENABLE_FILESYSTEM",
          "3913: int mg_stat(const char *path, cs_stat_t *st);",
          "3922: FILE *mg_fopen(const char *path, const char *mode);",
          "3931: int mg_open(const char *path, int flag, int mode);",
          "3938: size_t mg_fread(void *ptr, size_t size, size_t count, FILE *f);",
          "3945: size_t mg_fwrite(const void *ptr, size_t size, size_t count, FILE *f);",
          "3949: #if MG_ENABLE_THREADS",
          "3956: void *mg_start_thread(void *(*thread_func)(void *), void *thread_func_param);",
          "3957: #endif",
          "3959: void mg_set_close_on_exec(sock_t);",
          "3961: #define MG_SOCK_STRINGIFY_IP 1",
          "3962: #define MG_SOCK_STRINGIFY_PORT 2",
          "3963: #define MG_SOCK_STRINGIFY_REMOTE 4",
          "3977: void mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,",
          "3978:                          int flags);",
          "3979: #if MG_NET_IF == MG_NET_IF_SOCKET",
          "3981: void mg_sock_to_str(sock_t sock, char *buf, size_t len, int flags);",
          "3982: #endif",
          "3989: void mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,",
          "3990:                          int flags);",
          "3992: #if MG_ENABLE_HEXDUMP",
          "4001: int mg_hexdump(const void *buf, int len, char *dst, int dst_len);",
          "4004: void mg_hexdumpf(FILE *fp, const void *buf, int len);",
          "4013: void mg_hexdump_connection(struct mg_connection *nc, const char *path,",
          "4014:                            const void *buf, int num_bytes, int ev);",
          "4015: #endif",
          "4020: int mg_is_big_endian(void);",
          "4035: const char *mg_next_comma_list_entry(const char *list, struct mg_str *val,",
          "4036:                                      struct mg_str *eq_val);",
          "4045: int mg_match_prefix(const char *pattern, int pattern_len, const char *str);",
          "4046: int mg_match_prefix_n(const struct mg_str pattern, const struct mg_str str);",
          "4051: void mg_mbuf_append_base64_putc(char ch, void *user_data);",
          "4056: void mg_mbuf_append_base64(struct mbuf *mbuf, const void *data, size_t len);",
          "4063: void mg_basic_auth_header(const char *user, const char *pass, struct mbuf *buf);",
          "4065: #ifdef __cplusplus",
          "4066: }",
          "4069: #ifdef MG_MODULE_LINES",
          "4070: #line 1 \"mongoose/src/http.h\"",
          "4071: #endif",
          "4081: #ifndef CS_MONGOOSE_SRC_HTTP_H_",
          "4082: #define CS_MONGOOSE_SRC_HTTP_H_",
          "4084: #if MG_ENABLE_HTTP",
          "4089: #ifdef __cplusplus",
          "4090: extern \"C\" {",
          "4093: #ifndef MG_MAX_HTTP_HEADERS",
          "4094: #define MG_MAX_HTTP_HEADERS 20",
          "4095: #endif",
          "4097: #ifndef MG_MAX_HTTP_REQUEST_SIZE",
          "4098: #define MG_MAX_HTTP_REQUEST_SIZE 1024",
          "4099: #endif",
          "4101: #ifndef MG_MAX_PATH",
          "4102: #ifdef PATH_MAX",
          "4103: #define MG_MAX_PATH PATH_MAX",
          "4104: #else",
          "4105: #define MG_MAX_PATH 256",
          "4106: #endif",
          "4107: #endif",
          "4109: #ifndef MG_MAX_HTTP_SEND_MBUF",
          "4110: #define MG_MAX_HTTP_SEND_MBUF 1024",
          "4111: #endif",
          "4113: #ifndef MG_CGI_ENVIRONMENT_SIZE",
          "4114: #define MG_CGI_ENVIRONMENT_SIZE 8192",
          "4115: #endif",
          "4118: struct http_message {",
          "4127:   int resp_code;",
          "4128:   struct mg_str resp_status_msg;",
          "4138:   struct mg_str query_string;",
          "4141:   struct mg_str header_names[MG_MAX_HTTP_HEADERS];",
          "4142:   struct mg_str header_values[MG_MAX_HTTP_HEADERS];",
          "4146: };",
          "4148: #if MG_ENABLE_HTTP_WEBSOCKET",
          "4150: struct websocket_message {",
          "4151:   unsigned char *data;",
          "4152:   size_t size;",
          "4153:   unsigned char flags;",
          "4154: };",
          "4155: #endif",
          "4158: struct mg_http_multipart_part {",
          "4159:   const char *file_name;",
          "4160:   const char *var_name;",
          "4161:   struct mg_str data;",
          "4163:   void *user_data;",
          "4164: };",
          "4167: struct mg_ssi_call_ctx {",
          "4171: };",
          "4180: #if MG_ENABLE_HTTP_WEBSOCKET",
          "4185: #endif",
          "4187: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "4193: #define MG_EV_HTTP_MULTIPART_REQUEST_END 125",
          "4194: #endif",
          "4248: void mg_set_protocol_http_websocket(struct mg_connection *nc);",
          "4250: #if MG_ENABLE_HTTP_WEBSOCKET",
          "4265: void mg_send_websocket_handshake(struct mg_connection *nc, const char *uri,",
          "4266:                                  const char *extra_headers);",
          "4278: void mg_send_websocket_handshake2(struct mg_connection *nc, const char *path,",
          "4279:                                   const char *host, const char *protocol,",
          "4280:                                   const char *extra_headers);",
          "4283: void mg_send_websocket_handshake3(struct mg_connection *nc, const char *path,",
          "4284:                                   const char *host, const char *protocol,",
          "4285:                                   const char *extra_headers, const char *user,",
          "4286:                                   const char *pass);",
          "4307: struct mg_connection *mg_connect_ws(struct mg_mgr *mgr,",
          "4308:                                     MG_CB(mg_event_handler_t event_handler,",
          "4309:                                           void *user_data),",
          "4310:                                     const char *url, const char *protocol,",
          "4311:                                     const char *extra_headers);",
          "4319: struct mg_connection *mg_connect_ws_opt(",
          "4320:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "4321:     struct mg_connect_opts opts, const char *url, const char *protocol,",
          "4322:     const char *extra_headers);",
          "4342: void mg_send_websocket_frame(struct mg_connection *nc, int op_and_flags,",
          "4343:                              const void *data, size_t data_len);",
          "4350: void mg_send_websocket_framev(struct mg_connection *nc, int op_and_flags,",
          "4351:                               const struct mg_str *strings, int num_strings);",
          "4359: void mg_printf_websocket_frame(struct mg_connection *nc, int op_and_flags,",
          "4360:                                const char *fmt, ...);",
          "4363: #define WEBSOCKET_OP_CONTINUE 0",
          "4364: #define WEBSOCKET_OP_TEXT 1",
          "4365: #define WEBSOCKET_OP_BINARY 2",
          "4366: #define WEBSOCKET_OP_CLOSE 8",
          "4367: #define WEBSOCKET_OP_PING 9",
          "4368: #define WEBSOCKET_OP_PONG 10",
          "4382: #define WEBSOCKET_DONT_FIN 0x100",
          "4396: int mg_url_decode(const char *src, int src_len, char *dst, int dst_len,",
          "4397:                   int is_form_url_encoded);",
          "4399: #ifdef __cplusplus",
          "4400: }",
          "4406: #ifdef MG_MODULE_LINES",
          "4407: #line 1 \"mongoose/src/http_server.h\"",
          "4408: #endif",
          "4413: #ifndef CS_MONGOOSE_SRC_HTTP_SERVER_H_",
          "4414: #define CS_MONGOOSE_SRC_HTTP_SERVER_H_",
          "4416: #if MG_ENABLE_HTTP",
          "4418: #ifdef __cplusplus",
          "4419: extern \"C\" {",
          "4430: int mg_parse_http(const char *s, int n, struct http_message *hm, int is_req);",
          "4438: struct mg_str *mg_get_http_header(struct http_message *hm, const char *name);",
          "4455: int mg_http_parse_header(struct mg_str *hdr, const char *var_name, char *buf,",
          "4456:                          size_t buf_size);",
          "4464: int mg_get_http_basic_auth(struct http_message *hm, char *user, size_t user_len,",
          "4465:                            char *pass, size_t pass_len);",
          "4472: int mg_parse_http_basic_auth(struct mg_str *hdr, char *user, size_t user_len,",
          "4473:                              char *pass, size_t pass_len);",
          "4511: size_t mg_parse_multipart(const char *buf, size_t buf_len, char *var_name,",
          "4512:                           size_t var_name_len, char *file_name,",
          "4513:                           size_t file_name_len, const char **chunk,",
          "4514:                           size_t *chunk_len);",
          "4525: int mg_get_http_var(const struct mg_str *buf, const char *name, char *dst,",
          "4526:                     size_t dst_len);",
          "4528: #if MG_ENABLE_FILESYSTEM",
          "4533: struct mg_serve_http_opts {",
          "4535:   const char *document_root;",
          "4538:   const char *index_files;",
          "4549:   const char *per_directory_auth_file;",
          "4552:   const char *auth_domain;",
          "4562:   const char *global_auth_file;",
          "4565:   const char *enable_directory_listing;",
          "4625:   const char *ssi_pattern;",
          "4628:   const char *ip_acl;",
          "4630: #if MG_ENABLE_HTTP_URL_REWRITES",
          "4655:   const char *url_rewrites;",
          "4656: #endif",
          "4659:   const char *dav_document_root;",
          "4665:   const char *dav_auth_file;",
          "4668:   const char *hidden_file_pattern;",
          "4671:   const char *cgi_file_pattern;",
          "4674:   const char *cgi_interpreter;",
          "4680:   const char *custom_mime_types;",
          "4686:   const char *extra_headers;",
          "4687: };",
          "4709: void mg_serve_http(struct mg_connection *nc, struct http_message *hm,",
          "4710:                    struct mg_serve_http_opts opts);",
          "4731: void mg_http_serve_file(struct mg_connection *nc, struct http_message *hm,",
          "4732:                         const char *path, const struct mg_str mime_type,",
          "4733:                         const struct mg_str extra_headers);",
          "4735: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "4738: typedef struct mg_str (*mg_fu_fname_fn)(struct mg_connection *nc,",
          "4739:                                         struct mg_str fname);",
          "4773: void mg_file_upload_handler(struct mg_connection *nc, int ev, void *ev_data,",
          "4774:                             mg_fu_fname_fn local_name_fn",
          "4775:                                 MG_UD_ARG(void *user_data));",
          "4806: void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,",
          "4807:                                MG_CB(mg_event_handler_t handler,",
          "4808:                                      void *user_data));",
          "4814: int mg_http_check_digest_auth(struct http_message *hm, const char *auth_domain,",
          "4815:                               FILE *fp);",
          "4835: void mg_send_http_chunk(struct mg_connection *nc, const char *buf, size_t len);",
          "4841: void mg_printf_http_chunk(struct mg_connection *nc, const char *fmt, ...);",
          "4856: void mg_send_response_line(struct mg_connection *nc, int status_code,",
          "4857:                            const char *extra_headers);",
          "4863: void mg_http_send_error(struct mg_connection *nc, int code, const char *reason);",
          "4876: void mg_http_send_redirect(struct mg_connection *nc, int status_code,",
          "4877:                            const struct mg_str location,",
          "4878:                            const struct mg_str extra_headers);",
          "4894: void mg_send_head(struct mg_connection *n, int status_code,",
          "4895:                   int64_t content_length, const char *extra_headers);",
          "4900: void mg_printf_html_escape(struct mg_connection *nc, const char *fmt, ...);",
          "4902: #if MG_ENABLE_HTTP_URL_REWRITES",
          "4913: void mg_http_reverse_proxy(struct mg_connection *nc,",
          "4914:                            const struct http_message *hm, struct mg_str mount,",
          "4915:                            struct mg_str upstream);",
          "4916: #endif",
          "4918: #ifdef __cplusplus",
          "4919: }",
          "4925: #ifdef MG_MODULE_LINES",
          "4926: #line 1 \"mongoose/src/http_client.h\"",
          "4927: #endif",
          "4932: #ifndef CS_MONGOOSE_SRC_HTTP_CLIENT_H_",
          "4933: #define CS_MONGOOSE_SRC_HTTP_CLIENT_H_",
          "4935: #ifdef __cplusplus",
          "4936: extern \"C\" {",
          "4963: struct mg_connection *mg_connect_http(",
          "4964:     struct mg_mgr *mgr,",
          "4965:     MG_CB(mg_event_handler_t event_handler, void *user_data), const char *url,",
          "4966:     const char *extra_headers, const char *post_data);",
          "4975: struct mg_connection *mg_connect_http_opt(",
          "4976:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "4977:     struct mg_connect_opts opts, const char *url, const char *extra_headers,",
          "4978:     const char *post_data);",
          "4981: int mg_http_create_digest_auth_header(char *buf, size_t buf_len,",
          "4982:                                       const char *method, const char *uri,",
          "4983:                                       const char *auth_domain, const char *user,",
          "4984:                                       const char *passwd);",
          "4986: #ifdef __cplusplus",
          "4987: }",
          "4990: #ifdef MG_MODULE_LINES",
          "4991: #line 1 \"mongoose/src/mqtt.h\"",
          "4992: #endif",
          "5014: #ifndef CS_MONGOOSE_SRC_MQTT_H_",
          "5015: #define CS_MONGOOSE_SRC_MQTT_H_",
          "5019: struct mg_mqtt_message {",
          "5020:   int cmd;",
          "5021:   int qos;",
          "5022:   struct mg_str topic;",
          "5023:   struct mg_str payload;",
          "5029:   uint8_t protocol_version;",
          "5030:   uint8_t connect_flags;",
          "5031:   uint16_t keep_alive_timer;",
          "5032:   struct mg_str protocol_name;",
          "5033:   struct mg_str client_id;",
          "5034:   struct mg_str will_topic;",
          "5035:   struct mg_str will_message;",
          "5036:   struct mg_str user_name;",
          "5037:   struct mg_str password;",
          "5038: };",
          "5040: struct mg_mqtt_topic_expression {",
          "5041:   const char *topic;",
          "5042:   uint8_t qos;",
          "5043: };",
          "5045: struct mg_send_mqtt_handshake_opts {",
          "5047:   uint16_t keep_alive;",
          "5048:   const char *will_topic;",
          "5049:   const char *will_message;",
          "5050:   const char *user_name;",
          "5051:   const char *password;",
          "5052: };",
          "5055: struct mg_mqtt_proto_data {",
          "5056:   uint16_t keep_alive;",
          "5057: };",
          "5060: #define MG_MQTT_CMD_CONNECT 1",
          "5061: #define MG_MQTT_CMD_CONNACK 2",
          "5062: #define MG_MQTT_CMD_PUBLISH 3",
          "5063: #define MG_MQTT_CMD_PUBACK 4",
          "5064: #define MG_MQTT_CMD_PUBREC 5",
          "5065: #define MG_MQTT_CMD_PUBREL 6",
          "5066: #define MG_MQTT_CMD_PUBCOMP 7",
          "5067: #define MG_MQTT_CMD_SUBSCRIBE 8",
          "5068: #define MG_MQTT_CMD_SUBACK 9",
          "5069: #define MG_MQTT_CMD_UNSUBSCRIBE 10",
          "5070: #define MG_MQTT_CMD_UNSUBACK 11",
          "5071: #define MG_MQTT_CMD_PINGREQ 12",
          "5072: #define MG_MQTT_CMD_PINGRESP 13",
          "5073: #define MG_MQTT_CMD_DISCONNECT 14",
          "5076: #define MG_MQTT_EVENT_BASE 200",
          "5077: #define MG_EV_MQTT_CONNECT (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_CONNECT)",
          "5078: #define MG_EV_MQTT_CONNACK (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_CONNACK)",
          "5079: #define MG_EV_MQTT_PUBLISH (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PUBLISH)",
          "5080: #define MG_EV_MQTT_PUBACK (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PUBACK)",
          "5081: #define MG_EV_MQTT_PUBREC (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PUBREC)",
          "5082: #define MG_EV_MQTT_PUBREL (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PUBREL)",
          "5083: #define MG_EV_MQTT_PUBCOMP (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PUBCOMP)",
          "5084: #define MG_EV_MQTT_SUBSCRIBE (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_SUBSCRIBE)",
          "5085: #define MG_EV_MQTT_SUBACK (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_SUBACK)",
          "5086: #define MG_EV_MQTT_UNSUBSCRIBE (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_UNSUBSCRIBE)",
          "5087: #define MG_EV_MQTT_UNSUBACK (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_UNSUBACK)",
          "5088: #define MG_EV_MQTT_PINGREQ (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PINGREQ)",
          "5089: #define MG_EV_MQTT_PINGRESP (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_PINGRESP)",
          "5090: #define MG_EV_MQTT_DISCONNECT (MG_MQTT_EVENT_BASE + MG_MQTT_CMD_DISCONNECT)",
          "5093: #define MG_MQTT_RETAIN 0x1",
          "5094: #define MG_MQTT_DUP 0x4",
          "5095: #define MG_MQTT_QOS(qos) ((qos) << 1)",
          "5096: #define MG_MQTT_GET_QOS(flags) (((flags) &0x6) >> 1)",
          "5097: #define MG_MQTT_SET_QOS(flags, qos) (flags) = ((flags) & ~0x6) | ((qos) << 1)",
          "5100: #define MG_MQTT_CLEAN_SESSION 0x02",
          "5101: #define MG_MQTT_HAS_WILL 0x04",
          "5102: #define MG_MQTT_WILL_RETAIN 0x20",
          "5103: #define MG_MQTT_HAS_PASSWORD 0x40",
          "5104: #define MG_MQTT_HAS_USER_NAME 0x80",
          "5105: #define MG_MQTT_GET_WILL_QOS(flags) (((flags) &0x18) >> 3)",
          "5106: #define MG_MQTT_SET_WILL_QOS(flags, qos) \\",
          "5107:   (flags) = ((flags) & ~0x18) | ((qos) << 3)",
          "5110: #define MG_EV_MQTT_CONNACK_ACCEPTED 0",
          "5111: #define MG_EV_MQTT_CONNACK_UNACCEPTABLE_VERSION 1",
          "5112: #define MG_EV_MQTT_CONNACK_IDENTIFIER_REJECTED 2",
          "5113: #define MG_EV_MQTT_CONNACK_SERVER_UNAVAILABLE 3",
          "5114: #define MG_EV_MQTT_CONNACK_BAD_AUTH 4",
          "5115: #define MG_EV_MQTT_CONNACK_NOT_AUTHORIZED 5",
          "5117: #ifdef __cplusplus",
          "5118: extern \"C\" {",
          "5134: void mg_set_protocol_mqtt(struct mg_connection *nc);",
          "5137: void mg_send_mqtt_handshake(struct mg_connection *nc, const char *client_id);",
          "5140: void mg_send_mqtt_handshake_opt(struct mg_connection *nc, const char *client_id,",
          "5141:                                 struct mg_send_mqtt_handshake_opts);",
          "5144: void mg_mqtt_publish(struct mg_connection *nc, const char *topic,",
          "5145:                      uint16_t message_id, int flags, const void *data,",
          "5146:                      size_t len);",
          "5149: void mg_mqtt_subscribe(struct mg_connection *nc,",
          "5150:                        const struct mg_mqtt_topic_expression *topics,",
          "5151:                        size_t topics_len, uint16_t message_id);",
          "5154: void mg_mqtt_unsubscribe(struct mg_connection *nc, char **topics,",
          "5155:                          size_t topics_len, uint16_t message_id);",
          "5158: void mg_mqtt_disconnect(struct mg_connection *nc);",
          "5161: void mg_mqtt_connack(struct mg_connection *nc, uint8_t return_code);",
          "5164: void mg_mqtt_puback(struct mg_connection *nc, uint16_t message_id);",
          "5167: void mg_mqtt_pubrec(struct mg_connection *nc, uint16_t message_id);",
          "5170: void mg_mqtt_pubrel(struct mg_connection *nc, uint16_t message_id);",
          "5173: void mg_mqtt_pubcomp(struct mg_connection *nc, uint16_t message_id);",
          "5179: void mg_mqtt_suback(struct mg_connection *nc, uint8_t *qoss, size_t qoss_len,",
          "5180:                     uint16_t message_id);",
          "5183: void mg_mqtt_unsuback(struct mg_connection *nc, uint16_t message_id);",
          "5186: void mg_mqtt_ping(struct mg_connection *nc);",
          "5189: void mg_mqtt_pong(struct mg_connection *nc);",
          "5198: int mg_mqtt_next_subscribe_topic(struct mg_mqtt_message *msg,",
          "5199:                                  struct mg_str *topic, uint8_t *qos, int pos);",
          "5206: int mg_mqtt_match_topic_expression(struct mg_str exp, struct mg_str topic);",
          "5212: int mg_mqtt_vmatch_topic_expression(const char *exp, struct mg_str topic);",
          "5214: #ifdef __cplusplus",
          "5215: }",
          "5219: #ifdef MG_MODULE_LINES",
          "5220: #line 1 \"mongoose/src/mqtt_server.h\"",
          "5221: #endif",
          "5243: #ifndef CS_MONGOOSE_SRC_MQTT_BROKER_H_",
          "5244: #define CS_MONGOOSE_SRC_MQTT_BROKER_H_",
          "5246: #if MG_ENABLE_MQTT_BROKER",
          "5251: #ifdef __cplusplus",
          "5252: extern \"C\" {",
          "5255: #define MG_MQTT_MAX_SESSION_SUBSCRIPTIONS 512;",
          "5257: struct mg_mqtt_broker;",
          "5260: struct mg_mqtt_session {",
          "5266:   struct mg_mqtt_topic_expression *subscriptions;",
          "5267: };",
          "5270: struct mg_mqtt_broker {",
          "5273: };",
          "5276: void mg_mqtt_broker_init(struct mg_mqtt_broker *brk, void *user_data);",
          "5303: void mg_mqtt_broker(struct mg_connection *brk, int ev, void *data);",
          "5315: struct mg_mqtt_session *mg_mqtt_next(struct mg_mqtt_broker *brk,",
          "5316:                                      struct mg_mqtt_session *s);",
          "5318: #ifdef __cplusplus",
          "5319: }",
          "5324: #ifdef MG_MODULE_LINES",
          "5325: #line 1 \"mongoose/src/dns.h\"",
          "5326: #endif",
          "5336: #ifndef CS_MONGOOSE_SRC_DNS_H_",
          "5337: #define CS_MONGOOSE_SRC_DNS_H_",
          "5341: #ifdef __cplusplus",
          "5342: extern \"C\" {",
          "5353: #define MG_MAX_DNS_QUESTIONS 32",
          "5354: #define MG_MAX_DNS_ANSWERS 32",
          "5358: enum mg_dns_resource_record_kind {",
          "5359:   MG_DNS_INVALID_RECORD = 0,",
          "5360:   MG_DNS_QUESTION,",
          "5361:   MG_DNS_ANSWER",
          "5362: };",
          "5365: struct mg_dns_resource_record {",
          "5367:   int rtype;",
          "5368:   int rclass;",
          "5369:   int ttl;",
          "5370:   enum mg_dns_resource_record_kind kind;",
          "5372: };",
          "5375: struct mg_dns_message {",
          "5377:   uint16_t flags;",
          "5378:   uint16_t transaction_id;",
          "5379:   int num_questions;",
          "5380:   int num_answers;",
          "5381:   struct mg_dns_resource_record questions[MG_MAX_DNS_QUESTIONS];",
          "5382:   struct mg_dns_resource_record answers[MG_MAX_DNS_ANSWERS];",
          "5383: };",
          "5385: struct mg_dns_resource_record *mg_dns_next_record(",
          "5386:     struct mg_dns_message *msg, int query, struct mg_dns_resource_record *prev);",
          "5399: int mg_dns_parse_record_data(struct mg_dns_message *msg,",
          "5400:                              struct mg_dns_resource_record *rr, void *data,",
          "5401:                              size_t data_len);",
          "5406: void mg_send_dns_query(struct mg_connection *nc, const char *name,",
          "5407:                        int query_type);",
          "5414: int mg_dns_insert_header(struct mbuf *io, size_t pos,",
          "5415:                          struct mg_dns_message *msg);",
          "5425: int mg_dns_copy_questions(struct mbuf *io, struct mg_dns_message *msg);",
          "5443: int mg_dns_encode_record(struct mbuf *io, struct mg_dns_resource_record *rr,",
          "5444:                          const char *name, size_t nlen, const void *rdata,",
          "5445:                          size_t rlen);",
          "5450: int mg_dns_encode_name(struct mbuf *io, const char *name, size_t len);",
          "5453: int mg_parse_dns(const char *buf, int len, struct mg_dns_message *msg);",
          "5468: size_t mg_dns_uncompress_name(struct mg_dns_message *msg, struct mg_str *name,",
          "5469:                               char *dst, int dst_len);",
          "5483: void mg_set_protocol_dns(struct mg_connection *nc);",
          "5485: #ifdef __cplusplus",
          "5486: }",
          "5489: #ifdef MG_MODULE_LINES",
          "5490: #line 1 \"mongoose/src/dns_server.h\"",
          "5491: #endif",
          "5503: #ifndef CS_MONGOOSE_SRC_DNS_SERVER_H_",
          "5504: #define CS_MONGOOSE_SRC_DNS_SERVER_H_",
          "5506: #if MG_ENABLE_DNS_SERVER",
          "5510: #ifdef __cplusplus",
          "5511: extern \"C\" {",
          "5514: #define MG_DNS_SERVER_DEFAULT_TTL 3600",
          "5516: struct mg_dns_reply {",
          "5517:   struct mg_dns_message *msg;",
          "5518:   struct mbuf *io;",
          "5519:   size_t start;",
          "5520: };",
          "5550: struct mg_dns_reply mg_dns_create_reply(struct mbuf *io,",
          "5551:                                         struct mg_dns_message *msg);",
          "5561: int mg_dns_reply_record(struct mg_dns_reply *reply,",
          "5562:                         struct mg_dns_resource_record *question,",
          "5563:                         const char *name, int rtype, int ttl, const void *rdata,",
          "5564:                         size_t rdata_len);",
          "5578: void mg_dns_send_reply(struct mg_connection *nc, struct mg_dns_reply *r);",
          "5580: #ifdef __cplusplus",
          "5581: }",
          "5586: #ifdef MG_MODULE_LINES",
          "5587: #line 1 \"mongoose/src/resolv.h\"",
          "5588: #endif",
          "5598: #ifndef CS_MONGOOSE_SRC_RESOLV_H_",
          "5599: #define CS_MONGOOSE_SRC_RESOLV_H_",
          "5603: #ifdef __cplusplus",
          "5604: extern \"C\" {",
          "5607: enum mg_resolve_err {",
          "5608:   MG_RESOLVE_OK = 0,",
          "5609:   MG_RESOLVE_NO_ANSWERS = 1,",
          "5610:   MG_RESOLVE_EXCEEDED_RETRY_COUNT = 2,",
          "5611:   MG_RESOLVE_TIMEOUT = 3",
          "5612: };",
          "5614: typedef void (*mg_resolve_callback_t)(struct mg_dns_message *dns_message,",
          "5615:                                       void *user_data, enum mg_resolve_err);",
          "5618: struct mg_resolve_async_opts {",
          "5619:   const char *nameserver;",
          "5625: };",
          "5628: int mg_resolve_async(struct mg_mgr *mgr, const char *name, int query,",
          "5629:                      mg_resolve_callback_t cb, void *data);",
          "5632: void mg_set_nameserver(struct mg_mgr *mgr, const char *nameserver);",
          "5655: int mg_resolve_async_opt(struct mg_mgr *mgr, const char *name, int query,",
          "5656:                          mg_resolve_callback_t cb, void *data,",
          "5657:                          struct mg_resolve_async_opts opts);",
          "5664: int mg_resolve_from_hosts_file(const char *host, union socket_address *usa);",
          "5666: #ifdef __cplusplus",
          "5667: }",
          "5670: #ifdef MG_MODULE_LINES",
          "5671: #line 1 \"mongoose/src/coap.h\"",
          "5672: #endif",
          "5704: #ifndef CS_MONGOOSE_SRC_COAP_H_",
          "5705: #define CS_MONGOOSE_SRC_COAP_H_",
          "5707: #if MG_ENABLE_COAP",
          "5709: #define MG_COAP_MSG_TYPE_FIELD 0x2",
          "5710: #define MG_COAP_CODE_CLASS_FIELD 0x4",
          "5711: #define MG_COAP_CODE_DETAIL_FIELD 0x8",
          "5712: #define MG_COAP_MSG_ID_FIELD 0x10",
          "5713: #define MG_COAP_TOKEN_FIELD 0x20",
          "5714: #define MG_COAP_OPTIOMG_FIELD 0x40",
          "5715: #define MG_COAP_PAYLOAD_FIELD 0x80",
          "5717: #define MG_COAP_ERROR 0x10000",
          "5718: #define MG_COAP_FORMAT_ERROR (MG_COAP_ERROR | 0x20000)",
          "5719: #define MG_COAP_IGNORE (MG_COAP_ERROR | 0x40000)",
          "5720: #define MG_COAP_NOT_ENOUGH_DATA (MG_COAP_ERROR | 0x80000)",
          "5721: #define MG_COAP_NETWORK_ERROR (MG_COAP_ERROR | 0x100000)",
          "5723: #define MG_COAP_MSG_CON 0",
          "5724: #define MG_COAP_MSG_NOC 1",
          "5725: #define MG_COAP_MSG_ACK 2",
          "5726: #define MG_COAP_MSG_RST 3",
          "5727: #define MG_COAP_MSG_MAX 3",
          "5729: #define MG_COAP_CODECLASS_REQUEST 0",
          "5730: #define MG_COAP_CODECLASS_RESP_OK 2",
          "5731: #define MG_COAP_CODECLASS_CLIENT_ERR 4",
          "5732: #define MG_COAP_CODECLASS_SRV_ERR 5",
          "5734: #define MG_COAP_EVENT_BASE 300",
          "5735: #define MG_EV_COAP_CON (MG_COAP_EVENT_BASE + MG_COAP_MSG_CON)",
          "5736: #define MG_EV_COAP_NOC (MG_COAP_EVENT_BASE + MG_COAP_MSG_NOC)",
          "5737: #define MG_EV_COAP_ACK (MG_COAP_EVENT_BASE + MG_COAP_MSG_ACK)",
          "5738: #define MG_EV_COAP_RST (MG_COAP_EVENT_BASE + MG_COAP_MSG_RST)",
          "5745: struct mg_coap_option {",
          "5746:   struct mg_coap_option *next;",
          "5747:   uint32_t number;",
          "5748:   struct mg_str value;",
          "5749: };",
          "5752: struct mg_coap_message {",
          "5753:   uint32_t flags;",
          "5754:   uint8_t msg_type;",
          "5755:   uint8_t code_class;",
          "5756:   uint8_t code_detail;",
          "5757:   uint16_t msg_id;",
          "5758:   struct mg_str token;",
          "5759:   struct mg_coap_option *options;",
          "5760:   struct mg_str payload;",
          "5761:   struct mg_coap_option *optiomg_tail;",
          "5762: };",
          "5764: #ifdef __cplusplus",
          "5765: extern \"C\" {",
          "5769: int mg_set_protocol_coap(struct mg_connection *nc);",
          "5776: struct mg_coap_option *mg_coap_add_option(struct mg_coap_message *cm,",
          "5777:                                           uint32_t number, char *value,",
          "5778:                                           size_t len);",
          "5784: void mg_coap_free_options(struct mg_coap_message *cm);",
          "5797: uint32_t mg_coap_send_message(struct mg_connection *nc,",
          "5798:                               struct mg_coap_message *cm);",
          "5805: uint32_t mg_coap_send_ack(struct mg_connection *nc, uint16_t msg_id);",
          "5822: uint32_t mg_coap_parse(struct mbuf *io, struct mg_coap_message *cm);",
          "5829: uint32_t mg_coap_compose(struct mg_coap_message *cm, struct mbuf *io);",
          "5831: #ifdef __cplusplus",
          "5832: }",
          "5838: #ifdef MG_MODULE_LINES",
          "5839: #line 1 \"mongoose/src/sntp.h\"",
          "5840: #endif",
          "5846: #ifndef CS_MONGOOSE_SRC_SNTP_H_",
          "5847: #define CS_MONGOOSE_SRC_SNTP_H_",
          "5849: #if MG_ENABLE_SNTP",
          "5851: #define MG_SNTP_EVENT_BASE 500",
          "5857: #define MG_SNTP_REPLY (MG_SNTP_EVENT_BASE + 1)",
          "5860: #define MG_SNTP_MALFORMED_REPLY (MG_SNTP_EVENT_BASE + 2)",
          "5863: #define MG_SNTP_FAILED (MG_SNTP_EVENT_BASE + 3)",
          "5865: struct mg_sntp_message {",
          "5867:   int kiss_of_death;",
          "5869:   double time;",
          "5870: };",
          "5873: struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr,",
          "5874:                                       MG_CB(mg_event_handler_t event_handler,",
          "5875:                                             void *user_data),",
          "5876:                                       const char *sntp_server_name);",
          "5879: void mg_sntp_send_request(struct mg_connection *c);",
          "5888: struct mg_connection *mg_sntp_get_time(struct mg_mgr *mgr,",
          "5889:                                        mg_event_handler_t event_handler,",
          "5890:                                        const char *sntp_server_name);",
          "5892: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}