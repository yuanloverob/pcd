{
  "cve_id": "CVE-2014-9620",
  "cve_desc": "The ELF parser in file 5.08 through 5.21 allows remote attackers to cause a denial of service via a large number of notes.",
  "repo": "file/file",
  "patch_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
  "patch_info": {
    "commit_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "files": [
      "ChangeLog",
      "doc/file.man",
      "doc/libmagic.man",
      "src/apprentice.c",
      "src/elfclass.h",
      "src/file.c",
      "src/file.h",
      "src/file_opts.h",
      "src/magic.c",
      "src/magic.h.in",
      "src/readelf.c"
    ],
    "message": "- Add a limit to the number of ELF notes processed (Suggested by Alexander   Cherepanov) - Restructure ELF note printing so that we don't print the same message   multiple times on repeated notes of the same kind.",
    "before_after_code_files": [
      "src/apprentice.c||src/apprentice.c",
      "src/elfclass.h||src/elfclass.h",
      "src/file.c||src/file.c",
      "src/file.h||src/file.h",
      "src/file_opts.h||src/file_opts.h",
      "src/magic.c||src/magic.c",
      "src/magic.h.in||src/magic.h.in",
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/apprentice.c||src/apprentice.c": [
      "File: src/apprentice.c -> src/apprentice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.226 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "528:  ms->name_max = FILE_NAME_MAX;",
      "529:  ms->elf_shnum_max = FILE_ELF_SHNUM_MAX;",
      "530:  ms->elf_phnum_max = FILE_ELF_PHNUM_MAX;",
      "531:  return ms;",
      "532: free:",
      "533:  free(ms);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "531:  ms->elf_notes_max = FILE_ELF_NOTES_MAX;",
      "",
      "---------------"
    ],
    "src/elfclass.h||src/elfclass.h": [
      "File: src/elfclass.h -> src/elfclass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  swap = (u.c[sizeof(int32_t) - 1] + 1) != elfhdr.e_ident[EI_DATA];",
      "34:  type = elf_getu16(swap, elfhdr.e_type);",
      "35:  switch (type) {",
      "36: #ifdef ELFCORE",
      "37:  case ET_CORE:",
      "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
      "39:   if (phnum > ms->elf_phnum_max)",
      "41:   flags |= FLAGS_IS_CORE;",
      "42:   if (dophn_core(ms, clazz, swap, fd,",
      "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "44:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "46:    return -1;",
      "47:   break;",
      "48: #endif",
      "",
      "[Removed Lines]",
      "40:    return toomany(ms, \"program\", phnum);",
      "45:       fsize, &flags) == -1)",
      "",
      "[Added Lines]",
      "35:  notecount = ms->elf_notes_max;",
      "41:    return toomany(ms, \"program headers\", phnum);",
      "46:       fsize, &flags, &notecount) == -1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:   if (dophn_exec(ms, clazz, swap, fd,",
      "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "59:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "61:    return -1;",
      "63:  case ET_REL:",
      "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
      "65:   if (shnum > ms->elf_shnum_max)",
      "67:   if (doshn(ms, clazz, swap, fd,",
      "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
      "69:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
      "72:    return -1;",
      "73:   break;",
      "75:  default:",
      "76:   break;",
      "77:  }",
      "78:  return 1;",
      "",
      "[Removed Lines]",
      "60:       fsize, &flags, shnum) == -1)",
      "66:    return toomany(ms, \"section\", shnum);",
      "70:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
      "71:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
      "",
      "[Added Lines]",
      "61:       fsize, shnum, &flags, &notecount) == -1)",
      "67:    return toomany(ms, \"section headers\", shnum);",
      "71:       fsize, elf_getu16(swap, elfhdr.e_machine),",
      "72:       (int)elf_getu16(swap, elfhdr.e_shstrndx),",
      "73:       &flags, &notecount) == -1)",
      "80:  if (notecount == 0)",
      "81:   return toomany(ms, \"notes\", ms->elf_notes_max);",
      "",
      "---------------"
    ],
    "src/file.c||src/file.c": [
      "File: src/file.c -> src/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.158 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.159 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:  { \"name\", MAGIC_PARAM_NAME_MAX, 0 },",
      "126:  { \"elf_phnum\", MAGIC_PARAM_ELF_PHNUM_MAX, 0 },",
      "127:  { \"elf_shnum\", MAGIC_PARAM_ELF_SHNUM_MAX, 0 },",
      "128: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:  { \"elf_notes\", MAGIC_PARAM_ELF_NOTES_MAX, 0 },",
      "",
      "---------------"
    ],
    "src/file.h||src/file.h": [
      "File: src/file.h -> src/file.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "407:  uint16_t name_max;",
      "408:  uint16_t elf_shnum_max;",
      "409:  uint16_t elf_phnum_max;",
      "410: #define FILE_INDIR_MAX   15",
      "411: #define FILE_NAME_MAX   30",
      "412: #define FILE_ELF_SHNUM_MAX  32768",
      "413: #define FILE_ELF_PHNUM_MAX  128",
      "414: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:  uint16_t elf_notes_max;",
      "415: #define FILE_ELF_NOTES_MAX  256",
      "",
      "---------------"
    ],
    "src/file_opts.h||src/file_opts.h": [
      "File: src/file_opts.h -> src/file_opts.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: OPT('P', \"parameter\", 0, \"            set file engine parameter limits\\n\"",
      "47:     \"                               indir        15 recursion limit for indirection\\n\"",
      "48:     \"                               name         30 use limit for name/use magic\\n\"",
      "49:     \"                               elf_phnum   128 max ELF prog sections processed\\n\"",
      "50:     \"                               elf_shnum 32768 max ELF sections processed\\n\")",
      "51: OPT('r', \"raw\", 0, \"                  don't translate unprintable chars to \\\\ooo\\n\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:     \"                               elf_notes   256 max ELF notes processed\\n\"",
      "",
      "---------------"
    ],
    "src/magic.c||src/magic.c": [
      "File: src/magic.c -> src/magic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include \"file.h\"",
      "35: #ifndef lint",
      "39: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.89 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "[Added Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.90 2014/12/04 15:56:46 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "554:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "555:   ms->elf_shnum_max = *(const size_t *)val;",
      "556:   return 0;",
      "557:  default:",
      "558:   errno = EINVAL;",
      "559:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "557:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "558:   ms->elf_notes_max = *(const size_t *)val;",
      "559:   return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "576:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "578:   return 0;",
      "579:  default:",
      "580:   errno = EINVAL;",
      "581:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "584:   return 0;",
      "",
      "---------------"
    ],
    "src/magic.h.in||src/magic.h.in": [
      "File: src/magic.h.in -> src/magic.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "107: #define MAGIC_PARAM_NAME_MAX  1",
      "108: #define MAGIC_PARAM_ELF_PHNUM_MAX 2",
      "109: #define MAGIC_PARAM_ELF_SHNUM_MAX 3",
      "111: int magic_setparam(magic_t, int, const void *);",
      "112: int magic_getparam(magic_t, int, void *);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110: #define MAGIC_PARAM_ELF_NOTES_MAX 4",
      "",
      "---------------"
    ],
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.114 2014/12/11 14:19:36 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44: #ifdef ELFCORE",
      "45: private int dophn_core(struct magic_set *, int, int, int, off_t, int, size_t,",
      "47: #endif",
      "48: private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,",
      "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
      "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
      "55: #define ELF_ALIGN(a) ((((a) + align - 1) / align) * align)",
      "",
      "[Removed Lines]",
      "46:     off_t, int *);",
      "49:     off_t, int *, int);",
      "51:     off_t, int *, int, int);",
      "53:     int, size_t, int *);",
      "",
      "[Added Lines]",
      "46:     off_t, int *, uint16_t *);",
      "49:     off_t, int, int *, uint16_t *);",
      "51:     off_t, int, int, int *, uint16_t *);",
      "53:     int, size_t, int *, uint16_t *);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "67: private int",
      "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
      "69: {",
      "71:      ) == -1)",
      "72:   return -1;",
      "73:  return 0;",
      "",
      "[Removed Lines]",
      "70:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
      "",
      "[Added Lines]",
      "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "293:  \"NetBSD\",",
      "294: };",
      "302: private int",
      "303: dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "305: {",
      "306:  Elf32_Phdr ph32;",
      "307:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "296: #define FLAGS_DID_CORE  0x01",
      "297: #define FLAGS_DID_NOTE  0x02",
      "298: #define FLAGS_DID_BUILD_ID 0x04",
      "299: #define FLAGS_DID_CORE_STYLE 0x08",
      "300: #define FLAGS_IS_CORE  0x10",
      "304:     int num, size_t size, off_t fsize, int *flags)",
      "",
      "[Added Lines]",
      "296: #define FLAGS_DID_CORE   0x001",
      "297: #define FLAGS_DID_OS_NOTE  0x002",
      "298: #define FLAGS_DID_BUILD_ID  0x004",
      "299: #define FLAGS_DID_CORE_STYLE  0x008",
      "300: #define FLAGS_DID_NETBSD_PAX  0x010",
      "301: #define FLAGS_DID_NETBSD_MARCH  0x020",
      "302: #define FLAGS_DID_NETBSD_CMODEL  0x040",
      "303: #define FLAGS_DID_NETBSD_UNKNOWN 0x080",
      "304: #define FLAGS_IS_CORE   0x100",
      "308:     int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "347:    if (offset >= (size_t)bufsize)",
      "348:     break;",
      "349:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
      "351:    if (offset == 0)",
      "352:     break;",
      "",
      "[Removed Lines]",
      "350:        clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "354:        clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "477:  }",
      "478: }",
      "483: {",
      "542:  }",
      "548:  if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&",
      "550:      file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);",
      "551:  }",
      "552:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "554:   uint32_t desc[4];",
      "555:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
      "557:   if (file_printf(ms, \", for GNU/\") == -1)",
      "559:   switch (elf_getu32(swap, desc[0])) {",
      "560:   case GNU_OS_LINUX:",
      "561:    if (file_printf(ms, \"Linux\") == -1)",
      "563:    break;",
      "564:   case GNU_OS_HURD:",
      "565:    if (file_printf(ms, \"Hurd\") == -1)",
      "567:    break;",
      "568:   case GNU_OS_SOLARIS:",
      "569:    if (file_printf(ms, \"Solaris\") == -1)",
      "571:    break;",
      "572:   case GNU_OS_KFREEBSD:",
      "573:    if (file_printf(ms, \"kFreeBSD\") == -1)",
      "575:    break;",
      "576:   case GNU_OS_KNETBSD:",
      "577:    if (file_printf(ms, \"kNetBSD\") == -1)",
      "579:    break;",
      "580:   default:",
      "581:    if (file_printf(ms, \"<unknown>\") == -1)",
      "583:   }",
      "584:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
      "585:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
      "589:  }",
      "603:  }",
      "605:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&",
      "607:   static const char *pax[] = {",
      "608:       \"+mprotect\",",
      "609:       \"-mprotect\",",
      "",
      "[Removed Lines]",
      "480: private size_t",
      "481: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "482:     int clazz, int swap, size_t align, int *flags)",
      "484:  Elf32_Nhdr nh32;",
      "485:  Elf64_Nhdr nh64;",
      "486:  size_t noff, doff;",
      "487: #ifdef ELFCORE",
      "488:  int os_style = -1;",
      "489: #endif",
      "490:  uint32_t namesz, descsz;",
      "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "492:  char sbuf[512];",
      "494:  if (xnh_sizeof + offset > size) {",
      "498:   return xnh_sizeof + offset;",
      "499:  }",
      "501:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "502:  offset += xnh_sizeof;",
      "504:  namesz = xnh_namesz;",
      "505:  descsz = xnh_descsz;",
      "506:  if ((namesz == 0) && (descsz == 0)) {",
      "510:   return (offset >= size) ? offset : size;",
      "511:  }",
      "513:  if (namesz & 0x80000000) {",
      "514:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "515:   (unsigned long)namesz);",
      "516:      return 0;",
      "517:  }",
      "519:  if (descsz & 0x80000000) {",
      "520:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "521:   (unsigned long)descsz);",
      "522:      return 0;",
      "523:  }",
      "526:  noff = offset;",
      "527:  doff = ELF_ALIGN(offset + namesz);",
      "529:  if (offset + namesz > size) {",
      "533:   return doff;",
      "534:  }",
      "536:  offset = ELF_ALIGN(doff + descsz);",
      "537:  if (doff + descsz > size) {",
      "541:   return (offset >= size) ? offset : size;",
      "544:  if ((*flags & (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID)) ==",
      "545:      (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID))",
      "546:   goto core;",
      "549:      xnh_type == NT_GNU_VERSION && descsz == 2) {",
      "553:      xnh_type == NT_GNU_VERSION && descsz == 16) {",
      "558:    return size;",
      "562:     return size;",
      "566:     return size;",
      "570:     return size;",
      "574:     return size;",
      "578:     return size;",
      "582:     return size;",
      "586:    return size;",
      "588:   return size;",
      "591:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "592:      xnh_type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "593:      uint8_t desc[20];",
      "594:      uint32_t i;",
      "595:      if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "596:   \"sha1\") == -1)",
      "597:       return size;",
      "598:      (void)memcpy(desc, &nbuf[doff], descsz);",
      "599:      for (i = 0; i < descsz; i++)",
      "600:   if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "601:       return size;",
      "606:      xnh_type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "[Added Lines]",
      "484: private int",
      "485: do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "486:     int swap __attribute__((__unused__)), uint32_t namesz, uint32_t descsz,",
      "487:     size_t noff, size_t doff, int *flags)",
      "489:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "490:      type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "491:   uint8_t desc[20];",
      "492:   uint32_t i;",
      "494:   if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "495:       \"sha1\") == -1)",
      "496:    return 1;",
      "497:   (void)memcpy(desc, &nbuf[doff], descsz);",
      "498:   for (i = 0; i < descsz; i++)",
      "499:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "500:    return 1;",
      "501:   return 1;",
      "503:  return 0;",
      "504: }",
      "506: private int",
      "507: do_os_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "508:     int swap, uint32_t namesz, uint32_t descsz,",
      "509:     size_t noff, size_t doff, int *flags)",
      "510: {",
      "512:      type == NT_GNU_VERSION && descsz == 2) {",
      "515:      return 1;",
      "519:      type == NT_GNU_VERSION && descsz == 16) {",
      "525:    return 1;",
      "529:     return 1;",
      "533:     return 1;",
      "537:     return 1;",
      "541:     return 1;",
      "545:     return 1;",
      "549:     return 1;",
      "553:    return 1;",
      "554:   return 1;",
      "557:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "558:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
      "560:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "561:    return 1;",
      "562:   }",
      "563:  }",
      "565:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "566:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
      "568:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "569:    return 1;",
      "570:   }",
      "573:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "574:      type == NT_OPENBSD_VERSION && descsz == 4) {",
      "576:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "577:    return 1;",
      "579:   return 1;",
      "580:  }",
      "582:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "583:      type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "584:   uint32_t desc;",
      "586:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "587:    return 1;",
      "588:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "589:   desc = elf_getu32(swap, desc);",
      "590:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "591:       desc / 10000 % 10, desc % 10000) == -1)",
      "592:    return 1;",
      "593:   return 1;",
      "594:  }",
      "595:  return 0;",
      "596: }",
      "598: private int",
      "599: do_pax_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "600:     int swap, uint32_t namesz, uint32_t descsz,",
      "601:     size_t noff, size_t doff, int *flags)",
      "602: {",
      "604:      type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "616:   size_t i;",
      "617:   int did = 0;",
      "619:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "620:   desc = elf_getu32(swap, desc);",
      "622:   if (desc && file_printf(ms, \", PaX: \") == -1)",
      "625:   for (i = 0; i < __arraycount(pax); i++) {",
      "626:    if (((1 << i) & desc) == 0)",
      "627:     continue;",
      "628:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
      "629:        pax[i]) == -1)",
      "666:   }",
      "667:  }",
      "",
      "[Removed Lines]",
      "623:    return size;",
      "630:     return size;",
      "631:   }",
      "632:  }",
      "634:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "635:   switch (xnh_type) {",
      "636:   case NT_NETBSD_VERSION:",
      "637:    if (descsz == 4) {",
      "638:     do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "640:     return size;",
      "641:    }",
      "642:    break;",
      "643:   case NT_NETBSD_MARCH:",
      "644:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "645:        (const char *)&nbuf[doff]) == -1)",
      "646:     return size;",
      "647:    break;",
      "648:   case NT_NETBSD_CMODEL:",
      "649:    if (file_printf(ms, \", compiler model: %.*s\",",
      "650:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "651:     return size;",
      "652:    break;",
      "653:   default:",
      "654:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "655:     return size;",
      "656:    break;",
      "657:   }",
      "658:   return size;",
      "659:  }",
      "661:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "662:       if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
      "663:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "665:    return size;",
      "669:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "670:      xnh_type == NT_OPENBSD_VERSION && descsz == 4) {",
      "671:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "672:    return size;",
      "675:   return size;",
      "676:  }",
      "678:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "679:      xnh_type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "680:   uint32_t desc;",
      "681:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "682:    return size;",
      "683:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "684:   desc = elf_getu32(swap, desc);",
      "685:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "686:       desc / 10000 % 10, desc % 10000) == -1)",
      "687:    return size;",
      "689:   return size;",
      "690:  }",
      "692: core:",
      "",
      "[Added Lines]",
      "622:    return 1;",
      "629:     return 1;",
      "631:   return 1;",
      "633:  return 0;",
      "634: }",
      "636: private int",
      "637: do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "638:     int swap, uint32_t namesz, uint32_t descsz,",
      "639:     size_t noff, size_t doff, int *flags, size_t size, int clazz)",
      "640: {",
      "641: #ifdef ELFCORE",
      "642:  int os_style = -1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "718:   os_style = OS_STYLE_NETBSD;",
      "719:  }",
      "725:  if (os_style != -1 && (*flags & FLAGS_DID_CORE_STYLE) == 0) {",
      "726:   if (file_printf(ms, \", %s-style\", os_style_names[os_style])",
      "727:       == -1)",
      "730:  }",
      "732:  switch (os_style) {",
      "733:  case OS_STYLE_NETBSD:",
      "735:    uint32_t signo;",
      "",
      "[Removed Lines]",
      "721: #ifdef ELFCORE",
      "722:  if ((*flags & FLAGS_DID_CORE) != 0)",
      "723:   return size;",
      "728:    return size;",
      "734:   if (xnh_type == NT_NETBSD_CORE_PROCINFO) {",
      "",
      "[Added Lines]",
      "674:    return 1;",
      "680:   if (type == NT_NETBSD_CORE_PROCINFO) {",
      "681:    char sbuf[512];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "741:    if (file_printf(ms, \", from '%.31s'\",",
      "742:        file_printable(sbuf, sizeof(sbuf),",
      "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
      "",
      "[Removed Lines]",
      "744:     return size;",
      "",
      "[Added Lines]",
      "691:     return 1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "751:        sizeof(signo));",
      "752:    if (file_printf(ms, \" (signal %u)\",",
      "753:        elf_getu32(swap, signo)) == -1)",
      "757:   }",
      "758:   break;",
      "760:  default:",
      "762:    size_t i, j;",
      "763:    unsigned char c;",
      "",
      "[Removed Lines]",
      "754:     return size;",
      "756:    return size;",
      "761:   if (xnh_type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "[Added Lines]",
      "701:     return 1;",
      "703:    return 1;",
      "708:   if (type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "830:      size_t no;",
      "831:      int adjust = 1;",
      "832:      if (prpsoffsets(k) >= prpsoffsets(i))",
      "",
      "[Removed Lines]",
      "829:     for (k = i + 1 ; k < NOFFSETS ; k++) {",
      "",
      "[Added Lines]",
      "776:     for (k = i + 1 ; k < NOFFSETS; k++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "851:      cp--;",
      "852:     if (file_printf(ms, \", from '%.*s'\",",
      "853:         (int)(cp - cname), cname) == -1)",
      "858:    tryanother:",
      "859:     ;",
      "",
      "[Removed Lines]",
      "854:      return size;",
      "856:     return size;",
      "",
      "[Added Lines]",
      "801:      return 1;",
      "803:     return 1;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "862:   break;",
      "863:  }",
      "864: #endif",
      "865:  return offset;",
      "866: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "812:  return 0;",
      "813: }",
      "815: private size_t",
      "816: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "817:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount)",
      "818: {",
      "819:  Elf32_Nhdr nh32;",
      "820:  Elf64_Nhdr nh64;",
      "821:  size_t noff, doff;",
      "822:  uint32_t namesz, descsz;",
      "823:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "825:  if (*notecount == 0)",
      "826:   return 0;",
      "827:  --*notecount;",
      "829:  if (xnh_sizeof + offset > size) {",
      "833:   return xnh_sizeof + offset;",
      "834:  }",
      "836:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "837:  offset += xnh_sizeof;",
      "839:  namesz = xnh_namesz;",
      "840:  descsz = xnh_descsz;",
      "841:  if ((namesz == 0) && (descsz == 0)) {",
      "845:   return (offset >= size) ? offset : size;",
      "846:  }",
      "848:  if (namesz & 0x80000000) {",
      "849:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "850:   (unsigned long)namesz);",
      "851:      return 0;",
      "852:  }",
      "854:  if (descsz & 0x80000000) {",
      "855:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "856:   (unsigned long)descsz);",
      "857:      return 0;",
      "858:  }",
      "860:  noff = offset;",
      "861:  doff = ELF_ALIGN(offset + namesz);",
      "863:  if (offset + namesz > size) {",
      "867:   return doff;",
      "868:  }",
      "870:  offset = ELF_ALIGN(doff + descsz);",
      "871:  if (doff + descsz > size) {",
      "875:   return (offset >= size) ? offset : size;",
      "876:  }",
      "878:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
      "879:   if (do_os_note(ms, nbuf, xnh_type, swap,",
      "880:       namesz, descsz, noff, doff, flags))",
      "881:    return size;",
      "882:  }",
      "884:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
      "885:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
      "886:       namesz, descsz, noff, doff, flags))",
      "887:    return size;",
      "888:  }",
      "890:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
      "891:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
      "892:       namesz, descsz, noff, doff, flags))",
      "893:    return size;",
      "894:  }",
      "896:  if ((*flags & FLAGS_DID_CORE) == 0) {",
      "897:   if (do_core_note(ms, nbuf, xnh_type, swap,",
      "898:       namesz, descsz, noff, doff, flags, size, clazz))",
      "899:    return size;",
      "900:  }",
      "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "903:   switch (xnh_type) {",
      "904:       case NT_NETBSD_VERSION:",
      "905:    return size;",
      "906:   case NT_NETBSD_MARCH:",
      "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
      "908:     return size;",
      "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "910:        (const char *)&nbuf[doff]) == -1)",
      "911:     return size;",
      "912:    break;",
      "913:   case NT_NETBSD_CMODEL:",
      "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
      "915:     return size;",
      "916:    if (file_printf(ms, \", compiler model: %.*s\",",
      "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "918:     return size;",
      "919:    break;",
      "920:   default:",
      "921:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
      "922:     return size;",
      "923:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "924:     return size;",
      "925:    break;",
      "926:   }",
      "927:   return size;",
      "928:  }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "918: private int",
      "919: doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,",
      "921: {",
      "922:  Elf32_Shdr sh32;",
      "923:  Elf64_Shdr sh64;",
      "",
      "[Removed Lines]",
      "920:     size_t size, off_t fsize, int *flags, int mach, int strtab)",
      "",
      "[Added Lines]",
      "985:     size_t size, off_t fsize, int mach, int strtab, int *flags,",
      "986:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "994:     if (noff >= (off_t)xsh_size)",
      "995:      break;",
      "996:     noff = donote(ms, nbuf, (size_t)noff,",
      "998:     if (noff == 0)",
      "999:      break;",
      "1000:    }",
      "",
      "[Removed Lines]",
      "997:         xsh_size, clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "1063:         xsh_size, clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1162: private int",
      "1163: dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "1165: {",
      "1166:  Elf32_Phdr ph32;",
      "1167:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "1164:     int num, size_t size, off_t fsize, int *flags, int sh_num)",
      "",
      "[Added Lines]",
      "1230:     int num, size_t size, off_t fsize, int sh_num, int *flags,",
      "1231:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1242:      break;",
      "1243:     offset = donote(ms, nbuf, offset,",
      "1244:         (size_t)bufsize, clazz, swap, align,",
      "1246:     if (offset == 0)",
      "1247:      break;",
      "1248:    }",
      "",
      "[Removed Lines]",
      "1245:         flags);",
      "",
      "[Added Lines]",
      "1312:         flags, notecount);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1277:  int flags = 0;",
      "1278:  Elf32_Ehdr elf32hdr;",
      "1279:  Elf64_Ehdr elf64hdr;",
      "1282:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
      "1283:   return 0;",
      "",
      "[Removed Lines]",
      "1280:  uint16_t type, phnum, shnum;",
      "",
      "[Added Lines]",
      "1347:  uint16_t type, phnum, shnum, notecount;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9bbc26011fa5be83d88b3abae153866fef9c5d5",
      "candidate_info": {
        "commit_hash": "b9bbc26011fa5be83d88b3abae153866fef9c5d5",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b9bbc26011fa5be83d88b3abae153866fef9c5d5",
        "files": [
          "ChangeLog",
          "doc/file.man",
          "doc/libmagic.man",
          "src/apprentice.c",
          "src/file.c",
          "src/file.h",
          "src/magic.c",
          "src/softmagic.c"
        ],
        "message": "PR/474:  Add a limit to the size of regex searches to prevent performance issues.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/magic.c||src/magic.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/magic.c||src/magic.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/magic.c||src/magic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.235 2015/09/10 13:59:47 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.236 2015/09/10 14:39:55 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  ms->elf_shnum_max = FILE_ELF_SHNUM_MAX;",
          "532:  ms->elf_phnum_max = FILE_ELF_PHNUM_MAX;",
          "533:  ms->elf_notes_max = FILE_ELF_NOTES_MAX;",
          "534:  return ms;",
          "535: free:",
          "536:  free(ms);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:  ms->regex_max = FILE_REGEX_MAX;",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.165 2015/06/11 12:52:32 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.166 2015/09/08 13:46:49 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  { \"elf_phnum\", MAGIC_PARAM_ELF_PHNUM_MAX, 0 },",
          "132:  { \"elf_shnum\", MAGIC_PARAM_ELF_SHNUM_MAX, 0 },",
          "133:  { \"elf_notes\", MAGIC_PARAM_ELF_NOTES_MAX, 0 },",
          "134: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:  { \"regex\", MAGIC_PARAM_REGEX_MAX, 0 },",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:  uint16_t elf_shnum_max;",
          "416:  uint16_t elf_phnum_max;",
          "417:  uint16_t elf_notes_max;",
          "418: #define FILE_INDIR_MAX   15",
          "419: #define FILE_NAME_MAX   30",
          "420: #define FILE_ELF_SHNUM_MAX  32768",
          "421: #define FILE_ELF_PHNUM_MAX  2048",
          "422: #define FILE_ELF_NOTES_MAX  256",
          "423: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:  uint16_t regex_max;",
          "424: #define FILE_REGEX_MAX   8192",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.93 2015/04/15 23:47:58 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.94 2015/07/11 14:41:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "603:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "604:   ms->elf_notes_max = (uint16_t)*(const size_t *)val;",
          "605:   return 0;",
          "606:  default:",
          "607:   errno = EINVAL;",
          "608:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:  case MAGIC_PARAM_REGEX_MAX:",
          "607:   ms->elf_notes_max = (uint16_t)*(const size_t *)val;",
          "608:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "630:   return 0;",
          "631:  default:",
          "632:   errno = EINVAL;",
          "633:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:  case MAGIC_PARAM_REGEX_MAX:",
          "636:   return 0;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.216 2015/06/09 22:17:52 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.217 2015/07/27 09:08:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1103:    if (bytecnt == 0 || bytecnt > nbytes - offset)",
          "1104:     bytecnt = nbytes - offset;",
          "1106:    buf = RCAST(const char *, s) + offset;",
          "1107:    end = last = RCAST(const char *, s) + bytecnt + offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:    if (bytecnt > ms->regex_max)",
          "1106:     bytecnt = ms->regex_max;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d45394dd694159d6d03af43bcde34c3eaf88453a",
      "candidate_info": {
        "commit_hash": "d45394dd694159d6d03af43bcde34c3eaf88453a",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d45394dd694159d6d03af43bcde34c3eaf88453a",
        "files": [
          "src/apprentice.c"
        ],
        "message": "PR/395: fix typo",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.217 2014/10/15 12:39:21 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.218 2014/10/28 22:09:57 christos Exp $\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6aa336a271da54d44ba55fd21c2966d6197e2c3",
      "candidate_info": {
        "commit_hash": "c6aa336a271da54d44ba55fd21c2966d6197e2c3",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c6aa336a271da54d44ba55fd21c2966d6197e2c3",
        "files": [
          "src/apprentice.c"
        ],
        "message": "don't compare SIZE_MAX to off_t; if they are the same size in bytes it is wrong. Use a more appropriate comparison.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.197 2014/03/06 16:16:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.198 2014/03/06 16:18:53 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #include <limits.h>",
          "53: #endif",
          "57: #endif",
          "59: #define EATAB {while (isascii((unsigned char) *l) && \\",
          "",
          "[Removed Lines]",
          "55: #ifndef SIZE_MAX",
          "56: #define SIZE_MAX        ((size_t)~0)",
          "",
          "[Added Lines]",
          "55: #ifndef SSIZE_MAX",
          "56: #define MAXMAGIC_SIZE        ((ssize_t)0x7fffffff)",
          "57: #else",
          "58: #define MAXMAGIC_SIZE        SSIZE_MAX",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2608:   file_error(ms, errno, \"cannot stat `%s'\", dbname);",
          "2609:   goto error;",
          "2610:  }",
          "2612:   file_error(ms, 0, \"file `%s' is too %s\", dbname,",
          "2613:       st.st_size < 8 ? \"small\" : \"large\");",
          "2614:   goto error;",
          "",
          "[Removed Lines]",
          "2611:  if (st.st_size < 8 || st.st_size > (off_t)SIZE_MAX) {",
          "",
          "[Added Lines]",
          "2613:  if (st.st_size < 8 || st.st_size > MAXMAGIC_SIZE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
      "candidate_info": {
        "commit_hash": "d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d7cdad007c507e6c79f51f058dd77fab70ceb9f6",
        "files": [
          "src/readelf.c"
        ],
        "message": "Stop reporting bad capabilities after the first few.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.104 2014/10/17 15:49:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:  Elf32_Shdr sh32;",
          "920:  Elf64_Shdr sh64;",
          "921:  int stripped = 1;",
          "922:  void *nbuf;",
          "923:  off_t noff, coff, name_off;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:  size_t nbadcap = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1007:     goto skip;",
          "1008:    }",
          "1010:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "1011:     file_badseek(ms);",
          "1012:     return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:    if (nbadcap > 5)",
          "1012:     break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1072:          (unsigned long long)xcap_tag,",
          "1073:          (unsigned long long)xcap_val) == -1)",
          "1074:       return -1;",
          "1075:      break;",
          "1076:     }",
          "1077:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:      if (nbadcap++ > 2)",
          "1079:       coff = xsh_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b8db89f918e1589c1c904f932775733049f2bfd",
      "candidate_info": {
        "commit_hash": "3b8db89f918e1589c1c904f932775733049f2bfd",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/3b8db89f918e1589c1c904f932775733049f2bfd",
        "files": [
          "ChangeLog",
          "doc/file.man",
          "doc/libmagic.man",
          "src/apprentice.c",
          "src/elfclass.h",
          "src/file.c",
          "src/file.h",
          "src/file_opts.h",
          "src/magic.c",
          "src/magic.h.in",
          "src/readelf.c"
        ],
        "message": "- Add a limit to the number of ELF notes processed (Suggested by Alexander   Cherepanov) - Restructure ELF note printing so that we don't print the same message   multiple times on repeated notes of the same kind.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/elfclass.h||src/elfclass.h",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/file_opts.h||src/file_opts.h",
          "src/magic.c||src/magic.c",
          "src/magic.h.in||src/magic.h.in",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c",
            "src/elfclass.h||src/elfclass.h",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/file_opts.h||src/file_opts.h",
            "src/magic.c||src/magic.c",
            "src/magic.h.in||src/magic.h.in",
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c",
            "src/elfclass.h||src/elfclass.h",
            "src/file.c||src/file.c",
            "src/file.h||src/file.h",
            "src/file_opts.h||src/file_opts.h",
            "src/magic.c||src/magic.c",
            "src/magic.h.in||src/magic.h.in",
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:  ms->name_max = FILE_NAME_MAX;",
          "529:  ms->elf_shnum_max = FILE_ELF_SHNUM_MAX;",
          "530:  ms->elf_phnum_max = FILE_ELF_PHNUM_MAX;",
          "531:  return ms;",
          "532: free:",
          "533:  free(ms);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:  ms->elf_notes_max = FILE_ELF_NOTES_MAX;",
          "",
          "---------------"
        ],
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  swap = (u.c[sizeof(int32_t) - 1] + 1) != elfhdr.e_ident[EI_DATA];",
          "34:  type = elf_getu16(swap, elfhdr.e_type);",
          "35:  switch (type) {",
          "36: #ifdef ELFCORE",
          "37:  case ET_CORE:",
          "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "39:   if (phnum > ms->elf_phnum_max)",
          "41:   flags |= FLAGS_IS_CORE;",
          "42:   if (dophn_core(ms, clazz, swap, fd,",
          "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "44:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "46:    return -1;",
          "47:   break;",
          "48: #endif",
          "",
          "[Removed Lines]",
          "40:    return toomany(ms, \"program\", phnum);",
          "45:       fsize, &flags) == -1)",
          "",
          "[Added Lines]",
          "35:  notecount = ms->elf_notes_max;",
          "41:    return toomany(ms, \"program headers\", phnum);",
          "46:       fsize, &flags, &notecount) == -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   if (dophn_exec(ms, clazz, swap, fd,",
          "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "59:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "61:    return -1;",
          "63:  case ET_REL:",
          "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "65:   if (shnum > ms->elf_shnum_max)",
          "67:   if (doshn(ms, clazz, swap, fd,",
          "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
          "69:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
          "72:    return -1;",
          "73:   break;",
          "75:  default:",
          "76:   break;",
          "77:  }",
          "78:  return 1;",
          "",
          "[Removed Lines]",
          "60:       fsize, &flags, shnum) == -1)",
          "66:    return toomany(ms, \"section\", shnum);",
          "70:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
          "71:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
          "",
          "[Added Lines]",
          "61:       fsize, shnum, &flags, &notecount) == -1)",
          "67:    return toomany(ms, \"section headers\", shnum);",
          "71:       fsize, elf_getu16(swap, elfhdr.e_machine),",
          "72:       (int)elf_getu16(swap, elfhdr.e_shstrndx),",
          "73:       &flags, &notecount) == -1)",
          "80:  if (notecount == 0)",
          "81:   return toomany(ms, \"notes\", ms->elf_notes_max);",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.159 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.160 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:  { \"name\", MAGIC_PARAM_NAME_MAX, 0 },",
          "126:  { \"elf_phnum\", MAGIC_PARAM_ELF_PHNUM_MAX, 0 },",
          "127:  { \"elf_shnum\", MAGIC_PARAM_ELF_SHNUM_MAX, 0 },",
          "128: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:  { \"elf_notes\", MAGIC_PARAM_ELF_NOTES_MAX, 0 },",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:  uint16_t name_max;",
          "408:  uint16_t elf_shnum_max;",
          "409:  uint16_t elf_phnum_max;",
          "410: #define FILE_INDIR_MAX   15",
          "411: #define FILE_NAME_MAX   30",
          "412: #define FILE_ELF_SHNUM_MAX  32768",
          "413: #define FILE_ELF_PHNUM_MAX  128",
          "414: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:  uint16_t elf_notes_max;",
          "415: #define FILE_ELF_NOTES_MAX  256",
          "",
          "---------------"
        ],
        "src/file_opts.h||src/file_opts.h": [
          "File: src/file_opts.h -> src/file_opts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: OPT('P', \"parameter\", 0, \"            set file engine parameter limits\\n\"",
          "47:     \"                               indir        15 recursion limit for indirection\\n\"",
          "48:     \"                               name         30 use limit for name/use magic\\n\"",
          "49:     \"                               elf_phnum   128 max ELF prog sections processed\\n\"",
          "50:     \"                               elf_shnum 32768 max ELF sections processed\\n\")",
          "51: OPT('r', \"raw\", 0, \"                  don't translate unprintable chars to \\\\ooo\\n\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     \"                               elf_notes   256 max ELF notes processed\\n\"",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.90 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.91 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
          "555:   ms->elf_shnum_max = *(const size_t *)val;",
          "556:   return 0;",
          "557:  default:",
          "558:   errno = EINVAL;",
          "559:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "558:   ms->elf_notes_max = *(const size_t *)val;",
          "559:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
          "578:   return 0;",
          "579:  default:",
          "580:   errno = EINVAL;",
          "581:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "584:   return 0;",
          "",
          "---------------"
        ],
        "src/magic.h.in||src/magic.h.in": [
          "File: src/magic.h.in -> src/magic.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: #define MAGIC_PARAM_NAME_MAX  1",
          "108: #define MAGIC_PARAM_ELF_PHNUM_MAX 2",
          "109: #define MAGIC_PARAM_ELF_SHNUM_MAX 3",
          "111: int magic_setparam(magic_t, int, const void *);",
          "112: int magic_getparam(magic_t, int, void *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: #define MAGIC_PARAM_ELF_NOTES_MAX 4",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.116 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: #ifdef ELFCORE",
          "45: private int dophn_core(struct magic_set *, int, int, int, off_t, int, size_t,",
          "47: #endif",
          "48: private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,",
          "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
          "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
          "55: #define ELF_ALIGN(a) ((((a) + align - 1) / align) * align)",
          "",
          "[Removed Lines]",
          "46:     off_t, int *);",
          "49:     off_t, int *, int);",
          "51:     off_t, int *, int, int);",
          "53:     int, size_t, int *);",
          "",
          "[Added Lines]",
          "46:     off_t, int *, uint16_t *);",
          "49:     off_t, int, int *, uint16_t *);",
          "51:     off_t, int, int, int *, uint16_t *);",
          "53:     int, size_t, int *, uint16_t *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: private int",
          "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
          "69: {",
          "71:      ) == -1)",
          "72:   return -1;",
          "73:  return 0;",
          "",
          "[Removed Lines]",
          "70:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
          "",
          "[Added Lines]",
          "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:  \"NetBSD\",",
          "294: };",
          "302: private int",
          "303: dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
          "305: {",
          "306:  Elf32_Phdr ph32;",
          "307:  Elf64_Phdr ph64;",
          "",
          "[Removed Lines]",
          "296: #define FLAGS_DID_CORE  0x01",
          "297: #define FLAGS_DID_NOTE  0x02",
          "298: #define FLAGS_DID_BUILD_ID 0x04",
          "299: #define FLAGS_DID_CORE_STYLE 0x08",
          "300: #define FLAGS_IS_CORE  0x10",
          "304:     int num, size_t size, off_t fsize, int *flags)",
          "",
          "[Added Lines]",
          "296: #define FLAGS_DID_CORE   0x001",
          "297: #define FLAGS_DID_OS_NOTE  0x002",
          "298: #define FLAGS_DID_BUILD_ID  0x004",
          "299: #define FLAGS_DID_CORE_STYLE  0x008",
          "300: #define FLAGS_DID_NETBSD_PAX  0x010",
          "301: #define FLAGS_DID_NETBSD_MARCH  0x020",
          "302: #define FLAGS_DID_NETBSD_CMODEL  0x040",
          "303: #define FLAGS_DID_NETBSD_UNKNOWN 0x080",
          "304: #define FLAGS_IS_CORE   0x100",
          "308:     int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:    if (offset >= (size_t)bufsize)",
          "348:     break;",
          "349:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
          "351:    if (offset == 0)",
          "352:     break;",
          "",
          "[Removed Lines]",
          "350:        clazz, swap, 4, flags);",
          "",
          "[Added Lines]",
          "354:        clazz, swap, 4, flags, notecount);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "477:  }",
          "478: }",
          "483: {",
          "542:  }",
          "548:  if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&",
          "550:      file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);",
          "551:  }",
          "552:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "554:   uint32_t desc[4];",
          "555:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
          "557:   if (file_printf(ms, \", for GNU/\") == -1)",
          "559:   switch (elf_getu32(swap, desc[0])) {",
          "560:   case GNU_OS_LINUX:",
          "561:    if (file_printf(ms, \"Linux\") == -1)",
          "563:    break;",
          "564:   case GNU_OS_HURD:",
          "565:    if (file_printf(ms, \"Hurd\") == -1)",
          "567:    break;",
          "568:   case GNU_OS_SOLARIS:",
          "569:    if (file_printf(ms, \"Solaris\") == -1)",
          "571:    break;",
          "572:   case GNU_OS_KFREEBSD:",
          "573:    if (file_printf(ms, \"kFreeBSD\") == -1)",
          "575:    break;",
          "576:   case GNU_OS_KNETBSD:",
          "577:    if (file_printf(ms, \"kNetBSD\") == -1)",
          "579:    break;",
          "580:   default:",
          "581:    if (file_printf(ms, \"<unknown>\") == -1)",
          "583:   }",
          "584:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
          "585:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
          "589:  }",
          "603:  }",
          "605:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&",
          "607:   static const char *pax[] = {",
          "608:       \"+mprotect\",",
          "609:       \"-mprotect\",",
          "",
          "[Removed Lines]",
          "480: private size_t",
          "481: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "482:     int clazz, int swap, size_t align, int *flags)",
          "484:  Elf32_Nhdr nh32;",
          "485:  Elf64_Nhdr nh64;",
          "486:  size_t noff, doff;",
          "487: #ifdef ELFCORE",
          "488:  int os_style = -1;",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "492:  char sbuf[512];",
          "494:  if (xnh_sizeof + offset > size) {",
          "498:   return xnh_sizeof + offset;",
          "499:  }",
          "501:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "502:  offset += xnh_sizeof;",
          "504:  namesz = xnh_namesz;",
          "505:  descsz = xnh_descsz;",
          "506:  if ((namesz == 0) && (descsz == 0)) {",
          "510:   return (offset >= size) ? offset : size;",
          "511:  }",
          "513:  if (namesz & 0x80000000) {",
          "514:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
          "515:   (unsigned long)namesz);",
          "516:      return 0;",
          "517:  }",
          "519:  if (descsz & 0x80000000) {",
          "520:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
          "521:   (unsigned long)descsz);",
          "522:      return 0;",
          "523:  }",
          "526:  noff = offset;",
          "527:  doff = ELF_ALIGN(offset + namesz);",
          "529:  if (offset + namesz > size) {",
          "533:   return doff;",
          "534:  }",
          "536:  offset = ELF_ALIGN(doff + descsz);",
          "537:  if (doff + descsz > size) {",
          "541:   return (offset >= size) ? offset : size;",
          "544:  if ((*flags & (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID)) ==",
          "545:      (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID))",
          "546:   goto core;",
          "549:      xnh_type == NT_GNU_VERSION && descsz == 2) {",
          "553:      xnh_type == NT_GNU_VERSION && descsz == 16) {",
          "558:    return size;",
          "562:     return size;",
          "566:     return size;",
          "570:     return size;",
          "574:     return size;",
          "578:     return size;",
          "582:     return size;",
          "586:    return size;",
          "588:   return size;",
          "591:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "592:      xnh_type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
          "593:      uint8_t desc[20];",
          "594:      uint32_t i;",
          "595:      if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
          "596:   \"sha1\") == -1)",
          "597:       return size;",
          "598:      (void)memcpy(desc, &nbuf[doff], descsz);",
          "599:      for (i = 0; i < descsz; i++)",
          "600:   if (file_printf(ms, \"%02x\", desc[i]) == -1)",
          "601:       return size;",
          "606:      xnh_type == NT_NETBSD_PAX && descsz == 4) {",
          "",
          "[Added Lines]",
          "484: private int",
          "485: do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
          "486:     int swap __attribute__((__unused__)), uint32_t namesz, uint32_t descsz,",
          "487:     size_t noff, size_t doff, int *flags)",
          "489:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "490:      type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
          "491:   uint8_t desc[20];",
          "492:   uint32_t i;",
          "494:   if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
          "495:       \"sha1\") == -1)",
          "496:    return 1;",
          "497:   (void)memcpy(desc, &nbuf[doff], descsz);",
          "498:   for (i = 0; i < descsz; i++)",
          "499:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
          "500:    return 1;",
          "501:   return 1;",
          "503:  return 0;",
          "504: }",
          "506: private int",
          "507: do_os_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
          "508:     int swap, uint32_t namesz, uint32_t descsz,",
          "509:     size_t noff, size_t doff, int *flags)",
          "510: {",
          "512:      type == NT_GNU_VERSION && descsz == 2) {",
          "515:      return 1;",
          "519:      type == NT_GNU_VERSION && descsz == 16) {",
          "525:    return 1;",
          "529:     return 1;",
          "533:     return 1;",
          "537:     return 1;",
          "541:     return 1;",
          "545:     return 1;",
          "549:     return 1;",
          "553:    return 1;",
          "554:   return 1;",
          "557:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "558:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
          "560:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
          "561:    return 1;",
          "562:   }",
          "563:  }",
          "565:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
          "566:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
          "568:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
          "569:    return 1;",
          "570:   }",
          "573:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
          "574:      type == NT_OPENBSD_VERSION && descsz == 4) {",
          "576:   if (file_printf(ms, \", for OpenBSD\") == -1)",
          "577:    return 1;",
          "579:   return 1;",
          "580:  }",
          "582:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
          "583:      type == NT_DRAGONFLY_VERSION && descsz == 4) {",
          "584:   uint32_t desc;",
          "586:   if (file_printf(ms, \", for DragonFly\") == -1)",
          "587:    return 1;",
          "588:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "589:   desc = elf_getu32(swap, desc);",
          "590:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
          "591:       desc / 10000 % 10, desc % 10000) == -1)",
          "592:    return 1;",
          "593:   return 1;",
          "594:  }",
          "595:  return 0;",
          "596: }",
          "598: private int",
          "599: do_pax_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
          "600:     int swap, uint32_t namesz, uint32_t descsz,",
          "601:     size_t noff, size_t doff, int *flags)",
          "602: {",
          "604:      type == NT_NETBSD_PAX && descsz == 4) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "616:   size_t i;",
          "617:   int did = 0;",
          "619:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "620:   desc = elf_getu32(swap, desc);",
          "622:   if (desc && file_printf(ms, \", PaX: \") == -1)",
          "625:   for (i = 0; i < __arraycount(pax); i++) {",
          "626:    if (((1 << i) & desc) == 0)",
          "627:     continue;",
          "628:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
          "629:        pax[i]) == -1)",
          "666:   }",
          "667:  }",
          "",
          "[Removed Lines]",
          "623:    return size;",
          "630:     return size;",
          "631:   }",
          "632:  }",
          "634:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "635:   switch (xnh_type) {",
          "636:   case NT_NETBSD_VERSION:",
          "637:    if (descsz == 4) {",
          "638:     do_note_netbsd_version(ms, swap, &nbuf[doff]);",
          "640:     return size;",
          "641:    }",
          "642:    break;",
          "643:   case NT_NETBSD_MARCH:",
          "644:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
          "645:        (const char *)&nbuf[doff]) == -1)",
          "646:     return size;",
          "647:    break;",
          "648:   case NT_NETBSD_CMODEL:",
          "649:    if (file_printf(ms, \", compiler model: %.*s\",",
          "650:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "651:     return size;",
          "652:    break;",
          "653:   default:",
          "654:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "655:     return size;",
          "656:    break;",
          "657:   }",
          "658:   return size;",
          "659:  }",
          "661:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
          "662:       if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
          "663:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
          "665:    return size;",
          "669:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
          "670:      xnh_type == NT_OPENBSD_VERSION && descsz == 4) {",
          "671:   if (file_printf(ms, \", for OpenBSD\") == -1)",
          "672:    return size;",
          "675:   return size;",
          "676:  }",
          "678:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
          "679:      xnh_type == NT_DRAGONFLY_VERSION && descsz == 4) {",
          "680:   uint32_t desc;",
          "681:   if (file_printf(ms, \", for DragonFly\") == -1)",
          "682:    return size;",
          "683:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "684:   desc = elf_getu32(swap, desc);",
          "685:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
          "686:       desc / 10000 % 10, desc % 10000) == -1)",
          "687:    return size;",
          "689:   return size;",
          "690:  }",
          "692: core:",
          "",
          "[Added Lines]",
          "622:    return 1;",
          "629:     return 1;",
          "631:   return 1;",
          "633:  return 0;",
          "634: }",
          "636: private int",
          "637: do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
          "638:     int swap, uint32_t namesz, uint32_t descsz,",
          "639:     size_t noff, size_t doff, int *flags, size_t size, int clazz)",
          "640: {",
          "641: #ifdef ELFCORE",
          "642:  int os_style = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "718:   os_style = OS_STYLE_NETBSD;",
          "719:  }",
          "725:  if (os_style != -1 && (*flags & FLAGS_DID_CORE_STYLE) == 0) {",
          "726:   if (file_printf(ms, \", %s-style\", os_style_names[os_style])",
          "727:       == -1)",
          "730:  }",
          "732:  switch (os_style) {",
          "733:  case OS_STYLE_NETBSD:",
          "735:    uint32_t signo;",
          "",
          "[Removed Lines]",
          "721: #ifdef ELFCORE",
          "722:  if ((*flags & FLAGS_DID_CORE) != 0)",
          "723:   return size;",
          "728:    return size;",
          "734:   if (xnh_type == NT_NETBSD_CORE_PROCINFO) {",
          "",
          "[Added Lines]",
          "674:    return 1;",
          "680:   if (type == NT_NETBSD_CORE_PROCINFO) {",
          "681:    char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "741:    if (file_printf(ms, \", from '%.31s'\",",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "[Removed Lines]",
          "744:     return size;",
          "",
          "[Added Lines]",
          "691:     return 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "751:        sizeof(signo));",
          "752:    if (file_printf(ms, \" (signal %u)\",",
          "753:        elf_getu32(swap, signo)) == -1)",
          "757:   }",
          "758:   break;",
          "760:  default:",
          "762:    size_t i, j;",
          "763:    unsigned char c;",
          "",
          "[Removed Lines]",
          "754:     return size;",
          "756:    return size;",
          "761:   if (xnh_type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
          "",
          "[Added Lines]",
          "701:     return 1;",
          "703:    return 1;",
          "708:   if (type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "830:      size_t no;",
          "831:      int adjust = 1;",
          "832:      if (prpsoffsets(k) >= prpsoffsets(i))",
          "",
          "[Removed Lines]",
          "829:     for (k = i + 1 ; k < NOFFSETS ; k++) {",
          "",
          "[Added Lines]",
          "776:     for (k = i + 1 ; k < NOFFSETS; k++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "851:      cp--;",
          "852:     if (file_printf(ms, \", from '%.*s'\",",
          "853:         (int)(cp - cname), cname) == -1)",
          "858:    tryanother:",
          "859:     ;",
          "",
          "[Removed Lines]",
          "854:      return size;",
          "856:     return size;",
          "",
          "[Added Lines]",
          "801:      return 1;",
          "803:     return 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "862:   break;",
          "863:  }",
          "864: #endif",
          "865:  return offset;",
          "866: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:  return 0;",
          "813: }",
          "815: private size_t",
          "816: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "817:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount)",
          "818: {",
          "819:  Elf32_Nhdr nh32;",
          "820:  Elf64_Nhdr nh64;",
          "821:  size_t noff, doff;",
          "822:  uint32_t namesz, descsz;",
          "823:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "825:  if (*notecount == 0)",
          "826:   return 0;",
          "827:  --*notecount;",
          "829:  if (xnh_sizeof + offset > size) {",
          "833:   return xnh_sizeof + offset;",
          "834:  }",
          "836:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "837:  offset += xnh_sizeof;",
          "839:  namesz = xnh_namesz;",
          "840:  descsz = xnh_descsz;",
          "841:  if ((namesz == 0) && (descsz == 0)) {",
          "845:   return (offset >= size) ? offset : size;",
          "846:  }",
          "848:  if (namesz & 0x80000000) {",
          "849:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
          "850:   (unsigned long)namesz);",
          "851:      return 0;",
          "852:  }",
          "854:  if (descsz & 0x80000000) {",
          "855:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
          "856:   (unsigned long)descsz);",
          "857:      return 0;",
          "858:  }",
          "860:  noff = offset;",
          "861:  doff = ELF_ALIGN(offset + namesz);",
          "863:  if (offset + namesz > size) {",
          "867:   return doff;",
          "868:  }",
          "870:  offset = ELF_ALIGN(doff + descsz);",
          "871:  if (doff + descsz > size) {",
          "875:   return (offset >= size) ? offset : size;",
          "876:  }",
          "878:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
          "879:   if (do_os_note(ms, nbuf, xnh_type, swap,",
          "880:       namesz, descsz, noff, doff, flags))",
          "881:    return size;",
          "882:  }",
          "884:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
          "885:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
          "886:       namesz, descsz, noff, doff, flags))",
          "887:    return size;",
          "888:  }",
          "890:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
          "891:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
          "892:       namesz, descsz, noff, doff, flags))",
          "893:    return size;",
          "894:  }",
          "896:  if ((*flags & FLAGS_DID_CORE) == 0) {",
          "897:   if (do_core_note(ms, nbuf, xnh_type, swap,",
          "898:       namesz, descsz, noff, doff, flags, size, clazz))",
          "899:    return size;",
          "900:  }",
          "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "903:   switch (xnh_type) {",
          "904:       case NT_NETBSD_VERSION:",
          "905:    return size;",
          "906:   case NT_NETBSD_MARCH:",
          "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "908:     return size;",
          "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
          "910:        (const char *)&nbuf[doff]) == -1)",
          "911:     return size;",
          "912:    break;",
          "913:   case NT_NETBSD_CMODEL:",
          "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "915:     return size;",
          "916:    if (file_printf(ms, \", compiler model: %.*s\",",
          "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "918:     return size;",
          "919:    break;",
          "920:   default:",
          "921:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
          "922:     return size;",
          "923:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "924:     return size;",
          "925:    break;",
          "926:   }",
          "927:   return size;",
          "928:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "918: private int",
          "919: doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,",
          "921: {",
          "922:  Elf32_Shdr sh32;",
          "923:  Elf64_Shdr sh64;",
          "",
          "[Removed Lines]",
          "920:     size_t size, off_t fsize, int *flags, int mach, int strtab)",
          "",
          "[Added Lines]",
          "985:     size_t size, off_t fsize, int mach, int strtab, int *flags,",
          "986:     uint16_t *notecount)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "994:     if (noff >= (off_t)xsh_size)",
          "995:      break;",
          "996:     noff = donote(ms, nbuf, (size_t)noff,",
          "998:     if (noff == 0)",
          "999:      break;",
          "1000:    }",
          "",
          "[Removed Lines]",
          "997:         xsh_size, clazz, swap, 4, flags);",
          "",
          "[Added Lines]",
          "1063:         xsh_size, clazz, swap, 4, flags, notecount);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1162: private int",
          "1163: dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
          "1165: {",
          "1166:  Elf32_Phdr ph32;",
          "1167:  Elf64_Phdr ph64;",
          "",
          "[Removed Lines]",
          "1164:     int num, size_t size, off_t fsize, int *flags, int sh_num)",
          "",
          "[Added Lines]",
          "1230:     int num, size_t size, off_t fsize, int sh_num, int *flags,",
          "1231:     uint16_t *notecount)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1242:      break;",
          "1243:     offset = donote(ms, nbuf, offset,",
          "1244:         (size_t)bufsize, clazz, swap, align,",
          "1246:     if (offset == 0)",
          "1247:      break;",
          "1248:    }",
          "",
          "[Removed Lines]",
          "1245:         flags);",
          "",
          "[Added Lines]",
          "1312:         flags, notecount);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1277:  int flags = 0;",
          "1278:  Elf32_Ehdr elf32hdr;",
          "1279:  Elf64_Ehdr elf64hdr;",
          "1282:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
          "1283:   return 0;",
          "",
          "[Removed Lines]",
          "1280:  uint16_t type, phnum, shnum;",
          "",
          "[Added Lines]",
          "1347:  uint16_t type, phnum, shnum, notecount;",
          "",
          "---------------"
        ]
      }
    }
  ]
}