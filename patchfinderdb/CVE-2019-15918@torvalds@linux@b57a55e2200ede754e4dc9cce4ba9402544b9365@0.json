{
  "cve_id": "CVE-2019-15918",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.10. SMB2_negotiate in fs/cifs/smb2pdu.c has an out-of-bounds read because data structures are incompletely updated after a change from smb30 to smb21.",
  "repo": "torvalds/linux",
  "patch_hash": "b57a55e2200ede754e4dc9cce4ba9402544b9365",
  "patch_info": {
    "commit_hash": "b57a55e2200ede754e4dc9cce4ba9402544b9365",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/b57a55e2200ede754e4dc9cce4ba9402544b9365",
    "files": [
      "fs/cifs/smb2pdu.c"
    ],
    "message": "cifs: Fix lease buffer length error\n\nThere is a KASAN slab-out-of-bounds:\nBUG: KASAN: slab-out-of-bounds in _copy_from_iter_full+0x783/0xaa0\nRead of size 80 at addr ffff88810c35e180 by task mount.cifs/539\n\nCPU: 1 PID: 539 Comm: mount.cifs Not tainted 4.19 #10\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n            rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014\nCall Trace:\n dump_stack+0xdd/0x12a\n print_address_description+0xa7/0x540\n kasan_report+0x1ff/0x550\n check_memory_region+0x2f1/0x310\n memcpy+0x2f/0x80\n _copy_from_iter_full+0x783/0xaa0\n tcp_sendmsg_locked+0x1840/0x4140\n tcp_sendmsg+0x37/0x60\n inet_sendmsg+0x18c/0x490\n sock_sendmsg+0xae/0x130\n smb_send_kvec+0x29c/0x520\n __smb_send_rqst+0x3ef/0xc60\n smb_send_rqst+0x25a/0x2e0\n compound_send_recv+0x9e8/0x2af0\n cifs_send_recv+0x24/0x30\n SMB2_open+0x35e/0x1620\n open_shroot+0x27b/0x490\n smb2_open_op_close+0x4e1/0x590\n smb2_query_path_info+0x2ac/0x650\n cifs_get_inode_info+0x1058/0x28f0\n cifs_root_iget+0x3bb/0xf80\n cifs_smb3_do_mount+0xe00/0x14c0\n cifs_do_mount+0x15/0x20\n mount_fs+0x5e/0x290\n vfs_kern_mount+0x88/0x460\n do_mount+0x398/0x31e0\n ksys_mount+0xc6/0x150\n __x64_sys_mount+0xea/0x190\n do_syscall_64+0x122/0x590\n entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nIt can be reproduced by the following step:\n  1. samba configured with: server max protocol = SMB2_10\n  2. mount -o vers=default\n\nWhen parse the mount version parameter, the 'ops' and 'vals'\nwas setted to smb30,  if negotiate result is smb21, just\nupdate the 'ops' to smb21, but the 'vals' is still smb30.\nWhen add lease context, the iov_base is allocated with smb21\nops, but the iov_len is initiallited with the smb30. Because\nthe iov_len is longer than iov_base, when send the message,\ncopy array out of bounds.\n\nwe need to keep the 'ops' and 'vals' consistent.\n\nFixes: 9764c02fcbad (\"SMB3: Add support for multidialect negotiate (SMB2.1 and later)\")\nFixes: d5c7076b772a (\"smb3: add smb3.1.1 to default dialect list\")\n\nSigned-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>\nSigned-off-by: Steve French <stfrench@microsoft.com>\nCC: Stable <stable@vger.kernel.org>\nReviewed-by: Pavel Shilovsky <pshilov@microsoft.com>",
    "before_after_code_files": [
      "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c"
    ]
  },
  "patch_diff": {
    "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c": [
      "File: fs/cifs/smb2pdu.c -> fs/cifs/smb2pdu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "832:   } else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {",
      "834:    ses->server->ops = &smb21_operations;",
      "836:    ses->server->ops = &smb311_operations;",
      "837:  } else if (le16_to_cpu(rsp->DialectRevision) !=",
      "838:     ses->server->vals->protocol_id) {",
      "",
      "[Removed Lines]",
      "835:   } else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))",
      "",
      "[Added Lines]",
      "835:    ses->server->vals = &smb21_values;",
      "836:   } else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID)) {",
      "838:    ses->server->vals = &smb311_values;",
      "839:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9abbdfa88024d52c8084d8f46ea4f161606c692",
      "candidate_info": {
        "commit_hash": "b9abbdfa88024d52c8084d8f46ea4f161606c692",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b9abbdfa88024d52c8084d8f46ea4f161606c692",
        "files": [
          "tools/perf/util/map.c"
        ],
        "message": "perf tools: Fix map reference counting\n\nBy calling maps__insert() we assume to get 2 references on the map,\nwhich we relese within maps__remove call.\n\nHowever if there's already same map name, we currently don't bump the\nreference and can crash, like:\n\n  Program received signal SIGABRT, Aborted.\n  0x00007ffff75e60f5 in raise () from /lib64/libc.so.6\n\n  (gdb) bt\n  #0  0x00007ffff75e60f5 in raise () from /lib64/libc.so.6\n  #1  0x00007ffff75d0895 in abort () from /lib64/libc.so.6\n  #2  0x00007ffff75d0769 in __assert_fail_base.cold () from /lib64/libc.so.6\n  #3  0x00007ffff75de596 in __assert_fail () from /lib64/libc.so.6\n  #4  0x00000000004fc006 in refcount_sub_and_test (i=1, r=0x1224e88) at tools/include/linux/refcount.h:131\n  #5  refcount_dec_and_test (r=0x1224e88) at tools/include/linux/refcount.h:148\n  #6  map__put (map=0x1224df0) at util/map.c:299\n  #7  0x00000000004fdb95 in __maps__remove (map=0x1224df0, maps=0xb17d80) at util/map.c:953\n  #8  maps__remove (maps=0xb17d80, map=0x1224df0) at util/map.c:959\n  #9  0x00000000004f7d8a in map_groups__remove (map=<optimized out>, mg=<optimized out>) at util/map_groups.h:65\n  #10 machine__process_ksymbol_unregister (sample=<optimized out>, event=0x7ffff7279670, machine=<optimized out>) at util/machine.c:728\n  #11 machine__process_ksymbol (machine=<optimized out>, event=0x7ffff7279670, sample=<optimized out>) at util/machine.c:741\n  #12 0x00000000004fffbb in perf_session__deliver_event (session=0xb11390, event=0x7ffff7279670, tool=0x7fffffffc7b0, file_offset=13936) at util/session.c:1362\n  #13 0x00000000005039bb in do_flush (show_progress=false, oe=0xb17e80) at util/ordered-events.c:243\n  #14 __ordered_events__flush (oe=0xb17e80, how=OE_FLUSH__ROUND, timestamp=<optimized out>) at util/ordered-events.c:322\n  #15 0x00000000005005e4 in perf_session__process_user_event (session=session@entry=0xb11390, event=event@entry=0x7ffff72a4af8,\n  ...\n\nAdd the map to the list and getting the reference event if we find the\nmap with same name.\n\nSigned-off-by: Jiri Olsa <jolsa@kernel.org>\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Alexander Shishkin <alexander.shishkin@linux.intel.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andi Kleen <ak@linux.intel.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Eric Saint-Etienne <eric.saint.etienne@oracle.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Song Liu <songliubraving@fb.com>\nFixes: 1e6285699b30 (\"perf symbols: Fix slowness due to -ffunction-section\")\nLink: http://lkml.kernel.org/r/20190416160127.30203-10-jolsa@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
        "before_after_code_files": [
          "tools/perf/util/map.c||tools/perf/util/map.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/perf/util/map.c||tools/perf/util/map.c": [
          "File: tools/perf/util/map.c -> tools/perf/util/map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "926:   rc = strcmp(m->dso->short_name, map->dso->short_name);",
          "927:   if (rc < 0)",
          "928:    p = &(*p)->rb_left;",
          "931:   else",
          "933:  }",
          "934:  rb_link_node(&map->rb_node_name, parent, p);",
          "935:  rb_insert_color(&map->rb_node_name, &maps->names);",
          "",
          "[Removed Lines]",
          "929:   else if (rc  > 0)",
          "930:    p = &(*p)->rb_right;",
          "932:    return;",
          "",
          "[Added Lines]",
          "930:    p = &(*p)->rb_right;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afe6f65353b644f55875d42d812ffe87f1887d68",
      "candidate_info": {
        "commit_hash": "afe6f65353b644f55875d42d812ffe87f1887d68",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/afe6f65353b644f55875d42d812ffe87f1887d68",
        "files": [
          "fs/cifs/cifs_debug.h",
          "fs/cifs/connect.c",
          "fs/cifs/smb2pdu.c",
          "fs/cifs/smb2transport.c",
          "fs/cifs/transport.c"
        ],
        "message": "cifs: add new debugging macro cifs_server_dbg\n\nwhich can be used from contexts where we have a TCP_Server_Info *server.\nThis new macro will prepend the debugging string with \"Server:<servername> \"\nwhich will help when debugging issues on hosts with many cifs connections\nto several different servers.\n\nConvert a bunch of cifs_dbg(VFS) calls to cifs_server_dbg(VFS)\n\nSigned-off-by: Ronnie Sahlberg <lsahlber@redhat.com>\nSigned-off-by: Steve French <stfrench@microsoft.com>",
        "before_after_code_files": [
          "fs/cifs/cifs_debug.h||fs/cifs/cifs_debug.h",
          "fs/cifs/connect.c||fs/cifs/connect.c",
          "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c",
          "fs/cifs/smb2transport.c||fs/cifs/smb2transport.c",
          "fs/cifs/transport.c||fs/cifs/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c"
          ],
          "candidate": [
            "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/cifs_debug.h||fs/cifs/cifs_debug.h": [
          "File: fs/cifs/cifs_debug.h -> fs/cifs/cifs_debug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:    type, fmt, ##__VA_ARGS__); \\",
          "81: } while (0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #define cifs_server_dbg_func(ratefunc, type, fmt, ...)  \\",
          "84: do {        \\",
          "85:  if ((type) & FYI && cifsFYI & CIFS_INFO) {  \\",
          "86:   pr_debug_ ## ratefunc(\"%s: Server:%s \" fmt, \\",
          "87:    __FILE__, server->hostname, ##__VA_ARGS__);\\",
          "88:  } else if ((type) & VFS) {    \\",
          "89:   pr_err_ ## ratefunc(\"CIFS VFS: Server:%s \" fmt, \\",
          "90:    server->hostname, ##__VA_ARGS__); \\",
          "91:  } else if ((type) & NOISY && (NOISY != 0)) {  \\",
          "92:   pr_debug_ ## ratefunc(\"Server:%s \" fmt,  \\",
          "93:    server->hostname, ##__VA_ARGS__); \\",
          "94:  }       \\",
          "95: } while (0)",
          "97: #define cifs_server_dbg(type, fmt, ...)   \\",
          "98: do {       \\",
          "99:  if ((type) & ONCE)    \\",
          "100:   cifs_server_dbg_func(once,  \\",
          "101:    type, fmt, ##__VA_ARGS__); \\",
          "102:  else      \\",
          "103:   cifs_server_dbg_func(ratelimited, \\",
          "104:    type, fmt, ##__VA_ARGS__); \\",
          "105: } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   pr_debug(fmt, ##__VA_ARGS__);    \\",
          "92: } while (0)",
          "94: #define cifs_info(fmt, ...)      \\",
          "95: do {         \\",
          "96:  pr_info(\"CIFS: \"fmt, ##__VA_ARGS__);    \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: #define cifs_server_dbg(type, fmt, ...)     \\",
          "119: do {         \\",
          "120:  if (0)        \\",
          "121:   pr_debug(\"Server:%s \" fmt,    \\",
          "122:     server->hostname, ##__VA_ARGS__);  \\",
          "123: } while (0)",
          "",
          "---------------"
        ],
        "fs/cifs/connect.c||fs/cifs/connect.c": [
          "File: fs/cifs/connect.c -> fs/cifs/connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:  } else {",
          "490:   rc = reconn_setup_dfs_targets(cifs_sb, &tgt_list, &tgt_it);",
          "491:   if (rc && (rc != -EOPNOTSUPP)) {",
          "493:      __func__);",
          "494:   } else {",
          "495:    server->nr_targets = dfs_cache_get_nr_tgts(&tgt_list);",
          "",
          "[Removed Lines]",
          "492:    cifs_dbg(VFS, \"%s: no target servers for DFS failover\\n\",",
          "",
          "[Added Lines]",
          "492:    cifs_server_dbg(VFS, \"%s: no target servers for DFS failover\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:   rc = dfs_cache_noreq_update_tgthint(cifs_sb->origin_fullpath + 1,",
          "618:           tgt_it);",
          "619:   if (rc) {",
          "621:      __func__, rc);",
          "622:   }",
          "623:   rc = dfs_cache_update_vol(cifs_sb->origin_fullpath, server);",
          "624:   if (rc) {",
          "626:      __func__, rc);",
          "627:   }",
          "628:   dfs_cache_free_tgts(&tgt_list);",
          "",
          "[Removed Lines]",
          "620:    cifs_dbg(VFS, \"%s: failed to update DFS target hint: rc = %d\\n\",",
          "625:    cifs_dbg(VFS, \"%s: failed to update vol info in DFS cache: rc = %d\\n\",",
          "",
          "[Added Lines]",
          "620:    cifs_server_dbg(VFS, \"%s: failed to update DFS target hint: rc = %d\\n\",",
          "625:    cifs_server_dbg(VFS, \"%s: failed to update vol info in DFS cache: rc = %d\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "678:  if (!server->bigbuf) {",
          "679:   server->bigbuf = (char *)cifs_buf_get();",
          "680:   if (!server->bigbuf) {",
          "682:    msleep(3000);",
          "684:    return false;",
          "",
          "[Removed Lines]",
          "681:    cifs_dbg(VFS, \"No memory for large SMB response\\n\");",
          "",
          "[Added Lines]",
          "681:    cifs_server_dbg(VFS, \"No memory for large SMB response\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "691:  if (!server->smallbuf) {",
          "692:   server->smallbuf = (char *)cifs_small_buf_get();",
          "693:   if (!server->smallbuf) {",
          "695:    msleep(1000);",
          "697:    return false;",
          "",
          "[Removed Lines]",
          "694:    cifs_dbg(VFS, \"No memory for SMB response\\n\");",
          "",
          "[Added Lines]",
          "694:    cifs_server_dbg(VFS, \"No memory for SMB response\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "722:  if ((server->tcpStatus == CifsGood ||",
          "723:      server->tcpStatus == CifsNeedNegotiate) &&",
          "724:      time_after(jiffies, server->lstrp + 3 * server->echo_interval)) {",
          "727:   cifs_reconnect(server);",
          "728:   wake_up(&server->response_q);",
          "729:   return true;",
          "",
          "[Removed Lines]",
          "725:   cifs_dbg(VFS, \"Server %s has not responded in %lu seconds. Reconnecting...\\n\",",
          "726:     server->hostname, (3 * server->echo_interval) / HZ);",
          "",
          "[Added Lines]",
          "725:   cifs_server_dbg(VFS, \"has not responded in %lu seconds. Reconnecting...\\n\",",
          "726:     (3 * server->echo_interval) / HZ);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "861:   wake_up(&server->response_q);",
          "862:   break;",
          "863:  default:",
          "865:   cifs_reconnect(server);",
          "866:  }",
          "",
          "[Removed Lines]",
          "864:   cifs_dbg(VFS, \"RFC 1002 unknown response type 0x%x\\n\", type);",
          "",
          "[Added Lines]",
          "864:   cifs_server_dbg(VFS, \"RFC 1002 unknown response type 0x%x\\n\", type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1009:  if (pdu_length > CIFSMaxBufSize + MAX_HEADER_SIZE(server) -",
          "1010:   server->vals->header_preamble_size) {",
          "1012:   cifs_reconnect(server);",
          "1013:   wake_up(&server->response_q);",
          "1014:   return -ECONNABORTED;",
          "",
          "[Removed Lines]",
          "1011:   cifs_dbg(VFS, \"SMB response too long (%u bytes)\\n\", pdu_length);",
          "",
          "[Added Lines]",
          "1011:   cifs_server_dbg(VFS, \"SMB response too long (%u bytes)\\n\", pdu_length);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1150:   if (server->pdu_size < HEADER_SIZE(server) - 1 -",
          "1151:       server->vals->header_preamble_size) {",
          "1153:      server->pdu_size);",
          "1154:    cifs_reconnect(server);",
          "1155:    wake_up(&server->response_q);",
          "",
          "[Removed Lines]",
          "1152:    cifs_dbg(VFS, \"SMB response too short (%u bytes)\\n\",",
          "",
          "[Added Lines]",
          "1152:    cifs_server_dbg(VFS, \"SMB response too short (%u bytes)\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1222:     smb2_add_credits_from_hdr(bufs[i], server);",
          "1223:     cifs_dbg(FYI, \"Received oplock break\\n\");",
          "1224:    } else {",
          "1226:       \"received! NumMids %d\\n\",",
          "1227:       atomic_read(&midCount));",
          "1228:     cifs_dump_mem(\"Received Data is: \", bufs[i],",
          "",
          "[Removed Lines]",
          "1225:     cifs_dbg(VFS, \"No task to wake, unknown frame \"",
          "",
          "[Added Lines]",
          "1225:     cifs_server_dbg(VFS, \"No task to wake, unknown frame \"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2840:  struct nls_table *nls_codepage;",
          "2841:  char unc[SERVER_NAME_LENGTH + sizeof(\"//x/IPC$\")] = {0};",
          "2842:  bool seal = false;",
          "2848:  if (volume_info->seal) {",
          "2850:    seal = true;",
          "2851:   else {",
          "2853:      \"IPC: server doesn't support encryption\\n\");",
          "2854:    return -EOPNOTSUPP;",
          "2855:   }",
          "",
          "[Removed Lines]",
          "2849:   if (ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION)",
          "2852:    cifs_dbg(VFS,",
          "",
          "[Added Lines]",
          "2843:  struct TCP_Server_Info *server = ses->server;",
          "2850:   if (server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION)",
          "2853:    cifs_server_dbg(VFS,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2859:  if (tcon == NULL)",
          "2860:   return -ENOMEM;",
          "2865:  nls_codepage = load_nls_default();",
          "",
          "[Removed Lines]",
          "2862:  scnprintf(unc, sizeof(unc), \"\\\\\\\\%s\\\\IPC$\", ses->server->hostname);",
          "",
          "[Added Lines]",
          "2863:  scnprintf(unc, sizeof(unc), \"\\\\\\\\%s\\\\IPC$\", server->hostname);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2868:  tcon->ses = ses;",
          "2869:  tcon->ipc = true;",
          "2870:  tcon->seal = seal;",
          "2872:  free_xid(xid);",
          "2874:  if (rc) {",
          "2876:   tconInfoFree(tcon);",
          "2877:   goto out;",
          "2878:  }",
          "",
          "[Removed Lines]",
          "2871:  rc = ses->server->ops->tree_connect(xid, ses, unc, tcon, nls_codepage);",
          "2875:   cifs_dbg(VFS, \"failed to connect to IPC (rc=%d)\\n\", rc);",
          "",
          "[Added Lines]",
          "2872:  rc = server->ops->tree_connect(xid, ses, unc, tcon, nls_codepage);",
          "2876:   cifs_server_dbg(VFS, \"failed to connect to IPC (rc=%d)\\n\", rc);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2958:   xid = get_xid();",
          "2959:   rc = server->ops->logoff(xid, ses);",
          "2960:   if (rc)",
          "2962:     __func__, rc);",
          "2963:   _free_xid(xid);",
          "2964:  }",
          "",
          "[Removed Lines]",
          "2961:    cifs_dbg(VFS, \"%s: Session Logoff failure rc=%d\\n\",",
          "",
          "[Added Lines]",
          "2962:    cifs_server_dbg(VFS, \"%s: Session Logoff failure rc=%d\\n\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3659:    saddr4 = (struct sockaddr_in *)&server->srcaddr;",
          "3660:    saddr6 = (struct sockaddr_in6 *)&server->srcaddr;",
          "3661:    if (saddr6->sin6_family == AF_INET6)",
          "3663:       &saddr6->sin6_addr, rc);",
          "3664:    else",
          "3666:       &saddr4->sin_addr.s_addr, rc);",
          "3667:   }",
          "3668:  }",
          "",
          "[Removed Lines]",
          "3662:     cifs_dbg(VFS, \"Failed to bind to: %pI6c, error: %d\\n\",",
          "3665:     cifs_dbg(VFS, \"Failed to bind to: %pI4, error: %d\\n\",",
          "",
          "[Added Lines]",
          "3663:     cifs_server_dbg(VFS, \"Failed to bind to: %pI6c, error: %d\\n\",",
          "3666:     cifs_server_dbg(VFS, \"Failed to bind to: %pI4, error: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3766:   rc = __sock_create(cifs_net_ns(server), sfamily, SOCK_STREAM,",
          "3767:        IPPROTO_TCP, &socket, 1);",
          "3768:   if (rc < 0) {",
          "3770:    server->ssocket = NULL;",
          "3771:    return rc;",
          "3772:   }",
          "",
          "[Removed Lines]",
          "3769:    cifs_dbg(VFS, \"Error %d creating socket\\n\", rc);",
          "",
          "[Added Lines]",
          "3770:    cifs_server_dbg(VFS, \"Error %d creating socket\\n\", rc);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4151:  if ((vol->persistent == true) && (!(ses->server->capabilities &",
          "4152:          SMB2_GLOBAL_CAP_PERSISTENT_HANDLES))) {",
          "4154:   return -EOPNOTSUPP;",
          "4155:  }",
          "",
          "[Removed Lines]",
          "4153:   cifs_dbg(VFS, \"persistent handles not supported by server\\n\");",
          "",
          "[Added Lines]",
          "4154:   cifs_server_dbg(VFS, \"persistent handles not supported by server\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4588:   rc = cifs_are_all_path_components_accessible(server, xid, tcon,",
          "4589:    cifs_sb, full_path, tcon->Flags & SMB_SHARE_IS_IN_DFS);",
          "4590:   if (rc != 0) {",
          "4592:      \"enabling CIFS_MOUNT_USE_PREFIX_PATH\\n\");",
          "4593:    cifs_sb->mnt_cifs_flags |= CIFS_MOUNT_USE_PREFIX_PATH;",
          "4594:    rc = 0;",
          "",
          "[Removed Lines]",
          "4591:    cifs_dbg(VFS, \"cannot query dirs between root and final path, \"",
          "",
          "[Added Lines]",
          "4592:    cifs_server_dbg(VFS, \"cannot query dirs between root and final path, \"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5090:   rc = server->ops->sess_setup(xid, ses, nls_info);",
          "5092:  if (rc)",
          "5095:  return rc;",
          "5096: }",
          "",
          "[Removed Lines]",
          "5093:   cifs_dbg(VFS, \"Send error in SessSetup = %d\\n\", rc);",
          "",
          "[Added Lines]",
          "5094:   cifs_server_dbg(VFS, \"Send error in SessSetup = %d\\n\", rc);",
          "",
          "---------------"
        ],
        "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c": [
          "File: fs/cifs/smb2pdu.c -> fs/cifs/smb2pdu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:  if (*total_len > 200) {",
          "546:   return;",
          "547:  }",
          "",
          "[Removed Lines]",
          "545:   cifs_dbg(VFS, \"Bad frame length assembling neg contexts\\n\");",
          "",
          "[Added Lines]",
          "545:   cifs_server_dbg(VFS, \"Bad frame length assembling neg contexts\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:  cifs_dbg(FYI, \"decoding %d negotiate contexts\\n\", ctxt_cnt);",
          "662:  if (len_of_smb <= offset) {",
          "664:   return -EINVAL;",
          "665:  }",
          "",
          "[Removed Lines]",
          "663:   cifs_dbg(VFS, \"Invalid response: negotiate context offset\\n\");",
          "",
          "[Added Lines]",
          "663:   cifs_server_dbg(VFS, \"Invalid response: negotiate context offset\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692:   else if (pctx->ContextType == SMB2_POSIX_EXTENSIONS_AVAILABLE)",
          "693:    server->posix_ext_supported = true;",
          "694:   else",
          "696:     le16_to_cpu(pctx->ContextType));",
          "698:   if (rc)",
          "",
          "[Removed Lines]",
          "695:    cifs_dbg(VFS, \"unknown negcontext of type %d ignored\\n\",",
          "",
          "[Added Lines]",
          "695:    cifs_server_dbg(VFS, \"unknown negcontext of type %d ignored\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "817:   req->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);",
          "818:   req->DialectCount = cpu_to_le16(2);",
          "819:   total_len += 4;",
          "821:      SMBDEFAULT_VERSION_STRING) == 0) {",
          "822:   req->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);",
          "823:   req->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);",
          "",
          "[Removed Lines]",
          "820:  } else if (strcmp(ses->server->vals->version_string,",
          "",
          "[Added Lines]",
          "820:  } else if (strcmp(server->vals->version_string,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "840:  else",
          "841:   req->SecurityMode = 0;",
          "847:   memset(req->ClientGUID, 0, SMB2_CLIENT_GUID_SIZE);",
          "848:  else {",
          "849:   memcpy(req->ClientGUID, server->client_guid,",
          "850:    SMB2_CLIENT_GUID_SIZE);",
          "853:        SMBDEFAULT_VERSION_STRING) == 0))",
          "854:    assemble_neg_contexts(req, server, &total_len);",
          "855:  }",
          "",
          "[Removed Lines]",
          "843:  req->Capabilities = cpu_to_le32(ses->server->vals->req_capabilities);",
          "846:  if (ses->server->vals->protocol_id == SMB20_PROT_ID)",
          "851:   if ((ses->server->vals->protocol_id == SMB311_PROT_ID) ||",
          "852:       (strcmp(ses->server->vals->version_string,",
          "",
          "[Added Lines]",
          "843:  req->Capabilities = cpu_to_le32(server->vals->req_capabilities);",
          "846:  if (server->vals->protocol_id == SMB20_PROT_ID)",
          "851:   if ((server->vals->protocol_id == SMB311_PROT_ID) ||",
          "852:       (strcmp(server->vals->version_string,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "870:  if (rc == -EOPNOTSUPP) {",
          "872:    \"specifying vers=1.0 or vers=2.0 on mount for accessing\"",
          "873:    \" older servers\\n\");",
          "874:   goto neg_exit;",
          "875:  } else if (rc != 0)",
          "876:   goto neg_exit;",
          "879:      SMB3ANY_VERSION_STRING) == 0) {",
          "880:   if (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {",
          "882:     \"SMB2 dialect returned but not requested\\n\");",
          "883:    return -EIO;",
          "884:   } else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {",
          "886:     \"SMB2.1 dialect returned but not requested\\n\");",
          "887:    return -EIO;",
          "888:   }",
          "890:      SMBDEFAULT_VERSION_STRING) == 0) {",
          "891:   if (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {",
          "893:     \"SMB2 dialect returned but not requested\\n\");",
          "894:    return -EIO;",
          "895:   } else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {",
          "899:   } else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID)) {",
          "902:   }",
          "903:  } else if (le16_to_cpu(rsp->DialectRevision) !=",
          "907:    le16_to_cpu(rsp->DialectRevision));",
          "908:   return -EIO;",
          "909:  }",
          "",
          "[Removed Lines]",
          "871:   cifs_dbg(VFS, \"Dialect not supported by server. Consider \"",
          "878:  if (strcmp(ses->server->vals->version_string,",
          "881:    cifs_dbg(VFS,",
          "885:    cifs_dbg(VFS,",
          "889:  } else if (strcmp(ses->server->vals->version_string,",
          "892:    cifs_dbg(VFS,",
          "897:    ses->server->ops = &smb21_operations;",
          "898:    ses->server->vals = &smb21_values;",
          "900:    ses->server->ops = &smb311_operations;",
          "901:    ses->server->vals = &smb311_values;",
          "904:     ses->server->vals->protocol_id) {",
          "906:   cifs_dbg(VFS, \"Illegal 0x%x dialect returned: not requested\\n\",",
          "",
          "[Added Lines]",
          "871:   cifs_server_dbg(VFS, \"Dialect not supported by server. Consider \"",
          "878:  if (strcmp(server->vals->version_string,",
          "881:    cifs_server_dbg(VFS,",
          "885:    cifs_server_dbg(VFS,",
          "889:  } else if (strcmp(server->vals->version_string,",
          "892:    cifs_server_dbg(VFS,",
          "897:    server->ops = &smb21_operations;",
          "898:    server->vals = &smb21_values;",
          "900:    server->ops = &smb311_operations;",
          "901:    server->vals = &smb311_values;",
          "904:     server->vals->protocol_id) {",
          "906:   cifs_server_dbg(VFS, \"Illegal 0x%x dialect returned: not requested\\n\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "921:  else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))",
          "922:   cifs_dbg(FYI, \"negotiated smb3.1.1 dialect\\n\");",
          "923:  else {",
          "925:     le16_to_cpu(rsp->DialectRevision));",
          "926:   rc = -EIO;",
          "927:   goto neg_exit;",
          "",
          "[Removed Lines]",
          "924:   cifs_dbg(VFS, \"Illegal dialect returned by server 0x%x\\n\",",
          "",
          "[Added Lines]",
          "924:   cifs_server_dbg(VFS, \"Illegal dialect returned by server 0x%x\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "981:    rc = smb311_decode_neg_context(rsp, server,",
          "982:              rsp_iov.iov_len);",
          "983:   else",
          "985:  }",
          "986: neg_exit:",
          "987:  free_rsp_buf(resp_buftype, rsp);",
          "",
          "[Removed Lines]",
          "984:    cifs_dbg(VFS, \"Missing expected negotiate contexts\\n\");",
          "",
          "[Added Lines]",
          "984:    cifs_server_dbg(VFS, \"Missing expected negotiate contexts\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "995:  struct validate_negotiate_info_rsp *pneg_rsp = NULL;",
          "996:  u32 rsplen;",
          "999:  cifs_dbg(FYI, \"validate negotiate\\n\");",
          "1003:   return 0;",
          "",
          "[Removed Lines]",
          "1002:  if (tcon->ses->server->dialect == SMB311_PROT_ID)",
          "",
          "[Added Lines]",
          "998:  struct TCP_Server_Info *server = tcon->ses->server;",
          "1003:  if (server->dialect == SMB311_PROT_ID)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1018:  }",
          "1020:  if (tcon->ses->session_flags & SMB2_SESSION_FLAG_IS_NULL)",
          "1023:  pneg_inbuf = kmalloc(sizeof(*pneg_inbuf), GFP_NOFS);",
          "1024:  if (!pneg_inbuf)",
          "1025:   return -ENOMEM;",
          "1027:  pneg_inbuf->Capabilities =",
          "1030:      SMB2_CLIENT_GUID_SIZE);",
          "1032:  if (tcon->ses->sign)",
          "",
          "[Removed Lines]",
          "1021:   cifs_dbg(VFS, \"Unexpected null user (anonymous) auth flag sent by server\\n\");",
          "1028:    cpu_to_le32(tcon->ses->server->vals->req_capabilities);",
          "1029:  memcpy(pneg_inbuf->Guid, tcon->ses->server->client_guid,",
          "",
          "[Added Lines]",
          "1022:   cifs_server_dbg(VFS, \"Unexpected null user (anonymous) auth flag sent by server\\n\");",
          "1029:    cpu_to_le32(server->vals->req_capabilities);",
          "1030:  memcpy(pneg_inbuf->Guid, server->client_guid,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1039:   pneg_inbuf->SecurityMode = 0;",
          "1043:   SMB3ANY_VERSION_STRING) == 0) {",
          "1044:   pneg_inbuf->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);",
          "1045:   pneg_inbuf->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);",
          "",
          "[Removed Lines]",
          "1042:  if (strcmp(tcon->ses->server->vals->version_string,",
          "",
          "[Added Lines]",
          "1043:  if (strcmp(server->vals->version_string,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1048:   inbuflen = sizeof(*pneg_inbuf) -",
          "1049:     (2 * sizeof(pneg_inbuf->Dialects[0]));",
          "1051:   SMBDEFAULT_VERSION_STRING) == 0) {",
          "1052:   pneg_inbuf->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);",
          "1053:   pneg_inbuf->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);",
          "",
          "[Removed Lines]",
          "1050:  } else if (strcmp(tcon->ses->server->vals->version_string,",
          "",
          "[Added Lines]",
          "1051:  } else if (strcmp(server->vals->version_string,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1059:  } else {",
          "1061:   pneg_inbuf->Dialects[0] =",
          "1063:   pneg_inbuf->DialectCount = cpu_to_le16(1);",
          "1065:   inbuflen = sizeof(*pneg_inbuf) -",
          "",
          "[Removed Lines]",
          "1062:    cpu_to_le16(tcon->ses->server->vals->protocol_id);",
          "",
          "[Added Lines]",
          "1063:    cpu_to_le16(server->vals->protocol_id);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1079:   rc = 0;",
          "1080:   goto out_free_inbuf;",
          "1081:  } else if (rc != 0) {",
          "1083:   rc = -EIO;",
          "1084:   goto out_free_inbuf;",
          "1085:  }",
          "1087:  rc = -EIO;",
          "1088:  if (rsplen != sizeof(*pneg_rsp)) {",
          "1090:     rsplen);",
          "",
          "[Removed Lines]",
          "1078:   cifs_dbg(VFS, \"Server does not support validate negotiate\\n\");",
          "1082:   cifs_dbg(VFS, \"validate protocol negotiate failed: %d\\n\", rc);",
          "1089:   cifs_dbg(VFS, \"invalid protocol negotiate response size: %d\\n\",",
          "",
          "[Added Lines]",
          "1079:   cifs_server_dbg(VFS, \"Server does not support validate negotiate\\n\");",
          "1083:   cifs_server_dbg(VFS, \"validate protocol negotiate failed: %d\\n\", rc);",
          "1090:   cifs_server_dbg(VFS, \"invalid protocol negotiate response size: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1095:  }",
          "1099:   goto vneg_out;",
          "1102:   goto vneg_out;",
          "1106:  if ((le32_to_cpu(pneg_rsp->Capabilities) | SMB2_NT_FIND |",
          "1108:   goto vneg_out;",
          "",
          "[Removed Lines]",
          "1098:  if (pneg_rsp->Dialect != cpu_to_le16(tcon->ses->server->dialect))",
          "1101:  if (pneg_rsp->SecurityMode != cpu_to_le16(tcon->ses->server->sec_mode))",
          "1107:        SMB2_LARGE_FILES) != tcon->ses->server->capabilities)",
          "",
          "[Added Lines]",
          "1099:  if (pneg_rsp->Dialect != cpu_to_le16(server->dialect))",
          "1102:  if (pneg_rsp->SecurityMode != cpu_to_le16(server->sec_mode))",
          "1108:        SMB2_LARGE_FILES) != server->capabilities)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1113:  goto out_free_rsp;",
          "1115: vneg_out:",
          "1117: out_free_rsp:",
          "1118:  kfree(pneg_rsp);",
          "1119: out_free_inbuf:",
          "",
          "[Removed Lines]",
          "1116:  cifs_dbg(VFS, \"protocol revalidation - security settings mismatch\\n\");",
          "",
          "[Added Lines]",
          "1117:  cifs_server_dbg(VFS, \"protocol revalidation - security settings mismatch\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1567:   sess_data->func(sess_data);",
          "1569:  if ((ses->session_flags & SMB2_SESSION_FLAG_IS_GUEST) && (ses->sign))",
          "1571:  rc = sess_data->result;",
          "1572: out:",
          "1573:  kfree(sess_data);",
          "",
          "[Removed Lines]",
          "1570:   cifs_dbg(VFS, \"signing requested but authenticated as guest\\n\");",
          "",
          "[Added Lines]",
          "1571:   cifs_server_dbg(VFS, \"signing requested but authenticated as guest\\n\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1660:  __le16 *unc_path = NULL;",
          "1661:  int flags = 0;",
          "1662:  unsigned int total_len;",
          "1664:  cifs_dbg(FYI, \"TCON\\n\");",
          "1667:   return -EIO;",
          "1669:  unc_path = kmalloc(MAX_SHARENAME_LENGTH * 2, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "1666:  if (!(ses->server) || !tree)",
          "",
          "[Added Lines]",
          "1664:  struct TCP_Server_Info *server = ses->server;",
          "1668:  if (!server || !tree)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1710:      !smb3_encryption_required(tcon) &&",
          "1711:      !(ses->session_flags &",
          "1712:       (SMB2_SESSION_FLAG_IS_GUEST|SMB2_SESSION_FLAG_IS_NULL)) &&",
          "",
          "[Removed Lines]",
          "1709:  if ((ses->server->dialect == SMB311_PROT_ID) &&",
          "",
          "[Added Lines]",
          "1711:  if ((server->dialect == SMB311_PROT_ID) &&",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1745:   cifs_dbg(FYI, \"connection to printer\\n\");",
          "1746:   break;",
          "1747:  default:",
          "1749:   rc = -EOPNOTSUPP;",
          "1750:   goto tcon_error_exit;",
          "1751:  }",
          "",
          "[Removed Lines]",
          "1748:   cifs_dbg(VFS, \"unknown share type %d\\n\", rsp->ShareType);",
          "",
          "[Added Lines]",
          "1750:   cifs_server_dbg(VFS, \"unknown share type %d\\n\", rsp->ShareType);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1761:  if ((rsp->Capabilities & SMB2_SHARE_CAP_DFS) &&",
          "1762:      ((tcon->share_flags & SHI1005_FLAGS_DFS) == 0))",
          "1765:  if (tcon->seal &&",
          "1769:  init_copy_chunk_defaults(tcon);",
          "1772: tcon_exit:",
          "1774:  free_rsp_buf(resp_buftype, rsp);",
          "",
          "[Removed Lines]",
          "1763:   cifs_dbg(VFS, \"DFS capability contradicts DFS flag\\n\");",
          "1766:      !(tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))",
          "1767:   cifs_dbg(VFS, \"Encryption is requested but not supported\\n\");",
          "1770:  if (tcon->ses->server->ops->validate_negotiate)",
          "1771:   rc = tcon->ses->server->ops->validate_negotiate(xid, tcon);",
          "",
          "[Added Lines]",
          "1765:   cifs_server_dbg(VFS, \"DFS capability contradicts DFS flag\\n\");",
          "1768:      !(server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))",
          "1769:   cifs_server_dbg(VFS, \"Encryption is requested but not supported\\n\");",
          "1772:  if (server->ops->validate_negotiate)",
          "1773:   rc = server->ops->validate_negotiate(xid, tcon);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1778: tcon_error_exit:",
          "1779:  if (rsp && rsp->sync_hdr.Status == STATUS_BAD_NETWORK_NAME) {",
          "1781:  }",
          "1782:  goto tcon_exit;",
          "1783: }",
          "",
          "[Removed Lines]",
          "1780:   cifs_dbg(VFS, \"BAD_NETWORK_NAME: %s\\n\", tree);",
          "",
          "[Added Lines]",
          "1782:   cifs_server_dbg(VFS, \"BAD_NETWORK_NAME: %s\\n\", tree);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2741:  int resp_buftype = CIFS_NO_BUFFER;",
          "2742:  int rc = 0;",
          "2743:  int flags = 0;",
          "2745:  cifs_dbg(FYI, \"SMB2 IOCTL\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2746:  struct TCP_Server_Info *server;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2756:  else",
          "2757:   return -EIO;",
          "2760:   return -EIO;",
          "2762:  if (smb3_encryption_required(tcon))",
          "",
          "[Removed Lines]",
          "2759:  if (!ses || !(ses->server))",
          "",
          "[Added Lines]",
          "2762:  server = ses->server;",
          "2763:  if (!ses || !(server))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2806:  if (*plen == 0)",
          "2808:  else if (*plen > rsp_iov.iov_len || *plen > 0xFF00) {",
          "2811:   rc = -EIO;",
          "2812:   goto ioctl_exit;",
          "2813:  }",
          "2815:  if (rsp_iov.iov_len - *plen < le32_to_cpu(rsp->OutputOffset)) {",
          "2817:    le32_to_cpu(rsp->OutputOffset));",
          "2819:   rc = -EIO;",
          "",
          "[Removed Lines]",
          "2809:   cifs_dbg(VFS, \"srv returned invalid ioctl length: %d\\n\", *plen);",
          "2816:   cifs_dbg(VFS, \"Malformed ioctl resp: len %d offset %d\\n\", *plen,",
          "",
          "[Added Lines]",
          "2813:   cifs_server_dbg(VFS, \"srv returned invalid ioctl length: %d\\n\", *plen);",
          "2820:   cifs_server_dbg(VFS, \"Malformed ioctl resp: len %d offset %d\\n\", *plen,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3054:  int rc = 0;",
          "3055:  int resp_buftype = CIFS_NO_BUFFER;",
          "3056:  struct cifs_ses *ses = tcon->ses;",
          "3057:  int flags = 0;",
          "3058:  bool allocated = false;",
          "3060:  cifs_dbg(FYI, \"Query Info\\n\");",
          "3063:   return -EIO;",
          "3065:  if (smb3_encryption_required(tcon))",
          "",
          "[Removed Lines]",
          "3062:  if (!ses || !(ses->server))",
          "",
          "[Added Lines]",
          "3061:  struct TCP_Server_Info *server = ses->server;",
          "3067:  if (!ses || !(server))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3097:   if (!*data) {",
          "3099:    if (!*data) {",
          "3101:      \"Error %d allocating memory for acl\\n\",",
          "3102:      rc);",
          "",
          "[Removed Lines]",
          "3100:     cifs_dbg(VFS,",
          "",
          "[Added Lines]",
          "3105:     cifs_server_dbg(VFS,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3490:    rc = smb2_verify_signature(&rqst, server);",
          "3491:    if (rc)",
          "3493:       rc);",
          "3494:   }",
          "",
          "[Removed Lines]",
          "3492:     cifs_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "[Added Lines]",
          "3497:     cifs_server_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4079:   info_buf_size = sizeof(SEARCH_ID_FULL_DIR_INFO) - 1;",
          "4080:   break;",
          "4081:  default:",
          "4083:     srch_inf->info_level);",
          "4084:   rc = -EINVAL;",
          "4085:   goto qdir_exit;",
          "",
          "[Removed Lines]",
          "4082:   cifs_dbg(VFS, \"info level %u isn't supported\\n\",",
          "",
          "[Added Lines]",
          "4087:   cifs_server_dbg(VFS, \"info level %u isn't supported\\n\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4170:  else if (resp_buftype == CIFS_SMALL_BUFFER)",
          "4171:   srch_inf->smallBuf = true;",
          "4172:  else",
          "4175:  trace_smb3_query_dir_done(xid, persistent_fid, tcon->tid,",
          "4176:    tcon->ses->Suid, index, srch_inf->entries_in_buffer);",
          "",
          "[Removed Lines]",
          "4173:   cifs_dbg(VFS, \"illegal search buffer type\\n\");",
          "",
          "[Added Lines]",
          "4178:   cifs_server_dbg(VFS, \"illegal search buffer type\\n\");",
          "",
          "---------------"
        ],
        "fs/cifs/smb2transport.c||fs/cifs/smb2transport.c": [
          "File: fs/cifs/smb2transport.c -> fs/cifs/smb2transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:  ses = smb2_find_smb_ses(server, shdr->SessionId);",
          "178:  if (!ses) {",
          "180:   return 0;",
          "181:  }",
          "",
          "[Removed Lines]",
          "179:   cifs_dbg(VFS, \"%s: Could not find session\\n\", __func__);",
          "",
          "[Added Lines]",
          "179:   cifs_server_dbg(VFS, \"%s: Could not find session\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:  rc = smb2_crypto_shash_allocate(server);",
          "187:  if (rc) {",
          "189:   return rc;",
          "190:  }",
          "192:  rc = crypto_shash_setkey(server->secmech.hmacsha256,",
          "193:      ses->auth_key.response, SMB2_NTLMV2_SESSKEY_SIZE);",
          "194:  if (rc) {",
          "196:   return rc;",
          "197:  }",
          "199:  shash = &server->secmech.sdeschmacsha256->shash;",
          "200:  rc = crypto_shash_init(shash);",
          "201:  if (rc) {",
          "203:   return rc;",
          "204:  }",
          "",
          "[Removed Lines]",
          "188:   cifs_dbg(VFS, \"%s: sha256 alloc failed\\n\", __func__);",
          "195:   cifs_dbg(VFS, \"%s: Could not update with response\\n\", __func__);",
          "202:   cifs_dbg(VFS, \"%s: Could not init sha256\", __func__);",
          "",
          "[Added Lines]",
          "188:   cifs_server_dbg(VFS, \"%s: sha256 alloc failed\\n\", __func__);",
          "195:   cifs_server_dbg(VFS, \"%s: Could not update with response\\n\", __func__);",
          "202:   cifs_server_dbg(VFS, \"%s: Could not init sha256\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:   rc = crypto_shash_update(shash, iov[0].iov_base,",
          "216:       iov[0].iov_len);",
          "217:   if (rc) {",
          "219:      __func__);",
          "220:    return rc;",
          "221:   }",
          "",
          "[Removed Lines]",
          "218:    cifs_dbg(VFS, \"%s: Could not update with payload\\n\",",
          "",
          "[Added Lines]",
          "218:    cifs_server_dbg(VFS, \"%s: Could not update with payload\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:  int rc = 0;",
          "240:  unsigned char prfhash[SMB2_HMACSHA256_SIZE];",
          "241:  unsigned char *hashptr = prfhash;",
          "243:  memset(prfhash, 0x0, SMB2_HMACSHA256_SIZE);",
          "244:  memset(key, 0x0, key_size);",
          "247:  if (rc) {",
          "249:   goto smb3signkey_ret;",
          "250:  }",
          "253:   ses->auth_key.response, SMB2_NTLMV2_SESSKEY_SIZE);",
          "254:  if (rc) {",
          "256:   goto smb3signkey_ret;",
          "257:  }",
          "260:  if (rc) {",
          "262:   goto smb3signkey_ret;",
          "263:  }",
          "266:     i, 4);",
          "267:  if (rc) {",
          "269:   goto smb3signkey_ret;",
          "270:  }",
          "273:     label.iov_base, label.iov_len);",
          "274:  if (rc) {",
          "276:   goto smb3signkey_ret;",
          "277:  }",
          "280:     &zero, 1);",
          "281:  if (rc) {",
          "283:   goto smb3signkey_ret;",
          "284:  }",
          "287:     context.iov_base, context.iov_len);",
          "288:  if (rc) {",
          "290:   goto smb3signkey_ret;",
          "291:  }",
          "294:     L, 4);",
          "295:  if (rc) {",
          "297:   goto smb3signkey_ret;",
          "298:  }",
          "301:     hashptr);",
          "302:  if (rc) {",
          "304:   goto smb3signkey_ret;",
          "305:  }",
          "",
          "[Removed Lines]",
          "246:  rc = smb3_crypto_shash_allocate(ses->server);",
          "248:   cifs_dbg(VFS, \"%s: crypto alloc failed\\n\", __func__);",
          "252:  rc = crypto_shash_setkey(ses->server->secmech.hmacsha256,",
          "255:   cifs_dbg(VFS, \"%s: Could not set with session key\\n\", __func__);",
          "259:  rc = crypto_shash_init(&ses->server->secmech.sdeschmacsha256->shash);",
          "261:   cifs_dbg(VFS, \"%s: Could not init sign hmac\\n\", __func__);",
          "265:  rc = crypto_shash_update(&ses->server->secmech.sdeschmacsha256->shash,",
          "268:   cifs_dbg(VFS, \"%s: Could not update with n\\n\", __func__);",
          "272:  rc = crypto_shash_update(&ses->server->secmech.sdeschmacsha256->shash,",
          "275:   cifs_dbg(VFS, \"%s: Could not update with label\\n\", __func__);",
          "279:  rc = crypto_shash_update(&ses->server->secmech.sdeschmacsha256->shash,",
          "282:   cifs_dbg(VFS, \"%s: Could not update with zero\\n\", __func__);",
          "286:  rc = crypto_shash_update(&ses->server->secmech.sdeschmacsha256->shash,",
          "289:   cifs_dbg(VFS, \"%s: Could not update with context\\n\", __func__);",
          "293:  rc = crypto_shash_update(&ses->server->secmech.sdeschmacsha256->shash,",
          "296:   cifs_dbg(VFS, \"%s: Could not update with L\\n\", __func__);",
          "300:  rc = crypto_shash_final(&ses->server->secmech.sdeschmacsha256->shash,",
          "303:   cifs_dbg(VFS, \"%s: Could not generate sha256 hash\\n\", __func__);",
          "",
          "[Added Lines]",
          "242:  struct TCP_Server_Info *server = ses->server;",
          "247:  rc = smb3_crypto_shash_allocate(server);",
          "249:   cifs_server_dbg(VFS, \"%s: crypto alloc failed\\n\", __func__);",
          "253:  rc = crypto_shash_setkey(server->secmech.hmacsha256,",
          "256:   cifs_server_dbg(VFS, \"%s: Could not set with session key\\n\", __func__);",
          "260:  rc = crypto_shash_init(&server->secmech.sdeschmacsha256->shash);",
          "262:   cifs_server_dbg(VFS, \"%s: Could not init sign hmac\\n\", __func__);",
          "266:  rc = crypto_shash_update(&server->secmech.sdeschmacsha256->shash,",
          "269:   cifs_server_dbg(VFS, \"%s: Could not update with n\\n\", __func__);",
          "273:  rc = crypto_shash_update(&server->secmech.sdeschmacsha256->shash,",
          "276:   cifs_server_dbg(VFS, \"%s: Could not update with label\\n\", __func__);",
          "280:  rc = crypto_shash_update(&server->secmech.sdeschmacsha256->shash,",
          "283:   cifs_server_dbg(VFS, \"%s: Could not update with zero\\n\", __func__);",
          "287:  rc = crypto_shash_update(&server->secmech.sdeschmacsha256->shash,",
          "290:   cifs_server_dbg(VFS, \"%s: Could not update with context\\n\", __func__);",
          "294:  rc = crypto_shash_update(&server->secmech.sdeschmacsha256->shash,",
          "297:   cifs_server_dbg(VFS, \"%s: Could not update with L\\n\", __func__);",
          "301:  rc = crypto_shash_final(&server->secmech.sdeschmacsha256->shash,",
          "304:   cifs_server_dbg(VFS, \"%s: Could not generate sha256 hash\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:  ses = smb2_find_smb_ses(server, shdr->SessionId);",
          "438:  if (!ses) {",
          "440:   return 0;",
          "441:  }",
          "",
          "[Removed Lines]",
          "439:   cifs_dbg(VFS, \"%s: Could not find session\\n\", __func__);",
          "",
          "[Added Lines]",
          "440:   cifs_server_dbg(VFS, \"%s: Could not find session\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "446:  rc = crypto_shash_setkey(server->secmech.cmacaes,",
          "447:      ses->smb3signingkey, SMB2_CMACAES_SIZE);",
          "448:  if (rc) {",
          "450:   return rc;",
          "451:  }",
          "",
          "[Removed Lines]",
          "449:   cifs_dbg(VFS, \"%s: Could not set key for cmac aes\\n\", __func__);",
          "",
          "[Added Lines]",
          "450:   cifs_server_dbg(VFS, \"%s: Could not set key for cmac aes\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458:  rc = crypto_shash_init(shash);",
          "459:  if (rc) {",
          "461:   return rc;",
          "462:  }",
          "",
          "[Removed Lines]",
          "460:   cifs_dbg(VFS, \"%s: Could not init cmac aes\\n\", __func__);",
          "",
          "[Added Lines]",
          "461:   cifs_server_dbg(VFS, \"%s: Could not init cmac aes\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "473:   rc = crypto_shash_update(shash, iov[0].iov_base,",
          "474:       iov[0].iov_len);",
          "475:   if (rc) {",
          "477:      __func__);",
          "478:    return rc;",
          "479:   }",
          "",
          "[Removed Lines]",
          "476:    cifs_dbg(VFS, \"%s: Could not update with payload\\n\",",
          "",
          "[Added Lines]",
          "477:    cifs_server_dbg(VFS, \"%s: Could not update with payload\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "666:   rc = smb2_verify_signature(&rqst, server);",
          "667:   if (rc)",
          "669:      rc);",
          "670:  }",
          "",
          "[Removed Lines]",
          "668:    cifs_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "[Added Lines]",
          "669:    cifs_server_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "739:   else",
          "740:    tfm = crypto_alloc_aead(\"ccm(aes)\", 0, 0);",
          "741:   if (IS_ERR(tfm)) {",
          "743:      __func__);",
          "744:    return PTR_ERR(tfm);",
          "745:   }",
          "",
          "[Removed Lines]",
          "742:    cifs_dbg(VFS, \"%s: Failed to alloc encrypt aead\\n\",",
          "",
          "[Added Lines]",
          "743:    cifs_server_dbg(VFS, \"%s: Failed to alloc encrypt aead\\n\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "754:   if (IS_ERR(tfm)) {",
          "755:    crypto_free_aead(server->secmech.ccmaesencrypt);",
          "756:    server->secmech.ccmaesencrypt = NULL;",
          "758:      __func__);",
          "759:    return PTR_ERR(tfm);",
          "760:   }",
          "",
          "[Removed Lines]",
          "757:    cifs_dbg(VFS, \"%s: Failed to alloc decrypt aead\\n\",",
          "",
          "[Added Lines]",
          "758:    cifs_server_dbg(VFS, \"%s: Failed to alloc decrypt aead\\n\",",
          "",
          "---------------"
        ],
        "fs/cifs/transport.c||fs/cifs/transport.c": [
          "File: fs/cifs/transport.c -> fs/cifs/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: #ifdef CONFIG_CIFS_STATS2",
          "119:  now = jiffies;",
          "120:  if (now < midEntry->when_alloc)",
          "122:  roundtrip_time = now - midEntry->when_alloc;",
          "124:  if (smb_cmd < NUMBER_OF_SMB2_COMMANDS) {",
          "",
          "[Removed Lines]",
          "121:   cifs_dbg(VFS, \"invalid mid allocation time\\n\");",
          "",
          "[Added Lines]",
          "121:   cifs_server_dbg(VFS, \"invalid mid allocation time\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:    retries++;",
          "233:    if (retries >= 14 ||",
          "234:        (!server->noblocksnd && (retries > 2))) {",
          "236:       ssocket);",
          "237:     return -EAGAIN;",
          "238:    }",
          "",
          "[Removed Lines]",
          "235:     cifs_dbg(VFS, \"sends on sock %p stuck for 15 seconds\\n\",",
          "",
          "[Added Lines]",
          "235:     cifs_server_dbg(VFS, \"sends on sock %p stuck for 15 seconds\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:   if (rc == 0) {",
          "250:    msleep(500);",
          "251:    continue;",
          "252:   }",
          "",
          "[Removed Lines]",
          "249:    cifs_dbg(VFS, \"tcp sent no data\\n\");",
          "",
          "[Added Lines]",
          "249:    cifs_server_dbg(VFS, \"tcp sent no data\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:  }",
          "441: smbd_done:",
          "442:  if (rc < 0 && rc != -EINTR)",
          "444:     rc);",
          "445:  else if (rc > 0)",
          "446:   rc = 0;",
          "",
          "[Removed Lines]",
          "443:   cifs_dbg(VFS, \"Error %d sending data on socket to server\\n\",",
          "",
          "[Added Lines]",
          "443:   cifs_server_dbg(VFS, \"Error %d sending data on socket to server\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "473:  cur_rqst[0].rq_nvec = 1;",
          "475:  if (!server->ops->init_transform_rq) {",
          "478:   return -EIO;",
          "479:  }",
          "",
          "[Removed Lines]",
          "476:   cifs_dbg(VFS, \"Encryption requested but transform callback \"",
          "477:     \"is missing\\n\");",
          "",
          "[Added Lines]",
          "476:   cifs_server_dbg(VFS, \"Encryption requested but transform \"",
          "477:     \"callback is missing\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "548:    if (!rc) {",
          "549:     trace_smb3_credit_timeout(server->CurrentMid,",
          "550:      server->hostname, num_credits);",
          "552:       timeout);",
          "553:     return -ENOTSUPP;",
          "554:    }",
          "",
          "[Removed Lines]",
          "551:     cifs_dbg(VFS, \"wait timed out after %d ms\\n\",",
          "",
          "[Added Lines]",
          "551:     cifs_server_dbg(VFS, \"wait timed out after %d ms\\n\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "589:      trace_smb3_credit_timeout(",
          "590:       server->CurrentMid,",
          "591:       server->hostname, num_credits);",
          "593:        timeout);",
          "594:      return -ENOTSUPP;",
          "595:     }",
          "",
          "[Removed Lines]",
          "592:      cifs_dbg(VFS, \"wait timed out after %d ms\\n\",",
          "",
          "[Added Lines]",
          "592:      cifs_server_dbg(VFS, \"wait timed out after %d ms\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "869:   break;",
          "870:  default:",
          "871:   list_del_init(&mid->qhead);",
          "873:     __func__, mid->mid, mid->mid_state);",
          "874:   rc = -EIO;",
          "875:  }",
          "",
          "[Removed Lines]",
          "872:   cifs_dbg(VFS, \"%s: invalid mid state mid=%llu state=%d\\n\",",
          "",
          "[Added Lines]",
          "872:   cifs_server_dbg(VFS, \"%s: invalid mid state mid=%llu state=%d\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "910:   rc = cifs_verify_signature(&rqst, server,",
          "911:         mid->sequence_number);",
          "912:   if (rc)",
          "914:      rc);",
          "915:  }",
          "",
          "[Removed Lines]",
          "913:    cifs_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "[Added Lines]",
          "913:    cifs_server_dbg(VFS, \"SMB signature verification returned error = %d\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1107:  }",
          "1108:  if (rc != 0) {",
          "1109:   for (; i < num_rqst; i++) {",
          "1111:      midQ[i]->mid, le16_to_cpu(midQ[i]->command));",
          "1112:    send_cancel(server, &rqst[i], midQ[i]);",
          "1113:    spin_lock(&GlobalMid_Lock);",
          "",
          "[Removed Lines]",
          "1110:    cifs_dbg(VFS, \"Cancelling wait for mid %llu cmd: %d\\n\",",
          "",
          "[Added Lines]",
          "1110:    cifs_server_dbg(VFS, \"Cancelling wait for mid %llu cmd: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1242:  struct kvec iov = { .iov_base = in_buf, .iov_len = len };",
          "1243:  struct smb_rqst rqst = { .rq_iov = &iov, .rq_nvec = 1 };",
          "1244:  struct cifs_credits credits = { .value = 1, .instance = 0 };",
          "1246:  if (ses == NULL) {",
          "1247:   cifs_dbg(VFS, \"Null smb session\\n\");",
          "1248:   return -EIO;",
          "1249:  }",
          "1251:   cifs_dbg(VFS, \"Null tcp session\\n\");",
          "1252:   return -EIO;",
          "1253:  }",
          "1256:   return -ENOENT;",
          "",
          "[Removed Lines]",
          "1250:  if (ses->server == NULL) {",
          "1255:  if (ses->server->tcpStatus == CifsExiting)",
          "",
          "[Added Lines]",
          "1245:  struct TCP_Server_Info *server = ses->server;",
          "1251:  if (server == NULL) {",
          "1256:  if (server->tcpStatus == CifsExiting)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1262:  if (len > CIFSMaxBufSize + MAX_CIFS_HDR_SIZE - 4) {",
          "1264:     len);",
          "1265:   return -EIO;",
          "1266:  }",
          "1269:  if (rc)",
          "1270:   return rc;",
          "",
          "[Removed Lines]",
          "1263:   cifs_dbg(VFS, \"Illegal length, greater than maximum frame, %d\\n\",",
          "1268:  rc = wait_for_free_request(ses->server, flags, &credits.instance);",
          "",
          "[Added Lines]",
          "1264:   cifs_server_dbg(VFS, \"Illegal length, greater than maximum frame, %d\\n\",",
          "1269:  rc = wait_for_free_request(server, flags, &credits.instance);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1273:     and avoid races inside tcp sendmsg code that could cause corruption",
          "1278:  rc = allocate_mid(ses, in_buf, &midQ);",
          "1279:  if (rc) {",
          "1280:   mutex_unlock(&ses->server->srv_mutex);",
          "1283:   return rc;",
          "1284:  }",
          "1287:  if (rc) {",
          "1289:   goto out;",
          "1290:  }",
          "1292:  midQ->mid_state = MID_REQUEST_SUBMITTED;",
          "1297:  cifs_save_when_sent(midQ);",
          "1299:  if (rc < 0)",
          "1304:  if (rc < 0)",
          "1305:   goto out;",
          "1308:  if (rc != 0) {",
          "1310:   spin_lock(&GlobalMid_Lock);",
          "1311:   if (midQ->mid_state == MID_REQUEST_SUBMITTED) {",
          "1313:    midQ->callback = DeleteMidQEntry;",
          "1314:    spin_unlock(&GlobalMid_Lock);",
          "1316:    return rc;",
          "1317:   }",
          "1318:   spin_unlock(&GlobalMid_Lock);",
          "1319:  }",
          "1322:  if (rc != 0) {",
          "1324:   return rc;",
          "1325:  }",
          "1327:  if (!midQ->resp_buf || !out_buf ||",
          "1328:      midQ->mid_state != MID_RESPONSE_RECEIVED) {",
          "1329:   rc = -EIO;",
          "1331:   goto out;",
          "1332:  }",
          "1335:  memcpy(out_buf, midQ->resp_buf, *pbytes_returned + 4);",
          "1337: out:",
          "1338:  cifs_delete_mid(midQ);",
          "1341:  return rc;",
          "1342: }",
          "",
          "[Removed Lines]",
          "1276:  mutex_lock(&ses->server->srv_mutex);",
          "1282:   add_credits(ses->server, &credits, 0);",
          "1286:  rc = cifs_sign_smb(in_buf, ses->server, &midQ->sequence_number);",
          "1288:   mutex_unlock(&ses->server->srv_mutex);",
          "1294:  cifs_in_send_inc(ses->server);",
          "1295:  rc = smb_send(ses->server, in_buf, len);",
          "1296:  cifs_in_send_dec(ses->server);",
          "1300:   ses->server->sequence_number -= 2;",
          "1302:  mutex_unlock(&ses->server->srv_mutex);",
          "1307:  rc = wait_for_response(ses->server, midQ);",
          "1309:   send_cancel(ses->server, &rqst, midQ);",
          "1315:    add_credits(ses->server, &credits, 0);",
          "1321:  rc = cifs_sync_mid_result(midQ, ses->server);",
          "1323:   add_credits(ses->server, &credits, 0);",
          "1330:   cifs_dbg(VFS, \"Bad MID state?\\n\");",
          "1336:  rc = cifs_check_receive(midQ, ses->server, 0);",
          "1339:  add_credits(ses->server, &credits, 0);",
          "",
          "[Added Lines]",
          "1277:  mutex_lock(&server->srv_mutex);",
          "1283:   add_credits(server, &credits, 0);",
          "1287:  rc = cifs_sign_smb(in_buf, server, &midQ->sequence_number);",
          "1289:   mutex_unlock(&server->srv_mutex);",
          "1295:  cifs_in_send_inc(server);",
          "1296:  rc = smb_send(server, in_buf, len);",
          "1297:  cifs_in_send_dec(server);",
          "1301:   server->sequence_number -= 2;",
          "1303:  mutex_unlock(&server->srv_mutex);",
          "1308:  rc = wait_for_response(server, midQ);",
          "1310:   send_cancel(server, &rqst, midQ);",
          "1316:    add_credits(server, &credits, 0);",
          "1322:  rc = cifs_sync_mid_result(midQ, server);",
          "1324:   add_credits(server, &credits, 0);",
          "1331:   cifs_server_dbg(VFS, \"Bad MID state?\\n\");",
          "1337:  rc = cifs_check_receive(midQ, server, 0);",
          "1340:  add_credits(server, &credits, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1379:  struct kvec iov = { .iov_base = in_buf, .iov_len = len };",
          "1380:  struct smb_rqst rqst = { .rq_iov = &iov, .rq_nvec = 1 };",
          "1381:  unsigned int instance;",
          "1383:  if (tcon == NULL || tcon->ses == NULL) {",
          "1384:   cifs_dbg(VFS, \"Null smb session\\n\");",
          "1385:   return -EIO;",
          "1386:  }",
          "1387:  ses = tcon->ses;",
          "1390:   cifs_dbg(VFS, \"Null tcp session\\n\");",
          "1391:   return -EIO;",
          "1392:  }",
          "1395:   return -ENOENT;",
          "",
          "[Removed Lines]",
          "1389:  if (ses->server == NULL) {",
          "1394:  if (ses->server->tcpStatus == CifsExiting)",
          "",
          "[Added Lines]",
          "1383:  struct TCP_Server_Info *server;",
          "1390:  server = ses->server;",
          "1392:  if (server == NULL) {",
          "1397:  if (server->tcpStatus == CifsExiting)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1401:  if (len > CIFSMaxBufSize + MAX_CIFS_HDR_SIZE - 4) {",
          "1403:     len);",
          "1404:   return -EIO;",
          "1405:  }",
          "1408:  if (rc)",
          "1409:   return rc;",
          "",
          "[Removed Lines]",
          "1402:   cifs_dbg(VFS, \"Illegal length, greater than maximum frame, %d\\n\",",
          "1407:  rc = wait_for_free_request(ses->server, CIFS_BLOCKING_OP, &instance);",
          "",
          "[Added Lines]",
          "1405:   cifs_server_dbg(VFS, \"Illegal length, greater than maximum frame, %d\\n\",",
          "1410:  rc = wait_for_free_request(server, CIFS_BLOCKING_OP, &instance);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1412:     and avoid races inside tcp sendmsg code that could cause corruption",
          "1417:  rc = allocate_mid(ses, in_buf, &midQ);",
          "1418:  if (rc) {",
          "1420:   return rc;",
          "1421:  }",
          "1424:  if (rc) {",
          "1425:   cifs_delete_mid(midQ);",
          "1427:   return rc;",
          "1428:  }",
          "1430:  midQ->mid_state = MID_REQUEST_SUBMITTED;",
          "1434:  cifs_save_when_sent(midQ);",
          "1436:  if (rc < 0)",
          "1441:  if (rc < 0) {",
          "1442:   cifs_delete_mid(midQ);",
          "",
          "[Removed Lines]",
          "1415:  mutex_lock(&ses->server->srv_mutex);",
          "1419:   mutex_unlock(&ses->server->srv_mutex);",
          "1423:  rc = cifs_sign_smb(in_buf, ses->server, &midQ->sequence_number);",
          "1426:   mutex_unlock(&ses->server->srv_mutex);",
          "1431:  cifs_in_send_inc(ses->server);",
          "1432:  rc = smb_send(ses->server, in_buf, len);",
          "1433:  cifs_in_send_dec(ses->server);",
          "1437:   ses->server->sequence_number -= 2;",
          "1439:  mutex_unlock(&ses->server->srv_mutex);",
          "",
          "[Added Lines]",
          "1418:  mutex_lock(&server->srv_mutex);",
          "1422:   mutex_unlock(&server->srv_mutex);",
          "1426:  rc = cifs_sign_smb(in_buf, server, &midQ->sequence_number);",
          "1429:   mutex_unlock(&server->srv_mutex);",
          "1434:  cifs_in_send_inc(server);",
          "1435:  rc = smb_send(server, in_buf, len);",
          "1436:  cifs_in_send_dec(server);",
          "1440:   server->sequence_number -= 2;",
          "1442:  mutex_unlock(&server->srv_mutex);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1444:  }",
          "1448:   (!(midQ->mid_state == MID_REQUEST_SUBMITTED)) ||",
          "1453:  if ((rc == -ERESTARTSYS) &&",
          "1454:   (midQ->mid_state == MID_REQUEST_SUBMITTED) &&",
          "1458:   if (in_buf->Command == SMB_COM_TRANSACTION2) {",
          "1462:    if (rc) {",
          "1463:     cifs_delete_mid(midQ);",
          "1464:     return rc;",
          "",
          "[Removed Lines]",
          "1447:  rc = wait_event_interruptible(ses->server->response_q,",
          "1449:   ((ses->server->tcpStatus != CifsGood) &&",
          "1450:    (ses->server->tcpStatus != CifsNew)));",
          "1455:   ((ses->server->tcpStatus == CifsGood) ||",
          "1456:    (ses->server->tcpStatus == CifsNew))) {",
          "1461:    rc = send_cancel(ses->server, &rqst, midQ);",
          "",
          "[Added Lines]",
          "1450:  rc = wait_event_interruptible(server->response_q,",
          "1452:   ((server->tcpStatus != CifsGood) &&",
          "1453:    (server->tcpStatus != CifsNew)));",
          "1458:   ((server->tcpStatus == CifsGood) ||",
          "1459:    (server->tcpStatus == CifsNew))) {",
          "1464:    rc = send_cancel(server, &rqst, midQ);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1477:    }",
          "1478:   }",
          "1481:   if (rc) {",
          "1483:    spin_lock(&GlobalMid_Lock);",
          "1484:    if (midQ->mid_state == MID_REQUEST_SUBMITTED) {",
          "",
          "[Removed Lines]",
          "1480:   rc = wait_for_response(ses->server, midQ);",
          "1482:    send_cancel(ses->server, &rqst, midQ);",
          "",
          "[Added Lines]",
          "1483:   rc = wait_for_response(server, midQ);",
          "1485:    send_cancel(server, &rqst, midQ);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1494:   rstart = 1;",
          "1495:  }",
          "1498:  if (rc != 0)",
          "1499:   return rc;",
          "1502:  if (out_buf == NULL || midQ->mid_state != MID_RESPONSE_RECEIVED) {",
          "1503:   rc = -EIO;",
          "1505:   goto out;",
          "1506:  }",
          "1509:  memcpy(out_buf, midQ->resp_buf, *pbytes_returned + 4);",
          "1511: out:",
          "1512:  cifs_delete_mid(midQ);",
          "1513:  if (rstart && rc == -EACCES)",
          "",
          "[Removed Lines]",
          "1497:  rc = cifs_sync_mid_result(midQ, ses->server);",
          "1504:   cifs_dbg(VFS, \"Bad MID state?\\n\");",
          "1510:  rc = cifs_check_receive(midQ, ses->server, 0);",
          "",
          "[Added Lines]",
          "1500:  rc = cifs_sync_mid_result(midQ, server);",
          "1507:   cifs_server_dbg(VFS, \"Bad MID state?\\n\");",
          "1513:  rc = cifs_check_receive(midQ, server, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5c7076b772ad7dcdb92303397b36aee8fa0d25d",
      "candidate_info": {
        "commit_hash": "d5c7076b772ad7dcdb92303397b36aee8fa0d25d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d5c7076b772ad7dcdb92303397b36aee8fa0d25d",
        "files": [
          "fs/cifs/smb2pdu.c",
          "fs/cifs/smb2pdu.h"
        ],
        "message": "smb3: add smb3.1.1 to default dialect list\n\nSMB3.1.1 dialect has additional security (among other) features\nand should be requested when mounting to modern servers so it\ncan be used if the server supports it.\n\nAdd SMB3.1.1 to the default list of dialects requested.\n\nSigned-off-by: Steve French <stfrench@microsoft.com>\nReviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>",
        "before_after_code_files": [
          "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c",
          "fs/cifs/smb2pdu.h||fs/cifs/smb2pdu.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c"
          ],
          "candidate": [
            "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/smb2pdu.c||fs/cifs/smb2pdu.c": [
          "File: fs/cifs/smb2pdu.c -> fs/cifs/smb2pdu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491: assemble_neg_contexts(struct smb2_negotiate_req *req,",
          "492:         unsigned int *total_len)",
          "493: {",
          "495:  unsigned int ctxt_len;",
          "498:  build_preauth_ctxt((struct smb2_preauth_neg_context *)pneg_ctxt);",
          "499:  ctxt_len = DIV_ROUND_UP(sizeof(struct smb2_preauth_neg_context), 8) * 8;",
          "",
          "[Removed Lines]",
          "494:  char *pneg_ctxt = (char *)req + OFFSET_OF_NEG_CONTEXT;",
          "",
          "[Added Lines]",
          "490:  char *pneg_ctxt = (char *)req;",
          "493:  if (*total_len > 200) {",
          "495:   cifs_dbg(VFS, \"Bad frame length assembling neg contexts\\n\");",
          "496:   return;",
          "497:  }",
          "505:  pneg_ctxt = (*total_len) + (char *)req;",
          "506:  req->NegotiateContextOffset = cpu_to_le32(*total_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:  build_posix_ctxt((struct smb2_posix_neg_context *)pneg_ctxt);",
          "512:  req->NegotiateContextCount = cpu_to_le16(3);",
          "513: }",
          "",
          "[Removed Lines]",
          "511:  req->NegotiateContextOffset = cpu_to_le32(OFFSET_OF_NEG_CONTEXT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:   req->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);",
          "725:   req->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);",
          "726:   req->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);",
          "729:  } else {",
          "731:   req->Dialects[0] = cpu_to_le16(ses->server->vals->protocol_id);",
          "",
          "[Removed Lines]",
          "727:   req->DialectCount = cpu_to_le16(3);",
          "728:   total_len += 6;",
          "",
          "[Added Lines]",
          "736:   req->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);",
          "737:   req->DialectCount = cpu_to_le16(4);",
          "738:   total_len += 8;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "749:  else {",
          "750:   memcpy(req->ClientGUID, server->client_guid,",
          "751:    SMB2_CLIENT_GUID_SIZE);",
          "753:    assemble_neg_contexts(req, &total_len);",
          "754:  }",
          "755:  iov[0].iov_base = (char *)req;",
          "",
          "[Removed Lines]",
          "752:   if (ses->server->vals->protocol_id == SMB311_PROT_ID)",
          "",
          "[Added Lines]",
          "762:   if ((ses->server->vals->protocol_id == SMB311_PROT_ID) ||",
          "763:       (strcmp(ses->server->vals->version_string,",
          "764:        SMBDEFAULT_VERSION_STRING) == 0))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "794:   } else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {",
          "796:    ses->server->ops = &smb21_operations;",
          "798:  } else if (le16_to_cpu(rsp->DialectRevision) !=",
          "799:     ses->server->vals->protocol_id) {",
          "",
          "[Removed Lines]",
          "797:   }",
          "",
          "[Added Lines]",
          "809:   } else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))",
          "810:    ses->server->ops = &smb311_operations;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "941:   pneg_inbuf->DialectCount = cpu_to_le16(2);",
          "943:   inbuflen = sizeof(*pneg_inbuf) -",
          "945:  } else if (strcmp(tcon->ses->server->vals->version_string,",
          "946:   SMBDEFAULT_VERSION_STRING) == 0) {",
          "947:   pneg_inbuf->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);",
          "948:   pneg_inbuf->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);",
          "949:   pneg_inbuf->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);",
          "952:   inbuflen = sizeof(*pneg_inbuf);",
          "953:  } else {",
          "",
          "[Removed Lines]",
          "944:     sizeof(pneg_inbuf->Dialects[0]);",
          "950:   pneg_inbuf->DialectCount = cpu_to_le16(3);",
          "",
          "[Added Lines]",
          "957:     (2 * sizeof(pneg_inbuf->Dialects[0]));",
          "963:   pneg_inbuf->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);",
          "964:   pneg_inbuf->DialectCount = cpu_to_le16(4);",
          "",
          "---------------"
        ],
        "fs/cifs/smb2pdu.h||fs/cifs/smb2pdu.h": [
          "File: fs/cifs/smb2pdu.h -> fs/cifs/smb2pdu.h"
        ]
      }
    }
  ]
}