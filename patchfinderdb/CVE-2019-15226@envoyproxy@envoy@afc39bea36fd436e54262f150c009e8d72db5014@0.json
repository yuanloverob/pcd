{
  "cve_id": "CVE-2019-15226",
  "cve_desc": "Upon receiving each incoming request header data, Envoy will iterate over existing request headers to verify that the total size of the headers stays below a maximum limit. The implementation in versions 1.10.0 through 1.11.1 for HTTP/1.x traffic and all versions of Envoy for HTTP/2 traffic had O(n^2) performance characteristics. A remote attacker may craft a request that stays below the maximum request header size but consists of many thousands of small headers to consume CPU and result in a denial-of-service attack.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
  "patch_info": {
    "commit_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/afc39bea36fd436e54262f150c009e8d72db5014",
    "files": [
      "docs/root/intro/version_history.rst",
      "include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc",
      "test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc"
    ],
    "message": "Track byteSize of HeaderMap internally.\n\nIntroduces a cached byte size updated internally in HeaderMap. The value\nis stored as an optional, and is cleared whenever a non-const pointer or\nreference to a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum\nthe size of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
    "before_after_code_files": [
      "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc||source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc||test/integration/http_integration.cc",
      "test/integration/http_integration.h||test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
    ]
  },
  "patch_diff": {
    "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h": [
      "File: include/envoy/access_log/access_log.h -> include/envoy/access_log/access_log.h"
    ],
    "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
      "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "457:   virtual void setReferenceKey(const LowerCaseString& key, const std::string& value) PURE;",
      "",
      "[Removed Lines]",
      "462:   virtual uint64_t byteSize() const PURE;",
      "",
      "[Added Lines]",
      "473:   virtual absl::optional<uint64_t> byteSize() const PURE;",
      "484:   virtual uint64_t refreshByteSize() PURE;",
      "494:   virtual uint64_t byteSizeInternal() const PURE;",
      "",
      "---------------"
    ],
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:   }",
      "508:   connection_manager_.stats_.named_.downstream_rq_active_.dec();",
      "509:   for (const AccessLog::InstanceSharedPtr& access_log : connection_manager_.config_.accessLogs()) {",
      "510:     access_log->log(request_headers_.get(), response_headers_.get(), response_trailers_.get(),",
      "511:                     stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:   if (request_headers_ != nullptr) {",
      "513:     request_headers_->refreshByteSize();",
      "514:   }",
      "515:   if (response_headers_ != nullptr) {",
      "516:     response_headers_->refreshByteSize();",
      "517:   }",
      "518:   if (response_trailers_ != nullptr) {",
      "519:     response_trailers_->refreshByteSize();",
      "520:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "719:     }",
      "720:   }",
      "",
      "[Removed Lines]",
      "722:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
      "723:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
      "724:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
      "725:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
      "726:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
      "727:     return;",
      "728:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
      "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:   }",
      "296: };",
      "299:   if (data.empty()) {",
      "301:   }",
      "302:   if (!header.empty()) {",
      "303:     header.append(\",\", 1);",
      "304:   }",
      "305:   header.append(data.data(), data.size());",
      "306: }",
      "308: HeaderMapImpl::HeaderMapImpl() { memset(&inline_headers_, 0, sizeof(inline_headers_)); }",
      "",
      "[Removed Lines]",
      "298: void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return;",
      "",
      "[Added Lines]",
      "298: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return 0;",
      "302:   uint64_t byte_size = 0;",
      "305:     byte_size += 1;",
      "308:   return data.size() + byte_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320: }",
      "322: void HeaderMapImpl::copyFrom(const HeaderMap& header_map) {",
      "323:   header_map.iterate(",
      "324:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325: void HeaderMapImpl::addSize(uint64_t size) {",
      "327:   if (cached_byte_size_.has_value()) {",
      "328:     cached_byte_size_.value() += size;",
      "329:   }",
      "330: }",
      "332: void HeaderMapImpl::subtractSize(uint64_t size) {",
      "333:   if (cached_byte_size_.has_value()) {",
      "334:     ASSERT(cached_byte_size_ >= size);",
      "335:     cached_byte_size_.value() -= size;",
      "336:   }",
      "337: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "359:     if (*ref_lookup_response.entry_ == nullptr) {",
      "360:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
      "361:     } else {",
      "363:       value.clear();",
      "364:     }",
      "365:   } else {",
      "366:     std::list<HeaderEntryImpl>::iterator i = headers_.insert(std::move(key), std::move(value));",
      "367:     i->entry_ = i;",
      "368:   }",
      "",
      "[Removed Lines]",
      "362:       appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "379:       const uint64_t added_size =",
      "380:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "381:       addSize(added_size);",
      "385:     addSize(key.size() + value.size());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "374:   auto* entry = getExistingInline(key.getStringView());",
      "375:   if (entry != nullptr) {",
      "377:     key.clear();",
      "378:     value.clear();",
      "379:   } else {",
      "",
      "[Removed Lines]",
      "376:     appendToHeader(entry->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "396:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
      "397:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "408:   if (entry != nullptr) {",
      "409:     char buf[32];",
      "410:     StringUtil::itoa(buf, sizeof(buf), value);",
      "412:     return;",
      "413:   }",
      "414:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "411:     appendToHeader(entry->value(), buf);",
      "",
      "[Added Lines]",
      "432:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
      "433:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "423: void HeaderMapImpl::addCopy(const LowerCaseString& key, const std::string& value) {",
      "424:   auto* entry = getExistingInline(key.get());",
      "425:   if (entry != nullptr) {",
      "427:     return;",
      "428:   }",
      "429:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "426:     appendToHeader(entry->value(), value);",
      "",
      "[Added Lines]",
      "448:     const uint64_t added_size = appendToHeader(entry->value(), value);",
      "449:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "451:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
      "452: }",
      "455:   uint64_t byte_size = 0;",
      "456:   for (const HeaderEntryImpl& header : headers_) {",
      "457:     byte_size += header.key().size();",
      "458:     byte_size += header.value().size();",
      "459:   }",
      "461:   return byte_size;",
      "462: }",
      "",
      "[Removed Lines]",
      "454: uint64_t HeaderMapImpl::byteSize() const {",
      "",
      "[Added Lines]",
      "477: absl::optional<uint64_t> HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
      "479: uint64_t HeaderMapImpl::refreshByteSize() {",
      "480:   if (!cached_byte_size_.has_value()) {",
      "483:     cached_byte_size_ = byteSizeInternal();",
      "484:   }",
      "485:   return cached_byte_size_.value();",
      "486: }",
      "488: uint64_t HeaderMapImpl::byteSizeInternal() const {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "474: HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) {",
      "475:   for (HeaderEntryImpl& header : headers_) {",
      "476:     if (header.key() == key.get().c_str()) {",
      "477:       return &header;",
      "478:     }",
      "479:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "511:       cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "528:   } else {",
      "529:     for (auto i = headers_.begin(); i != headers_.end();) {",
      "530:       if (i->key() == key.get().c_str()) {",
      "531:         i = headers_.erase(i);",
      "532:       } else {",
      "533:         ++i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "566:         subtractSize(i->key().size() + i->value().size());",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "537: }",
      "539: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
      "541:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
      "542:     if (to_remove) {",
      "",
      "[Removed Lines]",
      "540:   headers_.remove_if([&](const HeaderEntryImpl& entry) {",
      "",
      "[Added Lines]",
      "576:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "546:       if (cb) {",
      "547:         StaticLookupResponse ref_lookup_response = cb(*this);",
      "548:         if (ref_lookup_response.entry_) {",
      "550:         }",
      "551:       }",
      "552:     }",
      "553:     return to_remove;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "585:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
      "586:                                           (*ref_lookup_response.entry_)->value().size();",
      "587:           subtractSize(key_value_size);",
      "590:       } else {",
      "591:         subtractSize(entry.key().size() + entry.value().size());",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "571: HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,",
      "572:                                                                  const LowerCaseString& key) {",
      "573:   if (*entry) {",
      "574:     return **entry;",
      "575:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614:   cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "588:     return **entry;",
      "589:   }",
      "591:   std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));",
      "592:   i->entry_ = i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   addSize(key.get().size() + value.size());",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "609:   }",
      "611:   HeaderEntryImpl* entry = *ptr_to_entry;",
      "613:   headers_.erase(entry->entry_);",
      "614: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:   const uint64_t size_to_subtract = entry->entry_->key().size() + entry->entry_->value().size();",
      "656:   subtractSize(size_to_subtract);",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
      "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define DEFINE_INLINE_HEADER_FUNCS(name)                                                           \\",
      "21: public:                                                                                            \\",
      "22:   const HeaderEntry* name() const override { return inline_headers_.name##_; }                     \\",
      "24:   HeaderEntry& insert##name() override {                                                           \\",
      "25:     return maybeCreateInline(&inline_headers_.name##_, Headers::get().name);                       \\",
      "26:   }                                                                                                \\",
      "27:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
      "",
      "[Removed Lines]",
      "23:   HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\",
      "",
      "[Added Lines]",
      "28:   HeaderEntry* name() override {                                                                   \\",
      "29:     cached_byte_size_.reset();                                                                     \\",
      "30:     return inline_headers_.name##_;                                                                \\",
      "31:   }                                                                                                \\",
      "33:     cached_byte_size_.reset();                                                                     \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:   HeaderMapImpl();",
      "49:   explicit HeaderMapImpl(",
      "",
      "[Removed Lines]",
      "46:   static void appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "[Added Lines]",
      "55:   static uint64_t appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:   void addCopy(const LowerCaseString& key, const std::string& value) override;",
      "72:   void setReference(const LowerCaseString& key, const std::string& value) override;",
      "73:   void setReferenceKey(const LowerCaseString& key, const std::string& value) override;",
      "75:   const HeaderEntry* get(const LowerCaseString& key) const override;",
      "76:   HeaderEntry* get(const LowerCaseString& key) override;",
      "77:   void iterate(ConstIterateCb cb, void* context) const override;",
      "",
      "[Removed Lines]",
      "74:   uint64_t byteSize() const override;",
      "",
      "[Added Lines]",
      "83:   absl::optional<uint64_t> byteSize() const override;",
      "84:   uint64_t refreshByteSize() override;",
      "85:   uint64_t byteSizeInternal() const override;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
      "197:   void removeInline(HeaderEntryImpl** entry);",
      "199:   AllInlineHeaders inline_headers_;",
      "200:   HeaderList headers_;",
      "202:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
      "203: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   void addSize(uint64_t size);",
      "210:   void subtractSize(uint64_t size);",
      "217:   absl::optional<uint64_t> cached_byte_size_ = 0;",
      "",
      "---------------"
    ],
    "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
      "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:   header_parsing_state_ = HeaderParsingState::Value;",
      "461:   current_header_value_.append(data, length);",
      "465:   if (total > (max_request_headers_kb_ * 1024)) {",
      "466:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
      "467:     sendProtocolError();",
      "",
      "[Removed Lines]",
      "463:   const uint32_t total =",
      "464:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
      "",
      "[Added Lines]",
      "464:   ASSERT(current_header_map_->byteSize().has_value());",
      "465:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
      "466:                          current_header_map_->byteSize().value();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472: int ConnectionImpl::onHeadersCompleteBase() {",
      "473:   ENVOY_CONN_LOG(trace, \"headers complete\", connection_);",
      "474:   completeLastHeader();",
      "475:   if (!(parser_.http_major == 1 && parser_.http_minor == 1)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:   ASSERT(current_header_map_->byteSize().has_value() &&",
      "480:          current_header_map_->byteSize() == current_header_map_->byteSizeInternal());",
      "",
      "---------------"
    ],
    "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
      "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   switch (frame->hd.type) {",
      "511:   case NGHTTP2_HEADERS: {",
      "512:     stream->remote_end_stream_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "513:     if (!stream->cookies_.empty()) {",
      "514:       HeaderString key(Headers::get().Cookie);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     ASSERT(stream->headers_->byteSize().has_value() &&",
      "515:            stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "620:   case NGHTTP2_HEADERS:",
      "621:   case NGHTTP2_DATA: {",
      "622:     StreamImpl* stream = getStream(frame->hd.stream_id);",
      "623:     stream->local_end_stream_sent_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "624:     break;",
      "625:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "627:     if (stream->headers_) {",
      "630:       ASSERT(stream->headers_->byteSize().has_value() &&",
      "631:              stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "632:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808:     stats_.headers_cb_no_stream_.inc();",
      "809:     return 0;",
      "810:   }",
      "812:   stream->saveHeader(std::move(name), std::move(value));",
      "815:     stats_.header_overflow_.inc();",
      "816:     return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
      "",
      "[Removed Lines]",
      "813:   if (stream->headers_->byteSize() > max_request_headers_kb_ * 1024) {",
      "",
      "[Added Lines]",
      "823:   ASSERT(stream->headers_->byteSize().has_value());",
      "824:   if (stream->headers_->byteSize().value() > max_request_headers_kb_ * 1024) {",
      "",
      "---------------"
    ],
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:   stream_info_.setUpstreamTiming(upstream_timing_);",
      "1400:   stream_info_.onRequestComplete();",
      "1401:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
      "1402:     upstream_log->log(parent_.downstream_headers_, upstream_headers_.get(),",
      "1403:                       upstream_trailers_.get(), stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:   if (upstream_headers_ != nullptr) {",
      "1405:     upstream_headers_->refreshByteSize();",
      "1406:   }",
      "1407:   if (upstream_trailers_ != nullptr) {",
      "1408:     upstream_trailers_->refreshByteSize();",
      "1409:   }",
      "",
      "---------------"
    ],
    "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h": [
      "File: source/extensions/access_loggers/common/access_log_base.h -> source/extensions/access_loggers/common/access_log_base.h"
    ],
    "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
      "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     request_properties->set_original_path(",
      "96:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
      "97:   }",
      "99:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
      "100:   if (request_headers.Method() != nullptr) {",
      "101:     envoy::api::v2::core::RequestMethod method =",
      "",
      "[Removed Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize());",
      "",
      "[Added Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize().value());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   if (stream_info.responseCodeDetails()) {",
      "124:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
      "125:   }",
      "127:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
      "128:   if (!response_headers_to_log_.empty()) {",
      "129:     auto* logged_headers = response_properties->mutable_response_headers();",
      "",
      "[Removed Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize());",
      "",
      "[Added Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc": [
      "File: source/extensions/filters/common/expr/context.cc -> source/extensions/filters/common/expr/context.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     } else if (value == UserAgent) {",
      "80:       return convertHeaderEntry(headers_.value_->UserAgent());",
      "81:     } else if (value == TotalSize) {",
      "83:     }",
      "84:   }",
      "85:   return {};",
      "",
      "[Removed Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize());",
      "",
      "[Added Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc": [
      "File: source/extensions/filters/http/rbac/rbac_filter.cc -> source/extensions/filters/http/rbac/rbac_filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:   if (shadow_engine != nullptr) {",
      "77:     std::string shadow_resp_code =",
      "78:         Filters::Common::RBAC::DynamicMetadataKeysSingleton::get().EngineResultAllowed;",
      "79:     if (shadow_engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(),",
      "80:                                &effective_policy_id)) {",
      "81:       ENVOY_LOG(debug, \"shadow allowed\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     headers.refreshByteSize();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:   const auto engine =",
      "106:       config_->engine(callbacks_->route(), Filters::Common::RBAC::EnforcementMode::Enforced);",
      "107:   if (engine != nullptr) {",
      "108:     if (engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(), nullptr)) {",
      "109:       ENVOY_LOG(debug, \"enforced allowed\");",
      "110:       config_->stats().allowed_.inc();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:     headers.refreshByteSize();",
      "",
      "---------------"
    ],
    "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
      "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4409:   EXPECT_EQ(1U, stats_.named_.downstream_cx_overload_disable_keepalive_.value());",
      "4410: }",
      "4457: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
      "4458:   setup(false, \"envoy-custom-server\", false);",
      "4459:   setUpEncoderAndDecoder(true, true);",
      "",
      "[Removed Lines]",
      "4412: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
      "4413:   setup(false, \"\");",
      "4415:   std::string response_code;",
      "4416:   std::string response_body;",
      "4417:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4418:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4419:     HeaderMapPtr headers{",
      "4420:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4421:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4423:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
      "4424:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
      "4425:           response_code = std::string(headers.Status()->value().getStringView());",
      "4426:         }));",
      "4427:     decoder->decodeHeaders(std::move(headers), true);",
      "4428:     conn_manager_->newStream(response_encoder_);",
      "4429:   }));",
      "4431:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4432:   conn_manager_->onData(fake_input, false); // kick off request",
      "4434:   EXPECT_EQ(\"431\", response_code);",
      "4435:   EXPECT_EQ(\"\", response_body);",
      "4436: }",
      "4438: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
      "4439:   max_request_headers_kb_ = 62;",
      "4440:   setup(false, \"\");",
      "4442:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4443:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4444:     HeaderMapPtr headers{",
      "4445:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4446:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4448:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
      "4449:     decoder->decodeHeaders(std::move(headers), true);",
      "4450:     conn_manager_->newStream(response_encoder_);",
      "4451:   }));",
      "4453:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4454:   conn_manager_->onData(fake_input, false); // kick off request",
      "4455: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
      "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:   addDummyHeaders(headers, state.range(0));",
      "105:   uint64_t size = 0;",
      "106:   for (auto _ : state) {",
      "108:   }",
      "109:   benchmark::DoNotOptimize(size);",
      "110: }",
      "",
      "[Removed Lines]",
      "107:     size += headers.byteSize();",
      "",
      "[Added Lines]",
      "107:     size += headers.byteSize().value();",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
      "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "366:   HeaderMapImpl headers;",
      "367:   EXPECT_TRUE(headers.empty());",
      "368:   EXPECT_EQ(0, headers.size());",
      "369:   EXPECT_EQ(nullptr, headers.Host());",
      "370:   headers.insertHost().value(std::string(\"hello\"));",
      "371:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "369:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
      "376: }",
      "378: TEST(HeaderMapImplTest, MoveIntoInline) {",
      "379:   HeaderMapImpl headers;",
      "380:   HeaderString key;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "380: uint64_t countBytesForTest(const HeaderMapImpl& headers) {",
      "381:   uint64_t byte_size = 0;",
      "382:   headers.iterate(",
      "383:       [](const Http::HeaderEntry& header, void* context) -> Http::HeaderMap::Iterate {",
      "384:         auto* byte_size = static_cast<uint64_t*>(context);",
      "386:         return Http::HeaderMap::Iterate::Continue;",
      "387:       },",
      "388:       &byte_size);",
      "389:   return byte_size;",
      "390: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "392:   headers.addViaMove(std::move(key2), std::move(value2));",
      "393:   EXPECT_EQ(\"cache-control\", headers.CacheControl()->key().getStringView());",
      "394:   EXPECT_EQ(\"hello,there\", headers.CacheControl()->value().getStringView());",
      "395: }",
      "397: TEST(HeaderMapImplTest, Remove) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "409:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "401:   LowerCaseString static_key(\"hello\");",
      "402:   std::string ref_value(\"value\");",
      "403:   headers.addReference(static_key, ref_value);",
      "404:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "405:   EXPECT_EQ(HeaderString::Type::Reference, headers.get(static_key)->value().type());",
      "406:   EXPECT_EQ(1UL, headers.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "409:   EXPECT_EQ(nullptr, headers.get(static_key));",
      "410:   EXPECT_EQ(0UL, headers.size());",
      "411:   EXPECT_TRUE(headers.empty());",
      "414:   headers.insertContentLength().value(5);",
      "415:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "416:   EXPECT_EQ(1UL, headers.size());",
      "417:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "428:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "432:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "419:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "420:   EXPECT_EQ(0UL, headers.size());",
      "421:   EXPECT_TRUE(headers.empty());",
      "424:   headers.insertContentLength().value(5);",
      "425:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "426:   EXPECT_EQ(1UL, headers.size());",
      "427:   EXPECT_FALSE(headers.empty());",
      "428:   headers.remove(Headers::get().ContentLength);",
      "429:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "430:   EXPECT_EQ(0UL, headers.size());",
      "431:   EXPECT_TRUE(headers.empty());",
      "432: }",
      "434: TEST(HeaderMapImplTest, RemoveRegex) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "440:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "447:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "452:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "446:   headers.addReference(key3, \"value\");",
      "447:   headers.addReference(key4, \"value\");",
      "448:   headers.addReference(key5, \"value\");",
      "451:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
      "452:   EXPECT_EQ(nullptr, headers.get(key1));",
      "453:   EXPECT_NE(nullptr, headers.get(key2));",
      "454:   EXPECT_EQ(nullptr, headers.get(key3));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "470:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "474:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:   EXPECT_EQ(nullptr, headers.get(key5));",
      "459:   headers.removePrefix(LowerCaseString(\"\"));",
      "460:   EXPECT_EQ(nullptr, headers.get(key2));",
      "461:   EXPECT_EQ(nullptr, headers.get(key4));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:   headers.refreshByteSize();",
      "484:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "465:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "466:   EXPECT_EQ(1UL, headers.size());",
      "467:   EXPECT_FALSE(headers.empty());",
      "468:   headers.removePrefix(LowerCaseString(\"content\"));",
      "469:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "470: }",
      "472: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "493:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "496:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "484:   headers.addReference(key2, ref_value2);",
      "485:   headers.addReference(key1, ref_value3);",
      "486:   headers.addReference(key1, ref_value4);",
      "488:   using MockCb = testing::MockFunction<void(const std::string&, const std::string&)>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "531:     const std::string bar(\"bar\");",
      "532:     headers.addReference(Headers::get().ContentLength, foo);",
      "533:     headers.addReference(Headers::get().ContentLength, bar);",
      "534:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "535:     EXPECT_EQ(1UL, headers.size());",
      "536:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "538:     HeaderMapImpl headers;",
      "539:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
      "540:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
      "541:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "542:     EXPECT_EQ(1UL, headers.size());",
      "543:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "570:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "545:     HeaderMapImpl headers;",
      "546:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
      "547:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "548:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
      "549:     EXPECT_EQ(1UL, headers.size());",
      "550:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "553:     const std::string foo(\"foo\");",
      "554:     headers.addReference(Headers::get().ContentLength, foo);",
      "555:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "556:     EXPECT_EQ(\"foo,6\", headers.ContentLength()->value().getStringView());",
      "557:     EXPECT_EQ(1UL, headers.size());",
      "558:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "568:   headers.addReference(set_cookie, foo);",
      "569:   headers.addReference(set_cookie, bar);",
      "570:   EXPECT_EQ(2UL, headers.size());",
      "572:   std::vector<absl::string_view> out;",
      "573:   Http::HeaderUtility::getAllOfHeader(headers, \"set-cookie\", out);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "580:   HeaderMapImpl headers;",
      "581:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
      "582:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
      "583:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
      "584:   EXPECT_EQ(1UL, headers.size());",
      "585: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "588:   HeaderMapImpl headers;",
      "589:   LowerCaseString foo(\"hello\");",
      "590:   headers.addReferenceKey(foo, \"world\");",
      "591:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "592:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "593: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "625:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "596:   HeaderMapImpl headers;",
      "597:   LowerCaseString foo(\"hello\");",
      "598:   headers.setReferenceKey(foo, \"world\");",
      "599:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "600:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "602:   headers.setReferenceKey(foo, \"monde\");",
      "603:   EXPECT_NE(\"monde\", headers.get(foo)->value().getStringView().data());",
      "604:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
      "605: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "637:   headers.refreshByteSize();",
      "640:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "611:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
      "612:   headers.addCopy(*lcKeyPtr, \"world\");",
      "614:   const HeaderString& value = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "632:   headers.remove(LowerCaseString(\"hello\"));",
      "636:   lcKeyPtr = std::make_unique<LowerCaseString>(std::string(\"he\") + \"llo\");",
      "637:   EXPECT_STREQ(\"hello\", lcKeyPtr->get().c_str());",
      "639:   headers.addCopy(*lcKeyPtr, 42);",
      "641:   const HeaderString& value3 = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:   headers.refreshByteSize();",
      "674:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "681:   headers.refreshByteSize();",
      "683:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "662:   headers.addCopy(cache_control, \"max-age=1345\");",
      "663:   EXPECT_EQ(\"max-age=1345\", headers.get(cache_control)->value().getStringView());",
      "664:   EXPECT_EQ(\"max-age=1345\", headers.CacheControl()->value().getStringView());",
      "665:   headers.addCopy(cache_control, \"public\");",
      "666:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "667:   headers.addCopy(cache_control, \"\");",
      "668:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "669:   headers.addCopy(cache_control, 123);",
      "670:   EXPECT_EQ(\"max-age=1345,public,123\", headers.get(cache_control)->value().getStringView());",
      "671:   headers.addCopy(cache_control, std::numeric_limits<uint64_t>::max());",
      "672:   EXPECT_EQ(\"max-age=1345,public,123,18446744073709551615\",",
      "673:             headers.get(cache_control)->value().getStringView());",
      "674: }",
      "676: TEST(HeaderMapImplTest, Equality) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "711:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "714:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "717:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "722:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "690:   LowerCaseString static_key(\"\\x90hello\");",
      "691:   std::string ref_value(\"value\");",
      "692:   headers.addReference(static_key, ref_value);",
      "693:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "694: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "844:   {",
      "845:     LowerCaseString foo(\"hello\");",
      "846:     Http::TestHeaderMapImpl headers{};",
      "847:     EXPECT_EQ(0UL, headers.size());",
      "848:     EXPECT_TRUE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "897:     EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------"
    ],
    "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
      "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1090:   TestHeaderMapImpl request_headers;",
      "1091:   HttpTestUtility::addDefaultHeaders(request_headers);",
      "1092:   std::string key = \"big\";",
      "1093:   uint32_t head_room = 77;",
      "1094:   uint32_t long_string_length =",
      "1096:   std::string long_string = std::string(long_string_length, 'q');",
      "1097:   request_headers.addCopy(key, long_string);",
      "1104:   EXPECT_CALL(request_decoder_, decodeHeaders_(_, _));",
      "1105:   request_encoder_->encodeHeaders(request_headers, true);",
      "",
      "[Removed Lines]",
      "1095:       codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;",
      "1102:   ASSERT_EQ(request_headers.byteSize() + head_room, codec_limit_kb * 1024);",
      "",
      "[Added Lines]",
      "1093:   request_headers.refreshByteSize();",
      "1097:       codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;",
      "1104:   ASSERT_EQ(request_headers.byteSize().value() + head_room, codec_limit_kb * 1024);",
      "",
      "---------------"
    ],
    "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
      "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: TEST_P(Http2IntegrationTest, RetryAttemptCount) { testRetryAttemptCountHeader(); }",
      "67: static std::string response_metadata_filter = R\"EOF(",
      "68: name: response-metadata-filter",
      "69: config: {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: TEST_P(Http2IntegrationTest, LargeRequestTrailersRejected) { testLargeRequestTrailers(66, 60); }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.cc||test/integration/http_integration.cc": [
      "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "261: IntegrationStreamDecoderPtr HttpIntegrationTest::sendRequestAndWaitForResponse(",
      "262:     const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "264:   ASSERT(codec_client_ != nullptr);",
      "266:   IntegrationStreamDecoderPtr response;",
      "",
      "[Removed Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index) {",
      "",
      "[Added Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index,",
      "264:     std::chrono::milliseconds time) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:   } else {",
      "270:     response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "271:   }",
      "274:   upstream_request_->encodeHeaders(response_headers, response_size == 0);",
      "",
      "[Removed Lines]",
      "272:   waitForNextUpstreamRequest(upstream_index);",
      "",
      "[Added Lines]",
      "273:   waitForNextUpstreamRequest(upstream_index, time);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333: }",
      "335: uint64_t",
      "337:   uint64_t upstream_with_request;",
      "339:   if (!fake_upstream_connection_) {",
      "",
      "[Removed Lines]",
      "336: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {",
      "",
      "[Added Lines]",
      "337: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
      "338:                                                 std::chrono::milliseconds connection_wait_timeout) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "361:   return upstream_with_request;",
      "362: }",
      "366: }",
      "368: void HttpIntegrationTest::checkSimpleRequestSuccess(uint64_t expected_request_size,",
      "",
      "[Removed Lines]",
      "364: void HttpIntegrationTest::waitForNextUpstreamRequest(uint64_t upstream_index) {",
      "365:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}));",
      "",
      "[Added Lines]",
      "366: void HttpIntegrationTest::waitForNextUpstreamRequest(",
      "367:     uint64_t upstream_index, std::chrono::milliseconds connection_wait_timeout) {",
      "368:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}), connection_wait_timeout);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "916:   }",
      "917: }",
      "919: void HttpIntegrationTest::testDownstreamResetBeforeResponseComplete() {",
      "920:   initialize();",
      "921:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "922: void HttpIntegrationTest::testLargeRequestTrailers(uint32_t size, uint32_t max_size) {",
      "927:   config_helper_.addConfigModifier(",
      "928:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "929:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_size); });",
      "930:   max_request_headers_kb_ = max_size;",
      "931:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
      "932:   request_trailers.addCopy(\"big\", std::string(size * 1024, 'a'));",
      "934:   initialize();",
      "936:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "937:   fake_upstreams_[0]->set_allow_unexpected_disconnects(true);",
      "939:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "940:   request_encoder_ = &encoder_decoder.first;",
      "941:   auto response = std::move(encoder_decoder.second);",
      "942:   codec_client_->sendData(*request_encoder_, 10, false);",
      "943:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "945:   if (size >= max_size && downstream_protocol_ == Http::CodecClient::Type::HTTP2) {",
      "948:     response->waitForReset();",
      "949:     codec_client_->close();",
      "950:     EXPECT_FALSE(response->complete());",
      "952:   } else {",
      "953:     waitForNextUpstreamRequest();",
      "954:     upstream_request_->encodeHeaders(default_response_headers_, true);",
      "955:     response->waitForEndStream();",
      "956:     EXPECT_TRUE(response->complete());",
      "957:   }",
      "958: }",
      "960: void HttpIntegrationTest::testManyRequestHeaders(std::chrono::milliseconds time) {",
      "961:   config_helper_.addConfigModifier(",
      "962:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "963:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "964:   max_request_headers_kb_ = 96;",
      "966:   Http::TestHeaderMapImpl big_headers{",
      "967:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
      "969:   for (int i = 0; i < 20000; i++) {",
      "970:     big_headers.addCopy(std::to_string(i), std::string(0, 'a'));",
      "971:   }",
      "972:   initialize();",
      "974:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "976:   auto response =",
      "977:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
      "979:   EXPECT_TRUE(response->complete());",
      "980:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "981: }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.h||test/integration/http_integration.h": [
      "File: test/integration/http_integration.h -> test/integration/http_integration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:   void cleanupUpstreamAndDownstream();",
      "",
      "[Removed Lines]",
      "125:   IntegrationStreamDecoderPtr",
      "126:   sendRequestAndWaitForResponse(const Http::TestHeaderMapImpl& request_headers,",
      "127:                                 uint32_t request_body_size,",
      "128:                                 const Http::TestHeaderMapImpl& response_headers,",
      "129:                                 uint32_t response_body_size, int upstream_index = 0);",
      "135:   uint64_t waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices);",
      "136:   void waitForNextUpstreamRequest(uint64_t upstream_index = 0);",
      "",
      "[Added Lines]",
      "125:   IntegrationStreamDecoderPtr sendRequestAndWaitForResponse(",
      "126:       const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "127:       const Http::TestHeaderMapImpl& response_headers, uint32_t response_body_size,",
      "128:       int upstream_index = 0, std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "134:   uint64_t waitForNextUpstreamRequest(",
      "135:       const std::vector<uint64_t>& upstream_indices,",
      "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "137:   void waitForNextUpstreamRequest(",
      "138:       uint64_t upstream_index = 0,",
      "139:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:   void testRouterUpstreamResponseBeforeRequestComplete();",
      "187:   void testTwoRequests(bool force_network_backup = false);",
      "188:   void testLargeRequestHeaders(uint32_t size, uint32_t max_size = 60);",
      "190:   void testAddEncodedTrailers();",
      "191:   void testRetry();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
      "192:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
      "194:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
      "195:   void testManyRequestHeaders(std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "",
      "---------------"
    ],
    "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
      "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "576:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "577: }",
      "579: TEST_P(DownstreamProtocolIntegrationTest, InvalidContentLength) {",
      "580:   initialize();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingConcatenated) {",
      "581:   initialize();",
      "583:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "584:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "585:                                           {\":path\", \"/test/long/url\"},",
      "586:                                           {\":scheme\", \"http\"},",
      "587:                                           {\":authority\", \"host\"},",
      "588:                                           {\"content-length\", \"0\"}};",
      "589:   std::vector<std::string> cookie_pieces;",
      "590:   for (int i = 0; i < 7000; i++) {",
      "591:     cookie_pieces.push_back(fmt::sprintf(\"a%x=b\", i));",
      "592:   }",
      "593:   request_headers.addCopy(\"cookie\", absl::StrJoin(cookie_pieces, \"; \"));",
      "594:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "596:   ASSERT_TRUE(response->complete());",
      "597:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "598: }",
      "601: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingMany) {",
      "602:   initialize();",
      "604:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "605:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "606:                                           {\":path\", \"/test/long/url\"},",
      "607:                                           {\":scheme\", \"http\"},",
      "608:                                           {\":authority\", \"host\"},",
      "609:                                           {\"content-length\", \"0\"}};",
      "610:   for (int i = 0; i < 2000; i++) {",
      "611:     request_headers.addCopy(\"cookie\", fmt::sprintf(\"a%x=b\", i));",
      "612:   }",
      "613:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "615:   ASSERT_TRUE(response->complete());",
      "616:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "617: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850:   testLargeRequestHeaders(95, 96);",
      "851: }",
      "855: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "893: TEST_P(DownstreamProtocolIntegrationTest, ManyRequestHeadersTimeout) {",
      "895:   testManyRequestHeaders(std::chrono::milliseconds(5000));",
      "896: }",
      "898: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersAccepted) {",
      "899:   testLargeRequestTrailers(60, 96);",
      "900: }",
      "902: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersRejected) {",
      "903:   testLargeRequestTrailers(66, 60);",
      "904: }",
      "906: TEST_P(DownstreamProtocolIntegrationTest, ManyTrailerHeaders) {",
      "907:   config_helper_.addConfigModifier(",
      "908:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "909:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "911:   Http::TestHeaderMapImpl request_trailers{};",
      "912:   for (int i = 0; i < 20000; i++) {",
      "913:     request_trailers.addCopy(std::to_string(i), \"\");",
      "914:   }",
      "916:   initialize();",
      "917:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "918:   auto encoder_decoder =",
      "919:       codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
      "920:                                                           {\":path\", \"/test/long/url\"},",
      "921:                                                           {\":scheme\", \"http\"},",
      "922:                                                           {\":authority\", \"host\"}});",
      "923:   request_encoder_ = &encoder_decoder.first;",
      "924:   auto response = std::move(encoder_decoder.second);",
      "925:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "926:   waitForNextUpstreamRequest();",
      "927:   upstream_request_->encodeHeaders(default_response_headers_, true);",
      "928:   response->waitForEndStream();",
      "930:   EXPECT_TRUE(upstream_request_->complete());",
      "931:   EXPECT_TRUE(response->complete());",
      "932:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "933: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b048fffa043ceb9453e6a47d29d0346146a8031",
      "candidate_info": {
        "commit_hash": "1b048fffa043ceb9453e6a47d29d0346146a8031",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/1b048fffa043ceb9453e6a47d29d0346146a8031",
        "files": [
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "[http1] Include request URL in request header size computation, and reject partial headers that exceed configured limits (#145)\n\nImprove the robustness of HTTP1 request and response header size checks by including the request URL in the request header size, and add missing header size check when parsing header field names. The missing header field name size check can result in excessive buffering up to a hard-coded 32MB limit until timeout. The missing request URL size check can result in Envoy attempting to route match and proxy HTTP/1.1 requests with URLs up to a hard-coded 32MB limit, which could result in excess memory usage or performance problems in regex route matches.\n\nSigned-off-by: Antonio Vicente <avd@google.com>\nSigned-off-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   ASSERT(current_header_value_.empty());",
          "424: }",
          "426: bool ConnectionImpl::maybeDirectDispatch(Buffer::Instance& data) {",
          "427:   if (!handling_upgrade_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426: uint32_t ConnectionImpl::getHeadersSize() {",
          "427:   return current_header_field_.size() + current_header_value_.size() +",
          "428:          (current_header_map_->byteSize() ? *current_header_map_->byteSize() : 0);",
          "429: }",
          "431: void ConnectionImpl::checkMaxHeadersSize() {",
          "432:   const uint32_t total = getHeadersSize();",
          "433:   if (total > (max_headers_kb_ * 1024)) {",
          "434:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "435:     sendProtocolError();",
          "436:     throw CodecProtocolException(\"headers size exceeds limit\");",
          "437:   }",
          "438: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:   }",
          "496:   current_header_field_.append(data, length);",
          "497: }",
          "499: void ConnectionImpl::onHeaderValue(const char* data, size_t length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524:   header_parsing_state_ = HeaderParsingState::Value;",
          "525:   current_header_value_.append(header_value.data(), header_value.length());",
          "537: }",
          "539: int ConnectionImpl::onHeadersCompleteBase() {",
          "",
          "[Removed Lines]",
          "528:   ASSERT(current_header_map_->byteSize().has_value());",
          "529:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
          "530:                          current_header_map_->byteSize().value();",
          "531:   if (total > (max_headers_kb_ * 1024)) {",
          "533:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "534:     sendProtocolError();",
          "535:     throw CodecProtocolException(\"headers size exceeds limit\");",
          "536:   }",
          "",
          "[Added Lines]",
          "543:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:           Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.http1_flood_protection\")),",
          "635:       headers_with_underscores_action_(headers_with_underscores_action) {}",
          "637: void ServerConnectionImpl::onEncodeComplete() {",
          "638:   ASSERT(active_request_);",
          "639:   if (active_request_->remote_complete_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644: uint32_t ServerConnectionImpl::getHeadersSize() {",
          "646:   const uint32_t url_size = active_request_ ? active_request_->request_url_.size() : 0;",
          "647:   return url_size + ConnectionImpl::getHeadersSize();",
          "648: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "741: void ServerConnectionImpl::onUrl(const char* data, size_t length) {",
          "742:   if (active_request_) {",
          "743:     active_request_->request_url_.append(data, length);",
          "744:   }",
          "745: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:     checkMaxHeadersSize();",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h": [
          "File: source/common/http/http1/codec_impl.h -> source/common/http/http1/codec_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   bool resetStreamCalled() { return reset_stream_called_; }",
          "212:   Network::Connection& connection_;",
          "213:   CodecStats stats_;",
          "214:   http_parser parser_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   virtual uint32_t getHeadersSize();",
          "224:   void checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:     ResponseStreamEncoderImpl response_encoder_;",
          "368:     bool remote_complete_{};",
          "369:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:   uint32_t getHeadersSize() override;",
          "",
          "---------------"
        ],
        "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc": [
          "File: test/common/http/http1/codec_impl_test.cc -> test/common/http/http1/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1553:   static_cast<ClientConnection*>(codec_.get())",
          "1554:       ->onUnderlyingConnectionBelowWriteBufferLowWatermark();",
          "1555: }",
          "1556: TEST_F(Http1ServerConnectionImplTest, LargeRequestHeadersRejected) {",
          "1558:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1557: TEST_F(Http1ServerConnectionImplTest, LargeRequestUrlRejected) {",
          "1558:   initialize();",
          "1560:   std::string exception_reason;",
          "1561:   NiceMock<MockStreamDecoder> decoder;",
          "1562:   Http::StreamEncoder* response_encoder = nullptr;",
          "1563:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "1564:       .WillOnce(Invoke([&](StreamEncoder& encoder, bool) -> StreamDecoder& {",
          "1565:         response_encoder = &encoder;",
          "1566:         return decoder;",
          "1567:       }));",
          "1570:   std::string long_url = \"/\" + std::string(60 * 1024, 'q');",
          "1571:   Buffer::OwnedImpl buffer(\"GET \" + long_url + \" HTTP/1.1\\r\\n\");",
          "1573:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1574: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1635:   testRequestHeadersAccepted(createHeaderFragment(150));",
          "1636: }",
          "1640:   initialize();",
          "1642:   NiceMock<Http::MockStreamDecoder> response_decoder;",
          "",
          "[Removed Lines]",
          "1639: TEST_F(Http1ClientConnectionImplTest, LargeResponseHeadersRejected) {",
          "",
          "[Added Lines]",
          "1659: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeValueRejected) {",
          "1660:   initialize();",
          "1662:   NiceMock<MockStreamDecoder> response_decoder;",
          "1663:   Http::StreamEncoder& request_encoder = codec_->newStream(response_decoder);",
          "1664:   TestHeaderMapImpl headers{{\":method\", \"GET\"}, {\":path\", \"/\"}, {\":authority\", \"host\"}};",
          "1665:   request_encoder.encodeHeaders(headers, true);",
          "1667:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "1668:   codec_->dispatch(buffer);",
          "1669:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "1670:   buffer = Buffer::OwnedImpl(long_header);",
          "1671:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1672: }",
          "1675: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeFieldRejected) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1647:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "1648:   codec_->dispatch(buffer);",
          "1650:   buffer = Buffer::OwnedImpl(long_header);",
          "1651:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1652: }",
          "",
          "[Removed Lines]",
          "1649:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q') + \"\\r\\n\";",
          "",
          "[Added Lines]",
          "1685:   std::string long_header = \"bigfield\" + std::string(80 * 1024, 'q');",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:   EXPECT_EQ(1024U, response->body().size());",
          "885: }",
          "887: void HttpIntegrationTest::testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size,",
          "888:                                                   uint32_t max_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887: void HttpIntegrationTest::testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size) {",
          "893:   config_helper_.addConfigModifier(",
          "894:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "895:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_headers_size); });",
          "896:   max_request_headers_kb_ = max_headers_size;",
          "898:   Http::TestHeaderMapImpl big_headers{{\":method\", \"GET\"},",
          "899:                                       {\":path\", \"/\" + std::string(url_size * 1024, 'a')},",
          "900:                                       {\":scheme\", \"http\"},",
          "901:                                       {\":authority\", \"host\"}};",
          "903:   initialize();",
          "904:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "905:   if (url_size >= max_headers_size) {",
          "907:     auto encoder_decoder = codec_client_->startRequest(big_headers);",
          "908:     auto response = std::move(encoder_decoder.second);",
          "910:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "911:       codec_client_->waitForDisconnect();",
          "912:       EXPECT_TRUE(response->complete());",
          "913:       EXPECT_EQ(\"431\", response->headers().Status()->value().getStringView());",
          "914:     } else {",
          "915:       response->waitForReset();",
          "916:       codec_client_->close();",
          "917:     }",
          "918:   } else {",
          "919:     auto response = sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0);",
          "920:     EXPECT_TRUE(response->complete());",
          "921:     EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "922:   }",
          "923: }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   void testTwoRequests(bool force_network_backup = false);",
          "191:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
          "192:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
          "193:   void testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size = 60,",
          "194:                                uint32_t max_count = 100);",
          "195:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   void testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:   EXPECT_EQ(0, upstream_request_->body().length());",
          "1007: }",
          "1009: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestHeadersRejected) {",
          "1011:   testLargeRequestHeaders(95, 1, 60, 100);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1009: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlRejected) {",
          "1011:   testLargeRequestUrl(95, 60);",
          "1012: }",
          "1014: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlAccepted) {",
          "1016:   testLargeRequestUrl(95, 96);",
          "1017: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d87553cfbb0c38f83de0db1bc543ff54c09e097",
      "candidate_info": {
        "commit_hash": "5d87553cfbb0c38f83de0db1bc543ff54c09e097",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/5d87553cfbb0c38f83de0db1bc543ff54c09e097",
        "files": [
          "bazel/repository_locations.bzl",
          "include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "source/extensions/tracers/common/ot/opentracing_driver_impl.cc",
          "test/common/http/header_map_impl_fuzz.proto",
          "test/common/http/header_map_impl_fuzz_test.cc",
          "test/common/http/header_map_impl_speed_test.cc",
          "test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h"
        ],
        "message": "header map: various small improvements (#11744)\n\n- Remove redundant code leading to multiple static table\n  lookups. I think this was just the result of various\n  iterative changes over the years.\n- Remove the lookup() method as it is not needed with the registry\n  anymore and had only one user. This will make writing other\n  implementations easier.\n- Make the get() method do a trie lookup first to see if the header\n  is an O(1) header. This satisfies the only user of lookup() and\n  will also make other users faster if they are looking up O(1)\n  headers. Note that later I intend to make the header matcher work\n  directly with header handles to avoid this case for header matching.\n\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "bazel/repository_locations.bzl||bazel/repository_locations.bzl",
          "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "source/extensions/tracers/common/ot/opentracing_driver_impl.cc||source/extensions/tracers/common/ot/opentracing_driver_impl.cc",
          "test/common/http/header_map_impl_fuzz.proto||test/common/http/header_map_impl_fuzz.proto",
          "test/common/http/header_map_impl_fuzz_test.cc||test/common/http/header_map_impl_fuzz_test.cc",
          "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h||test/test_common/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ],
          "candidate": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "bazel/repository_locations.bzl||bazel/repository_locations.bzl": [
          "File: bazel/repository_locations.bzl -> bazel/repository_locations.bzl",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         cpe = \"N/A\",",
          "162:     ),",
          "163:     com_github_google_libprotobuf_mutator = dict(",
          "168:         use_category = [\"test\"],",
          "169:     ),",
          "170:     com_github_gperftools_gperftools = dict(",
          "",
          "[Removed Lines]",
          "164:         sha256 = \"f6def6cdf63e29a367d46c0ad9e3e31eed89d031e22e0caac126f1e62d8b3fd0\",",
          "165:         strip_prefix = \"libprotobuf-mutator-3521f47a2828da9ace403e4ecc4aece1a84feb36\",",
          "166:         # 2020-02-04",
          "167:         urls = [\"https://github.com/google/libprotobuf-mutator/archive/3521f47a2828da9ace403e4ecc4aece1a84feb36.tar.gz\"],",
          "",
          "[Added Lines]",
          "164:         sha256 = \"d51365191580c4bf5e9ff104eebcfe34f7ff5f471006d7a460c15dcb3657501c\",",
          "165:         strip_prefix = \"libprotobuf-mutator-7a2ed51a6b682a83e345ff49fc4cfd7ca47550db\",",
          "166:         # 2020-06-25",
          "167:         urls = [\"https://github.com/google/libprotobuf-mutator/archive/7a2ed51a6b682a83e345ff49fc4cfd7ca47550db.tar.gz\"],",
          "",
          "---------------"
        ],
        "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
          "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:   virtual void iterateReverse(ConstIterateCb cb, void* context) const PURE;",
          "",
          "[Removed Lines]",
          "552:   enum class Lookup { Found, NotFound, NotSupported };",
          "562:   virtual Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "333: }",
          "335: void HeaderMapImpl::addViaMove(HeaderString&& key, HeaderString&& value) {",
          "347: }",
          "349: void HeaderMapImpl::addReference(const LowerCaseString& key, absl::string_view value) {",
          "350:   HeaderString ref_key(key);",
          "351:   HeaderString ref_value(value);",
          "353: }",
          "355: void HeaderMapImpl::addReferenceKey(const LowerCaseString& key, uint64_t value) {",
          "",
          "[Removed Lines]",
          "338:   auto* entry = getExistingInline(key.getStringView());",
          "339:   if (entry != nullptr) {",
          "340:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
          "341:     addSize(added_size);",
          "342:     key.clear();",
          "343:     value.clear();",
          "344:   } else {",
          "345:     insertByKey(std::move(key), std::move(value));",
          "346:   }",
          "352:   addViaMove(std::move(ref_key), std::move(ref_value));",
          "",
          "[Added Lines]",
          "336:   insertByKey(std::move(key), std::move(value));",
          "342:   insertByKey(std::move(ref_key), std::move(ref_value));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369: }",
          "371: void HeaderMapImpl::addCopy(const LowerCaseString& key, uint64_t value) {",
          "380:   HeaderString new_key;",
          "381:   new_key.setCopy(key.get());",
          "382:   HeaderString new_value;",
          "",
          "[Removed Lines]",
          "372:   auto* entry = getExistingInline(key.get());",
          "373:   if (entry != nullptr) {",
          "374:     char buf[32];",
          "375:     StringUtil::itoa(buf, sizeof(buf), value);",
          "376:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
          "377:     addSize(added_size);",
          "378:     return;",
          "379:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387: }",
          "389: void HeaderMapImpl::addCopy(const LowerCaseString& key, absl::string_view value) {",
          "396:   HeaderString new_key;",
          "397:   new_key.setCopy(key.get());",
          "398:   HeaderString new_value;",
          "",
          "[Removed Lines]",
          "390:   auto* entry = getExistingInline(key.get());",
          "391:   if (entry != nullptr) {",
          "392:     const uint64_t added_size = appendToHeader(entry->value(), value);",
          "393:     addSize(added_size);",
          "394:     return;",
          "395:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "454: }",
          "456: const HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) const {",
          "464: }",
          "466: HeaderEntry* HeaderMapImpl::getExisting(const LowerCaseString& key) {",
          "467:   for (HeaderEntryImpl& header : headers_) {",
          "468:     if (header.key() == key.get().c_str()) {",
          "469:       return &header;",
          "",
          "[Removed Lines]",
          "457:   for (const HeaderEntryImpl& header : headers_) {",
          "458:     if (header.key() == key.get().c_str()) {",
          "459:       return &header;",
          "460:     }",
          "461:   }",
          "463:   return nullptr;",
          "",
          "[Added Lines]",
          "437:   return const_cast<HeaderMapImpl*>(this)->getExisting(key);",
          "445:   auto lookup = staticLookup(key.get());",
          "446:   if (lookup.has_value()) {",
          "447:     return *lookup.value().entry_;",
          "448:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:   }",
          "490: }",
          "514: void HeaderMapImpl::clear() {",
          "515:   clearInline();",
          "516:   headers_.clear();",
          "",
          "[Removed Lines]",
          "492: HeaderMap::Lookup HeaderMapImpl::lookup(const LowerCaseString& key,",
          "493:                                         const HeaderEntry** entry) const {",
          "500:   auto lookup = const_cast<HeaderMapImpl*>(this)->staticLookup(key.get());",
          "501:   if (lookup.has_value()) {",
          "503:     if (*entry) {",
          "504:       return HeaderMap::Lookup::Found;",
          "505:     } else {",
          "506:       return HeaderMap::Lookup::NotFound;",
          "507:     }",
          "508:   } else {",
          "510:     return HeaderMap::Lookup::NotSupported;",
          "511:   }",
          "512: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "601:   return **entry;",
          "602: }",
          "612: size_t HeaderMapImpl::removeInline(HeaderEntryImpl** ptr_to_entry) {",
          "613:   if (!*ptr_to_entry) {",
          "614:     return 0;",
          "",
          "[Removed Lines]",
          "604: HeaderMapImpl::HeaderEntryImpl* HeaderMapImpl::getExistingInline(absl::string_view key) {",
          "605:   auto lookup = staticLookup(key);",
          "606:   if (lookup.has_value()) {",
          "607:     return *lookup.value().entry_;",
          "608:   }",
          "609:   return nullptr;",
          "610: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   const HeaderEntry* get(const LowerCaseString& key) const;",
          "89:   void iterate(HeaderMap::ConstIterateCb cb, void* context) const;",
          "90:   void iterateReverse(HeaderMap::ConstIterateCb cb, void* context) const;",
          "92:   void clear();",
          "93:   size_t remove(const LowerCaseString& key);",
          "94:   size_t removePrefix(const LowerCaseString& key);",
          "",
          "[Removed Lines]",
          "91:   HeaderMap::Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:   HeaderEntryImpl& maybeCreateInline(HeaderEntryImpl** entry, const LowerCaseString& key,",
          "243:                                      HeaderString&& value);",
          "244:   HeaderEntry* getExisting(const LowerCaseString& key);",
          "246:   size_t removeInline(HeaderEntryImpl** entry);",
          "247:   void updateSize(uint64_t from_size, uint64_t to_size);",
          "248:   void addSize(uint64_t size);",
          "",
          "[Removed Lines]",
          "245:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   void iterateReverse(HeaderMap::ConstIterateCb cb, void* context) const override {",
          "307:     HeaderMapImpl::iterateReverse(cb, context);",
          "308:   }",
          "312:   void clear() override { HeaderMapImpl::clear(); }",
          "313:   size_t remove(const LowerCaseString& key) override { return HeaderMapImpl::remove(key); }",
          "314:   size_t removePrefix(const LowerCaseString& key) override {",
          "",
          "[Removed Lines]",
          "309:   HeaderMap::Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const override {",
          "310:     return HeaderMapImpl::lookup(key, entry);",
          "311:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/tracers/common/ot/opentracing_driver_impl.cc||source/extensions/tracers/common/ot/opentracing_driver_impl.cc": [
          "File: source/extensions/tracers/common/ot/opentracing_driver_impl.cc -> source/extensions/tracers/common/ot/opentracing_driver_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   opentracing::expected<opentracing::string_view>",
          "47:   LookupKey(opentracing::string_view key) const override {",
          "53:       return opentracing::string_view{entry->value().getStringView().data(),",
          "54:                                       entry->value().getStringView().length()};",
          "56:       return opentracing::make_unexpected(opentracing::key_not_found_error);",
          "59:     }",
          "61:   }",
          "63:   opentracing::expected<void> ForeachKey(OpenTracingCb f) const override {",
          "",
          "[Removed Lines]",
          "48:     const Http::HeaderEntry* entry;",
          "49:     Http::HeaderMap::Lookup lookup_result =",
          "50:         request_headers_.lookup(Http::LowerCaseString{key}, &entry);",
          "51:     switch (lookup_result) {",
          "52:     case Http::HeaderMap::Lookup::Found:",
          "55:     case Http::HeaderMap::Lookup::NotFound:",
          "57:     case Http::HeaderMap::Lookup::NotSupported:",
          "58:       return opentracing::make_unexpected(opentracing::lookup_key_not_supported_error);",
          "60:     NOT_REACHED_GCOVR_EXCL_LINE;",
          "",
          "[Added Lines]",
          "48:     const Http::HeaderEntry* entry = request_headers_.get(Http::LowerCaseString{key});",
          "49:     if (entry != nullptr) {",
          "52:     } else {",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_fuzz.proto||test/common/http/header_map_impl_fuzz.proto": [
          "File: test/common/http/header_map_impl_fuzz.proto -> test/common/http/header_map_impl_fuzz.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     MutateAndMove mutate_and_move = 12;",
          "84:     Append append = 11;",
          "85:     google.protobuf.Empty copy = 7;",
          "87:     string remove = 9;",
          "88:     string remove_prefix = 10;",
          "89:   }",
          "",
          "[Removed Lines]",
          "86:     string lookup = 8;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_fuzz_test.cc||test/common/http/header_map_impl_fuzz_test.cc": [
          "File: test/common/http/header_map_impl_fuzz_test.cc -> test/common/http/header_map_impl_fuzz_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:       header_map = Http::createHeaderMap<Http::RequestHeaderMapImpl>(*header_map);",
          "153:       break;",
          "154:     }",
          "161:     case test::common::http::Action::kRemove: {",
          "162:       header_map->remove(Http::LowerCaseString(replaceInvalidCharacters(action.remove())));",
          "163:       break;",
          "",
          "[Removed Lines]",
          "155:     case test::common::http::Action::kLookup: {",
          "156:       const Http::HeaderEntry* header_entry;",
          "157:       header_map->lookup(Http::LowerCaseString(replaceInvalidCharacters(action.lookup())),",
          "158:                          &header_entry);",
          "159:       break;",
          "160:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
          "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: }",
          "144: BENCHMARK(headerMapImplIterate)->Arg(0)->Arg(1)->Arg(10)->Arg(50);",
          "",
          "[Removed Lines]",
          "147: static void headerMapImplLookup(benchmark::State& state) {",
          "148:   const LowerCaseString key(\"connection\");",
          "149:   const std::string value(\"01234567890123456789\");",
          "150:   auto headers = Http::ResponseHeaderMapImpl::create();",
          "151:   addDummyHeaders(*headers, state.range(0));",
          "152:   headers->addReference(key, value);",
          "153:   for (auto _ : state) {",
          "154:     const HeaderEntry* entry = nullptr;",
          "155:     auto result = headers->lookup(key, &entry);",
          "156:     benchmark::DoNotOptimize(result);",
          "157:   }",
          "158: }",
          "159: BENCHMARK(headerMapImplLookup)->Arg(0)->Arg(1)->Arg(10)->Arg(50);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:       &cb);",
          "874: }",
          "903: TEST(HeaderMapImplTest, Get) {",
          "904:   {",
          "905:     auto headers = TestRequestHeaderMapImpl({{Headers::get().Path.get(), \"/\"}, {\"hello\", \"world\"}});",
          "",
          "[Removed Lines]",
          "876: TEST(HeaderMapImplTest, Lookup) {",
          "877:   TestRequestHeaderMapImpl headers;",
          "878:   headers.addCopy(LowerCaseString(\"hello\"), \"world\");",
          "879:   headers.setContentLength(5);",
          "882:   {",
          "883:     const HeaderEntry* entry;",
          "884:     EXPECT_EQ(HeaderMap::Lookup::NotSupported, headers.lookup(LowerCaseString{\"hello\"}, &entry));",
          "885:     EXPECT_EQ(nullptr, entry);",
          "886:   }",
          "889:   {",
          "890:     const HeaderEntry* entry;",
          "891:     EXPECT_EQ(HeaderMap::Lookup::Found, headers.lookup(Headers::get().ContentLength, &entry));",
          "892:     EXPECT_EQ(\"5\", entry->value().getStringView());",
          "893:   }",
          "896:   {",
          "897:     const HeaderEntry* entry;",
          "898:     EXPECT_EQ(HeaderMap::Lookup::NotFound, headers.lookup(Headers::get().Host, &entry));",
          "899:     EXPECT_EQ(nullptr, entry);",
          "900:   }",
          "901: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test_common/utility.h||test/test_common/utility.h": [
          "File: test/test_common/utility.h -> test/test_common/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "842:   void iterateReverse(HeaderMap::ConstIterateCb cb, void* context) const override {",
          "843:     header_map_->iterateReverse(cb, context);",
          "844:   }",
          "848:   void clear() override {",
          "849:     header_map_->clear();",
          "850:     header_map_->verifyByteSizeInternalForTest();",
          "",
          "[Removed Lines]",
          "845:   HeaderMap::Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const override {",
          "846:     return header_map_->lookup(key, entry);",
          "847:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7b48887b92c96dfa87dc0b7f679ae8eb2f4d80f",
      "candidate_info": {
        "commit_hash": "a7b48887b92c96dfa87dc0b7f679ae8eb2f4d80f",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/a7b48887b92c96dfa87dc0b7f679ae8eb2f4d80f",
        "files": [
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "[http1] Include request URL in request header size computation, and reject partial headers that exceed configured limits (#145)\n\nImprove the robustness of HTTP1 request and response header size checks by including the request URL in the request header size, and add missing header size check when parsing header field names. The missing header field name size check can result in excessive buffering up to a hard-coded 32MB limit until timeout. The missing request URL size check can result in Envoy attempting to route match and proxy HTTP/1.1 requests with URLs up to a hard-coded 32MB limit, which could result in excess memory usage or performance problems in regex route matches.\n\nSigned-off-by: Antonio Vicente <avd@google.com>\nSigned-off-by: John Plevyak <jplevyak@gmail.com>",
        "before_after_code_files": [
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:   ASSERT(current_header_value_.empty());",
          "480: }",
          "482: bool ConnectionImpl::maybeDirectDispatch(Buffer::Instance& data) {",
          "483:   if (!handling_upgrade_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: uint32_t ConnectionImpl::getHeadersSize() {",
          "483:   return current_header_field_.size() + current_header_value_.size() +",
          "484:          (current_header_map_ ? current_header_map_->byteSize() : 0);",
          "485: }",
          "487: void ConnectionImpl::checkMaxHeadersSize() {",
          "488:   const uint32_t total = getHeadersSize();",
          "489:   if (total > (max_headers_kb_ * 1024)) {",
          "490:     const absl::string_view header_type =",
          "491:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "492:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "493:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "494:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "495:   }",
          "496: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:   }",
          "557:   current_header_field_.append(data, length);",
          "558: }",
          "560: void ConnectionImpl::onHeaderValue(const char* data, size_t length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "588:   header_parsing_state_ = HeaderParsingState::Value;",
          "589:   current_header_value_.append(header_value.data(), header_value.length());",
          "600: }",
          "602: int ConnectionImpl::onHeadersCompleteBase() {",
          "",
          "[Removed Lines]",
          "591:   const uint32_t total =",
          "592:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
          "593:   if (total > (max_headers_kb_ * 1024)) {",
          "594:     const absl::string_view header_type =",
          "595:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "596:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "597:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "598:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "599:   }",
          "",
          "[Added Lines]",
          "609:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "729:           Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.http1_flood_protection\")),",
          "730:       headers_with_underscores_action_(headers_with_underscores_action) {}",
          "732: void ServerConnectionImpl::onEncodeComplete() {",
          "733:   ASSERT(active_request_);",
          "734:   if (active_request_->remote_complete_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742: uint32_t ServerConnectionImpl::getHeadersSize() {",
          "744:   const uint32_t url_size =",
          "745:       (!processing_trailers_ && active_request_) ? active_request_->request_url_.size() : 0;",
          "746:   return url_size + ConnectionImpl::getHeadersSize();",
          "747: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "846: void ServerConnectionImpl::onUrl(const char* data, size_t length) {",
          "847:   if (active_request_) {",
          "848:     active_request_->request_url_.append(data, length);",
          "849:   }",
          "850: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:     checkMaxHeadersSize();",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h": [
          "File: source/common/http/http1/codec_impl.h -> source/common/http/http1/codec_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   bool resetStreamCalled() { return reset_stream_called_; }",
          "220:   Network::Connection& connection_;",
          "221:   CodecStats stats_;",
          "222:   http_parser parser_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:   virtual uint32_t getHeadersSize();",
          "232:   void checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     ResponseStreamEncoderImpl response_encoder_;",
          "379:     bool remote_complete_{};",
          "380:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:   uint32_t getHeadersSize() override;",
          "",
          "---------------"
        ],
        "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc": [
          "File: test/common/http/http1/codec_impl_test.cc -> test/common/http/http1/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:                            \"4\\r\\n\"",
          "209:                            \"body\\r\\n0\\r\\n\");",
          "210:   codec_->dispatch(buffer);",
          "212:   if (enable_trailers) {",
          "213:     EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException,",
          "214:                               \"trailers size exceeds limit\");",
          "",
          "[Removed Lines]",
          "211:   buffer = Buffer::OwnedImpl(trailer_string + \"\\r\\n\\r\\n\");",
          "",
          "[Added Lines]",
          "211:   buffer = Buffer::OwnedImpl(trailer_string);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejected) {",
          "1785:   testTrailersExceedLimit(long_string, true);",
          "1786: }",
          "1789: TEST_F(Http1ServerConnectionImplTest, ManyTrailersRejected) {",
          "1792: }",
          "1794: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejectedIgnored) {",
          "1797:   testTrailersExceedLimit(long_string, false);",
          "1798: }",
          "1801: TEST_F(Http1ServerConnectionImplTest, ManyTrailersIgnored) {",
          "1804: }",
          "1806: TEST_F(Http1ServerConnectionImplTest, LargeRequestHeadersRejected) {",
          "",
          "[Removed Lines]",
          "1784:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "1791:   testTrailersExceedLimit(createHeaderFragment(101), true);",
          "1796:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "1803:   testTrailersExceedLimit(createHeaderFragment(101), false);",
          "",
          "[Added Lines]",
          "1784:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "1785:   testTrailersExceedLimit(long_string, true);",
          "1786: }",
          "1788: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejected) {",
          "1790:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q');",
          "1797:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", true);",
          "1802:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "1803:   testTrailersExceedLimit(long_string, false);",
          "1804: }",
          "1806: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejectedIgnored) {",
          "1808:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q') + \": value\\r\\n\\r\\n\\r\\n\";",
          "1815:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", false);",
          "1816: }",
          "1818: TEST_F(Http1ServerConnectionImplTest, LargeRequestUrlRejected) {",
          "1819:   initialize();",
          "1821:   std::string exception_reason;",
          "1822:   NiceMock<MockStreamDecoder> decoder;",
          "1823:   Http::StreamEncoder* response_encoder = nullptr;",
          "1824:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "1825:       .WillOnce(Invoke([&](StreamEncoder& encoder, bool) -> StreamDecoder& {",
          "1826:         response_encoder = &encoder;",
          "1827:         return decoder;",
          "1828:       }));",
          "1831:   std::string long_url = \"/\" + std::string(60 * 1024, 'q');",
          "1832:   Buffer::OwnedImpl buffer(\"GET \" + long_url + \" HTTP/1.1\\r\\n\");",
          "1834:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1835:   EXPECT_EQ(\"http1.headers_too_large\", response_encoder->getStream().responseDetails());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1886:   testRequestHeadersAccepted(createHeaderFragment(150));",
          "1887: }",
          "1891:   initialize();",
          "1893:   NiceMock<Http::MockStreamDecoder> response_decoder;",
          "",
          "[Removed Lines]",
          "1890: TEST_F(Http1ClientConnectionImplTest, LargeResponseHeadersRejected) {",
          "",
          "[Added Lines]",
          "1922: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeValueRejected) {",
          "1923:   initialize();",
          "1925:   NiceMock<MockStreamDecoder> response_decoder;",
          "1926:   Http::StreamEncoder& request_encoder = codec_->newStream(response_decoder);",
          "1927:   TestHeaderMapImpl headers{{\":method\", \"GET\"}, {\":path\", \"/\"}, {\":authority\", \"host\"}};",
          "1928:   request_encoder.encodeHeaders(headers, true);",
          "1930:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "1931:   codec_->dispatch(buffer);",
          "1932:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "1933:   buffer = Buffer::OwnedImpl(long_header);",
          "1934:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1935: }",
          "1938: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeFieldRejected) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1898:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "1899:   codec_->dispatch(buffer);",
          "1901:   buffer = Buffer::OwnedImpl(long_header);",
          "1902:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "1903: }",
          "",
          "[Removed Lines]",
          "1900:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q') + \"\\r\\n\";",
          "",
          "[Added Lines]",
          "1948:   std::string long_header = \"bigfield\" + std::string(80 * 1024, 'q');",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:   EXPECT_EQ(1024U, response->body().size());",
          "914: }",
          "916: void HttpIntegrationTest::testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size,",
          "917:                                                   uint32_t max_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: void HttpIntegrationTest::testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size) {",
          "922:   config_helper_.addConfigModifier(",
          "923:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "924:               hcm) -> void { hcm.mutable_max_request_headers_kb()->set_value(max_headers_size); });",
          "925:   max_request_headers_kb_ = max_headers_size;",
          "927:   Http::TestHeaderMapImpl big_headers{{\":method\", \"GET\"},",
          "928:                                       {\":path\", \"/\" + std::string(url_size * 1024, 'a')},",
          "929:                                       {\":scheme\", \"http\"},",
          "930:                                       {\":authority\", \"host\"}};",
          "932:   initialize();",
          "933:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "934:   if (url_size >= max_headers_size) {",
          "936:     auto encoder_decoder = codec_client_->startRequest(big_headers);",
          "937:     auto response = std::move(encoder_decoder.second);",
          "939:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "940:       codec_client_->waitForDisconnect();",
          "941:       EXPECT_TRUE(response->complete());",
          "942:       EXPECT_EQ(\"431\", response->headers().Status()->value().getStringView());",
          "943:     } else {",
          "944:       response->waitForReset();",
          "945:       codec_client_->close();",
          "946:     }",
          "947:   } else {",
          "948:     auto response = sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0);",
          "949:     EXPECT_TRUE(response->complete());",
          "950:     EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "951:   }",
          "952: }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   void testTwoRequests(bool force_network_backup = false);",
          "197:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
          "198:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
          "199:   void testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size = 60,",
          "200:                                uint32_t max_count = 100);",
          "201:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   void testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1015:   EXPECT_EQ(0, upstream_request_->body().length());",
          "1016: }",
          "1018: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestHeadersRejected) {",
          "1020:   testLargeRequestHeaders(95, 1, 60, 100);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1018: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlRejected) {",
          "1020:   testLargeRequestUrl(95, 60);",
          "1021: }",
          "1023: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlAccepted) {",
          "1025:   testLargeRequestUrl(95, 96);",
          "1026: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebab713091fc21818d229e1f9f99b1ee8334eb87",
      "candidate_info": {
        "commit_hash": "ebab713091fc21818d229e1f9f99b1ee8334eb87",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/ebab713091fc21818d229e1f9f99b1ee8334eb87",
        "files": [
          "api/envoy/api/v2/cluster.proto",
          "api/envoy/config/cluster/v3alpha/cluster.proto",
          "docs/root/configuration/upstream/cluster_manager/cluster_stats.rst",
          "docs/root/intro/version_history.rst",
          "generated_api_shadow/envoy/api/v2/cluster.proto",
          "generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto",
          "include/envoy/upstream/upstream.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "source/common/upstream/upstream_impl.cc",
          "source/common/upstream/upstream_impl.h",
          "test/common/router/router_test.cc",
          "test/common/upstream/upstream_impl_test.cc",
          "test/integration/stats_integration_test.cc",
          "test/mocks/upstream/cluster_info.cc",
          "test/mocks/upstream/cluster_info.h"
        ],
        "message": "router: per-cluster histograms w/ timeout budget (#9227)\n\nThis change adds a pair of histograms to track timeout budget usage: one for the\nper-request timeout and one for the global timeout.  The histograms are scaled\nsuch that 100% of the timeout budget is a value of 10000 so that four digits of\nthe percentage used can be recorded.\n\nRisk Level: Low (new stats only).\nTesting: Unit tests added/modified.\nDocs Changes: Added notes about historgrams.\nRelease Notes: Added comment with link to docs.\n\nFixes #6122 \n\nSigned-off-by: Matthew Gumport <mgumport@lyft.com>",
        "before_after_code_files": [
          "api/envoy/api/v2/cluster.proto||api/envoy/api/v2/cluster.proto",
          "api/envoy/config/cluster/v3alpha/cluster.proto||api/envoy/config/cluster/v3alpha/cluster.proto",
          "generated_api_shadow/envoy/api/v2/cluster.proto||generated_api_shadow/envoy/api/v2/cluster.proto",
          "generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto||generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto",
          "include/envoy/upstream/upstream.h||include/envoy/upstream/upstream.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "source/common/upstream/upstream_impl.cc||source/common/upstream/upstream_impl.cc",
          "source/common/upstream/upstream_impl.h||source/common/upstream/upstream_impl.h",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/common/upstream/upstream_impl_test.cc||test/common/upstream/upstream_impl_test.cc",
          "test/integration/stats_integration_test.cc||test/integration/stats_integration_test.cc",
          "test/mocks/upstream/cluster_info.cc||test/mocks/upstream/cluster_info.cc",
          "test/mocks/upstream/cluster_info.h||test/mocks/upstream/cluster_info.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc"
          ]
        }
      },
      "candidate_diff": {
        "api/envoy/api/v2/cluster.proto||api/envoy/api/v2/cluster.proto": [
          "File: api/envoy/api/v2/cluster.proto -> api/envoy/api/v2/cluster.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:   core.ConfigSource lrs_server = 42;",
          "792: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:   bool track_timeout_budgets = 47;",
          "",
          "---------------"
        ],
        "api/envoy/config/cluster/v3alpha/cluster.proto||api/envoy/config/cluster/v3alpha/cluster.proto": [
          "File: api/envoy/config/cluster/v3alpha/cluster.proto -> api/envoy/config/cluster/v3alpha/cluster.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:   core.v3alpha.ConfigSource lrs_server = 42;",
          "828: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:   bool track_timeout_budgets = 47;",
          "",
          "---------------"
        ],
        "generated_api_shadow/envoy/api/v2/cluster.proto||generated_api_shadow/envoy/api/v2/cluster.proto": [
          "File: generated_api_shadow/envoy/api/v2/cluster.proto -> generated_api_shadow/envoy/api/v2/cluster.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:   core.ConfigSource lrs_server = 42;",
          "792: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:   bool track_timeout_budgets = 47;",
          "",
          "---------------"
        ],
        "generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto||generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto": [
          "File: generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto -> generated_api_shadow/envoy/config/cluster/v3alpha/cluster.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:   core.v3alpha.ConfigSource lrs_server = 42;",
          "849: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:   bool track_timeout_budgets = 47;",
          "",
          "---------------"
        ],
        "include/envoy/upstream/upstream.h||include/envoy/upstream/upstream.h": [
          "File: include/envoy/upstream/upstream.h -> include/envoy/upstream/upstream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   REMAINING_GAUGE(remaining_retries, Accumulate)                                                   \\",
          "615:   REMAINING_GAUGE(remaining_rq, Accumulate)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define ALL_CLUSTER_TIMEOUT_BUDGET_STATS(HISTOGRAM)                                                \\",
          "621:   HISTOGRAM(upstream_rq_timeout_budget_percent_used, Unspecified)                                  \\",
          "622:   HISTOGRAM(upstream_rq_timeout_budget_per_try_percent_used, Unspecified)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   ALL_CLUSTER_CIRCUIT_BREAKERS_STATS(GENERATE_GAUGE_STRUCT, GENERATE_GAUGE_STRUCT)",
          "636: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648: struct ClusterTimeoutBudgetStats {",
          "649:   ALL_CLUSTER_TIMEOUT_BUDGET_STATS(GENERATE_HISTOGRAM_STRUCT)",
          "650: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:   virtual ClusterLoadReportStats& loadReportStats() const PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:   virtual const absl::optional<ClusterTimeoutBudgetStats>& timeoutBudgetStats() const PURE;",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   return true;",
          "93: }",
          "95: } // namespace",
          "97: void FilterUtility::setUpstreamScheme(Http::HeaderMap& headers, bool use_secure_transport) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: constexpr uint64_t TimeoutPrecisionFactor = 100;",
          "99: uint64_t percentageOfTimeout(const std::chrono::milliseconds response_time,",
          "100:                              const std::chrono::milliseconds timeout) {",
          "103:   if (timeout.count() == 0) {",
          "104:     return 0;",
          "105:   }",
          "107:   return static_cast<uint64_t>(response_time.count() * TimeoutPrecisionFactor / timeout.count());",
          "108: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "766:     UpstreamRequestPtr upstream_request =",
          "767:         upstream_requests_.back()->removeFromList(upstream_requests_);",
          "771:     if (upstream_request->awaiting_headers_) {",
          "772:       cluster_->stats().upstream_rq_timeout_.inc();",
          "773:       if (upstream_request->upstream_host_) {",
          "774:         upstream_request->upstream_host_->stats().rq_timeout_.inc();",
          "775:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:       if (cluster_->timeoutBudgetStats().has_value()) {",
          "791:         upstream_request->record_timeout_budget_ = false;",
          "792:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "879: void Filter::onUpstreamTimeoutAbort(StreamInfo::ResponseFlag response_flags,",
          "880:                                     absl::string_view details) {",
          "881:   const absl::string_view body =",
          "882:       timeout_response_code_ == Http::Code::GatewayTimeout ? \"upstream request timeout\" : \"\";",
          "883:   onUpstreamAbort(timeout_response_code_, response_flags, body, false, details);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902:   if (cluster_->timeoutBudgetStats().has_value()) {",
          "903:     Event::Dispatcher& dispatcher = callbacks_->dispatcher();",
          "904:     std::chrono::milliseconds response_time = std::chrono::duration_cast<std::chrono::milliseconds>(",
          "905:         dispatcher.timeSource().monotonicTime() - downstream_request_complete_time_);",
          "907:     cluster_->timeoutBudgetStats()->upstream_rq_timeout_budget_percent_used_.recordValue(",
          "908:         percentageOfTimeout(response_time, timeout_.global_timeout_));",
          "909:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:   }",
          "1247:   callbacks_->streamInfo().setUpstreamTiming(final_upstream_request_->upstream_timing_);",
          "1249:   if (config_.emit_dynamic_stats_ && !callbacks_->streamInfo().healthCheck() &&",
          "1250:       DateUtil::timePointValid(downstream_request_complete_time_)) {",
          "1254:     upstream_request.upstream_host_->outlierDetector().putResponseTime(response_time);",
          "1255:     const bool internal_request = Http::HeaderUtility::isEnvoyInternalRequest(*downstream_headers_);",
          "",
          "[Removed Lines]",
          "1251:     Event::Dispatcher& dispatcher = callbacks_->dispatcher();",
          "1252:     std::chrono::milliseconds response_time = std::chrono::duration_cast<std::chrono::milliseconds>(",
          "1253:         dispatcher.timeSource().monotonicTime() - downstream_request_complete_time_);",
          "",
          "[Added Lines]",
          "1279:   Event::Dispatcher& dispatcher = callbacks_->dispatcher();",
          "1280:   std::chrono::milliseconds response_time = std::chrono::duration_cast<std::chrono::milliseconds>(",
          "1281:       dispatcher.timeSource().monotonicTime() - downstream_request_complete_time_);",
          "1283:   if (cluster_->timeoutBudgetStats().has_value()) {",
          "1284:     cluster_->timeoutBudgetStats()->upstream_rq_timeout_budget_percent_used_.recordValue(",
          "1285:         percentageOfTimeout(response_time, timeout_.global_timeout_));",
          "1286:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1386: Filter::UpstreamRequest::UpstreamRequest(Filter& parent, Http::ConnectionPool::Instance& pool)",
          "1387:     : parent_(parent), conn_pool_(pool), grpc_rq_success_deferred_(false),",
          "1388:       stream_info_(pool.protocol(), parent_.callbacks_->dispatcher().timeSource()),",
          "1389:       calling_encode_headers_(false), upstream_canary_(false), decode_complete_(false),",
          "1390:       encode_complete_(false), encode_trailers_(false), retried_(false), awaiting_headers_(true),",
          "1391:       outlier_detection_timeout_recorded_(false),",
          "1393:   if (parent_.config_.start_child_span_) {",
          "1394:     span_ = parent_.callbacks_->activeSpan().spawnChild(",
          "1395:         parent_.callbacks_->tracingConfig(), \"router \" + parent.cluster_->name() + \" egress\",",
          "",
          "[Removed Lines]",
          "1392:       create_per_try_timeout_on_request_complete_(false) {",
          "",
          "[Added Lines]",
          "1425:       start_time_(parent_.callbacks_->dispatcher().timeSource().monotonicTime()),",
          "1429:       create_per_try_timeout_on_request_complete_(false),",
          "1430:       record_timeout_budget_(parent_.cluster_->timeoutBudgetStats().has_value()) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1416:   }",
          "1417:   clearRequestEncoder();",
          "1419:   stream_info_.setUpstreamTiming(upstream_timing_);",
          "1420:   stream_info_.onRequestComplete();",
          "1421:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1459:   if (record_timeout_budget_) {",
          "1460:     Event::Dispatcher& dispatcher = parent_.callbacks_->dispatcher();",
          "1461:     const MonotonicTime end_time = dispatcher.timeSource().monotonicTime();",
          "1462:     const std::chrono::milliseconds response_time =",
          "1463:         std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time_);",
          "1464:     parent_.cluster_->timeoutBudgetStats()",
          "1465:         ->upstream_rq_timeout_budget_per_try_percent_used_.recordValue(",
          "1466:             percentageOfTimeout(response_time, parent_.timeout_.per_try_timeout_));",
          "1467:   }",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"common/access_log/access_log_impl.h\"",
          "22: #include \"common/buffer/watermark_buffer.h\"",
          "23: #include \"common/common/hash.h\"",
          "24: #include \"common/common/hex.h\"",
          "25: #include \"common/common/linked_object.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"common/common/cleanup.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470:     Tracing::SpanPtr span_;",
          "471:     StreamInfo::StreamInfoImpl stream_info_;",
          "472:     StreamInfo::UpstreamTiming upstream_timing_;",
          "475:     Http::HeaderMapPtr upstream_headers_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:     const MonotonicTime start_time_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:     bool create_per_try_timeout_on_request_complete_ : 1;",
          "490:   };",
          "492:   using UpstreamRequestPtr = std::unique_ptr<UpstreamRequest>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:     bool record_timeout_budget_ : 1;",
          "",
          "---------------"
        ],
        "source/common/upstream/upstream_impl.cc||source/common/upstream/upstream_impl.cc": [
          "File: source/common/upstream/upstream_impl.cc -> source/common/upstream/upstream_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   return {ALL_CLUSTER_LOAD_REPORT_STATS(POOL_COUNTER(scope))};",
          "595: }",
          "598: class FactoryContextImpl : public Server::Configuration::CommonFactoryContext {",
          "599: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597: ClusterTimeoutBudgetStats ClusterInfoImpl::generateTimeoutBudgetStats(Stats::Scope& scope) {",
          "598:   return {ALL_CLUSTER_TIMEOUT_BUDGET_STATS(POOL_HISTOGRAM(scope))};",
          "599: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "651:       socket_matcher_(std::move(socket_matcher)), stats_scope_(std::move(stats_scope)),",
          "652:       stats_(generateStats(*stats_scope_)), load_report_stats_store_(stats_scope_->symbolTable()),",
          "653:       load_report_stats_(generateLoadReportStats(load_report_stats_store_)),",
          "654:       features_(parseFeatures(config)),",
          "655:       http1_settings_(Http::Utility::parseHttp1Settings(config.http_protocol_options())),",
          "656:       http2_settings_(Http::Utility::parseHttp2Settings(config.http2_protocol_options())),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:       timeout_budget_stats_(config.track_timeout_budgets()",
          "659:                                 ? absl::make_optional<ClusterTimeoutBudgetStats>(",
          "660:                                       generateTimeoutBudgetStats(*stats_scope_))",
          "661:                                 : absl::nullopt),",
          "",
          "---------------"
        ],
        "source/common/upstream/upstream_impl.h||source/common/upstream/upstream_impl.h": [
          "File: source/common/upstream/upstream_impl.h -> source/common/upstream/upstream_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:   static ClusterCircuitBreakersStats generateCircuitBreakersStats(Stats::Scope& scope,",
          "519:                                                                   const std::string& stat_prefix,",
          "520:                                                                   bool track_remaining);",
          "523:   bool addedViaApi() const override { return added_via_api_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:   static ClusterTimeoutBudgetStats generateTimeoutBudgetStats(Stats::Scope&);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:   ClusterStats& stats() const override { return stats_; }",
          "564:   Stats::Scope& statsScope() const override { return *stats_scope_; }",
          "565:   ClusterLoadReportStats& loadReportStats() const override { return load_report_stats_; }",
          "566:   const Network::Address::InstanceConstSharedPtr& sourceAddress() const override {",
          "567:     return source_address_;",
          "568:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:   const absl::optional<ClusterTimeoutBudgetStats>& timeoutBudgetStats() const override {",
          "568:     return timeout_budget_stats_;",
          "569:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:   mutable ClusterStats stats_;",
          "616:   Stats::IsolatedStoreImpl load_report_stats_store_;",
          "617:   mutable ClusterLoadReportStats load_report_stats_;",
          "618:   const uint64_t features_;",
          "619:   const Http::Http1Settings http1_settings_;",
          "620:   const Http::Http2Settings http2_settings_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622:   const absl::optional<ClusterTimeoutBudgetStats> timeout_budget_stats_;",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: using testing::Matcher;",
          "52: using testing::MockFunction;",
          "53: using testing::NiceMock;",
          "54: using testing::Return;",
          "55: using testing::ReturnPointee;",
          "56: using testing::ReturnRef;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: using testing::Property;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1151:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "1152: }",
          "1155: TEST_F(RouterTest, GrpcOkTrailersOnly) {",
          "1156:   NiceMock<Http::MockStreamEncoder> encoder1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1156: TEST_F(RouterTest, TimeoutBudgetHistogramStat) {",
          "1157:   NiceMock<Http::MockStreamEncoder> encoder;",
          "1158:   Http::StreamDecoder* response_decoder = nullptr;",
          "1159:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1160:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1161:                            -> Http::ConnectionPool::Cancellable* {",
          "1162:         response_decoder = &decoder;",
          "1163:         callbacks.onPoolReady(encoder, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1164:         return nullptr;",
          "1165:       }));",
          "1166:   expectPerTryTimerCreate();",
          "1167:   expectResponseTimerCreate();",
          "1169:   Http::TestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1170:                                   {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1171:   HttpTestUtility::addDefaultHeaders(headers);",
          "1172:   router_.decodeHeaders(headers, false);",
          "1173:   Buffer::OwnedImpl data;",
          "1174:   router_.decodeData(data, true);",
          "1177:   EXPECT_CALL(",
          "1178:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1179:       deliverHistogramToSinks(",
          "1180:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), 20ull));",
          "1182:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1183:               deliverHistogramToSinks(",
          "1184:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"),",
          "1185:                   40ull));",
          "1187:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"200\"}});",
          "1188:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "1189:   test_time_.sleep(std::chrono::milliseconds(80));",
          "1190:   response_decoder->decodeData(data, true);",
          "1191: }",
          "1195: TEST_F(RouterTest, TimeoutBudgetHistogramStatFailure) {",
          "1196:   NiceMock<Http::MockStreamEncoder> encoder;",
          "1197:   Http::StreamDecoder* response_decoder = nullptr;",
          "1198:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1199:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1200:                            -> Http::ConnectionPool::Cancellable* {",
          "1201:         response_decoder = &decoder;",
          "1202:         callbacks.onPoolReady(encoder, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1203:         return nullptr;",
          "1204:       }));",
          "1205:   expectPerTryTimerCreate();",
          "1206:   expectResponseTimerCreate();",
          "1208:   Http::TestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1209:                                   {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1210:   HttpTestUtility::addDefaultHeaders(headers);",
          "1211:   router_.decodeHeaders(headers, false);",
          "1212:   Buffer::OwnedImpl data;",
          "1213:   router_.decodeData(data, true);",
          "1216:   EXPECT_CALL(",
          "1217:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1218:       deliverHistogramToSinks(",
          "1219:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), 20ull));",
          "1221:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1222:               deliverHistogramToSinks(",
          "1223:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"),",
          "1224:                   40ull));",
          "1226:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"500\"}});",
          "1227:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "1228:   test_time_.sleep(std::chrono::milliseconds(80));",
          "1229:   response_decoder->decodeData(data, true);",
          "1230: }",
          "1233: TEST_F(RouterTest, TimeoutBudgetHistogramStatOnlyGlobal) {",
          "1234:   NiceMock<Http::MockStreamEncoder> encoder;",
          "1235:   Http::StreamDecoder* response_decoder = nullptr;",
          "1236:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1237:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1238:                            -> Http::ConnectionPool::Cancellable* {",
          "1239:         response_decoder = &decoder;",
          "1240:         callbacks.onPoolReady(encoder, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1241:         return nullptr;",
          "1242:       }));",
          "1243:   expectPerTryTimerCreate();",
          "1245:   Http::TestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "1246:   HttpTestUtility::addDefaultHeaders(headers);",
          "1247:   router_.decodeHeaders(headers, false);",
          "1248:   Buffer::OwnedImpl data;",
          "1249:   router_.decodeData(data, true);",
          "1252:   EXPECT_CALL(",
          "1253:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1254:       deliverHistogramToSinks(",
          "1255:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), 40ull));",
          "1257:   EXPECT_CALL(",
          "1258:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1259:       deliverHistogramToSinks(",
          "1260:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"), 0ull));",
          "1262:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"200\"}});",
          "1263:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "1264:   test_time_.sleep(std::chrono::milliseconds(80));",
          "1265:   response_decoder->decodeData(data, true);",
          "1266: }",
          "1269: TEST_F(RouterTest, TimeoutBudgetHistogramStatDuringRetries) {",
          "1270:   NiceMock<Http::MockStreamEncoder> encoder1;",
          "1271:   Http::StreamDecoder* response_decoder1 = nullptr;",
          "1272:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1273:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1274:                            -> Http::ConnectionPool::Cancellable* {",
          "1275:         response_decoder1 = &decoder;",
          "1276:         callbacks.onPoolReady(encoder1, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1277:         return nullptr;",
          "1278:       }));",
          "1279:   expectPerTryTimerCreate();",
          "1280:   expectResponseTimerCreate();",
          "1282:   Http::TestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"},",
          "1283:                                   {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1284:                                   {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"100\"}};",
          "1285:   HttpTestUtility::addDefaultHeaders(headers);",
          "1286:   router_.decodeHeaders(headers, false);",
          "1287:   Buffer::OwnedImpl data;",
          "1288:   router_.decodeData(data, true);",
          "1291:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1292:               deliverHistogramToSinks(",
          "1293:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"),",
          "1294:                   100ull));",
          "1296:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1297:               deliverHistogramToSinks(",
          "1298:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), _))",
          "1299:       .Times(0);",
          "1302:   test_time_.sleep(std::chrono::milliseconds(100));",
          "1303:   router_.retry_state_->expectHeadersRetry();",
          "1304:   Http::HeaderMapPtr response_headers1(new Http::TestHeaderMapImpl{{\":status\", \"504\"}});",
          "1305:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_, putHttpResponseCode(504));",
          "1306:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "1307:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "1310:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "1311:   NiceMock<Http::MockStreamEncoder> encoder2;",
          "1312:   Http::StreamDecoder* response_decoder2 = nullptr;",
          "1313:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1314:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1315:                            -> Http::ConnectionPool::Cancellable* {",
          "1316:         response_decoder2 = &decoder;",
          "1317:         callbacks.onPoolReady(encoder2, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1318:         return nullptr;",
          "1319:       }));",
          "1320:   expectPerTryTimerCreate();",
          "1321:   router_.retry_state_->callback_();",
          "1324:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1325:               deliverHistogramToSinks(",
          "1326:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"),",
          "1327:                   100ull));",
          "1329:   EXPECT_CALL(",
          "1330:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1331:       deliverHistogramToSinks(",
          "1332:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), 50ull));",
          "1335:   EXPECT_CALL(callbacks_.stream_info_,",
          "1336:               setResponseFlag(StreamInfo::ResponseFlag::UpstreamRequestTimeout));",
          "1337:   EXPECT_CALL(encoder2.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "1338:   Http::TestHeaderMapImpl response_headers{",
          "1339:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "1340:   test_time_.sleep(std::chrono::milliseconds(100));",
          "1341:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1342:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1343:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _)).Times(1);",
          "1344:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_,",
          "1345:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1346:   per_try_timeout_->invokeCallback();",
          "1348:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "1349:                     .counter(\"upstream_rq_per_try_timeout\")",
          "1350:                     .value());",
          "1351:   EXPECT_EQ(1UL, cm_.conn_pool_.host_->stats().rq_timeout_.value());",
          "1352:   EXPECT_TRUE(verifyHostUpstreamStats(0, 2));",
          "1353: }",
          "1357: TEST_F(RouterTest, TimeoutBudgetHistogramStatDuringGlobalTimeout) {",
          "1358:   NiceMock<Http::MockStreamEncoder> encoder1;",
          "1359:   Http::StreamDecoder* response_decoder1 = nullptr;",
          "1360:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1361:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1362:                            -> Http::ConnectionPool::Cancellable* {",
          "1363:         response_decoder1 = &decoder;",
          "1364:         callbacks.onPoolReady(encoder1, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1365:         return nullptr;",
          "1366:       }));",
          "1367:   expectPerTryTimerCreate();",
          "1368:   expectResponseTimerCreate();",
          "1370:   Http::TestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"},",
          "1371:                                   {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1372:                                   {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"320\"}};",
          "1373:   HttpTestUtility::addDefaultHeaders(headers);",
          "1374:   router_.decodeHeaders(headers, false);",
          "1375:   Buffer::OwnedImpl data;",
          "1376:   router_.decodeData(data, true);",
          "1379:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1380:               deliverHistogramToSinks(",
          "1381:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"),",
          "1382:                   50ull));",
          "1384:   EXPECT_CALL(cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1385:               deliverHistogramToSinks(",
          "1386:                   Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), _))",
          "1387:       .Times(0);",
          "1390:   router_.retry_state_->expectHeadersRetry();",
          "1391:   Http::HeaderMapPtr response_headers1(new Http::TestHeaderMapImpl{{\":status\", \"503\"}});",
          "1392:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_, putHttpResponseCode(503));",
          "1393:   test_time_.sleep(std::chrono::milliseconds(160));",
          "1394:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "1395:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "1398:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "1399:   NiceMock<Http::MockStreamEncoder> encoder2;",
          "1400:   Http::StreamDecoder* response_decoder2 = nullptr;",
          "1401:   EXPECT_CALL(cm_.conn_pool_, newStream(_, _))",
          "1402:       .WillOnce(Invoke([&](Http::StreamDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks)",
          "1403:                            -> Http::ConnectionPool::Cancellable* {",
          "1404:         response_decoder2 = &decoder;",
          "1405:         callbacks.onPoolReady(encoder2, cm_.conn_pool_.host_, upstream_stream_info_);",
          "1406:         return nullptr;",
          "1407:       }));",
          "1408:   expectPerTryTimerCreate();",
          "1409:   router_.retry_state_->callback_();",
          "1412:   EXPECT_CALL(",
          "1413:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1414:       deliverHistogramToSinks(",
          "1415:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_percent_used\"), 100ull));",
          "1417:   EXPECT_CALL(",
          "1418:       cm_.thread_local_cluster_.cluster_.info_->timeout_budget_stats_store_,",
          "1419:       deliverHistogramToSinks(",
          "1420:           Property(&Stats::Metric::name, \"upstream_rq_timeout_budget_per_try_percent_used\"), _))",
          "1421:       .Times(0);",
          "1424:   EXPECT_CALL(callbacks_.stream_info_,",
          "1425:               setResponseFlag(StreamInfo::ResponseFlag::UpstreamRequestTimeout));",
          "1426:   EXPECT_CALL(encoder2.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "1427:   Http::TestHeaderMapImpl response_headers{",
          "1428:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "1429:   test_time_.sleep(std::chrono::milliseconds(240));",
          "1430:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1431:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1432:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _)).Times(0);",
          "1433:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_,",
          "1434:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1435:   response_timeout_->invokeCallback();",
          "1437:   EXPECT_EQ(1U,",
          "1438:             cm_.thread_local_cluster_.cluster_.info_->stats_store_.counter(\"upstream_rq_timeout\")",
          "1439:                 .value());",
          "1440:   EXPECT_EQ(1UL, cm_.conn_pool_.host_->stats().rq_timeout_.value());",
          "1441:   EXPECT_TRUE(verifyHostUpstreamStats(0, 2));",
          "1442: }",
          "",
          "---------------"
        ],
        "test/common/upstream/upstream_impl_test.cc||test/common/upstream/upstream_impl_test.cc": [
          "File: test/common/upstream/upstream_impl_test.cc -> test/common/upstream/upstream_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2098:   EXPECT_FALSE(cluster3->info()->idleTimeout().has_value());",
          "2099: }",
          "2101: class TestFilterConfigFactoryBase {",
          "2102: public:",
          "2103:   TestFilterConfigFactoryBase(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2101: TEST_F(ClusterInfoImplTest, TestTrackTimeoutBudgets) {",
          "2103:   const std::string yaml_disabled = R\"EOF(",
          "2104:     name: name",
          "2105:     connect_timeout: 0.25s",
          "2106:     type: STRICT_DNS",
          "2107:     lb_policy: ROUND_ROBIN",
          "2108:   )EOF\";",
          "2110:   auto cluster = makeCluster(yaml_disabled);",
          "2112:   EXPECT_FALSE(cluster->info()->timeoutBudgetStats().has_value());",
          "2115:   const std::string yaml = R\"EOF(",
          "2116:     name: name",
          "2117:     connect_timeout: 0.25s",
          "2118:     type: STRICT_DNS",
          "2119:     lb_policy: ROUND_ROBIN",
          "2120:     track_timeout_budgets: true",
          "2121:   )EOF\";",
          "2123:   cluster = makeCluster(yaml);",
          "2125:   EXPECT_TRUE(cluster->info()->timeoutBudgetStats().has_value());",
          "2126:   EXPECT_EQ(Stats::Histogram::Unit::Unspecified,",
          "2127:             cluster->info()->timeoutBudgetStats()->upstream_rq_timeout_budget_percent_used_.unit());",
          "2128: }",
          "",
          "---------------"
        ],
        "test/integration/stats_integration_test.cc||test/integration/stats_integration_test.cc": [
          "File: test/integration/stats_integration_test.cc -> test/integration/stats_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:   EXPECT_MEMORY_LE(m_per_cluster, 44000);",
          "288: }",
          "",
          "[Removed Lines]",
          "286:   EXPECT_MEMORY_EQ(m_per_cluster, 43509); // 104 bytes higher than a debug build.",
          "",
          "[Added Lines]",
          "287:   EXPECT_MEMORY_EQ(m_per_cluster, 43637); // 104 bytes higher than a debug build.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339: }",
          "341: TEST_P(ClusterMemoryTestRunner, MemoryLargeHostSizeWithStats) {",
          "",
          "[Removed Lines]",
          "337:   EXPECT_MEMORY_EQ(m_per_cluster, 35644); // 104 bytes higher than a debug build.",
          "338:   EXPECT_MEMORY_LE(m_per_cluster, 36000);",
          "",
          "[Added Lines]",
          "339:   EXPECT_MEMORY_EQ(m_per_cluster, 35772); // 104 bytes higher than a debug build.",
          "340:   EXPECT_MEMORY_LE(m_per_cluster, 36500);",
          "",
          "---------------"
        ],
        "test/mocks/upstream/cluster_info.cc||test/mocks/upstream/cluster_info.cc": [
          "File: test/mocks/upstream/cluster_info.cc -> test/mocks/upstream/cluster_info.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     : stats_(ClusterInfoImpl::generateStats(stats_store_)),",
          "41:       transport_socket_matcher_(new NiceMock<Upstream::MockTransportSocketMatcher>()),",
          "42:       load_report_stats_(ClusterInfoImpl::generateLoadReportStats(load_report_stats_store_)),",
          "43:       circuit_breakers_stats_(",
          "44:           ClusterInfoImpl::generateCircuitBreakersStats(stats_store_, \"default\", true)),",
          "45:       resource_manager_(new Upstream::ResourceManagerImpl(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:       timeout_budget_stats_(absl::make_optional<ClusterTimeoutBudgetStats>(",
          "44:           ClusterInfoImpl::generateTimeoutBudgetStats(timeout_budget_stats_store_))),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       .WillByDefault(",
          "66:           Invoke([this]() -> TransportSocketMatcher& { return *transport_socket_matcher_; }));",
          "67:   ON_CALL(*this, loadReportStats()).WillByDefault(ReturnRef(load_report_stats_));",
          "68:   ON_CALL(*this, sourceAddress()).WillByDefault(ReturnRef(source_address_));",
          "69:   ON_CALL(*this, resourceManager(_))",
          "70:       .WillByDefault(Invoke(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   ON_CALL(*this, timeoutBudgetStats()).WillByDefault(ReturnRef(timeout_budget_stats_));",
          "",
          "---------------"
        ],
        "test/mocks/upstream/cluster_info.h||test/mocks/upstream/cluster_info.h": [
          "File: test/mocks/upstream/cluster_info.h -> test/mocks/upstream/cluster_info.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   MOCK_CONST_METHOD0(stats, ClusterStats&());",
          "118:   MOCK_CONST_METHOD0(statsScope, Stats::Scope&());",
          "119:   MOCK_CONST_METHOD0(loadReportStats, ClusterLoadReportStats&());",
          "120:   MOCK_CONST_METHOD0(sourceAddress, const Network::Address::InstanceConstSharedPtr&());",
          "121:   MOCK_CONST_METHOD0(lbSubsetInfo, const LoadBalancerSubsetInfo&());",
          "122:   MOCK_CONST_METHOD0(metadata, const envoy::config::core::v3alpha::Metadata&());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   MOCK_CONST_METHOD0(timeoutBudgetStats, absl::optional<ClusterTimeoutBudgetStats>&());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:   Upstream::TransportSocketMatcherPtr transport_socket_matcher_;",
          "144:   NiceMock<Stats::MockIsolatedStatsStore> load_report_stats_store_;",
          "145:   ClusterLoadReportStats load_report_stats_;",
          "146:   ClusterCircuitBreakersStats circuit_breakers_stats_;",
          "147:   NiceMock<Runtime::MockLoader> runtime_;",
          "148:   std::unique_ptr<Upstream::ResourceManager> resource_manager_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   NiceMock<Stats::MockIsolatedStatsStore> timeout_budget_stats_store_;",
          "148:   absl::optional<ClusterTimeoutBudgetStats> timeout_budget_stats_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "619eb5735f038a568df6497f28fac1bf809b2379",
      "candidate_info": {
        "commit_hash": "619eb5735f038a568df6497f28fac1bf809b2379",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/619eb5735f038a568df6497f28fac1bf809b2379",
        "files": [
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "Fix compilation in http_integration.cc (#8896)\n\nSigned-off-by: Anatoly Scheglov <ascheglov@yandex-team.ru>",
        "before_after_code_files": [
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:   EXPECT_EQ(response->body(), expected_body);",
          "335: }",
          "338: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
          "339:                                                 std::chrono::milliseconds connection_wait_timeout) {",
          "342:   if (!fake_upstream_connection_) {",
          "",
          "[Removed Lines]",
          "337: uint64_t",
          "340:   uint64_t upstream_with_request;",
          "",
          "[Added Lines]",
          "337: absl::optional<uint64_t>",
          "340:   absl::optional<uint64_t> upstream_with_request;",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:       const std::vector<uint64_t>& upstream_indices,",
          "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
          "137:   void waitForNextUpstreamRequest(",
          "",
          "[Removed Lines]",
          "134:   uint64_t waitForNextUpstreamRequest(",
          "",
          "[Added Lines]",
          "134:   absl::optional<uint64_t> waitForNextUpstreamRequest(",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   auto upstream_idx = waitForNextUpstreamRequest({0, 1});",
          "425:   upstream_request_->encodeHeaders(Http::TestHeaderMapImpl{{\":status\", \"503\"}}, false);",
          "428:     ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "431:   } else {",
          "432:     ASSERT_TRUE(upstream_request_->waitForReset());",
          "433:   }",
          "436:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "437:   upstream_request_->encodeData(512, true);",
          "",
          "[Removed Lines]",
          "427:   if (fake_upstreams_[upstream_idx]->httpType() == FakeHttpConnection::Type::HTTP1) {",
          "429:     ASSERT_TRUE(fake_upstreams_[upstream_idx]->waitForHttpConnection(*dispatcher_,",
          "430:                                                                      fake_upstream_connection_));",
          "435:   waitForNextUpstreamRequest(upstream_idx);",
          "",
          "[Added Lines]",
          "425:   ASSERT_TRUE(upstream_idx.has_value());",
          "428:   if (fake_upstreams_[*upstream_idx]->httpType() == FakeHttpConnection::Type::HTTP1) {",
          "430:     ASSERT_TRUE(fake_upstreams_[*upstream_idx]->waitForHttpConnection(*dispatcher_,",
          "431:                                                                       fake_upstream_connection_));",
          "436:   waitForNextUpstreamRequest(*upstream_idx);",
          "",
          "---------------"
        ]
      }
    }
  ]
}