{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f7e0f2da6a5c1be7ed6c79eca6c723d1b341aff",
      "candidate_info": {
        "commit_hash": "2f7e0f2da6a5c1be7ed6c79eca6c723d1b341aff",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2f7e0f2da6a5c1be7ed6c79eca6c723d1b341aff",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-read-stream.js"
        ],
        "message": "fs: remove undocumented .destroy callbacks\n\nThe destroy() method of fs.ReadStream and fs.WriteStream takes a callback.\nIt's a leftover from the node 0.1 days, undocumented and not part of the\nstreams API. Remove it.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-read-stream.js||test/simple/test-fs-read-stream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364: };",
          "1368:   var self = this;",
          "1374:   this.readable = false;",
          "1376:   function close() {",
          "1377:     fs.close(self.fd, function(err) {",
          "1378:       if (err) {",
          "1380:         self.emit('error', err);",
          "1382:       }",
          "1386:     });",
          "1387:   }",
          "",
          "[Removed Lines]",
          "1367: ReadStream.prototype.destroy = function(cb) {",
          "1370:   if (!this.readable) {",
          "1371:     if (cb) process.nextTick(function() { cb(null); });",
          "1372:     return;",
          "1373:   }",
          "1379:         if (cb) cb(err);",
          "1381:         return;",
          "1384:       if (cb) cb(null);",
          "1385:       self.emit('close');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1570:   this.flush();",
          "1571: };",
          "1574:   var self = this;",
          "1580:   this.writable = false;",
          "1582:   function close() {",
          "1583:     fs.close(self.fd, function(err) {",
          "1584:       if (err) {",
          "1586:         self.emit('error', err);",
          "1588:       }",
          "1592:     });",
          "1593:   }",
          "",
          "[Removed Lines]",
          "1573: WriteStream.prototype.destroy = function(cb) {",
          "1576:   if (!this.writable) {",
          "1577:     if (cb) process.nextTick(function() { cb(null); });",
          "1578:     return;",
          "1579:   }",
          "1585:         if (cb) { cb(err); }",
          "1587:         return;",
          "1590:       if (cb) { cb(null); }",
          "1591:       self.emit('close');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-read-stream.js||test/simple/test-fs-read-stream.js": [
          "File: test/simple/test-fs-read-stream.js -> test/simple/test-fs-read-stream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: var fn = path.join(common.fixturesDir, 'elipses.txt');",
          "35: var rangeFile = path.join(common.fixturesDir, 'x.txt');",
          "39: var paused = false;",
          "",
          "[Removed Lines]",
          "37: var callbacks = { open: 0, end: 0, close: 0, destroy: 0 };",
          "",
          "[Added Lines]",
          "37: var callbacks = { open: 0, end: 0, close: 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: });",
          "96: var file3 = fs.createReadStream(fn, {encoding: 'utf8'});",
          "97: file3.length = 0;",
          "98: file3.on('data', function(data) {",
          "",
          "[Removed Lines]",
          "85: var file2 = fs.createReadStream(fn);",
          "86: file2.destroy(function(err) {",
          "87:   assert.ok(!err);",
          "88:   callbacks.destroy++;",
          "90:   file2.destroy(function(err) {",
          "91:     assert.ok(!err);",
          "92:     callbacks.destroy++;",
          "93:   });",
          "94: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: process.on('exit', function() {",
          "113:   assert.equal(1, callbacks.open);",
          "114:   assert.equal(1, callbacks.end);",
          "117:   assert.equal(2, callbacks.close);",
          "119:   assert.equal(30000, file.length);",
          "120:   assert.equal(10000, file3.length);",
          "121: });",
          "",
          "[Removed Lines]",
          "115:   assert.equal(2, callbacks.destroy);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42c6952edb5cfccd708bea8a9a6c02c67641a314",
      "candidate_info": {
        "commit_hash": "42c6952edb5cfccd708bea8a9a6c02c67641a314",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/42c6952edb5cfccd708bea8a9a6c02c67641a314",
        "files": [
          "lib/tls.js"
        ],
        "message": "tls: pass linting",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     var re = host.replace(",
          "107:     return new RegExp('^' + re + '$', 'i');",
          "108:   }",
          "",
          "[Removed Lines]",
          "100:       /\\*([a-z0-9\\\\-_\\.])|[\\.,\\-\\\\\\^\\$+?*\\[\\]\\(\\):!\\|{}]/g,",
          "101:       function(all, sub) {",
          "102:         if (sub) return '[a-z0-9\\\\-_]*' + (sub === '-' ? '\\\\-' : sub);",
          "103:         return '\\\\' + all;",
          "104:       }",
          "105:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:   }",
          "165:   return valid;",
          "167: exports.checkServerIdentity = checkServerIdentity;",
          "",
          "[Removed Lines]",
          "166: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f721d02c8a356c1a9a40d8bf7099186749f01978",
      "candidate_info": {
        "commit_hash": "f721d02c8a356c1a9a40d8bf7099186749f01978",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f721d02c8a356c1a9a40d8bf7099186749f01978",
        "files": [
          "lib/http.js"
        ],
        "message": "http: fix duplicated variable declaration",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1284:   var parser = socket.parser;",
          "1285:   var req = socket._httpMessage;",
          "1286:   debug('HTTP socket close');",
          "1288:   req.emit('close');",
          "1289:   if (req.res && req.res.readable) {",
          "",
          "[Removed Lines]",
          "1287:   var req = socket._httpMessage;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "870307de75b4fb4a1a8dcc63294d442d1e13545b",
      "candidate_info": {
        "commit_hash": "870307de75b4fb4a1a8dcc63294d442d1e13545b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/870307de75b4fb4a1a8dcc63294d442d1e13545b",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: fix build error on OS X\n\npthread_t is a pointer type on OS X but an unsigned long on most other\nplatforms. Use a C style cast because reinterpret_cast nor static_cast\nwork in all cases.",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: #ifdef _WIN32",
          "97:   val = static_cast<unsigned long>(GetCurrentThreadId());",
          "98: #else",
          "100: #endif",
          "102:   CRYPTO_THREADID_set_numeric(tid, val);",
          "",
          "[Removed Lines]",
          "99:   val = static_cast<unsigned long>(pthread_self());",
          "",
          "[Added Lines]",
          "99:   val = (unsigned long) pthread_self();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39ce94276ae31be733d9e6de61764d0485322374",
      "candidate_info": {
        "commit_hash": "39ce94276ae31be733d9e6de61764d0485322374",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/39ce94276ae31be733d9e6de61764d0485322374",
        "files": [
          "tools/addon.gypi"
        ],
        "message": "addon: use absolute paths for the node include dirs\n\nThis fixes running gyp_addon from across filesystems on Windows.\n\nThis is essentially a gyp bug where it's not relativizing properly\nacross filesystems. See TooTallNate/node-gyp#15 for the gory details.",
        "before_after_code_files": [
          "tools/addon.gypi||tools/addon.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/addon.gypi||tools/addon.gypi": [
          "File: tools/addon.gypi -> tools/addon.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     'product_extension': 'node',",
          "5:     'product_prefix': '',",
          "6:     'include_dirs': [",
          "10:     ],",
          "12:     'conditions': [",
          "",
          "[Removed Lines]",
          "7:       '../src',",
          "8:       '../deps/uv/include',",
          "9:       '../deps/v8/include'",
          "",
          "[Added Lines]",
          "7:       '<(node_root_dir)/src',",
          "8:       '<(node_root_dir)/deps/uv/include',",
          "9:       '<(node_root_dir)/deps/v8/include'",
          "",
          "---------------"
        ]
      }
    }
  ]
}