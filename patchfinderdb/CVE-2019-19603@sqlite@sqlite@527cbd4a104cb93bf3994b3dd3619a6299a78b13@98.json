{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e89feee5c3028dc1232bec97086cd1b407fb188a",
      "candidate_info": {
        "commit_hash": "e89feee5c3028dc1232bec97086cd1b407fb188a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e89feee5c3028dc1232bec97086cd1b407fb188a",
        "files": [
          "ext/fts3/fts3_unicode.c",
          "ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts3/unicode/parseunicode.tcl",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5tokenizer.test",
          "ext/fts5/test/fts5umlaut.test",
          "ext/fts5/test/fts5unicode3.test",
          "manifest",
          "manifest.uuid",
          "test/fts4umlaut.test"
        ],
        "message": "Add the \"remove_diacritics=2\" option to the unicode61 tokenizer in both FTS5 and FTS3/4.\n\nFossilOrigin-Name: 06177f3f114b5d804b84c27ac843740282e2176fdf0f7a999feda0e1b624adec",
        "before_after_code_files": [
          "ext/fts3/fts3_unicode.c||ext/fts3/fts3_unicode.c",
          "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts3/unicode/parseunicode.tcl||ext/fts3/unicode/parseunicode.tcl",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5tokenizer.test||ext/fts5/test/fts5tokenizer.test",
          "ext/fts5/test/fts5umlaut.test||ext/fts5/test/fts5umlaut.test",
          "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test",
          "manifest.uuid||manifest.uuid",
          "test/fts4umlaut.test||test/fts4umlaut.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_unicode.c||ext/fts3/fts3_unicode.c": [
          "File: ext/fts3/fts3_unicode.c -> ext/fts3/fts3_unicode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: struct unicode_tokenizer {",
          "84:   sqlite3_tokenizer base;",
          "86:   int nException;",
          "87:   int *aiException;",
          "88: };",
          "",
          "[Removed Lines]",
          "85:   int bRemoveDiacritic;",
          "",
          "[Added Lines]",
          "85:   int eRemoveDiacritic;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   pNew = (unicode_tokenizer *) sqlite3_malloc(sizeof(unicode_tokenizer));",
          "228:   if( pNew==NULL ) return SQLITE_NOMEM;",
          "229:   memset(pNew, 0, sizeof(unicode_tokenizer));",
          "232:   for(i=0; rc==SQLITE_OK && i<nArg; i++){",
          "233:     const char *z = azArg[i];",
          "234:     int n = (int)strlen(z);",
          "236:     if( n==19 && memcmp(\"remove_diacritics=1\", z, 19)==0 ){",
          "238:     }",
          "239:     else if( n==19 && memcmp(\"remove_diacritics=0\", z, 19)==0 ){",
          "241:     }",
          "242:     else if( n>=11 && memcmp(\"tokenchars=\", z, 11)==0 ){",
          "243:       rc = unicodeAddExceptions(pNew, 1, &z[11], n-11);",
          "",
          "[Removed Lines]",
          "230:   pNew->bRemoveDiacritic = 1;",
          "237:       pNew->bRemoveDiacritic = 1;",
          "240:       pNew->bRemoveDiacritic = 0;",
          "",
          "[Added Lines]",
          "230:   pNew->eRemoveDiacritic = 1;",
          "237:       pNew->eRemoveDiacritic = 1;",
          "240:       pNew->eRemoveDiacritic = 0;",
          "241:     }",
          "242:     else if( n==19 && memcmp(\"remove_diacritics=2\", z, 19)==0 ){",
          "243:       pNew->eRemoveDiacritic = 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:     zEnd = z;",
          "354:     if( iOut ){",
          "355:       WRITE_UTF8(zOut, iOut);",
          "356:     }",
          "",
          "[Removed Lines]",
          "353:     iOut = sqlite3FtsUnicodeFold((int)iCode, p->bRemoveDiacritic);",
          "",
          "[Added Lines]",
          "356:     iOut = sqlite3FtsUnicodeFold((int)iCode, p->eRemoveDiacritic);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c": [
          "File: ext/fts3/fts3_unicode2.c -> ext/fts3/fts3_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   unsigned short aDia[] = {",
          "164:         0,  1797,  1848,  1859,  1891,  1928,  1940,  1995,",
          "165:      2024,  2040,  2060,  2110,  2168,  2206,  2264,  2286,",
          "166:      2344,  2383,  2472,  2488,  2516,  2596,  2668,  2732,",
          "167:      2782,  2842,  2894,  2954,  2984,  3000,  3028,  3336,",
          "177:   };",
          "178:   char aChar[] = {",
          "188:   };",
          "190:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "162: static int remove_diacritic(int c){",
          "168:      3456,  3696,  3712,  3728,  3744,  3896,  3912,  3928,",
          "169:      3968,  4008,  4040,  4106,  4138,  4170,  4202,  4234,",
          "170:      4266,  4296,  4312,  4344,  4408,  4424,  4472,  4504,",
          "171:      6148,  6198,  6264,  6280,  6360,  6429,  6505,  6529,",
          "172:     61448, 61468, 61534, 61592, 61642, 61688, 61704, 61726,",
          "173:     61784, 61800, 61836, 61880, 61914, 61948, 61998, 62122,",
          "174:     62154, 62200, 62218, 62302, 62364, 62442, 62478, 62536,",
          "175:     62554, 62584, 62604, 62640, 62648, 62656, 62664, 62730,",
          "176:     62924, 63050, 63082, 63274, 63390,",
          "179:     '\\0', 'a',  'c',  'e',  'i',  'n',  'o',  'u',  'y',  'y',  'a',  'c',",
          "180:     'd',  'e',  'e',  'g',  'h',  'i',  'j',  'k',  'l',  'n',  'o',  'r',",
          "181:     's',  't',  'u',  'u',  'w',  'y',  'z',  'o',  'u',  'a',  'i',  'o',",
          "182:     'u',  'g',  'k',  'o',  'j',  'g',  'n',  'a',  'e',  'i',  'o',  'r',",
          "183:     'u',  's',  't',  'h',  'a',  'e',  'o',  'y',  '\\0', '\\0', '\\0', '\\0',",
          "184:     '\\0', '\\0', '\\0', '\\0', 'a',  'b',  'd',  'd',  'e',  'f',  'g',  'h',",
          "185:     'h',  'i',  'k',  'l',  'l',  'm',  'n',  'p',  'r',  'r',  's',  't',",
          "186:     'u',  'v',  'w',  'w',  'x',  'y',  'z',  'h',  't',  'w',  'y',  'a',",
          "187:     'e',  'i',  'o',  'u',  'y',",
          "",
          "[Added Lines]",
          "162: static int remove_diacritic(int c, int bComplex){",
          "168:      3456,  3696,  3712,  3728,  3744,  3766,  3832,  3896,",
          "169:      3912,  3928,  3944,  3968,  4008,  4040,  4056,  4106,",
          "170:      4138,  4170,  4202,  4234,  4266,  4296,  4312,  4344,",
          "171:      4408,  4424,  4442,  4472,  4488,  4504,  6148,  6198,",
          "172:      6264,  6280,  6360,  6429,  6505,  6529, 61448, 61468,",
          "173:     61512, 61534, 61592, 61610, 61642, 61672, 61688, 61704,",
          "174:     61726, 61784, 61800, 61816, 61836, 61880, 61896, 61914,",
          "175:     61948, 61998, 62062, 62122, 62154, 62184, 62200, 62218,",
          "176:     62252, 62302, 62364, 62410, 62442, 62478, 62536, 62554,",
          "177:     62584, 62604, 62640, 62648, 62656, 62664, 62730, 62766,",
          "178:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "179:     63182, 63242, 63274, 63310, 63368, 63390,",
          "182:     '\\0',      'a'|0x00,  'c'|0x00,  'e'|0x00,  'i'|0x00,  'n'|0x00,",
          "183:     'o'|0x00,  'u'|0x00,  'y'|0x00,  'y'|0x00,  'a'|0x00,  'c'|0x00,",
          "184:     'd'|0x00,  'e'|0x00,  'e'|0x00,  'g'|0x00,  'h'|0x00,  'i'|0x00,",
          "185:     'j'|0x00,  'k'|0x00,  'l'|0x00,  'n'|0x00,  'o'|0x00,  'r'|0x00,",
          "186:     's'|0x00,  't'|0x00,  'u'|0x00,  'u'|0x00,  'w'|0x00,  'y'|0x00,",
          "187:     'z'|0x00,  'o'|0x00,  'u'|0x00,  'a'|0x00,  'i'|0x00,  'o'|0x00,",
          "188:     'u'|0x00,  'u'|0x80,  'a'|0x80,  'g'|0x00,  'k'|0x00,  'o'|0x00,",
          "189:     'o'|0x80,  'j'|0x00,  'g'|0x00,  'n'|0x00,  'a'|0x80,  'a'|0x00,",
          "190:     'e'|0x00,  'i'|0x00,  'o'|0x00,  'r'|0x00,  'u'|0x00,  's'|0x00,",
          "191:     't'|0x00,  'h'|0x00,  'a'|0x00,  'e'|0x00,  'o'|0x80,  'o'|0x00,",
          "192:     'o'|0x80,  'y'|0x00,  '\\0',      '\\0',      '\\0',      '\\0',",
          "193:     '\\0',      '\\0',      '\\0',      '\\0',      'a'|0x00,  'b'|0x00,",
          "194:     'c'|0x80,  'd'|0x00,  'd'|0x00,  'e'|0x80,  'e'|0x00,  'e'|0x80,",
          "195:     'f'|0x00,  'g'|0x00,  'h'|0x00,  'h'|0x00,  'i'|0x00,  'i'|0x80,",
          "196:     'k'|0x00,  'l'|0x00,  'l'|0x80,  'l'|0x00,  'm'|0x00,  'n'|0x00,",
          "197:     'o'|0x80,  'p'|0x00,  'r'|0x00,  'r'|0x80,  'r'|0x00,  's'|0x00,",
          "198:     's'|0x80,  't'|0x00,  'u'|0x00,  'u'|0x80,  'v'|0x00,  'w'|0x00,",
          "199:     'w'|0x00,  'x'|0x00,  'y'|0x00,  'z'|0x00,  'h'|0x00,  't'|0x00,",
          "200:     'w'|0x00,  'y'|0x00,  'a'|0x00,  'a'|0x80,  'a'|0x80,  'a'|0x80,",
          "201:     'e'|0x00,  'e'|0x80,  'e'|0x80,  'i'|0x00,  'o'|0x00,  'o'|0x80,",
          "202:     'o'|0x80,  'o'|0x80,  'u'|0x00,  'u'|0x80,  'u'|0x80,  'y'|0x00,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:     }",
          "202:   }",
          "203:   assert( key>=aDia[iRes] );",
          "205: }",
          "",
          "[Removed Lines]",
          "204:   return ((c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : (int)aChar[iRes]);",
          "",
          "[Added Lines]",
          "219:   if( bComplex==0 && (aChar[iRes] & 0x80) ) return c;",
          "220:   return (c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : ((int)aChar[iRes] & 0x7F);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "231: int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){",
          "",
          "[Added Lines]",
          "247: int sqlite3FtsUnicodeFold(int c, int eRemoveDiacritic){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:       assert( ret>0 );",
          "352:     }",
          "355:   }",
          "357:   else if( c>=66560 && c<66600 ){",
          "",
          "[Removed Lines]",
          "354:     if( bRemoveDiacritic ) ret = remove_diacritic(ret);",
          "",
          "[Added Lines]",
          "370:     if( eRemoveDiacritic ){",
          "371:       ret = remove_diacritic(ret, eRemoveDiacritic==2);",
          "372:     }",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   set nRange 1",
          "10:   set iFirst  [lindex $map 0 0]",
          "11:   set cPrev   [lindex $map 0 1]",
          "13:   foreach m [lrange $map 1 end] {",
          "17:       for {set j [expr $iFirst+$nRange]} {$j<$i} {incr j} {",
          "18:         if {[info exists tl_lookup_table($j)]==0} break",
          "19:       }",
          "",
          "[Removed Lines]",
          "14:     foreach {i c} $m {}",
          "16:     if {$cPrev == $c} {",
          "",
          "[Added Lines]",
          "12:   set fPrev   [lindex $map 0 2]",
          "15:     foreach {i c f} $m {}",
          "17:     if {$cPrev == $c && $fPrev==$f} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     lappend lRange [list $iFirst $nRange]",
          "31:     lappend aChar  $cPrev",
          "33:     set iFirst $i",
          "34:     set cPrev  $c",
          "35:     set nRange 1",
          "36:   }",
          "37:   lappend lRange [list $iFirst $nRange]",
          "38:   lappend aChar $cPrev",
          "40:   puts \"/*\"",
          "41:   puts \"** If the argument is a codepoint corresponding to a lowercase letter\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     lappend aFlag  $fPrev",
          "37:     set fPrev  $f",
          "42:   lappend aFlag $fPrev",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:   puts \"** E\\\"). The resuls of passing a codepoint that corresponds to an\"",
          "46:   puts \"** uppercase letter are undefined.\"",
          "47:   puts \"*/\"",
          "49:   puts \"  unsigned short aDia\\[\\] = \\{\"",
          "50:   puts -nonewline \"        0, \"",
          "51:   set i 1",
          "",
          "[Removed Lines]",
          "48:   puts \"static int ${::remove_diacritic}(int c)\\{\"",
          "",
          "[Added Lines]",
          "52:   puts \"static int ${::remove_diacritic}(int c, int bComplex)\\{\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:   puts \"\"",
          "61:   puts \"  \\};\"",
          "62:   puts \"  char aChar\\[\\] = \\{\"",
          "64:   set i 1",
          "70:     incr i",
          "71:     puts -nonewline \"$str\"",
          "72:   }",
          "",
          "[Removed Lines]",
          "63:   puts -nonewline \"    '\\\\0', \"",
          "65:   foreach c $aChar {",
          "66:     set str \"'$c',  \"",
          "67:     if {$c == \"\"} { set str \"'\\\\0', \" }",
          "69:     if {($i % 12)==0} {puts \"\" ; puts -nonewline \"    \" }",
          "",
          "[Added Lines]",
          "67:   puts -nonewline \"    '\\\\0',      \"",
          "69:   foreach c $aChar f $aFlag {",
          "70:     if { $f } {",
          "71:       set str \"'$c'|0x80,  \"",
          "72:     } else {",
          "73:       set str \"'$c'|0x00,  \"",
          "74:     }",
          "75:     if {$c == \"\"} { set str \"'\\\\0',      \" }",
          "77:     if {($i % 6)==0} {puts \"\" ; puts -nonewline \"    \" }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:     }",
          "88:   }",
          "89:   assert( key>=aDia[iRes] );",
          "91:   puts \"\\}\"",
          "92: }",
          "",
          "[Removed Lines]",
          "90:   return ((c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : (int)aChar[iRes]);}",
          "",
          "[Added Lines]",
          "98:   if( bComplex==0 && (aChar[iRes] & 0x80) ) return c;",
          "99:   return (c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : ((int)aChar[iRes] & 0x7F);}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96:   set lCode [list]",
          "97:   foreach m $map {",
          "99:     if {$code && $char == \"\"} { lappend lCode $code }",
          "100:   }",
          "101:   set lCode [lsort -integer $lCode]",
          "",
          "[Removed Lines]",
          "98:     foreach {code char} $m {}",
          "",
          "[Added Lines]",
          "107:     foreach {code char flag} $m {}",
          "108:     if {$flag} continue",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "472:   puts \"** The results are undefined if the value passed to this function\"",
          "473:   puts \"** is less than zero.\"",
          "474:   puts \"*/\"",
          "477:   set liOff [tl_generate_ioff_table $lRecord]",
          "478:   tl_print_table_header",
          "",
          "[Removed Lines]",
          "475:   puts \"int ${zFunc}\\(int c, int bRemoveDiacritic)\\{\"",
          "",
          "[Added Lines]",
          "485:   puts \"int ${zFunc}\\(int c, int eRemoveDiacritic)\\{\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "516:       assert( ret>0 );",
          "517:     }",
          "520:   }",
          "521:   }]",
          "",
          "[Removed Lines]",
          "519:     if( bRemoveDiacritic ) ret = ${::remove_diacritic}(ret);",
          "",
          "[Added Lines]",
          "529:     if( eRemoveDiacritic ){",
          "530:       ret = ${::remove_diacritic}(ret, eRemoveDiacritic==2);",
          "531:     }",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/parseunicode.tcl||ext/fts3/unicode/parseunicode.tcl": [
          "File: ext/fts3/unicode/parseunicode.tcl -> ext/fts3/unicode/parseunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: # character that it should be replaced with, or an empty string if the",
          "8: # codepoint should simply be removed from the input. Examples:",
          "9: #",
          "12: #",
          "13: # Mappings are only returned for non-upper case codepoints. It is assumed",
          "14: # that the input has already been folded to lower case.",
          "15: #",
          "16: proc rd_load_unicodedata_text {zName} {",
          "17:   global tl_lookup_table",
          "",
          "[Removed Lines]",
          "10: #   { 224 a  }     (replace codepoint 224 to \"a\")",
          "11: #   { 769 \"\" }     (remove codepoint 769 from input)",
          "",
          "[Added Lines]",
          "10: #   { 224 a  0 }     (replace codepoint 224 to \"a\")",
          "11: #   { 769 \"\" 0 }     (remove codepoint 769 from input)",
          "16: # The third value in the list is always either 0 or 1. 0 if the",
          "17: # UnicodeData.txt file maps the codepoint to a single ASCII character and",
          "18: # a diacritic, or 1 if the mapping is indirect. For example, consider the",
          "19: # two entries:",
          "20: #",
          "21: # 1ECD;LATIN SMALL LETTER O WITH DOT BELOW;Ll;0;L;006F 0323;;;;N;;;1ECC;;1ECC",
          "22: # 1ED9;LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW;Ll;0;L;1ECD 0302;;;;N;;;1ED8;;1ED8",
          "23: #",
          "24: # The first codepoint is a direct mapping (as 006F is ASCII and 0323 is a",
          "25: # diacritic). The second is an indirect mapping, as it maps to the",
          "26: # first codepoint plus 0302 (a diacritic).",
          "27: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     set iAscii [expr \"0x[lindex $character_decomposition_mapping 0]\"]",
          "54:     set iDia   [expr \"0x[lindex $character_decomposition_mapping 1]\"]",
          "56:     if {[info exists tl_lookup_table($iCode)]} continue",
          "58:     if { ($iAscii >= 97 && $iAscii <= 122)",
          "59:       || ($iAscii >= 65 && $iAscii <= 90)",
          "60:     } {",
          "62:       set dia($iDia) 1",
          "63:     }",
          "64:   }",
          "66:   foreach d [array names dia] {",
          "68:   }",
          "69:   set lRet [lsort -integer -index 0 $lRet]",
          "",
          "[Removed Lines]",
          "61:       lappend lRet [list $iCode [string tolower [format %c $iAscii]]]",
          "67:     lappend lRet [list $d \"\"]",
          "",
          "[Added Lines]",
          "68:     # Filter out upper-case characters, as they will be mapped to their",
          "69:     # lower-case equivalents before this data is used.",
          "72:     # Check if this is an indirect mapping. If so, set bIndirect to true",
          "73:     # and change $iAscii to the indirectly mappped ASCII character.",
          "74:     set bIndirect 0",
          "75:     if {[info exists dia($iDia)] && [info exists mapping($iAscii)]} {",
          "76:       set iAscii $mapping($iAscii)",
          "77:       set bIndirect 1",
          "78:     }",
          "83:       lappend lRet [list $iCode [string tolower [format %c $iAscii]] $bIndirect]",
          "84:       set mapping($iCode) $iAscii",
          "90:     lappend lRet [list $d \"\" 0]",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:   int nException;",
          "239:   int *aiException;",
          "242: };",
          "244: static int fts5UnicodeAddExceptions(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245: #define FTS5_REMOVE_DIACRITICS_NONE    0",
          "246: #define FTS5_REMOVE_DIACRITICS_SIMPLE  1",
          "247: #define FTS5_REMOVE_DIACRITICS_COMPLEX 2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:       int i;",
          "362:       memset(p, 0, sizeof(Unicode61Tokenizer));",
          "365:       p->nFold = 64;",
          "366:       p->aFold = sqlite3_malloc(p->nFold * sizeof(char));",
          "367:       if( p->aFold==0 ){",
          "",
          "[Removed Lines]",
          "364:       p->bRemoveDiacritic = 1;",
          "",
          "[Added Lines]",
          "369:       p->eRemoveDiacritic = FTS5_REMOVE_DIACRITICS_SIMPLE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382:       for(i=0; rc==SQLITE_OK && i<nArg; i+=2){",
          "383:         const char *zArg = azArg[i+1];",
          "384:         if( 0==sqlite3_stricmp(azArg[i], \"remove_diacritics\") ){",
          "386:             rc = SQLITE_ERROR;",
          "387:           }",
          "389:         }else",
          "390:         if( 0==sqlite3_stricmp(azArg[i], \"tokenchars\") ){",
          "391:           rc = fts5UnicodeAddExceptions(p, zArg, 1);",
          "",
          "[Removed Lines]",
          "385:           if( (zArg[0]!='0' && zArg[0]!='1') || zArg[1] ){",
          "388:           p->bRemoveDiacritic = (zArg[0]=='1');",
          "",
          "[Added Lines]",
          "390:           if( (zArg[0]!='0' && zArg[0]!='1' && zArg[0]!='2') || zArg[1] ){",
          "392:           }else{",
          "393:             p->eRemoveDiacritic = (zArg[0] - '0');",
          "394:             assert( p->eRemoveDiacritic==FTS5_REMOVE_DIACRITICS_NONE",
          "395:                  || p->eRemoveDiacritic==FTS5_REMOVE_DIACRITICS_SIMPLE",
          "396:                  || p->eRemoveDiacritic==FTS5_REMOVE_DIACRITICS_COMPLEX",
          "397:             );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "499:         READ_UTF8(zCsr, zTerm, iCode);",
          "500:         if( fts5UnicodeIsAlnum(p,iCode)||sqlite3Fts5UnicodeIsdiacritic(iCode) ){",
          "501:  non_ascii_tokenchar:",
          "503:           if( iCode ) WRITE_UTF8(zOut, iCode);",
          "504:         }else{",
          "505:           break;",
          "",
          "[Removed Lines]",
          "502:           iCode = sqlite3Fts5UnicodeFold(iCode, p->bRemoveDiacritic);",
          "",
          "[Added Lines]",
          "512:           iCode = sqlite3Fts5UnicodeFold(iCode, p->eRemoveDiacritic);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   unsigned short aDia[] = {",
          "33:         0,  1797,  1848,  1859,  1891,  1928,  1940,  1995,",
          "34:      2024,  2040,  2060,  2110,  2168,  2206,  2264,  2286,",
          "35:      2344,  2383,  2472,  2488,  2516,  2596,  2668,  2732,",
          "36:      2782,  2842,  2894,  2954,  2984,  3000,  3028,  3336,",
          "46:   };",
          "47:   char aChar[] = {",
          "57:   };",
          "59:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "31: static int fts5_remove_diacritic(int c){",
          "37:      3456,  3696,  3712,  3728,  3744,  3896,  3912,  3928,",
          "38:      3968,  4008,  4040,  4106,  4138,  4170,  4202,  4234,",
          "39:      4266,  4296,  4312,  4344,  4408,  4424,  4472,  4504,",
          "40:      6148,  6198,  6264,  6280,  6360,  6429,  6505,  6529,",
          "41:     61448, 61468, 61534, 61592, 61642, 61688, 61704, 61726,",
          "42:     61784, 61800, 61836, 61880, 61914, 61948, 61998, 62122,",
          "43:     62154, 62200, 62218, 62302, 62364, 62442, 62478, 62536,",
          "44:     62554, 62584, 62604, 62640, 62648, 62656, 62664, 62730,",
          "45:     62924, 63050, 63082, 63274, 63390,",
          "48:     '\\0', 'a',  'c',  'e',  'i',  'n',  'o',  'u',  'y',  'y',  'a',  'c',",
          "49:     'd',  'e',  'e',  'g',  'h',  'i',  'j',  'k',  'l',  'n',  'o',  'r',",
          "50:     's',  't',  'u',  'u',  'w',  'y',  'z',  'o',  'u',  'a',  'i',  'o',",
          "51:     'u',  'g',  'k',  'o',  'j',  'g',  'n',  'a',  'e',  'i',  'o',  'r',",
          "52:     'u',  's',  't',  'h',  'a',  'e',  'o',  'y',  '\\0', '\\0', '\\0', '\\0',",
          "53:     '\\0', '\\0', '\\0', '\\0', 'a',  'b',  'd',  'd',  'e',  'f',  'g',  'h',",
          "54:     'h',  'i',  'k',  'l',  'l',  'm',  'n',  'p',  'r',  'r',  's',  't',",
          "55:     'u',  'v',  'w',  'w',  'x',  'y',  'z',  'h',  't',  'w',  'y',  'a',",
          "56:     'e',  'i',  'o',  'u',  'y',",
          "",
          "[Added Lines]",
          "31: static int fts5_remove_diacritic(int c, int bComplex){",
          "37:      3456,  3696,  3712,  3728,  3744,  3766,  3832,  3896,",
          "38:      3912,  3928,  3944,  3968,  4008,  4040,  4056,  4106,",
          "39:      4138,  4170,  4202,  4234,  4266,  4296,  4312,  4344,",
          "40:      4408,  4424,  4442,  4472,  4488,  4504,  6148,  6198,",
          "41:      6264,  6280,  6360,  6429,  6505,  6529, 61448, 61468,",
          "42:     61512, 61534, 61592, 61610, 61642, 61672, 61688, 61704,",
          "43:     61726, 61784, 61800, 61816, 61836, 61880, 61896, 61914,",
          "44:     61948, 61998, 62062, 62122, 62154, 62184, 62200, 62218,",
          "45:     62252, 62302, 62364, 62410, 62442, 62478, 62536, 62554,",
          "46:     62584, 62604, 62640, 62648, 62656, 62664, 62730, 62766,",
          "47:     62830, 62890, 62924, 62974, 63032, 63050, 63082, 63118,",
          "48:     63182, 63242, 63274, 63310, 63368, 63390,",
          "51:     '\\0',      'a'|0x00,  'c'|0x00,  'e'|0x00,  'i'|0x00,  'n'|0x00,",
          "52:     'o'|0x00,  'u'|0x00,  'y'|0x00,  'y'|0x00,  'a'|0x00,  'c'|0x00,",
          "53:     'd'|0x00,  'e'|0x00,  'e'|0x00,  'g'|0x00,  'h'|0x00,  'i'|0x00,",
          "54:     'j'|0x00,  'k'|0x00,  'l'|0x00,  'n'|0x00,  'o'|0x00,  'r'|0x00,",
          "55:     's'|0x00,  't'|0x00,  'u'|0x00,  'u'|0x00,  'w'|0x00,  'y'|0x00,",
          "56:     'z'|0x00,  'o'|0x00,  'u'|0x00,  'a'|0x00,  'i'|0x00,  'o'|0x00,",
          "57:     'u'|0x00,  'u'|0x80,  'a'|0x80,  'g'|0x00,  'k'|0x00,  'o'|0x00,",
          "58:     'o'|0x80,  'j'|0x00,  'g'|0x00,  'n'|0x00,  'a'|0x80,  'a'|0x00,",
          "59:     'e'|0x00,  'i'|0x00,  'o'|0x00,  'r'|0x00,  'u'|0x00,  's'|0x00,",
          "60:     't'|0x00,  'h'|0x00,  'a'|0x00,  'e'|0x00,  'o'|0x80,  'o'|0x00,",
          "61:     'o'|0x80,  'y'|0x00,  '\\0',      '\\0',      '\\0',      '\\0',",
          "62:     '\\0',      '\\0',      '\\0',      '\\0',      'a'|0x00,  'b'|0x00,",
          "63:     'c'|0x80,  'd'|0x00,  'd'|0x00,  'e'|0x80,  'e'|0x00,  'e'|0x80,",
          "64:     'f'|0x00,  'g'|0x00,  'h'|0x00,  'h'|0x00,  'i'|0x00,  'i'|0x80,",
          "65:     'k'|0x00,  'l'|0x00,  'l'|0x80,  'l'|0x00,  'm'|0x00,  'n'|0x00,",
          "66:     'o'|0x80,  'p'|0x00,  'r'|0x00,  'r'|0x80,  'r'|0x00,  's'|0x00,",
          "67:     's'|0x80,  't'|0x00,  'u'|0x00,  'u'|0x80,  'v'|0x00,  'w'|0x00,",
          "68:     'w'|0x00,  'x'|0x00,  'y'|0x00,  'z'|0x00,  'h'|0x00,  't'|0x00,",
          "69:     'w'|0x00,  'y'|0x00,  'a'|0x00,  'a'|0x80,  'a'|0x80,  'a'|0x80,",
          "70:     'e'|0x00,  'e'|0x80,  'e'|0x80,  'i'|0x00,  'o'|0x00,  'o'|0x80,",
          "71:     'o'|0x80,  'o'|0x80,  'u'|0x00,  'u'|0x80,  'u'|0x80,  'y'|0x00,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     }",
          "71:   }",
          "72:   assert( key>=aDia[iRes] );",
          "74: }",
          "",
          "[Removed Lines]",
          "73:   return ((c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : (int)aChar[iRes]);",
          "",
          "[Added Lines]",
          "88:   if( bComplex==0 && (aChar[iRes] & 0x80) ) return c;",
          "89:   return (c > (aDia[iRes]>>3) + (aDia[iRes]&0x07)) ? c : ((int)aChar[iRes] & 0x7F);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "100: int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){",
          "",
          "[Added Lines]",
          "116: int sqlite3Fts5UnicodeFold(int c, int eRemoveDiacritic){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:       assert( ret>0 );",
          "221:     }",
          "224:   }",
          "226:   else if( c>=66560 && c<66600 ){",
          "",
          "[Removed Lines]",
          "223:     if( bRemoveDiacritic ) ret = fts5_remove_diacritic(ret);",
          "",
          "[Added Lines]",
          "239:     if( eRemoveDiacritic ){",
          "240:       ret = fts5_remove_diacritic(ret, eRemoveDiacritic==2);",
          "241:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231: }",
          "235: int sqlite3Fts5UnicodeNCat(void) {",
          "236:   return 32;",
          "237: }",
          "240: int sqlite3Fts5UnicodeCatParse(const char *zCat, u8 *aArray){",
          "241:   aArray[0] = 1;",
          "",
          "[Removed Lines]",
          "234: #if 0",
          "238: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "756:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "757:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "758:     for(; i<128 && i<n; i++){",
          "760:     }",
          "761:     iTbl++;",
          "762:   }",
          "",
          "[Removed Lines]",
          "759:       aAscii[i] = (u8)bToken;",
          "",
          "[Added Lines]",
          "775:       aAscii[i] = bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5tokenizer.test||ext/fts5/test/fts5tokenizer.test": [
          "File: ext/fts5/test/fts5tokenizer.test -> ext/fts5/test/fts5tokenizer.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: } {1 {error in tokenizer constructor}}",
          "190: do_catchsql_test 6.3 {",
          "191:   CREATE VIRTUAL TABLE a3 USING fts5(",
          "193:   );",
          "194: } {1 {error in tokenizer constructor}}",
          "195: do_catchsql_test 6.4 {",
          "",
          "[Removed Lines]",
          "192:     x, y, tokenize = 'unicode61 remove_diacritics 2'",
          "",
          "[Added Lines]",
          "192:     x, y, tokenize = 'unicode61 remove_diacritics 3'",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5umlaut.test||ext/fts5/test/fts5umlaut.test": [
          "File: ext/fts5/test/fts5umlaut.test -> ext/fts5/test/fts5umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 June 17",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5umlaut",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "26:   CREATE VIRTUAL TABLE t2 USING fts5(",
          "27:       x,",
          "28:       tokenize=\"unicode61 remove_diacritics 2\"",
          "29:   );",
          "30: }",
          "32: foreach {tn q res1 res2} {",
          "33:   1 \"H\u00e0 N\u1ed9i\"                  0 1",
          "34:   2 \"H\u00e0 Noi\"                  1 1",
          "35:   3 \"Ha Noi\"                  1 1",
          "36:   4 \"Ha N\\u1ed9i\"             0 1",
          "37:   5 \"Ha N\\u006fi\"             1 1",
          "38:   6 \"Ha N\\u006f\\u0302i\"       1 1",
          "39:   7 \"Ha N\\u006f\\u0323\\u0302i\" 1 1",
          "40: } {",
          "41:   do_execsql_test 1.$tn.1 {",
          "42:     DELETE FROM t1;",
          "43:     INSERT INTO t1(rowid, x) VALUES (1, 'Ha Noi');",
          "44:     SELECT count(*) FROM t1($q)",
          "45:   } $res1",
          "46:   do_execsql_test 1.$tn.2 {",
          "47:     DELETE FROM t1;",
          "48:     INSERT INTO t1(rowid, x) VALUES (1, $q);",
          "49:     SELECT count(*) FROM t1('Ha Noi')",
          "50:   } $res1",
          "52:   do_execsql_test 1.$tn.2 {",
          "53:     DELETE FROM t2;",
          "54:     INSERT INTO t2(rowid, x) VALUES (1, 'Ha Noi');",
          "55:     SELECT count(*) FROM t2($q)",
          "56:   } $res2",
          "57:   do_execsql_test 1.$tn.2 {",
          "58:     DELETE FROM t2;",
          "59:     INSERT INTO t2(rowid, x) VALUES (1, $q);",
          "60:     SELECT count(*) FROM t2('Ha Noi')",
          "61:   } $res2",
          "62: }",
          "64: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test": [
          "File: ext/fts5/test/fts5unicode3.test -> ext/fts5/test/fts5unicode3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: }",
          "38: foreach {y} [rd_load_unicodedata_text $UD] {",
          "40:   if {$ascii==\"\"} {",
          "41:     set int 0",
          "42:   } else {",
          "43:     binary scan $ascii c int",
          "44:   }",
          "46: }",
          "48: proc tcl_fold {i {bRemoveDiacritic 0}} {",
          "49:   global tl_lookup_table",
          "50:   global aDiacritic",
          "52:   if {[info exists tl_lookup_table($i)]} {",
          "53:     set i $tl_lookup_table($i)",
          "54:   }",
          "57:   }",
          "58:   expr $i",
          "59: }",
          "",
          "[Removed Lines]",
          "39:   foreach {code ascii} $y {}",
          "45:   set aDiacritic($code) $int",
          "55:   if {$bRemoveDiacritic && [info exists aDiacritic($i)]} {",
          "56:     set i $aDiacritic($i)",
          "",
          "[Added Lines]",
          "39:   foreach {code ascii f} $y {}",
          "45:   set aDiacritic($code,$f) $int",
          "46:   if {$f==0} { set aDiacritic($code,1) $int }",
          "52:   set f [expr $bRemoveDiacritic==2]",
          "57:   if {$bRemoveDiacritic && [info exists aDiacritic($i,$f)]} {",
          "58:     set i $aDiacritic($i,$f)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   SELECT count(*), min(i) FROM ii WHERE fts5_fold(i)!=CAST(tcl_fold(i) AS int);",
          "86: } {0 {}}",
          "89:   WITH ii(i) AS (",
          "90:     SELECT -1",
          "91:     UNION ALL",
          "",
          "[Removed Lines]",
          "88: do_execsql_test 1.2 {",
          "",
          "[Added Lines]",
          "90: do_execsql_test 1.2.1 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   WHERE fts5_fold(i,1)!=CAST(tcl_fold(i,1) AS int);",
          "96: } {0 {}}",
          "98: do_execsql_test 1.3 {",
          "99:   WITH ii(i) AS (",
          "100:     SELECT -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: do_execsql_test 1.2.2 {",
          "101:   WITH ii(i) AS (",
          "102:     SELECT -1",
          "103:     UNION ALL",
          "104:     SELECT i+1 FROM ii WHERE i<100000",
          "105:   )",
          "106:   SELECT count(*), min(i) FROM ii",
          "107:   WHERE fts5_fold(i,2)!=CAST(tcl_fold(i,2) AS int);",
          "108: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 675aba1f8b989cfd99370704ecb09031026dc3321cccad122ea91d816e02fdba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4umlaut.test||test/fts4umlaut.test": [
          "File: test/fts4umlaut.test -> test/fts4umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4umlaut",
          "19: ifcapable !fts3 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "26:   CREATE VIRTUAL TABLE t2 USING fts4(",
          "27:       x,",
          "28:       tokenize=unicode61 \"remove_diacritics=2\"",
          "29:   );",
          "30: }",
          "32: foreach {tn q res1 res2} {",
          "33:   1 \"H\u00e0 N\u1ed9i\"                  0 1",
          "34:   2 \"H\u00e0 Noi\"                  1 1",
          "35:   3 \"Ha Noi\"                  1 1",
          "36:   4 \"Ha N\\u1ed9i\"             0 1",
          "37:   5 \"Ha N\\u006fi\"             1 1",
          "38:   6 \"Ha N\\u006f\\u0302i\"       1 1",
          "39:   7 \"Ha N\\u006f\\u0323\\u0302i\" 1 1",
          "40: } {",
          "41:   do_execsql_test 1.$tn.1 {",
          "42:     DELETE FROM t1;",
          "43:     INSERT INTO t1(rowid, x) VALUES (1, 'Ha Noi');",
          "44:     SELECT count(*) FROM t1 WHERE t1 MATCH $q",
          "45:   } $res1",
          "46:   do_execsql_test 1.$tn.2 {",
          "47:     DELETE FROM t1;",
          "48:     INSERT INTO t1(rowid, x) VALUES (1, $q);",
          "49:     SELECT count(*) FROM t1 WHERE t1 MATCH 'Ha Noi'",
          "50:   } $res1",
          "52:   do_execsql_test 1.$tn.2 {",
          "53:     DELETE FROM t2;",
          "54:     INSERT INTO t2(rowid, x) VALUES (1, 'Ha Noi');",
          "55:     SELECT count(*) FROM t2 WHERE t2 MATCH $q",
          "56:   } $res2",
          "57:   do_execsql_test 1.$tn.2 {",
          "58:     DELETE FROM t2;",
          "59:     INSERT INTO t2(rowid, x) VALUES (1, $q);",
          "60:     SELECT count(*) FROM t2 WHERE t2 MATCH 'Ha Noi'",
          "61:   } $res2",
          "62: }",
          "64: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68748ec50924a77e19498766d5243851ca836d29",
      "candidate_info": {
        "commit_hash": "68748ec50924a77e19498766d5243851ca836d29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68748ec50924a77e19498766d5243851ca836d29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/fuzzdata8.db"
        ],
        "message": "Futher improvements to the IN operator for row-values on virtual tables.\n\nFossilOrigin-Name: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 344d9cb0c726078af6deb4a26bed3aded5b26914bb286d3446d3a4e9150840b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:     iIn = pLevel->u.in.nIn;",
          "1306:     for(j=nConstraint-1; j>=0; j--){",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:         assert( pLevel->u.in.aInLoop!=0 || db->mallocFailed );",
          "1322:         if( !db->mallocFailed ){",
          "1325:           assert( pOp->opcode==OP_Column || pOp->opcode==OP_Rowid );",
          "1326:           assert( pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 );",
          "1327:           assert( pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 );",
          "",
          "[Removed Lines]",
          "1323:           assert( iIn>0 );",
          "1324:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[--iIn].addrInTop);",
          "",
          "[Added Lines]",
          "1324:           assert( iIn>=0 && iIn<pLevel->u.in.nIn );",
          "1325:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[iIn].addrInTop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1345:         }",
          "1346:       }",
          "1347:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1349:     assert( iIn==0 || db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
      "candidate_info": {
        "commit_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Fix a false-postive in the sqlite3ExprImpliesNonNullRow() decision routine, that resulted in an incorrect LEFT JOIN strength reduction when the WHERE clause contained a row-value comparison. Ticket [02aa2bd02f97d0f2]\n\nFossilOrigin-Name: ea20068e6d97c9349ebcc7d0a01e99ebf08c6f44363f71a0218a1abea209adc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5230:     case TK_NOTNULL:",
          "5231:     case TK_IS:",
          "5232:     case TK_OR:",
          "5233:     case TK_CASE:",
          "5234:     case TK_IN:",
          "5235:     case TK_FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5233:     case TK_VECTOR:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5239:       testcase( pExpr->op==TK_NOTNULL );",
          "5240:       testcase( pExpr->op==TK_IS );",
          "5241:       testcase( pExpr->op==TK_OR );",
          "5242:       testcase( pExpr->op==TK_CASE );",
          "5243:       testcase( pExpr->op==TK_IN );",
          "5244:       testcase( pExpr->op==TK_FUNCTION );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5243:       testcase( pExpr->op==TK_VECTOR );",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "620: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: # 2019-11-04 Ticket 02aa2bd02f97d0f2",
          "620: # The TK_VECTOR operator messes up sqlite3ExprImpliesNonNull() which",
          "621: # causes incorrect LEFT JOIN strength reduction.  TK_VECTOR should be",
          "622: # treated the same as TK_OR.",
          "623: #",
          "624: db close",
          "625: sqlite3 db :memory:",
          "626: do_execsql_test 26.10 {",
          "627:   CREATE TABLE t0(c0);",
          "628:   CREATE TABLE t1(c1);",
          "629:   INSERT INTO t1(c1) VALUES (0);",
          "630:   SELECT (c0, x'') != (NULL, 0) FROM t1 LEFT JOIN t0;",
          "631: } {1}",
          "632: do_execsql_test 26.20 {",
          "633:   SELECT 2 FROM t1 LEFT JOIN t0 ON (c0, x'') != (NULL, 0);",
          "634: } {2}",
          "635: do_execsql_test 26.30 {",
          "636:   SELECT 3 FROM t1 LEFT JOIN t0 WHERE (c0, x'') != (NULL, 0);",
          "637: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9912d1706610d77406d579450af50600cab2ea1",
      "candidate_info": {
        "commit_hash": "c9912d1706610d77406d579450af50600cab2ea1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c9912d1706610d77406d579450af50600cab2ea1",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.27.0\n\nFossilOrigin-Name: 97744701c3bd414e6c9d7182639d8c2ce7cf124c4fce625071ae65658ac61713",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f298328771d5aaba798d05f50c77ac239c7c72422ff35953463d6876a9659f74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea41251eb03c3fb9b59a70712b4dbd3a9dc782fe",
      "candidate_info": {
        "commit_hash": "ea41251eb03c3fb9b59a70712b4dbd3a9dc782fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea41251eb03c3fb9b59a70712b4dbd3a9dc782fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab2.test"
        ],
        "message": "Ensure that ALTER TABLE modifies table and column names embedded in WITH clauses that are part of views and triggers.\n\nFossilOrigin-Name: f44bc7a8b3fac82aa5598e9bdaf65ea4dd3c331cf90c1d5ba26ff1698e92c230",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7da617e97eb905cb009c47403786682b911e32a630f266e1c53ea72836fc88b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:   }",
          "781: }",
          "788: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
          "791:   return WRC_Continue;",
          "792: }",
          "",
          "[Removed Lines]",
          "789:   UNUSED_PARAMETER(pWalker);",
          "790:   UNUSED_PARAMETER(p);",
          "",
          "[Added Lines]",
          "787: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "788:   if( pSelect->pWith ){",
          "789:     int i;",
          "790:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "791:       Select *p = pSelect->pWith->a[i].pSelect;",
          "792:       NameContext sNC;",
          "793:       memset(&sNC, 0, sizeof(sNC));",
          "794:       sNC.pParse = pWalker->pParse;",
          "795:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "796:       sqlite3WalkSelect(pWalker, p);",
          "797:     }",
          "798:   }",
          "799: }",
          "807:   renameWalkWith(pWalker, p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1364:       renameTokenFind(pWalker->pParse, p, pItem->zName);",
          "1365:     }",
          "1366:   }",
          "1368:   return WRC_Continue;",
          "1369: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1384:   renameWalkWith(pWalker, pSelect);",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "17: # If SQLITE_OMIT_ALTERTABLE is defined, omit this file.",
          "18: ifcapable !altertable {",
          "",
          "[Removed Lines]",
          "15: set testprefix altertab",
          "",
          "[Added Lines]",
          "15: set testprefix altertab2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   {CREATE TABLE c3(x, FOREIGN KEY (x) REFERENCES \"p3\"(a))}",
          "86: }",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #-------------------------------------------------------------------------",
          "89: # Table name in WITH clauses that are part of views or triggers.",
          "90: #",
          "91: foreach {tn schema} {",
          "92:   1 {",
          "93:     CREATE TABLE log_entry(col1, y);",
          "94:     CREATE INDEX i1 ON log_entry(col1);",
          "95:   }",
          "97:   2 {",
          "98:     CREATE TABLE t1(a, b, c);",
          "99:     CREATE TABLE t2(x);",
          "100:     CREATE TABLE log_entry(col1);",
          "101:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "102:       INSERT INTO t2 SELECT col1 FROM log_entry;",
          "103:     END;",
          "104:   }",
          "106:   3 {",
          "107:     CREATE TABLE t1(a, b, c);",
          "108:     CREATE TABLE t2(x);",
          "109:     CREATE TABLE log_entry(col1);",
          "110:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "111:       INSERT INTO t2",
          "112:         WITH xyz(x) AS (SELECT col1 FROM log_entry)",
          "113:         SELECT x FROM xyz;",
          "114:     END;",
          "115:   }",
          "117:   4 {",
          "118:     CREATE TABLE log_entry(col1);",
          "119:     CREATE VIEW ttt AS",
          "120:         WITH xyz(x) AS (SELECT col1 FROM log_entry)",
          "121:         SELECT x FROM xyz;",
          "122:   }",
          "123: } {",
          "124:   reset_db",
          "125:   do_execsql_test 3.$tn.1 $schema",
          "126:   set expect [db eval \"SELECT sql FROM sqlite_master\"]",
          "127:   set expect [string map {log_entry {\"newname\"}} $expect]",
          "129:   do_execsql_test 3.$tn.2 {",
          "130:     ALTER TABLE log_entry RENAME TO newname;",
          "131:     SELECT sql FROM sqlite_master;",
          "132:   } $expect",
          "134:   reset_db",
          "135:   do_execsql_test 3.$tn.3 $schema",
          "136:   set expect [db eval \"SELECT sql FROM sqlite_master\"]",
          "137:   set expect [string map {col1 newname} $expect]",
          "139:   do_execsql_test 3.$tn.4 {",
          "140:     ALTER TABLE log_entry RENAME col1 TO newname;",
          "141:     SELECT sql FROM sqlite_master;",
          "142:   } $expect",
          "143: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}