{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2f142d079110237e8c0a02c701b3d387526fbfa",
      "candidate_info": {
        "commit_hash": "a2f142d079110237e8c0a02c701b3d387526fbfa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2f142d079110237e8c0a02c701b3d387526fbfa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Abort the window function tree rewrite early following an OOM.\n\nFossilOrigin-Name: d66f95a51530259ab48f78c9f91acc38055caf338b6fee846b99a8c077466e95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57070c68bbe15fc1d19a765182432e844c082909bdbc63b58fd86b96e2c521dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:         pExpr->iTable = p->pWin->iEphCsr;",
          "814:         pExpr->y.pTab = p->pTab;",
          "815:       }",
          "817:       break;",
          "818:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:       if( pParse->db->mallocFailed ) return WRC_Abort;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "1276:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1277:   if( p1->eStart!=p2->eStart ) return 1;",
          "1278:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1276:   if( NEVER(p1==0) || NEVER(p2==0) ) return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
      "candidate_info": {
        "commit_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae3977a8f30bb859b858c36d03f07319ba210615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix the xfer optimization for generated columns, so that VACUUM works again.\n\nFossilOrigin-Name: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2290:     }",
          "2291: #endif",
          "2292:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2292:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2293:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2295:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300:     }",
          "2303:       assert( pDestCol->pDflt==0 || pDestCol->pDflt->op==TK_SPAN );",
          "2304:       assert( pSrcCol->pDflt==0 || pSrcCol->pDflt->op==TK_SPAN );",
          "2305:       if( (pDestCol->pDflt==0)!=(pSrcCol->pDflt==0)",
          "",
          "[Removed Lines]",
          "2302:     if( i>0 ){",
          "",
          "[Added Lines]",
          "2306:     if( (pDestCol->colFlags & COLFLAG_GENERATED)==0 && i>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2310:       }",
          "2311:     }",
          "2312:   }",
          "2313:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2314:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2317:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2318:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2320:       }",
          "2321:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
      "candidate_info": {
        "commit_hash": "2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c794b15a0704dabe5be9265ff77f67f35b9c24d",
        "files": [
          "ext/misc/blobio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the blobio.c extension module implementing readblob() and writeblob(). Experimental.\n\nFossilOrigin-Name: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
        "before_after_code_files": [
          "ext/misc/blobio.c||ext/misc/blobio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/blobio.c||ext/misc/blobio.c": [
          "File: ext/misc/blobio.c -> ext/misc/blobio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"sqlite3ext.h\"",
          "28: SQLITE_EXTENSION_INIT1",
          "29: #include <assert.h>",
          "30: #include <string.h>",
          "32: static void readblobFunc(",
          "33:   sqlite3_context *context,",
          "34:   int argc,",
          "35:   sqlite3_value **argv",
          "36: ){",
          "37:   sqlite3_blob *pBlob = 0;",
          "38:   const char *zSchema;",
          "39:   const char *zTable;",
          "40:   const char *zColumn;",
          "41:   sqlite3_int64 iRowid;",
          "42:   int iOfst;",
          "43:   unsigned char *aData;",
          "44:   int nData;",
          "45:   sqlite3 *db;",
          "46:   int rc;",
          "48:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "49:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "50:   if( zTable==0 ){",
          "51:     sqlite3_result_error(context, \"bad table name\", -1);",
          "52:     return;",
          "53:   }",
          "54:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "55:   if( zTable==0 ){",
          "56:     sqlite3_result_error(context, \"bad column name\", -1);",
          "57:     return;",
          "58:   }",
          "59:   iRowid = sqlite3_value_int64(argv[3]);",
          "60:   iOfst = sqlite3_value_int(argv[4]);",
          "61:   nData = sqlite3_value_int(argv[5]);",
          "62:   if( nData<=0 ) return;",
          "63:   aData = sqlite3_malloc64( nData+1 );",
          "64:   if( aData==0 ){",
          "65:     sqlite3_result_error_nomem(context);",
          "66:     return;",
          "67:   }",
          "68:   db = sqlite3_context_db_handle(context);",
          "69:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 0, &pBlob);",
          "70:   if( rc ){",
          "71:     sqlite3_free(aData);",
          "72:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "73:     return;",
          "74:   }",
          "75:   rc = sqlite3_blob_read(pBlob, aData, nData, iOfst);",
          "76:   sqlite3_blob_close(pBlob);",
          "77:   if( rc ){",
          "78:     sqlite3_free(aData);",
          "79:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "80:   }else{",
          "81:     sqlite3_result_blob(context, aData, nData, sqlite3_free);",
          "82:   }",
          "83: }",
          "85: static void writeblobFunc(",
          "86:   sqlite3_context *context,",
          "87:   int argc,",
          "88:   sqlite3_value **argv",
          "89: ){",
          "90:   sqlite3_blob *pBlob = 0;",
          "91:   const char *zSchema;",
          "92:   const char *zTable;",
          "93:   const char *zColumn;",
          "94:   sqlite3_int64 iRowid;",
          "95:   int iOfst;",
          "96:   unsigned char *aData;",
          "97:   int nData;",
          "98:   sqlite3 *db;",
          "99:   int rc;",
          "101:   zSchema = (const char*)sqlite3_value_text(argv[0]);",
          "102:   zTable = (const char*)sqlite3_value_text(argv[1]);",
          "103:   if( zTable==0 ){",
          "104:     sqlite3_result_error(context, \"bad table name\", -1);",
          "105:     return;",
          "106:   }",
          "107:   zColumn = (const char*)sqlite3_value_text(argv[2]);",
          "108:   if( zTable==0 ){",
          "109:     sqlite3_result_error(context, \"bad column name\", -1);",
          "110:     return;",
          "111:   }",
          "112:   iRowid = sqlite3_value_int64(argv[3]);",
          "113:   iOfst = sqlite3_value_int(argv[4]);",
          "114:   if( sqlite3_value_type(argv[5])!=SQLITE_BLOB ){",
          "115:     sqlite3_result_error(context, \"6th argument must be a BLOB\", -1);",
          "116:     return;",
          "117:   }",
          "118:   nData = sqlite3_value_bytes(argv[5]);",
          "119:   aData = (unsigned char *)sqlite3_value_blob(argv[5]);",
          "120:   db = sqlite3_context_db_handle(context);",
          "121:   rc = sqlite3_blob_open(db, zSchema, zTable, zColumn, iRowid, 1, &pBlob);",
          "122:   if( rc ){",
          "123:     sqlite3_result_error(context, \"cannot open BLOB pointer\", -1);",
          "124:     return;",
          "125:   }",
          "126:   rc = sqlite3_blob_write(pBlob, aData, nData, iOfst);",
          "127:   sqlite3_blob_close(pBlob);",
          "128:   if( rc ){",
          "129:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "130:   }",
          "131: }",
          "134: #ifdef _WIN32",
          "135: __declspec(dllexport)",
          "136: #endif",
          "137: int sqlite3_blobio_init(",
          "138:   sqlite3 *db,",
          "139:   char **pzErrMsg,",
          "140:   const sqlite3_api_routines *pApi",
          "141: ){",
          "142:   int rc = SQLITE_OK;",
          "143:   SQLITE_EXTENSION_INIT2(pApi);",
          "145:   rc = sqlite3_create_function(db, \"readblob\", 6, SQLITE_UTF8, 0,",
          "146:                                readblobFunc, 0, 0);",
          "147:   if( rc==SQLITE_OK ){",
          "148:     rc = sqlite3_create_function(db, \"writeblob\", 6, SQLITE_UTF8, 0,",
          "149:                                writeblobFunc, 0, 0);",
          "150:   }",
          "151:   return rc;",
          "152: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af8664020a8f01e275e9237082d570fd25978eef",
      "candidate_info": {
        "commit_hash": "af8664020a8f01e275e9237082d570fd25978eef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af8664020a8f01e275e9237082d570fd25978eef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/affinity2.test"
        ],
        "message": "Fix a false-positive in sqlite3ExprNeedsNoAffinityChange(). Ticket [ac184eb571d5e6e0]\n\nFossilOrigin-Name: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2161:   u8 op;",
          "2162:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2164:   op = p->op;",
          "2165:   if( op==TK_REGISTER ) op = p->op2;",
          "2166:   switch( op ){",
          "",
          "[Removed Lines]",
          "2163:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2162:   int unaryMinus = 0;",
          "2164:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2165:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2166:     p = p->pLeft;",
          "2167:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2171:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2172:     }",
          "2173:     case TK_STRING: {",
          "2175:     }",
          "2176:     case TK_BLOB: {",
          "2178:     }",
          "2179:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2174:       return aff==SQLITE_AFF_TEXT;",
          "2177:       return 1;",
          "",
          "[Added Lines]",
          "2178:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2181:       return !unaryMinus;",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
      "candidate_info": {
        "commit_hash": "e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2bcbb404861a7bf4b17ed615f9e161a5371be3b",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support building the Tcl bindings DLL using MSVC.\n\nFossilOrigin-Name: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: SQLITETCLDECLSH = sqlite_tclDecls.h",
          "321: !ENDIF",
          "323: # These are the additional targets that the targets that integrate with the",
          "324: # Tcl library should depend on when compiling, etc.",
          "325: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: # This is the name to use for the dynamic link library (DLL) containing the",
          "324: # Tcl bindings for SQLite.",
          "325: #",
          "326: !IFNDEF SQLITE3TCLDLL",
          "327: SQLITE3TCLDLL = tclsqlite3.dll",
          "328: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: # will run on the platform that is doing the build.",
          "496: #",
          "497: !IF $(USE_FULLWARN)!=0",
          "499: !ELSE",
          "501: !ENDIF",
          "503: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "498: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "500: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "505: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "507: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1063: # Command line prefixes for compiling code, compiling resources,",
          "1064: # linking, etc.",
          "1065: #",
          "1067: LTRCOMPILE = $(RCC) -r",
          "1068: LTLIB = lib.exe",
          "1069: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "1066: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "1073: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1665: # Extra targets for the \"all\" target that require Tcl.",
          "1666: #",
          "1667: !IF $(NO_TCL)==0",
          "1669: !ELSE",
          "1670: ALL_TCL_TARGETS =",
          "1671: !ENDIF",
          "",
          "[Removed Lines]",
          "1668: ALL_TCL_TARGETS = libtclsqlite3.lib",
          "",
          "[Added Lines]",
          "1675: ALL_TCL_TARGETS = $(SQLITE3TCLDLL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1697:  $(LTLIB) $(LTLIBOPTS) /OUT:$@ $(LIBOBJ) $(TLIBS)",
          "1699: libtclsqlite3.lib: tclsqlite.lo libsqlite3.lib",
          "1701: # <</mark>>",
          "1703: $(SQLITE3DLL): $(LIBOBJ) $(LIBRESOBJS) $(CORE_LINK_DEP)",
          "",
          "[Removed Lines]",
          "1700:  $(LTLIB) $(LTLIBOPTS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "",
          "[Added Lines]",
          "1707:  $(LTLIB) $(LTLIBOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "1709: tclsqlite3.def: tclsqlite.lo",
          "1710:  echo EXPORTS > tclsqlite3.def",
          "1711:  dumpbin /all tclsqlite.lo \\",
          "1712:   | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+/EXPORT:_?((?:Sqlite3|Tclsqlite3)_[^@]*)(?:@\\d+)?$$\" \\1 \\",
          "1713:   | sort >> tclsqlite3.def",
          "1715: pkgIndex.tcl: $(TOP)\\VERSION",
          "1716:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1717:   echo package ifneeded sqlite3 @version@ [list load [file join $$dir $(SQLITE3TCLDLL)] sqlite3] \\",
          "1718:    | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact @version@ %%V > pkgIndex.tcl \\",
          "1719:  )",
          "1721: $(SQLITE3TCLDLL): libtclsqlite3.lib $(LIBRESOBJS) tclsqlite3.def pkgIndex.tcl",
          "1722:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /DEF:tclsqlite3.def /OUT:$@ libtclsqlite3.lib $(LIBRESOBJS) $(LTLIBS) $(TLIBS)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1837: #",
          "1838: !IF $(USE_RC)!=0",
          "1839: # <<block1>>",
          "1841:  echo #ifndef SQLITE_RESOURCE_VERSION > sqlite3rc.h",
          "1842:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1843:   echo #define SQLITE_RESOURCE_VERSION %%V \\",
          "",
          "[Removed Lines]",
          "1840: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H)",
          "",
          "[Added Lines]",
          "1862: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H) $(TOP)\\VERSION",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2514:  del /Q *.bsc *.def *.cod *.da *.bb *.bbg *.vc gmon.out 2>NUL",
          "2515:  del /Q $(SQLITE3EXE) $(SQLITE3DLL) Replace.exe 2>NUL",
          "2516: # <<mark>>",
          "2517:  del /Q opcodes.c opcodes.h 2>NUL",
          "2518:  del /Q lemon.* lempar.c parse.* 2>NUL",
          "2519:  del /Q mksourceid.* mkkeywordhash.* keywordhash.h 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2539:  del /Q $(SQLITE3TCLDLL) pkgIndex.tcl 2>NUL",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80e951fce3e5aaa224c8dba6449832d2efabcdc24e86eb6b7833f85cf08ecc00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}