{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "721487fbc57c0617cdf82a2941987ec4bfffd777",
      "candidate_info": {
        "commit_hash": "721487fbc57c0617cdf82a2941987ec4bfffd777",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/721487fbc57c0617cdf82a2941987ec4bfffd777",
        "files": [
          "kdc/kerberos5.c"
        ],
        "message": "kdc: fix compliance with RFC 8062 Section 4.1\n\nRFC 8062 states that if the client in the AS request is anonymous, the\nanonymous KDC option must be set in the request; otherwise, KDC_ERR_BADOPTION\nmust be returned. We were previously returning KDC_ERR_C_PRINCIPAL_UNKNOWN.\n\n(cherry picked from commit 2f013b0d48552b263f5e90279692f55e152ba060)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1698:     if (_kdc_is_anonymous(context, r->client_princ)) {",
          "1699:  if (!_kdc_is_anon_request(b)) {",
          "1700:      kdc_log(context, config, 0, \"Anonymous ticket w/o anonymous flag\");",
          "1702:      goto out;",
          "1703:  }",
          "1704:     } else if (_kdc_is_anon_request(b)) {",
          "",
          "[Removed Lines]",
          "1701:      ret = KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;",
          "",
          "[Added Lines]",
          "1701:      ret = KRB5KDC_ERR_BADOPTION;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61c5d273ca07dab99e57e7f753f85b40ca531796",
      "candidate_info": {
        "commit_hash": "61c5d273ca07dab99e57e7f753f85b40ca531796",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/61c5d273ca07dab99e57e7f753f85b40ca531796",
        "files": [
          "lib/krb5/get_cred.c",
          "lib/krb5/get_in_tkt.c",
          "lib/krb5/init_creds_pw.c",
          "lib/krb5/krb5_locl.h",
          "lib/krb5/ticket.c"
        ],
        "message": "krb5: check KDC supports anonymous if requested\n\nVerify the KDC recognized the request-anonymous flag by validating the returned\nclient principal name.\n\n(cherry picked from commit 014e318d6bdefd8ecfcb99ca9928921f6a49d721)",
        "before_after_code_files": [
          "lib/krb5/get_cred.c||lib/krb5/get_cred.c",
          "lib/krb5/get_in_tkt.c||lib/krb5/get_in_tkt.c",
          "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
          "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
          "lib/krb5/ticket.c||lib/krb5/ticket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h"
          ],
          "candidate": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
            "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/krb5/get_cred.c||lib/krb5/get_cred.c": [
          "File: lib/krb5/get_cred.c -> lib/krb5/get_cred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:  if (flags.b.constrained_delegation || impersonate_principal)",
          "562:      eflags |= EXTRACT_TICKET_ALLOW_CNAME_MISMATCH;",
          "564:  ret = _krb5_extract_ticket(context,",
          "565:        &rep,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:  if (flags.b.request_anonymous)",
          "564:      eflags |= EXTRACT_TICKET_MATCH_ANON;",
          "",
          "---------------"
        ],
        "lib/krb5/get_in_tkt.c||lib/krb5/get_in_tkt.c": [
          "File: lib/krb5/get_in_tkt.c -> lib/krb5/get_in_tkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:     {",
          "493:  unsigned flags = EXTRACT_TICKET_TIMESYNC;",
          "494:  if (opts.request_anonymous)",
          "497:  ret = _krb5_extract_ticket(context,",
          "498:        &rep,",
          "",
          "[Removed Lines]",
          "495:      flags |= EXTRACT_TICKET_ALLOW_SERVER_MISMATCH;",
          "",
          "[Added Lines]",
          "495:      flags |= EXTRACT_TICKET_ALLOW_SERVER_MISMATCH | EXTRACT_TICKET_MATCH_ANON;",
          "",
          "---------------"
        ],
        "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
          "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2244:      }",
          "2245:      if (ctx->ic_flags & KRB5_INIT_CREDS_NO_C_CANON_CHECK)",
          "2246:   eflags |= EXTRACT_TICKET_ALLOW_CNAME_MISMATCH;",
          "2248:      ret = process_pa_data_to_key(context, ctx, &ctx->cred,",
          "2249:       &ctx->as_req, &rep.kdc_rep,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2247:      if (ctx->flags.request_anonymous)",
          "2248:   eflags |= EXTRACT_TICKET_MATCH_ANON;",
          "",
          "---------------"
        ],
        "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
          "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "293: #define EXTRACT_TICKET_MATCH_REALM   4",
          "294: #define EXTRACT_TICKET_AS_REQ    8",
          "295: #define EXTRACT_TICKET_TIMESYNC    16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296: #define EXTRACT_TICKET_MATCH_ANON   32",
          "",
          "---------------"
        ],
        "lib/krb5/ticket.c||lib/krb5/ticket.c": [
          "File: lib/krb5/ticket.c -> lib/krb5/ticket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:     return 0;",
          "527: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532: static krb5_error_code",
          "533: check_client_anonymous(krb5_context context,",
          "534:          krb5_kdc_rep *rep,",
          "535:          krb5_const_principal requested,",
          "536:          krb5_const_principal mapped,",
          "537:          krb5_boolean is_tgs_rep)",
          "538: {",
          "539:     int flags;",
          "541:     if (!rep->enc_part.flags.anonymous)",
          "542:  return KRB5KDC_ERR_BADOPTION;",
          "544:     if (is_tgs_rep)",
          "545:  flags = KRB5_ANON_MATCH_ANY;",
          "546:     else if (krb5_principal_is_anonymous(context, requested, KRB5_ANON_MATCH_ANY))",
          "547:  flags = KRB5_ANON_MATCH_UNAUTHENTICATED;",
          "548:     else",
          "549:  flags = KRB5_ANON_MATCH_AUTHENTICATED;",
          "551:     if (!krb5_principal_is_anonymous(context, mapped, flags))",
          "552:  return KRB5KRB_AP_ERR_MODIFIED;",
          "554:     return 0;",
          "555: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     if (ret)",
          "696:  goto out;",
          "700:     if((flags & EXTRACT_TICKET_ALLOW_CNAME_MISMATCH) == 0) {",
          "701:  ret = check_client_mismatch(context, rep,",
          "702:         creds->client,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:     if (flags & EXTRACT_TICKET_MATCH_ANON) {",
          "727:  ret = check_client_anonymous(context,rep,",
          "728:          creds->client,",
          "729:          tmp_principal,",
          "731:  if (ret) {",
          "732:      krb5_free_principal(context, tmp_principal);",
          "733:      goto out;",
          "734:  }",
          "735:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6654399e43010fd74824809dd11c5ea8b0403210",
      "candidate_info": {
        "commit_hash": "6654399e43010fd74824809dd11c5ea8b0403210",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/6654399e43010fd74824809dd11c5ea8b0403210",
        "files": [
          "kuser/kinit.1",
          "kuser/kinit.c",
          "tests/kdc/check-kdc.in"
        ],
        "message": "kuser: support authenticated anonymous AS-REQs in kinit\n\nAllow kinit to request anonymous tickets with authenticated clients, not just\nanonymous PKINIT.\n\n(cherry picked from commit 3051db0d5dbf52c9dbdb6ed357373ba78750304f)",
        "before_after_code_files": [
          "kuser/kinit.1||kuser/kinit.1",
          "kuser/kinit.c||kuser/kinit.c",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/kinit.1||kuser/kinit.1": [
          "File: kuser/kinit.1 -> kuser/kinit.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: .Op Fl Fl password-file= Ns Ar filename",
          "83: .Op Fl Fl fcache-version= Ns Ar version-number",
          "84: .Op Fl A | Fl Fl no-addresses",
          "86: .Op Fl Fl enterprise",
          "87: .Op Fl Fl version",
          "88: .Op Fl Fl help",
          "",
          "[Removed Lines]",
          "85: .Op Fl Fl anonymous",
          "",
          "[Added Lines]",
          "85: .Op Fl n | Fl Fl anonymous",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: .Xr krb5.conf 5 .",
          "166: .It Fl A , Fl Fl no-addresses",
          "167: Request a ticket with no addresses.",
          "172: .It Fl Fl enterprise",
          "173: Parse principal as a enterprise (KRB5-NT-ENTERPRISE) name. Enterprise",
          "174: names are email like principals that are stored in the name part of",
          "",
          "[Removed Lines]",
          "168: .It Fl Fl anonymous",
          "169: Request an anonymous ticket (which means that the ticket will be",
          "170: issued to an anonymous principal, typically",
          "171: .Dq anonymous@REALM ) .",
          "",
          "[Added Lines]",
          "168: .It Fl n , Fl Fl anonymous",
          "169: Request an anonymous ticket. If the principal is specified as @REALM, then",
          "170: anonymous PKINIT will be used to acquire an unauthenticated anonymous ticket",
          "171: and both the client name and realm in the returned ticket will be anonymized.",
          "172: Otherwise, authentication proceeds as normal and the anonymous ticket will have",
          "173: only the client name anonymized.",
          "",
          "---------------"
        ],
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     { \"extra-addresses\",'a', arg_strings, &extra_addresses,",
          "156:       NP_(\"include these extra addresses\", \"\"), \"addresses\" },",
          "159:       NP_(\"request an anonymous ticket\", \"\"), NULL },",
          "161:     { \"request-pac\", 0,   arg_flag, &pac_flag,",
          "",
          "[Removed Lines]",
          "158:     { \"anonymous\", 0,   arg_flag, &anonymous_flag,",
          "",
          "[Added Lines]",
          "158:     { \"anonymous\", 'n',   arg_flag, &anonymous_flag,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425: }",
          "426: #endif",
          "428: static krb5_error_code",
          "429: get_new_tickets(krb5_context context,",
          "430:   krb5_principal principal,",
          "431:   krb5_ccache ccache,",
          "432:   krb5_deltat ticket_life,",
          "434: {",
          "435:     krb5_error_code ret;",
          "436:     krb5_creds cred;",
          "",
          "[Removed Lines]",
          "433:   int interactive)",
          "",
          "[Added Lines]",
          "428: static krb5_boolean",
          "429: is_anonymous_princ_p(krb5_const_principal principal)",
          "430: {",
          "431:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "432:  principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "433:  principal->name.name_string.len != 2 ||",
          "434:  strcmp(principal->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "435:  strcmp(principal->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "436:  return 0;",
          "437:     return 1;",
          "438: }",
          "445:   int interactive,",
          "446:   int anonymous_pkinit)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:  krb5_get_init_creds_opt_set_canonicalize(context, opt, TRUE);",
          "529:     if (pk_enterprise_flag || enterprise_flag || canonicalize_flag || windows_flag)",
          "530:  krb5_get_init_creds_opt_set_win2k(context, opt, TRUE);",
          "532:  ret = krb5_get_init_creds_opt_set_pkinit(context, opt,",
          "533:        principal,",
          "534:        pk_user_id,",
          "",
          "[Removed Lines]",
          "531:     if (pk_user_id || ent_user_id || anonymous_flag) {",
          "",
          "[Added Lines]",
          "544:     if (pk_user_id || ent_user_id || anonymous_pkinit) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536:        NULL,",
          "537:        NULL,",
          "538:        pk_use_enckey ? 2 : 0 |",
          "540:        prompter,",
          "541:        NULL,",
          "542:        passwd);",
          "",
          "[Removed Lines]",
          "539:        anonymous_flag ? 4 : 0,",
          "",
          "[Added Lines]",
          "552:        anonymous_pkinit ? 4 : 0,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:      krb5_warn(context, ret, \"krb5_init_creds_set_keytab\");",
          "629:      goto out;",
          "630:  }",
          "633:     } else if (!interactive && passwd[0] == '\\0') {",
          "634:  static int already_warned = 0;",
          "",
          "[Removed Lines]",
          "631:     } else if (pk_user_id || ent_user_id || anonymous_flag) {",
          "",
          "[Added Lines]",
          "644:     } else if (pk_user_id || ent_user_id || is_anonymous_princ_p(principal)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "923:          server_str, ctx->ticket_life);",
          "924:     } else {",
          "925:  ret = get_new_tickets(ctx->context, ctx->principal, ctx->ccache,",
          "927:     }",
          "928:     expire = ticket_lifetime(ctx->context, ctx->ccache, ctx->principal,",
          "929:         server_str, &renew_expire);",
          "",
          "[Removed Lines]",
          "926:          ctx->ticket_life, 0);",
          "",
          "[Added Lines]",
          "939:          ctx->ticket_life, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1223:     struct sigaction sa;",
          "1224: #endif",
          "1225:     krb5_boolean unique_ccache = FALSE;",
          "1227:     setprogname(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239:     int anonymous_pkinit = FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1273:  pk_user_id = NULL;",
          "1278:       KRB5_WELLKNOWN_NAME, KRB5_ANON_NAME,",
          "1279:       NULL);",
          "1280:  if (ret)",
          "1281:      krb5_err(context, 1, ret, \"krb5_make_principal\");",
          "1282:  krb5_principal_set_type(context, principal, KRB5_NT_WELLKNOWN);",
          "1284:     } else if (use_keytab || keytab_str) {",
          "1285:  get_princ_kt(context, &principal, argv[0]);",
          "1286:     } else {",
          "",
          "[Removed Lines]",
          "1275:     } else if (anonymous_flag) {",
          "1277:  ret = krb5_make_principal(context, &principal, argv[0],",
          "",
          "[Added Lines]",
          "1289:     } else if (anonymous_flag && argc && argv[0][0] == '@') {",
          "1292:  ret = krb5_make_principal(context, &principal, &argv[0][1],",
          "1298:  anonymous_pkinit = TRUE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1387:  exit(ret != 0);",
          "1388:     }",
          "1391:     if (ret) {",
          "1392:  if (unique_ccache)",
          "1393:      krb5_cc_destroy(context, ccache);",
          "",
          "[Removed Lines]",
          "1390:     ret = get_new_tickets(context, principal, ccache, ticket_life, 1);",
          "",
          "[Added Lines]",
          "1405:     ret = get_new_tickets(context, principal, ccache, ticket_life,",
          "1406:      1, anonymous_pkinit);",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "487: done",
          "488: ${kdestroy}",
          "490: echo \"Getting client initial tickets for cross realm case\"; > messages.log",
          "491: ${kinit} --password-file=${objdir}/foopassword foo@$R || { ec=1 ; eval \"${testfailed}\"; }",
          "492: for a in $enctypes; do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490: echo \"Getting client authenticated anonymous initial tickets\"; > messages.log",
          "491: ${kinit} -n --password-file=${objdir}/foopassword foo@$R || \\",
          "492:  { ec=1 ; eval \"${testfailed}\"; }",
          "493: for a in $enctypes; do",
          "494:  echo \"Getting tickets ($a)\"; > messages.log",
          "495:  ${kgetcred} -e $a ${server}@${R} || { ec=1 ; eval \"${testfailed}\"; }",
          "496:  ${test_ap_req} ${server}@${R} ${keytab} ${cache} || \\",
          "497:   { ec=1 ; eval \"${testfailed}\"; }",
          "498:  ${kdestroy} --credential=${server}@${R}",
          "499: done",
          "500: ${kdestroy}",
          "502: echo \"Getting client anonymous service tickets\"; > messages.log",
          "503: ${kinit} --password-file=${objdir}/foopassword foo@$R || \\",
          "504:  { ec=1 ; eval \"${testfailed}\"; }",
          "505: for a in $enctypes; do",
          "506:  echo \"Getting tickets ($a)\"; > messages.log",
          "507:  ${kgetcred} -n -e $a ${server}@${R} || { ec=1 ; eval \"${testfailed}\"; }",
          "508:  ${test_ap_req} ${server}@${R} ${keytab} ${cache} || \\",
          "509:   { ec=1 ; eval \"${testfailed}\"; }",
          "510:  ${kdestroy} --credential=${server}@${R}",
          "511: done",
          "512: ${kdestroy}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713: if test \"$pkinit\" = yes -a \"$rsa\" = yes ; then",
          "715:     echo \"try anonymous pkinit\"; > messages.log",
          "717:  { ec=1 ; eval \"${testfailed}\"; }",
          "718:     ${kgetcred} ${server}@${R} || { ec=1 ; eval \"${testfailed}\"; }",
          "719:     ${kdestroy}",
          "",
          "[Removed Lines]",
          "716:     ${kinit} --anonymous ${R} || \\",
          "",
          "[Added Lines]",
          "740:     ${kinit} -n @${R} || \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87f2798a6ad435e28cea00379d67eb5aa5f8b90a",
      "candidate_info": {
        "commit_hash": "87f2798a6ad435e28cea00379d67eb5aa5f8b90a",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/87f2798a6ad435e28cea00379d67eb5aa5f8b90a",
        "files": [
          "lib/krb5/send_to_kdc.c"
        ],
        "message": "krb5: fix spelling error in debug log\n\n(cherry picked from commit 1bc2eb33f9992142815152581c9fe2a8894d7964)",
        "before_after_code_files": [
          "lib/krb5/send_to_kdc.c||lib/krb5/send_to_kdc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/krb5/send_to_kdc.c||lib/krb5/send_to_kdc.c": [
          "File: lib/krb5/send_to_kdc.c -> lib/krb5/send_to_kdc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174:      action = KRB5_SENDTO_CONTINUE;",
          "1175:      if (ret == 0) {",
          "1177:   if (submit_request(context, ctx, hi) != 0)",
          "1178:       action = KRB5_SENDTO_TIMEOUT;",
          "1179:      } else {",
          "",
          "[Removed Lines]",
          "1176:   _krb5_debug(context, 5, \"submissing new requests to new host\");",
          "",
          "[Added Lines]",
          "1176:   _krb5_debug(context, 5, \"submitting new requests to new host\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "829bf5d171709e6bc7c11d3a2d22dad903eff83f",
      "candidate_info": {
        "commit_hash": "829bf5d171709e6bc7c11d3a2d22dad903eff83f",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/829bf5d171709e6bc7c11d3a2d22dad903eff83f",
        "files": [
          "lib/wind/gen-map.py"
        ],
        "message": "PY3: dict has no iterkeys method\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba commit c6884138e4c1aec80e8f99ef0978b43919ae9d3a)\n(cherry picked from commit f7c2860a3623e382ae524a353ec428705f02e786)",
        "before_after_code_files": [
          "lib/wind/gen-map.py||lib/wind/gen-map.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-map.py||lib/wind/gen-map.py": [
          "File: lib/wind/gen-map.py -> lib/wind/gen-map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: tables = rfc3454.read(sys.argv[1])",
          "52: t2 = rfc4518.read()",
          "55:     tables[x] = t2[x]",
          "57: map_list = stringprep.get_maplist()",
          "",
          "[Removed Lines]",
          "54: for x in t2.iterkeys():",
          "",
          "[Added Lines]",
          "54: for x in t2:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: trans=[]",
          "92:     for l in tables[t]:",
          "93:         m = re.search('^ *([0-9A-F]+)-([0-9A-F]+); *([^;]+); *(.*) *$', l)",
          "94:         if m:",
          "",
          "[Removed Lines]",
          "91: for t in map_list.iterkeys():",
          "",
          "[Added Lines]",
          "91: for t in map_list:",
          "",
          "---------------"
        ]
      }
    }
  ]
}