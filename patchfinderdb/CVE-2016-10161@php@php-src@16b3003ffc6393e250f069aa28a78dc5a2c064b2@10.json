{
  "cve_id": "CVE-2016-10161",
  "cve_desc": "The object_common1 function in ext/standard/var_unserializer.c in PHP before 5.6.30, 7.0.x before 7.0.15, and 7.1.x before 7.1.1 allows remote attackers to cause a denial of service (buffer over-read and application crash) via crafted serialized data that is mishandled in a finish_nested_data call.",
  "repo": "php/php-src",
  "patch_hash": "16b3003ffc6393e250f069aa28a78dc5a2c064b2",
  "patch_info": {
    "commit_hash": "16b3003ffc6393e250f069aa28a78dc5a2c064b2",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/16b3003ffc6393e250f069aa28a78dc5a2c064b2",
    "files": [
      "ext/standard/tests/serialize/bug73825.phpt",
      "ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re"
    ],
    "message": "Fix bug #73825 - Heap out of bounds read on unserialize in finish_nested_data()",
    "before_after_code_files": [
      "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt",
      "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
      "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
    ]
  },
  "patch_diff": {
    "ext/standard/tests/serialize/bug73825.phpt||ext/standard/tests/serialize/bug73825.phpt": [
      "File: ext/standard/tests/serialize/bug73825.phpt -> ext/standard/tests/serialize/bug73825.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #73825 Heap out of bounds read on unserialize in finish_nested_data()",
      "3: --FILE--",
      "4: <?php",
      "5: $obj = unserialize('O:8:\"00000000\":');",
      "6: var_dump($obj);",
      "7: ?>",
      "8: --EXPECTF--",
      "9: Warning: Bad unserialize data in %sbug73825.php on line %d",
      "11: Notice: unserialize(): Error at offset 13 of 15 bytes in %sbug73825.php on line %d",
      "12: bool(false)",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
      "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "405: {",
      "406:  long elements;",
      "408:  elements = parse_iv2((*p) + 2, p);",
      "410:  (*p) += 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408:  if( *p >= max - 2) {",
      "409:   zend_error(E_WARNING, \"Bad unserialize data\");",
      "410:   return -1;",
      "411:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
      "419:  }",
      "421:  return elements;",
      "",
      "[Removed Lines]",
      "418:   return 0;",
      "",
      "[Added Lines]",
      "423:   return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "496: {",
      "497:  YYCTYPE yych;",
      "498:  static const unsigned char yybm[] = {",
      "",
      "[Removed Lines]",
      "495: #line 496 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "500: #line 501 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "552:  yych = *(YYMARKER = ++YYCURSOR);",
      "553:  if (yych == ':') goto yy95;",
      "554: yy3:",
      "556:  { return 0; }",
      "558: yy4:",
      "559:  yych = *(YYMARKER = ++YYCURSOR);",
      "560:  if (yych == ':') goto yy89;",
      "",
      "[Removed Lines]",
      "555: #line 861 \"ext/standard/var_unserializer.re\"",
      "557: #line 558 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "560: #line 875 \"ext/standard/var_unserializer.re\"",
      "562: #line 563 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "597:  goto yy3;",
      "598: yy14:",
      "599:  ++YYCURSOR;",
      "601:  {",
      "603:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
      "605: }",
      "607: yy16:",
      "608:  yych = *++YYCURSOR;",
      "609:  goto yy3;",
      "",
      "[Removed Lines]",
      "600: #line 855 \"ext/standard/var_unserializer.re\"",
      "606: #line 607 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "605: #line 869 \"ext/standard/var_unserializer.re\"",
      "611: #line 612 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "634:  yych = *++YYCURSOR;",
      "635:  if (yych != '\"') goto yy18;",
      "636:  ++YYCURSOR;",
      "638:  {",
      "639:  size_t len, len2, len3, maxlen;",
      "640:  long elements;",
      "",
      "[Removed Lines]",
      "637: #line 708 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "642: #line 717 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "775:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
      "777:  if (incomplete_class) {",
      "778:   php_store_class_name(*rval, class_name, len2);",
      "779:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "782:  if (elements < 0) {",
      "783:     efree(class_name);",
      "784:     return 0;",
      "785:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "782:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "783: }",
      "785: yy25:",
      "786:  yych = *++YYCURSOR;",
      "787:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "784: #line 785 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "794: #line 795 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "806:  yych = *++YYCURSOR;",
      "807:  if (yych != '\"') goto yy18;",
      "808:  ++YYCURSOR;",
      "810:  {",
      "811:     if (!var_hash) return 0;",
      "813:  INIT_PZVAL(*rval);",
      "817: }",
      "819: yy32:",
      "820:  yych = *++YYCURSOR;",
      "821:  if (yych == '+') goto yy33;",
      "",
      "[Removed Lines]",
      "809: #line 699 \"ext/standard/var_unserializer.re\"",
      "815:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "816:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "818: #line 819 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "819: #line 704 \"ext/standard/var_unserializer.re\"",
      "821:  long elements;",
      "826:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
      "827:  if (elements < 0) {",
      "828:   return 0;",
      "829:  }",
      "830:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "832: #line 833 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "836:  yych = *++YYCURSOR;",
      "837:  if (yych != '{') goto yy18;",
      "838:  ++YYCURSOR;",
      "840:  {",
      "841:  long elements = parse_iv(start + 2);",
      "",
      "[Removed Lines]",
      "839: #line 678 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "853: #line 683 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "858:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
      "859: }",
      "861: yy39:",
      "862:  yych = *++YYCURSOR;",
      "863:  if (yych == '+') goto yy40;",
      "",
      "[Removed Lines]",
      "860: #line 861 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "874: #line 875 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "878:  yych = *++YYCURSOR;",
      "879:  if (yych != '\"') goto yy18;",
      "880:  ++YYCURSOR;",
      "882:  {",
      "883:  size_t len, maxlen;",
      "884:  char *str;",
      "",
      "[Removed Lines]",
      "881: #line 643 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "895: #line 648 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "913:  ZVAL_STRINGL(*rval, str, len, 0);",
      "914:  return 1;",
      "915: }",
      "917: yy46:",
      "918:  yych = *++YYCURSOR;",
      "919:  if (yych == '+') goto yy47;",
      "",
      "[Removed Lines]",
      "916: #line 917 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "930: #line 931 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "934:  yych = *++YYCURSOR;",
      "935:  if (yych != '\"') goto yy18;",
      "936:  ++YYCURSOR;",
      "938:  {",
      "939:  size_t len, maxlen;",
      "940:  char *str;",
      "",
      "[Removed Lines]",
      "937: #line 610 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "951: #line 615 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "967:  ZVAL_STRINGL(*rval, str, len, 1);",
      "968:  return 1;",
      "969: }",
      "971: yy53:",
      "972:  yych = *++YYCURSOR;",
      "973:  if (yych <= '/') {",
      "",
      "[Removed Lines]",
      "970: #line 971 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "984: #line 985 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1055:  }",
      "1056: yy63:",
      "1057:  ++YYCURSOR;",
      "1059:  {",
      "1060: #if SIZEOF_LONG == 4",
      "1061: use_double:",
      "",
      "[Removed Lines]",
      "1058: #line 600 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1072: #line 605 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1065:  ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));",
      "1066:  return 1;",
      "1067: }",
      "1069: yy65:",
      "1070:  yych = *++YYCURSOR;",
      "1071:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1068: #line 1069 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1082: #line 1083 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1124:  yych = *++YYCURSOR;",
      "1125:  if (yych != ';') goto yy18;",
      "1126:  ++YYCURSOR;",
      "1128:  {",
      "1130:  INIT_PZVAL(*rval);",
      "",
      "[Removed Lines]",
      "1127: #line 585 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1141: #line 590 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1140:  return 1;",
      "1141: }",
      "1143: yy76:",
      "1144:  yych = *++YYCURSOR;",
      "1145:  if (yych == 'N') goto yy73;",
      "",
      "[Removed Lines]",
      "1142: #line 1143 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1156: #line 1157 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1166:  if (yych <= '9') goto yy79;",
      "1167:  if (yych != ';') goto yy18;",
      "1168:  ++YYCURSOR;",
      "1170:  {",
      "1171: #if SIZEOF_LONG == 4",
      "1172:  int digits = YYCURSOR - start - 3;",
      "",
      "[Removed Lines]",
      "1169: #line 558 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1183: #line 563 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1193:  ZVAL_LONG(*rval, parse_iv(start + 2));",
      "1194:  return 1;",
      "1195: }",
      "1197: yy83:",
      "1198:  yych = *++YYCURSOR;",
      "1199:  if (yych <= '/') goto yy18;",
      "",
      "[Removed Lines]",
      "1196: #line 1197 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1210: #line 1211 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1201:  yych = *++YYCURSOR;",
      "1202:  if (yych != ';') goto yy18;",
      "1203:  ++YYCURSOR;",
      "1205:  {",
      "1207:  INIT_PZVAL(*rval);",
      "1208:  ZVAL_BOOL(*rval, parse_iv(start + 2));",
      "1209:  return 1;",
      "1210: }",
      "1212: yy87:",
      "1213:  ++YYCURSOR;",
      "1215:  {",
      "1217:  INIT_PZVAL(*rval);",
      "1218:  ZVAL_NULL(*rval);",
      "1219:  return 1;",
      "1220: }",
      "1222: yy89:",
      "1223:  yych = *++YYCURSOR;",
      "1224:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1204: #line 551 \"ext/standard/var_unserializer.re\"",
      "1211: #line 1212 \"ext/standard/var_unserializer.c\"",
      "1214: #line 544 \"ext/standard/var_unserializer.re\"",
      "1221: #line 1222 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1218: #line 556 \"ext/standard/var_unserializer.re\"",
      "1225: #line 1226 \"ext/standard/var_unserializer.c\"",
      "1228: #line 549 \"ext/standard/var_unserializer.re\"",
      "1235: #line 1236 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1241:  if (yych <= '9') goto yy91;",
      "1242:  if (yych != ';') goto yy18;",
      "1243:  ++YYCURSOR;",
      "1245:  {",
      "1246:  long id;",
      "",
      "[Removed Lines]",
      "1244: #line 521 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1258: #line 526 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1265:  return 1;",
      "1266: }",
      "1268: yy95:",
      "1269:  yych = *++YYCURSOR;",
      "1270:  if (yych <= ',') {",
      "",
      "[Removed Lines]",
      "1267: #line 1268 \"ext/standard/var_unserializer.c\"",
      "",
      "[Added Lines]",
      "1281: #line 1282 \"ext/standard/var_unserializer.c\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1287:  if (yych <= '9') goto yy97;",
      "1288:  if (yych != ';') goto yy18;",
      "1289:  ++YYCURSOR;",
      "1291:  {",
      "1292:  long id;",
      "",
      "[Removed Lines]",
      "1290: #line 500 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1304: #line 505 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1309:  return 1;",
      "1310: }",
      "1312: }",
      "1316:  return 0;",
      "",
      "[Removed Lines]",
      "1311: #line 1312 \"ext/standard/var_unserializer.c\"",
      "1313: #line 863 \"ext/standard/var_unserializer.re\"",
      "",
      "[Added Lines]",
      "1325: #line 1326 \"ext/standard/var_unserializer.c\"",
      "1327: #line 877 \"ext/standard/var_unserializer.re\"",
      "",
      "---------------"
    ],
    "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
      "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
      "--- Hunk 1 ---",
      "[Context before]",
      "409: {",
      "410:  long elements;",
      "412:  elements = parse_iv2((*p) + 2, p);",
      "414:  (*p) += 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "412:  if( *p >= max - 2) {",
      "413:   zend_error(E_WARNING, \"Bad unserialize data\");",
      "414:   return -1;",
      "415:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ce->name);",
      "423:  }",
      "425:  return elements;",
      "",
      "[Removed Lines]",
      "422:   return 0;",
      "",
      "[Added Lines]",
      "427:   return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "697: }",
      "699: \"o:\" iv \":\" [\"] {",
      "700:     if (!var_hash) return 0;",
      "702:  INIT_PZVAL(*rval);",
      "706: }",
      "708: object \":\" uiv \":\" [\"] {",
      "",
      "[Removed Lines]",
      "704:  return object_common2(UNSERIALIZE_PASSTHRU,",
      "705:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
      "",
      "[Added Lines]",
      "705:  long elements;",
      "710:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
      "711:  if (elements < 0) {",
      "712:   return 0;",
      "713:  }",
      "714:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "845:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
      "847:  if (incomplete_class) {",
      "848:   php_store_class_name(*rval, class_name, len2);",
      "849:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "856:  if (elements < 0) {",
      "857:     efree(class_name);",
      "858:     return 0;",
      "859:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6cba554544d9dc676d1cfa99447364c95768664",
      "candidate_info": {
        "commit_hash": "c6cba554544d9dc676d1cfa99447364c95768664",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c6cba554544d9dc676d1cfa99447364c95768664",
        "files": [
          "Zend/zend.c",
          "Zend/zend.h",
          "Zend/zend_API.c",
          "Zend/zend_builtin_functions.c",
          "Zend/zend_exceptions.c",
          "Zend/zend_execute.c",
          "Zend/zend_execute.h",
          "Zend/zend_execute_API.c",
          "Zend/zend_vm_def.h",
          "Zend/zend_vm_execute.h",
          "Zend/zend_vm_gen.php",
          "ext/ereg/ereg.c",
          "ext/pcre/php_pcre.c",
          "ext/standard/array.c",
          "ext/standard/proc_open.c",
          "ext/standard/string.c",
          "ext/standard/type.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Use ZVAL_DEREF() macro",
        "before_after_code_files": [
          "Zend/zend.c||Zend/zend.c",
          "Zend/zend.h||Zend/zend.h",
          "Zend/zend_API.c||Zend/zend_API.c",
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "Zend/zend_execute.c||Zend/zend_execute.c",
          "Zend/zend_execute.h||Zend/zend_execute.h",
          "Zend/zend_execute_API.c||Zend/zend_execute_API.c",
          "Zend/zend_vm_def.h||Zend/zend_vm_def.h",
          "Zend/zend_vm_gen.php||Zend/zend_vm_gen.php",
          "ext/ereg/ereg.c||ext/ereg/ereg.c",
          "ext/pcre/php_pcre.c||ext/pcre/php_pcre.c",
          "ext/standard/array.c||ext/standard/array.c",
          "ext/standard/proc_open.c||ext/standard/proc_open.c",
          "ext/standard/string.c||ext/standard/string.c",
          "ext/standard/type.c||ext/standard/type.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend.c||Zend/zend.c": [
          "File: Zend/zend.c -> Zend/zend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412: {",
          "416:  switch (Z_TYPE_P(expr)) {",
          "417:   case IS_ARRAY:",
          "418:    ZEND_PUTS_EX(\"Array\\n\");",
          "",
          "[Removed Lines]",
          "413:  if (Z_ISREF_P(expr)) {",
          "414:   expr = Z_REFVAL_P(expr);",
          "415:  }",
          "",
          "[Added Lines]",
          "413:  ZVAL_DEREF(expr);",
          "",
          "---------------"
        ],
        "Zend/zend.h||Zend/zend.h": [
          "File: Zend/zend.h -> Zend/zend.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:   zval_copy_ctor(__z1);       \\",
          "670:  } while (0)",
          "672: #define ZVAL_DUP_DEREF(z, v)       \\",
          "673:  do {            \\",
          "674:   zval *__z1 = (z);        \\",
          "675:   zval *__z2 = (v);        \\",
          "681:   zval_copy_ctor(__z1);       \\",
          "682:  } while (0)",
          "",
          "[Removed Lines]",
          "676:   if (Z_ISREF_P(__z2)) {       \\",
          "677:    ZVAL_COPY_VALUE(__z1, Z_REFVAL_P(__z2)); \\",
          "678:   } else {          \\",
          "679:    ZVAL_COPY_VALUE(__z1, __z2);    \\",
          "680:   }            \\",
          "",
          "[Added Lines]",
          "672: #define ZVAL_DEREF(z) do {        \\",
          "673:   if (UNEXPECTED(Z_ISREF_P(z))) {     \\",
          "674:    (z) = Z_REFVAL_P(z);      \\",
          "675:   }            \\",
          "676:  } while (0)",
          "680: #if 0",
          "681: #define ZVAL_DEREF_REF(z) do {       \\",
          "682:   ZEND_ASSERT(Z_ISREF_P(z));      \\",
          "683:   (z) = Z_REFVAL_P(z);       \\",
          "684:  } while (0)",
          "685: #else",
          "686: #define ZVAL_DEREF_REF(z)        \\",
          "687:  ZVAL_DEREF(z)",
          "688: #endif",
          "694:   ZVAL_DEREF(__z2);        \\",
          "695:   ZVAL_COPY_VALUE(__z1, __z2);     \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:   efree(ref);          \\",
          "692:  } while (0)",
          "701: #define INIT_PZVAL_COPY(z, v)       \\",
          "702:  do {            \\",
          "",
          "[Removed Lines]",
          "694: #define ZVAL_DEREF(z) do {        \\",
          "695:   if (Z_ISREF_P((z))) {       \\",
          "696:    (z) = Z_REFVAL_P((z));      \\",
          "697:   }            \\",
          "698:  } while (0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738:    if (Z_REFCOUNT_P(__zv) == 1) {    \\",
          "739:     ZVAL_UNREF(__zv);      \\",
          "740:    } else {         \\",
          "742:     Z_DELREF_P(__zv);      \\",
          "744:    }           \\",
          "745:   }            \\",
          "746:  } while (0)",
          "",
          "[Removed Lines]",
          "741:     zval *ref = Z_REFVAL_P(__zv);   \\",
          "743:     ZVAL_DUP(__zv, ref);     \\",
          "",
          "[Added Lines]",
          "751:     ZVAL_DUP(__zv, Z_REFVAL_P(__zv));  \\",
          "",
          "---------------"
        ],
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: {",
          "233:  return zend_get_type_by_const(Z_TYPE_P(arg));",
          "234: }",
          "",
          "[Removed Lines]",
          "230:  if (Z_ISREF_P(arg)) {",
          "231:   arg = Z_REFVAL_P(arg);",
          "232:  }",
          "",
          "[Added Lines]",
          "230:  ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   spec_walk++;",
          "361:  }",
          "367:  switch (c) {",
          "368:   case 'l':",
          "",
          "[Removed Lines]",
          "363:  if (Z_ISREF_P(arg)) {",
          "364:   arg = Z_REFVAL_P(arg);",
          "365:  }",
          "",
          "[Added Lines]",
          "361:  ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1117: {",
          "1123:  if (IS_CONSTANT_TYPE(Z_TYPE_P(pp))) {",
          "1124:   zend_class_entry **scope = EG(in_execution)?&EG(scope):&CG(active_class_entry);",
          "",
          "[Removed Lines]",
          "1120:  if (Z_ISREF_P(pp)) {",
          "1121:   pp = Z_REFVAL_P(pp);",
          "1122:  }",
          "",
          "[Added Lines]",
          "1114:  ZVAL_DEREF(pp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3226:       break;",
          "3227:      }",
          "3233:      if (Z_TYPE_P(method) != IS_STRING) {",
          "3234:       break;",
          "3235:      }",
          "3241:      if (Z_TYPE_P(obj) == IS_STRING) {",
          "3242:       if (callable_name) {",
          "3243:        char *ptr;",
          "",
          "[Removed Lines]",
          "3229:      if (UNEXPECTED(Z_ISREF_P(method))) {",
          "3230:       method = Z_REFVAL_P(method);",
          "3231:      }",
          "3237:      if (UNEXPECTED(Z_ISREF_P(obj))) {",
          "3238:       obj = Z_REFVAL_P(obj);",
          "3239:      }",
          "",
          "[Added Lines]",
          "3221:      ZVAL_DEREF(method);",
          "3226:      ZVAL_DEREF(obj);",
          "",
          "---------------"
        ],
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:   return;",
          "586:  }",
          "591:  target_hash = HASH_OF(array);",
          "592:  if (!target_hash) {",
          "593:   zend_error(E_WARNING,\"Variable passed to each() is not an array or object\");",
          "",
          "[Removed Lines]",
          "588:  if (Z_ISREF_P(array)) {",
          "589:   array = Z_REFVAL_P(array);",
          "590:  }",
          "",
          "[Added Lines]",
          "588:  ZVAL_DEREF_REF(array);",
          "",
          "---------------"
        ],
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:  switch (Z_TYPE_P(arg)) {",
          "382:   case IS_NULL:",
          "383:    TRACE_APPEND_STR(\"NULL, \");",
          "",
          "[Removed Lines]",
          "378:  if (Z_ISREF_P(arg)) {",
          "379:   arg = Z_REFVAL_P(arg);",
          "380:  }",
          "",
          "[Added Lines]",
          "378:  ZVAL_DEREF(arg);",
          "",
          "---------------"
        ],
        "Zend/zend_execute.c||Zend/zend_execute.c": [
          "File: Zend/zend_execute.c -> Zend/zend_execute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   ret = Z_INDIRECT_P(ret);",
          "199:  }",
          "200:  should_free->var = ret;",
          "204:  return ret;",
          "205: }",
          "",
          "[Removed Lines]",
          "201:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "202:   ret = Z_REFVAL_P(ret);",
          "203:  }",
          "",
          "[Added Lines]",
          "201:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "282:   return _get_zval_cv_lookup(ret, var, type TSRMLS_CC);",
          "283:  }",
          "287:  return ret;",
          "288: }",
          "",
          "[Removed Lines]",
          "284:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "285:   ret = Z_REFVAL_P(ret);",
          "286:  }",
          "",
          "[Added Lines]",
          "282:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "305:   return _get_zval_cv_lookup_BP_VAR_R(ret, var TSRMLS_CC);",
          "306:  }",
          "310:  return ret;",
          "311: }",
          "",
          "[Removed Lines]",
          "307:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "308:   ret = Z_REFVAL_P(ret);",
          "309:  }",
          "",
          "[Added Lines]",
          "303:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "328:   return _get_zval_cv_lookup_BP_VAR_UNSET(ret, var TSRMLS_CC);",
          "329:  }",
          "333:  return ret;",
          "334: }",
          "",
          "[Removed Lines]",
          "330:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "331:   ret = Z_REFVAL_P(ret);",
          "332:  }",
          "",
          "[Added Lines]",
          "324:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "350:  if (Z_TYPE_P(ret) == IS_UNDEF) {",
          "351:   return _get_zval_cv_lookup_BP_VAR_IS(ret, var TSRMLS_CC);",
          "352:  }",
          "356:  return ret;",
          "357: }",
          "",
          "[Removed Lines]",
          "353:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "354:   ret = Z_REFVAL_P(ret);",
          "355:  }",
          "",
          "[Added Lines]",
          "345:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "373:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "374:   return _get_zval_cv_lookup_BP_VAR_RW(ret, var TSRMLS_CC);",
          "375:  }",
          "379:  return ret;",
          "380: }",
          "",
          "[Removed Lines]",
          "376:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "377:   ret = Z_REFVAL_P(ret);",
          "378:  }",
          "",
          "[Added Lines]",
          "366:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:  if (Z_TYPE_P(ret) == IS_UNDEF) {",
          "397:   return _get_zval_cv_lookup_BP_VAR_W(ret, var TSRMLS_CC);",
          "398:  }",
          "402:  return ret;",
          "403: }",
          "",
          "[Removed Lines]",
          "399:  if (UNEXPECTED(Z_ISREF_P(ret))) {",
          "400:   ret = Z_REFVAL_P(ret);",
          "401:  }",
          "",
          "[Added Lines]",
          "387:  ZVAL_DEREF(ret);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "535: {",
          "536:  zval *object = object_ptr;",
          "541:  if (Z_TYPE_P(object) == IS_NULL",
          "542:   || (Z_TYPE_P(object) == IS_BOOL && Z_LVAL_P(object) == 0)",
          "543:   || (Z_TYPE_P(object) == IS_STRING && Z_STRLEN_P(object) == 0)",
          "",
          "[Removed Lines]",
          "538:  if (UNEXPECTED(Z_ISREF_P(object_ptr))) {",
          "539:   object = Z_REFVAL_P(object);",
          "540:  }",
          "",
          "[Added Lines]",
          "524:  ZVAL_DEREF(object);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "612:    need_msg = zend_verify_arg_class_kind(cur_arg_info, fetch_type, &class_name, &ce TSRMLS_CC);",
          "613:    return zend_verify_arg_error(E_RECOVERABLE_ERROR, zf, arg_num, need_msg, class_name, \"none\", \"\" TSRMLS_CC);",
          "614:   }",
          "618:   if (Z_TYPE_P(arg) == IS_OBJECT) {",
          "619:    need_msg = zend_verify_arg_class_kind(cur_arg_info, fetch_type, &class_name, &ce TSRMLS_CC);",
          "620:    if (!ce || !instanceof_function(Z_OBJCE_P(arg), ce TSRMLS_CC)) {",
          "",
          "[Removed Lines]",
          "615:   if (Z_ISREF_P(arg)) {",
          "616:    arg = Z_REFVAL_P(arg);",
          "617:   }",
          "",
          "[Added Lines]",
          "599:   ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "631:      return zend_verify_arg_error(E_RECOVERABLE_ERROR, zf, arg_num, \"be of the type array\", \"\", \"none\", \"\" TSRMLS_CC);",
          "632:     }",
          "637:     if (Z_TYPE_P(arg) != IS_ARRAY && (Z_TYPE_P(arg) != IS_NULL || !cur_arg_info->allow_null)) {",
          "638:      return zend_verify_arg_error(E_RECOVERABLE_ERROR, zf, arg_num, \"be of the type array\", \"\", zend_zval_type_name(arg), \"\" TSRMLS_CC);",
          "639:     }",
          "",
          "[Removed Lines]",
          "634:     if (Z_ISREF_P(arg)) {",
          "635:      arg = Z_REFVAL_P(arg);",
          "636:     }",
          "",
          "[Added Lines]",
          "616:     ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "662:   zval tmp;",
          "663:   zval *object = object_ptr;",
          "668:  if (Z_TYPE_P(object) != IS_OBJECT) {",
          "669:   if (object == &EG(error_zval)) {",
          "670:     if (retval) {",
          "",
          "[Removed Lines]",
          "665:   if (Z_ISREF_P(object)) {",
          "666:    object = Z_REFVAL_P(object);",
          "667:   }",
          "",
          "[Added Lines]",
          "645:   ZVAL_DEREF(object);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "711:  if (value_type == IS_TMP_VAR) {",
          "717:   value = &tmp;",
          "718:  } else if (value_type == IS_CONST) {",
          "722:   ZVAL_DUP(&tmp, value);",
          "723:  } else if (Z_REFCOUNTED_P(value)) {",
          "724:   Z_ADDREF_P(value);",
          "",
          "[Removed Lines]",
          "712:   if (UNEXPECTED(Z_ISREF_P(value))) {",
          "713:    ZVAL_COPY_VALUE(&tmp, Z_REFVAL_P(value));",
          "714:         } else {",
          "715:    ZVAL_COPY_VALUE(&tmp, value);",
          "716:         }",
          "719:   if (UNEXPECTED(Z_ISREF_P(value))) {",
          "720:    value = Z_REFVAL_P(value);",
          "721:   }",
          "",
          "[Added Lines]",
          "690:   ZVAL_DEREF(value);",
          "691:   ZVAL_COPY_VALUE(&tmp, value);",
          "694:   ZVAL_DEREF(value);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "800: static inline zval* zend_assign_tmp_to_variable(zval *variable_ptr, zval *value TSRMLS_DC)",
          "801: {",
          "806:  if (Z_TYPE_P(variable_ptr) == IS_OBJECT &&",
          "807:      UNEXPECTED(Z_OBJ_HANDLER_P(variable_ptr, set) != NULL)) {",
          "808:   Z_OBJ_HANDLER_P(variable_ptr, set)(variable_ptr, value TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "802:  if (Z_ISREF_P(variable_ptr)) {",
          "803:   variable_ptr = Z_REFVAL_P(variable_ptr);",
          "804:  }",
          "",
          "[Added Lines]",
          "775:  ZVAL_DEREF(variable_ptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "828: static inline zval* zend_assign_const_to_variable(zval *variable_ptr, zval *value TSRMLS_DC)",
          "829: {",
          "834:  if (Z_TYPE_P(variable_ptr) == IS_OBJECT &&",
          "835:      UNEXPECTED(Z_OBJ_HANDLER_P(variable_ptr, set) != NULL)) {",
          "836:   Z_OBJ_HANDLER_P(variable_ptr, set)(variable_ptr, value TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "830:  if (Z_ISREF_P(variable_ptr)) {",
          "831:   variable_ptr = Z_REFVAL_P(variable_ptr);",
          "832:  }",
          "",
          "[Added Lines]",
          "800:  ZVAL_DEREF(variable_ptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1082:     zval *retval;",
          "1083:     zval *container = container_ptr;",
          "1089:  switch (Z_TYPE_P(container)) {",
          "1090:   case IS_ARRAY:",
          "1091:    if (type != BP_VAR_UNSET) {",
          "",
          "[Removed Lines]",
          "1085:  if (Z_ISREF_P(container)) {",
          "1086:   container = Z_REFVAL_P(container);",
          "1087:  }",
          "",
          "[Added Lines]",
          "1052:  ZVAL_DEREF(container);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1245: {",
          "1246:  zval *retval;",
          "1251:  switch (Z_TYPE_P(container)) {",
          "1253:   case IS_ARRAY:",
          "",
          "[Removed Lines]",
          "1248:  if (UNEXPECTED(Z_ISREF_P(container))) {",
          "1249:   container = Z_REFVAL_P(container);",
          "1250:  }",
          "",
          "[Added Lines]",
          "1212:  ZVAL_DEREF(container);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1342: {",
          "1343:  zval *container = container_ptr;",
          "1349:  if (Z_TYPE_P(container) != IS_OBJECT) {",
          "1350:   if (container == &EG(error_zval)) {",
          "1351:    ZVAL_INDIRECT(result, &EG(error_zval));",
          "",
          "[Removed Lines]",
          "1345:  if (Z_ISREF_P(container)) {",
          "1346:   container = Z_REFVAL_P(container);",
          "1347:  }",
          "",
          "[Added Lines]",
          "1307:  ZVAL_DEREF(container);",
          "",
          "---------------"
        ],
        "Zend/zend_execute.h||Zend/zend_execute.h": [
          "File: Zend/zend_execute.h -> Zend/zend_execute.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:    ZEND_ASSERT(zval_ptr != &EG(uninitialized_zval));",
          "82:    _zval_dtor_func_for_ptr(Z_COUNTED_P(zval_ptr) ZEND_FILE_LINE_CC);",
          "83:   } else {",
          "90:    GC_ZVAL_CHECK_POSSIBLE_ROOT(zval_ptr);",
          "91:   }",
          "92:  }",
          "",
          "[Removed Lines]",
          "84:    if (Z_REFCOUNT_P(zval_ptr) == 1 && Z_ISREF_P(zval_ptr)) {",
          "89:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:   if (!Z_DELREF_P(zval_ptr)) {",
          "99:    ZEND_ASSERT(zval_ptr != &EG(uninitialized_zval));",
          "100:    _zval_dtor_func_for_ptr(Z_COUNTED_P(zval_ptr) ZEND_FILE_LINE_CC);",
          "108:   }",
          "109:  }",
          "110: }",
          "",
          "[Removed Lines]",
          "101:   } else {",
          "102:    if (Z_REFCOUNT_P(zval_ptr) == 1 && Z_ISREF_P(zval_ptr)) {",
          "107:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Zend/zend_execute_API.c||Zend/zend_execute_API.c": [
          "File: Zend/zend_execute_API.c -> Zend/zend_execute_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:   Z_DELREF_P(zval_ptr);",
          "458:   if (Z_REFCOUNT_P(zval_ptr) == 0) {",
          "459:    _zval_internal_dtor_for_ptr(zval_ptr ZEND_FILE_LINE_CC);",
          "466:   }",
          "467:  }",
          "468: }",
          "",
          "[Removed Lines]",
          "460:   } else if (Z_REFCOUNT_P(zval_ptr) == 1) {",
          "461:    if (Z_ISREF_P(zval_ptr)) {",
          "465:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Zend/zend_vm_def.h||Zend/zend_vm_def.h": [
          "File: Zend/zend_vm_def.h -> Zend/zend_vm_def.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:  if (UNEXPECTED(Z_TYPE_P(object) != IS_OBJECT)) {",
          "344:   make_real_object(object TSRMLS_CC);",
          "345:  }",
          "350:  value = get_zval_ptr((opline+1)->op1_type, &(opline+1)->op1, execute_data, &free_op_data1, BP_VAR_R);",
          "",
          "[Removed Lines]",
          "346:  if (UNEXPECTED(Z_ISREF_P(object))) {",
          "347:   object = Z_REFVAL_P(object);",
          "348:  }",
          "",
          "[Added Lines]",
          "346:  ZVAL_DEREF(object);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:   Z_OBJ_HANDLER_P(var_ptr, set)(var_ptr, objval TSRMLS_CC);",
          "503:   zval_ptr_dtor(objval);",
          "504:  } else {",
          "509:   binary_op(var_ptr, var_ptr, value TSRMLS_CC);",
          "510:  }",
          "",
          "[Removed Lines]",
          "506:      if (Z_ISREF_P(var_ptr)) {",
          "507:       var_ptr = Z_REFVAL_P(var_ptr);",
          "508:   }",
          "",
          "[Added Lines]",
          "503:      ZVAL_DEREF(var_ptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797:   ZEND_VM_NEXT_OPCODE();",
          "798:  }",
          "801:   var_ptr = Z_REFVAL_P(var_ptr);",
          "802:  } else {",
          "803:   SEPARATE_ZVAL(var_ptr);",
          "",
          "[Removed Lines]",
          "800:  if (Z_ISREF_P(var_ptr)) {",
          "",
          "[Added Lines]",
          "795:  if (UNEXPECTED(Z_ISREF_P(var_ptr))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "846:   ZEND_VM_NEXT_OPCODE();",
          "847:  }",
          "850:   var_ptr = Z_REFVAL_P(var_ptr);",
          "851:  } else {",
          "852:   SEPARATE_ZVAL(var_ptr);",
          "",
          "[Removed Lines]",
          "849:  if (Z_ISREF_P(var_ptr)) {",
          "",
          "[Added Lines]",
          "844:  if (UNEXPECTED(Z_ISREF_P(var_ptr))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "896:  retval = EX_VAR(opline->result.var);",
          "899:   var_ptr = Z_REFVAL_P(var_ptr);",
          "900:   ZVAL_DUP(retval, var_ptr);",
          "901:  } else {",
          "",
          "[Removed Lines]",
          "898:  if (Z_ISREF_P(var_ptr)) {",
          "",
          "[Added Lines]",
          "893:  if (UNEXPECTED(Z_ISREF_P(var_ptr))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "943:  retval = EX_VAR(opline->result.var);",
          "946:   var_ptr = Z_REFVAL_P(var_ptr);",
          "947:   ZVAL_DUP(retval, var_ptr);",
          "948:  } else {",
          "",
          "[Removed Lines]",
          "945:  if (Z_ISREF_P(var_ptr)) {",
          "",
          "[Added Lines]",
          "940:  if (UNEXPECTED(Z_ISREF_P(var_ptr))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "975:  zval *z;",
          "977:  SAVE_OPLINE();",
          "984:  zend_print_variable(z);",
          "",
          "[Removed Lines]",
          "978:  z = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "980:  if (UNEXPECTED(Z_ISREF_P(z))) {",
          "981:   z = Z_REFVAL_P(z);",
          "982:  }",
          "",
          "[Added Lines]",
          "973:  z = GET_OP1_ZVAL_PTR_DEREF(BP_VAR_R);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1364:  zval *offset;",
          "1366:  SAVE_OPLINE();",
          "1368:  offset  = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "1374:  if (UNEXPECTED(Z_TYPE_P(container) != IS_OBJECT) ||",
          "1375:      UNEXPECTED(Z_OBJ_HT_P(container)->read_property == NULL)) {",
          "1376:   zend_error(E_NOTICE, \"Trying to get property of non-object\");",
          "",
          "[Removed Lines]",
          "1367:  container = GET_OP1_OBJ_ZVAL_PTR(BP_VAR_R);",
          "1370:  if (UNEXPECTED(Z_ISREF_P(container))) {",
          "1371:   container = Z_REFVAL_P(container);",
          "1372:  }",
          "",
          "[Added Lines]",
          "1358:  container = GET_OP1_OBJ_ZVAL_PTR_DEREF(BP_VAR_R);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1686:  if (OP1_TYPE == IS_VAR && UNEXPECTED(Z_TYPE_P(object_ptr) == IS_STR_OFFSET)) {",
          "1687:   zend_error_noreturn(E_ERROR, \"Cannot use string offset as an array\");",
          "1688:  }",
          "1690:   object_ptr = Z_REFVAL_P(object_ptr);",
          "1691:  }",
          "1692:  if (Z_TYPE_P(object_ptr) == IS_OBJECT) {",
          "",
          "[Removed Lines]",
          "1689:  if (Z_ISREF_P(object_ptr) && Z_TYPE_P(Z_REFVAL_P(object_ptr)) == IS_OBJECT) {",
          "",
          "[Added Lines]",
          "1676:  if (UNEXPECTED(Z_ISREF_P(object_ptr)) && Z_TYPE_P(Z_REFVAL_P(object_ptr)) == IS_OBJECT) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2389:  }",
          "2391:  if (Z_TYPE_P(var) != IS_STRING) {",
          "2395:   if (Z_TYPE_P(var) != IS_STRING) {",
          "2396:    zend_make_printable_zval(var, &var_copy, &use_copy);",
          "",
          "[Removed Lines]",
          "2392:   if (Z_ISREF_P(var)) {",
          "2393:    var = Z_REFVAL_P(var);",
          "2394:   }",
          "",
          "[Added Lines]",
          "2379:   ZVAL_DEREF(var);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2477:   zend_error_noreturn(E_ERROR, \"Method name must be a string\");",
          "2478:  }",
          "2481:  if (Z_ISREF_P(object)) {",
          "2482:   ZVAL_COPY_VALUE(&call->object, Z_REFVAL_P(object));",
          "2483:  } else {",
          "2484:   ZVAL_COPY_VALUE(&call->object, object);",
          "2485:  }",
          "2487:  if (EXPECTED(Z_TYPE(call->object) != IS_UNDEF) &&",
          "2488:      EXPECTED(Z_TYPE(call->object) == IS_OBJECT)) {",
          "",
          "[Removed Lines]",
          "2480:  object = GET_OP1_OBJ_ZVAL_PTR(BP_VAR_R);",
          "",
          "[Added Lines]",
          "2465:  object = GET_OP1_OBJ_ZVAL_PTR_DEREF(BP_VAR_R);",
          "2466:  ZVAL_COPY_VALUE(&call->object, object);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2677:   SAVE_OPLINE();",
          "2678:   function_name_ptr = function_name = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "2683:   if (EXPECTED(Z_TYPE_P(function_name) == IS_STRING)) {",
          "2684:    if (Z_STRVAL_P(function_name)[0] == '\\\\') {",
          "2685:     lcname = STR_ALLOC(Z_STRLEN_P(function_name) - 1, 0);",
          "",
          "[Removed Lines]",
          "2679:   if (Z_ISREF_P(function_name)) {",
          "2680:    function_name = Z_REFVAL_P(function_name);",
          "2681:   }",
          "",
          "[Added Lines]",
          "2668:   ZVAL_DEREF(function_name);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3873:  zval *result = EX_VAR(opline->result.var);",
          "3875:  SAVE_OPLINE();",
          "3881:  if (opline->extended_value != IS_STRING) {",
          "3882:   ZVAL_COPY_VALUE(result, expr);",
          "3883:   if (!IS_OP1_TMP_FREE()) {",
          "",
          "[Removed Lines]",
          "3876:  expr = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "3878:  if (Z_ISREF_P(expr)) {",
          "3879:   expr = Z_REFVAL_P(expr);",
          "3880:  }",
          "",
          "[Added Lines]",
          "3861:  expr = GET_OP1_ZVAL_PTR_DEREF(BP_VAR_R);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4288:  if ((OP1_TYPE == IS_CV || OP1_TYPE == IS_VAR) &&",
          "4289:      (opline->extended_value & ZEND_FE_RESET_VARIABLE)) {",
          "4290:   array_ptr = array_ref = GET_OP1_ZVAL_PTR_PTR(BP_VAR_R);",
          "4295:   } else if (Z_TYPE_P(array_ptr) == IS_OBJECT) {",
          "4296:    if(Z_OBJ_HT_P(array_ptr)->get_class_entry == NULL) {",
          "4297:     zend_error(E_WARNING, \"foreach() cannot iterate over objects without PHP class\");",
          "",
          "[Removed Lines]",
          "4291:   if (Z_ISREF_P(array_ref)) {",
          "4292:    array_ptr = Z_REFVAL_P(array_ptr);",
          "4293:   }",
          "4294:   if (Z_TYPE_P(array_ptr) == IS_NULL) {",
          "",
          "[Added Lines]",
          "4272:   ZVAL_DEREF(array_ptr);",
          "4273:   if (Z_TYPE_P(array_ptr) == IS_ARRAY) {",
          "4274:    if (!Z_ISREF_P(array_ref)) {",
          "4275:     SEPARATE_ZVAL(array_ptr);",
          "4276:     array_ref = array_ptr;",
          "4277:     if (opline->extended_value & ZEND_FE_FETCH_BYREF) {",
          "4278:      ZVAL_NEW_REF(array_ptr, array_ptr);",
          "4279:      array_ref = array_ptr;",
          "4280:      array_ptr = Z_REFVAL_P(array_ptr);",
          "4281:     }",
          "4282:    }",
          "4283:    if (Z_REFCOUNTED_P(array_ref)) Z_ADDREF_P(array_ref);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4307:    }",
          "4308:    array_ref = array_ptr;",
          "4309:   } else {",
          "4321:    if (Z_REFCOUNTED_P(array_ref)) Z_ADDREF_P(array_ref);",
          "4322:   }",
          "4323:  } else {",
          "4324:   array_ptr = array_ref = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "4329:    zval tmp;",
          "",
          "[Removed Lines]",
          "4310:    if (Z_TYPE_P(array_ptr) == IS_ARRAY) {",
          "4311:     if (!Z_ISREF_P(array_ref)) {",
          "4312:      SEPARATE_ZVAL(array_ptr);",
          "4313:      array_ref = array_ptr;",
          "4314:      if (opline->extended_value & ZEND_FE_FETCH_BYREF) {",
          "4315:       ZVAL_NEW_REF(array_ptr, array_ptr);",
          "4316:       array_ref = array_ptr;",
          "4317:       array_ptr = Z_REFVAL_P(array_ptr);",
          "4318:      }",
          "4319:     }",
          "4320:    }",
          "4325:   if (Z_ISREF_P(array_ref)) {",
          "4326:    array_ptr = Z_REFVAL_P(array_ptr);",
          "4327:   }",
          "",
          "[Added Lines]",
          "4303:   ZVAL_DEREF(array_ptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4465:  zval *key = NULL;",
          "4467:  array = array_ref = EX_VAR(opline->op1.var);",
          "4471:  if (opline->extended_value & ZEND_FE_FETCH_WITH_KEY) {",
          "4472:   key = EX_VAR((opline+1)->result.var);",
          "4473:  }",
          "",
          "[Removed Lines]",
          "4468:  if (Z_ISREF_P(array)) {",
          "4469:   array = Z_REFVAL_P(array);",
          "4470:  }",
          "",
          "[Added Lines]",
          "4444:  ZVAL_DEREF(array);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4607:      (opline->extended_value & ZEND_QUICK_SET)) {",
          "4608:   if (Z_TYPE_P(EX_VAR_NUM(opline->op1.var)) != IS_UNDEF) {",
          "4609:    value = EX_VAR_NUM(opline->op1.var);",
          "4613:   } else {",
          "4614:    isset = 0;",
          "4615:   }",
          "",
          "[Removed Lines]",
          "4610:    if (Z_ISREF_P(value)) {",
          "4611:     value = Z_REFVAL_P(value);",
          "4612:    }",
          "",
          "[Added Lines]",
          "4584:    ZVAL_DEREF(value);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4687:  zval *offset;",
          "4689:  SAVE_OPLINE();",
          "4691:  offset = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "4696:  if (Z_TYPE_P(container) == IS_ARRAY && !prop_dim) {",
          "4697:   HashTable *ht;",
          "4698:   int isset = 0;",
          "",
          "[Removed Lines]",
          "4690:  container = GET_OP1_OBJ_ZVAL_PTR(BP_VAR_IS);",
          "4693:  if (Z_ISREF_P(container)) {",
          "4694:   container = Z_REFVAL_P(container);",
          "4695:  }",
          "",
          "[Added Lines]",
          "4662:  container = GET_OP1_OBJ_ZVAL_PTR_DEREF(BP_VAR_IS);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5120:  zend_bool result;",
          "5122:  SAVE_OPLINE();",
          "5128:  if (Z_TYPE_P(expr) == IS_OBJECT && Z_OBJ_HT_P(expr)->get_class_entry) {",
          "5129:   result = instanceof_function(Z_OBJCE_P(expr), Z_CE_P(EX_VAR(opline->op2.var)) TSRMLS_CC);",
          "5130:  } else {",
          "",
          "[Removed Lines]",
          "5123:  expr = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "5125:  if (Z_ISREF_P(expr)) {",
          "5126:   expr = Z_REFVAL_P(expr);",
          "5127:  }",
          "",
          "[Added Lines]",
          "5092:  expr = GET_OP1_ZVAL_PTR_DEREF(BP_VAR_R);",
          "",
          "---------------"
        ],
        "Zend/zend_vm_gen.php||Zend/zend_vm_gen.php": [
          "File: Zend/zend_vm_gen.php -> Zend/zend_vm_gen.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:  \"CV\"     => \"_get_zval_ptr_cv_\\\\1(execute_data, opline->op2.var TSRMLS_CC)\",",
          "190: );",
          "192: $op1_get_obj_zval_ptr_ptr = array(",
          "193:  \"ANY\"    => \"get_obj_zval_ptr_ptr(opline->op1_type, &opline->op1, execute_data, &free_op1, \\\\1)\",",
          "194:  \"TMP\"    => \"NULL\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: $op1_get_obj_zval_ptr_deref = array(",
          "193:  \"ANY\"    => \"get_obj_zval_ptr(opline->op1_type, &opline->op1, execute_data, &free_op1, \\\\1)\",",
          "194:  \"TMP\"    => \"_get_zval_ptr_tmp(opline->op1.var, execute_data, &free_op1 TSRMLS_CC)\",",
          "195:  \"VAR\"    => \"_get_zval_ptr_var_deref(opline->op1.var, execute_data, &free_op1 TSRMLS_CC)\",",
          "196:  \"CONST\"  => \"opline->op1.zv\",",
          "197:  \"UNUSED\" => \"_get_obj_zval_ptr_unused(TSRMLS_C)\",",
          "198:  \"CV\"     => \"_get_zval_ptr_cv_deref_\\\\1(execute_data, opline->op1.var TSRMLS_CC)\",",
          "199: );",
          "201: $op2_get_obj_zval_ptr_deref = array(",
          "202:  \"ANY\"    => \"get_obj_zval_ptr(opline->op2_type, &opline->op2, execute_data, &free_op2, \\\\1)\",",
          "203:  \"TMP\"    => \"_get_zval_ptr_tmp(opline->op2.var, execute_data, &free_op2 TSRMLS_CC)\",",
          "204:  \"VAR\"    => \"_get_zval_ptr_var_deref(opline->op2.var, execute_data, &free_op2 TSRMLS_CC)\",",
          "205:  \"CONST\"  => \"opline->op2.zv\",",
          "206:  \"UNUSED\" => \"_get_obj_zval_ptr_unused(TSRMLS_C)\",",
          "207:  \"CV\"     => \"_get_zval_ptr_cv_deref_\\\\1(execute_data, opline->op2.var TSRMLS_CC)\",",
          "208: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:   $op1_get_zval_ptr_deref, $op2_get_zval_ptr_deref,",
          "332:   $op1_get_zval_ptr_ptr, $op2_get_zval_ptr_ptr,",
          "333:   $op1_get_obj_zval_ptr, $op2_get_obj_zval_ptr,",
          "334:   $op1_get_obj_zval_ptr_ptr, $op2_get_obj_zval_ptr_ptr,",
          "335:   $op1_is_tmp_free, $op2_is_tmp_free, $op1_free, $op2_free,",
          "336:   $op1_free_op, $op2_free_op, $op1_free_op_if_var, $op2_free_op_if_var,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   $op1_get_obj_zval_ptr_deref, $op2_get_obj_zval_ptr_deref,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:    \"/GET_OP2_ZVAL_PTR_PTR\\(([^)]*)\\)/\",",
          "353:    \"/GET_OP1_OBJ_ZVAL_PTR\\(([^)]*)\\)/\",",
          "354:    \"/GET_OP2_OBJ_ZVAL_PTR\\(([^)]*)\\)/\",",
          "355:    \"/GET_OP1_OBJ_ZVAL_PTR_PTR\\(([^)]*)\\)/\",",
          "356:    \"/GET_OP2_OBJ_ZVAL_PTR_PTR\\(([^)]*)\\)/\",",
          "357:    \"/IS_OP1_TMP_FREE\\(\\)/\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:    \"/GET_OP1_OBJ_ZVAL_PTR_DEREF\\(([^)]*)\\)/\",",
          "375:    \"/GET_OP2_OBJ_ZVAL_PTR_DEREF\\(([^)]*)\\)/\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388:    $op2_get_zval_ptr_ptr[$op2],",
          "389:    $op1_get_obj_zval_ptr[$op1],",
          "390:    $op2_get_obj_zval_ptr[$op2],",
          "391:    $op1_get_obj_zval_ptr_ptr[$op1],",
          "392:    $op2_get_obj_zval_ptr_ptr[$op2],",
          "393:    $op1_is_tmp_free[$op1],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:    $op1_get_obj_zval_ptr_deref[$op1],",
          "413:    $op2_get_obj_zval_ptr_deref[$op2],",
          "",
          "---------------"
        ],
        "ext/ereg/ereg.c||ext/ereg/ereg.c": [
          "File: ext/ereg/ereg.c -> ext/ereg/ereg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:  }",
          "351:  match_len = 1;",
          "355:  }",
          "357:  if (array && err != REG_NOMATCH) {",
          "",
          "[Removed Lines]",
          "353:  if (array && Z_ISREF_P(array)) {",
          "354:   array = Z_REFVAL_P(array);",
          "",
          "[Added Lines]",
          "353:  if (array) {",
          "354:   ZVAL_DEREF_REF(array);",
          "",
          "---------------"
        ],
        "ext/pcre/php_pcre.c||ext/pcre/php_pcre.c": [
          "File: ext/pcre/php_pcre.c -> ext/pcre/php_pcre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:   RETURN_FALSE;",
          "540:  }",
          "544:  }",
          "545:  php_pcre_match_impl(pce, subject, subject_len, return_value, subpats,",
          "546:   global, ZEND_NUM_ARGS() >= 4, flags, start_offset TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "542:  if (subpats && Z_ISREF_P(subpats)) {",
          "543:   subpats = Z_REFVAL_P(subpats);",
          "",
          "[Added Lines]",
          "542:  if (subpats) {",
          "543:   ZVAL_DEREF_REF(subpats);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1392:   }",
          "1393:  }",
          "1394:  if (ZEND_NUM_ARGS() > 4) {",
          "1398:   zval_dtor(zcount);",
          "1399:   ZVAL_LONG(zcount, replace_count);",
          "1400:  }",
          "",
          "[Removed Lines]",
          "1395:   if (Z_ISREF_P(zcount)) {",
          "1396:    zcount = Z_REFVAL_P(zcount);",
          "1397:   }",
          "",
          "[Added Lines]",
          "1395:   ZVAL_DEREF_REF(zcount);",
          "",
          "---------------"
        ],
        "ext/standard/array.c||ext/standard/array.c": [
          "File: ext/standard/array.c -> ext/standard/array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     zend_hash_move_forward_ex(Z_ARRVAL_P(array), &pos)",
          "289:    ) {",
          "290:     Z_ARRVAL_P(array)->nApplyCount++;",
          "294:     cnt += php_count_recursive(element, COUNT_RECURSIVE TSRMLS_CC);",
          "295:     Z_ARRVAL_P(array)->nApplyCount--;",
          "296:    }",
          "",
          "[Removed Lines]",
          "291:     if (Z_ISREF_P(element)) {",
          "292:      element = Z_REFVAL_P(element);",
          "293:     }",
          "",
          "[Added Lines]",
          "291:     ZVAL_DEREF(element);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:  fval = &f->val;",
          "422:  sval = &s->val;",
          "432:  ZVAL_COPY_VALUE(&first, fval);",
          "433:  ZVAL_COPY_VALUE(&second, sval);",
          "",
          "[Removed Lines]",
          "424:  if (Z_ISREF_P(fval)) {",
          "425:   fval = Z_REFVAL_P(fval);",
          "426:  }",
          "428:  if (Z_ISREF_P(sval)) {",
          "429:   sval = Z_REFVAL_P(sval);",
          "430:  }",
          "",
          "[Added Lines]",
          "422:  ZVAL_DEREF(fval);",
          "423:  ZVAL_DEREF(sval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462: {",
          "1463:  zval *value_ptr, data;",
          "1468:  if (Z_TYPE_P(entry) == IS_STRING) {",
          "1469:   if ((value_ptr = zend_hash_find_ind(eg_active_symbol_table, Z_STR_P(entry))) != NULL) {",
          "1470:    ZVAL_DUP(&data, value_ptr);",
          "",
          "[Removed Lines]",
          "1465:  if (Z_ISREF_P(entry)) {",
          "1466:   entry = Z_REFVAL_P(entry);",
          "1467:  }",
          "",
          "[Added Lines]",
          "1457:  ZVAL_DEREF(entry);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1583:  zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(keys), &pos);",
          "1584:  while ((entry = zend_hash_get_current_data_ex(Z_ARRVAL_P(keys), &pos)) != NULL) {",
          "1590:   if (Z_TYPE_P(entry) == IS_LONG) {",
          "1591:    zval_add_ref(val);",
          "1592:    zend_hash_index_update(Z_ARRVAL_P(return_value), Z_LVAL_P(entry), val);",
          "",
          "[Removed Lines]",
          "1586:   if (UNEXPECTED(Z_ISREF_P(entry))) {",
          "1587:    entry = Z_REFVAL_P(entry);",
          "1588:   }",
          "",
          "[Added Lines]",
          "1575:   ZVAL_DEREF(entry);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2280:      HashTable *thash;",
          "2281:      zval tmp;",
          "2289:      thash = Z_TYPE_P(dest_zval) == IS_ARRAY ? Z_ARRVAL_P(dest_zval) : NULL;",
          "2290:      if ((thash && thash->nApplyCount > 1) || (src_entry == dest_entry && Z_ISREF_P(dest_entry) && (Z_REFCOUNT_P(dest_entry) % 2))) {",
          "2291:       php_error_docref(NULL TSRMLS_CC, E_WARNING, \"recursion detected\");",
          "",
          "[Removed Lines]",
          "2283:      if (Z_ISREF_P(src_zval)) {",
          "2284:       src_zval = Z_REFVAL_P(src_zval);",
          "2285:      }",
          "2286:      if (Z_ISREF_P(dest_zval)) {",
          "2287:       dest_zval = Z_REFVAL_P(dest_zval);",
          "2288:      }",
          "",
          "[Added Lines]",
          "2269:      ZVAL_DEREF(src_zval);",
          "2270:      ZVAL_DEREF(dest_zval);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2369:       zend_hash_move_forward_ex(src, &pos)) {",
          "2371:   src_zval = src_entry;",
          "2375:   switch (zend_hash_get_current_key_ex(src, &string_key, &num_key, 0, &pos)) {",
          "2376:    case HASH_KEY_IS_STRING:",
          "2377:     if (Z_TYPE_P(src_zval) != IS_ARRAY ||",
          "",
          "[Removed Lines]",
          "2372:   if (Z_ISREF_P(src_zval)) {",
          "2373:    src_zval = Z_REFVAL_P(src_zval);",
          "2374:   }",
          "",
          "[Added Lines]",
          "2354:   ZVAL_DEREF(src_zval);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2405:   }",
          "2407:   dest_zval = dest_entry;",
          "2411:   if (Z_ARRVAL_P(dest_zval)->nApplyCount > 1 ||",
          "2412:       Z_ARRVAL_P(src_zval)->nApplyCount > 1 ||",
          "2413:       (Z_ISREF_P(src_entry) && Z_ISREF_P(dest_entry) && Z_REF_P(src_entry) == Z_REF_P(dest_entry) && (Z_REFCOUNT_P(dest_entry) % 2))) {",
          "",
          "[Removed Lines]",
          "2408:   if (Z_ISREF_P(dest_zval)) {",
          "2409:    dest_zval = Z_REFVAL_P(dest_zval);",
          "2410:   }",
          "",
          "[Added Lines]",
          "2388:   ZVAL_DEREF(dest_zval);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2444:  for (i = 0; i < argc; i++) {",
          "2445:   zval *arg = args + i;",
          "2450:   if (Z_TYPE_P(arg) != IS_ARRAY) {",
          "2451:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Argument #%d is not an array\", i + 1);",
          "2452:    RETURN_NULL();",
          "",
          "[Removed Lines]",
          "2447:   if (Z_ISREF_P(arg)) {",
          "2448:    arg = Z_REFVAL_P(arg);",
          "2449:   }",
          "",
          "[Added Lines]",
          "2425:   ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2464:  for (i = 0; i < argc; i++) {",
          "2465:   zval *arg = args + i;",
          "2470:   if (!replace) {",
          "2471:    php_array_merge(Z_ARRVAL_P(return_value), Z_ARRVAL_P(arg), recursive TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2467:   if (Z_ISREF_P(arg)) {",
          "2468:    arg = Z_REFVAL_P(arg);",
          "2469:   }",
          "",
          "[Added Lines]",
          "2443:   ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3966:  for (i = 0; i < argc; i++) {",
          "3967:   zval *arg = &args[i];",
          "3972:   if (Z_TYPE_P(arg) == IS_ARRAY) {",
          "",
          "[Removed Lines]",
          "3969:   if (Z_ISREF_P(arg)) {",
          "3970:    arg = Z_REFVAL_P(arg);",
          "3971:   }",
          "",
          "[Added Lines]",
          "3943:   ZVAL_DEREF(arg);",
          "",
          "---------------"
        ],
        "ext/standard/proc_open.c||ext/standard/proc_open.c": [
          "File: ext/standard/proc_open.c -> ext/standard/proc_open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:  proc->env = env;",
          "899:  if (pipes != NULL) {",
          "902:   zval_dtor(pipes);",
          "903:  }",
          "",
          "[Removed Lines]",
          "900:   ZEND_ASSERT(Z_ISREF_P(pipes));",
          "901:   pipes = Z_REFVAL_P(pipes);",
          "",
          "[Added Lines]",
          "900:   ZVAL_DEREF_REF(pipes);",
          "",
          "---------------"
        ],
        "ext/standard/string.c||ext/standard/string.c": [
          "File: ext/standard/string.c -> ext/standard/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:      zval *repl_str;",
          "2503:      zval zrepl;",
          "2509:      if (Z_TYPE_P(tmp_repl) != IS_STRING) {",
          "2510:       ZVAL_DUP(&zrepl, tmp_repl);",
          "2511:       convert_to_string(&zrepl);",
          "",
          "[Removed Lines]",
          "2505:      if (Z_ISREF_P(tmp_repl)) {",
          "2506:       tmp_repl = Z_REFVAL_P(tmp_repl);",
          "2507:      }",
          "",
          "[Added Lines]",
          "2505:      ZVAL_DEREF(tmp_repl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4428:   array_init(&ret);",
          "4429:   sapi_module.treat_data(PARSE_STRING, res, &ret TSRMLS_CC);",
          "4434:   zval_dtor(arrayArg);",
          "4435:   ZVAL_COPY_VALUE(arrayArg, &ret);",
          "4436:  }",
          "",
          "[Removed Lines]",
          "4431:   if (Z_ISREF_P(arrayArg)) {",
          "4432:    arrayArg = Z_REFVAL_P(arrayArg);",
          "4433:   }",
          "",
          "[Added Lines]",
          "4428:   ZVAL_DEREF(arrayArg);",
          "",
          "---------------"
        ],
        "ext/standard/type.c||ext/standard/type.c": [
          "File: ext/standard/type.c -> ext/standard/type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   return;",
          "99:  }",
          "105:  if (!strcasecmp(type, \"integer\")) {",
          "106:   convert_to_long(var);",
          "107:  } else if (!strcasecmp(type, \"int\")) {",
          "",
          "[Removed Lines]",
          "101:  if (Z_TYPE_P(var)) {",
          "102:   var = Z_REFVAL_P(var);",
          "103:  }",
          "",
          "[Added Lines]",
          "101:  ZVAL_DEREF_REF(var);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   RETURN_FALSE;",
          "225:  }",
          "230:  if (Z_TYPE_P(arg) == type) {",
          "231:   if (type == IS_OBJECT) {",
          "232:    zend_class_entry *ce;",
          "",
          "[Removed Lines]",
          "227:  if (Z_ISREF_P(arg)) {",
          "228:   arg = Z_REFVAL_P(arg);",
          "229:  }",
          "",
          "[Added Lines]",
          "224:  ZVAL_DEREF(arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:   check_flags |= IS_CALLABLE_CHECK_SYNTAX_ONLY;",
          "393:  }",
          "394:  if (ZEND_NUM_ARGS() > 2) {",
          "397:   }",
          "398:   retval = zend_is_callable_ex(var, NULL, check_flags, &name, NULL, &error TSRMLS_CC);",
          "399:   zval_dtor(callable_name);",
          "",
          "[Removed Lines]",
          "395:   if (callable_name && Z_ISREF_P(callable_name)) {",
          "396:    callable_name = Z_REFVAL_P(callable_name);",
          "",
          "[Added Lines]",
          "390:   if (callable_name) {",
          "391:    ZVAL_DEREF(callable_name);",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:   return 0;",
          "399:  }",
          "405:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "406:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "407:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "",
          "[Removed Lines]",
          "401:  if (Z_ISREF_P(rval)) {",
          "402:   rval = Z_REFVAL_P(rval);",
          "403:  }",
          "",
          "[Added Lines]",
          "401:  ZVAL_DEREF(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:  start = cursor;",
          "446: {",
          "447:  YYCTYPE yych;",
          "448:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "445: #line 446 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "442: #line 443 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:  yych = *(YYMARKER = ++YYCURSOR);",
          "503:  if (yych == ':') goto yy95;",
          "504: yy3:",
          "506:  { return 0; }",
          "508: yy4:",
          "509:  yych = *(YYMARKER = ++YYCURSOR);",
          "510:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "505: #line 792 \"ext/standard/var_unserializer.re\"",
          "507: #line 508 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "502: #line 789 \"ext/standard/var_unserializer.re\"",
          "504: #line 505 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "547:  goto yy3;",
          "548: yy14:",
          "549:  ++YYCURSOR;",
          "551:  {",
          "553:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "555: }",
          "557: yy16:",
          "558:  yych = *++YYCURSOR;",
          "559:  goto yy3;",
          "",
          "[Removed Lines]",
          "550: #line 786 \"ext/standard/var_unserializer.re\"",
          "556: #line 557 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "547: #line 783 \"ext/standard/var_unserializer.re\"",
          "553: #line 554 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:  yych = *++YYCURSOR;",
          "584:  if (yych != '\"') goto yy18;",
          "585:  ++YYCURSOR;",
          "587:  {",
          "588:  size_t len, len2, len3, maxlen;",
          "589:  long elements;",
          "",
          "[Removed Lines]",
          "586: #line 647 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "583: #line 644 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "723:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "724: }",
          "726: yy25:",
          "727:  yych = *++YYCURSOR;",
          "728:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "725: #line 726 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "722: #line 723 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "747:  yych = *++YYCURSOR;",
          "748:  if (yych != '\"') goto yy18;",
          "749:  ++YYCURSOR;",
          "751:  {",
          "",
          "[Removed Lines]",
          "750: #line 639 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "747: #line 636 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "755:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "756:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "757: }",
          "759: yy32:",
          "760:  yych = *++YYCURSOR;",
          "761:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "758: #line 759 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "755: #line 756 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "776:  yych = *++YYCURSOR;",
          "777:  if (yych != '{') goto yy18;",
          "778:  ++YYCURSOR;",
          "780:  {",
          "781:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "779: #line 618 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "776: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "798:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "799: }",
          "801: yy39:",
          "802:  yych = *++YYCURSOR;",
          "803:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "800: #line 801 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "797: #line 798 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "818:  yych = *++YYCURSOR;",
          "819:  if (yych != '\"') goto yy18;",
          "820:  ++YYCURSOR;",
          "822:  {",
          "823:  size_t len, maxlen;",
          "",
          "[Removed Lines]",
          "821: #line 588 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "818: #line 585 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "848:  efree(str);",
          "849:  return 1;",
          "850: }",
          "852: yy46:",
          "853:  yych = *++YYCURSOR;",
          "854:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "851: #line 852 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "848: #line 849 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "869:  yych = *++YYCURSOR;",
          "870:  if (yych != '\"') goto yy18;",
          "871:  ++YYCURSOR;",
          "873:  {",
          "874:  size_t len, maxlen;",
          "875:  char *str;",
          "",
          "[Removed Lines]",
          "872: #line 561 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "869: #line 558 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "896:  ZVAL_STRINGL(rval, str, len);",
          "897:  return 1;",
          "898: }",
          "900: yy53:",
          "901:  yych = *++YYCURSOR;",
          "902:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "899: #line 900 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "896: #line 897 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "984:  }",
          "985: yy63:",
          "986:  ++YYCURSOR;",
          "988:  {",
          "989: #if SIZEOF_LONG == 4",
          "990: use_double:",
          "",
          "[Removed Lines]",
          "987: #line 552 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "984: #line 549 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "993:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "994:  return 1;",
          "995: }",
          "997: yy65:",
          "998:  yych = *++YYCURSOR;",
          "999:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "996: #line 997 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "993: #line 994 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1052:  yych = *++YYCURSOR;",
          "1053:  if (yych != ';') goto yy18;",
          "1054:  ++YYCURSOR;",
          "1056:  {",
          "",
          "[Removed Lines]",
          "1055: #line 536 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1052: #line 533 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1069:  return 1;",
          "1070: }",
          "1072: yy76:",
          "1073:  yych = *++YYCURSOR;",
          "1074:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1071: #line 1072 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1068: #line 1069 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1095:  if (yych <= '9') goto yy79;",
          "1096:  if (yych != ';') goto yy18;",
          "1097:  ++YYCURSOR;",
          "1099:  {",
          "1100: #if SIZEOF_LONG == 4",
          "1101:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1098: #line 510 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1095: #line 507 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1121:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1122:  return 1;",
          "1123: }",
          "1125: yy83:",
          "1126:  yych = *++YYCURSOR;",
          "1127:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1124: #line 1125 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1121: #line 1122 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1129:  yych = *++YYCURSOR;",
          "1130:  if (yych != ';') goto yy18;",
          "1131:  ++YYCURSOR;",
          "1133:  {",
          "1135:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1136:  return 1;",
          "1137: }",
          "1139: yy87:",
          "1140:  ++YYCURSOR;",
          "1142:  {",
          "1144:  ZVAL_NULL(rval);",
          "1145:  return 1;",
          "1146: }",
          "1148: yy89:",
          "1149:  yych = *++YYCURSOR;",
          "1150:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1132: #line 504 \"ext/standard/var_unserializer.re\"",
          "1138: #line 1139 \"ext/standard/var_unserializer.c\"",
          "1141: #line 498 \"ext/standard/var_unserializer.re\"",
          "1147: #line 1148 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1129: #line 501 \"ext/standard/var_unserializer.re\"",
          "1135: #line 1136 \"ext/standard/var_unserializer.c\"",
          "1138: #line 495 \"ext/standard/var_unserializer.re\"",
          "1144: #line 1145 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1167:  if (yych <= '9') goto yy91;",
          "1168:  if (yych != ';') goto yy18;",
          "1169:  ++YYCURSOR;",
          "1171:  {",
          "1172:  long id;",
          "",
          "[Removed Lines]",
          "1170: #line 475 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1167: #line 472 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1191:  return 1;",
          "1192: }",
          "1194: yy95:",
          "1195:  yych = *++YYCURSOR;",
          "1196:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1193: #line 1194 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1190: #line 1191 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1213:  if (yych <= '9') goto yy97;",
          "1214:  if (yych != ';') goto yy18;",
          "1215:  ++YYCURSOR;",
          "1217:  {",
          "1218:  long id;",
          "",
          "[Removed Lines]",
          "1216: #line 450 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1213: #line 447 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1239:  return 1;",
          "1240: }",
          "1242: }",
          "1246:  return 0;",
          "",
          "[Removed Lines]",
          "1241: #line 1242 \"ext/standard/var_unserializer.c\"",
          "1243: #line 794 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1238: #line 1239 \"ext/standard/var_unserializer.c\"",
          "1240: #line 791 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:   return 0;",
          "403:  }",
          "409:  if (Z_OBJCE_P(rval) != PHP_IC_ENTRY &&",
          "410:   zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1)) {",
          "411:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "",
          "[Removed Lines]",
          "405:  if (Z_ISREF_P(rval)) {",
          "406:   rval = Z_REFVAL_P(rval);",
          "407:  }",
          "",
          "[Added Lines]",
          "405:  ZVAL_DEREF(rval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
      "candidate_info": {
        "commit_hash": "887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/887189ca31eeac5f1f7dbcaf54405de0dc432f2d",
        "files": [
          "Zend/zend.c",
          "Zend/zend_API.c",
          "Zend/zend_API.h",
          "Zend/zend_builtin_functions.c",
          "Zend/zend_execute.c",
          "Zend/zend_execute_API.c",
          "Zend/zend_gc.c",
          "Zend/zend_hash.c",
          "Zend/zend_hash.h",
          "Zend/zend_object_handlers.c",
          "Zend/zend_objects.c",
          "Zend/zend_variables.c",
          "Zend/zend_vm_def.h",
          "Zend/zend_vm_execute.h",
          "ext/reflection/php_reflection.c",
          "ext/spl/spl_array.c",
          "ext/standard/array.c",
          "ext/standard/basic_functions.c",
          "ext/standard/http.c",
          "ext/standard/http_fopen_wrapper.c",
          "ext/standard/var.c",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "main/main.c",
          "main/php_variables.c"
        ],
        "message": "Refactored IS_INDIRECT usage for CV and object properties to support HashTable resizing",
        "before_after_code_files": [
          "Zend/zend.c||Zend/zend.c",
          "Zend/zend_API.c||Zend/zend_API.c",
          "Zend/zend_API.h||Zend/zend_API.h",
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "Zend/zend_execute.c||Zend/zend_execute.c",
          "Zend/zend_execute_API.c||Zend/zend_execute_API.c",
          "Zend/zend_gc.c||Zend/zend_gc.c",
          "Zend/zend_hash.c||Zend/zend_hash.c",
          "Zend/zend_hash.h||Zend/zend_hash.h",
          "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c",
          "Zend/zend_objects.c||Zend/zend_objects.c",
          "Zend/zend_variables.c||Zend/zend_variables.c",
          "Zend/zend_vm_def.h||Zend/zend_vm_def.h",
          "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/standard/array.c||ext/standard/array.c",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/standard/http.c||ext/standard/http.c",
          "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c",
          "ext/standard/var.c||ext/standard/var.c",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "main/main.c||main/main.c",
          "main/php_variables.c||main/php_variables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend.c||Zend/zend.c": [
          "File: Zend/zend.c -> Zend/zend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  indent += PRINT_ZVAL_INDENT;",
          "145:  zend_hash_internal_pointer_reset_ex(ht, &iterator);",
          "146:  while ((tmp = zend_hash_get_current_data_ex(ht, &iterator)) != NULL) {",
          "147:   for (i = 0; i < indent; i++) {",
          "148:    ZEND_PUTS_EX(\" \");",
          "149:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   if (Z_TYPE_P(tmp) == IS_INDIRECT) {",
          "148:    tmp = Z_INDIRECT_P(tmp);",
          "149:    if (Z_TYPE_P(tmp) == IS_UNDEF) {",
          "150:     zend_hash_move_forward_ex(ht, &iterator);",
          "151:     continue;",
          "152:    }",
          "153:   }",
          "",
          "---------------"
        ],
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234: {",
          "1235:  object->properties = properties;",
          "1236:  if (object->ce->default_properties_count) {",
          "1237:   HashPosition pos;",
          "1238:      zval *prop, tmp;",
          "1239:      zend_string *key;",
          "1240:      ulong num_key;",
          "1241:      zend_property_info *property_info;",
          "1243:   for (zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1244:        (prop = zend_hash_get_current_data_ex(properties, &pos)) != NULL &&",
          "1245:        zend_hash_get_current_key_ex(properties, &key, &num_key, 0, &pos) == HASH_KEY_IS_STRING;",
          "1246:        zend_hash_move_forward_ex(properties, &pos)) {",
          "1248:       ZVAL_STR(&tmp, key);",
          "1249:    property_info = zend_get_property_info(object->ce, &tmp, 1 TSRMLS_CC);",
          "1250:    if (property_info &&",
          "1251:        (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "1252:        property_info->offset >= 0) {",
          "1253:     ZVAL_COPY_VALUE(&object->properties_table[property_info->offset], prop);",
          "1254:     ZVAL_INDIRECT(prop, &object->properties_table[property_info->offset]);",
          "1255:    }",
          "1256:   }",
          "1257:  }",
          "1258: }",
          "1262: {",
          "1263:  HashPosition pos;",
          "1264:     zval *prop, tmp;",
          "1265:     zend_string *key;",
          "1266:     ulong num_key;",
          "1267:     zend_property_info *property_info;",
          "1269:  for (zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1270:       (prop = zend_hash_get_current_data_ex(properties, &pos)) != NULL &&",
          "1271:       zend_hash_get_current_key_ex(properties, &key, &num_key, 0, &pos) == HASH_KEY_IS_STRING;",
          "1272:       zend_hash_move_forward_ex(properties, &pos)) {",
          "1274:      ZVAL_STR(&tmp, key);",
          "1275:   property_info = zend_get_property_info(object->ce, &tmp, 1 TSRMLS_CC);",
          "1276:   if (property_info &&",
          "1277:       (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "1278:       property_info->offset >= 0) {",
          "1279:       zval_ptr_dtor(&object->properties_table[property_info->offset]);",
          "1280:    ZVAL_COPY_VALUE(&object->properties_table[property_info->offset], prop);",
          "1281:    zval_add_ref(&object->properties_table[property_info->offset]);",
          "1282:    if (object->properties) {",
          "1283:     ZVAL_INDIRECT(&tmp, &object->properties_table[property_info->offset]);",
          "1284:     prop = zend_hash_update(object->properties, key, &tmp);",
          "1285:    }",
          "1286:   } else {",
          "1287:    if (!object->properties) {",
          "1288:     rebuild_object_properties(object);",
          "1289:    }",
          "1290:    prop = zend_hash_update(object->properties, key, prop);",
          "1291:    zval_add_ref(prop);",
          "1292:   }",
          "1293:  }",
          "1294: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:  if (class_type->create_object == NULL) {",
          "1249:   ZVAL_OBJ(arg, zend_objects_new(class_type TSRMLS_CC));",
          "1250:   if (properties) {",
          "1253:   } else {",
          "1254:    object_properties_init(Z_OBJ_P(arg), class_type);",
          "1255:   }",
          "",
          "[Removed Lines]",
          "1251:    Z_OBJ_P(arg)->properties = properties;",
          "",
          "[Added Lines]",
          "1315:    object_properties_init_ex(Z_OBJ_P(arg), properties);",
          "",
          "---------------"
        ],
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366: ZEND_API int _object_init_ex(zval *arg, zend_class_entry *ce ZEND_FILE_LINE_DC TSRMLS_DC);",
          "367: ZEND_API int _object_and_properties_init(zval *arg, zend_class_entry *ce, HashTable *properties ZEND_FILE_LINE_DC TSRMLS_DC);",
          "368: ZEND_API void object_properties_init(zend_object *object, zend_class_entry *class_type);",
          "370: ZEND_API void zend_merge_properties(zval *obj, HashTable *properties, int destroy_ht TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: ZEND_API void object_properties_init_ex(zend_object *object, HashTable *properties);",
          "370: ZEND_API void object_properties_load(zend_object *object, HashTable *properties);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516: ZEND_API int zend_set_hash_symbol(zval *symbol, const char *name, int name_length, zend_bool is_ref, int num_symbol_tables, ...);",
          "520: ZEND_API int zend_delete_global_variable(zend_string *name TSRMLS_DC);",
          "524: ZEND_API void zend_rebuild_symbol_table(TSRMLS_D);",
          "526: ZEND_API zend_string *zend_find_alias_name(zend_class_entry *ce, zend_string *name);",
          "527: ZEND_API zend_string *zend_resolve_method_name(zend_class_entry *ce, zend_function *f);",
          "",
          "[Removed Lines]",
          "518: ZEND_API void zend_delete_variable(zend_execute_data *ex, HashTable *ht, zend_string *name TSRMLS_DC);",
          "522: ZEND_API void zend_reset_all_cv(zend_array *symbol_table TSRMLS_DC);",
          "",
          "[Added Lines]",
          "523: ZEND_API void zend_attach_symbol_table(TSRMLS_D);",
          "524: ZEND_API void zend_detach_symbol_table(TSRMLS_D);",
          "525: ZEND_API int zend_set_local_var(const char *name, int len, zval *value, int force TSRMLS_DC);",
          "",
          "---------------"
        ],
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:   zend_error(E_WARNING,\"Variable passed to each() is not an array or object\");",
          "594:   return;",
          "595:  }",
          "599:  }",
          "600:  array_init(return_value);",
          "",
          "[Removed Lines]",
          "596:  entry = zend_hash_get_current_data(target_hash);",
          "597:  if (!entry) {",
          "598:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "596:  while (1) {",
          "597:   entry = zend_hash_get_current_data(target_hash);",
          "598:   if (!entry) {",
          "599:    RETURN_FALSE;",
          "600:   } else if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "601:    entry = Z_INDIRECT_P(entry);",
          "602:    if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "603:     zend_hash_move_forward(target_hash);",
          "604:     continue;",
          "605:    }",
          "606:   }",
          "607:   break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:  zend_hash_internal_pointer_reset_ex(properties, &pos);",
          "1001:  while ((value = zend_hash_get_current_data_ex(properties, &pos)) != NULL) {",
          "1002:   if (zend_hash_get_current_key_ex(properties, &key, &num_index, 0, &pos) == HASH_KEY_IS_STRING) {",
          "1003:    if (zend_check_property_access(zobj, key TSRMLS_CC) == SUCCESS) {",
          "1004:     zend_unmangle_property_name_ex(key->val, key->len, &class_name, &prop_name, (int*) &prop_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:   if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "1012:    value = Z_INDIRECT_P(value);",
          "1013:    if (Z_TYPE_P(value) == IS_UNDEF) {",
          "1014:     zend_hash_move_forward_ex(properties, &pos);",
          "1015:     continue;",
          "1016:    }",
          "1017:   }",
          "",
          "---------------"
        ],
        "Zend/zend_execute.c||Zend/zend_execute.c": [
          "File: Zend/zend_execute.c -> Zend/zend_execute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: static zend_never_inline zval *_get_zval_cv_lookup(zval *ptr, zend_uint var, int type TSRMLS_DC)",
          "208: {",
          "220:  switch (type) {",
          "221:   case BP_VAR_R:",
          "222:   case BP_VAR_UNSET:",
          "223:    zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "225:   case BP_VAR_IS:",
          "227:   case BP_VAR_RW:",
          "228:    zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "230:   case BP_VAR_W:",
          "238:    break;",
          "239:  }",
          "241: }",
          "243: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_R(zval *ptr, zend_uint var TSRMLS_DC)",
          "244: {",
          "245:  zend_string *cv = CV_DEF_OF(var);",
          "256:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "257:  return &EG(uninitialized_zval);",
          "",
          "[Removed Lines]",
          "209:  zend_string *cv = CV_DEF_OF(var);",
          "210:  zval *ret = NULL;",
          "212:  if (EG(active_symbol_table)) {",
          "213:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "214:   if (ret) {",
          "215:    ZVAL_INDIRECT(ptr, ret);",
          "216:    return ret;",
          "217:   }",
          "218:  }",
          "226:    return &EG(uninitialized_zval);",
          "231:    if (EG(active_symbol_table)) {",
          "232:     ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, ret);",
          "233:     ZVAL_INDIRECT(ptr, ret);",
          "234:    } else {",
          "235:     ZVAL_NULL(ptr);",
          "236:     ret = ptr;",
          "237:    }",
          "240:  return ret;",
          "246:  zval *ret = NULL;",
          "248:  if (EG(active_symbol_table)) {",
          "249:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "250:   if (ret) {",
          "251:    ZVAL_INDIRECT(ptr, ret);",
          "252:    return ret;",
          "253:   }",
          "254:  }",
          "",
          "[Added Lines]",
          "209:  zend_string *cv;",
          "214:    cv = CV_DEF_OF(var);",
          "218:    ptr = &EG(uninitialized_zval);",
          "219:    break;",
          "221:    cv = CV_DEF_OF(var);",
          "225:    ZVAL_NULL(ptr);",
          "228:  return ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_UNSET(zval *ptr, zend_uint var TSRMLS_DC)",
          "261: {",
          "262:  zend_string *cv = CV_DEF_OF(var);",
          "273:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "274:  return &EG(uninitialized_zval);",
          "",
          "[Removed Lines]",
          "263:  zval *ret;",
          "265:  if (EG(active_symbol_table)) {",
          "266:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "267:   if (ret) {",
          "268:    ZVAL_INDIRECT(ptr, ret);",
          "269:    return ret;",
          "270:   }",
          "271:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_IS(zval *ptr, zend_uint var TSRMLS_DC)",
          "278: {",
          "290:  return &EG(uninitialized_zval);",
          "291: }",
          "293: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_RW(zval *ptr, zend_uint var TSRMLS_DC)",
          "294: {",
          "295:  zend_string *cv = CV_DEF_OF(var);",
          "313: }",
          "315: static zend_never_inline zval *_get_zval_cv_lookup_BP_VAR_W(zval *ptr, zend_uint var TSRMLS_DC)",
          "316: {",
          "333: }",
          "335: static zend_always_inline zval *_get_zval_ptr_cv(zend_uint var, int type TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "279:  zend_string *cv = CV_DEF_OF(var);",
          "280:  zval *ret;",
          "282:  if (EG(active_symbol_table)) {",
          "283:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "284:   if (ret) {",
          "285:    ZVAL_INDIRECT(ptr, ret);",
          "286:    return ret;",
          "287:   }",
          "288:  }",
          "296:  zval *ret;",
          "298:  if (EG(active_symbol_table)) {",
          "299:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "300:   if (ret) {",
          "301:    ZVAL_INDIRECT(ptr, ret);",
          "302:    return ret;",
          "303:   }",
          "304:   ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, &EG(uninitialized_zval));",
          "305:   ZVAL_INDIRECT(ptr, ret);",
          "306:   zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "307:   return ret;",
          "308:  } else {",
          "309:   ZVAL_NULL(ptr);",
          "310:   zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "311:   return ptr;",
          "312:  }",
          "317:  zend_string *cv = CV_DEF_OF(var);",
          "318:  zval *ret;",
          "320:  if (EG(active_symbol_table)) {",
          "321:   ret = zend_hash_find(&EG(active_symbol_table)->ht, cv);",
          "322:   if (ret) {",
          "323:    ZVAL_INDIRECT(ptr, ret);",
          "324:    return ret;",
          "325:   }",
          "326:   ret = zend_hash_update(&EG(active_symbol_table)->ht, cv, &EG(uninitialized_zval));",
          "327:   ZVAL_INDIRECT(ptr, ret);",
          "328:   return ret;",
          "329:  } else {",
          "330:   ZVAL_NULL(ptr);",
          "331:   return ptr;",
          "332:  }",
          "",
          "[Added Lines]",
          "256:  ZVAL_NULL(ptr);",
          "257:  zend_error(E_NOTICE, \"Undefined variable: %s\", cv->val);",
          "258:  return ptr;",
          "263:  ZVAL_NULL(ptr);",
          "264:  return ptr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "340:   return _get_zval_cv_lookup(ret, var, type TSRMLS_CC);",
          "343:  }",
          "344:  return ret;",
          "345: }",
          "",
          "[Removed Lines]",
          "341:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "342:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "352:   return _get_zval_cv_lookup(ret, var, type TSRMLS_CC);",
          "355:  }",
          "356:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "357:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "353:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "354:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "367:   return _get_zval_cv_lookup_BP_VAR_R(ret, var TSRMLS_CC);",
          "370:  }",
          "371:  return ret;",
          "372: }",
          "",
          "[Removed Lines]",
          "368:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "369:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "378:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "379:   return _get_zval_cv_lookup_BP_VAR_R(ret, var TSRMLS_CC);",
          "382:  }",
          "383:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "384:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "380:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "381:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "393:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "394:   return _get_zval_cv_lookup_BP_VAR_UNSET(ret, var TSRMLS_CC);",
          "397:  }",
          "398:  return ret;",
          "399: }",
          "",
          "[Removed Lines]",
          "395:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "396:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "405:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "406:   return _get_zval_cv_lookup_BP_VAR_UNSET(ret, var TSRMLS_CC);",
          "409:  }",
          "410:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "411:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "407:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "408:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "420:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "421:   return _get_zval_cv_lookup_BP_VAR_IS(ret, var TSRMLS_CC);",
          "424:  }",
          "425:  return ret;",
          "426: }",
          "",
          "[Removed Lines]",
          "422:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "423:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "432:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "433:   return _get_zval_cv_lookup_BP_VAR_IS(ret, var TSRMLS_CC);",
          "436:  }",
          "437:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "438:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "434:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "435:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "448:   return _get_zval_cv_lookup_BP_VAR_RW(ret, var TSRMLS_CC);",
          "451:  }",
          "452:  return ret;",
          "453: }",
          "",
          "[Removed Lines]",
          "449:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "450:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "459:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "460:   return _get_zval_cv_lookup_BP_VAR_RW(ret, var TSRMLS_CC);",
          "463:  }",
          "464:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "465:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "461:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "462:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "474:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "475:   return _get_zval_cv_lookup_BP_VAR_W(ret, var TSRMLS_CC);",
          "478:  }",
          "479:  return ret;",
          "480: }",
          "",
          "[Removed Lines]",
          "476:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "477:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "486:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_UNDEF)) {",
          "487:   return _get_zval_cv_lookup_BP_VAR_W(ret, var TSRMLS_CC);",
          "490:  }",
          "491:  if (UNEXPECTED(Z_TYPE_P(ret) == IS_REFERENCE)) {",
          "492:   ret = Z_REFVAL_P(ret);",
          "",
          "[Removed Lines]",
          "488:  } else if (UNEXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {",
          "489:   ret = Z_INDIRECT_P(ret);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "774:     }",
          "775:     Z_ADDREF_P(object);",
          "776:     zend_error(E_WARNING, \"Creating default object from empty value\");",
          "781:     if (Z_REFCOUNT_P(object) == 1) {",
          "783:      zval_ptr_dtor(object);",
          "",
          "[Removed Lines]",
          "778:     if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "779:      object = Z_INDIRECT_P(object);",
          "780:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "790:     Z_DELREF_P(object);",
          "791:    } else {",
          "792:     zend_error(E_WARNING, \"Creating default object from empty value\");",
          "797:    }",
          "798:    zval_dtor(object);",
          "799:    object_init(object);",
          "",
          "[Removed Lines]",
          "794:     if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "795:      object = Z_INDIRECT_P(object);",
          "796:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1098:    }",
          "1099: fetch_string_dim:",
          "1100:    retval = zend_hash_find(ht, offset_key);",
          "1102:     switch (type) {",
          "1103:      case BP_VAR_R:",
          "1104:       zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "",
          "[Removed Lines]",
          "1101:    if (retval == NULL) {",
          "",
          "[Added Lines]",
          "1002:    if (retval) {",
          "1003:     if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "1004:      retval = Z_INDIRECT_P(retval);",
          "1005:      if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "1006:       switch (type) {",
          "1007:        case BP_VAR_R:",
          "1008:         zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "1010:        case BP_VAR_UNSET:",
          "1011:        case BP_VAR_IS:",
          "1012:         retval = &EG(uninitialized_zval);",
          "1013:         break;",
          "1014:        case BP_VAR_RW:",
          "1015:         zend_error(E_NOTICE,\"Undefined index: %s\", offset_key->val);",
          "1017:        case BP_VAR_W:",
          "1018:         ZVAL_NULL(retval);",
          "1019:         break;",
          "1020:       }",
          "1021:      }",
          "1022:     }",
          "1023:    } else {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1247:      convert_to_long(&tmp);",
          "1248:      dim = &tmp;",
          "1249:     }",
          "1254:     ZVAL_STR_OFFSET(result, container, Z_LVAL_P(dim));",
          "1255:     if (!IS_INTERNED(Z_STR_P(container))) STR_ADDREF(Z_STR_P(container));",
          "1256:     return;",
          "",
          "[Removed Lines]",
          "1251:     if (Z_TYPE_P(container) == IS_INDIRECT) {",
          "1252:      container = Z_INDIRECT_P(container);",
          "1253:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1719:   op_array->run_time_cache = ecalloc(op_array->last_cache_slot, sizeof(void*));",
          "1720:  }",
          "1722:  if (op_array->this_var != -1 && Z_TYPE(EG(This)) != IS_UNDEF) {",
          "1732:  }",
          "1734:  EX(opline) = UNEXPECTED((op_array->fn_flags & ZEND_ACC_INTERACTIVE) != 0) && EG(start_op) ? EG(start_op) : op_array->opcodes;",
          "",
          "[Removed Lines]",
          "1723:   if (!EG(active_symbol_table)) {",
          "1724:    ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "1725:   } else {",
          "1726:    ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "1727:    zval *zv = zend_hash_str_add(&EG(active_symbol_table)->ht, \"this\", sizeof(\"this\")-1, EX_VAR(op_array->this_var));",
          "1728:    if (zv) {",
          "1729:     ZVAL_INDIRECT(EX_VAR_NUM(op_array->this_var), zv);",
          "1730:    }",
          "1731:   }",
          "",
          "[Added Lines]",
          "1640:  if (EG(active_symbol_table)) {",
          "1641:   zend_attach_symbol_table(TSRMLS_C);",
          "1642:  }",
          "1645:   ZVAL_COPY(EX_VAR_NUM(op_array->this_var), &EG(This));",
          "",
          "---------------"
        ],
        "Zend/zend_execute_API.c||Zend/zend_execute_API.c": [
          "File: Zend/zend_execute_API.c -> Zend/zend_execute_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: {",
          "205:  if (Z_TYPE_P(zv) == IS_OBJECT && Z_REFCOUNT_P(zv) == 1) {",
          "206:   return ZEND_HASH_APPLY_REMOVE;",
          "207:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "206:   zv = Z_INDIRECT_P(zv);",
          "207:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: }",
          "214: {",
          "215:  zend_try {",
          "216:   int symbols;",
          "217:   do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: {",
          "218:  TSRMLS_FETCH();",
          "220:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "221:   zv = Z_INDIRECT_P(zv);",
          "222:  }",
          "223:  i_zval_ptr_dtor(zv ZEND_FILE_LINE_CC TSRMLS_CC);",
          "224: }",
          "229:  if (CG(unclean_shutdown)) {",
          "230:   EG(symbol_table).ht.pDestructor = zend_unclean_zval_ptr_dtor;",
          "231:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:   }",
          "248:   zend_llist_apply(&zend_extensions, (llist_apply_func_t) zend_extension_deactivator TSRMLS_CC);",
          "249:   zend_hash_graceful_reverse_destroy(&EG(symbol_table).ht);",
          "250:  } zend_end_try();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:   if (CG(unclean_shutdown)) {",
          "268:    EG(symbol_table).ht.pDestructor = zend_unclean_zval_ptr_dtor;",
          "269:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1638: }",
          "1679: {",
          "1700: }",
          "",
          "[Removed Lines]",
          "1642: {",
          "1643:  zend_execute_data *ex;",
          "1644:  int i;",
          "1646:  for (ex = EG(current_execute_data); ex; ex = ex->prev_execute_data) {",
          "1647:   if (ex->op_array && ex->symbol_table == symbol_table) {",
          "1648:    for (i = 0; i < ex->op_array->last_var; i++) {",
          "1649:     ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1650:    }",
          "1651:   }",
          "1652:  }",
          "1653: }",
          "1657: {",
          "1658:  if (zend_hash_del(ht, name) == SUCCESS) {",
          "1659:   while (ex && &ex->symbol_table->ht == ht) {",
          "1660:    int i;",
          "1662:    if (ex->op_array) {",
          "1663:     for (i = 0; i < ex->op_array->last_var; i++) {",
          "1664:      if (ex->op_array->vars[i]->h == name->h &&",
          "1665:       ex->op_array->vars[i]->len == name->len &&",
          "1666:       !memcmp(ex->op_array->vars[i]->val, name->val, name->len)) {",
          "1667:       ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1668:       break;",
          "1669:      }",
          "1670:     }",
          "1671:    }",
          "1672:    ex = ex->prev_execute_data;",
          "1673:   }",
          "1674:  }",
          "1675: }",
          "1680:  zend_execute_data *ex;",
          "1682:  if (zend_hash_del(&EG(symbol_table).ht, name) == SUCCESS) {",
          "1683:   for (ex = EG(current_execute_data); ex; ex = ex->prev_execute_data) {",
          "1684:    if (ex->op_array && ex->symbol_table == &EG(symbol_table)) {",
          "1685:     int i;",
          "1686:     for (i = 0; i < ex->op_array->last_var; i++) {",
          "1687:      if (ex->op_array->vars[i]->h == name->h &&",
          "1688:       ex->op_array->vars[i]->len == name->len &&",
          "1689:       !memcmp(ex->op_array->vars[i]->val, name->val, name->len)",
          "1690:      ) {",
          "1691:       ZVAL_UNDEF(EX_VAR_NUM_2(ex, i));",
          "1692:       break;",
          "1693:      }",
          "1694:     }",
          "1695:    }",
          "1696:   }",
          "1697:   return SUCCESS;",
          "1698:  }",
          "1699:  return FAILURE;",
          "",
          "[Added Lines]",
          "1664:     return zend_hash_del_ind(&EG(symbol_table).ht, name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1736:        ZVAL_COPY_VALUE(EX_VAR_NUM_2(ex, ex->op_array->this_var), &EG(This));",
          "1737:     }",
          "1738:    for (i = 0; i < ex->op_array->last_var; i++) {",
          "1744:     }",
          "1745:    }",
          "1746:   }",
          "1747:  }",
          "1748: }",
          "",
          "[Removed Lines]",
          "1739:     if (Z_TYPE_P(EX_VAR_NUM_2(ex, i)) != IS_UNDEF) {",
          "1740:      zval *zv = zend_hash_update(&EG(active_symbol_table)->ht,",
          "1741:       ex->op_array->vars[i],",
          "1742:       EX_VAR_NUM_2(ex, i));",
          "1743:      ZVAL_INDIRECT(EX_VAR_NUM_2(ex, i), zv);",
          "",
          "[Added Lines]",
          "1704:     zval zv;",
          "1706:     ZVAL_INDIRECT(&zv, EX_VAR_NUM_2(ex, i));",
          "1707:     zend_hash_update(&EG(active_symbol_table)->ht,",
          "1708:      ex->op_array->vars[i], &zv);",
          "1709:    }",
          "1710:   }",
          "1711:  }",
          "1712: }",
          "1716: {",
          "1717:  int i;",
          "1718:  zend_execute_data *execute_data = EG(current_execute_data);",
          "1719:  zend_op_array *op_array = execute_data->op_array;",
          "1720:  HashTable *ht = &EG(active_symbol_table)->ht;",
          "1724:  for (i = 0; i < op_array->last_var; i++) {",
          "1725:   zval *zv = zend_hash_find(ht, op_array->vars[i]);",
          "1727:   if (zv) {",
          "1728:    if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "1729:     zval *val = Z_INDIRECT_P(zv);",
          "1730:     if (Z_TYPE_P(val) == IS_UNDEF) {",
          "1731:      ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1732:     } else {",
          "1733:      ZVAL_COPY_VALUE(EX_VAR_NUM(i), val);",
          "1735:    } else {",
          "1736:     ZVAL_COPY_VALUE(EX_VAR_NUM(i), zv);",
          "1738:   } else {",
          "1739:    ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1740:    zv = zend_hash_update(ht, op_array->vars[i], EX_VAR_NUM(i));",
          "1742:   ZVAL_INDIRECT(zv, EX_VAR_NUM(i));",
          "1748: {",
          "1749:  int i;",
          "1750:  zend_execute_data *execute_data = EG(current_execute_data);",
          "1751:  zend_op_array *op_array = execute_data->op_array;",
          "1752:  HashTable *ht = &EG(active_symbol_table)->ht;",
          "1755:  for (i = 0; i < op_array->last_var; i++) {",
          "1756:   zend_hash_update(ht, op_array->vars[i], EX_VAR_NUM(i));",
          "1757:   ZVAL_UNDEF(EX_VAR_NUM(i));",
          "1758:  }",
          "1759: }",
          "1763: {",
          "1764:  if (!EG(active_symbol_table)) {",
          "1765:   int i;",
          "1766:   zend_execute_data *execute_data = EG(current_execute_data);",
          "1767:   zend_op_array *op_array = execute_data->op_array;",
          "1768:   zend_ulong h = zend_hash_func(name, len);",
          "1770:   if (op_array) {",
          "1771:    for (i = 0; i < op_array->last_var; i++) {",
          "1772:     if (op_array->vars[i]->h == h &&",
          "1773:         op_array->vars[i]->len == len &&",
          "1774:         memcmp(op_array->vars[i]->val, name, len) == 0) {",
          "1775:      ZVAL_COPY_VALUE(EX_VAR_NUM(i), value);",
          "1776:      return SUCCESS;",
          "1777:     }",
          "1778:    }",
          "1779:   }",
          "1780:   if (force) {",
          "1781:    zend_rebuild_symbol_table(TSRMLS_C);",
          "1782:    if (EG(active_symbol_table)) {",
          "1783:     zend_hash_str_update(&EG(active_symbol_table)->ht, name, len, value);",
          "1784:    }",
          "1785:   } else {",
          "1786:    return FAILURE;",
          "1787:   }",
          "1788:  } else {",
          "1789:   return zend_hash_str_update_ind(&EG(active_symbol_table)->ht, name, len, value);",
          "1790:  }",
          "1791:  return SUCCESS;",
          "1792: }",
          "",
          "---------------"
        ],
        "Zend/zend_gc.c||Zend/zend_gc.c": [
          "File: Zend/zend_gc.c -> Zend/zend_gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:    p = ht->arData + idx;",
          "558:    if (!Z_REFCOUNTED(p->val)) {",
          "561:      count++;",
          "562:     }",
          "563:     continue;",
          "",
          "[Removed Lines]",
          "560:     if (Z_TYPE(p->val) != IS_UNDEF) {",
          "",
          "[Added Lines]",
          "560:     if (Z_TYPE(p->val) != IS_UNDEF && Z_TYPE(p->val) != IS_INDIRECT) {",
          "",
          "---------------"
        ],
        "Zend/zend_hash.c||Zend/zend_hash.c": [
          "File: Zend/zend_hash.c -> Zend/zend_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:  p = zend_hash_find_bucket(ht, key);",
          "269:  if (p) {",
          "270:   if (flag & HASH_ADD) {",
          "271:    return NULL;",
          "272:   }",
          "273:   ZEND_ASSERT(&p->val != pData);",
          "274:   HANDLE_BLOCK_INTERRUPTIONS();",
          "275:   if (ht->pDestructor) {",
          "277:   }",
          "279:   HANDLE_UNBLOCK_INTERRUPTIONS();",
          "281:  }",
          "",
          "[Removed Lines]",
          "276:    ht->pDestructor(&p->val);",
          "278:   ZVAL_COPY_VALUE(&p->val, pData);",
          "280:   return &p->val;",
          "",
          "[Added Lines]",
          "270:   zval *data;",
          "276:   data = &p->val;",
          "277:   if ((flag & HASH_UPDATE_INDIRECT) && Z_TYPE_P(data) == IS_INDIRECT) {",
          "278:    data = Z_INDIRECT_P(data);",
          "279:   }",
          "282:    ht->pDestructor(data);",
          "284:   ZVAL_COPY_VALUE(data, pData);",
          "286:   return data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:  return FAILURE;",
          "589: }",
          "591: ZEND_API int zend_hash_str_del(HashTable *ht, const char *str, int len)",
          "592: {",
          "593:  ulong h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597: ZEND_API int zend_hash_del_ind(HashTable *ht, zend_string *key)",
          "598: {",
          "599:  ulong h;",
          "600:  uint nIndex;",
          "601:  uint idx;",
          "602:  Bucket *p;",
          "603:  Bucket *prev = NULL;",
          "604: #ifdef ZEND_SIGNALS",
          "605:  TSRMLS_FETCH();",
          "606: #endif",
          "608:  IS_CONSISTENT(ht);",
          "610:  if (ht->flags & HASH_FLAG_PACKED) {",
          "611:   return FAILURE;",
          "612:  }",
          "614:  h = STR_HASH_VAL(key);",
          "615:  nIndex = h & ht->nTableMask;",
          "617:  idx = ht->arHash[nIndex];",
          "618:  while (idx != INVALID_IDX) {",
          "619:   p = ht->arData + idx;",
          "620:   if ((p->key == key) ||",
          "621:    (p->h == h &&",
          "622:        p->key &&",
          "623:        p->key->len == key->len &&",
          "624:        memcmp(p->key->val, key->val, key->len) == 0)) {",
          "625:    if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "626:     zval *data = Z_INDIRECT(p->val);",
          "628:     if (Z_TYPE_P(data) == IS_UNDEF) {",
          "629:      return FAILURE;",
          "630:     } else {",
          "631:      if (ht->pDestructor) {",
          "632:       ht->pDestructor(data);",
          "633:      }",
          "634:      ZVAL_UNDEF(data);",
          "635:     }",
          "636:    } else {",
          "637:     HANDLE_BLOCK_INTERRUPTIONS();",
          "638:     _zend_hash_del_el_ex(ht, idx, p, prev);",
          "639:     HANDLE_UNBLOCK_INTERRUPTIONS();",
          "640:    }",
          "641:    return SUCCESS;",
          "642:   }",
          "643:   prev = p;",
          "644:   idx = p->val.u.next;",
          "645:  }",
          "646:  return FAILURE;",
          "647: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "604:  h = zend_inline_hash_func(str, len);",
          "605:  nIndex = h & ht->nTableMask;",
          "607:  idx = ht->arHash[nIndex];",
          "608:  while (idx != INVALID_IDX) {",
          "609:   p = ht->arData + idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:  idx = ht->arHash[nIndex];",
          "666:  while (idx != INVALID_IDX) {",
          "667:   p = ht->arData + idx;",
          "668:   if ((p->h == h)",
          "669:     && p->key",
          "670:     && (p->key->len == len)",
          "671:     && !memcmp(p->key->val, str, len)) {",
          "672:    if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "673:     zval *data = Z_INDIRECT(p->val);",
          "675:     if (Z_TYPE_P(data) == IS_UNDEF) {",
          "676:      return FAILURE;",
          "677:     } else {",
          "678:      if (ht->pDestructor) {",
          "679:       ht->pDestructor(data);",
          "680:      }",
          "681:      ZVAL_UNDEF(data);",
          "682:     }",
          "683:    } else {",
          "684:     HANDLE_BLOCK_INTERRUPTIONS();",
          "685:     _zend_hash_del_el_ex(ht, idx, p, prev);",
          "686:     HANDLE_UNBLOCK_INTERRUPTIONS();",
          "687:    }",
          "688:    return SUCCESS;",
          "689:   }",
          "690:   prev = p;",
          "691:   idx = p->val.u.next;",
          "692:  }",
          "693:  return FAILURE;",
          "694: }",
          "696: ZEND_API int zend_hash_str_del_ind(HashTable *ht, const char *str, int len)",
          "697: {",
          "698:  ulong h;",
          "699:  uint nIndex;",
          "700:  uint idx;",
          "701:  Bucket *p;",
          "702:  Bucket *prev = NULL;",
          "703: #ifdef ZEND_SIGNALS",
          "704:  TSRMLS_FETCH();",
          "705: #endif",
          "707:  IS_CONSISTENT(ht);",
          "709:  h = zend_inline_hash_func(str, len);",
          "710:  nIndex = h & ht->nTableMask;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914: {",
          "915:     uint idx;",
          "916:  Bucket *p;",
          "918:  zend_bool setTargetPointer;",
          "920:  IS_CONSISTENT(source);",
          "",
          "[Removed Lines]",
          "917:  zval *new_entry;",
          "",
          "[Added Lines]",
          "1022:  zval *new_entry, *data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "928:   if (setTargetPointer && source->nInternalPointer == idx) {",
          "929:    target->nInternalPointer = INVALID_IDX;",
          "930:   }",
          "931:   if (p->key) {",
          "933:   } else {",
          "935:   }",
          "936:   if (pCopyConstructor) {",
          "937:    pCopyConstructor(new_entry);",
          "",
          "[Removed Lines]",
          "932:    new_entry = zend_hash_update(target, p->key, &p->val);",
          "934:    new_entry = zend_hash_index_update(target, p->h, &p->val);",
          "",
          "[Added Lines]",
          "1037:   data = &p->val;",
          "1038:   if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "1039:    data = Z_INDIRECT_P(data);",
          "1040:    if (Z_TYPE_P(data) == IS_UNDEF) {",
          "1041:     continue;",
          "1042:    }",
          "1043:   }",
          "1045:    new_entry = zend_hash_update(target, p->key, data);",
          "1047:    new_entry = zend_hash_index_update(target, p->h, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1551:  uint idx1, idx2;",
          "1552:  Bucket *p1, *p2 = NULL;",
          "1553:  int result;",
          "1556:  IS_CONSISTENT(ht1);",
          "1557:  IS_CONSISTENT(ht2);",
          "",
          "[Removed Lines]",
          "1554:  zval *pData2;",
          "",
          "[Added Lines]",
          "1667:  zval *pData1, *pData2;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1620:     }",
          "1621:    }",
          "1622:   }",
          "1624:   if (result != 0) {",
          "1625:    HASH_UNPROTECT_RECURSION(ht1);",
          "1626:    HASH_UNPROTECT_RECURSION(ht2);",
          "",
          "[Removed Lines]",
          "1623:   result = compar(&p1->val, pData2 TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1736:   pData1 = &p1->val;",
          "1737:   if (Z_TYPE_P(pData1) == IS_INDIRECT) {",
          "1738:    pData1 = Z_INDIRECT_P(pData1);",
          "1739:   }",
          "1740:   if (Z_TYPE_P(pData2) == IS_INDIRECT) {",
          "1741:    pData2 = Z_INDIRECT_P(pData2);",
          "1742:   }",
          "1743:   if (Z_TYPE_P(pData1) == IS_UNDEF) {",
          "1744:    if (Z_TYPE_P(pData2) != IS_UNDEF) {",
          "1745:     return -1;",
          "1746:    }",
          "1747:   } else if (Z_TYPE_P(pData2) == IS_UNDEF) {",
          "1748:    return 1;",
          "1749:   } else {",
          "1750:    result = compar(pData1, pData2 TSRMLS_CC);",
          "1751:   }",
          "",
          "---------------"
        ],
        "Zend/zend_hash.h||Zend/zend_hash.h": [
          "File: Zend/zend_hash.h -> Zend/zend_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define HASH_KEY_NON_EXISTENT 3",
          "37: #define HASH_UPDATE_KEY_IF_NONE    0",
          "38: #define HASH_UPDATE_KEY_IF_BEFORE  1",
          "",
          "[Removed Lines]",
          "33: #define HASH_UPDATE   (1<<0)",
          "34: #define HASH_ADD   (1<<1)",
          "35: #define HASH_NEXT_INSERT (1<<2)",
          "",
          "[Added Lines]",
          "33: #define HASH_UPDATE    (1<<0)",
          "34: #define HASH_ADD    (1<<1)",
          "35: #define HASH_NEXT_INSERT  (1<<2)",
          "36: #define HASH_UPDATE_INDIRECT (1<<3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: ZEND_API zval *_zend_hash_add_or_update(HashTable *ht, zend_string *key, zval *pData, int flag ZEND_FILE_LINE_DC);",
          "75: #define zend_hash_update(ht, key, pData) \\",
          "76:   _zend_hash_add_or_update(ht, key, pData, HASH_UPDATE ZEND_FILE_LINE_CC)",
          "77: #define zend_hash_add(ht, key, pData) \\",
          "78:   _zend_hash_add_or_update(ht, key, pData, HASH_ADD ZEND_FILE_LINE_CC)",
          "80: ZEND_API zval *_zend_hash_str_add_or_update(HashTable *ht, const char *key, int len, zval *pData, int flag ZEND_FILE_LINE_DC);",
          "81: #define zend_hash_str_update(ht, key, len, pData) \\",
          "82:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_UPDATE ZEND_FILE_LINE_CC)",
          "83: #define zend_hash_str_add(ht, key, len, pData) \\",
          "84:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_ADD ZEND_FILE_LINE_CC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #define zend_hash_update_ind(ht, key, pData) \\",
          "79:   _zend_hash_add_or_update(ht, key, pData, HASH_UPDATE | HASH_UPDATE_INDIRECT ZEND_FILE_LINE_CC)",
          "86: #define zend_hash_str_update_ind(ht, key, len, pData) \\",
          "87:   _zend_hash_str_add_or_update(ht, key, len, pData, HASH_UPDATE | HASH_UPDATE_INDIRECT ZEND_FILE_LINE_CC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: ZEND_API int zend_hash_del(HashTable *ht, zend_string *key);",
          "120: ZEND_API int zend_hash_str_del(HashTable *ht, const char *key, int len);",
          "121: ZEND_API int zend_hash_index_del(HashTable *ht, ulong h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: ZEND_API int zend_hash_del_ind(HashTable *ht, zend_string *key);",
          "127: ZEND_API int zend_hash_str_del_ind(HashTable *ht, const char *key, int len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:  ZEND_HANDLE_NUMERIC_EX(key, length, idx, return func);     \\",
          "245: } while (0)",
          "247: static inline zval *zend_symtable_update(HashTable *ht, zend_string *key, zval *pData)",
          "248: {",
          "249:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_update(ht, idx, pData));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: static inline zval *zend_hash_find_ind(const HashTable *ht, zend_string *key)",
          "256: {",
          "257:  zval *zv;",
          "259:  zv = zend_hash_find(ht, key);",
          "260:  return (zv && Z_TYPE_P(zv) == IS_INDIRECT) ? Z_INDIRECT_P(zv) : zv;",
          "261: }",
          "264: static inline zval *zend_hash_str_find_ind(const HashTable *ht, const char *str, int len)",
          "265: {",
          "266:  zval *zv;",
          "268:  zv = zend_hash_str_find(ht, str, len);",
          "269:  return (zv && Z_TYPE_P(zv) == IS_INDIRECT) ? Z_INDIRECT_P(zv) : zv;",
          "270: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251: }",
          "254: static inline int zend_symtable_del(HashTable *ht, zend_string *key)",
          "255: {",
          "256:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_del(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280: static inline zval *zend_symtable_update_ind(HashTable *ht, zend_string *key, zval *pData)",
          "281: {",
          "282:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_update(ht, idx, pData));",
          "283:  return zend_hash_update_ind(ht, key, pData);",
          "284: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258: }",
          "261: static inline zval *zend_symtable_find(const HashTable *ht, zend_string *key)",
          "262: {",
          "263:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_find(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: static inline int zend_symtable_del_ind(HashTable *ht, zend_string *key)",
          "295: {",
          "296:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_del(ht, idx));",
          "297:  return zend_hash_del_ind(ht, key);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265: }",
          "268: static inline int zend_symtable_exists(HashTable *ht, zend_string *key)",
          "269: {",
          "270:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_exists(ht, idx));",
          "271:  return zend_hash_exists(ht, key);",
          "272: }",
          "274: static inline zval *zend_symtable_str_update(HashTable *ht, const char *str, int len, zval *pData)",
          "275: {",
          "276:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_update(ht, idx, pData));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: static inline zval *zend_symtable_find_ind(const HashTable *ht, zend_string *key)",
          "309: {",
          "310:  ZEND_HANDLE_NUMERIC(key->val, key->len+1, zend_hash_index_find(ht, idx));",
          "311:  return zend_hash_find_ind(ht, key);",
          "312: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278: }",
          "281: static inline int zend_symtable_str_del(HashTable *ht, const char *str, int len)",
          "282: {",
          "283:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_del(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static inline zval *zend_symtable_str_update_ind(HashTable *ht, const char *str, int len, zval *pData)",
          "330: {",
          "331:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_update(ht, idx, pData));",
          "332:  return zend_hash_str_update_ind(ht, str, len, pData);",
          "333: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "285: }",
          "288: static inline zval *zend_symtable_str_find(HashTable *ht, const char *str, int len)",
          "289: {",
          "290:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_find(ht, idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: static inline int zend_symtable_str_del_ind(HashTable *ht, const char *str, int len)",
          "344: {",
          "345:  ZEND_HANDLE_NUMERIC(str, len+1, zend_hash_index_del(ht, idx));",
          "346:  return zend_hash_str_del_ind(ht, str, len);",
          "347: }",
          "",
          "---------------"
        ],
        "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c": [
          "File: Zend/zend_object_handlers.c -> Zend/zend_object_handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         (prop_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "86:         prop_info->offset >= 0 &&",
          "87:         Z_TYPE(zobj->properties_table[prop_info->offset]) != IS_UNDEF) {",
          "92:     }",
          "93:    }",
          "94:    while (ce->parent && ce->parent->default_properties_count) {",
          "",
          "[Removed Lines]",
          "88:      zval *zv = zend_hash_add(zobj->properties, prop_info->name, &zobj->properties_table[prop_info->offset]);",
          "89:      if (EXPECTED(zv != NULL)) {",
          "90:       ZVAL_INDIRECT(&zobj->properties_table[prop_info->offset], zv);",
          "91:      }",
          "",
          "[Added Lines]",
          "88:      zval zv;",
          "90:      ZVAL_INDIRECT(&zv, &zobj->properties_table[prop_info->offset]);",
          "91:      zend_hash_add(zobj->properties, prop_info->name, &zv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:          (prop_info->flags & ZEND_ACC_PRIVATE) != 0 &&",
          "102:          prop_info->offset >= 0 &&",
          "103:       Z_TYPE(zobj->properties_table[prop_info->offset]) != IS_UNDEF) {",
          "108:      }",
          "109:     }",
          "110:    }",
          "",
          "[Removed Lines]",
          "104:       zval *zv = zend_hash_add(zobj->properties, prop_info->name, &zobj->properties_table[prop_info->offset]);",
          "105:       if (EXPECTED(zv != NULL)) {",
          "106:        ZVAL_INDIRECT(&zobj->properties_table[prop_info->offset], zv);",
          "107:       }",
          "",
          "[Added Lines]",
          "104:       zval zv;",
          "106:       ZVAL_INDIRECT(&zv, &zobj->properties_table[prop_info->offset]);",
          "107:       zend_hash_add(zobj->properties, prop_info->name, &zv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:  } else {",
          "134:   zend_object *zobj = Z_OBJ_P(object);",
          "145:  }",
          "146: }",
          "",
          "[Removed Lines]",
          "136:   if (zobj->properties) {",
          "139:    return zobj->properties;",
          "140:   } else {",
          "143:    return NULL;",
          "144:   }",
          "",
          "[Added Lines]",
          "138:   return zobj->properties;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:  if (EXPECTED(property_info != NULL)) {",
          "456:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "459:    retval = &zobj->properties_table[property_info->offset];",
          "462:    }",
          "466:    retval = zend_hash_find(zobj->properties, property_info->name);",
          "467:    if (retval) goto exit;",
          "468:   }",
          "469:  }",
          "471:  if (zobj->ce->__get) {",
          "472:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "473:   if (!((*guard) & IN_GET)) {",
          "",
          "[Removed Lines]",
          "457:       property_info->offset >= 0 &&",
          "458:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "460:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "461:     retval = Z_INDIRECT_P(retval);",
          "463:    goto exit;",
          "464:   }",
          "465:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "451:       property_info->offset >= 0) {",
          "453:    if (Z_TYPE_P(retval) != IS_UNDEF) {",
          "454:     goto exit;",
          "456:   } else if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "566:  if (EXPECTED(property_info != NULL)) {",
          "567:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "570:    variable_ptr = &zobj->properties_table[property_info->offset];",
          "573:    }",
          "577:    if ((variable_ptr = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "578: found:",
          "",
          "[Removed Lines]",
          "568:       property_info->offset >= 0 &&",
          "569:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "571:    if (Z_TYPE_P(variable_ptr) == IS_INDIRECT) {",
          "572:     variable_ptr = Z_INDIRECT_P(variable_ptr);",
          "574:    goto found;",
          "575:   }",
          "576:   if (EXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "561:       property_info->offset >= 0) {",
          "563:    if (Z_TYPE_P(variable_ptr) != IS_UNDEF) {",
          "564:     goto found;",
          "566:   } else if (EXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607:       zval_ptr_dtor(&garbage);",
          "608:      }",
          "609:     }",
          "611:    }",
          "612:   }",
          "613:  }",
          "615:  if (zobj->ce->__set) {",
          "616:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "",
          "[Removed Lines]",
          "610:     return;",
          "",
          "[Added Lines]",
          "600:     goto exit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "653:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "654:       property_info->offset >= 0) {",
          "662:   } else {",
          "663:    if (!zobj->properties) {",
          "664:     rebuild_object_properties(zobj);",
          "",
          "[Removed Lines]",
          "656:    if (zobj->properties) {",
          "657:     zval *zv = zend_hash_update(zobj->properties, property_info->name, value);",
          "658:        ZVAL_INDIRECT(&zobj->properties_table[property_info->offset], zv);",
          "659:    } else {",
          "660:     ZVAL_COPY_VALUE(&zobj->properties_table[property_info->offset], value);",
          "661:    }",
          "",
          "[Added Lines]",
          "647:    ZVAL_COPY_VALUE(&zobj->properties_table[property_info->offset], value);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "667:   }",
          "668:  }",
          "670:  if (UNEXPECTED(Z_TYPE(tmp_member) != IS_UNDEF)) {",
          "671:   zval_ptr_dtor(&tmp_member);",
          "672:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: exit:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "786:  if (EXPECTED(property_info != NULL)) {",
          "787:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "790:    retval = &zobj->properties_table[property_info->offset];",
          "793:    }",
          "797:    retval = zend_hash_find(zobj->properties, property_info->name);",
          "798:    if (retval) goto exit;",
          "799:   }",
          "",
          "[Removed Lines]",
          "788:       property_info->offset >= 0 &&",
          "789:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "791:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "792:     retval = Z_INDIRECT_P(retval);",
          "794:    goto exit;",
          "795:   }",
          "796:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "[Added Lines]",
          "775:       property_info->offset >= 0) {",
          "777:    if (Z_TYPE_P(retval) != IS_UNDEF) {",
          "778:     goto exit;",
          "780:   } else if (UNEXPECTED(zobj->properties != NULL)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "810:   ZVAL_NULL(&tmp);",
          "811:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "812:       property_info->offset >= 0) {",
          "820:   } else {",
          "821:    if (!zobj->properties) {",
          "822:     rebuild_object_properties(zobj);",
          "",
          "[Removed Lines]",
          "813:    if (zobj->properties) {",
          "814:     retval = zend_hash_update(zobj->properties, property_info->name, &tmp);",
          "815:        ZVAL_INDIRECT(&zobj->properties_table[property_info->offset], retval);",
          "816:    } else {",
          "817:     retval = &zobj->properties_table[property_info->offset];",
          "818:     ZVAL_NULL(retval);",
          "819:    }",
          "",
          "[Added Lines]",
          "797:    retval = &zobj->properties_table[property_info->offset];",
          "798:    ZVAL_NULL(retval);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "855:  property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__unset != NULL), key TSRMLS_CC);",
          "863:  }",
          "887:     }",
          "888:    }",
          "889:   }",
          "",
          "[Removed Lines]",
          "857:  if (EXPECTED(property_info != NULL) &&",
          "858:      EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "859:      property_info->offset >= 0) {",
          "860:   zval_ptr_dtor(&zobj->properties_table[property_info->offset]);",
          "861:   ZVAL_UNDEF(&zobj->properties_table[property_info->offset]);",
          "862:   if (!zobj->properties) goto exit;",
          "864:  if (UNEXPECTED(!property_info) ||",
          "865:         !zobj->properties ||",
          "866:         UNEXPECTED(zend_hash_del(zobj->properties, property_info->name) == FAILURE)) {",
          "868:   if (zobj->ce->__unset) {",
          "869:    long *guard = zend_get_property_guard(zobj, property_info, member);",
          "870:    if (!((*guard) & IN_UNSET)) {",
          "872:     Z_ADDREF_P(object);",
          "873:     if (Z_ISREF_P(object)) {",
          "874:      SEPARATE_ZVAL(object);",
          "875:     }",
          "877:     zend_std_call_unsetter(object, member TSRMLS_CC);",
          "878:     (*guard) &= ~IN_UNSET;",
          "879:     zval_ptr_dtor(object);",
          "880:    } else {",
          "881:     if (Z_STRVAL_P(member)[0] == '\\0') {",
          "882:      if (Z_STRLEN_P(member) == 0) {",
          "883:       zend_error(E_ERROR, \"Cannot access empty property\");",
          "884:      } else {",
          "885:       zend_error(E_ERROR, \"Cannot access property started with '\\\\0'\");",
          "886:      }",
          "",
          "[Added Lines]",
          "836:  if (EXPECTED(property_info != NULL)) {",
          "837:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "838:       property_info->offset >= 0) {",
          "839:    if (Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "840:     zval_ptr_dtor(&zobj->properties_table[property_info->offset]);",
          "841:     ZVAL_UNDEF(&zobj->properties_table[property_info->offset]);",
          "842:     goto exit;",
          "843:    }",
          "844:   } else if (zobj->properties &&",
          "845:          UNEXPECTED(zend_hash_del(zobj->properties, property_info->name) != FAILURE)) {",
          "846:    goto exit;",
          "847:   }",
          "851:  if (zobj->ce->__unset) {",
          "852:   long *guard = zend_get_property_guard(zobj, property_info, member);",
          "853:   if (!((*guard) & IN_UNSET)) {",
          "855:    Z_ADDREF_P(object);",
          "856:    if (Z_ISREF_P(object)) {",
          "857:     SEPARATE_ZVAL(object);",
          "858:    }",
          "860:    zend_std_call_unsetter(object, member TSRMLS_CC);",
          "861:    (*guard) &= ~IN_UNSET;",
          "862:    zval_ptr_dtor(object);",
          "863:   } else {",
          "864:    if (Z_STRVAL_P(member)[0] == '\\0') {",
          "865:     if (Z_STRLEN_P(member) == 0) {",
          "866:      zend_error(E_ERROR, \"Cannot access empty property\");",
          "867:     } else {",
          "868:      zend_error(E_ERROR, \"Cannot access property started with '\\\\0'\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1382:      zval *p1 = &zobj1->properties_table[i];",
          "1383:      zval *p2 = &zobj2->properties_table[i];",
          "1391:      if (compare_function(&result, p1, p2 TSRMLS_CC)==FAILURE) {",
          "1392:       Z_OBJ_UNPROTECT_RECURSION(o1);",
          "1393:       Z_OBJ_UNPROTECT_RECURSION(o2);",
          "",
          "[Removed Lines]",
          "1385:      if (Z_TYPE_P(p1) == IS_INDIRECT) {",
          "1386:       p1 = Z_INDIRECT_P(p1);",
          "1387:      }",
          "1388:      if (Z_TYPE_P(p2) == IS_INDIRECT) {",
          "1389:       p1 = Z_INDIRECT_P(p2);",
          "1390:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1449:  if (EXPECTED(property_info != NULL)) {",
          "1450:   if (EXPECTED((property_info->flags & ZEND_ACC_STATIC) == 0) &&",
          "1453:    value = &zobj->properties_table[property_info->offset];",
          "1456:    }",
          "1461: found:",
          "1474:    }",
          "1475:   }",
          "1476:  }",
          "",
          "[Removed Lines]",
          "1451:       property_info->offset >= 0 &&",
          "1452:       Z_TYPE(zobj->properties_table[property_info->offset]) != IS_UNDEF) {",
          "1454:    if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "1455:     value = Z_INDIRECT_P(value);",
          "1457:    goto found;",
          "1458:   }",
          "1459:   if (UNEXPECTED(zobj->properties != NULL)) {",
          "1460:    if ((value = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "1462:     switch (has_set_exists) {",
          "1463:      case 0:",
          "1464:       result = (Z_TYPE_P(value) != IS_NULL);",
          "1465:       break;",
          "1466:      default:",
          "1467:       result = zend_is_true(value TSRMLS_CC);",
          "1468:       break;",
          "1469:      case 2:",
          "1470:       result = 1;",
          "1471:       break;",
          "1472:     }",
          "1473:     goto exit;",
          "",
          "[Added Lines]",
          "1427:       property_info->offset >= 0) {",
          "1429:    if (Z_TYPE_P(value) != IS_UNDEF) {",
          "1430:     goto found;",
          "1432:   } else if (UNEXPECTED(zobj->properties != NULL) &&",
          "1433:              (value = zend_hash_find(zobj->properties, property_info->name)) != NULL) {",
          "1435:    switch (has_set_exists) {",
          "1436:     case 0:",
          "1437:      result = (Z_TYPE_P(value) != IS_NULL);",
          "1438:      break;",
          "1439:     default:",
          "1440:      result = zend_is_true(value TSRMLS_CC);",
          "1441:      break;",
          "1442:     case 2:",
          "1443:      result = 1;",
          "1444:      break;",
          "1446:    goto exit;",
          "",
          "---------------"
        ],
        "Zend/zend_objects.c||Zend/zend_objects.c": [
          "File: Zend/zend_objects.c -> Zend/zend_objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: {",
          "143:  int i;",
          "146:   for (i = 0; i < old_object->ce->default_properties_count; i++) {",
          "147:    zval_ptr_dtor(&new_object->properties_table[i]);",
          "148:    ZVAL_COPY(&new_object->properties_table[i], &old_object->properties_table[i]);",
          "149:   }",
          "151:   if (!new_object->properties) {",
          "152:    ALLOC_HASHTABLE(new_object->properties);",
          "153:    zend_hash_init(new_object->properties, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "154:   }",
          "171:    }",
          "172:   }",
          "173:  }",
          "",
          "[Removed Lines]",
          "145:  if (!old_object->properties) {",
          "150:  } else {",
          "155:   zend_hash_copy(new_object->properties, old_object->properties, zval_add_ref_unref);",
          "156:   if (old_object->properties_table) {",
          "157:    HashPosition pos;",
          "158:    zval *prop;",
          "159:    zend_property_info *prop_info;",
          "161:    for (zend_hash_internal_pointer_reset_ex(&old_object->ce->properties_info, &pos);",
          "162:         (prop_info = zend_hash_get_current_data_ptr_ex(&old_object->ce->properties_info, &pos)) != NULL;",
          "163:         zend_hash_move_forward_ex(&old_object->ce->properties_info, &pos)) {",
          "164:     if ((prop_info->flags & ZEND_ACC_STATIC) == 0) {",
          "165:      if ((prop = zend_hash_find(new_object->properties, prop_info->name)) != NULL) {",
          "166:       ZVAL_INDIRECT(&new_object->properties_table[prop_info->offset], prop);",
          "167:      } else {",
          "168:       ZVAL_UNDEF(&new_object->properties_table[prop_info->offset]);",
          "169:      }",
          "170:     }",
          "",
          "[Added Lines]",
          "145:  if (old_object->ce->default_properties_count) {",
          "150:  }",
          "151:  if (old_object->properties) {",
          "152:   HashPosition pos;",
          "153:   zval *prop, new_prop;",
          "154:   ulong num_key;",
          "155:   zend_string *key;",
          "162:   for (zend_hash_internal_pointer_reset_ex(old_object->properties, &pos);",
          "163:        (prop = zend_hash_get_current_data_ex(old_object->properties, &pos)) != NULL;",
          "164:        zend_hash_move_forward_ex(old_object->properties, &pos)) {",
          "165:    if (Z_TYPE_P(prop) == IS_INDIRECT) {",
          "166:     ZVAL_INDIRECT(&new_prop, new_object->properties_table + (Z_INDIRECT_P(prop) - old_object->properties_table));",
          "167:    } else {",
          "168:     ZVAL_COPY_VALUE(&new_prop, prop);",
          "169:     zval_add_ref_unref(&new_prop);",
          "170:    }",
          "171:    switch (zend_hash_get_current_key_ex(old_object->properties, &key, &num_key, 0, &pos)) {",
          "172:     case HASH_KEY_IS_STRING:",
          "173:      zend_hash_update(new_object->properties, key, &new_prop);",
          "174:      break;",
          "175:     case HASH_KEY_IS_LONG:",
          "176:      zend_hash_index_update(new_object->properties, num_key, &new_prop);",
          "177:      break;",
          "",
          "---------------"
        ],
        "Zend/zend_variables.c||Zend/zend_variables.c": [
          "File: Zend/zend_variables.c -> Zend/zend_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:     zend_error(E_NOTICE,\"Undefined variable: %s\", key->key->val);",
          "337:    }",
          "338:   } else {",
          "339:    if (is_ref) {",
          "340:     SEPARATE_ZVAL_TO_MAKE_IS_REF(p);",
          "341:     Z_ADDREF_P(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:    if (Z_TYPE_P(p) == IS_INDIRECT) {",
          "340:     p = Z_INDIRECT_P(p);",
          "341:     if (Z_TYPE_P(p) == IS_UNDEF) {",
          "342:      if (!is_ref) {",
          "343:       zend_error(E_NOTICE,\"Undefined variable: %s\", key->key->val);",
          "344:       p = &tmp;",
          "345:       ZVAL_NULL(&tmp);",
          "346:      } else {",
          "347:       ZVAL_NULL(p);",
          "348:      }",
          "349:     }",
          "350:    }",
          "",
          "---------------"
        ],
        "Zend/zend_vm_def.h||Zend/zend_vm_def.h": [
          "File: Zend/zend_vm_def.h -> Zend/zend_vm_def.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:   zend_error_noreturn(E_ERROR, \"Cannot use string offset as an object\");",
          "341:  }",
          "348:  if (UNEXPECTED(Z_TYPE_P(object) != IS_OBJECT)) {",
          "349:   make_real_object(object TSRMLS_CC);",
          "354:  }",
          "355:  if (UNEXPECTED(Z_ISREF_P(object))) {",
          "356:   object = Z_REFVAL_P(object);",
          "",
          "[Removed Lines]",
          "344:  if (OP1_TYPE == IS_CV && Z_TYPE_P(object) == IS_INDIRECT) {",
          "345:   object = Z_INDIRECT_P(object);",
          "346:  }",
          "351:   if (Z_TYPE_P(object) == IS_INDIRECT) {",
          "352:    object = Z_INDIRECT_P(object);",
          "353:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1048:   FREE_OP1();",
          "1049:  } else {",
          "1050:   target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "1056:   if (!target_symbol_table) {",
          "1057:    CHECK_EXCEPTION();",
          "",
          "[Removed Lines]",
          "1052:   if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "1053:    varname = Z_INDIRECT_P(varname);",
          "1054:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1076:      break;",
          "1077:     EMPTY_SWITCH_DEFAULT_CASE()",
          "1078:    }",
          "1079:   }",
          "1080:   switch (opline->extended_value & ZEND_FETCH_TYPE_MASK) {",
          "1081:    case ZEND_FETCH_GLOBAL:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:    Z_TYPE_P(retval) == IS_INDIRECT) {",
          "1069:    retval = Z_INDIRECT_P(retval);",
          "1070:    if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "1071:     switch (type) {",
          "1072:      case BP_VAR_R:",
          "1073:      case BP_VAR_UNSET:",
          "1074:       zend_error(E_NOTICE,\"Undefined variable: %s\", Z_STRVAL_P(varname));",
          "1076:      case BP_VAR_IS:",
          "1077:       retval = EX_VAR(opline->result.var);",
          "1078:       ZVAL_NULL(retval);",
          "1079:       break;",
          "1080:      case BP_VAR_RW:",
          "1081:       zend_error(E_NOTICE,\"Undefined variable: %s\", Z_STRVAL_P(varname));",
          "1083:      case BP_VAR_W:",
          "1084:       ZVAL_NULL(retval);",
          "1085:       break;",
          "1086:      EMPTY_SWITCH_DEFAULT_CASE()",
          "1087:     }",
          "1088:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1860:  zend_bool nested = EX(nested);",
          "1861:  zend_op_array *op_array = EX(op_array);",
          "1863:  EG(current_execute_data) = EX(prev_execute_data);",
          "1864:  EG(opline_ptr) = NULL;",
          "1866:   i_free_compiled_variables(execute_data TSRMLS_CC);",
          "1867:  }",
          "",
          "[Removed Lines]",
          "1865:  if (!EG(active_symbol_table)) {",
          "",
          "[Added Lines]",
          "1873:  if ((nested && EX(prev_execute_data)->opline->opcode == ZEND_INCLUDE_OR_EVAL) ||",
          "1874:      EG(active_symbol_table) == &EG(symbol_table)) {",
          "1875:   zend_detach_symbol_table(TSRMLS_C);",
          "1876:  }",
          "1881:  if (EG(active_symbol_table) != &EG(symbol_table)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1882:   LOAD_OPLINE();",
          "1883:   if (UNEXPECTED(opline->opcode == ZEND_INCLUDE_OR_EVAL)) {",
          "1885:    EX(function_state).function = (zend_function *) EX(op_array);",
          "1886:    EX(function_state).arguments = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1901:    zend_attach_symbol_table(TSRMLS_C);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3027:   zval_ptr_dtor(EX_VAR_NUM(opline->op2.var));",
          "3028:  }",
          "3029:  ZVAL_OBJ(EX_VAR_NUM(opline->op2.var), EG(exception));",
          "3035:  if (UNEXPECTED(EG(exception) != exception)) {",
          "3036:   EG(exception)->gc.refcount++;",
          "3037:   HANDLE_EXCEPTION();",
          "",
          "[Removed Lines]",
          "3030:  if (EG(active_symbol_table)) {",
          "3031:   zend_string *cv = CV_DEF_OF(opline->op2.var);",
          "3032:   zval *zv = zend_hash_update(&EG(active_symbol_table)->ht, cv, EX_VAR_NUM(opline->op2.var));",
          "3033:   ZVAL_INDIRECT(EX_VAR_NUM(opline->op2.var), zv);",
          "3034:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3222:  args = GET_OP1_ZVAL_PTR(BP_VAR_R);",
          "3223:  arg_num = opline->op2.num + EX(call)->num_additional_args + 1;",
          "3226:  switch (Z_TYPE_P(args)) {",
          "3227:   case IS_ARRAY: {",
          "3228:    HashTable *ht = Z_ARRVAL_P(args);",
          "",
          "[Removed Lines]",
          "3225: again:",
          "",
          "[Added Lines]",
          "3238: ZEND_VM_C_LABEL(send_again):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3350:   }",
          "3351:   case IS_REFERENCE:",
          "3352:    args = Z_REFVAL_P(args);",
          "3354:    break;",
          "3355:   default:",
          "3356:    zend_error(E_WARNING, \"Only arrays and Traversables can be unpacked\");",
          "",
          "[Removed Lines]",
          "3353:    goto again;",
          "",
          "[Added Lines]",
          "3366:    ZEND_VM_C_GOTO(send_again);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3420:    ZVAL_COPY_VALUE(&tmp, opline->op2.zv);",
          "3421:    zval_update_constant(&tmp, 0 TSRMLS_CC);",
          "3426:    ZVAL_COPY_VALUE(var_ptr, &tmp);",
          "3427:   } else {",
          "3428:    ZVAL_COPY_VALUE(var_ptr, opline->op2.zv);",
          "",
          "[Removed Lines]",
          "3423:    if (Z_TYPE_P(var_ptr) == IS_INDIRECT) {",
          "3424:     var_ptr = Z_INDIRECT_P(var_ptr);",
          "3425:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3467:  for (; arg_num <= arg_count; ++arg_num) {",
          "3468:   zval *param = zend_vm_stack_get_arg(arg_num TSRMLS_CC);",
          "3469:   zend_verify_arg_type((zend_function *) EG(active_op_array), arg_num, param, opline->extended_value TSRMLS_CC);",
          "3474:   zend_hash_next_index_insert(Z_ARRVAL_P(params), param);",
          "3475:   if (Z_REFCOUNTED_P(param)) {",
          "3476:    Z_ADDREF_P(param);",
          "",
          "[Removed Lines]",
          "3471:   if (Z_TYPE_P(params) == IS_INDIRECT) {",
          "3472:    params = Z_INDIRECT_P(params);",
          "3473:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3805:   zval *offset = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "3806:   ulong hval;",
          "3809:   switch (Z_TYPE_P(offset)) {",
          "3810:    case IS_DOUBLE:",
          "3811:     hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "3808: again:",
          "",
          "[Added Lines]",
          "3813: ZEND_VM_C_LABEL(add_again):",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3827:     break;",
          "3828:    case IS_REFERENCE:",
          "3829:     offset = Z_REFVAL_P(offset);",
          "3831:     break;",
          "3832:    default:",
          "3833:     zend_error(E_WARNING, \"Illegal offset type\");",
          "",
          "[Removed Lines]",
          "3830:     goto again;",
          "",
          "[Added Lines]",
          "3835:     ZEND_VM_C_GOTO(add_again);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3877:   }",
          "3878:  }",
          "3881:  switch (opline->extended_value) {",
          "3882:   case IS_NULL:",
          "3883:    convert_to_null(result);",
          "",
          "[Removed Lines]",
          "3880: again:",
          "",
          "[Added Lines]",
          "3885: ZEND_VM_C_LABEL(cast_again):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3917:    break;",
          "3918:   case IS_REFERENCE:",
          "3919:    result = Z_REFVAL_P(result);",
          "3921:    break;",
          "3922:  }",
          "3923:  FREE_OP1_IF_VAR();",
          "",
          "[Removed Lines]",
          "3920:    goto again;",
          "",
          "[Added Lines]",
          "3925:    ZEND_VM_C_GOTO(cast_again);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4061:  if (OP1_TYPE == IS_CV &&",
          "4062:      OP2_TYPE == IS_UNUSED &&",
          "4063:      (opline->extended_value & ZEND_QUICK_SET)) {",
          "4073:   CHECK_EXCEPTION();",
          "4074:   ZEND_VM_NEXT_OPCODE();",
          "4075:  }",
          "",
          "[Removed Lines]",
          "4064:   if (EG(active_symbol_table)) {",
          "4065:    zend_string *cv = CV_DEF_OF(opline->op1.var);",
          "4067:    zend_delete_variable(EX(prev_execute_data), &EG(active_symbol_table)->ht, cv TSRMLS_CC);",
          "4068:    ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "4069:   } else if (Z_TYPE_P(EX_VAR_NUM(opline->op1.var)) != IS_UNDEF) {",
          "4070:    zval_ptr_dtor(EX_VAR_NUM(opline->op1.var));",
          "4071:    ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "4072:   }",
          "",
          "[Added Lines]",
          "4069:   zval_ptr_dtor(EX_VAR_NUM(opline->op1.var));",
          "4070:   ZVAL_UNDEF(EX_VAR_NUM(opline->op1.var));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4112:   zend_std_unset_static_property(ce, Z_STR_P(varname), ((OP1_TYPE == IS_CONST) ? opline->op1.literal : NULL) TSRMLS_CC);",
          "4113:  } else {",
          "4114:   target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "4120:  }",
          "4122:  if (OP1_TYPE != IS_CONST && varname == &tmp) {",
          "",
          "[Removed Lines]",
          "4116:   if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "4117:    varname = Z_INDIRECT_P(varname);",
          "4118:   }",
          "4119:   zend_delete_variable(execute_data, target_symbol_table, Z_STR_P(varname) TSRMLS_CC);",
          "",
          "[Added Lines]",
          "4113:   zend_hash_del_ind(target_symbol_table, Z_STR_P(varname));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4145:  offset = GET_OP2_ZVAL_PTR(BP_VAR_R);",
          "4147:  if (OP1_TYPE != IS_VAR || container) {",
          "4150:   switch (Z_TYPE_P(container)) {",
          "4151:    case IS_ARRAY: {",
          "4152:     HashTable *ht = Z_ARRVAL_P(container);",
          "4154:     switch (Z_TYPE_P(offset)) {",
          "4155:      case IS_DOUBLE:",
          "4156:       hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "4149: container_again:",
          "4153: offset_again:",
          "",
          "[Added Lines]",
          "4142: ZEND_VM_C_LABEL(container_again):",
          "4146: ZEND_VM_C_LABEL(offset_again):",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4189:       break;",
          "4190:      case IS_REFERENCE:",
          "4191:       offset = Z_REFVAL_P(offset);",
          "4193:       break;",
          "4194:      default:",
          "4195:       zend_error(E_WARNING, \"Illegal offset type in unset\");",
          "",
          "[Removed Lines]",
          "4192:       goto offset_again;",
          "",
          "[Added Lines]",
          "4185:       ZEND_VM_C_GOTO(offset_again);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4222:    case IS_REFERENCE:",
          "4223:     container = Z_REFVAL_P(container);",
          "4225:     break;",
          "4226:    default:",
          "4227:     FREE_OP2();",
          "",
          "[Removed Lines]",
          "4224:     goto container_again;",
          "",
          "[Added Lines]",
          "4217:     ZEND_VM_C_GOTO(container_again);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4493:    fe_ht = Z_OBJPROP_P(array);",
          "4494:    zend_hash_set_pointer(fe_ht, (HashPointer*)EX_VAR((opline+1)->op1.var));",
          "4496:     if ((value = zend_hash_get_current_data(fe_ht)) == NULL) {",
          "4498:      ZEND_VM_JMP(EX(op_array)->opcodes+opline->op2.opline_num);",
          "4499:     }",
          "4500:     key_type = zend_hash_get_current_key_ex(fe_ht, &str_key, &int_key, 0, NULL);",
          "4502:     zend_hash_move_forward(fe_ht);",
          "4506:    if (key) {",
          "4507:     if (key_type == HASH_KEY_IS_LONG) {",
          "",
          "[Removed Lines]",
          "4495:    do {",
          "4503:    } while (key_type != HASH_KEY_IS_LONG &&",
          "4504:             zend_check_property_access(zobj, str_key TSRMLS_CC) != SUCCESS);",
          "",
          "[Added Lines]",
          "4488:    while (1) {",
          "4494:     if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "4495:      value = Z_INDIRECT_P(value);",
          "4496:      if (Z_TYPE_P(value) == IS_UNDEF) {",
          "4497:       zend_hash_move_forward(fe_ht);",
          "4498:       continue;",
          "4499:      }",
          "4500:     }",
          "4505:     if (key_type == HASH_KEY_IS_LONG ||",
          "4506:         zend_check_property_access(zobj, str_key TSRMLS_CC) == SUCCESS) {",
          "4507:      break;",
          "4508:     }",
          "4509:    }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4599:      (opline->extended_value & ZEND_QUICK_SET)) {",
          "4600:   if (Z_TYPE_P(EX_VAR_NUM(opline->op1.var)) != IS_UNDEF) {",
          "4601:    value = EX_VAR_NUM(opline->op1.var);",
          "4605:    if (Z_TYPE_P(value) == IS_REFERENCE) {",
          "4606:     value = Z_REFVAL_P(value);",
          "4607:    }",
          "4614:   } else {",
          "4615:    isset = 0;",
          "4616:   }",
          "",
          "[Removed Lines]",
          "4602:    if (Z_TYPE_P(value) == IS_INDIRECT) {",
          "4603:     value = Z_INDIRECT_P(value);",
          "4604:    }",
          "4608:   } else if (EG(active_symbol_table)) {",
          "4609:    zend_string *cv = CV_DEF_OF(opline->op1.var);",
          "4611:    if ((value = zend_hash_find(&EG(active_symbol_table)->ht, cv)) == NULL) {",
          "4612:     isset = 0;",
          "4613:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4648:    }",
          "4649:   } else {",
          "4650:    target_symbol_table = zend_get_target_symbol_table(opline->extended_value & ZEND_FETCH_TYPE_MASK TSRMLS_CC);",
          "4655:    if ((value = zend_hash_find(target_symbol_table, Z_STR_P(varname))) == NULL) {",
          "4656:     isset = 0;",
          "4657:    }",
          "",
          "[Removed Lines]",
          "4652:    if (OP1_TYPE == IS_CV && Z_TYPE_P(varname) == IS_INDIRECT) {",
          "4653:     varname = Z_INDIRECT_P(varname);",
          "4654:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4705:   ht = Z_ARRVAL_P(container);",
          "4708:   switch (Z_TYPE_P(offset)) {",
          "4709:    case IS_DOUBLE:",
          "4710:     hval = zend_dval_to_lval(Z_DVAL_P(offset));",
          "",
          "[Removed Lines]",
          "4707: again:",
          "",
          "[Added Lines]",
          "4699: ZEND_VM_C_LABEL(isset_again):",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4722:     if (OP2_TYPE != IS_CONST) {",
          "4723:      ZEND_HANDLE_NUMERIC_EX(Z_STRVAL_P(offset), Z_STRLEN_P(offset)+1, hval, ZEND_VM_C_GOTO(num_index_prop));",
          "4724:     }",
          "4726:      isset = 1;",
          "4727:     }",
          "4728:     break;",
          "4729:    case IS_NULL:",
          "4731:      isset = 1;",
          "4732:     }",
          "4733:     break;",
          "4734:    case IS_REFERENCE:",
          "4735:     offset = Z_REFVAL_P(offset);",
          "4737:     break;",
          "4738:    default:",
          "4739:     zend_error(E_WARNING, \"Illegal offset type in isset or empty\");",
          "",
          "[Removed Lines]",
          "4725:     if ((value = zend_hash_find(ht, Z_STR_P(offset))) != NULL) {",
          "4730:     if ((value = zend_hash_find(ht, STR_EMPTY_ALLOC())) != NULL) {",
          "4736:     goto again;",
          "",
          "[Added Lines]",
          "4717:     if ((value = zend_hash_find_ind(ht, Z_STR_P(offset))) != NULL) {",
          "4722:     if ((value = zend_hash_find_ind(ht, STR_EMPTY_ALLOC())) != NULL) {",
          "4728:     ZEND_VM_C_GOTO(isset_again);",
          "",
          "---------------"
        ],
        "ext/reflection/php_reflection.c||ext/reflection/php_reflection.c": [
          "File: ext/reflection/php_reflection.c -> ext/reflection/php_reflection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: static zend_object_handlers reflection_object_handlers;",
          "227: {",
          "228:  zval *value;",
          "231:   RETURN_FALSE;",
          "232:  }",
          "234:  ZVAL_DUP(return_value, value);",
          "235: }",
          "",
          "[Removed Lines]",
          "230:  if ((value = zend_hash_str_find(Z_OBJPROP_P(object), name, name_len)) == NULL) {",
          "",
          "[Added Lines]",
          "227: {",
          "228:  zval *value;",
          "230:  if ((value = zend_hash_str_find_ind(Z_OBJPROP_P(object), name, name_len)) == NULL) {",
          "231:   return NULL;",
          "232:  }",
          "233:  return value;",
          "234: }",
          "240:  if ((value = _default_load_entry(object, name, name_len TSRMLS_CC)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3102:  if (zend_parse_parameters_none() == FAILURE) {",
          "3103:   return;",
          "3104:  }",
          "3106:   RETURN_FALSE;",
          "3107:  }",
          "3108:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3105:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3114:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3125:  if (zend_parse_parameters_none() == FAILURE) {",
          "3126:   return;",
          "3127:  }",
          "3129:   RETURN_FALSE;",
          "3130:  }",
          "3131:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3128:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3137:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3148:  if (zend_parse_parameters_none() == FAILURE) {",
          "3149:   return;",
          "3150:  }",
          "3152:   RETURN_FALSE;",
          "3153:  }",
          "3154:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "3151:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "3160:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4654:  if (zend_parse_parameters_none() == FAILURE) {",
          "4655:   return;",
          "4656:  }",
          "4658:   RETURN_FALSE;",
          "4659:  }",
          "4660:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4657:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4666:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4677:  if (zend_parse_parameters_none() == FAILURE) {",
          "4678:   return;",
          "4679:  }",
          "4681:   RETURN_FALSE;",
          "4682:  }",
          "4683:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4680:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4689:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4700:  if (zend_parse_parameters_none() == FAILURE) {",
          "4701:   return;",
          "4702:  }",
          "4704:   RETURN_FALSE;",
          "4705:  }",
          "4706:  if (Z_TYPE_P(name) == IS_STRING",
          "",
          "[Removed Lines]",
          "4703:  if ((name = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"name\", sizeof(\"name\")-1)) == NULL) {",
          "",
          "[Added Lines]",
          "4712:  if ((name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1) TSRMLS_CC) == NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4937: {",
          "4938:  reflection_object *intern;",
          "4939:  property_reference *ref;",
          "4941:  zval *member_p = NULL;",
          "4943:  METHOD_NOTSTATIC(reflection_property_ptr);",
          "4944:  GET_REFLECTION_OBJECT_PTR(ref);",
          "4946:  if (!(ref->prop.flags & (ZEND_ACC_PUBLIC | ZEND_ACC_IMPLICIT_PUBLIC)) && intern->ignore_visibility == 0) {",
          "4948:   zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC,",
          "4951:   return;",
          "4952:  }",
          "",
          "[Removed Lines]",
          "4940:  zval *object, name;",
          "4947:   _default_get_entry(getThis(), \"name\", sizeof(\"name\")-1, &name TSRMLS_CC);",
          "4949:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL(name));",
          "4950:   zval_dtor(&name);",
          "",
          "[Added Lines]",
          "4949:  zval *object, *name;",
          "4956:   name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1 TSRMLS_CC);",
          "4958:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL_P(name));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4984:  reflection_object *intern;",
          "4985:  property_reference *ref;",
          "4986:  zval *variable_ptr;",
          "4988:  zval *value;",
          "4989:  zval *tmp;",
          "",
          "[Removed Lines]",
          "4987:  zval *object, name;",
          "",
          "[Added Lines]",
          "4995:  zval *object, *name;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4992:  GET_REFLECTION_OBJECT_PTR(ref);",
          "4994:  if (!(ref->prop.flags & ZEND_ACC_PUBLIC) && intern->ignore_visibility == 0) {",
          "4996:   zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC,",
          "4999:   return;",
          "5000:  }",
          "",
          "[Removed Lines]",
          "4995:   _default_get_entry(getThis(), \"name\", sizeof(\"name\")-1, &name TSRMLS_CC);",
          "4997:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL(name));",
          "4998:   zval_dtor(&name);",
          "",
          "[Added Lines]",
          "5003:   name = _default_load_entry(getThis(), \"name\", sizeof(\"name\")-1 TSRMLS_CC);",
          "5005:    \"Cannot access non-public member %s::%s\", intern->ce->name->val, Z_STRVAL_P(name));",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:  case IS_STRING:",
          "325:     offset_key = Z_STR_P(offset);",
          "326: fetch_dim_string:",
          "328:    switch (type) {",
          "329:     case BP_VAR_R:",
          "330:      zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "",
          "[Removed Lines]",
          "327:   if ((retval = (zend_symtable_find(ht, offset_key))) == NULL) {",
          "",
          "[Added Lines]",
          "327:   retval = zend_symtable_find(ht, offset_key);",
          "328:   if (retval) {",
          "329:    if (Z_TYPE_P(retval) == IS_INDIRECT) {",
          "330:     retval = Z_INDIRECT_P(retval);",
          "331:     if (Z_TYPE_P(retval) == IS_UNDEF) {",
          "332:      switch (type) {",
          "333:       case BP_VAR_R:",
          "334:        zend_error(E_NOTICE, \"Undefined index: %s\", offset_key->val);",
          "335:       case BP_VAR_UNSET:",
          "336:       case BP_VAR_IS:",
          "337:        retval = &EG(uninitialized_zval);",
          "338:        break;",
          "339:       case BP_VAR_RW:",
          "340:        zend_error(E_NOTICE,\"Undefined index: %s\", offset_key->val);",
          "341:       case BP_VAR_W: {",
          "342:        ZVAL_NULL(retval);",
          "343:       }",
          "344:      }",
          "345:     }",
          "346:    }",
          "347:   } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:     zend_error(E_WARNING, \"Modification of ArrayObject during sorting is prohibited\");",
          "465:     return;",
          "466:    }",
          "468:    return;",
          "469:   case IS_DOUBLE:",
          "470:   case IS_RESOURCE:",
          "",
          "[Removed Lines]",
          "467:    zend_symtable_update(ht, Z_STR_P(offset), value);",
          "",
          "[Added Lines]",
          "488:    zend_symtable_update_ind(ht, Z_STR_P(offset), value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "527:    }",
          "528:   } else {",
          "544:      } else {",
          "557:      }",
          "558:     }",
          "559:    }",
          "560:   }",
          "561:   break;",
          "",
          "[Removed Lines]",
          "529:    if (zend_symtable_del(ht, Z_STR_P(offset)) == FAILURE) {",
          "530:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "531:    } else {",
          "532:     spl_array_object *obj = intern;",
          "534:     while (1) {",
          "535:      if ((obj->ar_flags & SPL_ARRAY_IS_SELF) != 0) {",
          "536:       break;",
          "537:      } else if (Z_TYPE(obj->array) == IS_OBJECT) {",
          "538:          if ((obj->ar_flags & SPL_ARRAY_USE_OTHER) == 0) {",
          "539:        obj = Z_SPLARRAY_P(&obj->array);",
          "540:           break;",
          "541:       } else {",
          "542:        obj = Z_SPLARRAY_P(&obj->array);",
          "543:          }",
          "545:       obj = NULL;",
          "546:       break;",
          "547:      }",
          "548:     }",
          "549:     if (obj) {",
          "550:      zend_property_info *property_info = zend_get_property_info(obj->std.ce, offset, 1 TSRMLS_CC);",
          "552:      if (property_info &&",
          "553:          (property_info->flags & ZEND_ACC_STATIC) == 0 &&",
          "554:          property_info->offset >= 0) {",
          "555:          zval_ptr_dtor(&obj->std.properties_table[property_info->offset]);",
          "556:       ZVAL_UNDEF(&obj->std.properties_table[property_info->offset]);",
          "",
          "[Added Lines]",
          "551: #if 0",
          "552:    if (zend_symtable_del_ind(ht, Z_STR_P(offset)) == FAILURE) {",
          "553: #else",
          "554:    zval *data = zend_symtable_find(ht, Z_STR_P(offset));",
          "556:    if (data) {",
          "557:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "558:      data = Z_INDIRECT_P(data);",
          "559:      if (Z_TYPE_P(data) == IS_UNDEF) {",
          "560:       zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "562:       zval_ptr_dtor(data);",
          "563:       ZVAL_UNDEF(data);",
          "566:      spl_array_rewind(intern TSRMLS_CC);",
          "567:     } else if (zend_symtable_del(ht, Z_STR_P(offset)) == FAILURE) {",
          "568:      zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "570:    } else {",
          "571: #endif",
          "572:     zend_error(E_NOTICE,\"Undefined index: %s\", Z_STRVAL_P(offset));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "610:   case IS_STRING:",
          "611:    {",
          "612:     HashTable *ht = spl_array_get_hash_table(intern, 0 TSRMLS_CC);",
          "614:      switch (check_empty) {",
          "615:       case 0:",
          "616:        return Z_TYPE_P(tmp) != IS_NULL;",
          "",
          "[Removed Lines]",
          "613:     if ((tmp = zend_symtable_find(ht, Z_STR_P(offset))) != NULL) {",
          "",
          "[Added Lines]",
          "627:     if ((tmp = zend_symtable_find_ind(ht, Z_STR_P(offset))) != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "919: {",
          "920:  zend_string *string_key;",
          "921:  ulong num_key;",
          "923:  if (Z_TYPE(intern->array) == IS_OBJECT) {",
          "924:   do {",
          "925:    if (zend_hash_get_current_key_ex(aht, &string_key, &num_key, 0, &intern->pos) == HASH_KEY_IS_STRING) {",
          "927:      return SUCCESS;",
          "928:     }",
          "929:    } else {",
          "",
          "[Removed Lines]",
          "926:     if (!string_key->len || string_key->val[0]) {",
          "",
          "[Added Lines]",
          "936:  zval *data;",
          "941:     data = zend_hash_get_current_data_ex(aht, &intern->pos);",
          "942:     if (data && Z_TYPE_P(data) == IS_INDIRECT &&",
          "943:         Z_TYPE_P(data = Z_INDIRECT_P(data)) == IS_UNDEF) {",
          "945:     } else if (!string_key->len || string_key->val[0]) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1002:  if (object->ar_flags & SPL_ARRAY_OVERLOADED_CURRENT) {",
          "1003:   return zend_user_it_get_current_data(iter TSRMLS_CC);",
          "1004:  } else {",
          "1006:  }",
          "1007: }",
          "",
          "[Removed Lines]",
          "1005:   return zend_hash_get_current_data_ex(aht, &object->pos);",
          "",
          "[Added Lines]",
          "1024:   zval *data = zend_hash_get_current_data_ex(aht, &object->pos);",
          "1025:   if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "1026:    data = Z_INDIRECT_P(data);",
          "1027:   }",
          "1028:   return data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1096:    ar_flags = other->ar_flags & ~SPL_ARRAY_INT_MASK;",
          "1097:   }",
          "1098:   ar_flags |= SPL_ARRAY_USE_OTHER;",
          "1100:  } else {",
          "1101:   if (Z_TYPE_P(array) != IS_OBJECT && Z_TYPE_P(array) != IS_ARRAY) {",
          "1102:    zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0 TSRMLS_CC);",
          "1103:    return;",
          "1104:   }",
          "1105:   zval_ptr_dtor(&intern->array);",
          "1107:  }",
          "1108:  if (Z_TYPE_P(array) == IS_OBJECT && Z_OBJ_P(object) == Z_OBJ_P(array)) {",
          "1109:   intern->ar_flags |= SPL_ARRAY_IS_SELF;",
          "",
          "[Removed Lines]",
          "1099:   intern->array = *array;",
          "1106:   intern->array = *array;",
          "",
          "[Added Lines]",
          "1122:   ZVAL_COPY_VALUE(&intern->array, array);",
          "1129:   ZVAL_COPY_VALUE(&intern->array, array);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1507:  if ((entry = zend_hash_get_current_data_ex(aht, &intern->pos)) == NULL) {",
          "1508:   return;",
          "1509:  }",
          "1510:  RETVAL_ZVAL(entry, 1, 0);",
          "1511: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1533:  if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "1534:   entry = Z_INDIRECT_P(entry);",
          "1535:   if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "1536:    return;",
          "1537:   }",
          "1538:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1765:  }",
          "1772:  zval_ptr_dtor(&members);",
          "",
          "[Removed Lines]",
          "1768:  if (!intern->std.properties) {",
          "1769:   rebuild_object_properties(&intern->std);",
          "1770:  }",
          "1771:  zend_hash_copy(intern->std.properties, Z_ARRVAL(members), (copy_ctor_func_t) zval_add_ref);",
          "",
          "[Added Lines]",
          "1797:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "",
          "---------------"
        ],
        "ext/standard/array.c||ext/standard/array.c": [
          "File: ext/standard/array.c -> ext/standard/array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:  first = &f->val;",
          "371:  second = &s->val;",
          "373:  if (ARRAYG(compare_func)(&result, first, second TSRMLS_CC) == FAILURE) {",
          "374:   return 0;",
          "375:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  if (Z_TYPE_P(first) == IS_INDIRECT) {",
          "374:   first = Z_INDIRECT_P(first);",
          "375:  }",
          "376:  if (Z_TYPE_P(second) == IS_INDIRECT) {",
          "377:   second = Z_INDIRECT_P(second);",
          "378:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1057:  zend_hash_internal_pointer_reset(target_hash);",
          "1058:  while (!EG(exception) && (zv = zend_hash_get_current_data(target_hash)) != NULL) {",
          "1059:   ZVAL_COPY(&args[0], zv);",
          "1060:   if (recursive &&",
          "1061:       (Z_TYPE(args[0]) == IS_ARRAY ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065:   if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "1066:    zv = Z_INDIRECT_P(zv);",
          "1067:    if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "1068:     zend_hash_move_forward(target_hash);",
          "1069:     continue;",
          "1070:    }",
          "1071:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1332:  while ((entry = zend_hash_get_current_data_ex(Z_ARRVAL_P(var_array), &pos)) != NULL) {",
          "1333:   zval final_name;",
          "1335:   ZVAL_NULL(&final_name);",
          "1337:   key_type = zend_hash_get_current_key_ex(Z_ARRVAL_P(var_array), &var_name, &num_key, 0, &pos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1348:   if (Z_TYPE_P(entry) == IS_INDIRECT) {",
          "1349:    entry = Z_INDIRECT_P(entry);",
          "1350:    if (Z_TYPE_P(entry) == IS_UNDEF) {",
          "1351:     zend_hash_move_forward_ex(Z_ARRVAL_P(var_array), &pos);",
          "1352:     continue;",
          "1353:    }",
          "1354:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410:     Z_ADDREF_P(entry);",
          "1412:     if ((orig_var = zend_hash_find(&EG(active_symbol_table)->ht, Z_STR(final_name))) != NULL) {",
          "1413:      zval_ptr_dtor(orig_var);",
          "1414:      ZVAL_COPY_VALUE(orig_var, entry);",
          "1415:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1434:      if (Z_TYPE_P(orig_var) == IS_INDIRECT) {",
          "1435:       orig_var = Z_INDIRECT_P(orig_var);",
          "1436:      }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1417:     }",
          "1418:    } else {",
          "1419:     ZVAL_DUP(&data, entry);",
          "1421:    }",
          "1422:    count++;",
          "1423:   }",
          "",
          "[Removed Lines]",
          "1420:     ZEND_SET_SYMBOL_WITH_LENGTH(&EG(active_symbol_table)->ht, Z_STRVAL(final_name), Z_STRLEN(final_name), &data, 1, 0);",
          "",
          "[Added Lines]",
          "1444:     zend_set_local_var(Z_STRVAL(final_name), Z_STRLEN(final_name), &data, 1 TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:   entry = Z_REFVAL_P(entry);",
          "1443:  }",
          "1444:  if (Z_TYPE_P(entry) == IS_STRING) {",
          "1446:    ZVAL_DUP(&data, value_ptr);",
          "1447:    zend_hash_update(Z_ARRVAL_P(return_value), Z_STR_P(entry), &data);",
          "1448:   }",
          "1451:   HashPosition pos;",
          "1453:   if ((Z_ARRVAL_P(entry)->nApplyCount > 1)) {",
          "",
          "[Removed Lines]",
          "1445:   if ((value_ptr = zend_hash_find(eg_active_symbol_table, Z_STR_P(entry))) != NULL) {",
          "1449:  }",
          "1450:  else if (Z_TYPE_P(entry) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "1469:   if ((value_ptr = zend_hash_find_ind(eg_active_symbol_table, Z_STR_P(entry))) != NULL) {",
          "1473:  } else if (Z_TYPE_P(entry) == IS_ARRAY) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1460:   zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(entry), &pos);",
          "1461:   while ((value_ptr = zend_hash_get_current_data_ex(Z_ARRVAL_P(entry), &pos)) != NULL) {",
          "1462:    php_compact_var(eg_active_symbol_table, return_value, value_ptr TSRMLS_CC);",
          "1463:    zend_hash_move_forward_ex(Z_ARRVAL_P(entry), &pos);",
          "1464:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485:    if (Z_TYPE_P(value_ptr) == IS_INDIRECT) {",
          "1486:     value_ptr = Z_INDIRECT_P(value_ptr);",
          "1487:     if (Z_TYPE_P(value_ptr) == IS_UNDEF) {",
          "1488:      zend_hash_move_forward_ex(Z_ARRVAL_P(entry), &pos);",
          "1489:      continue;",
          "1490:     }",
          "1491:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1963:  } else {",
          "1964:   zend_hash_internal_pointer_reset(Z_ARRVAL_P(stack));",
          "1965:  }",
          "1967:  RETVAL_ZVAL_FAST(val);",
          "",
          "[Removed Lines]",
          "1966:  val = zend_hash_get_current_data(Z_ARRVAL_P(stack));",
          "",
          "[Added Lines]",
          "1996:  while (1) {",
          "1997:   val = zend_hash_get_current_data(Z_ARRVAL_P(stack));",
          "1998:   if (!val) {",
          "1999:    return;",
          "2000:   } else if (Z_TYPE_P(val) == IS_INDIRECT) {",
          "2001:    val = Z_INDIRECT_P(val);",
          "2002:    if (Z_TYPE_P(val) == IS_UNDEF) {",
          "2003:     zend_hash_move_forward(Z_ARRVAL_P(stack));",
          "2004:     continue;",
          "2005:    }",
          "2006:   }",
          "2007:   break;",
          "2008:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:  new_hash = php_splice(Z_ARRVAL_P(stack), 0, 0, &args[0], argc, NULL);",
          "2047:  old_hash = *Z_ARRVAL_P(stack);",
          "2052:  FREE_HASHTABLE(new_hash);",
          "2053:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2048:  if (Z_ARRVAL_P(stack) == &EG(symbol_table).ht) {",
          "2049:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2050:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2130:  old_hash = *Z_ARRVAL_P(array);",
          "2135:  FREE_HASHTABLE(new_hash);",
          "2136:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2131:  if (Z_ARRVAL_P(array) == &EG(symbol_table).ht) {",
          "2132:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2133:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2791:  old_hash = *Z_ARRVAL_P(return_value);",
          "2796:  FREE_HASHTABLE(new_hash);",
          "2797:  zend_hash_destroy(&old_hash);",
          "",
          "[Removed Lines]",
          "2792:  if (Z_ARRVAL_P(return_value) == &EG(symbol_table).ht) {",
          "2793:   zend_reset_all_cv(&EG(symbol_table) TSRMLS_CC);",
          "2794:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2911:  for (i = 0, idx = 0; idx < Z_ARRVAL_P(array)->nNumUsed; idx++) {",
          "2912:   p = Z_ARRVAL_P(array)->arData + idx;",
          "2913:   if (Z_TYPE(p->val) == IS_UNDEF) continue;",
          "2914:   arTmp[i].b = *p;",
          "2915:   arTmp[i].i = i;",
          "2916:   i++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2947:   if (Z_TYPE(p->val) == IS_INDIRECT && Z_TYPE_P(Z_INDIRECT(p->val)) == IS_UNDEF) continue;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2954:  first = a;",
          "2955:  second = b;",
          "2957:  if (string_compare_function(&result, first, second TSRMLS_CC) == FAILURE) {",
          "2958:   return 0;",
          "2959:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2991:  if (Z_TYPE_P(first) == IS_INDIRECT) {",
          "2992:   first = Z_INDIRECT_P(first);",
          "2993:  }",
          "2994:  if (Z_TYPE_P(second) == IS_INDIRECT) {",
          "2995:   second = Z_INDIRECT_P(second);",
          "2996:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2985:  zval args[2];",
          "2986:  zval retval;",
          "2988:  ZVAL_COPY_VALUE(&args[0], a);",
          "2989:  ZVAL_COPY_VALUE(&args[1], b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3028:  if (Z_TYPE_P(a) == IS_INDIRECT) {",
          "3029:   a = Z_INDIRECT_P(a);",
          "3030:  }",
          "3031:  if (Z_TYPE_P(b) == IS_INDIRECT) {",
          "3032:   b = Z_INDIRECT_P(b);",
          "3033:  }",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4267:  if (Z_TYPE(PG(http_globals)[TRACK_VARS_SERVER]) != IS_UNDEF &&",
          "4270:  ) {",
          "4271:   int pos = 0;",
          "4272:   zval *entry;",
          "",
          "[Removed Lines]",
          "4268:   ((args = zend_hash_str_find(HASH_OF(&PG(http_globals)[TRACK_VARS_SERVER]), \"argv\", sizeof(\"argv\")-1)) != NULL ||",
          "4269:   (args = zend_hash_str_find(&EG(symbol_table).ht, \"argv\", sizeof(\"argv\")-1)) != NULL) && Z_TYPE_P(args) == IS_ARRAY",
          "4274:   argc = zend_hash_num_elements(Z_ARRVAL_P(args));",
          "",
          "[Added Lines]",
          "4268:   ((args = zend_hash_str_find_ind(HASH_OF(&PG(http_globals)[TRACK_VARS_SERVER]), \"argv\", sizeof(\"argv\")-1)) != NULL ||",
          "4269:   (args = zend_hash_str_find_ind(&EG(symbol_table).ht, \"argv\", sizeof(\"argv\")-1)) != NULL)",
          "4274:    if (Z_TYPE_P(args) != IS_ARRAY) {",
          "4275:     RETURN_FALSE;",
          "4276:    }",
          "4277:    argc = zend_hash_num_elements(Z_ARRVAL_P(args));",
          "",
          "---------------"
        ],
        "ext/standard/http.c||ext/standard/http.c": [
          "File: ext/standard/http.c -> ext/standard/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Error traversing form data array\");",
          "83:    return FAILURE;",
          "84:   }",
          "85:   if (Z_TYPE_P(zdata) == IS_ARRAY || Z_TYPE_P(zdata) == IS_OBJECT) {",
          "86:    if (key_type == HASH_KEY_IS_STRING) {",
          "87:     zend_string *ekey;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   if (Z_TYPE_P(zdata) == IS_INDIRECT) {",
          "86:    zdata = Z_INDIRECT_P(zdata);",
          "87:    if (Z_TYPE_P(zdata) == IS_UNDEF) {",
          "88:     continue;",
          "89:    }",
          "90:   }",
          "",
          "---------------"
        ],
        "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c": [
          "File: ext/standard/http_fopen_wrapper.c -> ext/standard/http_fopen_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:  if (header_init) {",
          "660:   zval ztmp;",
          "661:   array_init(&ztmp);",
          "663:  }",
          "665:  response_header = zend_hash_str_find(&EG(active_symbol_table)->ht, \"http_response_header\", sizeof(\"http_response_header\")-1);",
          "",
          "[Removed Lines]",
          "662:   ZEND_SET_SYMBOL(&EG(active_symbol_table)->ht, \"http_response_header\", &ztmp);",
          "",
          "[Added Lines]",
          "662:   zend_set_local_var(\"http_response_header\", sizeof(\"http_response_header\")-1, &ztmp, 0 TSRMLS_CC);",
          "",
          "---------------"
        ],
        "ext/standard/var.c||ext/standard/var.c": [
          "File: ext/standard/var.c -> ext/standard/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define COMMON (is_ref ? \"&\" : \"\")",
          "39: {",
          "40:  int level;",
          "42:  level = va_arg(args, int);",
          "45:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: static uint zend_obj_num_elements(HashTable *ht)",
          "39: {",
          "40:  Bucket *p;",
          "41:  uint idx;",
          "42:  uint num;",
          "44:  num = ht->nNumOfElements;",
          "45:  for (idx = 0; idx < ht->nNumUsed; idx++) {",
          "46:   p = ht->arData + idx;",
          "47:   if (Z_TYPE(p->val) == IS_UNDEF) continue;",
          "48:   if (Z_TYPE(p->val) == IS_INDIRECT) {",
          "49:    if (Z_TYPE_P(Z_INDIRECT(p->val)) == IS_UNDEF) {",
          "50:     num--;",
          "51:    }",
          "52:   }",
          "53:  }",
          "54:  return num;",
          "55: }",
          "63:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "64:   zv = Z_INDIRECT_P(zv);",
          "65:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "66:    return 0;",
          "67:   }",
          "68:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  level = va_arg(args, int);",
          "64:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "89:   zv = Z_INDIRECT_P(zv);",
          "90:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "91:    return 0;",
          "92:   }",
          "93:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:    if (Z_OBJ_HANDLER_P(struc, get_class_name)) {",
          "138:     class_name = Z_OBJ_HANDLER_P(struc, get_class_name)(struc, 0 TSRMLS_CC);",
          "140:     STR_RELEASE(class_name);",
          "141:    } else {",
          "143:    }",
          "144:    php_element_dump_func = php_object_property_dump;",
          "145:  head_done:",
          "",
          "[Removed Lines]",
          "139:     php_printf(\"%sobject(%s)#%d (%d) {\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0);",
          "142:     php_printf(\"%sobject(unknown class)#%d (%d) {\\n\", COMMON, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0);",
          "",
          "[Added Lines]",
          "170:     php_printf(\"%sobject(%s)#%d (%d) {\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0);",
          "173:     php_printf(\"%sobject(unknown class)#%d (%d) {\\n\", COMMON, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:  level = va_arg(args, int);",
          "204:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "235:   zv = Z_INDIRECT_P(zv);",
          "236:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "237:    return 0;",
          "238:   }",
          "239:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:  level = va_arg(args, int);",
          "229:   php_printf(\"%*c[%ld]=>\\n\", level + 1, ' ', hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "266:   zv = Z_INDIRECT_P(zv);",
          "267:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "268:    return 0;",
          "269:   }",
          "270:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:   php_printf(\"%*c\", level - 1, ' ');",
          "260:  }",
          "270:  switch (Z_TYPE_P(struc)) {",
          "271:  case IS_BOOL:",
          "272:   php_printf(\"%sbool(%s)\\n\", COMMON, Z_LVAL_P(struc)?\"true\":\"false\");",
          "",
          "[Removed Lines]",
          "262:  if (Z_TYPE_P(struc) == IS_REFERENCE) {",
          "264:   if (Z_REFCOUNT_P(struc) > 1) {",
          "265:    is_ref = 1;",
          "266:   }",
          "267:   struc = Z_REFVAL_P(struc);",
          "268:  }",
          "",
          "[Added Lines]",
          "305: again:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "301:    return;",
          "302:   }",
          "303:   class_name = Z_OBJ_HANDLER_P(struc, get_class_name)(struc, 0 TSRMLS_CC);",
          "305:   STR_RELEASE(class_name);",
          "306:   zval_element_dump_func = zval_object_property_dump;",
          "307: head_done:",
          "",
          "[Removed Lines]",
          "304:   php_printf(\"%sobject(%s)#%d (%d) refcount(%u){\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_hash_num_elements(myht) : 0, Z_REFCOUNT_P(struc));",
          "",
          "[Added Lines]",
          "340:   php_printf(\"%sobject(%s)#%d (%d) refcount(%u){\\n\", COMMON, class_name->val, Z_OBJ_HANDLE_P(struc), myht ? zend_obj_num_elements(myht) : 0, Z_REFCOUNT_P(struc));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "322:   php_printf(\"%sresource(%ld) of type (%s) refcount(%u)\\n\", COMMON, Z_RES_P(struc)->handle, type_name ? type_name : \"Unknown\", Z_REFCOUNT_P(struc));",
          "323:   break;",
          "324:  }",
          "325:  default:",
          "326:   php_printf(\"%sUNKNOWN:0\\n\", COMMON);",
          "327:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:  case IS_REFERENCE:",
          "363:   if (Z_REFCOUNT_P(struc) > 1) {",
          "364:    is_ref = 1;",
          "365:   }",
          "366:   struc = Z_REFVAL_P(struc);",
          "367:   goto again;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:  level = va_arg(args, int);",
          "365:  buf = va_arg(args, smart_str *);",
          "368:   buffer_append_spaces(buf, level+1);",
          "369:   smart_str_append_long(buf, (long) hash_key->h);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "411:   zv = Z_INDIRECT_P(zv);",
          "412:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "413:    return 0;",
          "414:   }",
          "415:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "400:  level = va_arg(args, int);",
          "401:  buf = va_arg(args, smart_str *);",
          "403:  buffer_append_spaces(buf, level + 2);",
          "404:  if (hash_key->key != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:  if (Z_TYPE_P(zv) == IS_INDIRECT) {",
          "453:   zv = Z_INDIRECT_P(zv);",
          "454:   if (Z_TYPE_P(zv) == IS_UNDEF) {",
          "455:    return 0;",
          "456:   }",
          "457:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "683:    }",
          "684:    propers = Z_OBJPROP_P(struc);",
          "685:    if ((d = zend_hash_find(propers, Z_STR_P(name))) != NULL) {",
          "686:     php_var_serialize_string(buf, Z_STRVAL_P(name), Z_STRLEN_P(name));",
          "687:     php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "688:    } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "743:      d = Z_INDIRECT_P(d);",
          "744:      if (Z_TYPE_P(d) == IS_UNDEF) {",
          "745:       continue;",
          "746:      }",
          "747:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "694:      do {",
          "695:       priv_name = zend_mangle_property_name(ce->name->val, ce->name->len, Z_STRVAL_P(name), Z_STRLEN_P(name), ce->type & ZEND_INTERNAL_CLASS);",
          "696:       if ((d = zend_hash_find(propers, priv_name)) != NULL) {",
          "697:        php_var_serialize_string(buf, priv_name->val, priv_name->len);",
          "698:        STR_FREE(priv_name);",
          "699:        php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:        if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "760:         d = Z_INDIRECT_P(d);",
          "761:         if (Z_TYPE_P(d) == IS_UNDEF) {",
          "762:          STR_FREE(prot_name);",
          "763:          break;",
          "764:         }",
          "765:        }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "702:       STR_FREE(priv_name);",
          "703:       prot_name = zend_mangle_property_name(\"*\", 1, Z_STRVAL_P(name), Z_STRLEN_P(name), ce->type & ZEND_INTERNAL_CLASS);",
          "704:       if ((d = zend_hash_find(propers, prot_name)) != NULL) {",
          "705:        php_var_serialize_string(buf, prot_name->val, prot_name->len);",
          "706:        STR_FREE(prot_name);",
          "707:        php_var_serialize_intern(buf, d, var_hash TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:        if (Z_TYPE_P(d) == IS_INDIRECT) {",
          "775:         d = Z_INDIRECT_P(d);",
          "776:         if (Z_TYPE_P(d) == IS_UNDEF) {",
          "777:          STR_FREE(prot_name);",
          "778:          break;",
          "779:         }",
          "780:        }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "874:     zend_hash_internal_pointer_reset_ex(myht, &pos);",
          "875:     for (;; zend_hash_move_forward_ex(myht, &pos)) {",
          "878:       break;",
          "879:      }",
          "880:      if (incomplete_class && strcmp(key->val, MAGIC_MEMBER) == 0) {",
          "881:       continue;",
          "882:      }",
          "",
          "[Removed Lines]",
          "876:      i = zend_hash_get_current_key_ex(myht, &key, &index, 0, &pos);",
          "877:      if (i == HASH_KEY_NON_EXISTENT) {",
          "",
          "[Added Lines]",
          "952:      data = zend_hash_get_current_data_ex(myht, &pos);",
          "953:      if (!data) {",
          "955:      } else if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "956:       data = Z_INDIRECT_P(data);",
          "957:       if (Z_TYPE_P(data) == IS_UNDEF) {",
          "958:        continue;",
          "959:       }",
          "962:      i = zend_hash_get_current_key_ex(myht, &key, &index, 0, &pos);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "897:       || (Z_TYPE_P(data) == IS_ARRAY && Z_ARRVAL_P(data)->nApplyCount > 1)",
          "898:      ) {",
          "899:       smart_str_appendl(buf, \"N;\", 2);",
          "",
          "[Removed Lines]",
          "895:      if ((data = zend_hash_get_current_data_ex(myht, &pos)) == NULL",
          "896:       || (Z_TYPE_P(data) == IS_ARRAY && Z_TYPE_P(struc) == IS_ARRAY && Z_ARR_P(data) == Z_ARR_P(struc))",
          "",
          "[Added Lines]",
          "978:      if ((Z_TYPE_P(data) == IS_ARRAY && Z_TYPE_P(struc) == IS_ARRAY && Z_ARR_P(data) == Z_ARR_P(struc))",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   (*var_hashx)->last_dtor = var_hash;",
          "80:  }",
          "83:  var_hash->data[var_hash->used_slots++] = rval;",
          "84: }",
          "",
          "[Removed Lines]",
          "82:  Z_ADDREF_P(rval);",
          "",
          "[Added Lines]",
          "82:  if (Z_REFCOUNTED_P(rval)) Z_ADDREF_P(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:   } else {",
          "308:    convert_to_string(&key);",
          "310:   }",
          "312:   zval_dtor(&key);",
          "",
          "[Removed Lines]",
          "309:    data = zend_hash_update(ht, Z_STR(key), &d);",
          "",
          "[Added Lines]",
          "310: #if 1",
          "311:    data = zend_hash_update_ind(ht, Z_STR(key), &d);",
          "312: #else",
          "313:    if ((data = zend_hash_find(ht, Z_STR(key))) != NULL) {",
          "314:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "315:      data = Z_INDIRECT_P(data);",
          "316:     }",
          "317:     zval_ptr_dtor(data);",
          "319:     ZVAL_UNDEF(data);",
          "320:    } else {",
          "321:     data = zend_hash_update(ht, Z_STR(key), &d);",
          "322:    }",
          "323: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:  start = cursor;",
          "432: {",
          "433:  YYCTYPE yych;",
          "434:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "431: #line 432 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "445: #line 446 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:  yych = *(YYMARKER = ++YYCURSOR);",
          "489:  if (yych == ':') goto yy95;",
          "490: yy3:",
          "492:  { return 0; }",
          "494: yy4:",
          "495:  yych = *(YYMARKER = ++YYCURSOR);",
          "496:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "491: #line 778 \"ext/standard/var_unserializer.re\"",
          "493: #line 494 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "505: #line 792 \"ext/standard/var_unserializer.re\"",
          "507: #line 508 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "533:  goto yy3;",
          "534: yy14:",
          "535:  ++YYCURSOR;",
          "537:  {",
          "539:  php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");",
          "541: }",
          "543: yy16:",
          "544:  yych = *++YYCURSOR;",
          "545:  goto yy3;",
          "",
          "[Removed Lines]",
          "536: #line 772 \"ext/standard/var_unserializer.re\"",
          "542: #line 543 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "550: #line 786 \"ext/standard/var_unserializer.re\"",
          "556: #line 557 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "569:  yych = *++YYCURSOR;",
          "570:  if (yych != '\"') goto yy18;",
          "571:  ++YYCURSOR;",
          "573:  {",
          "574:  size_t len, len2, len3, maxlen;",
          "575:  long elements;",
          "",
          "[Removed Lines]",
          "572: #line 633 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "586: #line 647 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "710: }",
          "712: yy25:",
          "713:  yych = *++YYCURSOR;",
          "714:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "711: #line 712 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "725: #line 726 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "733:  yych = *++YYCURSOR;",
          "734:  if (yych != '\"') goto yy18;",
          "735:  ++YYCURSOR;",
          "737:  {",
          "",
          "[Removed Lines]",
          "736: #line 625 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "750: #line 639 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "741:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "742:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "743: }",
          "745: yy32:",
          "746:  yych = *++YYCURSOR;",
          "747:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "744: #line 745 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "758: #line 759 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "762:  yych = *++YYCURSOR;",
          "763:  if (yych != '{') goto yy18;",
          "764:  ++YYCURSOR;",
          "766:  {",
          "767:  long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "765: #line 604 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "779: #line 618 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "784:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "785: }",
          "787: yy39:",
          "788:  yych = *++YYCURSOR;",
          "789:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "786: #line 787 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "800: #line 801 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "804:  yych = *++YYCURSOR;",
          "805:  if (yych != '\"') goto yy18;",
          "806:  ++YYCURSOR;",
          "808:  {",
          "809:  size_t len, maxlen;",
          "",
          "[Removed Lines]",
          "807: #line 574 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "821: #line 588 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "834:  efree(str);",
          "835:  return 1;",
          "836: }",
          "838: yy46:",
          "839:  yych = *++YYCURSOR;",
          "840:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "837: #line 838 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "851: #line 852 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "855:  yych = *++YYCURSOR;",
          "856:  if (yych != '\"') goto yy18;",
          "857:  ++YYCURSOR;",
          "859:  {",
          "860:  size_t len, maxlen;",
          "861:  char *str;",
          "",
          "[Removed Lines]",
          "858: #line 547 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "872: #line 561 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "882:  ZVAL_STRINGL(rval, str, len);",
          "883:  return 1;",
          "884: }",
          "886: yy53:",
          "887:  yych = *++YYCURSOR;",
          "888:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "885: #line 886 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "899: #line 900 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "970:  }",
          "971: yy63:",
          "972:  ++YYCURSOR;",
          "974:  {",
          "975: #if SIZEOF_LONG == 4",
          "976: use_double:",
          "",
          "[Removed Lines]",
          "973: #line 538 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "987: #line 552 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "979:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "980:  return 1;",
          "981: }",
          "983: yy65:",
          "984:  yych = *++YYCURSOR;",
          "985:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "982: #line 983 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "996: #line 997 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1038:  yych = *++YYCURSOR;",
          "1039:  if (yych != ';') goto yy18;",
          "1040:  ++YYCURSOR;",
          "1042:  {",
          "",
          "[Removed Lines]",
          "1041: #line 522 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1055: #line 536 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1055:  return 1;",
          "1056: }",
          "1058: yy76:",
          "1059:  yych = *++YYCURSOR;",
          "1060:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1057: #line 1058 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1071: #line 1072 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1081:  if (yych <= '9') goto yy79;",
          "1082:  if (yych != ';') goto yy18;",
          "1083:  ++YYCURSOR;",
          "1085:  {",
          "1086: #if SIZEOF_LONG == 4",
          "1087:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1084: #line 496 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1098: #line 510 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1107:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1108:  return 1;",
          "1109: }",
          "1111: yy83:",
          "1112:  yych = *++YYCURSOR;",
          "1113:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1110: #line 1111 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1124: #line 1125 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1115:  yych = *++YYCURSOR;",
          "1116:  if (yych != ';') goto yy18;",
          "1117:  ++YYCURSOR;",
          "1119:  {",
          "1121:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1122:  return 1;",
          "1123: }",
          "1125: yy87:",
          "1126:  ++YYCURSOR;",
          "1128:  {",
          "1130:  ZVAL_NULL(rval);",
          "1131:  return 1;",
          "1132: }",
          "1134: yy89:",
          "1135:  yych = *++YYCURSOR;",
          "1136:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1118: #line 490 \"ext/standard/var_unserializer.re\"",
          "1124: #line 1125 \"ext/standard/var_unserializer.c\"",
          "1127: #line 484 \"ext/standard/var_unserializer.re\"",
          "1133: #line 1134 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1132: #line 504 \"ext/standard/var_unserializer.re\"",
          "1138: #line 1139 \"ext/standard/var_unserializer.c\"",
          "1141: #line 498 \"ext/standard/var_unserializer.re\"",
          "1147: #line 1148 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1153:  if (yych <= '9') goto yy91;",
          "1154:  if (yych != ';') goto yy18;",
          "1155:  ++YYCURSOR;",
          "1157:  {",
          "1158:  long id;",
          "",
          "[Removed Lines]",
          "1156: #line 461 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1170: #line 475 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1177:  return 1;",
          "1178: }",
          "1180: yy95:",
          "1181:  yych = *++YYCURSOR;",
          "1182:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1179: #line 1180 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1193: #line 1194 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1199:  if (yych <= '9') goto yy97;",
          "1200:  if (yych != ';') goto yy18;",
          "1201:  ++YYCURSOR;",
          "1203:  {",
          "1204:  long id;",
          "",
          "[Removed Lines]",
          "1202: #line 436 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1216: #line 450 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1225:  return 1;",
          "1226: }",
          "1228: }",
          "1232:  return 0;",
          "",
          "[Removed Lines]",
          "1227: #line 1228 \"ext/standard/var_unserializer.c\"",
          "1229: #line 780 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1241: #line 1242 \"ext/standard/var_unserializer.c\"",
          "1243: #line 794 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   (*var_hashx)->last_dtor = var_hash;",
          "78:  }",
          "81:  var_hash->data[var_hash->used_slots++] = rval;",
          "82: }",
          "",
          "[Removed Lines]",
          "80:  Z_ADDREF_P(rval);",
          "",
          "[Added Lines]",
          "80:  if (Z_REFCOUNTED_P(rval)) Z_ADDREF_P(rval);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:   } else {",
          "312:    convert_to_string(&key);",
          "314:   }",
          "316:   zval_dtor(&key);",
          "",
          "[Removed Lines]",
          "313:    data = zend_hash_update(ht, Z_STR(key), &d);",
          "",
          "[Added Lines]",
          "314: #if 1",
          "315:    data = zend_hash_update_ind(ht, Z_STR(key), &d);",
          "316: #else",
          "317:    if ((data = zend_hash_find(ht, Z_STR(key))) != NULL) {",
          "318:     if (Z_TYPE_P(data) == IS_INDIRECT) {",
          "319:      data = Z_INDIRECT_P(data);",
          "320:     }",
          "321:     zval_ptr_dtor(data);",
          "323:     ZVAL_UNDEF(data);",
          "324:    } else {",
          "325:     data = zend_hash_update(ht, Z_STR(key), &d);",
          "326:    }",
          "327: #endif",
          "",
          "---------------"
        ],
        "main/main.c||main/main.c": [
          "File: main/main.c -> main/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858:  if (PG(track_errors) && module_initialized &&",
          "859:    (Z_TYPE(EG(user_error_handler)) == IS_UNDEF || !(EG(user_error_handler_error_reporting) & type))) {",
          "867:   }",
          "868:  }",
          "869:  if (replace_buffer) {",
          "",
          "[Removed Lines]",
          "860:   if (!EG(active_symbol_table)) {",
          "861:    zend_rebuild_symbol_table(TSRMLS_C);",
          "862:   }",
          "863:   if (EG(active_symbol_table)) {",
          "864:    zval tmp;",
          "865:    ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "866:    zend_hash_str_update(&EG(active_symbol_table)->ht, \"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp);",
          "",
          "[Added Lines]",
          "860:   zval tmp;",
          "861:   ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "862:   if (zend_set_local_var(\"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp, 0 TSRMLS_CC) == FAILURE) {",
          "863:    zval_ptr_dtor(&tmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1195:   if (EG(active_symbol_table)) {",
          "1196:    zval tmp;",
          "1197:    ZVAL_STRINGL(&tmp, buffer, buffer_len);",
          "1199:   }",
          "1200:  }",
          "",
          "[Removed Lines]",
          "1198:    zend_hash_str_update(&EG(active_symbol_table)->ht, \"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp);",
          "",
          "[Added Lines]",
          "1195:    if (zend_set_local_var(\"php_errormsg\", sizeof(\"php_errormsg\")-1, &tmp, 0 TSRMLS_CC) == FAILURE) {",
          "1196:     zval_ptr_dtor(&tmp);",
          "1197:    }",
          "",
          "---------------"
        ],
        "main/php_variables.c||main/php_variables.c": [
          "File: main/php_variables.c -> main/php_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:      return;",
          "182:     }",
          "183:    } else {",
          "188:     }",
          "189:    }",
          "190:    symtable1 = Z_ARRVAL_P(gpc_element_p);",
          "",
          "[Removed Lines]",
          "184:     if ((gpc_element_p = zend_symtable_str_find(symtable1, index, index_len)) == NULL",
          "185:      || Z_TYPE_P(gpc_element_p) != IS_ARRAY) {",
          "186:      array_init(&gpc_element);",
          "187:      gpc_element_p = zend_symtable_str_update(symtable1, index, index_len, &gpc_element);",
          "",
          "[Added Lines]",
          "184:     gpc_element_p = zend_symtable_str_find(symtable1, index, index_len);",
          "185:     if (!gpc_element_p) {",
          "186:      zval tmp;",
          "187:      array_init(&tmp);",
          "188:      gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &tmp);",
          "189:     } else {",
          "190:      if (Z_TYPE_P(gpc_element_p) == IS_INDIRECT) {",
          "191:       gpc_element_p = Z_INDIRECT_P(gpc_element_p);",
          "192:      }",
          "193:      if (Z_TYPE_P(gpc_element_p) != IS_ARRAY) {",
          "194:       zval_ptr_dtor(gpc_element_p);",
          "195:       array_init(gpc_element_p);",
          "196:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     zend_symtable_str_exists(symtable1, index, index_len)) {",
          "220:     zval_ptr_dtor(&gpc_element);",
          "221:    } else {",
          "223:    }",
          "224:   }",
          "225:  }",
          "",
          "[Removed Lines]",
          "222:     gpc_element_p = zend_symtable_str_update(symtable1, index, index_len, &gpc_element);",
          "",
          "[Added Lines]",
          "231:     gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &gpc_element);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd4025069d561b4196851c2e9a85b5bfdfe1465a",
      "candidate_info": {
        "commit_hash": "fd4025069d561b4196851c2e9a85b5bfdfe1465a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/fd4025069d561b4196851c2e9a85b5bfdfe1465a",
        "files": [
          "Zend/zend_gc.c",
          "Zend/zend_hash.c",
          "Zend/zend_hash.h",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re",
          "main/php_variables.c"
        ],
        "message": "Enable HT RC assertions with escape-hatch\n\nHT functions that modify the array now assert that rc=1. As we don't\nrespect this COW constraint everywhere, either for a good reason or\nbecause fixing it would take more work, we provide an escape hatch\nin the form of HT_ALLOW_COW_VIOLATION(ht). If this macro is called\nassertions on this ht are disabled. The macro is a no-op in release\nmode.",
        "before_after_code_files": [
          "Zend/zend_gc.c||Zend/zend_gc.c",
          "Zend/zend_hash.c||Zend/zend_hash.c",
          "Zend/zend_hash.h||Zend/zend_hash.h",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re",
          "main/php_variables.c||main/php_variables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_gc.c||Zend/zend_gc.c": [
          "File: Zend/zend_gc.c -> Zend/zend_gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1162:     zend_array *arr = (zend_array*)p;",
          "1164:     GC_TYPE(arr) = IS_NULL;",
          "1165:     zend_hash_destroy(arr);",
          "1166:    }",
          "1167:    current = GC_G(next_to_free);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167:     HT_ALLOW_COW_VIOLATION(arr);",
          "",
          "---------------"
        ],
        "Zend/zend_hash.c||Zend/zend_hash.c": [
          "File: Zend/zend_hash.c -> Zend/zend_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"zend_globals.h\"",
          "25: #include \"zend_variables.h\"",
          "30: #else",
          "32: #endif",
          "34: #define HT_POISONED_PTR ((HashTable *) (intptr_t) -1)",
          "36: #if ZEND_DEBUG",
          "",
          "[Removed Lines]",
          "27: #define HT_DEBUG 0",
          "28: #if HT_DEBUG",
          "29: # define HT_ASSERT(c) ZEND_ASSERT(c)",
          "31: # define HT_ASSERT(c)",
          "",
          "[Added Lines]",
          "27: #if ZEND_DEBUG",
          "28: # define HT_ASSERT(ht, expr) \\",
          "29:  ZEND_ASSERT((expr) || ((ht)->u.flags & HASH_FLAG_ALLOW_COW_VIOLATION))",
          "31: # define HT_ASSERT(ht, expr)",
          "34: #define HT_ASSERT_RC1(ht) HT_ASSERT(ht, GC_REFCOUNT(ht) == 1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: static zend_always_inline void zend_hash_real_init_ex(HashTable *ht, int packed)",
          "129: {",
          "131:  ZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));",
          "132:  if (packed) {",
          "133:   HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));",
          "",
          "[Removed Lines]",
          "130:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "132:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: static zend_always_inline void zend_hash_check_init(HashTable *ht, int packed)",
          "158: {",
          "160:  if (UNEXPECTED(!((ht)->u.flags & HASH_FLAG_INITIALIZED))) {",
          "161:   zend_hash_real_init_ex(ht, packed);",
          "162:  }",
          "",
          "[Removed Lines]",
          "159:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "161:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186: static void ZEND_FASTCALL zend_hash_packed_grow(HashTable *ht)",
          "187: {",
          "189:  if (ht->nTableSize >= HT_MAX_SIZE) {",
          "190:   zend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%u * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket), sizeof(Bucket));",
          "191:  }",
          "",
          "[Removed Lines]",
          "188:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "190:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197: {",
          "198:  IS_CONSISTENT(ht);",
          "201:  zend_hash_real_init_ex(ht, packed);",
          "202: }",
          "",
          "[Removed Lines]",
          "200:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "202:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:  void *new_data, *old_data = HT_GET_DATA_ADDR(ht);",
          "207:  Bucket *old_buckets = ht->arData;",
          "210:  ht->u.flags &= ~HASH_FLAG_PACKED;",
          "211:  new_data = pemalloc(HT_SIZE_EX(ht->nTableSize, -ht->nTableSize), (ht)->u.flags & HASH_FLAG_PERSISTENT);",
          "212:  ht->nTableMask = -ht->nTableSize;",
          "",
          "[Removed Lines]",
          "209:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "211:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:  void *new_data, *old_data = HT_GET_DATA_ADDR(ht);",
          "222:  Bucket *old_buckets = ht->arData;",
          "225:  new_data = pemalloc(HT_SIZE_EX(ht->nTableSize, HT_MIN_MASK), (ht)->u.flags & HASH_FLAG_PERSISTENT);",
          "226:  ht->u.flags |= HASH_FLAG_PACKED | HASH_FLAG_STATIC_KEYS;",
          "227:  ht->nTableMask = HT_MIN_MASK;",
          "",
          "[Removed Lines]",
          "224:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "226:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242: ZEND_API void ZEND_FASTCALL zend_hash_extend(HashTable *ht, uint32_t nSize, zend_bool packed)",
          "243: {",
          "245:  if (nSize == 0) return;",
          "246:  if (UNEXPECTED(!((ht)->u.flags & HASH_FLAG_INITIALIZED))) {",
          "247:   if (nSize > ht->nTableSize) {",
          "",
          "[Removed Lines]",
          "244:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "246:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "545:  Bucket *p;",
          "547:  IS_CONSISTENT(ht);",
          "550:  if (UNEXPECTED(!(ht->u.flags & HASH_FLAG_INITIALIZED))) {",
          "551:   CHECK_INIT(ht, 0);",
          "",
          "[Removed Lines]",
          "548:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "550:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "708:  Bucket *p;",
          "710:  IS_CONSISTENT(ht);",
          "713:  if (UNEXPECTED(!(ht->u.flags & HASH_FLAG_INITIALIZED))) {",
          "714:   CHECK_INIT(ht, h < ht->nTableSize);",
          "",
          "[Removed Lines]",
          "711:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "713:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "847: {",
          "849:  IS_CONSISTENT(ht);",
          "853:   zend_hash_rehash(ht);",
          "",
          "[Removed Lines]",
          "850:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "852:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1021: ZEND_API void ZEND_FASTCALL zend_hash_del_bucket(HashTable *ht, Bucket *p)",
          "1022: {",
          "1023:  IS_CONSISTENT(ht);",
          "1025:  _zend_hash_del_el(ht, HT_IDX_TO_HASH(p - ht->arData), p);",
          "1026: }",
          "",
          "[Removed Lines]",
          "1024:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1026:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1034:  Bucket *prev = NULL;",
          "1036:  IS_CONSISTENT(ht);",
          "1039:  h = zend_string_hash_val(key);",
          "1040:  nIndex = h | ht->nTableMask;",
          "",
          "[Removed Lines]",
          "1037:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1039:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1065:  Bucket *prev = NULL;",
          "1067:  IS_CONSISTENT(ht);",
          "1070:  h = zend_string_hash_val(key);",
          "1071:  nIndex = h | ht->nTableMask;",
          "",
          "[Removed Lines]",
          "1068:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1070:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1114:  Bucket *prev = NULL;",
          "1116:  IS_CONSISTENT(ht);",
          "1119:  h = zend_inline_hash_func(str, len);",
          "1120:  nIndex = h | ht->nTableMask;",
          "",
          "[Removed Lines]",
          "1117:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1119:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1158:  Bucket *prev = NULL;",
          "1160:  IS_CONSISTENT(ht);",
          "1163:  h = zend_inline_hash_func(str, len);",
          "1164:  nIndex = h | ht->nTableMask;",
          "",
          "[Removed Lines]",
          "1161:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1163:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1187:  Bucket *prev = NULL;",
          "1189:  IS_CONSISTENT(ht);",
          "1192:  if (ht->u.flags & HASH_FLAG_PACKED) {",
          "1193:   if (h < ht->nNumUsed) {",
          "",
          "[Removed Lines]",
          "1190:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1192:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1219:  Bucket *p, *end;",
          "1221:  IS_CONSISTENT(ht);",
          "1224:  if (ht->nNumUsed) {",
          "1225:   p = ht->arData;",
          "",
          "[Removed Lines]",
          "1222:  HT_ASSERT(GC_REFCOUNT(ht) <= 1);",
          "",
          "[Added Lines]",
          "1224:  HT_ASSERT(ht, GC_REFCOUNT(ht) <= 1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1281:  Bucket *p, *end;",
          "1283:  IS_CONSISTENT(ht);",
          "1287:  GC_REMOVE_FROM_BUFFER(ht);",
          "",
          "[Removed Lines]",
          "1284:  HT_ASSERT(GC_REFCOUNT(ht) <= 1);",
          "",
          "[Added Lines]",
          "1286:  HT_ASSERT(ht, GC_REFCOUNT(ht) <= 1);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1334:  Bucket *p, *end;",
          "1336:  IS_CONSISTENT(ht);",
          "1339:  if (ht->nNumUsed) {",
          "1340:   p = ht->arData;",
          "",
          "[Removed Lines]",
          "1337:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1339:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1403:  Bucket *p, *end;",
          "1405:  IS_CONSISTENT(ht);",
          "1408:  if (ht->nNumUsed) {",
          "1409:   p = ht->arData;",
          "",
          "[Removed Lines]",
          "1406:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1408:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1443:  Bucket *p;",
          "1445:  IS_CONSISTENT(ht);",
          "1448:  p = ht->arData;",
          "1449:  for (idx = 0; idx < ht->nNumUsed; idx++, p++) {",
          "",
          "[Removed Lines]",
          "1446:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1448:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1463:  Bucket *p;",
          "1465:  IS_CONSISTENT(ht);",
          "1468:  idx = ht->nNumUsed;",
          "1469:  p = ht->arData + ht->nNumUsed;",
          "",
          "[Removed Lines]",
          "1466:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1468:  HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1505:   result = apply_func(&p->val);",
          "1507:   if (result & ZEND_HASH_APPLY_REMOVE) {",
          "1509:    _zend_hash_del_el(ht, HT_IDX_TO_HASH(idx), p);",
          "1510:   }",
          "1511:   if (result & ZEND_HASH_APPLY_STOP) {",
          "",
          "[Removed Lines]",
          "1508:    HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1510:    HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1531:   result = apply_func(&p->val, argument);",
          "1533:   if (result & ZEND_HASH_APPLY_REMOVE) {",
          "1535:    _zend_hash_del_el(ht, HT_IDX_TO_HASH(idx), p);",
          "1536:   }",
          "1537:   if (result & ZEND_HASH_APPLY_STOP) {",
          "",
          "[Removed Lines]",
          "1534:    HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1536:    HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1564:   result = apply_func(&p->val, num_args, args, &hash_key);",
          "1566:   if (result & ZEND_HASH_APPLY_REMOVE) {",
          "1568:    _zend_hash_del_el(ht, HT_IDX_TO_HASH(idx), p);",
          "1569:   }",
          "1570:   if (result & ZEND_HASH_APPLY_STOP) {",
          "",
          "[Removed Lines]",
          "1567:    HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1569:    HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1596:   result = apply_func(&p->val);",
          "1598:   if (result & ZEND_HASH_APPLY_REMOVE) {",
          "1600:    _zend_hash_del_el(ht, HT_IDX_TO_HASH(idx), p);",
          "1601:   }",
          "1602:   if (result & ZEND_HASH_APPLY_STOP) {",
          "",
          "[Removed Lines]",
          "1599:    HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "1601:    HT_ASSERT_RC1(ht);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1617:  IS_CONSISTENT(source);",
          "1618:  IS_CONSISTENT(target);",
          "1621:  setTargetPointer = (target->nInternalPointer == HT_INVALID_IDX);",
          "1622:  for (idx = 0; idx < source->nNumUsed; idx++) {",
          "",
          "[Removed Lines]",
          "1619:  HT_ASSERT(GC_REFCOUNT(target) == 1);",
          "",
          "[Added Lines]",
          "1621:  HT_ASSERT_RC1(target);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1854:  IS_CONSISTENT(source);",
          "1855:  IS_CONSISTENT(target);",
          "1858:  if (overwrite) {",
          "1859:   for (idx = 0; idx < source->nNumUsed; idx++) {",
          "",
          "[Removed Lines]",
          "1856:  HT_ASSERT(GC_REFCOUNT(target) == 1);",
          "",
          "[Added Lines]",
          "1858:  HT_ASSERT_RC1(target);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1925:  IS_CONSISTENT(source);",
          "1926:  IS_CONSISTENT(target);",
          "1929:  for (idx = 0; idx < source->nNumUsed; idx++) {",
          "1930:   p = source->arData + idx;",
          "",
          "[Removed Lines]",
          "1927:  HT_ASSERT(GC_REFCOUNT(target) == 1);",
          "",
          "[Added Lines]",
          "1929:  HT_ASSERT_RC1(target);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2046:     uint32_t idx;",
          "2048:  IS_CONSISTENT(ht);",
          "2051:  for (idx = 0; idx < ht->nNumUsed; idx++) {",
          "2052:   if (Z_TYPE(ht->arData[idx].val) != IS_UNDEF) {",
          "",
          "[Removed Lines]",
          "2049:  HT_ASSERT(&ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "2051:  HT_ASSERT(ht, &ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2066:  uint32_t idx;",
          "2068:  IS_CONSISTENT(ht);",
          "2071:  idx = ht->nNumUsed;",
          "2072:  while (idx > 0) {",
          "",
          "[Removed Lines]",
          "2069:  HT_ASSERT(&ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "2071:  HT_ASSERT(ht, &ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2085:  uint32_t idx = *pos;",
          "2087:  IS_CONSISTENT(ht);",
          "2090:  if (idx != HT_INVALID_IDX) {",
          "2091:   while (1) {",
          "",
          "[Removed Lines]",
          "2088:  HT_ASSERT(&ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "2090:  HT_ASSERT(ht, &ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2109:  uint32_t idx = *pos;",
          "2111:  IS_CONSISTENT(ht);",
          "2114:  if (idx != HT_INVALID_IDX) {",
          "2115:   while (idx > 0) {",
          "",
          "[Removed Lines]",
          "2112:  HT_ASSERT(&ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "2114:  HT_ASSERT(ht, &ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2246:  uint32_t i, j;",
          "2248:  IS_CONSISTENT(ht);",
          "2252:   return SUCCESS;",
          "",
          "[Removed Lines]",
          "2249:  HT_ASSERT(GC_REFCOUNT(ht) == 1);",
          "",
          "[Added Lines]",
          "2251:  HT_ASSERT_RC1(ht);",
          "",
          "---------------"
        ],
        "Zend/zend_hash.h||Zend/zend_hash.h": [
          "File: Zend/zend_hash.h -> Zend/zend_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define HASH_FLAG_INITIALIZED      (1<<3)",
          "43: #define HASH_FLAG_HAS_EMPTY_IND    (1<<5)",
          "45: #define HT_IS_PACKED(ht) \\",
          "46:  (((ht)->u.flags & HASH_FLAG_PACKED) != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #define HASH_FLAG_ALLOW_COW_VIOLATION (1<<6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #define HT_HAS_STATIC_KEYS_ONLY(ht) \\",
          "52:  (((ht)->u.flags & (HASH_FLAG_PACKED|HASH_FLAG_STATIC_KEYS)) != 0)",
          "54: typedef struct _zend_hash_key {",
          "55:  zend_ulong h;",
          "56:  zend_string *key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #if ZEND_DEBUG",
          "56: # define HT_ALLOW_COW_VIOLATION(ht) (ht)->u.flags |= HASH_FLAG_ALLOW_COW_VIOLATION",
          "57: #else",
          "58: # define HT_ALLOW_COW_VIOLATION(ht)",
          "59: #endif",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "676: yy2:",
          "677:  ++YYCURSOR;",
          "678: yy3:",
          "680:  { return 0; }",
          "681: #line 682 \"ext/standard/var_unserializer.c\"",
          "682: yy4:",
          "",
          "[Removed Lines]",
          "679: #line 999 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "679: #line 1005 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:  goto yy3;",
          "726: yy15:",
          "727:  ++YYCURSOR;",
          "729:  {",
          "731:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "",
          "[Removed Lines]",
          "728: #line 993 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "728: #line 999 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1158:  goto yy18;",
          "1159: yy82:",
          "1160:  ++YYCURSOR;",
          "1162:  {",
          "1163:  size_t len, len2, len3, maxlen;",
          "1164:  zend_long elements;",
          "",
          "[Removed Lines]",
          "1161: #line 841 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1161: #line 847 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1368:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1369:  }",
          "1371:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1372:   return 0;",
          "1373:  }",
          "1375:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1376: }",
          "1378: yy88:",
          "1379:  yych = *++YYCURSOR;",
          "1380:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1377: #line 1378 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1375:  HT_ALLOW_COW_VIOLATION(Z_ARRVAL_P(rval));",
          "1383: #line 1384 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1399:  goto yy18;",
          "1400: yy92:",
          "1401:  ++YYCURSOR;",
          "1403:  {",
          "1404:  long elements;",
          "1405:     if (!var_hash) return 0;",
          "",
          "[Removed Lines]",
          "1402: #line 830 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1408: #line 836 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1410:  }",
          "1411:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1412: }",
          "1414: yy94:",
          "1415:  ++YYCURSOR;",
          "1416: #line 740 \"ext/standard/var_unserializer.re\"",
          "",
          "[Removed Lines]",
          "1413: #line 1414 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1419: #line 1420 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1445:  ZVAL_STRINGL(rval, str, len);",
          "1446:  return 1;",
          "1447: }",
          "1449: yy96:",
          "1450:  yych = *++YYCURSOR;",
          "1451:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1448: #line 1449 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1454: #line 1455 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1470:  return 1;",
          "1471: }",
          "1473: }",
          "1477:  return 0;",
          "",
          "[Removed Lines]",
          "1472: #line 1473 \"ext/standard/var_unserializer.c\"",
          "1474: #line 1001 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1478: #line 1479 \"ext/standard/var_unserializer.c\"",
          "1480: #line 1007 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "821:  }",
          "823:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "824:   return 0;",
          "825:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827:  HT_ALLOW_COW_VIOLATION(Z_ARRVAL_P(rval));",
          "",
          "---------------"
        ],
        "main/php_variables.c||main/php_variables.c": [
          "File: main/php_variables.c -> main/php_variables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:  zend_hash_update(&EG(symbol_table), name, &PG(http_globals)[TRACK_VARS_SERVER]);",
          "796:  Z_ADDREF(PG(http_globals)[TRACK_VARS_SERVER]);",
          "799: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801:  HT_ALLOW_COW_VIOLATION(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fbf3be13b58b81de8fb422ca58dd95d4023fb88",
      "candidate_info": {
        "commit_hash": "5fbf3be13b58b81de8fb422ca58dd95d4023fb88",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/5fbf3be13b58b81de8fb422ca58dd95d4023fb88",
        "files": [
          "ext/standard/var_unserializer.c"
        ],
        "message": "Re-add var_unserializer.c",
        "before_after_code_files": [
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #line 1 \"ext/standard/var_unserializer.re\"",
          "4:   +----------------------------------------------------------------------+",
          "5:   | PHP Version 7                                                        |",
          "6:   +----------------------------------------------------------------------+",
          "7:   | Copyright (c) 1997-2016 The PHP Group                                |",
          "8:   +----------------------------------------------------------------------+",
          "9:   | This source file is subject to version 3.01 of the PHP license,      |",
          "10:   | that is bundled with this package in the file LICENSE, and is        |",
          "11:   | available through the world-wide-web at the following url:           |",
          "12:   | http://www.php.net/license/3_01.txt                                  |",
          "13:   | If you did not receive a copy of the PHP license and are unable to   |",
          "14:   | obtain it through the world-wide-web, please send a note to          |",
          "15:   | license@php.net so we can mail you a copy immediately.               |",
          "16:   +----------------------------------------------------------------------+",
          "17:   | Author: Sascha Schumann <sascha@schumann.cx>                         |",
          "18:   +----------------------------------------------------------------------+",
          "23: #include \"php.h\"",
          "24: #include \"ext/standard/php_var.h\"",
          "25: #include \"php_incomplete_class.h\"",
          "26: #include \"zend_portability.h\"",
          "28: struct php_unserialize_data {",
          "29:  void *first;",
          "30:  void *last;",
          "31:  void *first_dtor;",
          "32:  void *last_dtor;",
          "33:  HashTable *allowed_classes;",
          "34: };",
          "36: PHPAPI php_unserialize_data_t php_var_unserialize_init() {",
          "37:  php_unserialize_data_t d;",
          "39:  if (BG(serialize_lock) || !BG(unserialize).level) {",
          "40:   d = ecalloc(1, sizeof(struct php_unserialize_data));",
          "41:   if (!BG(serialize_lock)) {",
          "42:    BG(unserialize).data = d;",
          "43:    BG(unserialize).level = 1;",
          "44:   }",
          "45:  } else {",
          "46:   d = BG(unserialize).data;",
          "47:   ++BG(unserialize).level;",
          "48:  }",
          "49:  return d;",
          "50: }",
          "52: PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {",
          "54:  if (BG(serialize_lock) || BG(unserialize).level == 1) {",
          "55:   var_destroy(&d);",
          "56:   efree(d);",
          "57:  }",
          "58:  if (!BG(serialize_lock) && !--BG(unserialize).level) {",
          "59:   BG(unserialize).data = NULL;",
          "60:  }",
          "61: }",
          "63: PHPAPI HashTable *php_var_unserialize_get_allowed_classes(php_unserialize_data_t d) {",
          "64:  return d->allowed_classes;",
          "65: }",
          "66: PHPAPI void php_var_unserialize_set_allowed_classes(php_unserialize_data_t d, HashTable *classes) {",
          "67:  d->allowed_classes = classes;",
          "68: }",
          "72: #define VAR_ENTRIES_MAX 1024",
          "73: #define VAR_ENTRIES_DBG 0",
          "75: typedef struct {",
          "76:  zval *data[VAR_ENTRIES_MAX];",
          "77:  zend_long used_slots;",
          "78:  void *next;",
          "79: } var_entries;",
          "81: typedef struct {",
          "82:  zval data[VAR_ENTRIES_MAX];",
          "83:  zend_long used_slots;",
          "84:  void *next;",
          "85: } var_dtor_entries;",
          "87: static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)",
          "88: {",
          "89:  var_entries *var_hash = (*var_hashx)->last;",
          "90: #if VAR_ENTRIES_DBG",
          "91:  fprintf(stderr, \"var_push(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_P(rval));",
          "92: #endif",
          "94:  if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "95:   var_hash = emalloc(sizeof(var_entries));",
          "96:   var_hash->used_slots = 0;",
          "97:   var_hash->next = 0;",
          "99:   if (!(*var_hashx)->first) {",
          "100:    (*var_hashx)->first = var_hash;",
          "101:   } else {",
          "102:    ((var_entries *) (*var_hashx)->last)->next = var_hash;",
          "103:   }",
          "105:   (*var_hashx)->last = var_hash;",
          "106:  }",
          "108:  var_hash->data[var_hash->used_slots++] = rval;",
          "109: }",
          "111: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "112: {",
          "113:  zval *tmp_var = var_tmp_var(var_hashx);",
          "114:     if (!tmp_var) {",
          "115:         return;",
          "116:     }",
          "117:  ZVAL_COPY(tmp_var, rval);",
          "118: }",
          "120: PHPAPI zval *var_tmp_var(php_unserialize_data_t *var_hashx)",
          "121: {",
          "122:     var_dtor_entries *var_hash;",
          "124:     if (!var_hashx || !*var_hashx) {",
          "125:         return NULL;",
          "126:     }",
          "128:     var_hash = (*var_hashx)->last_dtor;",
          "129:     if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "130:         var_hash = emalloc(sizeof(var_dtor_entries));",
          "131:         var_hash->used_slots = 0;",
          "132:         var_hash->next = 0;",
          "134:         if (!(*var_hashx)->first_dtor) {",
          "135:             (*var_hashx)->first_dtor = var_hash;",
          "136:         } else {",
          "137:             ((var_dtor_entries *) (*var_hashx)->last_dtor)->next = var_hash;",
          "138:         }",
          "140:         (*var_hashx)->last_dtor = var_hash;",
          "141:     }",
          "142:     ZVAL_UNDEF(&var_hash->data[var_hash->used_slots]);",
          "143:     return &var_hash->data[var_hash->used_slots++];",
          "144: }",
          "146: PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)",
          "147: {",
          "148:  zend_long i;",
          "149:  var_entries *var_hash = (*var_hashx)->first;",
          "150: #if VAR_ENTRIES_DBG",
          "151:  fprintf(stderr, \"var_replace(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_P(nzval));",
          "152: #endif",
          "154:  while (var_hash) {",
          "155:   for (i = 0; i < var_hash->used_slots; i++) {",
          "156:    if (var_hash->data[i] == ozval) {",
          "157:     var_hash->data[i] = nzval;",
          "159:    }",
          "160:   }",
          "161:   var_hash = var_hash->next;",
          "162:  }",
          "163: }",
          "165: static zval *var_access(php_unserialize_data_t *var_hashx, zend_long id)",
          "166: {",
          "167:  var_entries *var_hash = (*var_hashx)->first;",
          "168: #if VAR_ENTRIES_DBG",
          "169:  fprintf(stderr, \"var_access(%ld): %ld\\n\", var_hash?var_hash->used_slots:-1L, id);",
          "170: #endif",
          "172:  while (id >= VAR_ENTRIES_MAX && var_hash && var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "173:   var_hash = var_hash->next;",
          "174:   id -= VAR_ENTRIES_MAX;",
          "175:  }",
          "177:  if (!var_hash) return NULL;",
          "179:  if (id < 0 || id >= var_hash->used_slots) return NULL;",
          "181:  return var_hash->data[id];",
          "182: }",
          "184: PHPAPI void var_destroy(php_unserialize_data_t *var_hashx)",
          "185: {",
          "186:  void *next;",
          "187:  zend_long i;",
          "188:  var_entries *var_hash = (*var_hashx)->first;",
          "189:  var_dtor_entries *var_dtor_hash = (*var_hashx)->first_dtor;",
          "190: #if VAR_ENTRIES_DBG",
          "191:  fprintf(stderr, \"var_destroy(%ld)\\n\", var_hash?var_hash->used_slots:-1L);",
          "192: #endif",
          "194:  while (var_hash) {",
          "195:   next = var_hash->next;",
          "196:   efree_size(var_hash, sizeof(var_entries));",
          "197:   var_hash = next;",
          "198:  }",
          "200:  while (var_dtor_hash) {",
          "201:   for (i = 0; i < var_dtor_hash->used_slots; i++) {",
          "202: #if VAR_ENTRIES_DBG",
          "203:    fprintf(stderr, \"var_destroy dtor(%p, %ld)\\n\", var_dtor_hash->data[i], Z_REFCOUNT_P(var_dtor_hash->data[i]));",
          "204: #endif",
          "205:    zval_ptr_dtor(&var_dtor_hash->data[i]);",
          "206:   }",
          "207:   next = var_dtor_hash->next;",
          "208:   efree_size(var_dtor_hash, sizeof(var_dtor_entries));",
          "209:   var_dtor_hash = next;",
          "210:  }",
          "211: }",
          "215: static zend_string *unserialize_str(const unsigned char **p, size_t len, size_t maxlen)",
          "216: {",
          "217:  size_t i, j;",
          "218:  zend_string *str = zend_string_safe_alloc(1, len, 0, 0);",
          "219:  unsigned char *end = *(unsigned char **)p+maxlen;",
          "221:  if (end < *p) {",
          "222:   zend_string_free(str);",
          "223:   return NULL;",
          "224:  }",
          "226:  for (i = 0; i < len; i++) {",
          "227:   if (*p >= end) {",
          "228:    zend_string_free(str);",
          "229:    return NULL;",
          "230:   }",
          "231:   if (**p != '\\\\') {",
          "232:    ZSTR_VAL(str)[i] = (char)**p;",
          "233:   } else {",
          "234:    unsigned char ch = 0;",
          "236:    for (j = 0; j < 2; j++) {",
          "237:     (*p)++;",
          "238:     if (**p >= '0' && **p <= '9') {",
          "239:      ch = (ch << 4) + (**p -'0');",
          "240:     } else if (**p >= 'a' && **p <= 'f') {",
          "241:      ch = (ch << 4) + (**p -'a'+10);",
          "242:     } else if (**p >= 'A' && **p <= 'F') {",
          "243:      ch = (ch << 4) + (**p -'A'+10);",
          "244:     } else {",
          "245:      zend_string_free(str);",
          "246:      return NULL;",
          "247:     }",
          "248:    }",
          "249:    ZSTR_VAL(str)[i] = (char)ch;",
          "250:   }",
          "251:   (*p)++;",
          "252:  }",
          "253:  ZSTR_VAL(str)[i] = 0;",
          "254:  ZSTR_LEN(str) = i;",
          "255:  return str;",
          "256: }",
          "258: static inline int unserialize_allowed_class(",
          "259:   zend_string *class_name, php_unserialize_data_t *var_hashx)",
          "260: {",
          "261:  HashTable *classes = (*var_hashx)->allowed_classes;",
          "262:  zend_string *lcname;",
          "263:  int res;",
          "264:  ALLOCA_FLAG(use_heap)",
          "266:  if(classes == NULL) {",
          "267:   return 1;",
          "268:  }",
          "269:  if(!zend_hash_num_elements(classes)) {",
          "270:   return 0;",
          "271:  }",
          "273:  ZSTR_ALLOCA_ALLOC(lcname, ZSTR_LEN(class_name), use_heap);",
          "274:  zend_str_tolower_copy(ZSTR_VAL(lcname), ZSTR_VAL(class_name), ZSTR_LEN(class_name));",
          "275:  res = zend_hash_exists(classes, lcname);",
          "276:  ZSTR_ALLOCA_FREE(lcname, use_heap);",
          "277:  return res;",
          "278: }",
          "280: #define YYFILL(n) do { } while (0)",
          "281: #define YYCTYPE unsigned char",
          "282: #define YYCURSOR cursor",
          "283: #define YYLIMIT limit",
          "284: #define YYMARKER marker",
          "287: #line 292 \"ext/standard/var_unserializer.re\"",
          "292: static inline zend_long parse_iv2(const unsigned char *p, const unsigned char **q)",
          "293: {",
          "294:  char cursor;",
          "295:  zend_long result = 0;",
          "296:  int neg = 0;",
          "298:  switch (*p) {",
          "299:   case '-':",
          "300:    neg++;",
          "302:   case '+':",
          "303:    p++;",
          "304:  }",
          "306:  while (1) {",
          "307:   cursor = (char)*p;",
          "308:   if (cursor >= '0' && cursor <= '9') {",
          "309:    result = result * 10 + (size_t)(cursor - (unsigned char)'0');",
          "310:   } else {",
          "311:    break;",
          "312:   }",
          "313:   p++;",
          "314:  }",
          "315:  if (q) *q = p;",
          "316:  if (neg) return -result;",
          "317:  return result;",
          "318: }",
          "320: static inline zend_long parse_iv(const unsigned char *p)",
          "321: {",
          "322:  return parse_iv2(p, NULL);",
          "323: }",
          "326: static inline size_t parse_uiv(const unsigned char *p)",
          "327: {",
          "328:  unsigned char cursor;",
          "329:  size_t result = 0;",
          "331:  if (*p == '+') {",
          "332:   p++;",
          "333:  }",
          "335:  while (1) {",
          "336:   cursor = *p;",
          "337:   if (cursor >= '0' && cursor <= '9') {",
          "338:    result = result * 10 + (size_t)(cursor - (unsigned char)'0');",
          "339:   } else {",
          "340:    break;",
          "341:   }",
          "342:   p++;",
          "343:  }",
          "344:  return result;",
          "345: }",
          "347: #define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash",
          "348: #define UNSERIALIZE_PASSTHRU rval, p, max, var_hash",
          "350: static int php_var_unserialize_internal(UNSERIALIZE_PARAMETER);",
          "352: static zend_always_inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, zend_long elements, int objprops)",
          "353: {",
          "354:  while (elements-- > 0) {",
          "355:   zval key, *data, d, *old_data;",
          "356:   zend_ulong idx;",
          "358:   ZVAL_UNDEF(&key);",
          "360:   if (!php_var_unserialize_internal(&key, p, max, NULL)) {",
          "361:    zval_dtor(&key);",
          "362:    return 0;",
          "363:   }",
          "365:   data = NULL;",
          "366:   ZVAL_UNDEF(&d);",
          "368:   if (!objprops) {",
          "369:    if (Z_TYPE(key) == IS_LONG) {",
          "370:     idx = Z_LVAL(key);",
          "371: numeric_key:",
          "372:     if (UNEXPECTED((old_data = zend_hash_index_find(ht, idx)) != NULL)) {",
          "374:      var_push_dtor(var_hash, old_data);",
          "375:      data = zend_hash_index_update(ht, idx, &d);",
          "376:     } else {",
          "377:      data = zend_hash_index_add_new(ht, idx, &d);",
          "378:     }",
          "379:    } else if (Z_TYPE(key) == IS_STRING) {",
          "380:     if (UNEXPECTED(ZEND_HANDLE_NUMERIC(Z_STR(key), idx))) {",
          "381:      goto numeric_key;",
          "382:     }",
          "383:     if (UNEXPECTED((old_data = zend_hash_find(ht, Z_STR(key))) != NULL)) {",
          "385:      var_push_dtor(var_hash, old_data);",
          "386:      data = zend_hash_update(ht, Z_STR(key), &d);",
          "387:     } else {",
          "388:      data = zend_hash_add_new(ht, Z_STR(key), &d);",
          "389:     }",
          "390:    } else {",
          "391:     zval_dtor(&key);",
          "392:     return 0;",
          "393:    }",
          "394:   } else {",
          "395:    if (EXPECTED(Z_TYPE(key) == IS_STRING)) {",
          "396: string_key:",
          "397:     if ((old_data = zend_hash_find(ht, Z_STR(key))) != NULL) {",
          "398:      if (Z_TYPE_P(old_data) == IS_INDIRECT) {",
          "399:       old_data = Z_INDIRECT_P(old_data);",
          "400:      }",
          "401:      var_push_dtor(var_hash, old_data);",
          "402:      data = zend_hash_update_ind(ht, Z_STR(key), &d);",
          "403:     } else {",
          "404:      data = zend_hash_add_new(ht, Z_STR(key), &d);",
          "405:     }",
          "406:    } else if (Z_TYPE(key) == IS_LONG) {",
          "408:     convert_to_string(&key);",
          "409:     goto string_key;",
          "410:    } else {",
          "411:     zval_dtor(&key);",
          "412:     return 0;",
          "413:    }",
          "414:   }",
          "416:   if (!php_var_unserialize_internal(data, p, max, var_hash)) {",
          "417:    zval_dtor(&key);",
          "418:    return 0;",
          "419:   }",
          "421:   if (UNEXPECTED(Z_ISUNDEF_P(data))) {",
          "422:    if (Z_TYPE(key) == IS_LONG) {",
          "423:     zend_hash_index_del(ht, Z_LVAL(key));",
          "424:    } else {",
          "425:     zend_hash_del_ind(ht, Z_STR(key));",
          "426:    }",
          "427:   } else {",
          "428:    var_push_dtor(var_hash, data);",
          "429:   }",
          "431:   zval_dtor(&key);",
          "433:   if (elements && *(*p-1) != ';' && *(*p-1) != '}') {",
          "434:    (*p)--;",
          "435:    return 0;",
          "436:   }",
          "437:  }",
          "439:  return 1;",
          "440: }",
          "442: static inline int finish_nested_data(UNSERIALIZE_PARAMETER)",
          "443: {",
          "444:  if (*((*p)++) == '}')",
          "445:   return 1;",
          "447: #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE",
          "448:  zval_ptr_dtor(rval);",
          "449: #endif",
          "450:  return 0;",
          "451: }",
          "453: static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "454: {",
          "455:  zend_long datalen;",
          "457:  datalen = parse_iv2((*p) + 2, p);",
          "459:  (*p) += 2;",
          "461:  if (datalen < 0 || (max - (*p)) <= datalen) {",
          "462:   zend_error(E_WARNING, \"Insufficient data for unserializing - \" ZEND_LONG_FMT \" required, \" ZEND_LONG_FMT \" present\", datalen, (zend_long)(max - (*p)));",
          "463:   return 0;",
          "464:  }",
          "466:  if (ce->unserialize == NULL) {",
          "467:   zend_error(E_WARNING, \"Class %s has no unserializer\", ZSTR_VAL(ce->name));",
          "468:   object_init_ex(rval, ce);",
          "469:  } else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash) != SUCCESS) {",
          "470:   return 0;",
          "471:  }",
          "473:  (*p) += datalen;",
          "475:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "476: }",
          "478: static inline zend_long object_common1(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "479: {",
          "480:  zend_long elements;",
          "482:  if( *p >= max - 2) {",
          "483:   zend_error(E_WARNING, \"Bad unserialize data\");",
          "484:   return -1;",
          "485:  }",
          "487:  elements = parse_iv2((*p) + 2, p);",
          "489:  (*p) += 2;",
          "491:  if (ce->serialize == NULL) {",
          "492:   object_init_ex(rval, ce);",
          "493:  } else {",
          "496:   zend_error(E_WARNING, \"Erroneous data format for unserializing '%s'\", ZSTR_VAL(ce->name));",
          "497:   return -1;",
          "498:  }",
          "500:  return elements;",
          "501: }",
          "503: #ifdef PHP_WIN32",
          "504: # pragma optimize(\"\", off)",
          "505: #endif",
          "506: static inline int object_common2(UNSERIALIZE_PARAMETER, zend_long elements)",
          "507: {",
          "508:  zval retval;",
          "509:  zval fname;",
          "510:  HashTable *ht;",
          "511:  zend_bool has_wakeup;",
          "513:  if (Z_TYPE_P(rval) != IS_OBJECT) {",
          "514:   return 0;",
          "515:  }",
          "517:  has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY",
          "518:   && zend_hash_str_exists(&Z_OBJCE_P(rval)->function_table, \"__wakeup\", sizeof(\"__wakeup\")-1);",
          "520:  ht = Z_OBJPROP_P(rval);",
          "521:  zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, (ht->u.flags & HASH_FLAG_PACKED));",
          "522:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, ht, elements, 1)) {",
          "523:   if (has_wakeup) {",
          "524:    ZVAL_DEREF(rval);",
          "525:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "526:   }",
          "527:   return 0;",
          "528:  }",
          "530:  ZVAL_DEREF(rval);",
          "531:  if (has_wakeup) {",
          "532:   ZVAL_STRINGL(&fname, \"__wakeup\", sizeof(\"__wakeup\") - 1);",
          "533:   BG(serialize_lock)++;",
          "534:   if (call_user_function_ex(CG(function_table), rval, &fname, &retval, 0, 0, 1, NULL) == FAILURE || Z_ISUNDEF(retval)) {",
          "535:    GC_FLAGS(Z_OBJ_P(rval)) |= IS_OBJ_DESTRUCTOR_CALLED;",
          "536:   }",
          "537:   BG(serialize_lock)--;",
          "538:   zval_dtor(&fname);",
          "539:   zval_dtor(&retval);",
          "540:  }",
          "542:  if (EG(exception)) {",
          "543:   return 0;",
          "544:  }",
          "546:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "547: }",
          "548: #ifdef PHP_WIN32",
          "549: # pragma optimize(\"\", on)",
          "550: #endif",
          "552: PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)",
          "553: {",
          "554:  var_entries *orig_var_entries = (*var_hash)->last;",
          "555:  zend_long orig_used_slots = orig_var_entries ? orig_var_entries->used_slots : 0;",
          "556:  int result;",
          "558:  result = php_var_unserialize_internal(UNSERIALIZE_PASSTHRU);",
          "560:  if (!result) {",
          "564:   var_entries *e = orig_var_entries;",
          "565:   zend_long s = orig_used_slots;",
          "566:   while (e) {",
          "567:    for (; s < e->used_slots; s++) {",
          "568:     e->data[s] = NULL;",
          "569:    }",
          "571:    e = e->next;",
          "572:    s = 0;",
          "573:   }",
          "574:  }",
          "576:  return result;",
          "577: }",
          "579: static int php_var_unserialize_internal(UNSERIALIZE_PARAMETER)",
          "580: {",
          "581:  const unsigned char *cursor, *limit, *marker, *start;",
          "582:  zval *rval_ref;",
          "584:  limit = max;",
          "585:  cursor = *p;",
          "587:  if (YYCURSOR >= YYLIMIT) {",
          "588:   return 0;",
          "589:  }",
          "591:  if (var_hash && (*p)[0] != 'R') {",
          "592:   var_push(var_hash, rval);",
          "593:  }",
          "595:  start = cursor;",
          "598: #line 599 \"ext/standard/var_unserializer.c\"",
          "599: {",
          "600:  YYCTYPE yych;",
          "601:  static const unsigned char yybm[] = {",
          "602:     0,   0,   0,   0,   0,   0,   0,   0,",
          "603:     0,   0,   0,   0,   0,   0,   0,   0,",
          "604:     0,   0,   0,   0,   0,   0,   0,   0,",
          "605:     0,   0,   0,   0,   0,   0,   0,   0,",
          "606:     0,   0,   0,   0,   0,   0,   0,   0,",
          "607:     0,   0,   0,   0,   0,   0,   0,   0,",
          "608:   128, 128, 128, 128, 128, 128, 128, 128,",
          "609:   128, 128,   0,   0,   0,   0,   0,   0,",
          "610:     0,   0,   0,   0,   0,   0,   0,   0,",
          "611:     0,   0,   0,   0,   0,   0,   0,   0,",
          "612:     0,   0,   0,   0,   0,   0,   0,   0,",
          "613:     0,   0,   0,   0,   0,   0,   0,   0,",
          "614:     0,   0,   0,   0,   0,   0,   0,   0,",
          "615:     0,   0,   0,   0,   0,   0,   0,   0,",
          "616:     0,   0,   0,   0,   0,   0,   0,   0,",
          "617:     0,   0,   0,   0,   0,   0,   0,   0,",
          "618:     0,   0,   0,   0,   0,   0,   0,   0,",
          "619:     0,   0,   0,   0,   0,   0,   0,   0,",
          "620:     0,   0,   0,   0,   0,   0,   0,   0,",
          "621:     0,   0,   0,   0,   0,   0,   0,   0,",
          "622:     0,   0,   0,   0,   0,   0,   0,   0,",
          "623:     0,   0,   0,   0,   0,   0,   0,   0,",
          "624:     0,   0,   0,   0,   0,   0,   0,   0,",
          "625:     0,   0,   0,   0,   0,   0,   0,   0,",
          "626:     0,   0,   0,   0,   0,   0,   0,   0,",
          "627:     0,   0,   0,   0,   0,   0,   0,   0,",
          "628:     0,   0,   0,   0,   0,   0,   0,   0,",
          "629:     0,   0,   0,   0,   0,   0,   0,   0,",
          "630:     0,   0,   0,   0,   0,   0,   0,   0,",
          "631:     0,   0,   0,   0,   0,   0,   0,   0,",
          "632:     0,   0,   0,   0,   0,   0,   0,   0,",
          "633:     0,   0,   0,   0,   0,   0,   0,   0,",
          "634:  };",
          "636:  if ((YYLIMIT - YYCURSOR) < 7) YYFILL(7);",
          "637:  yych = *YYCURSOR;",
          "638:  switch (yych) {",
          "639:  case 'C':",
          "640:  case 'O': goto yy13;",
          "641:  case 'N': goto yy5;",
          "642:  case 'R': goto yy2;",
          "643:  case 'S': goto yy10;",
          "644:  case 'a': goto yy11;",
          "645:  case 'b': goto yy6;",
          "646:  case 'd': goto yy8;",
          "647:  case 'i': goto yy7;",
          "648:  case 'o': goto yy12;",
          "649:  case 'r': goto yy4;",
          "650:  case 's': goto yy9;",
          "651:  case '}': goto yy14;",
          "652:  default: goto yy16;",
          "653:  }",
          "654: yy2:",
          "655:  yych = *(YYMARKER = ++YYCURSOR);",
          "656:  if (yych == ':') goto yy95;",
          "657: yy3:",
          "658: #line 976 \"ext/standard/var_unserializer.re\"",
          "659:  { return 0; }",
          "660: #line 661 \"ext/standard/var_unserializer.c\"",
          "661: yy4:",
          "662:  yych = *(YYMARKER = ++YYCURSOR);",
          "663:  if (yych == ':') goto yy89;",
          "664:  goto yy3;",
          "665: yy5:",
          "666:  yych = *++YYCURSOR;",
          "667:  if (yych == ';') goto yy87;",
          "668:  goto yy3;",
          "669: yy6:",
          "670:  yych = *(YYMARKER = ++YYCURSOR);",
          "671:  if (yych == ':') goto yy83;",
          "672:  goto yy3;",
          "673: yy7:",
          "674:  yych = *(YYMARKER = ++YYCURSOR);",
          "675:  if (yych == ':') goto yy77;",
          "676:  goto yy3;",
          "677: yy8:",
          "678:  yych = *(YYMARKER = ++YYCURSOR);",
          "679:  if (yych == ':') goto yy53;",
          "680:  goto yy3;",
          "681: yy9:",
          "682:  yych = *(YYMARKER = ++YYCURSOR);",
          "683:  if (yych == ':') goto yy46;",
          "684:  goto yy3;",
          "685: yy10:",
          "686:  yych = *(YYMARKER = ++YYCURSOR);",
          "687:  if (yych == ':') goto yy39;",
          "688:  goto yy3;",
          "689: yy11:",
          "690:  yych = *(YYMARKER = ++YYCURSOR);",
          "691:  if (yych == ':') goto yy32;",
          "692:  goto yy3;",
          "693: yy12:",
          "694:  yych = *(YYMARKER = ++YYCURSOR);",
          "695:  if (yych == ':') goto yy25;",
          "696:  goto yy3;",
          "697: yy13:",
          "698:  yych = *(YYMARKER = ++YYCURSOR);",
          "699:  if (yych == ':') goto yy17;",
          "700:  goto yy3;",
          "701: yy14:",
          "702:  ++YYCURSOR;",
          "703: #line 970 \"ext/standard/var_unserializer.re\"",
          "704:  {",
          "706:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "708: }",
          "709: #line 710 \"ext/standard/var_unserializer.c\"",
          "710: yy16:",
          "711:  yych = *++YYCURSOR;",
          "712:  goto yy3;",
          "713: yy17:",
          "714:  yych = *++YYCURSOR;",
          "715:  if (yybm[0+yych] & 128) {",
          "716:   goto yy20;",
          "717:  }",
          "718:  if (yych == '+') goto yy19;",
          "719: yy18:",
          "720:  YYCURSOR = YYMARKER;",
          "721:  goto yy3;",
          "722: yy19:",
          "723:  yych = *++YYCURSOR;",
          "724:  if (yybm[0+yych] & 128) {",
          "725:   goto yy20;",
          "726:  }",
          "727:  goto yy18;",
          "728: yy20:",
          "729:  ++YYCURSOR;",
          "730:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "731:  yych = *YYCURSOR;",
          "732:  if (yybm[0+yych] & 128) {",
          "733:   goto yy20;",
          "734:  }",
          "735:  if (yych <= '/') goto yy18;",
          "736:  if (yych >= ';') goto yy18;",
          "737:  yych = *++YYCURSOR;",
          "738:  if (yych != '\"') goto yy18;",
          "739:  ++YYCURSOR;",
          "740: #line 818 \"ext/standard/var_unserializer.re\"",
          "741:  {",
          "742:  size_t len, len2, len3, maxlen;",
          "743:  zend_long elements;",
          "744:  char *str;",
          "745:  zend_string *class_name;",
          "746:  zend_class_entry *ce;",
          "747:  int incomplete_class = 0;",
          "749:  int custom_object = 0;",
          "751:  zval user_func;",
          "752:  zval retval;",
          "753:  zval args[1];",
          "755:     if (!var_hash) return 0;",
          "756:  if (*start == 'C') {",
          "757:   custom_object = 1;",
          "758:  }",
          "760:  len2 = len = parse_uiv(start + 2);",
          "761:  maxlen = max - YYCURSOR;",
          "762:  if (maxlen < len || len == 0) {",
          "764:   return 0;",
          "765:  }",
          "767:  str = (char*)YYCURSOR;",
          "769:  YYCURSOR += len;",
          "771:  if (*(YYCURSOR) != '\"') {",
          "773:   return 0;",
          "774:  }",
          "775:  if (*(YYCURSOR+1) != ':') {",
          "777:   return 0;",
          "778:  }",
          "780:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "781:  if (len3 != len)",
          "782:  {",
          "784:   return 0;",
          "785:  }",
          "787:  class_name = zend_string_init(str, len, 0);",
          "789:  do {",
          "790:   if(!unserialize_allowed_class(class_name, var_hash)) {",
          "791:    incomplete_class = 1;",
          "792:    ce = PHP_IC_ENTRY;",
          "793:    break;",
          "794:   }",
          "797:   BG(serialize_lock)++;",
          "798:   ce = zend_lookup_class(class_name);",
          "799:   if (ce) {",
          "800:    BG(serialize_lock)--;",
          "801:    if (EG(exception)) {",
          "802:     zend_string_release(class_name);",
          "803:     return 0;",
          "804:    }",
          "805:    break;",
          "806:   }",
          "807:   BG(serialize_lock)--;",
          "809:   if (EG(exception)) {",
          "810:    zend_string_release(class_name);",
          "811:    return 0;",
          "812:   }",
          "815:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "816:    incomplete_class = 1;",
          "817:    ce = PHP_IC_ENTRY;",
          "818:    break;",
          "819:   }",
          "822:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "824:   ZVAL_STR_COPY(&args[0], class_name);",
          "825:   BG(serialize_lock)++;",
          "826:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "827:    BG(serialize_lock)--;",
          "828:    if (EG(exception)) {",
          "829:     zend_string_release(class_name);",
          "830:     zval_ptr_dtor(&user_func);",
          "831:     zval_ptr_dtor(&args[0]);",
          "832:     return 0;",
          "833:    }",
          "834:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "835:    incomplete_class = 1;",
          "836:    ce = PHP_IC_ENTRY;",
          "837:    zval_ptr_dtor(&user_func);",
          "838:    zval_ptr_dtor(&args[0]);",
          "839:    break;",
          "840:   }",
          "841:   BG(serialize_lock)--;",
          "842:   zval_ptr_dtor(&retval);",
          "843:   if (EG(exception)) {",
          "844:    zend_string_release(class_name);",
          "845:    zval_ptr_dtor(&user_func);",
          "846:    zval_ptr_dtor(&args[0]);",
          "847:    return 0;",
          "848:   }",
          "851:   BG(serialize_lock)++;",
          "852:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "853:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "854:    incomplete_class = 1;",
          "855:    ce = PHP_IC_ENTRY;",
          "856:   }",
          "857:   BG(serialize_lock)--;",
          "859:   zval_ptr_dtor(&user_func);",
          "860:   zval_ptr_dtor(&args[0]);",
          "861:   break;",
          "862:  } while (1);",
          "866:  if (custom_object) {",
          "867:   int ret;",
          "869:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "871:   if (ret && incomplete_class) {",
          "872:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "873:   }",
          "874:   zend_string_release(class_name);",
          "875:   return ret;",
          "876:  }",
          "878:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "880:  if (elements < 0) {",
          "881:     zend_string_release(class_name);",
          "882:     return 0;",
          "883:  }",
          "885:  if (incomplete_class) {",
          "886:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "887:  }",
          "888:  zend_string_release(class_name);",
          "890:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "891: }",
          "892: #line 893 \"ext/standard/var_unserializer.c\"",
          "893: yy25:",
          "894:  yych = *++YYCURSOR;",
          "895:  if (yych <= ',') {",
          "896:   if (yych != '+') goto yy18;",
          "897:  } else {",
          "898:   if (yych <= '-') goto yy26;",
          "899:   if (yych <= '/') goto yy18;",
          "900:   if (yych <= '9') goto yy27;",
          "901:   goto yy18;",
          "902:  }",
          "903: yy26:",
          "904:  yych = *++YYCURSOR;",
          "905:  if (yych <= '/') goto yy18;",
          "906:  if (yych >= ':') goto yy18;",
          "907: yy27:",
          "908:  ++YYCURSOR;",
          "909:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "910:  yych = *YYCURSOR;",
          "911:  if (yych <= '/') goto yy18;",
          "912:  if (yych <= '9') goto yy27;",
          "913:  if (yych >= ';') goto yy18;",
          "914:  yych = *++YYCURSOR;",
          "915:  if (yych != '\"') goto yy18;",
          "916:  ++YYCURSOR;",
          "917: #line 807 \"ext/standard/var_unserializer.re\"",
          "918:  {",
          "919:  long elements;",
          "920:     if (!var_hash) return 0;",
          "922:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "923:  if (elements < 0) {",
          "924:   return 0;",
          "925:  }",
          "926:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "927: }",
          "928: #line 929 \"ext/standard/var_unserializer.c\"",
          "929: yy32:",
          "930:  yych = *++YYCURSOR;",
          "931:  if (yych == '+') goto yy33;",
          "932:  if (yych <= '/') goto yy18;",
          "933:  if (yych <= '9') goto yy34;",
          "934:  goto yy18;",
          "935: yy33:",
          "936:  yych = *++YYCURSOR;",
          "937:  if (yych <= '/') goto yy18;",
          "938:  if (yych >= ':') goto yy18;",
          "939: yy34:",
          "940:  ++YYCURSOR;",
          "941:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "942:  yych = *YYCURSOR;",
          "943:  if (yych <= '/') goto yy18;",
          "944:  if (yych <= '9') goto yy34;",
          "945:  if (yych >= ';') goto yy18;",
          "946:  yych = *++YYCURSOR;",
          "947:  if (yych != '{') goto yy18;",
          "948:  ++YYCURSOR;",
          "949: #line 783 \"ext/standard/var_unserializer.re\"",
          "950:  {",
          "951:  zend_long elements = parse_iv(start + 2);",
          "954:     if (!var_hash) return 0;",
          "956:  if (elements < 0) {",
          "957:   return 0;",
          "958:  }",
          "960:  array_init_size(rval, elements);",
          "961:  if (elements) {",
          "964:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "965:  }",
          "967:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "968:   return 0;",
          "969:  }",
          "971:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "972: }",
          "973: #line 974 \"ext/standard/var_unserializer.c\"",
          "974: yy39:",
          "975:  yych = *++YYCURSOR;",
          "976:  if (yych == '+') goto yy40;",
          "977:  if (yych <= '/') goto yy18;",
          "978:  if (yych <= '9') goto yy41;",
          "979:  goto yy18;",
          "980: yy40:",
          "981:  yych = *++YYCURSOR;",
          "982:  if (yych <= '/') goto yy18;",
          "983:  if (yych >= ':') goto yy18;",
          "984: yy41:",
          "985:  ++YYCURSOR;",
          "986:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "987:  yych = *YYCURSOR;",
          "988:  if (yych <= '/') goto yy18;",
          "989:  if (yych <= '9') goto yy41;",
          "990:  if (yych >= ';') goto yy18;",
          "991:  yych = *++YYCURSOR;",
          "992:  if (yych != '\"') goto yy18;",
          "993:  ++YYCURSOR;",
          "994: #line 749 \"ext/standard/var_unserializer.re\"",
          "995:  {",
          "996:  size_t len, maxlen;",
          "997:  zend_string *str;",
          "999:  len = parse_uiv(start + 2);",
          "1000:  maxlen = max - YYCURSOR;",
          "1001:  if (maxlen < len) {",
          "1003:   return 0;",
          "1004:  }",
          "1006:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1007:   return 0;",
          "1008:  }",
          "1010:  if (*(YYCURSOR) != '\"') {",
          "1011:   zend_string_free(str);",
          "1013:   return 0;",
          "1014:  }",
          "1016:  if (*(YYCURSOR + 1) != ';') {",
          "1017:   efree(str);",
          "1019:   return 0;",
          "1020:  }",
          "1022:  YYCURSOR += 2;",
          "1025:  ZVAL_STR(rval, str);",
          "1026:  return 1;",
          "1027: }",
          "1028: #line 1029 \"ext/standard/var_unserializer.c\"",
          "1029: yy46:",
          "1030:  yych = *++YYCURSOR;",
          "1031:  if (yych == '+') goto yy47;",
          "1032:  if (yych <= '/') goto yy18;",
          "1033:  if (yych <= '9') goto yy48;",
          "1034:  goto yy18;",
          "1035: yy47:",
          "1036:  yych = *++YYCURSOR;",
          "1037:  if (yych <= '/') goto yy18;",
          "1038:  if (yych >= ':') goto yy18;",
          "1039: yy48:",
          "1040:  ++YYCURSOR;",
          "1041:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "1042:  yych = *YYCURSOR;",
          "1043:  if (yych <= '/') goto yy18;",
          "1044:  if (yych <= '9') goto yy48;",
          "1045:  if (yych >= ';') goto yy18;",
          "1046:  yych = *++YYCURSOR;",
          "1047:  if (yych != '\"') goto yy18;",
          "1048:  ++YYCURSOR;",
          "1049: #line 717 \"ext/standard/var_unserializer.re\"",
          "1050:  {",
          "1051:  size_t len, maxlen;",
          "1052:  char *str;",
          "1054:  len = parse_uiv(start + 2);",
          "1055:  maxlen = max - YYCURSOR;",
          "1056:  if (maxlen < len) {",
          "1058:   return 0;",
          "1059:  }",
          "1061:  str = (char*)YYCURSOR;",
          "1063:  YYCURSOR += len;",
          "1065:  if (*(YYCURSOR) != '\"') {",
          "1067:   return 0;",
          "1068:  }",
          "1070:  if (*(YYCURSOR + 1) != ';') {",
          "1072:   return 0;",
          "1073:  }",
          "1075:  YYCURSOR += 2;",
          "1078:  ZVAL_STRINGL(rval, str, len);",
          "1079:  return 1;",
          "1080: }",
          "1081: #line 1082 \"ext/standard/var_unserializer.c\"",
          "1082: yy53:",
          "1083:  yych = *++YYCURSOR;",
          "1084:  if (yych <= '/') {",
          "1085:   if (yych <= ',') {",
          "1086:    if (yych == '+') goto yy57;",
          "1087:    goto yy18;",
          "1088:   } else {",
          "1089:    if (yych <= '-') goto yy55;",
          "1090:    if (yych <= '.') goto yy60;",
          "1091:    goto yy18;",
          "1092:   }",
          "1093:  } else {",
          "1094:   if (yych <= 'I') {",
          "1095:    if (yych <= '9') goto yy58;",
          "1096:    if (yych <= 'H') goto yy18;",
          "1097:    goto yy56;",
          "1098:   } else {",
          "1099:    if (yych != 'N') goto yy18;",
          "1100:   }",
          "1101:  }",
          "1102:  yych = *++YYCURSOR;",
          "1103:  if (yych == 'A') goto yy76;",
          "1104:  goto yy18;",
          "1105: yy55:",
          "1106:  yych = *++YYCURSOR;",
          "1107:  if (yych <= '/') {",
          "1108:   if (yych == '.') goto yy60;",
          "1109:   goto yy18;",
          "1110:  } else {",
          "1111:   if (yych <= '9') goto yy58;",
          "1112:   if (yych != 'I') goto yy18;",
          "1113:  }",
          "1114: yy56:",
          "1115:  yych = *++YYCURSOR;",
          "1116:  if (yych == 'N') goto yy72;",
          "1117:  goto yy18;",
          "1118: yy57:",
          "1119:  yych = *++YYCURSOR;",
          "1120:  if (yych == '.') goto yy60;",
          "1121:  if (yych <= '/') goto yy18;",
          "1122:  if (yych >= ':') goto yy18;",
          "1123: yy58:",
          "1124:  ++YYCURSOR;",
          "1125:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1126:  yych = *YYCURSOR;",
          "1127:  if (yych <= ':') {",
          "1128:   if (yych <= '.') {",
          "1129:    if (yych <= '-') goto yy18;",
          "1130:    goto yy70;",
          "1131:   } else {",
          "1132:    if (yych <= '/') goto yy18;",
          "1133:    if (yych <= '9') goto yy58;",
          "1134:    goto yy18;",
          "1135:   }",
          "1136:  } else {",
          "1137:   if (yych <= 'E') {",
          "1138:    if (yych <= ';') goto yy63;",
          "1139:    if (yych <= 'D') goto yy18;",
          "1140:    goto yy65;",
          "1141:   } else {",
          "1142:    if (yych == 'e') goto yy65;",
          "1143:    goto yy18;",
          "1144:   }",
          "1145:  }",
          "1146: yy60:",
          "1147:  yych = *++YYCURSOR;",
          "1148:  if (yych <= '/') goto yy18;",
          "1149:  if (yych >= ':') goto yy18;",
          "1150: yy61:",
          "1151:  ++YYCURSOR;",
          "1152:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1153:  yych = *YYCURSOR;",
          "1154:  if (yych <= ';') {",
          "1155:   if (yych <= '/') goto yy18;",
          "1156:   if (yych <= '9') goto yy61;",
          "1157:   if (yych <= ':') goto yy18;",
          "1158:  } else {",
          "1159:   if (yych <= 'E') {",
          "1160:    if (yych <= 'D') goto yy18;",
          "1161:    goto yy65;",
          "1162:   } else {",
          "1163:    if (yych == 'e') goto yy65;",
          "1164:    goto yy18;",
          "1165:   }",
          "1166:  }",
          "1167: yy63:",
          "1168:  ++YYCURSOR;",
          "1169: #line 708 \"ext/standard/var_unserializer.re\"",
          "1170:  {",
          "1171: #if SIZEOF_ZEND_LONG == 4",
          "1172: use_double:",
          "1173: #endif",
          "1175:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1176:  return 1;",
          "1177: }",
          "1178: #line 1179 \"ext/standard/var_unserializer.c\"",
          "1179: yy65:",
          "1180:  yych = *++YYCURSOR;",
          "1181:  if (yych <= ',') {",
          "1182:   if (yych != '+') goto yy18;",
          "1183:  } else {",
          "1184:   if (yych <= '-') goto yy66;",
          "1185:   if (yych <= '/') goto yy18;",
          "1186:   if (yych <= '9') goto yy67;",
          "1187:   goto yy18;",
          "1188:  }",
          "1189: yy66:",
          "1190:  yych = *++YYCURSOR;",
          "1191:  if (yych <= ',') {",
          "1192:   if (yych == '+') goto yy69;",
          "1193:   goto yy18;",
          "1194:  } else {",
          "1195:   if (yych <= '-') goto yy69;",
          "1196:   if (yych <= '/') goto yy18;",
          "1197:   if (yych >= ':') goto yy18;",
          "1198:  }",
          "1199: yy67:",
          "1200:  ++YYCURSOR;",
          "1201:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1202:  yych = *YYCURSOR;",
          "1203:  if (yych <= '/') goto yy18;",
          "1204:  if (yych <= '9') goto yy67;",
          "1205:  if (yych == ';') goto yy63;",
          "1206:  goto yy18;",
          "1207: yy69:",
          "1208:  yych = *++YYCURSOR;",
          "1209:  if (yych <= '/') goto yy18;",
          "1210:  if (yych <= '9') goto yy67;",
          "1211:  goto yy18;",
          "1212: yy70:",
          "1213:  ++YYCURSOR;",
          "1214:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1215:  yych = *YYCURSOR;",
          "1216:  if (yych <= ';') {",
          "1217:   if (yych <= '/') goto yy18;",
          "1218:   if (yych <= '9') goto yy70;",
          "1219:   if (yych <= ':') goto yy18;",
          "1220:   goto yy63;",
          "1221:  } else {",
          "1222:   if (yych <= 'E') {",
          "1223:    if (yych <= 'D') goto yy18;",
          "1224:    goto yy65;",
          "1225:   } else {",
          "1226:    if (yych == 'e') goto yy65;",
          "1227:    goto yy18;",
          "1228:   }",
          "1229:  }",
          "1230: yy72:",
          "1231:  yych = *++YYCURSOR;",
          "1232:  if (yych != 'F') goto yy18;",
          "1233: yy73:",
          "1234:  yych = *++YYCURSOR;",
          "1235:  if (yych != ';') goto yy18;",
          "1236:  ++YYCURSOR;",
          "1237: #line 692 \"ext/standard/var_unserializer.re\"",
          "1238:  {",
          "1241:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1242:   ZVAL_DOUBLE(rval, ZEND_NAN);",
          "1243:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1244:   ZVAL_DOUBLE(rval, ZEND_INFINITY);",
          "1245:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1246:   ZVAL_DOUBLE(rval, -ZEND_INFINITY);",
          "1247:  } else {",
          "1248:   ZVAL_NULL(rval);",
          "1249:  }",
          "1251:  return 1;",
          "1252: }",
          "1253: #line 1254 \"ext/standard/var_unserializer.c\"",
          "1254: yy76:",
          "1255:  yych = *++YYCURSOR;",
          "1256:  if (yych == 'N') goto yy73;",
          "1257:  goto yy18;",
          "1258: yy77:",
          "1259:  yych = *++YYCURSOR;",
          "1260:  if (yych <= ',') {",
          "1261:   if (yych != '+') goto yy18;",
          "1262:  } else {",
          "1263:   if (yych <= '-') goto yy78;",
          "1264:   if (yych <= '/') goto yy18;",
          "1265:   if (yych <= '9') goto yy79;",
          "1266:   goto yy18;",
          "1267:  }",
          "1268: yy78:",
          "1269:  yych = *++YYCURSOR;",
          "1270:  if (yych <= '/') goto yy18;",
          "1271:  if (yych >= ':') goto yy18;",
          "1272: yy79:",
          "1273:  ++YYCURSOR;",
          "1274:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1275:  yych = *YYCURSOR;",
          "1276:  if (yych <= '/') goto yy18;",
          "1277:  if (yych <= '9') goto yy79;",
          "1278:  if (yych != ';') goto yy18;",
          "1279:  ++YYCURSOR;",
          "1280: #line 666 \"ext/standard/var_unserializer.re\"",
          "1281:  {",
          "1282: #if SIZEOF_ZEND_LONG == 4",
          "1283:  int digits = YYCURSOR - start - 3;",
          "1285:  if (start[2] == '-' || start[2] == '+') {",
          "1286:   digits--;",
          "1287:  }",
          "1290:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1291:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1292:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1294:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1295:     goto use_double;",
          "1296:    }",
          "1297:   } else {",
          "1298:    goto use_double;",
          "1299:   }",
          "1300:  }",
          "1301: #endif",
          "1303:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1304:  return 1;",
          "1305: }",
          "1306: #line 1307 \"ext/standard/var_unserializer.c\"",
          "1307: yy83:",
          "1308:  yych = *++YYCURSOR;",
          "1309:  if (yych <= '/') goto yy18;",
          "1310:  if (yych >= '2') goto yy18;",
          "1311:  yych = *++YYCURSOR;",
          "1312:  if (yych != ';') goto yy18;",
          "1313:  ++YYCURSOR;",
          "1314: #line 660 \"ext/standard/var_unserializer.re\"",
          "1315:  {",
          "1317:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1318:  return 1;",
          "1319: }",
          "1320: #line 1321 \"ext/standard/var_unserializer.c\"",
          "1321: yy87:",
          "1322:  ++YYCURSOR;",
          "1323: #line 654 \"ext/standard/var_unserializer.re\"",
          "1324:  {",
          "1326:  ZVAL_NULL(rval);",
          "1327:  return 1;",
          "1328: }",
          "1329: #line 1330 \"ext/standard/var_unserializer.c\"",
          "1330: yy89:",
          "1331:  yych = *++YYCURSOR;",
          "1332:  if (yych <= ',') {",
          "1333:   if (yych != '+') goto yy18;",
          "1334:  } else {",
          "1335:   if (yych <= '-') goto yy90;",
          "1336:   if (yych <= '/') goto yy18;",
          "1337:   if (yych <= '9') goto yy91;",
          "1338:   goto yy18;",
          "1339:  }",
          "1340: yy90:",
          "1341:  yych = *++YYCURSOR;",
          "1342:  if (yych <= '/') goto yy18;",
          "1343:  if (yych >= ':') goto yy18;",
          "1344: yy91:",
          "1345:  ++YYCURSOR;",
          "1346:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1347:  yych = *YYCURSOR;",
          "1348:  if (yych <= '/') goto yy18;",
          "1349:  if (yych <= '9') goto yy91;",
          "1350:  if (yych != ';') goto yy18;",
          "1351:  ++YYCURSOR;",
          "1352: #line 629 \"ext/standard/var_unserializer.re\"",
          "1353:  {",
          "1354:  zend_long id;",
          "1357:  if (!var_hash) return 0;",
          "1359:  id = parse_iv(start + 2) - 1;",
          "1360:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1361:   return 0;",
          "1362:  }",
          "1364:  if (rval_ref == rval) {",
          "1365:   return 0;",
          "1366:  }",
          "1368:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1369:   ZVAL_UNDEF(rval);",
          "1370:   return 1;",
          "1371:  }",
          "1373:  ZVAL_COPY(rval, rval_ref);",
          "1375:  return 1;",
          "1376: }",
          "1377: #line 1378 \"ext/standard/var_unserializer.c\"",
          "1378: yy95:",
          "1379:  yych = *++YYCURSOR;",
          "1380:  if (yych <= ',') {",
          "1381:   if (yych != '+') goto yy18;",
          "1382:  } else {",
          "1383:   if (yych <= '-') goto yy96;",
          "1384:   if (yych <= '/') goto yy18;",
          "1385:   if (yych <= '9') goto yy97;",
          "1386:   goto yy18;",
          "1387:  }",
          "1388: yy96:",
          "1389:  yych = *++YYCURSOR;",
          "1390:  if (yych <= '/') goto yy18;",
          "1391:  if (yych >= ':') goto yy18;",
          "1392: yy97:",
          "1393:  ++YYCURSOR;",
          "1394:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1395:  yych = *YYCURSOR;",
          "1396:  if (yych <= '/') goto yy18;",
          "1397:  if (yych <= '9') goto yy97;",
          "1398:  if (yych != ';') goto yy18;",
          "1399:  ++YYCURSOR;",
          "1400: #line 603 \"ext/standard/var_unserializer.re\"",
          "1401:  {",
          "1402:  zend_long id;",
          "1405:  if (!var_hash) return 0;",
          "1407:  id = parse_iv(start + 2) - 1;",
          "1408:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1409:   return 0;",
          "1410:  }",
          "1412:  zval_ptr_dtor(rval);",
          "1413:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1414:   ZVAL_UNDEF(rval);",
          "1415:   return 1;",
          "1416:  }",
          "1417:  if (Z_ISREF_P(rval_ref)) {",
          "1418:   ZVAL_COPY(rval, rval_ref);",
          "1419:  } else {",
          "1420:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1421:   ZVAL_COPY(rval, rval_ref);",
          "1422:  }",
          "1424:  return 1;",
          "1425: }",
          "1426: #line 1427 \"ext/standard/var_unserializer.c\"",
          "1427: }",
          "1428: #line 978 \"ext/standard/var_unserializer.re\"",
          "1431:  return 0;",
          "1432: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cab5ef5355a709caadd156a2957002325fe85f18",
      "candidate_info": {
        "commit_hash": "cab5ef5355a709caadd156a2957002325fe85f18",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/cab5ef5355a709caadd156a2957002325fe85f18",
        "files": [
          "ext/standard/tests/serialize/bug25378.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "Fixed bug #74111\n\n(cherry picked from commit 3a25a56a92ac1d0d6028a8ecd32ccf03bcd71ade)",
        "before_after_code_files": [
          "ext/standard/tests/serialize/bug25378.phpt||ext/standard/tests/serialize/bug25378.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ],
          "candidate": [
            "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
            "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/tests/serialize/bug25378.phpt||ext/standard/tests/serialize/bug25378.phpt": [
          "File: ext/standard/tests/serialize/bug25378.phpt -> ext/standard/tests/serialize/bug25378.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: Notice: unserialize(): Error at offset 17 of 33 bytes in %sbug25378.php on line %d",
          "43: bool(false)",
          "46: bool(false)",
          "48: Notice: unserialize(): Error at offset 2 of 13 bytes in %sbug25378.php on line %d",
          "",
          "[Removed Lines]",
          "45: Notice: unserialize(): Error at offset 33 of 32 bytes in %sbug25378.php on line %d",
          "",
          "[Added Lines]",
          "45: Notice: unserialize(): Error at offset 32 of 32 bytes in %sbug25378.php on line %d",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429: static inline int finish_nested_data(UNSERIALIZE_PARAMETER)",
          "430: {",
          "438: }",
          "440: static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "",
          "[Removed Lines]",
          "431:  if (*((*p)++) == '}')",
          "432:   return 1;",
          "434: #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE",
          "435:  zval_ptr_dtor(rval);",
          "436: #endif",
          "437:  return 0;",
          "",
          "[Added Lines]",
          "431:  if (*p >= max || **p != '}') {",
          "432:   return 0;",
          "433:  }",
          "435:  (*p)++;",
          "436:  return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "582:  start = cursor;",
          "586: {",
          "587:  YYCTYPE yych;",
          "588:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "585: #line 586 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "584: #line 585 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:  yych = *YYCURSOR;",
          "624:  switch (yych) {",
          "625:  case 'C':",
          "627:  case 'N': goto yy5;",
          "634:  case 'o': goto yy12;",
          "639:  }",
          "640: yy2:",
          "642: yy3:",
          "644:  { return 0; }",
          "645: #line 646 \"ext/standard/var_unserializer.c\"",
          "646: yy4:",
          "647:  yych = *(YYMARKER = ++YYCURSOR);",
          "649:  goto yy3;",
          "650: yy5:",
          "651:  yych = *++YYCURSOR;",
          "653:  goto yy3;",
          "654: yy6:",
          "655:  yych = *(YYMARKER = ++YYCURSOR);",
          "657:  goto yy3;",
          "658: yy7:",
          "659:  yych = *(YYMARKER = ++YYCURSOR);",
          "661:  goto yy3;",
          "662: yy8:",
          "663:  yych = *(YYMARKER = ++YYCURSOR);",
          "665:  goto yy3;",
          "666: yy9:",
          "667:  yych = *(YYMARKER = ++YYCURSOR);",
          "669:  goto yy3;",
          "670: yy10:",
          "671:  yych = *(YYMARKER = ++YYCURSOR);",
          "673:  goto yy3;",
          "674: yy11:",
          "675:  yych = *(YYMARKER = ++YYCURSOR);",
          "677:  goto yy3;",
          "678: yy12:",
          "679:  yych = *(YYMARKER = ++YYCURSOR);",
          "681:  goto yy3;",
          "682: yy13:",
          "683:  yych = *(YYMARKER = ++YYCURSOR);",
          "685:  goto yy3;",
          "686: yy14:",
          "691:  ++YYCURSOR;",
          "693:  {",
          "695:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "697: }",
          "699: yy17:",
          "700:  yych = *++YYCURSOR;",
          "701:  if (yybm[0+yych] & 128) {",
          "703:  }",
          "705: yy18:",
          "706:  YYCURSOR = YYMARKER;",
          "707:  goto yy3;",
          "708: yy19:",
          "718:  yych = *++YYCURSOR;",
          "727:  }",
          "739:  goto yy18;",
          "742:  if (yych <= '/') goto yy18;",
          "746:  yych = *++YYCURSOR;",
          "755:   }",
          "764:   }",
          "765:  }",
          "776:  }",
          "787:  }",
          "789:  yych = *++YYCURSOR;",
          "790:  if (yych <= ',') {",
          "793:  } else {",
          "795:   if (yych <= '/') goto yy18;",
          "797:   goto yy18;",
          "798:  }",
          "800:  yych = *++YYCURSOR;",
          "802:  if (yych <= '/') goto yy18;",
          "812:  ++YYCURSOR;",
          "813:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "814:  yych = *YYCURSOR;",
          "818:  if (yych <= '/') goto yy18;",
          "822:  yych = *++YYCURSOR;",
          "826:  ++YYCURSOR;",
          "829:  if (yych <= '/') goto yy18;",
          "830:  if (yych <= '9') goto yy34;",
          "832:  goto yy18;",
          "834:  yych = *++YYCURSOR;",
          "835:  if (yych <= '/') goto yy18;",
          "836:  if (yych >= ':') goto yy18;",
          "838:  ++YYCURSOR;",
          "839:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "840:  yych = *YYCURSOR;",
          "841:  if (yych <= '/') goto yy18;",
          "846:  yych = *++YYCURSOR;",
          "850:  ++YYCURSOR;",
          "875:  }",
          "903:  }",
          "913:  yych = *++YYCURSOR;",
          "914:  if (yych <= '/') goto yy18;",
          "923:  goto yy18;",
          "925:  yych = *++YYCURSOR;",
          "926:  if (yych <= '/') goto yy18;",
          "927:  if (yych >= ':') goto yy18;",
          "929:  ++YYCURSOR;",
          "930:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "931:  yych = *YYCURSOR;",
          "932:  if (yych <= '/') goto yy18;",
          "937:  yych = *++YYCURSOR;",
          "941:  ++YYCURSOR;",
          "944:  if (yych <= '/') goto yy18;",
          "947:  goto yy18;",
          "949:  yych = *++YYCURSOR;",
          "950:  if (yych <= '/') goto yy18;",
          "951:  if (yych >= ':') goto yy18;",
          "953:  ++YYCURSOR;",
          "954:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "955:  yych = *YYCURSOR;",
          "956:  if (yych <= '/') goto yy18;",
          "961:  yych = *++YYCURSOR;",
          "965:  ++YYCURSOR;",
          "967:  {",
          "975:   return 0;",
          "976:  }",
          "982:  }",
          "988:  }",
          "990:  return 1;",
          "991: }",
          "994:  yych = *++YYCURSOR;",
          "996:  goto yy18;",
          "998:  yych = *++YYCURSOR;",
          "1000:  goto yy18;",
          "1002:  ++YYCURSOR;",
          "1011:  ++YYCURSOR;",
          "1012:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1013:  yych = *YYCURSOR;",
          "1014:  if (yych <= ';') {",
          "1015:   if (yych <= '/') goto yy18;",
          "1017:   if (yych <= ':') goto yy18;",
          "1018:  } else {",
          "1019:   if (yych <= 'E') {",
          "1020:    if (yych <= 'D') goto yy18;",
          "1022:   } else {",
          "1024:    goto yy18;",
          "1025:   }",
          "1026:  }",
          "1028:  ++YYCURSOR;",
          "1030:  {",
          "1031: #if SIZEOF_ZEND_LONG == 4",
          "1032: use_double:",
          "",
          "[Removed Lines]",
          "626:  case 'O': goto yy4;",
          "628:  case 'R': goto yy6;",
          "629:  case 'S': goto yy7;",
          "630:  case 'a': goto yy8;",
          "631:  case 'b': goto yy9;",
          "632:  case 'd': goto yy10;",
          "633:  case 'i': goto yy11;",
          "635:  case 'r': goto yy13;",
          "636:  case 's': goto yy14;",
          "637:  case '}': goto yy15;",
          "638:  default: goto yy2;",
          "641:  ++YYCURSOR;",
          "643: #line 963 \"ext/standard/var_unserializer.re\"",
          "648:  if (yych == ':') goto yy17;",
          "652:  if (yych == ';') goto yy19;",
          "656:  if (yych == ':') goto yy21;",
          "660:  if (yych == ':') goto yy22;",
          "664:  if (yych == ':') goto yy23;",
          "668:  if (yych == ':') goto yy24;",
          "672:  if (yych == ':') goto yy25;",
          "676:  if (yych == ':') goto yy26;",
          "680:  if (yych == ':') goto yy27;",
          "684:  if (yych == ':') goto yy28;",
          "687:  yych = *(YYMARKER = ++YYCURSOR);",
          "688:  if (yych == ':') goto yy29;",
          "689:  goto yy3;",
          "690: yy15:",
          "692: #line 957 \"ext/standard/var_unserializer.re\"",
          "698: #line 699 \"ext/standard/var_unserializer.c\"",
          "702:   goto yy31;",
          "704:  if (yych == '+') goto yy30;",
          "709:  ++YYCURSOR;",
          "710: #line 641 \"ext/standard/var_unserializer.re\"",
          "711:  {",
          "713:  ZVAL_NULL(rval);",
          "714:  return 1;",
          "715: }",
          "716: #line 717 \"ext/standard/var_unserializer.c\"",
          "717: yy21:",
          "719:  if (yych <= ',') {",
          "720:   if (yych == '+') goto yy33;",
          "721:   goto yy18;",
          "722:  } else {",
          "723:   if (yych <= '-') goto yy33;",
          "724:   if (yych <= '/') goto yy18;",
          "725:   if (yych <= '9') goto yy34;",
          "726:   goto yy18;",
          "728: yy22:",
          "729:  yych = *++YYCURSOR;",
          "730:  if (yych == '+') goto yy36;",
          "731:  if (yych <= '/') goto yy18;",
          "732:  if (yych <= '9') goto yy37;",
          "733:  goto yy18;",
          "734: yy23:",
          "735:  yych = *++YYCURSOR;",
          "736:  if (yych == '+') goto yy39;",
          "737:  if (yych <= '/') goto yy18;",
          "738:  if (yych <= '9') goto yy40;",
          "740: yy24:",
          "741:  yych = *++YYCURSOR;",
          "743:  if (yych <= '1') goto yy42;",
          "744:  goto yy18;",
          "745: yy25:",
          "747:  if (yych <= '/') {",
          "748:   if (yych <= ',') {",
          "749:    if (yych == '+') goto yy43;",
          "750:    goto yy18;",
          "751:   } else {",
          "752:    if (yych <= '-') goto yy44;",
          "753:    if (yych <= '.') goto yy45;",
          "754:    goto yy18;",
          "756:  } else {",
          "757:   if (yych <= 'I') {",
          "758:    if (yych <= '9') goto yy46;",
          "759:    if (yych <= 'H') goto yy18;",
          "760:    goto yy48;",
          "761:   } else {",
          "762:    if (yych == 'N') goto yy49;",
          "763:    goto yy18;",
          "766: yy26:",
          "767:  yych = *++YYCURSOR;",
          "768:  if (yych <= ',') {",
          "769:   if (yych == '+') goto yy50;",
          "770:   goto yy18;",
          "771:  } else {",
          "772:   if (yych <= '-') goto yy50;",
          "773:   if (yych <= '/') goto yy18;",
          "774:   if (yych <= '9') goto yy51;",
          "775:   goto yy18;",
          "777: yy27:",
          "778:  yych = *++YYCURSOR;",
          "779:  if (yych <= ',') {",
          "780:   if (yych == '+') goto yy53;",
          "781:   goto yy18;",
          "782:  } else {",
          "783:   if (yych <= '-') goto yy53;",
          "784:   if (yych <= '/') goto yy18;",
          "785:   if (yych <= '9') goto yy54;",
          "786:   goto yy18;",
          "788: yy28:",
          "791:   if (yych == '+') goto yy56;",
          "792:   goto yy18;",
          "794:   if (yych <= '-') goto yy56;",
          "796:   if (yych <= '9') goto yy57;",
          "799: yy29:",
          "801:  if (yych == '+') goto yy59;",
          "803:  if (yych <= '9') goto yy60;",
          "804:  goto yy18;",
          "805: yy30:",
          "806:  yych = *++YYCURSOR;",
          "807:  if (yybm[0+yych] & 128) {",
          "808:   goto yy31;",
          "809:  }",
          "810:  goto yy18;",
          "811: yy31:",
          "815:  if (yybm[0+yych] & 128) {",
          "816:   goto yy31;",
          "817:  }",
          "819:  if (yych <= ':') goto yy62;",
          "820:  goto yy18;",
          "821: yy33:",
          "823:  if (yych <= '/') goto yy18;",
          "824:  if (yych >= ':') goto yy18;",
          "825: yy34:",
          "827:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "828:  yych = *YYCURSOR;",
          "831:  if (yych == ';') goto yy63;",
          "833: yy36:",
          "837: yy37:",
          "842:  if (yych <= '9') goto yy37;",
          "843:  if (yych <= ':') goto yy65;",
          "844:  goto yy18;",
          "845: yy39:",
          "847:  if (yych <= '/') goto yy18;",
          "848:  if (yych >= ':') goto yy18;",
          "849: yy40:",
          "851:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "852:  yych = *YYCURSOR;",
          "853:  if (yych <= '/') goto yy18;",
          "854:  if (yych <= '9') goto yy40;",
          "855:  if (yych <= ':') goto yy66;",
          "856:  goto yy18;",
          "857: yy42:",
          "858:  yych = *++YYCURSOR;",
          "859:  if (yych == ';') goto yy67;",
          "860:  goto yy18;",
          "861: yy43:",
          "862:  yych = *++YYCURSOR;",
          "863:  if (yych == '.') goto yy45;",
          "864:  if (yych <= '/') goto yy18;",
          "865:  if (yych <= '9') goto yy46;",
          "866:  goto yy18;",
          "867: yy44:",
          "868:  yych = *++YYCURSOR;",
          "869:  if (yych <= '/') {",
          "870:   if (yych != '.') goto yy18;",
          "871:  } else {",
          "872:   if (yych <= '9') goto yy46;",
          "873:   if (yych == 'I') goto yy48;",
          "874:   goto yy18;",
          "876: yy45:",
          "877:  yych = *++YYCURSOR;",
          "878:  if (yych <= '/') goto yy18;",
          "879:  if (yych <= '9') goto yy69;",
          "880:  goto yy18;",
          "881: yy46:",
          "882:  ++YYCURSOR;",
          "883:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "884:  yych = *YYCURSOR;",
          "885:  if (yych <= ':') {",
          "886:   if (yych <= '.') {",
          "887:    if (yych <= '-') goto yy18;",
          "888:    goto yy69;",
          "889:   } else {",
          "890:    if (yych <= '/') goto yy18;",
          "891:    if (yych <= '9') goto yy46;",
          "892:    goto yy18;",
          "893:   }",
          "894:  } else {",
          "895:   if (yych <= 'E') {",
          "896:    if (yych <= ';') goto yy71;",
          "897:    if (yych <= 'D') goto yy18;",
          "898:    goto yy73;",
          "899:   } else {",
          "900:    if (yych == 'e') goto yy73;",
          "901:    goto yy18;",
          "902:   }",
          "904: yy48:",
          "905:  yych = *++YYCURSOR;",
          "906:  if (yych == 'N') goto yy74;",
          "907:  goto yy18;",
          "908: yy49:",
          "909:  yych = *++YYCURSOR;",
          "910:  if (yych == 'A') goto yy75;",
          "911:  goto yy18;",
          "912: yy50:",
          "915:  if (yych >= ':') goto yy18;",
          "916: yy51:",
          "917:  ++YYCURSOR;",
          "918:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "919:  yych = *YYCURSOR;",
          "920:  if (yych <= '/') goto yy18;",
          "921:  if (yych <= '9') goto yy51;",
          "922:  if (yych == ';') goto yy76;",
          "924: yy53:",
          "928: yy54:",
          "933:  if (yych <= '9') goto yy54;",
          "934:  if (yych <= ':') goto yy78;",
          "935:  goto yy18;",
          "936: yy56:",
          "938:  if (yych <= '/') goto yy18;",
          "939:  if (yych >= ':') goto yy18;",
          "940: yy57:",
          "942:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "943:  yych = *YYCURSOR;",
          "945:  if (yych <= '9') goto yy57;",
          "946:  if (yych == ';') goto yy79;",
          "948: yy59:",
          "952: yy60:",
          "957:  if (yych <= '9') goto yy60;",
          "958:  if (yych <= ':') goto yy81;",
          "959:  goto yy18;",
          "960: yy62:",
          "962:  if (yych == '\"') goto yy82;",
          "963:  goto yy18;",
          "964: yy63:",
          "966: #line 590 \"ext/standard/var_unserializer.re\"",
          "968:  zend_long id;",
          "971:  if (!var_hash) return 0;",
          "973:  id = parse_iv(start + 2) - 1;",
          "974:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "978:  zval_ptr_dtor(rval);",
          "979:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "980:   ZVAL_UNDEF(rval);",
          "981:   return 1;",
          "983:  if (Z_ISREF_P(rval_ref)) {",
          "984:   ZVAL_COPY(rval, rval_ref);",
          "985:  } else {",
          "986:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "987:   ZVAL_COPY(rval, rval_ref);",
          "992: #line 993 \"ext/standard/var_unserializer.c\"",
          "993: yy65:",
          "995:  if (yych == '\"') goto yy84;",
          "997: yy66:",
          "999:  if (yych == '{') goto yy86;",
          "1001: yy67:",
          "1003: #line 647 \"ext/standard/var_unserializer.re\"",
          "1004:  {",
          "1006:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1007:  return 1;",
          "1008: }",
          "1009: #line 1010 \"ext/standard/var_unserializer.c\"",
          "1010: yy69:",
          "1016:   if (yych <= '9') goto yy69;",
          "1021:    goto yy73;",
          "1023:    if (yych == 'e') goto yy73;",
          "1027: yy71:",
          "1029: #line 695 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "625:  case 'O': goto yy13;",
          "627:  case 'R': goto yy2;",
          "628:  case 'S': goto yy10;",
          "629:  case 'a': goto yy11;",
          "630:  case 'b': goto yy6;",
          "631:  case 'd': goto yy8;",
          "632:  case 'i': goto yy7;",
          "634:  case 'r': goto yy4;",
          "635:  case 's': goto yy9;",
          "636:  case '}': goto yy14;",
          "637:  default: goto yy16;",
          "640:  yych = *(YYMARKER = ++YYCURSOR);",
          "641:  if (yych == ':') goto yy95;",
          "643: #line 962 \"ext/standard/var_unserializer.re\"",
          "648:  if (yych == ':') goto yy89;",
          "652:  if (yych == ';') goto yy87;",
          "656:  if (yych == ':') goto yy83;",
          "660:  if (yych == ':') goto yy77;",
          "664:  if (yych == ':') goto yy53;",
          "668:  if (yych == ':') goto yy46;",
          "672:  if (yych == ':') goto yy39;",
          "676:  if (yych == ':') goto yy32;",
          "680:  if (yych == ':') goto yy25;",
          "684:  if (yych == ':') goto yy17;",
          "688: #line 956 \"ext/standard/var_unserializer.re\"",
          "694: #line 695 \"ext/standard/var_unserializer.c\"",
          "695: yy16:",
          "696:  yych = *++YYCURSOR;",
          "697:  goto yy3;",
          "701:   goto yy20;",
          "703:  if (yych == '+') goto yy19;",
          "709:  if (yybm[0+yych] & 128) {",
          "710:   goto yy20;",
          "713: yy20:",
          "714:  ++YYCURSOR;",
          "715:  if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);",
          "716:  yych = *YYCURSOR;",
          "717:  if (yybm[0+yych] & 128) {",
          "718:   goto yy20;",
          "719:  }",
          "721:  if (yych >= ';') goto yy18;",
          "723:  if (yych != '\"') goto yy18;",
          "724:  ++YYCURSOR;",
          "725: #line 804 \"ext/standard/var_unserializer.re\"",
          "726:  {",
          "727:  size_t len, len2, len3, maxlen;",
          "728:  zend_long elements;",
          "729:  char *str;",
          "730:  zend_string *class_name;",
          "731:  zend_class_entry *ce;",
          "732:  int incomplete_class = 0;",
          "734:  int custom_object = 0;",
          "736:  zval user_func;",
          "737:  zval retval;",
          "738:  zval args[1];",
          "740:     if (!var_hash) return 0;",
          "741:  if (*start == 'C') {",
          "742:   custom_object = 1;",
          "743:  }",
          "745:  len2 = len = parse_uiv(start + 2);",
          "746:  maxlen = max - YYCURSOR;",
          "747:  if (maxlen < len || len == 0) {",
          "749:   return 0;",
          "750:  }",
          "752:  str = (char*)YYCURSOR;",
          "754:  YYCURSOR += len;",
          "756:  if (*(YYCURSOR) != '\"') {",
          "758:   return 0;",
          "759:  }",
          "760:  if (*(YYCURSOR+1) != ':') {",
          "762:   return 0;",
          "763:  }",
          "765:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "766:  if (len3 != len)",
          "767:  {",
          "769:   return 0;",
          "770:  }",
          "772:  class_name = zend_string_init(str, len, 0);",
          "774:  do {",
          "775:   if(!unserialize_allowed_class(class_name, classes)) {",
          "776:    incomplete_class = 1;",
          "777:    ce = PHP_IC_ENTRY;",
          "778:    break;",
          "782:   BG(serialize_lock)++;",
          "783:   ce = zend_lookup_class(class_name);",
          "784:   if (ce) {",
          "785:    BG(serialize_lock)--;",
          "786:    if (EG(exception)) {",
          "787:     zend_string_release(class_name);",
          "788:     return 0;",
          "789:    }",
          "790:    break;",
          "791:   }",
          "792:   BG(serialize_lock)--;",
          "794:   if (EG(exception)) {",
          "795:    zend_string_release(class_name);",
          "796:    return 0;",
          "797:   }",
          "800:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "801:    incomplete_class = 1;",
          "802:    ce = PHP_IC_ENTRY;",
          "803:    break;",
          "804:   }",
          "807:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "809:   ZVAL_STR_COPY(&args[0], class_name);",
          "810:   BG(serialize_lock)++;",
          "811:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "812:    BG(serialize_lock)--;",
          "813:    if (EG(exception)) {",
          "814:     zend_string_release(class_name);",
          "815:     zval_ptr_dtor(&user_func);",
          "816:     zval_ptr_dtor(&args[0]);",
          "817:     return 0;",
          "818:    }",
          "819:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "820:    incomplete_class = 1;",
          "821:    ce = PHP_IC_ENTRY;",
          "822:    zval_ptr_dtor(&user_func);",
          "823:    zval_ptr_dtor(&args[0]);",
          "824:    break;",
          "825:   }",
          "826:   BG(serialize_lock)--;",
          "827:   zval_ptr_dtor(&retval);",
          "828:   if (EG(exception)) {",
          "829:    zend_string_release(class_name);",
          "830:    zval_ptr_dtor(&user_func);",
          "831:    zval_ptr_dtor(&args[0]);",
          "832:    return 0;",
          "833:   }",
          "836:   BG(serialize_lock)++;",
          "837:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "838:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "839:    incomplete_class = 1;",
          "840:    ce = PHP_IC_ENTRY;",
          "841:   }",
          "842:   BG(serialize_lock)--;",
          "844:   zval_ptr_dtor(&user_func);",
          "845:   zval_ptr_dtor(&args[0]);",
          "846:   break;",
          "847:  } while (1);",
          "851:  if (custom_object) {",
          "852:   int ret;",
          "854:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "856:   if (ret && incomplete_class) {",
          "857:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "859:   zend_string_release(class_name);",
          "860:   return ret;",
          "863:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "865:  if (elements < 0) {",
          "866:     zend_string_release(class_name);",
          "867:     return 0;",
          "870:  if (incomplete_class) {",
          "871:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "873:  zend_string_release(class_name);",
          "875:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "876: }",
          "877: #line 878 \"ext/standard/var_unserializer.c\"",
          "878: yy25:",
          "881:   if (yych != '+') goto yy18;",
          "883:   if (yych <= '-') goto yy26;",
          "885:   if (yych <= '9') goto yy27;",
          "888: yy26:",
          "891:  if (yych >= ':') goto yy18;",
          "892: yy27:",
          "897:  if (yych <= '9') goto yy27;",
          "898:  if (yych >= ';') goto yy18;",
          "900:  if (yych != '\"') goto yy18;",
          "902: #line 793 \"ext/standard/var_unserializer.re\"",
          "903:  {",
          "904:  zend_long elements;",
          "905:     if (!var_hash) return 0;",
          "907:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "908:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "909:   return 0;",
          "910:  }",
          "911:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "912: }",
          "913: #line 914 \"ext/standard/var_unserializer.c\"",
          "914: yy32:",
          "915:  yych = *++YYCURSOR;",
          "916:  if (yych == '+') goto yy33;",
          "920: yy33:",
          "924: yy34:",
          "929:  if (yych <= '9') goto yy34;",
          "930:  if (yych >= ';') goto yy18;",
          "932:  if (yych != '{') goto yy18;",
          "934: #line 769 \"ext/standard/var_unserializer.re\"",
          "935:  {",
          "936:  zend_long elements = parse_iv(start + 2);",
          "939:     if (!var_hash) return 0;",
          "941:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "942:   return 0;",
          "945:  array_init_size(rval, elements);",
          "946:  if (elements) {",
          "949:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "952:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "953:   return 0;",
          "954:  }",
          "956:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "957: }",
          "958: #line 959 \"ext/standard/var_unserializer.c\"",
          "959: yy39:",
          "961:  if (yych == '+') goto yy40;",
          "963:  if (yych <= '9') goto yy41;",
          "965: yy40:",
          "969: yy41:",
          "974:  if (yych <= '9') goto yy41;",
          "975:  if (yych >= ';') goto yy18;",
          "977:  if (yych != '\"') goto yy18;",
          "979: #line 735 \"ext/standard/var_unserializer.re\"",
          "980:  {",
          "981:  size_t len, maxlen;",
          "982:  zend_string *str;",
          "984:  len = parse_uiv(start + 2);",
          "985:  maxlen = max - YYCURSOR;",
          "986:  if (maxlen < len) {",
          "988:   return 0;",
          "989:  }",
          "991:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "992:   return 0;",
          "993:  }",
          "995:  if (*(YYCURSOR) != '\"') {",
          "996:   zend_string_free(str);",
          "998:   return 0;",
          "999:  }",
          "1001:  if (*(YYCURSOR + 1) != ';') {",
          "1002:   efree(str);",
          "1004:   return 0;",
          "1005:  }",
          "1007:  YYCURSOR += 2;",
          "1010:  ZVAL_STR(rval, str);",
          "1011:  return 1;",
          "1012: }",
          "1013: #line 1014 \"ext/standard/var_unserializer.c\"",
          "1014: yy46:",
          "1015:  yych = *++YYCURSOR;",
          "1016:  if (yych == '+') goto yy47;",
          "1018:  if (yych <= '9') goto yy48;",
          "1020: yy47:",
          "1024: yy48:",
          "1029:  if (yych <= '9') goto yy48;",
          "1030:  if (yych >= ';') goto yy18;",
          "1032:  if (yych != '\"') goto yy18;",
          "1034: #line 703 \"ext/standard/var_unserializer.re\"",
          "1036:  size_t len, maxlen;",
          "1037:  char *str;",
          "1039:  len = parse_uiv(start + 2);",
          "1040:  maxlen = max - YYCURSOR;",
          "1041:  if (maxlen < len) {",
          "1046:  str = (char*)YYCURSOR;",
          "1048:  YYCURSOR += len;",
          "1050:  if (*(YYCURSOR) != '\"') {",
          "1052:   return 0;",
          "1055:  if (*(YYCURSOR + 1) != ';') {",
          "1057:   return 0;",
          "1060:  YYCURSOR += 2;",
          "1063:  ZVAL_STRINGL(rval, str, len);",
          "1066: #line 1067 \"ext/standard/var_unserializer.c\"",
          "1067: yy53:",
          "1068:  yych = *++YYCURSOR;",
          "1069:  if (yych <= '/') {",
          "1070:   if (yych <= ',') {",
          "1071:    if (yych == '+') goto yy57;",
          "1072:    goto yy18;",
          "1073:   } else {",
          "1074:    if (yych <= '-') goto yy55;",
          "1075:    if (yych <= '.') goto yy60;",
          "1076:    goto yy18;",
          "1077:   }",
          "1078:  } else {",
          "1079:   if (yych <= 'I') {",
          "1080:    if (yych <= '9') goto yy58;",
          "1081:    if (yych <= 'H') goto yy18;",
          "1082:    goto yy56;",
          "1083:   } else {",
          "1084:    if (yych != 'N') goto yy18;",
          "1085:   }",
          "1086:  }",
          "1088:  if (yych == 'A') goto yy76;",
          "1090: yy55:",
          "1091:  yych = *++YYCURSOR;",
          "1092:  if (yych <= '/') {",
          "1093:   if (yych == '.') goto yy60;",
          "1094:   goto yy18;",
          "1095:  } else {",
          "1096:   if (yych <= '9') goto yy58;",
          "1097:   if (yych != 'I') goto yy18;",
          "1098:  }",
          "1099: yy56:",
          "1101:  if (yych == 'N') goto yy72;",
          "1103: yy57:",
          "1104:  yych = *++YYCURSOR;",
          "1105:  if (yych == '.') goto yy60;",
          "1106:  if (yych <= '/') goto yy18;",
          "1107:  if (yych >= ':') goto yy18;",
          "1108: yy58:",
          "1110:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1111:  yych = *YYCURSOR;",
          "1112:  if (yych <= ':') {",
          "1113:   if (yych <= '.') {",
          "1114:    if (yych <= '-') goto yy18;",
          "1115:    goto yy70;",
          "1116:   } else {",
          "1117:    if (yych <= '/') goto yy18;",
          "1118:    if (yych <= '9') goto yy58;",
          "1119:    goto yy18;",
          "1120:   }",
          "1121:  } else {",
          "1122:   if (yych <= 'E') {",
          "1123:    if (yych <= ';') goto yy63;",
          "1124:    if (yych <= 'D') goto yy18;",
          "1125:    goto yy65;",
          "1126:   } else {",
          "1127:    if (yych == 'e') goto yy65;",
          "1128:    goto yy18;",
          "1129:   }",
          "1130:  }",
          "1131: yy60:",
          "1132:  yych = *++YYCURSOR;",
          "1133:  if (yych <= '/') goto yy18;",
          "1134:  if (yych >= ':') goto yy18;",
          "1135: yy61:",
          "1141:   if (yych <= '9') goto yy61;",
          "1146:    goto yy65;",
          "1148:    if (yych == 'e') goto yy65;",
          "1152: yy63:",
          "1154: #line 694 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1035:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1036:  return 1;",
          "1037: }",
          "1040:  yych = *++YYCURSOR;",
          "1041:  if (yych <= ',') {",
          "1044:  } else {",
          "1046:   if (yych <= '/') goto yy18;",
          "1048:   goto yy18;",
          "1049:  }",
          "1051:  yych = *++YYCURSOR;",
          "1053:  goto yy18;",
          "1055:  yych = *++YYCURSOR;",
          "1057:  goto yy18;",
          "1059:  ++YYCURSOR;",
          "1077:   } else {",
          "1079:   }",
          "1080:  }",
          "1088:  yych = *++YYCURSOR;",
          "1092:  ++YYCURSOR;",
          "1094:  {",
          "1112:  }",
          "1116:  return 1;",
          "1117: }",
          "1120:  yych = *++YYCURSOR;",
          "1122:  goto yy18;",
          "1124:  ++YYCURSOR;",
          "1126:  {",
          "1170:  }",
          "1218:    }",
          "1258:   }",
          "1268:  }",
          "1276: }",
          "1279:  ++YYCURSOR;",
          "1281:  {",
          "1312:  return 1;",
          "1313: }",
          "1316:  ++YYCURSOR;",
          "1318:  {",
          "1340: }",
          "1343:  yych = *++YYCURSOR;",
          "1344:  if (yych <= ',') {",
          "1347:  } else {",
          "1349:   if (yych <= '/') goto yy18;",
          "1351:  }",
          "1353:  ++YYCURSOR;",
          "1354:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1355:  yych = *YYCURSOR;",
          "1356:  if (yych <= '/') goto yy18;",
          "1365:  ++YYCURSOR;",
          "1367:  {",
          "1389:   return 0;",
          "1390:  }",
          "1398:   return 0;",
          "1399:  }",
          "1404:  }",
          "1410:  return 1;",
          "1411: }",
          "1413: yy96:",
          "1414:  yych = *++YYCURSOR;",
          "1415:  if (yych <= '/') goto yy18;",
          "1418: yy97:",
          "1419:  ++YYCURSOR;",
          "1421:  {",
          "1430:  } else {",
          "1432:  }",
          "1434:  return 1;",
          "1435: }",
          "1437: }",
          "1441:  return 0;",
          "",
          "[Removed Lines]",
          "1038: #line 1039 \"ext/standard/var_unserializer.c\"",
          "1039: yy73:",
          "1042:   if (yych == '+') goto yy88;",
          "1043:   goto yy18;",
          "1045:   if (yych <= '-') goto yy88;",
          "1047:   if (yych <= '9') goto yy89;",
          "1050: yy74:",
          "1052:  if (yych == 'F') goto yy91;",
          "1054: yy75:",
          "1056:  if (yych == 'N') goto yy91;",
          "1058: yy76:",
          "1060: #line 653 \"ext/standard/var_unserializer.re\"",
          "1061:  {",
          "1062: #if SIZEOF_ZEND_LONG == 4",
          "1063:  int digits = YYCURSOR - start - 3;",
          "1065:  if (start[2] == '-' || start[2] == '+') {",
          "1066:   digits--;",
          "1067:  }",
          "1070:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1071:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1072:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1074:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1075:     goto use_double;",
          "1076:    }",
          "1078:    goto use_double;",
          "1081: #endif",
          "1083:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1084:  return 1;",
          "1085: }",
          "1086: #line 1087 \"ext/standard/var_unserializer.c\"",
          "1087: yy78:",
          "1089:  if (yych == '\"') goto yy92;",
          "1090:  goto yy18;",
          "1091: yy79:",
          "1093: #line 616 \"ext/standard/var_unserializer.re\"",
          "1095:  zend_long id;",
          "1098:  if (!var_hash) return 0;",
          "1100:  id = parse_iv(start + 2) - 1;",
          "1101:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1102:   return 0;",
          "1103:  }",
          "1105:  if (rval_ref == rval) {",
          "1106:   return 0;",
          "1107:  }",
          "1109:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1110:   ZVAL_UNDEF(rval);",
          "1111:   return 1;",
          "1114:  ZVAL_COPY(rval, rval_ref);",
          "1118: #line 1119 \"ext/standard/var_unserializer.c\"",
          "1119: yy81:",
          "1121:  if (yych == '\"') goto yy94;",
          "1123: yy82:",
          "1125: #line 805 \"ext/standard/var_unserializer.re\"",
          "1127:  size_t len, len2, len3, maxlen;",
          "1128:  zend_long elements;",
          "1129:  char *str;",
          "1130:  zend_string *class_name;",
          "1131:  zend_class_entry *ce;",
          "1132:  int incomplete_class = 0;",
          "1134:  int custom_object = 0;",
          "1136:  zval user_func;",
          "1137:  zval retval;",
          "1138:  zval args[1];",
          "1140:     if (!var_hash) return 0;",
          "1141:  if (*start == 'C') {",
          "1142:   custom_object = 1;",
          "1143:  }",
          "1145:  len2 = len = parse_uiv(start + 2);",
          "1146:  maxlen = max - YYCURSOR;",
          "1147:  if (maxlen < len || len == 0) {",
          "1149:   return 0;",
          "1150:  }",
          "1152:  str = (char*)YYCURSOR;",
          "1154:  YYCURSOR += len;",
          "1156:  if (*(YYCURSOR) != '\"') {",
          "1158:   return 0;",
          "1159:  }",
          "1160:  if (*(YYCURSOR+1) != ':') {",
          "1162:   return 0;",
          "1163:  }",
          "1165:  len3 = strspn(str, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");",
          "1166:  if (len3 != len)",
          "1167:  {",
          "1169:   return 0;",
          "1172:  class_name = zend_string_init(str, len, 0);",
          "1174:  do {",
          "1175:   if(!unserialize_allowed_class(class_name, classes)) {",
          "1176:    incomplete_class = 1;",
          "1177:    ce = PHP_IC_ENTRY;",
          "1178:    break;",
          "1179:   }",
          "1182:   BG(serialize_lock)++;",
          "1183:   ce = zend_lookup_class(class_name);",
          "1184:   if (ce) {",
          "1185:    BG(serialize_lock)--;",
          "1186:    if (EG(exception)) {",
          "1187:     zend_string_release(class_name);",
          "1188:     return 0;",
          "1189:    }",
          "1190:    break;",
          "1191:   }",
          "1192:   BG(serialize_lock)--;",
          "1194:   if (EG(exception)) {",
          "1195:    zend_string_release(class_name);",
          "1196:    return 0;",
          "1197:   }",
          "1200:   if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\\0')) {",
          "1201:    incomplete_class = 1;",
          "1202:    ce = PHP_IC_ENTRY;",
          "1203:    break;",
          "1204:   }",
          "1207:   ZVAL_STRING(&user_func, PG(unserialize_callback_func));",
          "1209:   ZVAL_STR_COPY(&args[0], class_name);",
          "1210:   BG(serialize_lock)++;",
          "1211:   if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {",
          "1212:    BG(serialize_lock)--;",
          "1213:    if (EG(exception)) {",
          "1214:     zend_string_release(class_name);",
          "1215:     zval_ptr_dtor(&user_func);",
          "1216:     zval_ptr_dtor(&args[0]);",
          "1217:     return 0;",
          "1219:    php_error_docref(NULL, E_WARNING, \"defined (%s) but not found\", Z_STRVAL(user_func));",
          "1220:    incomplete_class = 1;",
          "1221:    ce = PHP_IC_ENTRY;",
          "1222:    zval_ptr_dtor(&user_func);",
          "1223:    zval_ptr_dtor(&args[0]);",
          "1224:    break;",
          "1225:   }",
          "1226:   BG(serialize_lock)--;",
          "1227:   zval_ptr_dtor(&retval);",
          "1228:   if (EG(exception)) {",
          "1229:    zend_string_release(class_name);",
          "1230:    zval_ptr_dtor(&user_func);",
          "1231:    zval_ptr_dtor(&args[0]);",
          "1232:    return 0;",
          "1233:   }",
          "1236:   BG(serialize_lock)++;",
          "1237:   if ((ce = zend_lookup_class(class_name)) == NULL) {",
          "1238:    php_error_docref(NULL, E_WARNING, \"Function %s() hasn't defined the class it was called for\", Z_STRVAL(user_func));",
          "1239:    incomplete_class = 1;",
          "1240:    ce = PHP_IC_ENTRY;",
          "1241:   }",
          "1242:   BG(serialize_lock)--;",
          "1244:   zval_ptr_dtor(&user_func);",
          "1245:   zval_ptr_dtor(&args[0]);",
          "1246:   break;",
          "1247:  } while (1);",
          "1251:  if (custom_object) {",
          "1252:   int ret;",
          "1254:   ret = object_custom(UNSERIALIZE_PASSTHRU, ce);",
          "1256:   if (ret && incomplete_class) {",
          "1257:    php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1259:   zend_string_release(class_name);",
          "1260:   return ret;",
          "1261:  }",
          "1263:  elements = object_common1(UNSERIALIZE_PASSTHRU, ce);",
          "1265:  if (elements < 0) {",
          "1266:     zend_string_release(class_name);",
          "1267:     return 0;",
          "1270:  if (incomplete_class) {",
          "1271:   php_store_class_name(rval, ZSTR_VAL(class_name), len2);",
          "1272:  }",
          "1273:  zend_string_release(class_name);",
          "1275:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1277: #line 1278 \"ext/standard/var_unserializer.c\"",
          "1278: yy84:",
          "1280: #line 736 \"ext/standard/var_unserializer.re\"",
          "1282:  size_t len, maxlen;",
          "1283:  zend_string *str;",
          "1285:  len = parse_uiv(start + 2);",
          "1286:  maxlen = max - YYCURSOR;",
          "1287:  if (maxlen < len) {",
          "1289:   return 0;",
          "1290:  }",
          "1292:  if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {",
          "1293:   return 0;",
          "1294:  }",
          "1296:  if (*(YYCURSOR) != '\"') {",
          "1297:   zend_string_free(str);",
          "1299:   return 0;",
          "1300:  }",
          "1302:  if (*(YYCURSOR + 1) != ';') {",
          "1303:   efree(str);",
          "1305:   return 0;",
          "1306:  }",
          "1308:  YYCURSOR += 2;",
          "1311:  ZVAL_STR(rval, str);",
          "1314: #line 1315 \"ext/standard/var_unserializer.c\"",
          "1315: yy86:",
          "1317: #line 770 \"ext/standard/var_unserializer.re\"",
          "1319:  zend_long elements = parse_iv(start + 2);",
          "1322:     if (!var_hash) return 0;",
          "1324:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "1325:   return 0;",
          "1326:  }",
          "1328:  array_init_size(rval, elements);",
          "1329:  if (elements) {",
          "1332:   zend_hash_real_init(Z_ARRVAL_P(rval), 0);",
          "1333:  }",
          "1335:  if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements, 0)) {",
          "1336:   return 0;",
          "1337:  }",
          "1339:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "1341: #line 1342 \"ext/standard/var_unserializer.c\"",
          "1342: yy88:",
          "1345:   if (yych == '+') goto yy96;",
          "1346:   goto yy18;",
          "1348:   if (yych <= '-') goto yy96;",
          "1350:   if (yych >= ':') goto yy18;",
          "1352: yy89:",
          "1357:  if (yych <= '9') goto yy89;",
          "1358:  if (yych == ';') goto yy71;",
          "1359:  goto yy18;",
          "1360: yy91:",
          "1361:  yych = *++YYCURSOR;",
          "1362:  if (yych == ';') goto yy97;",
          "1363:  goto yy18;",
          "1364: yy92:",
          "1366: #line 794 \"ext/standard/var_unserializer.re\"",
          "1368:  zend_long elements;",
          "1369:     if (!var_hash) return 0;",
          "1371:  elements = object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR);",
          "1372:  if (elements < 0 || elements >= HT_MAX_SIZE) {",
          "1373:   return 0;",
          "1374:  }",
          "1375:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "1376: }",
          "1377: #line 1378 \"ext/standard/var_unserializer.c\"",
          "1378: yy94:",
          "1379:  ++YYCURSOR;",
          "1380: #line 704 \"ext/standard/var_unserializer.re\"",
          "1381:  {",
          "1382:  size_t len, maxlen;",
          "1383:  char *str;",
          "1385:  len = parse_uiv(start + 2);",
          "1386:  maxlen = max - YYCURSOR;",
          "1387:  if (maxlen < len) {",
          "1392:  str = (char*)YYCURSOR;",
          "1394:  YYCURSOR += len;",
          "1396:  if (*(YYCURSOR) != '\"') {",
          "1401:  if (*(YYCURSOR + 1) != ';') {",
          "1403:   return 0;",
          "1406:  YYCURSOR += 2;",
          "1409:  ZVAL_STRINGL(rval, str, len);",
          "1412: #line 1413 \"ext/standard/var_unserializer.c\"",
          "1416:  if (yych <= '9') goto yy89;",
          "1417:  goto yy18;",
          "1420: #line 679 \"ext/standard/var_unserializer.re\"",
          "1424:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1425:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1426:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1427:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1428:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1429:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1431:   ZVAL_NULL(rval);",
          "1436: #line 1437 \"ext/standard/var_unserializer.c\"",
          "1438: #line 965 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1163: #line 1164 \"ext/standard/var_unserializer.c\"",
          "1164: yy65:",
          "1167:   if (yych != '+') goto yy18;",
          "1169:   if (yych <= '-') goto yy66;",
          "1171:   if (yych <= '9') goto yy67;",
          "1174: yy66:",
          "1176:  if (yych <= ',') {",
          "1177:   if (yych == '+') goto yy69;",
          "1178:   goto yy18;",
          "1179:  } else {",
          "1180:   if (yych <= '-') goto yy69;",
          "1181:   if (yych <= '/') goto yy18;",
          "1182:   if (yych >= ':') goto yy18;",
          "1183:  }",
          "1184: yy67:",
          "1185:  ++YYCURSOR;",
          "1186:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1187:  yych = *YYCURSOR;",
          "1188:  if (yych <= '/') goto yy18;",
          "1189:  if (yych <= '9') goto yy67;",
          "1190:  if (yych == ';') goto yy63;",
          "1192: yy69:",
          "1194:  if (yych <= '/') goto yy18;",
          "1195:  if (yych <= '9') goto yy67;",
          "1197: yy70:",
          "1199:  if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);",
          "1200:  yych = *YYCURSOR;",
          "1201:  if (yych <= ';') {",
          "1202:   if (yych <= '/') goto yy18;",
          "1203:   if (yych <= '9') goto yy70;",
          "1204:   if (yych <= ':') goto yy18;",
          "1205:   goto yy63;",
          "1206:  } else {",
          "1207:   if (yych <= 'E') {",
          "1208:    if (yych <= 'D') goto yy18;",
          "1209:    goto yy65;",
          "1211:    if (yych == 'e') goto yy65;",
          "1212:    goto yy18;",
          "1215: yy72:",
          "1217:  if (yych != 'F') goto yy18;",
          "1218: yy73:",
          "1219:  yych = *++YYCURSOR;",
          "1220:  if (yych != ';') goto yy18;",
          "1222: #line 678 \"ext/standard/var_unserializer.re\"",
          "1226:  if (!strncmp((char*)start + 2, \"NAN\", 3)) {",
          "1227:   ZVAL_DOUBLE(rval, php_get_nan());",
          "1228:  } else if (!strncmp((char*)start + 2, \"INF\", 3)) {",
          "1229:   ZVAL_DOUBLE(rval, php_get_inf());",
          "1230:  } else if (!strncmp((char*)start + 2, \"-INF\", 4)) {",
          "1231:   ZVAL_DOUBLE(rval, -php_get_inf());",
          "1232:  } else {",
          "1233:   ZVAL_NULL(rval);",
          "1238: #line 1239 \"ext/standard/var_unserializer.c\"",
          "1239: yy76:",
          "1241:  if (yych == 'N') goto yy73;",
          "1243: yy77:",
          "1244:  yych = *++YYCURSOR;",
          "1245:  if (yych <= ',') {",
          "1246:   if (yych != '+') goto yy18;",
          "1247:  } else {",
          "1248:   if (yych <= '-') goto yy78;",
          "1249:   if (yych <= '/') goto yy18;",
          "1250:   if (yych <= '9') goto yy79;",
          "1251:   goto yy18;",
          "1252:  }",
          "1253: yy78:",
          "1254:  yych = *++YYCURSOR;",
          "1255:  if (yych <= '/') goto yy18;",
          "1256:  if (yych >= ':') goto yy18;",
          "1257: yy79:",
          "1259:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1260:  yych = *YYCURSOR;",
          "1261:  if (yych <= '/') goto yy18;",
          "1262:  if (yych <= '9') goto yy79;",
          "1263:  if (yych != ';') goto yy18;",
          "1264:  ++YYCURSOR;",
          "1265: #line 652 \"ext/standard/var_unserializer.re\"",
          "1267: #if SIZEOF_ZEND_LONG == 4",
          "1268:  int digits = YYCURSOR - start - 3;",
          "1270:  if (start[2] == '-' || start[2] == '+') {",
          "1271:   digits--;",
          "1275:  if (digits >= MAX_LENGTH_OF_LONG - 1) {",
          "1276:   if (digits == MAX_LENGTH_OF_LONG - 1) {",
          "1277:    int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);",
          "1279:    if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {",
          "1280:     goto use_double;",
          "1282:   } else {",
          "1283:    goto use_double;",
          "1286: #endif",
          "1288:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1289:  return 1;",
          "1291: #line 1292 \"ext/standard/var_unserializer.c\"",
          "1292: yy83:",
          "1293:  yych = *++YYCURSOR;",
          "1294:  if (yych <= '/') goto yy18;",
          "1295:  if (yych >= '2') goto yy18;",
          "1296:  yych = *++YYCURSOR;",
          "1297:  if (yych != ';') goto yy18;",
          "1299: #line 646 \"ext/standard/var_unserializer.re\"",
          "1302:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1305: #line 1306 \"ext/standard/var_unserializer.c\"",
          "1306: yy87:",
          "1308: #line 640 \"ext/standard/var_unserializer.re\"",
          "1311:  ZVAL_NULL(rval);",
          "1312:  return 1;",
          "1314: #line 1315 \"ext/standard/var_unserializer.c\"",
          "1315: yy89:",
          "1318:   if (yych != '+') goto yy18;",
          "1320:   if (yych <= '-') goto yy90;",
          "1322:   if (yych <= '9') goto yy91;",
          "1323:   goto yy18;",
          "1325: yy90:",
          "1326:  yych = *++YYCURSOR;",
          "1327:  if (yych <= '/') goto yy18;",
          "1328:  if (yych >= ':') goto yy18;",
          "1329: yy91:",
          "1334:  if (yych <= '9') goto yy91;",
          "1335:  if (yych != ';') goto yy18;",
          "1337: #line 615 \"ext/standard/var_unserializer.re\"",
          "1339:  zend_long id;",
          "1342:  if (!var_hash) return 0;",
          "1344:  id = parse_iv(start + 2) - 1;",
          "1345:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1349:  if (rval_ref == rval) {",
          "1353:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1354:   ZVAL_UNDEF(rval);",
          "1355:   return 1;",
          "1358:  ZVAL_COPY(rval, rval_ref);",
          "1362: #line 1363 \"ext/standard/var_unserializer.c\"",
          "1363: yy95:",
          "1364:  yych = *++YYCURSOR;",
          "1365:  if (yych <= ',') {",
          "1366:   if (yych != '+') goto yy18;",
          "1367:  } else {",
          "1368:   if (yych <= '-') goto yy96;",
          "1369:   if (yych <= '/') goto yy18;",
          "1370:   if (yych <= '9') goto yy97;",
          "1371:   goto yy18;",
          "1372:  }",
          "1376:  if (yych >= ':') goto yy18;",
          "1379:  if (YYLIMIT <= YYCURSOR) YYFILL(1);",
          "1380:  yych = *YYCURSOR;",
          "1381:  if (yych <= '/') goto yy18;",
          "1382:  if (yych <= '9') goto yy97;",
          "1383:  if (yych != ';') goto yy18;",
          "1384:  ++YYCURSOR;",
          "1385: #line 589 \"ext/standard/var_unserializer.re\"",
          "1387:  zend_long id;",
          "1390:  if (!var_hash) return 0;",
          "1392:  id = parse_iv(start + 2) - 1;",
          "1393:  if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {",
          "1394:   return 0;",
          "1395:  }",
          "1397:  zval_ptr_dtor(rval);",
          "1398:  if (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) && Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) {",
          "1399:   ZVAL_UNDEF(rval);",
          "1400:   return 1;",
          "1401:  }",
          "1402:  if (Z_ISREF_P(rval_ref)) {",
          "1403:   ZVAL_COPY(rval, rval_ref);",
          "1405:   ZVAL_NEW_REF(rval_ref, rval_ref);",
          "1406:   ZVAL_COPY(rval, rval_ref);",
          "1411: #line 1412 \"ext/standard/var_unserializer.c\"",
          "1413: #line 964 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: static inline int finish_nested_data(UNSERIALIZE_PARAMETER)",
          "434: {",
          "442: }",
          "444: static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)",
          "",
          "[Removed Lines]",
          "435:  if (*((*p)++) == '}')",
          "436:   return 1;",
          "438: #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE",
          "439:  zval_ptr_dtor(rval);",
          "440: #endif",
          "441:  return 0;",
          "",
          "[Added Lines]",
          "435:  if (*p >= max || **p != '}') {",
          "436:   return 0;",
          "437:  }",
          "439:  (*p)++;",
          "440:  return 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}