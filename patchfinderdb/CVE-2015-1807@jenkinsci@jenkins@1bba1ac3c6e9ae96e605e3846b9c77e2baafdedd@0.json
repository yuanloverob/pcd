{
  "cve_id": "CVE-2015-1807",
  "cve_desc": "Directory traversal vulnerability in Jenkins before 1.600 and LTS before 1.596.1 allows remote authenticated users with certain permissions to read arbitrary files via a symlink, related to building artifacts.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "1bba1ac3c6e9ae96e605e3846b9c77e2baafdedd",
  "patch_info": {
    "commit_hash": "1bba1ac3c6e9ae96e605e3846b9c77e2baafdedd",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/1bba1ac3c6e9ae96e605e3846b9c77e2baafdedd",
    "files": [
      "core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/jenkins/util/VirtualFileTest.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
    ],
    "message": "[SECURITY-162] Capture the root directory in VirtualFile.forFile and reject attempts to escape it.",
    "before_after_code_files": [
      "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/jenkins/util/VirtualFileTest.java||core/src/test/java/jenkins/util/VirtualFileTest.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
      "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: import hudson.util.FileVisitor;",
      "34: import java.io.File;",
      "35: import java.io.FileInputStream;",
      "36: import java.io.IOException;",
      "37: import java.io.InputStream;",
      "38: import java.io.Serializable;",
      "39: import java.net.URI;",
      "40: import java.util.ArrayList;",
      "41: import java.util.List;",
      "42: import javax.annotation.Nonnull;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: import java.io.FileNotFoundException;",
      "43: import java.util.logging.Level;",
      "44: import java.util.logging.Logger;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "209:     public static VirtualFile forFile(final File f) {",
      "211:     }",
      "212:     private static final class FileVF extends VirtualFile {",
      "213:         private final File f;",
      "215:             this.f = f;",
      "216:         }",
      "217:             @Override public String getName() {",
      "218:                 return f.getName();",
      "",
      "[Removed Lines]",
      "210:         return new FileVF(f);",
      "214:         FileVF(File f) {",
      "",
      "[Added Lines]",
      "213:         return new FileVF(f, f);",
      "217:         private final File root;",
      "218:         FileVF(File f, File root) {",
      "220:             this.root = root;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "221:                 return f.toURI();",
      "222:             }",
      "223:             @Override public VirtualFile getParent() {",
      "225:             }",
      "226:             @Override public boolean isDirectory() throws IOException {",
      "227:                 return f.isDirectory();",
      "228:             }",
      "229:             @Override public boolean isFile() throws IOException {",
      "230:                 return f.isFile();",
      "231:             }",
      "232:             @Override public boolean exists() throws IOException {",
      "233:                 return f.exists();",
      "234:             }",
      "235:             @Override public VirtualFile[] list() throws IOException {",
      "236:                 File[] kids = f.listFiles();",
      "237:                 if (kids == null) {",
      "238:                     return new VirtualFile[0];",
      "239:                 }",
      "240:                 VirtualFile[] vfs = new VirtualFile[kids.length];",
      "241:                 for (int i = 0; i < kids.length; i++) {",
      "243:                 }",
      "244:                 return vfs;",
      "245:             }",
      "246:             @Override public String[] list(String glob) throws IOException {",
      "247:                 return new Scanner(glob).invoke(f, null);",
      "248:             }",
      "249:             @Override public VirtualFile child(String name) {",
      "251:             }",
      "252:             @Override public long length() throws IOException {",
      "253:                 return f.length();",
      "254:             }",
      "255:             @Override public long lastModified() throws IOException {",
      "256:                 return f.lastModified();",
      "257:             }",
      "258:             @Override public boolean canRead() throws IOException {",
      "259:                 return f.canRead();",
      "260:             }",
      "261:             @Override public InputStream open() throws IOException {",
      "262:                 return new FileInputStream(f);",
      "263:             }",
      "264:     }",
      "",
      "[Removed Lines]",
      "224:                 return forFile(f.getParentFile());",
      "242:                     vfs[i] = forFile(kids[i]);",
      "250:                 return forFile(new File(f, name));",
      "",
      "[Added Lines]",
      "229:                 return new FileVF(f.getParentFile(), root);",
      "232:                 if (isIllegalSymlink()) {",
      "233:                     return false;",
      "234:                 }",
      "238:                 if (isIllegalSymlink()) {",
      "239:                     return false;",
      "240:                 }",
      "244:                 if (isIllegalSymlink()) {",
      "245:                     return false;",
      "246:                 }",
      "250:                 if (isIllegalSymlink()) {",
      "251:                     return new VirtualFile[0];",
      "252:                 }",
      "259:                     vfs[i] = new FileVF(kids[i], root);",
      "264:                 if (isIllegalSymlink()) {",
      "265:                     return new String[0];",
      "266:                 }",
      "270:                 return new FileVF(new File(f, name), root);",
      "273:                 if (isIllegalSymlink()) {",
      "274:                     return 0;",
      "275:                 }",
      "279:                 if (isIllegalSymlink()) {",
      "280:                     return 0;",
      "281:                 }",
      "285:                 if (isIllegalSymlink()) {",
      "286:                     return false;",
      "287:                 }",
      "291:                 if (isIllegalSymlink()) {",
      "292:                     throw new FileNotFoundException(f.getPath());",
      "293:                 }",
      "296:         private boolean isIllegalSymlink() { // TODO JENKINS-26838",
      "297:             try {",
      "298:                 String myPath = f.getCanonicalPath();",
      "299:                 String rootPath = root.getCanonicalPath();",
      "300:                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {",
      "301:                     return true;",
      "302:                 }",
      "303:             } catch (IOException x) {",
      "304:                 Logger.getLogger(VirtualFile.class.getName()).log(Level.FINE, \"could not determine symlink status of \" + f, x);",
      "305:             }",
      "306:             return false;",
      "307:         }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/util/VirtualFileTest.java||core/src/test/java/jenkins/util/VirtualFileTest.java": [
      "File: core/src/test/java/jenkins/util/VirtualFileTest.java -> core/src/test/java/jenkins/util/VirtualFileTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package jenkins.util;",
      "27: import hudson.Util;",
      "28: import hudson.model.TaskListener;",
      "29: import java.io.File;",
      "30: import java.io.FileNotFoundException;",
      "31: import org.apache.commons.io.FileUtils;",
      "32: import org.apache.commons.io.IOUtils;",
      "33: import org.junit.Test;",
      "34: import static org.junit.Assert.*;",
      "35: import org.junit.Rule;",
      "36: import org.junit.rules.TemporaryFolder;",
      "38: public class VirtualFileTest {",
      "40:     @Rule public TemporaryFolder tmp = new TemporaryFolder();",
      "43:     @Test public void outsideSymlinks() throws Exception {",
      "44:         File ws = tmp.newFolder(\"ws\");",
      "45:         FileUtils.write(new File(ws, \"safe\"), \"safe\");",
      "46:         Util.createSymlink(ws, \"safe\", \"supported\", TaskListener.NULL);",
      "47:         File other = tmp.newFolder(\"other\");",
      "48:         FileUtils.write(new File(other, \"secret\"), \"s3cr3t\");",
      "49:         Util.createSymlink(ws, \"../other/secret\", \"hack\", TaskListener.NULL);",
      "50:         VirtualFile root = VirtualFile.forFile(ws);",
      "51:         VirtualFile supported = root.child(\"supported\");",
      "52:         assertTrue(supported.isFile());",
      "53:         assertTrue(supported.exists());",
      "54:         assertEquals(\"safe\", IOUtils.toString(supported.open(), (String) null));",
      "55:         VirtualFile hack = root.child(\"hack\");",
      "56:         assertFalse(hack.isFile());",
      "57:         assertFalse(hack.exists());",
      "58:         try {",
      "59:             hack.open();",
      "60:             fail();",
      "61:         } catch (FileNotFoundException x) {",
      "63:         }",
      "64:     }",
      "66: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java": [
      "File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java -> test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: import jenkins.util.VirtualFile;",
      "46: import static org.junit.Assert.*;",
      "47: import static org.junit.Assume.*;",
      "49: import org.junit.Rule;",
      "50: import org.junit.Test;",
      "51: import org.jvnet.hudson.test.Bug;",
      "",
      "[Removed Lines]",
      "48: import org.junit.Ignore;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "206:     }",
      "210:     @Test public void outsideSymlinks() throws Exception {",
      "211:         final FreeStyleProject p = j.createFreeStyleProject();",
      "",
      "[Removed Lines]",
      "208:     @Ignore(\"TODO currently fails as expected\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fe5d6c6bab63998b11a3b987c57f59a928c965e",
      "candidate_info": {
        "commit_hash": "6fe5d6c6bab63998b11a3b987c57f59a928c965e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/6fe5d6c6bab63998b11a3b987c57f59a928c965e",
        "files": [
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "core/src/main/java/jenkins/util/VirtualFile.java"
        ],
        "message": "[JENKINS-21780] Much more effective fix. Introduce VirtualFile.run method to batch together commands. This should restore pre-ArtifactManager performance for workspace browsing.",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
          "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import hudson.FilePath;",
          "27: import hudson.Util;",
          "28: import java.io.IOException;",
          "29: import java.io.InputStream;",
          "30: import java.io.OutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import hudson.remoting.Callable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.util.Arrays;",
          "35: import java.util.Collections;",
          "36: import java.util.Comparator;",
          "38: import java.util.List;",
          "39: import java.util.Locale;",
          "41: import java.util.StringTokenizer;",
          "42: import java.util.logging.Level;",
          "43: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "37: import java.util.IdentityHashMap;",
          "40: import java.util.Map;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:             } else",
          "253:             if(serveDirIndex) {",
          "256:             }",
          "258:             if(glob!=null) {",
          "",
          "[Removed Lines]",
          "255:                 glob = buildChildPaths(baseFile, req.getLocale());",
          "",
          "[Added Lines]",
          "254:                 glob = baseFile.run(new BuildChildPaths(baseFile, req.getLocale()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:     private static final class FileComparator implements Comparator<VirtualFile> {",
          "433:         private Collator collator;",
          "436:         FileComparator(Locale locale) {",
          "437:             this.collator = Collator.getInstance(locale);",
          "",
          "[Removed Lines]",
          "434:         private final Map<VirtualFile,Boolean> isDirCache = new IdentityHashMap<VirtualFile,Boolean>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "445:             return this.collator.compare(lhs.getName(), rhs.getName());",
          "446:         }",
          "457:         private int dirRank(VirtualFile f) {",
          "458:             try {",
          "460:             else                    return 1;",
          "461:             } catch (IOException ex) {",
          "462:                 return 0;",
          "",
          "[Removed Lines]",
          "448:         private boolean isDirectory(VirtualFile f) throws IOException {",
          "449:             Boolean known = isDirCache.get(f);",
          "450:             if (known == null) {",
          "451:                 known = f.isDirectory();",
          "452:                 isDirCache.put(f, known);",
          "453:             }",
          "454:             return known;",
          "455:         }",
          "459:             if(isDirectory(f))     return 0;",
          "",
          "[Added Lines]",
          "448:             if(f.isDirectory())     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "464:         }",
          "465:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:     private static final class BuildChildPaths implements Callable<List<List<Path>>,IOException> {",
          "457:         private final VirtualFile cur;",
          "458:         private final Locale locale;",
          "459:         BuildChildPaths(VirtualFile cur, Locale locale) {",
          "460:             this.cur = cur;",
          "461:             this.locale = locale;",
          "462:         }",
          "463:         @Override public List<List<Path>> call() throws IOException {",
          "464:             return buildChildPaths(cur, locale);",
          "465:         }",
          "466:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
          "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.FilePath;",
          "28: import hudson.model.DirectoryBrowserSupport;",
          "29: import hudson.remoting.Channel;",
          "30: import hudson.remoting.VirtualChannel;",
          "31: import hudson.util.DirScanner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import hudson.remoting.Callable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import java.io.FileInputStream;",
          "35: import java.io.IOException;",
          "36: import java.io.InputStream;",
          "37: import java.net.URI;",
          "38: import java.util.ArrayList;",
          "39: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import java.io.Serializable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "59: public abstract class VirtualFile implements Comparable<VirtualFile> {",
          "",
          "[Added Lines]",
          "61: public abstract class VirtualFile implements Comparable<VirtualFile>, Serializable {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:         return toURI().toString();",
          "185:     }",
          "192:     public static VirtualFile forFile(final File f) {",
          "194:             @Override public String getName() {",
          "195:                 return f.getName();",
          "196:             }",
          "",
          "[Removed Lines]",
          "193:         return new VirtualFile() {",
          "",
          "[Added Lines]",
          "200:     public <V> V run(Callable<V,IOException> callable) throws IOException {",
          "201:         return callable.call();",
          "202:     }",
          "210:         return new FileVF(f);",
          "211:     }",
          "212:     private static final class FileVF extends VirtualFile {",
          "213:         private final File f;",
          "214:         FileVF(File f) {",
          "215:             this.f = f;",
          "216:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:             @Override public InputStream open() throws IOException {",
          "239:                 return new FileInputStream(f);",
          "240:             }",
          "242:     }",
          "",
          "[Removed Lines]",
          "241:         };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249:     public static VirtualFile forFilePath(final FilePath f) {",
          "251:             @Override public String getName() {",
          "252:                 return f.getName();",
          "253:             }",
          "",
          "[Removed Lines]",
          "250:         return new VirtualFile() {",
          "",
          "[Added Lines]",
          "272:         return new FilePathVF(f);",
          "273:     }",
          "274:     private static final class FilePathVF extends VirtualFile {",
          "275:         private final FilePath f;",
          "276:         FilePathVF(FilePath f) {",
          "277:             this.f = f;",
          "278:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:             @Override public InputStream open() throws IOException {",
          "329:                 return f.read();",
          "330:             }",
          "332:     }",
          "333:     private static final class Scanner implements FilePath.FileCallable<String[]> {",
          "334:         private final String glob;",
          "",
          "[Removed Lines]",
          "331:         };",
          "",
          "[Added Lines]",
          "359:             @Override public <V> V run(Callable<V,IOException> callable) throws IOException {",
          "360:                 try {",
          "361:                     return f.act(callable);",
          "362:                 } catch (InterruptedException x) {",
          "363:                     throw (IOException) new IOException(x.toString()).initCause(x);",
          "364:                 }",
          "365:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16883377dff9ad3f48e9fe6404af1e9cf2c9dbbf",
      "candidate_info": {
        "commit_hash": "16883377dff9ad3f48e9fe6404af1e9cf2c9dbbf",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/16883377dff9ad3f48e9fe6404af1e9cf2c9dbbf",
        "files": [
          "core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/util/VirtualFile.java"
        ],
        "message": "[FIXED JENKINS-28192] Uses java.nio.file.Path#toRealPath instead of File#getCanonicalPath, which resolves symbolic links also on Windows.",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java": [
          "File: core/src/main/java/hudson/util/SecretRewriter.java -> core/src/main/java/hudson/util/SecretRewriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import java.io.IOException;",
          "14: import java.io.InputStreamReader;",
          "15: import java.io.PrintWriter;",
          "16: import java.security.GeneralSecurityException;",
          "17: import java.security.InvalidKeyException;",
          "18: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import java.nio.file.LinkOption;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {",
          "146:         String canonical;",
          "147:         try {",
          "149:         } catch (IOException e) {",
          "150:             canonical = dir.getAbsolutePath(); //",
          "151:         }",
          "",
          "[Removed Lines]",
          "148:             canonical = dir.getCanonicalPath();",
          "",
          "[Added Lines]",
          "149:             canonical = dir.toPath().toRealPath(new LinkOption[0]).toString();",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
          "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import java.io.InputStream;",
          "39: import java.io.Serializable;",
          "40: import java.net.URI;",
          "41: import java.util.ArrayList;",
          "42: import java.util.List;",
          "43: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.nio.file.LinkOption;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:             }",
          "298:         private boolean isIllegalSymlink() { // TODO JENKINS-26838",
          "299:             try {",
          "302:                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {",
          "303:                     return true;",
          "304:                 }",
          "",
          "[Removed Lines]",
          "300:                 String myPath = f.getCanonicalPath();",
          "301:                 String rootPath = root.getCanonicalPath();",
          "",
          "[Added Lines]",
          "301:                 String myPath = f.toPath().toRealPath(new LinkOption[0]).toString();",
          "302:                 String rootPath = root.toPath().toRealPath(new LinkOption[0]).toString();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b72246edb12a742f9e21895ecfde498f8ffe9509",
      "candidate_info": {
        "commit_hash": "b72246edb12a742f9e21895ecfde498f8ffe9509",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b72246edb12a742f9e21895ecfde498f8ffe9509",
        "files": [
          "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
        ],
        "message": "outsideSymlinks",
        "before_after_code_files": [
          "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java": [
          "File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java -> test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import jenkins.util.VirtualFile;",
          "45: import static org.junit.Assert.*;",
          "46: import static org.junit.Assume.*;",
          "47: import org.junit.Rule;",
          "48: import org.junit.Test;",
          "49: import org.jvnet.hudson.test.Bug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import org.junit.Ignore;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:         assertEquals(\"lodge\", kids[0].getName());",
          "204:     }",
          "206:     private void runNewBuildAndStartUnitlIsCreated(AbstractProject project) throws InterruptedException{",
          "207:         int buildNumber = project.getNextBuildNumber();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     @Ignore(\"TODO currently fails as expected\")",
          "209:     @Test public void outsideSymlinks() throws Exception {",
          "210:         final FreeStyleProject p = j.createFreeStyleProject();",
          "211:         p.getBuildersList().add(new TestBuilder() {",
          "212:             @Override public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "213:                 FilePath ws = build.getWorkspace();",
          "214:                 if (ws == null) {",
          "215:                     return false;",
          "216:                 }",
          "217:                 ws.child(\"hack\").symlinkTo(p.getConfigFile().getFile().getAbsolutePath(), listener);",
          "218:                 return true;",
          "219:             }",
          "220:         });",
          "221:         p.getPublishersList().add(new ArtifactArchiver(\"hack\", \"\", false, true));",
          "222:         FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));",
          "223:         List<FreeStyleBuild.Artifact> artifacts = b.getArtifacts();",
          "224:         assertEquals(1, artifacts.size());",
          "225:         FreeStyleBuild.Artifact artifact = artifacts.get(0);",
          "226:         assertEquals(\"hack\", artifact.relativePath);",
          "227:         VirtualFile[] kids = b.getArtifactManager().root().list();",
          "228:         assertEquals(1, kids.length);",
          "229:         assertEquals(\"hack\", kids[0].getName());",
          "230:         assertFalse(kids[0].isDirectory());",
          "231:         assertFalse(kids[0].isFile());",
          "232:         assertFalse(kids[0].exists());",
          "233:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}