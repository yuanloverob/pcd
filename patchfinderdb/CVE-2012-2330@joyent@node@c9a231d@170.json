{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9263213d8ec67af07498987cb3684a7623bc1dd4",
      "candidate_info": {
        "commit_hash": "9263213d8ec67af07498987cb3684a7623bc1dd4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9263213d8ec67af07498987cb3684a7623bc1dd4",
        "files": [
          "src/node_buffer.cc"
        ],
        "message": "Avoid compiler warning about negating unsigned value",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     callback_(data_, callback_hint_);",
          "207:   } else if (length_) {",
          "208:     delete [] data_;",
          "210:   }",
          "212:   length_ = length;",
          "",
          "[Removed Lines]",
          "209:     V8::AdjustAmountOfExternalAllocatedMemory(-(sizeof(Buffer) + length_));",
          "",
          "[Added Lines]",
          "209:     V8::AdjustAmountOfExternalAllocatedMemory(",
          "210:         -static_cast<intptr_t>(sizeof(Buffer) + length_));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "412c1ab5bc254906d8f68b22fdabef82dea1a15a",
      "candidate_info": {
        "commit_hash": "412c1ab5bc254906d8f68b22fdabef82dea1a15a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/412c1ab5bc254906d8f68b22fdabef82dea1a15a",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-realpath.js"
        ],
        "message": "Fix test-fs-realpath on Windows\n\nAlso, in the process, fix a bug in fs.realpath on Windows.\n\nIf the user has permission to create symlinks, then use symlinks.  If\nnot, then skip over all the tests that cannot be run using Junctions\ninstead.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "944: var nextPartRe = /(.*?)(?:[\\/]+|$)/g;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js": [
          "File: test/simple/test-fs-realpath.js -> test/simple/test-fs-realpath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var common = require('../common');",
          "26: var assert = require('assert');",
          "27: var fs = require('fs');",
          "28: var path = require('path');",
          "29: var exec = require('child_process').exec;",
          "30: var async_completed = 0, async_expected = 0, unlink = [];",
          "32: function tmp(p) {",
          "33:   return path.join(common.tmpDir, p);",
          "34: }",
          "58: function asynctest(testBlock, args, callback, assertBlock) {",
          "59:   async_expected++;",
          "",
          "[Removed Lines]",
          "36: var fixturesAbsDir;",
          "37: var tmpAbsDir;",
          "38: function getAbsPaths(cb) {",
          "39:   var failed = false;",
          "40:   var did = 0;",
          "41:   var expect = 2;",
          "42:   bashRealpath(common.fixturesDir, function(er, path) {",
          "43:     if (failed) return;",
          "44:     if (er) return cb(failed = er);",
          "45:     fixturesAbsDir = path;",
          "46:     did++;",
          "47:     if (did === expect) cb();",
          "48:   });",
          "49:   bashRealpath(common.tmpDir, function(er, path) {",
          "50:     if (failed) return;",
          "51:     if (er) return cb(failed = er);",
          "52:     tmpAbsDir = path;",
          "53:     did++;",
          "54:     if (did === expect) cb();",
          "55:   });",
          "56: }",
          "",
          "[Added Lines]",
          "28: var isWindows = process.platform === 'win32';",
          "29: var skipSymlinks = false;",
          "31: var root = '/';",
          "32: if (isWindows) {",
          "34:   root = process.cwd().substr(0, 3);",
          "37:   fs._symlinkSync = fs.symlinkSync;",
          "38:   fs.symlinkSync = function(a, b, type) {",
          "39:     a = a.split('/').join('\\\\');",
          "40:     b = b.split('/').join('\\\\');",
          "41:     return fs._symlinkSync(a, b, type);",
          "42:   };",
          "46:   try {",
          "47:     exec('whoami /priv', function(err, o) {",
          "48:       if (err || o.indexOf('SeCreateSymbolicLinkPrivilege') == -1) {",
          "49:         skipSymlinks = true;",
          "50:       }",
          "51:       runTest();",
          "52:     });",
          "53:   } catch (er) {",
          "55:     skipSymlinks = true;",
          "56:     process.nextTick(runTest);",
          "57:   }",
          "58: } else {",
          "59:   process.nextTick(runTest);",
          "60: }",
          "67: var fixturesAbsDir = common.fixturesDir;",
          "68: var tmpAbsDir = common.tmpDir;",
          "70: console.error(\"absolutes\\n%s\\n%s\", fixturesAbsDir, tmpAbsDir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   }));",
          "73: }",
          "82: function test_simple_error_callback(cb) {",
          "83:   var ncalls = 0;",
          "",
          "[Removed Lines]",
          "75: function bashRealpath(path, callback) {",
          "76:   exec(\"cd '\" + path.replace(\"'\", \"\\\\'\") + \"' && pwd -P\", function(err, o) {",
          "77:     callback(err, o.trim());",
          "78:   });",
          "79: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: function test_simple_relative_symlink(callback) {",
          "98:   console.log('test_simple_relative_symlink');",
          "99:   var entry = common.tmpDir + '/symlink',",
          "100:       expected = common.tmpDir + '/cycles/root.js';",
          "101:   [",
          "102:     [entry, '../tmp/cycles/root.js']",
          "103:   ].forEach(function(t) {",
          "104:     try {fs.unlinkSync(t[0]);}catch (e) {}",
          "106:     unlink.push(t[0]);",
          "107:   });",
          "108:   var result = fs.realpathSync(entry);",
          "110:       'got ' + common.inspect(result) + ' expected ' +",
          "111:       common.inspect(expected));",
          "112:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "114:         'got ' +",
          "115:         common.inspect(result) +",
          "116:         ' expected ' +",
          "",
          "[Removed Lines]",
          "105:     fs.symlinkSync(t[1], t[0]);",
          "109:   assert.equal(result, expected,",
          "113:     assert.equal(result, expected,",
          "",
          "[Added Lines]",
          "107:   if (skipSymlinks) {",
          "108:     console.log('skipping symlink test (no privs)');",
          "109:     return runNextTest();",
          "110:   }",
          "117:     console.log('fs.symlinkSync(%j, %j, %j)', t[1], t[0], 'file');",
          "118:     fs.symlinkSync(t[1], t[0], 'file');",
          "122:   assert.equal(result, path.resolve(expected),",
          "126:     assert.equal(result, path.resolve(expected),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121: function test_simple_absolute_symlink(callback) {",
          "122:   console.log('test_simple_absolute_symlink');",
          "123:   var entry = tmpAbsDir + '/symlink',",
          "125:   [",
          "126:     [entry, expected]",
          "127:   ].forEach(function(t) {",
          "128:     try {fs.unlinkSync(t[0]);} catch (e) {}",
          "130:     unlink.push(t[0]);",
          "131:   });",
          "132:   var result = fs.realpathSync(entry);",
          "134:       'got ' +",
          "135:       common.inspect(result) +",
          "136:       ' expected ' +",
          "137:       common.inspect(expected));",
          "138:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "140:         'got ' +",
          "141:         common.inspect(result) +",
          "142:         ' expected ' +",
          "",
          "[Removed Lines]",
          "124:       expected = fixturesAbsDir + '/nested-index/one/index.js';",
          "129:     fs.symlinkSync(t[1], t[0]);",
          "133:   assert.equal(result, expected,",
          "139:     assert.equal(result, expected,",
          "",
          "[Added Lines]",
          "139:   var type = skipSymlinks ? 'junction' : 'dir';",
          "141:   console.log('using type=%s', type);",
          "144:       expected = fixturesAbsDir + '/nested-index/one';",
          "149:     console.error('fs.symlinkSync(%j, %j, %j)', t[1], t[0], type);",
          "150:     fs.symlinkSync(t[1], t[0], type);",
          "154:   assert.equal(result, path.resolve(expected),",
          "160:     assert.equal(result, path.resolve(expected),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147: function test_deep_relative_file_symlink(callback) {",
          "148:   console.log('test_deep_relative_file_symlink');",
          "149:   var expected = path.join(common.fixturesDir, 'cycles', 'root.js');",
          "150:   var linkData1 = '../../cycles/root.js';",
          "151:   var linkPath1 = path.join(common.fixturesDir,",
          "152:                             'nested-index', 'one', 'symlink1.js');",
          "153:   try {fs.unlinkSync(linkPath1);} catch (e) {}",
          "156:   var linkData2 = '../one/symlink1.js';",
          "157:   var entry = path.join(common.fixturesDir,",
          "158:                         'nested-index', 'two', 'symlink1-b.js');",
          "159:   try {fs.unlinkSync(entry);} catch (e) {}",
          "161:   unlink.push(linkPath1);",
          "162:   unlink.push(entry);",
          "165:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "167:         'got ' +",
          "168:         common.inspect(result) +",
          "169:         ' expected ' +",
          "171:   });",
          "172: }",
          "174: function test_deep_relative_dir_symlink(callback) {",
          "175:   console.log('test_deep_relative_dir_symlink');",
          "176:   var expected = path.join(common.fixturesDir, 'cycles', 'folder');",
          "177:   var linkData1b = '../../cycles/folder';",
          "178:   var linkPath1b = path.join(common.fixturesDir,",
          "179:                              'nested-index', 'one', 'symlink1-dir');",
          "180:   try {fs.unlinkSync(linkPath1b);} catch (e) {}",
          "183:   var linkData2b = '../one/symlink1-dir';",
          "184:   var entry = path.join(common.fixturesDir,",
          "185:                         'nested-index', 'two', 'symlink12-dir');",
          "186:   try {fs.unlinkSync(entry);} catch (e) {}",
          "188:   unlink.push(linkPath1b);",
          "189:   unlink.push(entry);",
          "193:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "195:         'got ' +",
          "196:         common.inspect(result) +",
          "197:         ' expected ' +",
          "199:   });",
          "200: }",
          "202: function test_cyclic_link_protection(callback) {",
          "203:   console.log('test_cyclic_link_protection');",
          "204:   var entry = common.tmpDir + '/cycles/realpath-3a';",
          "205:   [",
          "206:     [entry, '../cycles/realpath-3b'],",
          "",
          "[Removed Lines]",
          "154:   fs.symlinkSync(linkData1, linkPath1);",
          "160:   fs.symlinkSync(linkData2, entry);",
          "164:   assert.equal(fs.realpathSync(entry), expected);",
          "166:     assert.equal(result, expected,",
          "170:         common.inspect(expected));",
          "181:   fs.symlinkSync(linkData1b, linkPath1b);",
          "187:   fs.symlinkSync(linkData2b, entry);",
          "191:   assert.equal(fs.realpathSync(entry), expected);",
          "194:     assert.equal(result, expected,",
          "198:         common.inspect(expected));",
          "",
          "[Added Lines]",
          "170:   if (skipSymlinks) {",
          "171:     console.log('skipping symlink test (no privs)');",
          "172:     return runNextTest();",
          "173:   }",
          "180:   fs.symlinkSync(linkData1, linkPath1, 'file');",
          "186:   fs.symlinkSync(linkData2, entry, 'file');",
          "190:   assert.equal(fs.realpathSync(entry), path.resolve(expected));",
          "192:     assert.equal(result, path.resolve(expected),",
          "196:         common.inspect(path.resolve(expected)));",
          "202:   if (skipSymlinks) {",
          "203:     console.log('skipping symlink test (no privs)');",
          "204:     return runNextTest();",
          "205:   }",
          "211:   fs.symlinkSync(linkData1b, linkPath1b, 'dir');",
          "217:   fs.symlinkSync(linkData2b, entry, 'dir');",
          "221:   assert.equal(fs.realpathSync(entry), path.resolve(expected));",
          "224:     assert.equal(result, path.resolve(expected),",
          "228:         common.inspect(path.resolve(expected)));",
          "234:   if (skipSymlinks) {",
          "235:     console.log('skipping symlink test (no privs)');",
          "236:     return runNextTest();",
          "237:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:     [common.tmpDir + '/cycles/realpath-3c', '../cycles/realpath-3a']",
          "209:   ].forEach(function(t) {",
          "210:     try {fs.unlinkSync(t[0]);} catch (e) {}",
          "212:     unlink.push(t[0]);",
          "213:   });",
          "214:   assert.throws(function() { fs.realpathSync(entry); });",
          "",
          "[Removed Lines]",
          "211:     fs.symlinkSync(t[1], t[0]);",
          "",
          "[Added Lines]",
          "245:     fs.symlinkSync(t[1], t[0], 'dir');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221: function test_cyclic_link_overprotection(callback) {",
          "222:   console.log('test_cyclic_link_overprotection');",
          "223:   var cycles = common.tmpDir + '/cycles';",
          "224:   var expected = fs.realpathSync(cycles);",
          "225:   var folder = cycles + '/folder';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   if (skipSymlinks) {",
          "258:     console.log('skipping symlink test (no privs)');",
          "259:     return runNextTest();",
          "260:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "227:   var testPath = cycles;",
          "228:   for (var i = 0; i < 10; i++) testPath += '/folder/cycles';",
          "229:   try {fs.unlinkSync(link)} catch (ex) {}",
          "231:   unlink.push(link);",
          "233:   asynctest(fs.realpath, [testPath], callback, function(er, res) {",
          "235:   });",
          "236: }",
          "238: function test_relative_input_cwd(callback) {",
          "239:   console.log('test_relative_input_cwd');",
          "243:   var expected = common.tmpDir + '/cycles/root.js';",
          "244:   [",
          "245:     [entry, '../cycles/realpath-3b'],",
          "",
          "[Removed Lines]",
          "230:   fs.symlinkSync(cycles, link);",
          "232:   assert.equal(fs.realpathSync(testPath), expected);",
          "234:     assert.equal(res, expected);",
          "240:   var p = common.tmpDir.lastIndexOf('/');",
          "241:   var entrydir = common.tmpDir.substr(0, p);",
          "242:   var entry = common.tmpDir.substr(p + 1) + '/cycles/realpath-3a';",
          "",
          "[Added Lines]",
          "268:   fs.symlinkSync(cycles, link, 'dir');",
          "270:   assert.equal(fs.realpathSync(testPath), path.resolve(expected));",
          "272:     assert.equal(res, path.resolve(expected));",
          "282:   var entrydir = process.cwd();",
          "283:   var entry = common.tmpDir.substr(entrydir.length + 1) + '/cycles/realpath-3a';",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "247:     [common.tmpDir + '/cycles/realpath-3c', 'root.js']",
          "248:   ].forEach(function(t) {",
          "249:     var fn = t[0];",
          "251:     try {fs.unlinkSync(fn);} catch (e) {}",
          "253:     unlink.push(fn);",
          "254:   });",
          "255:   var origcwd = process.cwd();",
          "256:   process.chdir(entrydir);",
          "258:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "259:     process.chdir(origcwd);",
          "261:         'got ' +",
          "262:         common.inspect(result) +",
          "263:         ' expected ' +",
          "265:     return true;",
          "266:   });",
          "267: }",
          "269: function test_deep_symlink_mix(callback) {",
          "270:   console.log('test_deep_symlink_mix');",
          "275:   /tmp/node-test-realpath-f1 -> ../tmp/node-test-realpath-d1/foo",
          "276:   /tmp/node-test-realpath-d1 -> ../node-test-realpath-d2",
          "",
          "[Removed Lines]",
          "250:     if (fn.charAt(0) !== '/') fn = entrydir + '/' + fn;",
          "252:     fs.symlinkSync(t[1], fn);",
          "257:   assert.equal(fs.realpathSync(entry), expected);",
          "260:     assert.equal(result, expected,",
          "264:         common.inspect(expected));",
          "",
          "[Added Lines]",
          "291:     console.error('fn=%j', fn);",
          "293:     var b = path.basename(t[1]);",
          "294:     var type = (b === 'root.js' ? 'file' : 'dir');",
          "295:     console.log('fs.symlinkSync(%j, %j, %j)', t[1], fn, type);",
          "296:     fs.symlinkSync(t[1], fn, 'file');",
          "302:   assert.equal(fs.realpathSync(entry), path.resolve(expected));",
          "305:     assert.equal(result, path.resolve(expected),",
          "309:         common.inspect(path.resolve(expected)));",
          "316:   if (isWindows) {",
          "319:     console.log('skipping symlink test (no way to work on windows)');",
          "320:     return runNextTest();",
          "321:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "307:     unlink.push(tmp('node-test-realpath-d2'));",
          "308:   }",
          "309:   var expected = tmpAbsDir + '/cycles/root.js';",
          "311:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "313:         'got ' +",
          "314:         common.inspect(result) +",
          "315:         ' expected ' +",
          "317:     return true;",
          "318:   });",
          "319: }",
          "321: function test_non_symlinks(callback) {",
          "322:   console.log('test_non_symlinks');",
          "326:   var expected = tmpAbsDir + '/cycles/root.js';",
          "327:   var origcwd = process.cwd();",
          "328:   process.chdir(entrydir);",
          "330:   asynctest(fs.realpath, [entry], callback, function(err, result) {",
          "331:     process.chdir(origcwd);",
          "333:         'got ' +",
          "334:         common.inspect(result) +",
          "335:         ' expected ' +",
          "337:     return true;",
          "338:   });",
          "339: }",
          "",
          "[Removed Lines]",
          "310:   assert.equal(fs.realpathSync(entry), expected);",
          "312:     assert.equal(result, expected,",
          "316:         common.inspect(expected));",
          "323:   var p = tmpAbsDir.lastIndexOf('/');",
          "324:   var entrydir = tmpAbsDir.substr(0, p);",
          "325:   var entry = tmpAbsDir.substr(p + 1) + '/cycles/root.js';",
          "329:   assert.equal(fs.realpathSync(entry), expected);",
          "332:     assert.equal(result, expected,",
          "336:         common.inspect(expected));",
          "",
          "[Added Lines]",
          "361:   assert.equal(fs.realpathSync(entry), path.resolve(expected));",
          "363:     assert.equal(result, path.resolve(expected),",
          "367:         common.inspect(path.resolve(expected)));",
          "374:   var entrydir = path.dirname(tmpAbsDir);",
          "375:   var entry = tmpAbsDir.substr(entrydir.length + 1) + '/cycles/root.js';",
          "379:   assert.equal(fs.realpathSync(entry), path.resolve(expected));",
          "382:     assert.equal(result, path.resolve(expected),",
          "386:         common.inspect(path.resolve(expected)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "343:   console.log('test_escape_cwd');",
          "344:   asynctest(fs.realpath, ['..'], cb, function(er, uponeActual) {",
          "345:     assert.equal(upone, uponeActual,",
          "347:   });",
          "348: }",
          "349: var uponeActual = fs.realpathSync('..');",
          "350: assert.equal(upone, uponeActual,",
          "",
          "[Removed Lines]",
          "346:         'realpath(\"..\") expected: ' + upone + ' actual:' + uponeActual);",
          "351:     'realpathSync(\"..\") expected: ' + upone + ' actual:' + uponeActual);",
          "",
          "[Added Lines]",
          "396:         'realpath(\"..\") expected: ' + path.resolve(upone) + ' actual:' + uponeActual);",
          "401:     'realpathSync(\"..\") expected: ' + path.resolve(upone) + ' actual:' + uponeActual);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "361: function test_up_multiple(cb) {",
          "362:   console.error('test_up_multiple');",
          "363:   fs.mkdirSync(tmp('a'), 0755);",
          "364:   fs.mkdirSync(tmp('a/b'), 0755);",
          "365:   fs.symlinkSync('..', tmp('a/d'), 'dir');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   if (skipSymlinks) {",
          "414:     console.log('skipping symlink test (no privs)');",
          "415:     return runNextTest();",
          "416:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "398: function test_abs_with_kids(cb) {",
          "399:   console.log('test_abs_with_kids');",
          "400:   var root = tmpAbsDir + '/node-test-realpath-abs-kids';",
          "401:   function cleanup() {",
          "402:     ['/a/b/c/x.txt',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:   var type = skipSymlinks ? 'junction' : 'dir';",
          "459:   console.log('using type=%s', type);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "423:       fs.mkdirSync(root + folder, 0700);",
          "424:     });",
          "425:     fs.writeFileSync(root + '/a/b/c/x.txt', 'foo');",
          "427:   }",
          "428:   setup();",
          "429:   var linkPath = root + '/a/link/c/x.txt';",
          "430:   var expectPath = root + '/a/b/c/x.txt';",
          "431:   var actual = fs.realpathSync(linkPath);",
          "434:   asynctest(fs.realpath, [linkPath], cb, function(er, actual) {",
          "437:     cleanup();",
          "438:   });",
          "439: }",
          "",
          "[Removed Lines]",
          "426:     fs.symlinkSync(root + '/a/b', root + '/a/link');",
          "433:   assert.equal(actual, expectPath);",
          "436:     assert.equal(actual, expectPath);",
          "",
          "[Added Lines]",
          "487:     fs.symlinkSync(root + '/a/b', root + '/a/link', type);",
          "494:   assert.equal(actual, path.resolve(expectPath));",
          "497:     assert.equal(actual, path.resolve(expectPath));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "450:                 '/a/b' : '/a/b',",
          "451:                 '/a/b/c' : '/a/b',",
          "452:                 '/a/b/d' : '/a/b/d' };",
          "457:     if (--n === 0) cb();",
          "458:   });",
          "462:   var actual = fs.realpathSync(test, cache);",
          "463:   assert.equal(expect, actual);",
          "464:   fs.realpath(test, cache, function(er, actual) {",
          "",
          "[Removed Lines]",
          "453:   var rps = fs.realpathSync('/foo/bar/baz/bluff', cache);",
          "454:   assert.equal(cache['/foo/bar/baz/bluff'], rps);",
          "455:   fs.realpath('/1/2/3/4/5/6/7', cache, function(er, rp) {",
          "456:     assert.equal(cache['/1/2/3/4/5/6/7'], rp);",
          "460:   var test = '/a/b/c/d',",
          "461:       expect = '/a/b/d';",
          "",
          "[Added Lines]",
          "514:   if (isWindows) {",
          "515:     var wc = {};",
          "516:     Object.keys(cache).forEach(function(k) {",
          "517:       wc[ path.resolve(k) ] = path.resolve(cache[k]);",
          "518:     });",
          "519:     cache = wc;",
          "520:   }",
          "522:   var bluff = path.resolve('/foo/bar/baz/bluff');",
          "523:   var rps = fs.realpathSync(bluff, cache);",
          "524:   assert.equal(cache[bluff], rps);",
          "525:   var nums = path.resolve('/1/2/3/4/5/6/7');",
          "526:   fs.realpath(nums, cache, function(er, rp) {",
          "527:     assert.equal(cache[nums], rp);",
          "531:   var test = path.resolve('/a/b/c/d'),",
          "532:       expect = path.resolve('/a/b/d');",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "498:   test(runNextTest);",
          "499: }",
          "503:   var tmpDirs = ['cycles', 'cycles/folder'];",
          "504:   tmpDirs.forEach(function(t) {",
          "505:     t = tmp(t);",
          "",
          "[Removed Lines]",
          "501: getAbsPaths(function(er) {",
          "502:   if (er) throw er;",
          "",
          "[Added Lines]",
          "573: assert.equal(root, fs.realpathSync('/'));",
          "574: fs.realpath('/', function(err, result) {",
          "575:   assert.equal(null, err);",
          "576:   assert.equal(root, result);",
          "577: });",
          "580: function runTest() {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "511:   fs.writeFileSync(tmp('cycles/root.js'), \"console.error('roooot!');\");",
          "512:   console.error('start tests');",
          "513:   runNextTest();",
          "525: process.on('exit', function() {",
          "",
          "[Removed Lines]",
          "514: });",
          "517: assert.equal('/', fs.realpathSync('/'));",
          "518: fs.realpath('/', function(err, result) {",
          "519:   assert.equal(null, err);",
          "520:   assert.equal('/', result);",
          "521: });",
          "",
          "[Added Lines]",
          "592: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1ffbdc975d58b31e3b13749c29fdc07049ea1d9",
      "candidate_info": {
        "commit_hash": "b1ffbdc975d58b31e3b13749c29fdc07049ea1d9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b1ffbdc975d58b31e3b13749c29fdc07049ea1d9",
        "files": [
          "src/node_stat_watcher.cc",
          "src/node_stat_watcher.h"
        ],
        "message": "fs: fix use after free in stat watcher\n\nThe uv_fs_poll_t handle was stopped but not closed, leaving libuv's internal\nhandle queue in a corrupted state.",
        "before_after_code_files": [
          "src/node_stat_watcher.cc||src/node_stat_watcher.cc",
          "src/node_stat_watcher.h||src/node_stat_watcher.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_stat_watcher.cc||src/node_stat_watcher.cc": [
          "File: src/node_stat_watcher.cc -> src/node_stat_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: }",
          "52: void StatWatcher::Callback(uv_fs_poll_t* handle,",
          "53:                            int status,",
          "54:                            const uv_statbuf_t* prev,",
          "55:                            const uv_statbuf_t* curr) {",
          "58:   HandleScope scope;",
          "59:   Local<Value> argv[3];",
          "60:   argv[0] = BuildStatsObject(curr);",
          "61:   argv[1] = BuildStatsObject(prev);",
          "62:   argv[2] = Integer::New(status);",
          "63:   if (status == -1) {",
          "65:   }",
          "66:   if (onchange_sym.IsEmpty()) {",
          "67:     onchange_sym = NODE_PSYMBOL(\"onchange\");",
          "",
          "[Removed Lines]",
          "56:   StatWatcher* wrap = container_of(handle, StatWatcher, watcher_);",
          "57:   assert(handle == &wrap->watcher_);",
          "64:     SetErrno(uv_last_error(wrap->watcher_.loop));",
          "",
          "[Added Lines]",
          "52: static void Delete(uv_handle_t* handle) {",
          "53:   delete reinterpret_cast<uv_fs_poll_t*>(handle);",
          "54: }",
          "57: StatWatcher::StatWatcher()",
          "58:   : ObjectWrap()",
          "59:   , watcher_(new uv_fs_poll_t)",
          "60: {",
          "61:   uv_fs_poll_init(uv_default_loop(), watcher_);",
          "62:   watcher_->data = static_cast<void*>(this);",
          "63: }",
          "66: StatWatcher::~StatWatcher() {",
          "67:   Stop();",
          "68:   uv_close(reinterpret_cast<uv_handle_t*>(watcher_), Delete);",
          "69: }",
          "76:   StatWatcher* wrap = static_cast<StatWatcher*>(handle->data);",
          "77:   assert(wrap->watcher_ == handle);",
          "84:     SetErrno(uv_last_error(wrap->watcher_->loop));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   const bool persistent = args[1]->BooleanValue();",
          "89:   const uint32_t interval = args[2]->Uint32Value();",
          "93:   wrap->Ref();",
          "95:   return Undefined();",
          "",
          "[Removed Lines]",
          "91:   if (!persistent) uv_unref(reinterpret_cast<uv_handle_t*>(&wrap->watcher_));",
          "92:   uv_fs_poll_start(&wrap->watcher_, Callback, *path, interval);",
          "",
          "[Added Lines]",
          "111:   if (!persistent) uv_unref(reinterpret_cast<uv_handle_t*>(wrap->watcher_));",
          "112:   uv_fs_poll_start(wrap->watcher_, Callback, *path, interval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: void StatWatcher::Stop () {",
          "114:   Unref();",
          "115: }",
          "",
          "[Removed Lines]",
          "112:   if (!uv_is_active(reinterpret_cast<uv_handle_t*>(&watcher_))) return;",
          "113:   uv_fs_poll_stop(&watcher_);",
          "",
          "[Added Lines]",
          "132:   if (!uv_is_active(reinterpret_cast<uv_handle_t*>(watcher_))) return;",
          "133:   uv_fs_poll_stop(watcher_);",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.h||src/node_stat_watcher.h": [
          "File: src/node_stat_watcher.h -> src/node_stat_watcher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  protected:",
          "35:   static v8::Persistent<v8::FunctionTemplate> constructor_template;",
          "45:   static v8::Handle<v8::Value> New(const v8::Arguments& args);",
          "46:   static v8::Handle<v8::Value> Start(const v8::Arguments& args);",
          "",
          "[Removed Lines]",
          "37:   StatWatcher() : ObjectWrap() {",
          "38:     uv_fs_poll_init(uv_default_loop(), &watcher_);",
          "39:   }",
          "41:   ~StatWatcher() {",
          "42:     Stop();",
          "43:   }",
          "",
          "[Added Lines]",
          "37:   StatWatcher();",
          "38:   virtual ~StatWatcher();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:                        const uv_statbuf_t* curr);",
          "54:   void Stop();",
          "57: };",
          "59: }  // namespace node",
          "",
          "[Removed Lines]",
          "56:   uv_fs_poll_t watcher_;",
          "",
          "[Added Lines]",
          "51:   uv_fs_poll_t* watcher_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9be20afeb56f788319bea687ba16098fe2a915af",
      "candidate_info": {
        "commit_hash": "9be20afeb56f788319bea687ba16098fe2a915af",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9be20afeb56f788319bea687ba16098fe2a915af",
        "files": [
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-connect-error.c"
        ],
        "message": "update libuv to 6bbccf1fe0",
        "before_after_code_files": [
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-connect-error.c||deps/uv/test/test-pipe-connect-error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     case ERROR_SEM_TIMEOUT:                 return UV_ETIMEDOUT;",
          "116:     case WSAETIMEDOUT:                      return UV_ETIMEDOUT;",
          "117:     case WSAHOST_NOT_FOUND:                 return UV_ENOENT;",
          "118:     default:                                return UV_UNKNOWN;",
          "119:   }",
          "120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     case WSAENOTSOCK:                       return UV_ENOTSOCK;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   assert(handle->handle != INVALID_HANDLE_VALUE);",
          "563:   if (uv_set_pipe_handle(loop, (uv_pipe_t*)req->handle, handle->handle)) {",
          "564:     errno = GetLastError();",
          "565:     goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:   if (!GetNamedPipeInfo(handle->handle, NULL, NULL, NULL, NULL)) {",
          "565:     errno = WSAENOTSOCK;",
          "566:     goto error;",
          "567:   }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: TEST_DECLARE   (pipe_bind_error_inval)",
          "59: TEST_DECLARE   (pipe_listen_without_bind)",
          "60: TEST_DECLARE   (pipe_connect_bad_name)",
          "61: TEST_DECLARE   (connection_fail)",
          "62: TEST_DECLARE   (connection_fail_doesnt_auto_close)",
          "63: TEST_DECLARE   (shutdown_eof)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: TEST_DECLARE   (pipe_connect_to_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   TEST_OUTPUT_ENTRY  (platform_output)",
          "161:   TEST_ENTRY  (pipe_connect_bad_name)",
          "163:   TEST_ENTRY  (tty)",
          "164:   TEST_ENTRY  (stdio_over_pipes)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:   TEST_ENTRY  (pipe_connect_to_file)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-pipe-connect-error.c||deps/uv/test/test-pipe-connect-error.c": [
          "File: deps/uv/test/test-pipe-connect-error.c -> deps/uv/test/test-pipe-connect-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "53: TEST_IMPL(pipe_connect_bad_name) {",
          "54:   uv_pipe_t client;",
          "55:   uv_connect_t req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: static void connect_cb_file(uv_connect_t* connect_req, int status) {",
          "54:   ASSERT(status == -1);",
          "55:   ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK);",
          "56:   uv_close((uv_handle_t*)connect_req->handle, close_cb);",
          "57:   connect_cb_called++;",
          "58: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   return 0;",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: TEST_IMPL(pipe_connect_to_file) {",
          "80:   const char* path = \"test/fixtures/empty_file\";",
          "81:   uv_pipe_t client;",
          "82:   uv_connect_t req;",
          "83:   int r;",
          "85:   r = uv_pipe_init(uv_default_loop(), &client, 0);",
          "86:   ASSERT(r == 0);",
          "87:   uv_pipe_connect(&req, &client, path, connect_cb_file);",
          "89:   uv_run(uv_default_loop());",
          "91:   ASSERT(close_cb_called == 1);",
          "92:   ASSERT(connect_cb_called == 1);",
          "94:   return 0;",
          "95: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f90c9ce0e255e531fee4f07dbe53f0c6c893e700",
      "candidate_info": {
        "commit_hash": "f90c9ce0e255e531fee4f07dbe53f0c6c893e700",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f90c9ce0e255e531fee4f07dbe53f0c6c893e700",
        "files": [
          "tools/gyp/gyptest.py",
          "tools/gyp/pylib/gyp/MSVSSettings.py",
          "tools/gyp/pylib/gyp/MSVSVersion.py",
          "tools/gyp/pylib/gyp/__init__.py",
          "tools/gyp/pylib/gyp/common.py",
          "tools/gyp/pylib/gyp/easy_xml.py",
          "tools/gyp/pylib/gyp/easy_xml_test.py",
          "tools/gyp/pylib/gyp/generator/android.py",
          "tools/gyp/pylib/gyp/generator/eclipse.py",
          "tools/gyp/pylib/gyp/generator/make.py",
          "tools/gyp/pylib/gyp/generator/msvs.py",
          "tools/gyp/pylib/gyp/generator/ninja.py",
          "tools/gyp/pylib/gyp/generator/xcode.py",
          "tools/gyp/pylib/gyp/msvs_emulation.py",
          "tools/gyp/pylib/gyp/ninja_syntax.py",
          "tools/gyp/pylib/gyp/win_tool.py",
          "tools/gyp/pylib/gyp/xcode_emulation.py",
          "tools/gyp/pylib/gyp/xcodeproj_file.py",
          "tools/gyp/tools/emacs/README",
          "tools/gyp/tools/emacs/gyp-tests.el",
          "tools/gyp/tools/emacs/gyp.el",
          "tools/gyp/tools/emacs/run-unit-tests.sh",
          "tools/gyp/tools/emacs/testdata/media.gyp",
          "tools/gyp/tools/emacs/testdata/media.gyp.fontified"
        ],
        "message": "Upgrade GYP to r1477",
        "before_after_code_files": [
          "tools/gyp/gyptest.py||tools/gyp/gyptest.py",
          "tools/gyp/pylib/gyp/MSVSSettings.py||tools/gyp/pyligyp/MSVSSettings.py",
          "tools/gyp/pylib/gyp/MSVSVersion.py||tools/gyp/pyligyp/MSVSVersion.py",
          "tools/gyp/pylib/gyp/__init__.py||tools/gyp/pyligyp/__init__.py",
          "tools/gyp/pylib/gyp/common.py||tools/gyp/pyligyp/common.py",
          "tools/gyp/pylib/gyp/easy_xml.py||tools/gyp/pyligyp/easy_xml.py",
          "tools/gyp/pylib/gyp/easy_xml_test.py||tools/gyp/pyligyp/easy_xml_test.py",
          "tools/gyp/pylib/gyp/generator/android.py||tools/gyp/pyligyp/generator/android.py",
          "tools/gyp/pylib/gyp/generator/eclipse.py||tools/gyp/pyligyp/generator/eclipse.py",
          "tools/gyp/pylib/gyp/generator/make.py||tools/gyp/pyligyp/generator/make.py",
          "tools/gyp/pylib/gyp/generator/msvs.py||tools/gyp/pyligyp/generator/msvs.py",
          "tools/gyp/pylib/gyp/generator/ninja.py||tools/gyp/pyligyp/generator/ninja.py",
          "tools/gyp/pylib/gyp/generator/xcode.py||tools/gyp/pyligyp/generator/xcode.py",
          "tools/gyp/pylib/gyp/msvs_emulation.py||tools/gyp/pyligyp/msvs_emulation.py",
          "tools/gyp/pylib/gyp/ninja_syntax.py||tools/gyp/pyligyp/ninja_syntax.py",
          "tools/gyp/pylib/gyp/win_tool.py||tools/gyp/pyligyp/win_tool.py",
          "tools/gyp/pylib/gyp/xcode_emulation.py||tools/gyp/pyligyp/xcode_emulation.py",
          "tools/gyp/pylib/gyp/xcodeproj_file.py||tools/gyp/pyligyp/xcodeproj_file.py",
          "tools/gyp/tools/emacs/gyp-tests.el||tools/gyp/tools/emacs/gyp-tests.el",
          "tools/gyp/tools/emacs/gyp.el||tools/gyp/tools/emacs/gyp.el",
          "tools/gyp/tools/emacs/run-unit-tests.sh||tools/gyp/tools/emacs/run-unit-tests.sh",
          "tools/gyp/tools/emacs/testdatmedia.gyp||tools/gyp/tools/emacs/testdata/media.gyp",
          "tools/gyp/tools/emacs/testdatmedia.gyp.fontified||tools/gyp/tools/emacs/testdata/media.gyp.fontified"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/gyp/gyptest.py||tools/gyp/gyptest.py": [
          "File: tools/gyp/gyptest.py -> tools/gyp/gyptest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:             help=\"chdir to the specified directory\")",
          "154:   parser.add_option(\"-f\", \"--format\", action=\"store\", default='',",
          "155:             help=\"run tests with the specified formats\")",
          "156:   parser.add_option(\"-l\", \"--list\", action=\"store_true\",",
          "157:             help=\"list available tests and exit\")",
          "158:   parser.add_option(\"-n\", \"--no-exec\", action=\"store_true\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   parser.add_option(\"-G\", '--gyp_option', action=\"append\", default=[],",
          "157:             help=\"Add -G options to the gyp command line\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:     if not opts.quiet:",
          "221:       sys.stdout.write('TESTGYP_FORMAT=%s\\n' % format)",
          "223:     for test in tests:",
          "225:                       stdout=sys.stdout,",
          "226:                       stderr=sys.stderr)",
          "227:       if status == 2:",
          "",
          "[Removed Lines]",
          "224:       status = cr.run([sys.executable, test],",
          "",
          "[Added Lines]",
          "225:     gyp_options = []",
          "226:     for option in opts.gyp_option:",
          "227:       gyp_options += ['-G', option]",
          "228:     if gyp_options and not opts.quiet:",
          "229:       sys.stdout.write('Extra Gyp options: %s\\n' % gyp_options)",
          "232:       status = cr.run([sys.executable, test] + gyp_options,",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/MSVSSettings.py||tools/gyp/pyligyp/MSVSSettings.py": [
          "File: tools/gyp/pylib/gyp/MSVSSettings.py -> tools/gyp/pyligyp/MSVSSettings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Use of this source code is governed by a BSD-style license that can be",
          "3: # found in the LICENSE file.",
          "",
          "[Removed Lines]",
          "1: # Copyright (c) 2012 The Chromium Authors. All rights reserved.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: \"\"\"",
          "17: import sys",
          "20: # Dictionaries of settings validators. The key is the tool name, the value is",
          "21: # a dictionary mapping setting names to validation functions.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:   _msvs_to_msbuild_converters[tool.msvs_name][msvs_name] = _Translate",
          "365: def ConvertVCMacrosToMSBuild(s):",
          "366:   \"\"\"Convert the the MSVS macros found in the string to the MSBuild equivalent.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:         '$(ParentName)': '$(ProjectFileName)',",
          "379:         '$(PlatformName)': '$(Platform)',",
          "380:         '$(SafeInputName)': '%(Filename)',",
          "386:     }",
          "387:     for old, new in replace_map.iteritems():",
          "388:       s = s.replace(old, new)",
          "389:   return s",
          "",
          "[Removed Lines]",
          "382:         '$(IntDir)\\\\': '$(IntDir)',",
          "383:         '$(OutDir)\\\\': '$(OutDir)',",
          "384:         '$(IntDir)/': '$(IntDir)',",
          "385:         '$(OutDir)/': '$(OutDir)',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/MSVSVersion.py||tools/gyp/pyligyp/MSVSVersion.py": [
          "File: tools/gyp/pylib/gyp/MSVSVersion.py -> tools/gyp/pyligyp/MSVSVersion.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   def __init__(self, short_name, description,",
          "18:                solution_version, project_version, flat_sln, uses_vcxproj,",
          "20:     self.short_name = short_name",
          "21:     self.description = description",
          "22:     self.solution_version = solution_version",
          "",
          "[Removed Lines]",
          "19:                path, sdk_based):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     self.uses_vcxproj = uses_vcxproj",
          "26:     self.path = path",
          "27:     self.sdk_based = sdk_based",
          "29:   def ShortName(self):",
          "30:     return self.short_name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     \"\"\"Returns the path to a given compiler tool. \"\"\"",
          "61:     return os.path.normpath(os.path.join(self.path, \"VC/bin\", tool))",
          "63:   def SetupScript(self, target_arch):",
          "64:     \"\"\"Returns a command (with arguments) to be used to set up the",
          "65:     environment.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:   passed in that doesn't match a value in versions python will throw a error.",
          "189:   \"\"\"",
          "190:   versions = {",
          "191:       '2010': VisualStudioVersion('2010',",
          "192:                                   'Visual Studio 2010',",
          "193:                                   solution_version='11.00',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:       2005(e) - Visual Studio 2005 (8)",
          "253:       2008(e) - Visual Studio 2008 (9)",
          "254:       2010(e) - Visual Studio 2010 (10)",
          "255:     Where (e) is e for express editions of MSVS and blank otherwise.",
          "256:   \"\"\"",
          "258:   versions = []",
          "259:   for version in versions_to_check:",
          "260:     # Old method of searching for which VS version is installed",
          "",
          "[Removed Lines]",
          "257:   version_to_year = {'8.0': '2005', '9.0': '2008', '10.0': '2010'}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "306:   if version == 'auto':",
          "307:     version = os.environ.get('GYP_MSVS_VERSION', 'auto')",
          "308:   version_map = {",
          "310:     '2005': ('8.0',),",
          "311:     '2005e': ('8.0',),",
          "312:     '2008': ('9.0',),",
          "313:     '2008e': ('9.0',),",
          "314:     '2010': ('10.0',),",
          "315:     '2010e': ('10.0',),",
          "316:   }",
          "317:   version = str(version)",
          "318:   versions = _DetectVisualStudioVersions(version_map[version], 'e' in version)",
          "",
          "[Removed Lines]",
          "309:     'auto': ('10.0', '9.0', '8.0'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/__init__.py||tools/gyp/pyligyp/__init__.py": [
          "File: tools/gyp/pylib/gyp/__init__.py -> tools/gyp/pyligyp/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "4: # Use of this source code is governed by a BSD-style license that can be",
          "5: # found in the LICENSE file.",
          "",
          "[Removed Lines]",
          "3: # Copyright (c) 2011 Google Inc. All rights reserved.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   files = os.listdir(os.getcwd())",
          "40:   build_files = []",
          "41:   for file in files:",
          "43:       build_files.append(file)",
          "44:   return build_files",
          "47: def Load(build_files, format, default_variables={},",
          "48:          includes=[], depth='.', params=None, check=False, circular_check=True):",
          "49:   \"\"\"",
          "",
          "[Removed Lines]",
          "42:     if file[-len(extension):] == extension:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:   # avoiding collisions with user and automatic variables.",
          "67:   default_variables['GENERATOR'] = format",
          "70:   # These parameters are passed in order (as opposed to by key)",
          "71:   # because ActivePython cannot handle key parameters to __import__.",
          "72:   generator = __import__(generator_name, globals(), locals(), generator_name)",
          "",
          "[Removed Lines]",
          "69:   generator_name = 'gyp.generator.' + format",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:   flags = []",
          "158:   if options.use_environment and env_name:",
          "159:     for flag_value in ShlexEnv(env_name):",
          "161:   if values:",
          "162:     for flag_value in values:",
          "163:       flags.append(FormatOpt(flag, predicate(flag_value)))",
          "",
          "[Removed Lines]",
          "160:       flags.append(FormatOpt(flag, predicate(flag_value)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "254:     values._regeneration_metadata = self.__regeneratable_options",
          "255:     return values, args",
          "258:   my_name = os.path.basename(sys.argv[0])",
          "260:   parser = RegeneratableOptionParser()",
          "",
          "[Removed Lines]",
          "257: def main(args):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:   if not build_files:",
          "367:     build_files = FindBuildFiles()",
          "368:   if not build_files:",
          "373:   # TODO(mark): Chromium-specific hack!",
          "374:   # For Chromium, the gyp \"depth\" variable should always be a relative path",
          "",
          "[Removed Lines]",
          "369:     print >>sys.stderr, (usage + '\\n\\n%s: error: no build_file') % \\",
          "370:                         (my_name, my_name)",
          "371:     return 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "393:         break",
          "395:     if not options.depth:",
          "401:   # If toplevel-dir is not set, we assume that depth is the root of our source",
          "402:   # tree.",
          "",
          "[Removed Lines]",
          "396:       raise Exception, \\",
          "397:             'Could not automatically locate src directory.  This is a ' + \\",
          "398:             'temporary Chromium feature that will be removed.  Use ' + \\",
          "399:             '--depth as a workaround.'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "483:   return 0",
          "486: if __name__ == '__main__':",
          "487:   sys.exit(main(sys.argv[1:]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/common.py||tools/gyp/pyligyp/common.py": [
          "File: tools/gyp/pylib/gyp/common.py -> tools/gyp/pyligyp/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return ParseQualifiedTarget(fully_qualified_target)[0]",
          "98: def QualifiedTarget(build_file, target, toolset):",
          "99:   # \"Qualified\" means the file that a target was defined in and the target",
          "100:   # name, separated by a colon, suffixed by a # and the toolset name:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/easy_xml.py||tools/gyp/pyligyp/easy_xml.py": [
          "File: tools/gyp/pylib/gyp/easy_xml.py -> tools/gyp/pyligyp/easy_xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # found in the LICENSE file.",
          "5: import re",
          "8: def XmlToString(content, encoding='utf-8', pretty=False):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   rest = specification[1:]",
          "80:   if rest and isinstance(rest[0], dict):",
          "81:     for at, val in sorted(rest[0].iteritems()):",
          "83:     rest = rest[1:]",
          "84:   if rest:",
          "85:     xml_parts.append('>')",
          "",
          "[Removed Lines]",
          "82:       xml_parts.append(' %s=\"%s\"' % (at, _XmlEscape(val)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     xml_parts.append('/>%s' % new_line)",
          "105:   \"\"\" Writes the XML content to disk, touching the file only if it has changed.",
          "107:   Args:",
          "",
          "[Removed Lines]",
          "104: def WriteXmlIfChanged(content, path, encoding='utf-8', pretty=False):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:     pretty: True if we want pretty printing with indents and new lines.",
          "112:   \"\"\"",
          "113:   xml_string = XmlToString(content, encoding, pretty)",
          "115:   # Get the old content",
          "116:   try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:     \"(%s)\" % \"|\".join(map(re.escape, _xml_escape_map.keys())))",
          "146:   \"\"\" Escape a string for inclusion in XML.\"\"\"",
          "148:   return _xml_escape_re.sub(replace, value)",
          "",
          "[Removed Lines]",
          "145: def _XmlEscape(value):",
          "147:   replace = lambda m: _xml_escape_map[m.string[m.start() : m.end()]]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/easy_xml_test.py||tools/gyp/pyligyp/easy_xml_test.py": [
          "File: tools/gyp/pylib/gyp/easy_xml_test.py -> tools/gyp/pyligyp/easy_xml_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   def test_EasyXml_escaping(self):",
          "34:     original = '<test>\\'\"\\r&\\nfoo'",
          "36:     self.assertEqual(",
          "37:       easy_xml.XmlToString(['test3', {'a': original}, original]),",
          "38:       '<?xml version=\"1.0\" encoding=\"utf-8\"?><test3 a=\"%s\">%s</test3>' %",
          "41:   def test_EasyXml_pretty(self):",
          "42:     self.assertEqual(",
          "",
          "[Removed Lines]",
          "35:     converted = '&lt;test&gt;&apos;&quot;&#xD;&amp;&#xA;foo'",
          "39:       (converted, converted))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         '</PropertyGroup>'",
          "74:         '<Import Project=\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\"/>'",
          "75:         '<PropertyGroup '",
          "78:           '<ConfigurationType>Application</ConfigurationType>'",
          "79:           '<CharacterSet>Unicode</CharacterSet>'",
          "80:         '</PropertyGroup>'",
          "",
          "[Removed Lines]",
          "76:             'Condition=\"&apos;$(Configuration)|$(Platform)&apos;=='",
          "77:                        '&apos;Debug|Win32&apos;\" Label=\"Configuration\">'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/android.py||tools/gyp/pyligyp/generator/android.py": [
          "File: tools/gyp/pylib/gyp/generator/android.py -> tools/gyp/pyligyp/generator/android.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/eclipse.py||tools/gyp/pyligyp/generator/eclipse.py": [
          "File: tools/gyp/pylib/gyp/generator/eclipse.py -> tools/gyp/pyligyp/generator/eclipse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: This generator has no automated tests, so expect it to be broken.",
          "18: \"\"\"",
          "20: import os.path",
          "21: import subprocess",
          "22: import gyp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:                'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',",
          "37:                'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',",
          "38:                'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',",
          "40:   generator_default_variables[unused] = ''",
          "42: # Include dirs will occasionaly use the SHARED_INTERMEDIATE_DIR variable as",
          "",
          "[Removed Lines]",
          "39:                'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX']:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     out.write('    <language name=\"%s\">\\n' % lang)",
          "217:     for key in sorted(defines.iterkeys()):",
          "218:       out.write('      <macro><name>%s</name><value>%s</value></macro>\\n' %",
          "220:     out.write('    </language>\\n')",
          "221:   out.write('  </section>\\n')",
          "",
          "[Removed Lines]",
          "219:                 (key, defines[key]))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/make.py||tools/gyp/pyligyp/generator/make.py": [
          "File: tools/gyp/pylib/gyp/generator/make.py -> tools/gyp/pyligyp/generator/make.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # toplevel Makefile.  It may make sense to generate some .mk files on",
          "22: # the side to keep the the files readable.",
          "24: import gyp",
          "25: import gyp.common",
          "26: import gyp.system_test",
          "27: import gyp.xcode_emulation",
          "32: generator_default_variables = {",
          "33:   'EXECUTABLE_PREFIX': '',",
          "",
          "[Removed Lines]",
          "28: import os",
          "29: import re",
          "30: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: def CalculateVariables(default_variables, params):",
          "62:   \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"",
          "64:   flavor = gyp.common.GetFlavor(params)",
          "65:   if flavor == 'mac':",
          "66:     default_variables.setdefault('OS', 'mac')",
          "",
          "[Removed Lines]",
          "63:   cc_target = os.environ.get('CC.target', os.environ.get('CC', 'cc'))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255: # This will allow make to invoke N linker processes as specified in -jN.",
          "256: LINK ?= %(flock)s $(builddir)/linker.lock $(CXX)",
          "259: CFLAGS.target ?= $(CFLAGS)",
          "261: CXXFLAGS.target ?= $(CXXFLAGS)",
          "263: LDFLAGS.target ?= $(LDFLAGS)",
          "264: AR.target ?= $(AR)",
          "265: ARFLAGS.target ?= %(ARFLAGS.target)s",
          "",
          "[Removed Lines]",
          "258: CC.target ?= $(CC)",
          "260: CXX.target ?= $(CXX)",
          "262: LINK.target ?= $(LINK)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268: # in gyp's make.py where ARFLAGS.host etc. is computed.",
          "269: # TODO(evan): move all cross-compilation logic to gyp-time so we don't need",
          "270: # to replicate this environment fallback in make as well.",
          "272: CFLAGS.host ?=",
          "274: CXXFLAGS.host ?=",
          "276: LDFLAGS.host ?=",
          "278: ARFLAGS.host := %(ARFLAGS.host)s",
          "280: # Define a dir function that can handle spaces.",
          "",
          "[Removed Lines]",
          "271: CC.host ?= gcc",
          "273: CXX.host ?= g++",
          "275: LINK.host ?= g++",
          "277: AR.host ?= ar",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1590:                            phony = True)",
          "1594:     \"\"\"Write a variable definition that is a list of values.",
          "1596:     E.g. WriteList(['a','b'], 'foo', prefix='blah') writes out",
          "1597:          foo = blaha blahb",
          "1598:     but in a pretty-printed style.",
          "1599:     \"\"\"",
          "1607:   def WriteDoCmd(self, outputs, inputs, command, part_of_all, comment=None,",
          "",
          "[Removed Lines]",
          "1593:   def WriteList(self, list, variable=None, prefix='', quoter=QuoteIfNecessary):",
          "1600:     self.fp.write(variable + \" := \")",
          "1601:     if list:",
          "1602:       list = [quoter(prefix + l) for l in list]",
          "1603:       self.fp.write(\" \\\\\\n\\t\".join(list))",
          "1604:     self.fp.write(\"\\n\\n\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1810:     \"\"\"Convert a path to its output directory form.\"\"\"",
          "1811:     if '$(' in path:",
          "1812:       path = path.replace('$(obj)/', '$(obj).%s/$(TARGET)/' % self.toolset)",
          "1817:   def Pchify(self, path, lang):",
          "",
          "[Removed Lines]",
          "1813:       return path",
          "1814:     return '$(obj).%s/$(TARGET)/%s' % (self.toolset, path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1890:   # Compute flags used for building static archives.",
          "1891:   # N.B.: this fallback logic should match the logic in SHARED_HEADER.",
          "1892:   # See comment there for more details.",
          "1895:   arflags_target = 'crs'",
          "1896:   # ar -T enables thin archives on Linux. OS X's ar supports a -T flag, but it",
          "1897:   # does something useless (it limits filenames in the archive to 15 chars).",
          "",
          "[Removed Lines]",
          "1893:   ar_target = os.environ.get('AR.target', os.environ.get('AR', 'ar'))",
          "1894:   cc_target = os.environ.get('CC.target', os.environ.get('CC', 'cc'))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1899:                                                          cc_command=cc_target):",
          "1900:     arflags_target = 'crsT'",
          "1904:   arflags_host = 'crs'",
          "1905:   # It feels redundant to compute this again given that most builds aren't",
          "1908:   # even though they're nearly guaranteed to run the same code underneath.",
          "1909:   if flavor != 'mac' and gyp.system_test.TestArSupportsT(ar_command=ar_host,",
          "1910:                                                          cc_command=cc_host):",
          "",
          "[Removed Lines]",
          "1902:   ar_host = os.environ.get('AR.host', 'ar')",
          "1903:   cc_host = os.environ.get('CC.host', 'gcc')",
          "1906:   # cross-compiles, but due to quirks of history CC.host defaults to 'gcc'",
          "1907:   # while CC.target defaults to 'cc', so the commands really are different",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1993:     header_params.update({",
          "1994:         'flock': 'lockf',",
          "1995:     })",
          "1996:   header_params.update(RunSystemTests(flavor))",
          "1998:   build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])",
          "2000:   make_global_settings = ''",
          "2002:     if value[0] != '$':",
          "2003:       value = '$(abspath %s)' % value",
          "2004:     if key == 'LINK':",
          "2005:       make_global_settings += ('%s ?= %s $(builddir)/linker.lock %s\\n' %",
          "2006:                                (key, flock_command, value))",
          "2008:       make_global_settings += (",
          "2009:           'ifneq (,$(filter $(origin %s), undefined default))\\n' % key)",
          "2010:       # Let gyp-time envvars win over global settings.",
          "",
          "[Removed Lines]",
          "1999:   make_global_settings_dict = data[build_file].get('make_global_settings', {})",
          "2001:   for key, value in make_global_settings_dict:",
          "2007:     elif key in ['CC', 'CXX']:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2046:     build_file, target, toolset = gyp.common.ParseQualifiedTarget(",
          "2047:         qualified_target)",
          "2051:         \"make_global_settings needs to be the same for all targets.\")",
          "2053:     build_files.add(gyp.common.RelativePath(build_file, options.toplevel_dir))",
          "",
          "[Removed Lines]",
          "2049:     this_make_global_settings = data[build_file].get('make_global_settings', {})",
          "2050:     assert make_global_settings_dict == this_make_global_settings, (",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2123:     root_makefile.write(\"endif\\n\")",
          "2124:   root_makefile.write('\\n')",
          "2127:     WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)",
          "2129:   root_makefile.write(SHARED_FOOTER)",
          "",
          "[Removed Lines]",
          "2126:   if generator_flags.get('auto_regeneration', True):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/msvs.py||tools/gyp/pyligyp/generator/msvs.py": [
          "File: tools/gyp/pylib/gyp/generator/msvs.py -> tools/gyp/pyligyp/generator/msvs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     'STATIC_LIB_SUFFIX': '.lib',",
          "40:     'SHARED_LIB_SUFFIX': '.dll',",
          "41:     'INTERMEDIATE_DIR': '$(IntDir)',",
          "43:     'OS': 'win',",
          "44:     'PRODUCT_DIR': '$(OutDir)',",
          "46:     'RULE_INPUT_ROOT': '$(InputName)',",
          "47:     'RULE_INPUT_DIRNAME': '$(InputDir)',",
          "48:     'RULE_INPUT_EXT': '$(InputExt)',",
          "",
          "[Removed Lines]",
          "42:     'SHARED_INTERMEDIATE_DIR': '$(OutDir)/obj/global_intermediate',",
          "45:     'LIB_DIR': '$(OutDir)\\\\lib',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:       direct_cmd = [i.replace('$(InputPath)',",
          "269:                               '`cygpath -m \"${INPUTPATH}\"`')",
          "270:                     for i in direct_cmd]",
          "273:     #direct_cmd = gyp.common.EncodePOSIXShellList(direct_cmd)",
          "274:     direct_cmd = ' '.join(direct_cmd)",
          "275:     # TODO(quote):  regularize quoting path names throughout the module",
          "",
          "[Removed Lines]",
          "271:     direct_cmd = ['\"%s\"' % i for i in direct_cmd]",
          "272:     direct_cmd = [i.replace('\"', '\\\\\"') for i in direct_cmd]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:       command = ['type']",
          "296:     else:",
          "297:       command = [cmd[0].replace('/', '\\\\')]",
          "298:     # Fix the paths",
          "301:     arguments = [i.replace('$(InputDir)','%INPUTDIR%') for i in arguments]",
          "302:     if quote_cmd:",
          "303:       # Support a mode for using cmd directly.",
          "304:       # Convert any paths to native form (first element is used directly).",
          "",
          "[Removed Lines]",
          "299:     # If the argument starts with a slash, it's probably a command line switch",
          "300:     arguments = [i.startswith('/') and i or _FixPath(i) for i in cmd[1:]]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "830:   return guid",
          "834:   \"\"\"Get the platform toolset for the project.",
          "836:   Arguments:",
          "837:     proj_path: Path of the vcproj or vcxproj file to generate.",
          "838:     spec: The target dictionary containing the properties of the target.",
          "839:   Returns:",
          "840:     the platform toolset string or None.",
          "841:   \"\"\"",
          "842:   # Pluck out the default configuration.",
          "843:   default_config = _GetDefaultConfiguration(spec)",
          "847: def _GenerateProject(project, options, version, generator_flags):",
          "",
          "[Removed Lines]",
          "833: def _GetMsbuildToolsetOfProject(proj_path, spec):",
          "844:   return default_config.get('msbuild_toolset')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "897:   # Prepare list of sources and excluded sources.",
          "898:   gyp_file = os.path.split(project.build_file)[1]",
          "901:   # Add rules.",
          "902:   actions_to_add = {}",
          "",
          "[Removed Lines]",
          "899:   sources, excluded_sources = _PrepareListOfSources(spec, gyp_file)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1046:               defines)",
          "1047:   # Change program database directory to prevent collisions.",
          "1048:   _ToolAppend(tools, 'VCCLCompilerTool', 'ProgramDataBaseFileName',",
          "1050:   # Add disabled warnings.",
          "1051:   _ToolAppend(tools, 'VCCLCompilerTool',",
          "1052:               'DisableSpecificWarnings', disabled_warnings)",
          "",
          "[Removed Lines]",
          "1049:               '$(IntDir)\\\\$(ProjectName)\\\\vc80.pdb', only_if_unset=True)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1133:   vc_tool = ''",
          "1134:   msbuild_tool = ''",
          "1135:   output_file_map = {",
          "1140:   }",
          "1141:   output_file_props = output_file_map.get(spec['type'])",
          "1142:   if output_file_props and int(spec.get('msvs_auto_output_file', 1)):",
          "",
          "[Removed Lines]",
          "1136:       'executable': ('VCLinkerTool', 'Link', '$(OutDir)\\\\', '.exe'),",
          "1137:       'shared_library': ('VCLinkerTool', 'Link', '$(OutDir)\\\\', '.dll'),",
          "1138:       'loadable_module': ('VCLinkerTool', 'Link', '$(OutDir)\\\\', '.dll'),",
          "1139:       'static_library': ('VCLibrarianTool', 'Lib', '$(OutDir)\\\\lib\\\\', '.lib'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1249:   prepared_attrs['ConfigurationType'] = config_type",
          "1250:   output_dir = prepared_attrs.get('OutputDirectory',",
          "1251:                                   '$(SolutionDir)$(ConfigurationName)')",
          "1253:   if 'IntermediateDirectory' not in prepared_attrs:",
          "1254:     intermediate = '$(ConfigurationName)\\\\obj\\\\$(ProjectName)'",
          "1255:     prepared_attrs['IntermediateDirectory'] = intermediate",
          "1256:   return prepared_attrs",
          "",
          "[Removed Lines]",
          "1252:   prepared_attrs['OutputDirectory'] = output_dir",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1261:   sources_set.update(set(sources))",
          "1265:   \"\"\"Prepare list of sources and excluded sources.",
          "1267:   Besides the sources specified directly in the spec, adds the gyp file so",
          "",
          "[Removed Lines]",
          "1264: def _PrepareListOfSources(spec, gyp_file):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1280:   _AddNormalizedSources(sources, spec.get('sources', []))",
          "1281:   excluded_sources = set()",
          "1282:   # Add in the gyp file.",
          "1285:   # Add in 'action' inputs and outputs.",
          "1286:   for a in spec.get('actions', []):",
          "",
          "[Removed Lines]",
          "1283:   sources.add(gyp_file)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1598:                      msvs_version.ProjectExtension())",
          "1600:   build_file = gyp.common.BuildFile(qualified_target)",
          "1602:   fix_prefix = None",
          "1603:   if options.generator_output:",
          "1604:     project_dir_path = os.path.dirname(os.path.abspath(proj_path))",
          "",
          "[Removed Lines]",
          "1601:   proj_path = os.path.join(os.path.split(build_file)[0], proj_filename)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1657:         fixpath_prefix=fixpath_prefix)",
          "1658:     # Set project toolset if any (MS build only)",
          "1659:     if msvs_version.UsesVcxproj():",
          "1661:     projects[qualified_target] = obj",
          "1662:   # Set all the dependencies",
          "1663:   for project in projects.values():",
          "",
          "[Removed Lines]",
          "1660:       obj.set_msbuild_toolset(_GetMsbuildToolsetOfProject(proj_path, spec))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1805:   for build_file in data:",
          "1806:     # Validate build_file extension",
          "1808:       continue",
          "1810:     if options.generator_output:",
          "1811:       sln_path = os.path.join(options.generator_output, sln_path)",
          "1812:     # Get projects in the solution, and their dependents.",
          "",
          "[Removed Lines]",
          "1807:     if build_file[-4:] != '.gyp':",
          "1809:     sln_path = build_file[:-4] + options.suffix + '.sln'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1856:                ['ItemGroup'] + filter_group,",
          "1857:                ['ItemGroup'] + source_group",
          "1858:               ]",
          "1860:   elif os.path.exists(filters_path):",
          "1861:     # We don't need this filter anymore.  Delete the old filter file.",
          "1862:     os.unlink(filters_path)",
          "",
          "[Removed Lines]",
          "1859:     easy_xml.WriteXmlIfChanged(content, filters_path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2057:          ],",
          "2058:         ]",
          "2059:     ])",
          "2063: def _GenerateMSBuildRuleTargetsFile(targets_path, msbuild_rules):",
          "",
          "[Removed Lines]",
          "2060:   easy_xml.WriteXmlIfChanged(content, props_path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2219:          ]",
          "2220:         ],",
          "2221:     ])",
          "2225: def _GenerateMSBuildRuleXmlFile(xml_path, msbuild_rules):",
          "",
          "[Removed Lines]",
          "2222:   easy_xml.WriteXmlIfChanged(content, targets_path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2397:          }",
          "2398:         ]",
          "2399:     ])",
          "2403: def _GetConfigurationAndPlatform(name, settings):",
          "",
          "[Removed Lines]",
          "2400:   easy_xml.WriteXmlIfChanged(content, xml_path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2558:     msbuild_attributes['ConfigurationType'] = config_type",
          "2559:     output_dir = msbuild_attributes.get('OutputDirectory',",
          "2560:                                       '$(SolutionDir)$(Configuration)\\\\')",
          "2562:     if 'IntermediateDirectory' not in msbuild_attributes:",
          "2563:       intermediate = '$(Configuration)\\\\'",
          "2565:     if 'CharacterSet' in msbuild_attributes:",
          "2566:       msbuild_attributes['CharacterSet'] = _ConvertMSVSCharacterSet(",
          "2567:           msbuild_attributes['CharacterSet'])",
          "",
          "[Removed Lines]",
          "2561:     msbuild_attributes['OutputDirectory'] = output_dir",
          "2564:       msbuild_attributes['IntermediateDirectory'] = intermediate",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2584:     msbuild_settings = config['finalized_msbuild_settings']",
          "2585:     out_file = msbuild_settings[msbuild_tool].get('OutputFile')",
          "2586:     if out_file:",
          "2589:   return msbuild_attributes",
          "",
          "[Removed Lines]",
          "2587:       msbuild_attributes['TargetPath'] = out_file",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2960:   relative_path_of_gyp_file = gyp.common.RelativePath(gyp_path, project_dir)",
          "2962:   gyp_file = os.path.split(project.build_file)[1]",
          "2964:   # Add rules.",
          "2965:   actions_to_add = {}",
          "2966:   props_files_of_rules = set()",
          "",
          "[Removed Lines]",
          "2963:   sources, excluded_sources = _PrepareListOfSources(spec, gyp_file)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3034:   # TODO(jeanluc) File a bug to get rid of runas.  We had in MSVS:",
          "3035:   # has_run_as = _WriteMSVSUserFile(project.path, version, spec)",
          "3039:   return missing_sources",
          "",
          "[Removed Lines]",
          "3037:   easy_xml.WriteXmlIfChanged(content, project.path)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/ninja.py||tools/gyp/pyligyp/generator/ninja.py": [
          "File: tools/gyp/pylib/gyp/generator/ninja.py -> tools/gyp/pyligyp/generator/ninja.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # found in the LICENSE file.",
          "5: import copy",
          "6: import gyp",
          "7: import gyp.common",
          "8: import gyp.msvs_emulation",
          "9: import gyp.MSVSVersion",
          "10: import gyp.system_test",
          "11: import gyp.xcode_emulation",
          "18: import gyp.ninja_syntax as ninja_syntax",
          "20: generator_default_variables = {",
          "",
          "[Removed Lines]",
          "12: import hashlib",
          "13: import os.path",
          "14: import re",
          "15: import subprocess",
          "16: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:   # Gyp expects the following variables to be expandable by the build",
          "28:   # system to the appropriate locations.  Ninja prefers paths to be",
          "29:   # known at gyp time.  To resolve this, introduce special",
          "32:   # ninja/shell variable) that are passed to gyp here but expanded",
          "33:   # before writing out into the target .ninja files; see",
          "34:   # ExpandSpecial.",
          "35:   'INTERMEDIATE_DIR': '$!INTERMEDIATE_DIR',",
          "36:   'SHARED_INTERMEDIATE_DIR': '$!PRODUCT_DIR/gen',",
          "37:   'PRODUCT_DIR': '$!PRODUCT_DIR',",
          "39:   # Special variables that may be used by gyp 'rule' targets.",
          "40:   # We generate definitions for these variables on the fly when processing a",
          "",
          "[Removed Lines]",
          "30:   # variables starting with $! (which begin with a $ so gyp knows it",
          "31:   # should be treated as a path, but is otherwise an invalid",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: # TODO: figure out how to not build extra host objects in the non-cross-compile",
          "55: # case when this is enabled, and enable unconditionally.",
          "56: generator_supports_multiple_toolsets = (",
          "58:   os.environ.get('CXX_target'))",
          "",
          "[Removed Lines]",
          "57:   os.environ.get('AR_target') or os.environ.get('CC_target') or",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:       # so insert product_dir in front if it is provided.",
          "259:       path = path.replace(INTERMEDIATE_DIR,",
          "260:                           os.path.join(product_dir or '', int_dir))",
          "261:     return path",
          "263:   def ExpandRuleVariables(self, path, root, dirname, source, ext, name):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "287:       if self.flavor == 'win':",
          "288:         expanded = os.path.normpath(expanded)",
          "289:       return expanded",
          "290:     assert '$' not in path, path",
          "291:     return os.path.normpath(os.path.join(self.build_to_base, path))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "695:   def WriteSources(self, config_name, config, sources, predepends,",
          "696:                    precompiled_header):",
          "697:     \"\"\"Write build rules to compile all of |sources|.\"\"\"",
          "704:     extra_defines = []",
          "705:     if self.flavor == 'mac':",
          "",
          "[Removed Lines]",
          "698:     if self.toolset == 'target':",
          "699:       self.ninja.variable('ar', '$ar_target')",
          "700:       self.ninja.variable('cc', '$cc_target')",
          "701:       self.ninja.variable('cxx', '$cxx_target')",
          "702:       self.ninja.variable('ld', '$ld_target')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "875:                                                 self.GypPathToNinja)",
          "876:       self.WriteVariableList(",
          "877:           'libflags', gyp.common.uniquer(map(self.ExpandSpecial, libflags)))",
          "880:     else:",
          "881:       ldflags = config.get('ldflags', [])",
          "882:     self.WriteVariableList('ldflags',",
          "",
          "[Removed Lines]",
          "878:       ldflags = self.msvs_settings.GetLdflags(config_name,",
          "879:           self.GypPathToNinja, self.ExpandSpecial)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1182:   \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"",
          "1183:   global generator_additional_non_configuration_keys",
          "1184:   global generator_additional_path_sections",
          "1186:   flavor = gyp.common.GetFlavor(params)",
          "1187:   if flavor == 'mac':",
          "1188:     default_variables.setdefault('OS', 'mac')",
          "",
          "[Removed Lines]",
          "1185:   cc_target = os.environ.get('CC.target', os.environ.get('CC', 'cc'))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1274:   gyp.common.CopyTool(flavor, toplevel_build)",
          "1276:   # Grab make settings for CC/CXX.",
          "1277:   if flavor == 'win':",
          "1279:     gyp.msvs_emulation.GenerateEnvironmentFiles(",
          "1280:         toplevel_build, generator_flags, OpenOutput)",
          "1281:   else:",
          "1283:   build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])",
          "1284:   make_global_settings = data[build_file].get('make_global_settings', [])",
          "1285:   build_to_root = InvertRelativePath(build_dir)",
          "1286:   for key, value in make_global_settings:",
          "1290:   flock = 'flock'",
          "1291:   if flavor == 'mac':",
          "1292:     flock = './gyp-mac-tool flock'",
          "1295:   if flavor == 'win':",
          "1297:     master_ninja.variable('idl', 'midl.exe')",
          "1298:     master_ninja.variable('ar', 'lib.exe')",
          "1299:     master_ninja.variable('rc', 'rc.exe')",
          "1300:     master_ninja.variable('asm', 'ml.exe')",
          "1301:   else:",
          "1308:   if flavor == 'win':",
          "1310:   else:",
          "1313:   if flavor == 'mac':",
          "1314:     master_ninja.variable('mac_tool', os.path.join('.', 'gyp-mac-tool'))",
          "",
          "[Removed Lines]",
          "1278:     cc = cxx = 'cl.exe'",
          "1282:     cc, cxx = 'gcc', 'g++'",
          "1287:     if key == 'CC': cc = os.path.join(build_to_root, value)",
          "1288:     if key == 'CXX': cxx = os.path.join(build_to_root, value)",
          "1293:   master_ninja.variable('cc', os.environ.get('CC', cc))",
          "1294:   master_ninja.variable('cxx', os.environ.get('CXX', cxx))",
          "1296:     master_ninja.variable('ld', 'link.exe')",
          "1302:     master_ninja.variable('ld', flock + ' linker.lock $cxx')",
          "1303:     master_ninja.variable('ar', os.environ.get('AR', 'ar'))",
          "1305:   master_ninja.variable('ar_target', os.environ.get('AR_target', '$ar'))",
          "1306:   master_ninja.variable('cc_target', os.environ.get('CC_target', '$cc'))",
          "1307:   master_ninja.variable('cxx_target', os.environ.get('CXX_target', '$cxx'))",
          "1309:     master_ninja.variable('ld_target', os.environ.get('LD_target', '$ld'))",
          "1311:     master_ninja.variable('ld_target', flock + ' linker.lock $cxx_target')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1348:       'cc',",
          "1349:       description='CC $out',",
          "1350:       command=cc_template % {'outspec': '/Fo$out'},",
          "1352:       rspfile='$out.rsp',",
          "1353:       rspfile_content='$defines $includes $cflags $cflags_c')",
          "1354:     master_ninja.rule(",
          "1355:       'cc_pch',",
          "1356:       description='CC PCH $out',",
          "1357:       command=cc_template % {'outspec': '/Fp$out /Fo$out.obj'},",
          "1359:       rspfile='$out.rsp',",
          "1360:       rspfile_content='$defines $includes $cflags $cflags_c')",
          "1361:     master_ninja.rule(",
          "1362:       'cxx',",
          "1363:       description='CXX $out',",
          "1364:       command=cxx_template % {'outspec': '/Fo$out'},",
          "1366:       rspfile='$out.rsp',",
          "1367:       rspfile_content='$defines $includes $cflags $cflags_cc')",
          "1368:     master_ninja.rule(",
          "1369:       'cxx_pch',",
          "1370:       description='CXX PCH $out',",
          "1371:       command=cxx_template % {'outspec': '/Fp$out /Fo$out.obj'},",
          "1373:       rspfile='$out.rsp',",
          "1374:       rspfile_content='$defines $includes $cflags $cflags_cc')",
          "1375:     master_ninja.rule(",
          "",
          "[Removed Lines]",
          "1351:       deplist='$out.dl',",
          "1358:       deplist='$out.dl',",
          "1365:       deplist='$out.dl',",
          "1372:       deplist='$out.dl',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1446:     dllcmd = ('%s gyp-win-tool link-wrapper $arch '",
          "1447:               '$ld /nologo /IMPLIB:$implib /DLL /OUT:$dll '",
          "1448:               '/PDB:$dll.pdb @$dll.rsp' % sys.executable)",
          "1449:     master_ninja.rule('solink', description=dlldesc, command=dllcmd,",
          "1450:                       rspfile='$dll.rsp',",
          "1451:                       rspfile_content='$libs $in_newline $ldflags',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1460:         'link',",
          "1461:         description='LINK $out',",
          "1462:         command=('%s gyp-win-tool link-wrapper $arch '",
          "1465:         rspfile='$out.rsp',",
          "1466:         rspfile_content='$in_newline $libs $ldflags')",
          "1467:   else:",
          "",
          "[Removed Lines]",
          "1463:                  '$ld /nologo /OUT:$out /PDB:$out.pdb @$out.rsp' %",
          "1464:                  sys.executable),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/generator/xcode.py||tools/gyp/pyligyp/generator/xcode.py": [
          "File: tools/gyp/pylib/gyp/generator/xcode.py -> tools/gyp/pyligyp/generator/xcode.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import gyp.xcodeproj_file",
          "8: import errno",
          "9: import os",
          "10: import posixpath",
          "11: import re",
          "12: import shutil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:       xccl = CreateXCConfigurationList(configurations)",
          "146:       self.project.SetProperty('buildConfigurationList', xccl)",
          "147:     except:",
          "149:       sys.stderr.write(\"Problem with gyp file %s\\n\" % self.gyp_path)",
          "150:       raise",
          "",
          "[Removed Lines]",
          "148:       import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "527:   basename = posixpath.basename(source)",
          "528:   (root, ext) = posixpath.splitext(basename)",
          "530:     ext = ext[1:].lower()",
          "532:   if ext in source_extensions and type != 'none':",
          "",
          "[Removed Lines]",
          "529:   if ext != '':",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "614:     if project_version:",
          "615:       xcp.project_file.SetXcodeVersion(project_version)",
          "623:   xcode_targets = {}",
          "624:   xcode_target_to_target_dict = {}",
          "",
          "[Removed Lines]",
          "617:     main_group = pbxp.GetProperty('mainGroup')",
          "618:     build_group = gyp.xcodeproj_file.PBXGroup({'name': 'Build'})",
          "619:     main_group.AppendChild(build_group)",
          "620:     for included_file in build_file_dict['included_files']:",
          "621:       build_group.AddOrGetFileByPath(included_file, False)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/msvs_emulation.py||tools/gyp/pyligyp/msvs_emulation.py": [
          "File: tools/gyp/pylib/gyp/msvs_emulation.py -> tools/gyp/pyligyp/msvs_emulation.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   \"\"\"Try to find an installation location for the DirectX SDK. Check for the",
          "114:   standard environment variable, and if that doesn't exist, try to find",
          "115:   via the registry. May return None if not found in either location.\"\"\"",
          "116:   dxsdk_dir = os.environ.get('DXSDK_DIR')",
          "117:   if not dxsdk_dir:",
          "118:     # Setup params to pass to and attempt to launch reg.exe.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     for line in p.communicate()[0].splitlines():",
          "122:       if 'InstallPath' in line:",
          "123:         dxsdk_dir = line.split('    ')[3] + \"\\\\\"",
          "124:   return dxsdk_dir",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:         '$(InputName)': '${root}',",
          "170:         '$(ProjectName)': self.spec['target_name'],",
          "171:         '$(PlatformName)': target_platform,",
          "172:     }",
          "173:     # Chromium uses DXSDK_DIR in include/lib paths, but it may or may not be",
          "174:     # set. This happens when the SDK is sync'd via src-internal, rather than",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:       elif len(def_files) > 1:",
          "363:         raise Exception(\"Multiple .def files\")",
          "367:     config = self._RealConfig(config)",
          "368:     ldflags = []",
          "369:     ld = self._GetWrapper(self, self.msvs_settings[config],",
          "",
          "[Removed Lines]",
          "365:   def GetLdflags(self, config, gyp_to_build_path, expand_special):",
          "366:     \"\"\"Returns the flags that need to be added to link commands.\"\"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:     if not filter(lambda x: 'NXCOMPAT' in x, ldflags):",
          "413:       ldflags.append('/NXCOMPAT')",
          "417:   def IsUseLibraryDependencyInputs(self, config):",
          "418:     \"\"\"Returns whether the target should be linked via Use Library Dependency",
          "",
          "[Removed Lines]",
          "415:     return ldflags",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:     cygwin_dir = os.path.normpath(",
          "448:         os.path.join(path_to_base, self.msvs_cygwin_dirs[0]))",
          "449:     cd = ('cd %s' % path_to_base).replace('\\\\', '/')",
          "452:     bash_cmd = ' '.join(args)",
          "453:     cmd = (",
          "454:         'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir +",
          "",
          "[Removed Lines]",
          "450:     args = [a.replace('\\\\', '/') for a in args]",
          "451:     args = [\"'%s'\" % a.replace(\"'\", \"\\\\'\") for a in args]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/ninja_syntax.py||tools/gyp/pyligyp/ninja_syntax.py": [
          "File: tools/gyp/pylib/gyp/ninja_syntax.py -> tools/gyp/pyligyp/ninja_syntax.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         self._line('%s = %s' % (key, value), indent)",
          "37:     def rule(self, name, command, description=None, depfile=None,",
          "39:              rspfile_content=None):",
          "40:         self._line('rule %s' % name)",
          "41:         self.variable('command', command, indent=1)",
          "",
          "[Removed Lines]",
          "38:              generator=False, restat=False, deplist=None, rspfile=None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:             self.variable('description', description, indent=1)",
          "44:         if depfile:",
          "45:             self.variable('depfile', depfile, indent=1)",
          "48:         if generator:",
          "49:             self.variable('generator', '1', indent=1)",
          "50:         if restat:",
          "",
          "[Removed Lines]",
          "46:         if deplist:",
          "47:             self.variable('deplist', deplist, indent=1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/win_tool.py||tools/gyp/pyligyp/win_tool.py": [
          "File: tools/gyp/pylib/gyp/win_tool.py -> tools/gyp/pyligyp/win_tool.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import shutil",
          "14: import subprocess",
          "15: import sys",
          "18: def main(args):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     sys.exit(exit_code)",
          "25: class WinTool(object):",
          "26:   \"\"\"This class performs all the Windows tooling steps. The methods can either",
          "27:   be executed directly, or dispatched from an argument list.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     '   Creating library ui.dll.lib and object ui.dll.exp'",
          "69:     This happens when there are exports from the dll or exe.",
          "70:     \"\"\"",
          "71:     env = self._GetEnv(arch)",
          "72:     popen = subprocess.Popen(args, shell=True, env=env,",
          "73:                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)",
          "74:     out, _ = popen.communicate()",
          "75:     for line in out.splitlines():",
          "77:         print line",
          "78:     return popen.returncode",
          "",
          "[Removed Lines]",
          "76:       if not line.startswith('   Creating library '):",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/xcode_emulation.py||tools/gyp/pyligyp/xcode_emulation.py": [
          "File: tools/gyp/pylib/gyp/xcode_emulation.py -> tools/gyp/pyligyp/xcode_emulation.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:   def _SdkPath(self):",
          "245:     sdk_root = self.GetPerTargetSetting('SDKROOT', default='macosx10.5')",
          "246:     if sdk_root.startswith('macosx'):",
          "250:   def GetCflags(self, configname):",
          "251:     \"\"\"Returns flags that need to be added to .c, .cc, .m, and .mm",
          "",
          "[Removed Lines]",
          "247:       sdk_root = 'MacOSX' + sdk_root[len('macosx'):]",
          "248:     return os.path.join(self._GetSdkBaseDir(), '%s.sdk' % sdk_root)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:     config = self.spec['configurations'][self.configname]",
          "336:     framework_dirs = config.get('mac_framework_dirs', [])",
          "337:     for directory in framework_dirs:",
          "340:     self.configname = None",
          "341:     return cflags",
          "",
          "[Removed Lines]",
          "338:       cflags.append('-F ' + directory.replace('$(SDKROOT)', sdk_root))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:     for rpath in self._Settings().get('LD_RUNPATH_SEARCH_PATHS', []):",
          "554:       ldflags.append('-Wl,-rpath,' + rpath)",
          "556:     self.configname = None",
          "557:     return ldflags",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/pylib/gyp/xcodeproj_file.py||tools/gyp/pyligyp/xcodeproj_file.py": [
          "File: tools/gyp/pylib/gyp/xcodeproj_file.py -> tools/gyp/pyligyp/xcodeproj_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Use of this source code is governed by a BSD-style license that can be",
          "3: # found in the LICENSE file.",
          "",
          "[Removed Lines]",
          "1: # Copyright (c) 2009 Google Inc. All rights reserved.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1199:     is_dir = False",
          "1200:     if path.endswith('/'):",
          "1201:       is_dir = True",
          "1203:     if is_dir:",
          "1208:     # Adding or getting a variant?  Variants are files inside directories",
          "1209:     # with an \".lproj\" extension.  Xcode uses variants for localization.  For",
          "",
          "[Removed Lines]",
          "1202:     normpath = posixpath.normpath(path)",
          "1204:       normpath = path + '/'",
          "1205:     else:",
          "1206:       normpath = path",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1232:       # this PBXGroup, no recursion necessary.",
          "1233:       if variant_name is None:",
          "1234:         # Add or get a PBXFileReference.",
          "1236:         if file_ref != None:",
          "1237:           assert file_ref.__class__ == PBXFileReference",
          "1238:         else:",
          "",
          "[Removed Lines]",
          "1235:         file_ref = self.GetChildByPath(normpath)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/gyp/tools/emacs/gyp-tests.el||tools/gyp/tools/emacs/gyp-tests.el": [
          "File: tools/gyp/tools/emacs/gyp-tests.el -> tools/gyp/tools/emacs/gyp-tests.el",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ;;; gyp-tests.el - unit tests for gyp-mode.",
          "3: ;; Copyright (c) 2012 Google Inc. All rights reserved.",
          "4: ;; Use of this source code is governed by a BSD-style license that can be",
          "5: ;; found in the LICENSE file.",
          "7: ;; The recommended way to run these tests is to run them from the command-line,",
          "8: ;; with the run-unit-tests.sh script.",
          "10: (require 'cl)",
          "11: (require 'ert)",
          "12: (require 'gyp)",
          "14: (defconst samples (directory-files \"testdata\" t \".gyp$\")",
          "15:   \"List of golden samples to check\")",
          "17: (defun fontify (filename)",
          "18:   (with-temp-buffer",
          "19:     (insert-file-contents-literally filename)",
          "20:     (gyp-mode)",
          "21:     (font-lock-fontify-buffer)",
          "22:     (buffer-string)))",
          "24: (defun read-golden-sample (filename)",
          "25:   (with-temp-buffer",
          "26:     (insert-file-contents-literally (concat filename \".fontified\"))",
          "27:     (read (current-buffer))))",
          "29: (defun text-face-properties (s)",
          "30:   \"Extract the text properties from s\"",
          "31:   (let ((result (list t)))",
          "32:     (dotimes (i (length s))",
          "33:       (setq result (cons (get-text-property i 'face s) result)))",
          "34:     (nreverse result)))",
          "36: (ert-deftest test-golden-samples ()",
          "37:   \"Check that fontification produces the same results as the golden samples\"",
          "38:   (dolist (sample samples)",
          "39:     (let ((golden (read-golden-sample sample))",
          "40:           (fontified (fontify sample)))",
          "41:       (should (equal golden fontified))",
          "42:       (should (equal (text-face-properties golden)",
          "43:                      (text-face-properties fontified))))))",
          "45: (defun create-golden-sample (filename)",
          "46:   \"Create a golden sample by fontifying filename and writing out the printable",
          "47:    representation of the fontified buffer (with text properties) to the",
          "48:    FILENAME.fontified\"",
          "49:   (with-temp-file (concat filename \".fontified\")",
          "50:     (print (fontify filename) (current-buffer))))",
          "52: (defun create-golden-samples ()",
          "53:   \"Recreate the golden samples\"",
          "54:   (dolist (sample samples) (create-golden-sample sample)))",
          "",
          "---------------"
        ],
        "tools/gyp/tools/emacs/gyp.el||tools/gyp/tools/emacs/gyp.el": [
          "File: tools/gyp/tools/emacs/gyp.el -> tools/gyp/tools/emacs/gyp.el",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ;;; gyp.el - font-lock-mode support for gyp files.",
          "3: ;; Copyright (c) 2012 Google Inc. All rights reserved.",
          "4: ;; Use of this source code is governed by a BSD-style license that can be",
          "5: ;; found in the LICENSE file.",
          "7: ;; Put this somewhere in your load-path and",
          "8: ;; (require 'gyp)",
          "10: (require 'python)",
          "11: (require 'cl)",
          "13: (when (string-match \"python-mode.el\" (symbol-file 'python-mode 'defun))",
          "14:   (error (concat \"python-mode must be loaded from python.el (bundled with \"",
          "15:                  \"recent emacsen), not from the older and less maintained \"",
          "16:                  \"python-mode.el\")))",
          "18: (defadvice python-calculate-indentation (after ami-outdent-closing-parens",
          "19:                                                activate)",
          "20:   \"De-indent closing parens, braces, and brackets in gyp-mode.\"",
          "21:   (if (and (eq major-mode 'gyp-mode)",
          "22:            (string-match \"^ *[])}][],)}]* *$\"",
          "23:                          (buffer-substring-no-properties",
          "24:                           (line-beginning-position) (line-end-position))))",
          "25:       (setq ad-return-value (- ad-return-value 2))))",
          "27: (define-derived-mode gyp-mode python-mode \"Gyp\"",
          "28:   \"Major mode for editing .gyp files. See http://code.google.com/p/gyp/\"",
          "29:   ;; gyp-parse-history is a stack of (POSITION . PARSE-STATE) tuples,",
          "30:   ;; with greater positions at the top of the stack. PARSE-STATE",
          "31:   ;; is a list of section symbols (see gyp-section-name and gyp-parse-to)",
          "32:   ;; with most nested section symbol at the front of the list.",
          "33:   (set (make-local-variable 'gyp-parse-history) '((1 . (list))))",
          "34:   (gyp-add-font-lock-keywords))",
          "36: (defun gyp-set-indentation ()",
          "37:   \"Hook function to configure python indentation to suit gyp mode.\"",
          "38:   (setq python-continuation-offset 2",
          "39:         python-indent 2",
          "40:         python-guess-indent nil))",
          "42: (add-hook 'gyp-mode-hook 'gyp-set-indentation)",
          "44: (add-to-list 'auto-mode-alist '(\"\\\\.gyp\\\\'\" . gyp-mode))",
          "45: (add-to-list 'auto-mode-alist '(\"\\\\.gypi\\\\'\" . gyp-mode))",
          "47: ;;; Font-lock support",
          "49: (defconst gyp-dependencies-regexp",
          "50:   (regexp-opt (list \"dependencies\" \"export_dependent_settings\"))",
          "51:   \"Regular expression to introduce 'dependencies' section\")",
          "53: (defconst gyp-sources-regexp",
          "54:   (regexp-opt (list \"action\" \"files\" \"include_dirs\" \"includes\" \"inputs\"",
          "55:                     \"libraries\" \"outputs\" \"sources\"))",
          "56:   \"Regular expression to introduce 'sources' sections\")",
          "58: (defconst gyp-conditions-regexp",
          "59:   (regexp-opt (list \"conditions\" \"target_conditions\"))",
          "60:   \"Regular expression to introduce conditions sections\")",
          "62: (defconst gyp-variables-regexp",
          "63:   \"^variables\"",
          "64:   \"Regular expression to introduce variables sections\")",
          "66: (defconst gyp-defines-regexp",
          "67:   \"^defines\"",
          "68:   \"Regular expression to introduce 'defines' sections\")",
          "70: (defconst gyp-targets-regexp",
          "71:   \"^targets\"",
          "72:   \"Regular expression to introduce 'targets' sections\")",
          "74: (defun gyp-section-name (section)",
          "75:   \"Map the sections we are interested in from SECTION to symbol.",
          "77:    SECTION is a string from the buffer that introduces a section.  The result is",
          "78:    a symbol representing the kind of section.",
          "80:    This allows us to treat (for the purposes of font-lock) several different",
          "81:    section names as the same kind of section. For example, a 'sources section",
          "82:    can be introduced by the 'sources', 'inputs', 'outputs' keyword.",
          "84:    'other is the default section kind when a more specific match is not made.\"",
          "85:   (cond ((string-match-p gyp-dependencies-regexp section) 'dependencies)",
          "86:         ((string-match-p gyp-sources-regexp section) 'sources)",
          "87:         ((string-match-p gyp-variables-regexp section) 'variables)",
          "88:         ((string-match-p gyp-conditions-regexp section) 'conditions)",
          "89:         ((string-match-p gyp-targets-regexp section) 'targets)",
          "90:         ((string-match-p gyp-defines-regexp section) 'defines)",
          "91:         (t 'other)))",
          "93: (defun gyp-invalidate-parse-states-after (target-point)",
          "94:   \"Erase any parse information after target-point.\"",
          "95:   (while (> (caar gyp-parse-history) target-point)",
          "96:     (setq gyp-parse-history (cdr gyp-parse-history))))",
          "98: (defun gyp-parse-point ()",
          "99:   \"The point of the last parse state added by gyp-parse-to.\"",
          "100:   (caar gyp-parse-history))",
          "102: (defun gyp-parse-sections ()",
          "103:   \"A list of section symbols holding at the last parse state point.\"",
          "104:   (cdar gyp-parse-history))",
          "106: (defun gyp-inside-dictionary-p ()",
          "107:   \"Predicate returning true if the parser is inside a dictionary.\"",
          "108:   (not (eq (cadar gyp-parse-history) 'list)))",
          "110: (defun gyp-add-parse-history (point sections)",
          "111:   \"Add parse state SECTIONS to the parse history at POINT so that parsing can be",
          "112:    resumed instantly.\"",
          "113:   (while (>= (caar gyp-parse-history) point)",
          "114:     (setq gyp-parse-history (cdr gyp-parse-history)))",
          "115:   (setq gyp-parse-history (cons (cons point sections) gyp-parse-history)))",
          "117: (defun gyp-parse-to (target-point)",
          "118:   \"Parses from (point) to TARGET-POINT adding the parse state information to",
          "119:    gyp-parse-state-history. Parsing stops if TARGET-POINT is reached or if a",
          "120:    string literal has been parsed. Returns nil if no further parsing can be",
          "121:    done, otherwise returns the position of the start of a parsed string, leaving",
          "122:    the point at the end of the string.\"",
          "123:   (let ((parsing t)",
          "124:         string-start)",
          "125:     (while parsing",
          "126:       (setq string-start nil)",
          "127:       ;; Parse up to a character that starts a sexp, or if the nesting",
          "128:       ;; level decreases.",
          "129:       (let ((state (parse-partial-sexp (gyp-parse-point)",
          "130:                                        target-point",
          "131:                                        -1",
          "132:                                        t))",
          "133:             (sections (gyp-parse-sections)))",
          "134:         (if (= (nth 0 state) -1)",
          "135:             (setq sections (cdr sections)) ; pop out a level",
          "136:           (cond ((looking-at-p \"['\\\"]\") ; a string",
          "137:                  (setq string-start (point))",
          "138:                  (forward-sexp 1)",
          "139:                  (if (gyp-inside-dictionary-p)",
          "140:                      ;; Look for sections inside a dictionary",
          "141:                      (let ((section (gyp-section-name",
          "142:                                      (buffer-substring-no-properties",
          "143:                                       (+ 1 string-start)",
          "144:                                       (- (point) 1)))))",
          "145:                        (setq sections (cons section (cdr sections)))))",
          "146:                  ;; Stop after the string so it can be fontified.",
          "147:                  (setq target-point (point)))",
          "148:                 ((looking-at-p \"{\")",
          "149:                  ;; Inside a dictionary. Increase nesting.",
          "150:                  (forward-char 1)",
          "151:                  (setq sections (cons 'unknown sections)))",
          "152:                 ((looking-at-p \"\\\\[\")",
          "153:                  ;; Inside a list. Increase nesting",
          "154:                  (forward-char 1)",
          "155:                  (setq sections (cons 'list sections)))",
          "156:                 ((not (eobp))",
          "157:                  ;; other",
          "158:                  (forward-char 1))))",
          "159:         (gyp-add-parse-history (point) sections)",
          "160:         (setq parsing (< (point) target-point))))",
          "161:     string-start))",
          "163: (defun gyp-section-at-point ()",
          "164:   \"Transform the last parse state, which is a list of nested sections and return",
          "165:    the section symbol that should be used to determine font-lock information for",
          "166:    the string. Can return nil indicating the string should not have any attached",
          "167:    section.\"",
          "168:   (let ((sections (gyp-parse-sections)))",
          "169:     (cond",
          "170:      ((eq (car sections) 'conditions)",
          "171:       ;; conditions can occur in a variables section, but we still want to",
          "172:       ;; highlight it as a keyword.",
          "173:       nil)",
          "174:      ((and (eq (car sections) 'list)",
          "175:            (eq (cadr sections) 'list))",
          "176:       ;; conditions and sources can have items in [[ ]]",
          "177:       (caddr sections))",
          "178:      (t (cadr sections)))))",
          "180: (defun gyp-section-match (limit)",
          "181:   \"Parse from (point) to LIMIT returning by means of match data what was",
          "182:    matched. The group of the match indicates what style font-lock should apply.",
          "183:    See also `gyp-add-font-lock-keywords'.\"",
          "184:   (gyp-invalidate-parse-states-after (point))",
          "185:   (let ((group nil)",
          "186:         (string-start t))",
          "187:     (while (and (< (point) limit)",
          "188:                 (not group)",
          "189:                 string-start)",
          "190:       (setq string-start (gyp-parse-to limit))",
          "191:       (if string-start",
          "192:           (setq group (case (gyp-section-at-point)",
          "193:                         ('dependencies 1)",
          "194:                         ('variables 2)",
          "195:                         ('conditions 2)",
          "196:                         ('sources 3)",
          "197:                         ('defines 4)",
          "198:                         (nil nil)))))",
          "199:     (if group",
          "200:         (progn",
          "201:           ;; Set the match data to indicate to the font-lock mechanism the",
          "202:           ;; highlighting to be performed.",
          "203:           (set-match-data (append (list string-start (point))",
          "204:                                   (make-list (* (1- group) 2) nil)",
          "205:                                   (list (1+ string-start) (1- (point)))))",
          "206:           t))))",
          "208: ;;; Please see http://code.google.com/p/gyp/wiki/GypLanguageSpecification for",
          "209: ;;; canonical list of keywords.",
          "210: (defun gyp-add-font-lock-keywords ()",
          "211:   \"Add gyp-mode keywords to font-lock mechanism.\"",
          "212:   ;; TODO(jknotten): Move all the keyword highlighting into gyp-section-match",
          "213:   ;; so that we can do the font-locking in a single font-lock pass.",
          "214:   (font-lock-add-keywords",
          "215:    nil",
          "216:    (list",
          "217:     ;; Top-level keywords",
          "218:     (list (concat \"['\\\"]\\\\(\"",
          "219:               (regexp-opt (list \"action\" \"action_name\" \"actions\" \"cflags\"",
          "220:                                 \"conditions\" \"configurations\" \"copies\" \"defines\"",
          "221:                                 \"dependencies\" \"destination\"",
          "222:                                 \"direct_dependent_settings\"",
          "223:                                 \"export_dependent_settings\" \"extension\" \"files\"",
          "224:                                 \"include_dirs\" \"includes\" \"inputs\" \"libraries\"",
          "225:                                 \"link_settings\" \"mac_bundle\" \"message\"",
          "226:                                 \"msvs_external_rule\" \"outputs\" \"product_name\"",
          "227:                                 \"process_outputs_as_sources\" \"rules\" \"rule_name\"",
          "228:                                 \"sources\" \"suppress_wildcard\"",
          "229:                                 \"target_conditions\" \"target_defaults\"",
          "230:                                 \"target_defines\" \"target_name\" \"toolsets\"",
          "231:                                 \"targets\" \"type\" \"variables\" \"xcode_settings\"))",
          "232:               \"[!/+=]?\\\\)\") 1 'font-lock-keyword-face t)",
          "233:     ;; Type of target",
          "234:     (list (concat \"['\\\"]\\\\(\"",
          "235:               (regexp-opt (list \"loadable_module\" \"static_library\"",
          "236:                                 \"shared_library\" \"executable\" \"none\"))",
          "237:               \"\\\\)\") 1 'font-lock-type-face t)",
          "238:     (list \"\\\\(?:target\\\\|action\\\\)_name['\\\"]\\\\s-*:\\\\s-*['\\\"]\\\\([^ '\\\"]*\\\\)\" 1",
          "239:           'font-lock-function-name-face t)",
          "240:     (list 'gyp-section-match",
          "241:           (list 1 'font-lock-function-name-face t t) ; dependencies",
          "242:           (list 2 'font-lock-variable-name-face t t) ; variables, conditions",
          "243:           (list 3 'font-lock-constant-face t t) ; sources",
          "244:           (list 4 'font-lock-preprocessor-face t t)) ; preprocessor",
          "245:     ;; Variable expansion",
          "246:     (list \"<@?(\\\\([^\\n )]+\\\\))\" 1 'font-lock-variable-name-face t)",
          "247:     ;; Command expansion",
          "248:     (list \"<!@?(\\\\([^\\n )]+\\\\))\" 1 'font-lock-variable-name-face t)",
          "249:     )))",
          "251: (provide 'gyp)",
          "",
          "---------------"
        ],
        "tools/gyp/tools/emacs/run-unit-tests.sh||tools/gyp/tools/emacs/run-unit-tests.sh": [
          "File: tools/gyp/tools/emacs/run-unit-tests.sh -> tools/gyp/tools/emacs/run-unit-tests.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "2: # Copyright (c) 2012 Google Inc. All rights reserved.",
          "3: # Use of this source code is governed by a BSD-style license that can be",
          "4: # found in the LICENSE file.",
          "5: emacs --no-site-file --no-init-file --batch \\",
          "6:       --load ert.el --load gyp.el --load gyp-tests.el \\",
          "7:       -f ert-run-tests-batch-and-exit",
          "",
          "---------------"
        ],
        "tools/gyp/tools/emacs/testdatmedia.gyp||tools/gyp/tools/emacs/testdata/media.gyp": [
          "File: tools/gyp/tools/emacs/testdatmedia.gyp -> tools/gyp/tools/emacs/testdata/media.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) 2012 The Chromium Authors. All rights reserved.",
          "2: # Use of this source code is governed by a BSD-style license that can be",
          "3: # found in the LICENSE file.",
          "5: {",
          "6:   'variables': {",
          "7:     'chromium_code': 1,",
          "8:     # Override to dynamically link the PulseAudio library.",
          "9:     'use_pulseaudio%': 0,",
          "10:     # Override to dynamically link the cras (ChromeOS audio) library.",
          "11:     'use_cras%': 0,",
          "12:   },",
          "13:   'targets': [",
          "14:     {",
          "15:       'target_name': 'media',",
          "16:       'type': '<(component)',",
          "17:       'dependencies': [",
          "18:         'yuv_convert',",
          "19:         '../base/base.gyp:base',",
          "20:         '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',",
          "21:         '../build/temp_gyp/googleurl.gyp:googleurl',",
          "22:         '../crypto/crypto.gyp:crypto',",
          "23:         '../third_party/openmax/openmax.gyp:il',",
          "24:         '../ui/ui.gyp:ui',",
          "25:       ],",
          "26:       'defines': [",
          "27:         'MEDIA_IMPLEMENTATION',",
          "28:       ],",
          "29:       'include_dirs': [",
          "30:         '..',",
          "31:       ],",
          "32:       'sources': [",
          "33:         'audio/android/audio_manager_android.cc',",
          "34:         'audio/android/audio_manager_android.h',",
          "35:         'audio/android/audio_track_output_android.cc',",
          "36:         'audio/android/audio_track_output_android.h',",
          "37:         'audio/android/opensles_input.cc',",
          "38:         'audio/android/opensles_input.h',",
          "39:         'audio/android/opensles_output.cc',",
          "40:         'audio/android/opensles_output.h',",
          "41:         'audio/async_socket_io_handler.h',",
          "42:         'audio/async_socket_io_handler_posix.cc',",
          "43:         'audio/async_socket_io_handler_win.cc',",
          "44:         'audio/audio_buffers_state.cc',",
          "45:         'audio/audio_buffers_state.h',",
          "46:         'audio/audio_io.h',",
          "47:         'audio/audio_input_controller.cc',",
          "48:         'audio/audio_input_controller.h',",
          "49:         'audio/audio_input_stream_impl.cc',",
          "50:         'audio/audio_input_stream_impl.h',",
          "51:         'audio/audio_device_name.cc',",
          "52:         'audio/audio_device_name.h',",
          "53:         'audio/audio_manager.cc',",
          "54:         'audio/audio_manager.h',",
          "55:         'audio/audio_manager_base.cc',",
          "56:         'audio/audio_manager_base.h',",
          "57:         'audio/audio_output_controller.cc',",
          "58:         'audio/audio_output_controller.h',",
          "59:         'audio/audio_output_dispatcher.cc',",
          "60:         'audio/audio_output_dispatcher.h',",
          "61:         'audio/audio_output_dispatcher_impl.cc',",
          "62:         'audio/audio_output_dispatcher_impl.h',",
          "63:         'audio/audio_output_mixer.cc',",
          "64:         'audio/audio_output_mixer.h',",
          "65:         'audio/audio_output_proxy.cc',",
          "66:         'audio/audio_output_proxy.h',",
          "67:         'audio/audio_parameters.cc',",
          "68:         'audio/audio_parameters.h',",
          "69:         'audio/audio_util.cc',",
          "70:         'audio/audio_util.h',",
          "71:         'audio/cross_process_notification.cc',",
          "72:         'audio/cross_process_notification.h',",
          "73:         'audio/cross_process_notification_win.cc',",
          "74:         'audio/cross_process_notification_posix.cc',",
          "75:         'audio/fake_audio_input_stream.cc',",
          "76:         'audio/fake_audio_input_stream.h',",
          "77:         'audio/fake_audio_output_stream.cc',",
          "78:         'audio/fake_audio_output_stream.h',",
          "79:         'audio/linux/audio_manager_linux.cc',",
          "80:         'audio/linux/audio_manager_linux.h',",
          "81:         'audio/linux/alsa_input.cc',",
          "82:         'audio/linux/alsa_input.h',",
          "83:         'audio/linux/alsa_output.cc',",
          "84:         'audio/linux/alsa_output.h',",
          "85:         'audio/linux/alsa_util.cc',",
          "86:         'audio/linux/alsa_util.h',",
          "87:         'audio/linux/alsa_wrapper.cc',",
          "88:         'audio/linux/alsa_wrapper.h',",
          "89:         'audio/linux/cras_output.cc',",
          "90:         'audio/linux/cras_output.h',",
          "91:         'audio/openbsd/audio_manager_openbsd.cc',",
          "92:         'audio/openbsd/audio_manager_openbsd.h',",
          "93:         'audio/mac/audio_input_mac.cc',",
          "94:         'audio/mac/audio_input_mac.h',",
          "95:         'audio/mac/audio_low_latency_input_mac.cc',",
          "96:         'audio/mac/audio_low_latency_input_mac.h',",
          "97:         'audio/mac/audio_low_latency_output_mac.cc',",
          "98:         'audio/mac/audio_low_latency_output_mac.h',",
          "99:         'audio/mac/audio_manager_mac.cc',",
          "100:         'audio/mac/audio_manager_mac.h',",
          "101:         'audio/mac/audio_output_mac.cc',",
          "102:         'audio/mac/audio_output_mac.h',",
          "103:         'audio/null_audio_sink.cc',",
          "104:         'audio/null_audio_sink.h',",
          "105:         'audio/pulse/pulse_output.cc',",
          "106:         'audio/pulse/pulse_output.h',",
          "107:         'audio/sample_rates.cc',",
          "108:         'audio/sample_rates.h',",
          "109:         'audio/simple_sources.cc',",
          "110:         'audio/simple_sources.h',",
          "111:         'audio/win/audio_low_latency_input_win.cc',",
          "112:         'audio/win/audio_low_latency_input_win.h',",
          "113:         'audio/win/audio_low_latency_output_win.cc',",
          "114:         'audio/win/audio_low_latency_output_win.h',",
          "115:         'audio/win/audio_manager_win.cc',",
          "116:         'audio/win/audio_manager_win.h',",
          "117:         'audio/win/avrt_wrapper_win.cc',",
          "118:         'audio/win/avrt_wrapper_win.h',",
          "119:         'audio/win/device_enumeration_win.cc',",
          "120:         'audio/win/device_enumeration_win.h',",
          "121:         'audio/win/wavein_input_win.cc',",
          "122:         'audio/win/wavein_input_win.h',",
          "123:         'audio/win/waveout_output_win.cc',",
          "124:         'audio/win/waveout_output_win.h',",
          "125:         'base/android/media_jni_registrar.cc',",
          "126:         'base/android/media_jni_registrar.h',",
          "127:         'base/audio_decoder.cc',",
          "128:         'base/audio_decoder.h',",
          "129:         'base/audio_decoder_config.cc',",
          "130:         'base/audio_decoder_config.h',",
          "131:         'base/audio_renderer.h',",
          "132:         'base/audio_renderer_mixer.cc',",
          "133:         'base/audio_renderer_mixer.h',",
          "134:         'base/audio_renderer_mixer_input.cc',",
          "135:         'base/audio_renderer_mixer_input.h',",
          "136:         'base/bitstream_buffer.h',",
          "137:         'base/buffers.cc',",
          "138:         'base/buffers.h',",
          "139:         'base/byte_queue.cc',",
          "140:         'base/byte_queue.h',",
          "141:         'base/channel_layout.cc',",
          "142:         'base/channel_layout.h',",
          "143:         'base/clock.cc',",
          "144:         'base/clock.h',",
          "145:         'base/composite_filter.cc',",
          "146:         'base/composite_filter.h',",
          "147:         'base/data_buffer.cc',",
          "148:         'base/data_buffer.h',",
          "149:         'base/data_source.cc',",
          "150:         'base/data_source.h',",
          "151:         'base/decoder_buffer.cc',",
          "152:         'base/decoder_buffer.h',",
          "153:         'base/decrypt_config.cc',",
          "154:         'base/decrypt_config.h',",
          "155:         'base/decryptor.h',",
          "156:         'base/decryptor_client.h',",
          "157:         'base/demuxer.cc',",
          "158:         'base/demuxer.h',",
          "159:         'base/demuxer_stream.cc',",
          "160:         'base/demuxer_stream.h',",
          "161:         'base/djb2.cc',",
          "162:         'base/djb2.h',",
          "163:         'base/filter_collection.cc',",
          "164:         'base/filter_collection.h',",
          "165:         'base/filter_host.h',",
          "166:         'base/filters.cc',",
          "167:         'base/filters.h',",
          "168:         'base/h264_bitstream_converter.cc',",
          "169:         'base/h264_bitstream_converter.h',",
          "170:         'base/media.h',",
          "171:         'base/media_android.cc',",
          "172:         'base/media_export.h',",
          "173:         'base/media_log.cc',",
          "174:         'base/media_log.h',",
          "175:         'base/media_log_event.h',",
          "176:         'base/media_posix.cc',",
          "177:         'base/media_switches.cc',",
          "178:         'base/media_switches.h',",
          "179:         'base/media_win.cc',",
          "180:         'base/message_loop_factory.cc',",
          "181:         'base/message_loop_factory.h',",
          "182:         'base/pipeline.cc',",
          "183:         'base/pipeline.h',",
          "184:         'base/pipeline_status.cc',",
          "185:         'base/pipeline_status.h',",
          "186:         'base/ranges.cc',",
          "187:         'base/ranges.h',",
          "188:         'base/seekable_buffer.cc',",
          "189:         'base/seekable_buffer.h',",
          "190:         'base/state_matrix.cc',",
          "191:         'base/state_matrix.h',",
          "192:         'base/stream_parser.cc',",
          "193:         'base/stream_parser.h',",
          "194:         'base/stream_parser_buffer.cc',",
          "195:         'base/stream_parser_buffer.h',",
          "196:         'base/video_decoder.cc',",
          "197:         'base/video_decoder.h',",
          "198:         'base/video_decoder_config.cc',",
          "199:         'base/video_decoder_config.h',",
          "200:         'base/video_frame.cc',",
          "201:         'base/video_frame.h',",
          "202:         'base/video_renderer.h',",
          "203:         'base/video_util.cc',",
          "204:         'base/video_util.h',",
          "205:         'crypto/aes_decryptor.cc',",
          "206:         'crypto/aes_decryptor.h',",
          "207:         'ffmpeg/ffmpeg_common.cc',",
          "208:         'ffmpeg/ffmpeg_common.h',",
          "209:         'ffmpeg/file_protocol.cc',",
          "210:         'ffmpeg/file_protocol.h',",
          "211:         'filters/audio_file_reader.cc',",
          "212:         'filters/audio_file_reader.h',",
          "213:         'filters/audio_renderer_algorithm.cc',",
          "214:         'filters/audio_renderer_algorithm.h',",
          "215:         'filters/audio_renderer_impl.cc',",
          "216:         'filters/audio_renderer_impl.h',",
          "217:         'filters/bitstream_converter.cc',",
          "218:         'filters/bitstream_converter.h',",
          "219:         'filters/chunk_demuxer.cc',",
          "220:         'filters/chunk_demuxer.h',",
          "221:         'filters/chunk_demuxer_client.h',",
          "222:         'filters/dummy_demuxer.cc',",
          "223:         'filters/dummy_demuxer.h',",
          "224:         'filters/ffmpeg_audio_decoder.cc',",
          "225:         'filters/ffmpeg_audio_decoder.h',",
          "226:         'filters/ffmpeg_demuxer.cc',",
          "227:         'filters/ffmpeg_demuxer.h',",
          "228:         'filters/ffmpeg_h264_bitstream_converter.cc',",
          "229:         'filters/ffmpeg_h264_bitstream_converter.h',",
          "230:         'filters/ffmpeg_glue.cc',",
          "231:         'filters/ffmpeg_glue.h',",
          "232:         'filters/ffmpeg_video_decoder.cc',",
          "233:         'filters/ffmpeg_video_decoder.h',",
          "234:         'filters/file_data_source.cc',",
          "235:         'filters/file_data_source.h',",
          "236:         'filters/gpu_video_decoder.cc',",
          "237:         'filters/gpu_video_decoder.h',",
          "238:         'filters/in_memory_url_protocol.cc',",
          "239:         'filters/in_memory_url_protocol.h',",
          "240:         'filters/source_buffer_stream.cc',",
          "241:         'filters/source_buffer_stream.h',",
          "242:         'filters/video_frame_generator.cc',",
          "243:         'filters/video_frame_generator.h',",
          "244:         'filters/video_renderer_base.cc',",
          "245:         'filters/video_renderer_base.h',",
          "246:         'video/capture/fake_video_capture_device.cc',",
          "247:         'video/capture/fake_video_capture_device.h',",
          "248:         'video/capture/linux/video_capture_device_linux.cc',",
          "249:         'video/capture/linux/video_capture_device_linux.h',",
          "250:         'video/capture/mac/video_capture_device_mac.h',",
          "251:         'video/capture/mac/video_capture_device_mac.mm',",
          "252:         'video/capture/mac/video_capture_device_qtkit_mac.h',",
          "253:         'video/capture/mac/video_capture_device_qtkit_mac.mm',",
          "254:         'video/capture/video_capture.h',",
          "255:         'video/capture/video_capture_device.h',",
          "256:         'video/capture/video_capture_device_dummy.cc',",
          "257:         'video/capture/video_capture_device_dummy.h',",
          "258:         'video/capture/video_capture_proxy.cc',",
          "259:         'video/capture/video_capture_proxy.h',",
          "260:         'video/capture/video_capture_types.h',",
          "261:         'video/capture/win/filter_base_win.cc',",
          "262:         'video/capture/win/filter_base_win.h',",
          "263:         'video/capture/win/pin_base_win.cc',",
          "264:         'video/capture/win/pin_base_win.h',",
          "265:         'video/capture/win/sink_filter_observer_win.h',",
          "266:         'video/capture/win/sink_filter_win.cc',",
          "267:         'video/capture/win/sink_filter_win.h',",
          "268:         'video/capture/win/sink_input_pin_win.cc',",
          "269:         'video/capture/win/sink_input_pin_win.h',",
          "270:         'video/capture/win/video_capture_device_win.cc',",
          "271:         'video/capture/win/video_capture_device_win.h',",
          "272:         'video/picture.cc',",
          "273:         'video/picture.h',",
          "274:         'video/video_decode_accelerator.cc',",
          "275:         'video/video_decode_accelerator.h',",
          "276:         'webm/webm_constants.h',",
          "277:         'webm/webm_cluster_parser.cc',",
          "278:         'webm/webm_cluster_parser.h',",
          "279:         'webm/webm_content_encodings.cc',",
          "280:         'webm/webm_content_encodings.h',",
          "281:         'webm/webm_content_encodings_client.cc',",
          "282:         'webm/webm_content_encodings_client.h',",
          "283:         'webm/webm_info_parser.cc',",
          "284:         'webm/webm_info_parser.h',",
          "285:         'webm/webm_parser.cc',",
          "286:         'webm/webm_parser.h',",
          "287:         'webm/webm_stream_parser.cc',",
          "288:         'webm/webm_stream_parser.h',",
          "289:         'webm/webm_tracks_parser.cc',",
          "290:         'webm/webm_tracks_parser.h',",
          "291:       ],",
          "292:       'direct_dependent_settings': {",
          "293:         'include_dirs': [",
          "294:           '..',",
          "295:         ],",
          "296:       },",
          "297:       'conditions': [",
          "298:         # Android doesn't use ffmpeg, so make the dependency conditional",
          "299:         # and exclude the sources which depend on ffmpeg.",
          "300:         ['OS != \"android\"', {",
          "301:           'dependencies': [",
          "302:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "303:           ],",
          "304:         }],",
          "305:         ['OS == \"android\"', {",
          "306:           'sources!': [",
          "307:             'base/media_posix.cc',",
          "308:             'ffmpeg/ffmpeg_common.cc',",
          "309:             'ffmpeg/ffmpeg_common.h',",
          "310:             'ffmpeg/file_protocol.cc',",
          "311:             'ffmpeg/file_protocol.h',",
          "312:             'filters/audio_file_reader.cc',",
          "313:             'filters/audio_file_reader.h',",
          "314:             'filters/bitstream_converter.cc',",
          "315:             'filters/bitstream_converter.h',",
          "316:             'filters/chunk_demuxer.cc',",
          "317:             'filters/chunk_demuxer.h',",
          "318:             'filters/chunk_demuxer_client.h',",
          "319:             'filters/ffmpeg_audio_decoder.cc',",
          "320:             'filters/ffmpeg_audio_decoder.h',",
          "321:             'filters/ffmpeg_demuxer.cc',",
          "322:             'filters/ffmpeg_demuxer.h',",
          "323:             'filters/ffmpeg_h264_bitstream_converter.cc',",
          "324:             'filters/ffmpeg_h264_bitstream_converter.h',",
          "325:             'filters/ffmpeg_glue.cc',",
          "326:             'filters/ffmpeg_glue.h',",
          "327:             'filters/ffmpeg_video_decoder.cc',",
          "328:             'filters/ffmpeg_video_decoder.h',",
          "329:             'filters/gpu_video_decoder.cc',",
          "330:             'filters/gpu_video_decoder.h',",
          "331:             'webm/webm_cluster_parser.cc',",
          "332:             'webm/webm_cluster_parser.h',",
          "333:             'webm/webm_stream_parser.cc',",
          "334:             'webm/webm_stream_parser.h',",
          "335:           ],",
          "336:         }],",
          "337:         # The below 'android' condition were added temporarily and should be",
          "338:         # removed in downstream, because there is no Java environment setup in",
          "339:         # upstream yet.",
          "340:         ['OS == \"android\"', {",
          "341:           'sources!':[",
          "342:             'audio/android/audio_track_output_android.cc',",
          "343:           ],",
          "344:           'sources':[",
          "345:             'audio/android/audio_track_output_stub_android.cc',",
          "346:           ],",
          "347:           'link_settings': {",
          "348:             'libraries': [",
          "349:               '-lOpenSLES',",
          "350:             ],",
          "351:           },",
          "352:         }],",
          "353:         ['OS==\"linux\" or OS==\"freebsd\" or OS==\"solaris\"', {",
          "354:           'link_settings': {",
          "355:             'libraries': [",
          "356:               '-lasound',",
          "357:             ],",
          "358:           },",
          "359:         }],",
          "360:         ['OS==\"openbsd\"', {",
          "361:           'sources/': [ ['exclude', '/alsa_' ],",
          "362:                         ['exclude', '/audio_manager_linux' ] ],",
          "363:           'link_settings': {",
          "364:             'libraries': [",
          "365:             ],",
          "366:           },",
          "367:         }],",
          "368:         ['OS!=\"openbsd\"', {",
          "369:           'sources!': [",
          "370:             'audio/openbsd/audio_manager_openbsd.cc',",
          "371:             'audio/openbsd/audio_manager_openbsd.h',",
          "372:           ],",
          "373:         }],",
          "374:         ['OS==\"linux\"', {",
          "375:           'variables': {",
          "376:             'conditions': [",
          "377:               ['sysroot!=\"\"', {",
          "378:                 'pkg-config': '../build/linux/pkg-config-wrapper \"<(sysroot)\" \"<(target_arch)\"',",
          "379:               }, {",
          "380:                 'pkg-config': 'pkg-config'",
          "381:               }],",
          "382:             ],",
          "383:           },",
          "384:           'conditions': [",
          "385:             ['use_cras == 1', {",
          "386:               'cflags': [",
          "387:                 '<!@(<(pkg-config) --cflags libcras)',",
          "388:               ],",
          "389:               'link_settings': {",
          "390:                 'libraries': [",
          "391:                   '<!@(<(pkg-config) --libs libcras)',",
          "392:                 ],",
          "393:               },",
          "394:               'defines': [",
          "395:                 'USE_CRAS',",
          "396:               ],",
          "397:             }, {  # else: use_cras == 0",
          "398:               'sources!': [",
          "399:                 'audio/linux/cras_output.cc',",
          "400:                 'audio/linux/cras_output.h',",
          "401:               ],",
          "402:             }],",
          "403:           ],",
          "404:         }],",
          "405:         ['os_posix == 1', {",
          "406:           'conditions': [",
          "407:             ['use_pulseaudio == 1', {",
          "408:               'cflags': [",
          "409:                 '<!@(pkg-config --cflags libpulse)',",
          "410:               ],",
          "411:               'link_settings': {",
          "412:                 'libraries': [",
          "413:                   '<!@(pkg-config --libs-only-l libpulse)',",
          "414:                 ],",
          "415:               },",
          "416:               'defines': [",
          "417:                 'USE_PULSEAUDIO',",
          "418:               ],",
          "419:             }, {  # else: use_pulseaudio == 0",
          "420:               'sources!': [",
          "421:                 'audio/pulse/pulse_output.cc',",
          "422:                 'audio/pulse/pulse_output.h',",
          "423:               ],",
          "424:             }],",
          "425:           ],",
          "426:         }],",
          "427:         ['os_posix == 1 and OS != \"android\"', {",
          "428:           # Video capture isn't supported in Android yet.",
          "429:           'sources!': [",
          "430:             'video/capture/video_capture_device_dummy.cc',",
          "431:             'video/capture/video_capture_device_dummy.h',",
          "432:           ],",
          "433:         }],",
          "434:         ['OS==\"mac\"', {",
          "435:           'link_settings': {",
          "436:             'libraries': [",
          "437:               '$(SDKROOT)/System/Library/Frameworks/AudioUnit.framework',",
          "438:               '$(SDKROOT)/System/Library/Frameworks/AudioToolbox.framework',",
          "439:               '$(SDKROOT)/System/Library/Frameworks/CoreAudio.framework',",
          "440:               '$(SDKROOT)/System/Library/Frameworks/CoreVideo.framework',",
          "441:               '$(SDKROOT)/System/Library/Frameworks/QTKit.framework',",
          "442:             ],",
          "443:           },",
          "444:         }],",
          "445:         ['OS==\"win\"', {",
          "446:           'sources!': [",
          "447:             'audio/pulse/pulse_output.cc',",
          "448:             'audio/pulse/pulse_output.h',",
          "449:             'video/capture/video_capture_device_dummy.cc',",
          "450:             'video/capture/video_capture_device_dummy.h',",
          "451:           ],",
          "452:         }],",
          "453:         ['proprietary_codecs==1 or branding==\"Chrome\"', {",
          "454:           'sources': [",
          "455:             'mp4/avc.cc',",
          "456:             'mp4/avc.h',",
          "457:             'mp4/box_definitions.cc',",
          "458:             'mp4/box_definitions.h',",
          "459:             'mp4/box_reader.cc',",
          "460:             'mp4/box_reader.h',",
          "461:             'mp4/cenc.cc',",
          "462:             'mp4/cenc.h',",
          "463:             'mp4/mp4_stream_parser.cc',",
          "464:             'mp4/mp4_stream_parser.h',",
          "465:             'mp4/offset_byte_queue.cc',",
          "466:             'mp4/offset_byte_queue.h',",
          "467:             'mp4/track_run_iterator.cc',",
          "468:             'mp4/track_run_iterator.h',",
          "469:           ],",
          "470:         }],",
          "471:       ],",
          "472:     },",
          "473:     {",
          "474:       'target_name': 'yuv_convert',",
          "475:       'type': 'static_library',",
          "476:       'include_dirs': [",
          "477:         '..',",
          "478:       ],",
          "479:       'conditions': [",
          "480:         ['order_profiling != 0', {",
          "481:           'target_conditions' : [",
          "482:             ['_toolset==\"target\"', {",
          "483:               'cflags!': [ '-finstrument-functions' ],",
          "484:             }],",
          "485:           ],",
          "486:         }],",
          "487:         [ 'target_arch == \"ia32\" or target_arch == \"x64\"', {",
          "488:           'dependencies': [",
          "489:             'yuv_convert_simd_x86',",
          "490:           ],",
          "491:         }],",
          "492:         [ 'target_arch == \"arm\"', {",
          "493:           'dependencies': [",
          "494:             'yuv_convert_simd_arm',",
          "495:           ],",
          "496:         }],",
          "497:       ],",
          "498:       'sources': [",
          "499:         'base/yuv_convert.cc',",
          "500:         'base/yuv_convert.h',",
          "501:       ],",
          "502:     },",
          "503:     {",
          "504:       'target_name': 'yuv_convert_simd_x86',",
          "505:       'type': 'static_library',",
          "506:       'include_dirs': [",
          "507:         '..',",
          "508:       ],",
          "509:       'sources': [",
          "510:         'base/simd/convert_rgb_to_yuv_c.cc',",
          "511:         'base/simd/convert_rgb_to_yuv_sse2.cc',",
          "512:         'base/simd/convert_rgb_to_yuv_ssse3.asm',",
          "513:         'base/simd/convert_rgb_to_yuv_ssse3.cc',",
          "514:         'base/simd/convert_rgb_to_yuv_ssse3.inc',",
          "515:         'base/simd/convert_yuv_to_rgb_c.cc',",
          "516:         'base/simd/convert_yuv_to_rgb_x86.cc',",
          "517:         'base/simd/convert_yuv_to_rgb_mmx.asm',",
          "518:         'base/simd/convert_yuv_to_rgb_mmx.inc',",
          "519:         'base/simd/convert_yuv_to_rgb_sse.asm',",
          "520:         'base/simd/filter_yuv.h',",
          "521:         'base/simd/filter_yuv_c.cc',",
          "522:         'base/simd/filter_yuv_mmx.cc',",
          "523:         'base/simd/filter_yuv_sse2.cc',",
          "524:         'base/simd/linear_scale_yuv_to_rgb_mmx.asm',",
          "525:         'base/simd/linear_scale_yuv_to_rgb_mmx.inc',",
          "526:         'base/simd/linear_scale_yuv_to_rgb_sse.asm',",
          "527:         'base/simd/scale_yuv_to_rgb_mmx.asm',",
          "528:         'base/simd/scale_yuv_to_rgb_mmx.inc',",
          "529:         'base/simd/scale_yuv_to_rgb_sse.asm',",
          "530:         'base/simd/yuv_to_rgb_table.cc',",
          "531:         'base/simd/yuv_to_rgb_table.h',",
          "532:       ],",
          "533:       'conditions': [",
          "534:         ['order_profiling != 0', {",
          "535:           'target_conditions' : [",
          "536:             ['_toolset==\"target\"', {",
          "537:               'cflags!': [ '-finstrument-functions' ],",
          "538:             }],",
          "539:           ],",
          "540:         }],",
          "541:         [ 'target_arch == \"x64\"', {",
          "542:           # Source files optimized for X64 systems.",
          "543:           'sources': [",
          "544:             'base/simd/linear_scale_yuv_to_rgb_mmx_x64.asm',",
          "545:             'base/simd/scale_yuv_to_rgb_sse2_x64.asm',",
          "546:           ],",
          "547:         }],",
          "548:         [ 'os_posix == 1 and OS != \"mac\" and OS != \"android\"', {",
          "549:           'cflags': [",
          "550:             '-msse2',",
          "551:           ],",
          "552:         }],",
          "553:         [ 'OS == \"mac\"', {",
          "554:           'configurations': {",
          "555:             'Debug': {",
          "556:               'xcode_settings': {",
          "557:                 # gcc on the mac builds horribly unoptimized sse code in debug",
          "558:                 # mode. Since this is rarely going to be debugged, run with full",
          "559:                 # optimizations in Debug as well as Release.",
          "560:                 'GCC_OPTIMIZATION_LEVEL': '3',  # -O3",
          "561:                },",
          "562:              },",
          "563:           },",
          "564:         }],",
          "565:         [ 'OS==\"win\"', {",
          "566:           'variables': {",
          "567:             'yasm_flags': [",
          "568:               '-DWIN32',",
          "569:               '-DMSVC',",
          "570:               '-DCHROMIUM',",
          "571:               '-Isimd',",
          "572:             ],",
          "573:           },",
          "574:         }],",
          "575:         [ 'OS==\"mac\"', {",
          "576:           'variables': {",
          "577:             'yasm_flags': [",
          "578:               '-DPREFIX',",
          "579:               '-DMACHO',",
          "580:               '-DCHROMIUM',",
          "581:               '-Isimd',",
          "582:             ],",
          "583:           },",
          "584:         }],",
          "585:         [ 'os_posix==1 and OS!=\"mac\"', {",
          "586:           'variables': {",
          "587:             'conditions': [",
          "588:               [ 'target_arch==\"ia32\"', {",
          "589:                 'yasm_flags': [",
          "590:                   '-DX86_32',",
          "591:                   '-DELF',",
          "592:                   '-DCHROMIUM',",
          "593:                   '-Isimd',",
          "594:                 ],",
          "595:               }, {",
          "596:                 'yasm_flags': [",
          "597:                   '-DARCH_X86_64',",
          "598:                   '-DELF',",
          "599:                   '-DPIC',",
          "600:                   '-DCHROMIUM',",
          "601:                   '-Isimd',",
          "602:                 ],",
          "603:               }],",
          "604:             ],",
          "605:           },",
          "606:         }],",
          "607:       ],",
          "608:       'variables': {",
          "609:         'yasm_output_path': '<(SHARED_INTERMEDIATE_DIR)/media',",
          "610:       },",
          "611:       'msvs_2010_disable_uldi_when_referenced': 1,",
          "612:       'includes': [",
          "613:         '../third_party/yasm/yasm_compile.gypi',",
          "614:       ],",
          "615:     },",
          "616:     {",
          "617:       'target_name': 'yuv_convert_simd_arm',",
          "618:       'type': 'static_library',",
          "619:       'include_dirs': [",
          "620:         '..',",
          "621:       ],",
          "622:       'sources': [",
          "623:         'base/simd/convert_rgb_to_yuv_c.cc',",
          "624:         'base/simd/convert_rgb_to_yuv.h',",
          "625:         'base/simd/convert_yuv_to_rgb_c.cc',",
          "626:         'base/simd/convert_yuv_to_rgb.h',",
          "627:         'base/simd/filter_yuv.h',",
          "628:         'base/simd/filter_yuv_c.cc',",
          "629:         'base/simd/yuv_to_rgb_table.cc',",
          "630:         'base/simd/yuv_to_rgb_table.h',",
          "631:       ],",
          "632:     },",
          "633:     {",
          "634:       'target_name': 'media_unittests',",
          "635:       'type': 'executable',",
          "636:       'dependencies': [",
          "637:         'media',",
          "638:         'media_test_support',",
          "639:         'yuv_convert',",
          "640:         '../base/base.gyp:base',",
          "641:         '../base/base.gyp:base_i18n',",
          "642:         '../base/base.gyp:test_support_base',",
          "643:         '../testing/gmock.gyp:gmock',",
          "644:         '../testing/gtest.gyp:gtest',",
          "645:         '../ui/ui.gyp:ui',",
          "646:       ],",
          "647:       'sources': [",
          "648:         'audio/async_socket_io_handler_unittest.cc',",
          "649:         'audio/audio_input_controller_unittest.cc',",
          "650:         'audio/audio_input_device_unittest.cc',",
          "651:         'audio/audio_input_unittest.cc',",
          "652:         'audio/audio_input_volume_unittest.cc',",
          "653:         'audio/audio_low_latency_input_output_unittest.cc',",
          "654:         'audio/audio_output_controller_unittest.cc',",
          "655:         'audio/audio_output_proxy_unittest.cc',",
          "656:         'audio/audio_parameters_unittest.cc',",
          "657:         'audio/audio_util_unittest.cc',",
          "658:         'audio/cross_process_notification_unittest.cc',",
          "659:         'audio/linux/alsa_output_unittest.cc',",
          "660:         'audio/mac/audio_low_latency_input_mac_unittest.cc',",
          "661:         'audio/mac/audio_output_mac_unittest.cc',",
          "662:         'audio/simple_sources_unittest.cc',",
          "663:         'audio/win/audio_low_latency_input_win_unittest.cc',",
          "664:         'audio/win/audio_low_latency_output_win_unittest.cc',",
          "665:         'audio/win/audio_output_win_unittest.cc',",
          "666:         'base/audio_renderer_mixer_unittest.cc',",
          "667:         'base/audio_renderer_mixer_input_unittest.cc',",
          "668:         'base/buffers_unittest.cc',",
          "669:         'base/clock_unittest.cc',",
          "670:         'base/composite_filter_unittest.cc',",
          "671:         'base/data_buffer_unittest.cc',",
          "672:         'base/decoder_buffer_unittest.cc',",
          "673:         'base/djb2_unittest.cc',",
          "674:         'base/fake_audio_render_callback.cc',",
          "675:         'base/fake_audio_render_callback.h',",
          "676:         'base/filter_collection_unittest.cc',",
          "677:         'base/h264_bitstream_converter_unittest.cc',",
          "678:         'base/pipeline_unittest.cc',",
          "679:         'base/ranges_unittest.cc',",
          "680:         'base/run_all_unittests.cc',",
          "681:         'base/seekable_buffer_unittest.cc',",
          "682:         'base/state_matrix_unittest.cc',",
          "683:         'base/test_data_util.cc',",
          "684:         'base/test_data_util.h',",
          "685:         'base/video_frame_unittest.cc',",
          "686:         'base/video_util_unittest.cc',",
          "687:         'base/yuv_convert_unittest.cc',",
          "688:         'crypto/aes_decryptor_unittest.cc',",
          "689:         'ffmpeg/ffmpeg_common_unittest.cc',",
          "690:         'filters/audio_renderer_algorithm_unittest.cc',",
          "691:         'filters/audio_renderer_impl_unittest.cc',",
          "692:         'filters/bitstream_converter_unittest.cc',",
          "693:         'filters/chunk_demuxer_unittest.cc',",
          "694:         'filters/ffmpeg_audio_decoder_unittest.cc',",
          "695:         'filters/ffmpeg_decoder_unittest.h',",
          "696:         'filters/ffmpeg_demuxer_unittest.cc',",
          "697:         'filters/ffmpeg_glue_unittest.cc',",
          "698:         'filters/ffmpeg_h264_bitstream_converter_unittest.cc',",
          "699:         'filters/ffmpeg_video_decoder_unittest.cc',",
          "700:         'filters/file_data_source_unittest.cc',",
          "701:         'filters/pipeline_integration_test.cc',",
          "702:         'filters/pipeline_integration_test_base.cc',",
          "703:         'filters/source_buffer_stream_unittest.cc',",
          "704:         'filters/video_renderer_base_unittest.cc',",
          "705:         'video/capture/video_capture_device_unittest.cc',",
          "706:         'webm/cluster_builder.cc',",
          "707:         'webm/cluster_builder.h',",
          "708:         'webm/webm_cluster_parser_unittest.cc',",
          "709:         'webm/webm_content_encodings_client_unittest.cc',",
          "710:         'webm/webm_parser_unittest.cc',",
          "711:       ],",
          "712:       'conditions': [",
          "713:         ['os_posix==1 and OS!=\"mac\"', {",
          "714:           'conditions': [",
          "715:             ['linux_use_tcmalloc==1', {",
          "716:               'dependencies': [",
          "717:                 '../base/allocator/allocator.gyp:allocator',",
          "718:               ],",
          "719:             }],",
          "720:           ],",
          "721:         }],",
          "722:         ['OS != \"android\"', {",
          "723:           'dependencies': [",
          "724:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "725:           ],",
          "726:         }],",
          "727:         ['OS == \"android\"', {",
          "728:           'sources!': [",
          "729:             'audio/audio_input_volume_unittest.cc',",
          "730:             'base/test_data_util.cc',",
          "731:             'base/test_data_util.h',",
          "732:             'ffmpeg/ffmpeg_common_unittest.cc',",
          "733:             'filters/ffmpeg_audio_decoder_unittest.cc',",
          "734:             'filters/bitstream_converter_unittest.cc',",
          "735:             'filters/chunk_demuxer_unittest.cc',",
          "736:             'filters/ffmpeg_demuxer_unittest.cc',",
          "737:             'filters/ffmpeg_glue_unittest.cc',",
          "738:             'filters/ffmpeg_h264_bitstream_converter_unittest.cc',",
          "739:             'filters/ffmpeg_video_decoder_unittest.cc',",
          "740:             'filters/pipeline_integration_test.cc',",
          "741:             'filters/pipeline_integration_test_base.cc',",
          "742:             'mp4/mp4_stream_parser_unittest.cc',",
          "743:             'webm/webm_cluster_parser_unittest.cc',",
          "744:           ],",
          "745:         }],",
          "746:         ['OS == \"linux\"', {",
          "747:           'conditions': [",
          "748:             ['use_cras == 1', {",
          "749:               'sources': [",
          "750:                 'audio/linux/cras_output_unittest.cc',",
          "751:               ],",
          "752:               'defines': [",
          "753:                 'USE_CRAS',",
          "754:               ],",
          "755:             }],",
          "756:           ],",
          "757:         }],",
          "758:         [ 'target_arch==\"ia32\" or target_arch==\"x64\"', {",
          "759:           'sources': [",
          "760:             'base/simd/convert_rgb_to_yuv_unittest.cc',",
          "761:           ],",
          "762:         }],",
          "763:         ['proprietary_codecs==1 or branding==\"Chrome\"', {",
          "764:           'sources': [",
          "765:             'mp4/avc_unittest.cc',",
          "766:             'mp4/box_reader_unittest.cc',",
          "767:             'mp4/mp4_stream_parser_unittest.cc',",
          "768:             'mp4/offset_byte_queue_unittest.cc',",
          "769:           ],",
          "770:         }],",
          "771:       ],",
          "772:     },",
          "773:     {",
          "774:       'target_name': 'media_test_support',",
          "775:       'type': 'static_library',",
          "776:       'dependencies': [",
          "777:         'media',",
          "778:         '../base/base.gyp:base',",
          "779:         '../testing/gmock.gyp:gmock',",
          "780:         '../testing/gtest.gyp:gtest',",
          "781:       ],",
          "782:       'sources': [",
          "783:         'audio/test_audio_input_controller_factory.cc',",
          "784:         'audio/test_audio_input_controller_factory.h',",
          "785:         'base/mock_callback.cc',",
          "786:         'base/mock_callback.h',",
          "787:         'base/mock_data_source_host.cc',",
          "788:         'base/mock_data_source_host.h',",
          "789:         'base/mock_demuxer_host.cc',",
          "790:         'base/mock_demuxer_host.h',",
          "791:         'base/mock_filter_host.cc',",
          "792:         'base/mock_filter_host.h',",
          "793:         'base/mock_filters.cc',",
          "794:         'base/mock_filters.h',",
          "795:       ],",
          "796:     },",
          "797:     {",
          "798:       'target_name': 'scaler_bench',",
          "799:       'type': 'executable',",
          "800:       'dependencies': [",
          "801:         'media',",
          "802:         'yuv_convert',",
          "803:         '../base/base.gyp:base',",
          "804:         '../skia/skia.gyp:skia',",
          "805:       ],",
          "806:       'sources': [",
          "807:         'tools/scaler_bench/scaler_bench.cc',",
          "808:       ],",
          "809:     },",
          "810:     {",
          "811:       'target_name': 'qt_faststart',",
          "812:       'type': 'executable',",
          "813:       'sources': [",
          "814:         'tools/qt_faststart/qt_faststart.c'",
          "815:       ],",
          "816:     },",
          "817:     {",
          "818:       'target_name': 'seek_tester',",
          "819:       'type': 'executable',",
          "820:       'dependencies': [",
          "821:         'media',",
          "822:         '../base/base.gyp:base',",
          "823:       ],",
          "824:       'sources': [",
          "825:         'tools/seek_tester/seek_tester.cc',",
          "826:       ],",
          "827:     },",
          "828:   ],",
          "829:   'conditions': [",
          "830:     ['OS==\"win\"', {",
          "831:       'targets': [",
          "832:         {",
          "833:           'target_name': 'player_wtl',",
          "834:           'type': 'executable',",
          "835:           'dependencies': [",
          "836:             'media',",
          "837:             'yuv_convert',",
          "838:             '../base/base.gyp:base',",
          "839:             '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',",
          "840:             '../ui/ui.gyp:ui',",
          "841:           ],",
          "842:           'include_dirs': [",
          "843:             '<(DEPTH)/third_party/wtl/include',",
          "844:           ],",
          "845:           'sources': [",
          "846:             'tools/player_wtl/list.h',",
          "847:             'tools/player_wtl/mainfrm.h',",
          "848:             'tools/player_wtl/movie.cc',",
          "849:             'tools/player_wtl/movie.h',",
          "850:             'tools/player_wtl/player_wtl.cc',",
          "851:             'tools/player_wtl/player_wtl.rc',",
          "852:             'tools/player_wtl/props.h',",
          "853:             'tools/player_wtl/seek.h',",
          "854:             'tools/player_wtl/resource.h',",
          "855:             'tools/player_wtl/view.h',",
          "856:           ],",
          "857:           'msvs_settings': {",
          "858:             'VCLinkerTool': {",
          "859:               'SubSystem': '2',         # Set /SUBSYSTEM:WINDOWS",
          "860:             },",
          "861:           },",
          "862:           'defines': [",
          "863:             '_CRT_SECURE_NO_WARNINGS=1',",
          "864:           ],",
          "865:         },",
          "866:       ],",
          "867:     }],",
          "868:     ['OS == \"win\" or toolkit_uses_gtk == 1', {",
          "869:       'targets': [",
          "870:         {",
          "871:           'target_name': 'shader_bench',",
          "872:           'type': 'executable',",
          "873:           'dependencies': [",
          "874:             'media',",
          "875:             'yuv_convert',",
          "876:             '../base/base.gyp:base',",
          "877:             '../ui/gl/gl.gyp:gl',",
          "878:           ],",
          "879:           'sources': [",
          "880:             'tools/shader_bench/shader_bench.cc',",
          "881:             'tools/shader_bench/cpu_color_painter.cc',",
          "882:             'tools/shader_bench/cpu_color_painter.h',",
          "883:             'tools/shader_bench/gpu_color_painter.cc',",
          "884:             'tools/shader_bench/gpu_color_painter.h',",
          "885:             'tools/shader_bench/gpu_painter.cc',",
          "886:             'tools/shader_bench/gpu_painter.h',",
          "887:             'tools/shader_bench/painter.cc',",
          "888:             'tools/shader_bench/painter.h',",
          "889:             'tools/shader_bench/window.cc',",
          "890:             'tools/shader_bench/window.h',",
          "891:           ],",
          "892:           'conditions': [",
          "893:             ['toolkit_uses_gtk == 1', {",
          "894:               'dependencies': [",
          "895:                 '../build/linux/system.gyp:gtk',",
          "896:               ],",
          "897:               'sources': [",
          "898:                 'tools/shader_bench/window_linux.cc',",
          "899:               ],",
          "900:             }],",
          "901:             ['OS==\"win\"', {",
          "902:               'dependencies': [",
          "903:                 '../third_party/angle/src/build_angle.gyp:libEGL',",
          "904:                 '../third_party/angle/src/build_angle.gyp:libGLESv2',",
          "905:               ],",
          "906:               'sources': [",
          "907:                 'tools/shader_bench/window_win.cc',",
          "908:               ],",
          "909:             }],",
          "910:           ],",
          "911:         },",
          "912:       ],",
          "913:     }],",
          "914:     ['OS == \"linux\" and target_arch != \"arm\"', {",
          "915:       'targets': [",
          "916:         {",
          "917:           'target_name': 'tile_render_bench',",
          "918:           'type': 'executable',",
          "919:           'dependencies': [",
          "920:             '../base/base.gyp:base',",
          "921:             '../ui/gl/gl.gyp:gl',",
          "922:           ],",
          "923:           'libraries': [",
          "924:             '-lGL',",
          "925:             '-ldl',",
          "926:           ],",
          "927:           'sources': [",
          "928:             'tools/tile_render_bench/tile_render_bench.cc',",
          "929:           ],",
          "930:         },",
          "931:       ],",
          "932:     }],",
          "933:     ['os_posix == 1 and OS != \"mac\" and OS != \"android\"', {",
          "934:       'targets': [",
          "935:         {",
          "936:           'target_name': 'player_x11',",
          "937:           'type': 'executable',",
          "938:           'dependencies': [",
          "939:             'media',",
          "940:             'yuv_convert',",
          "941:             '../base/base.gyp:base',",
          "942:             '../ui/gl/gl.gyp:gl',",
          "943:           ],",
          "944:           'link_settings': {",
          "945:             'libraries': [",
          "946:               '-ldl',",
          "947:               '-lX11',",
          "948:               '-lXrender',",
          "949:               '-lXext',",
          "950:             ],",
          "951:           },",
          "952:           'sources': [",
          "953:             'tools/player_x11/data_source_logger.cc',",
          "954:             'tools/player_x11/data_source_logger.h',",
          "955:             'tools/player_x11/gl_video_renderer.cc',",
          "956:             'tools/player_x11/gl_video_renderer.h',",
          "957:             'tools/player_x11/player_x11.cc',",
          "958:             'tools/player_x11/x11_video_renderer.cc',",
          "959:             'tools/player_x11/x11_video_renderer.h',",
          "960:           ],",
          "961:         },",
          "962:       ],",
          "963:     }],",
          "964:     ['OS == \"android\"', {",
          "965:       'targets': [",
          "966:         {",
          "967:           'target_name': 'player_android',",
          "968:           'type': 'static_library',",
          "969:           'sources': [",
          "970:             'base/android/media_player_bridge.cc',",
          "971:             'base/android/media_player_bridge.h',",
          "972:           ],",
          "973:           'dependencies': [",
          "974:             '../base/base.gyp:base',",
          "975:           ],",
          "976:           'include_dirs': [",
          "977:             '<(SHARED_INTERMEDIATE_DIR)/media',",
          "978:           ],",
          "979:           'actions': [",
          "980:             {",
          "981:               'action_name': 'generate-jni-headers',",
          "982:               'inputs': [",
          "983:                 '../base/android/jni_generator/jni_generator.py',",
          "984:                 'base/android/java/src/org/chromium/media/MediaPlayerListener.java',",
          "985:               ],",
          "986:               'outputs': [",
          "987:                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',",
          "988:               ],",
          "989:               'action': [",
          "990:                 'python',",
          "991:                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',",
          "992:                 '-o',",
          "993:                 '<@(_inputs)',",
          "994:                 '<@(_outputs)',",
          "995:               ],",
          "996:             },",
          "997:           ],",
          "998:         },",
          "999:         {",
          "1000:           'target_name': 'media_java',",
          "1001:           'type': 'none',",
          "1002:           'dependencies': [ '../base/base.gyp:base_java' ],",
          "1003:           'variables': {",
          "1004:             'package_name': 'media',",
          "1005:             'java_in_dir': 'base/android/java',",
          "1006:           },",
          "1007:           'includes': [ '../build/java.gypi' ],",
          "1008:         },",
          "1010:       ],",
          "1011:     }, { # OS != \"android\"'",
          "1012:       # Android does not use ffmpeg, so disable the targets which require it.",
          "1013:       'targets': [",
          "1014:         {",
          "1015:           'target_name': 'ffmpeg_unittests',",
          "1016:           'type': 'executable',",
          "1017:           'dependencies': [",
          "1018:             'media',",
          "1019:             'media_test_support',",
          "1020:             '../base/base.gyp:base',",
          "1021:             '../base/base.gyp:base_i18n',",
          "1022:             '../base/base.gyp:test_support_base',",
          "1023:             '../base/base.gyp:test_support_perf',",
          "1024:             '../testing/gtest.gyp:gtest',",
          "1025:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1026:           ],",
          "1027:           'sources': [",
          "1028:             'ffmpeg/ffmpeg_unittest.cc',",
          "1029:           ],",
          "1030:           'conditions': [",
          "1031:             ['toolkit_uses_gtk == 1', {",
          "1032:               'dependencies': [",
          "1033:                 # Needed for the following #include chain:",
          "1034:                 #   base/run_all_unittests.cc",
          "1035:                 #   ../base/test_suite.h",
          "1036:                 #   gtk/gtk.h",
          "1037:                 '../build/linux/system.gyp:gtk',",
          "1038:               ],",
          "1039:               'conditions': [",
          "1040:                 ['linux_use_tcmalloc==1', {",
          "1041:                   'dependencies': [",
          "1042:                     '../base/allocator/allocator.gyp:allocator',",
          "1043:                   ],",
          "1044:                 }],",
          "1045:               ],",
          "1046:             }],",
          "1047:           ],",
          "1048:         },",
          "1049:         {",
          "1050:           'target_name': 'ffmpeg_regression_tests',",
          "1051:           'type': 'executable',",
          "1052:           'dependencies': [",
          "1053:             'media',",
          "1054:             'media_test_support',",
          "1055:             '../base/base.gyp:test_support_base',",
          "1056:             '../testing/gmock.gyp:gmock',",
          "1057:             '../testing/gtest.gyp:gtest',",
          "1058:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1059:           ],",
          "1060:           'sources': [",
          "1061:             'base/test_data_util.cc',",
          "1062:             'base/run_all_unittests.cc',",
          "1063:             'ffmpeg/ffmpeg_regression_tests.cc',",
          "1064:             'filters/pipeline_integration_test_base.cc',",
          "1065:           ],",
          "1066:           'conditions': [",
          "1067:             ['os_posix==1 and OS!=\"mac\"', {",
          "1068:               'conditions': [",
          "1069:                 ['linux_use_tcmalloc==1', {",
          "1070:                   'dependencies': [",
          "1071:                     '../base/allocator/allocator.gyp:allocator',",
          "1072:                   ],",
          "1073:                 }],",
          "1074:               ],",
          "1075:             }],",
          "1076:           ],",
          "1077:         },",
          "1078:         {",
          "1079:           'target_name': 'ffmpeg_tests',",
          "1080:           'type': 'executable',",
          "1081:           'dependencies': [",
          "1082:             'media',",
          "1083:             '../base/base.gyp:base',",
          "1084:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1085:           ],",
          "1086:           'sources': [",
          "1087:             'test/ffmpeg_tests/ffmpeg_tests.cc',",
          "1088:           ],",
          "1089:         },",
          "1090:         {",
          "1091:           'target_name': 'media_bench',",
          "1092:           'type': 'executable',",
          "1093:           'dependencies': [",
          "1094:             'media',",
          "1095:             '../base/base.gyp:base',",
          "1096:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1097:           ],",
          "1098:           'sources': [",
          "1099:             'tools/media_bench/media_bench.cc',",
          "1100:           ],",
          "1101:         },",
          "1102:       ],",
          "1103:     }]",
          "1104:   ],",
          "1105: }",
          "",
          "---------------"
        ],
        "tools/gyp/tools/emacs/testdatmedia.gyp.fontified||tools/gyp/tools/emacs/testdata/media.gyp.fontified": [
          "File: tools/gyp/tools/emacs/testdatmedia.gyp.fontified -> tools/gyp/tools/emacs/testdata/media.gyp.fontified",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #(\"# Copyright (c) 2012 The Chromium Authors. All rights reserved.",
          "3: # Use of this source code is governed by a BSD-style license that can be",
          "4: # found in the LICENSE file.",
          "6: {",
          "7:   'variables': {",
          "8:     'chromium_code': 1,",
          "9:     # Override to dynamically link the PulseAudio library.",
          "10:     'use_pulseaudio%': 0,",
          "11:     # Override to dynamically link the cras (ChromeOS audio) library.",
          "12:     'use_cras%': 0,",
          "13:   },",
          "14:   'targets': [",
          "15:     {",
          "16:       'target_name': 'media',",
          "17:       'type': '<(component)',",
          "18:       'dependencies': [",
          "19:         'yuv_convert',",
          "20:         '../base/base.gyp:base',",
          "21:         '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',",
          "22:         '../build/temp_gyp/googleurl.gyp:googleurl',",
          "23:         '../crypto/crypto.gyp:crypto',",
          "24:         '../third_party/openmax/openmax.gyp:il',",
          "25:         '../ui/ui.gyp:ui',",
          "26:       ],",
          "27:       'defines': [",
          "28:         'MEDIA_IMPLEMENTATION',",
          "29:       ],",
          "30:       'include_dirs': [",
          "31:         '..',",
          "32:       ],",
          "33:       'sources': [",
          "34:         'audio/android/audio_manager_android.cc',",
          "35:         'audio/android/audio_manager_android.h',",
          "36:         'audio/android/audio_track_output_android.cc',",
          "37:         'audio/android/audio_track_output_android.h',",
          "38:         'audio/android/opensles_input.cc',",
          "39:         'audio/android/opensles_input.h',",
          "40:         'audio/android/opensles_output.cc',",
          "41:         'audio/android/opensles_output.h',",
          "42:         'audio/async_socket_io_handler.h',",
          "43:         'audio/async_socket_io_handler_posix.cc',",
          "44:         'audio/async_socket_io_handler_win.cc',",
          "45:         'audio/audio_buffers_state.cc',",
          "46:         'audio/audio_buffers_state.h',",
          "47:         'audio/audio_io.h',",
          "48:         'audio/audio_input_controller.cc',",
          "49:         'audio/audio_input_controller.h',",
          "50:         'audio/audio_input_stream_impl.cc',",
          "51:         'audio/audio_input_stream_impl.h',",
          "52:         'audio/audio_device_name.cc',",
          "53:         'audio/audio_device_name.h',",
          "54:         'audio/audio_manager.cc',",
          "55:         'audio/audio_manager.h',",
          "56:         'audio/audio_manager_base.cc',",
          "57:         'audio/audio_manager_base.h',",
          "58:         'audio/audio_output_controller.cc',",
          "59:         'audio/audio_output_controller.h',",
          "60:         'audio/audio_output_dispatcher.cc',",
          "61:         'audio/audio_output_dispatcher.h',",
          "62:         'audio/audio_output_dispatcher_impl.cc',",
          "63:         'audio/audio_output_dispatcher_impl.h',",
          "64:         'audio/audio_output_mixer.cc',",
          "65:         'audio/audio_output_mixer.h',",
          "66:         'audio/audio_output_proxy.cc',",
          "67:         'audio/audio_output_proxy.h',",
          "68:         'audio/audio_parameters.cc',",
          "69:         'audio/audio_parameters.h',",
          "70:         'audio/audio_util.cc',",
          "71:         'audio/audio_util.h',",
          "72:         'audio/cross_process_notification.cc',",
          "73:         'audio/cross_process_notification.h',",
          "74:         'audio/cross_process_notification_win.cc',",
          "75:         'audio/cross_process_notification_posix.cc',",
          "76:         'audio/fake_audio_input_stream.cc',",
          "77:         'audio/fake_audio_input_stream.h',",
          "78:         'audio/fake_audio_output_stream.cc',",
          "79:         'audio/fake_audio_output_stream.h',",
          "80:         'audio/linux/audio_manager_linux.cc',",
          "81:         'audio/linux/audio_manager_linux.h',",
          "82:         'audio/linux/alsa_input.cc',",
          "83:         'audio/linux/alsa_input.h',",
          "84:         'audio/linux/alsa_output.cc',",
          "85:         'audio/linux/alsa_output.h',",
          "86:         'audio/linux/alsa_util.cc',",
          "87:         'audio/linux/alsa_util.h',",
          "88:         'audio/linux/alsa_wrapper.cc',",
          "89:         'audio/linux/alsa_wrapper.h',",
          "90:         'audio/linux/cras_output.cc',",
          "91:         'audio/linux/cras_output.h',",
          "92:         'audio/openbsd/audio_manager_openbsd.cc',",
          "93:         'audio/openbsd/audio_manager_openbsd.h',",
          "94:         'audio/mac/audio_input_mac.cc',",
          "95:         'audio/mac/audio_input_mac.h',",
          "96:         'audio/mac/audio_low_latency_input_mac.cc',",
          "97:         'audio/mac/audio_low_latency_input_mac.h',",
          "98:         'audio/mac/audio_low_latency_output_mac.cc',",
          "99:         'audio/mac/audio_low_latency_output_mac.h',",
          "100:         'audio/mac/audio_manager_mac.cc',",
          "101:         'audio/mac/audio_manager_mac.h',",
          "102:         'audio/mac/audio_output_mac.cc',",
          "103:         'audio/mac/audio_output_mac.h',",
          "104:         'audio/null_audio_sink.cc',",
          "105:         'audio/null_audio_sink.h',",
          "106:         'audio/pulse/pulse_output.cc',",
          "107:         'audio/pulse/pulse_output.h',",
          "108:         'audio/sample_rates.cc',",
          "109:         'audio/sample_rates.h',",
          "110:         'audio/simple_sources.cc',",
          "111:         'audio/simple_sources.h',",
          "112:         'audio/win/audio_low_latency_input_win.cc',",
          "113:         'audio/win/audio_low_latency_input_win.h',",
          "114:         'audio/win/audio_low_latency_output_win.cc',",
          "115:         'audio/win/audio_low_latency_output_win.h',",
          "116:         'audio/win/audio_manager_win.cc',",
          "117:         'audio/win/audio_manager_win.h',",
          "118:         'audio/win/avrt_wrapper_win.cc',",
          "119:         'audio/win/avrt_wrapper_win.h',",
          "120:         'audio/win/device_enumeration_win.cc',",
          "121:         'audio/win/device_enumeration_win.h',",
          "122:         'audio/win/wavein_input_win.cc',",
          "123:         'audio/win/wavein_input_win.h',",
          "124:         'audio/win/waveout_output_win.cc',",
          "125:         'audio/win/waveout_output_win.h',",
          "126:         'base/android/media_jni_registrar.cc',",
          "127:         'base/android/media_jni_registrar.h',",
          "128:         'base/audio_decoder.cc',",
          "129:         'base/audio_decoder.h',",
          "130:         'base/audio_decoder_config.cc',",
          "131:         'base/audio_decoder_config.h',",
          "132:         'base/audio_renderer.h',",
          "133:         'base/audio_renderer_mixer.cc',",
          "134:         'base/audio_renderer_mixer.h',",
          "135:         'base/audio_renderer_mixer_input.cc',",
          "136:         'base/audio_renderer_mixer_input.h',",
          "137:         'base/bitstream_buffer.h',",
          "138:         'base/buffers.cc',",
          "139:         'base/buffers.h',",
          "140:         'base/byte_queue.cc',",
          "141:         'base/byte_queue.h',",
          "142:         'base/channel_layout.cc',",
          "143:         'base/channel_layout.h',",
          "144:         'base/clock.cc',",
          "145:         'base/clock.h',",
          "146:         'base/composite_filter.cc',",
          "147:         'base/composite_filter.h',",
          "148:         'base/data_buffer.cc',",
          "149:         'base/data_buffer.h',",
          "150:         'base/data_source.cc',",
          "151:         'base/data_source.h',",
          "152:         'base/decoder_buffer.cc',",
          "153:         'base/decoder_buffer.h',",
          "154:         'base/decrypt_config.cc',",
          "155:         'base/decrypt_config.h',",
          "156:         'base/decryptor.h',",
          "157:         'base/decryptor_client.h',",
          "158:         'base/demuxer.cc',",
          "159:         'base/demuxer.h',",
          "160:         'base/demuxer_stream.cc',",
          "161:         'base/demuxer_stream.h',",
          "162:         'base/djb2.cc',",
          "163:         'base/djb2.h',",
          "164:         'base/filter_collection.cc',",
          "165:         'base/filter_collection.h',",
          "166:         'base/filter_host.h',",
          "167:         'base/filters.cc',",
          "168:         'base/filters.h',",
          "169:         'base/h264_bitstream_converter.cc',",
          "170:         'base/h264_bitstream_converter.h',",
          "171:         'base/media.h',",
          "172:         'base/media_android.cc',",
          "173:         'base/media_export.h',",
          "174:         'base/media_log.cc',",
          "175:         'base/media_log.h',",
          "176:         'base/media_log_event.h',",
          "177:         'base/media_posix.cc',",
          "178:         'base/media_switches.cc',",
          "179:         'base/media_switches.h',",
          "180:         'base/media_win.cc',",
          "181:         'base/message_loop_factory.cc',",
          "182:         'base/message_loop_factory.h',",
          "183:         'base/pipeline.cc',",
          "184:         'base/pipeline.h',",
          "185:         'base/pipeline_status.cc',",
          "186:         'base/pipeline_status.h',",
          "187:         'base/ranges.cc',",
          "188:         'base/ranges.h',",
          "189:         'base/seekable_buffer.cc',",
          "190:         'base/seekable_buffer.h',",
          "191:         'base/state_matrix.cc',",
          "192:         'base/state_matrix.h',",
          "193:         'base/stream_parser.cc',",
          "194:         'base/stream_parser.h',",
          "195:         'base/stream_parser_buffer.cc',",
          "196:         'base/stream_parser_buffer.h',",
          "197:         'base/video_decoder.cc',",
          "198:         'base/video_decoder.h',",
          "199:         'base/video_decoder_config.cc',",
          "200:         'base/video_decoder_config.h',",
          "201:         'base/video_frame.cc',",
          "202:         'base/video_frame.h',",
          "203:         'base/video_renderer.h',",
          "204:         'base/video_util.cc',",
          "205:         'base/video_util.h',",
          "206:         'crypto/aes_decryptor.cc',",
          "207:         'crypto/aes_decryptor.h',",
          "208:         'ffmpeg/ffmpeg_common.cc',",
          "209:         'ffmpeg/ffmpeg_common.h',",
          "210:         'ffmpeg/file_protocol.cc',",
          "211:         'ffmpeg/file_protocol.h',",
          "212:         'filters/audio_file_reader.cc',",
          "213:         'filters/audio_file_reader.h',",
          "214:         'filters/audio_renderer_algorithm.cc',",
          "215:         'filters/audio_renderer_algorithm.h',",
          "216:         'filters/audio_renderer_impl.cc',",
          "217:         'filters/audio_renderer_impl.h',",
          "218:         'filters/bitstream_converter.cc',",
          "219:         'filters/bitstream_converter.h',",
          "220:         'filters/chunk_demuxer.cc',",
          "221:         'filters/chunk_demuxer.h',",
          "222:         'filters/chunk_demuxer_client.h',",
          "223:         'filters/dummy_demuxer.cc',",
          "224:         'filters/dummy_demuxer.h',",
          "225:         'filters/ffmpeg_audio_decoder.cc',",
          "226:         'filters/ffmpeg_audio_decoder.h',",
          "227:         'filters/ffmpeg_demuxer.cc',",
          "228:         'filters/ffmpeg_demuxer.h',",
          "229:         'filters/ffmpeg_h264_bitstream_converter.cc',",
          "230:         'filters/ffmpeg_h264_bitstream_converter.h',",
          "231:         'filters/ffmpeg_glue.cc',",
          "232:         'filters/ffmpeg_glue.h',",
          "233:         'filters/ffmpeg_video_decoder.cc',",
          "234:         'filters/ffmpeg_video_decoder.h',",
          "235:         'filters/file_data_source.cc',",
          "236:         'filters/file_data_source.h',",
          "237:         'filters/gpu_video_decoder.cc',",
          "238:         'filters/gpu_video_decoder.h',",
          "239:         'filters/in_memory_url_protocol.cc',",
          "240:         'filters/in_memory_url_protocol.h',",
          "241:         'filters/source_buffer_stream.cc',",
          "242:         'filters/source_buffer_stream.h',",
          "243:         'filters/video_frame_generator.cc',",
          "244:         'filters/video_frame_generator.h',",
          "245:         'filters/video_renderer_base.cc',",
          "246:         'filters/video_renderer_base.h',",
          "247:         'video/capture/fake_video_capture_device.cc',",
          "248:         'video/capture/fake_video_capture_device.h',",
          "249:         'video/capture/linux/video_capture_device_linux.cc',",
          "250:         'video/capture/linux/video_capture_device_linux.h',",
          "251:         'video/capture/mac/video_capture_device_mac.h',",
          "252:         'video/capture/mac/video_capture_device_mac.mm',",
          "253:         'video/capture/mac/video_capture_device_qtkit_mac.h',",
          "254:         'video/capture/mac/video_capture_device_qtkit_mac.mm',",
          "255:         'video/capture/video_capture.h',",
          "256:         'video/capture/video_capture_device.h',",
          "257:         'video/capture/video_capture_device_dummy.cc',",
          "258:         'video/capture/video_capture_device_dummy.h',",
          "259:         'video/capture/video_capture_proxy.cc',",
          "260:         'video/capture/video_capture_proxy.h',",
          "261:         'video/capture/video_capture_types.h',",
          "262:         'video/capture/win/filter_base_win.cc',",
          "263:         'video/capture/win/filter_base_win.h',",
          "264:         'video/capture/win/pin_base_win.cc',",
          "265:         'video/capture/win/pin_base_win.h',",
          "266:         'video/capture/win/sink_filter_observer_win.h',",
          "267:         'video/capture/win/sink_filter_win.cc',",
          "268:         'video/capture/win/sink_filter_win.h',",
          "269:         'video/capture/win/sink_input_pin_win.cc',",
          "270:         'video/capture/win/sink_input_pin_win.h',",
          "271:         'video/capture/win/video_capture_device_win.cc',",
          "272:         'video/capture/win/video_capture_device_win.h',",
          "273:         'video/picture.cc',",
          "274:         'video/picture.h',",
          "275:         'video/video_decode_accelerator.cc',",
          "276:         'video/video_decode_accelerator.h',",
          "277:         'webm/webm_constants.h',",
          "278:         'webm/webm_cluster_parser.cc',",
          "279:         'webm/webm_cluster_parser.h',",
          "280:         'webm/webm_content_encodings.cc',",
          "281:         'webm/webm_content_encodings.h',",
          "282:         'webm/webm_content_encodings_client.cc',",
          "283:         'webm/webm_content_encodings_client.h',",
          "284:         'webm/webm_info_parser.cc',",
          "285:         'webm/webm_info_parser.h',",
          "286:         'webm/webm_parser.cc',",
          "287:         'webm/webm_parser.h',",
          "288:         'webm/webm_stream_parser.cc',",
          "289:         'webm/webm_stream_parser.h',",
          "290:         'webm/webm_tracks_parser.cc',",
          "291:         'webm/webm_tracks_parser.h',",
          "292:       ],",
          "293:       'direct_dependent_settings': {",
          "294:         'include_dirs': [",
          "295:           '..',",
          "296:         ],",
          "297:       },",
          "298:       'conditions': [",
          "299:         # Android doesn't use ffmpeg, so make the dependency conditional",
          "300:         # and exclude the sources which depend on ffmpeg.",
          "301:         ['OS != \\\"android\\\"', {",
          "302:           'dependencies': [",
          "303:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "304:           ],",
          "305:         }],",
          "306:         ['OS == \\\"android\\\"', {",
          "307:           'sources!': [",
          "308:             'base/media_posix.cc',",
          "309:             'ffmpeg/ffmpeg_common.cc',",
          "310:             'ffmpeg/ffmpeg_common.h',",
          "311:             'ffmpeg/file_protocol.cc',",
          "312:             'ffmpeg/file_protocol.h',",
          "313:             'filters/audio_file_reader.cc',",
          "314:             'filters/audio_file_reader.h',",
          "315:             'filters/bitstream_converter.cc',",
          "316:             'filters/bitstream_converter.h',",
          "317:             'filters/chunk_demuxer.cc',",
          "318:             'filters/chunk_demuxer.h',",
          "319:             'filters/chunk_demuxer_client.h',",
          "320:             'filters/ffmpeg_audio_decoder.cc',",
          "321:             'filters/ffmpeg_audio_decoder.h',",
          "322:             'filters/ffmpeg_demuxer.cc',",
          "323:             'filters/ffmpeg_demuxer.h',",
          "324:             'filters/ffmpeg_h264_bitstream_converter.cc',",
          "325:             'filters/ffmpeg_h264_bitstream_converter.h',",
          "326:             'filters/ffmpeg_glue.cc',",
          "327:             'filters/ffmpeg_glue.h',",
          "328:             'filters/ffmpeg_video_decoder.cc',",
          "329:             'filters/ffmpeg_video_decoder.h',",
          "330:             'filters/gpu_video_decoder.cc',",
          "331:             'filters/gpu_video_decoder.h',",
          "332:             'webm/webm_cluster_parser.cc',",
          "333:             'webm/webm_cluster_parser.h',",
          "334:             'webm/webm_stream_parser.cc',",
          "335:             'webm/webm_stream_parser.h',",
          "336:           ],",
          "337:         }],",
          "338:         # The below 'android' condition were added temporarily and should be",
          "339:         # removed in downstream, because there is no Java environment setup in",
          "340:         # upstream yet.",
          "341:         ['OS == \\\"android\\\"', {",
          "342:           'sources!':[",
          "343:             'audio/android/audio_track_output_android.cc',",
          "344:           ],",
          "345:           'sources':[",
          "346:             'audio/android/audio_track_output_stub_android.cc',",
          "347:           ],",
          "348:           'link_settings': {",
          "349:             'libraries': [",
          "350:               '-lOpenSLES',",
          "351:             ],",
          "352:           },",
          "353:         }],",
          "354:         ['OS==\\\"linux\\\" or OS==\\\"freebsd\\\" or OS==\\\"solaris\\\"', {",
          "355:           'link_settings': {",
          "356:             'libraries': [",
          "357:               '-lasound',",
          "358:             ],",
          "359:           },",
          "360:         }],",
          "361:         ['OS==\\\"openbsd\\\"', {",
          "362:           'sources/': [ ['exclude', '/alsa_' ],",
          "363:                         ['exclude', '/audio_manager_linux' ] ],",
          "364:           'link_settings': {",
          "365:             'libraries': [",
          "366:             ],",
          "367:           },",
          "368:         }],",
          "369:         ['OS!=\\\"openbsd\\\"', {",
          "370:           'sources!': [",
          "371:             'audio/openbsd/audio_manager_openbsd.cc',",
          "372:             'audio/openbsd/audio_manager_openbsd.h',",
          "373:           ],",
          "374:         }],",
          "375:         ['OS==\\\"linux\\\"', {",
          "376:           'variables': {",
          "377:             'conditions': [",
          "378:               ['sysroot!=\\\"\\\"', {",
          "379:                 'pkg-config': '../build/linux/pkg-config-wrapper \\\"<(sysroot)\\\" \\\"<(target_arch)\\\"',",
          "380:               }, {",
          "381:                 'pkg-config': 'pkg-config'",
          "382:               }],",
          "383:             ],",
          "384:           },",
          "385:           'conditions': [",
          "386:             ['use_cras == 1', {",
          "387:               'cflags': [",
          "388:                 '<!@(<(pkg-config) --cflags libcras)',",
          "389:               ],",
          "390:               'link_settings': {",
          "391:                 'libraries': [",
          "392:                   '<!@(<(pkg-config) --libs libcras)',",
          "393:                 ],",
          "394:               },",
          "395:               'defines': [",
          "396:                 'USE_CRAS',",
          "397:               ],",
          "398:             }, {  # else: use_cras == 0",
          "399:               'sources!': [",
          "400:                 'audio/linux/cras_output.cc',",
          "401:                 'audio/linux/cras_output.h',",
          "402:               ],",
          "403:             }],",
          "404:           ],",
          "405:         }],",
          "406:         ['os_posix == 1', {",
          "407:           'conditions': [",
          "408:             ['use_pulseaudio == 1', {",
          "409:               'cflags': [",
          "410:                 '<!@(pkg-config --cflags libpulse)',",
          "411:               ],",
          "412:               'link_settings': {",
          "413:                 'libraries': [",
          "414:                   '<!@(pkg-config --libs-only-l libpulse)',",
          "415:                 ],",
          "416:               },",
          "417:               'defines': [",
          "418:                 'USE_PULSEAUDIO',",
          "419:               ],",
          "420:             }, {  # else: use_pulseaudio == 0",
          "421:               'sources!': [",
          "422:                 'audio/pulse/pulse_output.cc',",
          "423:                 'audio/pulse/pulse_output.h',",
          "424:               ],",
          "425:             }],",
          "426:           ],",
          "427:         }],",
          "428:         ['os_posix == 1 and OS != \\\"android\\\"', {",
          "429:           # Video capture isn't supported in Android yet.",
          "430:           'sources!': [",
          "431:             'video/capture/video_capture_device_dummy.cc',",
          "432:             'video/capture/video_capture_device_dummy.h',",
          "433:           ],",
          "434:         }],",
          "435:         ['OS==\\\"mac\\\"', {",
          "436:           'link_settings': {",
          "437:             'libraries': [",
          "438:               '$(SDKROOT)/System/Library/Frameworks/AudioUnit.framework',",
          "439:               '$(SDKROOT)/System/Library/Frameworks/AudioToolbox.framework',",
          "440:               '$(SDKROOT)/System/Library/Frameworks/CoreAudio.framework',",
          "441:               '$(SDKROOT)/System/Library/Frameworks/CoreVideo.framework',",
          "442:               '$(SDKROOT)/System/Library/Frameworks/QTKit.framework',",
          "443:             ],",
          "444:           },",
          "445:         }],",
          "446:         ['OS==\\\"win\\\"', {",
          "447:           'sources!': [",
          "448:             'audio/pulse/pulse_output.cc',",
          "449:             'audio/pulse/pulse_output.h',",
          "450:             'video/capture/video_capture_device_dummy.cc',",
          "451:             'video/capture/video_capture_device_dummy.h',",
          "452:           ],",
          "453:         }],",
          "454:         ['proprietary_codecs==1 or branding==\\\"Chrome\\\"', {",
          "455:           'sources': [",
          "456:             'mp4/avc.cc',",
          "457:             'mp4/avc.h',",
          "458:             'mp4/box_definitions.cc',",
          "459:             'mp4/box_definitions.h',",
          "460:             'mp4/box_reader.cc',",
          "461:             'mp4/box_reader.h',",
          "462:             'mp4/cenc.cc',",
          "463:             'mp4/cenc.h',",
          "464:             'mp4/mp4_stream_parser.cc',",
          "465:             'mp4/mp4_stream_parser.h',",
          "466:             'mp4/offset_byte_queue.cc',",
          "467:             'mp4/offset_byte_queue.h',",
          "468:             'mp4/track_run_iterator.cc',",
          "469:             'mp4/track_run_iterator.h',",
          "470:           ],",
          "471:         }],",
          "472:       ],",
          "473:     },",
          "474:     {",
          "475:       'target_name': 'yuv_convert',",
          "476:       'type': 'static_library',",
          "477:       'include_dirs': [",
          "478:         '..',",
          "479:       ],",
          "480:       'conditions': [",
          "481:         ['order_profiling != 0', {",
          "482:           'target_conditions' : [",
          "483:             ['_toolset==\\\"target\\\"', {",
          "484:               'cflags!': [ '-finstrument-functions' ],",
          "485:             }],",
          "486:           ],",
          "487:         }],",
          "488:         [ 'target_arch == \\\"ia32\\\" or target_arch == \\\"x64\\\"', {",
          "489:           'dependencies': [",
          "490:             'yuv_convert_simd_x86',",
          "491:           ],",
          "492:         }],",
          "493:         [ 'target_arch == \\\"arm\\\"', {",
          "494:           'dependencies': [",
          "495:             'yuv_convert_simd_arm',",
          "496:           ],",
          "497:         }],",
          "498:       ],",
          "499:       'sources': [",
          "500:         'base/yuv_convert.cc',",
          "501:         'base/yuv_convert.h',",
          "502:       ],",
          "503:     },",
          "504:     {",
          "505:       'target_name': 'yuv_convert_simd_x86',",
          "506:       'type': 'static_library',",
          "507:       'include_dirs': [",
          "508:         '..',",
          "509:       ],",
          "510:       'sources': [",
          "511:         'base/simd/convert_rgb_to_yuv_c.cc',",
          "512:         'base/simd/convert_rgb_to_yuv_sse2.cc',",
          "513:         'base/simd/convert_rgb_to_yuv_ssse3.asm',",
          "514:         'base/simd/convert_rgb_to_yuv_ssse3.cc',",
          "515:         'base/simd/convert_rgb_to_yuv_ssse3.inc',",
          "516:         'base/simd/convert_yuv_to_rgb_c.cc',",
          "517:         'base/simd/convert_yuv_to_rgb_x86.cc',",
          "518:         'base/simd/convert_yuv_to_rgb_mmx.asm',",
          "519:         'base/simd/convert_yuv_to_rgb_mmx.inc',",
          "520:         'base/simd/convert_yuv_to_rgb_sse.asm',",
          "521:         'base/simd/filter_yuv.h',",
          "522:         'base/simd/filter_yuv_c.cc',",
          "523:         'base/simd/filter_yuv_mmx.cc',",
          "524:         'base/simd/filter_yuv_sse2.cc',",
          "525:         'base/simd/linear_scale_yuv_to_rgb_mmx.asm',",
          "526:         'base/simd/linear_scale_yuv_to_rgb_mmx.inc',",
          "527:         'base/simd/linear_scale_yuv_to_rgb_sse.asm',",
          "528:         'base/simd/scale_yuv_to_rgb_mmx.asm',",
          "529:         'base/simd/scale_yuv_to_rgb_mmx.inc',",
          "530:         'base/simd/scale_yuv_to_rgb_sse.asm',",
          "531:         'base/simd/yuv_to_rgb_table.cc',",
          "532:         'base/simd/yuv_to_rgb_table.h',",
          "533:       ],",
          "534:       'conditions': [",
          "535:         ['order_profiling != 0', {",
          "536:           'target_conditions' : [",
          "537:             ['_toolset==\\\"target\\\"', {",
          "538:               'cflags!': [ '-finstrument-functions' ],",
          "539:             }],",
          "540:           ],",
          "541:         }],",
          "542:         [ 'target_arch == \\\"x64\\\"', {",
          "543:           # Source files optimized for X64 systems.",
          "544:           'sources': [",
          "545:             'base/simd/linear_scale_yuv_to_rgb_mmx_x64.asm',",
          "546:             'base/simd/scale_yuv_to_rgb_sse2_x64.asm',",
          "547:           ],",
          "548:         }],",
          "549:         [ 'os_posix == 1 and OS != \\\"mac\\\" and OS != \\\"android\\\"', {",
          "550:           'cflags': [",
          "551:             '-msse2',",
          "552:           ],",
          "553:         }],",
          "554:         [ 'OS == \\\"mac\\\"', {",
          "555:           'configurations': {",
          "556:             'Debug': {",
          "557:               'xcode_settings': {",
          "558:                 # gcc on the mac builds horribly unoptimized sse code in debug",
          "559:                 # mode. Since this is rarely going to be debugged, run with full",
          "560:                 # optimizations in Debug as well as Release.",
          "561:                 'GCC_OPTIMIZATION_LEVEL': '3',  # -O3",
          "562:                },",
          "563:              },",
          "564:           },",
          "565:         }],",
          "566:         [ 'OS==\\\"win\\\"', {",
          "567:           'variables': {",
          "568:             'yasm_flags': [",
          "569:               '-DWIN32',",
          "570:               '-DMSVC',",
          "571:               '-DCHROMIUM',",
          "572:               '-Isimd',",
          "573:             ],",
          "574:           },",
          "575:         }],",
          "576:         [ 'OS==\\\"mac\\\"', {",
          "577:           'variables': {",
          "578:             'yasm_flags': [",
          "579:               '-DPREFIX',",
          "580:               '-DMACHO',",
          "581:               '-DCHROMIUM',",
          "582:               '-Isimd',",
          "583:             ],",
          "584:           },",
          "585:         }],",
          "586:         [ 'os_posix==1 and OS!=\\\"mac\\\"', {",
          "587:           'variables': {",
          "588:             'conditions': [",
          "589:               [ 'target_arch==\\\"ia32\\\"', {",
          "590:                 'yasm_flags': [",
          "591:                   '-DX86_32',",
          "592:                   '-DELF',",
          "593:                   '-DCHROMIUM',",
          "594:                   '-Isimd',",
          "595:                 ],",
          "596:               }, {",
          "597:                 'yasm_flags': [",
          "598:                   '-DARCH_X86_64',",
          "599:                   '-DELF',",
          "600:                   '-DPIC',",
          "601:                   '-DCHROMIUM',",
          "602:                   '-Isimd',",
          "603:                 ],",
          "604:               }],",
          "605:             ],",
          "606:           },",
          "607:         }],",
          "608:       ],",
          "609:       'variables': {",
          "610:         'yasm_output_path': '<(SHARED_INTERMEDIATE_DIR)/media',",
          "611:       },",
          "612:       'msvs_2010_disable_uldi_when_referenced': 1,",
          "613:       'includes': [",
          "614:         '../third_party/yasm/yasm_compile.gypi',",
          "615:       ],",
          "616:     },",
          "617:     {",
          "618:       'target_name': 'yuv_convert_simd_arm',",
          "619:       'type': 'static_library',",
          "620:       'include_dirs': [",
          "621:         '..',",
          "622:       ],",
          "623:       'sources': [",
          "624:         'base/simd/convert_rgb_to_yuv_c.cc',",
          "625:         'base/simd/convert_rgb_to_yuv.h',",
          "626:         'base/simd/convert_yuv_to_rgb_c.cc',",
          "627:         'base/simd/convert_yuv_to_rgb.h',",
          "628:         'base/simd/filter_yuv.h',",
          "629:         'base/simd/filter_yuv_c.cc',",
          "630:         'base/simd/yuv_to_rgb_table.cc',",
          "631:         'base/simd/yuv_to_rgb_table.h',",
          "632:       ],",
          "633:     },",
          "634:     {",
          "635:       'target_name': 'media_unittests',",
          "636:       'type': 'executable',",
          "637:       'dependencies': [",
          "638:         'media',",
          "639:         'media_test_support',",
          "640:         'yuv_convert',",
          "641:         '../base/base.gyp:base',",
          "642:         '../base/base.gyp:base_i18n',",
          "643:         '../base/base.gyp:test_support_base',",
          "644:         '../testing/gmock.gyp:gmock',",
          "645:         '../testing/gtest.gyp:gtest',",
          "646:         '../ui/ui.gyp:ui',",
          "647:       ],",
          "648:       'sources': [",
          "649:         'audio/async_socket_io_handler_unittest.cc',",
          "650:         'audio/audio_input_controller_unittest.cc',",
          "651:         'audio/audio_input_device_unittest.cc',",
          "652:         'audio/audio_input_unittest.cc',",
          "653:         'audio/audio_input_volume_unittest.cc',",
          "654:         'audio/audio_low_latency_input_output_unittest.cc',",
          "655:         'audio/audio_output_controller_unittest.cc',",
          "656:         'audio/audio_output_proxy_unittest.cc',",
          "657:         'audio/audio_parameters_unittest.cc',",
          "658:         'audio/audio_util_unittest.cc',",
          "659:         'audio/cross_process_notification_unittest.cc',",
          "660:         'audio/linux/alsa_output_unittest.cc',",
          "661:         'audio/mac/audio_low_latency_input_mac_unittest.cc',",
          "662:         'audio/mac/audio_output_mac_unittest.cc',",
          "663:         'audio/simple_sources_unittest.cc',",
          "664:         'audio/win/audio_low_latency_input_win_unittest.cc',",
          "665:         'audio/win/audio_low_latency_output_win_unittest.cc',",
          "666:         'audio/win/audio_output_win_unittest.cc',",
          "667:         'base/audio_renderer_mixer_unittest.cc',",
          "668:         'base/audio_renderer_mixer_input_unittest.cc',",
          "669:         'base/buffers_unittest.cc',",
          "670:         'base/clock_unittest.cc',",
          "671:         'base/composite_filter_unittest.cc',",
          "672:         'base/data_buffer_unittest.cc',",
          "673:         'base/decoder_buffer_unittest.cc',",
          "674:         'base/djb2_unittest.cc',",
          "675:         'base/fake_audio_render_callback.cc',",
          "676:         'base/fake_audio_render_callback.h',",
          "677:         'base/filter_collection_unittest.cc',",
          "678:         'base/h264_bitstream_converter_unittest.cc',",
          "679:         'base/pipeline_unittest.cc',",
          "680:         'base/ranges_unittest.cc',",
          "681:         'base/run_all_unittests.cc',",
          "682:         'base/seekable_buffer_unittest.cc',",
          "683:         'base/state_matrix_unittest.cc',",
          "684:         'base/test_data_util.cc',",
          "685:         'base/test_data_util.h',",
          "686:         'base/video_frame_unittest.cc',",
          "687:         'base/video_util_unittest.cc',",
          "688:         'base/yuv_convert_unittest.cc',",
          "689:         'crypto/aes_decryptor_unittest.cc',",
          "690:         'ffmpeg/ffmpeg_common_unittest.cc',",
          "691:         'filters/audio_renderer_algorithm_unittest.cc',",
          "692:         'filters/audio_renderer_impl_unittest.cc',",
          "693:         'filters/bitstream_converter_unittest.cc',",
          "694:         'filters/chunk_demuxer_unittest.cc',",
          "695:         'filters/ffmpeg_audio_decoder_unittest.cc',",
          "696:         'filters/ffmpeg_decoder_unittest.h',",
          "697:         'filters/ffmpeg_demuxer_unittest.cc',",
          "698:         'filters/ffmpeg_glue_unittest.cc',",
          "699:         'filters/ffmpeg_h264_bitstream_converter_unittest.cc',",
          "700:         'filters/ffmpeg_video_decoder_unittest.cc',",
          "701:         'filters/file_data_source_unittest.cc',",
          "702:         'filters/pipeline_integration_test.cc',",
          "703:         'filters/pipeline_integration_test_base.cc',",
          "704:         'filters/source_buffer_stream_unittest.cc',",
          "705:         'filters/video_renderer_base_unittest.cc',",
          "706:         'video/capture/video_capture_device_unittest.cc',",
          "707:         'webm/cluster_builder.cc',",
          "708:         'webm/cluster_builder.h',",
          "709:         'webm/webm_cluster_parser_unittest.cc',",
          "710:         'webm/webm_content_encodings_client_unittest.cc',",
          "711:         'webm/webm_parser_unittest.cc',",
          "712:       ],",
          "713:       'conditions': [",
          "714:         ['os_posix==1 and OS!=\\\"mac\\\"', {",
          "715:           'conditions': [",
          "716:             ['linux_use_tcmalloc==1', {",
          "717:               'dependencies': [",
          "718:                 '../base/allocator/allocator.gyp:allocator',",
          "719:               ],",
          "720:             }],",
          "721:           ],",
          "722:         }],",
          "723:         ['OS != \\\"android\\\"', {",
          "724:           'dependencies': [",
          "725:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "726:           ],",
          "727:         }],",
          "728:         ['OS == \\\"android\\\"', {",
          "729:           'sources!': [",
          "730:             'audio/audio_input_volume_unittest.cc',",
          "731:             'base/test_data_util.cc',",
          "732:             'base/test_data_util.h',",
          "733:             'ffmpeg/ffmpeg_common_unittest.cc',",
          "734:             'filters/ffmpeg_audio_decoder_unittest.cc',",
          "735:             'filters/bitstream_converter_unittest.cc',",
          "736:             'filters/chunk_demuxer_unittest.cc',",
          "737:             'filters/ffmpeg_demuxer_unittest.cc',",
          "738:             'filters/ffmpeg_glue_unittest.cc',",
          "739:             'filters/ffmpeg_h264_bitstream_converter_unittest.cc',",
          "740:             'filters/ffmpeg_video_decoder_unittest.cc',",
          "741:             'filters/pipeline_integration_test.cc',",
          "742:             'filters/pipeline_integration_test_base.cc',",
          "743:             'mp4/mp4_stream_parser_unittest.cc',",
          "744:             'webm/webm_cluster_parser_unittest.cc',",
          "745:           ],",
          "746:         }],",
          "747:         ['OS == \\\"linux\\\"', {",
          "748:           'conditions': [",
          "749:             ['use_cras == 1', {",
          "750:               'sources': [",
          "751:                 'audio/linux/cras_output_unittest.cc',",
          "752:               ],",
          "753:               'defines': [",
          "754:                 'USE_CRAS',",
          "755:               ],",
          "756:             }],",
          "757:           ],",
          "758:         }],",
          "759:         [ 'target_arch==\\\"ia32\\\" or target_arch==\\\"x64\\\"', {",
          "760:           'sources': [",
          "761:             'base/simd/convert_rgb_to_yuv_unittest.cc',",
          "762:           ],",
          "763:         }],",
          "764:         ['proprietary_codecs==1 or branding==\\\"Chrome\\\"', {",
          "765:           'sources': [",
          "766:             'mp4/avc_unittest.cc',",
          "767:             'mp4/box_reader_unittest.cc',",
          "768:             'mp4/mp4_stream_parser_unittest.cc',",
          "769:             'mp4/offset_byte_queue_unittest.cc',",
          "770:           ],",
          "771:         }],",
          "772:       ],",
          "773:     },",
          "774:     {",
          "775:       'target_name': 'media_test_support',",
          "776:       'type': 'static_library',",
          "777:       'dependencies': [",
          "778:         'media',",
          "779:         '../base/base.gyp:base',",
          "780:         '../testing/gmock.gyp:gmock',",
          "781:         '../testing/gtest.gyp:gtest',",
          "782:       ],",
          "783:       'sources': [",
          "784:         'audio/test_audio_input_controller_factory.cc',",
          "785:         'audio/test_audio_input_controller_factory.h',",
          "786:         'base/mock_callback.cc',",
          "787:         'base/mock_callback.h',",
          "788:         'base/mock_data_source_host.cc',",
          "789:         'base/mock_data_source_host.h',",
          "790:         'base/mock_demuxer_host.cc',",
          "791:         'base/mock_demuxer_host.h',",
          "792:         'base/mock_filter_host.cc',",
          "793:         'base/mock_filter_host.h',",
          "794:         'base/mock_filters.cc',",
          "795:         'base/mock_filters.h',",
          "796:       ],",
          "797:     },",
          "798:     {",
          "799:       'target_name': 'scaler_bench',",
          "800:       'type': 'executable',",
          "801:       'dependencies': [",
          "802:         'media',",
          "803:         'yuv_convert',",
          "804:         '../base/base.gyp:base',",
          "805:         '../skia/skia.gyp:skia',",
          "806:       ],",
          "807:       'sources': [",
          "808:         'tools/scaler_bench/scaler_bench.cc',",
          "809:       ],",
          "810:     },",
          "811:     {",
          "812:       'target_name': 'qt_faststart',",
          "813:       'type': 'executable',",
          "814:       'sources': [",
          "815:         'tools/qt_faststart/qt_faststart.c'",
          "816:       ],",
          "817:     },",
          "818:     {",
          "819:       'target_name': 'seek_tester',",
          "820:       'type': 'executable',",
          "821:       'dependencies': [",
          "822:         'media',",
          "823:         '../base/base.gyp:base',",
          "824:       ],",
          "825:       'sources': [",
          "826:         'tools/seek_tester/seek_tester.cc',",
          "827:       ],",
          "828:     },",
          "829:   ],",
          "830:   'conditions': [",
          "831:     ['OS==\\\"win\\\"', {",
          "832:       'targets': [",
          "833:         {",
          "834:           'target_name': 'player_wtl',",
          "835:           'type': 'executable',",
          "836:           'dependencies': [",
          "837:             'media',",
          "838:             'yuv_convert',",
          "839:             '../base/base.gyp:base',",
          "840:             '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',",
          "841:             '../ui/ui.gyp:ui',",
          "842:           ],",
          "843:           'include_dirs': [",
          "844:             '<(DEPTH)/third_party/wtl/include',",
          "845:           ],",
          "846:           'sources': [",
          "847:             'tools/player_wtl/list.h',",
          "848:             'tools/player_wtl/mainfrm.h',",
          "849:             'tools/player_wtl/movie.cc',",
          "850:             'tools/player_wtl/movie.h',",
          "851:             'tools/player_wtl/player_wtl.cc',",
          "852:             'tools/player_wtl/player_wtl.rc',",
          "853:             'tools/player_wtl/props.h',",
          "854:             'tools/player_wtl/seek.h',",
          "855:             'tools/player_wtl/resource.h',",
          "856:             'tools/player_wtl/view.h',",
          "857:           ],",
          "858:           'msvs_settings': {",
          "859:             'VCLinkerTool': {",
          "860:               'SubSystem': '2',         # Set /SUBSYSTEM:WINDOWS",
          "861:             },",
          "862:           },",
          "863:           'defines': [",
          "864:             '_CRT_SECURE_NO_WARNINGS=1',",
          "865:           ],",
          "866:         },",
          "867:       ],",
          "868:     }],",
          "869:     ['OS == \\\"win\\\" or toolkit_uses_gtk == 1', {",
          "870:       'targets': [",
          "871:         {",
          "872:           'target_name': 'shader_bench',",
          "873:           'type': 'executable',",
          "874:           'dependencies': [",
          "875:             'media',",
          "876:             'yuv_convert',",
          "877:             '../base/base.gyp:base',",
          "878:             '../ui/gl/gl.gyp:gl',",
          "879:           ],",
          "880:           'sources': [",
          "881:             'tools/shader_bench/shader_bench.cc',",
          "882:             'tools/shader_bench/cpu_color_painter.cc',",
          "883:             'tools/shader_bench/cpu_color_painter.h',",
          "884:             'tools/shader_bench/gpu_color_painter.cc',",
          "885:             'tools/shader_bench/gpu_color_painter.h',",
          "886:             'tools/shader_bench/gpu_painter.cc',",
          "887:             'tools/shader_bench/gpu_painter.h',",
          "888:             'tools/shader_bench/painter.cc',",
          "889:             'tools/shader_bench/painter.h',",
          "890:             'tools/shader_bench/window.cc',",
          "891:             'tools/shader_bench/window.h',",
          "892:           ],",
          "893:           'conditions': [",
          "894:             ['toolkit_uses_gtk == 1', {",
          "895:               'dependencies': [",
          "896:                 '../build/linux/system.gyp:gtk',",
          "897:               ],",
          "898:               'sources': [",
          "899:                 'tools/shader_bench/window_linux.cc',",
          "900:               ],",
          "901:             }],",
          "902:             ['OS==\\\"win\\\"', {",
          "903:               'dependencies': [",
          "904:                 '../third_party/angle/src/build_angle.gyp:libEGL',",
          "905:                 '../third_party/angle/src/build_angle.gyp:libGLESv2',",
          "906:               ],",
          "907:               'sources': [",
          "908:                 'tools/shader_bench/window_win.cc',",
          "909:               ],",
          "910:             }],",
          "911:           ],",
          "912:         },",
          "913:       ],",
          "914:     }],",
          "915:     ['OS == \\\"linux\\\" and target_arch != \\\"arm\\\"', {",
          "916:       'targets': [",
          "917:         {",
          "918:           'target_name': 'tile_render_bench',",
          "919:           'type': 'executable',",
          "920:           'dependencies': [",
          "921:             '../base/base.gyp:base',",
          "922:             '../ui/gl/gl.gyp:gl',",
          "923:           ],",
          "924:           'libraries': [",
          "925:             '-lGL',",
          "926:             '-ldl',",
          "927:           ],",
          "928:           'sources': [",
          "929:             'tools/tile_render_bench/tile_render_bench.cc',",
          "930:           ],",
          "931:         },",
          "932:       ],",
          "933:     }],",
          "934:     ['os_posix == 1 and OS != \\\"mac\\\" and OS != \\\"android\\\"', {",
          "935:       'targets': [",
          "936:         {",
          "937:           'target_name': 'player_x11',",
          "938:           'type': 'executable',",
          "939:           'dependencies': [",
          "940:             'media',",
          "941:             'yuv_convert',",
          "942:             '../base/base.gyp:base',",
          "943:             '../ui/gl/gl.gyp:gl',",
          "944:           ],",
          "945:           'link_settings': {",
          "946:             'libraries': [",
          "947:               '-ldl',",
          "948:               '-lX11',",
          "949:               '-lXrender',",
          "950:               '-lXext',",
          "951:             ],",
          "952:           },",
          "953:           'sources': [",
          "954:             'tools/player_x11/data_source_logger.cc',",
          "955:             'tools/player_x11/data_source_logger.h',",
          "956:             'tools/player_x11/gl_video_renderer.cc',",
          "957:             'tools/player_x11/gl_video_renderer.h',",
          "958:             'tools/player_x11/player_x11.cc',",
          "959:             'tools/player_x11/x11_video_renderer.cc',",
          "960:             'tools/player_x11/x11_video_renderer.h',",
          "961:           ],",
          "962:         },",
          "963:       ],",
          "964:     }],",
          "965:     ['OS == \\\"android\\\"', {",
          "966:       'targets': [",
          "967:         {",
          "968:           'target_name': 'player_android',",
          "969:           'type': 'static_library',",
          "970:           'sources': [",
          "971:             'base/android/media_player_bridge.cc',",
          "972:             'base/android/media_player_bridge.h',",
          "973:           ],",
          "974:           'dependencies': [",
          "975:             '../base/base.gyp:base',",
          "976:           ],",
          "977:           'include_dirs': [",
          "978:             '<(SHARED_INTERMEDIATE_DIR)/media',",
          "979:           ],",
          "980:           'actions': [",
          "981:             {",
          "982:               'action_name': 'generate-jni-headers',",
          "983:               'inputs': [",
          "984:                 '../base/android/jni_generator/jni_generator.py',",
          "985:                 'base/android/java/src/org/chromium/media/MediaPlayerListener.java',",
          "986:               ],",
          "987:               'outputs': [",
          "988:                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',",
          "989:               ],",
          "990:               'action': [",
          "991:                 'python',",
          "992:                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',",
          "993:                 '-o',",
          "994:                 '<@(_inputs)',",
          "995:                 '<@(_outputs)',",
          "996:               ],",
          "997:             },",
          "998:           ],",
          "999:         },",
          "1000:         {",
          "1001:           'target_name': 'media_java',",
          "1002:           'type': 'none',",
          "1003:           'dependencies': [ '../base/base.gyp:base_java' ],",
          "1004:           'variables': {",
          "1005:             'package_name': 'media',",
          "1006:             'java_in_dir': 'base/android/java',",
          "1007:           },",
          "1008:           'includes': [ '../build/java.gypi' ],",
          "1009:         },",
          "1011:       ],",
          "1012:     }, { # OS != \\\"android\\\"'",
          "1013:       # Android does not use ffmpeg, so disable the targets which require it.",
          "1014:       'targets': [",
          "1015:         {",
          "1016:           'target_name': 'ffmpeg_unittests',",
          "1017:           'type': 'executable',",
          "1018:           'dependencies': [",
          "1019:             'media',",
          "1020:             'media_test_support',",
          "1021:             '../base/base.gyp:base',",
          "1022:             '../base/base.gyp:base_i18n',",
          "1023:             '../base/base.gyp:test_support_base',",
          "1024:             '../base/base.gyp:test_support_perf',",
          "1025:             '../testing/gtest.gyp:gtest',",
          "1026:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1027:           ],",
          "1028:           'sources': [",
          "1029:             'ffmpeg/ffmpeg_unittest.cc',",
          "1030:           ],",
          "1031:           'conditions': [",
          "1032:             ['toolkit_uses_gtk == 1', {",
          "1033:               'dependencies': [",
          "1034:                 # Needed for the following #include chain:",
          "1035:                 #   base/run_all_unittests.cc",
          "1036:                 #   ../base/test_suite.h",
          "1037:                 #   gtk/gtk.h",
          "1038:                 '../build/linux/system.gyp:gtk',",
          "1039:               ],",
          "1040:               'conditions': [",
          "1041:                 ['linux_use_tcmalloc==1', {",
          "1042:                   'dependencies': [",
          "1043:                     '../base/allocator/allocator.gyp:allocator',",
          "1044:                   ],",
          "1045:                 }],",
          "1046:               ],",
          "1047:             }],",
          "1048:           ],",
          "1049:         },",
          "1050:         {",
          "1051:           'target_name': 'ffmpeg_regression_tests',",
          "1052:           'type': 'executable',",
          "1053:           'dependencies': [",
          "1054:             'media',",
          "1055:             'media_test_support',",
          "1056:             '../base/base.gyp:test_support_base',",
          "1057:             '../testing/gmock.gyp:gmock',",
          "1058:             '../testing/gtest.gyp:gtest',",
          "1059:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1060:           ],",
          "1061:           'sources': [",
          "1062:             'base/test_data_util.cc',",
          "1063:             'base/run_all_unittests.cc',",
          "1064:             'ffmpeg/ffmpeg_regression_tests.cc',",
          "1065:             'filters/pipeline_integration_test_base.cc',",
          "1066:           ],",
          "1067:           'conditions': [",
          "1068:             ['os_posix==1 and OS!=\\\"mac\\\"', {",
          "1069:               'conditions': [",
          "1070:                 ['linux_use_tcmalloc==1', {",
          "1071:                   'dependencies': [",
          "1072:                     '../base/allocator/allocator.gyp:allocator',",
          "1073:                   ],",
          "1074:                 }],",
          "1075:               ],",
          "1076:             }],",
          "1077:           ],",
          "1078:         },",
          "1079:         {",
          "1080:           'target_name': 'ffmpeg_tests',",
          "1081:           'type': 'executable',",
          "1082:           'dependencies': [",
          "1083:             'media',",
          "1084:             '../base/base.gyp:base',",
          "1085:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1086:           ],",
          "1087:           'sources': [",
          "1088:             'test/ffmpeg_tests/ffmpeg_tests.cc',",
          "1089:           ],",
          "1090:         },",
          "1091:         {",
          "1092:           'target_name': 'media_bench',",
          "1093:           'type': 'executable',",
          "1094:           'dependencies': [",
          "1095:             'media',",
          "1096:             '../base/base.gyp:base',",
          "1097:             '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',",
          "1098:           ],",
          "1099:           'sources': [",
          "1100:             'tools/media_bench/media_bench.cc',",
          "1101:           ],",
          "1102:         },",
          "1103:       ],",
          "1104:     }]",
          "1105:   ],",
          "1106: }",
          "1107: \" 0 64 (face font-lock-comment-face) 64 137 (face font-lock-comment-face) 137 166 (face font-lock-comment-face) 166 171 nil 171 172 (face font-lock-string-face) 172 181 (face font-lock-keyword-face) 181 182 (face font-lock-string-face) 182 190 nil 190 191 (face font-lock-string-face) 191 204 (face font-lock-variable-name-face) 204 205 (face font-lock-string-face) 205 214 nil 214 269 (face font-lock-comment-face) 269 273 nil 273 274 (face font-lock-string-face) 274 289 (face font-lock-variable-name-face) 289 290 (face font-lock-string-face) 290 299 nil 299 365 (face font-lock-comment-face) 365 369 nil 369 370 (face font-lock-string-face) 370 379 (face font-lock-variable-name-face) 379 380 (face font-lock-string-face) 380 392 nil 392 393 (face font-lock-string-face) 393 400 (face font-lock-keyword-face) 400 401 (face font-lock-string-face) 401 417 nil 417 418 (face font-lock-string-face) 418 429 (face font-lock-keyword-face) 429 430 (face font-lock-string-face) 430 432 nil 432 433 (face font-lock-string-face) 433 438 (face font-lock-function-name-face) 438 439 (face font-lock-string-face) 439 447 nil 447 448 (face font-lock-string-face) 448 452 (face font-lock-keyword-face) 452 453 (face font-lock-string-face) 453 455 nil 455 458 (face font-lock-string-face) 458 467 (face font-lock-variable-name-face) 467 469 (face font-lock-string-face) 469 477 nil 477 478 (face font-lock-string-face) 478 490 (face font-lock-keyword-face) 490 491 (face font-lock-string-face) 491 503 nil 503 504 (face font-lock-string-face) 504 515 (face font-lock-function-name-face) 515 516 (face font-lock-string-face) 516 526 nil 526 527 (face font-lock-string-face) 527 548 (face font-lock-function-name-face) 548 549 (face font-lock-string-face) 549 559 nil 559 560 (face font-lock-string-face) 560 643 (face font-lock-function-name-face) 643 644 (face font-lock-string-face) 644 654 nil 654 655 (face font-lock-string-face) 655 696 (face font-lock-function-name-face) 696 697 (face font-lock-string-face) 697 707 nil 707 708 (face font-lock-string-face) 708 735 (face font-lock-function-name-face) 735 736 (face font-lock-string-face) 736 746 nil 746 747 (face font-lock-string-face) 747 784 (face font-lock-function-name-face) 784 785 (face font-lock-string-face) 785 795 nil 795 796 (face font-lock-string-face) 796 811 (face font-lock-function-name-face) 811 812 (face font-lock-string-face) 812 829 nil 829 830 (face font-lock-string-face) 830 837 (face font-lock-keyword-face) 837 838 (face font-lock-string-face) 838 850 nil 850 851 (face font-lock-string-face) 851 871 (face font-lock-preprocessor-face) 871 872 (face font-lock-string-face) 872 889 nil 889 890 (face font-lock-string-face) 890 902 (face font-lock-keyword-face) 902 903 (face font-lock-string-face) 903 915 nil 915 916 (face font-lock-string-face) 916 918 (face font-lock-constant-face) 918 919 (face font-lock-string-face) 919 936 nil 936 937 (face font-lock-string-face) 937 944 (face font-lock-keyword-face) 944 945 (face font-lock-string-face) 945 957 nil 957 958 (face font-lock-string-face) 958 996 (face font-lock-constant-face) 996 997 (face font-lock-string-face) 997 1007 nil 1007 1008 (face font-lock-string-face) 1008 1045 (face font-lock-constant-face) 1045 1046 (face font-lock-string-face) 1046 1056 nil 1056 1057 (face font-lock-string-face) 1057 1100 (face font-lock-constant-face) 1100 1101 (face font-lock-string-face) 1101 1111 nil 1111 1112 (face font-lock-string-face) 1112 1154 (face font-lock-constant-face) 1154 1155 (face font-lock-string-face) 1155 1165 nil 1165 1166 (face font-lock-string-face) 1166 1197 (face font-lock-constant-face) 1197 1198 (face font-lock-string-face) 1198 1208 nil 1208 1209 (face font-lock-string-face) 1209 1239 (face font-lock-constant-face) 1239 1240 (face font-lock-string-face) 1240 1250 nil 1250 1251 (face font-lock-string-face) 1251 1283 (face font-lock-constant-face) 1283 1284 (face font-lock-string-face) 1284 1294 nil 1294 1295 (face font-lock-string-face) 1295 1326 (face font-lock-constant-face) 1326 1327 (face font-lock-string-face) 1327 1337 nil 1337 1338 (face font-lock-string-face) 1338 1369 (face font-lock-constant-face) 1369 1370 (face font-lock-string-face) 1370 1380 nil 1380 1381 (face font-lock-string-face) 1381 1419 (face font-lock-constant-face) 1419 1420 (face font-lock-string-face) 1420 1430 nil 1430 1431 (face font-lock-string-face) 1431 1467 (face font-lock-constant-face) 1467 1468 (face font-lock-string-face) 1468 1478 nil 1478 1479 (face font-lock-string-face) 1479 1507 (face font-lock-constant-face) 1507 1508 (face font-lock-string-face) 1508 1518 nil 1518 1519 (face font-lock-string-face) 1519 1546 (face font-lock-constant-face) 1546 1547 (face font-lock-string-face) 1547 1557 nil 1557 1558 (face font-lock-string-face) 1558 1574 (face font-lock-constant-face) 1574 1575 (face font-lock-string-face) 1575 1585 nil 1585 1586 (face font-lock-string-face) 1586 1617 (face font-lock-constant-face) 1617 1618 (face font-lock-string-face) 1618 1628 nil 1628 1629 (face font-lock-string-face) 1629 1659 (face font-lock-constant-face) 1659 1660 (face font-lock-string-face) 1660 1670 nil 1670 1671 (face font-lock-string-face) 1671 1703 (face font-lock-constant-face) 1703 1704 (face font-lock-string-face) 1704 1714 nil 1714 1715 (face font-lock-string-face) 1715 1746 (face font-lock-constant-face) 1746 1747 (face font-lock-string-face) 1747 1757 nil 1757 1758 (face font-lock-string-face) 1758 1784 (face font-lock-constant-face) 1784 1785 (face font-lock-string-face) 1785 1795 nil 1795 1796 (face font-lock-string-face) 1796 1821 (face font-lock-constant-face) 1821 1822 (face font-lock-string-face) 1822 1832 nil 1832 1833 (face font-lock-string-face) 1833 1855 (face font-lock-constant-face) 1855 1856 (face font-lock-string-face) 1856 1866 nil 1866 1867 (face font-lock-string-face) 1867 1888 (face font-lock-constant-face) 1888 1889 (face font-lock-string-face) 1889 1899 nil 1899 1900 (face font-lock-string-face) 1900 1927 (face font-lock-constant-face) 1927 1928 (face font-lock-string-face) 1928 1938 nil 1938 1939 (face font-lock-string-face) 1939 1965 (face font-lock-constant-face) 1965 1966 (face font-lock-string-face) 1966 1976 nil 1976 1977 (face font-lock-string-face) 1977 2009 (face font-lock-constant-face) 2009 2010 (face font-lock-string-face) 2010 2020 nil 2020 2021 (face font-lock-string-face) 2021 2052 (face font-lock-constant-face) 2052 2053 (face font-lock-string-face) 2053 2063 nil 2063 2064 (face font-lock-string-face) 2064 2096 (face font-lock-constant-face) 2096 2097 (face font-lock-string-face) 2097 2107 nil 2107 2108 (face font-lock-string-face) 2108 2139 (face font-lock-constant-face) 2139 2140 (face font-lock-string-face) 2140 2150 nil 2150 2151 (face font-lock-string-face) 2151 2188 (face font-lock-constant-face) 2188 2189 (face font-lock-string-face) 2189 2199 nil 2199 2200 (face font-lock-string-face) 2200 2236 (face font-lock-constant-face) 2236 2237 (face font-lock-string-face) 2237 2247 nil 2247 2248 (face font-lock-string-face) 2248 2275 (face font-lock-constant-face) 2275 2276 (face font-lock-string-face) 2276 2286 nil 2286 2287 (face font-lock-string-face) 2287 2313 (face font-lock-constant-face) 2313 2314 (face font-lock-string-face) 2314 2324 nil 2324 2325 (face font-lock-string-face) 2325 2352 (face font-lock-constant-face) 2352 2353 (face font-lock-string-face) 2353 2363 nil 2363 2364 (face font-lock-string-face) 2364 2390 (face font-lock-constant-face) 2390 2391 (face font-lock-string-face) 2391 2401 nil 2401 2402 (face font-lock-string-face) 2402 2427 (face font-lock-constant-face) 2427 2428 (face font-lock-string-face) 2428 2438 nil 2438 2439 (face font-lock-string-face) 2439 2463 (face font-lock-constant-face) 2463 2464 (face font-lock-string-face) 2464 2474 nil 2474 2475 (face font-lock-string-face) 2475 2494 (face font-lock-constant-face) 2494 2495 (face font-lock-string-face) 2495 2505 nil 2505 2506 (face font-lock-string-face) 2506 2524 (face font-lock-constant-face) 2524 2525 (face font-lock-string-face) 2525 2535 nil 2535 2536 (face font-lock-string-face) 2536 2571 (face font-lock-constant-face) 2571 2572 (face font-lock-string-face) 2572 2582 nil 2582 2583 (face font-lock-string-face) 2583 2617 (face font-lock-constant-face) 2617 2618 (face font-lock-string-face) 2618 2628 nil 2628 2629 (face font-lock-string-face) 2629 2668 (face font-lock-constant-face) 2668 2669 (face font-lock-string-face) 2669 2679 nil 2679 2680 (face font-lock-string-face) 2680 2721 (face font-lock-constant-face) 2721 2722 (face font-lock-string-face) 2722 2732 nil 2732 2733 (face font-lock-string-face) 2733 2765 (face font-lock-constant-face) 2765 2766 (face font-lock-string-face) 2766 2776 nil 2776 2777 (face font-lock-string-face) 2777 2808 (face font-lock-constant-face) 2808 2809 (face font-lock-string-face) 2809 2819 nil 2819 2820 (face font-lock-string-face) 2820 2853 (face font-lock-constant-face) 2853 2854 (face font-lock-string-face) 2854 2864 nil 2864 2865 (face font-lock-string-face) 2865 2897 (face font-lock-constant-face) 2897 2898 (face font-lock-string-face) 2898 2908 nil 2908 2909 (face font-lock-string-face) 2909 2943 (face font-lock-constant-face) 2943 2944 (face font-lock-string-face) 2944 2954 nil 2954 2955 (face font-lock-string-face) 2955 2988 (face font-lock-constant-face) 2988 2989 (face font-lock-string-face) 2989 2999 nil 2999 3000 (face font-lock-string-face) 3000 3025 (face font-lock-constant-face) 3025 3026 (face font-lock-string-face) 3026 3036 nil 3036 3037 (face font-lock-string-face) 3037 3061 (face font-lock-constant-face) 3061 3062 (face font-lock-string-face) 3062 3072 nil 3072 3073 (face font-lock-string-face) 3073 3099 (face font-lock-constant-face) 3099 3100 (face font-lock-string-face) 3100 3110 nil 3110 3111 (face font-lock-string-face) 3111 3136 (face font-lock-constant-face) 3136 3137 (face font-lock-string-face) 3137 3147 nil 3147 3148 (face font-lock-string-face) 3148 3172 (face font-lock-constant-face) 3172 3173 (face font-lock-string-face) 3173 3183 nil 3183 3184 (face font-lock-string-face) 3184 3207 (face font-lock-constant-face) 3207 3208 (face font-lock-string-face) 3208 3218 nil 3218 3219 (face font-lock-string-face) 3219 3246 (face font-lock-constant-face) 3246 3247 (face font-lock-string-face) 3247 3257 nil 3257 3258 (face font-lock-string-face) 3258 3284 (face font-lock-constant-face) 3284 3285 (face font-lock-string-face) 3285 3295 nil 3295 3296 (face font-lock-string-face) 3296 3322 (face font-lock-constant-face) 3322 3323 (face font-lock-string-face) 3323 3333 nil 3333 3334 (face font-lock-string-face) 3334 3359 (face font-lock-constant-face) 3359 3360 (face font-lock-string-face) 3360 3370 nil 3370 3371 (face font-lock-string-face) 3371 3409 (face font-lock-constant-face) 3409 3410 (face font-lock-string-face) 3410 3420 nil 3420 3421 (face font-lock-string-face) 3421 3458 (face font-lock-constant-face) 3458 3459 (face font-lock-string-face) 3459 3469 nil 3469 3470 (face font-lock-string-face) 3470 3498 (face font-lock-constant-face) 3498 3499 (face font-lock-string-face) 3499 3509 nil 3509 3510 (face font-lock-string-face) 3510 3537 (face font-lock-constant-face) 3537 3538 (face font-lock-string-face) 3538 3548 nil 3548 3549 (face font-lock-string-face) 3549 3589 (face font-lock-constant-face) 3589 3590 (face font-lock-string-face) 3590 3600 nil 3600 3601 (face font-lock-string-face) 3601 3640 (face font-lock-constant-face) 3640 3641 (face font-lock-string-face) 3641 3651 nil 3651 3652 (face font-lock-string-face) 3652 3693 (face font-lock-constant-face) 3693 3694 (face font-lock-string-face) 3694 3704 nil 3704 3705 (face font-lock-string-face) 3705 3745 (face font-lock-constant-face) 3745 3746 (face font-lock-string-face) 3746 3756 nil 3756 3757 (face font-lock-string-face) 3757 3787 (face font-lock-constant-face) 3787 3788 (face font-lock-string-face) 3788 3798 nil 3798 3799 (face font-lock-string-face) 3799 3828 (face font-lock-constant-face) 3828 3829 (face font-lock-string-face) 3829 3839 nil 3839 3840 (face font-lock-string-face) 3840 3869 (face font-lock-constant-face) 3869 3870 (face font-lock-string-face) 3870 3880 nil 3880 3881 (face font-lock-string-face) 3881 3909 (face font-lock-constant-face) 3909 3910 (face font-lock-string-face) 3910 3920 nil 3920 3921 (face font-lock-string-face) 3921 3945 (face font-lock-constant-face) 3945 3946 (face font-lock-string-face) 3946 3956 nil 3956 3957 (face font-lock-string-face) 3957 3980 (face font-lock-constant-face) 3980 3981 (face font-lock-string-face) 3981 3991 nil 3991 3992 (face font-lock-string-face) 3992 4019 (face font-lock-constant-face) 4019 4020 (face font-lock-string-face) 4020 4030 nil 4030 4031 (face font-lock-string-face) 4031 4057 (face font-lock-constant-face) 4057 4058 (face font-lock-string-face) 4058 4068 nil 4068 4069 (face font-lock-string-face) 4069 4090 (face font-lock-constant-face) 4090 4091 (face font-lock-string-face) 4091 4101 nil 4101 4102 (face font-lock-string-face) 4102 4122 (face font-lock-constant-face) 4122 4123 (face font-lock-string-face) 4123 4133 nil 4133 4134 (face font-lock-string-face) 4134 4157 (face font-lock-constant-face) 4157 4158 (face font-lock-string-face) 4158 4168 nil 4168 4169 (face font-lock-string-face) 4169 4191 (face font-lock-constant-face) 4191 4192 (face font-lock-string-face) 4192 4202 nil 4202 4203 (face font-lock-string-face) 4203 4243 (face font-lock-constant-face) 4243 4244 (face font-lock-string-face) 4244 4254 nil 4254 4255 (face font-lock-string-face) 4255 4294 (face font-lock-constant-face) 4294 4295 (face font-lock-string-face) 4295 4305 nil 4305 4306 (face font-lock-string-face) 4306 4347 (face font-lock-constant-face) 4347 4348 (face font-lock-string-face) 4348 4358 nil 4358 4359 (face font-lock-string-face) 4359 4399 (face font-lock-constant-face) 4399 4400 (face font-lock-string-face) 4400 4410 nil 4410 4411 (face font-lock-string-face) 4411 4441 (face font-lock-constant-face) 4441 4442 (face font-lock-string-face) 4442 4452 nil 4452 4453 (face font-lock-string-face) 4453 4482 (face font-lock-constant-face) 4482 4483 (face font-lock-string-face) 4483 4493 nil 4493 4494 (face font-lock-string-face) 4494 4523 (face font-lock-constant-face) 4523 4524 (face font-lock-string-face) 4524 4534 nil 4534 4535 (face font-lock-string-face) 4535 4563 (face font-lock-constant-face) 4563 4564 (face font-lock-string-face) 4564 4574 nil 4574 4575 (face font-lock-string-face) 4575 4610 (face font-lock-constant-face) 4610 4611 (face font-lock-string-face) 4611 4621 nil 4621 4622 (face font-lock-string-face) 4622 4656 (face font-lock-constant-face) 4656 4657 (face font-lock-string-face) 4657 4667 nil 4667 4668 (face font-lock-string-face) 4668 4697 (face font-lock-constant-face) 4697 4698 (face font-lock-string-face) 4698 4708 nil 4708 4709 (face font-lock-string-face) 4709 4737 (face font-lock-constant-face) 4737 4738 (face font-lock-string-face) 4738 4748 nil 4748 4749 (face font-lock-string-face) 4749 4780 (face font-lock-constant-face) 4780 4781 (face font-lock-string-face) 4781 4791 nil 4791 4792 (face font-lock-string-face) 4792 4822 (face font-lock-constant-face) 4822 4823 (face font-lock-string-face) 4823 4833 nil 4833 4834 (face font-lock-string-face) 4834 4869 (face font-lock-constant-face) 4869 4870 (face font-lock-string-face) 4870 4880 nil 4880 4881 (face font-lock-string-face) 4881 4915 (face font-lock-constant-face) 4915 4916 (face font-lock-string-face) 4916 4926 nil 4926 4927 (face font-lock-string-face) 4927 4948 (face font-lock-constant-face) 4948 4949 (face font-lock-string-face) 4949 4959 nil 4959 4960 (face font-lock-string-face) 4960 4980 (face font-lock-constant-face) 4980 4981 (face font-lock-string-face) 4981 4991 nil 4991 4992 (face font-lock-string-face) 4992 5020 (face font-lock-constant-face) 5020 5021 (face font-lock-string-face) 5021 5031 nil 5031 5032 (face font-lock-string-face) 5032 5059 (face font-lock-constant-face) 5059 5060 (face font-lock-string-face) 5060 5070 nil 5070 5071 (face font-lock-string-face) 5071 5092 (face font-lock-constant-face) 5092 5093 (face font-lock-string-face) 5093 5103 nil 5103 5104 (face font-lock-string-face) 5104 5132 (face font-lock-constant-face) 5132 5133 (face font-lock-string-face) 5133 5143 nil 5143 5144 (face font-lock-string-face) 5144 5171 (face font-lock-constant-face) 5171 5172 (face font-lock-string-face) 5172 5182 nil 5182 5183 (face font-lock-string-face) 5183 5217 (face font-lock-constant-face) 5217 5218 (face font-lock-string-face) 5218 5228 nil 5228 5229 (face font-lock-string-face) 5229 5262 (face font-lock-constant-face) 5262 5263 (face font-lock-string-face) 5263 5273 nil 5273 5274 (face font-lock-string-face) 5274 5297 (face font-lock-constant-face) 5297 5298 (face font-lock-string-face) 5298 5308 nil 5308 5309 (face font-lock-string-face) 5309 5324 (face font-lock-constant-face) 5324 5325 (face font-lock-string-face) 5325 5335 nil 5335 5336 (face font-lock-string-face) 5336 5350 (face font-lock-constant-face) 5350 5351 (face font-lock-string-face) 5351 5361 nil 5361 5362 (face font-lock-string-face) 5362 5380 (face font-lock-constant-face) 5380 5381 (face font-lock-string-face) 5381 5391 nil 5391 5392 (face font-lock-string-face) 5392 5409 (face font-lock-constant-face) 5409 5410 (face font-lock-string-face) 5410 5420 nil 5420 5421 (face font-lock-string-face) 5421 5443 (face font-lock-constant-face) 5443 5444 (face font-lock-string-face) 5444 5454 nil 5454 5455 (face font-lock-string-face) 5455 5476 (face font-lock-constant-face) 5476 5477 (face font-lock-string-face) 5477 5487 nil 5487 5488 (face font-lock-string-face) 5488 5501 (face font-lock-constant-face) 5501 5502 (face font-lock-string-face) 5502 5512 nil 5512 5513 (face font-lock-string-face) 5513 5525 (face font-lock-constant-face) 5525 5526 (face font-lock-string-face) 5526 5536 nil 5536 5537 (face font-lock-string-face) 5537 5561 (face font-lock-constant-face) 5561 5562 (face font-lock-string-face) 5562 5572 nil 5572 5573 (face font-lock-string-face) 5573 5596 (face font-lock-constant-face) 5596 5597 (face font-lock-string-face) 5597 5607 nil 5607 5608 (face font-lock-string-face) 5608 5627 (face font-lock-constant-face) 5627 5628 (face font-lock-string-face) 5628 5638 nil 5638 5639 (face font-lock-string-face) 5639 5657 (face font-lock-constant-face) 5657 5658 (face font-lock-string-face) 5658 5668 nil 5668 5669 (face font-lock-string-face) 5669 5688 (face font-lock-constant-face) 5688 5689 (face font-lock-string-face) 5689 5699 nil 5699 5700 (face font-lock-string-face) 5700 5718 (face font-lock-constant-face) 5718 5719 (face font-lock-string-face) 5719 5729 nil 5729 5730 (face font-lock-string-face) 5730 5752 (face font-lock-constant-face) 5752 5753 (face font-lock-string-face) 5753 5763 nil 5763 5764 (face font-lock-string-face) 5764 5785 (face font-lock-constant-face) 5785 5786 (face font-lock-string-face) 5786 5796 nil 5796 5797 (face font-lock-string-face) 5797 5819 (face font-lock-constant-face) 5819 5820 (face font-lock-string-face) 5820 5830 nil 5830 5831 (face font-lock-string-face) 5831 5852 (face font-lock-constant-face) 5852 5853 (face font-lock-string-face) 5853 5863 nil 5863 5864 (face font-lock-string-face) 5864 5880 (face font-lock-constant-face) 5880 5881 (face font-lock-string-face) 5881 5891 nil 5891 5892 (face font-lock-string-face) 5892 5915 (face font-lock-constant-face) 5915 5916 (face font-lock-string-face) 5916 5926 nil 5926 5927 (face font-lock-string-face) 5927 5942 (face font-lock-constant-face) 5942 5943 (face font-lock-string-face) 5943 5953 nil 5953 5954 (face font-lock-string-face) 5954 5968 (face font-lock-constant-face) 5968 5969 (face font-lock-string-face) 5969 5979 nil 5979 5980 (face font-lock-string-face) 5980 6002 (face font-lock-constant-face) 6002 6003 (face font-lock-string-face) 6003 6013 nil 6013 6014 (face font-lock-string-face) 6014 6035 (face font-lock-constant-face) 6035 6036 (face font-lock-string-face) 6036 6046 nil 6046 6047 (face font-lock-string-face) 6047 6059 (face font-lock-constant-face) 6059 6060 (face font-lock-string-face) 6060 6070 nil 6070 6071 (face font-lock-string-face) 6071 6082 (face font-lock-constant-face) 6082 6083 (face font-lock-string-face) 6083 6093 nil 6093 6094 (face font-lock-string-face) 6094 6119 (face font-lock-constant-face) 6119 6120 (face font-lock-string-face) 6120 6130 nil 6130 6131 (face font-lock-string-face) 6131 6155 (face font-lock-constant-face) 6155 6156 (face font-lock-string-face) 6156 6166 nil 6166 6167 (face font-lock-string-face) 6167 6185 (face font-lock-constant-face) 6185 6186 (face font-lock-string-face) 6186 6196 nil 6196 6197 (face font-lock-string-face) 6197 6212 (face font-lock-constant-face) 6212 6213 (face font-lock-string-face) 6213 6223 nil 6223 6224 (face font-lock-string-face) 6224 6238 (face font-lock-constant-face) 6238 6239 (face font-lock-string-face) 6239 6249 nil 6249 6250 (face font-lock-string-face) 6250 6282 (face font-lock-constant-face) 6282 6283 (face font-lock-string-face) 6283 6293 nil 6293 6294 (face font-lock-string-face) 6294 6325 (face font-lock-constant-face) 6325 6326 (face font-lock-string-face) 6326 6336 nil 6336 6337 (face font-lock-string-face) 6337 6349 (face font-lock-constant-face) 6349 6350 (face font-lock-string-face) 6350 6360 nil 6360 6361 (face font-lock-string-face) 6361 6382 (face font-lock-constant-face) 6382 6383 (face font-lock-string-face) 6383 6393 nil 6393 6394 (face font-lock-string-face) 6394 6413 (face font-lock-constant-face) 6413 6414 (face font-lock-string-face) 6414 6424 nil 6424 6425 (face font-lock-string-face) 6425 6442 (face font-lock-constant-face) 6442 6443 (face font-lock-string-face) 6443 6453 nil 6453 6454 (face font-lock-string-face) 6454 6470 (face font-lock-constant-face) 6470 6471 (face font-lock-string-face) 6471 6481 nil 6481 6482 (face font-lock-string-face) 6482 6504 (face font-lock-constant-face) 6504 6505 (face font-lock-string-face) 6505 6515 nil 6515 6516 (face font-lock-string-face) 6516 6535 (face font-lock-constant-face) 6535 6536 (face font-lock-string-face) 6536 6546 nil 6546 6547 (face font-lock-string-face) 6547 6569 (face font-lock-constant-face) 6569 6570 (face font-lock-string-face) 6570 6580 nil 6580 6581 (face font-lock-string-face) 6581 6602 (face font-lock-constant-face) 6602 6603 (face font-lock-string-face) 6603 6613 nil 6613 6614 (face font-lock-string-face) 6614 6631 (face font-lock-constant-face) 6631 6632 (face font-lock-string-face) 6632 6642 nil 6642 6643 (face font-lock-string-face) 6643 6671 (face font-lock-constant-face) 6671 6672 (face font-lock-string-face) 6672 6682 nil 6682 6683 (face font-lock-string-face) 6683 6710 (face font-lock-constant-face) 6710 6711 (face font-lock-string-face) 6711 6721 nil 6721 6722 (face font-lock-string-face) 6722 6738 (face font-lock-constant-face) 6738 6739 (face font-lock-string-face) 6739 6749 nil 6749 6750 (face font-lock-string-face) 6750 6765 (face font-lock-constant-face) 6765 6766 (face font-lock-string-face) 6766 6776 nil 6776 6777 (face font-lock-string-face) 6777 6800 (face font-lock-constant-face) 6800 6801 (face font-lock-string-face) 6801 6811 nil 6811 6812 (face font-lock-string-face) 6812 6834 (face font-lock-constant-face) 6834 6835 (face font-lock-string-face) 6835 6845 nil 6845 6846 (face font-lock-string-face) 6846 6860 (face font-lock-constant-face) 6860 6861 (face font-lock-string-face) 6861 6871 nil 6871 6872 (face font-lock-string-face) 6872 6885 (face font-lock-constant-face) 6885 6886 (face font-lock-string-face) 6886 6896 nil 6896 6897 (face font-lock-string-face) 6897 6920 (face font-lock-constant-face) 6920 6921 (face font-lock-string-face) 6921 6931 nil 6931 6932 (face font-lock-string-face) 6932 6954 (face font-lock-constant-face) 6954 6955 (face font-lock-string-face) 6955 6965 nil 6965 6966 (face font-lock-string-face) 6966 6986 (face font-lock-constant-face) 6986 6987 (face font-lock-string-face) 6987 6997 nil 6997 6998 (face font-lock-string-face) 6998 7017 (face font-lock-constant-face) 7017 7018 (face font-lock-string-face) 7018 7028 nil 7028 7029 (face font-lock-string-face) 7029 7050 (face font-lock-constant-face) 7050 7051 (face font-lock-string-face) 7051 7061 nil 7061 7062 (face font-lock-string-face) 7062 7082 (face font-lock-constant-face) 7082 7083 (face font-lock-string-face) 7083 7093 nil 7093 7094 (face font-lock-string-face) 7094 7122 (face font-lock-constant-face) 7122 7123 (face font-lock-string-face) 7123 7133 nil 7133 7134 (face font-lock-string-face) 7134 7161 (face font-lock-constant-face) 7161 7162 (face font-lock-string-face) 7162 7172 nil 7172 7173 (face font-lock-string-face) 7173 7194 (face font-lock-constant-face) 7194 7195 (face font-lock-string-face) 7195 7205 nil 7205 7206 (face font-lock-string-face) 7206 7226 (face font-lock-constant-face) 7226 7227 (face font-lock-string-face) 7227 7237 nil 7237 7238 (face font-lock-string-face) 7238 7266 (face font-lock-constant-face) 7266 7267 (face font-lock-string-face) 7267 7277 nil 7277 7278 (face font-lock-string-face) 7278 7305 (face font-lock-constant-face) 7305 7306 (face font-lock-string-face) 7306 7316 nil 7316 7317 (face font-lock-string-face) 7317 7336 (face font-lock-constant-face) 7336 7337 (face font-lock-string-face) 7337 7347 nil 7347 7348 (face font-lock-string-face) 7348 7366 (face font-lock-constant-face) 7366 7367 (face font-lock-string-face) 7367 7377 nil 7377 7378 (face font-lock-string-face) 7378 7399 (face font-lock-constant-face) 7399 7400 (face font-lock-string-face) 7400 7410 nil 7410 7411 (face font-lock-string-face) 7411 7429 (face font-lock-constant-face) 7429 7430 (face font-lock-string-face) 7430 7440 nil 7440 7441 (face font-lock-string-face) 7441 7458 (face font-lock-constant-face) 7458 7459 (face font-lock-string-face) 7459 7469 nil 7469 7470 (face font-lock-string-face) 7470 7493 (face font-lock-constant-face) 7493 7494 (face font-lock-string-face) 7494 7504 nil 7504 7505 (face font-lock-string-face) 7505 7527 (face font-lock-constant-face) 7527 7528 (face font-lock-string-face) 7528 7538 nil 7538 7539 (face font-lock-string-face) 7539 7562 (face font-lock-constant-face) 7562 7563 (face font-lock-string-face) 7563 7573 nil 7573 7574 (face font-lock-string-face) 7574 7596 (face font-lock-constant-face) 7596 7597 (face font-lock-string-face) 7597 7607 nil 7607 7608 (face font-lock-string-face) 7608 7631 (face font-lock-constant-face) 7631 7632 (face font-lock-string-face) 7632 7642 nil 7642 7643 (face font-lock-string-face) 7643 7665 (face font-lock-constant-face) 7665 7666 (face font-lock-string-face) 7666 7676 nil 7676 7677 (face font-lock-string-face) 7677 7705 (face font-lock-constant-face) 7705 7706 (face font-lock-string-face) 7706 7716 nil 7716 7717 (face font-lock-string-face) 7717 7744 (face font-lock-constant-face) 7744 7745 (face font-lock-string-face) 7745 7755 nil 7755 7756 (face font-lock-string-face) 7756 7791 (face font-lock-constant-face) 7791 7792 (face font-lock-string-face) 7792 7802 nil 7802 7803 (face font-lock-string-face) 7803 7837 (face font-lock-constant-face) 7837 7838 (face font-lock-string-face) 7838 7848 nil 7848 7849 (face font-lock-string-face) 7849 7879 (face font-lock-constant-face) 7879 7880 (face font-lock-string-face) 7880 7890 nil 7890 7891 (face font-lock-string-face) 7891 7920 (face font-lock-constant-face) 7920 7921 (face font-lock-string-face) 7921 7931 nil 7931 7932 (face font-lock-string-face) 7932 7962 (face font-lock-constant-face) 7962 7963 (face font-lock-string-face) 7963 7973 nil 7973 7974 (face font-lock-string-face) 7974 8003 (face font-lock-constant-face) 8003 8004 (face font-lock-string-face) 8004 8014 nil 8014 8015 (face font-lock-string-face) 8015 8039 (face font-lock-constant-face) 8039 8040 (face font-lock-string-face) 8040 8050 nil 8050 8051 (face font-lock-string-face) 8051 8074 (face font-lock-constant-face) 8074 8075 (face font-lock-string-face) 8075 8085 nil 8085 8086 (face font-lock-string-face) 8086 8116 (face font-lock-constant-face) 8116 8117 (face font-lock-string-face) 8117 8127 nil 8127 8128 (face font-lock-string-face) 8128 8152 (face font-lock-constant-face) 8152 8153 (face font-lock-string-face) 8153 8163 nil 8163 8164 (face font-lock-string-face) 8164 8187 (face font-lock-constant-face) 8187 8188 (face font-lock-string-face) 8188 8198 nil 8198 8199 (face font-lock-string-face) 8199 8230 (face font-lock-constant-face) 8230 8231 (face font-lock-string-face) 8231 8241 nil 8241 8242 (face font-lock-string-face) 8242 8272 (face font-lock-constant-face) 8272 8273 (face font-lock-string-face) 8273 8283 nil 8283 8284 (face font-lock-string-face) 8284 8309 (face font-lock-constant-face) 8309 8310 (face font-lock-string-face) 8310 8320 nil 8320 8321 (face font-lock-string-face) 8321 8345 (face font-lock-constant-face) 8345 8346 (face font-lock-string-face) 8346 8356 nil 8356 8357 (face font-lock-string-face) 8357 8399 (face font-lock-constant-face) 8399 8400 (face font-lock-string-face) 8400 8410 nil 8410 8411 (face font-lock-string-face) 8411 8452 (face font-lock-constant-face) 8452 8453 (face font-lock-string-face) 8453 8463 nil 8463 8464 (face font-lock-string-face) 8464 8486 (face font-lock-constant-face) 8486 8487 (face font-lock-string-face) 8487 8497 nil 8497 8498 (face font-lock-string-face) 8498 8519 (face font-lock-constant-face) 8519 8520 (face font-lock-string-face) 8520 8530 nil 8530 8531 (face font-lock-string-face) 8531 8562 (face font-lock-constant-face) 8562 8563 (face font-lock-string-face) 8563 8573 nil 8573 8574 (face font-lock-string-face) 8574 8604 (face font-lock-constant-face) 8604 8605 (face font-lock-string-face) 8605 8615 nil 8615 8616 (face font-lock-string-face) 8616 8643 (face font-lock-constant-face) 8643 8644 (face font-lock-string-face) 8644 8654 nil 8654 8655 (face font-lock-string-face) 8655 8681 (face font-lock-constant-face) 8681 8682 (face font-lock-string-face) 8682 8692 nil 8692 8693 (face font-lock-string-face) 8693 8721 (face font-lock-constant-face) 8721 8722 (face font-lock-string-face) 8722 8732 nil 8732 8733 (face font-lock-string-face) 8733 8760 (face font-lock-constant-face) 8760 8761 (face font-lock-string-face) 8761 8771 nil 8771 8772 (face font-lock-string-face) 8772 8805 (face font-lock-constant-face) 8805 8806 (face font-lock-string-face) 8806 8816 nil 8816 8817 (face font-lock-string-face) 8817 8849 (face font-lock-constant-face) 8849 8850 (face font-lock-string-face) 8850 8860 nil 8860 8861 (face font-lock-string-face) 8861 8892 (face font-lock-constant-face) 8892 8893 (face font-lock-string-face) 8893 8903 nil 8903 8904 (face font-lock-string-face) 8904 8934 (face font-lock-constant-face) 8934 8935 (face font-lock-string-face) 8935 8945 nil 8945 8946 (face font-lock-string-face) 8946 8978 (face font-lock-constant-face) 8978 8979 (face font-lock-string-face) 8979 8989 nil 8989 8990 (face font-lock-string-face) 8990 9021 (face font-lock-constant-face) 9021 9022 (face font-lock-string-face) 9022 9032 nil 9032 9033 (face font-lock-string-face) 9033 9063 (face font-lock-constant-face) 9063 9064 (face font-lock-string-face) 9064 9074 nil 9074 9075 (face font-lock-string-face) 9075 9104 (face font-lock-constant-face) 9104 9105 (face font-lock-string-face) 9105 9115 nil 9115 9116 (face font-lock-string-face) 9116 9158 (face font-lock-constant-face) 9158 9159 (face font-lock-string-face) 9159 9169 nil 9169 9170 (face font-lock-string-face) 9170 9211 (face font-lock-constant-face) 9211 9212 (face font-lock-string-face) 9212 9222 nil 9222 9223 (face font-lock-string-face) 9223 9272 (face font-lock-constant-face) 9272 9273 (face font-lock-string-face) 9273 9283 nil 9283 9284 (face font-lock-string-face) 9284 9332 (face font-lock-constant-face) 9332 9333 (face font-lock-string-face) 9333 9343 nil 9343 9344 (face font-lock-string-face) 9344 9388 (face font-lock-constant-face) 9388 9389 (face font-lock-string-face) 9389 9399 nil 9399 9400 (face font-lock-string-face) 9400 9445 (face font-lock-constant-face) 9445 9446 (face font-lock-string-face) 9446 9456 nil 9456 9457 (face font-lock-string-face) 9457 9507 (face font-lock-constant-face) 9507 9508 (face font-lock-string-face) 9508 9518 nil 9518 9519 (face font-lock-string-face) 9519 9570 (face font-lock-constant-face) 9570 9571 (face font-lock-string-face) 9571 9581 nil 9581 9582 (face font-lock-string-face) 9582 9611 (face font-lock-constant-face) 9611 9612 (face font-lock-string-face) 9612 9622 nil 9622 9623 (face font-lock-string-face) 9623 9659 (face font-lock-constant-face) 9659 9660 (face font-lock-string-face) 9660 9670 nil 9670 9671 (face font-lock-string-face) 9671 9714 (face font-lock-constant-face) 9714 9715 (face font-lock-string-face) 9715 9725 nil 9725 9726 (face font-lock-string-face) 9726 9768 (face font-lock-constant-face) 9768 9769 (face font-lock-string-face) 9769 9779 nil 9779 9780 (face font-lock-string-face) 9780 9816 (face font-lock-constant-face) 9816 9817 (face font-lock-string-face) 9817 9827 nil 9827 9828 (face font-lock-string-face) 9828 9863 (face font-lock-constant-face) 9863 9864 (face font-lock-string-face) 9864 9874 nil 9874 9875 (face font-lock-string-face) 9875 9910 (face font-lock-constant-face) 9910 9911 (face font-lock-string-face) 9911 9921 nil 9921 9922 (face font-lock-string-face) 9922 9958 (face font-lock-constant-face) 9958 9959 (face font-lock-string-face) 9959 9969 nil 9969 9970 (face font-lock-string-face) 9970 10005 (face font-lock-constant-face) 10005 10006 (face font-lock-string-face) 10006 10016 nil 10016 10017 (face font-lock-string-face) 10017 10050 (face font-lock-constant-face) 10050 10051 (face font-lock-string-face) 10051 10061 nil 10061 10062 (face font-lock-string-face) 10062 10094 (face font-lock-constant-face) 10094 10095 (face font-lock-string-face) 10095 10105 nil 10105 10106 (face font-lock-string-face) 10106 10150 (face font-lock-constant-face) 10150 10151 (face font-lock-string-face) 10151 10161 nil 10161 10162 (face font-lock-string-face) 10162 10198 (face font-lock-constant-face) 10198 10199 (face font-lock-string-face) 10199 10209 nil 10209 10210 (face font-lock-string-face) 10210 10245 (face font-lock-constant-face) 10245 10246 (face font-lock-string-face) 10246 10256 nil 10256 10257 (face font-lock-string-face) 10257 10296 (face font-lock-constant-face) 10296 10297 (face font-lock-string-face) 10297 10307 nil 10307 10308 (face font-lock-string-face) 10308 10346 (face font-lock-constant-face) 10346 10347 (face font-lock-string-face) 10347 10357 nil 10357 10358 (face font-lock-string-face) 10358 10403 (face font-lock-constant-face) 10403 10404 (face font-lock-string-face) 10404 10414 nil 10414 10415 (face font-lock-string-face) 10415 10459 (face font-lock-constant-face) 10459 10460 (face font-lock-string-face) 10460 10470 nil 10470 10471 (face font-lock-string-face) 10471 10487 (face font-lock-constant-face) 10487 10488 (face font-lock-string-face) 10488 10498 nil 10498 10499 (face font-lock-string-face) 10499 10514 (face font-lock-constant-face) 10514 10515 (face font-lock-string-face) 10515 10525 nil 10525 10526 (face font-lock-string-face) 10526 10559 (face font-lock-constant-face) 10559 10560 (face font-lock-string-face) 10560 10570 nil 10570 10571 (face font-lock-string-face) 10571 10603 (face font-lock-constant-face) 10603 10604 (face font-lock-string-face) 10604 10614 nil 10614 10615 (face font-lock-string-face) 10615 10636 (face font-lock-constant-face) 10636 10637 (face font-lock-string-face) 10637 10647 nil 10647 10648 (face font-lock-string-face) 10648 10675 (face font-lock-constant-face) 10675 10676 (face font-lock-string-face) 10676 10686 nil 10686 10687 (face font-lock-string-face) 10687 10713 (face font-lock-constant-face) 10713 10714 (face font-lock-string-face) 10714 10724 nil 10724 10725 (face font-lock-string-face) 10725 10755 (face font-lock-constant-face) 10755 10756 (face font-lock-string-face) 10756 10766 nil 10766 10767 (face font-lock-string-face) 10767 10796 (face font-lock-constant-face) 10796 10797 (face font-lock-string-face) 10797 10807 nil 10807 10808 (face font-lock-string-face) 10808 10845 (face font-lock-constant-face) 10845 10846 (face font-lock-string-face) 10846 10856 nil 10856 10857 (face font-lock-string-face) 10857 10893 (face font-lock-constant-face) 10893 10894 (face font-lock-string-face) 10894 10904 nil 10904 10905 (face font-lock-string-face) 10905 10929 (face font-lock-constant-face) 10929 10930 (face font-lock-string-face) 10930 10940 nil 10940 10941 (face font-lock-string-face) 10941 10964 (face font-lock-constant-face) 10964 10965 (face font-lock-string-face) 10965 10975 nil 10975 10976 (face font-lock-string-face) 10976 10995 (face font-lock-constant-face) 10995 10996 (face font-lock-string-face) 10996 11006 nil 11006 11007 (face font-lock-string-face) 11007 11025 (face font-lock-constant-face) 11025 11026 (face font-lock-string-face) 11026 11036 nil 11036 11037 (face font-lock-string-face) 11037 11063 (face font-lock-constant-face) 11063 11064 (face font-lock-string-face) 11064 11074 nil 11074 11075 (face font-lock-string-face) 11075 11100 (face font-lock-constant-face) 11100 11101 (face font-lock-string-face) 11101 11111 nil 11111 11112 (face font-lock-string-face) 11112 11138 (face font-lock-constant-face) 11138 11139 (face font-lock-string-face) 11139 11149 nil 11149 11150 (face font-lock-string-face) 11150 11175 (face font-lock-constant-face) 11175 11176 (face font-lock-string-face) 11176 11193 nil 11193 11194 (face font-lock-string-face) 11194 11219 (face font-lock-keyword-face) 11219 11220 (face font-lock-string-face) 11220 11232 nil 11232 11233 (face font-lock-string-face) 11233 11245 (face font-lock-keyword-face) 11245 11246 (face font-lock-string-face) 11246 11260 nil 11260 11261 (face font-lock-string-face) 11261 11263 (face font-lock-constant-face) 11263 11264 (face font-lock-string-face) 11264 11292 nil 11292 11293 (face font-lock-string-face) 11293 11303 (face font-lock-keyword-face) 11303 11304 (face font-lock-string-face) 11304 11316 nil 11316 11381 (face font-lock-comment-face) 11381 11389 nil 11389 11439 (face font-lock-comment-face) 11439 11448 nil 11448 11449 (face font-lock-string-face) 11449 11464 (face font-lock-variable-name-face) 11464 11465 (face font-lock-string-face) 11465 11479 nil 11479 11480 (face font-lock-string-face) 11480 11492 (face font-lock-keyword-face) 11492 11493 (face font-lock-string-face) 11493 11509 nil 11509 11510 (face font-lock-string-face) 11510 11549 (face font-lock-function-name-face) 11549 11550 (face font-lock-string-face) 11550 11586 nil 11586 11587 (face font-lock-string-face) 11587 11602 (face font-lock-variable-name-face) 11602 11603 (face font-lock-string-face) 11603 11617 nil 11617 11618 (face font-lock-string-face) 11618 11626 (face font-lock-keyword-face) 11626 11627 (face font-lock-string-face) 11627 11643 nil 11643 11644 (face font-lock-string-face) 11644 11663 (face font-lock-constant-face) 11663 11664 (face font-lock-string-face) 11664 11678 nil 11678 11679 (face font-lock-string-face) 11679 11702 (face font-lock-constant-face) 11702 11703 (face font-lock-string-face) 11703 11717 nil 11717 11718 (face font-lock-string-face) 11718 11740 (face font-lock-constant-face) 11740 11741 (face font-lock-string-face) 11741 11755 nil 11755 11756 (face font-lock-string-face) 11756 11779 (face font-lock-constant-face) 11779 11780 (face font-lock-string-face) 11780 11794 nil 11794 11795 (face font-lock-string-face) 11795 11817 (face font-lock-constant-face) 11817 11818 (face font-lock-string-face) 11818 11832 nil 11832 11833 (face font-lock-string-face) 11833 11861 (face font-lock-constant-face) 11861 11862 (face font-lock-string-face) 11862 11876 nil 11876 11877 (face font-lock-string-face) 11877 11904 (face font-lock-constant-face) 11904 11905 (face font-lock-string-face) 11905 11919 nil 11919 11920 (face font-lock-string-face) 11920 11950 (face font-lock-constant-face) 11950 11951 (face font-lock-string-face) 11951 11965 nil 11965 11966 (face font-lock-string-face) 11966 11995 (face font-lock-constant-face) 11995 11996 (face font-lock-string-face) 11996 12010 nil 12010 12011 (face font-lock-string-face) 12011 12035 (face font-lock-constant-face) 12035 12036 (face font-lock-string-face) 12036 12050 nil 12050 12051 (face font-lock-string-face) 12051 12074 (face font-lock-constant-face) 12074 12075 (face font-lock-string-face) 12075 12089 nil 12089 12090 (face font-lock-string-face) 12090 12120 (face font-lock-constant-face) 12120 12121 (face font-lock-string-face) 12121 12135 nil 12135 12136 (face font-lock-string-face) 12136 12167 (face font-lock-constant-face) 12167 12168 (face font-lock-string-face) 12168 12182 nil 12182 12183 (face font-lock-string-face) 12183 12213 (face font-lock-constant-face) 12213 12214 (face font-lock-string-face) 12214 12228 nil 12228 12229 (face font-lock-string-face) 12229 12254 (face font-lock-constant-face) 12254 12255 (face font-lock-string-face) 12255 12269 nil 12269 12270 (face font-lock-string-face) 12270 12294 (face font-lock-constant-face) 12294 12295 (face font-lock-string-face) 12295 12309 nil 12309 12310 (face font-lock-string-face) 12310 12352 (face font-lock-constant-face) 12352 12353 (face font-lock-string-face) 12353 12367 nil 12367 12368 (face font-lock-string-face) 12368 12409 (face font-lock-constant-face) 12409 12410 (face font-lock-string-face) 12410 12424 nil 12424 12425 (face font-lock-string-face) 12425 12447 (face font-lock-constant-face) 12447 12448 (face font-lock-string-face) 12448 12462 nil 12462 12463 (face font-lock-string-face) 12463 12484 (face font-lock-constant-face) 12484 12485 (face font-lock-string-face) 12485 12499 nil 12499 12500 (face font-lock-string-face) 12500 12531 (face font-lock-constant-face) 12531 12532 (face font-lock-string-face) 12532 12546 nil 12546 12547 (face font-lock-string-face) 12547 12577 (face font-lock-constant-face) 12577 12578 (face font-lock-string-face) 12578 12592 nil 12592 12593 (face font-lock-string-face) 12593 12621 (face font-lock-constant-face) 12621 12622 (face font-lock-string-face) 12622 12636 nil 12636 12637 (face font-lock-string-face) 12637 12664 (face font-lock-constant-face) 12664 12665 (face font-lock-string-face) 12665 12679 nil 12679 12680 (face font-lock-string-face) 12680 12707 (face font-lock-constant-face) 12707 12708 (face font-lock-string-face) 12708 12722 nil 12722 12723 (face font-lock-string-face) 12723 12749 (face font-lock-constant-face) 12749 12750 (face font-lock-string-face) 12750 12764 nil 12764 12765 (face font-lock-string-face) 12765 12791 (face font-lock-constant-face) 12791 12792 (face font-lock-string-face) 12792 12806 nil 12806 12807 (face font-lock-string-face) 12807 12832 (face font-lock-constant-face) 12832 12833 (face font-lock-string-face) 12833 12868 nil 12868 12937 (face font-lock-comment-face) 12937 12945 nil 12945 13016 (face font-lock-comment-face) 13016 13024 nil 13024 13040 (face font-lock-comment-face) 13040 13049 nil 13049 13050 (face font-lock-string-face) 13050 13065 (face font-lock-variable-name-face) 13065 13066 (face font-lock-string-face) 13066 13080 nil 13080 13081 (face font-lock-string-face) 13081 13089 (face font-lock-keyword-face) 13089 13090 (face font-lock-string-face) 13090 13105 nil 13105 13106 (face font-lock-string-face) 13106 13149 (face font-lock-constant-face) 13149 13150 (face font-lock-string-face) 13150 13175 nil 13175 13176 (face font-lock-string-face) 13176 13183 (face font-lock-keyword-face) 13183 13184 (face font-lock-string-face) 13184 13199 nil 13199 13200 (face font-lock-string-face) 13200 13248 (face font-lock-constant-face) 13248 13249 (face font-lock-string-face) 13249 13274 nil 13274 13275 (face font-lock-string-face) 13275 13288 (face font-lock-keyword-face) 13288 13289 (face font-lock-string-face) 13289 13305 nil 13305 13306 (face font-lock-string-face) 13306 13315 (face font-lock-keyword-face) 13315 13316 (face font-lock-string-face) 13316 13334 nil 13334 13335 (face font-lock-string-face) 13335 13345 (face font-lock-constant-face) 13345 13346 (face font-lock-string-face) 13346 13397 nil 13397 13398 (face font-lock-string-face) 13398 13443 (face font-lock-variable-name-face) 13443 13444 (face font-lock-string-face) 13444 13458 nil 13458 13459 (face font-lock-string-face) 13459 13472 (face font-lock-keyword-face) 13472 13473 (face font-lock-string-face) 13473 13489 nil 13489 13490 (face font-lock-string-face) 13490 13499 (face font-lock-keyword-face) 13499 13500 (face font-lock-string-face) 13500 13518 nil 13518 13519 (face font-lock-string-face) 13519 13527 (face font-lock-constant-face) 13527 13528 (face font-lock-string-face) 13528 13579 nil 13579 13580 (face font-lock-string-face) 13580 13593 (face font-lock-variable-name-face) 13593 13594 (face font-lock-string-face) 13594 13608 nil 13608 13609 (face font-lock-string-face) 13609 13617 (face font-lock-keyword-face) 13617 13618 (face font-lock-string-face) 13618 13623 nil 13623 13624 (face font-lock-string-face) 13624 13631 (face font-lock-constant-face) 13631 13632 (face font-lock-string-face) 13632 13634 nil 13634 13635 (face font-lock-string-face) 13635 13641 (face font-lock-constant-face) 13641 13642 (face font-lock-string-face) 13642 13671 nil 13671 13672 (face font-lock-string-face) 13672 13679 (face font-lock-constant-face) 13679 13680 (face font-lock-string-face) 13680 13682 nil 13682 13683 (face font-lock-string-face) 13683 13703 (face font-lock-constant-face) 13703 13704 (face font-lock-string-face) 13704 13720 nil 13720 13721 (face font-lock-string-face) 13721 13734 (face font-lock-keyword-face) 13734 13735 (face font-lock-string-face) 13735 13751 nil 13751 13752 (face font-lock-string-face) 13752 13761 (face font-lock-keyword-face) 13761 13762 (face font-lock-string-face) 13762 13815 nil 13815 13816 (face font-lock-string-face) 13816 13829 (face font-lock-variable-name-face) 13829 13830 (face font-lock-string-face) 13830 13844 nil 13844 13845 (face font-lock-string-face) 13845 13853 (face font-lock-keyword-face) 13853 13854 (face font-lock-string-face) 13854 13870 nil 13870 13871 (face font-lock-string-face) 13871 13909 (face font-lock-constant-face) 13909 13910 (face font-lock-string-face) 13910 13924 nil 13924 13925 (face font-lock-string-face) 13925 13962 (face font-lock-constant-face) 13962 13963 (face font-lock-string-face) 13963 13999 nil 13999 14000 (face font-lock-string-face) 14000 14011 (face font-lock-variable-name-face) 14011 14012 (face font-lock-string-face) 14012 14026 nil 14026 14027 (face font-lock-string-face) 14027 14036 (face font-lock-keyword-face) 14036 14037 (face font-lock-string-face) 14037 14053 nil 14053 14054 (face font-lock-string-face) 14054 14064 (face font-lock-keyword-face) 14064 14065 (face font-lock-string-face) 14065 14084 nil 14084 14085 (face font-lock-string-face) 14085 14096 (face font-lock-variable-name-face) 14096 14097 (face font-lock-string-face) 14097 14117 nil 14117 14129 (face font-lock-string-face) 14129 14131 nil 14131 14169 (face font-lock-string-face) 14169 14176 (face font-lock-variable-name-face) 14176 14182 (face font-lock-string-face) 14182 14193 (face font-lock-variable-name-face) 14193 14196 (face font-lock-string-face) 14196 14233 nil 14233 14245 (face font-lock-string-face) 14245 14247 nil 14247 14259 (face font-lock-string-face) 14259 14316 nil 14316 14317 (face font-lock-string-face) 14317 14327 (face font-lock-keyword-face) 14327 14328 (face font-lock-string-face) 14328 14345 nil 14345 14346 (face font-lock-string-face) 14346 14359 (face font-lock-variable-name-face) 14359 14360 (face font-lock-string-face) 14360 14378 nil 14378 14379 (face font-lock-string-face) 14379 14385 (face font-lock-keyword-face) 14385 14386 (face font-lock-string-face) 14386 14406 nil 14406 14411 (face font-lock-string-face) 14411 14413 (face font-lock-variable-name-face) 14413 14423 (face font-lock-variable-name-face) 14423 14443 (face font-lock-string-face) 14443 14476 nil 14476 14477 (face font-lock-string-face) 14477 14490 (face font-lock-keyword-face) 14490 14491 (face font-lock-string-face) 14491 14511 nil 14511 14512 (face font-lock-string-face) 14512 14521 (face font-lock-keyword-face) 14521 14522 (face font-lock-string-face) 14522 14544 nil 14544 14545 (face font-lock-string-face) 14545 14549 (face font-lock-constant-face) 14549 14551 (face font-lock-variable-name-face) 14551 14561 (face font-lock-variable-name-face) 14561 14578 (face font-lock-constant-face) 14578 14579 (face font-lock-string-face) 14579 14631 nil 14631 14632 (face font-lock-string-face) 14632 14639 (face font-lock-keyword-face) 14639 14640 (face font-lock-string-face) 14640 14660 nil 14660 14661 (face font-lock-string-face) 14661 14669 (face font-lock-preprocessor-face) 14669 14670 (face font-lock-string-face) 14670 14707 nil 14707 14729 (face font-lock-comment-face) 14729 14743 nil 14743 14744 (face font-lock-string-face) 14744 14752 (face font-lock-keyword-face) 14752 14753 (face font-lock-string-face) 14753 14773 nil 14773 14774 (face font-lock-string-face) 14774 14800 (face font-lock-constant-face) 14800 14801 (face font-lock-string-face) 14801 14819 nil 14819 14820 (face font-lock-string-face) 14820 14845 (face font-lock-constant-face) 14845 14846 (face font-lock-string-face) 14846 14915 nil 14915 14916 (face font-lock-string-face) 14916 14929 (face font-lock-variable-name-face) 14929 14930 (face font-lock-string-face) 14930 14944 nil 14944 14945 (face font-lock-string-face) 14945 14955 (face font-lock-keyword-face) 14955 14956 (face font-lock-string-face) 14956 14973 nil 14973 14974 (face font-lock-string-face) 14974 14993 (face font-lock-variable-name-face) 14993 14994 (face font-lock-string-face) 14994 15012 nil 15012 15013 (face font-lock-string-face) 15013 15019 (face font-lock-keyword-face) 15019 15020 (face font-lock-string-face) 15020 15040 nil 15040 15075 (face font-lock-string-face) 15075 15108 nil 15108 15109 (face font-lock-string-face) 15109 15122 (face font-lock-keyword-face) 15122 15123 (face font-lock-string-face) 15123 15143 nil 15143 15144 (face font-lock-string-face) 15144 15153 (face font-lock-keyword-face) 15153 15154 (face font-lock-string-face) 15154 15176 nil 15176 15177 (face font-lock-string-face) 15177 15215 (face font-lock-constant-face) 15215 15216 (face font-lock-string-face) 15216 15268 nil 15268 15269 (face font-lock-string-face) 15269 15276 (face font-lock-keyword-face) 15276 15277 (face font-lock-string-face) 15277 15297 nil 15297 15298 (face font-lock-string-face) 15298 15312 (face font-lock-preprocessor-face) 15312 15313 (face font-lock-string-face) 15313 15350 nil 15350 15378 (face font-lock-comment-face) 15378 15392 nil 15392 15393 (face font-lock-string-face) 15393 15401 (face font-lock-keyword-face) 15401 15402 (face font-lock-string-face) 15402 15422 nil 15422 15423 (face font-lock-string-face) 15423 15450 (face font-lock-constant-face) 15450 15451 (face font-lock-string-face) 15451 15469 nil 15469 15470 (face font-lock-string-face) 15470 15496 (face font-lock-constant-face) 15496 15497 (face font-lock-string-face) 15497 15566 nil 15566 15567 (face font-lock-string-face) 15567 15600 (face font-lock-variable-name-face) 15600 15601 (face font-lock-string-face) 15601 15615 nil 15615 15663 (face font-lock-comment-face) 15663 15673 nil 15673 15674 (face font-lock-string-face) 15674 15682 (face font-lock-keyword-face) 15682 15683 (face font-lock-string-face) 15683 15699 nil 15699 15700 (face font-lock-string-face) 15700 15743 (face font-lock-constant-face) 15743 15744 (face font-lock-string-face) 15744 15758 nil 15758 15759 (face font-lock-string-face) 15759 15801 (face font-lock-constant-face) 15801 15802 (face font-lock-string-face) 15802 15838 nil 15838 15839 (face font-lock-string-face) 15839 15848 (face font-lock-variable-name-face) 15848 15849 (face font-lock-string-face) 15849 15863 nil 15863 15864 (face font-lock-string-face) 15864 15877 (face font-lock-keyword-face) 15877 15878 (face font-lock-string-face) 15878 15894 nil 15894 15895 (face font-lock-string-face) 15895 15904 (face font-lock-keyword-face) 15904 15905 (face font-lock-string-face) 15905 15923 nil 15923 15924 (face font-lock-string-face) 15924 15980 (face font-lock-constant-face) 15980 15981 (face font-lock-string-face) 15981 15997 nil 15997 15998 (face font-lock-string-face) 15998 16057 (face font-lock-constant-face) 16057 16058 (face font-lock-string-face) 16058 16074 nil 16074 16075 (face font-lock-string-face) 16075 16131 (face font-lock-constant-face) 16131 16132 (face font-lock-string-face) 16132 16148 nil 16148 16149 (face font-lock-string-face) 16149 16205 (face font-lock-constant-face) 16205 16206 (face font-lock-string-face) 16206 16222 nil 16222 16223 (face font-lock-string-face) 16223 16275 (face font-lock-constant-face) 16275 16276 (face font-lock-string-face) 16276 16327 nil 16327 16328 (face font-lock-string-face) 16328 16337 (face font-lock-variable-name-face) 16337 16338 (face font-lock-string-face) 16338 16352 nil 16352 16353 (face font-lock-string-face) 16353 16361 (face font-lock-keyword-face) 16361 16362 (face font-lock-string-face) 16362 16378 nil 16378 16379 (face font-lock-string-face) 16379 16406 (face font-lock-constant-face) 16406 16407 (face font-lock-string-face) 16407 16421 nil 16421 16422 (face font-lock-string-face) 16422 16448 (face font-lock-constant-face) 16448 16449 (face font-lock-string-face) 16449 16463 nil 16463 16464 (face font-lock-string-face) 16464 16507 (face font-lock-constant-face) 16507 16508 (face font-lock-string-face) 16508 16522 nil 16522 16523 (face font-lock-string-face) 16523 16565 (face font-lock-constant-face) 16565 16566 (face font-lock-string-face) 16566 16602 nil 16602 16603 (face font-lock-string-face) 16603 16646 (face font-lock-variable-name-face) 16646 16647 (face font-lock-string-face) 16647 16661 nil 16661 16662 (face font-lock-string-face) 16662 16669 (face font-lock-keyword-face) 16669 16670 (face font-lock-string-face) 16670 16686 nil 16686 16687 (face font-lock-string-face) 16687 16697 (face font-lock-constant-face) 16697 16698 (face font-lock-string-face) 16698 16712 nil 16712 16713 (face font-lock-string-face) 16713 16722 (face font-lock-constant-face) 16722 16723 (face font-lock-string-face) 16723 16737 nil 16737 16738 (face font-lock-string-face) 16738 16760 (face font-lock-constant-face) 16760 16761 (face font-lock-string-face) 16761 16775 nil 16775 16776 (face font-lock-string-face) 16776 16797 (face font-lock-constant-face) 16797 16798 (face font-lock-string-face) 16798 16812 nil 16812 16813 (face font-lock-string-face) 16813 16830 (face font-lock-constant-face) 16830 16831 (face font-lock-string-face) 16831 16845 nil 16845 16846 (face font-lock-string-face) 16846 16862 (face font-lock-constant-face) 16862 16863 (face font-lock-string-face) 16863 16877 nil 16877 16878 (face font-lock-string-face) 16878 16889 (face font-lock-constant-face) 16889 16890 (face font-lock-string-face) 16890 16904 nil 16904 16905 (face font-lock-string-face) 16905 16915 (face font-lock-constant-face) 16915 16916 (face font-lock-string-face) 16916 16930 nil 16930 16931 (face font-lock-string-face) 16931 16955 (face font-lock-constant-face) 16955 16956 (face font-lock-string-face) 16956 16970 nil 16970 16971 (face font-lock-string-face) 16971 16994 (face font-lock-constant-face) 16994 16995 (face font-lock-string-face) 16995 17009 nil 17009 17010 (face font-lock-string-face) 17010 17034 (face font-lock-constant-face) 17034 17035 (face font-lock-string-face) 17035 17049 nil 17049 17050 (face font-lock-string-face) 17050 17073 (face font-lock-constant-face) 17073 17074 (face font-lock-string-face) 17074 17088 nil 17088 17089 (face font-lock-string-face) 17089 17114 (face font-lock-constant-face) 17114 17115 (face font-lock-string-face) 17115 17129 nil 17129 17130 (face font-lock-string-face) 17130 17154 (face font-lock-constant-face) 17154 17155 (face font-lock-string-face) 17155 17210 nil 17210 17211 (face font-lock-string-face) 17211 17222 (face font-lock-keyword-face) 17222 17223 (face font-lock-string-face) 17223 17225 nil 17225 17226 (face font-lock-string-face) 17226 17237 (face font-lock-function-name-face) 17237 17238 (face font-lock-string-face) 17238 17246 nil 17246 17247 (face font-lock-string-face) 17247 17251 (face font-lock-keyword-face) 17251 17252 (face font-lock-string-face) 17252 17254 nil 17254 17255 (face font-lock-string-face) 17255 17269 (face font-lock-type-face) 17269 17270 (face font-lock-string-face) 17270 17278 nil 17278 17279 (face font-lock-string-face) 17279 17291 (face font-lock-keyword-face) 17291 17292 (face font-lock-string-face) 17292 17304 nil 17304 17305 (face font-lock-string-face) 17305 17307 (face font-lock-constant-face) 17307 17308 (face font-lock-string-face) 17308 17325 nil 17325 17326 (face font-lock-string-face) 17326 17336 (face font-lock-keyword-face) 17336 17337 (face font-lock-string-face) 17337 17350 nil 17350 17351 (face font-lock-string-face) 17351 17371 (face font-lock-variable-name-face) 17371 17372 (face font-lock-string-face) 17372 17386 nil 17386 17387 (face font-lock-string-face) 17387 17404 (face font-lock-keyword-face) 17404 17405 (face font-lock-string-face) 17405 17423 nil 17423 17424 (face font-lock-string-face) 17424 17442 (face font-lock-variable-name-face) 17442 17443 (face font-lock-string-face) 17443 17461 nil 17461 17462 (face font-lock-string-face) 17462 17469 (face font-lock-keyword-face) 17469 17470 (face font-lock-string-face) 17470 17474 nil 17474 17498 (face font-lock-string-face) 17498 17553 nil 17553 17554 (face font-lock-string-face) 17554 17599 (face font-lock-variable-name-face) 17599 17600 (face font-lock-string-face) 17600 17614 nil 17614 17615 (face font-lock-string-face) 17615 17627 (face font-lock-keyword-face) 17627 17628 (face font-lock-string-face) 17628 17644 nil 17644 17645 (face font-lock-string-face) 17645 17665 (face font-lock-function-name-face) 17665 17666 (face font-lock-string-face) 17666 17703 nil 17703 17704 (face font-lock-string-face) 17704 17724 (face font-lock-variable-name-face) 17724 17725 (face font-lock-string-face) 17725 17739 nil 17739 17740 (face font-lock-string-face) 17740 17752 (face font-lock-keyword-face) 17752 17753 (face font-lock-string-face) 17753 17769 nil 17769 17770 (face font-lock-string-face) 17770 17790 (face font-lock-function-name-face) 17790 17791 (face font-lock-string-face) 17791 17833 nil 17833 17834 (face font-lock-string-face) 17834 17841 (face font-lock-keyword-face) 17841 17842 (face font-lock-string-face) 17842 17854 nil 17854 17855 (face font-lock-string-face) 17855 17874 (face font-lock-constant-face) 17874 17875 (face font-lock-string-face) 17875 17885 nil 17885 17886 (face font-lock-string-face) 17886 17904 (face font-lock-constant-face) 17904 17905 (face font-lock-string-face) 17905 17935 nil 17935 17936 (face font-lock-string-face) 17936 17947 (face font-lock-keyword-face) 17947 17948 (face font-lock-string-face) 17948 17950 nil 17950 17951 (face font-lock-string-face) 17951 17971 (face font-lock-function-name-face) 17971 17972 (face font-lock-string-face) 17972 17980 nil 17980 17981 (face font-lock-string-face) 17981 17985 (face font-lock-keyword-face) 17985 17986 (face font-lock-string-face) 17986 17988 nil 17988 17989 (face font-lock-string-face) 17989 18003 (face font-lock-type-face) 18003 18004 (face font-lock-string-face) 18004 18012 nil 18012 18013 (face font-lock-string-face) 18013 18025 (face font-lock-keyword-face) 18025 18026 (face font-lock-string-face) 18026 18038 nil 18038 18039 (face font-lock-string-face) 18039 18041 (face font-lock-constant-face) 18041 18042 (face font-lock-string-face) 18042 18059 nil 18059 18060 (face font-lock-string-face) 18060 18067 (face font-lock-keyword-face) 18067 18068 (face font-lock-string-face) 18068 18080 nil 18080 18081 (face font-lock-string-face) 18081 18114 (face font-lock-constant-face) 18114 18115 (face font-lock-string-face) 18115 18125 nil 18125 18126 (face font-lock-string-face) 18126 18162 (face font-lock-constant-face) 18162 18163 (face font-lock-string-face) 18163 18173 nil 18173 18174 (face font-lock-string-face) 18174 18212 (face font-lock-constant-face) 18212 18213 (face font-lock-string-face) 18213 18223 nil 18223 18224 (face font-lock-string-face) 18224 18261 (face font-lock-constant-face) 18261 18262 (face font-lock-string-face) 18262 18272 nil 18272 18273 (face font-lock-string-face) 18273 18311 (face font-lock-constant-face) 18311 18312 (face font-lock-string-face) 18312 18322 nil 18322 18323 (face font-lock-string-face) 18323 18356 (face font-lock-constant-face) 18356 18357 (face font-lock-string-face) 18357 18367 nil 18367 18368 (face font-lock-string-face) 18368 18403 (face font-lock-constant-face) 18403 18404 (face font-lock-string-face) 18404 18414 nil 18414 18415 (face font-lock-string-face) 18415 18451 (face font-lock-constant-face) 18451 18452 (face font-lock-string-face) 18452 18462 nil 18462 18463 (face font-lock-string-face) 18463 18499 (face font-lock-constant-face) 18499 18500 (face font-lock-string-face) 18500 18510 nil 18510 18511 (face font-lock-string-face) 18511 18547 (face font-lock-constant-face) 18547 18548 (face font-lock-string-face) 18548 18558 nil 18558 18559 (face font-lock-string-face) 18559 18581 (face font-lock-constant-face) 18581 18582 (face font-lock-string-face) 18582 18592 nil 18592 18593 (face font-lock-string-face) 18593 18618 (face font-lock-constant-face) 18618 18619 (face font-lock-string-face) 18619 18629 nil 18629 18630 (face font-lock-string-face) 18630 18657 (face font-lock-constant-face) 18657 18658 (face font-lock-string-face) 18658 18668 nil 18668 18669 (face font-lock-string-face) 18669 18697 (face font-lock-constant-face) 18697 18698 (face font-lock-string-face) 18698 18708 nil 18708 18709 (face font-lock-string-face) 18709 18750 (face font-lock-constant-face) 18750 18751 (face font-lock-string-face) 18751 18761 nil 18761 18762 (face font-lock-string-face) 18762 18803 (face font-lock-constant-face) 18803 18804 (face font-lock-string-face) 18804 18814 nil 18814 18815 (face font-lock-string-face) 18815 18856 (face font-lock-constant-face) 18856 18857 (face font-lock-string-face) 18857 18867 nil 18867 18868 (face font-lock-string-face) 18868 18902 (face font-lock-constant-face) 18902 18903 (face font-lock-string-face) 18903 18913 nil 18913 18914 (face font-lock-string-face) 18914 18948 (face font-lock-constant-face) 18948 18949 (face font-lock-string-face) 18949 18959 nil 18959 18960 (face font-lock-string-face) 18960 18994 (face font-lock-constant-face) 18994 18995 (face font-lock-string-face) 18995 19005 nil 19005 19006 (face font-lock-string-face) 19006 19035 (face font-lock-constant-face) 19035 19036 (face font-lock-string-face) 19036 19046 nil 19046 19047 (face font-lock-string-face) 19047 19075 (face font-lock-constant-face) 19075 19076 (face font-lock-string-face) 19076 19093 nil 19093 19094 (face font-lock-string-face) 19094 19104 (face font-lock-keyword-face) 19104 19105 (face font-lock-string-face) 19105 19118 nil 19118 19119 (face font-lock-string-face) 19119 19139 (face font-lock-variable-name-face) 19139 19140 (face font-lock-string-face) 19140 19154 nil 19154 19155 (face font-lock-string-face) 19155 19172 (face font-lock-keyword-face) 19172 19173 (face font-lock-string-face) 19173 19191 nil 19191 19192 (face font-lock-string-face) 19192 19210 (face font-lock-variable-name-face) 19210 19211 (face font-lock-string-face) 19211 19229 nil 19229 19230 (face font-lock-string-face) 19230 19237 (face font-lock-keyword-face) 19237 19238 (face font-lock-string-face) 19238 19242 nil 19242 19266 (face font-lock-string-face) 19266 19321 nil 19321 19322 (face font-lock-string-face) 19322 19342 (face font-lock-variable-name-face) 19342 19343 (face font-lock-string-face) 19343 19357 nil 19357 19399 (face font-lock-comment-face) 19399 19409 nil 19409 19410 (face font-lock-string-face) 19410 19417 (face font-lock-keyword-face) 19417 19418 (face font-lock-string-face) 19418 19434 nil 19434 19435 (face font-lock-string-face) 19435 19480 (face font-lock-constant-face) 19480 19481 (face font-lock-string-face) 19481 19495 nil 19495 19496 (face font-lock-string-face) 19496 19535 (face font-lock-constant-face) 19535 19536 (face font-lock-string-face) 19536 19573 nil 19573 19574 (face font-lock-string-face) 19574 19623 (face font-lock-variable-name-face) 19623 19624 (face font-lock-string-face) 19624 19638 nil 19638 19639 (face font-lock-string-face) 19639 19645 (face font-lock-keyword-face) 19645 19646 (face font-lock-string-face) 19646 19662 nil 19662 19670 (face font-lock-string-face) 19670 19707 nil 19707 19708 (face font-lock-string-face) 19708 19719 (face font-lock-variable-name-face) 19719 19720 (face font-lock-string-face) 19720 19734 nil 19734 19735 (face font-lock-string-face) 19735 19749 (face font-lock-keyword-face) 19749 19750 (face font-lock-string-face) 19750 19766 nil 19766 19773 (face font-lock-string-face) 19773 19791 nil 19791 19792 (face font-lock-string-face) 19792 19806 (face font-lock-keyword-face) 19806 19807 (face font-lock-string-face) 19807 19827 nil 19827 19890 (face font-lock-comment-face) 19890 19906 nil 19906 19971 (face font-lock-comment-face) 19971 19987 nil 19987 20032 (face font-lock-comment-face) 20032 20048 nil 20048 20072 (face font-lock-string-face) 20072 20074 nil 20074 20077 (face font-lock-string-face) 20077 20080 nil 20080 20086 (face font-lock-comment-face) 20086 20155 nil 20155 20156 (face font-lock-string-face) 20156 20165 (face font-lock-variable-name-face) 20165 20166 (face font-lock-string-face) 20166 20180 nil 20180 20181 (face font-lock-string-face) 20181 20190 (face font-lock-keyword-face) 20190 20191 (face font-lock-string-face) 20191 20207 nil 20207 20208 (face font-lock-string-face) 20208 20218 (face font-lock-variable-name-face) 20218 20219 (face font-lock-string-face) 20219 20237 nil 20237 20246 (face font-lock-string-face) 20246 20262 nil 20262 20270 (face font-lock-string-face) 20270 20286 nil 20286 20298 (face font-lock-string-face) 20298 20314 nil 20314 20322 (face font-lock-string-face) 20322 20374 nil 20374 20375 (face font-lock-string-face) 20375 20384 (face font-lock-variable-name-face) 20384 20385 (face font-lock-string-face) 20385 20399 nil 20399 20400 (face font-lock-string-face) 20400 20409 (face font-lock-keyword-face) 20409 20410 (face font-lock-string-face) 20410 20426 nil 20426 20427 (face font-lock-string-face) 20427 20437 (face font-lock-variable-name-face) 20437 20438 (face font-lock-string-face) 20438 20456 nil 20456 20466 (face font-lock-string-face) 20466 20482 nil 20482 20491 (face font-lock-string-face) 20491 20507 nil 20507 20519 (face font-lock-string-face) 20519 20535 nil 20535 20543 (face font-lock-string-face) 20543 20595 nil 20595 20596 (face font-lock-string-face) 20596 20621 (face font-lock-variable-name-face) 20621 20622 (face font-lock-string-face) 20622 20636 nil 20636 20637 (face font-lock-string-face) 20637 20646 (face font-lock-keyword-face) 20646 20647 (face font-lock-string-face) 20647 20663 nil 20663 20664 (face font-lock-string-face) 20664 20674 (face font-lock-keyword-face) 20674 20675 (face font-lock-string-face) 20675 20695 nil 20695 20696 (face font-lock-string-face) 20696 20715 (face font-lock-variable-name-face) 20715 20716 (face font-lock-string-face) 20716 20736 nil 20736 20748 (face font-lock-string-face) 20748 20770 nil 20770 20780 (face font-lock-string-face) 20780 20800 nil 20800 20807 (face font-lock-string-face) 20807 20827 nil 20827 20839 (face font-lock-string-face) 20839 20859 nil 20859 20867 (face font-lock-string-face) 20867 20923 nil 20923 20935 (face font-lock-string-face) 20935 20957 nil 20957 20972 (face font-lock-string-face) 20972 20992 nil 20992 20999 (face font-lock-string-face) 20999 21019 nil 21019 21026 (face font-lock-string-face) 21026 21046 nil 21046 21058 (face font-lock-string-face) 21058 21078 nil 21078 21086 (face font-lock-string-face) 21086 21180 nil 21180 21181 (face font-lock-string-face) 21181 21190 (face font-lock-keyword-face) 21190 21191 (face font-lock-string-face) 21191 21203 nil 21203 21204 (face font-lock-string-face) 21204 21220 (face font-lock-variable-name-face) 21220 21221 (face font-lock-string-face) 21221 21223 nil 21223 21224 (face font-lock-string-face) 21224 21256 (face font-lock-variable-name-face) 21256 21257 (face font-lock-string-face) 21257 21274 nil 21274 21314 (face font-lock-string-face) 21314 21325 nil 21325 21326 (face font-lock-string-face) 21326 21334 (face font-lock-keyword-face) 21334 21335 (face font-lock-string-face) 21335 21347 nil 21347 21348 (face font-lock-string-face) 21348 21385 (face font-lock-constant-face) 21385 21386 (face font-lock-string-face) 21386 21416 nil 21416 21417 (face font-lock-string-face) 21417 21428 (face font-lock-keyword-face) 21428 21429 (face font-lock-string-face) 21429 21431 nil 21431 21432 (face font-lock-string-face) 21432 21452 (face font-lock-function-name-face) 21452 21453 (face font-lock-string-face) 21453 21461 nil 21461 21462 (face font-lock-string-face) 21462 21466 (face font-lock-keyword-face) 21466 21467 (face font-lock-string-face) 21467 21469 nil 21469 21470 (face font-lock-string-face) 21470 21484 (face font-lock-type-face) 21484 21485 (face font-lock-string-face) 21485 21493 nil 21493 21494 (face font-lock-string-face) 21494 21506 (face font-lock-keyword-face) 21506 21507 (face font-lock-string-face) 21507 21519 nil 21519 21520 (face font-lock-string-face) 21520 21522 (face font-lock-constant-face) 21522 21523 (face font-lock-string-face) 21523 21540 nil 21540 21541 (face font-lock-string-face) 21541 21548 (face font-lock-keyword-face) 21548 21549 (face font-lock-string-face) 21549 21561 nil 21561 21562 (face font-lock-string-face) 21562 21595 (face font-lock-constant-face) 21595 21596 (face font-lock-string-face) 21596 21606 nil 21606 21607 (face font-lock-string-face) 21607 21637 (face font-lock-constant-face) 21637 21638 (face font-lock-string-face) 21638 21648 nil 21648 21649 (face font-lock-string-face) 21649 21682 (face font-lock-constant-face) 21682 21683 (face font-lock-string-face) 21683 21693 nil 21693 21694 (face font-lock-string-face) 21694 21724 (face font-lock-constant-face) 21724 21725 (face font-lock-string-face) 21725 21735 nil 21735 21736 (face font-lock-string-face) 21736 21758 (face font-lock-constant-face) 21758 21759 (face font-lock-string-face) 21759 21769 nil 21769 21770 (face font-lock-string-face) 21770 21795 (face font-lock-constant-face) 21795 21796 (face font-lock-string-face) 21796 21806 nil 21806 21807 (face font-lock-string-face) 21807 21836 (face font-lock-constant-face) 21836 21837 (face font-lock-string-face) 21837 21847 nil 21847 21848 (face font-lock-string-face) 21848 21876 (face font-lock-constant-face) 21876 21877 (face font-lock-string-face) 21877 21907 nil 21907 21908 (face font-lock-string-face) 21908 21919 (face font-lock-keyword-face) 21919 21920 (face font-lock-string-face) 21920 21922 nil 21922 21923 (face font-lock-string-face) 21923 21938 (face font-lock-function-name-face) 21938 21939 (face font-lock-string-face) 21939 21947 nil 21947 21948 (face font-lock-string-face) 21948 21952 (face font-lock-keyword-face) 21952 21953 (face font-lock-string-face) 21953 21955 nil 21955 21956 (face font-lock-string-face) 21956 21966 (face font-lock-type-face) 21966 21967 (face font-lock-string-face) 21967 21975 nil 21975 21976 (face font-lock-string-face) 21976 21988 (face font-lock-keyword-face) 21988 21989 (face font-lock-string-face) 21989 22001 nil 22001 22002 (face font-lock-string-face) 22002 22007 (face font-lock-function-name-face) 22007 22008 (face font-lock-string-face) 22008 22018 nil 22018 22019 (face font-lock-string-face) 22019 22037 (face font-lock-function-name-face) 22037 22038 (face font-lock-string-face) 22038 22048 nil 22048 22049 (face font-lock-string-face) 22049 22060 (face font-lock-function-name-face) 22060 22061 (face font-lock-string-face) 22061 22071 nil 22071 22072 (face font-lock-string-face) 22072 22093 (face font-lock-function-name-face) 22093 22094 (face font-lock-string-face) 22094 22104 nil 22104 22105 (face font-lock-string-face) 22105 22131 (face font-lock-function-name-face) 22131 22132 (face font-lock-string-face) 22132 22142 nil 22142 22143 (face font-lock-string-face) 22143 22177 (face font-lock-function-name-face) 22177 22178 (face font-lock-string-face) 22178 22188 nil 22188 22189 (face font-lock-string-face) 22189 22215 (face font-lock-function-name-face) 22215 22216 (face font-lock-string-face) 22216 22226 nil 22226 22227 (face font-lock-string-face) 22227 22253 (face font-lock-function-name-face) 22253 22254 (face font-lock-string-face) 22254 22264 nil 22264 22265 (face font-lock-string-face) 22265 22280 (face font-lock-function-name-face) 22280 22281 (face font-lock-string-face) 22281 22298 nil 22298 22299 (face font-lock-string-face) 22299 22306 (face font-lock-keyword-face) 22306 22307 (face font-lock-string-face) 22307 22319 nil 22319 22320 (face font-lock-string-face) 22320 22361 (face font-lock-constant-face) 22361 22362 (face font-lock-string-face) 22362 22372 nil 22372 22373 (face font-lock-string-face) 22373 22413 (face font-lock-constant-face) 22413 22414 (face font-lock-string-face) 22414 22424 nil 22424 22425 (face font-lock-string-face) 22425 22461 (face font-lock-constant-face) 22461 22462 (face font-lock-string-face) 22462 22472 nil 22472 22473 (face font-lock-string-face) 22473 22502 (face font-lock-constant-face) 22502 22503 (face font-lock-string-face) 22503 22513 nil 22513 22514 (face font-lock-string-face) 22514 22550 (face font-lock-constant-face) 22550 22551 (face font-lock-string-face) 22551 22561 nil 22561 22562 (face font-lock-string-face) 22562 22610 (face font-lock-constant-face) 22610 22611 (face font-lock-string-face) 22611 22621 nil 22621 22622 (face font-lock-string-face) 22622 22663 (face font-lock-constant-face) 22663 22664 (face font-lock-string-face) 22664 22674 nil 22674 22675 (face font-lock-string-face) 22675 22711 (face font-lock-constant-face) 22711 22712 (face font-lock-string-face) 22712 22722 nil 22722 22723 (face font-lock-string-face) 22723 22757 (face font-lock-constant-face) 22757 22758 (face font-lock-string-face) 22758 22768 nil 22768 22769 (face font-lock-string-face) 22769 22797 (face font-lock-constant-face) 22797 22798 (face font-lock-string-face) 22798 22808 nil 22808 22809 (face font-lock-string-face) 22809 22853 (face font-lock-constant-face) 22853 22854 (face font-lock-string-face) 22854 22864 nil 22864 22865 (face font-lock-string-face) 22865 22900 (face font-lock-constant-face) 22900 22901 (face font-lock-string-face) 22901 22911 nil 22911 22912 (face font-lock-string-face) 22912 22961 (face font-lock-constant-face) 22961 22962 (face font-lock-string-face) 22962 22972 nil 22972 22973 (face font-lock-string-face) 22973 23011 (face font-lock-constant-face) 23011 23012 (face font-lock-string-face) 23012 23022 nil 23022 23023 (face font-lock-string-face) 23023 23055 (face font-lock-constant-face) 23055 23056 (face font-lock-string-face) 23056 23066 nil 23066 23067 (face font-lock-string-face) 23067 23116 (face font-lock-constant-face) 23116 23117 (face font-lock-string-face) 23117 23127 nil 23127 23128 (face font-lock-string-face) 23128 23178 (face font-lock-constant-face) 23178 23179 (face font-lock-string-face) 23179 23189 nil 23189 23190 (face font-lock-string-face) 23190 23228 (face font-lock-constant-face) 23228 23229 (face font-lock-string-face) 23229 23239 nil 23239 23240 (face font-lock-string-face) 23240 23277 (face font-lock-constant-face) 23277 23278 (face font-lock-string-face) 23278 23288 nil 23288 23289 (face font-lock-string-face) 23289 23332 (face font-lock-constant-face) 23332 23333 (face font-lock-string-face) 23333 23343 nil 23343 23344 (face font-lock-string-face) 23344 23368 (face font-lock-constant-face) 23368 23369 (face font-lock-string-face) 23369 23379 nil 23379 23380 (face font-lock-string-face) 23380 23402 (face font-lock-constant-face) 23402 23403 (face font-lock-string-face) 23403 23413 nil 23413 23414 (face font-lock-string-face) 23414 23447 (face font-lock-constant-face) 23447 23448 (face font-lock-string-face) 23448 23458 nil 23458 23459 (face font-lock-string-face) 23459 23487 (face font-lock-constant-face) 23487 23488 (face font-lock-string-face) 23488 23498 nil 23498 23499 (face font-lock-string-face) 23499 23530 (face font-lock-constant-face) 23530 23531 (face font-lock-string-face) 23531 23541 nil 23541 23542 (face font-lock-string-face) 23542 23563 (face font-lock-constant-face) 23563 23564 (face font-lock-string-face) 23564 23574 nil 23574 23575 (face font-lock-string-face) 23575 23609 (face font-lock-constant-face) 23609 23610 (face font-lock-string-face) 23610 23620 nil 23620 23621 (face font-lock-string-face) 23621 23654 (face font-lock-constant-face) 23654 23655 (face font-lock-string-face) 23655 23665 nil 23665 23666 (face font-lock-string-face) 23666 23700 (face font-lock-constant-face) 23700 23701 (face font-lock-string-face) 23701 23711 nil 23711 23712 (face font-lock-string-face) 23712 23753 (face font-lock-constant-face) 23753 23754 (face font-lock-string-face) 23754 23764 nil 23764 23765 (face font-lock-string-face) 23765 23790 (face font-lock-constant-face) 23790 23791 (face font-lock-string-face) 23791 23801 nil 23801 23802 (face font-lock-string-face) 23802 23825 (face font-lock-constant-face) 23825 23826 (face font-lock-string-face) 23826 23836 nil 23836 23837 (face font-lock-string-face) 23837 23862 (face font-lock-constant-face) 23862 23863 (face font-lock-string-face) 23863 23873 nil 23873 23874 (face font-lock-string-face) 23874 23906 (face font-lock-constant-face) 23906 23907 (face font-lock-string-face) 23907 23917 nil 23917 23918 (face font-lock-string-face) 23918 23947 (face font-lock-constant-face) 23947 23948 (face font-lock-string-face) 23948 23958 nil 23958 23959 (face font-lock-string-face) 23959 23981 (face font-lock-constant-face) 23981 23982 (face font-lock-string-face) 23982 23992 nil 23992 23993 (face font-lock-string-face) 23993 24014 (face font-lock-constant-face) 24014 24015 (face font-lock-string-face) 24015 24025 nil 24025 24026 (face font-lock-string-face) 24026 24054 (face font-lock-constant-face) 24054 24055 (face font-lock-string-face) 24055 24065 nil 24065 24066 (face font-lock-string-face) 24066 24093 (face font-lock-constant-face) 24093 24094 (face font-lock-string-face) 24094 24104 nil 24104 24105 (face font-lock-string-face) 24105 24133 (face font-lock-constant-face) 24133 24134 (face font-lock-string-face) 24134 24144 nil 24144 24145 (face font-lock-string-face) 24145 24177 (face font-lock-constant-face) 24177 24178 (face font-lock-string-face) 24178 24188 nil 24188 24189 (face font-lock-string-face) 24189 24221 (face font-lock-constant-face) 24221 24222 (face font-lock-string-face) 24222 24232 nil 24232 24233 (face font-lock-string-face) 24233 24277 (face font-lock-constant-face) 24277 24278 (face font-lock-string-face) 24278 24288 nil 24288 24289 (face font-lock-string-face) 24289 24328 (face font-lock-constant-face) 24328 24329 (face font-lock-string-face) 24329 24339 nil 24339 24340 (face font-lock-string-face) 24340 24379 (face font-lock-constant-face) 24379 24380 (face font-lock-string-face) 24380 24390 nil 24390 24391 (face font-lock-string-face) 24391 24424 (face font-lock-constant-face) 24424 24425 (face font-lock-string-face) 24425 24435 nil 24435 24436 (face font-lock-string-face) 24436 24476 (face font-lock-constant-face) 24476 24477 (face font-lock-string-face) 24477 24487 nil 24487 24488 (face font-lock-string-face) 24488 24521 (face font-lock-constant-face) 24521 24522 (face font-lock-string-face) 24522 24532 nil 24532 24533 (face font-lock-string-face) 24533 24567 (face font-lock-constant-face) 24567 24568 (face font-lock-string-face) 24568 24578 nil 24578 24579 (face font-lock-string-face) 24579 24610 (face font-lock-constant-face) 24610 24611 (face font-lock-string-face) 24611 24621 nil 24621 24622 (face font-lock-string-face) 24622 24673 (face font-lock-constant-face) 24673 24674 (face font-lock-string-face) 24674 24684 nil 24684 24685 (face font-lock-string-face) 24685 24725 (face font-lock-constant-face) 24725 24726 (face font-lock-string-face) 24726 24736 nil 24736 24737 (face font-lock-string-face) 24737 24773 (face font-lock-constant-face) 24773 24774 (face font-lock-string-face) 24774 24784 nil 24784 24785 (face font-lock-string-face) 24785 24821 (face font-lock-constant-face) 24821 24822 (face font-lock-string-face) 24822 24832 nil 24832 24833 (face font-lock-string-face) 24833 24874 (face font-lock-constant-face) 24874 24875 (face font-lock-string-face) 24875 24885 nil 24885 24886 (face font-lock-string-face) 24886 24926 (face font-lock-constant-face) 24926 24927 (face font-lock-string-face) 24927 24937 nil 24937 24938 (face font-lock-string-face) 24938 24977 (face font-lock-constant-face) 24977 24978 (face font-lock-string-face) 24978 24988 nil 24988 24989 (face font-lock-string-face) 24989 25035 (face font-lock-constant-face) 25035 25036 (face font-lock-string-face) 25036 25046 nil 25046 25047 (face font-lock-string-face) 25047 25070 (face font-lock-constant-face) 25070 25071 (face font-lock-string-face) 25071 25081 nil 25081 25082 (face font-lock-string-face) 25082 25104 (face font-lock-constant-face) 25104 25105 (face font-lock-string-face) 25105 25115 nil 25115 25116 (face font-lock-string-face) 25116 25152 (face font-lock-constant-face) 25152 25153 (face font-lock-string-face) 25153 25163 nil 25163 25164 (face font-lock-string-face) 25164 25210 (face font-lock-constant-face) 25210 25211 (face font-lock-string-face) 25211 25221 nil 25221 25222 (face font-lock-string-face) 25222 25250 (face font-lock-constant-face) 25250 25251 (face font-lock-string-face) 25251 25268 nil 25268 25269 (face font-lock-string-face) 25269 25279 (face font-lock-keyword-face) 25279 25280 (face font-lock-string-face) 25280 25293 nil 25293 25294 (face font-lock-string-face) 25294 25319 (face font-lock-variable-name-face) 25319 25320 (face font-lock-string-face) 25320 25334 nil 25334 25335 (face font-lock-string-face) 25335 25345 (face font-lock-keyword-face) 25345 25346 (face font-lock-string-face) 25346 25363 nil 25363 25364 (face font-lock-string-face) 25364 25385 (face font-lock-variable-name-face) 25385 25386 (face font-lock-string-face) 25386 25404 nil 25404 25405 (face font-lock-string-face) 25405 25417 (face font-lock-keyword-face) 25417 25418 (face font-lock-string-face) 25418 25438 nil 25438 25439 (face font-lock-string-face) 25439 25480 (face font-lock-function-name-face) 25480 25481 (face font-lock-string-face) 25481 25550 nil 25550 25551 (face font-lock-string-face) 25551 25566 (face font-lock-variable-name-face) 25566 25567 (face font-lock-string-face) 25567 25581 nil 25581 25582 (face font-lock-string-face) 25582 25594 (face font-lock-keyword-face) 25594 25595 (face font-lock-string-face) 25595 25611 nil 25611 25612 (face font-lock-string-face) 25612 25651 (face font-lock-function-name-face) 25651 25652 (face font-lock-string-face) 25652 25688 nil 25688 25689 (face font-lock-string-face) 25689 25704 (face font-lock-variable-name-face) 25704 25705 (face font-lock-string-face) 25705 25719 nil 25719 25720 (face font-lock-string-face) 25720 25728 (face font-lock-keyword-face) 25728 25729 (face font-lock-string-face) 25729 25745 nil 25745 25746 (face font-lock-string-face) 25746 25782 (face font-lock-constant-face) 25782 25783 (face font-lock-string-face) 25783 25797 nil 25797 25798 (face font-lock-string-face) 25798 25820 (face font-lock-constant-face) 25820 25821 (face font-lock-string-face) 25821 25835 nil 25835 25836 (face font-lock-string-face) 25836 25857 (face font-lock-constant-face) 25857 25858 (face font-lock-string-face) 25858 25872 nil 25872 25873 (face font-lock-string-face) 25873 25905 (face font-lock-constant-face) 25905 25906 (face font-lock-string-face) 25906 25920 nil 25920 25921 (face font-lock-string-face) 25921 25961 (face font-lock-constant-face) 25961 25962 (face font-lock-string-face) 25962 25976 nil 25976 25977 (face font-lock-string-face) 25977 26016 (face font-lock-constant-face) 26016 26017 (face font-lock-string-face) 26017 26031 nil 26031 26032 (face font-lock-string-face) 26032 26065 (face font-lock-constant-face) 26065 26066 (face font-lock-string-face) 26066 26080 nil 26080 26081 (face font-lock-string-face) 26081 26115 (face font-lock-constant-face) 26115 26116 (face font-lock-string-face) 26116 26130 nil 26130 26131 (face font-lock-string-face) 26131 26162 (face font-lock-constant-face) 26162 26163 (face font-lock-string-face) 26163 26177 nil 26177 26178 (face font-lock-string-face) 26178 26229 (face font-lock-constant-face) 26229 26230 (face font-lock-string-face) 26230 26244 nil 26244 26245 (face font-lock-string-face) 26245 26285 (face font-lock-constant-face) 26285 26286 (face font-lock-string-face) 26286 26300 nil 26300 26301 (face font-lock-string-face) 26301 26337 (face font-lock-constant-face) 26337 26338 (face font-lock-string-face) 26338 26352 nil 26352 26353 (face font-lock-string-face) 26353 26394 (face font-lock-constant-face) 26394 26395 (face font-lock-string-face) 26395 26409 nil 26409 26410 (face font-lock-string-face) 26410 26443 (face font-lock-constant-face) 26443 26444 (face font-lock-string-face) 26444 26458 nil 26458 26459 (face font-lock-string-face) 26459 26495 (face font-lock-constant-face) 26495 26496 (face font-lock-string-face) 26496 26532 nil 26532 26533 (face font-lock-string-face) 26533 26546 (face font-lock-variable-name-face) 26546 26547 (face font-lock-string-face) 26547 26561 nil 26561 26562 (face font-lock-string-face) 26562 26572 (face font-lock-keyword-face) 26572 26573 (face font-lock-string-face) 26573 26590 nil 26590 26591 (face font-lock-string-face) 26591 26604 (face font-lock-variable-name-face) 26604 26605 (face font-lock-string-face) 26605 26623 nil 26623 26624 (face font-lock-string-face) 26624 26631 (face font-lock-keyword-face) 26631 26632 (face font-lock-string-face) 26632 26652 nil 26652 26653 (face font-lock-string-face) 26653 26688 (face font-lock-constant-face) 26688 26689 (face font-lock-string-face) 26689 26722 nil 26722 26723 (face font-lock-string-face) 26723 26730 (face font-lock-keyword-face) 26730 26731 (face font-lock-string-face) 26731 26751 nil 26751 26752 (face font-lock-string-face) 26752 26760 (face font-lock-preprocessor-face) 26760 26761 (face font-lock-string-face) 26761 26831 nil 26831 26832 (face font-lock-string-face) 26832 26873 (face font-lock-variable-name-face) 26873 26874 (face font-lock-string-face) 26874 26888 nil 26888 26889 (face font-lock-string-face) 26889 26896 (face font-lock-keyword-face) 26896 26897 (face font-lock-string-face) 26897 26913 nil 26913 26914 (face font-lock-string-face) 26914 26954 (face font-lock-constant-face) 26954 26955 (face font-lock-string-face) 26955 26991 nil 26991 26992 (face font-lock-string-face) 26992 27035 (face font-lock-variable-name-face) 27035 27036 (face font-lock-string-face) 27036 27050 nil 27050 27051 (face font-lock-string-face) 27051 27058 (face font-lock-keyword-face) 27058 27059 (face font-lock-string-face) 27059 27075 nil 27075 27076 (face font-lock-string-face) 27076 27095 (face font-lock-constant-face) 27095 27096 (face font-lock-string-face) 27096 27110 nil 27110 27111 (face font-lock-string-face) 27111 27137 (face font-lock-constant-face) 27137 27138 (face font-lock-string-face) 27138 27152 nil 27152 27153 (face font-lock-string-face) 27153 27186 (face font-lock-constant-face) 27186 27187 (face font-lock-string-face) 27187 27201 nil 27201 27202 (face font-lock-string-face) 27202 27235 (face font-lock-constant-face) 27235 27236 (face font-lock-string-face) 27236 27291 nil 27291 27292 (face font-lock-string-face) 27292 27303 (face font-lock-keyword-face) 27303 27304 (face font-lock-string-face) 27304 27306 nil 27306 27307 (face font-lock-string-face) 27307 27325 (face font-lock-function-name-face) 27325 27326 (face font-lock-string-face) 27326 27334 nil 27334 27335 (face font-lock-string-face) 27335 27339 (face font-lock-keyword-face) 27339 27340 (face font-lock-string-face) 27340 27342 nil 27342 27343 (face font-lock-string-face) 27343 27357 (face font-lock-type-face) 27357 27358 (face font-lock-string-face) 27358 27366 nil 27366 27367 (face font-lock-string-face) 27367 27379 (face font-lock-keyword-face) 27379 27380 (face font-lock-string-face) 27380 27392 nil 27392 27393 (face font-lock-string-face) 27393 27398 (face font-lock-function-name-face) 27398 27399 (face font-lock-string-face) 27399 27409 nil 27409 27410 (face font-lock-string-face) 27410 27431 (face font-lock-function-name-face) 27431 27432 (face font-lock-string-face) 27432 27442 nil 27442 27443 (face font-lock-string-face) 27443 27469 (face font-lock-function-name-face) 27469 27470 (face font-lock-string-face) 27470 27480 nil 27480 27481 (face font-lock-string-face) 27481 27507 (face font-lock-function-name-face) 27507 27508 (face font-lock-string-face) 27508 27525 nil 27525 27526 (face font-lock-string-face) 27526 27533 (face font-lock-keyword-face) 27533 27534 (face font-lock-string-face) 27534 27546 nil 27546 27547 (face font-lock-string-face) 27547 27591 (face font-lock-constant-face) 27591 27592 (face font-lock-string-face) 27592 27602 nil 27602 27603 (face font-lock-string-face) 27603 27646 (face font-lock-constant-face) 27646 27647 (face font-lock-string-face) 27647 27657 nil 27657 27658 (face font-lock-string-face) 27658 27679 (face font-lock-constant-face) 27679 27680 (face font-lock-string-face) 27680 27690 nil 27690 27691 (face font-lock-string-face) 27691 27711 (face font-lock-constant-face) 27711 27712 (face font-lock-string-face) 27712 27722 nil 27722 27723 (face font-lock-string-face) 27723 27752 (face font-lock-constant-face) 27752 27753 (face font-lock-string-face) 27753 27763 nil 27763 27764 (face font-lock-string-face) 27764 27792 (face font-lock-constant-face) 27792 27793 (face font-lock-string-face) 27793 27803 nil 27803 27804 (face font-lock-string-face) 27804 27829 (face font-lock-constant-face) 27829 27830 (face font-lock-string-face) 27830 27840 nil 27840 27841 (face font-lock-string-face) 27841 27865 (face font-lock-constant-face) 27865 27866 (face font-lock-string-face) 27866 27876 nil 27876 27877 (face font-lock-string-face) 27877 27901 (face font-lock-constant-face) 27901 27902 (face font-lock-string-face) 27902 27912 nil 27912 27913 (face font-lock-string-face) 27913 27936 (face font-lock-constant-face) 27936 27937 (face font-lock-string-face) 27937 27947 nil 27947 27948 (face font-lock-string-face) 27948 27968 (face font-lock-constant-face) 27968 27969 (face font-lock-string-face) 27969 27979 nil 27979 27980 (face font-lock-string-face) 27980 27999 (face font-lock-constant-face) 27999 28000 (face font-lock-string-face) 28000 28030 nil 28030 28031 (face font-lock-string-face) 28031 28042 (face font-lock-keyword-face) 28042 28043 (face font-lock-string-face) 28043 28045 nil 28045 28046 (face font-lock-string-face) 28046 28058 (face font-lock-function-name-face) 28058 28059 (face font-lock-string-face) 28059 28067 nil 28067 28068 (face font-lock-string-face) 28068 28072 (face font-lock-keyword-face) 28072 28073 (face font-lock-string-face) 28073 28075 nil 28075 28076 (face font-lock-string-face) 28076 28086 (face font-lock-type-face) 28086 28087 (face font-lock-string-face) 28087 28095 nil 28095 28096 (face font-lock-string-face) 28096 28108 (face font-lock-keyword-face) 28108 28109 (face font-lock-string-face) 28109 28121 nil 28121 28122 (face font-lock-string-face) 28122 28127 (face font-lock-function-name-face) 28127 28128 (face font-lock-string-face) 28128 28138 nil 28138 28139 (face font-lock-string-face) 28139 28150 (face font-lock-function-name-face) 28150 28151 (face font-lock-string-face) 28151 28161 nil 28161 28162 (face font-lock-string-face) 28162 28183 (face font-lock-function-name-face) 28183 28184 (face font-lock-string-face) 28184 28194 nil 28194 28195 (face font-lock-string-face) 28195 28216 (face font-lock-function-name-face) 28216 28217 (face font-lock-string-face) 28217 28234 nil 28234 28235 (face font-lock-string-face) 28235 28242 (face font-lock-keyword-face) 28242 28243 (face font-lock-string-face) 28243 28255 nil 28255 28256 (face font-lock-string-face) 28256 28290 (face font-lock-constant-face) 28290 28291 (face font-lock-string-face) 28291 28321 nil 28321 28322 (face font-lock-string-face) 28322 28333 (face font-lock-keyword-face) 28333 28334 (face font-lock-string-face) 28334 28336 nil 28336 28337 (face font-lock-string-face) 28337 28349 (face font-lock-function-name-face) 28349 28350 (face font-lock-string-face) 28350 28358 nil 28358 28359 (face font-lock-string-face) 28359 28363 (face font-lock-keyword-face) 28363 28364 (face font-lock-string-face) 28364 28366 nil 28366 28367 (face font-lock-string-face) 28367 28377 (face font-lock-type-face) 28377 28378 (face font-lock-string-face) 28378 28386 nil 28386 28387 (face font-lock-string-face) 28387 28394 (face font-lock-keyword-face) 28394 28395 (face font-lock-string-face) 28395 28407 nil 28407 28408 (face font-lock-string-face) 28408 28441 (face font-lock-constant-face) 28441 28442 (face font-lock-string-face) 28442 28471 nil 28471 28472 (face font-lock-string-face) 28472 28483 (face font-lock-keyword-face) 28483 28484 (face font-lock-string-face) 28484 28486 nil 28486 28487 (face font-lock-string-face) 28487 28498 (face font-lock-function-name-face) 28498 28499 (face font-lock-string-face) 28499 28507 nil 28507 28508 (face font-lock-string-face) 28508 28512 (face font-lock-keyword-face) 28512 28513 (face font-lock-string-face) 28513 28515 nil 28515 28516 (face font-lock-string-face) 28516 28526 (face font-lock-type-face) 28526 28527 (face font-lock-string-face) 28527 28535 nil 28535 28536 (face font-lock-string-face) 28536 28548 (face font-lock-keyword-face) 28548 28549 (face font-lock-string-face) 28549 28561 nil 28561 28562 (face font-lock-string-face) 28562 28567 (face font-lock-function-name-face) 28567 28568 (face font-lock-string-face) 28568 28578 nil 28578 28579 (face font-lock-string-face) 28579 28600 (face font-lock-function-name-face) 28600 28601 (face font-lock-string-face) 28601 28618 nil 28618 28619 (face font-lock-string-face) 28619 28626 (face font-lock-keyword-face) 28626 28627 (face font-lock-string-face) 28627 28639 nil 28639 28640 (face font-lock-string-face) 28640 28672 (face font-lock-constant-face) 28672 28673 (face font-lock-string-face) 28673 28698 nil 28698 28699 (face font-lock-string-face) 28699 28709 (face font-lock-keyword-face) 28709 28710 (face font-lock-string-face) 28710 28719 nil 28719 28720 (face font-lock-string-face) 28720 28729 (face font-lock-variable-name-face) 28729 28730 (face font-lock-string-face) 28730 28740 nil 28740 28741 (face font-lock-string-face) 28741 28748 (face font-lock-keyword-face) 28748 28749 (face font-lock-string-face) 28749 28773 nil 28773 28774 (face font-lock-string-face) 28774 28785 (face font-lock-keyword-face) 28785 28786 (face font-lock-string-face) 28786 28788 nil 28788 28789 (face font-lock-string-face) 28789 28799 (face font-lock-function-name-face) 28799 28800 (face font-lock-string-face) 28800 28812 nil 28812 28813 (face font-lock-string-face) 28813 28817 (face font-lock-keyword-face) 28817 28818 (face font-lock-string-face) 28818 28820 nil 28820 28821 (face font-lock-string-face) 28821 28831 (face font-lock-type-face) 28831 28832 (face font-lock-string-face) 28832 28844 nil 28844 28845 (face font-lock-string-face) 28845 28857 (face font-lock-keyword-face) 28857 28858 (face font-lock-string-face) 28858 28874 nil 28874 28875 (face font-lock-string-face) 28875 28880 (face font-lock-function-name-face) 28880 28881 (face font-lock-string-face) 28881 28895 nil 28895 28896 (face font-lock-string-face) 28896 28907 (face font-lock-function-name-face) 28907 28908 (face font-lock-string-face) 28908 28922 nil 28922 28923 (face font-lock-string-face) 28923 28944 (face font-lock-function-name-face) 28944 28945 (face font-lock-string-face) 28945 28959 nil 28959 28960 (face font-lock-string-face) 28960 29043 (face font-lock-function-name-face) 29043 29044 (face font-lock-string-face) 29044 29058 nil 29058 29059 (face font-lock-string-face) 29059 29074 (face font-lock-function-name-face) 29074 29075 (face font-lock-string-face) 29075 29100 nil 29100 29101 (face font-lock-string-face) 29101 29113 (face font-lock-keyword-face) 29113 29114 (face font-lock-string-face) 29114 29130 nil 29130 29131 (face font-lock-string-face) 29131 29133 (face font-lock-constant-face) 29133 29138 (face font-lock-variable-name-face) 29138 29163 (face font-lock-constant-face) 29163 29164 (face font-lock-string-face) 29164 29189 nil 29189 29190 (face font-lock-string-face) 29190 29197 (face font-lock-keyword-face) 29197 29198 (face font-lock-string-face) 29198 29214 nil 29214 29215 (face font-lock-string-face) 29215 29238 (face font-lock-constant-face) 29238 29239 (face font-lock-string-face) 29239 29253 nil 29253 29254 (face font-lock-string-face) 29254 29280 (face font-lock-constant-face) 29280 29281 (face font-lock-string-face) 29281 29295 nil 29295 29296 (face font-lock-string-face) 29296 29321 (face font-lock-constant-face) 29321 29322 (face font-lock-string-face) 29322 29336 nil 29336 29337 (face font-lock-string-face) 29337 29361 (face font-lock-constant-face) 29361 29362 (face font-lock-string-face) 29362 29376 nil 29376 29377 (face font-lock-string-face) 29377 29407 (face font-lock-constant-face) 29407 29408 (face font-lock-string-face) 29408 29422 nil 29422 29423 (face font-lock-string-face) 29423 29453 (face font-lock-constant-face) 29453 29454 (face font-lock-string-face) 29454 29468 nil 29468 29469 (face font-lock-string-face) 29469 29493 (face font-lock-constant-face) 29493 29494 (face font-lock-string-face) 29494 29508 nil 29508 29509 (face font-lock-string-face) 29509 29532 (face font-lock-constant-face) 29532 29533 (face font-lock-string-face) 29533 29547 nil 29547 29548 (face font-lock-string-face) 29548 29575 (face font-lock-constant-face) 29575 29576 (face font-lock-string-face) 29576 29590 nil 29590 29591 (face font-lock-string-face) 29591 29614 (face font-lock-constant-face) 29614 29615 (face font-lock-string-face) 29615 29640 nil 29640 29655 (face font-lock-string-face) 29655 29671 nil 29671 29685 (face font-lock-string-face) 29685 29703 nil 29703 29714 (face font-lock-string-face) 29714 29716 nil 29716 29719 (face font-lock-string-face) 29719 29729 nil 29729 29754 (face font-lock-comment-face) 29754 29792 nil 29792 29793 (face font-lock-string-face) 29793 29800 (face font-lock-keyword-face) 29800 29801 (face font-lock-string-face) 29801 29817 nil 29817 29818 (face font-lock-string-face) 29818 29843 (face font-lock-preprocessor-face) 29843 29844 (face font-lock-string-face) 29844 29892 nil 29892 29893 (face font-lock-string-face) 29893 29929 (face font-lock-variable-name-face) 29929 29930 (face font-lock-string-face) 29930 29940 nil 29940 29941 (face font-lock-string-face) 29941 29948 (face font-lock-keyword-face) 29948 29949 (face font-lock-string-face) 29949 29973 nil 29973 29974 (face font-lock-string-face) 29974 29985 (face font-lock-keyword-face) 29985 29986 (face font-lock-string-face) 29986 29988 nil 29988 29989 (face font-lock-string-face) 29989 30001 (face font-lock-function-name-face) 30001 30002 (face font-lock-string-face) 30002 30014 nil 30014 30015 (face font-lock-string-face) 30015 30019 (face font-lock-keyword-face) 30019 30020 (face font-lock-string-face) 30020 30022 nil 30022 30023 (face font-lock-string-face) 30023 30033 (face font-lock-type-face) 30033 30034 (face font-lock-string-face) 30034 30046 nil 30046 30047 (face font-lock-string-face) 30047 30059 (face font-lock-keyword-face) 30059 30060 (face font-lock-string-face) 30060 30076 nil 30076 30077 (face font-lock-string-face) 30077 30082 (face font-lock-function-name-face) 30082 30083 (face font-lock-string-face) 30083 30097 nil 30097 30098 (face font-lock-string-face) 30098 30109 (face font-lock-function-name-face) 30109 30110 (face font-lock-string-face) 30110 30124 nil 30124 30125 (face font-lock-string-face) 30125 30146 (face font-lock-function-name-face) 30146 30147 (face font-lock-string-face) 30147 30161 nil 30161 30162 (face font-lock-string-face) 30162 30180 (face font-lock-function-name-face) 30180 30181 (face font-lock-string-face) 30181 30206 nil 30206 30207 (face font-lock-string-face) 30207 30214 (face font-lock-keyword-face) 30214 30215 (face font-lock-string-face) 30215 30231 nil 30231 30232 (face font-lock-string-face) 30232 30266 (face font-lock-constant-face) 30266 30267 (face font-lock-string-face) 30267 30281 nil 30281 30282 (face font-lock-string-face) 30282 30321 (face font-lock-constant-face) 30321 30322 (face font-lock-string-face) 30322 30336 nil 30336 30337 (face font-lock-string-face) 30337 30375 (face font-lock-constant-face) 30375 30376 (face font-lock-string-face) 30376 30390 nil 30390 30391 (face font-lock-string-face) 30391 30430 (face font-lock-constant-face) 30430 30431 (face font-lock-string-face) 30431 30445 nil 30445 30446 (face font-lock-string-face) 30446 30484 (face font-lock-constant-face) 30484 30485 (face font-lock-string-face) 30485 30499 nil 30499 30500 (face font-lock-string-face) 30500 30533 (face font-lock-constant-face) 30533 30534 (face font-lock-string-face) 30534 30548 nil 30548 30549 (face font-lock-string-face) 30549 30581 (face font-lock-constant-face) 30581 30582 (face font-lock-string-face) 30582 30596 nil 30596 30597 (face font-lock-string-face) 30597 30626 (face font-lock-constant-face) 30626 30627 (face font-lock-string-face) 30627 30641 nil 30641 30642 (face font-lock-string-face) 30642 30670 (face font-lock-constant-face) 30670 30671 (face font-lock-string-face) 30671 30685 nil 30685 30686 (face font-lock-string-face) 30686 30714 (face font-lock-constant-face) 30714 30715 (face font-lock-string-face) 30715 30729 nil 30729 30730 (face font-lock-string-face) 30730 30757 (face font-lock-constant-face) 30757 30758 (face font-lock-string-face) 30758 30783 nil 30783 30784 (face font-lock-string-face) 30784 30794 (face font-lock-keyword-face) 30794 30795 (face font-lock-string-face) 30795 30812 nil 30812 30813 (face font-lock-string-face) 30813 30834 (face font-lock-variable-name-face) 30834 30835 (face font-lock-string-face) 30835 30853 nil 30853 30854 (face font-lock-string-face) 30854 30866 (face font-lock-keyword-face) 30866 30867 (face font-lock-string-face) 30867 30887 nil 30887 30888 (face font-lock-string-face) 30888 30917 (face font-lock-function-name-face) 30917 30918 (face font-lock-string-face) 30918 30951 nil 30951 30952 (face font-lock-string-face) 30952 30959 (face font-lock-keyword-face) 30959 30960 (face font-lock-string-face) 30960 30980 nil 30980 30981 (face font-lock-string-face) 30981 31015 (face font-lock-constant-face) 31015 31016 (face font-lock-string-face) 31016 31064 nil 31064 31065 (face font-lock-string-face) 31065 31074 (face font-lock-variable-name-face) 31074 31075 (face font-lock-string-face) 31075 31093 nil 31093 31094 (face font-lock-string-face) 31094 31106 (face font-lock-keyword-face) 31106 31107 (face font-lock-string-face) 31107 31127 nil 31127 31128 (face font-lock-string-face) 31128 31175 (face font-lock-function-name-face) 31175 31176 (face font-lock-string-face) 31176 31194 nil 31194 31195 (face font-lock-string-face) 31195 31245 (face font-lock-function-name-face) 31245 31246 (face font-lock-string-face) 31246 31279 nil 31279 31280 (face font-lock-string-face) 31280 31287 (face font-lock-keyword-face) 31287 31288 (face font-lock-string-face) 31288 31308 nil 31308 31309 (face font-lock-string-face) 31309 31341 (face font-lock-constant-face) 31341 31342 (face font-lock-string-face) 31342 31423 nil 31423 31424 (face font-lock-string-face) 31424 31462 (face font-lock-variable-name-face) 31462 31463 (face font-lock-string-face) 31463 31473 nil 31473 31474 (face font-lock-string-face) 31474 31481 (face font-lock-keyword-face) 31481 31482 (face font-lock-string-face) 31482 31506 nil 31506 31507 (face font-lock-string-face) 31507 31518 (face font-lock-keyword-face) 31518 31519 (face font-lock-string-face) 31519 31521 nil 31521 31522 (face font-lock-string-face) 31522 31539 (face font-lock-function-name-face) 31539 31540 (face font-lock-string-face) 31540 31552 nil 31552 31553 (face font-lock-string-face) 31553 31557 (face font-lock-keyword-face) 31557 31558 (face font-lock-string-face) 31558 31560 nil 31560 31561 (face font-lock-string-face) 31561 31571 (face font-lock-type-face) 31571 31572 (face font-lock-string-face) 31572 31584 nil 31584 31585 (face font-lock-string-face) 31585 31597 (face font-lock-keyword-face) 31597 31598 (face font-lock-string-face) 31598 31614 nil 31614 31615 (face font-lock-string-face) 31615 31636 (face font-lock-function-name-face) 31636 31637 (face font-lock-string-face) 31637 31651 nil 31651 31652 (face font-lock-string-face) 31652 31670 (face font-lock-function-name-face) 31670 31671 (face font-lock-string-face) 31671 31696 nil 31696 31697 (face font-lock-string-face) 31697 31706 (face font-lock-keyword-face) 31706 31707 (face font-lock-string-face) 31707 31723 nil 31723 31724 (face font-lock-string-face) 31724 31728 (face font-lock-constant-face) 31728 31729 (face font-lock-string-face) 31729 31743 nil 31743 31744 (face font-lock-string-face) 31744 31748 (face font-lock-constant-face) 31748 31749 (face font-lock-string-face) 31749 31774 nil 31774 31775 (face font-lock-string-face) 31775 31782 (face font-lock-keyword-face) 31782 31783 (face font-lock-string-face) 31783 31799 nil 31799 31800 (face font-lock-string-face) 31800 31844 (face font-lock-constant-face) 31844 31845 (face font-lock-string-face) 31845 31893 nil 31893 31894 (face font-lock-string-face) 31894 31943 (face font-lock-variable-name-face) 31943 31944 (face font-lock-string-face) 31944 31954 nil 31954 31955 (face font-lock-string-face) 31955 31962 (face font-lock-keyword-face) 31962 31963 (face font-lock-string-face) 31963 31987 nil 31987 31988 (face font-lock-string-face) 31988 31999 (face font-lock-keyword-face) 31999 32000 (face font-lock-string-face) 32000 32002 nil 32002 32003 (face font-lock-string-face) 32003 32013 (face font-lock-function-name-face) 32013 32014 (face font-lock-string-face) 32014 32026 nil 32026 32027 (face font-lock-string-face) 32027 32031 (face font-lock-keyword-face) 32031 32032 (face font-lock-string-face) 32032 32034 nil 32034 32035 (face font-lock-string-face) 32035 32045 (face font-lock-type-face) 32045 32046 (face font-lock-string-face) 32046 32058 nil 32058 32059 (face font-lock-string-face) 32059 32071 (face font-lock-keyword-face) 32071 32072 (face font-lock-string-face) 32072 32088 nil 32088 32089 (face font-lock-string-face) 32089 32094 (face font-lock-function-name-face) 32094 32095 (face font-lock-string-face) 32095 32109 nil 32109 32110 (face font-lock-string-face) 32110 32121 (face font-lock-function-name-face) 32121 32122 (face font-lock-string-face) 32122 32136 nil 32136 32137 (face font-lock-string-face) 32137 32158 (face font-lock-function-name-face) 32158 32159 (face font-lock-string-face) 32159 32173 nil 32173 32174 (face font-lock-string-face) 32174 32192 (face font-lock-function-name-face) 32192 32193 (face font-lock-string-face) 32193 32218 nil 32218 32219 (face font-lock-string-face) 32219 32232 (face font-lock-keyword-face) 32232 32233 (face font-lock-string-face) 32233 32249 nil 32249 32250 (face font-lock-string-face) 32250 32259 (face font-lock-keyword-face) 32259 32260 (face font-lock-string-face) 32260 32278 nil 32278 32279 (face font-lock-string-face) 32279 32283 (face font-lock-constant-face) 32283 32284 (face font-lock-string-face) 32284 32300 nil 32300 32301 (face font-lock-string-face) 32301 32306 (face font-lock-constant-face) 32306 32307 (face font-lock-string-face) 32307 32323 nil 32323 32324 (face font-lock-string-face) 32324 32333 (face font-lock-constant-face) 32333 32334 (face font-lock-string-face) 32334 32350 nil 32350 32351 (face font-lock-string-face) 32351 32357 (face font-lock-constant-face) 32357 32358 (face font-lock-string-face) 32358 32398 nil 32398 32399 (face font-lock-string-face) 32399 32406 (face font-lock-keyword-face) 32406 32407 (face font-lock-string-face) 32407 32423 nil 32423 32424 (face font-lock-string-face) 32424 32462 (face font-lock-constant-face) 32462 32463 (face font-lock-string-face) 32463 32477 nil 32477 32478 (face font-lock-string-face) 32478 32515 (face font-lock-constant-face) 32515 32516 (face font-lock-string-face) 32516 32530 nil 32530 32531 (face font-lock-string-face) 32531 32568 (face font-lock-constant-face) 32568 32569 (face font-lock-string-face) 32569 32583 nil 32583 32584 (face font-lock-string-face) 32584 32620 (face font-lock-constant-face) 32620 32621 (face font-lock-string-face) 32621 32635 nil 32635 32636 (face font-lock-string-face) 32636 32666 (face font-lock-constant-face) 32666 32667 (face font-lock-string-face) 32667 32681 nil 32681 32682 (face font-lock-string-face) 32682 32720 (face font-lock-constant-face) 32720 32721 (face font-lock-string-face) 32721 32735 nil 32735 32736 (face font-lock-string-face) 32736 32773 (face font-lock-constant-face) 32773 32774 (face font-lock-string-face) 32774 32822 nil 32822 32823 (face font-lock-string-face) 32823 32838 (face font-lock-variable-name-face) 32838 32839 (face font-lock-string-face) 32839 32849 nil 32849 32850 (face font-lock-string-face) 32850 32857 (face font-lock-keyword-face) 32857 32858 (face font-lock-string-face) 32858 32882 nil 32882 32883 (face font-lock-string-face) 32883 32894 (face font-lock-keyword-face) 32894 32895 (face font-lock-string-face) 32895 32897 nil 32897 32898 (face font-lock-string-face) 32898 32912 (face font-lock-function-name-face) 32912 32913 (face font-lock-string-face) 32913 32925 nil 32925 32926 (face font-lock-string-face) 32926 32930 (face font-lock-keyword-face) 32930 32931 (face font-lock-string-face) 32931 32933 nil 32933 32934 (face font-lock-string-face) 32934 32948 (face font-lock-type-face) 32948 32949 (face font-lock-string-face) 32949 32961 nil 32961 32962 (face font-lock-string-face) 32962 32969 (face font-lock-keyword-face) 32969 32970 (face font-lock-string-face) 32970 32986 nil 32986 32987 (face font-lock-string-face) 32987 33022 (face font-lock-constant-face) 33022 33023 (face font-lock-string-face) 33023 33037 nil 33037 33038 (face font-lock-string-face) 33038 33072 (face font-lock-constant-face) 33072 33073 (face font-lock-string-face) 33073 33098 nil 33098 33099 (face font-lock-string-face) 33099 33111 (face font-lock-keyword-face) 33111 33112 (face font-lock-string-face) 33112 33128 nil 33128 33129 (face font-lock-string-face) 33129 33150 (face font-lock-function-name-face) 33150 33151 (face font-lock-string-face) 33151 33176 nil 33176 33177 (face font-lock-string-face) 33177 33189 (face font-lock-keyword-face) 33189 33190 (face font-lock-string-face) 33190 33206 nil 33206 33207 (face font-lock-string-face) 33207 33209 (face font-lock-constant-face) 33209 33232 (face font-lock-variable-name-face) 33232 33239 (face font-lock-constant-face) 33239 33240 (face font-lock-string-face) 33240 33265 nil 33265 33266 (face font-lock-string-face) 33266 33273 (face font-lock-keyword-face) 33273 33274 (face font-lock-string-face) 33274 33306 nil 33306 33307 (face font-lock-string-face) 33307 33318 (face font-lock-keyword-face) 33318 33319 (face font-lock-string-face) 33319 33321 nil 33321 33322 (face font-lock-string-face) 33322 33342 (face font-lock-function-name-face) 33342 33343 (face font-lock-string-face) 33343 33359 nil 33359 33360 (face font-lock-string-face) 33360 33366 (face font-lock-keyword-face) 33366 33367 (face font-lock-string-face) 33367 33387 nil 33387 33388 (face font-lock-string-face) 33388 33434 (face font-lock-constant-face) 33434 33435 (face font-lock-string-face) 33435 33453 nil 33453 33454 (face font-lock-string-face) 33454 33519 (face font-lock-constant-face) 33519 33520 (face font-lock-string-face) 33520 33553 nil 33553 33554 (face font-lock-string-face) 33554 33561 (face font-lock-keyword-face) 33561 33562 (face font-lock-string-face) 33562 33582 nil 33582 33583 (face font-lock-string-face) 33583 33585 (face font-lock-constant-face) 33585 33608 (face font-lock-variable-name-face) 33608 33647 (face font-lock-constant-face) 33647 33648 (face font-lock-string-face) 33648 33681 nil 33681 33682 (face font-lock-string-face) 33682 33688 (face font-lock-keyword-face) 33688 33689 (face font-lock-string-face) 33689 33709 nil 33709 33710 (face font-lock-string-face) 33710 33716 (face font-lock-constant-face) 33716 33717 (face font-lock-string-face) 33717 33735 nil 33735 33736 (face font-lock-string-face) 33736 33738 (face font-lock-constant-face) 33738 33743 (face font-lock-variable-name-face) 33743 33788 (face font-lock-constant-face) 33788 33789 (face font-lock-string-face) 33789 33807 nil 33807 33808 (face font-lock-string-face) 33808 33810 (face font-lock-constant-face) 33810 33811 (face font-lock-string-face) 33811 33829 nil 33829 33830 (face font-lock-string-face) 33830 33833 (face font-lock-constant-face) 33833 33840 (face font-lock-variable-name-face) 33840 33841 (face font-lock-constant-face) 33841 33842 (face font-lock-string-face) 33842 33860 nil 33860 33861 (face font-lock-string-face) 33861 33864 (face font-lock-constant-face) 33864 33872 (face font-lock-variable-name-face) 33872 33873 (face font-lock-constant-face) 33873 33874 (face font-lock-string-face) 33874 33952 nil 33952 33953 (face font-lock-string-face) 33953 33964 (face font-lock-keyword-face) 33964 33965 (face font-lock-string-face) 33965 33967 nil 33967 33968 (face font-lock-string-face) 33968 33978 (face font-lock-function-name-face) 33978 33979 (face font-lock-string-face) 33979 33991 nil 33991 33992 (face font-lock-string-face) 33992 33996 (face font-lock-keyword-face) 33996 33997 (face font-lock-string-face) 33997 33999 nil 33999 34000 (face font-lock-string-face) 34000 34004 (face font-lock-type-face) 34004 34005 (face font-lock-string-face) 34005 34017 nil 34017 34018 (face font-lock-string-face) 34018 34030 (face font-lock-keyword-face) 34030 34031 (face font-lock-string-face) 34031 34035 nil 34035 34036 (face font-lock-string-face) 34036 34062 (face font-lock-function-name-face) 34062 34063 (face font-lock-string-face) 34063 34077 nil 34077 34078 (face font-lock-string-face) 34078 34087 (face font-lock-keyword-face) 34087 34088 (face font-lock-string-face) 34088 34104 nil 34104 34105 (face font-lock-string-face) 34105 34117 (face font-lock-variable-name-face) 34117 34118 (face font-lock-string-face) 34118 34120 nil 34120 34121 (face font-lock-string-face) 34121 34126 (face font-lock-variable-name-face) 34126 34127 (face font-lock-string-face) 34127 34141 nil 34141 34142 (face font-lock-string-face) 34142 34153 (face font-lock-variable-name-face) 34153 34154 (face font-lock-string-face) 34154 34156 nil 34156 34157 (face font-lock-string-face) 34157 34174 (face font-lock-variable-name-face) 34174 34175 (face font-lock-string-face) 34175 34200 nil 34200 34201 (face font-lock-string-face) 34201 34209 (face font-lock-keyword-face) 34209 34210 (face font-lock-string-face) 34210 34214 nil 34214 34215 (face font-lock-string-face) 34215 34233 (face font-lock-constant-face) 34233 34234 (face font-lock-string-face) 34234 34268 nil 34268 34287 (face font-lock-comment-face) 34287 34293 nil 34293 34365 (face font-lock-comment-face) 34365 34371 nil 34371 34372 (face font-lock-string-face) 34372 34379 (face font-lock-keyword-face) 34379 34380 (face font-lock-string-face) 34380 34404 nil 34404 34405 (face font-lock-string-face) 34405 34416 (face font-lock-keyword-face) 34416 34417 (face font-lock-string-face) 34417 34419 nil 34419 34420 (face font-lock-string-face) 34420 34436 (face font-lock-function-name-face) 34436 34437 (face font-lock-string-face) 34437 34449 nil 34449 34450 (face font-lock-string-face) 34450 34454 (face font-lock-keyword-face) 34454 34455 (face font-lock-string-face) 34455 34457 nil 34457 34458 (face font-lock-string-face) 34458 34468 (face font-lock-type-face) 34468 34469 (face font-lock-string-face) 34469 34481 nil 34481 34482 (face font-lock-string-face) 34482 34494 (face font-lock-keyword-face) 34494 34495 (face font-lock-string-face) 34495 34511 nil 34511 34512 (face font-lock-string-face) 34512 34517 (face font-lock-function-name-face) 34517 34518 (face font-lock-string-face) 34518 34532 nil 34532 34533 (face font-lock-string-face) 34533 34551 (face font-lock-function-name-face) 34551 34552 (face font-lock-string-face) 34552 34566 nil 34566 34567 (face font-lock-string-face) 34567 34588 (face font-lock-function-name-face) 34588 34589 (face font-lock-string-face) 34589 34603 nil 34603 34604 (face font-lock-string-face) 34604 34630 (face font-lock-function-name-face) 34630 34631 (face font-lock-string-face) 34631 34645 nil 34645 34646 (face font-lock-string-face) 34646 34680 (face font-lock-function-name-face) 34680 34681 (face font-lock-string-face) 34681 34695 nil 34695 34696 (face font-lock-string-face) 34696 34730 (face font-lock-function-name-face) 34730 34731 (face font-lock-string-face) 34731 34745 nil 34745 34746 (face font-lock-string-face) 34746 34772 (face font-lock-function-name-face) 34772 34773 (face font-lock-string-face) 34773 34787 nil 34787 34788 (face font-lock-string-face) 34788 34827 (face font-lock-function-name-face) 34827 34828 (face font-lock-string-face) 34828 34853 nil 34853 34854 (face font-lock-string-face) 34854 34861 (face font-lock-keyword-face) 34861 34862 (face font-lock-string-face) 34862 34878 nil 34878 34879 (face font-lock-string-face) 34879 34904 (face font-lock-constant-face) 34904 34905 (face font-lock-string-face) 34905 34930 nil 34930 34931 (face font-lock-string-face) 34931 34941 (face font-lock-keyword-face) 34941 34942 (face font-lock-string-face) 34942 34959 nil 34959 34960 (face font-lock-string-face) 34960 34981 (face font-lock-variable-name-face) 34981 34982 (face font-lock-string-face) 34982 35000 nil 35000 35001 (face font-lock-string-face) 35001 35013 (face font-lock-keyword-face) 35013 35014 (face font-lock-string-face) 35014 35034 nil 35034 35077 (face font-lock-comment-face) 35077 35093 nil 35093 35123 (face font-lock-comment-face) 35123 35139 nil 35139 35164 (face font-lock-comment-face) 35164 35180 nil 35180 35194 (face font-lock-comment-face) 35194 35210 nil 35210 35211 (face font-lock-string-face) 35211 35240 (face font-lock-function-name-face) 35240 35241 (face font-lock-string-face) 35241 35274 nil 35274 35275 (face font-lock-string-face) 35275 35285 (face font-lock-keyword-face) 35285 35286 (face font-lock-string-face) 35286 35307 nil 35307 35308 (face font-lock-string-face) 35308 35329 (face font-lock-variable-name-face) 35329 35330 (face font-lock-string-face) 35330 35352 nil 35352 35353 (face font-lock-string-face) 35353 35365 (face font-lock-keyword-face) 35365 35366 (face font-lock-string-face) 35366 35390 nil 35390 35391 (face font-lock-string-face) 35391 35432 (face font-lock-function-name-face) 35432 35433 (face font-lock-string-face) 35433 35553 nil 35553 35554 (face font-lock-string-face) 35554 35565 (face font-lock-keyword-face) 35565 35566 (face font-lock-string-face) 35566 35568 nil 35568 35569 (face font-lock-string-face) 35569 35592 (face font-lock-function-name-face) 35592 35593 (face font-lock-string-face) 35593 35605 nil 35605 35606 (face font-lock-string-face) 35606 35610 (face font-lock-keyword-face) 35610 35611 (face font-lock-string-face) 35611 35613 nil 35613 35614 (face font-lock-string-face) 35614 35624 (face font-lock-type-face) 35624 35625 (face font-lock-string-face) 35625 35637 nil 35637 35638 (face font-lock-string-face) 35638 35650 (face font-lock-keyword-face) 35650 35651 (face font-lock-string-face) 35651 35667 nil 35667 35668 (face font-lock-string-face) 35668 35673 (face font-lock-function-name-face) 35673 35674 (face font-lock-string-face) 35674 35688 nil 35688 35689 (face font-lock-string-face) 35689 35707 (face font-lock-function-name-face) 35707 35708 (face font-lock-string-face) 35708 35722 nil 35722 35723 (face font-lock-string-face) 35723 35757 (face font-lock-function-name-face) 35757 35758 (face font-lock-string-face) 35758 35772 nil 35772 35773 (face font-lock-string-face) 35773 35799 (face font-lock-function-name-face) 35799 35800 (face font-lock-string-face) 35800 35814 nil 35814 35815 (face font-lock-string-face) 35815 35841 (face font-lock-function-name-face) 35841 35842 (face font-lock-string-face) 35842 35856 nil 35856 35857 (face font-lock-string-face) 35857 35896 (face font-lock-function-name-face) 35896 35897 (face font-lock-string-face) 35897 35922 nil 35922 35923 (face font-lock-string-face) 35923 35930 (face font-lock-keyword-face) 35930 35931 (face font-lock-string-face) 35931 35947 nil 35947 35948 (face font-lock-string-face) 35948 35970 (face font-lock-constant-face) 35970 35971 (face font-lock-string-face) 35971 35985 nil 35985 35986 (face font-lock-string-face) 35986 36011 (face font-lock-constant-face) 36011 36012 (face font-lock-string-face) 36012 36026 nil 36026 36027 (face font-lock-string-face) 36027 36060 (face font-lock-constant-face) 36060 36061 (face font-lock-string-face) 36061 36075 nil 36075 36076 (face font-lock-string-face) 36076 36117 (face font-lock-constant-face) 36117 36118 (face font-lock-string-face) 36118 36143 nil 36143 36144 (face font-lock-string-face) 36144 36154 (face font-lock-keyword-face) 36154 36155 (face font-lock-string-face) 36155 36172 nil 36172 36173 (face font-lock-string-face) 36173 36198 (face font-lock-variable-name-face) 36198 36199 (face font-lock-string-face) 36199 36217 nil 36217 36218 (face font-lock-string-face) 36218 36228 (face font-lock-keyword-face) 36228 36229 (face font-lock-string-face) 36229 36250 nil 36250 36251 (face font-lock-string-face) 36251 36272 (face font-lock-variable-name-face) 36272 36273 (face font-lock-string-face) 36273 36295 nil 36295 36296 (face font-lock-string-face) 36296 36308 (face font-lock-keyword-face) 36308 36309 (face font-lock-string-face) 36309 36333 nil 36333 36334 (face font-lock-string-face) 36334 36375 (face font-lock-function-name-face) 36375 36376 (face font-lock-string-face) 36376 36496 nil 36496 36497 (face font-lock-string-face) 36497 36508 (face font-lock-keyword-face) 36508 36509 (face font-lock-string-face) 36509 36511 nil 36511 36512 (face font-lock-string-face) 36512 36524 (face font-lock-function-name-face) 36524 36525 (face font-lock-string-face) 36525 36537 nil 36537 36538 (face font-lock-string-face) 36538 36542 (face font-lock-keyword-face) 36542 36543 (face font-lock-string-face) 36543 36545 nil 36545 36546 (face font-lock-string-face) 36546 36556 (face font-lock-type-face) 36556 36557 (face font-lock-string-face) 36557 36569 nil 36569 36570 (face font-lock-string-face) 36570 36582 (face font-lock-keyword-face) 36582 36583 (face font-lock-string-face) 36583 36599 nil 36599 36600 (face font-lock-string-face) 36600 36605 (face font-lock-function-name-face) 36605 36606 (face font-lock-string-face) 36606 36620 nil 36620 36621 (face font-lock-string-face) 36621 36642 (face font-lock-function-name-face) 36642 36643 (face font-lock-string-face) 36643 36657 nil 36657 36658 (face font-lock-string-face) 36658 36697 (face font-lock-function-name-face) 36697 36698 (face font-lock-string-face) 36698 36723 nil 36723 36724 (face font-lock-string-face) 36724 36731 (face font-lock-keyword-face) 36731 36732 (face font-lock-string-face) 36732 36748 nil 36748 36749 (face font-lock-string-face) 36749 36782 (face font-lock-constant-face) 36782 36783 (face font-lock-string-face) 36783 36829 nil 36829 36830 (face font-lock-string-face) 36830 36841 (face font-lock-keyword-face) 36841 36842 (face font-lock-string-face) 36842 36844 nil 36844 36845 (face font-lock-string-face) 36845 36856 (face font-lock-function-name-face) 36856 36857 (face font-lock-string-face) 36857 36869 nil 36869 36870 (face font-lock-string-face) 36870 36874 (face font-lock-keyword-face) 36874 36875 (face font-lock-string-face) 36875 36877 nil 36877 36878 (face font-lock-string-face) 36878 36888 (face font-lock-type-face) 36888 36889 (face font-lock-string-face) 36889 36901 nil 36901 36902 (face font-lock-string-face) 36902 36914 (face font-lock-keyword-face) 36914 36915 (face font-lock-string-face) 36915 36931 nil 36931 36932 (face font-lock-string-face) 36932 36937 (face font-lock-function-name-face) 36937 36938 (face font-lock-string-face) 36938 36952 nil 36952 36953 (face font-lock-string-face) 36953 36974 (face font-lock-function-name-face) 36974 36975 (face font-lock-string-face) 36975 36989 nil 36989 36990 (face font-lock-string-face) 36990 37029 (face font-lock-function-name-face) 37029 37030 (face font-lock-string-face) 37030 37055 nil 37055 37056 (face font-lock-string-face) 37056 37063 (face font-lock-keyword-face) 37063 37064 (face font-lock-string-face) 37064 37080 nil 37080 37081 (face font-lock-string-face) 37081 37113 (face font-lock-constant-face) 37113 37114 (face font-lock-string-face) 37114 37163 nil)",
          "",
          "---------------"
        ]
      }
    }
  ]
}