{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db5ed35609338f6960975433ed16cb86dfd4fc0f",
      "candidate_info": {
        "commit_hash": "db5ed35609338f6960975433ed16cb86dfd4fc0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db5ed35609338f6960975433ed16cb86dfd4fc0f",
        "files": [
          "ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5eb.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a buffer overread in fts5 that could occur when parsing corrupt configuration records.\n\nFossilOrigin-Name: 355afd77df21a2265871ca6d075f26b1fa121c7c2682cf512281944ff0c2186d",
        "before_after_code_files": [
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   assert( q=='[' || q=='\\'' || q=='\"' || q=='`' );",
          "151:   if( q=='[' ) q = ']';",
          "154:     if( z[iIn]==q ){",
          "155:       if( z[iIn+1]!=q ){",
          "",
          "[Removed Lines]",
          "153:   while( ALWAYS(z[iIn]) ){",
          "",
          "[Added Lines]",
          "153:   while( z[iIn] ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5eb.test||ext/fts5/test/fts5eb.test": [
          "File: ext/fts5/test/fts5eb.test -> ext/fts5/test/fts5eb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   SELECT fts5_expr(NULL, NULL)",
          "76: } {1 {parse error in \"\"}}",
          "79: do_execsql_test 3.0 {",
          "80:   CREATE VIRTUAL TABLE e1 USING fts5(text, tokenize = 'porter unicode61');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: for {set i 0} {$i < 255} {incr i} {",
          "79:   do_test 2.6.$i {",
          "80:     lindex [catchsql {sELECT fts5_expr(NULL, char($i));}] 0",
          "81:   } 1",
          "82: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d47d66e3d360d8aa6203a855228d2bc40d9a00d69c15f5066b7632d8fb1ed2cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0efa4d3095f2ce07c084b00594497e17ca523fc",
      "candidate_info": {
        "commit_hash": "c0efa4d3095f2ce07c084b00594497e17ca523fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0efa4d3095f2ce07c084b00594497e17ca523fc",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use the \"fuzztest\" target in place of \"fastfuzztest\".\n\nFossilOrigin-Name: 7129e468fd182c1820cdfa2c66a81d1697e5d1580680b77c0df9bb0ae0049e0d",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1259: # This is the common case.  Run many tests that do not take too long,",
          "1260: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "1261: #",
          "1264: # Run a test using valgrind.  This can take a really long time",
          "1265: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "1262: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "1262: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2413: # This is the common case.  Run many tests that do not take too long,",
          "2414: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "2415: #",
          "2417:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2418:  .\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)",
          "",
          "[Removed Lines]",
          "2416: test: $(TESTPROGS) sourcetest fastfuzztest",
          "",
          "[Added Lines]",
          "2416: test: $(TESTPROGS) sourcetest fuzztest",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "952: # The default test case.  Runs most of the faster standard TCL tests,",
          "953: # and fuzz tests, and sqlite3_analyzer and sqldiff tests.",
          "956: # Run a test using valgrind.  This can take a really long time",
          "957: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "954: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "954: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84422db987f3e26545760984ace02515eed1542c",
      "candidate_info": {
        "commit_hash": "84422db987f3e26545760984ace02515eed1542c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/84422db987f3e26545760984ace02515eed1542c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/util.c"
        ],
        "message": "Optimization to the round() SQL function for large input values without a fractional part.\n\nFossilOrigin-Name: e95138f5f4febde598f39e031d6e4f4d5ad0adbd8dcdd34fd0baaa78ab393417",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea748edecb261f2b862d542daff6e99a6fd8879a8ace94b440d99e110577d1c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   }else{",
          "395:     zBuf = sqlite3_mprintf(\"%.*f\",n,r);",
          "396:     if( zBuf==0 ){",
          "",
          "[Removed Lines]",
          "390:   if( n==0 && r>=0 && r<LARGEST_INT64-1 ){",
          "391:     r = (double)((sqlite_int64)(r+0.5));",
          "392:   }else if( n==0 && r<0 && (-r)<LARGEST_INT64-1 ){",
          "393:     r = -(double)((sqlite_int64)((-r)+0.5));",
          "",
          "[Added Lines]",
          "390:   if( r<-4503599627370496.0 || r>+4503599627370496.0 ){",
          "392:   }else if( n==0 ){",
          "393:     r = (double)((sqlite_int64)(r+(r<0?-0.5:+0.5)));",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     int i;",
          "405:     incr = 2;",
          "406:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "407:     for(i=3-enc; i<length && z[i]==0; i+=2){}",
          "408:     if( i<length ) eType = -100;",
          "409:     zEnd = &z[i^1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     testcase( enc==SQLITE_UTF16LE );",
          "408:     testcase( enc==SQLITE_UTF16BE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
      "candidate_info": {
        "commit_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Use _strdup() instead of strdup() on Windows builds of the CLI, to avoid a compiler warning reported on the mailing list.\n\nFossilOrigin-Name: a7126a4f4fb4e3e25be95d673323f835252bb2b427469616046a90b2acf64071",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eccef7825c61980678599358b62bc394283124653061ce163ead0c653f481d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: # ifndef unlink",
          "139: #  define unlink _unlink",
          "140: # endif",
          "141: # undef popen",
          "142: # define popen _popen",
          "143: # undef pclose",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: # ifndef strdup",
          "142: #  define strdup _strdup",
          "143: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
      "candidate_info": {
        "commit_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/vtab.c"
        ],
        "message": "Use a statement journal on a CREATE VIRTUAL TABLE statement in case the VCreate opcode fails.\n\nFossilOrigin-Name: aa3b0eb8c3438ddd3b660bc6bce4b1f4a0e3b5ec897079445231ee1b61210d6a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 707a058a22bd00ef14431cee0d02048cf1be745c0ef5254eda76c325435738ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:     int opcode = pOp->opcode;",
          "695:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "696:      || opcode==OP_VDestroy",
          "697:      || (opcode==OP_ParseSchema && pOp->p4.z==0)",
          "698:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "699:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698:      || opcode==OP_VCreate",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:     int iReg;",
          "458:     Vdbe *v;",
          "461:     if( pEnd ){",
          "462:       pParse->sNameToken.n = (int)(pEnd->z - pParse->sNameToken.z) + pEnd->n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ]
      }
    }
  ]
}