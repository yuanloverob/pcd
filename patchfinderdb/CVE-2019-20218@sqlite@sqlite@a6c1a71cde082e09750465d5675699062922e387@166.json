{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
      "candidate_info": {
        "commit_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the rtree extension, actively suppress extra tokens on the column names, and be pedantic about column affinities.  Ticket [367a86e28859f1ff]\n\nFossilOrigin-Name: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test||ext/rtree/rtree2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3661:   return rc;",
          "3662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668: static int rtreeTokenLength(const char *z){",
          "3669:   int dummy = 0;",
          "3670:   return sqlite3GetToken((const unsigned char*)z,&dummy);",
          "3671: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3732:       pRtree->nAux++;",
          "3734:     }else if( pRtree->nAux>0 ){",
          "3735:       break;",
          "3736:     }else{",
          "3737:       pRtree->nDim2++;",
          "3739:     }",
          "3740:   }",
          "3741:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "3731:     if( argv[ii][0]=='+' ){",
          "3733:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]+1);",
          "3738:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]);",
          "",
          "[Added Lines]",
          "3738:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%.*s INT\",",
          "3739:                       rtreeTokenLength(argv[3]), argv[3]);",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "3749:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   REINDEX;",
          "706: } {}",
          "708: expand_all_sql db",
          "709: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: reset_db",
          "709: do_execsql_test 18.0 {",
          "710:   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
          "711:   INSERT INTO rt0(c0,c1,c2) VALUES(9,2,3);",
          "712:   SELECT c0 FROM rt0 WHERE rt0.c1 > '-1';",
          "713:   SELECT rt0.c1 > '-1' FROM rt0;",
          "714: } {9 1}",
          "",
          "---------------"
        ],
        "ext/rtree/rtree2.test||ext/rtree/rtree2.test": [
          "File: ext/rtree/rtree2.test -> ext/rtree/rtree2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: }",
          "35: foreach module {rtree_i32 rtree} {",
          "36:   for {set nDim 1} {$nDim <= 5} {incr nDim} {",
          "38:     do_test rtree2-$module.$nDim.1 {",
          "39:       set cols [list]",
          "40:       foreach c [list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9] {",
          "42:       }",
          "43:       set cols [join [lrange $cols 0 [expr {$nDim*2-1}]] \", \"]",
          "44:       execsql \"",
          "",
          "[Removed Lines]",
          "41:         lappend cols \"$c REAL\"",
          "",
          "[Added Lines]",
          "36:   if {$module==\"rtree_i32\"} {set etype INT} {set etype REAL}",
          "42:         lappend cols \"$c $etype\"",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
      "candidate_info": {
        "commit_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "Fix a potential 32-bit integer overflow in the \"showdb\" utility program when it is trying to interpret a corrupt database file.\n\nFossilOrigin-Name: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 38d2e510cdedf38153466b161c0842b1604aef7b5589c51f628ae7cbb6a8722a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     while( ovfl && (cnt++)<g.mxPage ){",
          "829:       page_usage_msg(ovfl, \"overflow %d from cell %d of page %d\",",
          "830:                      cnt, cellno, pgno);",
          "832:       ovfl = decodeInt32(a);",
          "833:       sqlite3_free(a);",
          "834:     }",
          "",
          "[Removed Lines]",
          "831:       a = fileRead((ovfl-1)*g.pagesize, 4);",
          "",
          "[Added Lines]",
          "831:       a = fileRead((ovfl-1)*(sqlite3_int64)g.pagesize, 4);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
      "candidate_info": {
        "commit_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vacuum-into.test"
        ],
        "message": "Add test cases for commit [6c6fb1c6].\n\nFossilOrigin-Name: 3961995cb56b43f1753c53fc869edf336f1c17ec994d67dc74e44e8e02493894",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c6fb1c6ea452c70b56fd4ac796affebee21512adba0455ae81c291b715f544f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: } {1 {no such column: nosuchcol}}",
          "72: do_catchsql_test vacuum-into-330 {",
          "73:   VACUUM INTO t1.nosuchcol;",
          "74: } {1 {no such column: t1.nosuchcol}}",
          "76: forcedelete test.db2",
          "77: db func target target",
          "78: proc target {} { return \"test.db2\" }",
          "79: do_test vacuum-into-410 {",
          "80:   execsql { VACUUM INTO target() }",
          "81:   file exists test.db2",
          "82: } 1",
          "83: do_catchsql_test vacuum-into-420 {",
          "84:   VACUUM INTO target2()",
          "85: } {1 {no such function: target2}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
      "candidate_info": {
        "commit_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the xBestIndex method on delta_parse() to return SQLITE_CONSTRAINT if no delta argument is supplied.\n\nFossilOrigin-Name: f16d127c3b4a735afae1fc236bcf90f31adff079c7d3a896f901d908ff8b8532",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "978: }",
          "",
          "[Removed Lines]",
          "977:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "977:   return SQLITE_CONSTRAINT;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13b876773cea566018aa76c820971709445c8ec5",
      "candidate_info": {
        "commit_hash": "13b876773cea566018aa76c820971709445c8ec5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13b876773cea566018aa76c820971709445c8ec5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fix a problem with running the \".recover\" command on a database that is zero pages in size.\n\nFossilOrigin-Name: 47fa65343e46c7782a173174952c637c5621e16229ece258dc7e7a556683ca0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d99bb0c11d62f629bf59da037827af73a9b814e65815006e0cbca1bc41f42e25",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6621:     \"WITH pages(i, maxlen) AS (\"",
          "6622:     \"  SELECT page_count, (\"",
          "6623:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count\"",
          "6625:     \"    UNION ALL\"",
          "6626:     \"  SELECT i-1, (\"",
          "6627:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "",
          "[Removed Lines]",
          "6624:     \"  ) FROM pragma_page_count\"",
          "",
          "[Added Lines]",
          "6624:     \"  ) FROM pragma_page_count WHERE page_count>0\"",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   2 2 3 {} 8 9 7",
          "128: }",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: #-------------------------------------------------------------------------",
          "131: reset_db",
          "132: do_recover_test 3.0",
          "",
          "---------------"
        ]
      }
    }
  ]
}