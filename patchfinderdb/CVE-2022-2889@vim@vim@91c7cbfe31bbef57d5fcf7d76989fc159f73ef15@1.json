{
  "cve_id": "CVE-2022-2889",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0225.",
  "repo": "vim/vim",
  "patch_hash": "91c7cbfe31bbef57d5fcf7d76989fc159f73ef15",
  "patch_info": {
    "commit_hash": "91c7cbfe31bbef57d5fcf7d76989fc159f73ef15",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/91c7cbfe31bbef57d5fcf7d76989fc159f73ef15",
    "files": [
      "src/eval.c",
      "src/proto/eval.pro",
      "src/testdir/test_vim9_script.vim",
      "src/userfunc.c",
      "src/version.c"
    ],
    "message": "patch 9.0.0225: using freed memory with multiple line breaks in expression\n\nProblem:    Using freed memory with multiple line breaks in expression.\nSolution:   Free eval_tofree later.",
    "before_after_code_files": [
      "src/eval.c||src/eval.c",
      "src/proto/eval.pro||src/proto/eval.pro",
      "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
      "src/userfunc.c||src/userfunc.c",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/eval.c||src/eval.c": [
      "File: src/eval.c -> src/eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:     return retval;",
      "354: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "359:     void",
      "360: init_evalarg(evalarg_T *evalarg)",
      "361: {",
      "362:     CLEAR_POINTER(evalarg);",
      "363:     ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);",
      "364: }",
      "370:     static void",
      "371: free_eval_tofree_later(evalarg_T *evalarg)",
      "372: {",
      "373:     if (evalarg->eval_tofree != NULL)",
      "374:     {",
      "375:  if (ga_grow(&evalarg->eval_tofree_ga, 1) == OK)",
      "376:      ((char_u **)evalarg->eval_tofree_ga.ga_data)",
      "377:   [evalarg->eval_tofree_ga.ga_len++]",
      "378:   = evalarg->eval_tofree;",
      "379:  else",
      "380:      vim_free(evalarg->eval_tofree);",
      "381:     }",
      "382: }",
      "387:     void",
      "388: clear_evalarg(evalarg_T *evalarg, exarg_T *eap)",
      "389: {",
      "390:     if (evalarg != NULL)",
      "391:     {",
      "392:  if (evalarg->eval_tofree != NULL)",
      "393:  {",
      "394:      if (eap != NULL)",
      "395:      {",
      "399:   vim_free(eap->cmdline_tofree);",
      "400:   eap->cmdline_tofree = *eap->cmdlinep;",
      "402:      }",
      "403:      else",
      "404:   vim_free(evalarg->eval_tofree);",
      "405:      evalarg->eval_tofree = NULL;",
      "406:  }",
      "408:  ga_clear_strings(&evalarg->eval_tofree_ga);",
      "409:  VIM_CLEAR(evalarg->eval_tofree_lambda);",
      "410:     }",
      "411: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "440:   evalarg->eval_tofree =",
      "441:         ((char_u **)gap->ga_data)[gap->ga_len - 1];",
      "442:   ((char_u **)gap->ga_data)[gap->ga_len - 1] = NULL;",
      "",
      "[Removed Lines]",
      "439:   vim_free(evalarg->eval_tofree);",
      "",
      "[Added Lines]",
      "496:   free_eval_tofree_later(evalarg);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2274:     }",
      "2275:     else if (evalarg->eval_cookie != NULL)",
      "2276:     {",
      "2278:  evalarg->eval_tofree = line;",
      "2279:     }",
      "",
      "[Removed Lines]",
      "2277:  vim_free(evalarg->eval_tofree);",
      "",
      "[Added Lines]",
      "2334:  free_eval_tofree_later(evalarg);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2301:     return p;",
      "2302: }",
      "",
      "[Removed Lines]",
      "2307:     void",
      "2308: init_evalarg(evalarg_T *evalarg)",
      "2309: {",
      "2310:     CLEAR_POINTER(evalarg);",
      "2311:     ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);",
      "2312: }",
      "2317:     void",
      "2318: clear_evalarg(evalarg_T *evalarg, exarg_T *eap)",
      "2319: {",
      "2320:     if (evalarg != NULL)",
      "2321:     {",
      "2322:  if (evalarg->eval_tofree != NULL)",
      "2323:  {",
      "2324:      if (eap != NULL)",
      "2325:      {",
      "2329:   vim_free(eap->cmdline_tofree);",
      "2330:   eap->cmdline_tofree = *eap->cmdlinep;",
      "2332:      }",
      "2333:      else",
      "2334:   vim_free(evalarg->eval_tofree);",
      "2335:      evalarg->eval_tofree = NULL;",
      "2336:  }",
      "2338:  ga_clear_strings(&evalarg->eval_tofree_ga);",
      "2339:  VIM_CLEAR(evalarg->eval_tofree_lambda);",
      "2340:     }",
      "2341: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/proto/eval.pro||src/proto/eval.pro": [
      "File: src/proto/eval.pro -> src/proto/eval.pro",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: int eval_expr_typval(typval_T *expr, typval_T *argv, int argc, typval_T *rettv);",
      "10: int eval_expr_to_bool(typval_T *expr, int *error);",
      "11: char_u *eval_to_string_skip(char_u *arg, exarg_T *eap, int skip);",
      "12: int skip_expr(char_u **pp, evalarg_T *evalarg);",
      "13: int skip_expr_concatenate(char_u **arg, char_u **start, char_u **end, evalarg_T *evalarg);",
      "14: char_u *typval2string(typval_T *tv, int convert);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: void init_evalarg(evalarg_T *evalarg);",
      "13: void clear_evalarg(evalarg_T *evalarg, exarg_T *eap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34: char_u *eval_next_non_blank(char_u *arg, evalarg_T *evalarg, int *getnext);",
      "35: char_u *eval_next_line(char_u *arg, evalarg_T *evalarg);",
      "36: char_u *skipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg);",
      "39: int eval0(char_u *arg, typval_T *rettv, exarg_T *eap, evalarg_T *evalarg);",
      "40: int eval0_retarg(char_u *arg, typval_T *rettv, exarg_T *eap, evalarg_T *evalarg, char_u **retarg);",
      "41: int eval1(char_u **arg, typval_T *rettv, evalarg_T *evalarg);",
      "",
      "[Removed Lines]",
      "37: void init_evalarg(evalarg_T *evalarg);",
      "38: void clear_evalarg(evalarg_T *evalarg, exarg_T *eap);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
      "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1560:   v9.CheckScriptFailure(lines, 'E1073:')",
      "1561: enddef",
      "1563: def Test_fixed_size_list()",
      "1564:   # will be allocated as one piece of memory, check that changes work",
      "1565:   var l = [1, 2, 3, 4]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1563: def Test_lambda_split()",
      "1564:   # this was using freed memory, because of the split expression",
      "1565:   var lines =<< trim END",
      "1566:       vim9script",
      "1567:       try",
      "1568:       0",
      "1569:       0->(0",
      "1570:         ->a.0(",
      "1571:         ->u",
      "1572:   END",
      "1573:   v9.CheckScriptFailure(lines, 'E1050:')",
      "1574: enddef",
      "",
      "---------------"
    ],
    "src/userfunc.c||src/userfunc.c": [
      "File: src/userfunc.c -> src/userfunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1372:     char_u *start, *end;",
      "1373:     int  *old_eval_lavars = eval_lavars_used;",
      "1374:     int  eval_lavars = FALSE;",
      "1376:     char_u *tofree2 = NULL;",
      "1377:     int  equal_arrow = **arg == '(';",
      "1378:     int  white_error = FALSE;",
      "",
      "[Removed Lines]",
      "1375:     char_u *tofree1 = NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1457:     ret = skip_expr_concatenate(arg, &start, &end, evalarg);",
      "1458:     if (ret == FAIL)",
      "1459:  goto errret;",
      "1467:     if (!equal_arrow)",
      "1468:     {",
      "",
      "[Removed Lines]",
      "1460:     if (evalarg != NULL)",
      "1461:     {",
      "1463:  tofree1 = evalarg->eval_tofree;",
      "1464:  evalarg->eval_tofree = NULL;",
      "1465:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1586: theend:",
      "1587:     eval_lavars_used = old_eval_lavars;",
      "1592:     vim_free(tofree2);",
      "1593:     if (types_optional)",
      "1594:  ga_clear_strings(&argtypes);",
      "",
      "[Removed Lines]",
      "1588:     if (evalarg != NULL && evalarg->eval_tofree == NULL)",
      "1589:  evalarg->eval_tofree = tofree1;",
      "1590:     else",
      "1591:  vim_free(tofree1);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1607:     }",
      "1608:     vim_free(fp);",
      "1609:     vim_free(pt);",
      "1614:     vim_free(tofree2);",
      "1615:     eval_lavars_used = old_eval_lavars;",
      "1616:     return FAIL;",
      "",
      "[Removed Lines]",
      "1610:     if (evalarg != NULL && evalarg->eval_tofree == NULL)",
      "1611:  evalarg->eval_tofree = tofree1;",
      "1612:     else",
      "1613:  vim_free(tofree1);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "732: static int included_patches[] =",
      "735:     224,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:     225,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e442d59f6d6732c226d636067c07b7342838b36b",
      "candidate_info": {
        "commit_hash": "e442d59f6d6732c226d636067c07b7342838b36b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/e442d59f6d6732c226d636067c07b7342838b36b",
        "files": [
          "src/eval.c",
          "src/proto/eval.pro",
          "src/testdir/test_usercommands.vim",
          "src/version.c",
          "src/vim9script.c"
        ],
        "message": "patch 8.2.4869: expression in command block does not look after NL\n\nProblem:    Expression in command block does not look after NL.\nSolution:   Skip over NL to check what follows. (closes #10358)",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/proto/eval.pro||src/proto/eval.pro",
          "src/testdir/test_usercommands.vim||src/testdir/test_usercommands.vim",
          "src/version.c||src/version.c",
          "src/vim9script.c||src/vim9script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/proto/eval.pro||src/proto/eval.pro",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/proto/eval.pro||src/proto/eval.pro",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1803:     int  i;",
          "1805:     for (i = 0; i < fi->fi_break_count; ++i)",
          "1807: }",
          "",
          "[Removed Lines]",
          "1806:  eval_next_line(evalarg);",
          "",
          "[Added Lines]",
          "1806:  eval_next_line(NULL, evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2153:  p = skipwhite(next);",
          "2154:  if (*p != NUL && !vim9_comment_start(p))",
          "2155:      return next;",
          "2157:      break;",
          "2158:     }",
          "2159:     return NULL;",
          "",
          "[Removed Lines]",
          "2156:  if (eval_next_line(evalarg) == NULL)",
          "",
          "[Added Lines]",
          "2156:  if (eval_next_line(NULL, evalarg) == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2176:     if (in_vim9script()",
          "2177:      && evalarg != NULL",
          "2178:      && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL)",
          "2180:     {",
          "2181:  char_u *next;",
          "2184:      next = getline_peek_skip_comments(evalarg);",
          "2185:  else",
          "2186:      next = peek_next_line_from_context(evalarg->eval_cctx);",
          "",
          "[Removed Lines]",
          "2179:      && (*p == NUL || (vim9_comment_start(p) && VIM_ISWHITE(p[-1]))))",
          "2183:  if (evalarg->eval_cookie != NULL)",
          "",
          "[Added Lines]",
          "2179:      && (*p == NUL || *p == NL",
          "2180:         || (vim9_comment_start(p) && VIM_ISWHITE(p[-1]))))",
          "2184:  if (*p == NL)",
          "2185:      next = p + 1;",
          "2186:  else if (evalarg->eval_cookie != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2201:     char_u *",
          "2203: {",
          "2204:     garray_T *gap = &evalarg->eval_ga;",
          "2205:     char_u *line;",
          "2207:     if (evalarg->eval_cookie != NULL)",
          "2208:  line = evalarg->eval_getline(0, evalarg->eval_cookie, 0,",
          "2209:           GETLINE_CONCAT_ALL);",
          "",
          "[Removed Lines]",
          "2202: eval_next_line(evalarg_T *evalarg)",
          "",
          "[Added Lines]",
          "2205: eval_next_line(char_u *arg, evalarg_T *evalarg)",
          "2210:     if (arg != NULL && *arg == NL)",
          "2211:  return skipwhite(arg + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2253:  return skipwhite(arg);",
          "2254:     eval_next_non_blank(p, evalarg, &getnext);",
          "2255:     if (getnext)",
          "2257:     return p;",
          "2258: }",
          "",
          "[Removed Lines]",
          "2256:  return eval_next_line(evalarg);",
          "",
          "[Added Lines]",
          "2262:  return eval_next_line(arg, evalarg);",
          "",
          "---------------"
        ],
        "src/proto/eval.pro||src/proto/eval.pro": [
          "File: src/proto/eval.pro -> src/proto/eval.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx);",
          "33: int pattern_match(char_u *pat, char_u *text, int ic);",
          "34: char_u *eval_next_non_blank(char_u *arg, evalarg_T *evalarg, int *getnext);",
          "36: char_u *skipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg);",
          "37: void init_evalarg(evalarg_T *evalarg);",
          "38: void clear_evalarg(evalarg_T *evalarg, exarg_T *eap);",
          "",
          "[Removed Lines]",
          "35: char_u *eval_next_line(evalarg_T *evalarg);",
          "",
          "[Added Lines]",
          "35: char_u *eval_next_line(char_u *arg, evalarg_T *evalarg);",
          "",
          "---------------"
        ],
        "src/testdir/test_usercommands.vim||src/testdir/test_usercommands.vim": [
          "File: src/testdir/test_usercommands.vim -> src/testdir/test_usercommands.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:   call v9.CheckScriptSuccess(lines)",
          "695:   delcommand HelloThere",
          "697:   let lines =<< trim END",
          "698:       command BadCommand {",
          "699:          echo  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:   let lines =<< trim END",
          "698:       command EchoCond {",
          "699:           const test: string = true",
          "700:               ? 'true'",
          "701:               : 'false'",
          "702:           g:result = test",
          "703:       }",
          "704:       EchoCond",
          "705:   END",
          "706:   call v9.CheckScriptSuccess(lines)",
          "707:   call assert_equal('true', g:result)",
          "708:   delcommand EchoCond",
          "709:   unlet g:result",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4868,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4869,",
          "",
          "---------------"
        ],
        "src/vim9script.c||src/vim9script.c": [
          "File: src/vim9script.c -> src/vim9script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:  char_u *p;",
          "591:  if (getnext)",
          "593:  else",
          "594:      arg = nextarg;",
          "",
          "[Removed Lines]",
          "592:      arg = eval_next_line(evalarg);",
          "",
          "[Added Lines]",
          "592:      arg = eval_next_line(expr_end, evalarg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "937610bc9f9c827e3e25fed32661fcbf3f994e10",
      "candidate_info": {
        "commit_hash": "937610bc9f9c827e3e25fed32661fcbf3f994e10",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/937610bc9f9c827e3e25fed32661fcbf3f994e10",
        "files": [
          "src/eval.c",
          "src/proto/userfunc.pro",
          "src/testdir/test_vim9_import.vim",
          "src/userfunc.c",
          "src/version.c",
          "src/vim.h"
        ],
        "message": "patch 8.2.4145: confusing error when using name of import for a function\n\nProblem:    Confusing error when using name of import for a function.\nSolution:   Pass a flag to trans_function_name().",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/proto/userfunc.pro||src/proto/userfunc.pro",
          "src/testdir/test_vim9_import.vim||src/testdir/test_vim9_import.vim",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2074:     s = deref_func_name(s, &len, &partial,",
          "",
          "[Removed Lines]",
          "2075:    in_vim9script() ? &type : NULL, !evaluate, &found_var);",
          "",
          "[Added Lines]",
          "2075:    in_vim9script() ? &type : NULL, !evaluate, FALSE, &found_var);",
          "",
          "---------------"
        ],
        "src/proto/userfunc.pro||src/proto/userfunc.pro": [
          "File: src/proto/userfunc.pro -> src/proto/userfunc.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: char_u *get_lambda_name(void);",
          "5: char_u *register_cfunc(cfunc_T cb, cfunc_free_T cb_free, void *state);",
          "6: int get_lambda_tv(char_u **arg, typval_T *rettv, int types_optional, evalarg_T *evalarg);",
          "8: void emsg_funcname(char *ermsg, char_u *name);",
          "9: int get_func_tv(char_u *name, int len, typval_T *rettv, char_u **arg, evalarg_T *evalarg, funcexe_T *funcexe);",
          "10: char_u *fname_trans_sid(char_u *name, char_u *fname_buf, char_u **tofree, int *error);",
          "",
          "[Removed Lines]",
          "7: char_u *deref_func_name(char_u *name, int *lenp, partial_T **partialp, type_T **type, int no_autoload, int *found_var);",
          "",
          "[Added Lines]",
          "7: char_u *deref_func_name(char_u *name, int *lenp, partial_T **partialp, type_T **type, int no_autoload, int new_function, int *found_var);",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_import.vim||src/testdir/test_vim9_import.vim": [
          "File: src/testdir/test_vim9_import.vim -> src/testdir/test_vim9_import.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:   END",
          "458:   CheckDefAndScriptFailure(lines, ['E1094:', 'E1236: Cannot use That itself'])",
          "460:   lines =<< trim END",
          "461:       import './Xthat.vim' as one",
          "462:       import './Xthat.vim' as two",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:   lines =<< trim END",
          "461:       vim9script",
          "462:       import './Xthat.vim' as That",
          "463:       def Func()",
          "464:         echo That()",
          "465:       enddef",
          "466:       Func()",
          "467:   END",
          "468:   CheckScriptFailure(lines, 'E1236: Cannot use That itself')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1000:       echo 'local to function'",
          "1001:     enddef",
          "1002:   END",
          "1005:   lines =<< trim END",
          "1006:     vim9script",
          "",
          "[Removed Lines]",
          "1003:   CheckScriptFailure(lines, 'E1236:')",
          "",
          "[Added Lines]",
          "1013:   CheckScriptFailure(lines, 'E1213: Redefining imported item \"Func\"')",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1576:  partial_T   **partialp,",
          "1577:  type_T     **type,",
          "1578:  int     no_autoload,",
          "1579:  int     *found_var)",
          "1580: {",
          "1581:     dictitem_T *v;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:  int     new_function,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1614:  if (import != NULL)",
          "1615:  {",
          "1616:      name[len] = NUL;",
          "1618:      name[len] = cc;",
          "1620:      return (char_u *)\"\"; // just in case",
          "",
          "[Removed Lines]",
          "1617:      semsg(_(e_cannot_use_str_itself_it_is_imported), name);",
          "",
          "[Added Lines]",
          "1619:      if (new_function)",
          "1620:   semsg(_(e_redefining_imported_item_str), name);",
          "1621:      else",
          "1622:   semsg(_(e_cannot_use_str_itself_it_is_imported), name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3751:     {",
          "3752:  len = (int)STRLEN(lv.ll_exp_name);",
          "3753:  name = deref_func_name(lv.ll_exp_name, &len, partial, type,",
          "3755:  if (name == lv.ll_exp_name)",
          "3756:      name = NULL;",
          "3757:     }",
          "",
          "[Removed Lines]",
          "3754:       flags & TFN_NO_AUTOLOAD, NULL);",
          "",
          "[Added Lines]",
          "3759:      flags & TFN_NO_AUTOLOAD, flags & TFN_NEW_FUNC, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3783:     {",
          "3784:  len = (int)(end - *pp);",
          "3785:  name = deref_func_name(*pp, &len, partial, type,",
          "3787:  if (name == *pp)",
          "3788:      name = NULL;",
          "3789:     }",
          "",
          "[Removed Lines]",
          "3786:       flags & TFN_NO_AUTOLOAD, NULL);",
          "",
          "[Added Lines]",
          "3791:      flags & TFN_NO_AUTOLOAD, flags & TFN_NEW_FUNC, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4146:     else",
          "4147:     {",
          "4148:  name = save_function_name(&p, &is_global, eap->skip,",
          "4150:  paren = (vim_strchr(p, '(') != NULL);",
          "4151:  if (name == NULL && (fudi.fd_dict == NULL || !paren) && !eap->skip)",
          "4152:  {",
          "",
          "[Removed Lines]",
          "4149:              TFN_NO_AUTOLOAD, &fudi);",
          "",
          "[Added Lines]",
          "4154:      TFN_NO_AUTOLOAD | TFN_NEW_FUNC, &fudi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5200:     len = (int)STRLEN(tofree);",
          "5201:     name = deref_func_name(tofree, &len, partial != NULL ? NULL : &partial,",
          "",
          "[Removed Lines]",
          "5202:      in_vim9script() && type == NULL ? &type : NULL, FALSE, &found_var);",
          "",
          "[Added Lines]",
          "5207:      in_vim9script() && type == NULL ? &type : NULL,",
          "5208:            FALSE, FALSE, &found_var);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4144,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4145,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2632: #define TFN_READ_ONLY 0x10 // will not change the var",
          "2633: #define TFN_NO_DECL 0x20 // only used for GLV_NO_DECL",
          "2634: #define TFN_COMPILING 0x40 // only used for GLV_COMPILING",
          "2637: #define GLV_QUIET TFN_QUIET // no error messages",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2635: #define TFN_NEW_FUNC 0x80 // defining a new function",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "844fb64a605d60131827503a001b2d1aa232b078",
      "candidate_info": {
        "commit_hash": "844fb64a605d60131827503a001b2d1aa232b078",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/844fb64a605d60131827503a001b2d1aa232b078",
        "files": [
          "src/eval.c",
          "src/globals.h",
          "src/proto/eval.pro",
          "src/structs.h",
          "src/testdir/test_vim9_func.vim",
          "src/userfunc.c",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.3560: using freed memory with lambda\n\nProblem:    Using freed memory with lambda.\nSolution:   Do not free lines early, keep them until the expression is\n            finished.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/globals.h||src/globals.h",
          "src/proto/eval.pro||src/proto/eval.pro",
          "src/structs.h||src/structs.h",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/proto/eval.pro||src/proto/eval.pro",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/proto/eval.pro||src/proto/eval.pro",
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:     void",
          "144: fill_evalarg_from_eap(evalarg_T *evalarg, exarg_T *eap, int skip)",
          "145: {",
          "147:     evalarg->eval_flags = skip ? 0 : EVAL_EVALUATE;",
          "148:     if (eap != NULL)",
          "149:     {",
          "",
          "[Removed Lines]",
          "146:     CLEAR_FIELD(*evalarg);",
          "",
          "[Added Lines]",
          "146:     init_evalarg(evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2142:     return skipwhite(line);",
          "2143: }",
          "",
          "[Removed Lines]",
          "2140:     VIM_CLEAR(evalarg->eval_tofree_cmdline);",
          "",
          "[Added Lines]",
          "2140:     evalarg->eval_using_cmdline = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2159:     return p;",
          "2160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2164:     void",
          "2165: init_evalarg(evalarg_T *evalarg)",
          "2166: {",
          "2167:     CLEAR_POINTER(evalarg);",
          "2168:     ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);",
          "2169: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2183:      evalarg->eval_tofree = NULL;",
          "2184:  }",
          "2187:  VIM_CLEAR(evalarg->eval_tofree_lambda);",
          "2188:     }",
          "2189: }",
          "",
          "[Removed Lines]",
          "2186:  VIM_CLEAR(evalarg->eval_tofree_cmdline);",
          "",
          "[Added Lines]",
          "2195:  ga_clear_strings(&evalarg->eval_tofree_ga);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2299:  if (evalarg == NULL)",
          "2300:  {",
          "2302:      evalarg_used = &local_evalarg;",
          "2303:  }",
          "2304:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2301:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2310:      init_evalarg(&local_evalarg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2456:  if (evalarg == NULL)",
          "2457:  {",
          "2459:      evalarg_used = &local_evalarg;",
          "2460:  }",
          "2461:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2458:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2467:      init_evalarg(&local_evalarg);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2582:  if (evalarg == NULL)",
          "2583:  {",
          "2585:      evalarg_used = &local_evalarg;",
          "2586:  }",
          "2587:  orig_flags = evalarg_used->eval_flags;",
          "",
          "[Removed Lines]",
          "2584:      CLEAR_FIELD(local_evalarg);",
          "",
          "[Added Lines]",
          "2593:      init_evalarg(&local_evalarg);",
          "",
          "---------------"
        ],
        "src/globals.h||src/globals.h": [
          "File: src/globals.h -> src/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868: EXTERN evalarg_T EVALARG_EVALUATE",
          "1869: # ifdef DO_INIT",
          "1872: # endif",
          "1873:  ;",
          "1874: #endif",
          "",
          "[Removed Lines]",
          "1870:  = {EVAL_EVALUATE, 0, NULL, NULL, NULL, NULL, {0, 0, 0, 0, NULL},",
          "1871:        {0, 0, 0, 0, NULL}, NULL, NULL, NULL}",
          "",
          "[Added Lines]",
          "1870:  = {EVAL_EVALUATE, 0, NULL, NULL, NULL, NULL, GA_EMPTY, GA_EMPTY, NULL,",
          "1871:     {0, 0, (int)sizeof(char_u *), 20, NULL}, 0, NULL}",
          "",
          "---------------"
        ],
        "src/proto/eval.pro||src/proto/eval.pro": [
          "File: src/proto/eval.pro -> src/proto/eval.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx);",
          "35: int pattern_match(char_u *pat, char_u *text, int ic);",
          "36: char_u *skipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg);",
          "37: void clear_evalarg(evalarg_T *evalarg, exarg_T *eap);",
          "38: int eval0(char_u *arg, typval_T *rettv, exarg_T *eap, evalarg_T *evalarg);",
          "39: int eval1(char_u **arg, typval_T *rettv, evalarg_T *evalarg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: void init_evalarg(evalarg_T *evalarg);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1907:     char_u *eval_tofree;",
          "1913:     char_u *eval_tofree_lambda;",
          "",
          "[Removed Lines]",
          "1910:     char_u *eval_tofree_cmdline;",
          "",
          "[Added Lines]",
          "1910:     garray_T eval_tofree_ga;",
          "1913:     int  eval_using_cmdline;",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:   CheckScriptSuccess(lines)",
          "1134: enddef",
          "1136: \" Default arg and varargs",
          "1137: def MyDefVarargs(one: string, two = 'foo', ...rest: list<string>): string",
          "1138:   var res = one .. ',' .. two",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: def Test_lambda_in_reduce_line_break()",
          "1137:   # this was using freed memory",
          "1138:   var lines =<< trim END",
          "1139:       vim9script",
          "1140:       const result: dict<number> =",
          "1141:           ['Bob', 'Sam', 'Cat', 'Bob', 'Cat', 'Cat']",
          "1142:           ->reduce((acc, val) => {",
          "1143:               if has_key(acc, val)",
          "1144:                   acc[val] += 1",
          "1145:                   return acc",
          "1146:               else",
          "1147:                   acc[val] = 1",
          "1148:                   return acc",
          "1149:               endif",
          "1150:           }, {})",
          "1151:       assert_equal({Bob: 2, Sam: 1, Cat: 3}, result)",
          "1152:   END",
          "1153:   CheckScriptSuccess(lines)",
          "1154: enddef",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178:     if (cmdline != NULL)",
          "1179:     {",
          "1186:     }",
          "1187:     else",
          "",
          "[Removed Lines]",
          "1184:  vim_free(evalarg->eval_tofree_cmdline);",
          "1185:  evalarg->eval_tofree_cmdline = cmdline;",
          "",
          "[Added Lines]",
          "1180:  garray_T *tfgap = &evalarg->eval_tofree_ga;",
          "1186:  if (ga_grow(tfgap, 1) == OK)",
          "1187:  {",
          "1188:      ((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;",
          "1189:      evalarg->eval_using_cmdline = TRUE;",
          "1190:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4867:  return;",
          "4868:     }",
          "4871:     evalarg.eval_flags = eap->skip ? 0 : EVAL_EVALUATE;",
          "4873:     if (eap->skip)",
          "",
          "[Removed Lines]",
          "4870:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "4875:     init_evalarg(&evalarg);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3559,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3560,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3702:     ufunc_T *ufunc;",
          "3703:     evalarg_T evalarg;",
          "3706:     evalarg.eval_flags = EVAL_EVALUATE;",
          "3707:     evalarg.eval_cctx = cctx;",
          "",
          "[Removed Lines]",
          "3705:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "3705:     init_evalarg(&evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3733:  compile_def_function(ufunc, FALSE, CT_NONE, cctx);",
          "3734: #endif",
          "3739:     {",
          "3743:           + off;",
          "",
          "[Removed Lines]",
          "3738:     if (evalarg.eval_tofree_cmdline != NULL)",
          "3740:  size_t off = *arg - evalarg.eval_tofree_cmdline;",
          "",
          "[Added Lines]",
          "3739:     if (evalarg.eval_using_cmdline)",
          "3741:  garray_T    *gap = &evalarg.eval_tofree_ga;",
          "3742:  size_t     off = *arg - ((char_u **)gap->ga_data)[gap->ga_len - 1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4201: {",
          "4202:     evalarg_T evalarg;",
          "4205:     evalarg.eval_cctx = cctx;",
          "4206:     skip_expr(arg, &evalarg);",
          "4207: }",
          "",
          "[Removed Lines]",
          "4204:     CLEAR_FIELD(evalarg);",
          "",
          "[Added Lines]",
          "4206:     init_evalarg(&evalarg);",
          "4209:     clear_evalarg(&evalarg, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b09feaa86ecc53b9b953710082496951776dc5c6",
      "candidate_info": {
        "commit_hash": "b09feaa86ecc53b9b953710082496951776dc5c6",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/b09feaa86ecc53b9b953710082496951776dc5c6",
        "files": [
          "src/errors.h",
          "src/evalvars.c",
          "src/ex_cmds.c",
          "src/ex_docmd.c",
          "src/fileio.c",
          "src/fold.c",
          "src/gui_x11.c",
          "src/hardcopy.c",
          "src/help.c",
          "src/highlight.c",
          "src/if_cscope.c",
          "src/json.c",
          "src/map.c",
          "src/netbeans.c",
          "src/popupwin.c",
          "src/usercmd.c",
          "src/userfunc.c",
          "src/version.c"
        ],
        "message": "patch 8.2.3986: error messages are spread out\n\nProblem:    Error messages are spread out.\nSolution:   Move more error messages to errors.h.",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/evalvars.c||src/evalvars.c",
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/fileio.c||src/fileio.c",
          "src/fold.c||src/fold.c",
          "src/gui_x11.c||src/gui_x11.c",
          "src/hardcopy.c||src/hardcopy.c",
          "src/help.c||src/help.c",
          "src/highlight.c||src/highlight.c",
          "src/if_cscope.c||src/if_cscope.c",
          "src/json.c||src/json.c",
          "src/map.c||src/map.c",
          "src/netbeans.c||src/netbeans.c",
          "src/popupwin.c||src/popupwin.c",
          "src/usercmd.c||src/usercmd.c",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/userfunc.c||src/userfunc.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1027: EXTERN char e_invalid_expression_received[]",
          "1028:  INIT(= N_(\"E449: Invalid expression received\"));",
          "1029: #endif",
          "1031: #if defined(UNIX) || defined(FEAT_SESSION)",
          "1032: EXTERN char e_cannot_go_back_to_previous_directory[]",
          "1033:  INIT(= N_(\"E459: Cannot go back to previous directory\"));",
          "1034: #endif",
          "1035: #ifdef FEAT_EVAL",
          "1036: EXTERN char e_illegal_variable_name_str[]",
          "1037:  INIT(= N_(\"E461: Illegal variable name: %s\"));",
          "1038: #endif",
          "1039: #ifdef FEAT_NETBEANS_INTG",
          "1040: EXTERN char e_region_is_guarded_cannot_modify[]",
          "1041:  INIT(= N_(\"E463: Region is guarded, cannot modify\"));",
          "1042: #endif",
          "1043: EXTERN char e_ambiguous_use_of_user_defined_command[]",
          "1044:  INIT(= N_(\"E464: Ambiguous use of user-defined command\"));",
          "1045: EXTERN char e_command_aborted[]",
          "1046:  INIT(= N_(\"E470: Command aborted\"));",
          "1047: EXTERN char e_argument_required[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030: EXTERN char e_buffer_number_text_or_list_required[]",
          "1031:  INIT(= N_(\"E450: buffer number, text or a list required\"));",
          "1032: EXTERN char e_expected_right_curly_str[]",
          "1033:  INIT(= N_(\"E451: Expected }: %s\"));",
          "1034: #ifdef FEAT_EVAL",
          "1035: EXTERN char e_double_semicolon_in_list_of_variables[]",
          "1036:  INIT(= N_(\"E452: Double ; in list of variables\"));",
          "1037: #endif",
          "1038: EXTERN char e_ul_color_unknown[]",
          "1039:  INIT(= N_(\"E453: UL color unknown\"));",
          "1040: EXTERN char e_function_list_was_modified[]",
          "1041:  INIT(= N_(\"E454: function list was modified\"));",
          "1042: #ifdef FEAT_POSTSCRIPT",
          "1043: EXTERN char e_error_writing_to_postscript_output_file[]",
          "1044:  INIT(= N_(\"E455: Error writing to PostScript output file\"));",
          "1045: EXTERN char e_cant_open_file_str_2[]",
          "1046:  INIT(= N_(\"E456: Can't open file \\\"%s\\\"\"));",
          "1047: EXTERN char e_cant_find_postscript_resource_file_str_ps[]",
          "1048:  INIT(= N_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"));",
          "1049: EXTERN char e_cant_read_postscript_resource_file_str[]",
          "1050:  INIT(= N_(\"E457: Can't read PostScript resource file \\\"%s\\\"\"));",
          "1051: #endif",
          "1052: EXTERN char e_cannot_allocate_colormap_entry_some_colors_may_be_incorrect[]",
          "1053:  INIT(= N_(\"E458: Cannot allocate colormap entry, some colors may be incorrect\"));",
          "1058: EXTERN char e_entries_missing_in_mapset_dict_argument[]",
          "1059:  INIT(= N_(\"E460: entries missing in mapset() dict argument\"));",
          "1064: EXTERN char e_could_not_prepare_for_reloading_str[]",
          "1065:  INIT(= N_(\"E462: Could not prepare for reloading \\\"%s\\\"\"));",
          "1072: EXTERN char e_winsize_requires_two_number_arguments[]",
          "1073:  INIT(= N_(\"E465: :winsize requires two number arguments\"));",
          "1074: EXTERN char e_winpos_requires_two_number_arguments[]",
          "1075:  INIT(= N_(\"E466: :winpos requires two number arguments\"));",
          "1076: EXTERN char e_custom_completion_requires_function_argument[]",
          "1077:  INIT(= N_(\"E467: Custom completion requires a function argument\"));",
          "1078: EXTERN char e_completion_argument_only_allowed_for_custom_completion[]",
          "1079:  INIT(= N_(\"E468: Completion argument only allowed for custom completion\"));",
          "1080: EXTERN char e_invalid_cscopequickfix_flag_chr_for_chr[]",
          "1081:  INIT(= N_(\"E469: invalid cscopequickfix flag %c for %c\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:  INIT(= N_(\"E475: Invalid value for argument %s: %s\"));",
          "1061: EXTERN char e_invalid_command[]",
          "1062:  INIT(= N_(\"E476: Invalid command\"));",
          "1065: #ifdef FEAT_EVAL",
          "1066: EXTERN char e_invalid_command_str[]",
          "1067:  INIT(= N_(\"E476: Invalid command: %s\"));",
          "1068: #endif",
          "1069: EXTERN char e_cant_create_file_str[]",
          "1070:  INIT(= N_(\"E482: Can't create file %s\"));",
          "1071: EXTERN char e_cant_get_temp_file_name[]",
          "",
          "[Removed Lines]",
          "1063: EXTERN char e_no_bang_allowed[]",
          "1064:  INIT(= N_(\"E477: No ! allowed\"));",
          "",
          "[Added Lines]",
          "1104: EXTERN char e_no_bang_allowed[]",
          "1105:  INIT(= N_(\"E477: No ! allowed\"));",
          "1106: EXTERN char e_dont_panic[]",
          "1107:  INIT(= N_(\"E478: Don't panic!\"));",
          "1108: EXTERN char e_no_match[]",
          "1109:  INIT(= N_(\"E479: No match\"));",
          "1110: EXTERN char e_no_match_str_2[]",
          "1111:  INIT(= N_(\"E480: No match: %s\"));",
          "1112: EXTERN char e_no_range_allowed[]",
          "1113:  INIT(= N_(\"E481: No range allowed\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1080:  INIT(= N_(\"E486: Pattern not found: %s\"));",
          "1081: EXTERN char e_argument_must_be_positive[]",
          "1082:  INIT(= N_(\"E487: Argument must be positive\"));",
          "1089: EXTERN char e_trailing_characters[]",
          "1090:  INIT(= N_(\"E488: Trailing characters\"));",
          "1091: EXTERN char e_trailing_characters_str[]",
          "1092:  INIT(= N_(\"E488: Trailing characters: %s\"));",
          "1095: EXTERN char e_is_a_directory[]",
          "1096:  INIT(= N_(\"is a directory\"));",
          "1098: EXTERN char e_is_not_file_or_writable_device[]",
          "1099:  INIT(= N_(\"is not a file or writable device\"));",
          "1102: EXTERN char e_is_read_only_cannot_override_W_in_cpoptions[]",
          "1103:  INIT(= N_(\"is read-only (cannot override: \\\"W\\\" in 'cpoptions')\"));",
          "1105: EXTERN char e_is_read_only_add_bang_to_override[]",
          "1106:  INIT(= N_(\"is read-only (add ! to override)\"));",
          "1107: EXTERN char e_canot_write_to_backup_file_add_bang_to_override[]",
          "1108:  INIT(= N_(\"E506: Can't write to backup file (add ! to override)\"));",
          "1109: EXTERN char e_close_error_for_backup_file_add_bang_to_write_anyway[]",
          "",
          "[Removed Lines]",
          "1083: EXTERN char e_no_match[]",
          "1084:  INIT(= N_(\"E479: No match\"));",
          "1085: EXTERN char e_no_match_str_2[]",
          "1086:  INIT(= N_(\"E480: No match: %s\"));",
          "1087: EXTERN char e_no_range_allowed[]",
          "1088:  INIT(= N_(\"E481: No range allowed\"));",
          "",
          "[Added Lines]",
          "1132: EXTERN char e_no_call_stack_to_substitute_for_stack[]",
          "1133:  INIT(= N_(\"E489: no call stack to substitute for \\\"<stack>\\\"\"));",
          "1134: #ifdef FEAT_FOLDING",
          "1135: EXTERN char e_no_fold_found[]",
          "1136:  INIT(= N_(\"E490: No fold found\"));",
          "1137: #endif",
          "1138: #ifdef FEAT_EVAL",
          "1139: EXTERN char e_json_decode_error_at_str[]",
          "1140:  INIT(= N_(\"E491: json decode error at '%s'\"));",
          "1141: #endif",
          "1142: EXTERN char e_not_an_editor_command[]",
          "1143:  INIT(= N_(\"E492: Not an editor command\"));",
          "1144: EXTERN char e_backwards_range_given[]",
          "1145:  INIT(= N_(\"E493: Backwards range given\"));",
          "1146: EXTERN char e_use_w_or_w_gt_gt[]",
          "1147:  INIT(= N_(\"E494: Use w or w>>\"));",
          "1148: EXTERN char e_no_autocommand_file_name_to_substitute_for_afile[]",
          "1149:  INIT(= N_(\"E495: no autocommand file name to substitute for \\\"<afile>\\\"\"));",
          "1150: EXTERN char e_no_autocommand_buffer_name_to_substitute_for_abuf[]",
          "1151:  INIT(= N_(\"E496: no autocommand buffer number to substitute for \\\"<abuf>\\\"\"));",
          "1152: EXTERN char e_no_autocommand_match_name_to_substitute_for_amatch[]",
          "1153:  INIT(= N_(\"E497: no autocommand match name to substitute for \\\"<amatch>\\\"\"));",
          "1154: EXTERN char e_no_source_file_name_to_substitute_for_sfile[]",
          "1155:  INIT(= N_(\"E498: no :source file name to substitute for \\\"<sfile>\\\"\"));",
          "1156: EXTERN char e_empty_file_name_for_percent_or_hash_only_works_with_ph[]",
          "1157:  INIT(= N_(\"E499: Empty file name for '%' or '#', only works with \\\":p:h\\\"\"));",
          "1158: EXTERN char e_evaluates_to_an_empty_string[]",
          "1159:  INIT(= N_(\"E500: Evaluates to an empty string\"));",
          "1160: EXTERN char e_at_end_of_file[]",
          "1161:  INIT(= N_(\"E501: At end-of-file\"));",
          "1168: EXTERN char e_str_is_not_file_or_writable_device[]",
          "1169:  INIT(= N_(\"E503: \\\"%s\\\" is not a file or writable device\"));",
          "1176: EXTERN char e_str_is_read_only_add_bang_to_override[]",
          "1177:  INIT(= N_(\"E505: \\\"%s\\\" is read-only (add ! to override)\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1114:  INIT(= N_(\"E509: Cannot create backup file (add ! to override)\"));",
          "1115: EXTERN char e_cant_make_backup_file_add_bang_to_write_anyway[]",
          "1116:  INIT(= N_(\"E510: Can't make backup file (add ! to write anyway)\"));",
          "1117: EXTERN char e_close_failed[]",
          "1118:  INIT(= N_(\"E512: Close failed\"));",
          "1119: EXTERN char e_write_error_conversion_failed_make_fenc_empty_to_override[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188: #ifdef FEAT_NETBEANS_INTG",
          "1189: EXTERN char e_netbeans_already_connected[]",
          "1190:  INIT(= N_(\"E511: netbeans already connected\"));",
          "1191: #endif",
          "",
          "---------------"
        ],
        "src/evalvars.c||src/evalvars.c": [
          "File: src/evalvars.c -> src/evalvars.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063:      {",
          "1064:   if (*semicolon == 1)",
          "1065:   {",
          "1067:       return NULL;",
          "1068:   }",
          "",
          "[Removed Lines]",
          "1066:       emsg(_(\"E452: Double ; in list of variables\"));",
          "",
          "[Added Lines]",
          "1066:       emsg(_(e_double_semicolon_in_list_of_variables));",
          "",
          "---------------"
        ],
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1862: {",
          "1863:     if (mch_nodetype(fname) == NODE_OTHER)",
          "1864:     {",
          "1866:  return FAIL;",
          "1867:     }",
          "1868:     return OK;",
          "",
          "[Removed Lines]",
          "1865:  semsg(_(\"E503: \\\"%s\\\" is not a file or writable device\"), fname);",
          "",
          "[Added Lines]",
          "1865:  semsg(_(e_str_is_not_file_or_writable_device), fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2357:  if (buf->b_p_ro)",
          "2358:      emsg(_(e_readonly_option_is_set_add_bang_to_override));",
          "2359:  else",
          "2362:  return TRUE;",
          "2363:     }",
          "",
          "[Removed Lines]",
          "2360:      semsg(_(\"E505: \\\"%s\\\" is read-only (add ! to override)\"),",
          "2361:       buf->b_fname);",
          "",
          "[Added Lines]",
          "2360:      semsg(_(e_str_is_read_only_add_bang_to_override), buf->b_fname);",
          "",
          "---------------"
        ],
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:      if (curbuf->b_ml.ml_flags & ML_EMPTY)",
          "544:   emsg(_(e_empty_buffer));",
          "545:      else",
          "547:  }",
          "548:     }",
          "",
          "[Removed Lines]",
          "546:   emsg(_(\"E501: At end-of-file\"));",
          "",
          "[Added Lines]",
          "546:   emsg(_(e_at_end_of_file));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2015:     {",
          "2016:  if (!ea.skip)",
          "2017:  {",
          "2019:      if (!sourcing)",
          "2020:      {",
          "",
          "[Removed Lines]",
          "2018:      STRCPY(IObuff, _(\"E492: Not an editor command\"));",
          "",
          "[Added Lines]",
          "2018:      STRCPY(IObuff, _(e_not_an_editor_command));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2152:      {",
          "2153:   if (sourcing || exmode_active)",
          "2154:   {",
          "2156:       goto doend;",
          "2157:   }",
          "2158:   if (ask_yesno((char_u *)",
          "",
          "[Removed Lines]",
          "2155:       errormsg = _(\"E493: Backwards range given\");",
          "",
          "[Added Lines]",
          "2155:       errormsg = _(e_backwards_range_given);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2225:  {",
          "2226:      if (*++ea.arg != '>')  // typed wrong",
          "2227:      {",
          "2229:   goto doend;",
          "2230:      }",
          "2231:      ea.arg = skipwhite(ea.arg + 1);",
          "",
          "[Removed Lines]",
          "2228:   errormsg = _(\"E494: Use w or w>>\");",
          "",
          "[Added Lines]",
          "2228:   errormsg = _(e_use_w_or_w_gt_gt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7644:     if (*p != NUL && *arg == NUL)",
          "7645:  set_shellsize(w, h, TRUE);",
          "7646:     else",
          "7648: }",
          "7650:     static void",
          "",
          "[Removed Lines]",
          "7647:  emsg(_(\"E465: :winsize requires two number arguments\"));",
          "",
          "[Added Lines]",
          "7647:  emsg(_(e_winsize_requires_two_number_arguments));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7725:  y = getdigits(&arg);",
          "7726:  if (*p == NUL || *arg != NUL)",
          "7727:  {",
          "7729:      return;",
          "7730:  }",
          "7731: # ifdef FEAT_GUI",
          "",
          "[Removed Lines]",
          "7728:      emsg(_(\"E466: :winpos requires two number arguments\"));",
          "",
          "[Added Lines]",
          "7728:      emsg(_(e_winpos_requires_two_number_arguments));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9136:   if (result == NULL)",
          "9137:   {",
          "9141:       return NULL;",
          "9142:   }",
          "9143:   resultbuf = result;     // remember allocated string",
          "",
          "[Removed Lines]",
          "9139:    ? _(\"E498: no :source file name to substitute for \\\"<sfile>\\\"\")",
          "9140:    : _(\"E489: no call stack to substitute for \\\"<stack>\\\"\");",
          "",
          "[Added Lines]",
          "9139:    ? _(e_no_source_file_name_to_substitute_for_sfile)",
          "9140:    : _(e_no_call_stack_to_substitute_for_stack);",
          "",
          "---------------"
        ],
        "src/fileio.c||src/fileio.c": [
          "File: src/fileio.c -> src/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4385:      if (savebuf == NULL || saved == FAIL || buf != curbuf",
          "4386:           || move_lines(buf, savebuf) == FAIL)",
          "4387:      {",
          "4390:   saved = FAIL;",
          "4391:      }",
          "4392:  }",
          "",
          "[Removed Lines]",
          "4388:   semsg(_(\"E462: Could not prepare for reloading \\\"%s\\\"\"),",
          "4389:            buf->b_fname);",
          "",
          "[Added Lines]",
          "4388:   semsg(_(e_could_not_prepare_for_reloading_str), buf->b_fname);",
          "",
          "---------------"
        ],
        "src/fold.c||src/fold.c": [
          "File: src/fold.c -> src/fold.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static void foldUpdateIEMS(win_T *wp, linenr_T top, linenr_T bot);",
          "66: static void parseMarker(win_T *wp);",
          "",
          "[Removed Lines]",
          "68: static char *e_nofold = N_(\"E490: No fold found\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:      (void)hasFolding(lnum, NULL, &lnum_next);",
          "413:     }",
          "414:     if (done == DONE_NOTHING)",
          "417:     if (had_visual)",
          "418:  redraw_curbuf_later(INVERTED);",
          "",
          "[Removed Lines]",
          "415:  emsg(_(e_nofold));",
          "",
          "[Added Lines]",
          "413:  emsg(_(e_no_fold_found));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "785:     }",
          "786:     if (!did_one)",
          "787:     {",
          "790:  if (had_visual)",
          "791:      redraw_curbuf_later(INVERTED);",
          "",
          "[Removed Lines]",
          "788:  emsg(_(e_nofold));",
          "",
          "[Added Lines]",
          "786:  emsg(_(e_no_fold_found));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:  {",
          "1237:      if (n == 0 && !(done & DONE_FOLD))",
          "1239:      break;",
          "1240:  }",
          "1241:     }",
          "",
          "[Removed Lines]",
          "1238:   emsg(_(e_nofold));",
          "",
          "[Added Lines]",
          "1236:   emsg(_(e_no_fold_found));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1387:  done |= DONE_FOLD;",
          "1388:     }",
          "1389:     else if (donep == NULL && wp == curwin)",
          "1392:     if (donep != NULL)",
          "",
          "[Removed Lines]",
          "1390:  emsg(_(e_nofold));",
          "",
          "[Added Lines]",
          "1388:  emsg(_(e_no_fold_found));",
          "",
          "---------------"
        ],
        "src/gui_x11.c||src/gui_x11.c": [
          "File: src/gui_x11.c -> src/gui_x11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1463:     }",
          "1465:     if (gui.color_approx)",
          "1468: #ifdef FEAT_BEVAL_GUI",
          "1469:     gui_init_tooltip_font();",
          "",
          "[Removed Lines]",
          "1466:  emsg(_(\"Vim E458: Cannot allocate colormap entry, some colors may be incorrect\"));",
          "",
          "[Added Lines]",
          "1466:  emsg(_(e_cannot_allocate_colormap_entry_some_colors_may_be_incorrect));",
          "",
          "---------------"
        ],
        "src/hardcopy.c||src/hardcopy.c": [
          "File: src/hardcopy.c -> src/hardcopy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1405:      && fwrite(buffer, sizeof(char_u), bytes, prt_ps_fd)",
          "1406:             != (size_t)bytes)",
          "1407:     {",
          "1409:  prt_file_error = TRUE;",
          "1410:     }",
          "1411: }",
          "",
          "[Removed Lines]",
          "1408:  emsg(_(\"E455: Error writing to PostScript output file\"));",
          "",
          "[Added Lines]",
          "1408:  emsg(_(e_error_writing_to_postscript_output_file));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1849:          PRT_FILE_BUFFER_LEN, fd_resource);",
          "1850:     if (ferror(fd_resource))",
          "1851:     {",
          "1853:   resource->filename);",
          "1854:  fclose(fd_resource);",
          "1855:  return FALSE;",
          "",
          "[Removed Lines]",
          "1852:  semsg(_(\"E457: Can't read PostScript resource file \\\"%s\\\"\"),",
          "",
          "[Added Lines]",
          "1852:  semsg(_(e_cant_read_postscript_resource_file_str),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2675:     fd_resource = mch_fopen((char *)resource->filename, READBIN);",
          "2676:     if (fd_resource == NULL)",
          "2677:     {",
          "2679:  return FALSE;",
          "2680:     }",
          "2681:     prt_dsc_resources(\"BeginResource\", prt_resource_types[resource->type],",
          "",
          "[Removed Lines]",
          "2678:  semsg(_(\"E456: Can't open file \\\"%s\\\"\"), resource->filename);",
          "",
          "[Added Lines]",
          "2678:  semsg(_(e_cant_open_file_str_2), resource->filename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2689:       sizeof(resource_buffer), fd_resource);",
          "2690:  if (ferror(fd_resource))",
          "2691:  {",
          "2693:            resource->filename);",
          "2694:      fclose(fd_resource);",
          "2695:      return FALSE;",
          "",
          "[Removed Lines]",
          "2692:      semsg(_(\"E457: Can't read PostScript resource file \\\"%s\\\"\"),",
          "",
          "[Added Lines]",
          "2692:      semsg(_(e_cant_read_postscript_resource_file_str),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2806:     if (!prt_find_resource(\"prolog\", res_prolog))",
          "2807:     {",
          "2809:  goto theend;",
          "2810:     }",
          "2811:     if (!prt_open_resource(res_prolog))",
          "",
          "[Removed Lines]",
          "2808:  emsg(_(\"E456: Can't find PostScript resource file \\\"prolog.ps\\\"\"));",
          "",
          "[Added Lines]",
          "2808:  semsg(_(e_cant_find_postscript_resource_file_str_ps), \"prolog\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2818:  if (!prt_find_resource(\"cidfont\", res_cidfont))",
          "2819:  {",
          "2821:      goto theend;",
          "2822:  }",
          "2823:  if (!prt_open_resource(res_cidfont))",
          "",
          "[Removed Lines]",
          "2820:      emsg(_(\"E456: Can't find PostScript resource file \\\"cidfont.ps\\\"\"));",
          "",
          "[Added Lines]",
          "2820:      semsg(_(e_cant_find_postscript_resource_file_str_ps), \"cidfont\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2849:   p_encoding = (char_u *)\"latin1\";",
          "2850:   if (!prt_find_resource((char *)p_encoding, res_encoding))",
          "2851:   {",
          "2853:        p_encoding);",
          "2854:       goto theend;",
          "2855:   }",
          "",
          "[Removed Lines]",
          "2852:       semsg(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),",
          "",
          "[Added Lines]",
          "2852:       semsg(_(e_cant_find_postscript_resource_file_str_ps),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2871:      if (!prt_find_resource(prt_ascii_encoding, res_encoding))",
          "2872:      {",
          "2874:          prt_ascii_encoding);",
          "2875:   goto theend;",
          "2876:      }",
          "",
          "[Removed Lines]",
          "2873:   semsg(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),",
          "",
          "[Added Lines]",
          "2873:   semsg(_(e_cant_find_postscript_resource_file_str_ps),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2900:  if (!prt_find_resource(prt_cmap, res_cmap))",
          "2901:  {",
          "2904:      goto theend;",
          "2905:  }",
          "2906:  if (!prt_open_resource(res_cmap))",
          "",
          "[Removed Lines]",
          "2902:      semsg(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),",
          "2903:             prt_cmap);",
          "",
          "[Added Lines]",
          "2902:      semsg(_(e_cant_find_postscript_resource_file_str_ps), prt_cmap);",
          "",
          "---------------"
        ],
        "src/help.c||src/help.c": [
          "File: src/help.c -> src/help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  if (eap->forceit && *arg == NUL && !curbuf->b_help)",
          "62:  {",
          "64:      return;",
          "65:  }",
          "",
          "[Removed Lines]",
          "63:      emsg(_(\"E478: Don't panic!\"));",
          "",
          "[Added Lines]",
          "63:      emsg(_(e_dont_panic));",
          "",
          "---------------"
        ],
        "src/highlight.c||src/highlight.c": [
          "File: src/highlight.c -> src/highlight.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053:   color = cterm_normal_ul_color - 1;",
          "1054:      else",
          "1055:      {",
          "1057:   return FALSE;",
          "1058:      }",
          "1059:  }",
          "",
          "[Removed Lines]",
          "1056:   emsg(_(\"E453: UL color unknown\"));",
          "",
          "[Added Lines]",
          "1056:   emsg(_(e_ul_color_unknown));",
          "",
          "---------------"
        ],
        "src/if_cscope.c||src/if_cscope.c": [
          "File: src/if_cscope.c -> src/if_cscope.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106:  if (strchr(CSQF_FLAGS, *qfpos) == NULL)",
          "1107:  {",
          "1109:      return FALSE;",
          "1110:  }",
          "",
          "[Removed Lines]",
          "1108:      (void)semsg(_(\"E469: invalid cscopequickfix flag %c for %c\"), *qfpos, *(qfpos - 1));",
          "",
          "[Added Lines]",
          "1108:      (void)semsg(_(e_invalid_cscopequickfix_flag_chr_for_chr),",
          "",
          "---------------"
        ],
        "src/json.c||src/json.c": [
          "File: src/json.c -> src/json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static int json_encode_item(garray_T *gap, typval_T *val, int copyID, int options);",
          "",
          "[Removed Lines]",
          "23: static char e_json_error[] = N_(\"E491: json decode error at '%s'\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740:    retval = json_decode_string(reader, cur_item, *p);",
          "741:       else",
          "742:       {",
          "744:    retval = FAIL;",
          "745:       }",
          "746:       break;",
          "",
          "[Removed Lines]",
          "743:    semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "741:    semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:   case ',': // comma: empty item",
          "749:       if ((options & JSON_JS) == 0)",
          "750:       {",
          "752:    retval = FAIL;",
          "753:    break;",
          "754:       }",
          "",
          "[Removed Lines]",
          "751:    semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "749:    semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "778:        }",
          "779:        if (!VIM_ISDIGIT(*sp))",
          "780:        {",
          "782:     retval = FAIL;",
          "783:     break;",
          "784:        }",
          "",
          "[Removed Lines]",
          "781:     semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "779:     semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "810:         &nr, NULL, 0, TRUE);",
          "811:        if (len == 0)",
          "812:        {",
          "814:     retval = FAIL;",
          "815:     goto theend;",
          "816:        }",
          "",
          "[Removed Lines]",
          "813:     semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "811:     semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "971:    retval = MAYBE;",
          "972:       else",
          "973:       {",
          "975:    retval = FAIL;",
          "976:       }",
          "977:       goto theend;",
          "",
          "[Removed Lines]",
          "974:    semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "972:    semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "989:    retval = MAYBE;",
          "990:       else",
          "991:       {",
          "993:    retval = FAIL;",
          "994:       }",
          "995:       goto theend;",
          "",
          "[Removed Lines]",
          "992:    semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "990:    semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1044:    retval = MAYBE;",
          "1045:       else",
          "1046:       {",
          "1048:    retval = FAIL;",
          "1049:       }",
          "1050:       goto theend;",
          "",
          "[Removed Lines]",
          "1047:    semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "1045:    semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1063:  res->v_type = VAR_SPECIAL;",
          "1064:  res->vval.v_number = VVAL_NONE;",
          "1065:     }",
          "1068: theend:",
          "1069:     for (i = 0; i < stack.ga_len; i++)",
          "",
          "[Removed Lines]",
          "1066:     semsg(_(e_json_error), p);",
          "",
          "[Added Lines]",
          "1064:     semsg(_(e_json_decode_error_at_str), p);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1090:     if (ret != OK)",
          "1091:     {",
          "1092:  if (ret == MAYBE)",
          "1094:  return FAIL;",
          "1095:     }",
          "1096:     json_skip_white(reader);",
          "",
          "[Removed Lines]",
          "1093:      semsg(_(e_json_error), reader->js_buf);",
          "",
          "[Added Lines]",
          "1091:      semsg(_(e_json_decode_error_at_str), reader->js_buf);",
          "",
          "---------------"
        ],
        "src/map.c||src/map.c": [
          "File: src/map.c -> src/map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2374:     rhs = dict_get_string(d, (char_u *)\"rhs\", FALSE);",
          "2375:     if (lhs == NULL || lhsraw == NULL || rhs == NULL)",
          "2376:     {",
          "2378:  return;",
          "2379:     }",
          "2380:     orig_rhs = rhs;",
          "",
          "[Removed Lines]",
          "2377:  emsg(_(\"E460: entries missing in mapset() dict argument\"));",
          "",
          "[Added Lines]",
          "2377:  emsg(_(e_entries_missing_in_mapset_dict_argument));",
          "",
          "---------------"
        ],
        "src/netbeans.c||src/netbeans.c": [
          "File: src/netbeans.c -> src/netbeans.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2516:     if (NETBEANS_OPEN)",
          "2517:     {",
          "2519:  return;",
          "2520:     }",
          "",
          "[Removed Lines]",
          "2518:  emsg(_(\"E511: netbeans already connected\"));",
          "",
          "[Added Lines]",
          "2518:  emsg(_(e_netbeans_already_connected));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3481:  char msgbuf[IOSIZE];",
          "3483:  vim_snprintf(msgbuf, IOSIZE,",
          "3485:  nbdebug((\"    %s\\n\", msgbuf));",
          "3486:  emsg(msgbuf);",
          "3487:     }",
          "",
          "[Removed Lines]",
          "3484:          _(\"E505: %s is read-only (add ! to override)\"), IObuff);",
          "",
          "[Added Lines]",
          "3484:          _(e_is_read_only_add_bang_to_override), IObuff);",
          "",
          "---------------"
        ],
        "src/popupwin.c||src/popupwin.c": [
          "File: src/popupwin.c -> src/popupwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1893:       && !(argvars[0].v_type == VAR_LIST",
          "1894:    && argvars[0].vval.v_list != NULL))",
          "1895:  {",
          "1897:      return NULL;",
          "1898:  }",
          "1899:  if (argvars[1].v_type != VAR_DICT || argvars[1].vval.v_dict == NULL)",
          "",
          "[Removed Lines]",
          "1896:      emsg(_(\"E450: buffer number, text or a list required\"));",
          "",
          "[Added Lines]",
          "1896:      emsg(_(e_buffer_number_text_or_list_required));",
          "",
          "---------------"
        ],
        "src/usercmd.c||src/usercmd.c": [
          "File: src/usercmd.c -> src/usercmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:     if (arg != NULL)",
          "690: # endif",
          "691:     {",
          "693:  return FAIL;",
          "694:     }",
          "",
          "[Removed Lines]",
          "692:  emsg(_(\"E468: Completion argument only allowed for custom completion\"));",
          "",
          "[Added Lines]",
          "692:  emsg(_(e_completion_argument_only_allowed_for_custom_completion));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:     if ((*complp == EXPAND_USER_DEFINED || *complp == EXPAND_USER_LIST)",
          "698:               && arg == NULL)",
          "699:     {",
          "701:  return FAIL;",
          "702:     }",
          "",
          "[Removed Lines]",
          "700:  emsg(_(\"E467: Custom completion requires a function argument\"));",
          "",
          "[Added Lines]",
          "700:  emsg(_(e_custom_completion_requires_function_argument));",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:  if (**arg != '}')",
          "1417:  {",
          "1419:      goto errret;",
          "1420:  }",
          "1421:  ++*arg;",
          "",
          "[Removed Lines]",
          "1418:      semsg(_(\"E451: Expected }: %s\"), *arg);",
          "",
          "[Added Lines]",
          "1418:      semsg(_(e_expected_right_curly_str), *arg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4001:   list_func_head(fp, FALSE);",
          "4002:   if (changed != func_hashtab.ht_changed)",
          "4003:   {",
          "4005:       return;",
          "4006:   }",
          "4007:      }",
          "",
          "[Removed Lines]",
          "4004:       emsg(_(\"E454: function list was modified\"));",
          "",
          "[Added Lines]",
          "4004:       emsg(_(e_function_list_was_modified));",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     3985,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     3986,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43216611a5accd32a53fe77d4552a36f6ed30c74",
      "candidate_info": {
        "commit_hash": "43216611a5accd32a53fe77d4552a36f6ed30c74",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/43216611a5accd32a53fe77d4552a36f6ed30c74",
        "files": [
          "src/eval.c",
          "src/testdir/test_vim9_script.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4622: Vim9: crash with :execute and :finish\n\nProblem:    Vim9: Crash with :execute and :finish. (Sergey Vlasov)\nSolution:   Check for NULL. (closes #10011)",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2144:  p = skipwhite(next);",
          "2145:  if (*p != NUL && !vim9_comment_start(p))",
          "2146:      return next;",
          "2148:     }",
          "2149:     return NULL;",
          "2150: }",
          "",
          "[Removed Lines]",
          "2147:  (void)eval_next_line(evalarg);",
          "",
          "[Added Lines]",
          "2147:  if (eval_next_line(evalarg) == NULL)",
          "2148:      break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2199:           GETLINE_CONCAT_ALL);",
          "2200:     else",
          "2201:  line = next_line_from_context(evalarg->eval_cctx, TRUE);",
          "2202:     ++evalarg->eval_break_count;",
          "2203:     if (gap->ga_itemsize > 0 && ga_grow(gap, 1) == OK)",
          "2204:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2203:     if (line == NULL)",
          "2204:  return NULL;",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
          "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1830:   v9.CheckScriptSuccess(lines)",
          "1831: enddef",
          "1833: def Test_echo_cmd()",
          "1834:   echo 'some' # comment",
          "1835:   echon 'thing'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1833: def Test_execute_finish()",
          "1834:   # the empty lines are relevant here",
          "1835:   var lines =<< trim END",
          "1836:       vim9script",
          "1838:       var vname = \"g:hello\"",
          "1840:       if exists(vname) | finish | endif | execute vname '= \"world\"'",
          "1842:       assert_equal('world', g:hello)",
          "1844:       if exists(vname) | finish | endif | execute vname '= \"world\"'",
          "1846:       assert_report('should not be reached')",
          "1847:   END",
          "1848:   v9.CheckScriptSuccess(lines)",
          "1849: enddef",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4621,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4622,",
          "",
          "---------------"
        ]
      }
    }
  ]
}