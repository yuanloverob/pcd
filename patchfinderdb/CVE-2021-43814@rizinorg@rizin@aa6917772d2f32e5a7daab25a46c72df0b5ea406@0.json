{
  "cve_id": "CVE-2021-43814",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. In versions up to and including 0.3.1 there is a heap-based out of bounds write in parse_die() when reversing an AMD64 ELF binary with DWARF debug info. When a malicious AMD64 ELF binary is opened by a victim user, Rizin may crash or execute unintended actions. No workaround are known and users are advised to upgrade.",
  "repo": "rizinorg/rizin",
  "patch_hash": "aa6917772d2f32e5a7daab25a46c72df0b5ea406",
  "patch_info": {
    "commit_hash": "aa6917772d2f32e5a7daab25a46c72df0b5ea406",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/aa6917772d2f32e5a7daab25a46c72df0b5ea406",
    "files": [
      "librz/bin/dwarf.c",
      "test/db/formats/elf/crash"
    ],
    "message": "Fix oob write for dwarf with abbrev with count 0 (Fix #2083) (#2086)",
    "before_after_code_files": [
      "librz/bin/dwarf.c||librz/bin/dwarf.c"
    ]
  },
  "patch_diff": {
    "librz/bin/dwarf.c||librz/bin/dwarf.c": [
      "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:  if (!die) {",
      "1221:   return -1;",
      "1222:  }",
      "1226:  }",
      "1227:  die->abbrev_code = abbr_code;",
      "1228:  die->capacity = attr_count;",
      "",
      "[Removed Lines]",
      "1223:  die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
      "1224:  if (!die->attr_values) {",
      "1225:   return -1;",
      "",
      "[Added Lines]",
      "1223:  if (attr_count) {",
      "1224:   die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
      "1225:   if (!die->attr_values) {",
      "1226:    return -1;",
      "1227:   }",
      "1228:  } else {",
      "1229:   die->attr_values = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1726:  size_t i;",
      "1727:  const char *comp_dir = NULL;",
      "1728:  ut64 line_info_offset = UT64_MAX;",
      "1745:    }",
      "1746:   }",
      "1748:  }",
      "",
      "[Removed Lines]",
      "1729:  for (i = 0; i < abbrev->count - 1; i++) {",
      "1730:   memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
      "1732:   buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
      "1733:    &die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);",
      "1735:   RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
      "1737:   if (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {",
      "1738:    comp_dir = attribute->string.content;",
      "1739:   }",
      "1740:   if (attribute->attr_name == DW_AT_stmt_list) {",
      "1741:    if (attribute->kind == DW_AT_KIND_CONSTANT) {",
      "1742:     line_info_offset = attribute->uconstant;",
      "1743:    } else if (attribute->kind == DW_AT_KIND_REFERENCE) {",
      "1744:     line_info_offset = attribute->reference;",
      "1747:   die->count++;",
      "",
      "[Added Lines]",
      "1733:  if (abbrev->count) {",
      "1734:   for (i = 0; i < abbrev->count - 1; i++) {",
      "1735:    memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
      "1737:    buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
      "1738:     &die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);",
      "1740:    RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
      "1742:    if (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {",
      "1743:     comp_dir = attribute->string.content;",
      "1744:    }",
      "1745:    if (attribute->attr_name == DW_AT_stmt_list) {",
      "1746:     if (attribute->kind == DW_AT_KIND_CONSTANT) {",
      "1747:      line_info_offset = attribute->uconstant;",
      "1748:     } else if (attribute->kind == DW_AT_KIND_REFERENCE) {",
      "1749:      line_info_offset = attribute->reference;",
      "1750:     }",
      "1752:    die->count++;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a63dad027df62c5d65cad480d9ddc6134a5509b",
      "candidate_info": {
        "commit_hash": "1a63dad027df62c5d65cad480d9ddc6134a5509b",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/1a63dad027df62c5d65cad480d9ddc6134a5509b",
        "files": [
          "librz/bin/dwarf.c",
          "test/db/formats/elf/crash"
        ],
        "message": "Fix oob write for dwarf with abbrev with count 0 (Fix #2083) (#2086)",
        "before_after_code_files": [
          "librz/bin/dwarf.c||librz/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ],
          "candidate": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:  if (!die) {",
          "1221:   return -1;",
          "1222:  }",
          "1226:  }",
          "1227:  die->abbrev_code = abbr_code;",
          "1228:  die->capacity = attr_count;",
          "",
          "[Removed Lines]",
          "1223:  die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
          "1224:  if (!die->attr_values) {",
          "1225:   return -1;",
          "",
          "[Added Lines]",
          "1223:  if (attr_count) {",
          "1224:   die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
          "1225:   if (!die->attr_values) {",
          "1226:    return -1;",
          "1227:   }",
          "1228:  } else {",
          "1229:   die->attr_values = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1726:  size_t i;",
          "1727:  const char *comp_dir = NULL;",
          "1728:  ut64 line_info_offset = UT64_MAX;",
          "1745:    }",
          "1746:   }",
          "1748:  }",
          "",
          "[Removed Lines]",
          "1729:  for (i = 0; i < abbrev->count - 1; i++) {",
          "1730:   memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "1732:   buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
          "1733:    &die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);",
          "1735:   RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "1737:   if (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {",
          "1738:    comp_dir = attribute->string.content;",
          "1739:   }",
          "1740:   if (attribute->attr_name == DW_AT_stmt_list) {",
          "1741:    if (attribute->kind == DW_AT_KIND_CONSTANT) {",
          "1742:     line_info_offset = attribute->uconstant;",
          "1743:    } else if (attribute->kind == DW_AT_KIND_REFERENCE) {",
          "1744:     line_info_offset = attribute->reference;",
          "1747:   die->count++;",
          "",
          "[Added Lines]",
          "1733:  if (abbrev->count) {",
          "1734:   for (i = 0; i < abbrev->count - 1; i++) {",
          "1735:    memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "1737:    buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
          "1738:     &die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);",
          "1740:    RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "1742:    if (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {",
          "1743:     comp_dir = attribute->string.content;",
          "1744:    }",
          "1745:    if (attribute->attr_name == DW_AT_stmt_list) {",
          "1746:     if (attribute->kind == DW_AT_KIND_CONSTANT) {",
          "1747:      line_info_offset = attribute->uconstant;",
          "1748:     } else if (attribute->kind == DW_AT_KIND_REFERENCE) {",
          "1749:      line_info_offset = attribute->reference;",
          "1750:     }",
          "1752:    die->count++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa60048914793de19fb09e42c22b941473a89175",
      "candidate_info": {
        "commit_hash": "fa60048914793de19fb09e42c22b941473a89175",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/fa60048914793de19fb09e42c22b941473a89175",
        "files": [
          "librz/bin/dwarf.c",
          "librz/core/cbin.c",
          "librz/include/rz_bin_dwarf.h",
          "test/db/cmd/cmd_i",
          "test/unit/test_dwarf.c"
        ],
        "message": "Remove all remaining SDB from Dwarf (#869)",
        "before_after_code_files": [
          "librz/bin/dwarf.c||librz/bin/dwarf.c",
          "librz/core/cbin.c||librz/core/cbin.c",
          "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h",
          "test/unit/test_dwarf.c||test/unit/test_dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ],
          "candidate": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:  return buf;",
          "542: }",
          "546:  if (file_index >= header->file_names_count) {",
          "547:   return NULL;",
          "548:  }",
          "",
          "[Removed Lines]",
          "544: RZ_API char *rz_bin_dwarf_line_header_get_full_file_path(Sdb *sdb_addrinfo, const RzBinDwarfLineHeader *header, ut64 file_index) {",
          "545:  rz_return_val_if_fail(sdb_addrinfo && header, NULL);",
          "",
          "[Added Lines]",
          "547: RZ_API char *rz_bin_dwarf_line_header_get_full_file_path(RZ_NULLABLE RzBinDwarfDebugInfo *info, const RzBinDwarfLineHeader *header, ut64 file_index) {",
          "548:  rz_return_val_if_fail(header, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:  if (file->id_idx > 0 && file->id_idx - 1 < header->include_dirs_count) {",
          "564:   include_dir = header->include_dirs[file->id_idx - 1];",
          "570:   }",
          "571:  } else {",
          "573:  }",
          "574:  if (!include_dir) {",
          "575:   include_dir = \"./\";",
          "576:  }",
          "577:  char *r = rz_str_newf(\"%s/%s\", include_dir, file->name);",
          "581:  return r;",
          "582: }",
          "",
          "[Removed Lines]",
          "562:  const char *include_dir = NULL, *comp_dir = NULL;",
          "565:   if (include_dir && include_dir[0] != '/') {",
          "566:    comp_dir = sdb_const_get(sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "567:    if (comp_dir) {",
          "568:     include_dir = rz_str_newf(\"%s/%s/\", comp_dir, include_dir);",
          "569:    }",
          "572:   include_dir = sdb_const_get(sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "578:  if (comp_dir) {",
          "579:   RZ_FREE(include_dir);",
          "580:  }",
          "",
          "[Added Lines]",
          "566:  const char *comp_dir = info ? ht_up_find(info->line_info_offset_comp_dir, header->offset, NULL) : NULL;",
          "567:  const char *include_dir = NULL;",
          "568:  char *own_str = NULL;",
          "571:   if (include_dir && include_dir[0] != '/' && comp_dir) {",
          "572:    include_dir = own_str = rz_str_newf(\"%s/%s/\", comp_dir, include_dir);",
          "575:   include_dir = comp_dir;",
          "581:  free(own_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609: static const ut8 *parse_line_header(",
          "610:  RzBinFile *bf, const ut8 *buf, const ut8 *buf_end,",
          "612:  rz_return_val_if_fail(hdr && bf && buf && buf_end, NULL);",
          "614:  hdr->is_64bit = false;",
          "615:  hdr->unit_length = dwarf_read_initial_length(&hdr->is_64bit, big_endian, &buf, buf_end);",
          "616:  hdr->version = READ16(buf);",
          "",
          "[Removed Lines]",
          "611:  RzBinDwarfLineHeader *hdr, bool big_endian) {",
          "",
          "[Added Lines]",
          "612:  RzBinDwarfLineHeader *hdr, ut64 offset_cur, bool big_endian) {",
          "615:  hdr->offset = offset_cur;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "806: }",
          "808: static void store_line_sample(RzList /*<RzBinSourceRow>*/ *rows_out, const RzBinDwarfLineHeader *hdr, RzBinDwarfSMRegisters *regs,",
          "810:  if (!regs->file) {",
          "811:   return;",
          "812:  }",
          "813:  ut64 fnidx = regs->file - 1;",
          "815:  if (!full_file) {",
          "816:   return;",
          "817:  }",
          "",
          "[Removed Lines]",
          "809:  RZ_DEPRECATE Sdb *sdb_addrinfo) {",
          "814:  char *full_file = rz_bin_dwarf_line_header_get_full_file_path(sdb_addrinfo, hdr, fnidx);",
          "",
          "[Added Lines]",
          "811:  RZ_NULLABLE RzBinDwarfDebugInfo *info) {",
          "816:  char *full_file = rz_bin_dwarf_line_header_get_full_file_path(info, hdr, fnidx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "828: }",
          "830: RZ_API bool rz_bin_dwarf_line_op_run(const RzBinDwarfLineHeader *hdr, RzBinDwarfSMRegisters *regs, RzBinDwarfLineOp *op,",
          "833:  switch (op->type) {",
          "834:  case RZ_BIN_DWARF_LINE_OP_TYPE_STD:",
          "835:   switch (op->opcode) {",
          "836:   case DW_LNS_copy:",
          "837:    if (rows_out) {",
          "839:    }",
          "840:    regs->basic_block = DWARF_FALSE;",
          "841:    break;",
          "",
          "[Removed Lines]",
          "831:  RZ_NULLABLE RZ_OUT RzList /*<RzBinSourceRow>*/ *rows_out, RZ_DEPRECATE Sdb *sdb_addrinfo) {",
          "832:  rz_return_val_if_fail(hdr && regs && op && (!rows_out || sdb_addrinfo), false);",
          "838:     store_line_sample(rows_out, hdr, regs, sdb_addrinfo);",
          "",
          "[Added Lines]",
          "833:  RZ_NULLABLE RZ_OUT RzList /*<RzBinSourceRow>*/ *rows_out, RZ_NULLABLE RzBinDwarfDebugInfo *info) {",
          "834:  rz_return_val_if_fail(hdr && regs && op, false);",
          "840:     store_line_sample(rows_out, hdr, regs, info);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "885:     regs->line = 0;",
          "886:     regs->column = 0;",
          "888:    }",
          "889:    rz_bin_dwarf_line_header_reset_regs(hdr, regs);",
          "890:    break;",
          "",
          "[Removed Lines]",
          "887:     store_line_sample(rows_out, hdr, regs, sdb_addrinfo);",
          "",
          "[Added Lines]",
          "889:     store_line_sample(rows_out, hdr, regs, info);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "904:   regs->address += rz_bin_dwarf_line_header_get_spec_op_advance_pc(hdr, op->opcode);",
          "905:   regs->line += rz_bin_dwarf_line_header_get_spec_op_advance_line(hdr, op->opcode);",
          "906:   if (rows_out) {",
          "908:   }",
          "909:   regs->basic_block = DWARF_FALSE;",
          "910:   regs->prologue_end = DWARF_FALSE;",
          "",
          "[Removed Lines]",
          "907:    store_line_sample(rows_out, hdr, regs, sdb_addrinfo);",
          "",
          "[Added Lines]",
          "909:    store_line_sample(rows_out, hdr, regs, info);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "920: static size_t parse_opcodes(const ut8 *obuf,",
          "921:  size_t len, const RzBinDwarfLineHeader *hdr, RzVector *ops_out,",
          "923:  bool big_endian, ut8 target_addr_size) {",
          "924:  const ut8 *buf, *buf_end;",
          "925:  ut8 opcode;",
          "",
          "[Removed Lines]",
          "922:  RzBinDwarfSMRegisters *regs, RzList *rows_out, RZ_DEPRECATE Sdb *sdb_addrinfo,",
          "",
          "[Added Lines]",
          "924:  RzBinDwarfSMRegisters *regs, RzList *rows_out, RZ_NULLABLE RzBinDwarfDebugInfo *info,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "946:    break;",
          "947:   }",
          "948:   if (rows_out) {",
          "950:   }",
          "951:   if (ops_out) {",
          "952:    rz_vector_push(ops_out, &op);",
          "",
          "[Removed Lines]",
          "949:    rz_bin_dwarf_line_op_run(hdr, regs, &op, rows_out, sdb_addrinfo);",
          "",
          "[Added Lines]",
          "951:    rz_bin_dwarf_line_op_run(hdr, regs, &op, rows_out, info);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "961: }",
          "963: static RzList /*<RzBinDwarfLineInfo>*/ *parse_line_raw(RzBinFile *binfile, const ut8 *obuf,",
          "966:  rz_return_val_if_fail(binfile && obuf, false);",
          "968:  const ut8 *buf = obuf;",
          "969:  const ut8 *buf_end = obuf + len;",
          "970:  const ut8 *tmpbuf = NULL;",
          "971:  ut64 buf_size;",
          "",
          "[Removed Lines]",
          "964:  ut64 len, RzBinDwarfLineInfoMask mask, bool big_endian) {",
          "",
          "[Added Lines]",
          "966:  ut64 len, RzBinDwarfLineInfoMask mask, bool big_endian, RZ_NULLABLE RzBinDwarfDebugInfo *info) {",
          "971:  const ut8 *buf_start = buf;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "990:   buf_size = buf_end - buf;",
          "992:   tmpbuf = buf;",
          "994:   if (!buf) {",
          "995:    rz_bin_dwarf_line_info_free(li);",
          "996:    break;",
          "",
          "[Removed Lines]",
          "993:   buf = parse_line_header(binfile, buf, buf_end, &li->header, big_endian);",
          "",
          "[Added Lines]",
          "996:   buf = parse_line_header(binfile, buf, buf_end, &li->header, buf - buf_start, big_endian);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1032:    tmp_read = parse_opcodes(buf, buf_size - bytes_read, &li->header,",
          "1033:     (mask & RZ_BIN_DWARF_LINE_INFO_MASK_OPS) ? &ops : NULL, &regs,",
          "1035:    bytes_read += tmp_read;",
          "1036:    buf += tmp_read; // Move in the buffer forward",
          "1037:   } while (bytes_read < buf_size && tmp_read != 0); // if nothing is read -> error, exit",
          "",
          "[Removed Lines]",
          "1034:     li->rows, binfile->sdb_addrinfo, big_endian, target_addr_size);",
          "",
          "[Added Lines]",
          "1037:     li->rows, info, big_endian, target_addr_size);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1133:  return r;",
          "1134: }",
          "1144:  if (!inf->comp_units) {",
          "1146:  }",
          "1148:  inf->capacity = DEBUG_INFO_CAPACITY;",
          "1149:  inf->count = 0;",
          "1150:  return true;",
          "1151: }",
          "1153: static int init_die(RzBinDwarfDie *die, ut64 abbr_code, ut64 attr_count) {",
          "",
          "[Removed Lines]",
          "1136: static int init_debug_info(RzBinDwarfDebugInfo *inf) {",
          "1137:  if (!inf) {",
          "1138:   return -1;",
          "1139:  }",
          "1140:  inf->comp_units = calloc(sizeof(RzBinDwarfCompUnit), DEBUG_INFO_CAPACITY);",
          "1142:  inf->lookup_table = ht_up_new0();",
          "1145:   return -1;",
          "",
          "[Added Lines]",
          "1139: static void free_ht_comp_dir(HtUPKv *kv) {",
          "1140:  free(kv->value);",
          "1141: }",
          "1143: static bool init_debug_info(RzBinDwarfDebugInfo *inf) {",
          "1144:  inf->comp_units = RZ_NEWS0(RzBinDwarfCompUnit, DEBUG_INFO_CAPACITY);",
          "1146:   return false;",
          "1147:  }",
          "1148:  inf->lookup_table = ht_up_new0();",
          "1149:  if (!inf->lookup_table) {",
          "1150:   goto wurzelbert_comp_units;",
          "1151:  }",
          "1152:  inf->line_info_offset_comp_dir = ht_up_new(NULL, free_ht_comp_dir, NULL);",
          "1153:  if (!inf->line_info_offset_comp_dir) {",
          "1154:   goto wurzelbert_lookup_table;",
          "1159: wurzelbert_lookup_table:",
          "1160:  ht_up_free(inf->lookup_table);",
          "1161: wurzelbert_comp_units:",
          "1162:  free(inf->comp_units);",
          "1163:  return false;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1347: }",
          "1349: RZ_API void rz_bin_dwarf_debug_info_free(RzBinDwarfDebugInfo *inf) {",
          "1351:  if (!inf) {",
          "1352:   return;",
          "1353:  }",
          "1355:   free_comp_unit(&inf->comp_units[i]);",
          "1356:  }",
          "1357:  ht_up_free(inf->lookup_table);",
          "1358:  free(inf->comp_units);",
          "1359:  free(inf);",
          "",
          "[Removed Lines]",
          "1350:  size_t i;",
          "1354:  for (i = 0; i < inf->count; i++) {",
          "",
          "[Added Lines]",
          "1366:  for (size_t i = 0; i < inf->count; i++) {",
          "1369:  ht_up_free(inf->line_info_offset_comp_dir);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1651: }",
          "1668:  size_t i;",
          "1669:  for (i = 0; i < abbrev->count - 1; i++) {",
          "1670:   memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "",
          "[Removed Lines]",
          "1666: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RzBinDwarfAbbrevDecl *abbrev,",
          "1667:  RzBinDwarfCompUnitHdr *hdr, RzBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb, bool big_endian) {",
          "",
          "[Added Lines]",
          "1677: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RzBinDwarfDebugInfo *info, RzBinDwarfAbbrevDecl *abbrev,",
          "1678:  RzBinDwarfCompUnitHdr *hdr, RzBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "1680:  const char *comp_dir = NULL;",
          "1681:  ut64 line_info_offset = UT64_MAX;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1675:   RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "1686:   }",
          "1687:   die->count++;",
          "1688:  }",
          "1690:  return buf;",
          "1691: }",
          "",
          "[Removed Lines]",
          "1677:   bool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||",
          "1678:           attribute->attr_form == DW_FORM_string) &&",
          "1679:    attribute->string.content;",
          "1683:   if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {",
          "1684:    const char *name = attribute->string.content;",
          "1685:    sdb_set(sdb, \"DW_AT_comp_dir\", name, 0);",
          "",
          "[Added Lines]",
          "1690:   if (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {",
          "1691:    comp_dir = attribute->string.content;",
          "1692:   }",
          "1693:   if (attribute->attr_name == DW_AT_stmt_list) {",
          "1694:    if (attribute->kind == DW_AT_KIND_CONSTANT) {",
          "1695:     line_info_offset = attribute->uconstant;",
          "1696:    } else if (attribute->kind == DW_AT_KIND_REFERENCE) {",
          "1697:     line_info_offset = attribute->reference;",
          "1698:    }",
          "1705:  if (comp_dir && line_info_offset != UT64_MAX) {",
          "1706:   char *name = strdup(comp_dir);",
          "1707:   if (name) {",
          "1708:    if (!ht_up_insert(info->line_info_offset_comp_dir, line_info_offset, name)) {",
          "1709:     free(name);",
          "1710:    }",
          "1711:   }",
          "1712:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1707:  RzBinDwarfCompUnit *unit, const RzBinDwarfDebugAbbrev *abbrevs,",
          "1708:  size_t first_abbr_idx, const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "",
          "[Removed Lines]",
          "1706: static const ut8 *parse_comp_unit(RzBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start,",
          "",
          "[Added Lines]",
          "1729: static const ut8 *parse_comp_unit(RzBinDwarfDebugInfo *info, const ut8 *buf_start,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1749:   die->tag = abbrev->tag;",
          "1750:   die->has_children = abbrev->has_children;",
          "1753:   if (!buf) {",
          "1754:    return NULL;",
          "1755:   }",
          "",
          "[Removed Lines]",
          "1752:   buf = parse_die(buf, buf_end, abbrev, &unit->hdr, die, debug_str, debug_str_len, sdb, big_endian);",
          "",
          "[Added Lines]",
          "1775:   buf = parse_die(buf, buf_end, info, abbrev, &unit->hdr, die, debug_str, debug_str_len, big_endian);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1829:  const ut8 *obuf, size_t len,",
          "1830:  const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "1834:  const ut8 *buf = obuf;",
          "1835:  const ut8 *buf_end = obuf + len;",
          "",
          "[Removed Lines]",
          "1828: static RzBinDwarfDebugInfo *parse_info_raw(Sdb *sdb, RzBinDwarfDebugAbbrev *da,",
          "1832:  rz_return_val_if_fail(da && sdb && obuf, false);",
          "",
          "[Added Lines]",
          "1850: static RzBinDwarfDebugInfo *parse_info_raw(RzBinDwarfDebugAbbrev *da,",
          "1854:  rz_return_val_if_fail(da && obuf, false);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1838:  if (!info) {",
          "1839:   return NULL;",
          "1840:  }",
          "1842:   goto cleanup;",
          "1843:  }",
          "1844:  int unit_idx = 0;",
          "",
          "[Removed Lines]",
          "1841:  if (init_debug_info(info) < 0) {",
          "",
          "[Added Lines]",
          "1863:  if (!init_debug_info(info)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1884:   size_t first_abbr_idx = abbrev_start - da->decls;",
          "1888:   if (!buf) {",
          "1889:    goto cleanup;",
          "",
          "[Removed Lines]",
          "1886:   buf = parse_comp_unit(info, sdb, buf, unit, da, first_abbr_idx, debug_str, debug_str_len, big_endian);",
          "",
          "[Added Lines]",
          "1908:   buf = parse_comp_unit(info, buf, unit, da, first_abbr_idx, debug_str, debug_str_len, big_endian);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2034:  if (!rz_buf_read_at(binfile->buf, section->paddr, buf, len)) {",
          "2035:   goto cave_buf;",
          "2036:  }",
          "2038:   binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "2039:  if (!info) {",
          "2040:   goto cave_buf;",
          "",
          "[Removed Lines]",
          "2037:  info = parse_info_raw(binfile->sdb_addrinfo, da, buf, len, debug_str_buf, debug_str_len,",
          "",
          "[Added Lines]",
          "2059:  info = parse_info_raw(da, buf, len, debug_str_buf, debug_str_len,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2059:  return info;",
          "2060: }",
          "2063:  rz_return_val_if_fail(binfile, NULL);",
          "2064:  RzBinSection *section = getsection(binfile, \"debug_line\");",
          "2065:  if (!section) {",
          "",
          "[Removed Lines]",
          "2062: RZ_API RzList *rz_bin_dwarf_parse_line(RzBinFile *binfile, RzBinDwarfLineInfoMask mask) {",
          "",
          "[Added Lines]",
          "2087: RZ_API RzList *rz_bin_dwarf_parse_line(RzBinFile *binfile, RZ_NULLABLE RzBinDwarfDebugInfo *info, RzBinDwarfLineInfoMask mask) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2079:   return NULL;",
          "2080:  }",
          "2083:  free(buf);",
          "2084:  return lines;",
          "2085: }",
          "",
          "[Removed Lines]",
          "2082:  RzList *lines = parse_line_raw(binfile, buf, len, mask, binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "",
          "[Added Lines]",
          "2107:  RzList *lines = parse_line_raw(binfile, buf, len, mask, binfile->o && binfile->o->info && binfile->o->info->big_endian, info);",
          "",
          "---------------"
        ],
        "librz/core/cbin.c||librz/core/cbin.c": [
          "File: librz/core/cbin.c -> librz/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1148:    }",
          "1149:    rz_bin_dwarf_loc_free(loc_table);",
          "1150:   }",
          "1152:   if (mode == RZ_MODE_PRINT) {",
          "1153:    RzList *aranges = rz_bin_dwarf_parse_aranges(binfile);",
          "1154:    if (aranges) {",
          "",
          "[Removed Lines]",
          "1151:   rz_bin_dwarf_debug_info_free(info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:     rz_list_free(aranges);",
          "1157:    }",
          "1158:   }",
          "1160:    RZ_BIN_DWARF_LINE_INFO_MASK_ROWS | (mode == RZ_MODE_PRINT ? RZ_BIN_DWARF_LINE_INFO_MASK_OPS : 0));",
          "1161:   if (lines) {",
          "1162:    if (mode == RZ_MODE_PRINT) {",
          "1163:     rz_core_bin_dwarf_print_lines(lines);",
          "",
          "[Removed Lines]",
          "1159:   RzList *lines = rz_bin_dwarf_parse_line(binfile,",
          "",
          "[Added Lines]",
          "1158:   RzList *lines = rz_bin_dwarf_parse_line(binfile, info,",
          "1160:   rz_bin_dwarf_debug_info_free(info);",
          "",
          "---------------"
        ],
        "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h": [
          "File: librz/include/rz_bin_dwarf.h -> librz/include/rz_bin_dwarf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:  size_t capacity;",
          "762:  RzBinDwarfCompUnit *comp_units;",
          "763:  HtUP /*<ut64 offset, DwarfDie *die>*/ *lookup_table;",
          "764: } RzBinDwarfDebugInfo;",
          "766: #define ABBREV_DECL_CAP 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:  HtUP /*<ut64, char *>*/ *line_info_offset_comp_dir;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: } RzBinDwarfLineFileEntry;",
          "810: typedef struct {",
          "811:  ut64 unit_length;",
          "812:  ut16 version;",
          "813:  ut64 header_length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "818:  ut64 offset; //< offset inside the debug_line section, for references from outside",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "931: RZ_API void rz_bin_dwarf_debug_info_free(RzBinDwarfDebugInfo *inf);",
          "932: RZ_API void rz_bin_dwarf_debug_abbrev_free(RzBinDwarfDebugAbbrev *da);",
          "936: RZ_API ut64 rz_bin_dwarf_line_header_get_adj_opcode(const RzBinDwarfLineHeader *header, ut8 opcode);",
          "937: RZ_API ut64 rz_bin_dwarf_line_header_get_spec_op_advance_pc(const RzBinDwarfLineHeader *header, ut8 opcode);",
          "938: RZ_API st64 rz_bin_dwarf_line_header_get_spec_op_advance_line(const RzBinDwarfLineHeader *header, ut8 opcode);",
          "939: RZ_API void rz_bin_dwarf_line_header_reset_regs(const RzBinDwarfLineHeader *hdr, RzBinDwarfSMRegisters *regs);",
          "940: RZ_API bool rz_bin_dwarf_line_op_run(const RzBinDwarfLineHeader *hdr, RzBinDwarfSMRegisters *regs, RzBinDwarfLineOp *op,",
          "942: RZ_API void rz_bin_dwarf_line_op_fini(RzBinDwarfLineOp *op);",
          "943: RZ_API void rz_bin_dwarf_line_info_free(RzBinDwarfLineInfo *li);",
          "",
          "[Removed Lines]",
          "934: RZ_API RzList *rz_bin_dwarf_parse_line(RzBinFile *binfile, RzBinDwarfLineInfoMask mask);",
          "935: RZ_API char *rz_bin_dwarf_line_header_get_full_file_path(Sdb *sdb_addrinfo, const RzBinDwarfLineHeader *header, ut64 file_index);",
          "941:  RZ_NULLABLE RZ_OUT RzList /*<RzBinSourceRow>*/ *rows_out, RZ_DEPRECATE Sdb *sdb_addrinfo);",
          "",
          "[Added Lines]",
          "942: RZ_API RzList *rz_bin_dwarf_parse_line(RzBinFile *binfile, RZ_NULLABLE RzBinDwarfDebugInfo *info, RzBinDwarfLineInfoMask mask);",
          "943: RZ_API char *rz_bin_dwarf_line_header_get_full_file_path(RZ_NULLABLE RzBinDwarfDebugInfo *info, const RzBinDwarfLineHeader *header, ut64 file_index);",
          "949:  RZ_NULLABLE RZ_OUT RzList /*<RzBinSourceRow>*/ *rows_out, RZ_NULLABLE RzBinDwarfDebugInfo *info);",
          "",
          "---------------"
        ],
        "test/unit/test_dwarf.c||test/unit/test_dwarf.c": [
          "File: test/unit/test_dwarf.c -> test/unit/test_dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  }",
          "114:  i++;",
          "117:  mu_assert_eq(rz_list_length(line_list), 1, \"Amount of line information parse doesn't match\");",
          "118:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "119:  mu_assert_eq(rz_list_length(li->rows), 8, \"rows count\");",
          "",
          "[Removed Lines]",
          "116:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "116:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  mu_assert_eq(rz_list_length(line_list), 1, \"Amount of line information parse doesn't match\");",
          "474:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "475:  mu_assert_eq(rz_list_length(li->rows), 60, \"rows count\");",
          "",
          "[Removed Lines]",
          "472:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "472:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "577:  check_abbrev_children(false);",
          "578:  check_abbrev_code(18);",
          "581:  mu_assert_eq(rz_list_length(line_list), 2, \"Amount of line information parse doesn't match\");",
          "582:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "583:  mu_assert_eq(rz_list_length(li->rows), 17, \"rows count\");",
          "",
          "[Removed Lines]",
          "580:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "580:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "634:  mu_assert_eq(da->count, 731, \"Incorrect number of abbreviation\");",
          "637:  mu_assert_eq(rz_list_length(line_list), 16, \"Amount of line information parse doesn't match\");",
          "638:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "639:  mu_assert_eq(rz_list_length(((RzBinDwarfLineInfo *)rz_list_get_n(line_list, 0))->rows), 271, \"rows count\");",
          "",
          "[Removed Lines]",
          "636:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "636:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "723:  check_abbrev_children(false);",
          "724:  check_abbrev_code(18);",
          "727:  mu_assert_eq(rz_list_length(line_list), 2, \"Amount of line information parse doesn't match\");",
          "729:  RzBinDwarfLineInfo *li = rz_list_get_n(line_list, 0);",
          "",
          "[Removed Lines]",
          "726:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "726:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "836:  mu_assert_eq(rz_list_length(line_list), 2, \"Amount of line information parse doesn't match\");",
          "837:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "838:  mu_assert_eq(rz_list_length(li->rows), 61, \"rows count\");",
          "",
          "[Removed Lines]",
          "835:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "835:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "928:  mu_end;",
          "929: }",
          "931: bool test_big_endian_dwarf2(void) {",
          "932:  RzBin *bin = rz_bin_new();",
          "933:  RzIO *io = rz_io_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931: bool test_dwarf4_multidir_comp_units(void) {",
          "932:  RzBin *bin = rz_bin_new();",
          "933:  RzIO *io = rz_io_new();",
          "934:  rz_io_bind(io, &bin->iob);",
          "936:  RzBinOptions opt = { 0 };",
          "937:  bool res = rz_bin_open(bin, \"bins/elf/dwarf4_multidir_comp_units\", &opt);",
          "938:  mu_assert(\"couldn't open file\", res);",
          "940:  RzBinDwarfDebugAbbrev *da = rz_bin_dwarf_parse_abbrev(bin->cur);",
          "941:  mu_assert_notnull(da, \"abbrevs\");",
          "942:  mu_assert_eq(da->count, 8, \"abbrevs count\");",
          "944:  RzBinDwarfDebugInfo *info = rz_bin_dwarf_parse_info(bin->cur, da);",
          "945:  mu_assert_notnull(info, \"info\");",
          "947:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, info, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "948:  mu_assert_eq(rz_list_length(line_list), 2, \"line info count\");",
          "950:  const RzBinSourceRow test_rows0[] = {",
          "951:   { 0x1139, \"/home/florian/dev/dwarf-comp-units/main.c\", 6, 12 },",
          "952:   { 0x113d, \"/home/florian/dev/dwarf-comp-units/main.c\", 7, 2 },",
          "953:   { 0x115f, \"/home/florian/dev/dwarf-comp-units/main.c\", 8, 2 },",
          "954:   { 0x1181, \"/home/florian/dev/dwarf-comp-units/main.c\", 9, 9 },",
          "955:   { 0x1186, \"/home/florian/dev/dwarf-comp-units/main.c\", 10, 1 },",
          "956:   { 0x1188, \"/home/florian/dev/dwarf-comp-units/main.c\", 0, 0 }",
          "957:  };",
          "959:  const RzBinSourceRow test_rows1[] = {",
          "960:   { 0x1188, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 2, 31 },",
          "961:   { 0x1192, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 3, 11 },",
          "962:   { 0x1198, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 3, 20 },",
          "963:   { 0x11a1, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 3, 16 },",
          "964:   { 0x11a3, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 4, 1 },",
          "965:   { 0x11a5, \"/home/florian/dev/dwarf-comp-units/some_subfolder/subfile.c\", 0, 0 }",
          "966:  };",
          "968:  const RzBinSourceRow *test_rows[] = { test_rows0, test_rows1 };",
          "970:  for (size_t i = 0; i < 2; i++) {",
          "971:   RzBinDwarfLineInfo *li = rz_list_get_n(line_list, i);",
          "972:   mu_assert_eq(rz_list_length(li->rows), i ? RZ_ARRAY_SIZE(test_rows1) : RZ_ARRAY_SIZE(test_rows0), \"rows count\");",
          "973:   RzBinSourceRow *row;",
          "974:   RzListIter *iter;",
          "975:   size_t j = 0;",
          "976:   rz_list_foreach (li->rows, iter, row) {",
          "977:    const RzBinSourceRow *expect = &test_rows[i][j++];",
          "978:    mu_assert_eq(row->address, expect->address, \"Row addr\");",
          "979:    mu_assert_streq(row->file, expect->file, \"Row file\");",
          "980:    mu_assert_eq(row->line, expect->line, \"Row line\");",
          "981:    mu_assert_eq(row->column, expect->column, \"Row column\");",
          "982:   }",
          "983:  }",
          "985:  rz_list_free(line_list);",
          "986:  rz_bin_dwarf_debug_info_free(info);",
          "987:  rz_bin_dwarf_debug_abbrev_free(da);",
          "988:  rz_bin_free(bin);",
          "989:  rz_io_free(io);",
          "990:  mu_end;",
          "991: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "937:  bool res = rz_bin_open(bin, \"bins/elf/ppc64_sudoku_dwarf\", &opt);",
          "938:  mu_assert(\"couldn't open file\", res);",
          "941:  mu_assert_eq(rz_list_length(line_list), 1, \"Amount of line information parse doesn't match\");",
          "942:  RzBinDwarfLineInfo *li = rz_list_first(line_list);",
          "943:  mu_assert_eq(rz_list_length(li->rows), 475, \"rows count\");",
          "",
          "[Removed Lines]",
          "940:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "[Added Lines]",
          "1002:  RzList *line_list = rz_bin_dwarf_parse_line(bin->cur, NULL, RZ_BIN_DWARF_LINE_INFO_MASK_OPS | RZ_BIN_DWARF_LINE_INFO_MASK_ROWS);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1043:  mu_run_test(test_dwarf3_cpp_basic);",
          "1044:  mu_run_test(test_dwarf3_cpp_many_comp_units);",
          "1045:  mu_run_test(test_dwarf4_cpp_many_comp_units);",
          "1046:  mu_run_test(test_big_endian_dwarf2);",
          "1047:  mu_run_test(test_dwarf3_aranges);",
          "1048:  return tests_passed != tests_run;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:  mu_run_test(test_dwarf4_multidir_comp_units);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f674aecd2038a29e1c55a8e7dfe8917503bd3861",
      "candidate_info": {
        "commit_hash": "f674aecd2038a29e1c55a8e7dfe8917503bd3861",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/f674aecd2038a29e1c55a8e7dfe8917503bd3861",
        "files": [
          "librz/analysis/dwarf_process.c",
          "librz/bin/dwarf.c",
          "librz/include/rz_bin_dwarf.h"
        ],
        "message": "fix #2971 - null deref dwarf_process.c",
        "before_after_code_files": [
          "librz/analysis/dwarf_process.c||librz/analysis/dwarf_process.c",
          "librz/bin/dwarf.c||librz/bin/dwarf.c",
          "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ],
          "candidate": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/analysis/dwarf_process.c||librz/analysis/dwarf_process.c": [
          "File: librz/analysis/dwarf_process.c -> librz/analysis/dwarf_process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:      const RzBinDwarfAttrValue *val = &child_die->attr_values[i];",
          "1240:      switch (val->attr_name) {",
          "1241:      case DW_AT_name:",
          "1243:        name = val->string.content;",
          "1244:       }",
          "1245:       break;",
          "1246:      case DW_AT_linkage_name:",
          "1247:      case DW_AT_MIPS_linkage_name:",
          "1249:       has_linkage_name = true;",
          "1250:       break;",
          "1251:      case DW_AT_type:",
          "",
          "[Removed Lines]",
          "1242:       if (!get_linkage_name || !has_linkage_name) {",
          "1248:       name = val->string.content;",
          "",
          "[Added Lines]",
          "1242:       if ((!get_linkage_name || !has_linkage_name) && val->kind == DW_AT_KIND_STRING) {",
          "1248:       if (val->kind == DW_AT_KIND_STRING) {",
          "1249:        name = val->string.content;",
          "1250:       }",
          "",
          "---------------"
        ],
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1215:   return -1;",
          "1216:  }",
          "1217:  if (attr_count) {",
          "1219:   if (!die->attr_values) {",
          "1220:    return -1;",
          "1221:   }",
          "",
          "[Removed Lines]",
          "1218:   die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
          "",
          "[Added Lines]",
          "1218:   die->attr_values = RZ_NEWS0(RzBinDwarfAttrValue, attr_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1725:  const char *comp_dir = NULL;",
          "1726:  ut64 line_info_offset = UT64_MAX;",
          "1727:  if (abbrev->count) {",
          "1729:    memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "1731:    buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
          "",
          "[Removed Lines]",
          "1728:   for (i = 0; i < abbrev->count - 1; i++) {",
          "",
          "[Added Lines]",
          "1728:   for (i = 0; i < abbrev->count - 1 && die->count < die->capacity; i++) {",
          "",
          "---------------"
        ],
        "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h": [
          "File: librz/include/rz_bin_dwarf.h -> librz/include/rz_bin_dwarf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "679: } RzBinDwarfAttrDef;",
          "681: typedef struct {",
          "683:  ut8 *data;",
          "684: } RzBinDwarfBlock;",
          "",
          "[Removed Lines]",
          "682:  ut64 length;",
          "",
          "[Added Lines]",
          "683:  ut64 length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f976bca3e99bc450d680808a05f1e0f73cd82f88",
      "candidate_info": {
        "commit_hash": "f976bca3e99bc450d680808a05f1e0f73cd82f88",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/f976bca3e99bc450d680808a05f1e0f73cd82f88",
        "files": [
          "librz/bin/dwarf.c"
        ],
        "message": "Remove global big_endian in dwarf.c",
        "before_after_code_files": [
          "librz/bin/dwarf.c||librz/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ],
          "candidate": [
            "librz/bin/dwarf.c||librz/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define STANDARD_OPERAND_COUNT_DWARF3 12",
          "24: #define RZ_BIN_DWARF_INFO             1",
          "33: #define READ8(buf) \\",
          "36: #define READ16(buf) \\",
          "38:  (buf) += sizeof(ut16)",
          "39: #define READ32(buf) \\",
          "41:  (buf) += sizeof(ut32)",
          "42: #define READ64(buf) \\",
          "44:  (buf) += sizeof(ut64)",
          "46: static const char *dwarf_tag_name_encodings[] = {",
          "",
          "[Removed Lines]",
          "27: static bool big_end = false;",
          "30: #define READ(buf, type) \\",
          "31:  (((buf) + sizeof(type) < buf_end) ? *((type *)(buf)) : 0); \\",
          "32:  (buf) += sizeof(type)",
          "34:  (((buf) + sizeof(ut8) < buf_end) ? ((ut8 *)buf)[0] : 0); \\",
          "35:  (buf) += sizeof(ut8)",
          "37:  (((buf) + sizeof(ut16) < buf_end) ? rz_read_ble16(buf, big_end) : 0); \\",
          "40:  (((buf) + sizeof(ut32) < buf_end) ? rz_read_ble32(buf, big_end) : 0); \\",
          "43:  (((buf) + sizeof(ut64) < buf_end) ? rz_read_ble64(buf, big_end) : 0); \\",
          "",
          "[Added Lines]",
          "27:  (((buf) + 1 < buf_end) ? *((ut8 *)(buf)) : 0); \\",
          "28:  (buf)++",
          "30:  (((buf) + sizeof(ut16) < buf_end) ? rz_read_ble16(buf, big_endian) : 0); \\",
          "33:  (((buf) + sizeof(ut32) < buf_end) ? rz_read_ble32(buf, big_endian) : 0); \\",
          "36:  (((buf) + sizeof(ut64) < buf_end) ? rz_read_ble64(buf, big_endian) : 0); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:  ut64 result;",
          "424:  if (is_64bit) {",
          "425:   result = READ64(*buf);",
          "",
          "[Removed Lines]",
          "422: static inline ut64 dwarf_read_offset(bool is_64bit, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "[Added Lines]",
          "415: static inline ut64 dwarf_read_offset(bool is_64bit, bool big_endian, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:  return result;",
          "430: }",
          "433:  ut64 result;",
          "434:  switch (size) {",
          "435:  case 2:",
          "",
          "[Removed Lines]",
          "432: static inline ut64 dwarf_read_address(size_t size, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "[Added Lines]",
          "425: static inline ut64 dwarf_read_address(size_t size, bool big_endian, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "596: static const ut8 *parse_line_header(",
          "597:  RzBinFile *bf, const ut8 *buf, const ut8 *buf_end,",
          "600:  rz_return_val_if_fail(hdr && bf && buf, NULL);",
          "",
          "[Removed Lines]",
          "598:  RzBinDwarfLineHeader *hdr, int mode, PrintfCallback print) {",
          "",
          "[Added Lines]",
          "591:  RzBinDwarfLineHeader *hdr, int mode, PrintfCallback print,",
          "592:  bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "614:   hdr->segment_selector_size = READ8(buf);",
          "615:  }",
          "619:  const ut8 *tmp_buf = buf; // So I can skip parsing DWARF 5 headers for now",
          "",
          "[Removed Lines]",
          "617:  hdr->header_length = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "611:  hdr->header_length = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "626:   hdr->max_ops_per_inst = READ8(buf);",
          "627:  }",
          "628:  hdr->default_is_stmt = READ8(buf);",
          "630:  hdr->line_range = READ8(buf);",
          "631:  hdr->opcode_base = READ8(buf);",
          "",
          "[Removed Lines]",
          "629:  hdr->line_base = READ(buf, int8_t); // signed",
          "",
          "[Added Lines]",
          "623:  hdr->line_base = (st8)READ8(buf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:    if (buf + 2 > buf_end) {",
          "657:     break;",
          "658:    }",
          "660:    if (mode == RZ_MODE_PRINT) {",
          "661:     print(\"  Opcode %zu has %d arg\\n\", i, hdr->std_opcode_lengths[i]);",
          "662:    }",
          "",
          "[Removed Lines]",
          "659:    hdr->std_opcode_lengths[i] = READ(buf, ut8);",
          "",
          "[Added Lines]",
          "653:    hdr->std_opcode_lengths[i] = READ8(buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "729: static const ut8 *parse_ext_opcode(const RzBin *bin, const ut8 *obuf,",
          "730:  size_t len, const RzBinDwarfLineHeader *hdr,",
          "733:  rz_return_val_if_fail(bin && bin->cur && obuf && hdr && regs, NULL);",
          "",
          "[Removed Lines]",
          "731:  RzBinDwarfSMRegisters *regs, int mode) {",
          "",
          "[Added Lines]",
          "725:  RzBinDwarfSMRegisters *regs, int mode, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "869: static const ut8 *parse_std_opcode(",
          "870:  const RzBin *bin, const ut8 *obuf, size_t len,",
          "871:  const RzBinDwarfLineHeader *hdr, RzBinDwarfSMRegisters *regs,",
          "874:  rz_return_val_if_fail(bin && bin->cur && obuf && hdr && regs, NULL);",
          "",
          "[Removed Lines]",
          "872:  ut8 opcode, int mode) {",
          "",
          "[Added Lines]",
          "866:  ut8 opcode, int mode, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1008: static size_t parse_opcodes(const RzBin *bin, const ut8 *obuf,",
          "1009:  size_t len, const RzBinDwarfLineHeader *hdr,",
          "1011:  const ut8 *buf, *buf_end;",
          "1012:  ut8 opcode, ext_opcode;",
          "",
          "[Removed Lines]",
          "1010:  RzBinDwarfSMRegisters *regs, int mode) {",
          "",
          "[Added Lines]",
          "1004:  RzBinDwarfSMRegisters *regs, int mode, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1022:   len--;",
          "1023:   if (!opcode) {",
          "1024:    ext_opcode = *buf;",
          "1026:    if (!buf || ext_opcode == DW_LNE_end_sequence) {",
          "1027:     set_regs_default(hdr, regs); // end_sequence should reset regs to default",
          "1028:     break;",
          "",
          "[Removed Lines]",
          "1025:    buf = parse_ext_opcode(bin, buf, len, hdr, regs, mode);",
          "",
          "[Added Lines]",
          "1019:    buf = parse_ext_opcode(bin, buf, len, hdr, regs, mode, big_endian);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1030:   } else if (opcode >= hdr->opcode_base) {",
          "1031:    buf = parse_spec_opcode(bin, buf, len, hdr, regs, opcode, mode);",
          "1032:   } else {",
          "1034:   }",
          "1035:   len = (size_t)(buf_end - buf);",
          "1036:  }",
          "",
          "[Removed Lines]",
          "1033:    buf = parse_std_opcode(bin, buf, len, hdr, regs, opcode, mode);",
          "",
          "[Added Lines]",
          "1027:    buf = parse_std_opcode(bin, buf, len, hdr, regs, opcode, mode, big_endian);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1044: }",
          "1046: static int parse_line_raw(RzBinFile *binfile, const ut8 *obuf,",
          "1048:  rz_return_val_if_fail(binfile && obuf, false);",
          "1049:  PrintfCallback print = binfile->rbin->cb_printf;",
          "",
          "[Removed Lines]",
          "1047:  ut64 len, int mode) {",
          "",
          "[Added Lines]",
          "1041:  ut64 len, int mode, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1067:   buf_size = buf_end - buf;",
          "1069:   tmpbuf = buf;",
          "1071:   if (!buf) {",
          "1072:    line_header_fini(&hdr);",
          "1073:    return false;",
          "",
          "[Removed Lines]",
          "1070:   buf = parse_line_header(binfile, buf, buf_end, &hdr, mode, print);",
          "",
          "[Added Lines]",
          "1064:   buf = parse_line_header(binfile, buf, buf_end, &hdr, mode, print, big_endian);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1104:   do {",
          "1107:    bytes_read += tmp_read;",
          "1108:    buf += tmp_read; // Move in the buffer forward",
          "1109:   } while (bytes_read < buf_size && tmp_read != 0); // if nothing is read -> error, exit",
          "",
          "[Removed Lines]",
          "1106:    tmp_read = parse_opcodes(binfile->rbin, buf, buf_end - buf, &hdr, &regs, mode);",
          "",
          "[Added Lines]",
          "1100:    tmp_read = parse_opcodes(binfile->rbin, buf, buf_end - buf, &hdr, &regs, mode, big_endian);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1128:  if (idx + sizeof(ut64) >= len) { \\",
          "1129:   return false; \\",
          "1130:  } \\",
          "1132:  idx += sizeof(ut64); \\",
          "1133:  buf += sizeof(ut64)",
          "1134: #define READ_BUF32(x) \\",
          "1135:  if (idx + sizeof(ut32) >= len) { \\",
          "1136:   return false; \\",
          "1137:  } \\",
          "1139:  idx += sizeof(ut32); \\",
          "1140:  buf += sizeof(ut32)",
          "1141: #define READ_BUF16(x) \\",
          "1142:  if (idx + sizeof(ut16) >= len) { \\",
          "1143:   return false; \\",
          "1144:  } \\",
          "1146:  idx += sizeof(ut16); \\",
          "1147:  buf += sizeof(ut16)",
          "1150:  ut32 length, offset;",
          "1151:  ut16 version;",
          "1152:  ut32 debug_info_offset;",
          "",
          "[Removed Lines]",
          "1131:  (x) = rz_read_ble64(buf, big_end); \\",
          "1138:  (x) = rz_read_ble32(buf, big_end); \\",
          "1145:  (x) = rz_read_ble16(buf, big_end); \\",
          "1149: static int parse_aranges_raw(const ut8 *obuf, int len, int mode, PrintfCallback print) {",
          "",
          "[Added Lines]",
          "1125:  (x) = rz_read_ble64(buf, big_endian); \\",
          "1132:  (x) = rz_read_ble32(buf, big_endian); \\",
          "1139:  (x) = rz_read_ble16(buf, big_endian); \\",
          "1143: static int parse_aranges_raw(const ut8 *obuf, int len, int mode, PrintfCallback print, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1434:  if (block->data) {",
          "1435:   size_t j = 0;",
          "1436:   for (j = 0; j < block->length; j++) {",
          "1438:   }",
          "1439:  }",
          "1440:  return buf;",
          "",
          "[Removed Lines]",
          "1437:    block->data[j] = READ(buf, ut8);",
          "",
          "[Added Lines]",
          "1431:    block->data[j] = READ8(buf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1458: static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len,",
          "1459:  RzBinDwarfAttrDef *def, RzBinDwarfAttrValue *value,",
          "1460:  const RzBinDwarfCompUnitHdr *hdr,",
          "1463:  const ut8 *buf = obuf;",
          "1464:  const ut8 *buf_end = obuf + obuf_len;",
          "",
          "[Removed Lines]",
          "1461:  const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "1455:  const ut8 *debug_str, size_t debug_str_len,",
          "1456:  bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1542:     return NULL;",
          "1543:    }",
          "1544:    for (j = 0; j < value->block.length; j++) {",
          "1546:    }",
          "1547:   }",
          "1548:   break;",
          "",
          "[Removed Lines]",
          "1545:     value->block.data[j] = READ(buf, ut8);",
          "",
          "[Added Lines]",
          "1540:     value->block.data[j] = READ8(buf);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1561:   break;",
          "1562:  case DW_FORM_flag:",
          "1563:   value->kind = DW_AT_KIND_FLAG;",
          "1565:   break;",
          "1567:  case DW_FORM_strp:",
          "1568:   value->kind = DW_AT_KIND_STRING;",
          "1570:   if (debug_str && value->string.offset < debug_str_len) {",
          "1571:    value->string.content =",
          "1572:     strdup((const char *)(debug_str + value->string.offset));",
          "",
          "[Removed Lines]",
          "1564:   value->flag = READ(buf, ut8);",
          "1569:   value->string.offset = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1559:   value->flag = READ8(buf);",
          "1564:   value->string.offset = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1578:  case DW_FORM_ref_addr:",
          "1579:   value->kind = DW_AT_KIND_REFERENCE;",
          "1581:   break;",
          "",
          "[Removed Lines]",
          "1580:   value->reference = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1575:   value->reference = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1607:  case DW_FORM_sec_offset:",
          "1608:   value->kind = DW_AT_KIND_REFERENCE;",
          "1610:   break;",
          "1611:  case DW_FORM_exprloc:",
          "1612:   value->kind = DW_AT_KIND_BLOCK;",
          "",
          "[Removed Lines]",
          "1609:   value->reference = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1604:   value->reference = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1683:  case DW_FORM_line_ptr: // offset in a section .debug_line_str",
          "1684:  case DW_FORM_strp_sup: // offset in a section .debug_line_str",
          "1685:   value->kind = DW_AT_KIND_STRING;",
          "",
          "[Removed Lines]",
          "1686:   value->string.offset = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1681:   value->string.offset = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1701:  case DW_FORM_loclistx:",
          "1702:   value->kind = DW_AT_KIND_LOCLISTPTR;",
          "1704:   break;",
          "1706:  case DW_FORM_rnglistx:",
          "",
          "[Removed Lines]",
          "1703:   value->reference = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1698:   value->reference = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1731: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RzBinDwarfAbbrevDecl *abbrev,",
          "1733:  size_t i;",
          "1734:  for (i = 0; i < abbrev->count - 1; i++) {",
          "1735:   memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "1737:   buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
          "1740:   RzBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "",
          "[Removed Lines]",
          "1732:  RzBinDwarfCompUnitHdr *hdr, RzBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {",
          "1738:    &die->attr_values[i], hdr, debug_str, debug_str_len);",
          "",
          "[Added Lines]",
          "1727:  RzBinDwarfCompUnitHdr *hdr, RzBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb, bool big_endian) {",
          "1733:    &die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1771: static const ut8 *parse_comp_unit(RzBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start,",
          "1772:  RzBinDwarfCompUnit *unit, const RzBinDwarfDebugAbbrev *abbrevs,",
          "1775:  const ut8 *buf = buf_start;",
          "1776:  const ut8 *buf_end = buf_start + unit->hdr.length - unit->hdr.header_size;",
          "",
          "[Removed Lines]",
          "1773:  size_t first_abbr_idx, const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "1768:  size_t first_abbr_idx, const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1814:   die->tag = abbrev->tag;",
          "1815:   die->has_children = abbrev->has_children;",
          "1818:   if (!buf) {",
          "1819:    return NULL;",
          "1820:   }",
          "",
          "[Removed Lines]",
          "1817:   buf = parse_die(buf, buf_end, abbrev, &unit->hdr, die, debug_str, debug_str_len, sdb);",
          "",
          "[Added Lines]",
          "1812:   buf = parse_die(buf, buf_end, abbrev, &unit->hdr, die, debug_str, debug_str_len, sdb, big_endian);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1838:  hdr->length = READ32(buf);",
          "",
          "[Removed Lines]",
          "1835: static const ut8 *info_comp_unit_read_hdr(const ut8 *buf, const ut8 *buf_end, RzBinDwarfCompUnitHdr *hdr) {",
          "",
          "[Added Lines]",
          "1830: static const ut8 *info_comp_unit_read_hdr(const ut8 *buf, const ut8 *buf_end, RzBinDwarfCompUnitHdr *hdr, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1845:  if (hdr->version == 5) {",
          "1846:   hdr->unit_type = READ8(buf);",
          "1847:   hdr->address_size = READ8(buf);",
          "1850:   if (hdr->unit_type == DW_UT_skeleton || hdr->unit_type == DW_UT_split_compile) {",
          "1851:    hdr->dwo_id = READ8(buf);",
          "1852:   } else if (hdr->unit_type == DW_UT_type || hdr->unit_type == DW_UT_split_type) {",
          "1853:    hdr->type_sig = READ64(buf);",
          "1855:   }",
          "1856:  } else {",
          "1858:   hdr->address_size = READ8(buf);",
          "1859:  }",
          "1860:  hdr->header_size = buf - tmp; // header size excluding length field",
          "",
          "[Removed Lines]",
          "1848:   hdr->abbrev_offset = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "1854:    hdr->type_offset = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "1857:   hdr->abbrev_offset = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1843:   hdr->abbrev_offset = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "1849:    hdr->type_offset = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "1852:   hdr->abbrev_offset = dwarf_read_offset(hdr->is_64bit, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1893: static RzBinDwarfDebugInfo *parse_info_raw(Sdb *sdb, RzBinDwarfDebugAbbrev *da,",
          "1894:  const ut8 *obuf, size_t len,",
          "1897:  rz_return_val_if_fail(da && sdb && obuf, false);",
          "",
          "[Removed Lines]",
          "1895:  const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "1890:  const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1927:   unit->hdr.unit_offset = buf - obuf;",
          "1931:   if (unit->hdr.length > len) {",
          "1932:    goto cleanup;",
          "",
          "[Removed Lines]",
          "1929:   buf = info_comp_unit_read_hdr(buf, buf_end, &unit->hdr);",
          "",
          "[Added Lines]",
          "1924:   buf = info_comp_unit_read_hdr(buf, buf_end, &unit->hdr, big_endian);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1949:   size_t first_abbr_idx = abbrev_start - da->decls;",
          "1953:   if (!buf) {",
          "1954:    goto cleanup;",
          "",
          "[Removed Lines]",
          "1951:   buf = parse_comp_unit(info, sdb, buf, unit, da, first_abbr_idx, debug_str, debug_str_len);",
          "",
          "[Added Lines]",
          "1946:   buf = parse_comp_unit(info, sdb, buf, unit, da, first_abbr_idx, debug_str, debug_str_len, big_endian);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1999:   if (buf >= buf_end) {",
          "2000:    break;",
          "2001:   }",
          "2003:   tmpdecl->has_children = has_children;",
          "2004:   do {",
          "2005:    if (tmpdecl->count == tmpdecl->capacity) {",
          "",
          "[Removed Lines]",
          "2002:   has_children = READ(buf, ut8);",
          "",
          "[Added Lines]",
          "1997:   has_children = READ8(buf);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2100:  if (!rz_buf_read_at(binfile->buf, section->paddr, buf, len)) {",
          "2101:   goto cave_buf;",
          "2102:  }",
          "2106:  if (!info) {",
          "2107:   goto cave_buf;",
          "2108:  }",
          "",
          "[Removed Lines]",
          "2104:  big_end = binfile->o && binfile->o->info && binfile->o->info->big_endian;",
          "2105:  info = parse_info_raw(binfile->sdb_addrinfo, da, buf, len, debug_str_buf, debug_str_len);",
          "",
          "[Added Lines]",
          "2098:  info = parse_info_raw(binfile->sdb_addrinfo, da, buf, len, debug_str_buf, debug_str_len,",
          "2099:   binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2169:    free(buf);",
          "2170:    return NULL;",
          "2171:   }",
          "2177:   SdbListIter *iter;",
          "2178:   SdbKv *kv;",
          "",
          "[Removed Lines]",
          "2173:   big_end = binfile->o && binfile->o->info && binfile->o->info->big_endian;",
          "2175:   parse_line_raw(binfile, buf, len, mode);",
          "",
          "[Added Lines]",
          "2167:   parse_line_raw(binfile, buf, len, mode, binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2227:   free(buf);",
          "2228:   return NULL;",
          "2229:  }",
          "2235:  free(buf);",
          "2236:  return NULL;",
          "",
          "[Removed Lines]",
          "2231:  big_end = binfile->o && binfile->o->info && binfile->o->info->big_endian;",
          "2233:  parse_aranges_raw(buf, len, mode, binfile->rbin->cb_printf);",
          "",
          "[Added Lines]",
          "2223:  parse_aranges_raw(buf, len, mode, binfile->rbin->cb_printf,",
          "2224:   binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2291:  free(loc_list);",
          "2292: }",
          "2296:  const ut8 *const buf_start = buf;",
          "2297:  const ut8 *buf_end = buf + len;",
          "",
          "[Removed Lines]",
          "2294: static HtUP *parse_loc_raw(HtUP /*<offset, List *<LocListEntry>*/ *loc_table, const ut8 *buf, size_t len, size_t addr_size) {",
          "",
          "[Added Lines]",
          "2285: static HtUP *parse_loc_raw(HtUP /*<offset, List *<LocListEntry>*/ *loc_table, const ut8 *buf, size_t len, size_t addr_size,",
          "2286:  bool big_endian) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2304:  RzBinDwarfLocList *loc_list = NULL;",
          "2305:  RzBinDwarfLocRange *range = NULL;",
          "2306:  while (buf && buf < buf_end) {",
          "2311:    if (loc_list) {",
          "",
          "[Removed Lines]",
          "2307:   ut64 start_addr = dwarf_read_address(addr_size, &buf, buf_end);",
          "2308:   ut64 end_addr = dwarf_read_address(addr_size, &buf, buf_end);",
          "",
          "[Added Lines]",
          "2299:   ut64 start_addr = dwarf_read_address(addr_size, big_endian, &buf, buf_end);",
          "2300:   ut64 end_addr = dwarf_read_address(addr_size, big_endian, &buf, buf_end);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2358:  if (!buf) {",
          "2359:   return NULL;",
          "2360:  }",
          "2363:  HtUP /*<offset, RzBinDwarfLocList*/ *loc_table = ht_up_new0();",
          "2364:  if (!loc_table) {",
          "2365:   free(buf);",
          "2366:   return NULL;",
          "2367:  }",
          "2369:  free(buf);",
          "2370:  return loc_table;",
          "2371: }",
          "",
          "[Removed Lines]",
          "2362:  big_end = binfile->o && binfile->o->info && binfile->o->info->big_endian;",
          "2368:  loc_table = parse_loc_raw(loc_table, buf, len, addr_size);",
          "",
          "[Added Lines]",
          "2358:  loc_table = parse_loc_raw(loc_table, buf, len, addr_size, binfile->o && binfile->o->info && binfile->o->info->big_endian);",
          "",
          "---------------"
        ]
      }
    }
  ]
}