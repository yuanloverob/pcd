{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "929a9406785cc0a5cdea6a4943e89bd84474efa1",
      "candidate_info": {
        "commit_hash": "929a9406785cc0a5cdea6a4943e89bd84474efa1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/929a9406785cc0a5cdea6a4943e89bd84474efa1",
        "files": [
          "ext/misc/compress.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "The compress() function should not be deterministic since the same input can have multiple possible compressed outputs.  The uncompress() function, on the other hand, is deterministic.\n\nFossilOrigin-Name: 84f314902c48336849081c7e9fe2a52caf171b8215a1c6e80cded0700c447eb1",
        "before_after_code_files": [
          "ext/misc/compress.c||ext/misc/compress.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/compress.c||ext/misc/compress.c": [
          "File: ext/misc/compress.c -> ext/misc/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   SQLITE_EXTENSION_INIT2(pApi);",
          "122:   rc = sqlite3_create_function(db, \"compress\", 1,",
          "124:                     0, compressFunc, 0, 0);",
          "125:   if( rc==SQLITE_OK ){",
          "126:     rc = sqlite3_create_function(db, \"uncompress\", 1,",
          "",
          "[Removed Lines]",
          "123:                     SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,",
          "",
          "[Added Lines]",
          "123:                     SQLITE_UTF8 | SQLITE_INNOCUOUS,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7584e4b649d57767aac3906da6b06549d5b772aaa69f469c623ae5da834d54d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "134599e5572c993f84526bb86d08e275a5fb2468",
      "candidate_info": {
        "commit_hash": "134599e5572c993f84526bb86d08e275a5fb2468",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/134599e5572c993f84526bb86d08e275a5fb2468",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/util.c",
          "src/vdbe.c",
          "test/corruptL.test",
          "test/dbfuzz001.test",
          "test/fts3corrupt4.test",
          "test/pager1.test",
          "test/tester.tcl"
        ],
        "message": "Detect out-of-bounds rootpage values in the schema.\n\nFossilOrigin-Name: e4a92688fca31335bf15933dec10ecba04cf340ee2f726fd36d46d4c76660eee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "test/corruptL.test||test/corruptL.test",
          "test/dbfuzz001.test||test/dbfuzz001.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/pager1.test||test/pager1.test",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c5f3c6cacf84a36d0347790d98d82d1f584cd1537a13a2736348405c4d20367",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: ){",
          "890:   sqlite3 *db = pParse->db;",
          "893:     return SQLITE_OK;",
          "894:   }",
          "",
          "[Removed Lines]",
          "891:   if( sqlite3WritableSchema(db) || db->init.imposterTable ){",
          "",
          "[Added Lines]",
          "891:   if( sqlite3WritableSchema(db)",
          "892:    || db->init.imposterTable",
          "893:    || !sqlite3Config.bExtraSchemaChecks",
          "894:   ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "898:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "899:     ){",
          "904:     }",
          "905:   }else{",
          "906:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "",
          "[Removed Lines]",
          "900:       if( sqlite3Config.bExtraSchemaChecks ){",
          "902:         return SQLITE_ERROR;",
          "903:       }",
          "",
          "[Added Lines]",
          "904:       return SQLITE_ERROR;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     assert( db->init.busy );",
          "117:     db->init.iDb = iDb;",
          "119:     db->init.orphanTrigger = 0;",
          "120:     db->init.azInit = argv;",
          "121:     pStmt = 0;",
          "",
          "[Removed Lines]",
          "118:     sqlite3GetUInt32(argv[3], &db->init.newTnum);",
          "",
          "[Added Lines]",
          "118:     if( sqlite3GetUInt32(argv[3], &db->init.newTnum)==0",
          "119:      || (db->init.newTnum>pData->mxPage && pData->mxPage>0)",
          "120:     ){",
          "121:       if( sqlite3Config.bExtraSchemaChecks ){",
          "122:         corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "123:       }",
          "124:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     Index *pIndex;",
          "150:     pIndex = sqlite3FindIndex(db, argv[1], db->aDb[iDb].zDbSName);",
          "153:      || pIndex->tnum<2",
          "154:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "155:     ){",
          "157:     }",
          "158:   }",
          "159:   return 0;",
          "",
          "[Removed Lines]",
          "151:     if( pIndex==0",
          "152:      || sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "156:       corruptSchema(pData, argv[1], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "[Added Lines]",
          "157:     if( pIndex==0 ){",
          "158:       corruptSchema(pData, argv[1], \"orphan index\");",
          "159:     }else",
          "160:     if( sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "162:      || (pIndex->tnum>pData->mxPage && pData->mxPage!=0)",
          "165:       if( sqlite3Config.bExtraSchemaChecks ){",
          "166:         corruptSchema(pData, argv[1], \"invalid roopage\");",
          "167:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:   initData.pzErrMsg = pzErrMsg;",
          "208:   initData.mInitFlags = mFlags;",
          "209:   initData.nInitRow = 0;",
          "210:   sqlite3InitCallback(&initData, 5, (char **)azArg, 0);",
          "211:   db->mDbFlags &= mask;",
          "212:   if( initData.rc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   initData.mxPage = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:   assert( db->init.busy );",
          "332:   {",
          "333:     char *zSql;",
          "334:     zSql = sqlite3MPrintf(db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   initData.mxPage = sqlite3BtreeLastPage(pDb->pBt);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6437:   return TCL_OK;",
          "6438: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448: static int SQLITE_TCLAPI extra_schema_checks(",
          "6453: ){",
          "6454:   int i = 0;",
          "6455:   if( objc!=2 ){",
          "6456:     Tcl_WrongNumArgs(interp, 1, objv, \"BOOLEAN\");",
          "6457:     return TCL_ERROR;",
          "6458:   }",
          "6459:   if( Tcl_GetBooleanFromObj(interp,objv[1],&i) ) return TCL_ERROR;",
          "6460:   sqlite3_test_control(SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS, i);",
          "6461:   return TCL_OK;",
          "6462: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8003:      { \"restore_prng_state\",            restore_prng_state, 0 },",
          "8004:      { \"reset_prng_state\",              reset_prng_state,   0 },",
          "8005:      { \"prng_seed\",                     prng_seed,          0 },",
          "8006:      { \"database_never_corrupt\",        database_never_corrupt, 0},",
          "8007:      { \"database_may_be_corrupt\",       database_may_be_corrupt, 0},",
          "8008:      { \"optimization_control\",          optimization_control,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8030:      { \"extra_schema_checks\",           extra_schema_checks,    0},",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:   int i;",
          "875:   for(i=0; sqlite3Isdigit(z[i]); i++){",
          "876:     v = v*10 + z[i] - '0';",
          "878:   }",
          "881:   return 1;",
          "882: }",
          "",
          "[Removed Lines]",
          "877:     if( v>4294967296LL ) return 0;",
          "879:   if( i==0 || z[i]!=0 ) return 0;",
          "",
          "[Added Lines]",
          "877:     if( v>4294967296LL ){ *pI = 0; return 0; }",
          "879:   if( i==0 || z[i]!=0 ){ *pI = 0; return 0; }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6122:     initData.iDb = iDb;",
          "6123:     initData.pzErrMsg = &p->zErrMsg;",
          "6124:     initData.mInitFlags = 0;",
          "6125:     zSql = sqlite3MPrintf(db,",
          "6126:        \"SELECT*FROM\\\"%w\\\".%s WHERE %s ORDER BY rowid\",",
          "6127:        db->aDb[iDb].zDbSName, zSchema, pOp->p4.z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6125:     initData.mxPage = sqlite3BtreeLastPage(db->aDb[iDb].pBt);",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174: | end clusterfuzz-testcase-minimized-sqlite3_dbfuzz2_fuzzer-4806406219825152",
          "1175: }]} {}",
          "1177: do_catchsql_test 14.1 {",
          "1178:   PRAGMA integrity_check;",
          "1179: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1181: do_catchsql_test 14.2 {",
          "1182:   ALTER TABLE t1 RENAME TO alkjalkjdfiiiwuer987lkjwer82mx97sf98788s9789s;",
          "1183: } {1 {database disk image is malformed}}",
          "1185: #-------------------------------------------------------------------------",
          "1186: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185: extra_schema_checks 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1263: | end crash-3afa1ca9e9c1bd.db",
          "1264: }]} {}",
          "1266: do_execsql_test 15.1 {",
          "1267:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1268: } {}",
          "1270: #-------------------------------------------------------------------------",
          "1271: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268: extra_schema_checks 0",
          "1272: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:   }]",
          "362: } {}",
          "364: do_catchsql_test dbfuzz001-320 {",
          "365:   PRAGMA integrity_check;",
          "366: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: do_catchsql_test dbfuzz001-330 {",
          "369:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "370: } {1 {database disk image is malformed}}",
          "372: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: sqlite3_fts3_may_be_corrupt 1",
          "29: database_may_be_corrupt",
          "31: do_execsql_test 1.0 {",
          "32:   BEGIN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6281: } {1 {database disk image is malformed}}",
          "6283: set sqlite_fts3_enable_parentheses $saved",
          "6285: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6285: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/pager1.test||test/pager1.test": [
          "File: test/pager1.test -> test/pager1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1930:   catchsql { SELECT length(x||'') FROM t2 } db2",
          "1931: } {1 {database disk image is malformed}}",
          "1932: db2 close",
          "1933: do_test pager1-18.5 {",
          "1934:   sqlite3 db \"\"",
          "1935:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933: extra_schema_checks 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1944:   catchsql { SELECT * FROM x1 }",
          "1945: } {1 {database disk image is malformed}}",
          "1946: db close",
          "1948: do_test pager1-18.6 {",
          "1949:   faultsim_delete_and_reopen",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1948: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2479: # this setting by invoking \"database_can_be_corrupt\"",
          "2480: #",
          "2481: database_never_corrupt",
          "2483: source $testdir/thread_common.tcl",
          "2484: source $testdir/malloc_common.tcl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2482: extra_schema_checks 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af232366605cb2a6ef192c58daf3a99d2ecb4ff2",
      "candidate_info": {
        "commit_hash": "af232366605cb2a6ef192c58daf3a99d2ecb4ff2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af232366605cb2a6ef192c58daf3a99d2ecb4ff2",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/dbstat.c",
          "src/expr.c",
          "test/corruptL.test",
          "test/fts3corrupt4.test",
          "test/fuzzdata8.db",
          "test/stat.test",
          "test/trigger1.test",
          "test/zipfile.test"
        ],
        "message": "Merge the latest fixes from trunk.\n\nFossilOrigin-Name: 26ef709a47294c512a70aecd37d29caecec2af261977d9fb2c4d78d09b12f77a",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/dbstat.c||src/dbstat.c",
          "src/expr.c||src/expr.c",
          "test/corruptL.test||test/corruptL.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/stat.test||test/stat.test",
          "test/trigger1.test||test/trigger1.test",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:          \"  GROUP BY level HAVING cnt>=?\"",
          "",
          "[Removed Lines]",
          "338:          \"  ORDER BY (level %% 1024) ASC LIMIT 1\",",
          "",
          "[Added Lines]",
          "338:          \"  ORDER BY (level %% 1024) ASC, 2 DESC LIMIT 1\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4932:       rc = fts3IncrmergeHintPop(&hint, &iHintAbsLevel, &nHintSeg);",
          "4933:       if( nSeg<0 || (iAbsLevel % nMod) >= (iHintAbsLevel % nMod) ){",
          "4934:         iAbsLevel = iHintAbsLevel;",
          "4936:         bUseHint = 1;",
          "4937:         bDirtyHint = 1;",
          "4938:       }else{",
          "",
          "[Removed Lines]",
          "4935:         nSeg = nHintSeg;",
          "",
          "[Added Lines]",
          "4941:         nSeg = MIN(MAX(nMin,nSeg), nHintSeg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4948:     if( nSeg<0 ) break;",
          "",
          "[Added Lines]",
          "4954:     if( nSeg<=0 ) break;",
          "",
          "---------------"
        ],
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:   int rc = SQLITE_OK;",
          "1446:   assert( pTab->pWriteFd==0 );",
          "",
          "[Removed Lines]",
          "1447:   if( pTab->zFile==0 ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1447:   if( pTab->zFile==0 || pTab->zFile[0]==0 ){",
          "1448:     pTab->base.zErrMsg = sqlite3_mprintf(\"zipfile: missing filename\");",
          "1449:     return SQLITE_ERROR;",
          "1450:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ca906d24a2e88eddb2fd067783512b66cfc49dce1596d816a1c38a09d128218",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1449:         int sz2 = 0;",
          "1450:         int sz = get2byte(&data[iFree+2]);",
          "1451:         int top = get2byte(&data[hdr+5]);",
          "1453:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1454:         }",
          "1455:         if( iFree2 ){",
          "",
          "[Removed Lines]",
          "1452:         if( top>=iFree ){",
          "",
          "[Added Lines]",
          "1452:         if( NEVER(top>=iFree) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1458:           if( iFree2+sz2 > usableSize ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1459:           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));",
          "1460:           sz += sz2;",
          "1462:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1463:         }",
          "",
          "[Removed Lines]",
          "1461:         }else if( iFree+sz>usableSize ){",
          "",
          "[Added Lines]",
          "1461:         }else if( NEVER(iFree+sz>usableSize) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1650:   if( (data[hdr+2] || data[hdr+1]) && gap+2<=top ){",
          "1651:     u8 *pSpace = pageFindSlot(pPage, nByte, &rc);",
          "1652:     if( pSpace ){",
          "1653:       assert( pSpace+nByte<=data+pPage->pBt->usableSize );",
          "1655:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1656:       }else{",
          "1657:         return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1654:       if( (*pIdx = (int)(pSpace-data))<=gap ){",
          "",
          "[Added Lines]",
          "1653:       int g2;",
          "1656:       if( NEVER(g2<=gap) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1729:   }else{",
          "1730:     while( (iFreeBlk = get2byte(&data[iPtr]))<iStart ){",
          "1731:       if( iFreeBlk<iPtr+4 ){",
          "1733:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1734:       }",
          "1735:       iPtr = iFreeBlk;",
          "1736:     }",
          "1738:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1739:     }",
          "1740:     assert( iFreeBlk>iPtr || iFreeBlk==0 );",
          "",
          "[Removed Lines]",
          "1732:         if( iFreeBlk==0 ) break;",
          "1737:     if( iFreeBlk>pPage->pBt->usableSize-4 ){",
          "",
          "[Added Lines]",
          "1734:         if( ALWAYS(iFreeBlk==0) ) break;",
          "1739:     if( NEVER(iFreeBlk>pPage->pBt->usableSize-4) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1749:       nFrag = iFreeBlk - iEnd;",
          "1750:       if( iEnd>iFreeBlk ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1751:       iEnd = iFreeBlk + get2byte(&data[iFreeBlk+2]);",
          "1753:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1754:       }",
          "1755:       iSize = iEnd - iStart;",
          "",
          "[Removed Lines]",
          "1752:       if( iEnd > pPage->pBt->usableSize ){",
          "",
          "[Added Lines]",
          "1754:       if( NEVER(iEnd > pPage->pBt->usableSize) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1781:     put2byte(&data[hdr+1], iFreeBlk);",
          "1782:     put2byte(&data[hdr+5], iEnd);",
          "1783:   }else{",
          "",
          "[Removed Lines]",
          "1780:     if( iStart<x || iPtr!=hdr+1 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Added Lines]",
          "1782:     if( iStart<x ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1783:     if( NEVER(iPtr!=hdr+1) ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1898:   if( pc>0 ){",
          "1899:     u32 next, size;",
          "",
          "[Removed Lines]",
          "1900:     if( pc<iCellFirst ){",
          "",
          "[Added Lines]",
          "1903:     if( pc<top ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6937:   assert( i<iEnd );",
          "6938:   j = get2byte(&aData[hdr+5]);",
          "6940:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6942:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6939:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "[Added Lines]",
          "6942:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6962:     if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;",
          "6963:     memcpy(pData, pCell, sz);",
          "6964:     assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6966:     i++;",
          "6967:     if( i>=iEnd ) break;",
          "6968:     if( pCArray->ixNx[k]<=i ){",
          "",
          "[Removed Lines]",
          "6965:     testcase( sz!=pPg->xCellSize(pPg,pCell) );",
          "",
          "[Added Lines]",
          "6968:     testcase( sz!=pPg->xCellSize(pPg,pCell) )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7101:         }",
          "7102:         pFree = pCell;",
          "7103:         szFree = sz;",
          "7105:       }else{",
          "7106:         pFree = pCell;",
          "7107:         szFree += sz;",
          "",
          "[Removed Lines]",
          "7104:         if( pFree+sz>pEnd ) return 0;",
          "",
          "[Added Lines]",
          "7107:         if( NEVER(pFree+sz>pEnd) ) return 0;",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   }",
          "248:   if( iAgg>=0 ){",
          "249:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "251:     pIdxInfo->idxNum |= 0x04;",
          "252:   }",
          "253:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "[Removed Lines]",
          "250:     pIdxInfo->aConstraintUsage[iAgg].omit = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3209:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3210:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3211:       }",
          "3212:       if( ii<pList->nExpr-1 || destIfNull!=destIfFalse ){",
          "3213:         int op = rLhs!=r2 ? OP_Eq : OP_NotNull;",
          "3214:         sqlite3VdbeAddOp4(v, op, rLhs, labelOk, r2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3212:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3227:         VdbeCoverageIf(v, op==OP_IsNull);",
          "3228:         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);",
          "3229:       }",
          "3231:     }",
          "3232:     if( regCkNull ){",
          "3233:       sqlite3VdbeAddOp2(v, OP_IsNull, regCkNull, destIfNull); VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3230:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   SELECT CAST((SELECT b FROM t1 WHERE 16=c) AS int) FROM t1 WHERE 16=c;",
          "1111: } {1 {database disk image is malformed}}",
          "1113: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1113: #-------------------------------------------------------------------------",
          "1114: reset_db",
          "1115: do_test 13.0 {",
          "1116:   sqlite3 db {}",
          "1117:   db deserialize [decode_hexdb {",
          "1118: | size 8192 pagesize 4096 filename crash-81dd2952aef34f.db",
          "1119: | page 1 offset 0",
          "1120: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1121: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 02   .....@  ........",
          "1122: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................",
          "1123: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "1124: |     96: 00 00 00 00 0d 00 00 00 01 0f c4 00 0f c4 00 00   ................",
          "1125: |   4032: 00 00 00 00 3a 11 06 17 11 11 01 61 74 61 62 6c   ....:......atabl",
          "1126: |   4048: 65 74 31 74 31 02 43 52 45 41 54 45 20 54 41 42   et1t1.CREATE TAB",
          "1127: |   4064: 4c 45 20 74 31 28 61 20 49 4e 54 45 47 45 52 20   LE t1(a INTEGER",
          "1128: |   4080: 50 52 49 4d 41 52 59 20 4b 45 59 2c 62 2c 63 29   PRIMARY KEY,b,c)",
          "1129: | page 2 offset 4096",
          "1130: |      0: 0d 07 70 00 02 0f eb 00 0f fa 00 00 00 00 00 00   ..p.............",
          "1131: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 bf ff ff ff   ................",
          "1132: |   4080: ff ff ff ff ff 04 00 01 00 02 04 01 00 00 00 00   ................",
          "1133: | end crash-81dd2952aef34f.db",
          "1134: }]} {}",
          "1136: do_catchsql_test 13.1 {",
          "1137:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x-2019 FROM c WHERE x<2)",
          "1138:     INSERT INTO t1(b,c) SELECT last_insert_rowid(), x FROM c;",
          "1139: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4139:   PRAGMA writable_schema = 1;",
          "4140:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT '4hE'+x FROM c WHERE x<72)",
          "4141:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4144: do_catchsql_test 24.2 {",
          "4145:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "",
          "[Removed Lines]",
          "4142: } {0 {}}",
          "",
          "[Added Lines]",
          "4142: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4148: do_catchsql_test 24.3 {",
          "4149:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4150:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4153: do_catchsql_test 24.4 {",
          "4154:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT null<<x FROM c WHERE x<72)",
          "",
          "[Removed Lines]",
          "4151: } {0 {}}",
          "",
          "[Added Lines]",
          "4151: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4158: do_catchsql_test 24.5 {",
          "4159:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4160:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4163: do_catchsql_test 24.7 {",
          "4164:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4167: #-------------------------------------------------------------------------",
          "4168: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "4161: } {0 {}}",
          "4165: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4161: } {1 {database disk image is malformed}}",
          "4165: } {0 {}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4837:   PRAGMA writable_schema = 1;",
          "4838:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x GLOB 2.16770 FROM x)",
          "4839:     INSERT INTO t1(a) SELECT randomblob(3000) FROM t2 ;",
          "4841: do_catchsql_test 27.3 {",
          "4842:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<2.653)",
          "4843:     INSERT INTO t1(a) SELECT randomblob(-current_time) FROM c;",
          "4845: do_catchsql_test 27.4 {",
          "4846:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h*h*';",
          "4847: } {0 {}}",
          "4848: do_catchsql_test 27.5 {",
          "4849:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<2.653)",
          "4850:     INSERT INTO t1(a) SELECT randomblob(-current_time) FROM c;",
          "4852: do_catchsql_test 27.5 {",
          "4853:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4855: do_catchsql_test 27.6 {",
          "4856:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4859: #-------------------------------------------------------------------------",
          "4860: reset_db",
          "",
          "[Removed Lines]",
          "4840: } {0 {}}",
          "4844: } {0 {}}",
          "4851: } {0 {}}",
          "4854: } {0 {}}",
          "4857: } {0 {}}",
          "",
          "[Added Lines]",
          "4840: } {1 {database disk image is malformed}}",
          "4844: } {1 {database disk image is malformed}}",
          "4851: } {1 {database disk image is malformed}}",
          "4854: } {1 {database disk image is malformed}}",
          "4857: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5070:   PRAGMA writable_schema = 1;",
          "5071:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5072:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5076:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "5077: } {0 {}}",
          "5080:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5081:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5085:   WITH c(x) AS (VALUES(1) UNION ALL SELECT 3<<x FROM c WHERE x<72)",
          "5086:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5087: } {0 {}}",
          "5090:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5091:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5095:   WITH c(x) AS (VALUES(1) UNION ALL SELECT 3<<x FROM c WHERE x<72)",
          "5096:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5097: } {0 {}}",
          "5100:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+3 FROM c WHERE x<72)",
          "5101:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5105:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "5106: } {0 {}}",
          "",
          "[Removed Lines]",
          "5073: } {0 {}}",
          "5075: do_catchsql_test 28.1 {",
          "5079: do_catchsql_test 28.1 {",
          "5082: } {0 {}}",
          "5084: do_catchsql_test 28.1 {",
          "5089: do_catchsql_test 28.1 {",
          "5092: } {0 {}}",
          "5094: do_catchsql_test 28.1 {",
          "5099: do_catchsql_test 28.1 {",
          "5102: } {0 {}}",
          "5104: do_catchsql_test 28.1 {",
          "",
          "[Added Lines]",
          "5073: } {1 {database disk image is malformed}}",
          "5075: do_catchsql_test 28.2 {",
          "5079: do_catchsql_test 28.3 {",
          "5082: } {1 {database disk image is malformed}}",
          "5084: do_catchsql_test 28.4 {",
          "5089: do_catchsql_test 28.5 {",
          "5092: } {1 {database disk image is malformed}}",
          "5094: do_catchsql_test 28.6 {",
          "5099: do_catchsql_test 28.7 {",
          "5102: } {1 {database disk image is malformed}}",
          "5104: do_catchsql_test 28.8 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5812:   INSERT INTO f(f) VALUES ('integrity-check');",
          "5813: } {1 {database disk image is malformed}}",
          "5815: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5815: reset_db",
          "5816: do_catchsql_test 36.0 {",
          "5817:   CREATE VIRTUAL TABLE f USING fts3(a,tokenize=porter);",
          "5818:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5819:   INSERT INTO f VALUES (1);",
          "5820:   INSERT INTO f_stat VALUES (1,x'00000000000101010119013d00ffff0400fa83717b71a69297979701f63d010101010101010101010101190000000000000000fa83717b71a601f63d01010101010101010101010119013d00ffffff0400fa83717b71a69297979701f63d010101010101010101010101190000000000000000fa83717b71a69201f63d010101f63d01010101010101010101010119013d00ffffff0400fa83717b71a6929797010101010101010101010119013d00ffff01f63d01010101010101010101010119013d00ffffff0400fa83717b71a69297979701f63d00fa03ffffffa69297979701f63d010101000000000101010101197e9797976567656565ffa63535354e');",
          "5821:   INSERT INTO f(f) VALUES ('merge=53,216');",
          "5822: } {0 {}}",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   SELECT * FROM x3;",
          "299: } {1 {unrecognized token: \"123corp\"}}",
          "301: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: do_execsql_test 8.1 {",
          "302:   CREATE VIRTUAL TABLE st4 USING dbstat;",
          "303: }",
          "304: do_execsql_test 8.2 {",
          "305:   SELECT * FROM st4 WHERE st4.aggregate = NULL",
          "306: }",
          "307: do_execsql_test 8.3 {",
          "308:   SELECT aggregate=1 FROM st4 WHERE aggregate = 5",
          "309: }",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "801: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801: # 2020-01-04 From Yongheng",
          "802: # The test case below caused problems for the register validity",
          "803: # tracking logic.  There was no bug in the release build.  The",
          "804: # only problem was a false-positive in the register validity",
          "805: # tracking.",
          "806: #",
          "807: reset_db",
          "808: do_execsql_test trigger1-22.10 {",
          "809:   CREATE TABLE t1(",
          "810:     a INTEGER PRIMARY KEY,",
          "811:     b DOUBLE",
          "812:   );",
          "813:   CREATE TRIGGER x AFTER UPDATE ON t1 BEGIN",
          "814:    SELECT sum(b)OVER(ORDER BY (SELECT b FROM t1 AS x",
          "815:                                WHERE b IN (t1.a,127,t1.b)",
          "816:                                GROUP BY b))",
          "817:      FROM t1",
          "818:      GROUP BY a;",
          "819:   END;",
          "820:   CREATE TEMP TRIGGER x BEFORE INSERT ON t1 BEGIN",
          "821:     UPDATE t1",
          "822:        SET b=randomblob(10)",
          "823:      WHERE b >= 'E'",
          "824:        AND a < (SELECT a FROM t1 WHERE a<22 GROUP BY b);",
          "825:   END;",
          "826:   INSERT INTO t1(b) VALUES('Y'),('X'),('Z');",
          "827:   SELECT a, CASE WHEN typeof(b)='text' THEN quote(b) ELSE '<blob>' END, '|' FROM t1;",
          "828: } {1 <blob> | 2 'X' | 3 'Z' |}",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "838: #",
          "839: do_catchsql_test 16.10 {",
          "840:   DELETE FROM zipfile;",
          "844: finish_test",
          "",
          "[Removed Lines]",
          "841: } {1 {zipfile() function requires an argument}}",
          "",
          "[Added Lines]",
          "841: } {1 {zipfile: missing filename}}",
          "842: do_catchsql_test 16.20 {",
          "843:   REPLACE INTO zipfile VALUES(null,null,null,null,null,123,null);",
          "844: } {1 {zipfile: missing filename}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "674a9b342551fa7e4be30010a8dd51b2538723bf",
      "candidate_info": {
        "commit_hash": "674a9b342551fa7e4be30010a8dd51b2538723bf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/674a9b342551fa7e4be30010a8dd51b2538723bf",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the RTREE extension so that it give correct query results even if the query uses non-numeric constraints.  Ticket [a55ab6d97d01ecbc]\n\nFossilOrigin-Name: f898d04cf272ef0130dcae146cb86d8630b10a6f19aecfc2fa70e97e082bd51c",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244:   pCellData += 8 + 4*(p->iCoord&0xfe);",
          "1246:   assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE",
          "1249:   switch( p->op ){",
          "1250:     case RTREE_LE:",
          "1251:     case RTREE_LT:",
          "1252:     case RTREE_EQ:",
          "",
          "[Removed Lines]",
          "1247:       || p->op==RTREE_GT || p->op==RTREE_EQ );",
          "",
          "[Added Lines]",
          "1253:       || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_TRUE",
          "1254:       || p->op==RTREE_FALSE );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:   assert(p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE",
          "1288:   pCellData += 8 + p->iCoord*4;",
          "1290:   RTREE_DECODE_COORD(eInt, pCellData, xN);",
          "1291:   switch( p->op ){",
          "1297:   }",
          "1299: }",
          "",
          "[Removed Lines]",
          "1287:       || p->op==RTREE_GT || p->op==RTREE_EQ );",
          "1292:     case RTREE_LE: if( xN <= p->u.rValue ) return;  break;",
          "1293:     case RTREE_LT: if( xN <  p->u.rValue ) return;  break;",
          "1294:     case RTREE_GE: if( xN >= p->u.rValue ) return;  break;",
          "1295:     case RTREE_GT: if( xN >  p->u.rValue ) return;  break;",
          "1296:     default:       if( xN == p->u.rValue ) return;  break;",
          "",
          "[Added Lines]",
          "1296:       || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_TRUE",
          "1297:       || p->op==RTREE_FALSE );",
          "1304:     case RTREE_LE:    if( xN <= p->u.rValue ) return;  break;",
          "1305:     case RTREE_LT:    if( xN <  p->u.rValue ) return;  break;",
          "1306:     case RTREE_GE:    if( xN >= p->u.rValue ) return;  break;",
          "1307:     case RTREE_GT:    if( xN >  p->u.rValue ) return;  break;",
          "1308:     default:          if( xN == p->u.rValue ) return;  break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1835:                 || (idxStr && (int)strlen(idxStr)==argc*2) );",
          "1836:         for(ii=0; ii<argc; ii++){",
          "1837:           RtreeConstraint *p = &pCsr->aConstraint[ii];",
          "1838:           p->op = idxStr[ii*2];",
          "1839:           p->iCoord = idxStr[ii*2+1]-'0';",
          "1840:           if( p->op>=RTREE_MATCH ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850:           int eType = sqlite3_value_type(argv[ii]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1849:             p->pInfo->nCoord = pRtree->nDim2;",
          "1850:             p->pInfo->anQueue = pCsr->anQueue;",
          "1851:             p->pInfo->mxLevel = pRtree->iDepth + 1;",
          "1853: #ifdef SQLITE_RTREE_INT_ONLY",
          "1854:             p->u.rValue = sqlite3_value_int64(argv[ii]);",
          "1855: #else",
          "1856:             p->u.rValue = sqlite3_value_double(argv[ii]);",
          "1857: #endif",
          "1858:           }",
          "1859:         }",
          "1860:       }",
          "",
          "[Removed Lines]",
          "1852:           }else{",
          "",
          "[Added Lines]",
          "1865:           }else if( eType==SQLITE_INTEGER || eType==SQLITE_FLOAT ){",
          "1871:           }else{",
          "1872:             p->u.rValue = RTREE_ZERO;",
          "1873:             if( eType==SQLITE_NULL ){",
          "1874:               p->op = RTREE_FALSE;",
          "1875:             }else if( p->op==RTREE_LT || p->op==RTREE_LE ){",
          "1876:               p->op = RTREE_TRUE;",
          "1877:             }else{",
          "1878:               p->op = RTREE_FALSE;",
          "1879:             }",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:     INSERT INTO t6 VALUES(2, 4, 6);",
          "375:   }",
          "376: } {}",
          "385: #----------------------------------------------------------------------------",
          "386: # Test cases rtree-9.*",
          "",
          "[Removed Lines]",
          "377: do_test rtree-8.1.2 { execsql { SELECT ii FROM t6 WHERE x1>2 } } {1 2}",
          "378: do_test rtree-8.1.3 { execsql { SELECT ii FROM t6 WHERE x1>3 } } {2}",
          "379: do_test rtree-8.1.4 { execsql { SELECT ii FROM t6 WHERE x1>4 } } {}",
          "380: do_test rtree-8.1.5 { execsql { SELECT ii FROM t6 WHERE x1>5 } } {}",
          "381: do_test rtree-8.1.6 { execsql { SELECT ii FROM t6 WHERE x1<3 } } {}",
          "382: do_test rtree-8.1.7 { execsql { SELECT ii FROM t6 WHERE x1<4 } } {1}",
          "383: do_test rtree-8.1.8 { execsql { SELECT ii FROM t6 WHERE x1<5 } } {1 2}",
          "",
          "[Added Lines]",
          "377: do_test rtree-8.1.2 { execsql { SELECT ii FROM t6 WHERE x1>2 } }   {1 2}",
          "378: do_test rtree-8.1.3 { execsql { SELECT ii FROM t6 WHERE x1>3 } }   {2}",
          "379: do_test rtree-8.1.4 { execsql { SELECT ii FROM t6 WHERE x1>4 } }   {}",
          "380: do_test rtree-8.1.5 { execsql { SELECT ii FROM t6 WHERE x1>5 } }   {}",
          "381: do_test rtree-8.1.6 { execsql { SELECT ii FROM t6 WHERE x1>''} }   {}",
          "382: do_test rtree-8.1.7 { execsql { SELECT ii FROM t6 WHERE x1>null}}  {}",
          "383: do_test rtree-8.2.2 { execsql { SELECT ii FROM t6 WHERE x1>=2 } }  {1 2}",
          "384: do_test rtree-8.2.3 { execsql { SELECT ii FROM t6 WHERE x1>=3 } }  {1 2}",
          "385: do_test rtree-8.2.4 { execsql { SELECT ii FROM t6 WHERE x1>=4 } }  {2}",
          "386: do_test rtree-8.2.5 { execsql { SELECT ii FROM t6 WHERE x1>=5 } }  {}",
          "387: do_test rtree-8.2.6 { execsql { SELECT ii FROM t6 WHERE x1>=''} }  {}",
          "388: do_test rtree-8.2.7 { execsql { SELECT ii FROM t6 WHERE x1>=null}} {}",
          "389: do_test rtree-8.3.2 { execsql { SELECT ii FROM t6 WHERE x1<2 } }   {}",
          "390: do_test rtree-8.3.3 { execsql { SELECT ii FROM t6 WHERE x1<3 } }   {}",
          "391: do_test rtree-8.3.4 { execsql { SELECT ii FROM t6 WHERE x1<4 } }   {1}",
          "392: do_test rtree-8.3.5 { execsql { SELECT ii FROM t6 WHERE x1<5 } }   {1 2}",
          "393: do_test rtree-8.3.6 { execsql { SELECT ii FROM t6 WHERE x1<''} }   {1 2}",
          "394: do_test rtree-8.3.7 { execsql { SELECT ii FROM t6 WHERE x1<null}}  {}",
          "395: do_test rtree-8.4.2 { execsql { SELECT ii FROM t6 WHERE x1<=2 } }  {}",
          "396: do_test rtree-8.4.3 { execsql { SELECT ii FROM t6 WHERE x1<=3 } }  {1}",
          "397: do_test rtree-8.4.4 { execsql { SELECT ii FROM t6 WHERE x1<=4 } }  {1 2}",
          "398: do_test rtree-8.4.5 { execsql { SELECT ii FROM t6 WHERE x1<=5 } }  {1 2}",
          "399: do_test rtree-8.4.6 { execsql { SELECT ii FROM t6 WHERE x1<=''} }  {1 2}",
          "400: do_test rtree-8.4.7 { execsql { SELECT ii FROM t6 WHERE x1<=null}} {}",
          "401: do_test rtree-8.5.2 { execsql { SELECT ii FROM t6 WHERE x1=2 } }   {}",
          "402: do_test rtree-8.5.3 { execsql { SELECT ii FROM t6 WHERE x1=3 } }   {1}",
          "403: do_test rtree-8.5.4 { execsql { SELECT ii FROM t6 WHERE x1=4 } }   {2}",
          "404: do_test rtree-8.5.5 { execsql { SELECT ii FROM t6 WHERE x1=5 } }   {}",
          "405: do_test rtree-8.5.6 { execsql { SELECT ii FROM t6 WHERE x1=''} }   {}",
          "406: do_test rtree-8.5.7 { execsql { SELECT ii FROM t6 WHERE x1=null}}  {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f0b5a8c7921f7419eeb11be8201fd6988047042fcaeffa297fc322bc480c1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7f6dbf501df83d70e7e39f8f46d1b0c149c63c6",
      "candidate_info": {
        "commit_hash": "f7f6dbf501df83d70e7e39f8f46d1b0c149c63c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f7f6dbf501df83d70e7e39f8f46d1b0c149c63c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Enhance the treeview system to show the SrcList_item.colUsed field for FROM clause elements.\n\nFossilOrigin-Name: 8a5c539b77aa174c048a504d211c56902075f9b42b654e1f8cc5767739e5fcc9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04abadb545d1b34bdd74d62becb3bfd83aceee373fd6b4b708d5ad53f41d9464",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:       sqlite3_str_appendf(&x, \" %s\", pItem->zName);",
          "139:     }",
          "140:     if( pItem->pTab ){",
          "143:     }",
          "144:     if( pItem->zAlias ){",
          "145:       sqlite3_str_appendf(&x, \" (AS %s)\", pItem->zAlias);",
          "",
          "[Removed Lines]",
          "141:       sqlite3_str_appendf(&x, \" tab=%Q nCol=%d ptr=%p\",",
          "142:            pItem->pTab->zName, pItem->pTab->nCol, pItem->pTab);",
          "",
          "[Added Lines]",
          "141:       sqlite3_str_appendf(&x, \" tab=%Q nCol=%d ptr=%p used=%llx\",",
          "142:            pItem->pTab->zName, pItem->pTab->nCol, pItem->pTab, pItem->colUsed);",
          "",
          "---------------"
        ]
      }
    }
  ]
}