{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "827180097c45d2ce84d798ca141bb3a170a20df9",
      "candidate_info": {
        "commit_hash": "827180097c45d2ce84d798ca141bb3a170a20df9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/827180097c45d2ce84d798ca141bb3a170a20df9",
        "files": [
          "test/simple/test-net-server-max-connections.js"
        ],
        "message": "test: fix test/simple/test-net-server-max-connections.js is racey\n\nFixes #1333.",
        "before_after_code_files": [
          "test/simple/test-net-server-max-connections.js||test/simple/test-net-server-max-connections.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-net-server-max-connections.js||test/simple/test-net-server-max-connections.js": [
          "File: test/simple/test-net-server-max-connections.js -> test/simple/test-net-server-max-connections.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: });",
          "44: server.listen(common.PORT, function() {",
          "48: });",
          "50: server.maxConnections = N / 2;",
          "",
          "[Removed Lines]",
          "45:   for (var i = 0; i < N; i++) {",
          "46:     makeConnection(i);",
          "47:   }",
          "",
          "[Added Lines]",
          "45:   makeConnection(0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: function makeConnection(index) {",
          "80:       }",
          "100: }",
          "",
          "[Removed Lines]",
          "56:   setTimeout(function() {",
          "57:     var c = net.createConnection(common.PORT);",
          "58:     var gotData = false;",
          "60:     c.on('end', function() { c.end(); });",
          "62:     c.on('data', function(b) {",
          "63:       gotData = true;",
          "64:       assert.ok(0 < b.length);",
          "65:     });",
          "67:     c.on('error', function(e) {",
          "68:       console.error('error %d: %s', index, e);",
          "69:     });",
          "71:     c.on('close', function() {",
          "72:       console.error('closed %d', index);",
          "73:       closes++;",
          "75:       if (closes < N / 2) {",
          "76:         assert.ok(server.maxConnections <= index,",
          "77:                   index +",
          "78:                   ' was one of the first closed connections ' +",
          "79:                   'but shouldnt have been');",
          "82:       if (closes === N / 2) {",
          "83:         var cb;",
          "84:         console.error('calling wait callback.');",
          "85:         while (cb = waits.shift()) {",
          "86:           cb();",
          "87:         }",
          "88:         server.close();",
          "89:       }",
          "91:       if (index < server.maxConnections) {",
          "92:         assert.equal(true, gotData,",
          "93:                      index + ' didn\\'t get data, but should have');",
          "94:       } else {",
          "95:         assert.equal(false, gotData,",
          "96:                      index + ' got data, but shouldn\\'t have');",
          "97:       }",
          "98:     });",
          "99:   }, index);",
          "",
          "[Added Lines]",
          "54:   var c = net.createConnection(common.PORT);",
          "55:   var gotData = false;",
          "57:   c.on('connect', function() {",
          "58:     if (index + 1 < N) {",
          "59:       makeConnection(index + 1);",
          "60:     }",
          "61:   });",
          "63:   c.on('end', function() { c.end(); });",
          "65:   c.on('data', function(b) {",
          "66:     gotData = true;",
          "67:     assert.ok(0 < b.length);",
          "68:   });",
          "70:   c.on('error', function(e) {",
          "71:     console.error('error %d: %s', index, e);",
          "72:   });",
          "74:   c.on('close', function() {",
          "75:     console.error('closed %d', index);",
          "76:     closes++;",
          "78:     if (closes < N / 2) {",
          "79:       assert.ok(server.maxConnections <= index,",
          "80:                 index +",
          "81:                 ' was one of the first closed connections ' +",
          "82:                 'but shouldnt have been');",
          "83:     }",
          "85:     if (closes === N / 2) {",
          "86:       var cb;",
          "87:       console.error('calling wait callback.');",
          "88:       while (cb = waits.shift()) {",
          "89:         cb();",
          "91:       server.close();",
          "92:     }",
          "94:     if (index < server.maxConnections) {",
          "95:       assert.equal(true, gotData,",
          "96:                    index + ' didn\\'t get data, but should have');",
          "97:     } else {",
          "98:       assert.equal(false, gotData,",
          "99:                    index + ' got data, but shouldn\\'t have');",
          "100:     }",
          "101:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0844e2359bc6b5974db9ec5a8065561ffa87cdcc",
      "candidate_info": {
        "commit_hash": "0844e2359bc6b5974db9ec5a8065561ffa87cdcc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0844e2359bc6b5974db9ec5a8065561ffa87cdcc",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/fs-poll.c",
          "deps/uv/src/unix/cygwin.c",
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/test/benchmark-sizes.c"
        ],
        "message": "deps: upgrade libuv to 012cbda",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/fs-poll.c||deps/uv/src/fs-poll.c",
          "deps/uv/src/unix/cygwin.c||deps/uv/src/unix/cygwin.c",
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c",
          "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/test/benchmark-sizes.c||deps/uv/test/benchmark-sizes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1104: UV_EXTERN int uv_timer_init(uv_loop_t*, uv_timer_t* timer);",
          "1109: UV_EXTERN int uv_timer_stop(uv_timer_t* timer);",
          "",
          "[Removed Lines]",
          "1106: UV_EXTERN int uv_timer_start(uv_timer_t* timer, uv_timer_cb cb,",
          "1107:     int64_t timeout, int64_t repeat);",
          "",
          "[Added Lines]",
          "1117: UV_EXTERN int uv_timer_start(uv_timer_t* timer,",
          "1118:                              uv_timer_cb cb,",
          "1119:                              int64_t timeout,",
          "1120:                              int64_t repeat);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1518: struct uv_fs_poll_s {",
          "1519:   UV_HANDLE_FIELDS",
          "1529: };",
          "1531: UV_EXTERN int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);",
          "",
          "[Removed Lines]",
          "1522:   unsigned int interval;",
          "1523:   uint64_t start_time;",
          "1524:   char* path;",
          "1525:   uv_fs_poll_cb poll_cb;",
          "1526:   uv_timer_t timer_handle;",
          "1527:   uv_fs_t* fs_req;",
          "1528:   uv_statbuf_t statbuf;",
          "",
          "[Added Lines]",
          "1534:   void* poll_ctx;",
          "1536:   char padding[sizeof(int)",
          "1537:              + sizeof(unsigned int)",
          "1538:              + sizeof(uint64_t)",
          "1539:              + sizeof(char*)",
          "1540:              + sizeof(uv_fs_poll_cb)",
          "1541:              + sizeof(uv_timer_t)",
          "1542:              + sizeof(uv_fs_t*)",
          "1543:              + sizeof(uv_statbuf_t)",
          "1544:              - sizeof(void*)];",
          "",
          "---------------"
        ],
        "deps/uv/src/fs-poll.c||deps/uv/src/fs-poll.c": [
          "File: deps/uv/src/fs-poll.c -> deps/uv/src/fs-poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: static int statbuf_eq(const uv_statbuf_t* a, const uv_statbuf_t* b);",
          "31: static void poll_cb(uv_fs_t* req);",
          "33: static uv_statbuf_t zero_statbuf;",
          "36: int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle) {",
          "38:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_POLL);",
          "39:   loop->counters.fs_poll_init++;",
          "47:   return 0;",
          "48: }",
          "",
          "[Removed Lines]",
          "30: static void timer_cb(uv_timer_t* timer, int status);",
          "41:   if (uv_timer_init(loop, &handle->timer_handle))",
          "42:     return -1;",
          "44:   handle->timer_handle.flags |= UV__HANDLE_INTERNAL;",
          "45:   uv__handle_unref(&handle->timer_handle);",
          "",
          "[Added Lines]",
          "29: struct poll_ctx {",
          "31:   int busy_polling;",
          "32:   unsigned int interval;",
          "33:   uint64_t start_time;",
          "34:   uv_loop_t* loop;",
          "35:   uv_fs_poll_cb poll_cb;",
          "36:   uv_timer_t timer_handle;",
          "38:   uv_statbuf_t statbuf;",
          "40: };",
          "44: static void timer_cb(uv_timer_t* timer, int status);",
          "45: static void timer_close_cb(uv_handle_t* handle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:                      uv_fs_poll_cb cb,",
          "53:                      const char* path,",
          "54:                      unsigned int interval) {",
          "56:   size_t len;",
          "58:   if (uv__is_active(handle))",
          "59:     return 0;",
          "77:     abort();",
          "79:   uv__handle_start(handle);",
          "81:   return 0;",
          "",
          "[Removed Lines]",
          "55:   uv_fs_t* req;",
          "61:   len = strlen(path) + 1;",
          "62:   req = malloc(sizeof(*req) + len);",
          "64:   if (req == NULL)",
          "65:     return uv__set_artificial_error(handle->loop, UV_ENOMEM);",
          "67:   req->data = handle;",
          "68:   handle->path = memcpy(req + 1, path, len);",
          "69:   handle->fs_req = req;",
          "70:   handle->poll_cb = cb;",
          "71:   handle->interval = interval ? interval : 1;",
          "72:   handle->start_time = uv_now(handle->loop);",
          "73:   handle->busy_polling = 0;",
          "74:   memset(&handle->statbuf, 0, sizeof(handle->statbuf));",
          "76:   if (uv_fs_stat(handle->loop, handle->fs_req, handle->path, poll_cb))",
          "",
          "[Added Lines]",
          "61:   struct poll_ctx* ctx;",
          "62:   uv_loop_t* loop;",
          "68:   loop = handle->loop;",
          "69:   len = strlen(path);",
          "70:   ctx = calloc(1, sizeof(*ctx) + len);",
          "72:   if (ctx == NULL)",
          "73:     return uv__set_artificial_error(loop, UV_ENOMEM);",
          "75:   ctx->loop = loop;",
          "76:   ctx->poll_cb = cb;",
          "77:   ctx->interval = interval ? interval : 1;",
          "78:   ctx->start_time = uv_now(loop);",
          "79:   ctx->parent_handle = handle;",
          "80:   memcpy(ctx->path, path, len + 1);",
          "82:   if (uv_timer_init(loop, &ctx->timer_handle))",
          "83:     abort();",
          "85:   ctx->timer_handle.flags |= UV__HANDLE_INTERNAL;",
          "86:   uv__handle_unref(&ctx->timer_handle);",
          "88:   if (uv_fs_stat(loop, &ctx->fs_req, ctx->path, poll_cb))",
          "91:   handle->poll_ctx = ctx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: int uv_fs_poll_stop(uv_fs_poll_t* handle) {",
          "86:   if (!uv__is_active(handle))",
          "87:     return 0;",
          "105:   uv__handle_stop(handle);",
          "107:   return 0;",
          "",
          "[Removed Lines]",
          "96:   if (handle->fs_req->data)",
          "97:     handle->fs_req->data = NULL;",
          "98:   else",
          "99:     free(handle->fs_req);",
          "101:   handle->fs_req = NULL;",
          "102:   handle->path = NULL;",
          "104:   uv_timer_stop(&handle->timer_handle);",
          "",
          "[Added Lines]",
          "99:   struct poll_ctx* ctx;",
          "104:   ctx = handle->poll_ctx;",
          "105:   assert(ctx != NULL);",
          "106:   assert(ctx->parent_handle != NULL);",
          "108:   ctx->parent_handle = NULL;",
          "109:   uv_timer_stop(&ctx->timer_handle);",
          "111:   handle->poll_ctx = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111: void uv__fs_poll_close(uv_fs_poll_t* handle) {",
          "112:   uv_fs_poll_stop(handle);",
          "114: }",
          "117: static void timer_cb(uv_timer_t* timer, int status) {",
          "128: }",
          "131: static void poll_cb(uv_fs_t* req) {",
          "132:   uv_statbuf_t* statbuf;",
          "134:   uint64_t interval;",
          "143:   if (req->result != 0) {",
          "148:     }",
          "149:     goto out;",
          "150:   }",
          "152:   statbuf = req->ptr;",
          "161: out:",
          "162:   uv_fs_req_cleanup(req);",
          "176:     abort();",
          "177: }",
          "180: static int statbuf_eq(const uv_statbuf_t* a, const uv_statbuf_t* b) {",
          "181: #ifdef _WIN32",
          "182:   return a->st_mtime == b->st_mtime",
          "",
          "[Removed Lines]",
          "113:   uv_close((uv_handle_t*)&handle->timer_handle, NULL);",
          "118:   uv_fs_poll_t* handle;",
          "120:   handle = container_of(timer, uv_fs_poll_t, timer_handle);",
          "121:   handle->start_time = uv_now(handle->loop);",
          "122:   handle->fs_req->data = handle;",
          "124:   if (uv_fs_stat(handle->loop, handle->fs_req, handle->path, poll_cb))",
          "125:     abort();",
          "127:   assert(uv__is_active(handle));",
          "133:   uv_fs_poll_t* handle;",
          "136:   handle = req->data;",
          "139:     goto out;",
          "141:   assert(req == handle->fs_req);",
          "144:     if (handle->busy_polling != -req->errorno) {",
          "145:       uv__set_artificial_error(handle->loop, req->errorno);",
          "146:       handle->poll_cb(handle, -1, &handle->statbuf, &zero_statbuf);",
          "147:       handle->busy_polling = -req->errorno;",
          "154:   if (handle->busy_polling != 0)",
          "155:     if (handle->busy_polling < 0 || !statbuf_eq(&handle->statbuf, statbuf))",
          "156:       handle->poll_cb(handle, 0, &handle->statbuf, statbuf);",
          "158:   handle->statbuf = *statbuf;",
          "159:   handle->busy_polling = 1;",
          "165:     free(req);",
          "166:     return;",
          "167:   }",
          "172:   interval = handle->interval;",
          "173:   interval -= (uv_now(handle->loop) - handle->start_time) % interval;",
          "175:   if (uv_timer_start(&handle->timer_handle, timer_cb, interval, 0))",
          "",
          "[Added Lines]",
          "124:   struct poll_ctx* ctx;",
          "126:   ctx = container_of(timer, struct poll_ctx, timer_handle);",
          "129:     uv_close((uv_handle_t*)&ctx->timer_handle, timer_close_cb);",
          "130:     return;",
          "131:   }",
          "133:   assert(ctx->parent_handle->poll_ctx == ctx);",
          "134:   ctx->start_time = uv_now(ctx->loop);",
          "136:   if (uv_fs_stat(ctx->loop, &ctx->fs_req, ctx->path, poll_cb))",
          "137:     abort();",
          "143:   struct poll_ctx* ctx;",
          "146:   ctx = container_of(req, struct poll_ctx, fs_req);",
          "149:     uv_close((uv_handle_t*)&ctx->timer_handle, timer_close_cb);",
          "150:     uv_fs_req_cleanup(req);",
          "151:     return;",
          "152:   }",
          "155:     if (ctx->busy_polling != -req->errorno) {",
          "156:       uv__set_artificial_error(ctx->loop, req->errorno);",
          "157:       ctx->poll_cb(ctx->parent_handle, -1, &ctx->statbuf, &zero_statbuf);",
          "158:       ctx->busy_polling = -req->errorno;",
          "165:   if (ctx->busy_polling != 0)",
          "166:     if (ctx->busy_polling < 0 || !statbuf_eq(&ctx->statbuf, statbuf))",
          "167:       ctx->poll_cb(ctx->parent_handle, 0, &ctx->statbuf, statbuf);",
          "169:   ctx->statbuf = *statbuf;",
          "170:   ctx->busy_polling = 1;",
          "176:   interval = ctx->interval;",
          "177:   interval -= (uv_now(ctx->loop) - ctx->start_time) % interval;",
          "179:   if (uv_timer_start(&ctx->timer_handle, timer_cb, interval, 0))",
          "184: static void timer_close_cb(uv_handle_t* handle) {",
          "185:   free(container_of(handle, struct poll_ctx, timer_handle));",
          "186: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/cygwin.c||deps/uv/src/unix/cygwin.c": [
          "File: deps/uv/src/unix/cygwin.c -> deps/uv/src/unix/cygwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: uint64_t uv_hrtime() {",
          "36:   struct timespec ts;",
          "37:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "39: }",
          "41: void uv_loadavg(double avg[3]) {",
          "",
          "[Removed Lines]",
          "38:   return (ts.tv_sec * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "38:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: uint64_t uv_hrtime(void) {",
          "58:   struct timespec ts;",
          "59:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "61: }",
          "",
          "[Removed Lines]",
          "60:   return (ts.tv_sec * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "60:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c": [
          "File: deps/uv/src/unix/fs.c -> deps/uv/src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   if (req->cb)",
          "86:     uv__req_unregister(req->loop, req);",
          "89:   req->path = NULL;",
          "91:   switch (req->fs_type) {",
          "",
          "[Removed Lines]",
          "88:   free(req->path);",
          "",
          "[Added Lines]",
          "88:   free((void*)req->path);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c": [
          "File: deps/uv/src/unix/linux/linux-core.c -> deps/uv/src/unix/linux/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: uint64_t uv_hrtime() {",
          "72:   struct timespec ts;",
          "73:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "75: }",
          "",
          "[Removed Lines]",
          "74:   return (ts.tv_sec * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "74:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c": [
          "File: deps/uv/src/unix/netbsd.c -> deps/uv/src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: uint64_t uv_hrtime(void) {",
          "39:   struct timespec ts;",
          "40:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "42: }",
          "44: void uv_loadavg(double avg[3]) {",
          "",
          "[Removed Lines]",
          "41:   return (ts.tv_sec * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "41:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c": [
          "File: deps/uv/src/unix/openbsd.c -> deps/uv/src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: uint64_t uv_hrtime(void) {",
          "47:   struct timespec ts;",
          "48:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "50: }",
          "",
          "[Removed Lines]",
          "49:   return (ts.tv_sec * NANOSEC + ts.tv_nsec);",
          "",
          "[Added Lines]",
          "49:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:       cpu_info->model = NULL;",
          "347:     } else {",
          "348:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"clock_MHz\");",
          "352:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"brand\");",
          "353:       assert(knp->data_type == KSTAT_DATA_STRING);",
          "",
          "[Removed Lines]",
          "349:       assert(knp->data_type == KSTAT_DATA_INT32);",
          "350:       cpu_info->speed = knp->value.i32;",
          "",
          "[Added Lines]",
          "349:       assert(knp->data_type == KSTAT_DATA_INT32 ||",
          "350:              knp->data_type == KSTAT_DATA_INT64);",
          "351:       cpu_info->speed = (knp->data_type == KSTAT_DATA_INT32) ? knp->value.i32",
          "352:                                                              : knp->value.i64;",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-sizes.c||deps/uv/test/benchmark-sizes.c": [
          "File: deps/uv/test/benchmark-sizes.c -> deps/uv/test/benchmark-sizes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   LOGF(\"uv_idle_t: %u bytes\\n\", (unsigned int) sizeof(uv_idle_t));",
          "37:   LOGF(\"uv_async_t: %u bytes\\n\", (unsigned int) sizeof(uv_async_t));",
          "38:   LOGF(\"uv_timer_t: %u bytes\\n\", (unsigned int) sizeof(uv_timer_t));",
          "39:   LOGF(\"uv_fs_event_t: %u bytes\\n\", (unsigned int) sizeof(uv_fs_event_t));",
          "40:   LOGF(\"uv_process_t: %u bytes\\n\", (unsigned int) sizeof(uv_process_t));",
          "41:   LOGF(\"uv_poll_t: %u bytes\\n\", (unsigned int) sizeof(uv_poll_t));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   LOGF(\"uv_fs_poll_t: %u bytes\\n\", (unsigned int) sizeof(uv_fs_poll_t));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e290e48b218dd7a077b38ad6605ee78d54e4d20",
      "candidate_info": {
        "commit_hash": "4e290e48b218dd7a077b38ad6605ee78d54e4d20",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4e290e48b218dd7a077b38ad6605ee78d54e4d20",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-sync-fd-leak.js"
        ],
        "message": "fs: fix file descriptor leak in sync functions\n\nFixes #3202.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-sync-fd-leak.js||test/simple/test-fs-sync-fd-leak.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   var nread = 0;",
          "160:   var lastRead = 0;",
          "174:   if (buffers.length > 1) {",
          "175:     var offset = 0;",
          "",
          "[Removed Lines]",
          "162:   do {",
          "163:     if (lastRead) {",
          "164:       buffer._bytesRead = lastRead;",
          "165:       nread += lastRead;",
          "166:       buffers.push(buffer);",
          "167:     }",
          "168:     var buffer = new Buffer(4048);",
          "169:     lastRead = fs.readSync(fd, buffer, 0, buffer.length, null);",
          "170:   } while (lastRead > 0);",
          "172:   fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:   }",
          "681:   var written = 0;",
          "682:   var length = data.length;",
          "686:   }",
          "688: };",
          "690: fs.appendFile = function(path, data, encoding_, callback) {",
          "",
          "[Removed Lines]",
          "684:   while (written < length) {",
          "685:     written += fs.writeSync(fd, data, written, length - written, written);",
          "687:   fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "708:   var position = null;",
          "709:   var length = data.length;",
          "713:       written += fs.writeSync(fd, data, written, length - written, position);",
          "721:     }",
          "723:   }",
          "725: };",
          "727: function errnoException(errorno, syscall) {",
          "",
          "[Removed Lines]",
          "711:   while (written < length) {",
          "712:     try {",
          "714:     } catch (e) {",
          "715:       try {",
          "716:         fs.closeSync(fd);",
          "717:       } catch (e) {",
          "719:       }",
          "720:       throw e;",
          "722:     position += written;",
          "724:   fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-sync-fd-leak.js||test/simple/test-fs-sync-fd-leak.js": [
          "File: test/simple/test-fs-sync-fd-leak.js -> test/simple/test-fs-sync-fd-leak.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var fs = require('fs');",
          "27: fs.openSync = function() {",
          "28:   return 42;",
          "29: };",
          "30: fs.closeSync = function(fd) {",
          "31:   assert.equal(fd, 42);",
          "32:   close_called++;",
          "33: };",
          "34: fs.readSync = function() {",
          "35:   throw new Error('BAM');",
          "36: };",
          "37: fs.writeSync = function() {",
          "38:   throw new Error('BAM');",
          "39: };",
          "41: ensureThrows(function() {",
          "42:   fs.readFileSync('dummy');",
          "43: });",
          "44: ensureThrows(function() {",
          "45:   fs.writeFileSync('dummy', 'xxx');",
          "46: });",
          "47: ensureThrows(function() {",
          "48:   fs.appendFileSync('dummy', 'xxx');",
          "49: });",
          "51: var close_called = 0;",
          "52: function ensureThrows(cb) {",
          "53:   var got_exception = false;",
          "55:   close_called = 0;",
          "56:   try {",
          "57:     cb();",
          "58:   } catch (e) {",
          "59:     assert.equal(e.message, 'BAM');",
          "60:     got_exception = true;",
          "61:   }",
          "63:   assert.equal(close_called, 1);",
          "64:   assert.equal(got_exception, true);",
          "65: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "408f450286d0e41ebd5c0085f354412d87967f92",
      "candidate_info": {
        "commit_hash": "408f450286d0e41ebd5c0085f354412d87967f92",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/408f450286d0e41ebd5c0085f354412d87967f92",
        "files": [
          "benchmark/client_latency.js"
        ],
        "message": "client latency benchmark: don't require('request')",
        "before_after_code_files": [
          "benchmark/client_latency.js||benchmark/client_latency.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/client_latency.js||benchmark/client_latency.js": [
          "File: benchmark/client_latency.js -> benchmark/client_latency.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: var runs = parseInt(process.argv[4], 10) || 100;",
          "9: var prefix = process.argv[5] || '';",
          "10: if (prefix) prefix += '_';",
          "12: var r = 0;",
          "14: var port = parseInt(process.env.PORT, 10) || 8000;",
          "",
          "[Removed Lines]",
          "11: var request = require('request');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0888cdd4123e80fcb859d90808bd6cc708eec3d6",
      "candidate_info": {
        "commit_hash": "0888cdd4123e80fcb859d90808bd6cc708eec3d6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0888cdd4123e80fcb859d90808bd6cc708eec3d6",
        "files": [
          "test/simple/test-cli-eval.js"
        ],
        "message": "test: fix bad comment",
        "before_after_code_files": [
          "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js": [
          "File: test/simple/test-cli-eval.js -> test/simple/test-cli-eval.js"
        ]
      }
    }
  ]
}