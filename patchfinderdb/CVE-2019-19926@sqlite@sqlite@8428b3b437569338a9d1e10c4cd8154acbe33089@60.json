{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50ef6716d2ac75314e76546d074efd694969dba2",
      "candidate_info": {
        "commit_hash": "50ef6716d2ac75314e76546d074efd694969dba2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/50ef6716d2ac75314e76546d074efd694969dba2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "Make all ephemeral tables built to hold the RHS of an IN operator be index-btrees, never table-btrees, regardless of whether or not they are used as IN_INDEX_LOOP or IN_INDEX_MEMBERSHIP.  That way, the same ephmerial table can be reused for both cases.\n\nFossilOrigin-Name: c2d50df8fd1a1fdae6226a3e77296ded09b53a74540caedd4868e686a93cbc10",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d456456da6e25b20d9d27ca95f1013082bca52ee74ee9bf91732a9fa843ea45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:     eType = IN_INDEX_EPH;",
          "2553:     if( inFlags & IN_INDEX_LOOP ){",
          "2554:       pParse->nQueryLoop = 0;",
          "2558:     }else if( prRhsHasNull ){",
          "2560:     }",
          "2561:     assert( pX->op==TK_IN );",
          "2563:     if( rMayHaveNull ){",
          "2564:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "2565:     }",
          "",
          "[Removed Lines]",
          "2555:       if( pX->pLeft->iColumn<0 && !ExprHasProperty(pX, EP_xIsSelect) ){",
          "2556:         eType = IN_INDEX_ROWID;",
          "2557:       }",
          "2562:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "",
          "[Added Lines]",
          "2559:     sqlite3CodeRhsOfIN(pParse, pX, iTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2732:   pLeft = pExpr->pLeft;",
          "2733:   nVal = sqlite3ExprVectorSize(pLeft);",
          "2739:   pExpr->iTable = iTab;",
          "2742: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2743:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2744:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "",
          "[Removed Lines]",
          "2734:   assert( !isRowid || nVal==1 );",
          "2740:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2741:       pExpr->iTable, (isRowid?0:nVal));",
          "",
          "[Added Lines]",
          "2729:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pExpr->iTable, nVal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:     VdbeComment((v, \"RHS of IN operator\"));",
          "2747:   }",
          "2748: #endif",
          "2751:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2749:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "[Added Lines]",
          "2737:   pKeyInfo = sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2761:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "2762:     ));",
          "2766:     if( ALWAYS(pEList->nExpr==nVal) ){",
          "",
          "[Removed Lines]",
          "2763:     assert( !isRowid );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2814:     r1 = sqlite3GetTempReg(pParse);",
          "2815:     r2 = sqlite3GetTempReg(pParse);",
          "2817:     for(i=pList->nExpr, pItem=pList->a; i>0; i--, pItem++){",
          "2818:       Expr *pE2 = pItem->pExpr;",
          "",
          "[Removed Lines]",
          "2816:     if( isRowid ) sqlite3VdbeAddOp4(v, OP_Blob, 0, r2, 0, \"\", P4_STATIC);",
          "2819:       int iValToIns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2829:       }",
          "2846:     }",
          "2847:     sqlite3ReleaseTempReg(pParse, r1);",
          "2848:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2832:       if( isRowid && sqlite3ExprIsInteger(pE2, &iValToIns) ){",
          "2833:         sqlite3VdbeAddOp3(v, OP_InsertInt, iTab, r2, iValToIns);",
          "2834:       }else{",
          "2835:         r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2836:         if( isRowid ){",
          "2837:           sqlite3VdbeAddOp2(v, OP_MustBeInt, r3,",
          "2838:                             sqlite3VdbeCurrentAddr(v)+2);",
          "2839:           VdbeCoverage(v);",
          "2840:           sqlite3VdbeAddOp3(v, OP_Insert, iTab, r2, r3);",
          "2841:         }else{",
          "2842:           sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2843:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "2844:         }",
          "2845:       }",
          "",
          "[Added Lines]",
          "2817:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2818:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2819:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:       pik_flags |= (update_flags & OPFLAG_SAVEPOSITION);",
          "1922: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1923:       if( update_flags==0 ){",
          "1926:         );",
          "1927:         sqlite3VdbeChangeP5(v, OPFLAG_ISNOOP);",
          "1928:       }",
          "1929: #endif",
          "1930:     }",
          "",
          "[Removed Lines]",
          "1924:         sqlite3VdbeAddOp4(v, OP_InsertInt,",
          "1925:             iIdxCur+i, aRegIdx[i], 0, (char*)pTab, P4_TABLE",
          "",
          "[Added Lines]",
          "1924:         int r = sqlite3GetTempReg(pParse);",
          "1925:         sqlite3VdbeAddOp2(v, OP_Integer, 0, r);",
          "1926:         sqlite3VdbeAddOp4(v, OP_Insert,",
          "1927:             iIdxCur+i, aRegIdx[i], r, (char*)pTab, P4_TABLE",
          "1930:         sqlite3ReleaseTempReg(pParse, r);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4281: int sqlite3GetToken(const unsigned char *, int *);",
          "4282: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4283: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4285: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4286: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4287: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "[Added Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4578: case OP_Insert:",
          "4579: case OP_InsertInt: {",
          "",
          "[Added Lines]",
          "4572: case OP_Insert: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4597:   REGISTER_TRACE(pOp->p2, pData);",
          "4598:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "4611:   if( pOp->p4type==P4_TABLE && HAS_UPDATE_HOOK(db) ){",
          "4612:     assert( pC->iDb>=0 );",
          "",
          "[Removed Lines]",
          "4600:   if( pOp->opcode==OP_Insert ){",
          "4601:     pKey = &aMem[pOp->p3];",
          "4602:     assert( pKey->flags & MEM_Int );",
          "4603:     assert( memIsValid(pKey) );",
          "4604:     REGISTER_TRACE(pOp->p3, pKey);",
          "4605:     x.nKey = pKey->u.i;",
          "4606:   }else{",
          "4607:     assert( pOp->opcode==OP_InsertInt );",
          "4608:     x.nKey = pOp->p3;",
          "4609:   }",
          "",
          "[Added Lines]",
          "4593:   pKey = &aMem[pOp->p3];",
          "4594:   assert( pKey->flags & MEM_Int );",
          "4595:   assert( memIsValid(pKey) );",
          "4596:   REGISTER_TRACE(pOp->p3, pKey);",
          "4597:   x.nKey = pKey->u.i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0578823ddf4cc283595625d2a345fb022fa7eb3",
      "candidate_info": {
        "commit_hash": "f0578823ddf4cc283595625d2a345fb022fa7eb3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f0578823ddf4cc283595625d2a345fb022fa7eb3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptM.test"
        ],
        "message": "Update corruptM.test to account for the fact that the database schema may be loaded from within the \"sqlite3\" command for some test permutations.\n\nFossilOrigin-Name: cb9470fc064aad72a4e42c6a021410401b3b1a32446ae8b9cd9c759f0a2a01ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptM.test||test/corruptM.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67da31e24ebb49c4cac81c9e7cfca37ca422555fd0fdb01d8f180890783c84ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptM.test||test/corruptM.test": [
          "File: test/corruptM.test -> test/corruptM.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #",
          "23: database_may_be_corrupt",
          "25: db close",
          "26: forcedelete test.db",
          "27: sqlite3 db test.db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: proc open_db2_and_catchsql {sql} {",
          "26:   set rc [catch { sqlite3 db2 test.db } msg]",
          "27:   if {$rc} {",
          "28:     return [list $rc $msg]",
          "29:   }",
          "30:   set res [catchsql $sql db2]",
          "31:   db2 close",
          "32:   set res",
          "33: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   UPDATE sqlite_master SET tbl_name=NULL WHERE name='t1';",
          "39:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "40: } {table t1 {} | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "42: do_test corruptM-102 {",
          "44:     PRAGMA quick_check;",
          "46: } {1 {malformed database schema (t1)}}",
          "49: do_execsql_test corruptM-110 {",
          "50:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='t1';",
          "51:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "52: } {table t1 tx | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "54: do_test corruptM-111 {",
          "56:     PRAGMA quick_check;",
          "58: } {1 {malformed database schema (t1)}}",
          "60: do_execsql_test corruptM-112 {",
          "61:   UPDATE sqlite_master SET tbl_name='t1', type='tabl' WHERE name='t1';",
          "62:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "63: } {tabl t1 t1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "65: do_test corruptM-113 {",
          "67:     PRAGMA quick_check;",
          "69: } {1 {malformed database schema (t1)}}",
          "71: do_execsql_test corruptM-114 {",
          "72:   UPDATE sqlite_master SET tbl_name='t9',type='table',name='t9'WHERE name='t1';",
          "73:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "74: } {table t9 t9 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "76: do_test corruptM-114 {",
          "78:     PRAGMA quick_check;",
          "80: } {1 {malformed database schema (t9)}}",
          "83: do_execsql_test corruptM-120 {",
          "84:   UPDATE sqlite_master SET name='t1',tbl_name='T1' WHERE name='t9';",
          "85:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "86: } {table t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "88: do_test corruptM-121 {",
          "90:     PRAGMA quick_check;",
          "91:     SELECT * FROM t1, v2;",
          "93: } {0 {ok 111 222 333 15 22}}",
          "96: do_execsql_test corruptM-130 {",
          "97:   UPDATE sqlite_master SET type='view' WHERE name='t1';",
          "98:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "99: } {view t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "101: do_test corruptM-131 {",
          "103:     PRAGMA quick_check;",
          "104:     SELECT * FROM t1, v2;",
          "106: } {1 {malformed database schema (t1)}}",
          "109: do_execsql_test corruptM-140 {",
          "110:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='t1';",
          "111:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='i1';",
          "112:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "113: } {table t1 t1 | index i1 tx | view v2 v2 | trigger r1 t1 |}",
          "115: do_test corruptM-141 {",
          "117:     PRAGMA quick_check;",
          "118:     SELECT * FROM t1, v2;",
          "120: } {1 {malformed database schema (i1)}}",
          "123: do_execsql_test corruptM-150 {",
          "124:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='i1';",
          "125:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "126: } {table t1 t1 | table i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "128: do_test corruptM-151 {",
          "130:     PRAGMA quick_check;",
          "131:     SELECT * FROM t1, v2;",
          "133: } {1 {malformed database schema (i1)}}",
          "136: do_execsql_test corruptM-160 {",
          "137:   UPDATE sqlite_master SET type='view', tbl_name='t1' WHERE name='i1';",
          "138:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "139: } {table t1 t1 | view i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "141: do_test corruptM-161 {",
          "143:     PRAGMA quick_check;",
          "144:     SELECT * FROM t1, v2;",
          "146: } {1 {malformed database schema (i1)}}",
          "149: do_execsql_test corruptM-170 {",
          "150:   UPDATE sqlite_master SET type='index', tbl_name='t1' WHERE name='i1';",
          "151:   UPDATE sqlite_master SET type='table', tbl_name='v2' WHERE name='v2';",
          "152:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "153: } {table t1 t1 | index i1 t1 | table v2 v2 | trigger r1 t1 |}",
          "155: do_test corruptM-171 {",
          "157:     PRAGMA quick_check;",
          "158:     SELECT * FROM t1, v2;",
          "160: } {1 {malformed database schema (v2)}}",
          "163: do_execsql_test corruptM-180 {",
          "164:   UPDATE sqlite_master SET type='view',name='v3',tbl_name='v3' WHERE name='v2';",
          "165:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "166: } {table t1 t1 | index i1 t1 | view v3 v3 | trigger r1 t1 |}",
          "168: do_test corruptM-181 {",
          "170:     PRAGMA quick_check;",
          "171:     SELECT * FROM t1, v2;",
          "173: } {1 {malformed database schema (v3)}}",
          "176: do_execsql_test corruptM-190 {",
          "177:   UPDATE sqlite_master SET type='view',name='v2',tbl_name='v2' WHERE name='v3';",
          "178:   UPDATE sqlite_master SET type='view' WHERE name='r1';",
          "179:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "180: } {table t1 t1 | index i1 t1 | view v2 v2 | view r1 t1 |}",
          "182: do_test corruptM-191 {",
          "184:     PRAGMA quick_check;",
          "185:     SELECT * FROM t1, v2;",
          "187: } {1 {malformed database schema (r1)}}",
          "189: do_execsql_test corruptM-192 {",
          "190:   UPDATE sqlite_master SET type='trigger',tbl_name='v2' WHERE name='r1';",
          "191:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "192: } {table t1 t1 | index i1 t1 | view v2 v2 | trigger r1 v2 |}",
          "194: do_test corruptM-193 {",
          "196:     PRAGMA quick_check;",
          "197:     SELECT * FROM t1, v2;",
          "199: } {1 {malformed database schema (r1)}}",
          "202: finish_test",
          "",
          "[Removed Lines]",
          "41: sqlite3 db2 test.db",
          "43:   catchsql {",
          "45:   } db2",
          "47: db2 close",
          "53: sqlite3 db2 test.db",
          "55:   catchsql {",
          "57:   } db2",
          "59: db2 close",
          "64: sqlite3 db2 test.db",
          "66:   catchsql {",
          "68:   } db2",
          "70: db2 close",
          "75: sqlite3 db2 test.db",
          "77:   catchsql {",
          "79:   } db2",
          "81: db2 close",
          "87: sqlite3 db2 test.db",
          "89:   catchsql {",
          "92:   } db2",
          "94: db2 close",
          "100: sqlite3 db2 test.db",
          "102:   catchsql {",
          "105:   } db2",
          "107: db2 close",
          "114: sqlite3 db2 test.db",
          "116:   catchsql {",
          "119:   } db2",
          "121: db2 close",
          "127: sqlite3 db2 test.db",
          "129:   catchsql {",
          "132:   } db2",
          "134: db2 close",
          "140: sqlite3 db2 test.db",
          "142:   catchsql {",
          "145:   } db2",
          "147: db2 close",
          "154: sqlite3 db2 test.db",
          "156:   catchsql {",
          "159:   } db2",
          "161: db2 close",
          "167: sqlite3 db2 test.db",
          "169:   catchsql {",
          "172:   } db2",
          "174: db2 close",
          "181: sqlite3 db2 test.db",
          "183:   catchsql {",
          "186:   } db2",
          "188: db2 close",
          "193: sqlite3 db2 test.db",
          "195:   catchsql {",
          "198:   } db2",
          "200: db2 close",
          "",
          "[Added Lines]",
          "52:   open_db2_and_catchsql {",
          "54:   }",
          "62:   open_db2_and_catchsql {",
          "64:   }",
          "71:   open_db2_and_catchsql {",
          "73:   }",
          "80:   open_db2_and_catchsql {",
          "82:   }",
          "90:   open_db2_and_catchsql {",
          "93:   }",
          "101:   open_db2_and_catchsql {",
          "104:   }",
          "113:   open_db2_and_catchsql {",
          "116:   }",
          "124:   open_db2_and_catchsql {",
          "127:   }",
          "135:   open_db2_and_catchsql {",
          "138:   }",
          "147:   open_db2_and_catchsql {",
          "150:   }",
          "158:   open_db2_and_catchsql {",
          "161:   }",
          "170:   open_db2_and_catchsql {",
          "173:   }",
          "180:   open_db2_and_catchsql {",
          "183:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07312a6b06b09d64e964c2e346cd253d839c3132",
      "candidate_info": {
        "commit_hash": "07312a6b06b09d64e964c2e346cd253d839c3132",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07312a6b06b09d64e964c2e346cd253d839c3132",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a typo in an option name for the .dbconfig command in shell.c.in: s/wriable_schema/writable_schema/\n\nFossilOrigin-Name: 1c58522e49cd91426bca7efccf0d99e0f2803dcd5991ae5d56166fc5510e4c62",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "[Removed Lines]",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "",
          "[Added Lines]",
          "7087:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
      "candidate_info": {
        "commit_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Add options to wapptest.tcl similar to those supported by releasetest.tcl. Also add the -noui switch, for running without wapp altogether.\n\nFossilOrigin-Name: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c509d8a8aebe0da4847e95cf737c21313a665de9a540da2db57b8ed22f98a402",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: set G(platform) $::tcl_platform(os)-$::tcl_platform(machine)",
          "22: set G(test)     Normal",
          "23: set G(keep)     1",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "26: set G(jobs)     3",
          "27: set G(debug)    0",
          "29: proc wapptest_init {} {",
          "30:   global G",
          "33:   foreach k $lSave { set A($k) $G($k) }",
          "34:   array unset G",
          "35:   foreach k $lSave { set G($k) $A($k) }",
          "",
          "[Removed Lines]",
          "24: set G(msvc)     [expr {$::tcl_platform(platform)==\"windows\"}]",
          "32:   set lSave [list platform test keep msvc tcl jobs debug]",
          "",
          "[Added Lines]",
          "24: set G(msvc)     0",
          "29: set G(noui)     0",
          "30: set G(stdout)   0",
          "36:   set lSave [list platform test keep msvc tcl jobs debug noui stdout]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "50: }",
          "52: # Generate the text for the box at the top of the UI. The current SQLite",
          "53: # version, according to fossil, along with a warning if there are",
          "54: # uncommitted changes in the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: proc wapptest_run {} {",
          "57:   global G",
          "58:   set_test_array",
          "59:   set G(state) \"running\"",
          "61:   wapptest_openlog",
          "63:   wapptest_output \"Running the following for $G(platform). $G(jobs) jobs.\"",
          "64:   foreach t $G(test_array) {",
          "65:     set config [dict get $t config]",
          "66:     set target [dict get $t target]",
          "67:     wapptest_output [format \"    %-25s%s\" $config $target]",
          "68:   }",
          "69:   wapptest_output [string repeat * 70]",
          "70: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "198: }",
          "200: # This command is invoked once a slave process has finished running its",
          "201: # tests, successfully or otherwise. Parameter $name is the name of the",
          "202: # test, $rc the exit code returned by the slave process.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: proc wapptest_output {str} {",
          "221:   global G",
          "222:   if {$G(stdout)} { puts $str }",
          "223:   if {[info exists G(log)]} {",
          "224:     puts $G(log) $str",
          "225:     flush $G(log)",
          "226:   }",
          "227: }",
          "228: proc wapptest_openlog {} {",
          "229:   global G",
          "230:   set G(log) [open wapptest-out.txt w+]",
          "231: }",
          "232: proc wapptest_closelog {} {",
          "233:   global G",
          "234:   close $G(log)",
          "235:   unset G(log)",
          "236: }",
          "238: proc format_seconds {seconds} {",
          "239:   set min [format %.2d [expr ($seconds / 60) % 60]]",
          "240:   set  hr [format %.2d [expr $seconds / 3600]]",
          "241:   set sec [format %.2d [expr $seconds % 60]]",
          "242:   return \"$hr:$min:$sec\"",
          "243: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:       }",
          "234:     }",
          "235:   }",
          "236: }",
          "238: # This is a fileevent callback invoked each time a file-descriptor that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:   # Format a message regarding the success or failure of hte test.",
          "283:   set t [format_seconds [expr $G(test.$name.done) - $G(test.$name.start)]]",
          "284:   set res \"OK\"",
          "285:   if {$G(test.$name.nError)} { set res \"FAILED\" }",
          "286:   set dots [string repeat . [expr 60 - [string length $name]]]",
          "287:   set msg \"$name $dots $res ($t)\"",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "292:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:       incr nConfig",
          "373:     }",
          "374:     set G(result) \"$nError errors from $nTest tests in $nConfig configurations.\"",
          "375:     catch {",
          "376:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "377:     }",
          "378:     set G(state) \"stopped\"",
          "379:   } else {",
          "380:     set nLaunch [expr $G(jobs) - $nRunning]",
          "381:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:     wapptest_output [string repeat * 70]",
          "433:     wapptest_output $G(result)",
          "436:       wapptest_output \" SQLite version $G(sqlite_version)\"",
          "439:     wapptest_closelog",
          "440:     if {$G(noui)} { exit 0 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:         }",
          "544:         set seconds [expr $G(test.$config.done) - $G(test.$config.start)]",
          "545:       }",
          "551:     }",
          "553:     wapp-trim {",
          "",
          "[Removed Lines]",
          "547:       set min [format %.2d [expr ($seconds / 60) % 60]]",
          "548:       set  hr [format %.2d [expr $seconds / 3600]]",
          "549:       set sec [format %.2d [expr $seconds % 60]]",
          "550:       set seconds \"$hr:$min:$sec\"",
          "",
          "[Added Lines]",
          "608:       set seconds [format_seconds $seconds]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "607:   if {[wapp-param-exists control_run]} {",
          "608:     # This is a \"run test\" command.",
          "611:   }",
          "613:   if {[wapp-param-exists control_stop]} {",
          "",
          "[Removed Lines]",
          "609:     set_test_array",
          "610:     set ::G(state) \"running\"",
          "",
          "[Added Lines]",
          "667:     wapptest_run",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "622:         slave_test_done $name 1",
          "623:       }",
          "624:     }",
          "625:   }",
          "627:   if {[wapp-param-exists control_reset]} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:     wapptest_closelog",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "773:   }",
          "774: }",
          "776: wapptest_init",
          "",
          "[Removed Lines]",
          "777: wapp-start $argv",
          "",
          "[Added Lines]",
          "834: # Print out a usage message. Then do [exit 1].",
          "835: #",
          "836: proc wapptest_usage {} {",
          "837:   puts stderr {",
          "838: This Tcl script is used to test various configurations of SQLite. By",
          "839: default it uses \"wapp\" to provide an interactive interface. Supported",
          "840: command line options (all optional) are:",
          "842:     --platform    PLATFORM         (which tests to run)",
          "843:     --smoketest                    (run \"make smoketest\" only)",
          "844:     --veryquick                    (run veryquick.test only)",
          "845:     --buildonly                    (build executables, do not run tests)",
          "846:     --jobs        N                (number of concurrent jobs)",
          "847:     --tcl         DIR              (where to find tclConfig.sh)",
          "848:     --deletefiles                  (delete extra files after each test)",
          "849:     --msvc                         (Use MS Visual C)",
          "850:     --debug                        (Also run [n]debugging versions of tests)",
          "851:     --noui                         (do not use wapp)",
          "852:   }",
          "853:   exit 1",
          "854: }",
          "856: # Sort command line arguments into two groups: those that belong to wapp,",
          "857: # and those that belong to the application.",
          "858: set WAPPARG(-server)      1",
          "859: set WAPPARG(-local)       1",
          "860: set WAPPARG(-scgi)        1",
          "861: set WAPPARG(-remote-scgi) 1",
          "862: set WAPPARG(-fromip)      1",
          "863: set WAPPARG(-nowait)      0",
          "864: set WAPPARG(-cgi)         0",
          "865: set lWappArg [list]",
          "866: set lTestArg [list]",
          "867: for {set i 0} {$i < [llength $argv]} {incr i} {",
          "868:   set arg [lindex $argv $i]",
          "869:   if {[string range $arg 0 1]==\"--\"} {",
          "870:     set arg [string range $arg 1 end]",
          "871:   }",
          "872:   if {[info exists WAPPARG($arg)]} {",
          "873:     lappend lWappArg $arg",
          "874:     if {$WAPPARG($arg)} {",
          "875:       incr i",
          "876:       lappend lWappArg [lindex $argv $i]",
          "877:     }",
          "878:   } else {",
          "879:     lappend lTestArg $arg",
          "880:   }",
          "881: }",
          "883: for {set i 0} {$i < [llength $lTestArg]} {incr i} {",
          "884:   switch -- [lindex $lTestArg $i] {",
          "885:     -platform {",
          "886:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "887:       incr i",
          "888:       set arg [lindex $lTestArg $i]",
          "889:       set lPlatform [array names ::Platforms]",
          "890:       if {[lsearch $lPlatform $arg]<0} {",
          "891:         puts stderr \"No such platform: $arg. Platforms are: $lPlatform\"",
          "892:         exit -1",
          "893:       }",
          "894:       set G(platform) $arg",
          "895:     }",
          "897:     -smoketest { set G(test) Smoketest }",
          "898:     -veryquick { set G(test) Veryquick }",
          "899:     -buildonly { set G(test) Build-Only }",
          "900:     -jobs {",
          "901:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "902:       incr i",
          "903:       set G(jobs) [lindex $lTestArg $i]",
          "904:     }",
          "906:     -tcl {",
          "907:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "908:       incr i",
          "909:       set G(tcl) [lindex $lTestArg $i]",
          "910:     }",
          "912:     -deletefiles {",
          "913:       set G(keep) 0",
          "914:     }",
          "916:     -msvc {",
          "917:       set G(msvc) 1",
          "918:     }",
          "920:     -debug {",
          "921:       set G(debug) 1",
          "922:     }",
          "924:     -noui {",
          "925:       set G(noui) 1",
          "926:       set G(stdout) 1",
          "927:     }",
          "929:     -stdout {",
          "930:       set G(stdout) 1",
          "931:     }",
          "933:     default {",
          "934:       puts stderr \"Unrecognized option: [lindex $lTestArg $i]\"",
          "935:       wapptest_usage",
          "936:     }",
          "937:   }",
          "938: }",
          "941: if {$G(noui)==0} {",
          "942:   wapp-start $lWappArg",
          "943: } else {",
          "944:   wapptest_run",
          "945:   do_some_stuff",
          "946:   vwait forever",
          "947: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
      "candidate_info": {
        "commit_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Omit deprecated PRAGMAs when compiling with the -DSQLITE_OMIT_DEPRECATED option.\n\nFossilOrigin-Name: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1601db7adba2dccd4f90fbbe5099c801a2b0d97af087fbe82ed98d05496b38c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: #endif",
          "213: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "214:  {/* zName:     */ \"count_changes\",",
          "219: #endif",
          "220: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "221:  {/* zName:     */ \"data_store_directory\",",
          "226: #endif",
          "227: #if !defined(SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS)",
          "228:  {/* zName:     */ \"data_version\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "221: #endif",
          "223: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "230: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #endif",
          "242:  {/* zName:     */ \"default_cache_size\",",
          "247: #endif",
          "248: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "249: #if !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "250:  {/* zName:     */ \"defer_foreign_keys\",",
          "",
          "[Removed Lines]",
          "241: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "245: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "246: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "253: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255: #endif",
          "256: #endif",
          "257: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "258:  {/* zName:     */ \"empty_result_callbacks\",",
          "263: #endif",
          "264: #if !defined(SQLITE_OMIT_UTF16)",
          "265:  {/* zName:     */ \"encoding\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "271: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: #endif",
          "301: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "302:  {/* zName:     */ \"full_column_names\",",
          "307:  {/* zName:     */ \"fullfsync\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "316: #endif",
          "317: #endif",
          "318: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "531: #endif",
          "532: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "533:  {/* zName:     */ \"short_column_names\",",
          "538: #endif",
          "539:  {/* zName:     */ \"shrink_memory\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "551: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "590:  {/* zName:     */ \"temp_store_directory\",",
          "595: #endif",
          "596: #if defined(SQLITE_HAS_CODEC)",
          "597:  {/* zName:     */ \"textkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: #endif",
          "605: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "606: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "613: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   TYPE: FLAG",
          "26:   ARG:  SQLITE_FullColNames",
          "27:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "29:   NAME: short_column_names",
          "30:   TYPE: FLAG",
          "31:   ARG:  SQLITE_ShortColNames",
          "32:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "34:   NAME: count_changes",
          "35:   TYPE: FLAG",
          "36:   ARG:  SQLITE_CountRows",
          "37:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "39:   NAME: empty_result_callbacks",
          "40:   TYPE: FLAG",
          "41:   ARG:  SQLITE_NullCallback",
          "42:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "44:   NAME: legacy_file_format",
          "45:   TYPE: FLAG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "34:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "40:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "46:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:   NAME: default_cache_size",
          "153:   FLAG: NeedSchema Result0 SchemaReq NoColumns1",
          "154:   COLS: cache_size",
          "157:   NAME: page_size",
          "158:   FLAG: Result0 SchemaReq NoColumns1",
          "",
          "[Removed Lines]",
          "155:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "159:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "160:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:   NAME: temp_store_directory",
          "206:   FLAG: NoColumns1",
          "207:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "209:   NAME: data_store_directory",
          "210:   FLAG: NoColumns1",
          "211:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "213:   NAME: lock_proxy_file",
          "214:   FLAG: NoColumns1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "219:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------"
        ]
      }
    }
  ]
}