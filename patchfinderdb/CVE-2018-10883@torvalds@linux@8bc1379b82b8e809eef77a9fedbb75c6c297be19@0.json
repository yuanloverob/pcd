{
  "cve_id": "CVE-2018-10883",
  "cve_desc": "A flaw was found in the Linux kernel's ext4 filesystem. A local user can cause an out-of-bounds write in jbd2_journal_dirty_metadata(), a denial of service, and a system crash by mounting and operating on a crafted ext4 filesystem image.",
  "repo": "torvalds/linux",
  "patch_hash": "8bc1379b82b8e809eef77a9fedbb75c6c297be19",
  "patch_info": {
    "commit_hash": "8bc1379b82b8e809eef77a9fedbb75c6c297be19",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8bc1379b82b8e809eef77a9fedbb75c6c297be19",
    "files": [
      "fs/ext4/ext4.h",
      "fs/ext4/inline.c",
      "fs/ext4/xattr.c"
    ],
    "message": "ext4: avoid running out of journal credits when appending to an inline file\n\nUse a separate journal transaction if it turns out that we need to\nconvert an inline file to use an data block.  Otherwise we could end\nup failing due to not having journal credits.\n\nThis addresses CVE-2018-10883.\n\nhttps://bugzilla.kernel.org/show_bug.cgi?id=200071\n\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@kernel.org",
    "before_after_code_files": [
      "fs/ext4/ext4.h||fs/ext4/ext4.h",
      "fs/ext4/inline.c||fs/ext4/inline.c",
      "fs/ext4/xattr.c||fs/ext4/xattr.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/ext4.h||fs/ext4/ext4.h": [
      "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3013: struct iomap;",
      "3014: extern int ext4_inline_data_iomap(struct inode *inode, struct iomap *iomap);",
      "3019: extern int ext4_inline_data_truncate(struct inode *inode, int *has_inline);",
      "3021: extern int ext4_convert_inline_data(struct inode *inode);",
      "",
      "[Removed Lines]",
      "3016: extern int ext4_try_to_evict_inline_data(handle_t *handle,",
      "3017:       struct inode *inode,",
      "3018:       int needed);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "fs/ext4/inline.c||fs/ext4/inline.c": [
      "File: fs/ext4/inline.c -> fs/ext4/inline.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "887:  flags |= AOP_FLAG_NOFS;",
      "889:  if (ret == -ENOSPC) {",
      "890:   ret = ext4_da_convert_inline_data_to_extent(mapping,",
      "891:            inode,",
      "892:            flags,",
      "893:            fsdata);",
      "895:   if (ret == -ENOSPC &&",
      "896:       ext4_should_retry_alloc(inode->i_sb, &retries))",
      "897:    goto retry_journal;",
      "",
      "[Removed Lines]",
      "894:   ext4_journal_stop(handle);",
      "",
      "[Added Lines]",
      "890:   ext4_journal_stop(handle);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1891:  return (error < 0 ? error : 0);",
      "1892: }",
      "1930: int ext4_inline_data_truncate(struct inode *inode, int *has_inline)",
      "1931: {",
      "1932:  handle_t *handle;",
      "",
      "[Removed Lines]",
      "1902: int ext4_try_to_evict_inline_data(handle_t *handle,",
      "1903:       struct inode *inode,",
      "1904:       int needed)",
      "1905: {",
      "1906:  int error;",
      "1907:  struct ext4_xattr_entry *entry;",
      "1908:  struct ext4_inode *raw_inode;",
      "1909:  struct ext4_iloc iloc;",
      "1911:  error = ext4_get_inode_loc(inode, &iloc);",
      "1912:  if (error)",
      "1913:   return error;",
      "1915:  raw_inode = ext4_raw_inode(&iloc);",
      "1916:  entry = (struct ext4_xattr_entry *)((void *)raw_inode +",
      "1917:          EXT4_I(inode)->i_inline_off);",
      "1918:  if (EXT4_XATTR_LEN(entry->e_name_len) +",
      "1919:      EXT4_XATTR_SIZE(le32_to_cpu(entry->e_value_size)) < needed) {",
      "1920:   error = -ENOSPC;",
      "1921:   goto out;",
      "1922:  }",
      "1924:  error = ext4_convert_inline_data_nolock(handle, inode, &iloc);",
      "1925: out:",
      "1926:  brelse(iloc.bh);",
      "1927:  return error;",
      "1928: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "fs/ext4/xattr.c||fs/ext4/xattr.c": [
      "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2212:  if (EXT4_I(inode)->i_extra_isize == 0)",
      "2213:   return -ENOSPC;",
      "2214:  error = ext4_xattr_set_entry(i, s, handle, inode, false /* is_block */);",
      "2232:  header = IHDR(inode, ext4_raw_inode(&is->iloc));",
      "2233:  if (!IS_LAST_ENTRY(s->first)) {",
      "2234:   header->h_magic = cpu_to_le32(EXT4_XATTR_MAGIC);",
      "",
      "[Removed Lines]",
      "2215:  if (error) {",
      "2216:   if (error == -ENOSPC &&",
      "2217:       ext4_has_inline_data(inode)) {",
      "2218:    error = ext4_try_to_evict_inline_data(handle, inode,",
      "2219:      EXT4_XATTR_LEN(strlen(i->name) +",
      "2220:      EXT4_XATTR_SIZE(i->value_len)));",
      "2221:    if (error)",
      "2222:     return error;",
      "2223:    error = ext4_xattr_ibody_find(inode, i, is);",
      "2224:    if (error)",
      "2225:     return error;",
      "2226:    error = ext4_xattr_set_entry(i, s, handle, inode,",
      "2227:            false /* is_block */);",
      "2228:   }",
      "2229:   if (error)",
      "2230:    return error;",
      "2231:  }",
      "",
      "[Added Lines]",
      "2215:  if (error)",
      "2216:   return error;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e50e5129f384ae282adebfb561189cdb19b81cee",
      "candidate_info": {
        "commit_hash": "e50e5129f384ae282adebfb561189cdb19b81cee",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e50e5129f384ae282adebfb561189cdb19b81cee",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/ialloc.c",
          "fs/ext4/inline.c",
          "fs/ext4/inode.c",
          "fs/ext4/xattr.c",
          "fs/ext4/xattr.h"
        ],
        "message": "ext4: xattr-in-inode support\n\nLarge xattr support is implemented for EXT4_FEATURE_INCOMPAT_EA_INODE.\n\nIf the size of an xattr value is larger than will fit in a single\nexternal block, then the xattr value will be saved into the body\nof an external xattr inode.\n\nThe also helps support a larger number of xattr, since only the headers\nwill be stored in the in-inode space or the single external block.\n\nThe inode is referenced from the xattr header via \"e_value_inum\",\nwhich was formerly \"e_value_block\", but that field was never used.\nThe e_value_size still contains the xattr size so that listing\nxattrs does not need to look up the inode if the data is not accessed.\n\nstruct ext4_xattr_entry {\n        __u8    e_name_len;     /* length of name */\n        __u8    e_name_index;   /* attribute name index */\n        __le16  e_value_offs;   /* offset in disk block of value */\n        __le32  e_value_inum;   /* inode in which value is stored */\n        __le32  e_value_size;   /* size of attribute value */\n        __le32  e_hash;         /* hash value of name and value */\n        char    e_name[0];      /* attribute name */\n};\n\nThe xattr inode is marked with the EXT4_EA_INODE_FL flag and also\nholds a back-reference to the owning inode in its i_mtime field,\nallowing the ext4/e2fsck to verify the correct inode is accessed.\n\n[ Applied fix by Dan Carpenter to avoid freeing an ERR_PTR. ]\n\nLustre-Jira: https://jira.hpdd.intel.com/browse/LU-80\nLustre-bugzilla: https://bugzilla.lustre.org/show_bug.cgi?id=4424\nSigned-off-by: Kalpak Shah <kalpak.shah@sun.com>\nSigned-off-by: James Simmons <uja.ornl@gmail.com>\nSigned-off-by: Andreas Dilger <andreas.dilger@intel.com>\nSigned-off-by: Tahsin Erdogan <tahsin@google.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/ialloc.c||fs/ext4/ialloc.c",
          "fs/ext4/inline.c||fs/ext4/inline.c",
          "fs/ext4/inode.c||fs/ext4/inode.c",
          "fs/ext4/xattr.c||fs/ext4/xattr.c",
          "fs/ext4/xattr.h||fs/ext4/xattr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/inline.c||fs/ext4/inline.c",
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ],
          "candidate": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/inline.c||fs/ext4/inline.c",
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1797:       EXT4_FEATURE_INCOMPAT_EXTENTS| \\",
          "1798:       EXT4_FEATURE_INCOMPAT_64BIT| \\",
          "1799:       EXT4_FEATURE_INCOMPAT_FLEX_BG| \\",
          "1800:       EXT4_FEATURE_INCOMPAT_MMP | \\",
          "1801:       EXT4_FEATURE_INCOMPAT_INLINE_DATA | \\",
          "1802:       EXT4_FEATURE_INCOMPAT_ENCRYPT | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1800:       EXT4_FEATURE_INCOMPAT_EA_INODE| \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2231: #define EXT4_MMP_MAX_CHECK_INTERVAL 300UL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2238: #define EXT4_XATTR_MAX_LARGE_EA_SIZE    (1024 * 1024)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2242: # define ATTRIB_NORET __attribute__((noreturn))",
          "2243: # define NORET_AND noreturn,",
          "2246: extern unsigned int ext4_count_free(char *bitmap, unsigned numchars);",
          "2247: void ext4_inode_bitmap_csum_set(struct super_block *sb, ext4_group_t group,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2252: struct ext4_xattr_ino_array {",
          "2254:  unsigned int xia_inodes[0];",
          "2255: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2489: extern void ext4_set_inode_flags(struct inode *);",
          "2490: extern int ext4_alloc_da_blocks(struct inode *inode);",
          "2491: extern void ext4_set_aops(struct inode *inode);",
          "2492: extern int ext4_writepage_trans_blocks(struct inode *);",
          "2493: extern int ext4_chunk_trans_blocks(struct inode *, int nrblocks);",
          "2494: extern int ext4_zero_partial_blocks(handle_t *handle, struct inode *inode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2503: extern int ext4_meta_trans_blocks(struct inode *, int nrblocks, int chunk);",
          "",
          "---------------"
        ],
        "fs/ext4/ialloc.c||fs/ext4/ialloc.c": [
          "File: fs/ext4/ialloc.c -> fs/ext4/ialloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:  dquot_initialize(inode);",
          "298:  dquot_free_inode(inode);",
          "299:  dquot_drop(inode);",
          "",
          "[Removed Lines]",
          "297:  ext4_xattr_delete_inode(handle, inode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/ext4/inline.c||fs/ext4/inline.c": [
          "File: fs/ext4/inline.c -> fs/ext4/inline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  for (; !IS_LAST_ENTRY(entry); entry = EXT4_XATTR_NEXT(entry)) {",
          "65:    size_t offs = le16_to_cpu(entry->e_value_offs);",
          "66:    if (offs < min_offs)",
          "67:     min_offs = offs;",
          "",
          "[Removed Lines]",
          "64:   if (!entry->e_value_block && entry->e_value_size) {",
          "",
          "[Added Lines]",
          "64:   if (!entry->e_value_inum && entry->e_value_size) {",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     unsigned int length);",
          "140: static int __ext4_journalled_writepage(struct page *page, unsigned int len);",
          "141: static int ext4_bh_delay_or_unwritten(handle_t *handle, struct buffer_head *bh);",
          "",
          "[Removed Lines]",
          "142: static int ext4_meta_trans_blocks(struct inode *inode, int lblocks,",
          "143:       int pextents);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: {",
          "190:  handle_t *handle;",
          "191:  int err;",
          "193:  trace_ext4_evict_inode(inode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:  int extra_credits = 3;",
          "191:  struct ext4_xattr_ino_array *lea_ino_array = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:  sb_start_intwrite(inode->i_sb);",
          "243:  if (IS_ERR(handle)) {",
          "244:   ext4_std_error(inode->i_sb, PTR_ERR(handle));",
          "",
          "[Removed Lines]",
          "241:  handle = ext4_journal_start(inode, EXT4_HT_TRUNCATE,",
          "242:         ext4_blocks_for_truncate(inode)+3);",
          "",
          "[Added Lines]",
          "242:  handle = ext4_journal_start(inode, EXT4_HT_TRUNCATE, extra_credits);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:   sb_end_intwrite(inode->i_sb);",
          "252:   goto no_delete;",
          "253:  }",
          "255:  if (IS_SYNC(inode))",
          "256:   ext4_handle_sync(handle);",
          "257:  inode->i_size = 0;",
          "258:  err = ext4_mark_inode_dirty(handle, inode);",
          "259:  if (err) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:  err = ext4_xattr_delete_inode(handle, inode, &lea_ino_array);",
          "261:  if (err) {",
          "262:   ext4_warning(inode->i_sb,",
          "263:         \"couldn't delete inode's xattr (err %d)\", err);",
          "264:   goto stop_handle;",
          "265:  }",
          "267:  if (!IS_NOQUOTA(inode))",
          "268:   extra_credits += 2 * EXT4_QUOTA_DEL_BLOCKS(inode->i_sb);",
          "270:  if (!ext4_handle_has_enough_credits(handle,",
          "271:    ext4_blocks_for_truncate(inode) + extra_credits)) {",
          "272:   err = ext4_journal_extend(handle,",
          "273:    ext4_blocks_for_truncate(inode) + extra_credits);",
          "274:   if (err > 0)",
          "275:    err = ext4_journal_restart(handle,",
          "276:    ext4_blocks_for_truncate(inode) + extra_credits);",
          "277:   if (err != 0) {",
          "278:    ext4_warning(inode->i_sb,",
          "279:          \"couldn't extend journal (err %d)\", err);",
          "280:    goto stop_handle;",
          "281:   }",
          "282:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "282:   if (err > 0)",
          "284:   if (err != 0) {",
          "285:    ext4_warning(inode->i_sb,",
          "286:          \"couldn't extend journal (err %d)\", err);",
          "",
          "[Removed Lines]",
          "280:  if (!ext4_handle_has_enough_credits(handle, 3)) {",
          "281:   err = ext4_journal_extend(handle, 3);",
          "283:    err = ext4_journal_restart(handle, 3);",
          "",
          "[Added Lines]",
          "307:  if (!ext4_handle_has_enough_credits(handle, extra_credits)) {",
          "308:   err = ext4_journal_extend(handle, extra_credits);",
          "310:    err = ext4_journal_restart(handle, extra_credits);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:   ext4_clear_inode(inode);",
          "316:  else",
          "317:   ext4_free_inode(handle, inode);",
          "318:  ext4_journal_stop(handle);",
          "319:  sb_end_intwrite(inode->i_sb);",
          "320:  return;",
          "321: no_delete:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:  if (lea_ino_array != NULL)",
          "350:   ext4_xattr_inode_array_free(inode, lea_ino_array);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5508:       int pextents)",
          "5509: {",
          "5510:  ext4_group_t groups, ngroups = ext4_get_groups_count(inode->i_sb);",
          "",
          "[Removed Lines]",
          "5507: static int ext4_meta_trans_blocks(struct inode *inode, int lblocks,",
          "",
          "[Added Lines]",
          "5538: int ext4_meta_trans_blocks(struct inode *inode, int lblocks,",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:  while (!IS_LAST_ENTRY(entry)) {",
          "183:    u16 offs = le16_to_cpu(entry->e_value_offs);",
          "184:    u32 size = le32_to_cpu(entry->e_value_size);",
          "185:    void *value;",
          "",
          "[Removed Lines]",
          "180:   if (entry->e_value_block != 0)",
          "181:    return -EFSCORRUPTED;",
          "182:   if (entry->e_value_size != 0) {",
          "",
          "[Added Lines]",
          "180:   if (entry->e_value_size != 0 &&",
          "181:       entry->e_value_inum == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  return cmp ? -ENODATA : 0;",
          "270: }",
          "272: static int",
          "273: ext4_xattr_block_get(struct inode *inode, int name_index, const char *name,",
          "274:        void *buffer, size_t buffer_size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: static int",
          "275: ext4_xattr_inode_read(struct inode *ea_inode, void *buf, size_t *size)",
          "276: {",
          "277:  unsigned long block = 0;",
          "278:  struct buffer_head *bh = NULL;",
          "279:  int blocksize;",
          "280:  size_t csize, ret_size = 0;",
          "282:  if (*size == 0)",
          "283:   return 0;",
          "285:  blocksize = ea_inode->i_sb->s_blocksize;",
          "287:  while (ret_size < *size) {",
          "288:   csize = (*size - ret_size) > blocksize ? blocksize :",
          "290:   bh = ext4_bread(NULL, ea_inode, block, 0);",
          "291:   if (IS_ERR(bh)) {",
          "293:    return PTR_ERR(bh);",
          "294:   }",
          "295:   memcpy(buf, bh->b_data, csize);",
          "296:   brelse(bh);",
          "298:   buf += csize;",
          "299:   block += 1;",
          "300:   ret_size += csize;",
          "301:  }",
          "305:  return 0;",
          "306: }",
          "308: struct inode *ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino, int *err)",
          "309: {",
          "310:  struct inode *ea_inode = NULL;",
          "312:  ea_inode = ext4_iget(parent->i_sb, ea_ino);",
          "313:  if (IS_ERR(ea_inode) || is_bad_inode(ea_inode)) {",
          "314:   int rc = IS_ERR(ea_inode) ? PTR_ERR(ea_inode) : 0;",
          "315:   ext4_error(parent->i_sb, \"error while reading EA inode %lu \"",
          "316:       \"/ %d %d\", ea_ino, rc, is_bad_inode(ea_inode));",
          "318:   return NULL;",
          "319:  }",
          "321:  if (EXT4_XATTR_INODE_GET_PARENT(ea_inode) != parent->i_ino ||",
          "322:      ea_inode->i_generation != parent->i_generation) {",
          "323:   ext4_error(parent->i_sb, \"Backpointer from EA inode %lu \"",
          "324:       \"to parent invalid.\", ea_ino);",
          "326:   goto error;",
          "327:  }",
          "329:  if (!(EXT4_I(ea_inode)->i_flags & EXT4_EA_INODE_FL)) {",
          "330:   ext4_error(parent->i_sb, \"EA inode %lu does not have \"",
          "331:       \"EXT4_EA_INODE_FL flag set.\\n\", ea_ino);",
          "333:   goto error;",
          "334:  }",
          "337:  return ea_inode;",
          "339: error:",
          "340:  iput(ea_inode);",
          "341:  return NULL;",
          "342: }",
          "347: static int",
          "348: ext4_xattr_inode_get(struct inode *inode, unsigned long ea_ino, void *buffer,",
          "349:        size_t *size)",
          "350: {",
          "351:  struct inode *ea_inode = NULL;",
          "352:  int err;",
          "354:  ea_inode = ext4_xattr_inode_iget(inode, ea_ino, &err);",
          "355:  if (err)",
          "356:   return err;",
          "358:  err = ext4_xattr_inode_read(ea_inode, buffer, size);",
          "359:  iput(ea_inode);",
          "361:  return err;",
          "362: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:   error = -ERANGE;",
          "309:   if (size > buffer_size)",
          "310:    goto cleanup;",
          "313:  }",
          "314:  error = size;",
          "",
          "[Removed Lines]",
          "311:   memcpy(buffer, bh->b_data + le16_to_cpu(entry->e_value_offs),",
          "312:          size);",
          "",
          "[Added Lines]",
          "403:   if (entry->e_value_inum) {",
          "404:    error = ext4_xattr_inode_get(inode,",
          "405:           le32_to_cpu(entry->e_value_inum),",
          "406:           buffer, &size);",
          "407:    if (error)",
          "408:     goto cleanup;",
          "409:   } else {",
          "410:    memcpy(buffer, bh->b_data +",
          "411:           le16_to_cpu(entry->e_value_offs), size);",
          "412:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350:   error = -ERANGE;",
          "351:   if (size > buffer_size)",
          "352:    goto cleanup;",
          "355:  }",
          "356:  error = size;",
          "",
          "[Removed Lines]",
          "353:   memcpy(buffer, (void *)IFIRST(header) +",
          "354:          le16_to_cpu(entry->e_value_offs), size);",
          "",
          "[Added Lines]",
          "453:   if (entry->e_value_inum) {",
          "454:    error = ext4_xattr_inode_get(inode,",
          "455:           le32_to_cpu(entry->e_value_inum),",
          "456:           buffer, &size);",
          "457:    if (error)",
          "458:     goto cleanup;",
          "459:   } else {",
          "460:    memcpy(buffer, (void *)IFIRST(header) +",
          "461:           le16_to_cpu(entry->e_value_offs), size);",
          "462:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "620:         size_t *min_offs, void *base, int *total)",
          "621: {",
          "622:  for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {",
          "624:    size_t offs = le16_to_cpu(last->e_value_offs);",
          "625:    if (offs < *min_offs)",
          "",
          "[Removed Lines]",
          "623:   if (last->e_value_size) {",
          "",
          "[Added Lines]",
          "731:   if (!last->e_value_inum && last->e_value_size) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631:  return (*min_offs - ((void *)last - base) - sizeof(__u32));",
          "632: }",
          "636: {",
          "637:  struct ext4_xattr_entry *last;",
          "638:  size_t free, min_offs = s->end - s->base, name_len = strlen(i->name);",
          "641:  last = s->first;",
          "642:  for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {",
          "644:    size_t offs = le16_to_cpu(last->e_value_offs);",
          "645:    if (offs < min_offs)",
          "646:     min_offs = offs;",
          "",
          "[Removed Lines]",
          "634: static int",
          "635: ext4_xattr_set_entry(struct ext4_xattr_info *i, struct ext4_xattr_search *s)",
          "643:   if (last->e_value_size) {",
          "",
          "[Added Lines]",
          "745: static int ext4_xattr_inode_write(handle_t *handle, struct inode *ea_inode,",
          "746:       const void *buf, int bufsize)",
          "747: {",
          "748:  struct buffer_head *bh = NULL;",
          "749:  unsigned long block = 0;",
          "750:  unsigned blocksize = ea_inode->i_sb->s_blocksize;",
          "751:  unsigned max_blocks = (bufsize + blocksize - 1) >> ea_inode->i_blkbits;",
          "752:  int csize, wsize = 0;",
          "753:  int ret = 0;",
          "754:  int retries = 0;",
          "756: retry:",
          "757:  while (ret >= 0 && ret < max_blocks) {",
          "758:   struct ext4_map_blocks map;",
          "759:   map.m_lblk = block += ret;",
          "760:   map.m_len = max_blocks -= ret;",
          "762:   ret = ext4_map_blocks(handle, ea_inode, &map,",
          "763:           EXT4_GET_BLOCKS_CREATE);",
          "764:   if (ret <= 0) {",
          "765:    ext4_mark_inode_dirty(handle, ea_inode);",
          "766:    if (ret == -ENOSPC &&",
          "767:        ext4_should_retry_alloc(ea_inode->i_sb, &retries)) {",
          "768:     ret = 0;",
          "769:     goto retry;",
          "770:    }",
          "771:    break;",
          "772:   }",
          "773:  }",
          "775:  if (ret < 0)",
          "776:   return ret;",
          "778:  block = 0;",
          "779:  while (wsize < bufsize) {",
          "780:   if (bh != NULL)",
          "781:    brelse(bh);",
          "782:   csize = (bufsize - wsize) > blocksize ? blocksize :",
          "783:         bufsize - wsize;",
          "784:   bh = ext4_getblk(handle, ea_inode, block, 0);",
          "785:   if (IS_ERR(bh))",
          "786:    return PTR_ERR(bh);",
          "787:   ret = ext4_journal_get_write_access(handle, bh);",
          "788:   if (ret)",
          "789:    goto out;",
          "791:   memcpy(bh->b_data, buf, csize);",
          "792:   set_buffer_uptodate(bh);",
          "793:   ext4_handle_dirty_metadata(handle, ea_inode, bh);",
          "795:   buf += csize;",
          "796:   wsize += csize;",
          "797:   block += 1;",
          "798:  }",
          "800:  inode_lock(ea_inode);",
          "801:  i_size_write(ea_inode, wsize);",
          "802:  ext4_update_i_disksize(ea_inode, wsize);",
          "803:  inode_unlock(ea_inode);",
          "805:  ext4_mark_inode_dirty(handle, ea_inode);",
          "807: out:",
          "808:  brelse(bh);",
          "810:  return ret;",
          "811: }",
          "816: static struct inode *ext4_xattr_inode_create(handle_t *handle,",
          "817:           struct inode *inode)",
          "818: {",
          "819:  struct inode *ea_inode = NULL;",
          "825:  ea_inode = ext4_new_inode(handle, inode->i_sb->s_root->d_inode,",
          "826:       S_IFREG | 0600, NULL, inode->i_ino + 1, NULL);",
          "827:  if (!IS_ERR(ea_inode)) {",
          "828:   ea_inode->i_op = &ext4_file_inode_operations;",
          "829:   ea_inode->i_fop = &ext4_file_operations;",
          "830:   ext4_set_aops(ea_inode);",
          "831:   ea_inode->i_generation = inode->i_generation;",
          "832:   EXT4_I(ea_inode)->i_flags |= EXT4_EA_INODE_FL;",
          "838:   EXT4_XATTR_INODE_SET_PARENT(ea_inode, inode->i_ino);",
          "839:   unlock_new_inode(ea_inode);",
          "840:  }",
          "842:  return ea_inode;",
          "843: }",
          "848: int ext4_xattr_inode_unlink(struct inode *inode, unsigned long ea_ino)",
          "849: {",
          "850:  struct inode *ea_inode = NULL;",
          "851:  int err;",
          "853:  ea_inode = ext4_xattr_inode_iget(inode, ea_ino, &err);",
          "854:  if (err)",
          "855:   return err;",
          "857:  clear_nlink(ea_inode);",
          "858:  iput(ea_inode);",
          "860:  return 0;",
          "861: }",
          "866: static int ext4_xattr_inode_set(handle_t *handle, struct inode *inode,",
          "867:     unsigned long *ea_ino, const void *value,",
          "868:     size_t value_len)",
          "869: {",
          "870:  struct inode *ea_inode;",
          "871:  int err;",
          "874:  ea_inode = ext4_xattr_inode_create(handle, inode);",
          "875:  if (IS_ERR(ea_inode))",
          "876:   return PTR_ERR(ea_inode);",
          "878:  err = ext4_xattr_inode_write(handle, ea_inode, value, value_len);",
          "879:  if (err)",
          "880:   clear_nlink(ea_inode);",
          "881:  else",
          "884:  iput(ea_inode);",
          "886:  return err;",
          "887: }",
          "889: static int ext4_xattr_set_entry(struct ext4_xattr_info *i,",
          "890:     struct ext4_xattr_search *s,",
          "891:     handle_t *handle, struct inode *inode)",
          "895:  int in_inode = i->in_inode;",
          "896:  int rc;",
          "898:  if (ext4_has_feature_ea_inode(inode->i_sb) &&",
          "899:      (EXT4_XATTR_SIZE(i->value_len) >",
          "900:       EXT4_XATTR_MIN_LARGE_EA_SIZE(inode->i_sb->s_blocksize)))",
          "901:   in_inode = 1;",
          "906:   if (!last->e_value_inum && last->e_value_size) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "648:  }",
          "649:  free = min_offs - ((void *)last - s->base) - sizeof(__u32);",
          "650:  if (!s->not_found) {",
          "652:    size_t size = le32_to_cpu(s->here->e_value_size);",
          "653:    free += EXT4_XATTR_SIZE(size);",
          "654:   }",
          "655:   free += EXT4_XATTR_LEN(name_len);",
          "656:  }",
          "657:  if (i->value) {",
          "660:    return -ENOSPC;",
          "661:  }",
          "",
          "[Removed Lines]",
          "651:   if (s->here->e_value_size) {",
          "658:   if (free < EXT4_XATTR_LEN(name_len) +",
          "659:       EXT4_XATTR_SIZE(i->value_len))",
          "",
          "[Added Lines]",
          "914:   if (!in_inode &&",
          "915:       !s->here->e_value_inum && s->here->e_value_size) {",
          "922:   size_t value_len = EXT4_XATTR_SIZE(i->value_len);",
          "924:   if (in_inode)",
          "925:    value_len = 0;",
          "927:   if (free < EXT4_XATTR_LEN(name_len) + value_len)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "670:   s->here->e_name_len = name_len;",
          "671:   memcpy(s->here->e_name, i->name, name_len);",
          "672:  } else {",
          "674:    void *first_val = s->base + min_offs;",
          "675:    size_t offs = le16_to_cpu(s->here->e_value_offs);",
          "676:    void *val = s->base + offs;",
          "",
          "[Removed Lines]",
          "673:   if (s->here->e_value_size) {",
          "",
          "[Added Lines]",
          "941:   if (!s->here->e_value_inum && s->here->e_value_size &&",
          "942:       s->here->e_value_offs > 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "704:    last = s->first;",
          "705:    while (!IS_LAST_ENTRY(last)) {",
          "706:     size_t o = le16_to_cpu(last->e_value_offs);",
          "708:      last->e_value_offs =",
          "709:       cpu_to_le16(o + size);",
          "710:     last = EXT4_XATTR_NEXT(last);",
          "711:    }",
          "712:   }",
          "713:   if (!i->value) {",
          "715:    size_t size = EXT4_XATTR_LEN(name_len);",
          "",
          "[Removed Lines]",
          "707:     if (last->e_value_size && o < offs)",
          "",
          "[Added Lines]",
          "976:     if (!last->e_value_inum &&",
          "977:         last->e_value_size && o < offs)",
          "983:   if (s->here->e_value_inum) {",
          "984:    ext4_xattr_inode_unlink(inode,",
          "985:          le32_to_cpu(s->here->e_value_inum));",
          "986:    s->here->e_value_inum = 0;",
          "987:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "723:  if (i->value) {",
          "727:    size_t size = EXT4_XATTR_SIZE(i->value_len);",
          "728:    void *val = s->base + min_offs - size;",
          "729:    s->here->e_value_offs = cpu_to_le16(min_offs - size);",
          "730:    if (i->value == EXT4_ZERO_XATTR_VALUE) {",
          "731:     memset(val, 0, size);",
          "732:    } else {",
          "",
          "[Removed Lines]",
          "725:   s->here->e_value_size = cpu_to_le32(i->value_len);",
          "726:   if (i->value_len) {",
          "",
          "[Added Lines]",
          "1000:   if (in_inode) {",
          "1001:    unsigned long ea_ino =",
          "1002:     le32_to_cpu(s->here->e_value_inum);",
          "1003:    rc = ext4_xattr_inode_set(handle, inode, &ea_ino,",
          "1004:         i->value, i->value_len);",
          "1005:    if (rc)",
          "1006:     goto out;",
          "1007:    s->here->e_value_inum = cpu_to_le32(ea_ino);",
          "1008:    s->here->e_value_offs = 0;",
          "1009:   } else if (i->value_len) {",
          "1013:    s->here->e_value_inum = 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "736:     memcpy(val, i->value, i->value_len);",
          "737:    }",
          "738:   }",
          "739:  }",
          "741: }",
          "743: struct ext4_xattr_block_find {",
          "",
          "[Removed Lines]",
          "740:  return 0;",
          "",
          "[Added Lines]",
          "1023:   s->here->e_value_size = cpu_to_le32(i->value_len);",
          "1026: out:",
          "1027:  return rc;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "802: #define header(x) ((struct ext4_xattr_header *)(x))",
          "806:  if (s->base) {",
          "807:   BUFFER_TRACE(bs->bh, \"get_write_access\");",
          "808:   error = ext4_journal_get_write_access(handle, bs->bh);",
          "",
          "[Removed Lines]",
          "804:  if (i->value && i->value_len > sb->s_blocksize)",
          "805:   return -ENOSPC;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "821:    mb_cache_entry_delete_block(ext4_mb_cache, hash,",
          "822:           bs->bh->b_blocknr);",
          "823:    ea_bdebug(bs->bh, \"modifying in-place\");",
          "825:    if (!error) {",
          "826:     if (!IS_LAST_ENTRY(s->first))",
          "827:      ext4_xattr_rehash(header(s->base),",
          "",
          "[Removed Lines]",
          "824:    error = ext4_xattr_set_entry(i, s);",
          "",
          "[Added Lines]",
          "1109:    error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "870:   s->end = s->base + sb->s_blocksize;",
          "871:  }",
          "874:  if (error == -EFSCORRUPTED)",
          "875:   goto bad_block;",
          "876:  if (error)",
          "",
          "[Removed Lines]",
          "873:  error = ext4_xattr_set_entry(i, s);",
          "",
          "[Added Lines]",
          "1158:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1071:  if (EXT4_I(inode)->i_extra_isize == 0)",
          "1072:   return -ENOSPC;",
          "1074:  if (error) {",
          "1075:   if (error == -ENOSPC &&",
          "1076:       ext4_has_inline_data(inode)) {",
          "",
          "[Removed Lines]",
          "1073:  error = ext4_xattr_set_entry(i, s);",
          "",
          "[Added Lines]",
          "1358:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1082:    error = ext4_xattr_ibody_find(inode, i, is);",
          "1083:    if (error)",
          "1084:     return error;",
          "1086:   }",
          "1087:   if (error)",
          "1088:    return error;",
          "",
          "[Removed Lines]",
          "1085:    error = ext4_xattr_set_entry(i, s);",
          "",
          "[Added Lines]",
          "1370:    error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1098:  return 0;",
          "1099: }",
          "1102:     struct ext4_xattr_info *i,",
          "1103:     struct ext4_xattr_ibody_find *is)",
          "1104: {",
          "",
          "[Removed Lines]",
          "1101: static int ext4_xattr_ibody_set(struct inode *inode,",
          "",
          "[Added Lines]",
          "1386: static int ext4_xattr_ibody_set(handle_t *handle, struct inode *inode,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1109:  if (EXT4_I(inode)->i_extra_isize == 0)",
          "1110:   return -ENOSPC;",
          "1112:  if (error)",
          "1113:   return error;",
          "1114:  header = IHDR(inode, ext4_raw_inode(&is->iloc));",
          "",
          "[Removed Lines]",
          "1111:  error = ext4_xattr_set_entry(i, s);",
          "",
          "[Added Lines]",
          "1396:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1155:   .name = name,",
          "1156:   .value = value,",
          "1157:   .value_len = value_len,",
          "1159:  };",
          "1160:  struct ext4_xattr_ibody_find is = {",
          "1161:   .s = { .not_found = -ENODATA, },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1443:   .in_inode = 0,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1204:  }",
          "1205:  if (!value) {",
          "1206:   if (!is.s.not_found)",
          "1208:   else if (!bs.s.not_found)",
          "1209:    error = ext4_xattr_block_set(handle, inode, &i, &bs);",
          "1210:  } else {",
          "",
          "[Removed Lines]",
          "1207:    error = ext4_xattr_ibody_set(inode, &i, &is);",
          "",
          "[Added Lines]",
          "1492:    error = ext4_xattr_ibody_set(handle, inode, &i, &is);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1215:   if (!bs.s.not_found && ext4_xattr_value_same(&bs.s, &i))",
          "1216:    goto cleanup;",
          "1219:   if (!error && !bs.s.not_found) {",
          "1220:    i.value = NULL;",
          "1221:    error = ext4_xattr_block_set(handle, inode, &i, &bs);",
          "",
          "[Removed Lines]",
          "1218:   error = ext4_xattr_ibody_set(inode, &i, &is);",
          "",
          "[Added Lines]",
          "1503:   error = ext4_xattr_ibody_set(handle, inode, &i, &is);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1226:      goto cleanup;",
          "1227:    }",
          "1228:    error = ext4_xattr_block_set(handle, inode, &i, &bs);",
          "1229:    if (error)",
          "1230:     goto cleanup;",
          "1231:    if (!is.s.not_found) {",
          "1232:     i.value = NULL;",
          "1234:    }",
          "1235:   }",
          "1236:  }",
          "",
          "[Removed Lines]",
          "1233:     error = ext4_xattr_ibody_set(inode, &i, &is);",
          "",
          "[Added Lines]",
          "1514:    if (ext4_has_feature_ea_inode(inode->i_sb) &&",
          "1515:        error == -ENOSPC) {",
          "1518:     i.in_inode = 1;",
          "1519:     error = ext4_xattr_ibody_set(handle, inode,",
          "1520:             &i, &is);",
          "1521:    }",
          "1526:     error = ext4_xattr_ibody_set(handle, inode, &i,",
          "1527:             &is);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1269:         const void *value, size_t value_len, int flags)",
          "1270: {",
          "1271:  handle_t *handle;",
          "1272:  int error, retries = 0;",
          "1273:  int credits = ext4_jbd2_credits_xattr(inode);",
          "1275:  error = dquot_initialize(inode);",
          "1276:  if (error)",
          "1277:   return error;",
          "1278: retry:",
          "1279:  handle = ext4_journal_start(inode, EXT4_HT_XATTR, credits);",
          "1280:  if (IS_ERR(handle)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1566:  struct super_block *sb = inode->i_sb;",
          "1574:  if ((value_len >= EXT4_XATTR_MIN_LARGE_EA_SIZE(sb->s_blocksize)) &&",
          "1575:      ext4_has_feature_ea_inode(sb)) {",
          "1576:   int nrblocks = (value_len + sb->s_blocksize - 1) >>",
          "1577:      sb->s_blocksize_bits;",
          "1580:   credits += EXT4_SINGLEDATA_TRANS_BLOCKS(sb) + 3;",
          "1583:   credits += ext4_meta_trans_blocks(inode, nrblocks, 0);",
          "1584:  }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1286:            value, value_len, flags);",
          "1287:   error2 = ext4_journal_stop(handle);",
          "1288:   if (error == -ENOSPC &&",
          "1290:    goto retry;",
          "1291:   if (error == 0)",
          "1292:    error = error2;",
          "",
          "[Removed Lines]",
          "1289:       ext4_should_retry_alloc(inode->i_sb, &retries))",
          "",
          "[Added Lines]",
          "1597:       ext4_should_retry_alloc(sb, &retries))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1313:  for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {",
          "1315:    new_offs = le16_to_cpu(last->e_value_offs) +",
          "1316:        value_offs_shift;",
          "1317:    last->e_value_offs = cpu_to_le16(new_offs);",
          "",
          "[Removed Lines]",
          "1314:   if (last->e_value_size) {",
          "",
          "[Added Lines]",
          "1622:   if (!last->e_value_inum && last->e_value_size) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1372:   goto out;",
          "1376:  if (error)",
          "1377:   goto out;",
          "",
          "[Removed Lines]",
          "1375:  error = ext4_xattr_ibody_set(inode, &i, is);",
          "",
          "[Added Lines]",
          "1683:  error = ext4_xattr_ibody_set(handle, inode, &i, is);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1572: }",
          "1585: {",
          "1586:  struct buffer_head *bh = NULL;",
          "1589:   goto cleanup;",
          "1590:  bh = sb_bread(inode->i_sb, EXT4_I(inode)->i_file_acl);",
          "1591:  if (!bh) {",
          "1592:   EXT4_ERROR_INODE(inode, \"block %llu read error\",",
          "",
          "[Removed Lines]",
          "1583: void",
          "1584: ext4_xattr_delete_inode(handle_t *handle, struct inode *inode)",
          "1588:  if (!EXT4_I(inode)->i_file_acl)",
          "",
          "[Added Lines]",
          "1884: #define EIA_MASK (EIA_INCR - 1)",
          "1889: static int",
          "1890: ext4_expand_ino_array(struct ext4_xattr_ino_array **lea_ino_array, __u32 ino)",
          "1891: {",
          "1892:  if (*lea_ino_array == NULL) {",
          "1897:   (*lea_ino_array) =",
          "1898:    kmalloc(offsetof(struct ext4_xattr_ino_array,",
          "1899:       xia_inodes[EIA_MASK]),",
          "1900:     GFP_NOFS);",
          "1901:   if (*lea_ino_array == NULL)",
          "1902:    return -ENOMEM;",
          "1903:   (*lea_ino_array)->xia_count = 0;",
          "1904:  } else if (((*lea_ino_array)->xia_count & EIA_MASK) == EIA_MASK) {",
          "1906:   struct ext4_xattr_ino_array *new_array = NULL;",
          "1907:   int count = (*lea_ino_array)->xia_count;",
          "1910:   new_array = kmalloc(",
          "1911:     offsetof(struct ext4_xattr_ino_array,",
          "1912:       xia_inodes[count + EIA_INCR]),",
          "1913:     GFP_NOFS);",
          "1914:   if (new_array == NULL)",
          "1915:    return -ENOMEM;",
          "1916:   memcpy(new_array, *lea_ino_array,",
          "1917:          offsetof(struct ext4_xattr_ino_array,",
          "1918:     xia_inodes[count]));",
          "1919:   kfree(*lea_ino_array);",
          "1921:  }",
          "1922:  (*lea_ino_array)->xia_inodes[(*lea_ino_array)->xia_count++] = ino;",
          "1923:  return 0;",
          "1924: }",
          "1929: static int",
          "1930: ext4_xattr_inode_orphan_add(handle_t *handle, struct inode *inode,",
          "1931:    int credits, struct ext4_xattr_ino_array *lea_ino_array)",
          "1932: {",
          "1933:  struct inode *ea_inode = NULL;",
          "1934:  int idx = 0, error = 0;",
          "1936:  if (lea_ino_array == NULL)",
          "1937:   return 0;",
          "1939:  for (; idx < lea_ino_array->xia_count; ++idx) {",
          "1940:   if (!ext4_handle_has_enough_credits(handle, credits)) {",
          "1941:    error = ext4_journal_extend(handle, credits);",
          "1942:    if (error > 0)",
          "1943:     error = ext4_journal_restart(handle, credits);",
          "1945:    if (error != 0) {",
          "1946:     ext4_warning(inode->i_sb,",
          "1947:      \"couldn't extend journal \"",
          "1948:      \"(err %d)\", error);",
          "1949:     return error;",
          "1950:    }",
          "1951:   }",
          "1952:   ea_inode = ext4_xattr_inode_iget(inode,",
          "1953:     lea_ino_array->xia_inodes[idx], &error);",
          "1954:   if (error)",
          "1955:    continue;",
          "1956:   ext4_orphan_add(handle, ea_inode);",
          "1958:  }",
          "1960:  return 0;",
          "1961: }",
          "1973: int",
          "1974: ext4_xattr_delete_inode(handle_t *handle, struct inode *inode,",
          "1975:    struct ext4_xattr_ino_array **lea_ino_array)",
          "1978:  struct ext4_xattr_ibody_header *header;",
          "1979:  struct ext4_inode *raw_inode;",
          "1980:  struct ext4_iloc iloc;",
          "1981:  struct ext4_xattr_entry *entry;",
          "1982:  int credits = 3, error = 0;",
          "1984:  if (!ext4_test_inode_state(inode, EXT4_STATE_XATTR))",
          "1985:   goto delete_external_ea;",
          "1987:  error = ext4_get_inode_loc(inode, &iloc);",
          "1988:  if (error)",
          "1989:   goto cleanup;",
          "1990:  raw_inode = ext4_raw_inode(&iloc);",
          "1991:  header = IHDR(inode, raw_inode);",
          "1992:  for (entry = IFIRST(header); !IS_LAST_ENTRY(entry);",
          "1993:       entry = EXT4_XATTR_NEXT(entry)) {",
          "1994:   if (!entry->e_value_inum)",
          "1995:    continue;",
          "1996:   if (ext4_expand_ino_array(lea_ino_array,",
          "1997:        entry->e_value_inum) != 0) {",
          "1998:    brelse(iloc.bh);",
          "1999:    goto cleanup;",
          "2000:   }",
          "2001:   entry->e_value_inum = 0;",
          "2002:  }",
          "2003:  brelse(iloc.bh);",
          "2005: delete_external_ea:",
          "2006:  if (!EXT4_I(inode)->i_file_acl) {",
          "2008:   ext4_xattr_inode_orphan_add(handle, inode, credits,",
          "2011:  }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1599:      EXT4_I(inode)->i_file_acl);",
          "1600:   goto cleanup;",
          "1601:  }",
          "1602:  ext4_xattr_release_block(handle, inode, bh);",
          "1603:  EXT4_I(inode)->i_file_acl = 0;",
          "1605: cleanup:",
          "1606:  brelse(bh);",
          "1607: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:  for (entry = BFIRST(bh); !IS_LAST_ENTRY(entry);",
          "2026:       entry = EXT4_XATTR_NEXT(entry)) {",
          "2027:   if (!entry->e_value_inum)",
          "2028:    continue;",
          "2029:   if (ext4_expand_ino_array(lea_ino_array,",
          "2030:        entry->e_value_inum) != 0)",
          "2031:    goto cleanup;",
          "2032:   entry->e_value_inum = 0;",
          "2033:  }",
          "2036:  error = ext4_xattr_inode_orphan_add(handle, inode, credits,",
          "2038:  if (error != 0)",
          "2039:   goto cleanup;",
          "2041:  if (!IS_NOQUOTA(inode))",
          "2042:   credits += 2 * EXT4_QUOTA_DEL_BLOCKS(inode->i_sb);",
          "2044:  if (!ext4_handle_has_enough_credits(handle, credits)) {",
          "2045:   error = ext4_journal_extend(handle, credits);",
          "2046:   if (error > 0)",
          "2047:    error = ext4_journal_restart(handle, credits);",
          "2048:   if (error != 0) {",
          "2049:    ext4_warning(inode->i_sb,",
          "2050:     \"couldn't extend journal (err %d)\", error);",
          "2051:    goto cleanup;",
          "2052:   }",
          "2053:  }",
          "2061:  return error;",
          "2062: }",
          "2064: void",
          "2065: ext4_xattr_inode_array_free(struct inode *inode,",
          "2066:        struct ext4_xattr_ino_array *lea_ino_array)",
          "2067: {",
          "2068:  struct inode *ea_inode = NULL;",
          "2069:  int  idx = 0;",
          "2070:  int  err;",
          "2072:  if (lea_ino_array == NULL)",
          "2073:   return;",
          "2075:  for (; idx < lea_ino_array->xia_count; ++idx) {",
          "2076:   ea_inode = ext4_xattr_inode_iget(inode,",
          "2077:     lea_ino_array->xia_inodes[idx], &err);",
          "2078:   if (err)",
          "2079:    continue;",
          "2081:   if (!list_empty(&EXT4_I(ea_inode)->i_orphan))",
          "2082:    iput(ea_inode);",
          "2083:   clear_nlink(ea_inode);",
          "2084:   iput(ea_inode);",
          "2085:  }",
          "2086:  kfree(lea_ino_array);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1655:       entry1->e_name_index != entry2->e_name_index ||",
          "1656:       entry1->e_name_len != entry2->e_name_len ||",
          "1657:       entry1->e_value_size != entry2->e_value_size ||",
          "1658:       memcmp(entry1->e_name, entry2->e_name, entry1->e_name_len))",
          "1659:    return 1;",
          "1662:   if (memcmp((char *)header1 + le16_to_cpu(entry1->e_value_offs),",
          "1663:       (char *)header2 + le16_to_cpu(entry2->e_value_offs),",
          "1664:       le32_to_cpu(entry1->e_value_size)))",
          "",
          "[Removed Lines]",
          "1660:   if (entry1->e_value_block != 0 || entry2->e_value_block != 0)",
          "1661:    return -EFSCORRUPTED;",
          "",
          "[Added Lines]",
          "2138:       entry1->e_value_inum != entry2->e_value_inum ||",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1731:  }",
          "1734:   __le32 *value = (__le32 *)((char *)header +",
          "1735:    le16_to_cpu(entry->e_value_offs));",
          "1736:   for (n = (le32_to_cpu(entry->e_value_size) +",
          "",
          "[Removed Lines]",
          "1733:  if (entry->e_value_size != 0) {",
          "",
          "[Added Lines]",
          "2212:  if (!entry->e_value_inum && entry->e_value_size) {",
          "",
          "---------------"
        ],
        "fs/ext4/xattr.h||fs/ext4/xattr.h": [
          "File: fs/ext4/xattr.h -> fs/ext4/xattr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   EXT4_I(inode)->i_extra_isize))",
          "70: #define IFIRST(hdr) ((struct ext4_xattr_entry *)((hdr)+1))",
          "72: #define BHDR(bh) ((struct ext4_xattr_header *)((bh)->b_data))",
          "73: #define ENTRY(ptr) ((struct ext4_xattr_entry *)(ptr))",
          "74: #define BFIRST(bh) ENTRY(BHDR(bh)+1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #define EXT4_XATTR_INODE_SET_PARENT(inode, inum)      \\",
          "78: do {                                                  \\",
          "79:       (inode)->i_mtime.tv_sec = inum;                 \\",
          "80: } while(0)",
          "82: #define EXT4_XATTR_INODE_GET_PARENT(inode)            \\",
          "83: ((__u32)(inode)->i_mtime.tv_sec)",
          "89: #define EXT4_XATTR_MIN_LARGE_EA_SIZE(b)     \\",
          "90:  ((b) - EXT4_XATTR_LEN(3) - sizeof(struct ext4_xattr_header) - 4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: #define EXT4_ZERO_XATTR_VALUE ((void *)-1)",
          "79: struct ext4_xattr_info {",
          "81:  const char *name;",
          "82:  const void *value;",
          "83:  size_t value_len;",
          "84: };",
          "86: struct ext4_xattr_search {",
          "",
          "[Removed Lines]",
          "80:  int name_index;",
          "",
          "[Added Lines]",
          "103:  int name_index;",
          "104:  int in_inode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int);",
          "141: extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int);",
          "145: extern int ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,",
          "146:        struct ext4_inode *raw_inode, handle_t *handle);",
          "",
          "[Removed Lines]",
          "143: extern void ext4_xattr_delete_inode(handle_t *, struct inode *);",
          "",
          "[Added Lines]",
          "164: extern struct inode *ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino,",
          "165:         int *err);",
          "166: extern int ext4_xattr_inode_unlink(struct inode *inode, unsigned long ea_ino);",
          "167: extern int ext4_xattr_delete_inode(handle_t *handle, struct inode *inode,",
          "168:        struct ext4_xattr_ino_array **array);",
          "169: extern void ext4_xattr_inode_array_free(struct inode *inode,",
          "170:      struct ext4_xattr_ino_array *array);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daf8328172dffabb4a6b5e1970d6e9628669f51c",
      "candidate_info": {
        "commit_hash": "daf8328172dffabb4a6b5e1970d6e9628669f51c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/daf8328172dffabb4a6b5e1970d6e9628669f51c",
        "files": [
          "fs/ext4/xattr.c"
        ],
        "message": "ext4: eliminate xattr entry e_hash recalculation for removes\n\nWhen an extended attribute block is modified, ext4_xattr_hash_entry()\nrecalculates e_hash for the entry that is pointed by s->here. This  is\nunnecessary if the modification is to remove an entry.\n\nCurrently, if the removed entry is the last one and there are other\nentries remaining, hash calculation targets the just erased entry which\nhas been filled with zeroes and effectively does nothing.  If the removed\nentry is not the last one and there are more entries, this time it will\nrecalculate hash on the next entry which is totally unnecessary.\n\nFix these by moving the decision on when to recalculate hash to\next4_xattr_set_entry().\n\nSigned-off-by: Tahsin Erdogan <tahsin@google.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/xattr.c||fs/ext4/xattr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ],
          "candidate": [
            "fs/ext4/xattr.c||fs/ext4/xattr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/xattr.c||fs/ext4/xattr.c": [
          "File: fs/ext4/xattr.c -> fs/ext4/xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: static struct buffer_head *",
          "78: ext4_xattr_block_cache_find(struct inode *, struct ext4_xattr_header *,",
          "79:        struct mb_cache_entry **);",
          "83: static const struct xattr_handler * const ext4_xattr_handler_map[] = {",
          "84:  [EXT4_XATTR_INDEX_USER]       = &ext4_xattr_user_handler,",
          "",
          "[Removed Lines]",
          "80: static void ext4_xattr_rehash(struct ext4_xattr_header *,",
          "81:          struct ext4_xattr_entry *);",
          "",
          "[Added Lines]",
          "80: static void ext4_xattr_hash_entry(struct ext4_xattr_entry *entry,",
          "81:       void *value_base);",
          "82: static void ext4_xattr_rehash(struct ext4_xattr_header *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1468: static int ext4_xattr_set_entry(struct ext4_xattr_info *i,",
          "1469:     struct ext4_xattr_search *s,",
          "1471: {",
          "1472:  struct ext4_xattr_entry *last;",
          "1473:  struct ext4_xattr_entry *here = s->here;",
          "",
          "[Removed Lines]",
          "1470:     handle_t *handle, struct inode *inode)",
          "",
          "[Added Lines]",
          "1471:     handle_t *handle, struct inode *inode,",
          "1472:     bool is_block)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1536:       (min_offs + old_size - new_size) <",
          "1537:      EXT4_XATTR_BLOCK_RESERVE(inode)) {",
          "1538:    ret = -ENOSPC;",
          "",
          "[Removed Lines]",
          "1534:   if (ext4_has_feature_ea_inode(inode->i_sb) && new_size &&",
          "1535:       (s->end - s->base) == i_blocksize(inode) &&",
          "",
          "[Added Lines]",
          "1536:   if (ext4_has_feature_ea_inode(inode->i_sb) &&",
          "1537:       new_size && is_block &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1662:   }",
          "1663:   here->e_value_size = cpu_to_le32(i->value_len);",
          "1664:  }",
          "1665:  ret = 0;",
          "1666: out:",
          "1667:  iput(old_ea_inode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1668:  if (is_block) {",
          "1669:   if (i->value)",
          "1670:    ext4_xattr_hash_entry(here, s->base);",
          "1671:   ext4_xattr_rehash((struct ext4_xattr_header *)s->base);",
          "1672:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1751:    mb_cache_entry_delete(ea_block_cache, hash,",
          "1752:            bs->bh->b_blocknr);",
          "1753:    ea_bdebug(bs->bh, \"modifying in-place\");",
          "1759:     ext4_xattr_block_cache_insert(ea_block_cache,",
          "1760:              bs->bh);",
          "1762:    ext4_xattr_block_csum_set(inode, bs->bh);",
          "1763:    unlock_buffer(bs->bh);",
          "1764:    if (error == -EFSCORRUPTED)",
          "",
          "[Removed Lines]",
          "1754:    error = ext4_xattr_set_entry(i, s, handle, inode);",
          "1755:    if (!error) {",
          "1756:     if (!IS_LAST_ENTRY(s->first))",
          "1757:      ext4_xattr_rehash(header(s->base),",
          "1758:          s->here);",
          "1761:    }",
          "",
          "[Added Lines]",
          "1763:    error = ext4_xattr_set_entry(i, s, handle, inode,",
          "1764:            true /* is_block */);",
          "1765:    if (!error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1818:   s->end = s->base + sb->s_blocksize;",
          "1819:  }",
          "1822:  if (error == -EFSCORRUPTED)",
          "1823:   goto bad_block;",
          "1824:  if (error)",
          "",
          "[Removed Lines]",
          "1821:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "[Added Lines]",
          "1827:  error = ext4_xattr_set_entry(i, s, handle, inode, true /* is_block */);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1841:   }",
          "1842:  }",
          "1847: inserted:",
          "1848:  if (!IS_LAST_ENTRY(s->first)) {",
          "1849:   new_bh = ext4_xattr_block_cache_find(inode, header(s->base),",
          "",
          "[Removed Lines]",
          "1844:  if (!IS_LAST_ENTRY(s->first))",
          "1845:   ext4_xattr_rehash(header(s->base), s->here);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2077:  if (EXT4_I(inode)->i_extra_isize == 0)",
          "2078:   return -ENOSPC;",
          "2080:  if (error) {",
          "2081:   if (error == -ENOSPC &&",
          "2082:       ext4_has_inline_data(inode)) {",
          "",
          "[Removed Lines]",
          "2079:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "[Added Lines]",
          "2082:  error = ext4_xattr_set_entry(i, s, handle, inode, false /* is_block */);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2088:    error = ext4_xattr_ibody_find(inode, i, is);",
          "2089:    if (error)",
          "2090:     return error;",
          "2092:   }",
          "2093:   if (error)",
          "2094:    return error;",
          "",
          "[Removed Lines]",
          "2091:    error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "[Added Lines]",
          "2094:    error = ext4_xattr_set_entry(i, s, handle, inode,",
          "2095:            false /* is_block */);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2115:  if (EXT4_I(inode)->i_extra_isize == 0)",
          "2116:   return -ENOSPC;",
          "2118:  if (error)",
          "2119:   return error;",
          "2120:  header = IHDR(inode, ext4_raw_inode(&is->iloc));",
          "",
          "[Removed Lines]",
          "2117:  error = ext4_xattr_set_entry(i, s, handle, inode);",
          "",
          "[Added Lines]",
          "2121:  error = ext4_xattr_set_entry(i, s, handle, inode, false /* is_block */);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2945: {",
          "2946:  __u32 hash = 0;",
          "2947:  char *name = entry->e_name;",
          "",
          "[Removed Lines]",
          "2943: static inline void ext4_xattr_hash_entry(struct ext4_xattr_header *header,",
          "2944:       struct ext4_xattr_entry *entry)",
          "",
          "[Added Lines]",
          "2947: static void ext4_xattr_hash_entry(struct ext4_xattr_entry *entry,",
          "2948:       void *value_base)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2954:  }",
          "2956:  if (!entry->e_value_inum && entry->e_value_size) {",
          "2958:    le16_to_cpu(entry->e_value_offs));",
          "2959:   for (n = (le32_to_cpu(entry->e_value_size) +",
          "2960:        EXT4_XATTR_ROUND) >> EXT4_XATTR_PAD_BITS; n; n--) {",
          "",
          "[Removed Lines]",
          "2957:   __le32 *value = (__le32 *)((char *)header +",
          "",
          "[Added Lines]",
          "2961:   __le32 *value = (__le32 *)((char *)value_base +",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2981: {",
          "2982:  struct ext4_xattr_entry *here;",
          "2983:  __u32 hash = 0;",
          "2986:  here = ENTRY(header+1);",
          "2987:  while (!IS_LAST_ENTRY(here)) {",
          "2988:   if (!here->e_hash) {",
          "",
          "[Removed Lines]",
          "2979: static void ext4_xattr_rehash(struct ext4_xattr_header *header,",
          "2980:          struct ext4_xattr_entry *entry)",
          "2985:  ext4_xattr_hash_entry(header, entry);",
          "",
          "[Added Lines]",
          "2983: static void ext4_xattr_rehash(struct ext4_xattr_header *header)",
          "",
          "---------------"
        ]
      }
    }
  ]
}