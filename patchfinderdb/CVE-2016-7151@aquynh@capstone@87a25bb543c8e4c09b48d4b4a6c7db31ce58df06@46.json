{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be3f8674e1faed71023ba7a81a7e2c03d11a64b4",
      "candidate_info": {
        "commit_hash": "be3f8674e1faed71023ba7a81a7e2c03d11a64b4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/be3f8674e1faed71023ba7a81a7e2c03d11a64b4",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_m68k.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_x86.c"
        ],
        "message": "cstool: add m68k and change cstool_x86",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_m68k.c||cstool/cstool_m68k.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: void print_insn_detail_sparc(csh handle, cs_insn *ins);",
          "18: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "21: void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "22: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  if (cs_support(CS_ARCH_XCORE)) {",
          "123:   printf(\"        xcore:     xcore\\n\");",
          "124:  }",
          "126:  printf(\"\\n\");",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (cs_support(CS_ARCH_M68K)) {",
          "128:   printf(\"        m68kb:     m68k+big endian\\n\");",
          "129:   printf(\"        m68k40:    m68k_040\\n\");",
          "131:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:   arch = CS_ARCH_XCORE;",
          "309:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "310:  }",
          "312:  if (err) {",
          "313:   printf(\"ERROR: Failed on cs_open(), quit!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:  if (!strcmp(mode,\"m68kb\")) {",
          "320:   arch = CS_ARCH_M68K;",
          "321:   err = cs_open(CS_ARCH_M68K, CS_MODE_BIG_ENDIAN, &handle);",
          "322:  }",
          "324:  if (!strcmp(mode,\"m68k40\")) {",
          "325:   arch = CS_ARCH_M68K;",
          "326:   err = cs_open(CS_ARCH_M68K, CS_MODE_M68K_040, &handle);",
          "327:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:     if (arch == CS_ARCH_XCORE) {",
          "373:      print_insn_detail_xcore(handle, &insn[i]);",
          "374:     }",
          "375:    }",
          "376:   }",
          "377:   cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:     if (arch == CS_ARCH_M68K) {",
          "395:      print_insn_detail_m68k(handle, &insn[i]);",
          "396:     }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: {",
          "10:  cs_arm *arm;",
          "11:  int i;",
          "14:  if (ins->detail == NULL)",
          "15:   return;",
          "17:  arm = &(ins->detail->arm);",
          "19:  if (arm->op_count)",
          "20:   printf(\"\\top_count: %u\\n\", arm->op_count);",
          "22:  for (i = 0; i < arm->op_count; i++) {",
          "23:   cs_arm_op *op = &(arm->operands[i]);",
          "24:   switch((int)op->type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  cs_regs regs_read, regs_write;",
          "13:  uint8_t regs_read_count, regs_write_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     break;",
          "41:    case ARM_OP_MEM:",
          "42:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "44:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "47:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "49:     if (op->mem.scale != 1)",
          "50:      printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "51:     if (op->mem.disp != 0)",
          "52:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "54:     break;",
          "55:    case ARM_OP_PIMM:",
          "56:     printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "",
          "[Removed Lines]",
          "43:     if (op->mem.base != X86_REG_INVALID)",
          "45:        i, cs_reg_name(handle, op->mem.base));",
          "46:     if (op->mem.index != X86_REG_INVALID)",
          "48:        i, cs_reg_name(handle, op->mem.index));",
          "",
          "[Added Lines]",
          "45:     if (op->mem.base != ARM_REG_INVALID)",
          "47:          i, cs_reg_name(handle, op->mem.base));",
          "48:     if (op->mem.index != ARM_REG_INVALID)",
          "50:          i, cs_reg_name(handle, op->mem.index));",
          "55:     if (op->mem.lshift != 0)",
          "56:      printf(\"\\t\\t\\toperands[%u].mem.lshift: 0x%x\\n\", i, op->mem.lshift);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     printf(\"\\t\\toperands[%u].type: SYSREG = %u\\n\", i, op->reg);",
          "66:     break;",
          "67:   }",
          "69:   if (op->shift.type != ARM_SFT_INVALID && op->shift.value) {",
          "70:    if (op->shift.type < ARM_SFT_ASR_REG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if (op->neon_lane != -1) {",
          "74:    printf(\"\\t\\toperands[%u].neon_lane = %u\\n\", i, op->neon_lane);",
          "75:   }",
          "77:   switch(op->access) {",
          "78:    default:",
          "79:     break;",
          "80:    case CS_AC_READ:",
          "81:     printf(\"\\t\\toperands[%u].access: READ\\n\", i);",
          "82:     break;",
          "83:    case CS_AC_WRITE:",
          "84:     printf(\"\\t\\toperands[%u].access: WRITE\\n\", i);",
          "85:     break;",
          "86:    case CS_AC_READ | CS_AC_WRITE:",
          "87:     printf(\"\\t\\toperands[%u].access: READ | WRITE\\n\", i);",
          "88:     break;",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:    else",
          "75:     printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "77:   }",
          "79:   if (op->vector_index != -1) {",
          "80:    printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "81:   }",
          "83:   if (op->subtracted)",
          "84:    printf(\"\\t\\tSubtracted: True\\n\");",
          "85:  }",
          "87:  if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "88:   printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "90:  if (arm->update_flags)",
          "91:   printf(\"\\tUpdate-flags: True\\n\");",
          "93:  if (arm->writeback)",
          "94:   printf(\"\\tWrite-back: True\\n\");",
          "96:  if (arm->cps_mode)",
          "97:   printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "99:  if (arm->cps_flag)",
          "100:   printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "102:  if (arm->vector_data)",
          "103:   printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "105:  if (arm->vector_size)",
          "106:   printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "108:  if (arm->usermode)",
          "109:   printf(\"\\tUser-mode: True\\n\");",
          "111:  if (arm->mem_barrier)",
          "112:   printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "114:  printf(\"\\n\");",
          "115: }",
          "",
          "[Removed Lines]",
          "76:       cs_reg_name(handle, op->shift.value));",
          "",
          "[Added Lines]",
          "98:         cs_reg_name(handle, op->shift.value));",
          "137:  if (!cs_regs_access(handle, ins,",
          "138:       regs_read, &regs_read_count,",
          "139:       regs_write, &regs_write_count)) {",
          "140:   if (regs_read_count) {",
          "141:    printf(\"\\tRegisters read:\");",
          "142:    for(i = 0; i < regs_read_count; i++) {",
          "143:     printf(\" %s\", cs_reg_name(handle, regs_read[i]));",
          "144:    }",
          "145:    printf(\"\\n\");",
          "146:   }",
          "148:   if (regs_write_count) {",
          "149:    printf(\"\\tRegisters modified:\");",
          "150:    for(i = 0; i < regs_write_count; i++) {",
          "151:     printf(\" %s\", cs_reg_name(handle, regs_write[i]));",
          "152:    }",
          "153:    printf(\"\\n\");",
          "154:   }",
          "155:  }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: {",
          "13:  cs_arm64 *arm64;",
          "14:  int i;",
          "17:  if (ins->detail == NULL)",
          "18:   return;",
          "20:  arm64 = &(ins->detail->arm64);",
          "21:  if (arm64->op_count)",
          "22:   printf(\"\\top_count: %u\\n\", arm64->op_count);",
          "24:  for (i = 0; i < arm64->op_count; i++) {",
          "25:   cs_arm64_op *op = &(arm64->operands[i]);",
          "26:   switch(op->type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  cs_regs regs_read, regs_write;",
          "16:  uint8_t regs_read_count, regs_write_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     printf(\"\\t\\toperands[%u].type: BARRIER = 0x%x\\n\", i, op->barrier);",
          "73:     break;",
          "74:   }",
          "76:   if (op->shift.type != ARM64_SFT_INVALID &&",
          "78:    printf(\"\\t\\t\\tShift: type = %u, value = %u\\n\",",
          "81:   if (op->ext != ARM64_EXT_INVALID)",
          "82:    printf(\"\\t\\t\\tExt: %u\\n\", op->ext);",
          "84:   if (op->vas != ARM64_VAS_INVALID)",
          "85:    printf(\"\\t\\t\\tVector Arrangement Specifier: 0x%x\\n\", op->vas);",
          "87:   if (op->vess != ARM64_VESS_INVALID)",
          "88:    printf(\"\\t\\t\\tVector Element Size Specifier: %u\\n\", op->vess);",
          "90:   if (op->vector_index != -1)",
          "91:    printf(\"\\t\\t\\tVector Index: %u\\n\", op->vector_index);",
          "92:  }",
          "94:  if (arm64->update_flags)",
          "95:   printf(\"\\tUpdate-flags: True\\n\");",
          "97:  if (arm64->writeback)",
          "98:   printf(\"\\tWrite-back: True\\n\");",
          "100:  if (arm64->cc)",
          "101:   printf(\"\\tCode-condition: %u\\n\", arm64->cc);",
          "103:  printf(\"\\n\");",
          "104: }",
          "",
          "[Removed Lines]",
          "77:     op->shift.value)",
          "79:      op->shift.type, op->shift.value);",
          "",
          "[Added Lines]",
          "78:   uint8_t access = op->access;",
          "79:   switch(access) {",
          "80:    default:",
          "81:     break;",
          "82:    case CS_AC_READ:",
          "83:     printf(\"\\t\\toperands[%u].access: READ\\n\", i);",
          "84:     break;",
          "85:    case CS_AC_WRITE:",
          "86:     printf(\"\\t\\toperands[%u].access: WRITE\\n\", i);",
          "87:     break;",
          "88:    case CS_AC_READ | CS_AC_WRITE:",
          "89:     printf(\"\\t\\toperands[%u].access: READ | WRITE\\n\", i);",
          "90:     break;",
          "91:   }",
          "94:    op->shift.value)",
          "96:        op->shift.type, op->shift.value);",
          "121:  if (!cs_regs_access(handle, ins,",
          "122:       regs_read, &regs_read_count,",
          "123:       regs_write, &regs_write_count)) {",
          "124:   if (regs_read_count) {",
          "125:    printf(\"\\tRegisters read:\");",
          "126:    for(i = 0; i < regs_read_count; i++) {",
          "127:     printf(\" %s\", cs_reg_name(handle, regs_read[i]));",
          "128:    }",
          "129:    printf(\"\\n\");",
          "130:   }",
          "132:   if (regs_write_count) {",
          "133:    printf(\"\\tRegisters modified:\");",
          "134:    for(i = 0; i < regs_write_count; i++) {",
          "135:     printf(\" %s\", cs_reg_name(handle, regs_write[i]));",
          "136:    }",
          "137:    printf(\"\\n\");",
          "138:   }",
          "139:  }",
          "",
          "---------------"
        ],
        "cstool/cstool_m68k.c||cstool/cstool_m68k.c": [
          "File: cstool/cstool_m68k.c -> cstool/cstool_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <stdio.h>",
          "10: #include <capstone/capstone.h>",
          "12: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "14: const char* s_addressing_modes[] = {",
          "15:  \"<invalid mode>\",",
          "17:  \"Register Direct - Data\",",
          "18:  \"Register Direct - Address\",",
          "20:  \"Register Indirect - Address\",",
          "21:  \"Register Indirect - Address with Postincrement\",",
          "22:  \"Register Indirect - Address with Predecrement\",",
          "23:  \"Register Indirect - Address with Displacement\",",
          "25:  \"Address Register Indirect With Index - 8-bit displacement\",",
          "26:  \"Address Register Indirect With Index - Base displacement\",",
          "28:  \"Memory indirect - Postindex\",",
          "29:  \"Memory indirect - Preindex\",",
          "31:  \"Program Counter Indirect - with Displacement\",",
          "33:  \"Program Counter Indirect with Index - with 8-Bit Displacement\",",
          "34:  \"Program Counter Indirect with Index - with Base Displacement\",",
          "36:  \"Program Counter Memory Indirect - Postindexed\",",
          "37:  \"Program Counter Memory Indirect - Preindexed\",",
          "39:  \"Absolute Data Addressing  - Short\",",
          "40:  \"Absolute Data Addressing  - Long\",",
          "41:  \"Immediate value\",",
          "42: };",
          "44: void print_read_write_regs(cs_detail* detail, csh handle)",
          "45: {",
          "46:  int i;",
          "48:  for (i = 0; i < detail->regs_read_count; ++i)",
          "49:  {",
          "50:   uint16_t reg_id = detail->regs_read[i];",
          "51:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "52:   printf(\"\\treading from reg: %s\\n\", reg_name);",
          "53:  }",
          "55:  for (i = 0; i < detail->regs_write_count; ++i)",
          "56:  {",
          "57:   uint16_t reg_id = detail->regs_write[i];",
          "58:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "59:   printf(\"\\twriting to reg:   %s\\n\", reg_name);",
          "60:  }",
          "61: }",
          "63: void print_insn_detail_m68k(csh handle, cs_insn *ins)",
          "64: {",
          "65:  cs_m68k* m68k;",
          "66:  cs_detail* detail;",
          "67:  int i;",
          "70:  if (ins->detail == NULL)",
          "71:   return;",
          "73:  detail = ins->detail;",
          "74:  m68k = &detail->m68k;",
          "75:  if (m68k->op_count)",
          "76:   printf(\"\\top_count: %u\\n\", m68k->op_count);",
          "78:  print_read_write_regs(detail, handle);",
          "80:  printf(\"\\tgroups_count: %u\\n\", detail->groups_count);",
          "82:  for (i = 0; i < m68k->op_count; i++) {",
          "83:   cs_m68k_op* op = &(m68k->operands[i]);",
          "85:   switch((int)op->type) {",
          "86:    default:",
          "87:     break;",
          "88:    case M68K_OP_REG:",
          "89:     printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "90:     break;",
          "91:    case M68K_OP_IMM:",
          "92:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, (int)op->imm);",
          "93:     break;",
          "94:    case M68K_OP_MEM:",
          "95:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "96:     if (op->mem.base_reg != M68K_REG_INVALID)",
          "97:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "98:          i, cs_reg_name(handle, op->mem.base_reg));",
          "99:     if (op->mem.index_reg != M68K_REG_INVALID) {",
          "100:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "101:          i, cs_reg_name(handle, op->mem.index_reg));",
          "102:      printf(\"\\t\\t\\toperands[%u].mem.index: size = %c\\n\",",
          "103:          i, op->mem.index_size ? 'l' : 'w');",
          "104:     }",
          "105:     if (op->mem.disp != 0)",
          "106:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "107:     if (op->mem.scale != 0)",
          "108:      printf(\"\\t\\t\\toperands[%u].mem.scale: %d\\n\", i, op->mem.scale);",
          "110:     printf(\"\\t\\taddress mode: %s\\n\", s_addressing_modes[op->address_mode]);",
          "111:     break;",
          "112:    case M68K_OP_FP_SINGLE:",
          "113:     printf(\"\\t\\toperands[%u].type: FP_SINGLE\\n\", i);",
          "114:     printf(\"\\t\\t\\toperands[%u].simm: %f\\n\", i, op->simm);",
          "115:     break;",
          "116:    case M68K_OP_FP_DOUBLE:",
          "117:     printf(\"\\t\\toperands[%u].type: FP_DOUBLE\\n\", i);",
          "118:     printf(\"\\t\\t\\toperands[%u].dimm: %lf\\n\", i, op->dimm);",
          "119:     break;",
          "120:   }",
          "121:  }",
          "123:  printf(\"\\n\");",
          "124: }",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     break;",
          "35:    case MIPS_OP_MEM:",
          "36:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "38:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "40:     if (op->mem.disp != 0)",
          "41:      printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "43:     break;",
          "44:   }",
          "46:  }",
          "48:  printf(\"\\n\");",
          "49: }",
          "",
          "[Removed Lines]",
          "37:     if (op->mem.base != X86_REG_INVALID)",
          "39:        i, cs_reg_name(handle, op->mem.base));",
          "",
          "[Added Lines]",
          "37:     if (op->mem.base != MIPS_REG_INVALID)",
          "39:          i, cs_reg_name(handle, op->mem.base));",
          "",
          "---------------"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: void print_string_hex(char *comment, unsigned char *str, size_t len);",
          "11: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins)",
          "12: {",
          "13:  int count, i;",
          "14:  cs_x86 *x86;",
          "17:  if (ins->detail == NULL)",
          "18:   return;",
          "20:  x86 = &(ins->detail->x86);",
          "22:  print_string_hex(\"\\tPrefix:\", x86->prefix, 4);",
          "24:  print_string_hex(\"\\tOpcode:\", x86->opcode, 4);",
          "26:  printf(\"\\trex: 0x%x\\n\", x86->rex);",
          "28:  printf(\"\\taddr_size: %u\\n\", x86->addr_size);",
          "29:  printf(\"\\tmodrm: 0x%x\\n\", x86->modrm);",
          "30:  printf(\"\\tdisp: 0x%x\\n\", x86->disp);",
          "33:  if ((mode & CS_MODE_16) == 0) {",
          "34:   printf(\"\\tsib: 0x%x\\n\", x86->sib);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: static char *get_eflag_name(uint64_t flag)",
          "12: {",
          "13:  switch(flag) {",
          "14:   default:",
          "15:    return NULL;",
          "16:   case X86_EFLAGS_UNDEFINED_OF:",
          "17:    return \"UNDEF_OF\";",
          "18:   case X86_EFLAGS_UNDEFINED_SF:",
          "19:    return \"UNDEF_SF\";",
          "20:   case X86_EFLAGS_UNDEFINED_ZF:",
          "21:    return \"UNDEF_ZF\";",
          "22:   case X86_EFLAGS_MODIFY_AF:",
          "23:    return \"MOD_AF\";",
          "24:   case X86_EFLAGS_UNDEFINED_PF:",
          "25:    return \"UNDEF_PF\";",
          "26:   case X86_EFLAGS_MODIFY_CF:",
          "27:    return \"MOD_CF\";",
          "28:   case X86_EFLAGS_MODIFY_SF:",
          "29:    return \"MOD_SF\";",
          "30:   case X86_EFLAGS_MODIFY_ZF:",
          "31:    return \"MOD_ZF\";",
          "32:   case X86_EFLAGS_UNDEFINED_AF:",
          "33:    return \"UNDEF_AF\";",
          "34:   case X86_EFLAGS_MODIFY_PF:",
          "35:    return \"MOD_PF\";",
          "36:   case X86_EFLAGS_UNDEFINED_CF:",
          "37:    return \"UNDEF_CF\";",
          "38:   case X86_EFLAGS_MODIFY_OF:",
          "39:    return \"MOD_OF\";",
          "40:   case X86_EFLAGS_RESET_OF:",
          "41:    return \"RESET_OF\";",
          "42:   case X86_EFLAGS_RESET_CF:",
          "43:    return \"RESET_CF\";",
          "44:   case X86_EFLAGS_RESET_DF:",
          "45:    return \"RESET_DF\";",
          "46:   case X86_EFLAGS_RESET_IF:",
          "47:    return \"RESET_IF\";",
          "48:   case X86_EFLAGS_TEST_OF:",
          "49:    return \"TEST_OF\";",
          "50:   case X86_EFLAGS_TEST_SF:",
          "51:    return \"TEST_SF\";",
          "52:   case X86_EFLAGS_TEST_ZF:",
          "53:    return \"TEST_ZF\";",
          "54:   case X86_EFLAGS_TEST_PF:",
          "55:    return \"TEST_PF\";",
          "56:   case X86_EFLAGS_TEST_CF:",
          "57:    return \"TEST_CF\";",
          "58:   case X86_EFLAGS_RESET_SF:",
          "59:    return \"RESET_SF\";",
          "60:   case X86_EFLAGS_RESET_AF:",
          "61:    return \"RESET_AF\";",
          "62:   case X86_EFLAGS_RESET_TF:",
          "63:    return \"RESET_TF\";",
          "64:   case X86_EFLAGS_RESET_NT:",
          "65:    return \"RESET_NT\";",
          "66:   case X86_EFLAGS_PRIOR_OF:",
          "67:    return \"PRIOR_OF\";",
          "68:   case X86_EFLAGS_PRIOR_SF:",
          "69:    return \"PRIOR_SF\";",
          "70:   case X86_EFLAGS_PRIOR_ZF:",
          "71:    return \"PRIOR_ZF\";",
          "72:   case X86_EFLAGS_PRIOR_AF:",
          "73:    return \"PRIOR_AF\";",
          "74:   case X86_EFLAGS_PRIOR_PF:",
          "75:    return \"PRIOR_PF\";",
          "76:   case X86_EFLAGS_PRIOR_CF:",
          "77:    return \"PRIOR_CF\";",
          "78:   case X86_EFLAGS_PRIOR_TF:",
          "79:    return \"PRIOR_TF\";",
          "80:   case X86_EFLAGS_PRIOR_IF:",
          "81:    return \"PRIOR_IF\";",
          "82:   case X86_EFLAGS_PRIOR_DF:",
          "83:    return \"PRIOR_DF\";",
          "84:   case X86_EFLAGS_TEST_NT:",
          "85:    return \"TEST_NT\";",
          "86:   case X86_EFLAGS_TEST_DF:",
          "87:    return \"TEST_DF\";",
          "88:   case X86_EFLAGS_RESET_PF:",
          "89:    return \"RESET_PF\";",
          "90:   case X86_EFLAGS_PRIOR_NT:",
          "91:    return \"PRIOR_NT\";",
          "92:   case X86_EFLAGS_MODIFY_TF:",
          "93:    return \"MOD_TF\";",
          "94:   case X86_EFLAGS_MODIFY_IF:",
          "95:    return \"MOD_IF\";",
          "96:   case X86_EFLAGS_MODIFY_DF:",
          "97:    return \"MOD_DF\";",
          "98:   case X86_EFLAGS_MODIFY_NT:",
          "99:    return \"MOD_NT\";",
          "100:   case X86_EFLAGS_MODIFY_RF:",
          "101:    return \"MOD_RF\";",
          "102:   case X86_EFLAGS_SET_CF:",
          "103:    return \"SET_CF\";",
          "104:   case X86_EFLAGS_SET_DF:",
          "105:    return \"SET_DF\";",
          "106:   case X86_EFLAGS_SET_IF:",
          "107:    return \"SET_IF\";",
          "108:  }",
          "109: }",
          "115:  cs_regs regs_read, regs_write;",
          "116:  uint8_t regs_read_count, regs_write_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   if (x86->sib_scale != 0)",
          "40:    printf(\"\\t\\tsib_scale: %d\\n\", x86->sib_scale);",
          "41:  }",
          "44:  if (x86->sse_cc != X86_SSE_CC_INVALID) {",
          "45:   printf(\"\\tsse_cc: %u\\n\", x86->sse_cc);",
          "46:  }",
          "49:  if (x86->avx_cc != X86_AVX_CC_INVALID) {",
          "50:   printf(\"\\tavx_cc: %u\\n\", x86->avx_cc);",
          "51:  }",
          "54:  if (x86->avx_sae) {",
          "55:   printf(\"\\tavx_sae: %u\\n\", x86->avx_sae);",
          "56:  }",
          "59:  if (x86->avx_rm != X86_AVX_RM_INVALID) {",
          "60:   printf(\"\\tavx_rm: %u\\n\", x86->avx_rm);",
          "61:  }",
          "63:  count = cs_op_count(ud, ins, X86_OP_IMM);",
          "64:  if (count) {",
          "65:   printf(\"\\timm_count: %u\\n\", count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:  if (x86->xop_cc != X86_XOP_CC_INVALID) {",
          "147:   printf(\"\\txop_cc: %u\\n\", x86->xop_cc);",
          "148:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:    default:",
          "98:     break;",
          "99:   }",
          "102:   if (op->avx_bcast != X86_AVX_BCAST_INVALID)",
          "103:    printf(\"\\t\\toperands[%u].avx_bcast: %u\\n\", i, op->avx_bcast);",
          "106:   if (op->avx_zero_opmask != false)",
          "107:    printf(\"\\t\\toperands[%u].avx_zero_opmask: TRUE\\n\", i);",
          "109:   printf(\"\\t\\toperands[%u].size: %u\\n\", i, op->size);",
          "110:  }",
          "112:  printf(\"\\n\");",
          "113: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   switch(op->access) {",
          "222:    default:",
          "223:     break;",
          "224:    case CS_AC_READ:",
          "225:     printf(\"\\t\\toperands[%u].access: READ\\n\", i);",
          "226:     break;",
          "227:    case CS_AC_WRITE:",
          "228:     printf(\"\\t\\toperands[%u].access: WRITE\\n\", i);",
          "229:     break;",
          "230:    case CS_AC_READ | CS_AC_WRITE:",
          "231:     printf(\"\\t\\toperands[%u].access: READ | WRITE\\n\", i);",
          "232:     break;",
          "233:   }",
          "237:  if (!cs_regs_access(ud, ins,",
          "238:       regs_read, &regs_read_count,",
          "239:       regs_write, &regs_write_count)) {",
          "240:   if (regs_read_count) {",
          "241:    printf(\"\\tRegisters read:\");",
          "242:    for(i = 0; i < regs_read_count; i++) {",
          "243:     printf(\" %s\", cs_reg_name(ud, regs_read[i]));",
          "244:    }",
          "245:    printf(\"\\n\");",
          "246:   }",
          "248:   if (regs_write_count) {",
          "249:    printf(\"\\tRegisters modified:\");",
          "250:    for(i = 0; i < regs_write_count; i++) {",
          "251:     printf(\" %s\", cs_reg_name(ud, regs_write[i]));",
          "252:    }",
          "253:    printf(\"\\n\");",
          "254:   }",
          "255:  }",
          "257:  if (x86->eflags) {",
          "258:   printf(\"\\tEFLAGS:\");",
          "259:   for(i = 0; i <= 45; i++)",
          "260:    if (x86->eflags & ((uint64_t)1 << i)) {",
          "261:     printf(\" %s\", get_eflag_name((uint64_t)1 << i));",
          "262:    }",
          "263:   printf(\"\\n\");",
          "264:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "837752356e3f5f9a4cbe5340bdc06ddfbdd27e0d",
      "candidate_info": {
        "commit_hash": "837752356e3f5f9a4cbe5340bdc06ddfbdd27e0d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/837752356e3f5f9a4cbe5340bdc06ddfbdd27e0d",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c",
          "cstool/cstool_xcore.c"
        ],
        "message": "cstool : print all debug information for all arch.",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_ppc.c||cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c||cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c||cstool/cstool_systemz.c",
          "cstool/cstool_xcore.c||cstool/cstool_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION \"1.0\"",
          "12: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "15: static uint8_t char_to_hexnum(char c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: void print_insn_detail_arm(csh handle, cs_insn *ins);",
          "14: void print_insn_detail_arm64(csh handle, cs_insn *ins);",
          "15: void print_insn_detail_mips(csh handle, cs_insn *ins);",
          "16: void print_insn_detail_ppc(csh handle, cs_insn *ins);",
          "17: void print_insn_detail_sparc(csh handle, cs_insn *ins);",
          "18: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:  cs_insn *insn;",
          "118:  cs_err err;",
          "119:     cs_mode md;",
          "123:  if (argc != 3 && argc != 4 && argc != 5) {",
          "124:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "120:     char *platform;",
          "121:     bool x86_arch = false, debug_flag = false;",
          "",
          "[Added Lines]",
          "127:     char *arch;",
          "128:     bool debug_flag = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:     }",
          "168:  if (!strcmp(mode, \"arm\")) {",
          "169:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "170:  }",
          "172:  if (!strcmp(mode, \"armb\")) {",
          "173:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "174:  }",
          "176:  if (!strcmp(mode, \"arml\")) {",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "178:  }",
          "180:  if (!strcmp(mode, \"thumb\")) {",
          "182:  }",
          "184:  if (!strcmp(mode, \"thumbbe\")) {",
          "185:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"thumble\")) {",
          "189:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"arm64\")) {",
          "193:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"mips\")) {",
          "197:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "198:  }",
          "200:  if (!strcmp(mode, \"mipsbe\")) {",
          "201:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "202:  }",
          "204:  if (!strcmp(mode, \"mips64\")) {",
          "205:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "206:  }",
          "208:  if (!strcmp(mode, \"mips64be\")) {",
          "209:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "210:  }",
          "212:  if (!strcmp(mode, \"x16\")) {",
          "214:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "215:  }",
          "217:  if (!strcmp(mode, \"x32\")) {",
          "218:         md = CS_MODE_32;",
          "221:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "222:  }",
          "224:  if (!strcmp(mode, \"x64\")) {",
          "226:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "227:  }",
          "229:  if (!strcmp(mode, \"x16att\")) {",
          "231:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "232:   if (!err) {",
          "233:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "181:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "213:   x86_arch = true;",
          "219:         platform = \"x32\";",
          "220:   x86_arch = true;",
          "225:   x86_arch = true;",
          "230:   x86_arch = true;",
          "",
          "[Added Lines]",
          "176:         arch = \"arm\";",
          "181:         arch = \"arm\";",
          "186:         arch = \"arm\";",
          "191:         arch = \"arm\";",
          "192:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:         arch = \"arm\";",
          "201:         arch = \"arm\";",
          "206:         arch = \"arm64\";",
          "211:         arch = \"mips\";",
          "216:         arch = \"mips\";",
          "221:         arch = \"mips\";",
          "226:         arch = \"mips\";",
          "231:   arch = \"x86\";",
          "237:   arch = \"x86\";",
          "242:         md = CS_MODE_64;",
          "243:         arch = \"x86\";",
          "248:         md = CS_MODE_16;",
          "249:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:  }",
          "237:  if (!strcmp(mode,\"x32att\")) {",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "240:   if (!err) {",
          "241:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "238:   x86_arch = true;",
          "",
          "[Added Lines]",
          "257:         md = CS_MODE_32;",
          "258:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:  }",
          "245:  if (!strcmp(mode,\"x64att\")) {",
          "247:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "248:   if (!err) {",
          "249:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "246:   x86_arch = true;",
          "",
          "[Added Lines]",
          "266:         md = CS_MODE_64;",
          "267:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:  }",
          "253:  if (!strcmp(mode,\"ppc64\")) {",
          "254:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "255:  }",
          "257:  if (!strcmp(mode,\"ppc64be\")) {",
          "258:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "259:  }",
          "261:  if (!strcmp(mode,\"sparc\")) {",
          "262:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "263:  }",
          "265:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "266:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "267:  }",
          "269:  if (!strcmp(mode,\"xcore\")) {",
          "270:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "271:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:         arch = \"ppc\";",
          "280:          arch = \"ppc\";",
          "285:         arch = \"sparc\";",
          "290:         arch = \"sysz\";",
          "295:         arch = \"xcore\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "292:    }",
          "296:     for (; j < 16; j++) {",
          "297:      printf(\"  \");",
          "298:     }",
          "299:    }",
          "300:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "303:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "304:                 }",
          "305:             }",
          "306:   }",
          "307:   cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "295:    if (x86_arch) {",
          "301:             if (debug_flag) {",
          "302:                 if (x86_arch) {",
          "",
          "[Added Lines]",
          "321:    if (!strcmp(arch, \"x86\")) {",
          "327:             if (debug_flag) {//different mode should call different print functions",
          "328:                 if (!strcmp(arch, \"x86\")) {",
          "332:                 if (!strcmp(arch, \"arm\")) {",
          "333:                     print_insn_detail_arm(handle, &insn[i]);",
          "334:                 }",
          "336:                 if (!strcmp(arch,\"arm64\")) {",
          "337:                     print_insn_detail_arm64(handle,&insn[i]);",
          "338:                 }",
          "340:                 if (!strcmp(arch, \"mips\")) {",
          "341:                     print_insn_detail_mips(handle, &insn[i]);",
          "342:                 }",
          "344:                 if (!strcmp(arch, \"ppc\")) {",
          "345:                     print_insn_detail_ppc(handle, &insn[i]);",
          "346:                 }",
          "348:                 if (!strcmp(arch, \"sparc\")) {",
          "349:                     print_insn_detail_sparc(handle, &insn[i]);",
          "350:                 }",
          "352:                 if (!strcmp(arch, \"sysz\")) {",
          "353:                     print_insn_detail_sysz(handle, &insn[i]);",
          "354:                 }",
          "356:                 if (!strcmp(arch, \"xcore\")) {",
          "357:                     print_insn_detail_xcore(handle, &insn[i]);",
          "358:                 }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "4: #include <platform.h>",
          "5: #include <capstone.h>",
          "8: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "9: {",
          "10:     unsigned char *c;",
          "12:     printf(\"%s\", comment);",
          "13:     for (c = str; c < str + len; c++) {",
          "14:         printf(\"0x%02x \", *c & 0xff);",
          "15:     }",
          "17:     printf(\"\\n\");",
          "18: }",
          "20: void print_insn_detail_arm(csh handle, cs_insn *ins)",
          "21: {",
          "22:     cs_arm *arm;",
          "23:     int i;",
          "26:     if (ins->detail == NULL)",
          "27:         return;",
          "29:     arm = &(ins->detail->arm);",
          "31:     if (arm->op_count)",
          "32:         printf(\"\\top_count: %u\\n\", arm->op_count);",
          "34:     for (i = 0; i < arm->op_count; i++) {",
          "35:         cs_arm_op *op = &(arm->operands[i]);",
          "36:         switch((int)op->type) {",
          "37:             default:",
          "38:                 break;",
          "39:             case ARM_OP_REG:",
          "40:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "41:                 break;",
          "42:             case ARM_OP_IMM:",
          "43:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "44:                 break;",
          "45:             case ARM_OP_FP:",
          "46: #if defined(_KERNEL_MODE)",
          "48:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "49: #else",
          "50:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "51: #endif",
          "52:                 break;",
          "53:             case ARM_OP_MEM:",
          "54:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "55:                 if (op->mem.base != X86_REG_INVALID)",
          "56:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "57:                            i, cs_reg_name(handle, op->mem.base));",
          "58:                 if (op->mem.index != X86_REG_INVALID)",
          "59:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "60:                            i, cs_reg_name(handle, op->mem.index));",
          "61:                 if (op->mem.scale != 1)",
          "62:                     printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "63:                 if (op->mem.disp != 0)",
          "64:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "66:                 break;",
          "67:             case ARM_OP_PIMM:",
          "68:                 printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "69:                 break;",
          "70:             case ARM_OP_CIMM:",
          "71:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, op->imm);",
          "72:                 break;",
          "73:             case ARM_OP_SETEND:",
          "74:                 printf(\"\\t\\toperands[%u].type: SETEND = %s\\n\", i, op->setend == ARM_SETEND_BE? \"be\" : \"le\");",
          "75:                 break;",
          "76:             case ARM_OP_SYSREG:",
          "77:                 printf(\"\\t\\toperands[%u].type: SYSREG = %u\\n\", i, op->reg);",
          "78:                 break;",
          "79:         }",
          "81:         if (op->shift.type != ARM_SFT_INVALID && op->shift.value) {",
          "82:             if (op->shift.type < ARM_SFT_ASR_REG)",
          "84:                 printf(\"\\t\\t\\tShift: %u = %u\\n\", op->shift.type, op->shift.value);",
          "85:             else",
          "87:                 printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "88:                        cs_reg_name(handle, op->shift.value));",
          "89:         }",
          "91:         if (op->vector_index != -1) {",
          "92:             printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "93:         }",
          "95:         if (op->subtracted)",
          "96:             printf(\"\\t\\tSubtracted: True\\n\");",
          "97:     }",
          "99:     if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "100:         printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "102:     if (arm->update_flags)",
          "103:         printf(\"\\tUpdate-flags: True\\n\");",
          "105:     if (arm->writeback)",
          "106:         printf(\"\\tWrite-back: True\\n\");",
          "108:     if (arm->cps_mode)",
          "109:         printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "111:     if (arm->cps_flag)",
          "112:         printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "114:     if (arm->vector_data)",
          "115:         printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "117:     if (arm->vector_size)",
          "118:         printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "120:     if (arm->usermode)",
          "121:         printf(\"\\tUser-mode: True\\n\");",
          "123:     if (arm->mem_barrier)",
          "124:         printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "126:     printf(\"\\n\");",
          "127: }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "7: #include <platform.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: void print_insn_detail_arm64(csh handle, cs_insn *ins)",
          "24: {",
          "25:     cs_arm64 *arm64;",
          "26:     int i;",
          "29:     if (ins->detail == NULL)",
          "30:         return;",
          "32:     arm64 = &(ins->detail->arm64);",
          "33:     if (arm64->op_count)",
          "34:         printf(\"\\top_count: %u\\n\", arm64->op_count);",
          "36:     for (i = 0; i < arm64->op_count; i++) {",
          "37:         cs_arm64_op *op = &(arm64->operands[i]);",
          "38:         switch(op->type) {",
          "39:             default:",
          "40:                 break;",
          "41:             case ARM64_OP_REG:",
          "42:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "43:                 break;",
          "44:             case ARM64_OP_IMM:",
          "45:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "46:                 break;",
          "47:             case ARM64_OP_FP:",
          "48: #if defined(_KERNEL_MODE)",
          "50:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "51: #else",
          "52:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "53: #endif",
          "54:                 break;",
          "55:             case ARM64_OP_MEM:",
          "56:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "57:                 if (op->mem.base != ARM64_REG_INVALID)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(handle, op->mem.base));",
          "59:                 if (op->mem.index != ARM64_REG_INVALID)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(handle, op->mem.index));",
          "61:                 if (op->mem.disp != 0)",
          "62:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "64:                 break;",
          "65:             case ARM64_OP_CIMM:",
          "66:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, (int)op->imm);",
          "67:                 break;",
          "68:             case ARM64_OP_REG_MRS:",
          "69:                 printf(\"\\t\\toperands[%u].type: REG_MRS = 0x%x\\n\", i, op->reg);",
          "70:                 break;",
          "71:             case ARM64_OP_REG_MSR:",
          "72:                 printf(\"\\t\\toperands[%u].type: REG_MSR = 0x%x\\n\", i, op->reg);",
          "73:                 break;",
          "74:             case ARM64_OP_PSTATE:",
          "75:                 printf(\"\\t\\toperands[%u].type: PSTATE = 0x%x\\n\", i, op->pstate);",
          "76:                 break;",
          "77:             case ARM64_OP_SYS:",
          "78:                 printf(\"\\t\\toperands[%u].type: SYS = 0x%x\\n\", i, op->sys);",
          "79:                 break;",
          "80:             case ARM64_OP_PREFETCH:",
          "81:                 printf(\"\\t\\toperands[%u].type: PREFETCH = 0x%x\\n\", i, op->prefetch);",
          "82:                 break;",
          "83:             case ARM64_OP_BARRIER:",
          "84:                 printf(\"\\t\\toperands[%u].type: BARRIER = 0x%x\\n\", i, op->barrier);",
          "85:                 break;",
          "86:         }",
          "88:         if (op->shift.type != ARM64_SFT_INVALID &&",
          "89:             op->shift.value)",
          "90:             printf(\"\\t\\t\\tShift: type = %u, value = %u\\n\",",
          "91:                    op->shift.type, op->shift.value);",
          "93:         if (op->ext != ARM64_EXT_INVALID)",
          "94:             printf(\"\\t\\t\\tExt: %u\\n\", op->ext);",
          "96:         if (op->vas != ARM64_VAS_INVALID)",
          "97:             printf(\"\\t\\t\\tVector Arrangement Specifier: 0x%x\\n\", op->vas);",
          "99:         if (op->vess != ARM64_VESS_INVALID)",
          "100:             printf(\"\\t\\t\\tVector Element Size Specifier: %u\\n\", op->vess);",
          "102:         if (op->vector_index != -1)",
          "103:             printf(\"\\t\\t\\tVector Index: %u\\n\", op->vector_index);",
          "104:     }",
          "106:     if (arm64->update_flags)",
          "107:         printf(\"\\tUpdate-flags: True\\n\");",
          "109:     if (arm64->writeback)",
          "110:         printf(\"\\tWrite-back: True\\n\");",
          "112:     if (arm64->cc)",
          "113:         printf(\"\\tCode-condition: %u\\n\", arm64->cc);",
          "115:     printf(\"\\n\");",
          "116: }",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "7: #include <platform.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: void print_insn_detail_mips(csh handle, cs_insn *ins)",
          "24: {",
          "25:     int i;",
          "26:     cs_mips *mips;",
          "29:     if (ins->detail == NULL)",
          "30:         return;",
          "32:     mips = &(ins->detail->mips);",
          "33:     if (mips->op_count)",
          "34:         printf(\"\\top_count: %u\\n\", mips->op_count);",
          "36:     for (i = 0; i < mips->op_count; i++) {",
          "37:         cs_mips_op *op = &(mips->operands[i]);",
          "38:         switch((int)op->type) {",
          "39:             default:",
          "40:                 break;",
          "41:             case MIPS_OP_REG:",
          "42:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "43:                 break;",
          "44:             case MIPS_OP_IMM:",
          "45:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "46:                 break;",
          "47:             case MIPS_OP_MEM:",
          "48:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "49:                 if (op->mem.base != X86_REG_INVALID)",
          "50:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "51:                            i, cs_reg_name(handle, op->mem.base));",
          "52:                 if (op->mem.disp != 0)",
          "53:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "55:                 break;",
          "56:         }",
          "58:     }",
          "60:     printf(\"\\n\");",
          "61: }",
          "",
          "---------------"
        ],
        "cstool/cstool_ppc.c||cstool/cstool_ppc.c": [
          "File: cstool/cstool_ppc.c -> cstool/cstool_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "9: static csh handle;",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: static const char* get_bc_name(int bc)",
          "24: {",
          "25:     switch(bc) {",
          "26:         default:",
          "27:         case PPC_BC_INVALID:",
          "28:             return (\"invalid\");",
          "29:         case PPC_BC_LT:",
          "30:             return (\"lt\");",
          "31:         case PPC_BC_LE:",
          "32:             return (\"le\");",
          "33:         case PPC_BC_EQ:",
          "34:             return (\"eq\");",
          "35:         case PPC_BC_GE:",
          "36:             return (\"ge\");",
          "37:         case PPC_BC_GT:",
          "38:             return (\"gt\");",
          "39:         case PPC_BC_NE:",
          "40:             return (\"ne\");",
          "41:         case PPC_BC_UN:",
          "42:             return (\"un\");",
          "43:         case PPC_BC_NU:",
          "44:             return (\"nu\");",
          "45:         case PPC_BC_SO:",
          "46:             return (\"so\");",
          "47:         case PPC_BC_NS:",
          "48:             return (\"ns\");",
          "49:     }",
          "50: }",
          "52: void print_insn_detail_ppc(csh handle, cs_insn *ins)",
          "53: {",
          "54:     cs_ppc *ppc;",
          "55:     int i;",
          "58:     if (ins->detail == NULL)",
          "59:         return;",
          "61:     ppc = &(ins->detail->ppc);",
          "62:     if (ppc->op_count)",
          "63:         printf(\"\\top_count: %u\\n\", ppc->op_count);",
          "65:     for (i = 0; i < ppc->op_count; i++) {",
          "66:         cs_ppc_op *op = &(ppc->operands[i]);",
          "67:         switch((int)op->type) {",
          "68:             default:",
          "69:                 break;",
          "70:             case PPC_OP_REG:",
          "71:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "72:                 break;",
          "73:             case PPC_OP_IMM:",
          "74:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "75:                 break;",
          "76:             case PPC_OP_MEM:",
          "77:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "78:                 if (op->mem.base != PPC_REG_INVALID)",
          "79:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "80:                            i, cs_reg_name(handle, op->mem.base));",
          "81:                 if (op->mem.disp != 0)",
          "82:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "84:                 break;",
          "85:             case PPC_OP_CRX:",
          "86:                 printf(\"\\t\\toperands[%u].type: CRX\\n\", i);",
          "87:                 printf(\"\\t\\t\\toperands[%u].crx.scale: %d\\n\", i, op->crx.scale);",
          "88:                 printf(\"\\t\\t\\toperands[%u].crx.reg: %s\\n\", i, cs_reg_name(handle, op->crx.reg));",
          "89:                 printf(\"\\t\\t\\toperands[%u].crx.cond: %s\\n\", i, get_bc_name(op->crx.cond));",
          "90:                 break;",
          "91:         }",
          "92:     }",
          "94:     if (ppc->bc != 0)",
          "95:         printf(\"\\tBranch code: %u\\n\", ppc->bc);",
          "97:     if (ppc->bh != 0)",
          "98:         printf(\"\\tBranch hint: %u\\n\", ppc->bh);",
          "100:     if (ppc->update_cr0)",
          "101:         printf(\"\\tUpdate-CR0: True\\n\");",
          "103:     printf(\"\\n\");",
          "104: }",
          "",
          "---------------"
        ],
        "cstool/cstool_sparc.c||cstool/cstool_sparc.c": [
          "File: cstool/cstool_sparc.c -> cstool/cstool_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_sparc(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_sparc *sparc;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     sparc = &(ins->detail->sparc);",
          "32:     if (sparc->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", sparc->op_count);",
          "35:     for (i = 0; i < sparc->op_count; i++) {",
          "36:         cs_sparc_op *op = &(sparc->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case SPARC_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case SPARC_OP_IMM:",
          "44:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "45:                 break;",
          "46:             case SPARC_OP_MEM:",
          "47:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "48:                 if (op->mem.base != X86_REG_INVALID)",
          "49:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "50:                            i, cs_reg_name(handle, op->mem.base));",
          "51:                 if (op->mem.index != X86_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.index));",
          "54:                 if (op->mem.disp != 0)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "57:                 break;",
          "58:         }",
          "59:     }",
          "61:     if (sparc->cc != 0)",
          "62:         printf(\"\\tCode condition: %u\\n\", sparc->cc);",
          "64:     if (sparc->hint != 0)",
          "65:         printf(\"\\tHint code: %u\\n\", sparc->hint);",
          "67:     printf(\"\\n\");",
          "68: }",
          "",
          "---------------"
        ],
        "cstool/cstool_systemz.c||cstool/cstool_systemz.c": [
          "File: cstool/cstool_systemz.c -> cstool/cstool_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_sysz(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_sysz *sysz;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     sysz = &(ins->detail->sysz);",
          "32:     if (sysz->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", sysz->op_count);",
          "35:     for (i = 0; i < sysz->op_count; i++) {",
          "36:         cs_sysz_op *op = &(sysz->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case SYSZ_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case SYSZ_OP_ACREG:",
          "44:                 printf(\"\\t\\toperands[%u].type: ACREG = %u\\n\", i, op->reg);",
          "45:                 break;",
          "46:             case SYSZ_OP_IMM:",
          "47:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "48:                 break;",
          "49:             case SYSZ_OP_MEM:",
          "50:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "51:                 if (op->mem.base != SYSZ_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.base));",
          "54:                 if (op->mem.index != SYSZ_REG_INVALID)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "56:                            i, cs_reg_name(handle, op->mem.index));",
          "57:                 if (op->mem.length != 0)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\" PRIx64 \"\\n\", i, op->mem.length);",
          "59:                 if (op->mem.disp != 0)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "62:                 break;",
          "63:         }",
          "64:     }",
          "66:     if (sysz->cc != 0)",
          "67:         printf(\"\\tCode condition: %u\\n\", sysz->cc);",
          "69:     printf(\"\\n\");",
          "70: }",
          "",
          "---------------"
        ],
        "cstool/cstool_xcore.c||cstool/cstool_xcore.c": [
          "File: cstool/cstool_xcore.c -> cstool/cstool_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_xcore(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_xcore *xcore;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     xcore = &(ins->detail->xcore);",
          "32:     if (xcore->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", xcore->op_count);",
          "35:     for (i = 0; i < xcore->op_count; i++) {",
          "36:         cs_xcore_op *op = &(xcore->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case XCORE_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case XCORE_OP_IMM:",
          "44:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "45:                 break;",
          "46:             case XCORE_OP_MEM:",
          "47:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "48:                 if (op->mem.base != XCORE_REG_INVALID)",
          "49:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "50:                            i, cs_reg_name(handle, op->mem.base));",
          "51:                 if (op->mem.index != XCORE_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.index));",
          "54:                 if (op->mem.disp != 0)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "56:                 if (op->mem.direct != 1)",
          "57:                     printf(\"\\t\\t\\toperands[%u].mem.direct: -1\\n\", i);",
          "60:                 break;",
          "61:         }",
          "62:     }",
          "64:     printf(\"\\n\");",
          "65: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f38cc69aac4ec866f4d9fc154059165ff6ea1d51",
      "candidate_info": {
        "commit_hash": "f38cc69aac4ec866f4d9fc154059165ff6ea1d51",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f38cc69aac4ec866f4d9fc154059165ff6ea1d51",
        "files": [
          "arch/X86/X86Mapping.c",
          "arch/X86/X86MappingInsn.inc",
          "arch/X86/X86MappingInsnOp.inc",
          "bindings/java/capstone/X86_const.java",
          "bindings/ocaml/x86_const.ml",
          "bindings/python/capstone/x86_const.py",
          "include/capstone/x86.h"
        ],
        "message": "changed fcompi to fcomip and fucompi to fucomip",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c",
          "arch/X86/X86MappingInsn.inc||arch/X86/X86MappingInsn.inc",
          "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc",
          "bindings/javcapstone/X86_const.java||bindings/java/capstone/X86_const.java",
          "bindings/ocaml/x86_const.ml||bindings/ocaml/x86_const.ml",
          "bindings/python/capstone/x86_const.py||bindings/python/capstone/x86_const.py",
          "include/capstone/x86.h||include/capstone/x86.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:  { X86_INS_COMISD, \"comisd\" },",
          "945:  { X86_INS_COMISS, \"comiss\" },",
          "946:  { X86_INS_FCOMP, \"fcomp\" },",
          "948:  { X86_INS_FCOMI, \"fcomi\" },",
          "949:  { X86_INS_FCOM, \"fcom\" },",
          "950:  { X86_INS_FCOS, \"fcos\" },",
          "",
          "[Removed Lines]",
          "947:  { X86_INS_FCOMPI, \"fcompi\" },",
          "",
          "[Added Lines]",
          "947:  { X86_INS_FCOMIP, \"fcomip\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1544:  { X86_INS_FTST, \"ftst\" },",
          "1545:  { X86_INS_TZCNT, \"tzcnt\" },",
          "1546:  { X86_INS_TZMSK, \"tzmsk\" },",
          "1548:  { X86_INS_FUCOMI, \"fucomi\" },",
          "1549:  { X86_INS_FUCOMPP, \"fucompp\" },",
          "1550:  { X86_INS_FUCOMP, \"fucomp\" },",
          "",
          "[Removed Lines]",
          "1547:  { X86_INS_FUCOMPI, \"fucompi\" },",
          "",
          "[Added Lines]",
          "1547:  { X86_INS_FUCOMIP, \"fucomip\" },",
          "",
          "---------------"
        ],
        "arch/X86/X86MappingInsn.inc||arch/X86/X86MappingInsn.inc": [
          "File: arch/X86/X86MappingInsn.inc -> arch/X86/X86MappingInsn.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2954: #endif",
          "2955: },",
          "2956: {",
          "2958: #ifndef CAPSTONE_DIET",
          "2959:  { 0 }, { X86_REG_EFLAGS, X86_REG_FPSW, 0 }, { 0 }, 0, 0",
          "2960: #endif",
          "",
          "[Removed Lines]",
          "2957:  X86_COM_FIPr, X86_INS_FCOMPI,",
          "",
          "[Added Lines]",
          "2957:  X86_COM_FIPr, X86_INS_FCOMIP,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15914: #endif",
          "15915: },",
          "15916: {",
          "15918: #ifndef CAPSTONE_DIET",
          "15919:  { X86_REG_ST0, 0 }, { X86_REG_EFLAGS, X86_REG_FPSW, 0 }, { 0 }, 0, 0",
          "15920: #endif",
          "",
          "[Removed Lines]",
          "15917:  X86_UCOM_FIPr, X86_INS_FUCOMPI,",
          "",
          "[Added Lines]",
          "15917:  X86_UCOM_FIPr, X86_INS_FUCOMIP,",
          "",
          "---------------"
        ],
        "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc": [
          "File: arch/X86/X86MappingInsnOp.inc -> arch/X86/X86MappingInsnOp.inc"
        ],
        "bindings/javcapstone/X86_const.java||bindings/java/capstone/X86_const.java": [
          "File: bindings/javcapstone/X86_const.java -> bindings/java/capstone/X86_const.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:  public static final int X86_INS_FCOMIP = 105;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  public static final int X86_INS_FUCOMIP = 705;",
          "",
          "---------------"
        ],
        "bindings/ocaml/x86_const.ml||bindings/ocaml/x86_const.ml": [
          "File: bindings/ocaml/x86_const.ml -> bindings/ocaml/x86_const.ml",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: let _X86_INS_COMISD = 102;;",
          "499: let _X86_INS_COMISS = 103;;",
          "500: let _X86_INS_FCOMP = 104;;",
          "502: let _X86_INS_FCOMI = 106;;",
          "503: let _X86_INS_FCOM = 107;;",
          "504: let _X86_INS_FCOS = 108;;",
          "",
          "[Removed Lines]",
          "501: let _X86_INS_FCOMPI = 105;;",
          "",
          "[Added Lines]",
          "501: let _X86_INS_FCOMIP = 105;;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1098: let _X86_INS_FTST = 702;;",
          "1099: let _X86_INS_TZCNT = 703;;",
          "1100: let _X86_INS_TZMSK = 704;;",
          "1102: let _X86_INS_FUCOMI = 706;;",
          "1103: let _X86_INS_FUCOMPP = 707;;",
          "1104: let _X86_INS_FUCOMP = 708;;",
          "",
          "[Removed Lines]",
          "1101: let _X86_INS_FUCOMPI = 705;;",
          "",
          "[Added Lines]",
          "1101: let _X86_INS_FUCOMIP = 705;;",
          "",
          "---------------"
        ],
        "bindings/python/capstone/x86_const.py||bindings/python/capstone/x86_const.py": [
          "File: bindings/python/capstone/x86_const.py -> bindings/python/capstone/x86_const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: X86_INS_COMISD = 102",
          "499: X86_INS_COMISS = 103",
          "500: X86_INS_FCOMP = 104",
          "502: X86_INS_FCOMI = 106",
          "503: X86_INS_FCOM = 107",
          "504: X86_INS_FCOS = 108",
          "",
          "[Removed Lines]",
          "501: X86_INS_FCOMPI = 105",
          "",
          "[Added Lines]",
          "501: X86_INS_FCOMIP = 105",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1098: X86_INS_FTST = 702",
          "1099: X86_INS_TZCNT = 703",
          "1100: X86_INS_TZMSK = 704",
          "1102: X86_INS_FUCOMI = 706",
          "1103: X86_INS_FUCOMPP = 707",
          "1104: X86_INS_FUCOMP = 708",
          "",
          "[Removed Lines]",
          "1101: X86_INS_FUCOMPI = 705",
          "",
          "[Added Lines]",
          "1101: X86_INS_FUCOMIP = 705",
          "",
          "---------------"
        ],
        "include/capstone/x86.h||include/capstone/x86.h": [
          "File: include/capstone/x86.h -> include/capstone/x86.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:  X86_INS_COMISD,",
          "432:  X86_INS_COMISS,",
          "433:  X86_INS_FCOMP,",
          "435:  X86_INS_FCOMI,",
          "436:  X86_INS_FCOM,",
          "437:  X86_INS_FCOS,",
          "",
          "[Removed Lines]",
          "434:  X86_INS_FCOMPI,",
          "",
          "[Added Lines]",
          "434:  X86_INS_FCOMIP,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1031:  X86_INS_FTST,",
          "1032:  X86_INS_TZCNT,",
          "1033:  X86_INS_TZMSK,",
          "1035:  X86_INS_FUCOMI,",
          "1036:  X86_INS_FUCOMPP,",
          "1037:  X86_INS_FUCOMP,",
          "",
          "[Removed Lines]",
          "1034:  X86_INS_FUCOMPI,",
          "",
          "[Added Lines]",
          "1034:  X86_INS_FUCOMIP,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6960082f695cde7eecc1ce20c91df4d85b82a478",
      "candidate_info": {
        "commit_hash": "6960082f695cde7eecc1ce20c91df4d85b82a478",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6960082f695cde7eecc1ce20c91df4d85b82a478",
        "files": [
          "tests/test_iter_benchmark.c"
        ],
        "message": "delete old code",
        "before_after_code_files": [
          "tests/test_iter_benchmark.c||tests/test_iter_benchmark.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_iter_benchmark.c||tests/test_iter_benchmark.c": [
          "File: tests/test_iter_benchmark.c -> tests/test_iter_benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90f85d4f6a08a66d517b87126937ab7b2a210490",
      "candidate_info": {
        "commit_hash": "90f85d4f6a08a66d517b87126937ab7b2a210490",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/90f85d4f6a08a66d517b87126937ab7b2a210490",
        "files": [
          "arch/X86/X86MappingInsnOp.inc"
        ],
        "message": "x86: fix issue #711",
        "before_after_code_files": [
          "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86MappingInsnOp.inc||arch/X86/X86MappingInsnOp.inc": [
          "File: arch/X86/X86MappingInsnOp.inc -> arch/X86/X86MappingInsnOp.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5711: },",
          "5713:  0,",
          "5715: },",
          "5717:  0,",
          "",
          "[Removed Lines]",
          "5714:  { CS_AC_WRITE, CS_AC_IGNORE, 0 }",
          "",
          "[Added Lines]",
          "5714:  { CS_AC_WRITE, CS_AC_READ, 0 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}