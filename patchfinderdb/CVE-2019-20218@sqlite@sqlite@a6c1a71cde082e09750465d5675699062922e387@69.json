{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66373329881e0474de08707dcf07808672f1da02",
      "candidate_info": {
        "commit_hash": "66373329881e0474de08707dcf07808672f1da02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66373329881e0474de08707dcf07808672f1da02",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test",
          "manifest",
          "manifest.uuid",
          "test/fts4content.test"
        ],
        "message": "Prevent direct and indirect recursive content= options in fts3/4 and fts5.\n\nFossilOrigin-Name: 2eb997327c2c369c10b7835be80112d77cb2a7cfa9fe4d564042984c21d94698",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test",
          "manifest.uuid||manifest.uuid",
          "test/fts4content.test||test/fts4content.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:   int iIdx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:   if( p->bLock ){",
          "1615:     return SQLITE_ERROR;",
          "1616:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1809:     }else{",
          "1810:       zSql = sqlite3_mprintf(\"SELECT %s WHERE rowid = ?\", p->zReadExprlist);",
          "1811:       if( !zSql ) return SQLITE_NOMEM;",
          "1813:       sqlite3_free(zSql);",
          "1814:     }",
          "1815:     if( rc==SQLITE_OK ) pCsr->bSeekStmt = 1;",
          "",
          "[Removed Lines]",
          "1812:       rc = sqlite3_prepare_v3(p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "1816:       p->bLock++;",
          "1817:       rc = sqlite3_prepare_v3(",
          "1818:           p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "1819:       );",
          "1820:       p->bLock--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1827:   if( pCsr->isRequireSeek ){",
          "1828:     rc = fts3CursorSeekStmt(pCsr);",
          "1829:     if( rc==SQLITE_OK ){",
          "1830:       sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iPrevId);",
          "1831:       pCsr->isRequireSeek = 0;",
          "1832:       if( SQLITE_ROW==sqlite3_step(pCsr->pStmt) ){",
          "1833:         return SQLITE_OK;",
          "1834:       }else{",
          "1835:         rc = sqlite3_reset(pCsr->pStmt);",
          "1836:         if( rc==SQLITE_OK && ((Fts3Table *)pCsr->base.pVtab)->zContentTbl==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1838:       Fts3Table *pTab = (Fts3Table*)pCsr->base.pVtab;",
          "1839:       pTab->bLock++;",
          "1843:         pTab->bLock--;",
          "1846:         pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3218:   int rc;",
          "3219:   Fts3Cursor *pCsr = (Fts3Cursor *)pCursor;",
          "3220:   if( pCsr->eSearch==FTS3_DOCID_SEARCH || pCsr->eSearch==FTS3_FULLSCAN_SEARCH ){",
          "3221:     if( SQLITE_ROW!=sqlite3_step(pCsr->pStmt) ){",
          "3222:       pCsr->isEof = 1;",
          "3223:       rc = sqlite3_reset(pCsr->pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3233:     Fts3Table *pTab = (Fts3Table*)pCursor->pVtab;",
          "3234:     pTab->bLock++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3225:       pCsr->iPrevId = sqlite3_column_int64(pCsr->pStmt, 0);",
          "3226:       rc = SQLITE_OK;",
          "3227:     }",
          "3228:   }else{",
          "3229:     rc = fts3EvalNext((Fts3Cursor *)pCursor);",
          "3230:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3242:     pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3285:   UNUSED_PARAMETER(idxStr);",
          "3286:   UNUSED_PARAMETER(nVal);",
          "3288:   eSearch = (idxNum & 0x0000FFFF);",
          "3289:   assert( eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );",
          "3290:   assert( p->pSegments==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3303:   if( p->bLock ){",
          "3304:     return SQLITE_ERROR;",
          "3305:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3356:       );",
          "3357:     }",
          "3358:     if( zSql ){",
          "3360:       sqlite3_free(zSql);",
          "3361:     }else{",
          "3362:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3359:       rc = sqlite3_prepare_v3(p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "3378:       p->bLock++;",
          "3379:       rc = sqlite3_prepare_v3(",
          "3380:           p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "3381:       );",
          "3382:       p->bLock--;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:         break;",
          "896:       }",
          "899:         rc = sqlite3_step(pCsr->pStmt);",
          "900:         if( rc!=SQLITE_ROW ){",
          "901:           CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "902:           rc = sqlite3_reset(pCsr->pStmt);",
          "903:         }else{",
          "904:           rc = SQLITE_OK;",
          "905:         }",
          "906:         break;",
          "907:     }",
          "908:   }",
          "",
          "[Removed Lines]",
          "898:       default:",
          "",
          "[Added Lines]",
          "898:       default: {",
          "899:         Fts5Config *pConfig = ((Fts5Table*)pCursor->pVtab)->pConfig;",
          "900:         pConfig->bLock++;",
          "902:         pConfig->bLock--;",
          "906:           if( rc!=SQLITE_OK ){",
          "907:             pCursor->pVtab->zErrMsg = sqlite3_mprintf(",
          "908:                 \"%s\", sqlite3_errmsg(pConfig->db)",
          "909:             );",
          "910:           }",
          "915:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:   int iIdxStr = 0;",
          "1189:   Fts5Expr *pExpr = 0;",
          "1191:   if( pCsr->ePlan ){",
          "1192:     fts5FreeCursorComponents(pCsr);",
          "1193:     memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan-(u8*)pCsr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200:   if( pConfig->bLock ){",
          "1201:     pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "1202:         \"recursively defined fts5 content table\"",
          "1203:     );",
          "1204:     return SQLITE_ERROR;",
          "1205:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:   }",
          "1410:   if( rc==SQLITE_OK && CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) ){",
          "1411:     assert( pCsr->pExpr );",
          "1412:     sqlite3_reset(pCsr->pStmt);",
          "1413:     sqlite3_bind_int64(pCsr->pStmt, 1, fts5CursorRowid(pCsr));",
          "1414:     rc = sqlite3_step(pCsr->pStmt);",
          "1415:     if( rc==SQLITE_ROW ){",
          "1416:       rc = SQLITE_OK;",
          "1417:       CsrFlagClear(pCsr, FTS5CSR_REQUIRE_CONTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1431:     pTab->pConfig->bLock++;",
          "1433:     pTab->pConfig->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1419:       rc = sqlite3_reset(pCsr->pStmt);",
          "1420:       if( rc==SQLITE_OK ){",
          "1421:         rc = FTS5_CORRUPT;",
          "1422:       }",
          "1423:     }",
          "1424:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441:       }else{",
          "1442:         pTab->base.zErrMsg = sqlite3_mprintf(",
          "1443:             \"%s\", sqlite3_errmsg(pTab->pConfig->db)",
          "1444:         );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test": [
          "File: ext/fts5/test/fts5content.test -> ext/fts5/test/fts5content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: # Check that an fts5 table cannot be its own content table.",
          "258: #",
          "259: reset_db",
          "261:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t1 );",
          "262:   INSERT INTO t1( a ) VALUES('abc');",
          "263: }",
          "265:   SELECT * FROM t1;",
          "266: } {1 {recursively defined fts5 content table}}",
          "268:   SELECT * FROM t1('abc');",
          "269: } {1 {recursively defined fts5 content table}}",
          "271: finish_test",
          "",
          "[Removed Lines]",
          "260: do_execsql_test 7.1 {",
          "264: do_catchsql_test 7.2 {",
          "267: do_catchsql_test 7.3 {",
          "",
          "[Added Lines]",
          "260: do_execsql_test 7.1.1 {",
          "264: do_catchsql_test 7.1.2 {",
          "267: do_catchsql_test 7.1.3 {",
          "270: do_catchsql_test 7.1.4 {",
          "271:   SELECT count(*) FROM t1;",
          "272: } {1 {recursively defined fts5 content table}}",
          "273: do_catchsql_test 7.1.5 {",
          "274:   SELECT * FROM t1('abc') ORDER BY rank;",
          "275: } {1 {recursively defined fts5 content table}}",
          "277: reset_db",
          "278: do_execsql_test 7.2.1 {",
          "279:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t2 );",
          "280:   CREATE VIRTUAL TABLE t2 USING fts5(a, c=t1 );",
          "281:   INSERT INTO t1( a ) VALUES('abc');",
          "282: }",
          "283: do_catchsql_test 7.2.2 {",
          "284:   SELECT * FROM t1;",
          "285: } {1 {recursively defined fts5 content table}}",
          "286: do_catchsql_test 7.2.3 {",
          "287:   SELECT * FROM t1('abc');",
          "288: } {1 {recursively defined fts5 content table}}",
          "289: do_catchsql_test 7.2.4 {",
          "290:   SELECT count(*) FROM t1;",
          "291: } {1 {recursively defined fts5 content table}}",
          "292: do_catchsql_test 7.2.5 {",
          "293:   SELECT * FROM t1('abc') ORDER BY rank;",
          "294: } {1 {recursively defined fts5 content table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4content.test||test/fts4content.test": [
          "File: test/fts4content.test -> test/fts4content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:   CREATE VIRTUAL TABLE x1 USING fts4(content=x1);",
          "635: } {1 {vtable constructor called recursively: x1}}",
          "638: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637: #---------------------------------------------------------------------------",
          "638: # Check that an fts4 table cannot be its own content table.",
          "639: #",
          "640: reset_db",
          "641: breakpoint",
          "642: do_execsql_test 12.1.1 {",
          "643:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t1 );",
          "644:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "645: }",
          "646: do_catchsql_test 12.1.2 {",
          "647:   SELECT * FROM t1;",
          "648: } {1 {SQL logic error}}",
          "649: do_catchsql_test 12.1.3 {",
          "650:   SELECT * FROM t1('abc');",
          "651: } {1 {SQL logic error}}",
          "652: do_catchsql_test 12.1.4 {",
          "653:   SELECT count(*) FROM t1;",
          "654: } {1 {SQL logic error}}",
          "656: reset_db",
          "657: do_execsql_test 12.2.1 {",
          "658:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t2 );",
          "659:   CREATE VIRTUAL TABLE t2 USING fts4(a, content=t1 );",
          "660:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "661: }",
          "662: do_catchsql_test 12.2.2 {",
          "663:   SELECT * FROM t1;",
          "664: } {1 {SQL logic error}}",
          "665: do_catchsql_test 12.2.3 {",
          "666:   SELECT * FROM t1('abc');",
          "667: } {1 {SQL logic error}}",
          "668: do_catchsql_test 12.2.4 {",
          "669:   SELECT count(*) FROM t1;",
          "670: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
      "candidate_info": {
        "commit_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/prefixes.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/prefixes.test"
        ],
        "message": "Add scalar function \"prefix_length()\" to ext/misc/prefixes.c.\n\nFossilOrigin-Name: 0bf1550507d9d3c8a41f8a50db3a59bf808f0a4e24637dc0905d35579305eca7",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/prefixes.c||ext/misc/prefixes.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/prefixes.test||test/prefixes.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:   $(TOP)/ext/misc/nextchar.c \\",
          "453:   $(TOP)/ext/misc/normalize.c \\",
          "454:   $(TOP)/ext/misc/percentile.c \\",
          "455:   $(TOP)/ext/misc/regexp.c \\",
          "456:   $(TOP)/ext/misc/remember.c \\",
          "457:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:   $(TOP)\\ext\\misc\\nextchar.c \\",
          "1528:   $(TOP)\\ext\\misc\\normalize.c \\",
          "1529:   $(TOP)\\ext\\misc\\percentile.c \\",
          "1530:   $(TOP)\\ext\\misc\\regexp.c \\",
          "1531:   $(TOP)\\ext\\misc\\remember.c \\",
          "1532:   $(TOP)\\ext\\misc\\series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1530:   $(TOP)\\ext\\misc\\prefixes.c \\",
          "",
          "---------------"
        ],
        "ext/misc/prefixes.c||ext/misc/prefixes.c": [
          "File: ext/misc/prefixes.c -> ext/misc/prefixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: };",
          "253: #ifdef _WIN32",
          "254: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #define PREFIX_SKIP_UTF8(zIn) {                        \\",
          "259:   if( (*(zIn++))>=0xc0 ){                              \\",
          "260:     while( (*zIn & 0xc0)==0x80 ){ zIn++; }             \\",
          "261:   }                                                    \\",
          "262: }",
          "277: static void prefixLengthFunc(",
          "278:   sqlite3_context *ctx,",
          "279:   int nVal,",
          "280:   sqlite3_value **apVal",
          "281: ){",
          "284:   const unsigned char *zL = sqlite3_value_text(apVal[0]);",
          "285:   const unsigned char *zR = sqlite3_value_text(apVal[1]);",
          "286:   int nL = sqlite3_value_bytes(apVal[0]);",
          "287:   int nR = sqlite3_value_bytes(apVal[1]);",
          "288:   int i;",
          "290:   nByte = (nL > nR ? nL : nR);",
          "291:   for(i=0; i<nByte; i++){",
          "292:     if( zL[i]!=zR[i] ) break;",
          "293:     if( (zL[i] & 0xC0)!=0x80 ) nRet++;",
          "294:   }",
          "296:   if( (zL[i] & 0xC0)==0x80 ) nRet--;",
          "297:   sqlite3_result_int(ctx, nRet);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   int rc = SQLITE_OK;",
          "262:   SQLITE_EXTENSION_INIT2(pApi);",
          "263:   rc = sqlite3_create_module(db, \"prefixes\", &prefixesModule, 0);",
          "264:   return rc;",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   if( rc==SQLITE_OK ){",
          "312:     rc = sqlite3_create_function(",
          "313:         db, \"prefix_length\", 2, SQLITE_UTF8, 0, prefixLengthFunc, 0, 0",
          "314:     );",
          "315:   }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   $(TOP)/ext/misc/nextchar.c \\",
          "370:   $(TOP)/ext/misc/normalize.c \\",
          "371:   $(TOP)/ext/misc/percentile.c \\",
          "372:   $(TOP)/ext/misc/regexp.c \\",
          "373:   $(TOP)/ext/misc/remember.c \\",
          "374:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11b8a4cba747ca214fe3506caa3b711c87be4d55412754e673cc0603afefb086",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7141:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7142:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7143:   extern int sqlite3_percentile_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7144:   extern int sqlite3_regexp_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7145:   extern int sqlite3_remember_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7146:   extern int sqlite3_series_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7144:   extern int sqlite3_prefixes_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7166:     { \"ieee754\",               sqlite3_ieee_init                 },",
          "7167:     { \"nextchar\",              sqlite3_nextchar_init             },",
          "7168:     { \"percentile\",            sqlite3_percentile_init           },",
          "7169:     { \"regexp\",                sqlite3_regexp_init               },",
          "7170:     { \"remember\",              sqlite3_remember_init             },",
          "7171:     { \"series\",                sqlite3_series_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7170:     { \"prefixes\",              sqlite3_prefixes_init             },",
          "",
          "---------------"
        ],
        "test/prefixes.test||test/prefixes.test": [
          "File: test/prefixes.test -> test/prefixes.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-01-15",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is prefixes.c extension",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix unionvtab",
          "19: ifcapable !vtab {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: load_static_extension db prefixes",
          "26: foreach {tn zLeft zRight expected} {",
          "27:   1 abcdxxx abcyy    3",
          "28:   2 abcdxxx bcyyy    0",
          "29:   3 abcdxxx ab       2",
          "30:   4 ab      abcd     2",
          "32:   5 \"xyz\\u1234xz\" \"xyz\\u1234xy\" 5",
          "33:   6 \"xyz\\u1234\"   \"xyz\\u1234xy\" 4",
          "34:   7 \"xyz\\u1234\"   \"xyz\\u1234\"   4",
          "35:   8 \"xyz\\u1234xy\" \"xyz\\u1234\"   4",
          "36:   9 \"xyz\\u1234xy\" \"xyz\\u1233\"   3",
          "37:  10 \"xyz\\u1234xy\" \"xyz\\u1235\"   3",
          "38: } {",
          "39:   do_execsql_test 1.$tn { SELECT prefix_length($zLeft, $zRight) } $expected",
          "40: }",
          "43: do_execsql_test 2.0 {",
          "44:   CREATE TABLE t1(k TEXT UNIQUE, v INTEGER);",
          "45:   INSERT INTO t1 VALUES",
          "46:     ('aback', 1),",
          "47:     ('abaft', 2),",
          "48:     ('abandon', 3),",
          "49:     ('abandoned', 4),",
          "50:     ('abandoning', 5),",
          "51:     ('abandonment', 6),",
          "52:     ('abandons', 7),",
          "53:     ('abase', 8),",
          "54:     ('abased', 9),",
          "55:     ('abasement', 10),",
          "56:     ('abasements', 11),",
          "57:     ('abases', 12),",
          "58:     ('abash', 13),",
          "59:     ('abashed', 14),",
          "60:     ('abashes', 15),",
          "61:     ('abashing', 16),",
          "62:     ('abasing', 17),",
          "63:     ('abate', 18),",
          "64:     ('abated', 19),",
          "65:     ('abatement', 20),",
          "66:     ('abatements', 21);",
          "67: }",
          "69: foreach {tn INPUT expected} {",
          "70:   1 abatementt   abatement",
          "71:   2 abashet      abash",
          "72:   3 abandonio    abandon",
          "73:   4 abasemenu    abase",
          "74: } {",
          "75:   do_execsql_test 2.$tn {",
          "76:     WITH finder(str) AS (",
          "77:       SELECT (SELECT max(k) FROM t1 WHERE k<=$INPUT)",
          "78:         UNION ALL",
          "79:         SELECT (",
          "80:           SELECT max(k) FROM t1",
          "81:           WHERE k<=substr($INPUT, 1, prefix_length(finder.str, $INPUT))",
          "82:         ) FROM finder WHERE length(finder.str)>0",
          "83:       )",
          "84:     SELECT str FROM finder WHERE length(str)==prefix_length(str, $INPUT) LIMIT 1",
          "85:   } $expected",
          "86: }",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
      "candidate_info": {
        "commit_hash": "2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b13cd99d30c78d4ca13380fcb9484ad1aba829f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Early detection of SQLITE_TOOBIG when processing nested queries.\n\nFossilOrigin-Name: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2ce5ed175cb5029ac07392ae371c86eeec23c74624aad007dee51cf359f3eeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "4800:   return pParse->rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
      "candidate_info": {
        "commit_hash": "c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2ea77e5b2e8846976ea8ba00faa97d30ee39b9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/insertfault.test"
        ],
        "message": "Fix a segfault that could follow an OOM when querying a table that has one or more columns with default values \"true\" or \"false\".\n\nFossilOrigin-Name: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/insertfault.test||test/insertfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93f8ec146d63af13f04e337ada4fa75e9254f72b1394df09701ae12e185f27e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:   }",
          "1531: #endif",
          "1532:   else if( op==TK_TRUEFALSE ){",
          "1536:   }",
          "",
          "[Removed Lines]",
          "1533:      pVal = valueNew(db, pCtx);",
          "1534:      pVal->flags = MEM_Int;",
          "1535:      pVal->u.i = pExpr->u.zToken[4]==0;",
          "",
          "[Added Lines]",
          "1533:     pVal = valueNew(db, pCtx);",
          "1534:     if( pVal ){",
          "1535:       pVal->flags = MEM_Int;",
          "1536:       pVal->u.i = pExpr->u.zToken[4]==0;",
          "1537:     }",
          "",
          "---------------"
        ],
        "test/insertfault.test||test/insertfault.test": [
          "File: test/insertfault.test -> test/insertfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-01-26",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases for INSERT",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix insertfault",
          "18: do_execsql_test 1.0 {",
          "19:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c, d DEFAULT true);",
          "20:   INSERT INTO t1 DEFAULT VALUES;",
          "21:   SELECT * FROM t1;",
          "22: } {1 {} {} 1}",
          "23: faultsim_save_and_close",
          "25: breakpoint",
          "26: do_faultsim_test 1 -faults oom* -prep {",
          "27:   faultsim_restore_and_reopen",
          "28:   db eval { SELECT * FROM sqlite_master }",
          "29: } -body {",
          "30:   execsql { SELECT * FROM t1 }",
          "31: } -test {",
          "32:   faultsim_test_result {0 {1 {} {} 1}}",
          "33: }",
          "36: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
      "candidate_info": {
        "commit_hash": "25f933ad93e5990cf5b02fb5447790b027273710",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25f933ad93e5990cf5b02fb5447790b027273710",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" report from \"showdb\", also show the number of rows on each database btree page.\n\nFossilOrigin-Name: 2bda9dc41c07092ae37d0c6001c1271e0622bfff7151201fc2bb4c95422c087b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   int nCell;",
          "862:   int i;",
          "863:   int hdr = pgno==1 ? 100 : 0;",
          "865:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "866:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:   char zEntry[30];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "886:   }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "894:   }",
          "896:   if( a[hdr]==2 || a[hdr]==5 ){",
          "897:     int cellstart = hdr+12;",
          "898:     unsigned int child;",
          "",
          "[Removed Lines]",
          "888:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "889:                    zType, zName, idx, parent);",
          "891:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "895:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "",
          "[Added Lines]",
          "888:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "889:   if( nCell==1 ){",
          "890:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"1 row\");",
          "891:   }else{",
          "892:     sqlite3_snprintf(sizeof(zEntry),zEntry,\"%d rows\", nCell);",
          "893:   }",
          "895:     page_usage_msg(pgno, \"%s [%s], child %d of page %d, %s\",",
          "896:                    zType, zName, idx, parent, zEntry);",
          "898:     page_usage_msg(pgno, \"root %s [%s], %s\", zType, zName, zEntry);",
          "900:     page_usage_msg(pgno, \"orphaned %s, %s\", zType, zEntry);",
          "",
          "---------------"
        ]
      }
    }
  ]
}