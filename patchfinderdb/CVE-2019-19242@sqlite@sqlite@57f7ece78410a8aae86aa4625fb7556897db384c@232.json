{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "291508f62b9906adf7be3058b296d56edcc5b01f",
      "candidate_info": {
        "commit_hash": "291508f62b9906adf7be3058b296d56edcc5b01f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/291508f62b9906adf7be3058b296d56edcc5b01f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Remove an ALWAYS() that was previously added by check-in [a0819086] but which turns out can sometimes be false.\n\nFossilOrigin-Name: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 74eba2558a81f9e790d95a12a0c5379d4f80b43c8698ef9d6a31ff8d160a53d8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   top = get2byte(&data[hdr+5]);",
          "1632:   if( gap>top ){",
          "1634:       top = 65536;",
          "1635:     }else{",
          "1636:       return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1633:     if( top==0 && ALWAYS(pPage->pBt->usableSize==65536) ){",
          "",
          "[Added Lines]",
          "1633:     if( top==0 && pPage->pBt->usableSize==65536 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40d6c827e96737dbdfb5c54c803ee54560876290",
      "candidate_info": {
        "commit_hash": "40d6c827e96737dbdfb5c54c803ee54560876290",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/40d6c827e96737dbdfb5c54c803ee54560876290",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Have wapptest.tcl run at least one threadtest with an SQLITE_ENABLE_MEMORY_MANAGEMENT build.\n\nFossilOrigin-Name: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ea3f6fc88cf66824128aa64f777a7abb4f6ed55f214d7a135f36e306a32487c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     \"User-Auth\"               tcltest",
          "247:     \"Update-Delete-Limit\"     test",
          "248:     \"Extra-Robustness\"        test",
          "250:     \"No-lookaside\"            test",
          "251:     \"Devkit\"                  test",
          "252:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "249:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "249:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
      "candidate_info": {
        "commit_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "New tokens ALWAYS, GENERATED, and STORED used by generated columns should all be fallback tokens.\n\nFossilOrigin-Name: 13fe6978b7de208d2e27460d824f7fc778cf6ea0aabfe566b32bb410b8816f63",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223:   REINDEX RENAME CTIME_KW IF",
          "224:   .",
          "225: %wildcard ANY.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "224:   GENERATED ALWAYS STORED",
          "225: %endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
      "candidate_info": {
        "commit_hash": "ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5full.test",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow users to effectively disable fts5 crisismerge operations by setting the crisismerge threshold to higher than the maximum allowable segment b-trees on a single level. Fix for [d392017c].\n\nFossilOrigin-Name: 86e497209217abb7bcb491a023cd353f3c7c9c103ebd9f58dd8661b12cf3694c",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5full.test||ext/fts5/test/fts5full.test",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define FTS5_MAX_PREFIX_INDEXES 31",
          "64: #define FTS5_DEFAULT_NEARDIST 10",
          "65: #define FTS5_DEFAULT_RANK     \"bm25\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define FTS5_MAX_SEGMENT 2000",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:     }else{",
          "883:       if( nCrisisMerge<=1 ) nCrisisMerge = FTS5_DEFAULT_CRISISMERGE;",
          "884:       pConfig->nCrisisMerge = nCrisisMerge;",
          "885:     }",
          "886:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:       if( nCrisisMerge>=FTS5_MAX_SEGMENT ) nCrisisMerge = FTS5_MAX_SEGMENT-1;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: #define FTS5_SEGMENT_ROWID(segid, pgno)       fts5_dri(segid, 0, 0, pgno)",
          "240: #define FTS5_DLIDX_ROWID(segid, height, pgno) fts5_dri(segid, 1, height, pgno)",
          "247: #ifdef SQLITE_DEBUG",
          "248: int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }",
          "249: #endif",
          "",
          "[Removed Lines]",
          "245: #define FTS5_MAX_SEGMENT 2000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5full.test||ext/fts5/test/fts5full.test": [
          "File: ext/fts5/test/fts5full.test -> ext/fts5/test/fts5full.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:       execsql { INSERT INTO x8 VALUES( rnddoc(5) ); }",
          "37:     }",
          "38:   } msg] $msg",
          "42: finish_test",
          "",
          "[Removed Lines]",
          "39: } {1 {database or disk is full}}",
          "",
          "[Added Lines]",
          "39: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '65537');",
          "176: } {1 {SQL logic error}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: # Ticket [d392017c].",
          "180: #",
          "181: reset_db",
          "182: do_execsql_test 6.0 {",
          "183:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "184:   WITH s(i) AS (",
          "185:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10000",
          "186:   )",
          "187:   INSERT INTO vt0(c0) SELECT '0' FROM s;",
          "188:   INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2000);",
          "189:   INSERT INTO vt0(vt0, rank) VALUES('automerge', 0);",
          "190: } {}",
          "192: do_execsql_test 6.1 {",
          "193:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "194: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 907f7965b335d8d5441f2e386bb190d1f93ffcd45ca98d2d1c621dede491fc5e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f01dae1f3218f6ff16ad3004554ab6bcede33cd8",
      "candidate_info": {
        "commit_hash": "f01dae1f3218f6ff16ad3004554ab6bcede33cd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f01dae1f3218f6ff16ad3004554ab6bcede33cd8",
        "files": [
          "ext/expert/expert1.test",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/autoindex1.test",
          "test/bestindex3.test",
          "test/cost.test",
          "test/eqp.test",
          "test/join5.test",
          "test/rowvalue4.test",
          "test/tkt-80ba201079.test",
          "test/where7.test",
          "test/where9.test",
          "test/whereI.test",
          "test/with3.test"
        ],
        "message": "Additional steps to help ensure that scalar subqueries are only evaluated once even if they are used in multiple places within the query.  This fixes a performance regression reported on the mailing list and caused by check-in [531eca6104e41e43] which was a fix for ticket [787fa716be3a7f650c]. Think of this check-in as an improved fix for that ticket.\n\nFossilOrigin-Name: e130319317e761193890ef75787a3c114b61166f518df019697be8e2c820ec54",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/autoindex1.test||test/autoindex1.test",
          "test/bestindex3.test||test/bestindex3.test",
          "test/cost.test||test/cost.test",
          "test/eqp.test||test/eqp.test",
          "test/join5.test||test/join5.test",
          "test/rowvalue4.test||test/rowvalue4.test",
          "test/tkt-80ba201079.test||test/tkt-80ba201079.test",
          "test/where7.test||test/where7.test",
          "test/where9.test||test/where9.test",
          "test/whereI.test||test/whereI.test",
          "test/with3.test||test/with3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   CREATE INDEX t7_idx_00000062 ON t7(b);",
          "244:   CREATE INDEX t7_idx_00000061 ON t7(a);",
          "245:   MULTI-INDEX OR",
          "248: }",
          "250: # rowid terms.",
          "",
          "[Removed Lines]",
          "246:     SEARCH TABLE t7 USING INDEX t7_idx_00000061 (a=?)",
          "247:     SEARCH TABLE t7 USING INDEX t7_idx_00000062 (b=?)",
          "",
          "[Added Lines]",
          "246:     INDEX 1",
          "247:       SEARCH TABLE t7 USING INDEX t7_idx_00000061 (a=?)",
          "248:     INDEX 2",
          "249:       SEARCH TABLE t7 USING INDEX t7_idx_00000062 (b=?)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f856676c8438dbf52d299e78f6dd6148d929755dc05cdcabafd17d9a86439435",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:     }",
          "2545:     assert( pX->op==TK_IN );",
          "2547:     if( rMayHaveNull ){",
          "2549:     }",
          "2550:     pParse->nQueryLoop = savedNQueryLoop;",
          "2553:   }",
          "2555:   if( aiMap && eType!=IN_INDEX_INDEX_ASC && eType!=IN_INDEX_INDEX_DESC ){",
          "",
          "[Removed Lines]",
          "2546:     sqlite3CodeRhsOfIN(pParse, pX, eType==IN_INDEX_ROWID);",
          "2548:       sqlite3SetHasNullFlag(v, pX->iTable, rMayHaveNull);",
          "2551:   }else{",
          "2552:     pX->iTable = iTab;",
          "",
          "[Added Lines]",
          "2547:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "2549:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658: void sqlite3CodeRhsOfIN(",
          "2662: ){",
          "2671:   assert( v!=0 );",
          "2685:   }",
          "",
          "[Removed Lines]",
          "2670:   v = sqlite3GetVdbe(pParse);",
          "2683:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2684:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2675:   v = pParse->pVdbe;",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) && pParse->iSelfTab==0 ){",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2694:       int addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "2695:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2696:         ExplainQueryPlan((pParse, 0, \"REUSE LIST SUBQUERY %d\",",
          "2697:               pExpr->x.pSelect->selId));",
          "2698:       }",
          "2699:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2700:                         pExpr->y.sub.iAddr);",
          "2701:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2702:       sqlite3VdbeJumpHere(v, addr);",
          "2703:       return;",
          "2704:     }",
          "2707:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2708:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2709:     pExpr->y.sub.iAddr =",
          "2710:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2711:     VdbeComment((v, \"return address\"));",
          "2713:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2696:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2697:       pExpr->iTable, (isRowid?0:nVal));",
          "2698:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "2700:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2695:   pExpr->iTable = pParse->nTab++;",
          "",
          "[Added Lines]",
          "2724:   pExpr->iTable = iTab;",
          "2727: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2728:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2729:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "2730:   }else{",
          "2731:     VdbeComment((v, \"RHS of IN operator\"));",
          "2732:   }",
          "2733: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2706:     Select *pSelect = pExpr->x.pSelect;",
          "2707:     ExprList *pEList = pSelect->pEList;",
          "2711:     ));",
          "2712:     assert( !isRowid );",
          "",
          "[Removed Lines]",
          "2709:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY\",",
          "2710:         jmpIfDynamic>=0?\"\":\"CORRELATED \"",
          "",
          "[Added Lines]",
          "2745:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2746:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2715:     if( ALWAYS(pEList->nExpr==nVal) ){",
          "2716:       SelectDest dest;",
          "2717:       int i;",
          "2719:       dest.zAffSdst = exprINAffinity(pParse, pExpr);",
          "2720:       pSelect->iLimit = 0;",
          "2721:       testcase( pSelect->selFlags & SF_Distinct );",
          "",
          "[Removed Lines]",
          "2718:       sqlite3SelectDestInit(&dest, SRT_Set, pExpr->iTable);",
          "",
          "[Added Lines]",
          "2754:       sqlite3SelectDestInit(&dest, SRT_Set, iTab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2778:       }",
          "2781:       if( isRowid && sqlite3ExprIsInteger(pE2, &iValToIns) ){",
          "2783:       }else{",
          "2784:         r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2785:         if( isRowid ){",
          "2786:           sqlite3VdbeAddOp2(v, OP_MustBeInt, r3,",
          "2787:                             sqlite3VdbeCurrentAddr(v)+2);",
          "2788:           VdbeCoverage(v);",
          "2790:         }else{",
          "2791:           sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2793:         }",
          "2794:       }",
          "2795:     }",
          "",
          "[Removed Lines]",
          "2775:       if( jmpIfDynamic>=0 && !sqlite3ExprIsConstant(pE2) ){",
          "2776:         sqlite3VdbeChangeToNoop(v, jmpIfDynamic);",
          "2777:         jmpIfDynamic = -1;",
          "2782:         sqlite3VdbeAddOp3(v, OP_InsertInt, pExpr->iTable, r2, iValToIns);",
          "2789:           sqlite3VdbeAddOp3(v, OP_Insert, pExpr->iTable, r2, r3);",
          "2792:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, pExpr->iTable, r2, r3, 1);",
          "",
          "[Added Lines]",
          "2811:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2812:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2813:         addrOnce = 0;",
          "2818:         sqlite3VdbeAddOp3(v, OP_InsertInt, iTab, r2, iValToIns);",
          "2825:           sqlite3VdbeAddOp3(v, OP_Insert, iTab, r2, r3);",
          "2828:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2799:   if( pKeyInfo ){",
          "2800:     sqlite3VdbeChangeP4(v, addr, (void *)pKeyInfo, P4_KEYINFO);",
          "2801:   }",
          "2804:   }",
          "2805: }",
          "",
          "[Removed Lines]",
          "2802:   if( jmpIfDynamic>=0 ){",
          "2803:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2838:   if( addrOnce ){",
          "2839:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2841:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2842:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2822: #ifndef SQLITE_OMIT_SUBQUERY",
          "2823: int sqlite3CodeSubselect(Parse *pParse, Expr *pExpr){",
          "2831:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2830:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2870:   Vdbe *v = pParse->pVdbe;",
          "2872:   testcase( pExpr->op==TK_EXISTS );",
          "2873:   testcase( pExpr->op==TK_SELECT );",
          "2874:   assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );",
          "2875:   assert( ExprHasProperty(pExpr, EP_xIsSelect) );",
          "2876:   pSel = pExpr->x.pSelect;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2843:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2845:   }",
          "",
          "[Removed Lines]",
          "2844:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2891:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2892:       ExplainQueryPlan((pParse, 0, \"REUSE SUBQUERY %d\", pSel->selId));",
          "2893:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2894:                         pExpr->y.sub.iAddr);",
          "2895:       return pExpr->iTable;",
          "2896:     }",
          "2899:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2900:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2901:     pExpr->y.sub.iAddr =",
          "2902:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2903:     VdbeComment((v, \"return address\"));",
          "2905:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2865:   nReg = pExpr->op==TK_SELECT ? pSel->pEList->nExpr : 1;",
          "2866:   sqlite3SelectDestInit(&dest, 0, pParse->nMem+1);",
          "2867:   pParse->nMem += nReg;",
          "",
          "[Removed Lines]",
          "2857:   testcase( pExpr->op==TK_EXISTS );",
          "2858:   testcase( pExpr->op==TK_SELECT );",
          "2859:   assert( pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT );",
          "2860:   assert( ExprHasProperty(pExpr, EP_xIsSelect) );",
          "2862:   pSel = pExpr->x.pSelect;",
          "2863:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY\",",
          "2864:         jmpIfDynamic>=0?\"\":\"CORRELATED \"));",
          "",
          "[Added Lines]",
          "2918:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY %d\",",
          "2919:         addrOnce?\"\":\"CORRELATED \", pSel->selId));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2887:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "2888:     return 0;",
          "2889:   }",
          "2891:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2895:   }",
          "2897:   return rReg;",
          "",
          "[Removed Lines]",
          "2890:   rReg = dest.iSDParm;",
          "2893:   if( jmpIfDynamic>=0 ){",
          "2894:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2945:   pExpr->iTable = rReg = dest.iSDParm;",
          "2947:   if( addrOnce ){",
          "2948:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2951:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2952:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2987:   VdbeNoopComment((v, \"begin IN expr\"));",
          "2988:   eType = sqlite3FindInIndex(pParse, pExpr,",
          "2989:                              IN_INDEX_MEMBERSHIP | IN_INDEX_NOOP_OK,",
          "2992:   assert( pParse->nErr || nVector==1 || eType==IN_INDEX_EPH",
          "2993:        || eType==IN_INDEX_INDEX_ASC || eType==IN_INDEX_INDEX_DESC",
          "",
          "[Removed Lines]",
          "2990:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull, aiMap);",
          "",
          "[Added Lines]",
          "3049:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull,",
          "3050:                              aiMap, &iTab);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3099:     VdbeCoverage(v);",
          "3101:   }else{",
          "3102:     sqlite3VdbeAddOp4(v, OP_Affinity, rLhs, nVector, 0, zAff, nVector);",
          "3103:     if( destIfFalse==destIfNull ){",
          "3106:                            rLhs, nVector); VdbeCoverage(v);",
          "3107:       goto sqlite3ExprCodeIN_finished;",
          "3108:     }",
          "3111:                                       rLhs, nVector); VdbeCoverage(v);",
          "3112:   }",
          "",
          "[Removed Lines]",
          "3098:     sqlite3VdbeAddOp3(v, OP_SeekRowid, pExpr->iTable, destIfFalse, rLhs);",
          "3105:       sqlite3VdbeAddOp4Int(v, OP_NotFound, pExpr->iTable, destIfFalse,",
          "3110:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, pExpr->iTable, 0,",
          "",
          "[Added Lines]",
          "3158:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iTab, destIfFalse, rLhs);",
          "3165:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iTab, destIfFalse,",
          "3170:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, iTab, 0,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3134:   if( destStep6 ) sqlite3VdbeResolveLabel(v, destStep6);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "",
          "[Added Lines]",
          "3195:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3147:     int r3 = sqlite3GetTempReg(pParse);",
          "3148:     p = sqlite3VectorFieldSubexpr(pLeft, i);",
          "3149:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "3151:     sqlite3VdbeAddOp4(v, OP_Ne, rLhs+i, destNotNull, r3,",
          "3152:                       (void*)pColl, P4_COLLSEQ);",
          "3153:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3150:     sqlite3VdbeAddOp3(v, OP_Column, pExpr->iTable, i, r3);",
          "",
          "[Added Lines]",
          "3210:     sqlite3VdbeAddOp3(v, OP_Column, iTab, i, r3);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3156:   sqlite3VdbeAddOp2(v, OP_Goto, 0, destIfNull);",
          "3157:   if( nVector>1 ){",
          "3158:     sqlite3VdbeResolveLabel(v, destNotNull);",
          "3160:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3159:     sqlite3VdbeAddOp2(v, OP_Next, pExpr->iTable, addrTop+1);",
          "",
          "[Added Lines]",
          "3219:     sqlite3VdbeAddOp2(v, OP_Next, iTab, addrTop+1);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5835:     pSub = pItem->pSelect;",
          "5836:     if( pSub==0 ) continue;",
          "",
          "[Removed Lines]",
          "5844:     if( pItem->addrFillSub ){",
          "5845:       if( pItem->fg.viaCoroutine==0 ){",
          "5849:         testcase( sqlite3VdbeGetOp(v, pItem->addrFillSub)->opcode==OP_Once );",
          "5850:         sqlite3VdbeAddOp2(v, OP_Gosub, pItem->regReturn, pItem->addrFillSub);",
          "5851:       }",
          "5852:       continue;",
          "5853:     }",
          "",
          "[Added Lines]",
          "5843:     assert( pItem->addrFillSub==0 );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2485:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "2488:   } y;",
          "2489: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:     } sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4258: int sqlite3GetToken(const unsigned char *, int *);",
          "4259: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4260: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4262: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4263: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4264: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4261: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4266: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4516: int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);",
          "4517: int sqlite3JournalSize(sqlite3_vfs *);",
          "",
          "[Removed Lines]",
          "4514: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*);",
          "",
          "[Added Lines]",
          "4519: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*, int*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   pCx->isEphemeral = 1;",
          "3611:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3612:   pCx->isTable = pOrig->isTable;",
          "3614:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "3613:   rc = sqlite3BtreeCursor(pOrig->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3613:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3614:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   void sqlite3VdbeExplain(Parse*,u8,const char*,...);",
          "208:   void sqlite3VdbeExplainPop(Parse*);",
          "209:   int sqlite3VdbeExplainParent(Parse*);",
          "210: # define ExplainQueryPlan(P)        sqlite3VdbeExplain P",
          "211: # define ExplainQueryPlanPop(P)     sqlite3VdbeExplainPop(P)",
          "212: # define ExplainQueryPlanParent(P)  sqlite3VdbeExplainParent(P)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:   void sqlite3ExplainBreakpoint(const char*,const char*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214: # define ExplainQueryPlan(P)",
          "215: # define ExplainQueryPlanPop(P)",
          "216: # define ExplainQueryPlanParent(P) 0",
          "217: #endif",
          "218: void sqlite3VdbeAddParseSchemaOp(Vdbe*,int,char*);",
          "219: void sqlite3VdbeChangeOpcode(Vdbe*, u32 addr, u8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: #endif",
          "220: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_EXPLAIN)",
          "221:   void sqlite3ExplainBreakpoint(const char*,const char*);",
          "222: #else",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: #if defined(SQLITE_DEBUG)",
          "357: void sqlite3ExplainBreakpoint(const char *z1, const char *z2){",
          "358:   (void)z1;",
          "359:   (void)z2;",
          "360: }",
          "361: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373:     iThis = v->nOp;",
          "374:     sqlite3VdbeAddOp4(v, OP_Explain, iThis, pParse->addrExplain, 0,",
          "375:                       zMsg, P4_DYNAMIC);",
          "377:   }",
          "378: }",
          "",
          "[Removed Lines]",
          "376:     if( bPush) pParse->addrExplain = iThis;",
          "",
          "[Added Lines]",
          "387:     sqlite3ExplainBreakpoint(bPush?\"PUSH\":\"\", sqlite3VdbeGetOp(v,-1)->p4.z);",
          "388:     if( bPush){",
          "389:       pParse->addrExplain = iThis;",
          "390:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383: void sqlite3VdbeExplainPop(Parse *pParse){",
          "384:   pParse->addrExplain = sqlite3VdbeExplainParent(pParse);",
          "385: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:   sqlite3ExplainBreakpoint(\"POP\", 0);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "855:                           pTabItem->regResult, 1);",
          "856:     sqlite3VdbeGoto(v, addrTop);",
          "857:   }else{",
          "858:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "859:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857:     pTabItem->fg.viaCoroutine = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5074:         pParse, pTabList, pLevel, wctrlFlags",
          "5075:     );",
          "5076:     pLevel->addrBody = sqlite3VdbeCurrentAddr(v);",
          "5078:     pWInfo->iContinue = pLevel->addrCont;",
          "5079:     if( (wsFlags&WHERE_MULTI_OR)==0 && (wctrlFlags&WHERE_OR_SUBCLAUSE)==0 ){",
          "5080:       sqlite3WhereAddScanStatus(v, pTabList, pLevel, addrExplain);",
          "",
          "[Removed Lines]",
          "5077:     notReady = sqlite3WhereCodeOneLoopStart(pWInfo, ii, notReady);",
          "",
          "[Added Lines]",
          "5078:     notReady = sqlite3WhereCodeOneLoopStart(pParse,v,pWInfo,ii,pLevel,notReady);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:     }",
          "214: #endif",
          "215:     zMsg = sqlite3StrAccumFinish(&str);",
          "216:     ret = sqlite3VdbeAddOp4(v, OP_Explain, sqlite3VdbeCurrentAddr(v),",
          "217:                             pParse->addrExplain, 0, zMsg,P4_DYNAMIC);",
          "218:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     sqlite3ExplainBreakpoint(\"\",zMsg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:       if( pLoop->aLTerm[i]->pExpr==pX ) nEq++;",
          "539:     }",
          "541:     if( (pX->flags & EP_xIsSelect)==0 || pX->x.pSelect->pEList->nExpr==1 ){",
          "543:     }else{",
          "544:       sqlite3 *db = pParse->db;",
          "545:       pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);",
          "547:       if( !db->mallocFailed ){",
          "548:         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);",
          "551:       }",
          "552:       sqlite3ExprDelete(db, pX);",
          "553:       pX = pTerm->pExpr;",
          "",
          "[Removed Lines]",
          "542:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0);",
          "549:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap);",
          "550:         pTerm->pExpr->iTable = pX->iTable;",
          "",
          "[Added Lines]",
          "542:     iTab = 0;",
          "544:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0, &iTab);",
          "551:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap, &iTab);",
          "552:         pTerm->pExpr->iTable = iTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:       testcase( bRev );",
          "558:       bRev = !bRev;",
          "559:     }",
          "561:     sqlite3VdbeAddOp2(v, bRev ? OP_Last : OP_Rewind, iTab, 0);",
          "562:     VdbeCoverageIf(v, bRev);",
          "563:     VdbeCoverageIf(v, !bRev);",
          "",
          "[Removed Lines]",
          "560:     iTab = pX->iTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1194:   pWC = &pWInfo->sWC;",
          "1195:   db = pParse->db;",
          "1197:   pLoop = pLevel->pWLoop;",
          "1198:   pTabItem = &pWInfo->pTabList->a[pLevel->iFrom];",
          "1199:   iCur = pTabItem->iCursor;",
          "1200:   pLevel->notReady = notReady & ~sqlite3WhereGetMask(&pWInfo->sMaskSet, iCur);",
          "1201:   bRev = (pWInfo->revMask>>iLevel)&1;",
          "1204:   VdbeModuleComment((v, \"Begin WHERE-loop%d: %s\",iLevel,pTabItem->pTab->zName));",
          "",
          "[Removed Lines]",
          "1192:   pParse = pWInfo->pParse;",
          "1193:   v = pParse->pVdbe;",
          "1196:   pLevel = &pWInfo->a[iLevel];",
          "1202:   omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1203:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1341:     pTerm = pLoop->aLTerm[0];",
          "1342:     assert( pTerm!=0 );",
          "1343:     assert( pTerm->pExpr!=0 );",
          "1345:     testcase( pTerm->wtFlags & TERM_VIRTUAL );",
          "1346:     iReleaseReg = ++pParse->nMem;",
          "1347:     iRowidReg = codeEqualityTerm(pParse, pTerm, pLevel, 0, bRev, iReleaseReg);",
          "",
          "[Removed Lines]",
          "1344:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1360:     int memEndValue = 0;",
          "1361:     WhereTerm *pStart, *pEnd;",
          "1364:     j = 0;",
          "1365:     pStart = pEnd = 0;",
          "1366:     if( pLoop->wsFlags & WHERE_BTM_LIMIT ) pStart = pLoop->aLTerm[j++];",
          "",
          "[Removed Lines]",
          "1363:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1725:     }",
          "1728:     if( omitTable ){",
          "1730:     }else if( HasRowid(pIdx->pTable) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1723:     omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1724:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1951:           pOrExpr = pAndExpr;",
          "1952:         }",
          "1954:         WHERETRACE(0xffff, (\"Subplan for OR-clause:\\n\"));",
          "1955:         pSubWInfo = sqlite3WhereBegin(pParse, pOrTab, pOrExpr, 0, 0,",
          "1956:                                       wctrlFlags, iCovCur);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1951:         ExplainQueryPlan((pParse, 1, \"INDEX %d\", ii+1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2056:           sqlite3WhereEnd(pSubWInfo);",
          "2057:         }",
          "2058:       }",
          "2059:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:           ExplainQueryPlanPop(pParse);",
          "",
          "---------------"
        ],
        "test/autoindex1.test||test/autoindex1.test": [
          "File: test/autoindex1.test -> test/autoindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: } {",
          "185:   QUERY PLAN",
          "186:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "188:      `--SCAN TABLE t502",
          "189: }",
          "190: do_eqp_test autoindex1-501 {",
          "",
          "[Removed Lines]",
          "187:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "187:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {",
          "194:   QUERY PLAN",
          "195:   |--SCAN TABLE t501",
          "197:      `--SEARCH TABLE t502 USING AUTOMATIC COVERING INDEX (y=?)",
          "198: }",
          "199: do_eqp_test autoindex1-502 {",
          "",
          "[Removed Lines]",
          "196:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "196:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: } {",
          "204:   QUERY PLAN",
          "205:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "207:      `--SCAN TABLE t502",
          "208: }",
          "",
          "[Removed Lines]",
          "206:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "206:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:   |--MATERIALIZE xxxxxx",
          "281:   |  |--SCAN TABLE sheep AS s",
          "282:   |  |--SEARCH TABLE flock_owner AS prev USING INDEX sqlite_autoindex_flock_owner_1 (flock_no=? AND owner_change_date<?)",
          "284:   |     `--SEARCH TABLE flock_owner AS later USING COVERING INDEX sqlite_autoindex_flock_owner_1 (flock_no=? AND owner_change_date>? AND owner_change_date<?)",
          "285:   |--SCAN TABLE sheep AS x USING INDEX sheep_reg_flock_index",
          "286:   `--SEARCH SUBQUERY xxxxxx AS y USING AUTOMATIC COVERING INDEX (sheep_no=?)",
          "",
          "[Removed Lines]",
          "283:   |  `--CORRELATED SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "283:   |  `--CORRELATED SCALAR SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/bestindex3.test||test/bestindex3.test": [
          "File: test/bestindex3.test -> test/bestindex3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: } {",
          "91:   QUERY PLAN",
          "92:   `--MULTI-INDEX OR",
          "95: }",
          "97: do_eqp_test 1.4 {",
          "",
          "[Removed Lines]",
          "93:      |--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:a EQ ?",
          "94:      `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:b EQ ?",
          "",
          "[Added Lines]",
          "93:      |--INDEX 1",
          "94:      |  `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:a EQ ?",
          "95:      `--INDEX 2",
          "96:         `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:b EQ ?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: } {",
          "100:   QUERY PLAN",
          "101:   `--MULTI-INDEX OR",
          "104: }",
          "106: do_execsql_test 1.5 {",
          "",
          "[Removed Lines]",
          "102:      |--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:a LIKE ?",
          "103:      `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:b EQ ?",
          "",
          "[Added Lines]",
          "104:      |--INDEX 1",
          "105:      |  `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:a LIKE ?",
          "106:      `--INDEX 2",
          "107:         `--SCAN TABLE t1 VIRTUAL TABLE INDEX 0:b EQ ?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:   } [string map {\"\\n  \" \\n} {",
          "151:     QUERY PLAN",
          "152:     `--MULTI-INDEX OR",
          "155:   }]",
          "156: }",
          "",
          "[Removed Lines]",
          "153:        |--SEARCH TABLE t2 USING INDEX t2x (x>? AND x<?)",
          "154:        `--SEARCH TABLE t2 USING INDEX t2y (y=?)",
          "",
          "[Added Lines]",
          "157:        |--INDEX 1",
          "158:        |  `--SEARCH TABLE t2 USING INDEX t2x (x>? AND x<?)",
          "159:        `--INDEX 2",
          "160:           `--SEARCH TABLE t2 USING INDEX t2y (y=?)",
          "",
          "---------------"
        ],
        "test/cost.test||test/cost.test": [
          "File: test/cost.test -> test/cost.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: } {",
          "59:   QUERY PLAN",
          "60:   |--MULTI-INDEX OR",
          "64:   `--USE TEMP B-TREE FOR ORDER BY",
          "65: }",
          "",
          "[Removed Lines]",
          "61:   |  |--SEARCH TABLE t5 USING INDEX t5b (b=?)",
          "62:   |  |--SEARCH TABLE t5 USING INDEX t5c (c=?)",
          "63:   |  `--SEARCH TABLE t5 USING INDEX t5d (d=?)",
          "",
          "[Added Lines]",
          "61:   |  |--INDEX 1",
          "62:   |  |  `--SEARCH TABLE t5 USING INDEX t5b (b=?)",
          "63:   |  |--INDEX 2",
          "64:   |  |  `--SEARCH TABLE t5 USING INDEX t5c (c=?)",
          "65:   |  `--INDEX 3",
          "66:   |     `--SEARCH TABLE t5 USING INDEX t5d (d=?)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: } {",
          "125:   QUERY PLAN",
          "126:   |--MULTI-INDEX OR",
          "129:   `--USE TEMP B-TREE FOR ORDER BY",
          "130: }",
          "",
          "[Removed Lines]",
          "127:   |  |--SEARCH TABLE t3 USING INDEX t3i1 (b>? AND b<?)",
          "128:   |  `--SEARCH TABLE t3 USING INDEX t3i2 (c=?)",
          "",
          "[Added Lines]",
          "130:   |  |--INDEX 1",
          "131:   |  |  `--SEARCH TABLE t3 USING INDEX t3i1 (b>? AND b<?)",
          "132:   |  `--INDEX 2",
          "133:   |     `--SEARCH TABLE t3 USING INDEX t3i2 (c=?)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149: } {",
          "150:   QUERY PLAN",
          "151:   |--MULTI-INDEX OR",
          "154:   `--USE TEMP B-TREE FOR ORDER BY",
          "155: }",
          "",
          "[Removed Lines]",
          "152:   |  |--SEARCH TABLE t1 USING INDEX t1b (b>? AND b<?)",
          "153:   |  `--SEARCH TABLE t1 USING INDEX t1b (b=?)",
          "",
          "[Added Lines]",
          "157:   |  |--INDEX 1",
          "158:   |  |  `--SEARCH TABLE t1 USING INDEX t1b (b>? AND b<?)",
          "159:   |  `--INDEX 2",
          "160:   |     `--SEARCH TABLE t1 USING INDEX t1b (b=?)",
          "",
          "---------------"
        ],
        "test/eqp.test||test/eqp.test": [
          "File: test/eqp.test -> test/eqp.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: } {",
          "46:   QUERY PLAN",
          "47:   |--MULTI-INDEX OR",
          "50:   `--SCAN TABLE t2",
          "51: }",
          "52: do_eqp_test 1.3 {",
          "",
          "[Removed Lines]",
          "48:   |  |--SEARCH TABLE t1 USING INDEX i1 (a=?)",
          "49:   |  `--SEARCH TABLE t1 USING INDEX i2 (b=?)",
          "",
          "[Added Lines]",
          "48:   |  |--INDEX 1",
          "49:   |  |  `--SEARCH TABLE t1 USING INDEX i1 (a=?)",
          "50:   |  `--INDEX 2",
          "51:   |     `--SEARCH TABLE t1 USING INDEX i2 (b=?)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   QUERY PLAN",
          "56:   |--SCAN TABLE t2",
          "57:   `--MULTI-INDEX OR",
          "60: }",
          "61: do_eqp_test 1.3 {",
          "62:   SELECT a FROM t1 ORDER BY a",
          "",
          "[Removed Lines]",
          "58:      |--SEARCH TABLE t1 USING INDEX i1 (a=?)",
          "59:      `--SEARCH TABLE t1 USING INDEX i2 (b=?)",
          "",
          "[Added Lines]",
          "60:      |--INDEX 1",
          "61:      |  `--SEARCH TABLE t1 USING INDEX i1 (a=?)",
          "62:      `--INDEX 2",
          "63:         `--SEARCH TABLE t1 USING INDEX i2 (b=?)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225: } {",
          "226:   QUERY PLAN",
          "227:   |--SCAN TABLE t1",
          "229:      `--SCAN TABLE t1 AS sub",
          "230: }",
          "231: do_eqp_test 3.1.2 {",
          "",
          "[Removed Lines]",
          "228:   `--SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "232:   `--SCALAR SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233: } {",
          "234:   QUERY PLAN",
          "235:   |--SCAN TABLE t1",
          "237:      `--SCAN TABLE t1 AS sub",
          "238: }",
          "239: do_eqp_test 3.1.3 {",
          "",
          "[Removed Lines]",
          "236:   `--SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "240:   `--SCALAR SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241: } {",
          "242:   QUERY PLAN",
          "243:   |--SCAN TABLE t1",
          "245:      |--SCAN TABLE t1 AS sub",
          "246:      `--USE TEMP B-TREE FOR ORDER BY",
          "247: }",
          "",
          "[Removed Lines]",
          "244:   `--SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "248:   `--SCALAR SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "250: } {",
          "251:   QUERY PLAN",
          "252:   |--SCAN TABLE t1",
          "254:      `--SCAN TABLE t2 USING COVERING INDEX t2i1",
          "255: }",
          "",
          "[Removed Lines]",
          "253:   `--SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "257:   `--SCALAR SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286: } {",
          "287:   QUERY PLAN",
          "288:   |--SCAN TABLE t1",
          "290:      `--SCAN TABLE t2",
          "291: }",
          "292: det 3.3.2 {",
          "",
          "[Removed Lines]",
          "289:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "293:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294: } {",
          "295:   QUERY PLAN",
          "296:   |--SCAN TABLE t1",
          "298:      `--SCAN TABLE t2",
          "299: }",
          "300: det 3.3.3 {",
          "",
          "[Removed Lines]",
          "297:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "301:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302: } {",
          "303:   QUERY PLAN",
          "304:   |--SCAN TABLE t1",
          "306:      `--SCAN TABLE t2",
          "307: }",
          "",
          "[Removed Lines]",
          "305:   `--CORRELATED SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "309:   `--CORRELATED SCALAR SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "813:   |--MATERIALIZE xxxxxx",
          "814:   |  |--SCAN TABLE forumpost AS x USING INDEX forumthread",
          "815:   |  |--USING ROWID SEARCH ON TABLE private FOR IN-OPERATOR",
          "817:   |  |  |--SEARCH TABLE forumpost USING COVERING INDEX forumthread (froot=?)",
          "818:   |  |  `--USING ROWID SEARCH ON TABLE private FOR IN-OPERATOR",
          "819:   |  `--USE TEMP B-TREE FOR ORDER BY",
          "",
          "[Removed Lines]",
          "816:   |  |--CORRELATED SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "820:   |  |--CORRELATED SCALAR SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/join5.test||test/join5.test": [
          "File: test/join5.test -> test/join5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   QUERY PLAN",
          "268:   |--SCAN TABLE t1",
          "269:   `--MULTI-INDEX OR",
          "272: }",
          "274: do_execsql_test 7.3 {",
          "",
          "[Removed Lines]",
          "270:      |--SEARCH TABLE t2 USING INDEX t2xy (x=? AND y=?)",
          "271:      `--SEARCH TABLE t2 USING INDEX t2xy (x=? AND y=?)",
          "",
          "[Added Lines]",
          "270:      |--INDEX 1",
          "271:      |  `--SEARCH TABLE t2 USING INDEX t2xy (x=? AND y=?)",
          "272:      `--INDEX 2",
          "273:         `--SEARCH TABLE t2 USING INDEX t2xy (x=? AND y=?)",
          "",
          "---------------"
        ],
        "test/rowvalue4.test||test/rowvalue4.test": [
          "File: test/rowvalue4.test -> test/rowvalue4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: } {",
          "236:   QUERY PLAN",
          "237:   |--SEARCH TABLE d2 USING INDEX d2ab (a=? AND b=?)",
          "239:   |  `--SCAN TABLE d1",
          "241:      `--SCAN TABLE d1",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   |--LIST SUBQUERY",
          "240:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "238:   |--LIST SUBQUERY xxxxxx",
          "240:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/tkt-80ba201079.test||test/tkt-80ba201079.test": [
          "File: test/tkt-80ba201079.test -> test/tkt-80ba201079.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: } {300 object_change 2048}",
          "111: do_test tkt-80ba2-201 {",
          "112:   db eval {",
          "113:     CREATE INDEX timeline_entry_id_idx on timeline(entry_id);",
          "114:     SELECT entry_type,",
          "115:            entry_types.name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: PRAGMA vdbe_debug=on;",
          "114: PRAGMA vdbe_addoptrace=on;",
          "",
          "---------------"
        ],
        "test/where7.test||test/where7.test": [
          "File: test/where7.test -> test/where7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23353: } {",
          "23354:   QUERY PLAN",
          "23355:   |--MULTI-INDEX OR",
          "23358:   |--SEARCH TABLE t302 USING INDEX t302_c8_c3 (c8=? AND c3>?)",
          "23359:   `--USE TEMP B-TREE FOR ORDER BY",
          "23360: }",
          "",
          "[Removed Lines]",
          "23356:   |  |--SEARCH TABLE t301 USING COVERING INDEX t301_c4 (c4=?)",
          "23357:   |  `--SEARCH TABLE t301 USING INTEGER PRIMARY KEY (rowid=?)",
          "",
          "[Added Lines]",
          "23356:   |  |--INDEX 1",
          "23357:   |  |  `--SEARCH TABLE t301 USING COVERING INDEX t301_c4 (c4=?)",
          "23358:   |  `--INDEX 2",
          "23359:   |     `--SEARCH TABLE t301 USING INTEGER PRIMARY KEY (rowid=?)",
          "",
          "---------------"
        ],
        "test/where9.test||test/where9.test": [
          "File: test/where9.test -> test/where9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     QUERY PLAN",
          "365:     |--SEARCH TABLE t1 USING INTEGER PRIMARY KEY (rowid=?)",
          "366:     `--MULTI-INDEX OR",
          "369:   }]",
          "370:   do_eqp_test where9-3.2 {",
          "371:     SELECT coalesce(t2.a,9999)",
          "",
          "[Removed Lines]",
          "367:        |--SEARCH TABLE t2 USING INDEX t2d (d=?)",
          "368:        `--SEARCH TABLE t2 USING COVERING INDEX t2f (f=?)",
          "",
          "[Added Lines]",
          "367:        |--INDEX 1",
          "368:        |  `--SEARCH TABLE t2 USING INDEX t2d (d=?)",
          "369:        `--INDEX 3",
          "370:           `--SEARCH TABLE t2 USING COVERING INDEX t2f (f=?)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     QUERY PLAN",
          "376:     |--SEARCH TABLE t1 USING INTEGER PRIMARY KEY (rowid=?)",
          "377:     `--MULTI-INDEX OR",
          "380:   }]",
          "381: }",
          "",
          "[Removed Lines]",
          "378:        |--SEARCH TABLE t2 USING INDEX t2d (d=?)",
          "379:        `--SEARCH TABLE t2 USING COVERING INDEX t2f (f=?)",
          "",
          "[Added Lines]",
          "380:        |--INDEX 1",
          "381:        |  `--SEARCH TABLE t2 USING INDEX t2d (d=?)",
          "382:        `--INDEX 2",
          "383:           `--SEARCH TABLE t2 USING COVERING INDEX t2f (f=?)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456: } {",
          "457:   QUERY PLAN",
          "458:   `--MULTI-INDEX OR",
          "461: }",
          "463: # In contrast, b=1000 is preferred over any OR-clause.",
          "",
          "[Removed Lines]",
          "459:      |--SEARCH TABLE t1 USING INDEX t1c (c=?)",
          "460:      `--SEARCH TABLE t1 USING INDEX t1d (d=?)",
          "",
          "[Added Lines]",
          "463:      |--INDEX 1",
          "464:      |  `--SEARCH TABLE t1 USING INDEX t1c (c=?)",
          "465:      `--INDEX 2",
          "466:         `--SEARCH TABLE t1 USING INDEX t1d (d=?)",
          "",
          "---------------"
        ],
        "test/whereI.test||test/whereI.test": [
          "File: test/whereI.test -> test/whereI.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   `--MULTI-INDEX OR",
          "36: }",
          "38: do_execsql_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:      |--SEARCH TABLE t1 USING INDEX i1 (b=?)",
          "35:      `--SEARCH TABLE t1 USING INDEX i2 (c=?)",
          "",
          "[Added Lines]",
          "34:      |--INDEX 1",
          "35:      |  `--SEARCH TABLE t1 USING INDEX i1 (b=?)",
          "36:      `--INDEX 2",
          "37:         `--SEARCH TABLE t1 USING INDEX i2 (c=?)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: } {",
          "62:   QUERY PLAN",
          "63:   `--MULTI-INDEX OR",
          "66: }",
          "68: do_execsql_test 2.2 {",
          "",
          "[Removed Lines]",
          "64:      |--SEARCH TABLE t2 USING INDEX i3 (b=?)",
          "65:      `--SEARCH TABLE t2 USING INDEX i4 (c=?)",
          "",
          "[Added Lines]",
          "66:      |--INDEX 1",
          "67:      |  `--SEARCH TABLE t2 USING INDEX i3 (b=?)",
          "68:      `--INDEX 2",
          "69:         `--SEARCH TABLE t2 USING INDEX i4 (c=?)",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   |--MATERIALIZE xxxxxx",
          "121:   |  |--SETUP",
          "122:   |  |  |--SCAN CONSTANT ROW",
          "124:   |  |     `--SCAN TABLE w2",
          "125:   |  `--RECURSIVE STEP",
          "126:   |     |--SCAN TABLE w1",
          "",
          "[Removed Lines]",
          "123:   |  |  `--SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "123:   |  |  `--SCALAR SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    }
  ]
}