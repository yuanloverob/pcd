{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1243a6d9c3c20554065bcf34bd982f8c969aeb5",
      "candidate_info": {
        "commit_hash": "b1243a6d9c3c20554065bcf34bd982f8c969aeb5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1243a6d9c3c20554065bcf34bd982f8c969aeb5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c"
        ],
        "message": "MSVC does not allow constant expressions as initializers for constants with /fp:strict.\n\nFossilOrigin-Name: 076658e5d21d9284448f41312b83a6c3d25394c2bfa088ef6cdfe1dc60277856",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27936e6884e77093533719c7955a17f051cfb359872e51a6d1481152e6256443",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623: } aXformType[] = {",
          "630: };",
          "",
          "[Removed Lines]",
          "624:   { 0, 6, \"second\", 464269060800.0, 86400000.0/(24.0*60.0*60.0) },",
          "625:   { 0, 6, \"minute\", 7737817680.0,   86400000.0/(24.0*60.0)      },",
          "626:   { 0, 4, \"hour\",   128963628.0,    86400000.0/24.0             },",
          "627:   { 0, 3, \"day\",    5373485.0,      86400000.0                  },",
          "628:   { 1, 5, \"month\",  176546.0,       30.0*86400000.0             },",
          "629:   { 2, 4, \"year\",   14713.0,        365.0*86400000.0            },",
          "",
          "[Added Lines]",
          "624:   { 0, 6, \"second\", 464269060800.0, 1000.0         },",
          "625:   { 0, 6, \"minute\", 7737817680.0,   60000.0        },",
          "626:   { 0, 4, \"hour\",   128963628.0,    3600000.0      },",
          "627:   { 0, 3, \"day\",    5373485.0,      86400000.0     },",
          "628:   { 1, 5, \"month\",  176546.0,       2592000000.0   },",
          "629:   { 2, 4, \"year\",   14713.0,        31536000000.0  },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0365c487c1267af6d3ab101399c6fa35f5184a3",
      "candidate_info": {
        "commit_hash": "a0365c487c1267af6d3ab101399c6fa35f5184a3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0365c487c1267af6d3ab101399c6fa35f5184a3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "In the debugging treeview output, change the name of \"SELECT-expr\" expression nodes to be \"subquery-expr\", so as to not confuse them with actual SELECT nodes.\n\nFossilOrigin-Name: c1c8937a30feff6aa4385b0c264fd8e70d54422a0629c2ce38082d85d3334a57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2827c0a186596299e43eb3e7378eea462d2b060b2c3388ce5cb2bc8e0b43999e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:       break;",
          "617:     }",
          "618:     case TK_SELECT: {",
          "620:       sqlite3TreeViewSelect(pView, pExpr->x.pSelect, 0);",
          "621:       break;",
          "622:     }",
          "",
          "[Removed Lines]",
          "619:       sqlite3TreeViewLine(pView, \"SELECT-expr flags=0x%x\", pExpr->flags);",
          "",
          "[Added Lines]",
          "619:       sqlite3TreeViewLine(pView, \"subquery-expr flags=0x%x\", pExpr->flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbfd113365bb001152adb9944e127e9620ec3738",
      "candidate_info": {
        "commit_hash": "fbfd113365bb001152adb9944e127e9620ec3738",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbfd113365bb001152adb9944e127e9620ec3738",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/in.test"
        ],
        "message": "Reinstate the optimization of converting \"a IN (C)\" into \"a=C\" but only if C is a constant.  If the RHS is a table column, the complications of managing affinity and collations become too involved to mess with.\n\nFossilOrigin-Name: 8ac26a23d7f0ef29c5eb007c7467181f8b96102c8600ea8a5b15cc7584af27bd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 912148913c11d98e48119a2c1fa7a0e52f318af36e7e2491d968ffde286c949f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1194:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1195:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "1196:     }else{",
          "1197:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1198:       if( A ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1196:     }else if( 0 && Y->nExpr==1 && sqlite3ExprIsConstant(Y->a[0].pExpr) ){",
          "1197:       Expr *pRHS = Y->a[0].pExpr;",
          "1198:       Y->a[0].pExpr = 0;",
          "1199:       sqlite3ExprListDelete(pParse->db, Y);",
          "1200:       A = sqlite3PExpr(pParse, TK_EQ, A, pRHS);",
          "1201:       if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "765: #",
          "766: # Also ticket https://sqlite.org/src/info/29f635e0af71234b",
          "767: #",
          "769:   DROP TABLE IF EXISTS t0;",
          "770:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "773: } {1}",
          "776: } {1}",
          "779: } {1}",
          "781:   DROP TABLE t0;",
          "782:   CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
          "783:   CREATE INDEX i0 ON t0(c1 IN (c0));",
          "",
          "[Removed Lines]",
          "768: do_execsql_test in-19.1 {",
          "771:   INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
          "772:   SELECT 1 FROM t0 WHERE c0 IN ('2070934912552030444');",
          "774: do_execsql_test in-19.2 {",
          "775:   SELECT c0 IN ('2070934912552030444') FROM t0;",
          "777: do_execsql_test in-19.3 {",
          "778:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "780: do_execsql_test in-19.4 {",
          "",
          "[Added Lines]",
          "768: do_execsql_test in-19.10 {",
          "771:   INSERT INTO t0(c0) VALUES(2.0625E00);",
          "772:   SELECT 1 FROM t0 WHERE c0 IN ('2.0625');",
          "774: do_execsql_test in-19.20 {",
          "775:   SELECT c0 IN ('2.0625') FROM t0;",
          "777: do_execsql_test in-19.21 {",
          "778:   SELECT c0 = ('2.0625') FROM t0;",
          "780: do_execsql_test in-19.22 {",
          "781:   SELECT c0 = ('0.20625e+01') FROM t0;",
          "782: } {1}",
          "783: do_execsql_test in-19.30 {",
          "784:   SELECT c0 IN ('2.0625',2,3) FROM t0;",
          "785: } {1}",
          "786: do_execsql_test in-19.40 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df97d439301fefc2d962b5619d22f82dc436d1c6",
      "candidate_info": {
        "commit_hash": "df97d439301fefc2d962b5619d22f82dc436d1c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df97d439301fefc2d962b5619d22f82dc436d1c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c"
        ],
        "message": "Ensure that the filename passed into the xFullPathname method of the VFS is acceptable as an argument to sqlite3_uri_parameter().  The interface spec does not guarantee this, but it has been so historically and some applications have come to depends on it.\n\nFossilOrigin-Name: bfb09371d452d5d4dacab2ec476880bc729952f44ac0e5de90ea7ba203243c8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47d4240c4a837e829f593bb2aad7563010838f55345e7a0d8e2ea79462aeeb3c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "188:     rc = SQLITE_NOMEM_BKPT;",
          "189:   }",
          "",
          "[Removed Lines]",
          "190:   sqlite3_free( zPath );",
          "",
          "[Added Lines]",
          "190:   sqlite3_free_filename( zPath );",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2797:     zFile = sqlite3_malloc64(nByte);",
          "2798:     if( !zFile ) return SQLITE_NOMEM_BKPT;",
          "2800:     iIn = 5;",
          "2801: #ifdef SQLITE_ALLOW_URI_AUTHORITY",
          "2802:     if( strncmp(zUri+5, \"///\", 3)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2803:     zFile += 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2886:       zFile[iOut++] = c;",
          "2887:     }",
          "2888:     if( eState==1 ) zFile[iOut++] = '\\0';",
          "",
          "[Removed Lines]",
          "2889:     zFile[iOut++] = '\\0';",
          "2890:     zFile[iOut++] = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2967:     }",
          "2969:   }else{",
          "2971:     if( !zFile ) return SQLITE_NOMEM_BKPT;",
          "2972:     if( nUri ){",
          "2973:       memcpy(zFile, zUri, nUri);",
          "2974:     }",
          "2977:     flags &= ~SQLITE_OPEN_URI;",
          "2978:   }",
          "",
          "[Removed Lines]",
          "2970:     zFile = sqlite3_malloc64(nUri+2);",
          "2975:     zFile[nUri] = '\\0';",
          "2976:     zFile[nUri+1] = '\\0';",
          "",
          "[Added Lines]",
          "2974:     zFile = sqlite3_malloc64(nUri+8);",
          "2976:     memset(zFile, 0, 4);",
          "2977:     zFile += 4;",
          "2981:     memset(zFile+nUri, 0, 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2984:   }",
          "2985:  parse_uri_out:",
          "2986:   if( rc!=SQLITE_OK ){",
          "2988:     zFile = 0;",
          "2989:   }",
          "",
          "[Removed Lines]",
          "2987:     sqlite3_free(zFile);",
          "",
          "[Added Lines]",
          "2992:     sqlite3_free_filename(zFile);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3391:     sqlite3GlobalConfig.xSqllog(pArg, db, zFilename, 0);",
          "3392:   }",
          "3393: #endif",
          "3395:   return rc & 0xff;",
          "3396: }",
          "",
          "[Removed Lines]",
          "3394:   sqlite3_free(zOpen);",
          "",
          "[Added Lines]",
          "3399:   sqlite3_free_filename(zOpen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35a37c2a47a5010fe4875d1017dfc3c4077a45be",
      "candidate_info": {
        "commit_hash": "35a37c2a47a5010fe4875d1017dfc3c4077a45be",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35a37c2a47a5010fe4875d1017dfc3c4077a45be",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Fix a test script problem causing an error for SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds in corruptL.test.\n\nFossilOrigin-Name: a85520e0074d574cb4ac5239bb225f8f0b0b3ea1d782cd1cbc79797b4c583fb0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 41474548ef3f7454e44fbf648429730b3f5ba1ff0086fd2f2d0e59b8f51d85e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268: extra_schema_checks 0",
          "1269: do_execsql_test 15.1 {",
          "1270:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1271: } {}",
          "1272: extra_schema_checks 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270:   PRAGMA cell_size_check = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}