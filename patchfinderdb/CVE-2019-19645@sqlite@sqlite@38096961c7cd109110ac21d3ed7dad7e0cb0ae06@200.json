{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
      "candidate_info": {
        "commit_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Mark an unreachable branch with an ALWAYS macro.\n\nFossilOrigin-Name: d4755aca4b435eed62b54af84013f7f176d3fa5b7b1c243555d59de5749fcde5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e96641f0be7d4454215459b0a95cf1c46ba0133e46d0bae22269741c8f4e5b44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "734:   if( p->pSrc ){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08f6de7f314ad6b15d34cc5f27c3e737fcd99268",
      "candidate_info": {
        "commit_hash": "08f6de7f314ad6b15d34cc5f27c3e737fcd99268",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08f6de7f314ad6b15d34cc5f27c3e737fcd99268",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Treat integer values in window definition ORDER BY clauses as constants, not as references to another expression.\n\nFossilOrigin-Name: 7e4809eadfe99ebfd797a7c63501421021a720bbeed9fba81bebf630c58bb791",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e80b2d9fcbc82ae5dc8a1fc13196f9a30bdb504eb5a5c131d136a78bbd5bbe7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868: static ExprList *exprListAppendList(",
          "872: ){",
          "873:   if( pAppend ){",
          "874:     int i;",
          "875:     int nInit = pList ? pList->nExpr : 0;",
          "876:     for(i=0; i<pAppend->nExpr; i++){",
          "877:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "878:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "879:       if( pList ) pList->a[nInit+i].sortOrder = pAppend->a[i].sortOrder;",
          "880:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:   int bIntToNull",
          "879:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
          "880:         pDup->op = TK_NULL;",
          "881:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "882:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "916:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "918:     if( pSort && p->pOrderBy ){",
          "919:       if( sqlite3ExprListCompare(pSort, p->pOrderBy, -1)==0 ){",
          "920:         sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "917:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy);",
          "",
          "[Added Lines]",
          "922:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "938:     pSublist = exprListAppendList(pParse, pSublist, pMWin->pPartition);",
          "939:     pSublist = exprListAppendList(pParse, pSublist, pMWin->pOrderBy);",
          "",
          "[Added Lines]",
          "943:     pSublist = exprListAppendList(pParse, pSublist, pMWin->pPartition, 0);",
          "944:     pSublist = exprListAppendList(pParse, pSublist, pMWin->pOrderBy, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "945:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "946:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "948:       if( pWin->pFilter ){",
          "949:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "950:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "947:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList);",
          "",
          "[Added Lines]",
          "952:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   ) FROM t2 ORDER BY 1, 2;",
          "418: }",
          "422: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: execsql_float_test 4.9 {",
          "421:   SELECT",
          "422:     rank() OVER win AS rank,",
          "423:     cume_dist() OVER win AS cume_dist FROM t1",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     PARTITION BY (b%10)",
          "327:     ORDER BY b",
          "328:   ) FROM t2 ORDER BY a;",
          "331: do_execsql_test 4.2 {",
          "332:   SELECT a, sum(b) OVER (",
          "",
          "[Removed Lines]",
          "329: } {1 0   2 754   3 251   4 754   5 101   6 1247   7 132   8 266   9 6   10 950   11 667   12 1052   13 535   14 128   15 428   16 250   17 336   18 1122   19 368   20 6   21 1247   22 1000   23 92   24 368   25 584   26 320   27 1000   28 24   29 478   30 133   31 1049   32 1090   33 632   34 101   35 54   36 54   37 1049   38 450   39 145   40 354   41 21   42 764   43 754   44 424   45 1122   46 930   47 42   48 930   49 352   50 535   51 42   52 118   53 536   54 6   55 1122   56 86   57 770   58 255   59 50   60 52   61 950   62 75   63 354   64 2   65 536   66 160   67 352   68 536   69 54   70 675   71 276   72 950   73 868   74 678   75 667   76 4   77 1184   78 160   79 120   80 584   81 266   82 133   83 405   84 468   85 6   86 806   87 166   88 500   89 1090   90 552   91 251   92 27   93 424   94 687   95 1215   96 450   97 32   98 360   99 1052   100 868   101 2   102 66   103 754   104 450   105 145   106 5   107 687   108 24   109 302   110 806   111 251   112 42   113 24   114 30   115 128   116 128   117 50   118 1215   119 86   120 687   121 683   122 672   123 178   124 24   125 24   126 299   127 178   128 770   129 535   130 1052   131 270   132 255   133 675   134 632   135 266   136 6   137 21   138 930   139 411   140 754   141 133   142 340   143 535   144 46   145 250   146 132   147 132   148 354   149 500   150 770   151 276   152 360   153 354   154 27   155 552   156 552   157 602   158 266   159 1049   160 675   161 384   162 667   163 27   164 101   165 166   166 32   167 42   168 18   169 336   170 1122   171 276   172 1122   173 266   174 50   175 178   176 276   177 1247   178 6   179 1215   180 604   181 360   182 212   183 120   184 210   185 1090   186 10   187 1090   188 266   189 66   190 250   191 266   192 360   193 120   194 128   195 178   196 770   197 92   198 634   199 38   200 21}",
          "",
          "[Added Lines]",
          "329: } {1 0   2 754   3 251   4 754   5 101   6 1247   7 132   8 266   9 6   10 950",
          "330:   11 667   12 1052   13 535   14 128   15 428   16 250   17 336   18 1122",
          "331:   19 368   20 6   21 1247   22 1000   23 92   24 368   25 584   26 320",
          "332:   27 1000   28 24   29 478   30 133   31 1049   32 1090   33 632   34 101",
          "333:   35 54   36 54   37 1049   38 450   39 145   40 354   41 21   42 764",
          "334:   43 754   44 424   45 1122   46 930   47 42   48 930   49 352   50 535",
          "335:   51 42   52 118   53 536   54 6   55 1122   56 86   57 770   58 255   59 50",
          "336:   60 52   61 950   62 75   63 354   64 2   65 536   66 160   67 352   68 536",
          "337:   69 54   70 675   71 276   72 950   73 868   74 678   75 667   76 4",
          "338:   77 1184   78 160   79 120   80 584   81 266   82 133   83 405   84 468",
          "339:   85 6   86 806   87 166   88 500   89 1090   90 552   91 251   92 27",
          "340:   93 424   94 687   95 1215   96 450   97 32   98 360   99 1052   100 868",
          "341:   101 2   102 66   103 754   104 450   105 145   106 5   107 687   108 24",
          "342:   109 302   110 806   111 251   112 42   113 24   114 30   115 128   116 128",
          "343:   117 50   118 1215   119 86   120 687   121 683   122 672   123 178   124 24",
          "344:   125 24   126 299   127 178   128 770   129 535   130 1052   131 270",
          "345:   132 255   133 675   134 632   135 266   136 6   137 21   138 930   139 411",
          "346:   140 754   141 133   142 340   143 535   144 46   145 250   146 132",
          "347:   147 132   148 354   149 500   150 770   151 276   152 360   153 354",
          "348:   154 27   155 552   156 552   157 602   158 266   159 1049   160 675",
          "349:   161 384   162 667   163 27   164 101   165 166   166 32   167 42   168 18",
          "350:   169 336   170 1122   171 276   172 1122   173 266   174 50   175 178",
          "351:   176 276   177 1247   178 6   179 1215   180 604   181 360   182 212",
          "352:   183 120   184 210   185 1090   186 10   187 1090   188 266   189 66",
          "353:   190 250   191 266   192 360   193 120   194 128   195 178   196 770",
          "354:   197 92   198 634   199 38   200 21}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:     ORDER BY b",
          "335:     RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "336:   ) FROM t2 ORDER BY a;",
          "339: do_execsql_test 4.3 {",
          "340:   SELECT b, sum(b) OVER (",
          "341:     ORDER BY b",
          "342:     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "343:   ) FROM t2 ORDER BY b;",
          "346: do_execsql_test 4.4 {",
          "347:   SELECT b, sum(b) OVER (",
          "348:     ORDER BY b",
          "349:     RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "350:   ) FROM t2 ORDER BY b;",
          "353: do_execsql_test 4.5 {",
          "354:   SELECT b, sum(b) OVER (",
          "355:     ORDER BY b",
          "356:     RANGE BETWEEN CURRENT ROW AND CURRENT ROW",
          "357:   ) FROM t2 ORDER BY b;",
          "360: do_execsql_test 4.6.1 {",
          "361:   SELECT b, sum(b) OVER (",
          "362:     RANGE BETWEEN CURRENT ROW AND CURRENT ROW",
          "363:   ) FROM t2 ORDER BY b;",
          "366: do_execsql_test 4.6.2 {",
          "367:   SELECT b, sum(b) OVER () FROM t2 ORDER BY b;",
          "370: do_execsql_test 4.6.3 {",
          "371:   SELECT b, sum(b) OVER (",
          "372:     RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "373:   ) FROM t2 ORDER BY b;",
          "376: do_execsql_test 4.6.4 {",
          "377:   SELECT b, sum(b) OVER (",
          "378:     RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "379:   ) FROM t2 ORDER BY b;",
          "382: do_execsql_test 4.7.1 {",
          "383:   SELECT b, sum(b) OVER (",
          "384:     ROWS BETWEEN CURRENT ROW AND CURRENT ROW",
          "385:   ) FROM t2 ORDER BY 1, 2;",
          "388: do_execsql_test 4.7.2 {",
          "389:   SELECT b, sum(b) OVER (",
          "390:     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "391:   ) FROM t2 ORDER BY 1, 2;",
          "394: do_execsql_test 4.7.3 {",
          "395:   SELECT b, sum(b) OVER (",
          "396:     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "397:   ) FROM t2 ORDER BY 1, 2;",
          "400: do_execsql_test 4.7.4 {",
          "401:   SELECT b, sum(b) OVER (",
          "402:     ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "403:   ) FROM t2 ORDER BY 1, 2;",
          "406: do_execsql_test 4.8.1 {",
          "407:   SELECT b, sum(b) OVER (",
          "408:     ORDER BY a",
          "409:     ROWS BETWEEN CURRENT ROW AND CURRENT ROW",
          "410:   ) FROM t2 ORDER BY 1, 2;",
          "413: do_execsql_test 4.8.2 {",
          "414:   SELECT b, sum(b) OVER (",
          "415:     ORDER BY a",
          "416:     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "417:   ) FROM t2 ORDER BY 1, 2;",
          "420: do_execsql_test 4.8.3 {",
          "421:   SELECT b, sum(b) OVER (",
          "422:     ORDER BY a",
          "423:     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "424:   ) FROM t2 ORDER BY 1, 2;",
          "427: do_execsql_test 4.8.4 {",
          "428:   SELECT b, sum(b) OVER (",
          "429:     ORDER BY a",
          "430:     ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "431:   ) FROM t2 ORDER BY 1, 2;",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "337: } {1 0   2 754   3 251   4 754   5 101   6 1247   7 132   8 266   9 6   10 950   11 667   12 1052   13 535   14 128   15 428   16 250   17 336   18 1122   19 368   20 6   21 1247   22 1000   23 92   24 368   25 584   26 320   27 1000   28 24   29 478   30 133   31 1049   32 1090   33 632   34 101   35 54   36 54   37 1049   38 450   39 145   40 354   41 21   42 764   43 754   44 424   45 1122   46 930   47 42   48 930   49 352   50 535   51 42   52 118   53 536   54 6   55 1122   56 86   57 770   58 255   59 50   60 52   61 950   62 75   63 354   64 2   65 536   66 160   67 352   68 536   69 54   70 675   71 276   72 950   73 868   74 678   75 667   76 4   77 1184   78 160   79 120   80 584   81 266   82 133   83 405   84 468   85 6   86 806   87 166   88 500   89 1090   90 552   91 251   92 27   93 424   94 687   95 1215   96 450   97 32   98 360   99 1052   100 868   101 2   102 66   103 754   104 450   105 145   106 5   107 687   108 24   109 302   110 806   111 251   112 42   113 24   114 30   115 128   116 128   117 50   118 1215   119 86   120 687   121 683   122 672   123 178   124 24   125 24   126 299   127 178   128 770   129 535   130 1052   131 270   132 255   133 675   134 632   135 266   136 6   137 21   138 930   139 411   140 754   141 133   142 340   143 535   144 46   145 250   146 132   147 132   148 354   149 500   150 770   151 276   152 360   153 354   154 27   155 552   156 552   157 602   158 266   159 1049   160 675   161 384   162 667   163 27   164 101   165 166   166 32   167 42   168 18   169 336   170 1122   171 276   172 1122   173 266   174 50   175 178   176 276   177 1247   178 6   179 1215   180 604   181 360   182 212   183 120   184 210   185 1090   186 10   187 1090   188 266   189 66   190 250   191 266   192 360   193 120   194 128   195 178   196 770   197 92   198 634   199 38   200 21}",
          "344: } {0 0   1 1   1 2   2 4   2 6   2 8   3 11   3 14   4 18   5 23   6 29   7 36   7 43   7 50   8 58   8 66   8 74   9 83   9 92   9 101   10 111   11 122   11 133   12 145   12 157   12 169   13 182   13 195   14 209   15 224   15 239   15 254   16 270   16 286   16 302   17 319   19 338   20 358   21 379   21 400   22 422   22 444   23 467   23 490   23 513   24 537   25 562   26 588   26 614   26 640   27 667   27 694   28 722   29 751   29 780   29 809   30 839   30 869   30 899   31 930   31 961   32 993   33 1026   33 1059   33 1092   33 1125   33 1158   34 1192   34 1226   34 1260   34 1294   35 1329   35 1364   36 1400   36 1436   36 1472   36 1508   37 1545   37 1582   38 1620   38 1658   39 1697   39 1736   39 1775   40 1815   41 1856   41 1897   41 1938   42 1980   43 2023   43 2066   44 2110   44 2154   46 2200   46 2246   47 2293   47 2340   47 2387   47 2434   49 2483   50 2533   51 2584   52 2636   53 2689   54 2743   55 2798   55 2853   56 2909   56 2965   56 3021   57 3078   58 3136   58 3194   58 3252   58 3310   59 3369   59 3428   59 3487   59 3546   60 3606   61 3667   61 3728   62 3790   62 3852   63 3915   64 3979   65 4044   65 4109   65 4174   66 4240   67 4307   68 4375   69 4444   70 4514   72 4586   72 4658   72 4730   73 4803   73 4876   73 4949   74 5023   74 5097   74 5171   74 5245   74 5319   75 5394   75 5469   75 5544   76 5620   77 5697   77 5774   78 5852   78 5930   79 6009   80 6089   80 6169   81 6250   81 6331   81 6412   82 6494   83 6577   84 6661   84 6745   84 6829   84 6913   85 6998   85 7083   85 7168   86 7254   87 7341   87 7428   88 7516   89 7605   89 7694   89 7783   90 7873   90 7963   90 8053   91 8144   91 8235   91 8326   91 8417   91 8508   93 8601   93 8694   93 8787   94 8881   95 8976   95 9071   95 9166   96 9262   96 9358   96 9454   97 9551   97 9648   98 9746   98 9844   99 9943   99 10042   99 10141}",
          "351: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "358: } {0 0   1 2   1 2   2 6   2 6   2 6   3 6   3 6   4 4   5 5   6 6   7 21   7 21   7 21   8 24   8 24   8 24   9 27   9 27   9 27   10 10   11 22   11 22   12 36   12 36   12 36   13 26   13 26   14 14   15 45   15 45   15 45   16 48   16 48   16 48   17 17   19 19   20 20   21 42   21 42   22 44   22 44   23 69   23 69   23 69   24 24   25 25   26 78   26 78   26 78   27 54   27 54   28 28   29 87   29 87   29 87   30 90   30 90   30 90   31 62   31 62   32 32   33 165   33 165   33 165   33 165   33 165   34 136   34 136   34 136   34 136   35 70   35 70   36 144   36 144   36 144   36 144   37 74   37 74   38 76   38 76   39 117   39 117   39 117   40 40   41 123   41 123   41 123   42 42   43 86   43 86   44 88   44 88   46 92   46 92   47 188   47 188   47 188   47 188   49 49   50 50   51 51   52 52   53 53   54 54   55 110   55 110   56 168   56 168   56 168   57 57   58 232   58 232   58 232   58 232   59 236   59 236   59 236   59 236   60 60   61 122   61 122   62 124   62 124   63 63   64 64   65 195   65 195   65 195   66 66   67 67   68 68   69 69   70 70   72 216   72 216   72 216   73 219   73 219   73 219   74 370   74 370   74 370   74 370   74 370   75 225   75 225   75 225   76 76   77 154   77 154   78 156   78 156   79 79   80 160   80 160   81 243   81 243   81 243   82 82   83 83   84 336   84 336   84 336   84 336   85 255   85 255   85 255   86 86   87 174   87 174   88 88   89 267   89 267   89 267   90 270   90 270   90 270   91 455   91 455   91 455   91 455   91 455   93 279   93 279   93 279   94 94   95 285   95 285   95 285   96 288   96 288   96 288   97 194   97 194   98 196   98 196   99 297   99 297   99 297}",
          "364: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "368: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "374: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "380: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "386: } {0 0   1 1   1 1   2 2   2 2   2 2   3 3   3 3   4 4   5 5   6 6   7 7   7 7   7 7   8 8   8 8   8 8   9 9   9 9   9 9   10 10   11 11   11 11   12 12   12 12   12 12   13 13   13 13   14 14   15 15   15 15   15 15   16 16   16 16   16 16   17 17   19 19   20 20   21 21   21 21   22 22   22 22   23 23   23 23   23 23   24 24   25 25   26 26   26 26   26 26   27 27   27 27   28 28   29 29   29 29   29 29   30 30   30 30   30 30   31 31   31 31   32 32   33 33   33 33   33 33   33 33   33 33   34 34   34 34   34 34   34 34   35 35   35 35   36 36   36 36   36 36   36 36   37 37   37 37   38 38   38 38   39 39   39 39   39 39   40 40   41 41   41 41   41 41   42 42   43 43   43 43   44 44   44 44   46 46   46 46   47 47   47 47   47 47   47 47   49 49   50 50   51 51   52 52   53 53   54 54   55 55   55 55   56 56   56 56   56 56   57 57   58 58   58 58   58 58   58 58   59 59   59 59   59 59   59 59   60 60   61 61   61 61   62 62   62 62   63 63   64 64   65 65   65 65   65 65   66 66   67 67   68 68   69 69   70 70   72 72   72 72   72 72   73 73   73 73   73 73   74 74   74 74   74 74   74 74   74 74   75 75   75 75   75 75   76 76   77 77   77 77   78 78   78 78   79 79   80 80   80 80   81 81   81 81   81 81   82 82   83 83   84 84   84 84   84 84   84 84   85 85   85 85   85 85   86 86   87 87   87 87   88 88   89 89   89 89   89 89   90 90   90 90   90 90   91 91   91 91   91 91   91 91   91 91   93 93   93 93   93 93   94 94   95 95   95 95   95 95   96 96   96 96   96 96   97 97   97 97   98 98   98 98   99 99   99 99   99 99}",
          "392: } {0 0   1 3379   1 5443   2 372   2 4473   2 7074   3 2916   3 9096   4 4049   5 5643   6 1047   7 2205   7 7081   7 10141   8 1553   8 5926   8 6422   9 4883   9 7932   9 8497   10 9544   11 5727   11 6433   12 2825   12 5918   12 8582   13 5190   13 8570   14 8596   15 3189   15 6023   15 8924   16 1942   16 1958   16 3590   17 10134   19 7474   20 5946   21 5464   21 9682   22 3029   22 6140   23 212   23 1926   23 8520   24 2626   25 3331   26 337   26 7539   26 7565   27 1270   27 10035   28 3217   29 1649   29 4355   29 7326   30 4215   30 9400   30 9853   31 5977   31 6008   32 2857   33 370   33 4326   33 8175   33 8909   33 9661   34 6414   34 6516   34 8958   34 9925   35 2151   35 5638   36 3701   36 7818   36 8785   36 8994   37 4597   37 8557   38 735   38 9891   39 842   39 7513   39 9721   40 3475   41 115   41 4874   41 5906   42 4185   43 2754   43 3518   44 7072   44 9765   46 1041   46 1316   47 2198   47 3378   47 7612   47 7923   49 6482   50 9450   51 5778   52 9370   53 4408   54 1448   55 3174   55 6876   56 2913   56 3435   56 3574   57 7223   58 5248   58 7876   58 9318   58 9823   59 697   59 2813   59 6665   59 7455   60 6821   61 2426   61 4944   62 904   62 8658   63 4471   64 8407   65 2116   65 5177   65 5603   66 8142   67 1620   68 803   69 9260   70 7396   72 4833   72 8004   72 8076   73 5017   73 5716   73 6213   74 74   74 189   74 2365   74 5538   74 7297   75 3665   75 6951   75 8343   76 3964   77 1903   77 7028   78 1394   78 4293   79 6292   80 4677   80 7692   81 542   81 4045   81 8488   82 10117   83 10008   84 1826   84 4761   84 9534   84 9628   85 2602   85 2711   85 7166   86 2291   87 4560   87 5865   88 6380   89 461   89 3306   89 3790   90 3119   90 6606   90 7782   91 995   91 2517   91 3007   91 8749   91 8876   93 1742   93 2051   93 8268   94 4143   95 5112   95 6118   95 9191   96 638   96 5344   96 6761   97 1243   97 1545   98 3888   98 5442   99 311   99 1146   99 9093}",
          "398: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "404: } {0 10141   1 4699   1 6763   2 3069   2 5670   2 9771   3 1048   3 7228   4 6096   5 4503   6 9100   7 7   7 3067   7 7943   8 3727   8 4223   8 8596   9 1653   9 2218   9 5267   10 607   11 3719   11 4425   12 1571   12 4235   12 7328   13 1584   13 4964   14 1559   15 1232   15 4133   15 6967   16 6567   16 8199   16 8215   17 24   19 2686   20 4215   21 480   21 4698   22 4023   22 7134   23 1644   23 8238   23 9952   24 7539   25 6835   26 2602   26 2628   26 9830   27 133   27 8898   28 6952   29 2844   29 5815   29 8521   30 318   30 771   30 5956   31 4164   31 4195   32 7316   33 513   33 1265   33 1999   33 5848   33 9804   34 250   34 1217   34 3659   34 3761   35 4538   35 8025   36 1183   36 1392   36 2359   36 6476   37 1621   37 5581   38 288   38 9444   39 459   39 2667   39 9338   40 6706   41 4276   41 5308   41 10067   42 5998   43 6666   43 7430   44 420   44 3113   46 8871   46 9146   47 2265   47 2576   47 6810   47 7990   49 3708   50 741   51 4414   52 823   53 5786   54 8747   55 3320   55 7022   56 6623   56 6762   56 7284   57 2975   58 376   58 881   58 2323   58 4951   59 2745   59 3535   59 7387   59 9503   60 3380   61 5258   61 7776   62 1545   62 9299   63 5733   64 1798   65 4603   65 5029   65 8090   66 2065   67 8588   68 9406   69 950   70 2815   72 2137   72 2209   72 5380   73 4001   73 4498   73 5197   74 2918   74 4677   74 7850   74 10026   74 10141   75 1873   75 3265   75 6551   76 6253   77 3190   77 8315   78 5926   78 8825   79 3928   80 2529   80 5544   81 1734   81 6177   81 9680   82 106   83 216   84 597   84 691   84 5464   84 8399   85 3060   85 7515   85 7624   86 7936   87 4363   87 5668   88 3849   89 6440   89 6924   89 9769   90 2449   90 3625   90 7112   91 1356   91 1483   91 7225   91 7715   91 9237   93 1966   93 8183   93 8492   94 6092   95 1045   95 4118   95 5124   96 3476   96 4893   96 9599   97 8693   97 8995   98 4797   98 6351   99 1147   99 9094   99 9929}",
          "411: } {0 0   1 1   1 1   2 2   2 2   2 2   3 3   3 3   4 4   5 5   6 6   7 7   7 7   7 7   8 8   8 8   8 8   9 9   9 9   9 9   10 10   11 11   11 11   12 12   12 12   12 12   13 13   13 13   14 14   15 15   15 15   15 15   16 16   16 16   16 16   17 17   19 19   20 20   21 21   21 21   22 22   22 22   23 23   23 23   23 23   24 24   25 25   26 26   26 26   26 26   27 27   27 27   28 28   29 29   29 29   29 29   30 30   30 30   30 30   31 31   31 31   32 32   33 33   33 33   33 33   33 33   33 33   34 34   34 34   34 34   34 34   35 35   35 35   36 36   36 36   36 36   36 36   37 37   37 37   38 38   38 38   39 39   39 39   39 39   40 40   41 41   41 41   41 41   42 42   43 43   43 43   44 44   44 44   46 46   46 46   47 47   47 47   47 47   47 47   49 49   50 50   51 51   52 52   53 53   54 54   55 55   55 55   56 56   56 56   56 56   57 57   58 58   58 58   58 58   58 58   59 59   59 59   59 59   59 59   60 60   61 61   61 61   62 62   62 62   63 63   64 64   65 65   65 65   65 65   66 66   67 67   68 68   69 69   70 70   72 72   72 72   72 72   73 73   73 73   73 73   74 74   74 74   74 74   74 74   74 74   75 75   75 75   75 75   76 76   77 77   77 77   78 78   78 78   79 79   80 80   80 80   81 81   81 81   81 81   82 82   83 83   84 84   84 84   84 84   84 84   85 85   85 85   85 85   86 86   87 87   87 87   88 88   89 89   89 89   89 89   90 90   90 90   90 90   91 91   91 91   91 91   91 91   91 91   93 93   93 93   93 93   94 94   95 95   95 95   95 95   96 96   96 96   96 96   97 97   97 97   98 98   98 98   99 99   99 99   99 99}",
          "418: } {0 0   1 3379   1 5443   2 372   2 4473   2 7074   3 2916   3 9096   4 4049   5 5643   6 1047   7 2205   7 7081   7 10141   8 1553   8 5926   8 6422   9 4883   9 7932   9 8497   10 9544   11 5727   11 6433   12 2825   12 5918   12 8582   13 5190   13 8570   14 8596   15 3189   15 6023   15 8924   16 1942   16 1958   16 3590   17 10134   19 7474   20 5946   21 5464   21 9682   22 3029   22 6140   23 212   23 1926   23 8520   24 2626   25 3331   26 337   26 7539   26 7565   27 1270   27 10035   28 3217   29 1649   29 4355   29 7326   30 4215   30 9400   30 9853   31 5977   31 6008   32 2857   33 370   33 4326   33 8175   33 8909   33 9661   34 6414   34 6516   34 8958   34 9925   35 2151   35 5638   36 3701   36 7818   36 8785   36 8994   37 4597   37 8557   38 735   38 9891   39 842   39 7513   39 9721   40 3475   41 115   41 4874   41 5906   42 4185   43 2754   43 3518   44 7072   44 9765   46 1041   46 1316   47 2198   47 3378   47 7612   47 7923   49 6482   50 9450   51 5778   52 9370   53 4408   54 1448   55 3174   55 6876   56 2913   56 3435   56 3574   57 7223   58 5248   58 7876   58 9318   58 9823   59 697   59 2813   59 6665   59 7455   60 6821   61 2426   61 4944   62 904   62 8658   63 4471   64 8407   65 2116   65 5177   65 5603   66 8142   67 1620   68 803   69 9260   70 7396   72 4833   72 8004   72 8076   73 5017   73 5716   73 6213   74 74   74 189   74 2365   74 5538   74 7297   75 3665   75 6951   75 8343   76 3964   77 1903   77 7028   78 1394   78 4293   79 6292   80 4677   80 7692   81 542   81 4045   81 8488   82 10117   83 10008   84 1826   84 4761   84 9534   84 9628   85 2602   85 2711   85 7166   86 2291   87 4560   87 5865   88 6380   89 461   89 3306   89 3790   90 3119   90 6606   90 7782   91 995   91 2517   91 3007   91 8749   91 8876   93 1742   93 2051   93 8268   94 4143   95 5112   95 6118   95 9191   96 638   96 5344   96 6761   97 1243   97 1545   98 3888   98 5442   99 311   99 1146   99 9093}",
          "425: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141   98 10141   99 10141   99 10141   99 10141}",
          "432: } {0 10141   1 4699   1 6763   2 3069   2 5670   2 9771   3 1048   3 7228   4 6096   5 4503   6 9100   7 7   7 3067   7 7943   8 3727   8 4223   8 8596   9 1653   9 2218   9 5267   10 607   11 3719   11 4425   12 1571   12 4235   12 7328   13 1584   13 4964   14 1559   15 1232   15 4133   15 6967   16 6567   16 8199   16 8215   17 24   19 2686   20 4215   21 480   21 4698   22 4023   22 7134   23 1644   23 8238   23 9952   24 7539   25 6835   26 2602   26 2628   26 9830   27 133   27 8898   28 6952   29 2844   29 5815   29 8521   30 318   30 771   30 5956   31 4164   31 4195   32 7316   33 513   33 1265   33 1999   33 5848   33 9804   34 250   34 1217   34 3659   34 3761   35 4538   35 8025   36 1183   36 1392   36 2359   36 6476   37 1621   37 5581   38 288   38 9444   39 459   39 2667   39 9338   40 6706   41 4276   41 5308   41 10067   42 5998   43 6666   43 7430   44 420   44 3113   46 8871   46 9146   47 2265   47 2576   47 6810   47 7990   49 3708   50 741   51 4414   52 823   53 5786   54 8747   55 3320   55 7022   56 6623   56 6762   56 7284   57 2975   58 376   58 881   58 2323   58 4951   59 2745   59 3535   59 7387   59 9503   60 3380   61 5258   61 7776   62 1545   62 9299   63 5733   64 1798   65 4603   65 5029   65 8090   66 2065   67 8588   68 9406   69 950   70 2815   72 2137   72 2209   72 5380   73 4001   73 4498   73 5197   74 2918   74 4677   74 7850   74 10026   74 10141   75 1873   75 3265   75 6551   76 6253   77 3190   77 8315   78 5926   78 8825   79 3928   80 2529   80 5544   81 1734   81 6177   81 9680   82 106   83 216   84 597   84 691   84 5464   84 8399   85 3060   85 7515   85 7624   86 7936   87 4363   87 5668   88 3849   89 6440   89 6924   89 9769   90 2449   90 3625   90 7112   91 1356   91 1483   91 7225   91 7715   91 9237   93 1966   93 8183   93 8492   94 6092   95 1045   95 4118   95 5124   96 3476   96 4893   96 9599   97 8693   97 8995   98 4797   98 6351   99 1147   99 9094   99 9929}",
          "",
          "[Added Lines]",
          "362: } {1 0   2 754   3 251   4 754   5 101   6 1247   7 132   8 266   9 6   10 950",
          "363:   11 667   12 1052   13 535   14 128   15 428   16 250   17 336   18 1122",
          "364:   19 368   20 6   21 1247   22 1000   23 92   24 368   25 584   26 320",
          "365:   27 1000   28 24   29 478   30 133   31 1049   32 1090   33 632   34 101",
          "366:   35 54   36 54   37 1049   38 450   39 145   40 354   41 21   42 764",
          "367:   43 754   44 424   45 1122   46 930   47 42   48 930   49 352   50 535",
          "368:   51 42   52 118   53 536   54 6   55 1122   56 86   57 770   58 255   59 50",
          "369:   60 52   61 950   62 75   63 354   64 2   65 536   66 160   67 352   68 536",
          "370:   69 54   70 675   71 276   72 950   73 868   74 678   75 667   76 4",
          "371:   77 1184   78 160   79 120   80 584   81 266   82 133   83 405   84 468",
          "372:   85 6   86 806   87 166   88 500   89 1090   90 552   91 251   92 27",
          "373:   93 424   94 687   95 1215   96 450   97 32   98 360   99 1052   100 868",
          "374:   101 2   102 66   103 754   104 450   105 145   106 5   107 687   108 24",
          "375:   109 302   110 806   111 251   112 42   113 24   114 30   115 128   116 128",
          "376:   117 50   118 1215   119 86   120 687   121 683   122 672   123 178   124 24",
          "377:   125 24   126 299   127 178   128 770   129 535   130 1052   131 270",
          "378:   132 255   133 675   134 632   135 266   136 6   137 21   138 930   139 411",
          "379:   140 754   141 133   142 340   143 535   144 46   145 250   146 132",
          "380:   147 132   148 354   149 500   150 770   151 276   152 360   153 354",
          "381:   154 27   155 552   156 552   157 602   158 266   159 1049   160 675",
          "382:   161 384   162 667   163 27   164 101   165 166   166 32   167 42   168 18",
          "383:   169 336   170 1122   171 276   172 1122   173 266   174 50   175 178",
          "384:   176 276   177 1247   178 6   179 1215   180 604   181 360   182 212",
          "385:   183 120   184 210   185 1090   186 10   187 1090   188 266   189 66",
          "386:   190 250   191 266   192 360   193 120   194 128   195 178   196 770",
          "387:   197 92   198 634   199 38   200 21}",
          "394: } {0 0   1 1   1 2   2 4   2 6   2 8   3 11   3 14   4 18   5 23   6 29   7 36",
          "395:   7 43   7 50   8 58   8 66   8 74   9 83   9 92   9 101   10 111   11 122",
          "396:   11 133   12 145   12 157   12 169   13 182   13 195   14 209   15 224",
          "397:   15 239   15 254   16 270   16 286   16 302   17 319   19 338   20 358",
          "398:   21 379   21 400   22 422   22 444   23 467   23 490   23 513   24 537",
          "399:   25 562   26 588   26 614   26 640   27 667   27 694   28 722   29 751",
          "400:   29 780   29 809   30 839   30 869   30 899   31 930   31 961   32 993",
          "401:   33 1026   33 1059   33 1092   33 1125   33 1158   34 1192   34 1226",
          "402:   34 1260   34 1294   35 1329   35 1364   36 1400   36 1436   36 1472",
          "403:   36 1508   37 1545   37 1582   38 1620   38 1658   39 1697   39 1736",
          "404:   39 1775   40 1815   41 1856   41 1897   41 1938   42 1980   43 2023",
          "405:   43 2066   44 2110   44 2154   46 2200   46 2246   47 2293   47 2340",
          "406:   47 2387   47 2434   49 2483   50 2533   51 2584   52 2636   53 2689",
          "407:   54 2743   55 2798   55 2853   56 2909   56 2965   56 3021   57 3078",
          "408:   58 3136   58 3194   58 3252   58 3310   59 3369   59 3428   59 3487",
          "409:   59 3546   60 3606   61 3667   61 3728   62 3790   62 3852   63 3915",
          "410:   64 3979   65 4044   65 4109   65 4174   66 4240   67 4307   68 4375",
          "411:   69 4444   70 4514   72 4586   72 4658   72 4730   73 4803   73 4876",
          "412:   73 4949   74 5023   74 5097   74 5171   74 5245   74 5319   75 5394",
          "413:   75 5469   75 5544   76 5620   77 5697   77 5774   78 5852   78 5930",
          "414:   79 6009   80 6089   80 6169   81 6250   81 6331   81 6412   82 6494",
          "415:   83 6577   84 6661   84 6745   84 6829   84 6913   85 6998   85 7083",
          "416:   85 7168   86 7254   87 7341   87 7428   88 7516   89 7605   89 7694",
          "417:   89 7783   90 7873   90 7963   90 8053   91 8144   91 8235   91 8326",
          "418:   91 8417   91 8508   93 8601   93 8694   93 8787   94 8881   95 8976",
          "419:   95 9071   95 9166   96 9262   96 9358   96 9454   97 9551   97 9648",
          "420:   98 9746   98 9844   99 9943   99 10042   99 10141}",
          "427: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "428:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "429:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "430:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "431:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "432:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "433:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "434:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "435:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "436:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "437:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "438:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "439:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "440:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "441:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "442:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "443:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "444:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "445:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "446:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "447:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "448:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "449:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "450:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "451:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "452:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "453:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "454:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "455:   98 10141   99 10141   99 10141   99 10141}",
          "462: } {0 0   1 2   1 2   2 6   2 6   2 6   3 6   3 6   4 4   5 5   6 6   7 21",
          "463:   7 21   7 21   8 24   8 24   8 24   9 27   9 27   9 27   10 10   11 22",
          "464:   11 22   12 36   12 36   12 36   13 26   13 26   14 14   15 45   15 45",
          "465:   15 45   16 48   16 48   16 48   17 17   19 19   20 20   21 42   21 42",
          "466:   22 44   22 44   23 69   23 69   23 69   24 24   25 25   26 78   26 78",
          "467:   26 78   27 54   27 54   28 28   29 87   29 87   29 87   30 90   30 90",
          "468:   30 90   31 62   31 62   32 32   33 165   33 165   33 165   33 165   33 165",
          "469:   34 136   34 136   34 136   34 136   35 70   35 70   36 144   36 144",
          "470:   36 144   36 144   37 74   37 74   38 76   38 76   39 117   39 117   39 117",
          "471:   40 40   41 123   41 123   41 123   42 42   43 86   43 86   44 88   44 88",
          "472:   46 92   46 92   47 188   47 188   47 188   47 188   49 49   50 50   51 51",
          "473:   52 52   53 53   54 54   55 110   55 110   56 168   56 168   56 168   57 57",
          "474:   58 232   58 232   58 232   58 232   59 236   59 236   59 236   59 236",
          "475:   60 60   61 122   61 122   62 124   62 124   63 63   64 64   65 195   65 195",
          "476:   65 195   66 66   67 67   68 68   69 69   70 70   72 216   72 216   72 216",
          "477:   73 219   73 219   73 219   74 370   74 370   74 370   74 370   74 370",
          "478:   75 225   75 225   75 225   76 76   77 154   77 154   78 156   78 156",
          "479:   79 79   80 160   80 160   81 243   81 243   81 243   82 82   83 83   84 336",
          "480:   84 336   84 336   84 336   85 255   85 255   85 255   86 86   87 174",
          "481:   87 174   88 88   89 267   89 267   89 267   90 270   90 270   90 270",
          "482:   91 455   91 455   91 455   91 455   91 455   93 279   93 279   93 279",
          "483:   94 94   95 285   95 285   95 285   96 288   96 288   96 288   97 194",
          "484:   97 194   98 196   98 196   99 297   99 297   99 297}",
          "490: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "491:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "492:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "493:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "494:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "495:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "496:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "497:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "498:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "499:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "500:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "501:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "502:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "503:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "504:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "505:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "506:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "507:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "508:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "509:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "510:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "511:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "512:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "513:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "514:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "515:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "516:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "517:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "518:   98 10141   99 10141   99 10141   99 10141}",
          "522: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "523:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "524:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "525:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "526:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "527:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "528:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "529:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "530:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "531:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "532:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "533:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "534:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "535:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "536:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "537:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "538:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "539:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "540:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "541:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "542:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "543:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "544:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "545:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "546:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "547:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "548:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "549:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "550:   98 10141   99 10141   99 10141   99 10141}",
          "556: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "557:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "558:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "559:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "560:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "561:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "562:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "563:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "564:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "565:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "566:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "567:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "568:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "569:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "570:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "571:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "572:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "573:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "574:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "575:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "576:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "577:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "578:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "579:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "580:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "581:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "582:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "583:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "584:   98 10141   99 10141   99 10141   99 10141}",
          "590: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "591:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "592:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "593:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "594:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "595:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "596:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "597:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "598:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "599:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "600:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "601:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "602:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "603:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "604:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "605:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "606:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "607:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "608:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "609:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "610:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "611:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "612:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "613:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "614:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "615:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "616:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "617:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "618:   98 10141   99 10141   99 10141   99 10141}",
          "624: } {0 0   1 1   1 1   2 2   2 2   2 2   3 3   3 3   4 4   5 5   6 6   7 7   7 7",
          "625:   7 7   8 8   8 8   8 8   9 9   9 9   9 9   10 10   11 11   11 11   12 12",
          "626:   12 12   12 12   13 13   13 13   14 14   15 15   15 15   15 15   16 16",
          "627:   16 16   16 16   17 17   19 19   20 20   21 21   21 21   22 22   22 22",
          "628:   23 23   23 23   23 23   24 24   25 25   26 26   26 26   26 26   27 27",
          "629:   27 27   28 28   29 29   29 29   29 29   30 30   30 30   30 30   31 31",
          "630:   31 31   32 32   33 33   33 33   33 33   33 33   33 33   34 34   34 34",
          "631:   34 34   34 34   35 35   35 35   36 36   36 36   36 36   36 36   37 37",
          "632:   37 37   38 38   38 38   39 39   39 39   39 39   40 40   41 41   41 41",
          "633:   41 41   42 42   43 43   43 43   44 44   44 44   46 46   46 46   47 47",
          "634:   47 47   47 47   47 47   49 49   50 50   51 51   52 52   53 53   54 54",
          "635:   55 55   55 55   56 56   56 56   56 56   57 57   58 58   58 58   58 58",
          "636:   58 58   59 59   59 59   59 59   59 59   60 60   61 61   61 61   62 62",
          "637:   62 62   63 63   64 64   65 65   65 65   65 65   66 66   67 67   68 68",
          "638:   69 69   70 70   72 72   72 72   72 72   73 73   73 73   73 73   74 74",
          "639:   74 74   74 74   74 74   74 74   75 75   75 75   75 75   76 76   77 77",
          "640:   77 77   78 78   78 78   79 79   80 80   80 80   81 81   81 81   81 81",
          "641:   82 82   83 83   84 84   84 84   84 84   84 84   85 85   85 85   85 85",
          "642:   86 86   87 87   87 87   88 88   89 89   89 89   89 89   90 90   90 90",
          "643:   90 90   91 91   91 91   91 91   91 91   91 91   93 93   93 93   93 93",
          "644:   94 94   95 95   95 95   95 95   96 96   96 96   96 96   97 97   97 97",
          "645:   98 98   98 98   99 99   99 99   99 99}",
          "651: } {0 0   1 3379   1 5443   2 372   2 4473   2 7074   3 2916   3 9096   4 4049",
          "652:   5 5643   6 1047   7 2205   7 7081   7 10141   8 1553   8 5926   8 6422",
          "653:   9 4883   9 7932   9 8497   10 9544   11 5727   11 6433   12 2825   12 5918",
          "654:   12 8582   13 5190   13 8570   14 8596   15 3189   15 6023   15 8924",
          "655:   16 1942   16 1958   16 3590   17 10134   19 7474   20 5946   21 5464",
          "656:   21 9682   22 3029   22 6140   23 212   23 1926   23 8520   24 2626",
          "657:   25 3331   26 337   26 7539   26 7565   27 1270   27 10035   28 3217",
          "658:   29 1649   29 4355   29 7326   30 4215   30 9400   30 9853   31 5977",
          "659:   31 6008   32 2857   33 370   33 4326   33 8175   33 8909   33 9661",
          "660:   34 6414   34 6516   34 8958   34 9925   35 2151   35 5638   36 3701",
          "661:   36 7818   36 8785   36 8994   37 4597   37 8557   38 735   38 9891   39 842",
          "662:   39 7513   39 9721   40 3475   41 115   41 4874   41 5906   42 4185",
          "663:   43 2754   43 3518   44 7072   44 9765   46 1041   46 1316   47 2198",
          "664:   47 3378   47 7612   47 7923   49 6482   50 9450   51 5778   52 9370",
          "665:   53 4408   54 1448   55 3174   55 6876   56 2913   56 3435   56 3574",
          "666:   57 7223   58 5248   58 7876   58 9318   58 9823   59 697   59 2813",
          "667:   59 6665   59 7455   60 6821   61 2426   61 4944   62 904   62 8658",
          "668:   63 4471   64 8407   65 2116   65 5177   65 5603   66 8142   67 1620",
          "669:   68 803   69 9260   70 7396   72 4833   72 8004   72 8076   73 5017",
          "670:   73 5716   73 6213   74 74   74 189   74 2365   74 5538   74 7297   75 3665",
          "671:   75 6951   75 8343   76 3964   77 1903   77 7028   78 1394   78 4293",
          "672:   79 6292   80 4677   80 7692   81 542   81 4045   81 8488   82 10117",
          "673:   83 10008   84 1826   84 4761   84 9534   84 9628   85 2602   85 2711",
          "674:   85 7166   86 2291   87 4560   87 5865   88 6380   89 461   89 3306",
          "675:   89 3790   90 3119   90 6606   90 7782   91 995   91 2517   91 3007",
          "676:   91 8749   91 8876   93 1742   93 2051   93 8268   94 4143   95 5112",
          "677:   95 6118   95 9191   96 638   96 5344   96 6761   97 1243   97 1545",
          "678:   98 3888   98 5442   99 311   99 1146   99 9093}",
          "684: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "685:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "686:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "687:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "688:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "689:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "690:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "691:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "692:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "693:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "694:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "695:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "696:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "697:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "698:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "699:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "700:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "701:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "702:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "703:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "704:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "705:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "706:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "707:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "708:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "709:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "710:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "711:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "712:   98 10141   99 10141   99 10141   99 10141}",
          "718: } {0 10141   1 4699   1 6763   2 3069   2 5670   2 9771   3 1048   3 7228",
          "719:   4 6096   5 4503   6 9100   7 7   7 3067   7 7943   8 3727   8 4223   8 8596",
          "720:   9 1653   9 2218   9 5267   10 607   11 3719   11 4425   12 1571   12 4235",
          "721:   12 7328   13 1584   13 4964   14 1559   15 1232   15 4133   15 6967",
          "722:   16 6567   16 8199   16 8215   17 24   19 2686   20 4215   21 480   21 4698",
          "723:   22 4023   22 7134   23 1644   23 8238   23 9952   24 7539   25 6835",
          "724:   26 2602   26 2628   26 9830   27 133   27 8898   28 6952   29 2844",
          "725:   29 5815   29 8521   30 318   30 771   30 5956   31 4164   31 4195   32 7316",
          "726:   33 513   33 1265   33 1999   33 5848   33 9804   34 250   34 1217   34 3659",
          "727:   34 3761   35 4538   35 8025   36 1183   36 1392   36 2359   36 6476",
          "728:   37 1621   37 5581   38 288   38 9444   39 459   39 2667   39 9338   40 6706",
          "729:   41 4276   41 5308   41 10067   42 5998   43 6666   43 7430   44 420",
          "730:   44 3113   46 8871   46 9146   47 2265   47 2576   47 6810   47 7990",
          "731:   49 3708   50 741   51 4414   52 823   53 5786   54 8747   55 3320   55 7022",
          "732:   56 6623   56 6762   56 7284   57 2975   58 376   58 881   58 2323   58 4951",
          "733:   59 2745   59 3535   59 7387   59 9503   60 3380   61 5258   61 7776",
          "734:   62 1545   62 9299   63 5733   64 1798   65 4603   65 5029   65 8090",
          "735:   66 2065   67 8588   68 9406   69 950   70 2815   72 2137   72 2209",
          "736:   72 5380   73 4001   73 4498   73 5197   74 2918   74 4677   74 7850",
          "737:   74 10026   74 10141   75 1873   75 3265   75 6551   76 6253   77 3190",
          "738:   77 8315   78 5926   78 8825   79 3928   80 2529   80 5544   81 1734",
          "739:   81 6177   81 9680   82 106   83 216   84 597   84 691   84 5464   84 8399",
          "740:   85 3060   85 7515   85 7624   86 7936   87 4363   87 5668   88 3849",
          "741:   89 6440   89 6924   89 9769   90 2449   90 3625   90 7112   91 1356",
          "742:   91 1483   91 7225   91 7715   91 9237   93 1966   93 8183   93 8492",
          "743:   94 6092   95 1045   95 4118   95 5124   96 3476   96 4893   96 9599",
          "744:   97 8693   97 8995   98 4797   98 6351   99 1147   99 9094   99 9929}",
          "751: } {0 0   1 1   1 1   2 2   2 2   2 2   3 3   3 3   4 4   5 5   6 6   7 7   7 7",
          "752:   7 7   8 8   8 8   8 8   9 9   9 9   9 9   10 10   11 11   11 11   12 12",
          "753:   12 12   12 12   13 13   13 13   14 14   15 15   15 15   15 15   16 16",
          "754:   16 16   16 16   17 17   19 19   20 20   21 21   21 21   22 22   22 22",
          "755:   23 23   23 23   23 23   24 24   25 25   26 26   26 26   26 26   27 27",
          "756:   27 27   28 28   29 29   29 29   29 29   30 30   30 30   30 30   31 31",
          "757:   31 31   32 32   33 33   33 33   33 33   33 33   33 33   34 34   34 34",
          "758:   34 34   34 34   35 35   35 35   36 36   36 36   36 36   36 36   37 37",
          "759:   37 37   38 38   38 38   39 39   39 39   39 39   40 40   41 41   41 41",
          "760:   41 41   42 42   43 43   43 43   44 44   44 44   46 46   46 46   47 47",
          "761:   47 47   47 47   47 47   49 49   50 50   51 51   52 52   53 53   54 54",
          "762:   55 55   55 55   56 56   56 56   56 56   57 57   58 58   58 58   58 58",
          "763:   58 58   59 59   59 59   59 59   59 59   60 60   61 61   61 61   62 62",
          "764:   62 62   63 63   64 64   65 65   65 65   65 65   66 66   67 67   68 68",
          "765:   69 69   70 70   72 72   72 72   72 72   73 73   73 73   73 73   74 74",
          "766:   74 74   74 74   74 74   74 74   75 75   75 75   75 75   76 76   77 77",
          "767:   77 77   78 78   78 78   79 79   80 80   80 80   81 81   81 81   81 81",
          "768:   82 82   83 83   84 84   84 84   84 84   84 84   85 85   85 85   85 85",
          "769:   86 86   87 87   87 87   88 88   89 89   89 89   89 89   90 90   90 90",
          "770:   90 90   91 91   91 91   91 91   91 91   91 91   93 93   93 93   93 93",
          "771:   94 94   95 95   95 95   95 95   96 96   96 96   96 96   97 97   97 97",
          "772:   98 98   98 98   99 99   99 99   99 99}",
          "779: } {0 0   1 3379   1 5443   2 372   2 4473   2 7074   3 2916   3 9096   4 4049",
          "780:   5 5643   6 1047   7 2205   7 7081   7 10141   8 1553   8 5926   8 6422",
          "781:   9 4883   9 7932   9 8497   10 9544   11 5727   11 6433   12 2825   12 5918",
          "782:   12 8582   13 5190   13 8570   14 8596   15 3189   15 6023   15 8924",
          "783:   16 1942   16 1958   16 3590   17 10134   19 7474   20 5946   21 5464",
          "784:   21 9682   22 3029   22 6140   23 212   23 1926   23 8520   24 2626",
          "785:   25 3331   26 337   26 7539   26 7565   27 1270   27 10035   28 3217",
          "786:   29 1649   29 4355   29 7326   30 4215   30 9400   30 9853   31 5977",
          "787:   31 6008   32 2857   33 370   33 4326   33 8175   33 8909   33 9661",
          "788:   34 6414   34 6516   34 8958   34 9925   35 2151   35 5638   36 3701",
          "789:   36 7818   36 8785   36 8994   37 4597   37 8557   38 735   38 9891   39 842",
          "790:   39 7513   39 9721   40 3475   41 115   41 4874   41 5906   42 4185",
          "791:   43 2754   43 3518   44 7072   44 9765   46 1041   46 1316   47 2198",
          "792:   47 3378   47 7612   47 7923   49 6482   50 9450   51 5778   52 9370",
          "793:   53 4408   54 1448   55 3174   55 6876   56 2913   56 3435   56 3574",
          "794:   57 7223   58 5248   58 7876   58 9318   58 9823   59 697   59 2813",
          "795:   59 6665   59 7455   60 6821   61 2426   61 4944   62 904   62 8658",
          "796:   63 4471   64 8407   65 2116   65 5177   65 5603   66 8142   67 1620",
          "797:   68 803   69 9260   70 7396   72 4833   72 8004   72 8076   73 5017",
          "798:   73 5716   73 6213   74 74   74 189   74 2365   74 5538   74 7297   75 3665",
          "799:   75 6951   75 8343   76 3964   77 1903   77 7028   78 1394   78 4293",
          "800:   79 6292   80 4677   80 7692   81 542   81 4045   81 8488   82 10117",
          "801:   83 10008   84 1826   84 4761   84 9534   84 9628   85 2602   85 2711",
          "802:   85 7166   86 2291   87 4560   87 5865   88 6380   89 461   89 3306",
          "803:   89 3790   90 3119   90 6606   90 7782   91 995   91 2517   91 3007",
          "804:   91 8749   91 8876   93 1742   93 2051   93 8268   94 4143   95 5112",
          "805:   95 6118   95 9191   96 638   96 5344   96 6761   97 1243   97 1545",
          "806:   98 3888   98 5442   99 311   99 1146   99 9093}",
          "813: } {0 10141   1 10141   1 10141   2 10141   2 10141   2 10141   3 10141",
          "814:   3 10141   4 10141   5 10141   6 10141   7 10141   7 10141   7 10141",
          "815:   8 10141   8 10141   8 10141   9 10141   9 10141   9 10141   10 10141",
          "816:   11 10141   11 10141   12 10141   12 10141   12 10141   13 10141   13 10141",
          "817:   14 10141   15 10141   15 10141   15 10141   16 10141   16 10141   16 10141",
          "818:   17 10141   19 10141   20 10141   21 10141   21 10141   22 10141   22 10141",
          "819:   23 10141   23 10141   23 10141   24 10141   25 10141   26 10141   26 10141",
          "820:   26 10141   27 10141   27 10141   28 10141   29 10141   29 10141   29 10141",
          "821:   30 10141   30 10141   30 10141   31 10141   31 10141   32 10141   33 10141",
          "822:   33 10141   33 10141   33 10141   33 10141   34 10141   34 10141   34 10141",
          "823:   34 10141   35 10141   35 10141   36 10141   36 10141   36 10141   36 10141",
          "824:   37 10141   37 10141   38 10141   38 10141   39 10141   39 10141   39 10141",
          "825:   40 10141   41 10141   41 10141   41 10141   42 10141   43 10141   43 10141",
          "826:   44 10141   44 10141   46 10141   46 10141   47 10141   47 10141   47 10141",
          "827:   47 10141   49 10141   50 10141   51 10141   52 10141   53 10141   54 10141",
          "828:   55 10141   55 10141   56 10141   56 10141   56 10141   57 10141   58 10141",
          "829:   58 10141   58 10141   58 10141   59 10141   59 10141   59 10141   59 10141",
          "830:   60 10141   61 10141   61 10141   62 10141   62 10141   63 10141   64 10141",
          "831:   65 10141   65 10141   65 10141   66 10141   67 10141   68 10141   69 10141",
          "832:   70 10141   72 10141   72 10141   72 10141   73 10141   73 10141   73 10141",
          "833:   74 10141   74 10141   74 10141   74 10141   74 10141   75 10141   75 10141",
          "834:   75 10141   76 10141   77 10141   77 10141   78 10141   78 10141   79 10141",
          "835:   80 10141   80 10141   81 10141   81 10141   81 10141   82 10141   83 10141",
          "836:   84 10141   84 10141   84 10141   84 10141   85 10141   85 10141   85 10141",
          "837:   86 10141   87 10141   87 10141   88 10141   89 10141   89 10141   89 10141",
          "838:   90 10141   90 10141   90 10141   91 10141   91 10141   91 10141   91 10141",
          "839:   91 10141   93 10141   93 10141   93 10141   94 10141   95 10141   95 10141",
          "840:   95 10141   96 10141   96 10141   96 10141   97 10141   97 10141   98 10141",
          "841:   98 10141   99 10141   99 10141   99 10141}",
          "848: } {0 10141   1 4699   1 6763   2 3069   2 5670   2 9771   3 1048   3 7228",
          "849:   4 6096   5 4503   6 9100   7 7   7 3067   7 7943   8 3727   8 4223   8 8596",
          "850:   9 1653   9 2218   9 5267   10 607   11 3719   11 4425   12 1571   12 4235",
          "851:   12 7328   13 1584   13 4964   14 1559   15 1232   15 4133   15 6967",
          "852:   16 6567   16 8199   16 8215   17 24   19 2686   20 4215   21 480   21 4698",
          "853:   22 4023   22 7134   23 1644   23 8238   23 9952   24 7539   25 6835",
          "854:   26 2602   26 2628   26 9830   27 133   27 8898   28 6952   29 2844",
          "855:   29 5815   29 8521   30 318   30 771   30 5956   31 4164   31 4195   32 7316",
          "856:   33 513   33 1265   33 1999   33 5848   33 9804   34 250   34 1217   34 3659",
          "857:   34 3761   35 4538   35 8025   36 1183   36 1392   36 2359   36 6476",
          "858:   37 1621   37 5581   38 288   38 9444   39 459   39 2667   39 9338   40 6706",
          "859:   41 4276   41 5308   41 10067   42 5998   43 6666   43 7430   44 420",
          "860:   44 3113   46 8871   46 9146   47 2265   47 2576   47 6810   47 7990",
          "861:   49 3708   50 741   51 4414   52 823   53 5786   54 8747   55 3320   55 7022",
          "862:   56 6623   56 6762   56 7284   57 2975   58 376   58 881   58 2323   58 4951",
          "863:   59 2745   59 3535   59 7387   59 9503   60 3380   61 5258   61 7776",
          "864:   62 1545   62 9299   63 5733   64 1798   65 4603   65 5029   65 8090",
          "865:   66 2065   67 8588   68 9406   69 950   70 2815   72 2137   72 2209",
          "866:   72 5380   73 4001   73 4498   73 5197   74 2918   74 4677   74 7850",
          "867:   74 10026   74 10141   75 1873   75 3265   75 6551   76 6253   77 3190",
          "868:   77 8315   78 5926   78 8825   79 3928   80 2529   80 5544   81 1734",
          "869:   81 6177   81 9680   82 106   83 216   84 597   84 691   84 5464   84 8399",
          "870:   85 3060   85 7515   85 7624   86 7936   87 4363   87 5668   88 3849",
          "871:   89 6440   89 6924   89 9769   90 2449   90 3625   90 7112   91 1356",
          "872:   91 1483   91 7225   91 7715   91 9237   93 1966   93 8183   93 8492",
          "873:   94 6092   95 1045   95 4118   95 5124   96 3476   96 4893   96 9599",
          "874:   97 8693   97 8995   98 4797   98 6351   99 1147   99 9094   99 9929}",
          "877: do_test 4.9 {",
          "878:   set myres {}",
          "879:   foreach r [db eval {SELECT",
          "880:     rank() OVER win AS rank,",
          "881:     cume_dist() OVER win AS cume_dist FROM t1",
          "882:   WINDOW win AS (ORDER BY 1);}] {",
          "883:     lappend myres [format %.4f [set r]]",
          "884:   }",
          "885:   set res2 {1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000}",
          "886:   set i 0",
          "887:   foreach r [set myres] r2 [set res2] {",
          "888:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "889:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "890:     }",
          "891:     incr i",
          "892:   }",
          "893:   set {} {}",
          "894: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ca1347f59d33015047fad6ca2cf878f2488eb22",
      "candidate_info": {
        "commit_hash": "7ca1347f59d33015047fad6ca2cf878f2488eb22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ca1347f59d33015047fad6ca2cf878f2488eb22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "When a scalar subquery has a pre-existing \"LIMIT X\" then change it to \"LIMIT X<>0\" rather than just \"LIMIT 1\" so that if X is 0 the limit will still be zero.  Ticket [99cd4807dc03f178]\n\nFossilOrigin-Name: 82e5dcf5c1d500ed82f398b38fdae0f30033804e897fbab3c10f1e15e2abedef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7673a445f4cde8f71153ce81efdc34fbed8b8625714d54afae1a83d548671ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2959:     sqlite3VdbeAddOp2(v, OP_Integer, 0, dest.iSDParm);",
          "2960:     VdbeComment((v, \"Init EXISTS result\"));",
          "2961:   }",
          "2963:   if( pSel->pLimit ){",
          "2965:     pSel->pLimit->pLeft = pLimit;",
          "2966:   }else{",
          "2967:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "2968:   }",
          "2969:   pSel->iLimit = 0;",
          "",
          "[Removed Lines]",
          "2962:   pLimit = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[1], 0);",
          "2964:     sqlite3ExprDelete(pParse->db, pSel->pLimit->pLeft);",
          "",
          "[Added Lines]",
          "2965:     sqlite3 *db = pParse->db;",
          "2966:     pLimit = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "2967:     if( pLimit ){",
          "2968:       pLimit->affExpr = SQLITE_AFF_NUMERIC;",
          "2969:       pLimit = sqlite3PExpr(pParse, TK_NE,",
          "2970:                             sqlite3ExprDup(db, pSel->pLimit->pLeft, 0), pLimit);",
          "2971:     }",
          "2972:     sqlite3ExprDelete(db, pSel->pLimit->pLeft);",
          "2976:     pLimit = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
      "candidate_info": {
        "commit_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/898c527eafd8bf263a3c3626ff421804558132f9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c"
        ],
        "message": "When flipping (\"commuting\") a comparison operator, set the new EP_Commuted bit rather than adding extra EP_Collate bits, to single later processing that the order of precedence for COLLATE operators is inverted. Fix for ticket [b47e3627ecaadbde]\n\nFossilOrigin-Name: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd2317d04c1c4bcf5fe63aa02a6051bdfae8f5566a098e3f45bf9ec1dd0c3ea6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   return pColl;",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "351:   if( ExprHasProperty(p, EP_Commuted) ){",
          "352:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "353:   }else{",
          "354:     return sqlite3BinaryCompareCollSeq(pParse, p->pLeft, p->pRight);",
          "355:   }",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: ){",
          "354:   int p5;",
          "355:   int addr;",
          "356:   CollSeq *p4;",
          "359:   p5 = binaryCompareP5(pLeft, pRight, jumpIfNull);",
          "360:   addr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,",
          "361:                            (void*)p4, P4_COLLSEQ);",
          "",
          "[Removed Lines]",
          "358:   p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "",
          "[Added Lines]",
          "375:   if( isCommuted ){",
          "376:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
          "377:   }else{",
          "378:     p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   int regRight = 0;",
          "567:   u8 opx = op;",
          "568:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "570:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "571:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     assert( i>=0 && i<nLeft );",
          "596:     r1 = exprVectorRegister(pParse, pLeft, i, regLeft, &pL, &regFree1);",
          "597:     r2 = exprVectorRegister(pParse, pRight, i, regRight, &pR, &regFree2);",
          "599:     testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "600:     testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "601:     testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "598:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5);",
          "",
          "[Added Lines]",
          "620:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5, isCommuted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3665:         r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);",
          "3666:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "3667:         codeCompare(pParse, pLeft, pExpr->pRight, op,",
          "3669:         assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "3670:         assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "3671:         assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "3668:             r1, r2, inReg, SQLITE_STOREP2 | p5);",
          "",
          "[Added Lines]",
          "3690:             r1, r2, inReg, SQLITE_STOREP2 | p5,",
          "3691:             ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4585:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4586:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4587:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4589:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4590:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4591:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4588:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4611:                   r1, r2, dest, jumpIfNull, ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4760:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4761:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4762:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4764:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4765:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4766:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4763:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4786:                   r1, r2, dest, jumpIfNull,ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4946:       return 2;",
          "4947:     }",
          "4948:   }",
          "4950:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "4951:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4952:     if( (combinedFlags & EP_FixedCol)==0",
          "",
          "[Removed Lines]",
          "4949:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "",
          "[Added Lines]",
          "4972:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "4973:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   if( pRight->op==TK_COLUMN",
          "4171:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4172:    && sqlite3ExprIsConstant(pLeft)",
          "4174:   ){",
          "4175:     constInsert(pConst, pRight, pLeft);",
          "4176:   }else",
          "4177:   if( pLeft->op==TK_COLUMN",
          "4178:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4179:    && sqlite3ExprIsConstant(pRight)",
          "4181:   ){",
          "4182:     constInsert(pConst, pLeft, pRight);",
          "4183:   }",
          "",
          "[Removed Lines]",
          "4173:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "4180:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "",
          "[Added Lines]",
          "4173:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4180:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4517: #endif",
          "4518: int sqlite3Reprepare(Vdbe*);",
          "4519: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4520: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "4521: int sqlite3TempInMemory(const sqlite3*);",
          "4522: const char *sqlite3JournalModename(int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4520: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 continue;",
          "280:               }",
          "281:               assert(pX->pLeft);",
          "284:               if( pColl==0 ) pColl = pParse->db->pDfltColl;",
          "285:               if( sqlite3StrICmp(pColl->zName, pScan->zCollName) ){",
          "286:                 continue;",
          "",
          "[Removed Lines]",
          "282:               pColl = sqlite3BinaryCompareCollSeq(pParse,",
          "283:                                                   pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "282:               pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:         Expr *pX = pTerm->pExpr;",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2802:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2803:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     Expr *pExpr;",
          "2806:     pExpr = pTerm->pExpr;",
          "2807:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2808:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "",
          "[Removed Lines]",
          "2805:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3265:     int iTerm = pIdxInfo->aConstraint[iCons].iTermOffset;",
          "3266:     Expr *pX = pHidden->pWC->a[iTerm].pExpr;",
          "3267:     if( pX->pLeft ){",
          "3269:     }",
          "3270:     zRet = (pC ? pC->zName : sqlite3StrBINARY);",
          "3271:   }",
          "",
          "[Removed Lines]",
          "3268:       pC = sqlite3BinaryCompareCollSeq(pHidden->pParse, pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "3266:       pC = sqlite3ExprCompareCollSeq(pHidden->pParse, pX);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "145:   }",
          "146:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "147:   if( pExpr->op>=TK_GT ){",
          "",
          "[Removed Lines]",
          "127:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "128:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "129:   u16 wtFlags = 0;",
          "130:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "131:   if( expRight==expLeft ){",
          "133:     if( expRight ){",
          "136:       pExpr->pRight->flags &= ~EP_Collate;",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "138:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "142:       pExpr->pLeft->flags |= EP_Collate;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "144:     }",
          "",
          "[Added Lines]",
          "114:   if( sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "115:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft) ){",
          "116:     pExpr->flags ^= EP_Commuted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "153:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "154:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "155:   return wtFlags;",
          "",
          "[Added Lines]",
          "127:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:   ){",
          "931:     return 0;",
          "932:   }",
          "934:   if( sqlite3IsBinary(pColl) ) return 1;",
          "935:   return sqlite3ExprCollSeqMatch(pParse, pExpr->pLeft, pExpr->pRight);",
          "936: }",
          "",
          "[Removed Lines]",
          "933:   pColl = sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight);",
          "",
          "[Added Lines]",
          "905:   pColl = sqlite3ExprCompareCollSeq(pParse, pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
      "candidate_info": {
        "commit_hash": "a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "When Select-Trace is enabled (in debugging builds only) do not show the result of Window function tree rewrites if there are no window functions.\n\nFossilOrigin-Name: d1acf72ae1ea7484bb9c3a8630094f1a3a9597578c7b9d6e02fc0a4e3f59c57d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5ee30426e8876e70304f852153b56991a2a66e0f6a82597e9dcccf49163272d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5727:     goto select_end;",
          "5728:   }",
          "5729: #if SELECTTRACE_ENABLED",
          "5731:     SELECTTRACE(0x104,pParse,p, (\"after window rewrite:\\n\"));",
          "5732:     sqlite3TreeViewSelect(0, p, 0);",
          "5733:   }",
          "",
          "[Removed Lines]",
          "5730:   if( sqlite3SelectTrace & 0x108 ){",
          "",
          "[Added Lines]",
          "5730:   if( p->pWin && (sqlite3SelectTrace & 0x108)!=0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}