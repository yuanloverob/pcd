{
  "cve_id": "CVE-2020-35981",
  "cve_desc": "An issue was discovered in GPAC version 0.8.0 and 1.0.1. There is an invalid pointer dereference in the function SetupWriters() in isomedia/isom_store.c.",
  "repo": "gpac/gpac",
  "patch_hash": "dae9900580a8888969481cd72035408091edb11b",
  "patch_info": {
    "commit_hash": "dae9900580a8888969481cd72035408091edb11b",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/dae9900580a8888969481cd72035408091edb11b",
    "files": [
      "src/isomedia/isom_store.c"
    ],
    "message": "fixed #1659",
    "before_after_code_files": [
      "src/isomedia/isom_store.c||src/isomedia/isom_store.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/isom_store.c||src/isomedia/isom_store.c": [
      "File: src/isomedia/isom_store.c -> src/isomedia/isom_store.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:  trackCount = gf_list_count(movie->moov->trackList);",
      "152:  for (i = 0; i < trackCount; i++) {",
      "153:   trak = gf_isom_get_track(movie->moov, i+1);",
      "155:   GF_SAFEALLOC(writer, TrackWriter);",
      "156:   if (!writer) goto exit;",
      "157:   writer->sampleNumber = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "153:   GF_SampleTableBox *stbl;",
      "156:   stbl = (trak->Media && trak->Media->information) ? trak->Media->information->sampleTable : NULL;",
      "157:   if (!stbl || !stbl->SampleSize || !stbl->ChunkOffset || !stbl->SampleToChunk) {",
      "158:    return GF_ISOM_INVALID_FILE;",
      "159:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1918266aca4865577030f9d7493bf1d008367797",
      "candidate_info": {
        "commit_hash": "1918266aca4865577030f9d7493bf1d008367797",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/1918266aca4865577030f9d7493bf1d008367797",
        "files": [
          "applications/mp4box/filedump.c",
          "applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h",
          "share/doc/man/gpac-filters.1",
          "share/doc/man/gpac.1",
          "share/doc/man/mp4box.1",
          "share/doc/man/mp4client.1",
          "src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c",
          "src/isomedia/hint_track.c",
          "src/isomedia/hinting.c",
          "src/isomedia/iff.c",
          "src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c",
          "src/isomedia/isom_store.c",
          "src/isomedia/isom_write.c",
          "src/isomedia/media.c",
          "src/isomedia/media_odf.c",
          "src/isomedia/movie_fragments.c",
          "src/isomedia/track.c",
          "src/media_tools/webvtt.c",
          "src/utils/os_config_init.c",
          "testsuite"
        ],
        "message": "reworked child box registering for boxpatch",
        "before_after_code_files": [
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "applications/mp4box/main.c||applications/mp4box/main.c",
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c",
          "src/isomedia/hint_track.c||src/isomedia/hint_track.c",
          "src/isomedia/hinting.c||src/isomedia/hinting.c",
          "src/isomedia/iff.c||src/isomedia/iff.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c||src/isomedia/isom_read.c",
          "src/isomedia/isom_store.c||src/isomedia/isom_store.c",
          "src/isomedia/isom_write.c||src/isomedia/isom_write.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/media_odf.c||src/isomedia/media_odf.c",
          "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/media_tools/webvtt.c||src/media_tools/webvtt.c",
          "src/utils/os_config_init.c||src/utils/os_config_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/isom_store.c||src/isomedia/isom_store.c"
          ],
          "candidate": [
            "src/isomedia/isom_store.c||src/isomedia/isom_store.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2067:  char szInd[2];",
          "2068:  u32 i, count, brand, primary_id;",
          "2069:  brand = gf_isom_get_meta_type(file, root_meta, tk_num);",
          "2071:  if (name[0]=='\\t') {",
          "2072:   szInd[0] = '\\t';",
          "2073:   szInd[1] = 0;",
          "",
          "[Removed Lines]",
          "2070:  if (!brand) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2078:  count = gf_isom_get_meta_item_count(file, root_meta, tk_num);",
          "2079:  primary_id = gf_isom_get_meta_primary_item_id(file, root_meta, tk_num);",
          "2081:  switch (gf_isom_has_meta_xml(file, root_meta, tk_num)) {",
          "2082:  case 1:",
          "2083:   fprintf(stderr, \"%sMeta has XML resource\\n\", szInd);",
          "",
          "[Removed Lines]",
          "2080:  fprintf(stderr, \"%s type: \\\"%s\\\" - %d resource item(s)\\n\", name, gf_4cc_to_str(brand), (count+(primary_id>0)));",
          "",
          "[Added Lines]",
          "2079:  fprintf(stderr, \"%s type: \\\"%s\\\" - %d resource item(s)\\n\", name, brand ? gf_4cc_to_str(brand) : \"undefined\", (count+(primary_id>0)));",
          "",
          "---------------"
        ],
        "applications/mp4box/main.c||applications/mp4box/main.c": [
          "File: applications/mp4box/main.c -> applications/mp4box/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "840:   \"  \\n\"",
          "841:   \"Note: When importing SRT or SUB files, MP4Box will choose default layout options to make the subtitle appear at the bottom of the video. You SHOULD NOT import such files before any video track is added to the destination file, otherwise the results will likelly not be useful (default SRT/SUB importing uses default serif font, fontSize 18 and display size 400x60). For more details, check [TTXT doc](Subtitling-with-GPAC).\\n\"",
          "842:   \"  \\n\"",
          "844:   \"  \\n\"",
          "845:   \"The import file name may be set to empty or `self`, indicating that the import options should be applied to the destination file track(s).\\n\"",
          "846:   \"EX -add self:moovts=-1:noedit src.mp4\\n\"",
          "",
          "[Removed Lines]",
          "843:   \"When importing several tracks/sources in one pass, all options will be applied if relevant to each source. These options are set for all imported streams. If you need to specify these options par stream, set per-file options using the syntax `-add stream[:opt1:...:optN]`.\\n\"",
          "",
          "[Added Lines]",
          "843:   \"When importing several tracks/sources in one pass, all options will be applied if relevant to each source. These options are set for all imported streams. If you need to specify these options per stream, set per-file options using the syntax `-add stream[:opt1:...:optN]`.\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5672:    if (!file && (gf_isom_last_error(NULL) == GF_ISOM_INCOMPLETE_FILE) && !open_edit) {",
          "5673:     u64 missing_bytes;",
          "5674:     gf_isom_open_progressive(inName, 0, 0, GF_FALSE, &file, &missing_bytes);",
          "5676:    }",
          "5678:    if (!file) {",
          "",
          "[Removed Lines]",
          "5675:     M4_LOG(GF_LOG_ERROR, (\"Truncated file - missing \"LLD\" bytes\\n\", missing_bytes));",
          "",
          "[Added Lines]",
          "5675:     if (missing_bytes)",
          "5676:      M4_LOG(GF_LOG_ERROR, (\"Truncated file - missing \"LLD\" bytes\\n\", missing_bytes));",
          "",
          "---------------"
        ],
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "610: GF_Err gf_isom_clone_box(GF_Box *src, GF_Box **dst);",
          "612: GF_Err gf_isom_box_parse(GF_Box **outBox, GF_BitStream *bs);",
          "616: GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box);",
          "",
          "[Removed Lines]",
          "613: GF_Err gf_isom_box_array_read(GF_Box *s, GF_BitStream *bs, GF_Err (*check_child_box)(GF_Box *par, GF_Box *b));",
          "614: GF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, GF_Err (*check_child_box)(GF_Box *par, GF_Box *b), u32 parent_type);",
          "",
          "[Added Lines]",
          "613: GF_Err gf_isom_box_array_read(GF_Box *s, GF_BitStream *bs);",
          "614: GF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, u32 parent_type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638: void gf_isom_box_freeze_order(GF_Box *box);",
          "641: typedef struct",
          "642: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640: #define BOX_FIELD_ASSIGN(_field, _box_cast) \\",
          "641:  if (is_rem) {\\",
          "642:   ptr->_field = NULL;\\",
          "643:   return GF_OK;\\",
          "644:  } else {\\",
          "645:   if (ptr->_field) ERROR_ON_DUPLICATED_BOX(a, ptr)\\",
          "646:   ptr->_field = (_box_cast *)a;\\",
          "647:  }",
          "649: #define BOX_FIELD_LIST_ASSIGN(_field) \\",
          "650:  if (is_rem) {\\",
          "651:   gf_list_del_item(ptr->_field, a);\\",
          "652:  } else {\\",
          "653:   if (!ptr->_field) ptr->_field = gf_list_new();\\",
          "654:   GF_Err _e = gf_list_add(ptr->_field, a);\\",
          "655:   if (_e) return _e;\\",
          "656:  }",
          "659: void gf_isom_box_remove_from_parent(GF_Box *parent_box, GF_Box *box);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4181: GF_ItemListBox *gf_ismo_locate_box(GF_List *list, u32 boxType, bin128 UUID);",
          "4190: GF_Err stdp_box_read(GF_Box *s, GF_BitStream *bs);",
          "4192: GF_Err sdtp_box_read(GF_Box *s, GF_BitStream *bs);",
          "4199: GF_Err AVC_HEVC_UpdateESD(GF_MPEGVisualSampleEntryBox *avc, GF_ESD *esd);",
          "",
          "[Removed Lines]",
          "4183: GF_Err moov_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4184: GF_Err trak_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4185: GF_Err mvex_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4186: GF_Err stsd_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4187: GF_Err hnti_on_child_box(GF_Box *hnti, GF_Box *a);",
          "4188: GF_Err udta_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4189: GF_Err edts_on_child_box(GF_Box *s, GF_Box *a);",
          "4191: GF_Err stbl_on_child_box(GF_Box *ptr, GF_Box *a);",
          "4193: GF_Err dinf_on_child_box(GF_Box *s, GF_Box *a);",
          "4194: GF_Err minf_on_child_box(GF_Box *s, GF_Box *a);",
          "4195: GF_Err mdia_on_child_box(GF_Box *s, GF_Box *a);",
          "4196: GF_Err traf_on_child_box(GF_Box *s, GF_Box *a);",
          "",
          "[Added Lines]",
          "4203: GF_Err moov_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4204: GF_Err trak_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4205: GF_Err mvex_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4206: GF_Err stsd_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4207: GF_Err hnti_on_child_box(GF_Box *hnti, GF_Box *a, Bool is_rem);",
          "4208: GF_Err udta_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4209: GF_Err edts_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);",
          "4211: GF_Err stbl_on_child_box(GF_Box *ptr, GF_Box *a, Bool is_rem);",
          "4213: GF_Err dinf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);",
          "4214: GF_Err minf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);",
          "4215: GF_Err mdia_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);",
          "4216: GF_Err traf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);",
          "",
          "---------------"
        ],
        "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c": [
          "File: src/isomedia/avc_ext.c -> src/isomedia/avc_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2441:  GF_TrackBox *trak;",
          "2442:  GF_MPEGVisualSampleEntryBox *entry;",
          "2443:  trak = gf_isom_get_track_from_file(the_file, trackNumber);",
          "2445:  if (!gf_isom_is_video_handler_type(trak->Media->handler->handlerType))",
          "2446:   return GF_ISOM_AVCTYPE_NONE;",
          "",
          "[Removed Lines]",
          "2444:  if (!trak || !trak->Media || !DescriptionIndex) return GF_ISOM_AVCTYPE_NONE;",
          "",
          "[Added Lines]",
          "2444:  if (!trak || !trak->Media || !trak->Media->handler || !DescriptionIndex) return GF_ISOM_AVCTYPE_NONE;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:  rec->text_color = gpp_read_rgba(bs);",
          "305: }",
          "308: {",
          "309:  GF_Tx3gSampleEntryBox *ptr = (GF_Tx3gSampleEntryBox*)s;",
          "310:  switch (a->type) {",
          "311:  case GF_ISOM_BOX_TYPE_FTAB:",
          "314:   break;",
          "315:  default:",
          "316:   return GF_OK;",
          "",
          "[Removed Lines]",
          "307: GF_Err tx3g_on_child_box(GF_Box *s, GF_Box *a)",
          "312:   if (ptr->font_table) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "313:   ptr->font_table = (GF_FontTableBox *)a;",
          "",
          "[Added Lines]",
          "307: GF_Err tx3g_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "312:   BOX_FIELD_ASSIGN(font_table, GF_FontTableBox)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:  gpp_read_style(bs, &ptr->default_style);",
          "340: }",
          "",
          "[Removed Lines]",
          "339:  return gf_isom_box_array_read(s, bs, tx3g_on_child_box);",
          "",
          "[Added Lines]",
          "338:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "412:  }",
          "413:  ISOM_DECREASE_SIZE(ptr, pSize);",
          "415: }",
          "417: void gpp_write_rgba(GF_BitStream *bs, u32 col)",
          "",
          "[Removed Lines]",
          "414:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "413:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1156:  gf_free(s);",
          "1157: }",
          "1160: {",
          "1161:  GF_DIMSSampleEntryBox *ptr = (GF_DIMSSampleEntryBox  *)s;",
          "1162:  switch (a->type) {",
          "1163:  case GF_ISOM_BOX_TYPE_DIMC:",
          "1166:   break;",
          "1167:  case GF_ISOM_BOX_TYPE_DIST:",
          "1170:   break;",
          "1171:  }",
          "1172:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1159: static GF_Err dims_on_child_box(GF_Box *s, GF_Box *a)",
          "1164:   if (ptr->config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1165:    ptr->config = (GF_DIMSSceneConfigBox*)a;",
          "1168:   if (ptr->scripts) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1169:    ptr->scripts = (GF_DIMSScriptTypesBox*)a;",
          "",
          "[Added Lines]",
          "1158: GF_Err dims_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1163:   BOX_FIELD_ASSIGN(config, GF_DIMSSceneConfigBox)",
          "1166:   BOX_FIELD_ASSIGN(scripts, GF_DIMSScriptTypesBox)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1180:  if (e) return e;",
          "1182:  ISOM_DECREASE_SIZE(p, 8);",
          "1184: }",
          "1186: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1183:  return gf_isom_box_array_read(s, bs, dims_on_child_box);",
          "",
          "[Added Lines]",
          "1180:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c": [
          "File: src/isomedia/box_code_apple.c -> src/isomedia/box_code_apple.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   u64 pos = gf_bs_get_position(bs);",
          "145:   u64 prev_size = s->size;",
          "148:   if (e==GF_OK) return GF_OK;",
          "150:   gf_isom_box_array_del(s->child_boxes);",
          "",
          "[Removed Lines]",
          "147:   e = gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "147:   e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:  if (!mov || !mov->moov) return NULL;",
          "398:  if (!mov->moov->udta) {",
          "400:   if (e) return NULL;",
          "401:  }",
          "",
          "[Removed Lines]",
          "399:   e = moov_on_child_box((GF_Box*)mov->moov, gf_isom_box_new_parent(&mov->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "399:   e = moov_on_child_box((GF_Box*)mov->moov, gf_isom_box_new_parent(&mov->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:  meta = (GF_MetaBox *)gf_isom_box_new(udta_subtype);",
          "416:  if (meta) {",
          "418:   if (!for_xtra) {",
          "419:    meta->handler = (GF_HandlerBox *)gf_isom_box_new_parent(&meta->child_boxes, GF_ISOM_BOX_TYPE_HDLR);",
          "420:    if(meta->handler == NULL) {",
          "",
          "[Removed Lines]",
          "417:   udta_on_child_box((GF_Box *)mov->moov->udta, (GF_Box *)meta);",
          "",
          "[Added Lines]",
          "417:   udta_on_child_box((GF_Box *)mov->moov->udta, (GF_Box *)meta, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:  ptr->frames_per_counter_tick = gf_bs_read_u8(bs);",
          "555:  gf_bs_read_u8(bs); //reserved",
          "558: }",
          "560: GF_Box *tmcd_box_new()",
          "",
          "[Removed Lines]",
          "557:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "557:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:  if (e == GF_OK) {",
          "779:   gf_bs_seek(sub_bs, 0);",
          "780:   gf_bs_set_cookie(sub_bs, GF_ISOM_BS_COOKIE_NO_LOGS);",
          "782:  }",
          "783:  gf_bs_del(sub_bs);",
          "784:  if (e==GF_OK) {",
          "",
          "[Removed Lines]",
          "781:   e = gf_isom_box_array_read(s, sub_bs, NULL);",
          "",
          "[Added Lines]",
          "781:   e = gf_isom_box_array_read(s, sub_bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "841: GF_Err def_parent_box_read(GF_Box *s, GF_BitStream *bs)",
          "842: {",
          "844: }",
          "846: GF_Box *def_parent_box_new()",
          "",
          "[Removed Lines]",
          "843:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "843:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "873: GF_Err def_parent_full_box_read(GF_Box *s, GF_BitStream *bs)",
          "874: {",
          "876: }",
          "878: GF_Box *def_parent_full_box_new()",
          "",
          "[Removed Lines]",
          "875:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "875:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "958: }",
          "962: {",
          "963:  GF_DataInformationBox *ptr = (GF_DataInformationBox *)s;",
          "964:  switch(a->type) {",
          "965:  case GF_ISOM_BOX_TYPE_DREF:",
          "968:   return GF_OK;",
          "969:  }",
          "970:  return GF_OK;",
          "",
          "[Removed Lines]",
          "961: GF_Err dinf_on_child_box(GF_Box *s, GF_Box *a)",
          "966:   if (ptr->dref) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "967:   ptr->dref = (GF_DataReferenceBox *)a;",
          "",
          "[Added Lines]",
          "961: GF_Err dinf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "966:   BOX_FIELD_ASSIGN(dref, GF_DataReferenceBox)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "973: GF_Err dinf_box_read(GF_Box *s, GF_BitStream *bs)",
          "974: {",
          "975:  GF_DataInformationBox *dinf;",
          "977:  if (e) {",
          "978:   return e;",
          "979:  }",
          "",
          "[Removed Lines]",
          "976:  GF_Err e = gf_isom_box_array_read(s, bs, dinf_on_child_box);",
          "",
          "[Added Lines]",
          "975:  GF_Err e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1020:  GF_DataReferenceBox *ptr = (GF_DataReferenceBox *)s;",
          "1021:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1022:  gf_bs_read_u32(bs);",
          "1024: }",
          "1026: GF_Box *dref_box_new()",
          "",
          "[Removed Lines]",
          "1023:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "1022:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1063: }",
          "1067: {",
          "1068:  GF_EditBox *ptr = (GF_EditBox *)s;",
          "1069:  if (a->type == GF_ISOM_BOX_TYPE_ELST) {",
          "1072:   return GF_OK;",
          "1073:  } else {",
          "1074:   return GF_OK;",
          "",
          "[Removed Lines]",
          "1066: GF_Err edts_on_child_box(GF_Box *s, GF_Box *a)",
          "1070:   if (ptr->editList) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1071:   ptr->editList = (GF_EditListBox *)a;",
          "",
          "[Added Lines]",
          "1065: GF_Err edts_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1069:   BOX_FIELD_ASSIGN(editList, GF_EditListBox)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1080: GF_Err edts_box_read(GF_Box *s, GF_BitStream *bs)",
          "1081: {",
          "1083: }",
          "1085: GF_Box *edts_box_new()",
          "",
          "[Removed Lines]",
          "1082:  return gf_isom_box_array_read(s, bs, edts_on_child_box);",
          "",
          "[Added Lines]",
          "1080:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1735:  return (GF_Box *)tmp;",
          "1736: }",
          "1739: {",
          "1741:  GF_HintInfoBox *hinf = (GF_HintInfoBox *)s;",
          "1743:  switch (a->type) {",
          "1744:  case GF_ISOM_BOX_TYPE_MAXR:",
          "1749:   }",
          "1750:   break;",
          "1751:  }",
          "",
          "[Removed Lines]",
          "1738: GF_Err hinf_on_child_box(GF_Box *s, GF_Box *a)",
          "1740:  GF_MAXRBox *maxR;",
          "1742:  u32 i;",
          "1745:   i=0;",
          "1746:   while ((maxR = (GF_MAXRBox *)gf_list_enum(hinf->child_boxes, &i))) {",
          "1747:    if ((maxR->type==GF_ISOM_BOX_TYPE_MAXR) && (maxR->granularity == ((GF_MAXRBox *)a)->granularity))",
          "1748:     ERROR_ON_DUPLICATED_BOX(a, s)",
          "",
          "[Added Lines]",
          "1736: GF_Err hinf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1741:   if (!is_rem) {",
          "1742:    u32 i=0;",
          "1743:    GF_MAXRBox *maxR;",
          "1744:    while ((maxR = (GF_MAXRBox *)gf_list_enum(hinf->child_boxes, &i))) {",
          "1745:     if ((maxR->type==GF_ISOM_BOX_TYPE_MAXR) && (maxR->granularity == ((GF_MAXRBox *)a)->granularity))",
          "1746:      ERROR_ON_DUPLICATED_BOX(a, s)",
          "1747:    }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1756: GF_Err hinf_box_read(GF_Box *s, GF_BitStream *bs)",
          "1757: {",
          "1759: }",
          "1761: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1758:  return gf_isom_box_array_read(s, bs, hinf_on_child_box);",
          "",
          "[Added Lines]",
          "1757:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1838:  gf_free(a);",
          "1839: }",
          "1842: {",
          "1846:  switch (a->type) {",
          "1848:  case GF_ISOM_BOX_TYPE_RTP:",
          "1849:  case GF_ISOM_BOX_TYPE_SDP:",
          "1852:   break;",
          "1853:  default:",
          "1854:   break;",
          "",
          "[Removed Lines]",
          "1841: GF_Err hnti_on_child_box(GF_Box *s, GF_Box *a)",
          "1843:  GF_HintTrackInfoBox *hnti = (GF_HintTrackInfoBox *)s;",
          "1844:  if (!hnti || !a) return GF_BAD_PARAM;",
          "1850:   if (hnti->SDP) ERROR_ON_DUPLICATED_BOX(a, s)",
          "1851:   hnti->SDP = a;",
          "",
          "[Added Lines]",
          "1840: GF_Err hnti_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1842:  GF_HintTrackInfoBox *ptr = (GF_HintTrackInfoBox *)s;",
          "1843:  if (!ptr || !a) return GF_BAD_PARAM;",
          "1849:   BOX_FIELD_ASSIGN(SDP, GF_Box)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1859: GF_Err hnti_box_read(GF_Box *s, GF_BitStream *bs)",
          "1860: {",
          "1862: }",
          "1864: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1861:  return gf_isom_box_array_read_ex(s, bs, hnti_on_child_box, s->type);",
          "",
          "[Added Lines]",
          "1859:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2688:  gf_free(s);",
          "2689: }",
          "2692: {",
          "2693:  GF_SRTPProcessBox *ptr = (GF_SRTPProcessBox *)s;",
          "2694:  switch(a->type) {",
          "2695:  case GF_ISOM_BOX_TYPE_SCHI:",
          "2698:   return GF_OK;",
          "2699:  case GF_ISOM_BOX_TYPE_SCHM:",
          "2702:   return GF_OK;",
          "2703:  }",
          "2704:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2691: GF_Err srpp_on_child_box(GF_Box *s, GF_Box *a)",
          "2696:   if (ptr->info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "2697:   ptr->info = (GF_SchemeInformationBox *)a;",
          "2700:   if (ptr->scheme_type) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "2701:   ptr->scheme_type = (GF_SchemeTypeBox *)a;",
          "",
          "[Added Lines]",
          "2689: GF_Err srpp_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "2694:   BOX_FIELD_ASSIGN(info, GF_SchemeInformationBox)",
          "2697:   BOX_FIELD_ASSIGN(scheme_type, GF_SchemeTypeBox)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2713:  ptr->encryption_algorithm_rtcp = gf_bs_read_u32(bs);",
          "2714:  ptr->integrity_algorithm_rtp = gf_bs_read_u32(bs);",
          "2715:  ptr->integrity_algorithm_rtcp = gf_bs_read_u32(bs);",
          "2717: }",
          "2718: GF_Box *srpp_box_new()",
          "2719: {",
          "",
          "[Removed Lines]",
          "2716:  return gf_isom_box_array_read(s, bs, srpp_on_child_box);",
          "",
          "[Added Lines]",
          "2712:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3024: }",
          "3028: {",
          "3029:  GF_MediaBox *ptr = (GF_MediaBox *)s;",
          "3030:  switch(a->type) {",
          "3031:  case GF_ISOM_BOX_TYPE_MDHD:",
          "3034:   return GF_OK;",
          "3036:  case GF_ISOM_BOX_TYPE_HDLR:",
          "3039:   return GF_OK;",
          "3041:  case GF_ISOM_BOX_TYPE_MINF:",
          "3044:   return GF_OK;",
          "3045:  }",
          "3046:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3027: GF_Err mdia_on_child_box(GF_Box *s, GF_Box *a)",
          "3032:   if (ptr->mediaHeader) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3033:   ptr->mediaHeader = (GF_MediaHeaderBox *)a;",
          "3037:   if (ptr->handler) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3038:   ptr->handler = (GF_HandlerBox *)a;",
          "3042:   if (ptr->information) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3043:   ptr->information = (GF_MediaInformationBox *)a;",
          "",
          "[Added Lines]",
          "3023: GF_Err mdia_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "3028:   BOX_FIELD_ASSIGN(mediaHeader, GF_MediaHeaderBox)",
          "3032:   BOX_FIELD_ASSIGN(handler, GF_HandlerBox)",
          "3036:   BOX_FIELD_ASSIGN(information, GF_MediaInformationBox)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3053:  u64 cookie = gf_bs_get_cookie(bs);",
          "3054:  cookie &= ~GF_ISOM_BS_COOKIE_VISUAL_TRACK;",
          "3055:  gf_bs_set_cookie(bs, cookie);",
          "3057:  gf_bs_set_cookie(bs, cookie);",
          "3059:  if (e) return e;",
          "",
          "[Removed Lines]",
          "3056:  e = gf_isom_box_array_read(s, bs, mdia_on_child_box);",
          "",
          "[Added Lines]",
          "3049:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3123:  return (GF_Box *)tmp;",
          "3124: }",
          "3127: {",
          "3128:  GF_MovieFragmentRandomAccessBox *ptr = (GF_MovieFragmentRandomAccessBox *)s;",
          "3129:  switch(a->type) {",
          "3130:  case GF_ISOM_BOX_TYPE_TFRA:",
          "3132:  case GF_ISOM_BOX_TYPE_MFRO:",
          "3135:   return GF_OK;",
          "3136:  }",
          "3137:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3126: GF_Err mfra_on_child_box(GF_Box *s, GF_Box *a)",
          "3131:   return gf_list_add(ptr->tfra_list, a);",
          "3133:   if (ptr->mfro) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3134:   ptr->mfro = (GF_MovieFragmentRandomAccessOffsetBox *)a;",
          "",
          "[Added Lines]",
          "3119: GF_Err mfra_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "3124:   BOX_FIELD_LIST_ASSIGN(tfra_list);",
          "3125:   return GF_OK;",
          "3127:   BOX_FIELD_ASSIGN(mfro, GF_MovieFragmentRandomAccessOffsetBox)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3140: GF_Err mfra_box_read(GF_Box *s, GF_BitStream *bs)",
          "3141: {",
          "3143: }",
          "3145: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "3142:  return gf_isom_box_array_read(s, bs, mfra_on_child_box);",
          "",
          "[Added Lines]",
          "3135:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3468:  gf_free(ptr);",
          "3469: }",
          "3472: {",
          "3473:  GF_MediaInformationBox *ptr = (GF_MediaInformationBox *)s;",
          "3474:  switch (a->type) {",
          "",
          "[Removed Lines]",
          "3471: GF_Err minf_on_child_box(GF_Box *s, GF_Box *a)",
          "",
          "[Added Lines]",
          "3464: GF_Err minf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3478:  case GF_ISOM_BOX_TYPE_SMHD:",
          "3479:  case GF_ISOM_BOX_TYPE_HMHD:",
          "3480:  case GF_ISOM_BOX_TYPE_GMHD:",
          "3483:   return GF_OK;",
          "3485:  case GF_ISOM_BOX_TYPE_DINF:",
          "3488:   return GF_OK;",
          "3490:  case GF_ISOM_BOX_TYPE_STBL:",
          "3493:   return GF_OK;",
          "3494:  }",
          "3495:  return GF_OK;",
          "",
          "[Removed Lines]",
          "3481:   if (ptr->InfoHeader) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3482:   ptr->InfoHeader = a;",
          "3486:   if (ptr->dataInformation) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3487:   ptr->dataInformation = (GF_DataInformationBox *)a;",
          "3491:   if (ptr->sampleTable ) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3492:   ptr->sampleTable = (GF_SampleTableBox *)a;",
          "",
          "[Added Lines]",
          "3474:   BOX_FIELD_ASSIGN(InfoHeader, GF_Box)",
          "3478:   BOX_FIELD_ASSIGN(dataInformation, GF_DataInformationBox)",
          "3482:   BOX_FIELD_ASSIGN(sampleTable, GF_SampleTableBox)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3501:  GF_MediaInformationBox *ptr = (GF_MediaInformationBox *)s;",
          "3502:  GF_Err e;",
          "3506:  if (!e && ! ptr->dataInformation) {",
          "3507:   GF_Box *url;",
          "",
          "[Removed Lines]",
          "3504:  e = gf_isom_box_array_read(s, bs, minf_on_child_box);",
          "",
          "[Added Lines]",
          "3494:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3566:  gf_free(ptr);",
          "3567: }",
          "3570: {",
          "3571:  GF_MovieFragmentBox *ptr = (GF_MovieFragmentBox *)s;",
          "3572:  switch (a->type) {",
          "3573:  case GF_ISOM_BOX_TYPE_MFHD:",
          "3576:   return GF_OK;",
          "3577:  case GF_ISOM_BOX_TYPE_TRAF:",
          "3579:  case GF_ISOM_BOX_TYPE_PSSH:",
          "3582:  }",
          "3583:  return GF_OK;",
          "3584: }",
          "3586: GF_Err moof_box_read(GF_Box *s, GF_BitStream *bs)",
          "3587: {",
          "3589: }",
          "3591: GF_Box *moof_box_new()",
          "",
          "[Removed Lines]",
          "3569: GF_Err moof_on_child_box(GF_Box *s, GF_Box *a)",
          "3574:   if (ptr->mfhd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3575:   ptr->mfhd = (GF_MovieFragmentHeaderBox *) a;",
          "3578:   return gf_list_add(ptr->TrackList, a);",
          "3580:   if (!ptr->PSSHs) ptr->PSSHs = gf_list_new();",
          "3581:   return gf_list_add(ptr->PSSHs, a);",
          "3588:  return gf_isom_box_array_read(s, bs, moof_on_child_box);",
          "",
          "[Added Lines]",
          "3559: GF_Err moof_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "3564:   BOX_FIELD_ASSIGN(mfhd, GF_MovieFragmentHeaderBox)",
          "3567:   BOX_FIELD_LIST_ASSIGN(TrackList)",
          "3568:   return GF_OK;",
          "3570:   BOX_FIELD_LIST_ASSIGN(PSSHs)",
          "3571:   return GF_OK;",
          "3578:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3630:  gf_free(ptr);",
          "3631: }",
          "3634: {",
          "3635:  GF_MovieBox *ptr = (GF_MovieBox *)s;",
          "3636:  switch (a->type) {",
          "3637:  case GF_ISOM_BOX_TYPE_IODS:",
          "3642:    ptr->iods = NULL;",
          "3643:    gf_isom_box_del_parent(&s->child_boxes, a);",
          "3644:   }",
          "3645:   return GF_OK;",
          "3647:  case GF_ISOM_BOX_TYPE_MVHD:",
          "3650:   return GF_OK;",
          "3652:  case GF_ISOM_BOX_TYPE_UDTA:",
          "3655:   return GF_OK;",
          "3657: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "3658:  case GF_ISOM_BOX_TYPE_MVEX:",
          "3662:   return GF_OK;",
          "3663: #endif",
          "3665:  case GF_ISOM_BOX_TYPE_META:",
          "3668:   return GF_OK;",
          "3670:  case GF_ISOM_BOX_TYPE_TRAK:",
          "3672:   ((GF_TrackBox *)a)->moov = ptr;",
          "3673:   ((GF_TrackBox *)a)->index = gf_list_count(ptr->trackList);",
          "",
          "[Removed Lines]",
          "3633: GF_Err moov_on_child_box(GF_Box *s, GF_Box *a)",
          "3638:   if (ptr->iods) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3639:   ptr->iods = (GF_ObjectDescriptorBox *)a;",
          "3641:   if (!ptr->iods->descriptor) {",
          "3648:   if (ptr->mvhd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3649:   ptr->mvhd = (GF_MovieHeaderBox *)a;",
          "3653:   if (ptr->udta) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3654:   ptr->udta = (GF_UserDataBox *)a;",
          "3659:   if (ptr->mvex) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3660:   ptr->mvex = (GF_MovieExtendsBox *)a;",
          "3661:   ptr->mvex->mov = ptr->mov;",
          "3666:   if (ptr->meta) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3667:   ptr->meta = (GF_MetaBox *)a;",
          "",
          "[Added Lines]",
          "3623: GF_Err moov_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "3628:   BOX_FIELD_ASSIGN(iods, GF_ObjectDescriptorBox)",
          "3630:   if (ptr->iods && !ptr->iods->descriptor) {",
          "3637:   BOX_FIELD_ASSIGN(mvhd, GF_MovieHeaderBox)",
          "3641:   BOX_FIELD_ASSIGN(udta, GF_UserDataBox)",
          "3646:   BOX_FIELD_ASSIGN(mvex, GF_MovieExtendsBox)",
          "3647:   if (ptr->mvex)",
          "3648:    ptr->mvex->mov = ptr->mov;",
          "3653:   BOX_FIELD_ASSIGN(meta, GF_MetaBox)",
          "3657:   if (is_rem) {",
          "3658:    gf_list_del_item(ptr->trackList, a);",
          "3659:    return GF_OK;",
          "3660:   }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3680: GF_Err moov_box_read(GF_Box *s, GF_BitStream *bs)",
          "3681: {",
          "3683: }",
          "3685: GF_Box *moov_box_new()",
          "",
          "[Removed Lines]",
          "3682:  return gf_isom_box_array_read(s, bs, moov_on_child_box);",
          "",
          "[Added Lines]",
          "3672:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3737:  gf_free(ptr);",
          "3738: }",
          "3741: {",
          "3742:  GF_UnknownBox *wave = NULL;",
          "3743:  Bool drop_wave=GF_FALSE;",
          "",
          "[Removed Lines]",
          "3740: GF_Err audio_sample_entry_on_child_box(GF_Box *s, GF_Box *a)",
          "",
          "[Added Lines]",
          "3730: GF_Err audio_sample_entry_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3746:  switch (a->type) {",
          "3747:  case GF_ISOM_BOX_TYPE_ESDS:",
          "3750:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3751:   break;",
          "",
          "[Removed Lines]",
          "3748:   if (ptr->esd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3749:   ptr->esd = (GF_ESDBox *)a;",
          "",
          "[Added Lines]",
          "3738:   BOX_FIELD_ASSIGN(esd, GF_ESDBox)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3754:  case GF_ISOM_BOX_TYPE_DEVC:",
          "3755:  case GF_ISOM_BOX_TYPE_DQCP:",
          "3756:  case GF_ISOM_BOX_TYPE_DSMV:",
          "3760:   ptr->cfg_3gpp->cfg.type = ptr->type;",
          "3761:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3762:   break;",
          "3764:  case GF_ISOM_BOX_TYPE_DOPS:",
          "3767:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3768:   break;",
          "3769:  case GF_ISOM_BOX_TYPE_DAC3:",
          "3772:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3773:   break;",
          "3774:  case GF_ISOM_BOX_TYPE_DEC3:",
          "3777:   break;",
          "3778:  case GF_ISOM_BOX_TYPE_DMLP:",
          "3781:   break;",
          "3782:  case GF_ISOM_BOX_TYPE_MHAC:",
          "3785:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3786:   break;",
          "3787:  case GF_ISOM_BOX_TYPE_DFLA:",
          "3790:   ptr->qtff_mode = GF_ISOM_AUDIO_QTFF_NONE;",
          "3791:   break;",
          "",
          "[Removed Lines]",
          "3757:   if (ptr->cfg_3gpp) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3758:   ptr->cfg_3gpp = (GF_3GPPConfigBox *) a;",
          "3765:   if (ptr->cfg_opus) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3766:   ptr->cfg_opus = (GF_OpusSpecificBox *)a;",
          "3770:   if (ptr->cfg_ac3) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3771:   ptr->cfg_ac3 = (GF_AC3ConfigBox *) a;",
          "3775:   if (ptr->cfg_ac3) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3776:   ptr->cfg_ac3 = (GF_AC3ConfigBox *) a;",
          "3779:   if (ptr->cfg_mlp) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3780:   ptr->cfg_mlp = (GF_TrueHDConfigBox *) a;",
          "3783:   if (ptr->cfg_mha) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3784:   ptr->cfg_mha = (GF_MHAConfigBox *) a;",
          "3788:   if (ptr->cfg_flac) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3789:   ptr->cfg_flac = (GF_FLACConfigBox *) a;",
          "",
          "[Added Lines]",
          "3746:   BOX_FIELD_ASSIGN(cfg_3gpp, GF_3GPPConfigBox)",
          "3753:   BOX_FIELD_ASSIGN(cfg_opus, GF_OpusSpecificBox)",
          "3757:   BOX_FIELD_ASSIGN(cfg_ac3, GF_AC3ConfigBox)",
          "3761:   BOX_FIELD_ASSIGN(cfg_ac3, GF_AC3ConfigBox)",
          "3764:   BOX_FIELD_ASSIGN(cfg_mlp, GF_TrueHDConfigBox)",
          "3767:   BOX_FIELD_ASSIGN(cfg_mha, GF_MHAConfigBox)",
          "3771:   BOX_FIELD_ASSIGN(cfg_flac, GF_FLACConfigBox)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3794:   wave = (GF_UnknownBox *)a;",
          "3796:   if (s->type == GF_ISOM_BOX_TYPE_MP4A) {",
          "3797:    if (ptr->esd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3800:     if ((wave->original_4cc == GF_QT_BOX_TYPE_WAVE) && gf_list_count(wave->child_boxes)) {",
          "3801:      u32 i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3779:    if (is_rem) {",
          "3780:     return GF_OK;",
          "3781:    }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3864:   }",
          "3866:   if (cfg_ptr) {",
          "3867:    if (*cfg_ptr) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3851:    if (is_rem) {",
          "3853:     return GF_OK;",
          "3854:    }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3943:    ptr->qtff_mode |= GF_ISOM_AUDIO_QTFF_CONVERT_FLAG;",
          "3944:   }",
          "3947:  if (!e) {",
          "3948:   if (s->type==GF_ISOM_BOX_TYPE_ENCA) {",
          "3949:    GF_ProtectionSchemeInfoBox *sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(s->child_boxes, GF_ISOM_BOX_TYPE_SINF);",
          "",
          "[Removed Lines]",
          "3946:  e = gf_isom_box_array_read(s, bs, audio_sample_entry_on_child_box);",
          "",
          "[Added Lines]",
          "3934:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4053:  GF_Err e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)s, bs);",
          "4054:  if (e) return e;",
          "4055:  ISOM_DECREASE_SIZE(s, 8);",
          "4057: }",
          "4059: GF_Box *gen_sample_entry_box_new()",
          "",
          "[Removed Lines]",
          "4056:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "4044:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4096:  gf_free(ptr);",
          "4097: }",
          "4100: {",
          "4101:  GF_MPEGSampleEntryBox *ptr = (GF_MPEGSampleEntryBox *)s;",
          "4102:  switch (a->type) {",
          "4103:  case GF_ISOM_BOX_TYPE_ESDS:",
          "4106:   break;",
          "4107:  }",
          "4108:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4099: GF_Err mp4s_on_child_box(GF_Box *s, GF_Box *a)",
          "4104:   if (ptr->esd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4105:   ptr->esd = (GF_ESDBox *)a;",
          "",
          "[Added Lines]",
          "4087: GF_Err mp4s_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "4092:   BOX_FIELD_ASSIGN(esd, GF_ESDBox)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4117:  if (e) return e;",
          "4119:  ISOM_DECREASE_SIZE(ptr, 8);",
          "4121: }",
          "4123: GF_Box *mp4s_box_new()",
          "",
          "[Removed Lines]",
          "4120:  return gf_isom_box_array_read(s, bs, mp4s_on_child_box);",
          "",
          "[Added Lines]",
          "4107:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4174:  gf_free(ptr);",
          "4175: }",
          "4178: {",
          "4179:  GF_MPEGVisualSampleEntryBox *ptr = (GF_MPEGVisualSampleEntryBox *)s;",
          "4180:  switch (a->type) {",
          "4181:  case GF_ISOM_BOX_TYPE_ESDS:",
          "4184:   break;",
          "4185:  case GF_ISOM_BOX_TYPE_RINF:",
          "4188:   break;",
          "4189:  case GF_ISOM_BOX_TYPE_AVCC:",
          "4192:   break;",
          "4193:  case GF_ISOM_BOX_TYPE_HVCC:",
          "4196:   break;",
          "4197:  case GF_ISOM_BOX_TYPE_VVCC:",
          "4200:   break;",
          "4201:  case GF_ISOM_BOX_TYPE_SVCC:",
          "4204:   break;",
          "4205:  case GF_ISOM_BOX_TYPE_MVCC:",
          "4208:   break;",
          "4209:  case GF_ISOM_BOX_TYPE_LHVC:",
          "4212:   break;",
          "4213:  case GF_ISOM_BOX_TYPE_AV1C:",
          "4216:   break;",
          "4217:  case GF_ISOM_BOX_TYPE_VPCC:",
          "4220:   break;",
          "4221:  case GF_ISOM_BOX_TYPE_DVCC:",
          "4224:   break;",
          "4225:  case GF_ISOM_BOX_TYPE_UUID:",
          "4226:   if (! memcmp(((GF_UnknownUUIDBox*)a)->uuid, GF_ISOM_IPOD_EXT, 16)) {",
          "4229:   } else {",
          "4230:    return GF_OK;",
          "4231:   }",
          "4232:   break;",
          "4233:  case GF_ISOM_BOX_TYPE_D263:",
          "4238:   break;",
          "4240:  case GF_ISOM_BOX_TYPE_JP2H:",
          "4243:   return GF_OK;",
          "4245:  case GF_ISOM_BOX_TYPE_PASP:",
          "",
          "[Removed Lines]",
          "4177: GF_Err video_sample_entry_on_child_box(GF_Box *s, GF_Box *a)",
          "4182:   if (ptr->esd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4183:   ptr->esd = (GF_ESDBox *)a;",
          "4186:   if (ptr->rinf) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4187:   ptr->rinf = (GF_RestrictedSchemeInfoBox *) a;",
          "4190:   if (ptr->avc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4191:   ptr->avc_config = (GF_AVCConfigurationBox *)a;",
          "4194:   if (ptr->hevc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4195:   ptr->hevc_config = (GF_HEVCConfigurationBox *)a;",
          "4198:   if (ptr->vvc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4199:   ptr->vvc_config = (GF_VVCConfigurationBox *)a;",
          "4202:   if (ptr->svc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4203:   ptr->svc_config = (GF_AVCConfigurationBox *)a;",
          "4206:   if (ptr->mvc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4207:   ptr->mvc_config = (GF_AVCConfigurationBox *)a;",
          "4210:   if (ptr->lhvc_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4211:   ptr->lhvc_config = (GF_HEVCConfigurationBox *)a;",
          "4214:   if (ptr->av1_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4215:   ptr->av1_config = (GF_AV1ConfigurationBox *)a;",
          "4218:   if (ptr->vp_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4219:   ptr->vp_config = (GF_VPConfigurationBox *)a;",
          "4222:   if (ptr->dovi_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4223:   ptr->dovi_config = (GF_DOVIConfigurationBox*)a;",
          "4227:    if (ptr->ipod_ext) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4228:    ptr->ipod_ext = (GF_UnknownUUIDBox *)a;",
          "4234:   if (ptr->cfg_3gpp) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4235:   ptr->cfg_3gpp = (GF_3GPPConfigBox *)a;",
          "4237:   ptr->cfg_3gpp->cfg.type = ptr->type;",
          "4241:   if (ptr->jp2h) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4242:   ptr->jp2h = (GF_J2KHeaderBox *)a;",
          "",
          "[Added Lines]",
          "4164: GF_Err video_sample_entry_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "4169:   BOX_FIELD_ASSIGN(esd, GF_ESDBox)",
          "4172:   BOX_FIELD_ASSIGN(rinf, GF_RestrictedSchemeInfoBox)",
          "4175:   BOX_FIELD_ASSIGN(avc_config, GF_AVCConfigurationBox)",
          "4178:   BOX_FIELD_ASSIGN(hevc_config, GF_HEVCConfigurationBox)",
          "4181:   BOX_FIELD_ASSIGN(vvc_config, GF_VVCConfigurationBox)",
          "4184:   BOX_FIELD_ASSIGN(svc_config, GF_AVCConfigurationBox)",
          "4187:   BOX_FIELD_ASSIGN(mvc_config, GF_AVCConfigurationBox)",
          "4190:   BOX_FIELD_ASSIGN(lhvc_config, GF_HEVCConfigurationBox)",
          "4193:   BOX_FIELD_ASSIGN(av1_config, GF_AV1ConfigurationBox)",
          "4196:   BOX_FIELD_ASSIGN(vp_config, GF_VPConfigurationBox)",
          "4199:   BOX_FIELD_ASSIGN(dovi_config, GF_DOVIConfigurationBox)",
          "4203:    BOX_FIELD_ASSIGN(ipod_ext, GF_UnknownUUIDBox)",
          "4209:   BOX_FIELD_ASSIGN(cfg_3gpp, GF_3GPPConfigBox)",
          "4211:   if (ptr->cfg_3gpp)",
          "4212:    ptr->cfg_3gpp->cfg.type = ptr->type;",
          "4216:   BOX_FIELD_ASSIGN(jp2h, GF_J2KHeaderBox)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4251:  case GF_ISOM_BOX_TYPE_AUXI:",
          "4252:  case GF_ISOM_BOX_TYPE_RVCC:",
          "4253:  case GF_ISOM_BOX_TYPE_M4DS:",
          "4255:    ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4256:   }",
          "4257:   return GF_OK;",
          "",
          "[Removed Lines]",
          "4254:   if (!gf_isom_box_check_unique(s->child_boxes, a)) {",
          "",
          "[Added Lines]",
          "4228:   if (!is_rem && !gf_isom_box_check_unique(s->child_boxes, a)) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4265:  GF_Err e;",
          "4266:  e = gf_isom_video_sample_entry_read((GF_VisualSampleEntryBox *)s, bs);",
          "4267:  if (e) return e;",
          "4269:  if (e) return e;",
          "4271:  if (mp4v->avc_config || mp4v->svc_config || mp4v->mvc_config)",
          "",
          "[Removed Lines]",
          "4268:  e = gf_isom_box_array_read(s, bs, video_sample_entry_on_child_box);",
          "",
          "[Added Lines]",
          "4242:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4380: }",
          "4384: {",
          "4385:  GF_MovieExtendsBox *ptr = (GF_MovieExtendsBox *)s;",
          "4387:  switch (a->type) {",
          "4388:  case GF_ISOM_BOX_TYPE_TREX:",
          "4390:  case GF_ISOM_BOX_TYPE_TREP:",
          "4392:  case GF_ISOM_BOX_TYPE_MEHD:",
          "4395:   return GF_OK;",
          "4396:  }",
          "4397:  return GF_OK;",
          "",
          "[Removed Lines]",
          "4383: GF_Err mvex_on_child_box(GF_Box *s, GF_Box *a)",
          "4389:   return gf_list_add(ptr->TrackExList, a);",
          "4391:   return gf_list_add(ptr->TrackExPropList, a);",
          "4393:   if (ptr->mehd) ERROR_ON_DUPLICATED_BOX(a, s)",
          "4394:   ptr->mehd = (GF_MovieExtendsHeaderBox*)a;",
          "",
          "[Added Lines]",
          "4357: GF_Err mvex_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "4363:   BOX_FIELD_LIST_ASSIGN(TrackExList)",
          "4364:   return GF_OK;",
          "4366:   BOX_FIELD_LIST_ASSIGN(TrackExPropList)",
          "4367:   return GF_OK;",
          "4369:   BOX_FIELD_ASSIGN(mehd, GF_MovieExtendsHeaderBox)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4402: GF_Err mvex_box_read(GF_Box *s, GF_BitStream *bs)",
          "4403: {",
          "4405: }",
          "4407: GF_Box *mvex_box_new()",
          "",
          "[Removed Lines]",
          "4404:  return gf_isom_box_array_read(s, bs, mvex_on_child_box);",
          "",
          "[Added Lines]",
          "4379:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4936:  gf_free(ptr);",
          "4937: }",
          "4940: {",
          "4941:  GF_SampleTableBox *ptr = (GF_SampleTableBox *)s;",
          "4942:  if (!a) return GF_OK;",
          "4943:  switch (a->type) {",
          "4944:  case GF_ISOM_BOX_TYPE_STTS:",
          "4947:   break;",
          "4948:  case GF_ISOM_BOX_TYPE_CTTS:",
          "4951:   break;",
          "4952:  case GF_ISOM_BOX_TYPE_CSLG:",
          "4955:   break;",
          "4956:  case GF_ISOM_BOX_TYPE_STSS:",
          "4959:   break;",
          "4960:  case GF_ISOM_BOX_TYPE_STSD:",
          "4963:   break;",
          "4964:  case GF_ISOM_BOX_TYPE_STZ2:",
          "4965:  case GF_ISOM_BOX_TYPE_STSZ:",
          "4968:   break;",
          "4969:  case GF_ISOM_BOX_TYPE_STSC:",
          "4972:   break;",
          "4973:  case GF_ISOM_BOX_TYPE_PADB:",
          "4976:   break;",
          "4979:  case GF_ISOM_BOX_TYPE_CO64:",
          "4980:  case GF_ISOM_BOX_TYPE_STCO:",
          "4984:  case GF_ISOM_BOX_TYPE_STSH:",
          "4987:   break;",
          "4988:  case GF_ISOM_BOX_TYPE_STDP:",
          "4991:   break;",
          "4992:  case GF_ISOM_BOX_TYPE_SDTP:",
          "4995:   break;",
          "4997:  case GF_ISOM_BOX_TYPE_SUBS:",
          "5002:    GF_SubSampleInformationBox *subs = (GF_SubSampleInformationBox *)a;",
          "5003:    GF_SubSampleInfoEntry *ent = gf_list_get(subs->Samples, 0);",
          "5004:    if (!ent) {",
          "",
          "[Removed Lines]",
          "4939: GF_Err stbl_on_child_box(GF_Box *s, GF_Box *a)",
          "4945:   if (ptr->TimeToSample) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4946:   ptr->TimeToSample = (GF_TimeToSampleBox *)a;",
          "4949:   if (ptr->CompositionOffset) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4950:   ptr->CompositionOffset = (GF_CompositionOffsetBox *)a;",
          "4953:   if (ptr->CompositionToDecode) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4954:   ptr->CompositionToDecode = (GF_CompositionToDecodeBox *)a;",
          "4957:   if (ptr->SyncSample) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4958:   ptr->SyncSample = (GF_SyncSampleBox *)a;",
          "4961:   if (ptr->SampleDescription) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4962:   ptr->SampleDescription  =(GF_SampleDescriptionBox *)a;",
          "4966:   if (ptr->SampleSize) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4967:   ptr->SampleSize = (GF_SampleSizeBox *)a;",
          "4970:   if (ptr->SampleToChunk) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4971:   ptr->SampleToChunk = (GF_SampleToChunkBox *)a;",
          "4974:   if (ptr->PaddingBits) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4975:   ptr->PaddingBits = (GF_PaddingBitsBox *) a;",
          "4981:   if (ptr->ChunkOffset) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4982:   ptr->ChunkOffset = a;",
          "4983:   return GF_OK;",
          "4985:   if (ptr->ShadowSync) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4986:   ptr->ShadowSync = (GF_ShadowSyncBox *)a;",
          "4989:   if (ptr->DegradationPriority) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4990:   ptr->DegradationPriority = (GF_DegradationPriorityBox *)a;",
          "4993:   if (ptr->SampleDep) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "4994:   ptr->SampleDep = (GF_SampleDependencyTypeBox *)a;",
          "4998:   if (!ptr->sub_samples) ptr->sub_samples = gf_list_new();",
          "4999:   gf_list_add(ptr->sub_samples, a);",
          "5001:   {",
          "",
          "[Added Lines]",
          "4914: GF_Err stbl_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "4920:   BOX_FIELD_ASSIGN(TimeToSample, GF_TimeToSampleBox)",
          "4923:   BOX_FIELD_ASSIGN(CompositionOffset, GF_CompositionOffsetBox)",
          "4926:   BOX_FIELD_ASSIGN(CompositionToDecode, GF_CompositionToDecodeBox)",
          "4929:   BOX_FIELD_ASSIGN(SyncSample, GF_SyncSampleBox)",
          "4932:   BOX_FIELD_ASSIGN(SampleDescription, GF_SampleDescriptionBox)",
          "4936:   BOX_FIELD_ASSIGN(SampleSize, GF_SampleSizeBox)",
          "4939:   BOX_FIELD_ASSIGN(SampleToChunk, GF_SampleToChunkBox)",
          "4942:   BOX_FIELD_ASSIGN(PaddingBits, GF_PaddingBitsBox)",
          "4948:   BOX_FIELD_ASSIGN(ChunkOffset, GF_Box)",
          "4949:   break;",
          "4951:   BOX_FIELD_ASSIGN(ShadowSync, GF_ShadowSyncBox)",
          "4954:   BOX_FIELD_ASSIGN(DegradationPriority, GF_DegradationPriorityBox)",
          "4957:   BOX_FIELD_ASSIGN(SampleDep, GF_SampleDependencyTypeBox)",
          "4961:   BOX_FIELD_LIST_ASSIGN(sub_samples)",
          "4963:   if (!is_rem) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5015:  case GF_ISOM_BOX_TYPE_SBGP:",
          "5016:  case GF_ISOM_BOX_TYPE_CSGP:",
          "5019:   break;",
          "5020:  case GF_ISOM_BOX_TYPE_SGPD:",
          "5023:   break;",
          "5025:  case GF_ISOM_BOX_TYPE_SAIZ:",
          "5028:   break;",
          "5029:  case GF_ISOM_BOX_TYPE_SAIO:",
          "5032:   break;",
          "5033:  }",
          "5034:  return GF_OK;",
          "",
          "[Removed Lines]",
          "5017:   if (!ptr->sampleGroups) ptr->sampleGroups = gf_list_new();",
          "5018:   gf_list_add(ptr->sampleGroups, a);",
          "5021:   if (!ptr->sampleGroupsDescription) ptr->sampleGroupsDescription = gf_list_new();",
          "5022:   gf_list_add(ptr->sampleGroupsDescription, a);",
          "5026:   if (!ptr->sai_sizes) ptr->sai_sizes = gf_list_new();",
          "5027:   gf_list_add(ptr->sai_sizes, a);",
          "5030:   if (!ptr->sai_offsets) ptr->sai_offsets = gf_list_new();",
          "5031:   gf_list_add(ptr->sai_offsets, a);",
          "",
          "[Added Lines]",
          "4979:   BOX_FIELD_LIST_ASSIGN(sampleGroups)",
          "4982:   BOX_FIELD_LIST_ASSIGN(sampleGroupsDescription)",
          "4985:   BOX_FIELD_LIST_ASSIGN(sai_sizes)",
          "4988:   BOX_FIELD_LIST_ASSIGN(sai_offsets)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5044:  GF_SampleTableBox *ptr = (GF_SampleTableBox *)s;",
          "5047:  if (e) return e;",
          "5049:  if (!ptr->SyncSample)",
          "",
          "[Removed Lines]",
          "5046:  e = gf_isom_box_array_read(s, bs, stbl_on_child_box);",
          "",
          "[Added Lines]",
          "5003:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "5348:  gf_free(ptr);",
          "5349: }",
          "5352: {",
          "5353:  GF_UnknownBox *def;",
          "5354:  if (!a) return GF_OK;",
          "5357:   return GF_OK;",
          "5358:  }",
          "5359:  switch (a->type) {",
          "",
          "[Removed Lines]",
          "5351: GF_Err stsd_on_child_box(GF_Box *s, GF_Box *a)",
          "5356:  if (gf_box_valid_in_parent(a, \"stsd\")) {",
          "",
          "[Added Lines]",
          "5308: GF_Err stsd_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "5313:  if (is_rem || gf_box_valid_in_parent(a, \"stsd\")) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5380:  ISOM_DECREASE_SIZE(s, 4)",
          "5381:  gf_bs_read_u32(bs);",
          "5384: }",
          "5386: GF_Box *stsd_box_new()",
          "",
          "[Removed Lines]",
          "5383:  return gf_isom_box_array_read_ex(s, bs, stsd_on_child_box, GF_ISOM_BOX_TYPE_STSD);",
          "",
          "[Added Lines]",
          "5340:  return gf_isom_box_array_read_ex(s, bs, GF_ISOM_BOX_TYPE_STSD);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6175:  gf_free(ptr);",
          "6176: }",
          "6179: {",
          "6180:  GF_TrackFragmentBox *ptr = (GF_TrackFragmentBox *)s;",
          "6182:  switch (a->type) {",
          "6183:  case GF_ISOM_BOX_TYPE_TFHD:",
          "6186:   return GF_OK;",
          "6187:  case GF_ISOM_BOX_TYPE_TRUN:",
          "6189:  case GF_ISOM_BOX_TYPE_SDTP:",
          "6192:   return GF_OK;",
          "6193:  case GF_ISOM_BOX_TYPE_TFDT:",
          "6196:   return GF_OK;",
          "6197:  case GF_ISOM_BOX_TYPE_SUBS:",
          "6200:  case GF_ISOM_BOX_TYPE_SBGP:",
          "6201:  case GF_ISOM_BOX_TYPE_CSGP:",
          "6204:   return GF_OK;",
          "6205:  case GF_ISOM_BOX_TYPE_SGPD:",
          "6208:   return GF_OK;",
          "6209:  case GF_ISOM_BOX_TYPE_SAIZ:",
          "6212:   return GF_OK;",
          "6213:  case GF_ISOM_BOX_TYPE_SAIO:",
          "6216:   return GF_OK;",
          "6218:  case GF_ISOM_BOX_TYPE_UUID:",
          "6219:   if ( ((GF_UUIDBox *)a)->internal_4cc==GF_ISOM_BOX_UUID_PSEC) {",
          "6223:    return GF_OK;",
          "6224:   } else if ( ((GF_UUIDBox *)a)->internal_4cc==GF_ISOM_BOX_UUID_TFXD) {",
          "6227:    return GF_OK;",
          "6228:   } else if ( ((GF_UUIDBox *)a)->internal_4cc==GF_ISOM_BOX_UUID_TFRF) {",
          "6231:    return GF_OK;",
          "6232:   } else {",
          "6233:    return GF_OK;",
          "6234:   }",
          "6235:  case GF_ISOM_BOX_TYPE_SENC:",
          "6239:   return GF_OK;",
          "6240:  }",
          "6241:  return GF_OK;",
          "",
          "[Removed Lines]",
          "6178: GF_Err traf_on_child_box(GF_Box *s, GF_Box *a)",
          "6184:   if (ptr->tfhd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6185:   ptr->tfhd = (GF_TrackFragmentHeaderBox *) a;",
          "6188:   return gf_list_add(ptr->TrackRuns, a);",
          "6190:   if (ptr->sdtp) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6191:   ptr->sdtp = (GF_SampleDependencyTypeBox *)a;",
          "6194:   if (ptr->tfdt) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6195:   ptr->tfdt = (GF_TFBaseMediaDecodeTimeBox*) a;",
          "6198:   if (!ptr->sub_samples) ptr->sub_samples = gf_list_new();",
          "6199:   return gf_list_add(ptr->sub_samples, a);",
          "6202:   if (!ptr->sampleGroups) ptr->sampleGroups = gf_list_new();",
          "6203:   gf_list_add(ptr->sampleGroups, a);",
          "6206:   if (!ptr->sampleGroupsDescription) ptr->sampleGroupsDescription = gf_list_new();",
          "6207:   gf_list_add(ptr->sampleGroupsDescription, a);",
          "6210:   if (!ptr->sai_sizes) ptr->sai_sizes = gf_list_new();",
          "6211:   gf_list_add(ptr->sai_sizes, a);",
          "6214:   if (!ptr->sai_offsets) ptr->sai_offsets = gf_list_new();",
          "6215:   gf_list_add(ptr->sai_offsets, a);",
          "6220:    if (ptr->sample_encryption) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6221:    ptr->sample_encryption = (GF_SampleEncryptionBox *)a;",
          "6222:    ptr->sample_encryption->traf = ptr;",
          "6225:    if (ptr->tfxd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6226:    ptr->tfxd = (GF_MSSTimeExtBox *)a;",
          "6229:    if (ptr->tfrf) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6230:    ptr->tfrf = (GF_MSSTimeRefBox *)a;",
          "6236:   if (ptr->sample_encryption) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6237:   ptr->sample_encryption = (GF_SampleEncryptionBox *)a;",
          "6238:   ptr->sample_encryption->traf = ptr;",
          "",
          "[Added Lines]",
          "6135: GF_Err traf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "6141:   BOX_FIELD_ASSIGN(tfhd, GF_TrackFragmentHeaderBox)",
          "6144:   BOX_FIELD_LIST_ASSIGN(TrackRuns)",
          "6145:   return GF_OK;",
          "6147:   BOX_FIELD_ASSIGN(sdtp, GF_SampleDependencyTypeBox)",
          "6150:   BOX_FIELD_ASSIGN(tfdt, GF_TFBaseMediaDecodeTimeBox)",
          "6153:   BOX_FIELD_LIST_ASSIGN(sub_samples)",
          "6154:   return GF_OK;",
          "6157:   BOX_FIELD_LIST_ASSIGN(sampleGroups)",
          "6160:   BOX_FIELD_LIST_ASSIGN(sampleGroupsDescription)",
          "6163:   BOX_FIELD_LIST_ASSIGN(sai_sizes)",
          "6166:   BOX_FIELD_LIST_ASSIGN(sai_offsets)",
          "6171:    BOX_FIELD_ASSIGN(sample_encryption, GF_SampleEncryptionBox)",
          "6172:    if (!is_rem)",
          "6173:     ptr->sample_encryption->traf = ptr;",
          "6176:    BOX_FIELD_ASSIGN(tfxd, GF_MSSTimeExtBox)",
          "6179:    BOX_FIELD_ASSIGN(tfrf, GF_MSSTimeRefBox)",
          "6185:   BOX_FIELD_ASSIGN(sample_encryption, GF_SampleEncryptionBox)",
          "6186:   if (!is_rem)",
          "6187:    ptr->sample_encryption->traf = ptr;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6245: GF_Err traf_box_read(GF_Box *s, GF_BitStream *bs)",
          "6246: {",
          "6247:  GF_TrackFragmentBox *ptr = (GF_TrackFragmentBox *)s;",
          "6249:  if (e) return e;",
          "6251:  if (!ptr->tfhd) {",
          "",
          "[Removed Lines]",
          "6248:  GF_Err e = gf_isom_box_array_read(s, bs, traf_on_child_box);",
          "",
          "[Added Lines]",
          "6197:  GF_Err e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6618:    u64 pos = gf_bs_get_position(bs); \\",
          "6619:    u32 count_subb = 0; \\",
          "6620:    gf_bs_set_cookie(bs, GF_ISOM_BS_COOKIE_NO_LOGS);\\",
          "6622:    count_subb = _box->child_boxes ? gf_list_count(_box->child_boxes) : 0; \\",
          "6623:    if (!count_subb || e) { \\",
          "6624:     gf_bs_seek(bs, pos); \\",
          "",
          "[Removed Lines]",
          "6621:    e = gf_isom_box_array_read((GF_Box *) _box, bs, NULL); \\",
          "",
          "[Added Lines]",
          "6570:    e = gf_isom_box_array_read((GF_Box *) _box, bs); \\",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6690: }",
          "6694: {",
          "6695:  GF_TrackBox *ptr = (GF_TrackBox *)s;",
          "6696:  if (!a) return GF_OK;",
          "6697:  switch(a->type) {",
          "6698:  case GF_ISOM_BOX_TYPE_TKHD:",
          "6701:   return GF_OK;",
          "6702:  case GF_ISOM_BOX_TYPE_EDTS:",
          "6705:   return GF_OK;",
          "6706:  case GF_ISOM_BOX_TYPE_UDTA:",
          "6709:   return GF_OK;",
          "6710:  case GF_ISOM_BOX_TYPE_META:",
          "6713:   return GF_OK;",
          "6714:  case GF_ISOM_BOX_TYPE_TREF:",
          "6717:   return GF_OK;",
          "6718:  case GF_ISOM_BOX_TYPE_MDIA:",
          "6722:   return GF_OK;",
          "6723:  case GF_ISOM_BOX_TYPE_TRGR:",
          "6726:   return GF_OK;",
          "6727:  case GF_QT_BOX_TYPE_TAPT:",
          "6730:   return GF_OK;",
          "6731:  case GF_ISOM_BOX_TYPE_SENC:",
          "6733:   return GF_OK;",
          "6734:  case GF_ISOM_BOX_TYPE_UUID:",
          "6735:   if (((GF_UnknownUUIDBox *)a)->internal_4cc == GF_ISOM_BOX_UUID_PSEC) {",
          "6737:    return GF_OK;",
          "6738:   }",
          "6739:  }",
          "",
          "[Removed Lines]",
          "6693: GF_Err trak_on_child_box(GF_Box *s, GF_Box *a)",
          "6699:   if (ptr->Header) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6700:   ptr->Header = (GF_TrackHeaderBox *)a;",
          "6703:   if (ptr->editBox) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6704:   ptr->editBox = (GF_EditBox *)a;",
          "6707:   if (ptr->udta) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6708:   ptr->udta = (GF_UserDataBox *)a;",
          "6711:   if (ptr->meta) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6712:   ptr->meta = (GF_MetaBox *)a;",
          "6715:   if (ptr->References) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6716:   ptr->References = (GF_TrackReferenceBox *)a;",
          "6719:   if (ptr->Media) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6720:   ptr->Media = (GF_MediaBox *)a;",
          "6721:   ((GF_MediaBox *)a)->mediaTrack = ptr;",
          "6724:   if (ptr->groups) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6725:   ptr->groups = (GF_TrackGroupBox *)a;",
          "6728:   if (ptr->Aperture) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6729:   ptr->Aperture = (GF_Box *)a;",
          "6732:   ptr->sample_encryption = (GF_SampleEncryptionBox*)a;",
          "6736:    ptr->sample_encryption = (GF_SampleEncryptionBox*) a;",
          "",
          "[Added Lines]",
          "6642: GF_Err trak_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "6648:   BOX_FIELD_ASSIGN(Header, GF_TrackHeaderBox)",
          "6651:   BOX_FIELD_ASSIGN(editBox, GF_EditBox)",
          "6654:   BOX_FIELD_ASSIGN(udta, GF_UserDataBox)",
          "6657:   BOX_FIELD_ASSIGN(meta, GF_MetaBox)",
          "6660:   BOX_FIELD_ASSIGN(References, GF_TrackReferenceBox)",
          "6663:   BOX_FIELD_ASSIGN(Media, GF_MediaBox)",
          "6664:   if (!is_rem)",
          "6665:    ((GF_MediaBox *)a)->mediaTrack = ptr;",
          "6668:   BOX_FIELD_ASSIGN(groups, GF_TrackGroupBox)",
          "6671:   BOX_FIELD_ASSIGN(Aperture, GF_Box)",
          "6674:   BOX_FIELD_ASSIGN(sample_encryption, GF_SampleEncryptionBox)",
          "6678:    BOX_FIELD_ASSIGN(sample_encryption, GF_SampleEncryptionBox)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "6746:  GF_Err e;",
          "6747:  u32 i;",
          "6748:  GF_TrackBox *ptr = (GF_TrackBox *)s;",
          "6750:  if (e) return e;",
          "6751:  gf_isom_check_sample_desc(ptr);",
          "",
          "[Removed Lines]",
          "6749:  e = gf_isom_box_array_read(s, bs, trak_on_child_box);",
          "",
          "[Added Lines]",
          "6691:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "6946:  gf_free(s);",
          "6947: }",
          "6950: {",
          "6951:  GF_SubTrackBox *ptr = (GF_SubTrackBox *)s;",
          "6952:  if (!a) return GF_OK;",
          "6953:  switch (a->type) {",
          "6954:  case GF_ISOM_BOX_TYPE_STRI:",
          "6957:   return GF_OK;",
          "6958:  case GF_ISOM_BOX_TYPE_STRD:",
          "6961:   return GF_OK;",
          "6962:  }",
          "6963:  return GF_OK;",
          "",
          "[Removed Lines]",
          "6949: GF_Err strk_on_child_box(GF_Box *s, GF_Box *a)",
          "6955:   if (ptr->info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6956:   ptr->info = (GF_SubTrackInformationBox *)a;",
          "6959:   if (ptr->strd) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6960:   ptr->strd = a;",
          "",
          "[Added Lines]",
          "6891: GF_Err strk_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "6897:   BOX_FIELD_ASSIGN(info, GF_SubTrackInformationBox)",
          "6900:   BOX_FIELD_ASSIGN(strd, GF_Box)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "6968: {",
          "6969:  GF_Err e;",
          "6970:  GF_SubTrackBox *ptr = (GF_SubTrackBox *)s;",
          "6972:  if (e) return e;",
          "6974:  if (!ptr->info) {",
          "",
          "[Removed Lines]",
          "6971:  e = gf_isom_box_array_read(s, bs, strk_on_child_box);",
          "",
          "[Added Lines]",
          "6911:  e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "7010: GF_Err tref_box_read(GF_Box *s, GF_BitStream *bs)",
          "7011: {",
          "7013: }",
          "7015: GF_Box *tref_box_new()",
          "",
          "[Removed Lines]",
          "7012:  return gf_isom_box_array_read_ex(s, bs, NULL, s->type);",
          "",
          "[Added Lines]",
          "6952:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7201:  ISOM_DECREASE_SIZE(ptr, 4);",
          "7202:  ptr->trackID = gf_bs_read_u32(bs);",
          "7205: }",
          "7207: GF_Box *trep_box_new()",
          "",
          "[Removed Lines]",
          "7204:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "7144:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7920:  return NULL;",
          "7921: }",
          "7924: {",
          "7925:  GF_Err e;",
          "7926:  u32 box_type;",
          "",
          "[Removed Lines]",
          "7923: GF_Err udta_on_child_box(GF_Box *s, GF_Box *a)",
          "",
          "[Added Lines]",
          "7863: GF_Err udta_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7942:  map = udta_getEntry(ptr, box_type, (a->type==GF_ISOM_BOX_TYPE_UUID) ? & ((GF_UUIDBox *)a)->uuid : NULL);",
          "7943:  if (map == NULL) {",
          "7944:   map = (GF_UserDataMap *) gf_malloc(sizeof(GF_UserDataMap));",
          "7945:   if (map == NULL) return GF_OUT_OF_MEM;",
          "7946:   memset(map, 0, sizeof(GF_UserDataMap));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7884:   if (is_rem) return GF_OK;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7956:   e = gf_list_add(ptr->recordList, map);",
          "7957:   if (e) return e;",
          "7958:  }",
          "7959:  return gf_list_add(map->boxes, a);",
          "7960: }",
          "7963: GF_Err udta_box_read(GF_Box *s, GF_BitStream *bs)",
          "7964: {",
          "7966:  if (e) return e;",
          "7967:  if (s->size==4) {",
          "7968:   u32 val = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "7965:  GF_Err e = gf_isom_box_array_read(s, bs, udta_on_child_box);",
          "",
          "[Added Lines]",
          "7901:  if (is_rem) {",
          "7902:   gf_list_del_item(map->boxes, a);",
          "7903:   return GF_OK;",
          "7904:  }",
          "7911:  GF_Err e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "8360: }",
          "8364: {",
          "8365:  GF_MetaDataSampleEntryBox *ptr = (GF_MetaDataSampleEntryBox *)s;",
          "8366:  switch (a->type) {",
          "8369:  case GF_ISOM_BOX_TYPE_TXTC:",
          "8373:   break;",
          "8374:  }",
          "8375:  return GF_OK;",
          "",
          "[Removed Lines]",
          "8363: GF_Err metx_on_child_box(GF_Box *s, GF_Box *a)",
          "8367:  case GF_ISOM_BOX_TYPE_SINF:",
          "8368:   return GF_OK;",
          "8371:   if (ptr->config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "8372:   ptr->config = (GF_TextConfigBox *)a;",
          "",
          "[Added Lines]",
          "8309: GF_Err metx_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "8315:   BOX_FIELD_ASSIGN(config, GF_TextConfigBox)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8467:  }",
          "8468:  ptr->size = size;",
          "8469:  gf_free(str);",
          "8471: }",
          "",
          "[Removed Lines]",
          "8470:  return gf_isom_box_array_read(s, bs, metx_on_child_box);",
          "",
          "[Added Lines]",
          "8413:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8731:  gf_free(ptr);",
          "8732: }",
          "8735: {",
          "8736:  GF_LASeRSampleEntryBox *ptr = (GF_LASeRSampleEntryBox *)s;",
          "8737:  switch (a->type) {",
          "8738:  case GF_ISOM_BOX_TYPE_LSRC:",
          "8741:   break;",
          "8742:  case GF_ISOM_BOX_TYPE_M4DS:",
          "8745:   break;",
          "8746:  }",
          "8747:  return GF_OK;",
          "",
          "[Removed Lines]",
          "8734: GF_Err lsr1_on_child_box(GF_Box *s, GF_Box *a)",
          "8739:   if (ptr->lsr_config) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "8740:   ptr->lsr_config = (GF_LASERConfigurationBox *)a;",
          "8743:   if (ptr->descr) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "8744:   ptr->descr = (GF_MPEG4ExtensionDescriptorsBox *)a;",
          "",
          "[Added Lines]",
          "8677: GF_Err lsr1_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "8682:   BOX_FIELD_ASSIGN(lsr_config, GF_LASERConfigurationBox)",
          "8685:   BOX_FIELD_ASSIGN(descr, GF_MPEG4ExtensionDescriptorsBox)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8758:  ISOM_DECREASE_SIZE(ptr, 8);",
          "8761: }",
          "8763: GF_Box *lsr1_box_new()",
          "",
          "[Removed Lines]",
          "8760:  return gf_isom_box_array_read(s, bs, lsr1_on_child_box);",
          "",
          "[Added Lines]",
          "8701:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "10263: }",
          "10267: {",
          "10268:  GF_TrackGroupBox *ptr = (GF_TrackGroupBox *)s;",
          "10269:  return gf_list_add(ptr->groups, a);",
          "10270: }",
          "10273: GF_Err trgr_box_read(GF_Box *s, GF_BitStream *bs)",
          "10274: {",
          "10276: }",
          "",
          "[Removed Lines]",
          "10266: GF_Err trgr_on_child_box(GF_Box *s, GF_Box *a)",
          "10275:  return gf_isom_box_array_read_ex(s, bs, trgr_on_child_box, s->type);",
          "",
          "[Added Lines]",
          "10207: GF_Err trgr_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "10211:  BOX_FIELD_LIST_ASSIGN(groups)",
          "10218:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "10423: }",
          "10427: {",
          "10428:  FDItemInformationBox *ptr = (FDItemInformationBox *)s;",
          "10429:  switch(a->type) {",
          "10430:  case GF_ISOM_BOX_TYPE_PAEN:",
          "10433:  case GF_ISOM_BOX_TYPE_SEGR:",
          "10436:   return GF_OK;",
          "10437:  case GF_ISOM_BOX_TYPE_GITN:",
          "10440:   return GF_OK;",
          "10441:  }",
          "10442:  return GF_OK;",
          "",
          "[Removed Lines]",
          "10426: GF_Err fiin_on_child_box(GF_Box *s, GF_Box *a)",
          "10431:   if (!ptr->partition_entries) ptr->partition_entries = gf_list_new();",
          "10432:   return gf_list_add(ptr->partition_entries, a);",
          "10434:   if (ptr->session_info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "10435:   ptr->session_info = (FDSessionGroupBox *)a;",
          "10438:   if (ptr->group_id_to_name) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "10439:   ptr->group_id_to_name = (GroupIdToNameBox *)a;",
          "",
          "[Added Lines]",
          "10369: GF_Err fiin_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "10374:   BOX_FIELD_LIST_ASSIGN(partition_entries)",
          "10375:   return GF_OK;",
          "10377:   BOX_FIELD_ASSIGN(session_info, FDSessionGroupBox)",
          "10380:   BOX_FIELD_ASSIGN(group_id_to_name, GroupIdToNameBox)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "10449:  ISOM_DECREASE_SIZE(ptr, 2);",
          "10450:  gf_bs_read_u16(bs);",
          "10452: }",
          "",
          "[Removed Lines]",
          "10451:  return gf_isom_box_array_read(s, bs, fiin_on_child_box);",
          "",
          "[Added Lines]",
          "10392:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "10490: }",
          "10494: {",
          "10495:  FDPartitionEntryBox *ptr = (FDPartitionEntryBox *)s;",
          "10496:  switch(a->type) {",
          "10497:  case GF_ISOM_BOX_TYPE_FPAR:",
          "10500:   return GF_OK;",
          "10501:  case GF_ISOM_BOX_TYPE_FECR:",
          "10504:   return GF_OK;",
          "10505:  case GF_ISOM_BOX_TYPE_FIRE:",
          "10508:   return GF_OK;",
          "10509:  }",
          "10510:  return GF_OK;",
          "",
          "[Removed Lines]",
          "10493: GF_Err paen_on_child_box(GF_Box *s, GF_Box *a)",
          "10498:   if (ptr->blocks_and_symbols) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "10499:   ptr->blocks_and_symbols = (FilePartitionBox *)a;",
          "10502:   if (ptr->FEC_symbol_locations) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "10503:   ptr->FEC_symbol_locations = (FECReservoirBox *)a;",
          "10506:   if (ptr->File_symbol_locations) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "10507:   ptr->File_symbol_locations = (FileReservoirBox *)a;",
          "",
          "[Added Lines]",
          "10434: GF_Err paen_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "10439:   BOX_FIELD_ASSIGN(blocks_and_symbols, FilePartitionBox)",
          "10442:   BOX_FIELD_ASSIGN(FEC_symbol_locations, FECReservoirBox)",
          "10445:   BOX_FIELD_ASSIGN(File_symbol_locations, FileReservoirBox)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "10513: GF_Err paen_box_read(GF_Box *s, GF_BitStream *bs)",
          "10514: {",
          "10516: }",
          "10518: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "10515:  return gf_isom_box_array_read(s, bs, fiin_on_child_box);",
          "",
          "[Added Lines]",
          "10453:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "11124:  gf_free(ptr);",
          "11125: }",
          "11128: {",
          "11129:  GF_HintSample *ptr = (GF_HintSample *)s;",
          "11130:  switch(a->type) {",
          "11131:  case GF_ISOM_BOX_TYPE_FDPA:",
          "11134:  case GF_ISOM_BOX_TYPE_EXTR:",
          "11137:   break;",
          "11138:  }",
          "11139:  return GF_OK;",
          "11140: }",
          "11141: GF_Err fdsa_box_read(GF_Box *s, GF_BitStream *bs)",
          "11142: {",
          "11144: }",
          "",
          "[Removed Lines]",
          "11127: GF_Err fdsa_on_child_box(GF_Box *s, GF_Box *a)",
          "11132:   gf_list_add(ptr->packetTable, a);",
          "11133:   break;",
          "11135:   if (ptr->extra_data) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "11136:   ptr->extra_data = (GF_ExtraDataBox*)a;",
          "11143:  return gf_isom_box_array_read(s, bs, fdsa_on_child_box);",
          "",
          "[Added Lines]",
          "11065: GF_Err fdsa_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "11070:   BOX_FIELD_LIST_ASSIGN(packetTable)",
          "11071:   return GF_OK;",
          "11073:   BOX_FIELD_ASSIGN(extra_data, GF_ExtraDataBox)",
          "11080:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "11455:  gf_free(s);",
          "11456: }",
          "11459: {",
          "11460:  GF_J2KHeaderBox *ptr = (GF_J2KHeaderBox *)s;",
          "11461:  switch(a->type) {",
          "11462:  case GF_ISOM_BOX_TYPE_IHDR:",
          "11465:   return GF_OK;",
          "11466:  case GF_ISOM_BOX_TYPE_COLR:",
          "11469:   return GF_OK;",
          "11470:  }",
          "11471:  return GF_OK;",
          "11472: }",
          "11473: GF_Err jp2h_box_read(GF_Box *s,GF_BitStream *bs)",
          "11474: {",
          "11476: }",
          "11478: GF_Box *jp2h_box_new()",
          "",
          "[Removed Lines]",
          "11458: GF_Err jp2h_on_child_box(GF_Box *s, GF_Box *a)",
          "11463:   if (ptr->ihdr) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "11464:   ptr->ihdr = (GF_J2KImageHeaderBox*)a;",
          "11467:   if (ptr->colr) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "11468:   ptr->colr = (GF_ColourInformationBox*)a;",
          "11475:  return gf_isom_box_array_read_ex(s, bs, jp2h_on_child_box, s->type);",
          "",
          "[Added Lines]",
          "11395: GF_Err jp2h_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "11400:   BOX_FIELD_ASSIGN(ihdr, GF_J2KImageHeaderBox)",
          "11403:   BOX_FIELD_ASSIGN(colr, GF_ColourInformationBox)",
          "11410:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "11791:    break;",
          "11792:   }",
          "11793:  }",
          "11795: }",
          "11797: GF_Box *mvcg_box_new()",
          "",
          "[Removed Lines]",
          "11794:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "11729:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "12755:   ptr->crc = gf_bs_read_u32(bs);",
          "12756:   ptr->encoding_4cc = gf_bs_read_u32(bs);",
          "12757:  }",
          "12759: }",
          "",
          "[Removed Lines]",
          "12758:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "12693:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  gf_free(s);",
          "40: }",
          "43: {",
          "44:  GF_ProtectionSchemeInfoBox *ptr = (GF_ProtectionSchemeInfoBox *)s;",
          "45:  switch (a->type) {",
          "46:  case GF_ISOM_BOX_TYPE_FRMA:",
          "49:   break;",
          "50:  case GF_ISOM_BOX_TYPE_SCHM:",
          "53:   break;",
          "54:  case GF_ISOM_BOX_TYPE_SCHI:",
          "57:   break;",
          "58:  }",
          "59:  return GF_OK;",
          "",
          "[Removed Lines]",
          "42: GF_Err sinf_on_child_box(GF_Box *s, GF_Box *a)",
          "47:   if (ptr->original_format) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "48:   ptr->original_format = (GF_OriginalFormatBox*)a;",
          "51:   if (ptr->scheme_type) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "52:   ptr->scheme_type = (GF_SchemeTypeBox*)a;",
          "55:   if (ptr->info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "56:   ptr->info = (GF_SchemeInformationBox*)a;",
          "",
          "[Added Lines]",
          "42: GF_Err sinf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "47:   BOX_FIELD_ASSIGN(original_format, GF_OriginalFormatBox)",
          "50:   BOX_FIELD_ASSIGN(scheme_type, GF_SchemeTypeBox)",
          "53:   BOX_FIELD_ASSIGN(info, GF_SchemeInformationBox)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: GF_Err sinf_box_read(GF_Box *s, GF_BitStream *bs)",
          "63: {",
          "65: }",
          "67: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "64:  return gf_isom_box_array_read(s, bs, sinf_on_child_box);",
          "",
          "[Added Lines]",
          "61:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:  gf_free(s);",
          "197: }",
          "200: {",
          "201:  GF_SchemeInformationBox *ptr = (GF_SchemeInformationBox *)s;",
          "202:  switch (a->type) {",
          "203:  case GF_ISOM_BOX_TYPE_IKMS:",
          "206:   return GF_OK;",
          "207:  case GF_ISOM_BOX_TYPE_ISFM:",
          "210:   return GF_OK;",
          "211:  case GF_ISOM_BOX_TYPE_ISLT:",
          "214:   return GF_OK;",
          "215:  case GF_ISOM_BOX_TYPE_ODKM:",
          "218:   return GF_OK;",
          "219:  case GF_ISOM_BOX_TYPE_TENC:",
          "222:   return GF_OK;",
          "223:  case GF_ISOM_BOX_TYPE_ADKM:",
          "226:   return GF_OK;",
          "227:  case GF_ISOM_BOX_TYPE_UUID:",
          "228:   if (((GF_UUIDBox*)a)->internal_4cc==GF_ISOM_BOX_UUID_TENC) {",
          "231:    return GF_OK;",
          "232:   } else {",
          "233:    return GF_OK;",
          "",
          "[Removed Lines]",
          "199: GF_Err schi_on_child_box(GF_Box *s, GF_Box *a)",
          "204:   if (ptr->ikms) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "205:   ptr->ikms = (GF_ISMAKMSBox*)a;",
          "208:   if (ptr->isfm) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "209:   ptr->isfm = (GF_ISMASampleFormatBox*)a;",
          "212:   if (ptr->islt) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "213:   ptr->islt = (GF_ISMACrypSaltBox*)a;",
          "216:   if (ptr->odkm) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "217:   ptr->odkm = (GF_OMADRMKMSBox*)a;",
          "220:   if (ptr->tenc) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "221:   ptr->tenc = (GF_TrackEncryptionBox *)a;",
          "224:   if (ptr->adkm) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "225:   ptr->adkm = (GF_AdobeDRMKeyManagementSystemBox *)a;",
          "229:    if (ptr->piff_tenc) return GF_ISOM_INVALID_FILE;",
          "230:    ptr->piff_tenc = (GF_PIFFTrackEncryptionBox *)a;",
          "",
          "[Added Lines]",
          "196: GF_Err schi_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "201:   BOX_FIELD_ASSIGN(ikms, GF_ISMAKMSBox)",
          "204:   BOX_FIELD_ASSIGN(isfm, GF_ISMASampleFormatBox)",
          "207:   BOX_FIELD_ASSIGN(islt, GF_ISMACrypSaltBox)",
          "210:   BOX_FIELD_ASSIGN(odkm, GF_OMADRMKMSBox)",
          "213:   BOX_FIELD_ASSIGN(tenc, GF_TrackEncryptionBox)",
          "216:   BOX_FIELD_ASSIGN(adkm, GF_AdobeDRMKeyManagementSystemBox)",
          "220:    BOX_FIELD_ASSIGN(piff_tenc, GF_PIFFTrackEncryptionBox)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239: GF_Err schi_box_read(GF_Box *s, GF_BitStream *bs)",
          "240: {",
          "242: }",
          "244: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "241:  return gf_isom_box_array_read(s, bs, schi_on_child_box);",
          "",
          "[Added Lines]",
          "231:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "466:  ISOM_DECREASE_SIZE(ptr, (cid_len+ri_len+ptr->TextualHeadersLen) );",
          "469: }",
          "471: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "468:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "458:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "594: GF_Err mdri_box_read(GF_Box *s, GF_BitStream *bs)",
          "595: {",
          "597: }",
          "599: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "596:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "586:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "716:  gf_free(s);",
          "717: }",
          "720: {",
          "721:  GF_OMADRMKMSBox *ptr = (GF_OMADRMKMSBox *)s;",
          "722:  switch (a->type) {",
          "723:  case GF_ISOM_BOX_TYPE_OHDR:",
          "726:   return GF_OK;",
          "727:  case GF_ISOM_BOX_TYPE_ODAF:",
          "730:   return GF_OK;",
          "731:  }",
          "732:  return GF_OK;",
          "",
          "[Removed Lines]",
          "719: GF_Err odkm_Add(GF_Box *s, GF_Box *a)",
          "724:   if (ptr->hdr) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "725:   ptr->hdr = (GF_OMADRMCommonHeaderBox *)a;",
          "728:   if (ptr->fmt) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "729:   ptr->fmt = (GF_OMADRMAUFormatBox*)a;",
          "",
          "[Added Lines]",
          "709: GF_Err odkm_Add(GF_Box *s, GF_Box *a, Bool is_rem)",
          "714:   BOX_FIELD_ASSIGN(hdr, GF_OMADRMCommonHeaderBox)",
          "717:   BOX_FIELD_ASSIGN(fmt, GF_OMADRMAUFormatBox)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "735: GF_Err odkm_box_read(GF_Box *s, GF_BitStream *bs)",
          "736: {",
          "738: }",
          "740: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "737:  return gf_isom_box_array_read(s, bs, odkm_Add);",
          "",
          "[Added Lines]",
          "725:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1560:  gf_free(s);",
          "1561: }",
          "1564: {",
          "1565:  GF_AdobeDRMKeyManagementSystemBox *ptr = (GF_AdobeDRMKeyManagementSystemBox *)s;",
          "1566:  switch (a->type) {",
          "1567:  case GF_ISOM_BOX_TYPE_AHDR:",
          "1570:   break;",
          "1571:  case GF_ISOM_BOX_TYPE_ADAF:",
          "1574:   break;",
          "1575:  }",
          "1576:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1563: GF_Err adkm_on_child_box(GF_Box *s, GF_Box *a)",
          "1568:   if (ptr->header) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1569:   ptr->header = (GF_AdobeDRMHeaderBox *)a;",
          "1572:   if (ptr->au_format) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1573:   ptr->au_format = (GF_AdobeDRMAUFormatBox *)a;",
          "",
          "[Added Lines]",
          "1551: GF_Err adkm_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1556:   BOX_FIELD_ASSIGN(header, GF_AdobeDRMHeaderBox)",
          "1559:   BOX_FIELD_ASSIGN(au_format, GF_AdobeDRMAUFormatBox)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1579: GF_Err adkm_box_read(GF_Box *s, GF_BitStream *bs)",
          "1580: {",
          "1582: }",
          "1584: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1581:  return gf_isom_box_array_read(s, bs, adkm_on_child_box);",
          "",
          "[Added Lines]",
          "1567:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1611: }",
          "1615: {",
          "1616:  GF_AdobeDRMHeaderBox *ptr = (GF_AdobeDRMHeaderBox *)s;",
          "1617:  switch (a->type) {",
          "1618:  case GF_ISOM_BOX_TYPE_APRM:",
          "1621:   break;",
          "1622:  }",
          "1623:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1614: GF_Err ahdr_on_child_box(GF_Box *s, GF_Box *a)",
          "1619:   if (ptr->std_enc_params) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1620:   ptr->std_enc_params = (GF_AdobeStdEncryptionParamsBox *)a;",
          "",
          "[Added Lines]",
          "1600: GF_Err ahdr_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1605:   BOX_FIELD_ASSIGN(std_enc_params, GF_AdobeStdEncryptionParamsBox)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1626: GF_Err ahdr_box_read(GF_Box *s, GF_BitStream *bs)",
          "1627: {",
          "1629: }",
          "1631: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1628:  return gf_isom_box_array_read(s, bs, ahdr_on_child_box);",
          "",
          "[Added Lines]",
          "1613:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1656:  gf_free(s);",
          "1657: }",
          "1660: {",
          "1661:  GF_AdobeStdEncryptionParamsBox *ptr = (GF_AdobeStdEncryptionParamsBox *)s;",
          "1662:  switch (a->type) {",
          "1663:  case GF_ISOM_BOX_TYPE_AEIB:",
          "1666:   break;",
          "1667:  case GF_ISOM_BOX_TYPE_AKEY:",
          "1670:   break;",
          "1671:  }",
          "1672:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1659: GF_Err aprm_on_child_box(GF_Box *s, GF_Box *a)",
          "1664:   if (ptr->enc_info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1665:   ptr->enc_info = (GF_AdobeEncryptionInfoBox *)a;",
          "1668:   if (ptr->key_info) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1669:   ptr->key_info = (GF_AdobeKeyInfoBox *)a;",
          "",
          "[Added Lines]",
          "1644: GF_Err aprm_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1649:   BOX_FIELD_ASSIGN(enc_info, GF_AdobeEncryptionInfoBox)",
          "1652:   BOX_FIELD_ASSIGN(key_info, GF_AdobeKeyInfoBox)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1675: GF_Err aprm_box_read(GF_Box *s, GF_BitStream *bs)",
          "1676: {",
          "1678: }",
          "1680: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1677:  return gf_isom_box_array_read(s, bs, aprm_on_child_box);",
          "",
          "[Added Lines]",
          "1660:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1765:  gf_free(s);",
          "1766: }",
          "1769: {",
          "1770:  GF_AdobeKeyInfoBox *ptr = (GF_AdobeKeyInfoBox *)s;",
          "1771:  switch (a->type) {",
          "1772:  case GF_ISOM_BOX_TYPE_FLXS:",
          "1775:   break;",
          "1776:  }",
          "1777:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1768: GF_Err akey_on_child_box(GF_Box *s, GF_Box *a)",
          "1773:   if (ptr->params) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "1774:   ptr->params = (GF_AdobeFlashAccessParamsBox *)a;",
          "",
          "[Added Lines]",
          "1751: GF_Err akey_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "1756:   BOX_FIELD_ASSIGN(params, GF_AdobeFlashAccessParamsBox)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1780: GF_Err akey_box_read(GF_Box *s, GF_BitStream *bs)",
          "1781: {",
          "1783: }",
          "1785: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "1782:  return gf_isom_box_array_read(s, bs, akey_on_child_box);",
          "",
          "[Added Lines]",
          "1764:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c": [
          "File: src/isomedia/box_code_meta.c -> src/isomedia/box_code_meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "68: {",
          "69:  GF_MetaBox *ptr = (GF_MetaBox *)s;",
          "70:  switch (a->type) {",
          "71:  case GF_ISOM_BOX_TYPE_HDLR:",
          "74:   break;",
          "75:  case GF_ISOM_BOX_TYPE_PITM:",
          "78:   break;",
          "79:  case GF_ISOM_BOX_TYPE_DINF:",
          "82:   break;",
          "83:  case GF_ISOM_BOX_TYPE_ILOC:",
          "86:   break;",
          "87:  case GF_ISOM_BOX_TYPE_IPRO:",
          "90:   break;",
          "91:  case GF_ISOM_BOX_TYPE_IINF:",
          "94:   break;",
          "95:  case GF_ISOM_BOX_TYPE_IREF:",
          "98:   break;",
          "99:  case GF_ISOM_BOX_TYPE_IPRP:",
          "102:   break;",
          "103:  case GF_ISOM_BOX_TYPE_GRPL:",
          "106:   break;",
          "107:  }",
          "108:  return GF_OK;",
          "",
          "[Removed Lines]",
          "67: GF_Err meta_on_child_box(GF_Box *s, GF_Box *a)",
          "72:   if (ptr->handler) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "73:   ptr->handler = (GF_HandlerBox*)a;",
          "76:   if (ptr->primary_resource) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "77:   ptr->primary_resource = (GF_PrimaryItemBox*)a;",
          "80:   if (ptr->file_locations) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "81:   ptr->file_locations = (GF_DataInformationBox*)a;",
          "84:   if (ptr->item_locations) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "85:   ptr->item_locations = (GF_ItemLocationBox*)a;",
          "88:   if (ptr->protections) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "89:   ptr->protections = (GF_ItemProtectionBox*)a;",
          "92:   if (ptr->item_infos) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "93:   ptr->item_infos = (GF_ItemInfoBox*)a;",
          "96:   if (ptr->item_refs) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "97:   ptr->item_refs = (GF_ItemReferenceBox*)a;",
          "100:   if (ptr->item_props) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "101:   ptr->item_props = (GF_ItemPropertiesBox*)a;",
          "104:   if (ptr->groups_list) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "105:   ptr->groups_list = (GF_GroupListBox*)a;",
          "",
          "[Added Lines]",
          "67: GF_Err meta_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "72:   BOX_FIELD_ASSIGN(handler, GF_HandlerBox)",
          "75:   BOX_FIELD_ASSIGN(primary_resource, GF_PrimaryItemBox)",
          "78:   BOX_FIELD_ASSIGN(file_locations, GF_DataInformationBox)",
          "81:   BOX_FIELD_ASSIGN(item_locations, GF_ItemLocationBox)",
          "84:   BOX_FIELD_ASSIGN(protections, GF_ItemProtectionBox)",
          "87:   BOX_FIELD_ASSIGN(item_infos, GF_ItemInfoBox)",
          "90:   BOX_FIELD_ASSIGN(item_refs, GF_ItemReferenceBox);",
          "93:   BOX_FIELD_ASSIGN(item_props, GF_ItemPropertiesBox)",
          "96:   BOX_FIELD_ASSIGN(groups_list, GF_GroupListBox)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: {",
          "113:  u64 pos = gf_bs_get_position(bs);",
          "114:  u64 size = s->size;",
          "117:  if (e && (pos>4) ) {",
          "118:   gf_bs_seek(bs, pos-4);",
          "119:   meta_reset(s);",
          "120:   s->size = size+4;",
          "122:  }",
          "123:  return e;",
          "124: }",
          "",
          "[Removed Lines]",
          "115:  GF_Err e = gf_isom_box_array_read(s, bs, meta_on_child_box);",
          "121:   e = gf_isom_box_array_read(s, bs, meta_on_child_box);",
          "",
          "[Added Lines]",
          "106:  GF_Err e = gf_isom_box_array_read(s, bs);",
          "112:   e = gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:  gf_free(ptr);",
          "486: }",
          "489: {",
          "490:  GF_ItemProtectionBox *ptr = (GF_ItemProtectionBox *)s;",
          "494:  return GF_OK;",
          "495: }",
          "496: GF_Err ipro_box_read(GF_Box *s, GF_BitStream *bs)",
          "497: {",
          "498:  ISOM_DECREASE_SIZE(s, 2)",
          "499:  gf_bs_read_u16(bs);",
          "501: }",
          "503: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "488: GF_Err ipro_on_child_box(GF_Box *s, GF_Box *a)",
          "491:  if (a->type == GF_ISOM_BOX_TYPE_SINF)",
          "492:   return gf_list_add(ptr->protection_information, a);",
          "500:  return gf_isom_box_array_read(s, bs, ipro_on_child_box);",
          "",
          "[Added Lines]",
          "479: GF_Err ipro_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "482:  if (a->type == GF_ISOM_BOX_TYPE_SINF) {",
          "483:   BOX_FIELD_LIST_ASSIGN(protection_information)",
          "484:   return GF_OK;",
          "485:  }",
          "492:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "689:  gf_free(ptr);",
          "690: }",
          "693: {",
          "694:  GF_ItemInfoBox *ptr = (GF_ItemInfoBox *)s;",
          "696:  if (a->type == GF_ISOM_BOX_TYPE_INFE) {",
          "698:  } else {",
          "699:   return GF_OK;",
          "700:  }",
          "",
          "[Removed Lines]",
          "692: GF_Err iinf_on_child_box(GF_Box *s, GF_Box *a)",
          "697:   return gf_list_add(ptr->item_infos, a);",
          "",
          "[Added Lines]",
          "684: GF_Err iinf_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "689:   BOX_FIELD_LIST_ASSIGN(item_infos)",
          "690:   return GF_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "711:   ISOM_DECREASE_SIZE(s, 4)",
          "712:   gf_bs_read_u32(bs);",
          "713:  }",
          "715: }",
          "717: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "714:  return gf_isom_box_array_read(s, bs, iinf_on_child_box);",
          "",
          "[Added Lines]",
          "707:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "743: }",
          "747: {",
          "748:  GF_ItemReferenceBox *ptr = (GF_ItemReferenceBox *)s;",
          "750: }",
          "752: void iref_box_del(GF_Box *s)",
          "",
          "[Removed Lines]",
          "746: GF_Err iref_on_child_box(GF_Box *s, GF_Box *a)",
          "749:  return gf_list_add(ptr->references, a);",
          "",
          "[Added Lines]",
          "739: GF_Err iref_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "742:  BOX_FIELD_LIST_ASSIGN(references)",
          "743:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "761: GF_Err iref_box_read(GF_Box *s, GF_BitStream *bs)",
          "762: {",
          "764: }",
          "766: GF_Box *iref_box_new()",
          "",
          "[Removed Lines]",
          "763:  return gf_isom_box_array_read_ex(s, bs, iref_on_child_box, s->type);",
          "",
          "[Added Lines]",
          "757:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  e = gf_isom_full_box_read(newBox, bs);",
          "260:  if (!e) e = gf_isom_box_read(newBox, bs);",
          "261:  newBox->size = size;",
          "262:  end = gf_bs_get_position(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:  if (e) {",
          "262:   if (gf_opts_get_bool(\"core\", \"no-check\"))",
          "263:    e = GF_OK;",
          "264:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372: }",
          "376: {",
          "378: }",
          "380: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "375: GF_Err gf_isom_box_array_read(GF_Box *parent, GF_BitStream *bs, GF_Err (*check_child_box)(GF_Box *par, GF_Box *b))",
          "377:  return gf_isom_box_array_read_ex(parent, bs, check_child_box, parent->type);",
          "",
          "[Added Lines]",
          "379: GF_Err gf_isom_box_array_read(GF_Box *parent, GF_BitStream *bs)",
          "381:  return gf_isom_box_array_read_ex(parent, bs, parent->type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:   GF_Err a_name##_box_size(GF_Box *s);\\",
          "518:   GF_Err a_name##_box_dump(GF_Box *a, FILE * trace);",
          "520: ISOM_BOX_IMPL_DECL(reftype)",
          "521: ISOM_BOX_IMPL_DECL(ireftype)",
          "522: ISOM_BOX_IMPL_DECL(free)",
          "523: ISOM_BOX_IMPL_DECL(wide)",
          "524: ISOM_BOX_IMPL_DECL(mdat)",
          "526: ISOM_BOX_IMPL_DECL(mvhd)",
          "527: ISOM_BOX_IMPL_DECL(mdhd)",
          "528: ISOM_BOX_IMPL_DECL(vmhd)",
          "529: ISOM_BOX_IMPL_DECL(smhd)",
          "530: ISOM_BOX_IMPL_DECL(hmhd)",
          "531: ISOM_BOX_IMPL_DECL(nmhd)",
          "534: ISOM_BOX_IMPL_DECL(url)",
          "535: ISOM_BOX_IMPL_DECL(urn)",
          "536: ISOM_BOX_IMPL_DECL(cprt)",
          "",
          "[Removed Lines]",
          "525: ISOM_BOX_IMPL_DECL(moov)",
          "532: ISOM_BOX_IMPL_DECL(stbl)",
          "533: ISOM_BOX_IMPL_DECL(dinf)",
          "",
          "[Added Lines]",
          "524: #define ISOM_BOX_IMPL_DECL_CHILD(a_name) \\",
          "525:   GF_Box * a_name##_box_new(); \\",
          "526:   void a_name##_box_del(GF_Box *); \\",
          "527:   GF_Err a_name##_box_read(GF_Box *s, GF_BitStream *bs); \\",
          "528:   GF_Err a_name##_box_write(GF_Box *s, GF_BitStream *bs); \\",
          "529:   GF_Err a_name##_box_size(GF_Box *s);\\",
          "530:   GF_Err a_name##_box_dump(GF_Box *a, FILE * trace);\\",
          "531:   GF_Err a_name##_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem);\\",
          "539: ISOM_BOX_IMPL_DECL_CHILD(moov)",
          "546: ISOM_BOX_IMPL_DECL_CHILD(stbl)",
          "547: ISOM_BOX_IMPL_DECL_CHILD(dinf)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "538: ISOM_BOX_IMPL_DECL(chpl)",
          "539: ISOM_BOX_IMPL_DECL(hdlr)",
          "540: ISOM_BOX_IMPL_DECL(iods)",
          "544: ISOM_BOX_IMPL_DECL(gen_sample_entry)",
          "547: ISOM_BOX_IMPL_DECL(dref)",
          "549: ISOM_BOX_IMPL_DECL(stts)",
          "550: ISOM_BOX_IMPL_DECL(ctts)",
          "551: ISOM_BOX_IMPL_DECL(stsh)",
          "",
          "[Removed Lines]",
          "541: ISOM_BOX_IMPL_DECL(trak)",
          "542: ISOM_BOX_IMPL_DECL(mp4s)",
          "543: ISOM_BOX_IMPL_DECL(audio_sample_entry)",
          "545: ISOM_BOX_IMPL_DECL(edts)",
          "546: ISOM_BOX_IMPL_DECL(udta)",
          "548: ISOM_BOX_IMPL_DECL(stsd)",
          "",
          "[Added Lines]",
          "555: ISOM_BOX_IMPL_DECL_CHILD(trak)",
          "556: ISOM_BOX_IMPL_DECL_CHILD(mp4s)",
          "557: ISOM_BOX_IMPL_DECL_CHILD(audio_sample_entry)",
          "559: ISOM_BOX_IMPL_DECL_CHILD(edts)",
          "560: ISOM_BOX_IMPL_DECL_CHILD(udta)",
          "562: ISOM_BOX_IMPL_DECL_CHILD(stsd)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "558: ISOM_BOX_IMPL_DECL(sdtp)",
          "559: ISOM_BOX_IMPL_DECL(co64)",
          "560: ISOM_BOX_IMPL_DECL(esds)",
          "562: ISOM_BOX_IMPL_DECL(tkhd)",
          "563: ISOM_BOX_IMPL_DECL(tref)",
          "566: ISOM_BOX_IMPL_DECL(tfra)",
          "567: ISOM_BOX_IMPL_DECL(mfro)",
          "568: ISOM_BOX_IMPL_DECL(uuid)",
          "",
          "[Removed Lines]",
          "561: ISOM_BOX_IMPL_DECL(minf)",
          "564: ISOM_BOX_IMPL_DECL(mdia)",
          "565: ISOM_BOX_IMPL_DECL(mfra)",
          "",
          "[Added Lines]",
          "575: ISOM_BOX_IMPL_DECL_CHILD(minf)",
          "578: ISOM_BOX_IMPL_DECL_CHILD(mdia)",
          "579: ISOM_BOX_IMPL_DECL_CHILD(mfra)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "579: #ifndef GPAC_DISABLE_ISOM_HINTING",
          "582: ISOM_BOX_IMPL_DECL(trpy)",
          "583: ISOM_BOX_IMPL_DECL(totl)",
          "584: ISOM_BOX_IMPL_DECL(nump)",
          "",
          "[Removed Lines]",
          "581: ISOM_BOX_IMPL_DECL(hinf)",
          "",
          "[Added Lines]",
          "595: ISOM_BOX_IMPL_DECL_CHILD(hinf)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "600: ISOM_BOX_IMPL_DECL(tims)",
          "601: ISOM_BOX_IMPL_DECL(tsro)",
          "602: ISOM_BOX_IMPL_DECL(ghnt)",
          "604: ISOM_BOX_IMPL_DECL(sdp)",
          "605: ISOM_BOX_IMPL_DECL(rtpo)",
          "606: ISOM_BOX_IMPL_DECL(tssy)",
          "607: ISOM_BOX_IMPL_DECL(rssr)",
          "609: ISOM_BOX_IMPL_DECL(rtp_hnti)",
          "611: #endif",
          "",
          "[Removed Lines]",
          "603: ISOM_BOX_IMPL_DECL(hnti)",
          "608: ISOM_BOX_IMPL_DECL(srpp)",
          "",
          "[Added Lines]",
          "617: ISOM_BOX_IMPL_DECL_CHILD(hnti)",
          "622: ISOM_BOX_IMPL_DECL_CHILD(srpp)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "618: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "620: ISOM_BOX_IMPL_DECL(trex)",
          "622: ISOM_BOX_IMPL_DECL(mfhd)",
          "624: ISOM_BOX_IMPL_DECL(tfhd)",
          "625: ISOM_BOX_IMPL_DECL(trun)",
          "626: ISOM_BOX_IMPL_DECL(styp)",
          "",
          "[Removed Lines]",
          "619: ISOM_BOX_IMPL_DECL(mvex)",
          "621: ISOM_BOX_IMPL_DECL(moof)",
          "623: ISOM_BOX_IMPL_DECL(traf)",
          "",
          "[Added Lines]",
          "633: ISOM_BOX_IMPL_DECL_CHILD(mvex)",
          "635: ISOM_BOX_IMPL_DECL_CHILD(moof)",
          "637: ISOM_BOX_IMPL_DECL_CHILD(traf)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "635: ISOM_BOX_IMPL_DECL(avcc)",
          "637: ISOM_BOX_IMPL_DECL(m4ds)",
          "638: ISOM_BOX_IMPL_DECL(btrt)",
          "639: ISOM_BOX_IMPL_DECL(mehd)",
          "642: ISOM_BOX_IMPL_DECL(ftab)",
          "644: ISOM_BOX_IMPL_DECL(text)",
          "645: ISOM_BOX_IMPL_DECL(styl)",
          "646: ISOM_BOX_IMPL_DECL(hlit)",
          "",
          "[Removed Lines]",
          "636: ISOM_BOX_IMPL_DECL(video_sample_entry)",
          "643: ISOM_BOX_IMPL_DECL(tx3g)",
          "",
          "[Added Lines]",
          "650: ISOM_BOX_IMPL_DECL_CHILD(video_sample_entry)",
          "657: ISOM_BOX_IMPL_DECL_CHILD(tx3g)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "659: ISOM_BOX_IMPL_DECL(boxstring);",
          "661: ISOM_BOX_IMPL_DECL(vtte)",
          "664: #endif //GPAC_DISABLE_VTT",
          "668: ISOM_BOX_IMPL_DECL(xml)",
          "669: ISOM_BOX_IMPL_DECL(bxml)",
          "670: ISOM_BOX_IMPL_DECL(iloc)",
          "671: ISOM_BOX_IMPL_DECL(pitm)",
          "673: ISOM_BOX_IMPL_DECL(infe)",
          "677: ISOM_BOX_IMPL_DECL(frma)",
          "678: ISOM_BOX_IMPL_DECL(schm)",
          "680: ISOM_BOX_IMPL_DECL(enca)",
          "681: ISOM_BOX_IMPL_DECL(encs)",
          "682: ISOM_BOX_IMPL_DECL(encv)",
          "",
          "[Removed Lines]",
          "660: ISOM_BOX_IMPL_DECL(vtcu)",
          "662: ISOM_BOX_IMPL_DECL(wvtt)",
          "667: ISOM_BOX_IMPL_DECL(meta)",
          "672: ISOM_BOX_IMPL_DECL(ipro)",
          "674: ISOM_BOX_IMPL_DECL(iinf)",
          "675: ISOM_BOX_IMPL_DECL(iref)",
          "676: ISOM_BOX_IMPL_DECL(sinf)",
          "679: ISOM_BOX_IMPL_DECL(schi)",
          "",
          "[Added Lines]",
          "674: ISOM_BOX_IMPL_DECL_CHILD(vtcu)",
          "676: ISOM_BOX_IMPL_DECL_CHILD(wvtt)",
          "681: ISOM_BOX_IMPL_DECL_CHILD(meta)",
          "686: ISOM_BOX_IMPL_DECL_CHILD(ipro)",
          "688: ISOM_BOX_IMPL_DECL_CHILD(iinf)",
          "689: ISOM_BOX_IMPL_DECL_CHILD(iref)",
          "690: ISOM_BOX_IMPL_DECL_CHILD(sinf)",
          "693: ISOM_BOX_IMPL_DECL_CHILD(schi)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "716: ISOM_BOX_IMPL_DECL(pasp)",
          "717: ISOM_BOX_IMPL_DECL(clap)",
          "719: ISOM_BOX_IMPL_DECL(txtc)",
          "720: ISOM_BOX_IMPL_DECL(tsel)",
          "721: ISOM_BOX_IMPL_DECL(dimC)",
          "723: ISOM_BOX_IMPL_DECL(diST)",
          "724: ISOM_BOX_IMPL_DECL(ac3)",
          "725: ISOM_BOX_IMPL_DECL(ec3)",
          "",
          "[Removed Lines]",
          "718: ISOM_BOX_IMPL_DECL(metx)",
          "722: ISOM_BOX_IMPL_DECL(dims)",
          "",
          "[Added Lines]",
          "732: ISOM_BOX_IMPL_DECL_CHILD(metx)",
          "736: ISOM_BOX_IMPL_DECL_CHILD(dims)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "727: ISOM_BOX_IMPL_DECL(dec3)",
          "728: ISOM_BOX_IMPL_DECL(dmlp)",
          "729: ISOM_BOX_IMPL_DECL(lsrc)",
          "731: ISOM_BOX_IMPL_DECL(mvcg)",
          "732: ISOM_BOX_IMPL_DECL(vwid)",
          "",
          "[Removed Lines]",
          "730: ISOM_BOX_IMPL_DECL(lsr1)",
          "",
          "[Added Lines]",
          "744: ISOM_BOX_IMPL_DECL_CHILD(lsr1)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "781: ISOM_BOX_IMPL_DECL(trep)",
          "786: ISOM_BOX_IMPL_DECL(fpar)",
          "787: ISOM_BOX_IMPL_DECL(fecr)",
          "788: ISOM_BOX_IMPL_DECL(segr)",
          "789: ISOM_BOX_IMPL_DECL(gitn)",
          "791: ISOM_BOX_IMPL_DECL(fdpa)",
          "792: ISOM_BOX_IMPL_DECL(extr)",
          "",
          "[Removed Lines]",
          "784: ISOM_BOX_IMPL_DECL(fiin)",
          "785: ISOM_BOX_IMPL_DECL(paen)",
          "790: ISOM_BOX_IMPL_DECL(fdsa)",
          "",
          "[Added Lines]",
          "798: ISOM_BOX_IMPL_DECL_CHILD(fiin)",
          "799: ISOM_BOX_IMPL_DECL_CHILD(paen)",
          "804: ISOM_BOX_IMPL_DECL_CHILD(fdsa)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "796:  Adobe's protection boxes",
          "801: ISOM_BOX_IMPL_DECL(aeib)",
          "803: ISOM_BOX_IMPL_DECL(flxs)",
          "804: ISOM_BOX_IMPL_DECL(adaf)",
          "",
          "[Removed Lines]",
          "798: ISOM_BOX_IMPL_DECL(adkm)",
          "799: ISOM_BOX_IMPL_DECL(ahdr)",
          "800: ISOM_BOX_IMPL_DECL(aprm)",
          "802: ISOM_BOX_IMPL_DECL(akey)",
          "",
          "[Added Lines]",
          "812: ISOM_BOX_IMPL_DECL_CHILD(adkm)",
          "813: ISOM_BOX_IMPL_DECL_CHILD(ahdr)",
          "814: ISOM_BOX_IMPL_DECL_CHILD(aprm)",
          "816: ISOM_BOX_IMPL_DECL_CHILD(akey)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "811: ISOM_BOX_IMPL_DECL(irot)",
          "812: ISOM_BOX_IMPL_DECL(imir)",
          "813: ISOM_BOX_IMPL_DECL(ipco)",
          "815: ISOM_BOX_IMPL_DECL(ipma)",
          "817: ISOM_BOX_IMPL_DECL(trgt)",
          "818: ISOM_BOX_IMPL_DECL(ienc)",
          "819: ISOM_BOX_IMPL_DECL(iaux)",
          "",
          "[Removed Lines]",
          "814: ISOM_BOX_IMPL_DECL(iprp)",
          "816: ISOM_BOX_IMPL_DECL(trgr)",
          "",
          "[Added Lines]",
          "828: ISOM_BOX_IMPL_DECL_CHILD(iprp)",
          "830: ISOM_BOX_IMPL_DECL_CHILD(trgr)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "825: ISOM_BOX_IMPL_DECL(grpl)",
          "828: ISOM_BOX_IMPL_DECL(stri)",
          "829: ISOM_BOX_IMPL_DECL(stsg)",
          "830: ISOM_BOX_IMPL_DECL(elng)",
          "",
          "[Removed Lines]",
          "827: ISOM_BOX_IMPL_DECL(strk)",
          "",
          "[Added Lines]",
          "841: ISOM_BOX_IMPL_DECL_CHILD(strk)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "842: ISOM_BOX_IMPL_DECL(grptype)",
          "845: ISOM_BOX_IMPL_DECL(ihdr)",
          "846: ISOM_BOX_IMPL_DECL(load)",
          "",
          "[Removed Lines]",
          "844: ISOM_BOX_IMPL_DECL(jp2h)",
          "",
          "[Added Lines]",
          "858: ISOM_BOX_IMPL_DECL_CHILD(jp2h)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "865: #define BOX_DEFINE(__type, b_rad, __par) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 0, 0, __par, \"p12\", GF_FALSE}",
          "867: #define BOX_DEFINE_S(__type, b_rad, __par, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 0, 0, __par, __spec, GF_FALSE }",
          "869: #define FBOX_DEFINE(__type, b_rad, __par, __max_v) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, 0, __par, \"p12\", GF_FALSE }",
          "871: #define FBOX_DEFINE_FLAGS(__type, b_rad, __par, __max_v, flags) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, flags, __par, \"p12\", GF_FALSE }",
          "873: #define FBOX_DEFINE_FLAGS_S(__type, b_rad, __par, __max_v, flags, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, flags, __par, __spec, GF_FALSE }",
          "875: #define FBOX_DEFINE_S(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, 0, __par, __spec, GF_FALSE }",
          "877: #define TREF_DEFINE(__type, b_rad, __par, __4cc, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, __4cc, 0, 0, __par, __spec, GF_FALSE }",
          "879: #define TRGT_DEFINE(__type, b_rad, __par, __4cc, max_version, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, __4cc, 1+max_version, 0, __par, __spec, GF_FALSE }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881: #define BOX_DEFINE_CHILD(__type, b_rad, __par) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 0, 0, __par, \"p12\", GF_FALSE, b_rad##_on_child_box}",
          "885: #define BOX_DEFINE_S_CHILD(__type, b_rad, __par, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 0, 0, __par, __spec, GF_FALSE, b_rad##_on_child_box}",
          "889: #define FBOX_DEFINE_CHILD(__type, b_rad, __par, __max_v) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, 0, __par, \"p12\", GF_FALSE, b_rad##_on_child_box}",
          "897: #define FBOX_DEFINE_S_CHILD(__type, b_rad, __par, __max_v, __spec) { __type, b_rad##_box_new, b_rad##_box_del, b_rad##_box_read, b_rad##_box_write, b_rad##_box_size, b_rad##_box_dump, 0, 1+__max_v, 0, __par, __spec, GF_FALSE, b_rad##_on_child_box}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "897:  const char *parents_4cc;",
          "898:  const char *spec;",
          "899:  Bool disabled;",
          "900: } box_registry [] =",
          "901: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:  GF_Err (*add_rem_fn)(GF_Box *par, GF_Box *b, Bool is_remove);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "988:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SKIP, free, \"*\"),",
          "989:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MDAT, mdat, \"file\"),",
          "990:  BOX_DEFINE( GF_ISOM_BOX_TYPE_IDAT, mdat, \"meta\"),",
          "992:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MVHD, mvhd, \"moov\", 1),",
          "993:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MDHD, mdhd, \"mdia\", 1),",
          "994:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_VMHD, vmhd, \"minf\", 0),",
          "",
          "[Removed Lines]",
          "991:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MOOV, moov, \"file\"),",
          "",
          "[Added Lines]",
          "1014:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MOOV, moov, \"file\"),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "996:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_HMHD, hmhd, \"minf\", 0),",
          "997:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_NMHD, nmhd, \"minf\", 0),",
          "998:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STHD, nmhd, \"minf\", 0),",
          "1001:  FBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URL, url, \"dref\", 0, 1),",
          "1002:  FBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_URN, urn, \"dref\", 0, 1),",
          "1003:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CPRT, cprt, \"udta\", 0),",
          "1004:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_KIND, kind, \"udta\", 0),",
          "1005:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_HDLR, hdlr, \"mdia meta minf\", 0), //minf container is OK in QT ...",
          "1009:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_DREF, dref, \"dinf\", 0),",
          "1011:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STTS, stts, \"stbl\", 0),",
          "1012:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CTTS, ctts, \"stbl\", 1),",
          "1013:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CSLG, cslg, \"stbl trep\", 1),",
          "",
          "[Removed Lines]",
          "999:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STBL, stbl, \"minf\"),",
          "1000:  BOX_DEFINE( GF_ISOM_BOX_TYPE_DINF, dinf, \"minf meta\"),",
          "1006:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TRAK, trak, \"moov\"),",
          "1007:  BOX_DEFINE( GF_ISOM_BOX_TYPE_EDTS, edts, \"trak\"),",
          "1008:  BOX_DEFINE( GF_ISOM_BOX_TYPE_UDTA, udta, \"moov trak moof traf\"),",
          "1010:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STSD, stsd, \"stbl\", 0),",
          "",
          "[Added Lines]",
          "1022:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_STBL, stbl, \"minf\"),",
          "1023:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_DINF, dinf, \"minf meta\"),",
          "1029:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_TRAK, trak, \"moov\"),",
          "1030:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_EDTS, edts, \"trak\"),",
          "1031:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_UDTA, udta, \"moov trak moof traf\"),",
          "1033:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_STSD, stsd, \"stbl\", 0),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1021:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STDP, stdp, \"stbl\", 0),",
          "1022:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_SDTP, sdtp, \"stbl traf\", 0),",
          "1023:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CO64, co64, \"stbl\", 0),",
          "1025:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1, 0x000001 | 0x000002 | 0x000004 | 0x000008),",
          "1026:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TREF, tref, \"trak\"),",
          "1029:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRO, mfro, \"mfra\", 0),",
          "1030:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TFRA, tfra, \"mfra\", 1),",
          "1031:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_ELNG, elng, \"mdia\", 0),",
          "",
          "[Removed Lines]",
          "1024:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MINF, minf, \"mdia\"),",
          "1027:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),",
          "1028:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),",
          "",
          "[Added Lines]",
          "1047:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MINF, minf, \"mdia\"),",
          "1050:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),",
          "1051:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1038:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 0),",
          "1039:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SAIO, saio, \"stbl traf\", 1, 1),",
          "1040:  FBOX_DEFINE_FLAGS( GF_ISOM_BOX_TYPE_SUBS, subs, \"stbl traf\", 0, 7), //warning flags are not used as a bit mask but as an enum!!",
          "1042:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FTYP, ftyp, \"file\"),",
          "1043:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_PADB, padb, \"stbl\", 0),",
          "1044:  BOX_DEFINE( GF_ISOM_BOX_TYPE_BTRT, btrt, \"sample_entry\"),",
          "1045:  BOX_DEFINE( GF_ISOM_BOX_TYPE_PASP, pasp, \"video_sample_entry ipco\"),",
          "1046:  BOX_DEFINE( GF_ISOM_BOX_TYPE_CLAP, clap, \"video_sample_entry ipco\"),",
          "1048:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_XML, xml, \"meta\", 0),",
          "1049:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_BXML, bxml, \"meta\", 0),",
          "1050:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_ILOC, iloc, \"meta\", 2),",
          "1051:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_PITM, pitm, \"meta\", 1),",
          "1053:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_INFE, infe, \"iinf\", 3),",
          "1057:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RINF, sinf, \"sample_entry\"),",
          "1058:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FRMA, frma, \"sinf rinf\"),",
          "1059:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_SCHM, schm, \"sinf rinf\", 0, 1),",
          "1064:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TSEL, tsel, \"udta\", 0),",
          "1066:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STRI, stri, \"strk\", 0),",
          "1067:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STRD, def_parent, \"strk\"),",
          "1068:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STSG, stsg, \"strd\", 0),",
          "1078:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_STVI, stvi, \"schi\", 0),",
          "1081:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_CHNL, chnl, \"audio_sample_entry\", 0),",
          "1086:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_FPAR, fpar, \"paen\", 1),",
          "1087:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_FECR, fecr, \"paen\", 1),",
          "",
          "[Removed Lines]",
          "1041:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TRGR, trgr, \"trak\"),",
          "1047:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0), //apple uses meta in moov->udta",
          "1052:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_IPRO, ipro, \"meta\", 0),",
          "1054:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_IINF, iinf, \"meta\", 1),",
          "1055:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_IREF, iref, \"meta\", 1),",
          "1056:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SINF, sinf, \"ipro sample_entry\"),",
          "1060:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SCHI, schi, \"sinf rinf\"),",
          "1061:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCA, audio_sample_entry, \"stsd\"),",
          "1062:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCV, video_sample_entry, \"stsd\"),",
          "1063:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RESV, video_sample_entry, \"stsd\"),",
          "1065:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STRK, strk, \"udta\"),",
          "1070:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCS, mp4s, \"stsd\"),",
          "1072:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCT, mp4s, \"stsd\"),",
          "1073:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCM, mp4s, \"stsd\"),",
          "1074:  BOX_DEFINE( GF_ISOM_BOX_TYPE_ENCF, mp4s, \"stsd\"),",
          "1076:  BOX_DEFINE( GF_ISOM_BOX_TYPE_METX, metx, \"stsd\"),",
          "1077:  BOX_DEFINE( GF_ISOM_BOX_TYPE_METT, metx, \"stsd\"),",
          "1084:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_FIIN, fiin, \"meta\", 0),",
          "1085:  BOX_DEFINE( GF_ISOM_BOX_TYPE_PAEN, paen, \"fiin\"),",
          "",
          "[Added Lines]",
          "1064:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_TRGR, trgr, \"trak\"),",
          "1070:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_META, meta, \"file moov trak moof traf udta\", 0), //apple uses meta in moov->udta",
          "1075:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_IPRO, ipro, \"meta\", 0),",
          "1077:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_IINF, iinf, \"meta\", 1),",
          "1078:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_IREF, iref, \"meta\", 1),",
          "1079:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_SINF, sinf, \"ipro sample_entry\"),",
          "1083:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_SCHI, schi, \"sinf rinf\"),",
          "1084:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCA, audio_sample_entry, \"stsd\"),",
          "1085:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCV, video_sample_entry, \"stsd\"),",
          "1086:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_RESV, video_sample_entry, \"stsd\"),",
          "1088:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_STRK, strk, \"udta\"),",
          "1093:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCS, mp4s, \"stsd\"),",
          "1095:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCT, mp4s, \"stsd\"),",
          "1096:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCM, mp4s, \"stsd\"),",
          "1097:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_ENCF, mp4s, \"stsd\"),",
          "1099:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_METX, metx, \"stsd\"),",
          "1100:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_METT, metx, \"stsd\"),",
          "1107:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_FIIN, fiin, \"meta\", 0),",
          "1108:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_PAEN, paen, \"fiin\"),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1091:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_GITN, gitn, \"fiin\", 0),",
          "1093: #ifndef GPAC_DISABLE_ISOM_HINTING",
          "1095:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FDPA, fdpa, \"fdsa\"),",
          "1096:  BOX_DEFINE( GF_ISOM_BOX_TYPE_EXTR, extr, \"fdsa\"),",
          "1097: #endif",
          "",
          "[Removed Lines]",
          "1094:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FDSA, fdsa, \"fdp_sample\"),",
          "",
          "[Added Lines]",
          "1117:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_FDSA, fdsa, \"fdp_sample\"),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1113:  BOX_DEFINE( GF_ISOM_BOX_TYPE_FDP_STSD, ghnt, \"stsd\"),",
          "1114:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RRTP_STSD, ghnt, \"stsd\"),",
          "1115:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RTCP_STSD, ghnt, \"stsd\"),",
          "1117:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SDP, sdp, \"hnti\"),",
          "1119:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TRPY, trpy, \"hinf\"),",
          "1120:  BOX_DEFINE( GF_ISOM_BOX_TYPE_NUMP, nump, \"hinf\"),",
          "1121:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TPYL, tpyl, \"hinf\"),",
          "",
          "[Removed Lines]",
          "1116:  BOX_DEFINE( GF_ISOM_BOX_TYPE_HNTI, hnti, \"udta\"),",
          "1118:  BOX_DEFINE( GF_ISOM_BOX_TYPE_HINF, hinf, \"udta\"),",
          "",
          "[Added Lines]",
          "1139:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_HNTI, hnti, \"udta\"),",
          "1141:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_HINF, hinf, \"udta\"),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1142:  BOX_DEFINE( GF_ISOM_BOX_TYPE_NAME, name, \"udta\"),",
          "1143:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TSSY, tssy, \"rrtp\"),",
          "1144:  BOX_DEFINE( GF_ISOM_BOX_TYPE_RSSR, rssr, \"rrtp\"),",
          "1147: #endif",
          "1149: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "1151:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MEHD, mehd, \"mvex\", 1),",
          "1152:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TREX, trex, \"mvex\", 0),",
          "1153:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_LEVA, leva, \"mvex\", 0),",
          "1154:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TREP, trep, \"mvex\", 0),",
          "1156:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MFHD, mfhd, \"moof\", 0),",
          "1158:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TFHD, tfhd, \"traf\", 0, 0x000001|0x000002|0x000008|0x000010|0x000020|0x010000|0x020000),",
          "1159:  FBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TRUN, trun, \"traf\", 0, 0x000001|0x000004|0x000100|0x000200|0x000400|0x000800),",
          "1160: #ifdef GF_ENABLE_CTRN",
          "",
          "[Removed Lines]",
          "1145:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\", 0),",
          "1150:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MVEX, mvex, \"moov\"),",
          "1155:  BOX_DEFINE( GF_ISOM_BOX_TYPE_MOOF, moof, \"file\"),",
          "1157:  BOX_DEFINE( GF_ISOM_BOX_TYPE_TRAF, traf, \"moof\"),",
          "",
          "[Added Lines]",
          "1168:  FBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_SRPP, srpp, \"srtp\", 0),",
          "1173:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MVEX, mvex, \"moov\"),",
          "1178:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MOOF, moof, \"file\"),",
          "1180:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_TRAF, traf, \"moof\"),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1174:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_IODS, iods, \"moov\", 0, \"p14\"),",
          "1178:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_M4DS, m4ds, \"sample_entry\", \"p14\"),",
          "1179:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ESDS, esds, \"mp4a mp4s mp4v encv enca encs resv wave\", 0, \"p14\"),",
          "",
          "[Removed Lines]",
          "1175:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4S, mp4s, \"stsd\", \"p14\"),",
          "1176:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4V, video_sample_entry, \"stsd\", \"p14\"),",
          "1177:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP4A, audio_sample_entry, \"stsd\", \"p14\"),",
          "",
          "[Added Lines]",
          "1198:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MP4S, mp4s, \"stsd\", \"p14\"),",
          "1199:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MP4V, video_sample_entry, \"stsd\", \"p14\"),",
          "1200:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MP4A, audio_sample_entry, \"stsd\", \"p14\"),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1185:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVCC, hvcc, \"hvc1 hev1 hvc2 hev2 encv resv ipco dvhe\", \"p15\"),",
          "1186:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHVC, hvcc, \"hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv ipco\", \"p15\"),",
          "1187:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VVCC, vvcc, \"vvc1 vvi1 encv resv ipco dvhe\", \"p15\"),",
          "1203:  FBOX_DEFINE_S(GF_ISOM_BOX_TYPE_MVCI, def_parent_full, \"minf\", 0, \"p15\"),",
          "1204:  FBOX_DEFINE_S(GF_ISOM_BOX_TYPE_MVCG, mvcg, \"mvci\", 0, \"p15\"),",
          "1205:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_VWID, vwid, \"video_sample_entry\", 0, \"p15\"),",
          "1212:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHAC, mhac, \"mha1 mha2 mhm1 mhm2 wave\", \"mpegh3Daudio\"),",
          "1213:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHAP, mhap, \"mha1 mha2 mhm1 mhm2 wave\", \"mpegh3Daudio\"),",
          "1217:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_PCMC, pcmC, \"ipcm fpcm\", 0, \"23003_5\"),",
          "1221:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV1C, av1c, \"av01 encv resv ipco\", \"av1\"),",
          "1224:  FBOX_DEFINE_FLAGS_S( GF_ISOM_BOX_TYPE_VPCC, vpcc, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),",
          "1227:  FBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_SMDM, SmDm, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),",
          "1228:  FBOX_DEFINE_FLAGS_S(GF_ISOM_BOX_TYPE_COLL, CoLL, \"vp08 vp09 encv resv\", 1, 0, \"vp\"),",
          "1231: #ifndef GPAC_DISABLE_OGG",
          "1233:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_DOPS, dOps, \"Opus wave enca\", \"Opus\"),",
          "1234: #endif",
          "1238:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSRC, lsrc, \"lsr1\", \"p20\"),",
          "1241: #ifndef GPAC_DISABLE_TTXT",
          "1243:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_TXTC, txtc, \"stxt mett sbtt\", 0),",
          "1245:  FBOX_DEFINE( GF_ISOM_BOX_TYPE_MIME, txtc, \"sample_entry\", 0),",
          "1246: #ifndef GPAC_DISABLE_VTT",
          "1249:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTE, vtte, \"vtt_sample\", \"p30\"),",
          "1250:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTC_CONFIG, boxstring, \"wvtt\", \"p30\"),",
          "1251:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_CTIM, boxstring, \"vttc\", \"p30\"),",
          "",
          "[Removed Lines]",
          "1188:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1189:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC2, video_sample_entry, \"stsd\", \"p15\"),",
          "1190:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC3, video_sample_entry, \"stsd\", \"p15\"),",
          "1191:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AVC4, video_sample_entry, \"stsd\", \"p15\"),",
          "1192:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_SVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1193:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1194:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1195:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV1, video_sample_entry, \"stsd\", \"p15\"),",
          "1196:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVC2, video_sample_entry, \"stsd\", \"p15\"),",
          "1197:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HEV2, video_sample_entry, \"stsd\", \"p15\"),",
          "1198:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHV1, video_sample_entry, \"stsd\", \"p15\"),",
          "1199:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_LHE1, video_sample_entry, \"stsd\", \"p15\"),",
          "1200:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_HVT1, video_sample_entry, \"stsd\", \"p15\"),",
          "1201:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1202:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VVI1, video_sample_entry, \"stsd\", \"p15\"),",
          "1208:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1209:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHA2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1210:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1211:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MHM2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1215:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPCM, audio_sample_entry, \"stsd\", \"23003_5\"),",
          "1216:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_FPCM, audio_sample_entry, \"stsd\", \"23003_5\"),",
          "1220:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_AV01, video_sample_entry, \"stsd\", \"av1\"),",
          "1225:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP08, video_sample_entry, \"stsd\", \"vp\"),",
          "1226:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VP09, video_sample_entry, \"stsd\", \"vp\"),",
          "1232:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_OPUS, audio_sample_entry, \"stsd\", \"Opus\"),",
          "1237:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_LSR1, lsr1, \"stsd\", \"p20\"),",
          "1242:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STXT, metx, \"stsd\"),",
          "1247:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_WVTT, wvtt, \"stsd\", \"p30\"),",
          "1248:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTCC_CUE, vtcu, \"vtt_sample\", \"p30\"),",
          "",
          "[Added Lines]",
          "1211:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1212:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AVC2, video_sample_entry, \"stsd\", \"p15\"),",
          "1213:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AVC3, video_sample_entry, \"stsd\", \"p15\"),",
          "1214:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AVC4, video_sample_entry, \"stsd\", \"p15\"),",
          "1215:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_SVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1216:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1217:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_HVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1218:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_HEV1, video_sample_entry, \"stsd\", \"p15\"),",
          "1219:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_HVC2, video_sample_entry, \"stsd\", \"p15\"),",
          "1220:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_HEV2, video_sample_entry, \"stsd\", \"p15\"),",
          "1221:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_LHV1, video_sample_entry, \"stsd\", \"p15\"),",
          "1222:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_LHE1, video_sample_entry, \"stsd\", \"p15\"),",
          "1223:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_HVT1, video_sample_entry, \"stsd\", \"p15\"),",
          "1224:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_VVC1, video_sample_entry, \"stsd\", \"p15\"),",
          "1225:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_VVI1, video_sample_entry, \"stsd\", \"p15\"),",
          "1231:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MHA1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1232:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MHA2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1233:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MHM1, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1234:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MHM2, audio_sample_entry, \"stsd\", \"mpegh3Daudio\"),",
          "1238:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_IPCM, audio_sample_entry, \"stsd\", \"23003_5\"),",
          "1239:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_FPCM, audio_sample_entry, \"stsd\", \"23003_5\"),",
          "1243:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_AV01, video_sample_entry, \"stsd\", \"av1\"),",
          "1248:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_VP08, video_sample_entry, \"stsd\", \"vp\"),",
          "1249:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_VP09, video_sample_entry, \"stsd\", \"vp\"),",
          "1255:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_OPUS, audio_sample_entry, \"stsd\", \"Opus\"),",
          "1260:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_LSR1, lsr1, \"stsd\", \"p20\"),",
          "1265:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_STXT, metx, \"stsd\"),",
          "1270:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_WVTT, wvtt, \"stsd\", \"p30\"),",
          "1271:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_VTCC_CUE, vtcu, \"vtt_sample\", \"p30\"),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1254:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_PAYL, boxstring, \"vttc\", \"p30\"),",
          "1255:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VTTA, boxstring, \"vttc\", \"p30\"),",
          "1256: #endif",
          "1259: #endif",
          "1263:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPCO, ipco, \"iprp\", \"iff\"),",
          "1264:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ISPE, ispe, \"ipco\", 0, \"iff\"),",
          "1265:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_COLR, colr, \"video_sample_entry ipco encv resv\", \"iff\"),",
          "",
          "[Removed Lines]",
          "1257:  BOX_DEFINE( GF_ISOM_BOX_TYPE_STPP, metx, \"stsd\"),",
          "1258:  BOX_DEFINE( GF_ISOM_BOX_TYPE_SBTT, metx, \"stsd\"),",
          "1262:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_IPRP, iprp, \"meta\", \"iff\"),",
          "",
          "[Added Lines]",
          "1280:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_STPP, metx, \"stsd\"),",
          "1281:  BOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_SBTT, metx, \"stsd\"),",
          "1285:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_IPRP, iprp, \"meta\", \"iff\"),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1288:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_RVCC, rvcc, \"avc1 avc2 avc3 avc4 svc1 svc2 hvc1 hev1 hvc2 hev2 lhv1 lhe1 encv resv\", \"rvc\"),",
          "1297:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAMR, gppc, \"samr sawb enca\", \"3gpp\"),",
          "1298:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DEVC, gppc, \"sevc enca\", \"3gpp\"),",
          "1299:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DQCP, gppc, \"sqcp enca\", \"3gpp\"),",
          "1300:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DSMV, gppc, \"ssmv enca\", \"3gpp\"),",
          "1301:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_D263, gppc, \"s263 encv\", \"3gpp\"),",
          "1304:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_TEXT, text, \"stsd\", \"apple\"),",
          "1305:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_FTAB, ftab, \"tx3g text enct\", \"3gpp\"),",
          "1306:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_STYL, styl, \"text_sample\", \"3gpp\"),",
          "",
          "[Removed Lines]",
          "1291:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1292:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_AMR_WB, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1293:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_QCELP, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1294:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_EVRC, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1295:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_SMV, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1296:  BOX_DEFINE_S( GF_ISOM_SUBTYPE_3GP_H263, video_sample_entry, \"stsd\", \"3gpp\"),",
          "1303:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_TX3G, tx3g, \"stsd\", \"3gpp\"),",
          "",
          "[Added Lines]",
          "1314:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_AMR, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1315:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_AMR_WB, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1316:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_QCELP, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1317:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_EVRC, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1318:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_SMV, audio_sample_entry, \"stsd\", \"3gpp\"),",
          "1319:  BOX_DEFINE_S_CHILD( GF_ISOM_SUBTYPE_3GP_H263, video_sample_entry, \"stsd\", \"3gpp\"),",
          "1326:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_TX3G, tx3g, \"stsd\", \"3gpp\"),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1313:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_BLNK, blnk, \"text_sample\", \"3gpp\"),",
          "1314:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_TWRP, twrp, \"text_sample\", \"3gpp\"),",
          "1317:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMC, dimC, \"dims encs\", \"3gpp\"),",
          "1318:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIST, diST, \"stsd\", \"3gpp\"),",
          "",
          "[Removed Lines]",
          "1316:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DIMS, dims, \"stsd\", \"3gpp\"),",
          "",
          "[Added Lines]",
          "1339:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_DIMS, dims, \"stsd\", \"3gpp\"),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1338:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ODAF, iSFM, \"schi\", 0, \"oma\"),",
          "1342:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_CHPL, chpl, \"udta\", 0, \"apple\"),",
          "1343:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_VOID, void, \"\", \"apple\"),",
          "1344:  BOX_DEFINE_S(GF_QT_BOX_TYPE_WIDE, wide, \"*\", \"apple\"),",
          "",
          "[Removed Lines]",
          "1341:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MP3, audio_sample_entry, \"stsd\", \"apple\"),",
          "",
          "[Added Lines]",
          "1364:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MP3, audio_sample_entry, \"stsd\", \"apple\"),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1415:  BOX_DEFINE_S( GF_QT_BOX_TYPE_TMCD, tmcd, \"stsd\", \"apple\"),",
          "1416:  BOX_DEFINE_S( GF_QT_SUBTYPE_C608, gen_sample_entry, \"stsd\", \"apple\"),",
          "1460:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DAC3, dac3, \"ac-3 wave\", \"dolby\"),",
          "1461:  {GF_ISOM_BOX_TYPE_DEC3, dec3_box_new, dac3_box_del, dac3_box_read, dac3_box_write, dac3_box_size, dac3_box_dump, 0, 0, 0, \"ec-3 enca\", \"dolby\" },",
          "1462:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVCC, dvcC, \"dvhe dvav dva1 dvh1 avc1 avc2 avc3 avc4 hev1 encv resv\", \"DolbyVision\"),",
          "1465:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_DMLP, dmlp, \"mlpa\", \"dolby\"),",
          "",
          "[Removed Lines]",
          "1417:  BOX_DEFINE_S( GF_QT_SUBTYPE_APCH, video_sample_entry, \"stsd\", \"apple\"),",
          "1418:  BOX_DEFINE_S( GF_QT_SUBTYPE_APCO, video_sample_entry, \"stsd\", \"apple\"),",
          "1419:  BOX_DEFINE_S( GF_QT_SUBTYPE_APCS, video_sample_entry, \"stsd\", \"apple\"),",
          "1420:  BOX_DEFINE_S( GF_QT_SUBTYPE_APCN, video_sample_entry, \"stsd\", \"apple\"),",
          "1421:  BOX_DEFINE_S( GF_QT_SUBTYPE_AP4X, video_sample_entry, \"stsd\", \"apple\"),",
          "1422:  BOX_DEFINE_S( GF_QT_SUBTYPE_AP4H, video_sample_entry, \"stsd\", \"apple\"),",
          "1423:  BOX_DEFINE_S( GF_QT_SUBTYPE_RAW_AUD, audio_sample_entry, \"stsd\", \"apple\"),",
          "1424:  BOX_DEFINE_S( GF_QT_SUBTYPE_TWOS, audio_sample_entry, \"stsd\", \"apple\"),",
          "1425:  BOX_DEFINE_S( GF_QT_SUBTYPE_SOWT, audio_sample_entry, \"stsd\", \"apple\"),",
          "1426:  BOX_DEFINE_S( GF_QT_SUBTYPE_FL32, audio_sample_entry, \"stsd\", \"apple\"),",
          "1427:  BOX_DEFINE_S( GF_QT_SUBTYPE_FL64, audio_sample_entry, \"stsd\", \"apple\"),",
          "1428:  BOX_DEFINE_S( GF_QT_SUBTYPE_IN24, audio_sample_entry, \"stsd\", \"apple\"),",
          "1429:  BOX_DEFINE_S( GF_QT_SUBTYPE_IN32, audio_sample_entry, \"stsd\", \"apple\"),",
          "1430:  BOX_DEFINE_S( GF_QT_SUBTYPE_ULAW, audio_sample_entry, \"stsd\", \"apple\"),",
          "1431:  BOX_DEFINE_S( GF_QT_SUBTYPE_ALAW, audio_sample_entry, \"stsd\", \"apple\"),",
          "1432:  BOX_DEFINE_S( GF_QT_SUBTYPE_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),",
          "1433:  BOX_DEFINE_S( GF_QT_SUBTYPE_IMA_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),",
          "1434:  BOX_DEFINE_S( GF_QT_SUBTYPE_DVCA, audio_sample_entry, \"stsd\", \"apple\"),",
          "1435:  BOX_DEFINE_S( GF_QT_SUBTYPE_QDMC, audio_sample_entry, \"stsd\", \"apple\"),",
          "1436:  BOX_DEFINE_S( GF_QT_SUBTYPE_QDMC2, audio_sample_entry, \"stsd\", \"apple\"),",
          "1437:  BOX_DEFINE_S( GF_QT_SUBTYPE_QCELP, audio_sample_entry, \"stsd\", \"apple\"),",
          "1438:  BOX_DEFINE_S( GF_QT_SUBTYPE_kMP3, audio_sample_entry, \"stsd\", \"apple\"),",
          "1440:  BOX_DEFINE_S( GF_QT_SUBTYPE_RAW_VID, video_sample_entry, \"stsd\", \"apple\"),",
          "1441:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUYV, video_sample_entry, \"stsd\", \"apple\"),",
          "1442:  BOX_DEFINE_S( GF_QT_SUBTYPE_UYVY, video_sample_entry, \"stsd\", \"apple\"),",
          "1443:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUV444, video_sample_entry, \"stsd\", \"apple\"),",
          "1444:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUVA444, video_sample_entry, \"stsd\", \"apple\"),",
          "1445:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUV422_10, video_sample_entry, \"stsd\", \"apple\"),",
          "1446:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUV444_10, video_sample_entry, \"stsd\", \"apple\"),",
          "1447:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUV422_16, video_sample_entry, \"stsd\", \"apple\"),",
          "1448:  BOX_DEFINE_S( GF_QT_SUBTYPE_YUV420, video_sample_entry, \"stsd\", \"apple\"),",
          "1449:  BOX_DEFINE_S( GF_QT_SUBTYPE_I420, video_sample_entry, \"stsd\", \"apple\"),",
          "1450:  BOX_DEFINE_S( GF_QT_SUBTYPE_IYUV, video_sample_entry, \"stsd\", \"apple\"),",
          "1451:  BOX_DEFINE_S( GF_QT_SUBTYPE_YV12, video_sample_entry, \"stsd\", \"apple\"),",
          "1452:  BOX_DEFINE_S( GF_QT_SUBTYPE_YVYU, video_sample_entry, \"stsd\", \"apple\"),",
          "1453:  BOX_DEFINE_S( GF_QT_SUBTYPE_RGBA, video_sample_entry, \"stsd\", \"apple\"),",
          "1454:  BOX_DEFINE_S( GF_QT_SUBTYPE_ABGR, video_sample_entry, \"stsd\", \"apple\"),",
          "1458:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_AC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "1459:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_EC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "1463:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_DVHE, video_sample_entry, \"stsd\", \"DolbyVision\"),",
          "1464:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_MLPA, audio_sample_entry, \"stsd\", \"dolby\"),",
          "",
          "[Added Lines]",
          "1440:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_APCH, video_sample_entry, \"stsd\", \"apple\"),",
          "1441:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_APCO, video_sample_entry, \"stsd\", \"apple\"),",
          "1442:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_APCS, video_sample_entry, \"stsd\", \"apple\"),",
          "1443:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_APCN, video_sample_entry, \"stsd\", \"apple\"),",
          "1444:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_AP4X, video_sample_entry, \"stsd\", \"apple\"),",
          "1445:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_AP4H, video_sample_entry, \"stsd\", \"apple\"),",
          "1446:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_RAW_AUD, audio_sample_entry, \"stsd\", \"apple\"),",
          "1447:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_TWOS, audio_sample_entry, \"stsd\", \"apple\"),",
          "1448:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_SOWT, audio_sample_entry, \"stsd\", \"apple\"),",
          "1449:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_FL32, audio_sample_entry, \"stsd\", \"apple\"),",
          "1450:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_FL64, audio_sample_entry, \"stsd\", \"apple\"),",
          "1451:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_IN24, audio_sample_entry, \"stsd\", \"apple\"),",
          "1452:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_IN32, audio_sample_entry, \"stsd\", \"apple\"),",
          "1453:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_ULAW, audio_sample_entry, \"stsd\", \"apple\"),",
          "1454:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_ALAW, audio_sample_entry, \"stsd\", \"apple\"),",
          "1455:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),",
          "1456:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_IMA_ADPCM, audio_sample_entry, \"stsd\", \"apple\"),",
          "1457:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_DVCA, audio_sample_entry, \"stsd\", \"apple\"),",
          "1458:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_QDMC, audio_sample_entry, \"stsd\", \"apple\"),",
          "1459:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_QDMC2, audio_sample_entry, \"stsd\", \"apple\"),",
          "1460:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_QCELP, audio_sample_entry, \"stsd\", \"apple\"),",
          "1461:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_kMP3, audio_sample_entry, \"stsd\", \"apple\"),",
          "1463:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_RAW_VID, video_sample_entry, \"stsd\", \"apple\"),",
          "1464:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUYV, video_sample_entry, \"stsd\", \"apple\"),",
          "1465:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_UYVY, video_sample_entry, \"stsd\", \"apple\"),",
          "1466:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUV444, video_sample_entry, \"stsd\", \"apple\"),",
          "1467:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUVA444, video_sample_entry, \"stsd\", \"apple\"),",
          "1468:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUV422_10, video_sample_entry, \"stsd\", \"apple\"),",
          "1469:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUV444_10, video_sample_entry, \"stsd\", \"apple\"),",
          "1470:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUV422_16, video_sample_entry, \"stsd\", \"apple\"),",
          "1471:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YUV420, video_sample_entry, \"stsd\", \"apple\"),",
          "1472:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_I420, video_sample_entry, \"stsd\", \"apple\"),",
          "1473:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_IYUV, video_sample_entry, \"stsd\", \"apple\"),",
          "1474:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YV12, video_sample_entry, \"stsd\", \"apple\"),",
          "1475:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_YVYU, video_sample_entry, \"stsd\", \"apple\"),",
          "1476:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_RGBA, video_sample_entry, \"stsd\", \"apple\"),",
          "1477:  BOX_DEFINE_S_CHILD( GF_QT_SUBTYPE_ABGR, video_sample_entry, \"stsd\", \"apple\"),",
          "1481:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "1482:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_EC3, audio_sample_entry, \"stsd\", \"dolby\"),",
          "1486:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_DVHE, video_sample_entry, \"stsd\", \"DolbyVision\"),",
          "1487:  BOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_MLPA, audio_sample_entry, \"stsd\", \"dolby\"),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1472:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AFRT, afrt, \"abst\", 0, \"adobe\"),",
          "1473: #endif",
          "1477:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADAF, adaf, \"adkm\", 0, \"adobe\"),",
          "1479:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AEIB, aeib, \"aprm\", 0, \"adobe\"),",
          "1481:  BOX_DEFINE_S( GF_ISOM_BOX_TYPE_FLXS, flxs, \"akey\", \"adobe\"),",
          "1483:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_TRIK, trik, \"traf\", 0, \"dece\"),",
          "",
          "[Removed Lines]",
          "1475:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", 0, \"adobe\"),",
          "1476:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", 0, \"adobe\"),",
          "1478:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", 0, \"adobe\"),",
          "1480:  FBOX_DEFINE_S( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", 0, \"adobe\"),",
          "",
          "[Added Lines]",
          "1498:  FBOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_ADKM, adkm, \"schi\", 0, \"adobe\"),",
          "1499:  FBOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AHDR, ahdr, \"adkm\", 0, \"adobe\"),",
          "1501:  FBOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_APRM, aprm, \"ahdr\", 0, \"adobe\"),",
          "1503:  FBOX_DEFINE_S_CHILD( GF_ISOM_BOX_TYPE_AKEY, akey, \"aprm\", 0, \"adobe\"),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1502:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_IHDR, ihdr, \"jp2h\", \"j2k\"),",
          "1512:  FBOX_DEFINE_S(GF_ISOM_BOX_TYPE_DFLA, dfla, \"fLaC enca\", 0, \"Flac\"),",
          "1514:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_XTRA, xtra, \"udta\", \"WMA\"),",
          "",
          "[Removed Lines]",
          "1500:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_MJP2, video_sample_entry, \"stsd\", \"j2k\"),",
          "1501:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_JP2H, jp2h, \"mjp2 encv\", \"j2k\"),",
          "1505:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_JPEG, video_sample_entry, \"stsd\", \"apple\"),",
          "1506:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_JP2K, video_sample_entry, \"stsd\", \"apple\"),",
          "1507:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_PNG, video_sample_entry, \"stsd\", \"apple\"),",
          "1511:  BOX_DEFINE_S(GF_ISOM_BOX_TYPE_FLAC, audio_sample_entry, \"stsd\", \"Flac\"),",
          "",
          "[Added Lines]",
          "1523:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_MJP2, video_sample_entry, \"stsd\", \"j2k\"),",
          "1524:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_JP2H, jp2h, \"mjp2 encv\", \"j2k\"),",
          "1528:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_JPEG, video_sample_entry, \"stsd\", \"apple\"),",
          "1529:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_JP2K, video_sample_entry, \"stsd\", \"apple\"),",
          "1530:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_PNG, video_sample_entry, \"stsd\", \"apple\"),",
          "1534:  BOX_DEFINE_S_CHILD(GF_ISOM_BOX_TYPE_FLAC, audio_sample_entry, \"stsd\", \"Flac\"),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1664:  return gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE);",
          "1665: }",
          "1668: {",
          "1669:  GF_Err e;",
          "1670:  GF_Box *a = NULL;",
          "",
          "[Removed Lines]",
          "1667: GF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, GF_Err (*check_child_box)(GF_Box *par, GF_Box *b), u32 parent_type)",
          "",
          "[Added Lines]",
          "1690: GF_Err gf_isom_box_array_read_ex(GF_Box *parent, GF_BitStream *bs, u32 parent_type)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1730:   e = gf_list_add(parent->child_boxes, a);",
          "1731:   if (e) return e;",
          "1735:    if (e) {",
          "1736:     if (e == GF_ISOM_INVALID_MEDIA) return GF_OK;",
          "",
          "[Removed Lines]",
          "1733:   if (check_child_box) {",
          "1734:    e = check_child_box(parent, a);",
          "",
          "[Added Lines]",
          "1756:   if (parent->registry->add_rem_fn) {",
          "1757:    e = parent->registry->add_rem_fn(parent, a, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2086:  gf_isom_box_del(b);",
          "2087: }",
          "2089: GF_Box *gf_isom_box_new_parent(GF_List **parent, u32 code)",
          "2090: {",
          "2091:  GF_Box *b = gf_isom_box_new(code);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2112: void gf_isom_box_remove_from_parent(GF_Box *parent_box, GF_Box *box)",
          "2113: {",
          "2114:  if (parent_box && parent_box->registry && parent_box->registry->add_rem_fn) {",
          "2115:   parent_box->registry->add_rem_fn(parent_box, box, GF_TRUE);",
          "2116:  }",
          "2117: }",
          "",
          "---------------"
        ],
        "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c": [
          "File: src/isomedia/drm_sample.c -> src/isomedia/drm_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:   senc->cenc_saiz->aux_info_type = 0;",
          "1135:   senc->cenc_saiz->aux_info_type_parameter = use_multikey ? 1 : 0;",
          "1136:   if (stbl)",
          "1138:   else",
          "1140:  }",
          "1141:  if (!senc->cenc_saio) {",
          "1142:   senc->cenc_saio = (GF_SampleAuxiliaryInfoOffsetBox *) gf_isom_box_new_parent(child_boxes, GF_ISOM_BOX_TYPE_SAIO);",
          "",
          "[Removed Lines]",
          "1137:    stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saiz);",
          "1139:    traf_on_child_box((GF_Box*)traf, (GF_Box *)senc->cenc_saiz);",
          "",
          "[Added Lines]",
          "1137:    stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saiz, GF_FALSE);",
          "1139:    traf_on_child_box((GF_Box*)traf, (GF_Box *)senc->cenc_saiz, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1148:   senc->cenc_saiz->aux_info_type_parameter = use_multikey ? 1 : 0;",
          "1149:   senc->cenc_saio->entry_count = 1;",
          "1150:   if (stbl)",
          "1152:   else",
          "1154:  }",
          "1156:  if (!senc->cenc_saiz->sample_count || ((senc->cenc_saiz->default_sample_info_size==len) && len) ) {",
          "",
          "[Removed Lines]",
          "1151:    stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saio);",
          "1153:    traf_on_child_box((GF_Box*)traf, (GF_Box *)senc->cenc_saio);",
          "",
          "[Added Lines]",
          "1151:    stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saio, GF_FALSE);",
          "1153:    traf_on_child_box((GF_Box*)traf, (GF_Box *)senc->cenc_saio, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1183:   if (!senc->cenc_saiz) return GF_OUT_OF_MEM;",
          "1184:   senc->cenc_saiz->aux_info_type = GF_ISOM_CENC_SCHEME;",
          "1185:   senc->cenc_saiz->aux_info_type_parameter = 0;",
          "1187:  }",
          "1188:  if (!senc->cenc_saio) {",
          "1189:   senc->cenc_saio = (GF_SampleAuxiliaryInfoOffsetBox *) gf_isom_box_new_parent(&stbl->child_boxes, GF_ISOM_BOX_TYPE_SAIO);",
          "",
          "[Removed Lines]",
          "1186:   stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saiz);",
          "",
          "[Added Lines]",
          "1186:   stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saiz, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1192:   senc->cenc_saio->version = 1;",
          "1193:   senc->cenc_saio->aux_info_type = GF_ISOM_CENC_SCHEME;",
          "1194:   senc->cenc_saio->aux_info_type_parameter = 0;",
          "1196:  }",
          "1198:  if (!senc->cenc_saiz->sample_count || (!senc->cenc_saiz->sample_alloc && (senc->cenc_saiz->default_sample_info_size==len))) {",
          "",
          "[Removed Lines]",
          "1195:   stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saio);",
          "",
          "[Added Lines]",
          "1195:   stbl_on_child_box((GF_Box*)stbl, (GF_Box *)senc->cenc_saio, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/hint_track.c||src/isomedia/hint_track.c": [
          "File: src/isomedia/hint_track.c -> src/isomedia/hint_track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:  if (!trak->References) {",
          "124:   tref = (GF_TrackReferenceBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_TREF);",
          "125:   if (!tref) return GF_OUT_OF_MEM;",
          "127:   if (e) return e;",
          "128:  }",
          "129:  tref = trak->References;",
          "",
          "[Removed Lines]",
          "126:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref);",
          "",
          "[Added Lines]",
          "126:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   udta = (GF_UserDataBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA);",
          "148:   if (!udta) return GF_OUT_OF_MEM;",
          "150:   if (e) return e;",
          "151:  }",
          "152:  udta = trak->udta;",
          "156:  if (e) return e;",
          "",
          "[Removed Lines]",
          "149:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) udta);",
          "155:  e = udta_on_child_box((GF_Box *)udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI));",
          "",
          "[Added Lines]",
          "149:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) udta, GF_FALSE);",
          "155:  e = udta_on_child_box((GF_Box *)udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "761:  hnti = (GF_HintTrackInfoBox *)gf_list_get(map->boxes, 0);",
          "762:  if (!hnti->SDP) {",
          "764:   if (e) return e;",
          "765:  }",
          "766:  sdp = (GF_SDPBox *) hnti->SDP;",
          "",
          "[Removed Lines]",
          "763:   e = hnti_on_child_box((GF_Box*)hnti, gf_isom_box_new_parent(&hnti->child_boxes, GF_ISOM_BOX_TYPE_SDP));",
          "",
          "[Added Lines]",
          "763:   e = hnti_on_child_box((GF_Box*)hnti, gf_isom_box_new_parent(&hnti->child_boxes, GF_ISOM_BOX_TYPE_SDP), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "831:  if (!movie->moov->udta) {",
          "833:   if (e) return e;",
          "834:  }",
          "836:  map = udta_getEntry(movie->moov->udta, GF_ISOM_BOX_TYPE_HNTI, NULL);",
          "837:  if (!map) {",
          "839:   if (e) return e;",
          "840:   map = udta_getEntry(movie->moov->udta, GF_ISOM_BOX_TYPE_HNTI, NULL);",
          "841:  }",
          "844:  if (!gf_list_count(map->boxes) ) {",
          "846:   if (e) return e;",
          "847:  }",
          "848:  else if (gf_list_count(map->boxes) < 1) return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "832:   e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "838:   e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI));",
          "845:   e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI));",
          "",
          "[Added Lines]",
          "832:   e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "838:   e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI), GF_FALSE);",
          "845:   e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "852:  if (!hnti->SDP) {",
          "853:   GF_Box *a = gf_isom_box_new_ex(GF_ISOM_BOX_TYPE_RTP, GF_ISOM_BOX_TYPE_HNTI, 0, GF_FALSE);",
          "854:   if (!a) return GF_OUT_OF_MEM;",
          "856:   if (!hnti->child_boxes) hnti->child_boxes = gf_list_new();",
          "857:   gf_list_add(hnti->child_boxes, a);",
          "858:  }",
          "",
          "[Removed Lines]",
          "855:   hnti_on_child_box((GF_Box*)hnti, a);",
          "",
          "[Added Lines]",
          "855:   hnti_on_child_box((GF_Box*)hnti, a, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/hinting.c||src/isomedia/hinting.c": [
          "File: src/isomedia/hinting.c -> src/isomedia/hinting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   ptr->FEC_overhead = gf_bs_read_u16(bs);",
          "76:  }",
          "78: }",
          "80: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "77:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "77:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/isomedia/iff.c||src/isomedia/iff.c": [
          "File: src/isomedia/iff.c -> src/isomedia/iff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415: GF_Err ipco_box_read(GF_Box *s, GF_BitStream *bs)",
          "416: {",
          "418: }",
          "420: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "417:  return gf_isom_box_array_read(s, bs, NULL);",
          "",
          "[Added Lines]",
          "417:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:  gf_free(s);",
          "443: }",
          "446: {",
          "448:  switch (a->type) {",
          "449:  case GF_ISOM_BOX_TYPE_IPCO:",
          "452:   break;",
          "453:  case GF_ISOM_BOX_TYPE_IPMA:",
          "456:   break;",
          "457:  default:",
          "458:   return GF_OK;",
          "",
          "[Removed Lines]",
          "445: static GF_Err iprp_on_child_box(GF_Box *s, GF_Box *a)",
          "447:  GF_ItemPropertiesBox *p = (GF_ItemPropertiesBox *)s;",
          "450:   if (p->property_container) ERROR_ON_DUPLICATED_BOX(a, p)",
          "451:   p->property_container = (GF_ItemPropertyContainerBox*)a;",
          "454:   if (p->property_association) ERROR_ON_DUPLICATED_BOX(a, p)",
          "455:   p->property_association = (GF_ItemPropertyAssociationBox*)a;",
          "",
          "[Added Lines]",
          "445: GF_Err iprp_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "447:  GF_ItemPropertiesBox *ptr = (GF_ItemPropertiesBox *)s;",
          "450:   BOX_FIELD_ASSIGN(property_container, GF_ItemPropertyContainerBox)",
          "453:   BOX_FIELD_ASSIGN(property_association, GF_ItemPropertyAssociationBox)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "463: GF_Err iprp_box_read(GF_Box *s, GF_BitStream *bs)",
          "464: {",
          "466: }",
          "468: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "465:  return gf_isom_box_array_read(s, bs, iprp_on_child_box);",
          "",
          "[Added Lines]",
          "463:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "621: GF_Err grpl_box_read(GF_Box *s, GF_BitStream *bs)",
          "622: {",
          "624: }",
          "626: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "623:  return gf_isom_box_array_read_ex(s, bs, NULL, s->type);",
          "",
          "[Added Lines]",
          "621:  return gf_isom_box_array_read_ex(s, bs, s->type);",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "692:   return GF_ISOM_INCOMPLETE_FILE;",
          "693:  }",
          "703:  }",
          "705: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "695:  if (mov->moov && !mov->moov->mvhd) {",
          "696:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing MVHD in MOOV!\\n\"));",
          "697:   return GF_ISOM_INVALID_FILE;",
          "698:  }",
          "700:  if (mov->meta && !mov->meta->handler) {",
          "701:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing handler in META!\\n\"));",
          "702:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "695:  if (!gf_opts_get_bool(\"core\", \"no-check\")) {",
          "696:   if (mov->moov && !mov->moov->mvhd) {",
          "697:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing MVHD in MOOV!\\n\"));",
          "698:    return GF_ISOM_INVALID_FILE;",
          "699:   }",
          "702:   if (mov->meta && !mov->meta->handler) {",
          "703:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing handler in META!\\n\"));",
          "704:    return GF_ISOM_INVALID_FILE;",
          "705:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1236:  mvhd->timeScale = 600;",
          "1238:  file->interleavingTime = mvhd->timeScale;",
          "1240:  gf_list_add(file->TopBoxes, file->moov);",
          "1241:  return GF_OK;",
          "1242: }",
          "",
          "[Removed Lines]",
          "1239:  moov_on_child_box((GF_Box*)file->moov, (GF_Box *)mvhd);",
          "",
          "[Added Lines]",
          "1242:  moov_on_child_box((GF_Box*)file->moov, (GF_Box *)mvhd, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/isom_read.c||src/isomedia/isom_read.c": [
          "File: src/isomedia/isom_read.c -> src/isomedia/isom_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "909: GF_EXPORT",
          "910: u32 gf_isom_get_timescale(GF_ISOFile *movie)",
          "911: {",
          "913:  return movie->moov->mvhd->timeScale;",
          "914: }",
          "",
          "[Removed Lines]",
          "912:  if (!movie || !movie->moov) return 0;",
          "",
          "[Added Lines]",
          "912:  if (!movie || !movie->moov || !movie->moov->mvhd) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "918: GF_EXPORT",
          "919: u64 gf_isom_get_duration(GF_ISOFile *movie)",
          "920: {",
          "",
          "[Removed Lines]",
          "921:  if (!movie || !movie->moov) return 0;",
          "",
          "[Added Lines]",
          "921:  if (!movie || !movie->moov || !movie->moov->mvhd) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "933: GF_EXPORT",
          "934: u64 gf_isom_get_original_duration(GF_ISOFile *movie)",
          "935: {",
          "937:  return movie->moov->mvhd->original_duration;",
          "938: }",
          "",
          "[Removed Lines]",
          "936:  if (!movie || !movie->moov) return 0;",
          "",
          "[Added Lines]",
          "936:  if (!movie || !movie->moov|| !movie->moov->mvhd) return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1103:   GF_TrackBox *trak = gf_isom_get_track_from_file(the_file, trackNumber);",
          "1104:   if (!trak) return GF_BAD_PARAM;",
          "1105:   if (!trak->udta) {",
          "1107:    if (e) return e;",
          "1108:   }",
          "1109:   udta = trak->udta;",
          "",
          "[Removed Lines]",
          "1106:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "1106:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/isom_store.c||src/isomedia/isom_store.c": [
          "File: src/isomedia/isom_store.c -> src/isomedia/isom_store.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   trak = gf_isom_get_track(movie->moov, i+1);",
          "164:   stbl = (trak->Media && trak->Media->information) ? trak->Media->information->sampleTable : NULL;",
          "166:    return GF_ISOM_INVALID_FILE;",
          "167:   }",
          "",
          "[Removed Lines]",
          "165:   if (!stbl || !stbl->SampleSize || !stbl->ChunkOffset || !stbl->SampleToChunk) {",
          "",
          "[Added Lines]",
          "165:   if (!stbl || !stbl->SampleSize || !stbl->ChunkOffset || !stbl->SampleToChunk || !stbl->SampleSize) {",
          "166:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[Isom] Box '%s' missing from track, cannot write\\n\",",
          "167:     !trak->Media ? \"mdia\" :",
          "168:     !trak->Media->information ? \"minf\" :",
          "169:     !stbl ? \"stbl\" :",
          "170:     !stbl->SampleSize ? \"stsz\" :",
          "171:     !stbl->ChunkOffset ? \"stco\" :",
          "172:     !stbl->SampleToChunk ? \"stsc\" :",
          "173:     \"stsz\"",
          "174:    ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "651:  maxExtendSize = 0;",
          "652:  if (mdatSize) *mdatSize = 0;",
          "653:  if (!meta->item_locations) return GF_OK;",
          "655:  count = gf_list_count(meta->item_locations->location_entries);",
          "656:  for (i=0; i<count; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:  if (!meta->item_infos) return GF_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2175:    if (gf_sys_is_test_mode()) {",
          "2176:     trak->Header->creationTime = 0;",
          "2177:     trak->Header->modificationTime = 0;",
          "2179:      gf_free(trak->Media->handler->nameUTF8);",
          "2180:      trak->Media->handler->nameUTF8 = gf_strdup(\"MediaHandler\");",
          "2181:     }",
          "",
          "[Removed Lines]",
          "2178:     if (trak->Media->handler->nameUTF8 && strstr(trak->Media->handler->nameUTF8, \"@GPAC\")) {",
          "",
          "[Added Lines]",
          "2189:     if (trak->Media->handler && trak->Media->handler->nameUTF8 && strstr(trak->Media->handler->nameUTF8, \"@GPAC\")) {",
          "",
          "---------------"
        ],
        "src/isomedia/isom_write.c||src/isomedia/isom_write.c": [
          "File: src/isomedia/isom_write.c -> src/isomedia/isom_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  iods = (GF_ObjectDescriptorBox *) gf_isom_box_new_parent(&moov->child_boxes, GF_ISOM_BOX_TYPE_IODS);",
          "128:  if (!iods) return GF_OUT_OF_MEM;",
          "129:  iods->descriptor = od;",
          "131: }",
          "",
          "[Removed Lines]",
          "130:  return moov_on_child_box((GF_Box*)moov, (GF_Box *)iods);",
          "",
          "[Added Lines]",
          "130:  return moov_on_child_box((GF_Box*)moov, (GF_Box *)iods, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730:   mdia->mediaTrack = trak;",
          "733:   if (e) goto err_exit;",
          "735:   if (e) goto err_exit;",
          "736:   tkhd->trackID = trakID;",
          "",
          "[Removed Lines]",
          "732:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) tkhd);",
          "734:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) mdia);",
          "",
          "[Added Lines]",
          "732:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) tkhd, GF_FALSE);",
          "734:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) mdia, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789:  }",
          "793:  if (e) goto err_exit;",
          "795:  if (trakID+1> movie->moov->mvhd->nextTrackID)",
          "",
          "[Removed Lines]",
          "792:  e = moov_on_child_box((GF_Box*)movie->moov, (GF_Box *)trak);",
          "",
          "[Added Lines]",
          "792:  e = moov_on_child_box((GF_Box*)movie->moov, (GF_Box *)trak, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1557:  if (!trak->References) {",
          "1558:   tref = (GF_TrackReferenceBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_TREF);",
          "1559:   if (!tref) return GF_OUT_OF_MEM;",
          "1561:   if (e) return e;",
          "1562:  }",
          "1563:  tref = trak->References;",
          "",
          "[Removed Lines]",
          "1560:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref);",
          "",
          "[Added Lines]",
          "1560:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2425:  if (! edts) {",
          "2426:   edts = (GF_EditBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_EDTS);",
          "2427:   if (!edts) return GF_OUT_OF_MEM;",
          "2429:  }",
          "2430:  elst = edts->editList;",
          "2431:  if (!elst) {",
          "2432:   elst = (GF_EditListBox *) gf_isom_box_new_parent(&edts->child_boxes, GF_ISOM_BOX_TYPE_ELST);",
          "2433:   if (!elst) return GF_OUT_OF_MEM;",
          "2435:  }",
          "2437:  startTime = 0;",
          "",
          "[Removed Lines]",
          "2428:   trak_on_child_box((GF_Box*)trak, (GF_Box *)edts);",
          "2434:   edts_on_child_box((GF_Box*)edts, (GF_Box *)elst);",
          "",
          "[Added Lines]",
          "2428:   trak_on_child_box((GF_Box*)trak, (GF_Box *)edts, GF_FALSE);",
          "2434:   edts_on_child_box((GF_Box*)edts, (GF_Box *)elst, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2585:  if (!trak->editBox) {",
          "2586:   GF_EditBox *edts = (GF_EditBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_EDTS);",
          "2587:   if (!edts) return GF_OUT_OF_MEM;",
          "2589:   assert(trak->editBox);",
          "2590:  }",
          "2591:  if (!trak->editBox->editList) {",
          "2592:   GF_EditListBox *elst = (GF_EditListBox *) gf_isom_box_new_parent(&trak->editBox->child_boxes, GF_ISOM_BOX_TYPE_ELST);",
          "2593:   if (!elst) return GF_OUT_OF_MEM;",
          "2595:   assert(trak->editBox->editList);",
          "2596:  }",
          "2597:  ent = (GF_EdtsEntry *)gf_malloc(sizeof(GF_EdtsEntry));",
          "",
          "[Removed Lines]",
          "2588:   trak_on_child_box((GF_Box*)trak, (GF_Box *)edts);",
          "2594:   edts_on_child_box((GF_Box*)trak->editBox, (GF_Box *)elst);",
          "",
          "[Added Lines]",
          "2588:   trak_on_child_box((GF_Box*)trak, (GF_Box *)edts, GF_FALSE);",
          "2594:   edts_on_child_box((GF_Box*)trak->editBox, (GF_Box *)elst, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2799:  if (e) return e;",
          "2801:  if (!movie->moov->udta) {",
          "2803:   if (e) return e;",
          "2804:  }",
          "2805:  map = udta_getEntry(movie->moov->udta, GF_ISOM_BOX_TYPE_CPRT, NULL);",
          "",
          "[Removed Lines]",
          "2802:   e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "2802:   e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2826:  ptr->notice = (char*)gf_malloc(sizeof(char) * (strlen(notice)+1));",
          "2827:  if (!ptr->notice) return GF_OUT_OF_MEM;",
          "2828:  strcpy(ptr->notice, notice);",
          "2830: }",
          "2832: GF_EXPORT",
          "",
          "[Removed Lines]",
          "2829:  return udta_on_child_box((GF_Box *)movie->moov->udta, (GF_Box *) ptr);",
          "",
          "[Added Lines]",
          "2829:  return udta_on_child_box((GF_Box *)movie->moov->udta, (GF_Box *) ptr, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2848:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "2849:   if (!trak) return GF_BAD_PARAM;",
          "2850:   if (!trak->udta) {",
          "2852:    if (e) return e;",
          "2853:   }",
          "2854:   udta = trak->udta;",
          "",
          "[Removed Lines]",
          "2851:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "2851:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2878:  ptr->schemeURI = gf_strdup(schemeURI);",
          "2879:  if (value) ptr->value = gf_strdup(value);",
          "2881: }",
          "2883: GF_EXPORT",
          "",
          "[Removed Lines]",
          "2880:  return udta_on_child_box((GF_Box *)udta, (GF_Box *) ptr);",
          "",
          "[Added Lines]",
          "2880:  return udta_on_child_box((GF_Box *)udta, (GF_Box *) ptr, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2897:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "2898:   if (!trak) return GF_BAD_PARAM;",
          "2899:   if (!trak->udta) {",
          "2901:    if (e) return e;",
          "2902:   }",
          "2903:   udta = trak->udta;",
          "",
          "[Removed Lines]",
          "2900:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "2900:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2942:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "2943:   if (!trak) return GF_BAD_PARAM;",
          "2944:   if (!trak->udta) {",
          "2946:    if (e) return e;",
          "2947:   }",
          "2948:   udta = trak->udta;",
          "2949:  } else {",
          "2950:   if (!movie->moov->udta) {",
          "2952:    if (e) return e;",
          "2953:   }",
          "2954:   udta = movie->moov->udta;",
          "",
          "[Removed Lines]",
          "2945:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "2951:    e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "2945:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "2951:    e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2958:  map = udta_getEntry(udta, GF_ISOM_BOX_TYPE_CHPL, NULL);",
          "2959:  if (!map) {",
          "2960:   ptr = (GF_ChapterListBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_CHPL);",
          "2962:   if (e) return e;",
          "2963:   map = udta_getEntry(udta, GF_ISOM_BOX_TYPE_CHPL, NULL);",
          "2964:  } else {",
          "",
          "[Removed Lines]",
          "2961:   e = udta_on_child_box((GF_Box *)udta, (GF_Box *) ptr);",
          "",
          "[Added Lines]",
          "2961:   e = udta_on_child_box((GF_Box *)udta, (GF_Box *) ptr, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3496:  if (trackNumber) {",
          "3497:   trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "3498:   if (!trak) return GF_BAD_PARAM;",
          "3500:   udta = trak->udta;",
          "3501:  } else {",
          "3503:   udta = movie->moov->udta;",
          "3504:  }",
          "3505:  if (!udta) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "3499:   if (!trak->udta) trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "3502:   if (!movie->moov->udta) moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "3499:   if (!trak->udta) trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "3502:   if (!movie->moov->udta) moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3515:    memcpy(a->data, data, DataLength);",
          "3516:    a->dataSize = DataLength;",
          "3517:   }",
          "3519:  } else {",
          "3520:   GF_UnknownUUIDBox *a = (GF_UnknownUUIDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_UUID);",
          "3521:   if (!a) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "3518:   return udta_on_child_box((GF_Box *)udta, (GF_Box *) a);",
          "",
          "[Added Lines]",
          "3518:   return udta_on_child_box((GF_Box *)udta, (GF_Box *) a, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3526:    memcpy(a->data, data, DataLength);",
          "3527:    a->dataSize = DataLength;",
          "3528:   }",
          "3530:  }",
          "3531:  return GF_OK;",
          "3532: }",
          "",
          "[Removed Lines]",
          "3529:   return udta_on_child_box((GF_Box *)udta, (GF_Box *) a);",
          "",
          "[Added Lines]",
          "3529:   return udta_on_child_box((GF_Box *)udta, (GF_Box *) a, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3545:  if (trackNumber) {",
          "3546:   trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "3547:   if (!trak) return GF_BAD_PARAM;",
          "3549:   udta = trak->udta;",
          "3550:  } else {",
          "3551:   if (!movie->moov) return GF_BAD_PARAM;",
          "3553:   udta = movie->moov->udta;",
          "3554:  }",
          "3555:  if (!udta) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "3548:   if (!trak->udta) trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "3552:   if (!movie->moov->udta) moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "3548:   if (!trak->udta) trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "3552:   if (!movie->moov->udta) moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3559:   GF_Box *a;",
          "3560:   e = gf_isom_box_parse(&a, bs);",
          "3561:   if (e) break;",
          "3563:   if (e) break;",
          "3564:  }",
          "3565:  gf_bs_del(bs);",
          "",
          "[Removed Lines]",
          "3562:   e = udta_on_child_box((GF_Box *)udta, a);",
          "",
          "[Added Lines]",
          "3562:   e = udta_on_child_box((GF_Box *)udta, a, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4068:  }",
          "4069:  if (!dest_file->moov->child_boxes) dest_file->moov->child_boxes = gf_list_new();",
          "4070:  gf_list_add(dest_file->moov->child_boxes, new_tk);",
          "4074:  new_tk->originalID = trak->Header->trackID;",
          "",
          "[Removed Lines]",
          "4071:  moov_on_child_box((GF_Box*)dest_file->moov, (GF_Box *)new_tk);",
          "",
          "[Added Lines]",
          "4071:  moov_on_child_box((GF_Box*)dest_file->moov, (GF_Box *)new_tk, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4484:  if (!tref) {",
          "4485:   tref = (GF_TrackReferenceBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_TREF);",
          "4486:   if (!tref) return GF_OUT_OF_MEM;",
          "4488:   if (e) return e;",
          "4489:  }",
          "",
          "[Removed Lines]",
          "4487:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) tref);",
          "",
          "[Added Lines]",
          "4487:   e = trak_on_child_box((GF_Box*)trak, (GF_Box *) tref, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6048:  tsel = NULL;",
          "6049:  if (*switchGroupID) {",
          "6050:   if (!trak->udta) {",
          "6052:    if (e) return e;",
          "6053:   }",
          "",
          "[Removed Lines]",
          "6051:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Added Lines]",
          "6051:    e = trak_on_child_box((GF_Box*)trak, gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6066:   if (!tsel) {",
          "6067:    tsel = (GF_TrackSelectionBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_TSEL);",
          "6068:    if (!tsel) return GF_OUT_OF_MEM;",
          "6070:    if (e) return e;",
          "6071:   }",
          "",
          "[Removed Lines]",
          "6069:    e = udta_on_child_box((GF_Box *)trak->udta, (GF_Box *) tsel);",
          "",
          "[Added Lines]",
          "6069:    e = udta_on_child_box((GF_Box *)trak->udta, (GF_Box *) tsel, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7163:  i=0;",
          "7164:  while ((trak = (GF_TrackBox *)gf_list_enum(movie->moov->trackList, &i))) {",
          "7165:   if( (movie->LastError = SetTrackDuration(trak)) ) return movie->LastError;",
          "7167:    maxDur = trak->Header->duration;",
          "7168:  }",
          "7169:  movie->moov->mvhd->duration = maxDur;",
          "",
          "[Removed Lines]",
          "7166:   if (trak->Header->duration > maxDur)",
          "",
          "[Added Lines]",
          "7166:   if (trak->Header && (trak->Header->duration > maxDur))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7560:   }",
          "7562:   while (box_path && (path_len>=4)) {",
          "7563:    GF_List **parent_list;",
          "7564:    u32 box_type = GF_4CC(box_path[0],box_path[1],box_path[2],box_path[3]);",
          "7565:    GF_Box *box=NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7563:    u32 parent_list_box_type;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7612:    if (parent_box && !parent_box->child_boxes) parent_box->child_boxes = gf_list_new();",
          "7613:    parent_list = parent_box ? &parent_box->child_boxes : &file->TopBoxes;",
          "7616:    if (path_len && ((box_path[0]=='-') || (box_path[0]=='+')) ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7615:    parent_list_box_type = parent_box ? parent_box->type : 0;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7646:      if ((GF_Box *) file->meta == box) file->meta = NULL;",
          "7647:      break;",
          "7648:     }",
          "7649:     gf_isom_box_del_parent(parent_list, box);",
          "7650:    } else {",
          "7651:     u32 size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7651:     if (parent_box) {",
          "7652:      gf_isom_box_remove_from_parent(parent_box, box);",
          "7653:     }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7696:      gf_bs_seek(bs, 0);",
          "7697:      while (gf_bs_available(bs)) {",
          "7698:       GF_Box *new_box;",
          "7700:       if (e) {",
          "7701:        GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[ISOBMFF] failed to parse box\\n\", box_path));",
          "7702:        gf_bs_del(bs);",
          "",
          "[Removed Lines]",
          "7699:       e = gf_isom_box_parse_ex(&new_box, bs, box->type, parent_box ? GF_FALSE : GF_TRUE);",
          "",
          "[Added Lines]",
          "7704:       e = gf_isom_box_parse_ex(&new_box, bs, (insert_pos<0) ? box->type : parent_list_box_type, parent_box ? GF_FALSE : GF_TRUE);",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:  }",
          "672:  if (!a) {",
          "673:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] broken file: Data reference index set to %d but no data reference entry found\\n\", drefIndex));",
          "675:  }",
          "676:  if (a->flags & 1) return 1;",
          "",
          "[Removed Lines]",
          "674:   return 0;",
          "",
          "[Added Lines]",
          "674:   return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685:  u32 i, count;",
          "687:  nb_ext = nb_self = 0;",
          "689:  for (i=0; i<count; i++) {",
          "690:   if (Media_IsSelfContained(mdia, i+1)) nb_self++;",
          "691:   else nb_ext++;",
          "",
          "[Removed Lines]",
          "688:  count = gf_list_count(mdia->information->sampleTable->SampleDescription->child_boxes);",
          "",
          "[Added Lines]",
          "688:  count = mdia->information->sampleTable->SampleDescription ? gf_list_count(mdia->information->sampleTable->SampleDescription->child_boxes) : 0;",
          "",
          "---------------"
        ],
        "src/isomedia/media_odf.c||src/isomedia/media_odf.c": [
          "File: src/isomedia/media_odf.c -> src/isomedia/media_odf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:  if (!tref) {",
          "257:   tref = (GF_TrackReferenceBox *) gf_isom_box_new_parent(&mdia->mediaTrack->child_boxes, GF_ISOM_BOX_TYPE_TREF);",
          "258:   if (!tref) return GF_OUT_OF_MEM;",
          "260:   if (e) return e;",
          "261:  }",
          "",
          "[Removed Lines]",
          "259:   e = trak_on_child_box((GF_Box*)mdia->mediaTrack, (GF_Box *) tref);",
          "",
          "[Added Lines]",
          "259:   e = trak_on_child_box((GF_Box*)mdia->mediaTrack, (GF_Box *) tref, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c": [
          "File: src/isomedia/movie_fragments.c -> src/isomedia/movie_fragments.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:  if (!movie->moov->mvex) {",
          "274:   mvex = (GF_MovieExtendsBox *) gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_MVEX);",
          "275:   if (!mvex) return GF_OUT_OF_MEM;",
          "277:  } else {",
          "278:   mvex = movie->moov->mvex;",
          "279:  }",
          "",
          "[Removed Lines]",
          "276:   moov_on_child_box((GF_Box*)movie->moov, (GF_Box *) mvex);",
          "",
          "[Added Lines]",
          "276:   moov_on_child_box((GF_Box*)movie->moov, (GF_Box *) mvex, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:   trex = (GF_TrackExtendsBox *) gf_isom_box_new_parent(&mvex->child_boxes, GF_ISOM_BOX_TYPE_TREX);",
          "288:   if (!trex) return GF_OUT_OF_MEM;",
          "289:   trex->trackID = TrackID;",
          "291:  }",
          "292:  trex->track = trak;",
          "293:  return gf_isom_change_track_fragment_defaults(movie, TrackID, DefaultSampleDescriptionIndex, DefaultSampleDuration, DefaultSampleSize, DefaultSampleIsSync, DefaultSamplePadding, DefaultDegradationPriority, force_traf_flags);",
          "",
          "[Removed Lines]",
          "290:   mvex_on_child_box((GF_Box*)mvex, (GF_Box *) trex);",
          "",
          "[Added Lines]",
          "290:   mvex_on_child_box((GF_Box*)mvex, (GF_Box *) trex, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:    if (!movie->moov->mvex) {",
          "345:     mvex = (GF_MovieExtendsBox *) gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_MVEX);",
          "347:    } else {",
          "348:     mvex = movie->moov->mvex;",
          "349:    }",
          "",
          "[Removed Lines]",
          "346:     moov_on_child_box((GF_Box*)movie->moov, (GF_Box *) mvex);",
          "",
          "[Added Lines]",
          "346:     moov_on_child_box((GF_Box*)movie->moov, (GF_Box *) mvex, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "360:    trex->track = trak;",
          "361:    if (force_traf_flags) trex->cannot_use_default = GF_TRUE;",
          "362:    gf_list_add(mvex->child_boxes, trex);",
          "364:   }",
          "365:  }",
          "366:  gf_bs_del(bs);",
          "",
          "[Removed Lines]",
          "363:    mvex_on_child_box((GF_Box*)mvex, (GF_Box *) trex);",
          "",
          "[Added Lines]",
          "363:    mvex_on_child_box((GF_Box*)mvex, (GF_Box *) trex, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:  if (e) return e;",
          "391:  trackDuration = (trak->Media->mediaHeader->duration * trak->moov->mvhd->timeScale) / trak->Media->mediaHeader->timeScale;",
          "",
          "[Removed Lines]",
          "390:  if (!trak->moov->mvhd->timeScale || !trak->Media->mediaHeader->timeScale) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "390:  if (!trak->moov->mvhd || !trak->moov->mvhd->timeScale || !trak->Media->mediaHeader->timeScale) return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:  if (!trackDuration) {",
          "405:   trackDuration = (trak->Media->mediaHeader->duration * trak->moov->mvhd->timeScale) / trak->Media->mediaHeader->timeScale;",
          "406:  }",
          "407:  trak->Header->duration = trackDuration;",
          "408:  if (!trak->moov->mov->keep_utc && !gf_sys_is_test_mode() )",
          "409:   trak->Header->modificationTime = gf_isom_get_mp4time();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:  if (!trak->Header) {",
          "408:   return GF_OK;",
          "409:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1187:  if (!mdhd) {",
          "1188:   mdhd = (GF_MediaHeaderBox *) gf_isom_box_new_parent( & ((*mdia)->child_boxes), GF_ISOM_BOX_TYPE_MDHD);",
          "1189:   if (! mdhd) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1191:   if (e) goto err_exit;",
          "1192:  }",
          "1193:  if (!hdlr) {",
          "1194:   hdlr = (GF_HandlerBox *) gf_isom_box_new_parent(& ((*mdia)->child_boxes), GF_ISOM_BOX_TYPE_HDLR);",
          "1195:   if (! hdlr) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1197:   if (e) goto err_exit;",
          "1198:  }",
          "1199:  if (!minf) {",
          "1200:   minf = (GF_MediaInformationBox *) gf_isom_box_new_parent(& ((*mdia)->child_boxes), GF_ISOM_BOX_TYPE_MINF);",
          "1201:   if (! minf) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1203:   if (e) goto err_exit;",
          "1204:  }",
          "1205:  if (!dinf) {",
          "1206:   dinf = (GF_DataInformationBox *) gf_isom_box_new_parent(&minf->child_boxes, GF_ISOM_BOX_TYPE_DINF);",
          "1207:   if (! dinf) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1209:   if (e) goto err_exit;",
          "1210:  }",
          "",
          "[Removed Lines]",
          "1190:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) mdhd);",
          "1196:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) hdlr);",
          "1202:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) minf);",
          "1208:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) dinf);",
          "",
          "[Added Lines]",
          "1193:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) mdhd, GF_FALSE);",
          "1199:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) hdlr, GF_FALSE);",
          "1205:   e = mdia_on_child_box((GF_Box*)*mdia, (GF_Box *) minf, GF_FALSE);",
          "1211:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) dinf, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1291:   if (!minf->child_boxes) minf->child_boxes = gf_list_new();",
          "1292:   gf_list_add(minf->child_boxes, mediaInfo);",
          "1295:   if (e) goto err_exit;",
          "1296:  }",
          "",
          "[Removed Lines]",
          "1294:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) mediaInfo);",
          "",
          "[Added Lines]",
          "1297:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) mediaInfo, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1305:   dref = (GF_DataReferenceBox *) gf_isom_box_new_parent(&dinf->child_boxes, GF_ISOM_BOX_TYPE_DREF);",
          "1306:   if (! dref) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1308:   if (e) goto err_exit;",
          "1309:  }",
          "",
          "[Removed Lines]",
          "1307:   e = dinf_on_child_box((GF_Box*)dinf, (GF_Box *)dref);",
          "",
          "[Added Lines]",
          "1310:   e = dinf_on_child_box((GF_Box*)dinf, (GF_Box *)dref, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1313:   stbl = (GF_SampleTableBox *) gf_isom_box_new_parent(&minf->child_boxes, GF_ISOM_BOX_TYPE_STBL);",
          "1314:   if (! stbl) { e = GF_OUT_OF_MEM; goto err_exit; }",
          "1317:   if (e) goto err_exit;",
          "1318:  }",
          "1319:  if (!stbl->SampleDescription) {",
          "",
          "[Removed Lines]",
          "1316:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) stbl);",
          "",
          "[Added Lines]",
          "1319:   e = minf_on_child_box((GF_Box*)minf, (GF_Box *) stbl, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1385:   if (!trak->References) {",
          "1386:    tref = (GF_TrackReferenceBox *) gf_isom_box_new_parent(&trak->child_boxes, GF_ISOM_BOX_TYPE_TREF);",
          "1387:    if (!tref) return GF_OUT_OF_MEM;",
          "1389:    if (e) return e;",
          "1390:   }",
          "1391:   tref = trak->References;",
          "",
          "[Removed Lines]",
          "1388:    e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref);",
          "",
          "[Added Lines]",
          "1391:    e = trak_on_child_box((GF_Box*)trak, (GF_Box *)tref, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1629:    trak->Media->information->sampleTable->SampleDescription->child_boxes = gf_list_new();",
          "1630:   gf_list_add(trak->Media->information->sampleTable->SampleDescription->child_boxes, entry);",
          "1633:   if (e) return e;",
          "1634:   if(outStreamIndex) *outStreamIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->child_boxes);",
          "1635:  }",
          "",
          "[Removed Lines]",
          "1632:   e = stsd_on_child_box((GF_Box*)trak->Media->information->sampleTable->SampleDescription, (GF_Box *) entry);",
          "",
          "[Added Lines]",
          "1635:   e = stsd_on_child_box((GF_Box*)trak->Media->information->sampleTable->SampleDescription, (GF_Box *) entry, GF_FALSE);",
          "",
          "---------------"
        ],
        "src/media_tools/webvtt.c||src/media_tools/webvtt.c": [
          "File: src/media_tools/webvtt.c -> src/media_tools/webvtt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  return GF_OK;",
          "144: }",
          "147: {",
          "150:  case GF_ISOM_BOX_TYPE_CTIM:",
          "152:   break;",
          "153:  case GF_ISOM_BOX_TYPE_IDEN:",
          "155:   break;",
          "156:  case GF_ISOM_BOX_TYPE_STTG:",
          "158:   break;",
          "159:  case GF_ISOM_BOX_TYPE_PAYL:",
          "161:   break;",
          "162:  }",
          "163:  return GF_OK;",
          "",
          "[Removed Lines]",
          "146: static GF_Err vtcu_Add(GF_Box *s, GF_Box *box)",
          "148:  GF_VTTCueBox *cuebox = (GF_VTTCueBox *)s;",
          "149:  switch(box->type) {",
          "151:   cuebox->time = (GF_StringBox *)box;",
          "154:   cuebox->id = (GF_StringBox *)box;",
          "157:   cuebox->settings = (GF_StringBox *)box;",
          "160:   cuebox->payload = (GF_StringBox *)box;",
          "",
          "[Added Lines]",
          "147: GF_Err vtcu_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "149:  GF_VTTCueBox *ptr = (GF_VTTCueBox *)s;",
          "150:  switch (a->type) {",
          "152:   BOX_FIELD_ASSIGN(time, GF_StringBox);",
          "155:   BOX_FIELD_ASSIGN(id, GF_StringBox);",
          "158:   BOX_FIELD_ASSIGN(settings, GF_StringBox);",
          "161:   BOX_FIELD_ASSIGN(payload, GF_StringBox);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: GF_Err vtcu_box_read(GF_Box *s, GF_BitStream *bs)",
          "167: {",
          "169: }",
          "171: GF_Err vtte_box_read(GF_Box *s, GF_BitStream *bs)",
          "172: {",
          "174: }",
          "177: {",
          "180:  case GF_ISOM_BOX_TYPE_VTTC_CONFIG:",
          "182:   break;",
          "183:  }",
          "184:  return GF_OK;",
          "",
          "[Removed Lines]",
          "168:  return gf_isom_box_array_read(s, bs, vtcu_Add);",
          "173:  return gf_isom_box_array_read(s, bs, NULL);",
          "176: static GF_Err wvtt_Add(GF_Box *s, GF_Box *box)",
          "178:  GF_WebVTTSampleEntryBox *wvtt = (GF_WebVTTSampleEntryBox *)s;",
          "179:  switch(box->type) {",
          "181:   wvtt->config = (GF_StringBox *)box;",
          "",
          "[Added Lines]",
          "169:  return gf_isom_box_array_read(s, bs);",
          "174:  return gf_isom_box_array_read(s, bs);",
          "177: GF_Err wvtt_on_child_box(GF_Box *s, GF_Box *a, Bool is_rem)",
          "179:  GF_WebVTTSampleEntryBox *ptr = (GF_WebVTTSampleEntryBox *)s;",
          "180:  switch (a->type) {",
          "182:   BOX_FIELD_ASSIGN(config, GF_StringBox);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:  if (e) return e;",
          "194:  wvtt->size -= 8;",
          "196: }",
          "198: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "195:  return gf_isom_box_array_read(s, bs, wvtt_Add);",
          "",
          "[Added Lines]",
          "196:  return gf_isom_box_array_read(s, bs);",
          "",
          "---------------"
        ],
        "src/utils/os_config_init.c||src/utils/os_config_init.c": [
          "File: src/utils/os_config_init.c -> src/utils/os_config_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1201:  \"- desktop: desktop device\", NULL, NULL, GF_ARG_STRING, GF_ARG_HINT_HIDE|GF_ARG_SUBSYS_CORE),",
          "1203:  GF_DEF_ARG(\"bs-cache-size\", NULL, \"cache size for bitstream read and write from file (0 disable cache, slower IOs)\", \"512\", NULL, GF_ARG_INT, GF_ARG_HINT_EXPERT|GF_ARG_SUBSYS_CORE),",
          "1204:  GF_DEF_ARG(\"cache\", NULL, \"cache directory location\", NULL, NULL, GF_ARG_STRING, GF_ARG_HINT_ADVANCED|GF_ARG_SUBSYS_HTTP),",
          "1205:  GF_DEF_ARG(\"proxy-on\", NULL, \"enable HTTP proxy\", NULL, NULL, GF_ARG_BOOL, GF_ARG_HINT_ADVANCED|GF_ARG_SUBSYS_HTTP),",
          "1206:  GF_DEF_ARG(\"proxy-name\", NULL, \"set HTTP proxy address\", NULL, NULL, GF_ARG_STRING, GF_ARG_HINT_ADVANCED|GF_ARG_SUBSYS_HTTP),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1204:  GF_DEF_ARG(\"no-check\", NULL, \"disable compliancy tests for inputs (ISOBMFF for now). This will likely result in random crashes\", NULL, NULL, GF_ARG_BOOL, GF_ARG_HINT_EXPERT|GF_ARG_SUBSYS_CORE),",
          "",
          "---------------"
        ]
      }
    }
  ]
}