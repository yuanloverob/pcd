{
  "cve_id": "CVE-2017-2616",
  "cve_desc": "A race condition was found in util-linux before 2.32.1 in the way su handled the management of child processes. A local authenticated attacker could use this flaw to kill other processes with root privileges under specific conditions.",
  "repo": "karelzak/util-linux",
  "patch_hash": "dffab154d29a288aa171ff50263ecc8f2e14a891",
  "patch_info": {
    "commit_hash": "dffab154d29a288aa171ff50263ecc8f2e14a891",
    "repo": "karelzak/util-linux",
    "commit_url": "https://github.com/karelzak/util-linux/commit/dffab154d29a288aa171ff50263ecc8f2e14a891",
    "files": [
      "login-utils/su-common.c"
    ],
    "message": "su: properly clear child PID\n\nReported-by: Tobias St\u00f6ckmann <tobias@stoeckmann.org>\nSigned-off-by: Karel Zak <kzak@redhat.com>",
    "before_after_code_files": [
      "login-utils/su-common.c||login-utils/su-common.c"
    ]
  },
  "patch_diff": {
    "login-utils/su-common.c||login-utils/su-common.c": [
      "File: login-utils/su-common.c -> login-utils/su-common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368:             }",
      "369:           else",
      "370:             status = WEXITSTATUS (status);",
      "371:         }",
      "372:       else if (caught_signal)",
      "373:         status = caught_signal + 128;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:    child = (pid_t) -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "377:   else",
      "378:     status = 1;",
      "381:     {",
      "382:       fprintf (stderr, _(\"\\nSession terminated, killing shell...\"));",
      "383:       kill (child, SIGTERM);",
      "",
      "[Removed Lines]",
      "380:   if (caught_signal)",
      "",
      "[Added Lines]",
      "383:   if (caught_signal && child != (pid_t)-1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "388:   if (caught_signal)",
      "389:     {",
      "",
      "[Removed Lines]",
      "390:       sleep (2);",
      "391:       kill (child, SIGKILL);",
      "392:       fprintf (stderr, _(\" ...killed.\\n\"));",
      "",
      "[Added Lines]",
      "393:       if (child != (pid_t)-1)",
      "394:  {",
      "395:    sleep (2);",
      "396:    kill (child, SIGKILL);",
      "397:    fprintf (stderr, _(\" ...killed.\\n\"));",
      "398:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b09e7ea851839c97aca8de903c8c5b62e21d4978",
      "candidate_info": {
        "commit_hash": "b09e7ea851839c97aca8de903c8c5b62e21d4978",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/b09e7ea851839c97aca8de903c8c5b62e21d4978",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: add wait_for_child()\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:   su->pam_has_session = 1;",
          "321: }",
          "324: static void create_watching_parent(struct su_context *su)",
          "325: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: static pid_t wait_for_child(pid_t child, int *rc)",
          "324: {",
          "325:  pid_t pid;",
          "326:  int status = 0;",
          "328:  DBG(SIG, ul_debug(\"waiting for child [%d]...\", child));",
          "329:  for (;;) {",
          "330:   pid = waitpid(child, &status, WUNTRACED);",
          "332:   if (pid != (pid_t) - 1 && WIFSTOPPED(status)) {",
          "333:    kill(getpid(), SIGSTOP);",
          "335:    kill(pid, SIGCONT);",
          "336:   } else",
          "337:    break;",
          "338:  }",
          "339:  if (pid != (pid_t) - 1) {",
          "340:   if (WIFSIGNALED(status)) {",
          "341:    fprintf(stderr, \"%s%s\\n\",",
          "342:     strsignal(WTERMSIG(status)),",
          "343:     WCOREDUMP(status) ? _(\" (core dumped)\")",
          "344:     : \"\");",
          "345:    status = WTERMSIG(status) + 128;",
          "346:   } else",
          "347:    status = WEXITSTATUS(status);",
          "348:  } else if (caught_signal)",
          "349:   status = caught_signal + 128;",
          "350:  else",
          "351:   status = 1;",
          "353:  DBG(SIG, ul_debug(\"child %d is dead [status=%d]\", child, status));",
          "357:  return child;",
          "358: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:  }",
          "",
          "[Removed Lines]",
          "356:  DBG(SIG, ul_debug(\"initialize signals\"));",
          "357:  memset(oldact, 0, sizeof(oldact));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "371:  sigfillset(&ourset);",
          "372:  if (sigprocmask(SIG_BLOCK, &ourset, NULL)) {",
          "373:   warn(_(\"cannot block signals\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:  DBG(SIG, ul_debug(\"initialize signals\"));",
          "405:  memset(oldact, 0, sizeof(oldact));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:   status = 1;",
          "465:  if (caught_signal && child != (pid_t)-1) {",
          "",
          "[Removed Lines]",
          "432:  if (!caught_signal) {",
          "433:   pid_t pid;",
          "435:   DBG(SIG, ul_debug(\"waiting for child [%d]...\", child));",
          "436:   for (;;) {",
          "437:    pid = waitpid(child, &status, WUNTRACED);",
          "439:    if (pid != (pid_t) - 1 && WIFSTOPPED(status)) {",
          "440:     kill(getpid(), SIGSTOP);",
          "442:     kill(pid, SIGCONT);",
          "443:    } else",
          "444:     break;",
          "445:   }",
          "446:   if (pid != (pid_t) - 1) {",
          "447:    if (WIFSIGNALED(status)) {",
          "448:     fprintf(stderr, \"%s%s\\n\",",
          "449:      strsignal(WTERMSIG(status)),",
          "450:      WCOREDUMP(status) ? _(\" (core dumped)\")",
          "451:      : \"\");",
          "452:     status = WTERMSIG(status) + 128;",
          "453:    } else",
          "454:     status = WEXITSTATUS(status);",
          "455:   } else if (caught_signal)",
          "456:    status = caught_signal + 128;",
          "457:   else",
          "458:    status = 1;",
          "460:   DBG(SIG, ul_debug(\"child %d is dead [status=%d]\", child, status));",
          "462:  } else",
          "",
          "[Added Lines]",
          "468:  if (!caught_signal)",
          "469:   child = wait_for_child(child, &status);",
          "470:  else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "242708de5b7a0aa530869c757a8a38b97f06a1ba",
      "candidate_info": {
        "commit_hash": "242708de5b7a0aa530869c757a8a38b97f06a1ba",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/242708de5b7a0aa530869c757a8a38b97f06a1ba",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: improve some debug messages\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:  if (!caught_signal) {",
          "394:   pid_t pid;",
          "397:   for (;;) {",
          "398:    pid = waitpid(child, &status, WUNTRACED);",
          "",
          "[Removed Lines]",
          "396:   DBG(SIG, ul_debug(\"waiting for child\"));",
          "",
          "[Added Lines]",
          "396:   DBG(SIG, ul_debug(\"waiting for child [%d]...\", child));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:  size_t argno = 1;",
          "580:  int rc;",
          "584:  if (su->simulate_login) {",
          "585:   char *arg0;",
          "",
          "[Removed Lines]",
          "582:  DBG(MISC, ul_debug(\"starting shell [shell=%s, command=%s]\", shell, command));",
          "",
          "[Added Lines]",
          "582:  DBG(MISC, ul_debug(\"starting shell [shell=%s, command=\\\"%s\\\"%s%s]\",",
          "583:     shell, command,",
          "584:     su->simulate_login ? \" login\" : \"\",",
          "585:     su->fast_startup ? \" fast-start\" : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:   }",
          "624:  }",
          "625:  endusershell();",
          "626:  return true;",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:  DBG(MISC, ul_debug(\"%s is restricted shell (not in /etc/shells)\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "832f5cd5241e14cf85ae9a40e99636a713ec4859",
      "candidate_info": {
        "commit_hash": "832f5cd5241e14cf85ae9a40e99636a713ec4859",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/832f5cd5241e14cf85ae9a40e99636a713ec4859",
        "files": [
          "login-utils/logindefs.c",
          "login-utils/logindefs.h",
          "login-utils/su-common.c"
        ],
        "message": "su: add control struct\n\n* setup logindefs loader by function rather than by global pointer\n\n* move basic booleans to the su_context struct\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/logindefs.c||login-utils/logindefs.c",
          "login-utils/logindefs.h||login-utils/logindefs.h",
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/logindefs.c||login-utils/logindefs.c": [
          "File: login-utils/logindefs.c -> login-utils/logindefs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static struct item *list = NULL;",
          "53: void free_getlogindefs_data(void)",
          "54: {",
          "",
          "[Removed Lines]",
          "51: void (*logindefs_load_defaults)(void) = NULL;",
          "",
          "[Added Lines]",
          "51: static void (*logindefs_loader)(void *) = NULL;",
          "52: static void *logindefs_loader_data = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:  fclose(f);",
          "145: }",
          "147: static void load_defaults(void)",
          "148: {",
          "151:  else",
          "152:   logindefs_load_file(_PATH_LOGINDEFS);",
          "153: }",
          "",
          "[Removed Lines]",
          "149:  if (logindefs_load_defaults)",
          "150:   logindefs_load_defaults();",
          "",
          "[Added Lines]",
          "148: void logindefs_set_loader(void (*loader)(void *data), void *data)",
          "149: {",
          "150:  logindefs_loader = loader;",
          "151:  logindefs_loader_data = data;",
          "152: }",
          "156:  if (logindefs_loader)",
          "157:   logindefs_loader(logindefs_loader_data);",
          "",
          "---------------"
        ],
        "login-utils/logindefs.h||login-utils/logindefs.h": [
          "File: login-utils/logindefs.h -> login-utils/logindefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define UTIL_LINUX_LOGINDEFS_H",
          "4: extern void logindefs_load_file(const char *filename);",
          "6: extern int getlogindefs_bool(const char *name, int dflt);",
          "7: extern unsigned long getlogindefs_num(const char *name, long dflt);",
          "8: extern const char *getlogindefs_str(const char *name, const char *dflt);",
          "",
          "[Removed Lines]",
          "5: extern void (*logindefs_load_defaults)(void);",
          "",
          "[Added Lines]",
          "5: extern void logindefs_set_loader(void (*loader)(void *data), void *data);",
          "",
          "---------------"
        ],
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  EXIT_ENOENT = 127",
          "81: };",
          "106: static sig_atomic_t volatile caught_signal = false;",
          "111: static const struct passwd *",
          "112: current_getpwuid(void)",
          "",
          "[Removed Lines]",
          "83: static void run_shell(char const *, char const *, char **, size_t)",
          "84:     __attribute__ ((__noreturn__));",
          "87: static bool fast_startup;",
          "90: static bool simulate_login;",
          "93: static bool change_environment;",
          "96: static int same_session = 0;",
          "99: static int su_mode;",
          "102: static int suppress_pam_info;",
          "104: static bool _pam_session_opened;",
          "105: static bool _pam_cred_established;",
          "107: static pam_handle_t *pamh = NULL;",
          "",
          "[Added Lines]",
          "86: struct su_context {",
          "99: };",
          "102: static void run_shell(struct su_context *, char const *, char const *, char **, size_t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: static void",
          "135: {",
          "136:  const char *new_user, *old_user, *tty;",
          "",
          "[Removed Lines]",
          "134: log_syslog(struct passwd const * const pw, const bool successful)",
          "",
          "[Added Lines]",
          "130: log_syslog(struct su_context *su, struct passwd const *pw, bool successful)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:  openlog(program_invocation_short_name, 0, LOG_AUTH);",
          "153:  syslog(LOG_NOTICE, \"%s(to %s) %s on %s\",",
          "154:         successful ? \"\" :",
          "156:         new_user, old_user, tty);",
          "157:  closelog();",
          "158: }",
          "",
          "[Removed Lines]",
          "155:         su_mode == RUNUSER_MODE ? \"FAILED RUNUSER \" : \"FAILED SU \",",
          "",
          "[Added Lines]",
          "151:         su->runuser ? \"FAILED RUNUSER \" : \"FAILED SU \",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191: su_pam_conv(int num_msg, const struct pam_message **msg,",
          "192:      struct pam_response **resp, void *appdata_ptr)",
          "193: {",
          "195:      && num_msg == 1 && msg && msg[0]->msg_style == PAM_TEXT_INFO)",
          "196:   return PAM_SUCCESS;",
          "197: #ifdef HAVE_SECURITY_PAM_MISC_H",
          "198:  return misc_conv(num_msg, msg, resp, appdata_ptr);",
          "199: #elif defined(HAVE_SECURITY_OPENPAM_H)",
          "",
          "[Removed Lines]",
          "194:  if (suppress_pam_info",
          "",
          "[Added Lines]",
          "190:  struct su_context *su = (struct su_context *) appdata_ptr;",
          "192:  if (su->suppress_pam_info",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201: #endif",
          "202: }",
          "209: static void",
          "211: {",
          "212:  const int saved_errno = errno;",
          "222:  errno = saved_errno;",
          "223: }",
          "",
          "[Removed Lines]",
          "204: static struct pam_conv conv = {",
          "205:  su_pam_conv,",
          "206:  NULL",
          "207: };",
          "210: cleanup_pam(const int retcode)",
          "214:  if (_pam_session_opened)",
          "215:   pam_close_session(pamh, 0);",
          "217:  if (_pam_cred_established)",
          "218:   pam_setcred(pamh, PAM_DELETE_CRED | PAM_SILENT);",
          "220:  pam_end(pamh, retcode);",
          "",
          "[Added Lines]",
          "204: cleanup_pam(struct su_context *su, int retcode)",
          "208:  if (su->pam_has_session)",
          "209:   pam_close_session(su->pamh, 0);",
          "211:  if (su->pam_has_cred)",
          "212:   pam_setcred(su->pamh, PAM_DELETE_CRED | PAM_SILENT);",
          "214:  pam_end(su->pamh, retcode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233: static void",
          "235: {",
          "236:  char **env;",
          "240:  while (env && *env) {",
          "241:   if (putenv(*env) != 0)",
          "242:    err(EXIT_FAILURE, NULL);",
          "",
          "[Removed Lines]",
          "234: export_pamenv(void)",
          "239:  env = pam_getenvlist(pamh);",
          "",
          "[Added Lines]",
          "228: export_pamenv(struct su_context *su)",
          "233:  env = pam_getenvlist(su->pamh);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245: }",
          "247: static void",
          "249: {",
          "250:  pid_t child;",
          "251:  sigset_t ourset;",
          "",
          "[Removed Lines]",
          "248: create_watching_parent(void)",
          "",
          "[Added Lines]",
          "242: create_watching_parent(struct su_context *su)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "253:  int status = 0;",
          "254:  int retval;",
          "257:  if (is_pam_failure(retval)) {",
          "259:   errx(EXIT_FAILURE, _(\"cannot open session: %s\"),",
          "261:  } else",
          "264:  memset(oldact, 0, sizeof(oldact));",
          "266:  child = fork();",
          "267:  if (child == (pid_t) - 1) {",
          "269:   err(EXIT_FAILURE, _(\"cannot create child process\"));",
          "270:  }",
          "",
          "[Removed Lines]",
          "256:  retval = pam_open_session(pamh, 0);",
          "258:   cleanup_pam(retval);",
          "260:        pam_strerror(pamh, retval));",
          "262:   _pam_session_opened = 1;",
          "268:   cleanup_pam(PAM_ABORT);",
          "",
          "[Added Lines]",
          "250:  retval = pam_open_session(su->pamh, 0);",
          "252:   cleanup_pam(su, retval);",
          "254:        pam_strerror(su->pamh, retval));",
          "256:   su->pam_has_session = 1;",
          "262:   cleanup_pam(su, PAM_ABORT);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "291:   sigemptyset(&action.sa_mask);",
          "292:   action.sa_flags = 0;",
          "293:   sigemptyset(&ourset);",
          "295:    if (sigaddset(&ourset, SIGINT)",
          "296:        || sigaddset(&ourset, SIGQUIT)) {",
          "297:     warn(_(\"cannot set signal handler\"));",
          "",
          "[Removed Lines]",
          "294:   if (!same_session) {",
          "",
          "[Added Lines]",
          "288:   if (!su->same_session) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "307:    warn(_(\"cannot set signal handler\"));",
          "308:    caught_signal = true;",
          "309:   }",
          "311:       && (sigaction(SIGINT, &action, &oldact[1])",
          "312:    || sigaction(SIGQUIT, &action, &oldact[2]))) {",
          "313:    warn(_(\"cannot set signal handler\"));",
          "",
          "[Removed Lines]",
          "310:   if (!caught_signal && !same_session",
          "",
          "[Added Lines]",
          "304:   if (!caught_signal && !su->same_session",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "347:   kill(child, SIGTERM);",
          "348:  }",
          "352:  if (caught_signal) {",
          "353:   sleep(2);",
          "",
          "[Removed Lines]",
          "350:  cleanup_pam(PAM_SUCCESS);",
          "",
          "[Added Lines]",
          "344:  cleanup_pam(su, PAM_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "382: }",
          "384: static void",
          "386: {",
          "387:  const struct passwd *lpw = NULL;",
          "388:  const char *cp, *srvname = NULL;",
          "389:  int retval;",
          "406:  if (is_pam_failure(retval))",
          "407:   goto done;",
          "",
          "[Removed Lines]",
          "385: authenticate(const struct passwd *pw)",
          "391:  switch (su_mode) {",
          "392:  case SU_MODE:",
          "393:   srvname = simulate_login ? PAM_SRVNAME_SU_L : PAM_SRVNAME_SU;",
          "394:   break;",
          "395:  case RUNUSER_MODE:",
          "396:   srvname =",
          "397:       simulate_login ? PAM_SRVNAME_RUNUSER_L :",
          "398:       PAM_SRVNAME_RUNUSER;",
          "399:   break;",
          "400:  default:",
          "401:   abort();",
          "402:   break;",
          "403:  }",
          "405:  retval = pam_start(srvname, pw->pw_name, &conv, &pamh);",
          "",
          "[Added Lines]",
          "379: authenticate(struct su_context *su, const struct passwd *pw)",
          "385:  srvname = su->runuser ?",
          "386:      (su->simulate_login ? PAM_SRVNAME_RUNUSER_L : PAM_SRVNAME_RUNUSER) :",
          "387:      (su->simulate_login ? PAM_SRVNAME_SU_L : PAM_SRVNAME_SU);",
          "389:  retval = pam_start(srvname, pw->pw_name, &su->conv, &su->pamh);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "413:    tty = cp + 5;",
          "414:   else",
          "415:    tty = cp;",
          "417:   if (is_pam_failure(retval))",
          "418:    goto done;",
          "419:  }",
          "421:  lpw = current_getpwuid();",
          "422:  if (lpw && lpw->pw_name) {",
          "425:   if (is_pam_failure(retval))",
          "426:    goto done;",
          "427:  }",
          "437:   return;",
          "438:  }",
          "441:  if (is_pam_failure(retval))",
          "442:   goto done;",
          "445:  if (retval == PAM_NEW_AUTHTOK_REQD) {",
          "448:  }",
          "450:  done:",
          "454:  if (is_pam_failure(retval)) {",
          "455:   const char *msg;",
          "457:   log_btmp(pw);",
          "461:   sleep(getlogindefs_num(\"FAIL_DELAY\", 1));",
          "462:   errx(EXIT_FAILURE, \"%s\", msg ? msg : _(\"incorrect password\"));",
          "463:  }",
          "",
          "[Removed Lines]",
          "416:   retval = pam_set_item(pamh, PAM_TTY, tty);",
          "423:   retval =",
          "424:       pam_set_item(pamh, PAM_RUSER, (const void *)lpw->pw_name);",
          "429:  if (su_mode == RUNUSER_MODE) {",
          "434:   if (restricted)",
          "435:    errx(EXIT_FAILURE,",
          "436:         _(\"may not be used by non-root users\"));",
          "440:  retval = pam_authenticate(pamh, 0);",
          "444:  retval = pam_acct_mgmt(pamh, 0);",
          "447:   retval = pam_chauthtok(pamh, PAM_CHANGE_EXPIRED_AUTHTOK);",
          "452:  log_syslog(pw, !is_pam_failure(retval));",
          "459:   msg = pam_strerror(pamh, retval);",
          "460:   pam_end(pamh, retval);",
          "",
          "[Added Lines]",
          "400:   retval = pam_set_item(su->pamh, PAM_TTY, tty);",
          "407:   retval = pam_set_item(su->pamh, PAM_RUSER, (const void *)lpw->pw_name);",
          "412:  if (su->runuser) {",
          "417:   if (su->restricted)",
          "418:    errx(EXIT_FAILURE, _(\"may not be used by non-root users\"));",
          "422:  retval = pam_authenticate(su->pamh, 0);",
          "426:  retval = pam_acct_mgmt(su->pamh, 0);",
          "429:   retval = pam_chauthtok(su->pamh, PAM_CHANGE_EXPIRED_AUTHTOK);",
          "434:  log_syslog(su, pw, !is_pam_failure(retval));",
          "441:   msg = pam_strerror(su->pamh, retval);",
          "442:   pam_end(su->pamh, retval);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "484: static void",
          "486: {",
          "490:   char *term = getenv(\"TERM\");",
          "",
          "[Removed Lines]",
          "485: modify_environment (const struct passwd * const pw, const char * const shell)",
          "487:  if (simulate_login) {",
          "",
          "[Added Lines]",
          "467: modify_environment(struct su_context *su, const struct passwd *pw, const char *shell)",
          "469:  if (su->simulate_login) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "505:  } else {",
          "509:    xsetenv(\"HOME\", pw->pw_dir, 1);",
          "510:    if (shell)",
          "511:     xsetenv(\"SHELL\", shell, 1);",
          "",
          "[Removed Lines]",
          "508:   if (change_environment) {",
          "",
          "[Added Lines]",
          "490:   if (su->change_environment) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "519:   }",
          "520:  }",
          "523: }",
          "527: static void",
          "529: {",
          "530:  int retval;",
          "",
          "[Removed Lines]",
          "522:  export_pamenv();",
          "528: init_groups (const struct passwd * const pw, const gid_t * const groups, const size_t num_groups)",
          "",
          "[Added Lines]",
          "504:  export_pamenv(su);",
          "510: init_groups(struct su_context *su, const struct passwd *pw, gid_t * groups, size_t num_groups)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "537:   retval = initgroups(pw->pw_name, pw->pw_gid);",
          "539:  if (retval == -1) {",
          "541:   err(EXIT_FAILURE, _(\"cannot set groups\"));",
          "542:  }",
          "543:  endgrent();",
          "546:  if (is_pam_failure(retval))",
          "548:  else",
          "550: }",
          "552: static void",
          "",
          "[Removed Lines]",
          "540:   cleanup_pam(PAM_ABORT);",
          "545:  retval = pam_setcred(pamh, PAM_ESTABLISH_CRED);",
          "547:   errx(EXIT_FAILURE, \"%s\", pam_strerror(pamh, retval));",
          "549:   _pam_cred_established = 1;",
          "",
          "[Added Lines]",
          "522:   cleanup_pam(su, PAM_ABORT);",
          "527:  retval = pam_setcred(su->pamh, PAM_ESTABLISH_CRED);",
          "529:   errx(EXIT_FAILURE, \"%s\", pam_strerror(su->pamh, retval));",
          "531:   su->pam_has_cred = 1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "566: static void",
          "569: {",
          "570:  size_t n_args =",
          "572:  char const **args = xcalloc(n_args, sizeof *args);",
          "573:  size_t argno = 1;",
          "576:   char *arg0;",
          "577:   char *shell_basename;",
          "",
          "[Removed Lines]",
          "567: run_shell (char const * const shell, char const * const command, char ** const additional_args,",
          "568:     const size_t n_additional_args)",
          "571:      1 + fast_startup + 2 * ! !command + n_additional_args + 1;",
          "575:  if (simulate_login) {",
          "",
          "[Added Lines]",
          "549: run_shell(struct su_context *su,",
          "550:    char const *shell, char const *command, char **additional_args,",
          "551:    size_t n_additional_args)",
          "554:      1 + su->fast_startup + 2 * ! !command + n_additional_args + 1;",
          "558:  if (su->simulate_login) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "583:   args[0] = arg0;",
          "584:  } else",
          "585:   args[0] = basename(shell);",
          "587:   args[argno++] = \"-f\";",
          "588:  if (command) {",
          "589:   args[argno++] = \"-c\";",
          "",
          "[Removed Lines]",
          "586:  if (fast_startup)",
          "",
          "[Added Lines]",
          "569:  if (su->fast_startup)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "620:  return true;",
          "621: }",
          "625: {",
          "627:   fputs(USAGE_HEADER, stdout);",
          "628:   printf(_(\" %s [options] -u <user> <command>\\n\"),",
          "629:          program_invocation_short_name);",
          "",
          "[Removed Lines]",
          "624: static void __attribute__ ((__noreturn__)) usage(int status)",
          "626:  if (su_mode == RUNUSER_MODE) {",
          "",
          "[Added Lines]",
          "606: static void __attribute__ ((__noreturn__)) usage(int status, int mode)",
          "608:  if (mode == RUNUSER_MODE) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "682:  fputs(USAGE_SEPARATOR, stdout);",
          "683:  printf(USAGE_HELP_OPTIONS(22));",
          "685:  exit(status);",
          "686: }",
          "690: {",
          "700:  logindefs_load_file(_PATH_LOGINDEFS);",
          "701: }",
          "",
          "[Removed Lines]",
          "684:  printf(USAGE_MAN_TAIL(su_mode == SU_MODE ? \"su(1)\" : \"runuser(1)\"));",
          "688: static void",
          "689: load_config(void)",
          "691:  switch (su_mode) {",
          "692:  case SU_MODE:",
          "693:   logindefs_load_file(_PATH_LOGINDEFS_SU);",
          "694:   break;",
          "695:  case RUNUSER_MODE:",
          "696:   logindefs_load_file(_PATH_LOGINDEFS_RUNUSER);",
          "697:   break;",
          "698:  }",
          "",
          "[Added Lines]",
          "666:  printf(USAGE_MAN_TAIL(mode == SU_MODE ? \"su(1)\" : \"runuser(1)\"));",
          "670: static void load_config(void *data)",
          "672:  struct su_context *su = (struct su_context *) data;",
          "674:  logindefs_load_file(su->runuser ? _PATH_LOGINDEFS_RUNUSER : _PATH_LOGINDEFS_SU);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "739: int",
          "740: su_main(int argc, char **argv, int mode)",
          "741: {",
          "742:  int optc;",
          "743:  const char *new_user = DEFAULT_USER, *runuser_user = NULL;",
          "744:  char *command = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:  struct su_context _su = {",
          "718:   .conv   = { su_pam_conv, NULL },",
          "719:   .runuser  = (mode == RUNUSER_MODE ? 1 : 0),",
          "720:   .change_environment = 1",
          "721:  }, *su = &_su;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "773:  textdomain(PACKAGE);",
          "774:  atexit(close_stdout);",
          "781:  while ((optc =",
          "782:   getopt_long(argc, argv, \"c:fg:G:lmps:u:hV\", longopts,",
          "",
          "[Removed Lines]",
          "776:  su_mode = mode;",
          "777:  fast_startup = false;",
          "778:  simulate_login = false;",
          "779:  change_environment = true;",
          "",
          "[Added Lines]",
          "757:  su->conv.appdata_ptr = (void *) su;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "792:    break;",
          "794:   case 'f':",
          "796:    break;",
          "798:   case 'g':",
          "",
          "[Removed Lines]",
          "795:    fast_startup = true;",
          "",
          "[Added Lines]",
          "773:    su->fast_startup = true;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "806:    break;",
          "808:   case 'l':",
          "810:    break;",
          "812:   case 'm':",
          "813:   case 'p':",
          "815:    break;",
          "817:   case 's':",
          "",
          "[Removed Lines]",
          "809:    simulate_login = true;",
          "814:    change_environment = false;",
          "",
          "[Added Lines]",
          "787:    su->simulate_login = true;",
          "792:    su->change_environment = false;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "819:    break;",
          "821:   case 'u':",
          "824:    runuser_user = optarg;",
          "825:    break;",
          "827:   case 'h':",
          "830:   case 'V':",
          "831:    printf(UTIL_LINUX_VERSION);",
          "832:    exit(EXIT_SUCCESS);",
          "834:   default:",
          "836:   }",
          "837:  }",
          "841:  if (optind < argc && !strcmp(argv[optind], \"-\")) {",
          "843:   ++optind;",
          "844:  }",
          "847:   warnx(_",
          "848:         (\"ignoring --preserve-environment, it's mutually exclusive with --login\"));",
          "850:  }",
          "853:  case RUNUSER_MODE:",
          "854:   if (runuser_user) {",
          "856:    new_user = runuser_user;",
          "858:     errx(EXIT_FAILURE,",
          "859:          _",
          "860:          (\"options --{shell,fast,command,session-command,login} and \"",
          "",
          "[Removed Lines]",
          "822:    if (su_mode != RUNUSER_MODE)",
          "823:     usage(EXIT_FAILURE);",
          "828:    usage(0);",
          "835:    usage(EXIT_FAILURE);",
          "839:  restricted = evaluate_uid();",
          "842:   simulate_login = true;",
          "846:  if (simulate_login && !change_environment) {",
          "849:   change_environment = true;",
          "852:  switch (su_mode) {",
          "857:    if (shell || fast_startup || command || simulate_login) {",
          "",
          "[Added Lines]",
          "800:    if (!su->runuser)",
          "801:     usage(mode, EXIT_FAILURE);",
          "806:    usage(mode, 0);",
          "813:    usage(mode, EXIT_FAILURE);",
          "817:  su->restricted = evaluate_uid();",
          "820:   su->simulate_login = true;",
          "824:  if (su->simulate_login && !su->change_environment) {",
          "827:   su->change_environment = true;",
          "830:  switch (mode) {",
          "835:    if (shell || su->fast_startup || command || su->simulate_login) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "875:   break;",
          "876:  }",
          "879:   errx(EXIT_FAILURE,",
          "880:        _(\"only root can specify alternative groups\"));",
          "884:  pw = getpwnam(new_user);",
          "885:  if (!(pw && pw->pw_name && pw->pw_name[0] && pw->pw_dir && pw->pw_dir[0]",
          "",
          "[Removed Lines]",
          "878:  if ((use_supp || use_gid) && restricted)",
          "882:  logindefs_load_defaults = load_config;",
          "",
          "[Added Lines]",
          "856:  if ((use_supp || use_gid) && su->restricted)",
          "860:  logindefs_set_loader(load_config, (void *) su);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "906:  else if (use_gid)",
          "907:   pw->pw_gid = gid;",
          "911:  if (request_same_session || !command || !pw->pw_uid)",
          "915:  if (runuser_user) {",
          "916:   shell = NULL;",
          "917:  } else {",
          "919:    shell = getenv(\"SHELL\");",
          "920:   if (shell && getuid() != 0 && restricted_shell(pw->pw_shell)) {",
          "",
          "[Removed Lines]",
          "909:  authenticate(pw);",
          "912:   same_session = 1;",
          "918:   if (!shell && !change_environment)",
          "",
          "[Added Lines]",
          "887:  authenticate(su, pw);",
          "890:   su->same_session = 1;",
          "896:   if (!shell && !su->change_environment)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "928:   shell = xstrdup(shell ? shell : pw->pw_shell);",
          "929:  }",
          "939:  change_identity(pw);",
          "941:   setsid();",
          "949:   warn(_(\"warning: cannot change directory to %s\"), pw->pw_dir);",
          "951:  if (shell)",
          "957: }",
          "",
          "[Removed Lines]",
          "931:  init_groups(pw, groups, ngroups);",
          "933:  if (!simulate_login || command)",
          "936:  create_watching_parent();",
          "940:  if (!same_session)",
          "946:  modify_environment(pw, shell);",
          "948:  if (simulate_login && chdir(pw->pw_dir) != 0)",
          "952:   run_shell(shell, command, argv + optind, max(0, argc - optind));",
          "953:  else {",
          "954:   execvp(argv[optind], &argv[optind]);",
          "955:   err(EXIT_FAILURE, _(\"failed to execute %s\"), argv[optind]);",
          "956:  }",
          "",
          "[Added Lines]",
          "909:  init_groups(su, pw, groups, ngroups);",
          "911:  if (!su->simulate_login || command)",
          "914:  create_watching_parent(su);",
          "918:  if (!su->same_session)",
          "924:  modify_environment(su, pw, shell);",
          "926:  if (su->simulate_login && chdir(pw->pw_dir) != 0)",
          "930:   run_shell(su, shell, command, argv + optind, max(0, argc - optind));",
          "932:  execvp(argv[optind], &argv[optind]);",
          "933:  err(EXIT_FAILURE, _(\"failed to execute %s\"), argv[optind]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fc211d2178aad934f8d24d44dd73d060f4577e1",
      "candidate_info": {
        "commit_hash": "5fc211d2178aad934f8d24d44dd73d060f4577e1",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/5fc211d2178aad934f8d24d44dd73d060f4577e1",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: clean up signals usage\n\n- don't use magic numbers to index old actions\n- don't use if () if ()\n- make if() conditions more readable\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324: static void create_watching_parent(struct su_context *su)",
          "325: {",
          "326:  pid_t child;",
          "327:  sigset_t ourset;",
          "329:  int status = 0;",
          "331:  DBG(MISC, ul_debug(\"forking...\"));",
          "",
          "[Removed Lines]",
          "328:  struct sigaction oldact[3];",
          "",
          "[Added Lines]",
          "326:  enum {",
          "327:   SIGTERM_IDX = 0,",
          "328:   SIGINT_IDX,",
          "329:   SIGQUIT_IDX,",
          "331:   SIGNALS_IDX_COUNT",
          "332:  };",
          "333:  struct sigaction oldact[SIGNALS_IDX_COUNT];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  if (chdir(\"/\") != 0)",
          "357:   warn(_(\"cannot change directory to %s\"), \"/\");",
          "359:  sigfillset(&ourset);",
          "360:  if (sigprocmask(SIG_BLOCK, &ourset, NULL)) {",
          "361:   warn(_(\"cannot block signals\"));",
          "362:   caught_signal = true;",
          "363:  }",
          "364:  if (!caught_signal) {",
          "365:   struct sigaction action;",
          "366:   action.sa_handler = su_catch_sig;",
          "367:   sigemptyset(&action.sa_mask);",
          "368:   action.sa_flags = 0;",
          "369:   sigemptyset(&ourset);",
          "376:   }",
          "383:    warn(_(\"cannot set signal handler\"));",
          "384:    caught_signal = true;",
          "385:   }",
          "389:    warn(_(\"cannot set signal handler\"));",
          "390:    caught_signal = true;",
          "391:   }",
          "392:  }",
          "393:  if (!caught_signal) {",
          "394:   pid_t pid;",
          "",
          "[Removed Lines]",
          "370:   if (!su->same_session) {",
          "371:    if (sigaddset(&ourset, SIGINT)",
          "372:        || sigaddset(&ourset, SIGQUIT)) {",
          "373:     warn(_(\"cannot set signal handler\"));",
          "374:     caught_signal = true;",
          "375:    }",
          "377:   if (!caught_signal && (sigaddset(&ourset, SIGTERM)",
          "378:            || sigaddset(&ourset, SIGALRM)",
          "379:            || sigaction(SIGTERM, &action,",
          "380:           &oldact[0])",
          "381:            || sigprocmask(SIG_UNBLOCK, &ourset,",
          "382:             NULL))) {",
          "386:   if (!caught_signal && !su->same_session",
          "387:       && (sigaction(SIGINT, &action, &oldact[1])",
          "388:    || sigaction(SIGQUIT, &action, &oldact[2]))) {",
          "",
          "[Added Lines]",
          "387:   if (!su->same_session",
          "388:       && (sigaddset(&ourset, SIGINT)",
          "389:          || sigaddset(&ourset, SIGQUIT))) {",
          "391:    warn(_(\"cannot set signal handler\"));",
          "392:    caught_signal = true;",
          "394:   if (!caught_signal",
          "395:       && (sigaddset(&ourset, SIGTERM)",
          "396:          || sigaddset(&ourset, SIGALRM)",
          "397:          || sigaction(SIGTERM, &action, &oldact[SIGTERM_IDX])",
          "398:          || sigprocmask(SIG_UNBLOCK, &ourset, NULL))) {",
          "403:   if (!caught_signal",
          "404:       && !su->same_session",
          "405:       && (sigaction(SIGINT, &action, &oldact[SIGINT_IDX])",
          "406:          || sigaction(SIGQUIT, &action, &oldact[SIGQUIT_IDX]))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:   DBG(SIG, ul_debug(\"restore signals setting\"));",
          "448:   switch (caught_signal) {",
          "449:   case SIGTERM:",
          "451:    break;",
          "452:   case SIGINT:",
          "454:    break;",
          "455:   case SIGQUIT:",
          "457:    break;",
          "458:   default:",
          "",
          "[Removed Lines]",
          "450:    sigaction(SIGTERM, &oldact[0], NULL);",
          "453:    sigaction(SIGINT, &oldact[1], NULL);",
          "456:    sigaction(SIGQUIT, &oldact[2], NULL);",
          "",
          "[Added Lines]",
          "473:    sigaction(SIGTERM, &oldact[SIGTERM_IDX], NULL);",
          "476:    sigaction(SIGINT, &oldact[SIGINT_IDX], NULL);",
          "479:    sigaction(SIGQUIT, &oldact[SIGQUIT_IDX], NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44f36ad1ed64d5bb1f2cf6adbd3da3a2aaa5c3d9",
      "candidate_info": {
        "commit_hash": "44f36ad1ed64d5bb1f2cf6adbd3da3a2aaa5c3d9",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/44f36ad1ed64d5bb1f2cf6adbd3da3a2aaa5c3d9",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: add child to control struct\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:   su->pam_has_session = 1;",
          "321: }",
          "324: {",
          "325:  pid_t pid;",
          "326:  int status = 0;",
          "329:  for (;;) {",
          "332:   if (pid != (pid_t) - 1 && WIFSTOPPED(status)) {",
          "333:    kill(getpid(), SIGSTOP);",
          "",
          "[Removed Lines]",
          "323: static pid_t wait_for_child(pid_t child, int *rc)",
          "328:  DBG(SIG, ul_debug(\"waiting for child [%d]...\", child));",
          "330:   pid = waitpid(child, &status, WUNTRACED);",
          "",
          "[Added Lines]",
          "325: static int wait_for_child(struct su_context *su)",
          "330:  DBG(SIG, ul_debug(\"waiting for child [%d]...\", su->child));",
          "332:   pid = waitpid(su->child, &status, WUNTRACED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:  else",
          "351:   status = 1;",
          "358: }",
          "360: static void create_watching_parent(struct su_context *su)",
          "",
          "[Removed Lines]",
          "353:  DBG(SIG, ul_debug(\"child %d is dead [status=%d]\", child, status));",
          "357:  return child;",
          "",
          "[Added Lines]",
          "355:  DBG(SIG, ul_debug(\"child %d is dead [status=%d]\", su->child, status));",
          "358:  return status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:   SIGNALS_IDX_COUNT",
          "368:  };",
          "369:  struct sigaction oldact[SIGNALS_IDX_COUNT];",
          "372:  sigset_t ourset;",
          "375:  DBG(MISC, ul_debug(\"forking...\"));",
          "379:   supam_cleanup(su, PAM_ABORT);",
          "380:   err(EXIT_FAILURE, _(\"cannot create child process\"));",
          "",
          "[Removed Lines]",
          "371:  pid_t child;",
          "373:  int status = 0;",
          "377:  switch ((int) (child = fork())) {",
          "",
          "[Added Lines]",
          "372:  int status;",
          "376:  switch ((int) (su->child = fork())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "384:   return;",
          "388:   break;",
          "389:  }",
          "",
          "[Removed Lines]",
          "387:   DBG(MISC, ul_debug(\"child [pid=%d]\", (int) child));",
          "",
          "[Added Lines]",
          "386:   DBG(MISC, ul_debug(\"child [pid=%d]\", (int) su->child));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "468:  if (!caught_signal)",
          "470:  else",
          "471:   status = 1;",
          "474:   fprintf(stderr, _(\"\\nSession terminated, killing shell...\"));",
          "476:  }",
          "478:  supam_cleanup(su, PAM_SUCCESS);",
          "480:  if (caught_signal) {",
          "482:    DBG(SIG, ul_debug(\"killing child\"));",
          "483:    sleep(2);",
          "485:    fprintf(stderr, _(\" ...killed.\\n\"));",
          "486:   }",
          "",
          "[Removed Lines]",
          "469:   child = wait_for_child(child, &status);",
          "473:  if (caught_signal && child != (pid_t)-1) {",
          "475:   kill(child, SIGTERM);",
          "481:   if (child != (pid_t)-1) {",
          "484:    kill(child, SIGKILL);",
          "",
          "[Added Lines]",
          "468:   status = wait_for_child(su);",
          "472:  if (caught_signal && su->child != (pid_t)-1) {",
          "474:   kill(su->child, SIGTERM);",
          "480:   if (su->child != (pid_t)-1) {",
          "483:    kill(su->child, SIGKILL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}