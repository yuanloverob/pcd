{
  "cve_id": "CVE-2018-11358",
  "cve_desc": "In Wireshark 2.6.0, 2.4.0 to 2.4.6, and 2.2.0 to 2.2.14, the Q.931 dissector could crash. This was addressed in epan/dissectors/packet-q931.c by avoiding a use-after-free after a malformed packet prevented certain cleanup.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d08a53a7b9ebf723816f224897c68aa652589050",
  "patch_info": {
    "commit_hash": "d08a53a7b9ebf723816f224897c68aa652589050",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d08a53a7b9ebf723816f224897c68aa652589050",
    "files": [
      "epan/dissectors/packet-q931.c"
    ],
    "message": "Q.931: fix use-after-free (write) of \"q931_pi\"\n\nThe dissect_q931_number_ie (and indirectly dissect_q931_cause_ie_unsafe)\nwrite to the \"q931_pi\" structure which seems private to the q931\ndissector, but can in fact be called through other dissectors (isup) as\nwell. Normally this structure is initialized in \"dissect_q931_pdu\" and\ninvalidated at the end of the function, but a malformed packet can\nprevent the cleanup. In the next packet, a different dissector can thus\ntrigger a use-after-free via \"dissect_q931_number_ie\".\n\nRename \"dissect_q931_cause_ie_unsafe\" since \"unsafe\" meant that external\ndissectors could not call it directly (see commit a83a87e9ca).\n\nBased on commit 197ceddab109, it seems that the intended purpose of the\nstructure is to provide information to the VoIP Calls dialog, but it\nwould only be used when called through dissect_q931_pdu. Dissectors like\nisup have their own routines to provide call information, but as a\nside-effect of code sharing the problematic code path was reached.\n\nBug: 14689\nChange-Id: I871525db560f24690ade9a0b944c6d0e655ed34b\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6711\nReviewed-on: https://code.wireshark.org/review/27495\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c": [
      "File: epan/dissectors/packet-q931.c -> epan/dissectors/packet-q931.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: void proto_reg_handoff_q931(void);",
      "44: static void reset_q931_packet_info(q931_packet_info *pi);",
      "47: static int q931_tap = -1;",
      "49: static dissector_handle_t q931_handle;",
      "",
      "[Removed Lines]",
      "45: static gboolean have_valid_q931_pi=FALSE;",
      "46: static q931_packet_info *q931_pi = NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "265: static void",
      "266: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
      "269: const value_string q931_message_type_vals[] = {",
      "",
      "[Removed Lines]",
      "267:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset);",
      "",
      "[Added Lines]",
      "265:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
      "266:     q931_packet_info *q931_pi);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1281: static const true_false_string tfs_abnormal_normal = { \"Abnormal\", \"Normal\" };",
      "1283: static void",
      "1286: {",
      "1287:     guint8 octet;",
      "1288:     guint8 coding_standard;",
      "",
      "[Removed Lines]",
      "1284: dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,",
      "1285:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
      "",
      "[Added Lines]",
      "1283: dissect_q931_cause_ie_with_info(tvbuff_t *tvb, int offset, int len,",
      "1284:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals,",
      "1285:     q931_packet_info *q931_pi)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1328:         q931_pi->cause_value = *cause_value;",
      "1329:     }",
      "",
      "[Removed Lines]",
      "1327:     if(have_valid_q931_pi) {",
      "",
      "[Added Lines]",
      "1327:     if (q931_pi) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1411: dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,",
      "1412:               proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
      "1413: {",
      "1418: }",
      "",
      "[Removed Lines]",
      "1414:     gboolean have_valid_q931_pi_save = have_valid_q931_pi;",
      "1415:     have_valid_q931_pi = FALSE;",
      "1416:     dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals);",
      "1417:     have_valid_q931_pi =  have_valid_q931_pi_save;",
      "",
      "[Added Lines]",
      "1415:     dissect_q931_cause_ie_with_info(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals, NULL);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2115: static void",
      "2116: dissect_q931_number_ie(tvbuff_t *tvb, int offset, int len,",
      "2118: {",
      "2119:     guint8 octet;",
      "2120:     gint number_plan;",
      "",
      "[Removed Lines]",
      "2117:     proto_tree *tree, int hfindex, e164_info_t e164_info)",
      "",
      "[Added Lines]",
      "2115:     proto_tree *tree, int hfindex, e164_info_t e164_info, q931_packet_info *q931_pi)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2168:     }",
      "2172:         q931_pi->calling_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
      "2174:         q931_pi->called_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
      "2175: }",
      "",
      "[Removed Lines]",
      "2171:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && have_valid_q931_pi)",
      "2173:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && have_valid_q931_pi)",
      "",
      "[Added Lines]",
      "2169:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && q931_pi)",
      "2171:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && q931_pi)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2475:     guint32     frag_len;",
      "2476:     fragment_head *fd_head;",
      "2477:     tvbuff_t *next_tvb = NULL;",
      "2479:     q931_pi=wmem_new(wmem_packet_scope(), q931_packet_info);",
      "2482:     reset_q931_packet_info(q931_pi);",
      "2485:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Q.931\");",
      "",
      "[Removed Lines]",
      "2483:     have_valid_q931_pi=TRUE;",
      "",
      "[Added Lines]",
      "2476:     q931_packet_info *q931_pi = NULL;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2520:         offset += call_ref_len;",
      "2521:     }",
      "2522:     message_type = tvb_get_guint8(tvb, offset);",
      "2526:     col_add_str(pinfo->cinfo, COL_INFO, get_message_name(prot_discr, message_type));",
      "2528:     if (prot_discr == NLPID_DMS)",
      "",
      "[Removed Lines]",
      "2523:     if(have_valid_q931_pi && q931_pi) {",
      "2524:         q931_pi->message_type = message_type;",
      "2525:     }",
      "",
      "[Added Lines]",
      "2521:     q931_pi->message_type = message_type;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2538:     if ((message_type != Q931_SEGMENT) || !q931_reassembly ||",
      "2539:             (tvb_reported_length_remaining(tvb, offset) <= 4)) {",
      "2541:         return;",
      "2542:     }",
      "2543:     info_element = tvb_get_guint8(tvb, offset);",
      "2544:     info_element_len = tvb_get_guint8(tvb, offset + 1);",
      "2545:     if ((info_element != Q931_IE_SEGMENTED_MESSAGE) || (info_element_len < 2)) {",
      "2547:         return;",
      "2548:     }",
      "",
      "[Removed Lines]",
      "2540:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
      "2546:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
      "",
      "[Added Lines]",
      "2536:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
      "2542:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2591:         }",
      "2592:     }",
      "2593:     if (next_tvb)",
      "2595: }",
      "2597: static const value_string q931_codeset_vals[] = {",
      "",
      "[Removed Lines]",
      "2594:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0);",
      "",
      "[Added Lines]",
      "2590:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0, q931_pi);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2606: static void",
      "2607: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
      "2609: {",
      "2610:     proto_item  *ti;",
      "2611:     proto_tree  *ie_tree = NULL;",
      "",
      "[Removed Lines]",
      "2608:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset)",
      "",
      "[Added Lines]",
      "2604:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
      "2605:     q931_packet_info *q931_pi)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2821:                     break;",
      "2823:                 case CS0 | Q931_IE_CAUSE:",
      "2825:                         offset + 2, info_element_len,",
      "2826:                         ie_tree,",
      "2828:                     break;",
      "2830:                 case CS0 | Q931_IE_CHANGE_STATUS:",
      "",
      "[Removed Lines]",
      "2824:                     dissect_q931_cause_ie_unsafe(tvb,",
      "2827:                         hf_q931_cause_value, &dummy, q931_info_element_vals0);",
      "",
      "[Added Lines]",
      "2821:                     dissect_q931_cause_ie_with_info(tvb,",
      "2824:                         hf_q931_cause_value, &dummy, q931_info_element_vals0, q931_pi);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2963:                         dissect_q931_number_ie(tvb,",
      "2964:                             offset + 2, info_element_len,",
      "2965:                             ie_tree,",
      "2967:                     }",
      "2968:                     break;",
      "",
      "[Removed Lines]",
      "2966:                             hf_q931_connected_number, e164_info);",
      "",
      "[Added Lines]",
      "2963:                             hf_q931_connected_number, e164_info, q931_pi);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2973:                     dissect_q931_number_ie(tvb,",
      "2974:                         offset + 2, info_element_len,",
      "2975:                         ie_tree,",
      "2977:                     break;",
      "2979:                 case CS0 | Q931_IE_CALLED_PARTY_NUMBER:",
      "",
      "[Removed Lines]",
      "2976:                         hf_q931_calling_party_number, e164_info);",
      "",
      "[Added Lines]",
      "2973:                         hf_q931_calling_party_number, e164_info, q931_pi);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2981:                     dissect_q931_number_ie(tvb,",
      "2982:                         offset + 2, info_element_len,",
      "2983:                         ie_tree,",
      "2985:                     break;",
      "2987:                 case CS0 | Q931_IE_CALLING_PARTY_SUBADDR:",
      "",
      "[Removed Lines]",
      "2984:                         hf_q931_called_party_number, e164_info);",
      "",
      "[Added Lines]",
      "2981:                         hf_q931_called_party_number, e164_info, q931_pi);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2998:                         dissect_q931_number_ie(tvb,",
      "2999:                             offset + 2, info_element_len,",
      "3000:                             ie_tree,",
      "3002:                     }",
      "3003:                     break;",
      "",
      "[Removed Lines]",
      "3001:                             hf_q931_redirecting_number, e164_info);",
      "",
      "[Added Lines]",
      "2998:                             hf_q931_redirecting_number, e164_info, q931_pi);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "3050:         }",
      "3051:         codeset = locked_codeset;",
      "3052:     }",
      "3057: }",
      "",
      "[Removed Lines]",
      "3053:     if(have_valid_q931_pi) {",
      "3054:         tap_queue_packet(q931_tap, pinfo, q931_pi);",
      "3055:     }",
      "3056:     have_valid_q931_pi=FALSE;",
      "",
      "[Added Lines]",
      "3050:     tap_queue_packet(q931_tap, pinfo, q931_pi);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3160: static int",
      "3161: dissect_q931_ie_cs0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
      "3162: {",
      "3164:     return tvb_captured_length(tvb);",
      "3165: }",
      "3167: static int",
      "3168: dissect_q931_ie_cs7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
      "3169: {",
      "3171:     return tvb_captured_length(tvb);",
      "3172: }",
      "",
      "[Removed Lines]",
      "3163:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0);",
      "3170:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7);",
      "",
      "[Added Lines]",
      "3157:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0, NULL);",
      "3164:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ccb1ac3c8cec47fbbbf2e80ced80644005c65252",
      "candidate_info": {
        "commit_hash": "ccb1ac3c8cec47fbbbf2e80ced80644005c65252",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ccb1ac3c8cec47fbbbf2e80ced80644005c65252",
        "files": [
          "epan/dissectors/packet-q931.c"
        ],
        "message": "Q.931: fix use-after-free (write) of \"q931_pi\"\n\nThe dissect_q931_number_ie (and indirectly dissect_q931_cause_ie_unsafe)\nwrite to the \"q931_pi\" structure which seems private to the q931\ndissector, but can in fact be called through other dissectors (isup) as\nwell. Normally this structure is initialized in \"dissect_q931_pdu\" and\ninvalidated at the end of the function, but a malformed packet can\nprevent the cleanup. In the next packet, a different dissector can thus\ntrigger a use-after-free via \"dissect_q931_number_ie\".\n\nRename \"dissect_q931_cause_ie_unsafe\" since \"unsafe\" meant that external\ndissectors could not call it directly (see commit a83a87e9ca).\n\nBased on commit 197ceddab109, it seems that the intended purpose of the\nstructure is to provide information to the VoIP Calls dialog, but it\nwould only be used when called through dissect_q931_pdu. Dissectors like\nisup have their own routines to provide call information, but as a\nside-effect of code sharing the problematic code path was reached.\n\nBug: 14689\nChange-Id: I871525db560f24690ade9a0b944c6d0e655ed34b\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6711\nReviewed-on: https://code.wireshark.org/review/27495\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d08a53a7b9ebf723816f224897c68aa652589050)\nReviewed-on: https://code.wireshark.org/review/27523",
        "before_after_code_files": [
          "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ],
          "candidate": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c": [
          "File: epan/dissectors/packet-q931.c -> epan/dissectors/packet-q931.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: void proto_reg_handoff_q931(void);",
          "56: static void reset_q931_packet_info(q931_packet_info *pi);",
          "59: static int q931_tap = -1;",
          "61: static dissector_handle_t q931_handle;",
          "",
          "[Removed Lines]",
          "57: static gboolean have_valid_q931_pi=FALSE;",
          "58: static q931_packet_info *q931_pi = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277: static void",
          "278: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "281: const value_string q931_message_type_vals[] = {",
          "",
          "[Removed Lines]",
          "279:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset);",
          "",
          "[Added Lines]",
          "277:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "278:     q931_packet_info *q931_pi);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: static const true_false_string tfs_abnormal_normal = { \"Abnormal\", \"Normal\" };",
          "1298: static void",
          "1301: {",
          "1302:     guint8 octet;",
          "1303:     guint8 coding_standard;",
          "",
          "[Removed Lines]",
          "1299: dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,",
          "1300:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "",
          "[Added Lines]",
          "1298: dissect_q931_cause_ie_with_info(tvbuff_t *tvb, int offset, int len,",
          "1299:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals,",
          "1300:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1343:         q931_pi->cause_value = *cause_value;",
          "1344:     }",
          "",
          "[Removed Lines]",
          "1342:     if(have_valid_q931_pi) {",
          "",
          "[Added Lines]",
          "1342:     if (q931_pi) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1426: dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,",
          "1427:               proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "1428: {",
          "1433: }",
          "",
          "[Removed Lines]",
          "1429:     gboolean have_valid_q931_pi_save = have_valid_q931_pi;",
          "1430:     have_valid_q931_pi = FALSE;",
          "1431:     dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals);",
          "1432:     have_valid_q931_pi =  have_valid_q931_pi_save;",
          "",
          "[Added Lines]",
          "1430:     dissect_q931_cause_ie_with_info(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2131: static void",
          "2132: dissect_q931_number_ie(tvbuff_t *tvb, int offset, int len,",
          "2134: {",
          "2135:     guint8 octet;",
          "2136:     gint number_plan;",
          "",
          "[Removed Lines]",
          "2133:     proto_tree *tree, int hfindex, e164_info_t e164_info)",
          "",
          "[Added Lines]",
          "2131:     proto_tree *tree, int hfindex, e164_info_t e164_info, q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2184:     }",
          "2188:         q931_pi->calling_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2190:         q931_pi->called_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2191: }",
          "",
          "[Removed Lines]",
          "2187:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && have_valid_q931_pi)",
          "2189:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && have_valid_q931_pi)",
          "",
          "[Added Lines]",
          "2185:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && q931_pi)",
          "2187:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && q931_pi)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2491:     guint32     frag_len;",
          "2492:     fragment_head *fd_head;",
          "2493:     tvbuff_t *next_tvb = NULL;",
          "2495:     q931_pi=wmem_new(wmem_packet_scope(), q931_packet_info);",
          "2498:     reset_q931_packet_info(q931_pi);",
          "2501:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Q.931\");",
          "",
          "[Removed Lines]",
          "2499:     have_valid_q931_pi=TRUE;",
          "",
          "[Added Lines]",
          "2492:     q931_packet_info *q931_pi = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2536:         offset += call_ref_len;",
          "2537:     }",
          "2538:     message_type = tvb_get_guint8(tvb, offset);",
          "2542:     col_add_str(pinfo->cinfo, COL_INFO, get_message_name(prot_discr, message_type));",
          "2544:     if (prot_discr == NLPID_DMS)",
          "",
          "[Removed Lines]",
          "2539:     if(have_valid_q931_pi && q931_pi) {",
          "2540:         q931_pi->message_type = message_type;",
          "2541:     }",
          "",
          "[Added Lines]",
          "2537:     q931_pi->message_type = message_type;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2554:     if ((message_type != Q931_SEGMENT) || !q931_reassembly ||",
          "2555:             (tvb_reported_length_remaining(tvb, offset) <= 4)) {",
          "2557:         return;",
          "2558:     }",
          "2559:     info_element = tvb_get_guint8(tvb, offset);",
          "2560:     info_element_len = tvb_get_guint8(tvb, offset + 1);",
          "2561:     if ((info_element != Q931_IE_SEGMENTED_MESSAGE) || (info_element_len < 2)) {",
          "2563:         return;",
          "2564:     }",
          "",
          "[Removed Lines]",
          "2556:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "2562:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "",
          "[Added Lines]",
          "2552:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "2558:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2607:         }",
          "2608:     }",
          "2609:     if (next_tvb)",
          "2611: }",
          "2613: static const value_string q931_codeset_vals[] = {",
          "",
          "[Removed Lines]",
          "2610:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0);",
          "",
          "[Added Lines]",
          "2606:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2622: static void",
          "2623: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "2625: {",
          "2626:     proto_item  *ti;",
          "2627:     proto_tree  *ie_tree = NULL;",
          "",
          "[Removed Lines]",
          "2624:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset)",
          "",
          "[Added Lines]",
          "2620:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "2621:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2837:                     break;",
          "2839:                 case CS0 | Q931_IE_CAUSE:",
          "2841:                         offset + 2, info_element_len,",
          "2842:                         ie_tree,",
          "2844:                     break;",
          "2846:                 case CS0 | Q931_IE_CHANGE_STATUS:",
          "",
          "[Removed Lines]",
          "2840:                     dissect_q931_cause_ie_unsafe(tvb,",
          "2843:                         hf_q931_cause_value, &dummy, q931_info_element_vals0);",
          "",
          "[Added Lines]",
          "2837:                     dissect_q931_cause_ie_with_info(tvb,",
          "2840:                         hf_q931_cause_value, &dummy, q931_info_element_vals0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2979:                         dissect_q931_number_ie(tvb,",
          "2980:                             offset + 2, info_element_len,",
          "2981:                             ie_tree,",
          "2983:                     }",
          "2984:                     break;",
          "",
          "[Removed Lines]",
          "2982:                             hf_q931_connected_number, e164_info);",
          "",
          "[Added Lines]",
          "2979:                             hf_q931_connected_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2989:                     dissect_q931_number_ie(tvb,",
          "2990:                         offset + 2, info_element_len,",
          "2991:                         ie_tree,",
          "2993:                     break;",
          "2995:                 case CS0 | Q931_IE_CALLED_PARTY_NUMBER:",
          "",
          "[Removed Lines]",
          "2992:                         hf_q931_calling_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2989:                         hf_q931_calling_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2997:                     dissect_q931_number_ie(tvb,",
          "2998:                         offset + 2, info_element_len,",
          "2999:                         ie_tree,",
          "3001:                     break;",
          "3003:                 case CS0 | Q931_IE_CALLING_PARTY_SUBADDR:",
          "",
          "[Removed Lines]",
          "3000:                         hf_q931_called_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2997:                         hf_q931_called_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3014:                         dissect_q931_number_ie(tvb,",
          "3015:                             offset + 2, info_element_len,",
          "3016:                             ie_tree,",
          "3018:                     }",
          "3019:                     break;",
          "",
          "[Removed Lines]",
          "3017:                             hf_q931_redirecting_number, e164_info);",
          "",
          "[Added Lines]",
          "3014:                             hf_q931_redirecting_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3066:         }",
          "3067:         codeset = locked_codeset;",
          "3068:     }",
          "3073: }",
          "",
          "[Removed Lines]",
          "3069:     if(have_valid_q931_pi) {",
          "3070:         tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "3071:     }",
          "3072:     have_valid_q931_pi=FALSE;",
          "",
          "[Added Lines]",
          "3066:     tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3176: static int",
          "3177: dissect_q931_ie_cs0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3178: {",
          "3180:     return tvb_captured_length(tvb);",
          "3181: }",
          "3183: static int",
          "3184: dissect_q931_ie_cs7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3185: {",
          "3187:     return tvb_captured_length(tvb);",
          "3188: }",
          "",
          "[Removed Lines]",
          "3179:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0);",
          "3186:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7);",
          "",
          "[Added Lines]",
          "3173:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0, NULL);",
          "3180:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e67d8b5eecce06eed0bebd4d6efb5adbd27537d",
      "candidate_info": {
        "commit_hash": "0e67d8b5eecce06eed0bebd4d6efb5adbd27537d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0e67d8b5eecce06eed0bebd4d6efb5adbd27537d",
        "files": [
          "epan/dissectors/packet-q931.c"
        ],
        "message": "Q.931: fix use-after-free (write) of \"q931_pi\"\n\nThe dissect_q931_number_ie (and indirectly dissect_q931_cause_ie_unsafe)\nwrite to the \"q931_pi\" structure which seems private to the q931\ndissector, but can in fact be called through other dissectors (isup) as\nwell. Normally this structure is initialized in \"dissect_q931_pdu\" and\ninvalidated at the end of the function, but a malformed packet can\nprevent the cleanup. In the next packet, a different dissector can thus\ntrigger a use-after-free via \"dissect_q931_number_ie\".\n\nRename \"dissect_q931_cause_ie_unsafe\" since \"unsafe\" meant that external\ndissectors could not call it directly (see commit a83a87e9ca).\n\nBased on commit 197ceddab109, it seems that the intended purpose of the\nstructure is to provide information to the VoIP Calls dialog, but it\nwould only be used when called through dissect_q931_pdu. Dissectors like\nisup have their own routines to provide call information, but as a\nside-effect of code sharing the problematic code path was reached.\n\nBug: 14689\nChange-Id: I871525db560f24690ade9a0b944c6d0e655ed34b\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6711\nReviewed-on: https://code.wireshark.org/review/27495\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d08a53a7b9ebf723816f224897c68aa652589050)\nReviewed-on: https://code.wireshark.org/review/27522",
        "before_after_code_files": [
          "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ],
          "candidate": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c": [
          "File: epan/dissectors/packet-q931.c -> epan/dissectors/packet-q931.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: void proto_reg_handoff_q931(void);",
          "56: static void reset_q931_packet_info(q931_packet_info *pi);",
          "59: static int q931_tap = -1;",
          "61: static dissector_handle_t q931_handle;",
          "",
          "[Removed Lines]",
          "57: static gboolean have_valid_q931_pi=FALSE;",
          "58: static q931_packet_info *q931_pi = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277: static void",
          "278: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "281: const value_string q931_message_type_vals[] = {",
          "",
          "[Removed Lines]",
          "279:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset);",
          "",
          "[Added Lines]",
          "277:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "278:     q931_packet_info *q931_pi);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1293: static const true_false_string tfs_abnormal_normal = { \"Abnormal\", \"Normal\" };",
          "1295: static void",
          "1298: {",
          "1299:     guint8 octet;",
          "1300:     guint8 coding_standard;",
          "",
          "[Removed Lines]",
          "1296: dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,",
          "1297:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "",
          "[Added Lines]",
          "1295: dissect_q931_cause_ie_with_info(tvbuff_t *tvb, int offset, int len,",
          "1296:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals,",
          "1297:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1340:         q931_pi->cause_value = *cause_value;",
          "1341:     }",
          "",
          "[Removed Lines]",
          "1339:     if(have_valid_q931_pi) {",
          "",
          "[Added Lines]",
          "1339:     if (q931_pi) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1423: dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,",
          "1424:               proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "1425: {",
          "1430: }",
          "",
          "[Removed Lines]",
          "1426:     gboolean have_valid_q931_pi_save = have_valid_q931_pi;",
          "1427:     have_valid_q931_pi = FALSE;",
          "1428:     dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals);",
          "1429:     have_valid_q931_pi =  have_valid_q931_pi_save;",
          "",
          "[Added Lines]",
          "1427:     dissect_q931_cause_ie_with_info(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2127: static void",
          "2128: dissect_q931_number_ie(tvbuff_t *tvb, int offset, int len,",
          "2130: {",
          "2131:     guint8 octet;",
          "2132:     gint number_plan;",
          "",
          "[Removed Lines]",
          "2129:     proto_tree *tree, int hfindex, e164_info_t e164_info)",
          "",
          "[Added Lines]",
          "2127:     proto_tree *tree, int hfindex, e164_info_t e164_info, q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2180:     }",
          "2184:         q931_pi->calling_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2186:         q931_pi->called_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2187: }",
          "",
          "[Removed Lines]",
          "2183:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && have_valid_q931_pi)",
          "2185:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && have_valid_q931_pi)",
          "",
          "[Added Lines]",
          "2181:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && q931_pi)",
          "2183:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && q931_pi)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2487:     guint32     frag_len;",
          "2488:     fragment_head *fd_head;",
          "2489:     tvbuff_t *next_tvb = NULL;",
          "2491:     q931_pi=wmem_new(wmem_packet_scope(), q931_packet_info);",
          "2494:     reset_q931_packet_info(q931_pi);",
          "2497:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Q.931\");",
          "",
          "[Removed Lines]",
          "2495:     have_valid_q931_pi=TRUE;",
          "",
          "[Added Lines]",
          "2488:     q931_packet_info *q931_pi = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2532:         offset += call_ref_len;",
          "2533:     }",
          "2534:     message_type = tvb_get_guint8(tvb, offset);",
          "2538:     col_add_str(pinfo->cinfo, COL_INFO, get_message_name(prot_discr, message_type));",
          "2540:     if (prot_discr == NLPID_DMS)",
          "",
          "[Removed Lines]",
          "2535:     if(have_valid_q931_pi && q931_pi) {",
          "2536:         q931_pi->message_type = message_type;",
          "2537:     }",
          "",
          "[Added Lines]",
          "2533:     q931_pi->message_type = message_type;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2550:     if ((message_type != Q931_SEGMENT) || !q931_reassembly ||",
          "2551:             (tvb_reported_length_remaining(tvb, offset) <= 4)) {",
          "2553:         return;",
          "2554:     }",
          "2555:     info_element = tvb_get_guint8(tvb, offset);",
          "2556:     info_element_len = tvb_get_guint8(tvb, offset + 1);",
          "2557:     if ((info_element != Q931_IE_SEGMENTED_MESSAGE) || (info_element_len < 2)) {",
          "2559:         return;",
          "2560:     }",
          "",
          "[Removed Lines]",
          "2552:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "2558:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "",
          "[Added Lines]",
          "2548:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "2554:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2603:         }",
          "2604:     }",
          "2605:     if (next_tvb)",
          "2607: }",
          "2609: static const value_string q931_codeset_vals[] = {",
          "",
          "[Removed Lines]",
          "2606:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0);",
          "",
          "[Added Lines]",
          "2602:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2618: static void",
          "2619: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "2621: {",
          "2622:     proto_item  *ti;",
          "2623:     proto_tree  *ie_tree = NULL;",
          "",
          "[Removed Lines]",
          "2620:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset)",
          "",
          "[Added Lines]",
          "2616:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "2617:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2833:                     break;",
          "2835:                 case CS0 | Q931_IE_CAUSE:",
          "2837:                         offset + 2, info_element_len,",
          "2838:                         ie_tree,",
          "2840:                     break;",
          "2842:                 case CS0 | Q931_IE_CHANGE_STATUS:",
          "",
          "[Removed Lines]",
          "2836:                     dissect_q931_cause_ie_unsafe(tvb,",
          "2839:                         hf_q931_cause_value, &dummy, q931_info_element_vals0);",
          "",
          "[Added Lines]",
          "2833:                     dissect_q931_cause_ie_with_info(tvb,",
          "2836:                         hf_q931_cause_value, &dummy, q931_info_element_vals0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2975:                         dissect_q931_number_ie(tvb,",
          "2976:                             offset + 2, info_element_len,",
          "2977:                             ie_tree,",
          "2979:                     }",
          "2980:                     break;",
          "",
          "[Removed Lines]",
          "2978:                             hf_q931_connected_number, e164_info);",
          "",
          "[Added Lines]",
          "2975:                             hf_q931_connected_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2985:                     dissect_q931_number_ie(tvb,",
          "2986:                         offset + 2, info_element_len,",
          "2987:                         ie_tree,",
          "2989:                     break;",
          "2991:                 case CS0 | Q931_IE_CALLED_PARTY_NUMBER:",
          "",
          "[Removed Lines]",
          "2988:                         hf_q931_calling_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2985:                         hf_q931_calling_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2993:                     dissect_q931_number_ie(tvb,",
          "2994:                         offset + 2, info_element_len,",
          "2995:                         ie_tree,",
          "2997:                     break;",
          "2999:                 case CS0 | Q931_IE_CALLING_PARTY_SUBADDR:",
          "",
          "[Removed Lines]",
          "2996:                         hf_q931_called_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2993:                         hf_q931_called_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3010:                         dissect_q931_number_ie(tvb,",
          "3011:                             offset + 2, info_element_len,",
          "3012:                             ie_tree,",
          "3014:                     }",
          "3015:                     break;",
          "",
          "[Removed Lines]",
          "3013:                             hf_q931_redirecting_number, e164_info);",
          "",
          "[Added Lines]",
          "3010:                             hf_q931_redirecting_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3062:         }",
          "3063:         codeset = locked_codeset;",
          "3064:     }",
          "3069: }",
          "",
          "[Removed Lines]",
          "3065:     if(have_valid_q931_pi) {",
          "3066:         tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "3067:     }",
          "3068:     have_valid_q931_pi=FALSE;",
          "",
          "[Added Lines]",
          "3062:     tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3172: static int",
          "3173: dissect_q931_ie_cs0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3174: {",
          "3176:     return tvb_captured_length(tvb);",
          "3177: }",
          "3179: static int",
          "3180: dissect_q931_ie_cs7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3181: {",
          "3183:     return tvb_captured_length(tvb);",
          "3184: }",
          "",
          "[Removed Lines]",
          "3175:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0);",
          "3182:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7);",
          "",
          "[Added Lines]",
          "3169:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0, NULL);",
          "3176:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1deea1169812ea5ccda2c2e9bd4c55c231f8430",
      "candidate_info": {
        "commit_hash": "e1deea1169812ea5ccda2c2e9bd4c55c231f8430",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e1deea1169812ea5ccda2c2e9bd4c55c231f8430",
        "files": [
          "epan/dissectors/packet-q931.c"
        ],
        "message": "Q.931: fix use-after-free (write) of \"q931_pi\"\n\nThe dissect_q931_number_ie (and indirectly dissect_q931_cause_ie_unsafe)\nwrite to the \"q931_pi\" structure which seems private to the q931\ndissector, but can in fact be called through other dissectors (isup) as\nwell. Normally this structure is initialized in \"dissect_q931_pdu\" and\ninvalidated at the end of the function, but a malformed packet can\nprevent the cleanup. In the next packet, a different dissector can thus\ntrigger a use-after-free via \"dissect_q931_number_ie\".\n\nRename \"dissect_q931_cause_ie_unsafe\" since \"unsafe\" meant that external\ndissectors could not call it directly (see commit a83a87e9ca).\n\nBased on commit 197ceddab109, it seems that the intended purpose of the\nstructure is to provide information to the VoIP Calls dialog, but it\nwould only be used when called through dissect_q931_pdu. Dissectors like\nisup have their own routines to provide call information, but as a\nside-effect of code sharing the problematic code path was reached.\n\nBug: 14689\nChange-Id: I871525db560f24690ade9a0b944c6d0e655ed34b\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6711\nReviewed-on: https://code.wireshark.org/review/27495\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d08a53a7b9ebf723816f224897c68aa652589050)\nReviewed-on: https://code.wireshark.org/review/27521\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ],
          "candidate": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c": [
          "File: epan/dissectors/packet-q931.c -> epan/dissectors/packet-q931.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: void proto_reg_handoff_q931(void);",
          "44: static void reset_q931_packet_info(q931_packet_info *pi);",
          "47: static int q931_tap = -1;",
          "49: static dissector_handle_t q931_handle;",
          "",
          "[Removed Lines]",
          "45: static gboolean have_valid_q931_pi=FALSE;",
          "46: static q931_packet_info *q931_pi = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265: static void",
          "266: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "269: const value_string q931_message_type_vals[] = {",
          "",
          "[Removed Lines]",
          "267:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset);",
          "",
          "[Added Lines]",
          "265:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "266:     q931_packet_info *q931_pi);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1281: static const true_false_string tfs_abnormal_normal = { \"Abnormal\", \"Normal\" };",
          "1283: static void",
          "1286: {",
          "1287:     guint8 octet;",
          "1288:     guint8 coding_standard;",
          "",
          "[Removed Lines]",
          "1284: dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,",
          "1285:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "",
          "[Added Lines]",
          "1283: dissect_q931_cause_ie_with_info(tvbuff_t *tvb, int offset, int len,",
          "1284:     proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals,",
          "1285:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1328:         q931_pi->cause_value = *cause_value;",
          "1329:     }",
          "",
          "[Removed Lines]",
          "1327:     if(have_valid_q931_pi) {",
          "",
          "[Added Lines]",
          "1327:     if (q931_pi) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1411: dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,",
          "1412:               proto_tree *tree, int hf_cause_value, guint8 *cause_value, const value_string *ie_vals)",
          "1413: {",
          "1418: }",
          "",
          "[Removed Lines]",
          "1414:     gboolean have_valid_q931_pi_save = have_valid_q931_pi;",
          "1415:     have_valid_q931_pi = FALSE;",
          "1416:     dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals);",
          "1417:     have_valid_q931_pi =  have_valid_q931_pi_save;",
          "",
          "[Added Lines]",
          "1415:     dissect_q931_cause_ie_with_info(tvb, offset, len, tree, hf_cause_value, cause_value, ie_vals, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2115: static void",
          "2116: dissect_q931_number_ie(tvbuff_t *tvb, int offset, int len,",
          "2118: {",
          "2119:     guint8 octet;",
          "2120:     gint number_plan;",
          "",
          "[Removed Lines]",
          "2117:     proto_tree *tree, int hfindex, e164_info_t e164_info)",
          "",
          "[Added Lines]",
          "2115:     proto_tree *tree, int hfindex, e164_info_t e164_info, q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2168:     }",
          "2172:         q931_pi->calling_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2174:         q931_pi->called_number = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_ASCII|ENC_NA);",
          "2175: }",
          "",
          "[Removed Lines]",
          "2171:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && have_valid_q931_pi)",
          "2173:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && have_valid_q931_pi)",
          "",
          "[Added Lines]",
          "2169:     if ( e164_info.e164_number_type == CALLING_PARTY_NUMBER && q931_pi)",
          "2171:     if ( e164_info.e164_number_type == CALLED_PARTY_NUMBER && q931_pi)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2475:     guint32     frag_len;",
          "2476:     fragment_head *fd_head;",
          "2477:     tvbuff_t *next_tvb = NULL;",
          "2479:     q931_pi=wmem_new(wmem_packet_scope(), q931_packet_info);",
          "2482:     reset_q931_packet_info(q931_pi);",
          "2485:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"Q.931\");",
          "",
          "[Removed Lines]",
          "2483:     have_valid_q931_pi=TRUE;",
          "",
          "[Added Lines]",
          "2476:     q931_packet_info *q931_pi = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2520:         offset += call_ref_len;",
          "2521:     }",
          "2522:     message_type = tvb_get_guint8(tvb, offset);",
          "2526:     col_add_str(pinfo->cinfo, COL_INFO, get_message_name(prot_discr, message_type));",
          "2528:     if (prot_discr == NLPID_DMS)",
          "",
          "[Removed Lines]",
          "2523:     if(have_valid_q931_pi && q931_pi) {",
          "2524:         q931_pi->message_type = message_type;",
          "2525:     }",
          "",
          "[Added Lines]",
          "2521:     q931_pi->message_type = message_type;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2538:     if ((message_type != Q931_SEGMENT) || !q931_reassembly ||",
          "2539:             (tvb_reported_length_remaining(tvb, offset) <= 4)) {",
          "2541:         return;",
          "2542:     }",
          "2543:     info_element = tvb_get_guint8(tvb, offset);",
          "2544:     info_element_len = tvb_get_guint8(tvb, offset + 1);",
          "2545:     if ((info_element != Q931_IE_SEGMENTED_MESSAGE) || (info_element_len < 2)) {",
          "2547:         return;",
          "2548:     }",
          "",
          "[Removed Lines]",
          "2540:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "2546:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0);",
          "",
          "[Added Lines]",
          "2536:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "2542:         dissect_q931_IEs(tvb, pinfo, tree, q931_tree, is_over_ip, offset, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2591:         }",
          "2592:     }",
          "2593:     if (next_tvb)",
          "2595: }",
          "2597: static const value_string q931_codeset_vals[] = {",
          "",
          "[Removed Lines]",
          "2594:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0);",
          "",
          "[Added Lines]",
          "2590:         dissect_q931_IEs(next_tvb, pinfo, tree, q931_tree, is_over_ip, 0, 0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2606: static void",
          "2607: dissect_q931_IEs(tvbuff_t *tvb, packet_info *pinfo, proto_tree *root_tree,",
          "2609: {",
          "2610:     proto_item  *ti;",
          "2611:     proto_tree  *ie_tree = NULL;",
          "",
          "[Removed Lines]",
          "2608:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset)",
          "",
          "[Added Lines]",
          "2604:     proto_tree *q931_tree, gboolean is_over_ip, int offset, int initial_codeset,",
          "2605:     q931_packet_info *q931_pi)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2821:                     break;",
          "2823:                 case CS0 | Q931_IE_CAUSE:",
          "2825:                         offset + 2, info_element_len,",
          "2826:                         ie_tree,",
          "2828:                     break;",
          "2830:                 case CS0 | Q931_IE_CHANGE_STATUS:",
          "",
          "[Removed Lines]",
          "2824:                     dissect_q931_cause_ie_unsafe(tvb,",
          "2827:                         hf_q931_cause_value, &dummy, q931_info_element_vals0);",
          "",
          "[Added Lines]",
          "2821:                     dissect_q931_cause_ie_with_info(tvb,",
          "2824:                         hf_q931_cause_value, &dummy, q931_info_element_vals0, q931_pi);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2963:                         dissect_q931_number_ie(tvb,",
          "2964:                             offset + 2, info_element_len,",
          "2965:                             ie_tree,",
          "2967:                     }",
          "2968:                     break;",
          "",
          "[Removed Lines]",
          "2966:                             hf_q931_connected_number, e164_info);",
          "",
          "[Added Lines]",
          "2963:                             hf_q931_connected_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2973:                     dissect_q931_number_ie(tvb,",
          "2974:                         offset + 2, info_element_len,",
          "2975:                         ie_tree,",
          "2977:                     break;",
          "2979:                 case CS0 | Q931_IE_CALLED_PARTY_NUMBER:",
          "",
          "[Removed Lines]",
          "2976:                         hf_q931_calling_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2973:                         hf_q931_calling_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2981:                     dissect_q931_number_ie(tvb,",
          "2982:                         offset + 2, info_element_len,",
          "2983:                         ie_tree,",
          "2985:                     break;",
          "2987:                 case CS0 | Q931_IE_CALLING_PARTY_SUBADDR:",
          "",
          "[Removed Lines]",
          "2984:                         hf_q931_called_party_number, e164_info);",
          "",
          "[Added Lines]",
          "2981:                         hf_q931_called_party_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2998:                         dissect_q931_number_ie(tvb,",
          "2999:                             offset + 2, info_element_len,",
          "3000:                             ie_tree,",
          "3002:                     }",
          "3003:                     break;",
          "",
          "[Removed Lines]",
          "3001:                             hf_q931_redirecting_number, e164_info);",
          "",
          "[Added Lines]",
          "2998:                             hf_q931_redirecting_number, e164_info, q931_pi);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3050:         }",
          "3051:         codeset = locked_codeset;",
          "3052:     }",
          "3057: }",
          "",
          "[Removed Lines]",
          "3053:     if(have_valid_q931_pi) {",
          "3054:         tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "3055:     }",
          "3056:     have_valid_q931_pi=FALSE;",
          "",
          "[Added Lines]",
          "3050:     tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3160: static int",
          "3161: dissect_q931_ie_cs0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3162: {",
          "3164:     return tvb_captured_length(tvb);",
          "3165: }",
          "3167: static int",
          "3168: dissect_q931_ie_cs7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "3169: {",
          "3171:     return tvb_captured_length(tvb);",
          "3172: }",
          "",
          "[Removed Lines]",
          "3163:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0);",
          "3170:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7);",
          "",
          "[Added Lines]",
          "3157:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 0, NULL);",
          "3164:     dissect_q931_IEs(tvb, pinfo, NULL, tree, FALSE, 0, 7, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "328f5cf440e1f5ca1f9329d4f856dc31d23909ef",
      "candidate_info": {
        "commit_hash": "328f5cf440e1f5ca1f9329d4f856dc31d23909ef",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/328f5cf440e1f5ca1f9329d4f856dc31d23909ef",
        "files": [
          "epan/dissectors/packet-q931.c"
        ],
        "message": "Q931: do not tap packet if no packet info is present\n\nFollow-up of gd08a53a7b9\n\nChange-Id: Ice15c7cf97c2d84e80e39944012c54947517232f\nReviewed-on: https://code.wireshark.org/review/28452\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Tom\u00e1\u0161 Kukosa <tomas.kukosa@ixperta.com>\nTested-by: Petri Dish Buildbot",
        "before_after_code_files": [
          "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ],
          "candidate": [
            "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-q931.c||epan/dissectors/packet-q931.c": [
          "File: epan/dissectors/packet-q931.c -> epan/dissectors/packet-q931.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         }",
          "3048:         codeset = locked_codeset;",
          "3049:     }",
          "3051: }",
          "",
          "[Removed Lines]",
          "3050:     tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "",
          "[Added Lines]",
          "3050:     if (q931_pi) {",
          "3051:         tap_queue_packet(q931_tap, pinfo, q931_pi);",
          "3052:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}