{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9496cf577ec4543a6db67092e784c1096a6424fc",
      "candidate_info": {
        "commit_hash": "9496cf577ec4543a6db67092e784c1096a6424fc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9496cf577ec4543a6db67092e784c1096a6424fc",
        "files": [
          "crypto/srp/srp_vfy.c"
        ],
        "message": "Add some sanity checks around usage of t_fromb64()\n\nThe internal SRP function t_fromb64() converts from base64 to binary. It\ndoes not validate that the size of the destination is sufficiently large -\nthat is up to the callers. In some places there was such a check, but not\nin others.\n\nAdd an argument to t_fromb64() to provide the size of the destination\nbuffer and validate that we don't write too much data. Also add some sanity\nchecks to the callers where appropriate.\n\nWith thanks to Shi Lei for reporting this issue.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 73f0df8331910d6726d45ecaab12bd93cc48b4e2)",
        "before_after_code_files": [
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: {",
          "35:     char *loc;",
          "36:     int i, j;",
          "",
          "[Removed Lines]",
          "33: static int t_fromb64(unsigned char *a, const char *src)",
          "",
          "[Added Lines]",
          "33: static int t_fromb64(unsigned char *a, size_t alen, const char *src)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     while (*src && (*src == ' ' || *src == '\\t' || *src == '\\n'))",
          "40:         ++src;",
          "41:     size = strlen(src);",
          "42:     i = 0;",
          "43:     while (i < size) {",
          "44:         loc = strchr(b64table, src[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     if (alen > INT_MAX || size > (int)alen)",
          "43:         return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:     unsigned char tmp[MAX_LEN];",
          "182:     int len;",
          "185:         return 0;",
          "187:     if (NULL == (vinfo->v = BN_bin2bn(tmp, len, NULL)))",
          "188:         return 0;",
          "191: }",
          "193: static int SRP_user_pwd_set_sv_BN(SRP_user_pwd *vinfo, BIGNUM *s, BIGNUM *v)",
          "",
          "[Removed Lines]",
          "184:     if (strlen(s) > MAX_LEN || strlen(v) > MAX_LEN)",
          "186:     len = t_fromb64(tmp, v);",
          "189:     len = t_fromb64(tmp, s);",
          "190:     return ((vinfo->s = BN_bin2bn(tmp, len, NULL)) != NULL);",
          "",
          "[Added Lines]",
          "187:     vinfo->v = NULL;",
          "188:     vinfo->s = NULL;",
          "190:     len = t_fromb64(tmp, sizeof(tmp), v);",
          "191:     if (len < 0)",
          "195:     len = t_fromb64(tmp, sizeof(tmp), s);",
          "196:     if (len < 0)",
          "197:         goto err;",
          "198:     vinfo->s = BN_bin2bn(tmp, len, NULL);",
          "199:     if (vinfo->s == NULL)",
          "200:         goto err;",
          "201:     return 1;",
          "202:  err:",
          "203:     BN_free(vinfo->v);",
          "204:     vinfo->v = NULL;",
          "205:     return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:     if (newgN == NULL)",
          "258:         return NULL;",
          "260:     if ((newgN->b64_bn = OPENSSL_strdup(ch)) == NULL)",
          "261:         goto err;",
          "264:     if ((newgN->bn = BN_bin2bn(tmp, len, NULL)))",
          "265:         return newgN;",
          "",
          "[Removed Lines]",
          "263:     len = t_fromb64(tmp, ch);",
          "",
          "[Added Lines]",
          "275:     len = t_fromb64(tmp, sizeof(tmp), ch);",
          "276:     if (len < 0)",
          "277:         goto err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "539:         goto err;",
          "541:     if (N) {",
          "543:             goto err;",
          "544:         N_bn_alloc = BN_bin2bn(tmp, len, NULL);",
          "545:         N_bn = N_bn_alloc;",
          "547:             goto err;",
          "548:         g_bn_alloc = BN_bin2bn(tmp, len, NULL);",
          "549:         g_bn = g_bn_alloc;",
          "",
          "[Removed Lines]",
          "542:         if ((len = t_fromb64(tmp, N)) == 0)",
          "546:         if ((len = t_fromb64(tmp, g)) == 0)",
          "",
          "[Added Lines]",
          "560:         if ((len = t_fromb64(tmp, sizeof(tmp), N)) <= 0)",
          "564:         if ((len = t_fromb64(tmp, sizeof(tmp) ,g)) <= 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "564:         s = BN_bin2bn(tmp2, SRP_RANDOM_SALT_LEN, NULL);",
          "565:     } else {",
          "567:             goto err;",
          "568:         s = BN_bin2bn(tmp2, len, NULL);",
          "569:     }",
          "",
          "[Removed Lines]",
          "566:         if ((len = t_fromb64(tmp2, *salt)) == 0)",
          "",
          "[Added Lines]",
          "584:         if ((len = t_fromb64(tmp2, sizeof(tmp2), *salt)) <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cac0558008a1f46218191e6f26fa7f08256f582",
      "candidate_info": {
        "commit_hash": "7cac0558008a1f46218191e6f26fa7f08256f582",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7cac0558008a1f46218191e6f26fa7f08256f582",
        "files": [
          "test/sslapitest.c",
          "test/ssltestlib.c"
        ],
        "message": "Fix some mem leaks in sslapitest\n\nA mem leak could occur on an error path. Also the mempacket BIO_METHOD\nneeds to be cleaned up, because of the newly added DTLS test.\n\nAlso fixed a double semi-colon in ssltestlib.c\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit fa454945cf2855fed452ff9bdb1876096bc07beb)",
        "before_after_code_files": [
          "test/sslapitest.c||test/sslapitest.c",
          "test/ssltestlib.c||test/ssltestlib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         goto end;",
          "47:     }",
          "48:     chaincert = PEM_read_bio_X509(certbio, NULL, NULL, NULL);",
          "50:     if (!create_ssl_ctx_pair(smeth, cmeth, &sctx,",
          "51:                              &cctx, cert, privkey)) {",
          "52:         printf(\"Unable to create SSL_CTX pair\\n\");",
          "53:         goto end;",
          "54:     }",
          "",
          "[Removed Lines]",
          "55:     BIO_free(certbio);",
          "56:     certbio = NULL;",
          "",
          "[Added Lines]",
          "49:     BIO_free(certbio);",
          "50:     certbio = NULL;",
          "51:     if (chaincert == NULL) {",
          "52:         printf(\"Unable to load certificate for chain\\n\");",
          "53:         goto end;",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "871:     testresult = run_tests(argv[0]);",
          "873: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "874:     if (CRYPTO_mem_leaks(err) <= 0)",
          "875:         testresult = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     bio_s_mempacket_test_free();",
          "",
          "---------------"
        ],
        "test/ssltestlib.c||test/ssltestlib.c": [
          "File: test/ssltestlib.c -> test/ssltestlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     if (SSL_is_dtls(clientssl)) {",
          "589:         s_to_c_bio = BIO_new(bio_s_mempacket_test());",
          "591:     } else {",
          "592:         s_to_c_bio = BIO_new(BIO_s_mem());",
          "593:         c_to_s_bio = BIO_new(BIO_s_mem());",
          "",
          "[Removed Lines]",
          "590:         c_to_s_bio = BIO_new(bio_s_mempacket_test());;",
          "",
          "[Added Lines]",
          "590:         c_to_s_bio = BIO_new(bio_s_mempacket_test());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8e94b0d8fe412c19bc230593a960b7db73a8e7b",
      "candidate_info": {
        "commit_hash": "d8e94b0d8fe412c19bc230593a960b7db73a8e7b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d8e94b0d8fe412c19bc230593a960b7db73a8e7b",
        "files": [
          "ssl/statem/statem.c"
        ],
        "message": "Fix error message typo, wrong function code\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit a449b47c7d8e20efc8cc524ed695a060b11ef889)",
        "before_after_code_files": [
          "ssl/statem/statem.c||ssl/statem/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem.c||ssl/statem/statem.c": [
          "File: ssl/statem/statem.c -> ssl/statem/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:                                            (int)s->s3->tmp.message_size",
          "550:                                            + SSL3_HM_HEADER_LENGTH)) {",
          "551:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "553:                 return SUB_STATE_ERROR;",
          "554:             }",
          "",
          "[Removed Lines]",
          "552:                 SSLerr(SSL_F_TLS_GET_MESSAGE_HEADER, ERR_R_BUF_LIB);",
          "",
          "[Added Lines]",
          "552:                 SSLerr(SSL_F_READ_STATE_MACHINE, ERR_R_BUF_LIB);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
      "candidate_info": {
        "commit_hash": "18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/18ad46297dcd44c1ac6c9f7f2f966e19c4d45e91",
        "files": [
          "doc/CT_POLICY_EVAL_CTX_new.pod",
          "doc/SCT_validate.pod",
          "doc/SSL_CTX_set_ct_validation_callback.pod",
          "util/libcrypto.num"
        ],
        "message": "Cherry-pick doc updates from PR 1554\n\nAlso fix version in libcrypto.num, from backporting new\nfunctions.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit ebcb536858a271e8812fb9bbafbc0b825e5ece24)",
        "before_after_code_files": [
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_1 EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_1 EXIST::FUNCTION:CT",
          "",
          "[Added Lines]",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_0d EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_0d EXIST::FUNCTION:CT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
      "candidate_info": {
        "commit_hash": "b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1bbee13d9f4e55a8f5592c417dd336012cbeebe",
        "files": [
          "test/recipes/03-test_ui.t"
        ],
        "message": "Add a test for the UI API\n\nThe best way to test the UI interface is currently by using an openssl\ncommand that uses password_callback.  The only one that does this is\n'genrsa'.\nSince password_callback uses a UI method derived from UI_OpenSSL(), it\nensures that one gets tested well enough as well.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2040)\n(cherry picked from commit 17ac8eaf611b588cca251ba63b187e7d9c7edb83)",
        "before_after_code_files": [
          "test/recipes/03-test_ui.t||test/recipes/03-test_ui.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/03-test_ui.t||test/recipes/03-test_ui.t": [
          "File: test/recipes/03-test_ui.t -> test/recipes/03-test_ui.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "9: use strict;",
          "10: use warnings;",
          "11: use OpenSSL::Test;",
          "13: setup(\"test_ui\");",
          "15: plan tests => 1;",
          "17: note <<\"EOF\";",
          "18: The best way to test the UI interface is currently by using an openssl",
          "19: command that uses password_callback.  The only one that does this is",
          "20: 'genrsa'.",
          "21: Since password_callback uses a UI method derived from UI_OpenSSL(), it",
          "22: ensures that one gets tested well enough as well.",
          "23: EOF",
          "25: my $outfile = \"rsa_$$.pem\";",
          "26: ok(run(app([\"openssl\", \"genrsa\", \"-passout\", \"pass:password\", \"-aes128\",",
          "27:             \"-out\", $outfile])),",
          "28:    \"Checking that genrsa with a password works properly\");",
          "30: unlink $outfile;",
          "",
          "---------------"
        ]
      }
    }
  ]
}