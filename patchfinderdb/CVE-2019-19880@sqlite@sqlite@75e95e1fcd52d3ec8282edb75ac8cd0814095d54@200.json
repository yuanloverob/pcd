{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
      "candidate_info": {
        "commit_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/where.test"
        ],
        "message": "Fix the OP_SeekGE, OP_SeekGT, OP_SeekLE, and OP_SeekLT opcodes so that they preserve the datatype of the value in the register used as the key. Ticket [d9f584e936c7a8d0]\n\nFossilOrigin-Name: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127:   pC->deferredMoveto = 0;",
          "4128:   pC->cacheStatus = CACHE_STALE;",
          "4129:   if( pC->isTable ){",
          "4131:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4132:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4130:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4137:     pIn3 = &aMem[pOp->p3];",
          "4139:       applyNumericAffinity(pIn3, 0);",
          "4140:     }",
          "4148:           VdbeBranchTaken(1,2);",
          "4149:           goto jump_to_p2;",
          "4150:         }else{",
          "",
          "[Removed Lines]",
          "4138:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4141:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4145:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4146:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4147:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4139:     flags3 = pIn3->flags;",
          "4140:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4149:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4150:       if( (newType & MEM_Real)==0 ){",
          "4151:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
      "candidate_info": {
        "commit_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/rowvaluevtab.test"
        ],
        "message": "Fix a problem with row-value IN(...) operators and virtual tables.\n\nFossilOrigin-Name: aa57d7abac0bb92d4d5fd4e093a11cf8efc04e4eed748b2a400d01f137250649",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/rowvaluevtab.test||test/rowvaluevtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "194: }",
          "196: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #-------------------------------------------------------------------------",
          "197: #",
          "198: reset_db",
          "199: do_execsql_test 7.0 {",
          "200:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "201:   INSERT INTO t1(rowid, x) VALUES(1, 'hello world');",
          "202:   INSERT INTO t1(rowid, x) VALUES(2, 'well said');",
          "203:   INSERT INTO t1(rowid, x) VALUES(3, 'hello said');",
          "204:   INSERT INTO t1(rowid, x) VALUES(4, 'well world');",
          "206:   CREATE TABLE t2 (a, b);",
          "207:   INSERT INTO t2 VALUES(1, 'hello');",
          "208:   INSERT INTO t2 VALUES(2, 'world');",
          "209:   INSERT INTO t2 VALUES(3, 'said');",
          "210:   INSERT INTO t2 VALUES(4, 'hello');",
          "211: }",
          "213: do_execsql_test 7.1 {",
          "214:   SELECT rowid FROM t1 WHERE (rowid, x) IN (SELECT a, b FROM t2);",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1acf72ae1ea7484bb9c3a8630094f1a3a9597578c7b9d6e02fc0a4e3f59c57d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "",
          "[Removed Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Added Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1311:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "1312:       ){",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 October 14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set ::testprefix rowvaluevtab",
          "18: register_echo_module db",
          "20: do_execsql_test 1.0 {",
          "21:   CREATE TABLE t1(a, b, c);",
          "22:   CREATE INDEX t1b ON t1(b);",
          "23:   INSERT INTO t1 VALUES('one', 1, 1);",
          "24:   INSERT INTO t1 VALUES('two', 1, 2);",
          "25:   INSERT INTO t1 VALUES('three', 1, 3);",
          "26:   INSERT INTO t1 VALUES('four', 2, 1);",
          "27:   INSERT INTO t1 VALUES('five', 2, 2);",
          "28:   INSERT INTO t1 VALUES('six', 2, 3);",
          "29:   INSERT INTO t1 VALUES('seven', 3, 1);",
          "30:   INSERT INTO t1 VALUES('eight', 3, 2);",
          "31:   INSERT INTO t1 VALUES('nine', 3, 3);",
          "33:   WITH s(i) AS (",
          "34:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10000",
          "35:   ) INSERT INTO t1 SELECT NULL, NULL, NULL FROM s;",
          "36:   CREATE VIRTUAL TABLE e1 USING echo(t1);",
          "37: }",
          "39: proc do_vfilter4_test {tn sql expected} {",
          "40:   set res [list]",
          "41:   db eval \"explain $sql\" {",
          "42:     if {$opcode==\"VFilter\"} {",
          "43:       lappend res $p4",
          "44:     }",
          "45:   }",
          "46:   uplevel [list do_test $tn [list set {} $res] [list {*}$expected]]",
          "47: }",
          "49: do_execsql_test 1.1 {",
          "50:   SELECT a FROM e1 WHERE (b, c) = (2, 2)",
          "51: } {five}",
          "52: do_vfilter4_test 1.1f {",
          "53:   SELECT a FROM e1 WHERE (b, c) = (?, ?)",
          "54: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "56: do_execsql_test 1.2 {",
          "57:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "58: } {six seven eight nine}",
          "59: do_vfilter4_test 1.2f {",
          "60:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "61: } {",
          "62:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "63: }",
          "65: do_execsql_test 1.3 {",
          "66:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "67: } {five six seven eight nine}",
          "68: do_vfilter4_test 1.3f {",
          "69:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "70: } {",
          "71:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "72: }",
          "74: do_execsql_test 1.3 {",
          "75:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "76: } {two three four five six}",
          "77: do_vfilter4_test 1.3f {",
          "78:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "79: } {",
          "80:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ? AND b <= ?}",
          "81: }",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "85: } {five}",
          "86: do_vfilter4_test 1.4f {",
          "87:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "88: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "90: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
      "candidate_info": {
        "commit_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Fix an OOB read in the INSTR() function introduced yesterday by check-in [3fb40f518086c1e8] and detected by OSSFuzz.  The test case is in TH3.\n\nFossilOrigin-Name: d49047c1b59bbfd05204af9973cdb0fab51b4d2661b550aec10d917fff94dc9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8efd62594eae725decb719aa7777c020f982b7cdc2c92bab3b91bf349a5bc298",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     }else{",
          "225:       pC1 = sqlite3_value_dup(argv[0]);",
          "226:       zHaystack = sqlite3_value_text(pC1);",
          "227:       pC2 = sqlite3_value_dup(argv[1]);",
          "228:       zNeedle = sqlite3_value_text(pC2);",
          "229:       isText = 1;",
          "230:     }",
          "235:     firstChar = zNeedle[0];",
          "236:     while( nNeedle<=nHaystack",
          "237:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "",
          "[Removed Lines]",
          "231:     if( zNeedle==0 || (nHaystack && zHaystack==0) ){",
          "232:       sqlite3_result_error_nomem(context);",
          "233:       goto endInstr;",
          "234:     }",
          "",
          "[Added Lines]",
          "227:       if( zHaystack==0 ) goto endInstrOOM;",
          "228:       nHaystack = sqlite3_value_bytes(pC1);",
          "231:       if( zNeedle==0 ) goto endInstrOOM;",
          "232:       nNeedle = sqlite3_value_bytes(pC2);",
          "235:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) goto endInstrOOM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: endInstr:",
          "249:   sqlite3_value_free(pC1);",
          "250:   sqlite3_value_free(pC2);",
          "251: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   return;",
          "253: endInstrOOM:",
          "254:   sqlite3_result_error_nomem(context);",
          "255:   goto endInstr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
      "candidate_info": {
        "commit_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/862faf28bb36627359ee3b9cb295b63ed2964df7",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change a faulty assert() in fts5 that could fail on a corrupt db to an if() statement.\n\nFossilOrigin-Name: 1daaba9fb46706af8ed0669a661c304df999a69cf639d29d93208f422c515d8c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:       }else{",
          "883:         i += fts5GetVarint32(&pData[i], pLvl->nMerge);",
          "884:         i += fts5GetVarint32(&pData[i], nTotal);",
          "886:         pLvl->aSeg = (Fts5StructureSegment*)sqlite3Fts5MallocZero(&rc,",
          "887:             nTotal * sizeof(Fts5StructureSegment)",
          "888:         );",
          "",
          "[Removed Lines]",
          "885:         assert( nTotal>=pLvl->nMerge );",
          "",
          "[Added Lines]",
          "885:         if( nTotal<pLvl->nMerge ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "606: sqlite3_fts5_may_be_corrupt 0",
          "607: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: #-------------------------------------------------------------------------",
          "607: #",
          "608: reset_db",
          "609: do_test 12.0 {",
          "610:   sqlite3 db {}",
          "611:   db deserialize [decode_hexdb {",
          "612: | size 28672 pagesize 4096 filename c2.db",
          "613: | page 1 offset 0",
          "614: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "615: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "616: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "617: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "618: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "619: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "620: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "621: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "622: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "623: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "624: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "625: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "626: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "627: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "628: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "629: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "630: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "631: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "632: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "633: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "634: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "635: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "636: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "637: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "638: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "639: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "640: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "641: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "642: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "643: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "644: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "645: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "646: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "647: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "648: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "649: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "650: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "651: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "652: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "653: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "654: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "655: | page 2 offset 4096",
          "656: |      0: 0d 00 00 00 03 0f bd 00 0f d8 0f ef 0f bd 00 00   ................",
          "657: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "658: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "659: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "660: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "661: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 20 01 01 01 01   ...$....... ....",
          "662: | page 3 offset 8192",
          "663: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "664: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "665: | page 4 offset 12288",
          "666: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 3f e0   ..............?.",
          "667: |     16: a0 30 30 01 b6 16 26 16 e6 46 f6 e0 80 20 30 01   .00...&..F... 0.",
          "668: |     32: 76 16 26 16 67 40 80 10 30 01 76 16 26 16 36 b0   v.&.g@..0.v.&.6.",
          "669: |     48: d0 00 00 00 30 fe e0 00 ff a0 ff 40 fe 00 00 00   ....0......@....",
          "670: | page 5 offset 16384",
          "671: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "672: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "673: | page 6 offset 20480",
          "674: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "675: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "676: | page 7 offset 24576",
          "677: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "678: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "679: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "680: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "681: | end c2.db",
          "682: }]} {}",
          "684: do_catchsql_test 11.1 {",
          "685:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "686: } {1 {vtable constructor failed: t1}}",
          "688: do_catchsql_test 11.2 {",
          "689:   INSERT INTO t1(t1, rank) VALUES('merge', 500);",
          "690: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c064964deb0b7220ba784f07ca9c603680f3c8bb936d56ab4eca1962beac1359",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
      "candidate_info": {
        "commit_hash": "8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f4076223d248f0cbe6bfc5769f7574f1b0033e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Fix an assert() failure that could occur in ALTER TABLE code when the schema contains a view that uses a CTE.\n\nFossilOrigin-Name: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:   return WRC_Continue;",
          "734: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "741:   if( pSelect->pWith ){",
          "742:     int i;",
          "743:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "744:       Select *p = pSelect->pWith->a[i].pSelect;",
          "745:       NameContext sNC;",
          "746:       memset(&sNC, 0, sizeof(sNC));",
          "747:       sNC.pParse = pWalker->pParse;",
          "748:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "749:       sqlite3WalkSelect(pWalker, p);",
          "750:     }",
          "751:   }",
          "752: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "754:     }",
          "755:   }",
          "756:   return WRC_Continue;",
          "757: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   renameWalkWith(pWalker, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:   }",
          "820: }",
          "",
          "[Removed Lines]",
          "826: static void renameWalkWith(Walker *pWalker, Select *pSelect){",
          "827:   if( pSelect->pWith ){",
          "828:     int i;",
          "829:     for(i=0; i<pSelect->pWith->nCte; i++){",
          "830:       Select *p = pSelect->pWith->a[i].pSelect;",
          "831:       NameContext sNC;",
          "832:       memset(&sNC, 0, sizeof(sNC));",
          "833:       sNC.pParse = pWalker->pParse;",
          "834:       sqlite3SelectPrep(sNC.pParse, p, &sNC);",
          "835:       sqlite3WalkSelect(pWalker, p);",
          "836:     }",
          "837:   }",
          "838: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "415: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: #-------------------------------------------------------------------------",
          "415: reset_db",
          "416: do_execsql_test 19.0 {",
          "417:   CREATE TABLE a(a,h CONSTRAINT a UNIQUE ON CONFLICT FAIL,CONSTRAINT a);",
          "418: }",
          "420: foreach {tn v res} {",
          "421:   1 {",
          "422:     CREATE VIEW q AS SELECT 123",
          "424:       WINDOW x AS (",
          "425:         RANGE BETWEEN UNBOUNDED PRECEDING AND INDEXED() OVER(",
          "426:           PARTITION BY ( WITH x AS(VALUES(col1)) VALUES(453) )",
          "427:         )",
          "428:       FOLLOWING",
          "429:     )",
          "430:   } {1 {error in view q: no such column: col1}}",
          "432:   2 {",
          "433:     CREATE VIEW q AS SELECT",
          "434:     CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(CAST(RIGHT",
          "435:     AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)AS)WINDOW x AS(RANGE BETWEEN UNBOUNDED",
          "436:     PRECEDING AND INDEXED(*)OVER(PARTITION BY",
          "437:     CROSS,CROSS,NATURAL,sqlite_master(*)OVER a,(WITH a AS(VALUES(LEFT)UNION",
          "438:     VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION VALUES(LEFT)UNION",
          "439:     VALUES(LEFT)UNION VALUES(LEFT))VALUES(LEFT))IN",
          "440:     STORED,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT)*LEFT FOLLOWING)ORDER BY",
          "441:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT LIMIT",
          "442:     LEFT,INDEXED(*)OVER(PARTITION BY",
          "443:     CROSS,CROSS,CROSS,LEFT,INDEXED(*)OVER(PARTITION BY",
          "444:     CROSS,CROSS,CROSS),INDEXED(*)OVER(PARTITION BY",
          "445:     LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT),",
          "446:     LEFT,LEFT,INNER,CROSS,CROSS,CROSS,INNER,NATURAL ORDER BY",
          "447:     OUTER,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,NATURAL,INNER,",
          "448:     INNER,INNER NULLS LAST GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED",
          "449:     FOLLOWING);",
          "450:   } {1 {error in view q: no such column: LEFT}}",
          "452:   3 {",
          "453:     CREATE VIEW q AS SELECT 99 WINDOW x AS (RANGE BETWEEN UNBOUNDED PRECEDING",
          "454:     AND count(*)OVER(PARTITION BY (WITH a AS(VALUES(2),(x3))VALUES(0)))",
          "455:     FOLLOWING)ORDER BY x2,sum(1)OVER(PARTITION BY avg(5)OVER(PARTITION BY x1));",
          "456:   } {1 {error in view q: no such column: x3}}",
          "457: } {",
          "458:   do_execsql_test 19.$tn.1 \"",
          "459:     DROP VIEW IF EXISTS q;",
          "460:     $v",
          "461:   \" {}",
          "463:   do_catchsql_test 19.$tn.2 {",
          "464:     ALTER TABLE a RENAME TO g;",
          "465:   } $res",
          "466: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}