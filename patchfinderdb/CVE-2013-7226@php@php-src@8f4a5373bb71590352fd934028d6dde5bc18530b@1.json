{
  "cve_id": "CVE-2013-7226",
  "cve_desc": "Integer overflow in the gdImageCrop function in ext/gd/gd.c in PHP 5.5.x before 5.5.9 allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via an imagecrop function call with a large x dimension value, leading to a heap-based buffer overflow.",
  "repo": "php/php-src",
  "patch_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
  "patch_info": {
    "commit_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/8f4a5373bb71590352fd934028d6dde5bc18530b",
    "files": [
      "NEWS",
      "ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt"
    ],
    "message": "Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop())\n\nInitial fix was PHP stuff\nThis one is libgd fix.\n\n- filter invalid crop size\n- dont try to copy on invalid position\n- fix crop size when out of src image\n- fix possible NULL deref\n- fix possible integer overfloow",
    "before_after_code_files": [
      "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
    ]
  },
  "patch_diff": {
    "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
      "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: {",
      "45:  gdImagePtr dst;",
      "47:  if (src->trueColor) {",
      "48:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
      "49:   gdImageSaveAlpha(dst, 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:  if (crop->width<=0 || crop->height<=0) {",
      "49:   return NULL;",
      "50:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:   dst = gdImageCreate(crop->width, crop->height);",
      "52:   gdImagePaletteCopy(dst, src);",
      "53:  }",
      "54:  dst->transparent = src->transparent;",
      "58:  }",
      "61:  }",
      "62: #if 0",
      "63: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
      "64: #endif",
      "67:  } else {",
      "81:    }",
      "82:   }",
      "84:  }",
      "85: }",
      "",
      "[Removed Lines]",
      "56:  if (src->sx < (crop->x + crop->width -1)) {",
      "57:   crop->width = src->sx - crop->x + 1;",
      "59:  if (src->sy < (crop->y + crop->height -1)) {",
      "60:   crop->height = src->sy - crop->y + 1;",
      "65:  if (dst == NULL) {",
      "66:   return NULL;",
      "68:   int y = crop->y;",
      "69:   if (src->trueColor) {",
      "70:    unsigned int dst_y = 0;",
      "71:    while (y < (crop->y + (crop->height - 1))) {",
      "73:     memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "74:    }",
      "75:   } else {",
      "76:    int x;",
      "77:    for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "78:     for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "79:      dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "80:     }",
      "83:   return dst;",
      "",
      "[Added Lines]",
      "60:  if (dst == NULL) {",
      "61:   return NULL;",
      "62:  }",
      "66:  if (crop->x < 0 || crop->x>=src->sx || crop->y<0 || crop->y>=src->sy) {",
      "67:   return dst;",
      "68:  }",
      "71:  if ((src->sx - crop->width) < crop->x) {",
      "72:   crop->width = src->sx - crop->x;",
      "74:  if ((src->sy - crop->height) < crop->y) {",
      "75:   crop->height = src->sy - crop->y;",
      "81:  int y = crop->y;",
      "82:  if (src->trueColor) {",
      "83:   unsigned int dst_y = 0;",
      "84:   while (y < (crop->y + (crop->height - 1))) {",
      "86:    memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "87:   }",
      "89:   int x;",
      "90:   for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "91:    for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "92:     dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "96:  return dst;",
      "",
      "---------------"
    ],
    "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
      "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: --FILE--",
      "8: <?php",
      "9: $img = imagecreatetruecolor(10, 10);",
      "11: $arr = array(\"x\" => \"a\", \"y\" => \"12b\", \"width\" => 10, \"height\" => 10);",
      "13: print_r($arr);",
      "14: ?>",
      "15: --EXPECTF--",
      "16: Array",
      "17: (",
      "18:     [x] => a",
      "",
      "[Removed Lines]",
      "10: $img = imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10));",
      "12: $img = imagecrop($img, $arr);",
      "",
      "[Added Lines]",
      "12: var_dump(imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "15: var_dump(imagecrop($img, $arr));",
      "19: var_dump(imagecrop($img, array(\"x\" => 0, \"y\" => 0, \"width\" => -1, \"height\" => 10)));",
      "22: var_dump(imagecrop($img, array(\"x\" => -20, \"y\" => -20, \"width\" => 10, \"height\" => 10)));",
      "25: var_dump(imagecrop($img, array(\"x\" => 0x7fffff00, \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "29: resource(%d) of type (gd)",
      "30: resource(%d) of type (gd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20:     [width] => 10",
      "21:     [height] => 10",
      "22: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: bool(false)",
      "39: resource(%d) of type (gd)",
      "40: resource(%d) of type (gd)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c32a18d4c9995fe101484eef46e292a51543b68",
      "candidate_info": {
        "commit_hash": "0c32a18d4c9995fe101484eef46e292a51543b68",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0c32a18d4c9995fe101484eef46e292a51543b68",
        "files": [
          "ext/gd/gd.c",
          "ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c"
        ],
        "message": "- clean and enable threshold",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h",
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894: ZEND_BEGIN_ARG_INFO(arginfo_imagecropauto, 0)",
          "895:  ZEND_ARG_INFO(0, im)",
          "896:  ZEND_ARG_INFO(0, mode)",
          "897: ZEND_END_ARG_INFO()",
          "898: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:  ZEND_ARG_INFO(0, threshold)",
          "898:  ZEND_ARG_INFO(0, color)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:  REGISTER_LONG_CONSTANT(\"IMG_CROP_BLACK\", GD_CROP_BLACK, CONST_CS | CONST_PERSISTENT);",
          "1217:  REGISTER_LONG_CONSTANT(\"IMG_CROP_WHITE\", GD_CROP_WHITE, CONST_CS | CONST_PERSISTENT);",
          "1218:  REGISTER_LONG_CONSTANT(\"IMG_CROP_SIDES\", GD_CROP_SIDES, CONST_CS | CONST_PERSISTENT);",
          "1219: #else",
          "1220:  REGISTER_LONG_CONSTANT(\"GD_BUNDLED\", 0, CONST_CS | CONST_PERSISTENT);",
          "1221: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1221:  REGISTER_LONG_CONSTANT(\"IMG_CROP_THRESHOLD\", GD_CROP_THRESHOLD, CONST_CS | CONST_PERSISTENT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5145: {",
          "5146:  zval *IM;",
          "5147:  long mode = -1;",
          "5148:  gdImagePtr im;",
          "5149:  gdImagePtr im_crop;",
          "5152:   return;",
          "5153:  }",
          "",
          "[Removed Lines]",
          "5151:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r|l\", &IM, &mode) == FAILURE)  {",
          "",
          "[Added Lines]",
          "5151:  long color = -1;",
          "5152:  double threshold = 0.5f;",
          "5156:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r|ldl\", &IM, &mode, &threshold, &color) == FAILURE)  {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5164:   case GD_CROP_SIDES:",
          "5165:    im_crop = gdImageCropAuto(im, mode);",
          "5166:    break;",
          "5167:   default:",
          "5168:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown flip mode\");",
          "5169:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5173:   case GD_CROP_THRESHOLD:",
          "5174:    if (color < 0) {",
          "5175:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Color argument missing with threshold mode\");",
          "5176:     RETURN_FALSE;",
          "5177:    }",
          "5178:    im_crop = gdImageCropThreshold(im, color, (float) threshold);",
          "5179:    break;",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd.h||ext/gd/libgd/gd.h": [
          "File: ext/gd/libgd/gd.h -> ext/gd/libgd/gd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:  GD_CROP_TRANSPARENT,",
          "734:  GD_CROP_BLACK,",
          "735:  GD_CROP_WHITE,",
          "737: };",
          "739: gdImagePtr gdImageCrop(gdImagePtr src, const gdRectPtr crop);",
          "",
          "[Removed Lines]",
          "736:  GD_CROP_SIDES",
          "",
          "[Added Lines]",
          "736:  GD_CROP_SIDES,",
          "737:  GD_CROP_THRESHOLD",
          "",
          "---------------"
        ],
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  if (src->sy < (crop->y + crop->height -1)) {",
          "59:   crop->height = src->sy - crop->y + 1;",
          "60:  }",
          "62: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
          "63: #endif",
          "64:  if (dst == NULL) {",
          "",
          "[Removed Lines]",
          "61: #ifdef 0",
          "",
          "[Added Lines]",
          "61: #if 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}