{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "749b3405f75a0f8ca78ef3be865c4fc2f1ff0bc9",
      "candidate_info": {
        "commit_hash": "749b3405f75a0f8ca78ef3be865c4fc2f1ff0bc9",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/749b3405f75a0f8ca78ef3be865c4fc2f1ff0bc9",
        "files": [
          "arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h"
        ],
        "message": "Fix issues introduced by pull request #316.",
        "before_after_code_files": [
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "686: {",
          "687:  char *mnem;",
          "688:  x86_reg reg, reg2;",
          "692:  mnem = printAliasInstr(MI, O, Info);",
          "",
          "[Removed Lines]",
          "689:  uint8_t imm_sz = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:  else",
          "696:   printInstruction(MI, O, Info);",
          "699:  if (MI->csh->detail) {",
          "700: #ifndef CAPSTONE_DIET",
          "701:   uint8_t access[6];",
          "",
          "[Removed Lines]",
          "698:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI), &imm_sz);",
          "",
          "[Added Lines]",
          "697:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710:    MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "711:    MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "712:    MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "714:    MI->flat_insn->detail->x86.op_count++;",
          "715:   } else {",
          "716:    if (X86_insn_reg_intel2(MCInst_getOpcode(MI), &reg, &reg2)) {",
          "",
          "[Removed Lines]",
          "713:    MI->flat_insn->detail->x86.operands[1].size = imm_sz ? imm_sz : MI->csh->regsize_map[reg];",
          "",
          "[Added Lines]",
          "712:    MI->flat_insn->detail->x86.operands[1].size = MI->csh->regsize_map[reg];",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2483: struct insn_reg {",
          "2484:  uint16_t insn;",
          "2485:  x86_reg reg;",
          "2487: };",
          "2489: struct insn_reg2 {",
          "",
          "[Removed Lines]",
          "2486:  uint8_t imm_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2608:  { X86_OUTSW, X86_REG_DX },",
          "2609:  { X86_OUTSL, X86_REG_DX },",
          "2626:  { X86_LODSQ, X86_REG_RAX },",
          "2627:  { X86_OR32i32, X86_REG_EAX },",
          "",
          "[Removed Lines]",
          "2611:  { X86_MOV8ao16, X86_REG_AL, 2 },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]",
          "2612:  { X86_MOV8ao32, X86_REG_AL, 4 },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]",
          "2613:  { X86_MOV8ao64, X86_REG_AL, 8 },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]",
          "2615:  { X86_MOV16ao16, X86_REG_AX, 2 },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]",
          "2616:  { X86_MOV16ao32, X86_REG_AX, 4 },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]",
          "2617:  { X86_MOV16ao64, X86_REG_AX, 8 },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]",
          "2619:  { X86_MOV32ao16, X86_REG_EAX, 2 },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]",
          "2620:  { X86_MOV32ao32, X86_REG_EAX, 4 },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]",
          "2621:  { X86_MOV32ao64, X86_REG_EAX, 8 },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]",
          "2623:  { X86_MOV64ao32, X86_REG_RAX, 4 },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]",
          "2624:  { X86_MOV64ao64, X86_REG_RAX, 8 },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]",
          "",
          "[Added Lines]",
          "2610:  { X86_MOV8ao16, X86_REG_AL },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]",
          "2611:  { X86_MOV8ao32, X86_REG_AL },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]",
          "2612:  { X86_MOV8ao64, X86_REG_AL },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]",
          "2614:  { X86_MOV16ao16, X86_REG_AX },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]",
          "2615:  { X86_MOV16ao32, X86_REG_AX },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]",
          "2616:  { X86_MOV16ao64, X86_REG_AX },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]",
          "2618:  { X86_MOV32ao16, X86_REG_EAX },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]",
          "2619:  { X86_MOV32ao32, X86_REG_EAX },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]",
          "2620:  { X86_MOV32ao64, X86_REG_EAX },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]",
          "2622:  { X86_MOV64ao32, X86_REG_RAX },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]",
          "2623:  { X86_MOV64ao64, X86_REG_RAX },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2757: {",
          "2758:  unsigned int i;",
          "2760:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2761:   if (insn_regs_intel[i].insn == id) {",
          "2764:    return insn_regs_intel[i].reg;",
          "2765:   }",
          "2766:  }",
          "",
          "[Removed Lines]",
          "2756: x86_reg X86_insn_reg_intel(unsigned int id, uint8_t * imm_size)",
          "2762:    if (imm_size)",
          "",
          "[Added Lines]",
          "2755: x86_reg X86_insn_reg_intel(unsigned int id)",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h": [
          "File: arch/X86/X86Mapping.h -> arch/X86/X86Mapping.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: x86_reg X86_insn_reg_att(unsigned int id);",
          "36: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "37: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "",
          "[Removed Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id, uint8_t * imm_size);",
          "",
          "[Added Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f59b3a759bccc3c095f5377ceb47fe9587fe5e12",
      "candidate_info": {
        "commit_hash": "f59b3a759bccc3c095f5377ceb47fe9587fe5e12",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f59b3a759bccc3c095f5377ceb47fe9587fe5e12",
        "files": [
          "arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h"
        ],
        "message": "[x86] Fix decode opcode A0 and A1 (movabs) Bug:   00491AD0  A0 11 12 13 14            mov al, byte ptr [0x14131211]         Prefix:0x00 0x00 0x00 0x00         Opcode:0xa0 0x00 0x00 0x00         addr_size: 4         op_count: 1                 operands[0].type: MEM                         operands[0].mem.disp: 0x14131211                 operands[0].size: 1",
        "before_after_code_files": [
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569: {",
          "570:  char *mnem;",
          "571:  x86_reg reg, reg2;",
          "574:  mnem = printAliasInstr(MI, O, Info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:  uint8_t imm_sz = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:  else",
          "578:   printInstruction(MI, O, Info);",
          "581:  if (MI->csh->detail) {",
          "582: #ifndef CAPSTONE_DIET",
          "583:   uint8_t access[6];",
          "",
          "[Removed Lines]",
          "580:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI));",
          "",
          "[Added Lines]",
          "581:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI), &imm_sz);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592:    MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "593:    MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "594:    MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "596:    MI->flat_insn->detail->x86.op_count++;",
          "597:   } else {",
          "598:    if (X86_insn_reg_intel2(MCInst_getOpcode(MI), &reg, &reg2)) {",
          "",
          "[Removed Lines]",
          "595:    MI->flat_insn->detail->x86.operands[1].size = MI->csh->regsize_map[reg];",
          "",
          "[Added Lines]",
          "596:    MI->flat_insn->detail->x86.operands[1].size = imm_sz ? imm_sz : MI->csh->regsize_map[reg];",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2455: struct insn_reg {",
          "2456:  uint16_t insn;",
          "2457:  x86_reg reg;",
          "2458: };",
          "2460: struct insn_reg2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2458:  uint8_t imm_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2575:  { X86_OUTSW, X86_REG_DX },",
          "2576:  { X86_OUTSL, X86_REG_DX },",
          "2579:  { X86_LODSQ, X86_REG_RAX },",
          "2580:  { X86_OR32i32, X86_REG_EAX },",
          "2581:  { X86_SUB32i32, X86_REG_EAX },",
          "",
          "[Removed Lines]",
          "2578:  { X86_MOV32ao32, X86_REG_EAX },",
          "",
          "[Added Lines]",
          "2579:  { X86_MOV8ao16, X86_REG_AL, 2 },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]",
          "2580:  { X86_MOV8ao32, X86_REG_AL, 4 },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]",
          "2581:  { X86_MOV8ao64, X86_REG_AL, 8 },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]",
          "2583:  { X86_MOV16ao16, X86_REG_AX, 2 },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]",
          "2584:  { X86_MOV16ao32, X86_REG_AX, 4 },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]",
          "2585:  { X86_MOV16ao64, X86_REG_AX, 8 },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]",
          "2587:  { X86_MOV32ao16, X86_REG_EAX },      // ???",
          "2588:  { X86_MOV32ao32, X86_REG_EAX, 4 },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]",
          "2589:  { X86_MOV32ao64, X86_REG_EAX, 8 },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]",
          "2591:  { X86_MOV64ao32, X86_REG_RAX },      // ???",
          "2592:  { X86_MOV64ao64, X86_REG_RAX, 8 },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2710: {",
          "2711:  unsigned int i;",
          "2713:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2714:   if (insn_regs_intel[i].insn == id) {",
          "2715:    return insn_regs_intel[i].reg;",
          "2716:   }",
          "2717:  }",
          "",
          "[Removed Lines]",
          "2709: x86_reg X86_insn_reg_intel(unsigned int id)",
          "",
          "[Added Lines]",
          "2724: x86_reg X86_insn_reg_intel(unsigned int id, uint8_t * imm_size)",
          "2730:    if (imm_size) *imm_size = insn_regs_intel[i].imm_size;",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h": [
          "File: arch/X86/X86Mapping.h -> arch/X86/X86Mapping.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: x86_reg X86_insn_reg_att(unsigned int id);",
          "36: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "37: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "",
          "[Removed Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id);",
          "",
          "[Added Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id, uint8_t * imm_size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c975795476db21aa6c42b803c96385b7cdb7ecc7",
      "candidate_info": {
        "commit_hash": "c975795476db21aa6c42b803c96385b7cdb7ecc7",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c975795476db21aa6c42b803c96385b7cdb7ecc7",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "add an auxilary array for x86 reg to greatly speedup X86_insn_reg_intel",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2752: };",
          "2757: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
          "2758: {",
          "2766:   }",
          "2767:  }",
          "",
          "[Removed Lines]",
          "2759:  unsigned int i;",
          "2761:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2762:   if (insn_regs_intel[i].insn == id) {",
          "2763:    if (access)",
          "2765:    return insn_regs_intel[i].reg;",
          "",
          "[Added Lines]",
          "2754: struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];",
          "2756: static int partition_regs(struct insn_reg a[], int l, int r);",
          "2757: static void qsort_regs(struct insn_reg a[], int l, int r);",
          "2759: static void qsort_regs(struct insn_reg a[], int l, int r)",
          "2760: {",
          "2761:  int j;",
          "2762:  if (l < r) {",
          "2763:   j = partition_regs(a, l, r);",
          "2764:   qsort_regs(a, l, j-1);",
          "2765:   qsort_regs(a, j+1, r);",
          "2766:  }",
          "2767: }",
          "2769: static int partition_regs(struct insn_reg a[], int l, int r) {",
          "2770:  struct insn_reg pivot, t;",
          "2771:  int i, j;",
          "2772:  pivot = a[l];",
          "2773:  i = l;",
          "2774:  j = r+1;",
          "2775:  while(1) {",
          "2776:   do ++i; while(a[i].insn <= pivot.insn && i <= r);",
          "2777:   do --j; while(a[j].insn > pivot.insn);",
          "2778:   if (i >= j) {",
          "2779:    break;",
          "2780:   }",
          "2781:   t = a[i]; a[i] = a[j]; a[j] = t;",
          "2782:  }",
          "2783:  t = a[l];",
          "2784:  a[l] = a[j];",
          "2785:  a[j] = t;",
          "2786:  return j;",
          "2787: }",
          "2790: static bool intel_resgs_sorted = false;",
          "2796:  unsigned int first = 0;",
          "2797:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
          "2798:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
          "2800:  if (!intel_resgs_sorted) {",
          "2801:   memcpy (insn_regs_intel_sorted, insn_regs_intel,",
          "2802:     sizeof(insn_regs_intel_sorted));",
          "2803:   qsort_regs (insn_regs_intel_sorted, first, last);",
          "2804:   intel_resgs_sorted = true;",
          "2805:  }",
          "2807:  while (first <= last) {",
          "2808:   if (insn_regs_intel_sorted[mid].insn < id) {",
          "2809:    first = mid + 1;",
          "2810:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
          "2811:    if (access) {",
          "2813:    }",
          "2814:    return insn_regs_intel_sorted[mid].reg;",
          "2815:   } else {",
          "2816:    last = mid - 1;",
          "2818:   mid = (first + last) / 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf959c0711d2638199f6d097be0b2910fcdeae66",
      "candidate_info": {
        "commit_hash": "cf959c0711d2638199f6d097be0b2910fcdeae66",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/cf959c0711d2638199f6d097be0b2910fcdeae66",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "coding style",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2728:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2729:   if (insn_regs_intel[i].insn == id) {",
          "2731:    return insn_regs_intel[i].reg;",
          "2732:   }",
          "2733:  }",
          "",
          "[Removed Lines]",
          "2730:    if (imm_size) *imm_size = insn_regs_intel[i].imm_size;",
          "",
          "[Added Lines]",
          "2730:    if (imm_size)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e66373608667804e98dd3973d0a7cecf5f99063",
      "candidate_info": {
        "commit_hash": "0e66373608667804e98dd3973d0a7cecf5f99063",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0e66373608667804e98dd3973d0a7cecf5f99063",
        "files": [
          "arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h"
        ],
        "message": "Fix access mode for variants of MOV instruction",
        "before_after_code_files": [
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c",
          "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c",
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c",
          "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ],
          "candidate": [
            "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "838: {",
          "839:  char *mnem;",
          "840:  x86_reg reg, reg2;",
          "841:  int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:     enum cs_ac_type access1, access2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964:   if (reg) {",
          "966:    memmove(&(MI->flat_insn->detail->x86.operands[1]), &(MI->flat_insn->detail->x86.operands[0]),",
          "",
          "[Removed Lines]",
          "963:   reg = X86_insn_reg_att(MCInst_getOpcode(MI));",
          "",
          "[Added Lines]",
          "964:   reg = X86_insn_reg_att(MCInst_getOpcode(MI), &access1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "968:    MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "969:    MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "970:    MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "972:    MI->flat_insn->detail->x86.op_count++;",
          "973:   } else {",
          "976:     MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "977:     MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "978:     MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "979:     MI->flat_insn->detail->x86.operands[1].type = X86_OP_REG;",
          "980:     MI->flat_insn->detail->x86.operands[1].reg = reg2;",
          "981:     MI->flat_insn->detail->x86.operands[1].size = MI->csh->regsize_map[reg2];",
          "982:     MI->flat_insn->detail->x86.op_count = 2;",
          "983:    }",
          "984:   }",
          "",
          "[Removed Lines]",
          "974:    if (X86_insn_reg_att2(MCInst_getOpcode(MI), &reg, &reg2)) {",
          "",
          "[Added Lines]",
          "972:             MI->flat_insn->detail->x86.operands[0].access = access1;",
          "976:    if (X86_insn_reg_att2(MCInst_getOpcode(MI), &reg, &access1, &reg2, &access2)) {",
          "981:                 MI->flat_insn->detail->x86.operands[0].access = access1;",
          "985:                 MI->flat_insn->detail->x86.operands[0].access = access2;",
          "",
          "---------------"
        ],
        "arch/X86/X86IntelInstPrinter.c||arch/X86/X86IntelInstPrinter.c": [
          "File: arch/X86/X86IntelInstPrinter.c -> arch/X86/X86IntelInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "686: {",
          "687:  char *mnem;",
          "688:  x86_reg reg, reg2;",
          "691:  mnem = printAliasInstr(MI, O, Info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:     enum cs_ac_type access1, access2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:  else",
          "695:   printInstruction(MI, O, Info);",
          "698:  if (MI->csh->detail) {",
          "699: #ifndef CAPSTONE_DIET",
          "700:   uint8_t access[6];",
          "",
          "[Removed Lines]",
          "697:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI));",
          "",
          "[Added Lines]",
          "698:  reg = X86_insn_reg_intel(MCInst_getOpcode(MI), &access1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:    MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "710:    MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "711:    MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "713:    MI->flat_insn->detail->x86.op_count++;",
          "714:   } else {",
          "716:     MI->flat_insn->detail->x86.operands[0].type = X86_OP_REG;",
          "717:     MI->flat_insn->detail->x86.operands[0].reg = reg;",
          "718:     MI->flat_insn->detail->x86.operands[0].size = MI->csh->regsize_map[reg];",
          "719:     MI->flat_insn->detail->x86.operands[1].type = X86_OP_REG;",
          "720:     MI->flat_insn->detail->x86.operands[1].reg = reg2;",
          "721:     MI->flat_insn->detail->x86.operands[1].size = MI->csh->regsize_map[reg2];",
          "722:     MI->flat_insn->detail->x86.op_count = 2;",
          "723:    }",
          "724:   }",
          "",
          "[Removed Lines]",
          "712:    MI->flat_insn->detail->x86.operands[1].size = MI->csh->regsize_map[reg];",
          "715:    if (X86_insn_reg_intel2(MCInst_getOpcode(MI), &reg, &reg2)) {",
          "",
          "[Added Lines]",
          "713:             MI->flat_insn->detail->x86.operands[0].access = access1;",
          "716:    if (X86_insn_reg_intel2(MCInst_getOpcode(MI), &reg, &access1, &reg2, &access2)) {",
          "720:                 MI->flat_insn->detail->x86.operands[0].access = access1;",
          "724:                 MI->flat_insn->detail->x86.operands[1].access = access2;",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2483: struct insn_reg {",
          "2484:  uint16_t insn;",
          "2485:  x86_reg reg;",
          "2486: };",
          "2488: struct insn_reg2 {",
          "2489:  uint16_t insn;",
          "2490:  x86_reg reg1, reg2;",
          "2491: };",
          "2493: static struct insn_reg insn_regs_att[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2486:  enum cs_ac_type access;",
          "2492:     enum cs_ac_type access1, access2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2603: };",
          "2605: static struct insn_reg insn_regs_intel[] = {",
          "2709: #ifndef CAPSTONE_X86_REDUCE",
          "2736: #endif",
          "2737: };",
          "2739: static struct insn_reg2 insn_regs_intel2[] = {",
          "2750: };",
          "2756: {",
          "2757:  unsigned int i;",
          "2759:  for (i = 0; i < ARR_SIZE(insn_regs_intel); i++) {",
          "2760:   if (insn_regs_intel[i].insn == id) {",
          "2761:    return insn_regs_intel[i].reg;",
          "2762:   }",
          "2763:  }",
          "",
          "[Removed Lines]",
          "2606:  { X86_OUTSB, X86_REG_DX },",
          "2607:  { X86_OUTSW, X86_REG_DX },",
          "2608:  { X86_OUTSL, X86_REG_DX },",
          "2610:  { X86_MOV8ao16, X86_REG_AL },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]",
          "2611:  { X86_MOV8ao32, X86_REG_AL },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]",
          "2612:  { X86_MOV8ao64, X86_REG_AL },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]",
          "2614:  { X86_MOV16ao16, X86_REG_AX },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]",
          "2615:  { X86_MOV16ao32, X86_REG_AX },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]",
          "2616:  { X86_MOV16ao64, X86_REG_AX },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]",
          "2618:  { X86_MOV32ao16, X86_REG_EAX },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]",
          "2619:  { X86_MOV32ao32, X86_REG_EAX },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]",
          "2620:  { X86_MOV32ao64, X86_REG_EAX },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]",
          "2622:  { X86_MOV64ao32, X86_REG_RAX },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]",
          "2623:  { X86_MOV64ao64, X86_REG_RAX },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]",
          "2625:  { X86_LODSQ, X86_REG_RAX },",
          "2626:  { X86_OR32i32, X86_REG_EAX },",
          "2627:  { X86_SUB32i32, X86_REG_EAX },",
          "2628:  { X86_TEST32i32, X86_REG_EAX },",
          "2629:  { X86_ADD32i32, X86_REG_EAX },",
          "2630:  { X86_XCHG64ar, X86_REG_RAX },",
          "2631:  { X86_LODSB, X86_REG_AL },",
          "2632:  { X86_AND32i32, X86_REG_EAX },",
          "2633:  { X86_IN16ri, X86_REG_AX },",
          "2634:  { X86_CMP64i32, X86_REG_RAX },",
          "2635:  { X86_XOR32i32, X86_REG_EAX },",
          "2636:  { X86_XCHG16ar, X86_REG_AX },",
          "2637:  { X86_LODSW, X86_REG_AX },",
          "2638:  { X86_AND16i16, X86_REG_AX },",
          "2639:  { X86_ADC16i16, X86_REG_AX },",
          "2640:  { X86_XCHG32ar64, X86_REG_EAX },",
          "2641:  { X86_ADC8i8, X86_REG_AL },",
          "2642:  { X86_CMP32i32, X86_REG_EAX },",
          "2643:  { X86_AND8i8, X86_REG_AL },",
          "2644:  { X86_SCASW, X86_REG_AX },",
          "2645:  { X86_XOR8i8, X86_REG_AL },",
          "2646:  { X86_SUB16i16, X86_REG_AX },",
          "2647:  { X86_OR16i16, X86_REG_AX },",
          "2648:  { X86_XCHG32ar, X86_REG_EAX },",
          "2649:  { X86_SBB8i8, X86_REG_AL },",
          "2650:  { X86_SCASQ, X86_REG_RAX },",
          "2651:  { X86_SBB32i32, X86_REG_EAX },",
          "2652:  { X86_XOR64i32, X86_REG_RAX },",
          "2653:  { X86_SUB64i32, X86_REG_RAX },",
          "2654:  { X86_ADD64i32, X86_REG_RAX },",
          "2655:  { X86_OR8i8, X86_REG_AL },",
          "2656:  { X86_TEST64i32, X86_REG_RAX },",
          "2657:  { X86_SBB16i16, X86_REG_AX },",
          "2658:  { X86_TEST8i8, X86_REG_AL },",
          "2659:  { X86_IN8ri, X86_REG_AL },",
          "2660:  { X86_TEST16i16, X86_REG_AX },",
          "2661:  { X86_SCASL, X86_REG_EAX },",
          "2662:  { X86_SUB8i8, X86_REG_AL },",
          "2663:  { X86_ADD8i8, X86_REG_AL },",
          "2664:  { X86_OR64i32, X86_REG_RAX },",
          "2665:  { X86_SCASB, X86_REG_AL },",
          "2666:  { X86_SBB64i32, X86_REG_RAX },",
          "2667:  { X86_ADD16i16, X86_REG_AX },",
          "2668:  { X86_XOR16i16, X86_REG_AX },",
          "2669:  { X86_AND64i32, X86_REG_RAX },",
          "2670:  { X86_LODSL, X86_REG_EAX },",
          "2671:  { X86_CMP8i8, X86_REG_AL },",
          "2672:  { X86_ADC64i32, X86_REG_RAX },",
          "2673:  { X86_CMP16i16, X86_REG_AX },",
          "2674:  { X86_ADC32i32, X86_REG_EAX },",
          "2675:  { X86_IN32ri, X86_REG_EAX },",
          "2677:  { X86_PUSHCS32, X86_REG_CS },",
          "2678:  { X86_PUSHDS32, X86_REG_DS },",
          "2679:  { X86_PUSHES32, X86_REG_ES },",
          "2680:  { X86_PUSHFS32, X86_REG_FS },",
          "2681:  { X86_PUSHGS32, X86_REG_GS },",
          "2682:  { X86_PUSHSS32, X86_REG_SS },",
          "2684:  { X86_PUSHFS64, X86_REG_FS },",
          "2685:  { X86_PUSHGS64, X86_REG_GS },",
          "2687:  { X86_PUSHCS16, X86_REG_CS },",
          "2688:  { X86_PUSHDS16, X86_REG_DS },",
          "2689:  { X86_PUSHES16, X86_REG_ES },",
          "2690:  { X86_PUSHFS16, X86_REG_FS },",
          "2691:  { X86_PUSHGS16, X86_REG_GS },",
          "2692:  { X86_PUSHSS16, X86_REG_SS },",
          "2694:  { X86_POPDS32, X86_REG_DS },",
          "2695:  { X86_POPES32, X86_REG_ES },",
          "2696:  { X86_POPFS32, X86_REG_FS },",
          "2697:  { X86_POPGS32, X86_REG_GS },",
          "2698:  { X86_POPSS32, X86_REG_SS },",
          "2700:  { X86_POPFS64, X86_REG_FS },",
          "2701:  { X86_POPGS64, X86_REG_GS },",
          "2703:  { X86_POPDS16, X86_REG_DS },",
          "2704:  { X86_POPES16, X86_REG_ES },",
          "2705:  { X86_POPFS16, X86_REG_FS },",
          "2706:  { X86_POPGS16, X86_REG_GS },",
          "2707:  { X86_POPSS16, X86_REG_SS },",
          "2710:  { X86_SKINIT, X86_REG_EAX },",
          "2711:  { X86_VMRUN32, X86_REG_EAX },",
          "2712:  { X86_VMRUN64, X86_REG_RAX },",
          "2713:  { X86_VMLOAD32, X86_REG_EAX },",
          "2714:  { X86_VMLOAD64, X86_REG_RAX },",
          "2715:  { X86_VMSAVE32, X86_REG_EAX },",
          "2716:  { X86_VMSAVE64, X86_REG_RAX },",
          "2718:  { X86_FNSTSW16r, X86_REG_AX },",
          "2720:  { X86_CMOVB_F, X86_REG_ST0 },",
          "2721:  { X86_CMOVBE_F, X86_REG_ST0 },",
          "2722:  { X86_CMOVE_F, X86_REG_ST0 },",
          "2723:  { X86_CMOVP_F, X86_REG_ST0 },",
          "2724:  { X86_CMOVNB_F, X86_REG_ST0 },",
          "2725:  { X86_CMOVNBE_F, X86_REG_ST0 },",
          "2726:  { X86_CMOVNE_F, X86_REG_ST0 },",
          "2727:  { X86_CMOVNP_F, X86_REG_ST0 },",
          "2728:  { X86_ST_FXCHST0r, X86_REG_ST0 },",
          "2729:  { X86_ST_FXCHST0r_alt, X86_REG_ST0 },",
          "2730:  { X86_ST_FCOMST0r, X86_REG_ST0 },",
          "2731:  { X86_ST_FCOMPST0r, X86_REG_ST0 },",
          "2732:  { X86_ST_FCOMPST0r_alt, X86_REG_ST0 },",
          "2733:  { X86_ST_FPST0r, X86_REG_ST0 },",
          "2734:  { X86_ST_FPST0r_alt, X86_REG_ST0 },",
          "2735:  { X86_ST_FPNCEST0r, X86_REG_ST0 },",
          "2740:  { X86_IN8rr, X86_REG_AL, X86_REG_DX },",
          "2741:  { X86_IN16rr, X86_REG_AX, X86_REG_DX },",
          "2742:  { X86_IN32rr, X86_REG_EAX, X86_REG_DX },",
          "2744:  { X86_OUT8rr, X86_REG_DX, X86_REG_AL },",
          "2745:  { X86_OUT16rr, X86_REG_DX, X86_REG_AX },",
          "2746:  { X86_OUT32rr, X86_REG_DX, X86_REG_EAX },",
          "2748:  { X86_INVLPGA32, X86_REG_EAX, X86_REG_ECX },",
          "2749:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX },",
          "2755: x86_reg X86_insn_reg_intel(unsigned int id)",
          "",
          "[Added Lines]",
          "2608:  { X86_OUTSB, X86_REG_DX, CS_AC_WRITE },",
          "2609:  { X86_OUTSW, X86_REG_DX, CS_AC_WRITE },",
          "2610:  { X86_OUTSL, X86_REG_DX, CS_AC_WRITE },",
          "2612:  { X86_MOV8ao16, X86_REG_AL, CS_AC_WRITE },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]",
          "2613:  { X86_MOV8ao32, X86_REG_AL, CS_AC_WRITE },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]",
          "2614:  { X86_MOV8ao64, X86_REG_AL, CS_AC_WRITE },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]",
          "2616:  { X86_MOV16ao16, X86_REG_AX, CS_AC_WRITE },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]",
          "2617:  { X86_MOV16ao32, X86_REG_AX, CS_AC_WRITE },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]",
          "2618:  { X86_MOV16ao64, X86_REG_AX, CS_AC_WRITE },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]",
          "2620:  { X86_MOV32ao16, X86_REG_EAX, CS_AC_WRITE },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]",
          "2621:  { X86_MOV32ao32, X86_REG_EAX, CS_AC_WRITE },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]",
          "2622:  { X86_MOV32ao64, X86_REG_EAX, CS_AC_WRITE },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]",
          "2624:  { X86_MOV64ao32, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]",
          "2625:  { X86_MOV64ao64, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]",
          "2627:     { X86_LODSQ, X86_REG_RAX, CS_AC_WRITE },",
          "2628:     { X86_OR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2629:     { X86_SUB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2630:     { X86_TEST32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2631:     { X86_ADD32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2632:     { X86_XCHG64ar, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2633:     { X86_LODSB, X86_REG_AL, CS_AC_WRITE },",
          "2634:     { X86_AND32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2635:     { X86_IN16ri, X86_REG_AX, CS_AC_WRITE },",
          "2636:     { X86_CMP64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2637:     { X86_XOR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2638:     { X86_XCHG16ar, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2639:     { X86_LODSW, X86_REG_AX, CS_AC_WRITE },",
          "2640:     { X86_AND16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2641:     { X86_ADC16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2642:     { X86_XCHG32ar64, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2643:     { X86_ADC8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2644:     { X86_CMP32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2645:     { X86_AND8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2646:     { X86_SCASW, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2647:     { X86_XOR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2648:     { X86_SUB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2649:     { X86_OR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2650:     { X86_XCHG32ar, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2651:     { X86_SBB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2652:     { X86_SCASQ, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2653:     { X86_SBB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2654:     { X86_XOR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2655:     { X86_SUB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2656:     { X86_ADD64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2657:     { X86_OR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2658:     { X86_TEST64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2659:     { X86_SBB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2660:     { X86_TEST8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2661:     { X86_IN8ri, X86_REG_AL, CS_AC_WRITE },",
          "2662:     { X86_TEST16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2663:     { X86_SCASL, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2664:     { X86_SUB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2665:     { X86_ADD8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2666:     { X86_OR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2667:     { X86_SCASB, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2668:     { X86_SBB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2669:     { X86_ADD16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2670:     { X86_XOR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2671:     { X86_AND64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2672:     { X86_LODSL, X86_REG_EAX, CS_AC_WRITE },",
          "2673:     { X86_CMP8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },",
          "2674:     { X86_ADC64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },",
          "2675:     { X86_CMP16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },",
          "2676:     { X86_ADC32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },",
          "2677:     { X86_IN32ri, X86_REG_EAX, CS_AC_WRITE },",
          "2679:     { X86_PUSHCS32, X86_REG_CS, CS_AC_READ },",
          "2680:     { X86_PUSHDS32, X86_REG_DS, CS_AC_READ },",
          "2681:     { X86_PUSHES32, X86_REG_ES, CS_AC_READ },",
          "2682:     { X86_PUSHFS32, X86_REG_FS, CS_AC_READ },",
          "2683:     { X86_PUSHGS32, X86_REG_GS, CS_AC_READ },",
          "2684:     { X86_PUSHSS32, X86_REG_SS, CS_AC_READ },",
          "2686:     { X86_PUSHFS64, X86_REG_FS, CS_AC_READ },",
          "2687:     { X86_PUSHGS64, X86_REG_GS, CS_AC_READ },",
          "2689:     { X86_PUSHCS16, X86_REG_CS, CS_AC_READ },",
          "2690:     { X86_PUSHDS16, X86_REG_DS, CS_AC_READ },",
          "2691:     { X86_PUSHES16, X86_REG_ES, CS_AC_READ },",
          "2692:     { X86_PUSHFS16, X86_REG_FS, CS_AC_READ },",
          "2693:     { X86_PUSHGS16, X86_REG_GS, CS_AC_READ },",
          "2694:     { X86_PUSHSS16, X86_REG_SS, CS_AC_READ },",
          "2696:     { X86_POPDS32, X86_REG_DS, CS_AC_WRITE },",
          "2697:     { X86_POPES32, X86_REG_ES, CS_AC_WRITE },",
          "2698:     { X86_POPFS32, X86_REG_FS, CS_AC_WRITE },",
          "2699:     { X86_POPGS32, X86_REG_GS, CS_AC_WRITE },",
          "2700:     { X86_POPSS32, X86_REG_SS, CS_AC_WRITE },",
          "2702:     { X86_POPFS64, X86_REG_FS, CS_AC_WRITE },",
          "2703:     { X86_POPGS64, X86_REG_GS, CS_AC_WRITE },",
          "2705:     { X86_POPDS16, X86_REG_DS, CS_AC_WRITE },",
          "2706:     { X86_POPES16, X86_REG_ES, CS_AC_WRITE },",
          "2707:     { X86_POPFS16, X86_REG_FS, CS_AC_WRITE },",
          "2708:     { X86_POPGS16, X86_REG_GS, CS_AC_WRITE },",
          "2709:     { X86_POPSS16, X86_REG_SS, CS_AC_WRITE },",
          "2712:     { X86_SKINIT, X86_REG_EAX, CS_AC_WRITE },",
          "2713:     { X86_VMRUN32, X86_REG_EAX, CS_AC_WRITE },",
          "2714:     { X86_VMRUN64, X86_REG_RAX, CS_AC_WRITE },",
          "2715:     { X86_VMLOAD32, X86_REG_EAX, CS_AC_WRITE },",
          "2716:     { X86_VMLOAD64, X86_REG_RAX, CS_AC_WRITE },",
          "2717:     { X86_VMSAVE32, X86_REG_EAX, CS_AC_READ },",
          "2718:     { X86_VMSAVE64, X86_REG_RAX, CS_AC_READ },",
          "2720:     { X86_FNSTSW16r, X86_REG_AX, CS_AC_WRITE },",
          "2722:     { X86_CMOVB_F, X86_REG_ST0, CS_AC_WRITE },",
          "2723:     { X86_CMOVBE_F, X86_REG_ST0, CS_AC_WRITE },",
          "2724:     { X86_CMOVE_F, X86_REG_ST0, CS_AC_WRITE },",
          "2725:     { X86_CMOVP_F, X86_REG_ST0, CS_AC_WRITE },",
          "2726:     { X86_CMOVNB_F, X86_REG_ST0, CS_AC_WRITE },",
          "2727:     { X86_CMOVNBE_F, X86_REG_ST0, CS_AC_WRITE },",
          "2728:     { X86_CMOVNE_F, X86_REG_ST0, CS_AC_WRITE },",
          "2729:     { X86_CMOVNP_F, X86_REG_ST0, CS_AC_WRITE },",
          "2730:     { X86_ST_FXCHST0r, X86_REG_ST0, CS_AC_WRITE },",
          "2731:     { X86_ST_FXCHST0r_alt, X86_REG_ST0, CS_AC_WRITE },",
          "2732:     { X86_ST_FCOMST0r, X86_REG_ST0, CS_AC_WRITE },",
          "2733:     { X86_ST_FCOMPST0r, X86_REG_ST0, CS_AC_WRITE },",
          "2734:     { X86_ST_FCOMPST0r_alt, X86_REG_ST0, CS_AC_WRITE },",
          "2735:     { X86_ST_FPST0r, X86_REG_ST0, CS_AC_WRITE },",
          "2736:     { X86_ST_FPST0r_alt, X86_REG_ST0, CS_AC_WRITE },",
          "2737:     { X86_ST_FPNCEST0r, X86_REG_ST0, CS_AC_WRITE },",
          "2742:  { X86_IN8rr, X86_REG_AL, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },",
          "2743:  { X86_IN16rr, X86_REG_AX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },",
          "2744:  { X86_IN32rr, X86_REG_EAX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },",
          "2746:  { X86_OUT8rr, X86_REG_DX, X86_REG_AL, CS_AC_READ, CS_AC_READ },",
          "2747:  { X86_OUT16rr, X86_REG_DX, X86_REG_AX, CS_AC_READ, CS_AC_READ },",
          "2748:  { X86_OUT32rr, X86_REG_DX, X86_REG_EAX, CS_AC_READ, CS_AC_READ },",
          "2750:  { X86_INVLPGA32, X86_REG_EAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2751:  { X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },",
          "2757: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
          "2763:    if (access)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2766:  return 0;",
          "2767: }",
          "2770: {",
          "2771:  unsigned int i;",
          "",
          "[Removed Lines]",
          "2769: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, x86_reg *reg2)",
          "",
          "[Added Lines]",
          "2773: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2774:   if (insn_regs_intel2[i].insn == id) {",
          "2777:    return true;",
          "2778:   }",
          "2779:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2781:             if (access1)",
          "2783:             if (access2)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2783: }",
          "2787: {",
          "2788:  unsigned int i;",
          "",
          "[Removed Lines]",
          "2786: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, x86_reg *reg2)",
          "",
          "[Added Lines]",
          "2794: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2795:    return true;",
          "2796:   }",
          "2797:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2803:             if (access1)",
          "2805:             if (access2)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2800:  return false;",
          "2801: }",
          "2804: {",
          "2805:  unsigned int i;",
          "2807:  for (i = 0; i < ARR_SIZE(insn_regs_att); i++) {",
          "2808:   if (insn_regs_att[i].insn == id) {",
          "2809:    return insn_regs_att[i].reg;",
          "2810:   }",
          "2811:  }",
          "",
          "[Removed Lines]",
          "2803: x86_reg X86_insn_reg_att(unsigned int id)",
          "",
          "[Added Lines]",
          "2815: x86_reg X86_insn_reg_att(unsigned int id, enum cs_ac_type *access)",
          "2821:             if (access)",
          "",
          "---------------"
        ],
        "arch/X86/X86Mapping.h||arch/X86/X86Mapping.h": [
          "File: arch/X86/X86Mapping.h -> arch/X86/X86Mapping.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: extern uint64_t arch_masks[9];",
          "",
          "[Removed Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id);",
          "35: x86_reg X86_insn_reg_att(unsigned int id);",
          "36: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "37: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, x86_reg *reg2);",
          "",
          "[Added Lines]",
          "34: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access);",
          "35: x86_reg X86_insn_reg_att(unsigned int id, enum cs_ac_type *access);",
          "36: bool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2);",
          "37: bool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}