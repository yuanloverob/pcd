{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc96192eefed7a08931454035cb25210529cc46c",
      "candidate_info": {
        "commit_hash": "dc96192eefed7a08931454035cb25210529cc46c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc96192eefed7a08931454035cb25210529cc46c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/vdbeaux.c"
        ],
        "message": "Ensure all file names passed to the VFS layer are double-zero terminated.\n\nFossilOrigin-Name: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1359:     len = 0;",
          "1360:   }",
          "1361:   zMaster[len] = '\\0';",
          "1363:   return SQLITE_OK;",
          "1364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:   zMaster[len+1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2595:   rc = sqlite3OsFileSize(pMaster, &nMasterJournal);",
          "2596:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2597:   nMasterPtr = pVfs->mxPathname+1;",
          "2599:   if( !zMasterJournal ){",
          "2600:     rc = SQLITE_NOMEM_BKPT;",
          "2601:     goto delmaster_out;",
          "2602:   }",
          "2604:   rc = sqlite3OsRead(pMaster, zMasterJournal, (int)nMasterJournal, 0);",
          "2605:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "2606:   zMasterJournal[nMasterJournal] = 0;",
          "2608:   zJournal = zMasterJournal;",
          "2609:   while( (zJournal-zMasterJournal)<nMasterJournal ){",
          "",
          "[Removed Lines]",
          "2598:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 1);",
          "2603:   zMasterPtr = &zMasterJournal[nMasterJournal+1];",
          "",
          "[Added Lines]",
          "2599:   zMasterJournal = sqlite3Malloc(nMasterJournal + nMasterPtr + 2);",
          "2604:   zMasterPtr = &zMasterJournal[nMasterJournal+2];",
          "2608:   zMasterJournal[nMasterJournal+1] = 0;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2651:     nMainFile = sqlite3Strlen30(zMainFile);",
          "2653:     if( zMaster==0 ) return SQLITE_NOMEM_BKPT;",
          "2654:     do {",
          "2655:       u32 iRandom;",
          "",
          "[Removed Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz\", zMainFile);",
          "",
          "[Added Lines]",
          "2652:     zMaster = sqlite3MPrintf(db, \"%s-mjXXXXXX9XXz%c%c\", zMainFile, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
      "candidate_info": {
        "commit_hash": "a79bcf358bcf84f0d42f091da132be82412ca120",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a79bcf358bcf84f0d42f091da132be82412ca120",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Prevent unsigned 32-bit integer overflow from leading to a buffer overread inside of an assert().  The problem fixed here is no reachable in production code.\n\nFossilOrigin-Name: 0f850a25d67a752fe1e9059c0c3f78e00c222113e556a7605fd3c50817b573cb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 726e398b9ddc15ea1b67c40e2a12ddf5d04428a866699588c5fa1af75af846e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3888:     ){",
          "3889:       break;",
          "3890:     }",
          "",
          "[Removed Lines]",
          "3886:     if( d1+serial_type1+2>(u32)nKey1",
          "3887:      && d1+sqlite3VdbeSerialTypeLen(serial_type1)>(u32)nKey1",
          "",
          "[Added Lines]",
          "3886:     if( d1+(u64)serial_type1+2>(u64)nKey1",
          "3887:      && d1+(u64)sqlite3VdbeSerialTypeLen(serial_type1)>(u64)nKey1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
      "candidate_info": {
        "commit_hash": "aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa16c603abea59b23ecfc88a6cdfd2b90747acb1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix another potential \"jump depends on uninitialized value\" warning.\n\nFossilOrigin-Name: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b6751cd90601a1e2744a7d233c973291ecb783801b9327c3b99734dd22bcd27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268: ){",
          "2269:   WhereTerm *pTerm, *pX;",
          "2270:   Bitmask notAllowed = ~(pLoop->prereq|pLoop->maskSelf);",
          "2274:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "",
          "[Removed Lines]",
          "2271:   int i, j, k;",
          "",
          "[Added Lines]",
          "2271:   int i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2294:         pLoop->nOut--;",
          "2295:         if( pTerm->eOperator&(WO_EQ|WO_IS) ){",
          "2296:           Expr *pRight = pTerm->pExpr->pRight;",
          "2297:           testcase( pTerm->pExpr->op==TK_IS );",
          "2298:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2299:             k = 10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:           int k = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
      "candidate_info": {
        "commit_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e691dcb506e01077e8d3af90e19714eac1373eb4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/instr.test"
        ],
        "message": "Test cases for ticket [587791f92620090e]\n\nFossilOrigin-Name: ca0e3a83a1c015b346a791e6de03904d17a769c52dad0e3d71316c6e2e3f43c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/instr.test||test/instr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3fb40f518086c1e8d11eb1f4134e965450dbedfa4277bce39ef1e969fc747d38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/instr.test||test/instr.test": [
          "File: test/instr.test -> test/instr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:   SELECT instr(a, b) FROM x1;",
          "258: } 0",
          "260: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: # 2019-09-16 ticket https://www.sqlite.org/src/info/587791f92620090e",
          "261: #",
          "262: do_execsql_test instr-2.0 {",
          "263:   DROP TABLE IF EXISTS t0;",
          "264:   CREATE TABLE t0(c0 PRIMARY KEY, c1);",
          "265:   INSERT INTO t0(c0) VALUES (x'bb'), (0);",
          "266:   SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "267: } {1}",
          "268: do_execsql_test instr-2.1 {",
          "269:   SELECT quote(c0) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "270: } {X'BB'}",
          "271: do_execsql_test instr-2.2 {",
          "272:   DROP TABLE IF EXISTS t1;",
          "273:   CREATE TABLE t1(x);",
          "274:   INSERT INTO t1(x) VALUES('text'),(x'bb');",
          "275:   SELECT quote(x) FROM t1 WHERE instr(x'aabb',x);",
          "276: } {X'BB'}",
          "277: do_execsql_test instr-2.3 {",
          "278:   SELECT quote(x) FROM t1 WHERE x>'zzz' AND instr(x'aabb',x);",
          "279: } {X'BB'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "378a7d356b954de44ea5274422d0ba5dfaf11501",
      "candidate_info": {
        "commit_hash": "378a7d356b954de44ea5274422d0ba5dfaf11501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/378a7d356b954de44ea5274422d0ba5dfaf11501",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c",
          "test/cast.test"
        ],
        "message": "A string consisting of a single '.' is not a floating point literal with extra text at the end.  Fix for ticket [412bba9b22c677da]\n\nFossilOrigin-Name: 57050162294efec90caa5cc3c2f8c1a85215526adcf57b284ce2d2e799286b78",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 71643deb6bbad4b4a511bfd43b32245b50a555b508b90f33adf0656ae53292c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "",
          "[Removed Lines]",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "",
          "[Added Lines]",
          "563:   }else if( eType>=2 && (eType==3 || eValid) && nDigit>0 ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434: # 2019-06-10",
          "435: # https://sqlite.org/src/info/27de823723a41df45af3",
          "436: #",
          "437: do_execsql_test cast-7.30 {",
          "438:   SELECT -'.';",
          "439: } 0",
          "440: do_execsql_test cast-7.31 {",
          "441:   SELECT '.'+0;",
          "442: } 0",
          "443: do_execsql_test cast-7.32 {",
          "444:   SELECT CAST('.' AS numeric);",
          "445: } 0",
          "446: do_execsql_test cast-7.33 {",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}