{
  "cve_id": "CVE-2018-11362",
  "cve_desc": "In Wireshark 2.6.0, 2.4.0 to 2.4.6, and 2.2.0 to 2.2.14, the LDSS dissector could crash. This was addressed in epan/dissectors/packet-ldss.c by avoiding a buffer over-read upon encountering a missing '\\0' character.",
  "repo": "wireshark/wireshark",
  "patch_hash": "295abe2e83ba8428e84e7ff9b2f6f94ae948fa76",
  "patch_info": {
    "commit_hash": "295abe2e83ba8428e84e7ff9b2f6f94ae948fa76",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/295abe2e83ba8428e84e7ff9b2f6f94ae948fa76",
    "files": [
      "epan/dissectors/packet-ldss.c"
    ],
    "message": "LDSS: Fix a read overrun in dissect_ldss_transfer.\n\ndissect_ldss_transfer had a trivial read overrun: \"line\" was not\nNUL-terminated, and strtol/g_ascii_strtoull will keep reading and discarding\nany leading whitespace, so a malformed LDSS packet (with only whitespace\ncharacters following the tag on a \"Size:\"/\"Start:\"/\"Compression:\" line) could\ntrigger a read overrun.\n\nLet's replace the tvb_memdup with tvb_get_string_enc, which does some checking\nof the input characters (which, it seems, must always be ASCII), and produces a\nneat NUL-terminated string.\n\nTesting Done: On Linux x64, ran \"valgrind tshark -r fuzz-2018-04-23-14422.pcap\"\n   without the fix (to reproduce the failure), and then with the fix, and\n   observed that no errors were reported anymore after the fix. 60,000 iters of\n   fuzz-test with ldss_filtered.pcap as input, plus 1,000 iters under valgrind.\n   Launched wireshark and opened ldss_filtered.pcap, and examined the dissection\n   of the \"ldss and tcp\" packets; All looks good.\n\nBug: 14615\nChange-Id: I3fccc4ffbe315a3cff6ea03cc7db37f884b0582c\nReviewed-on: https://code.wireshark.org/review/27204\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
    "before_after_code_files": [
      "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c": [
      "File: epan/dissectors/packet-ldss.c -> epan/dissectors/packet-ldss.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "496:    linelen = tvb_find_line_end(tvb, offset, -1, &next_offset, FALSE);",
      "501:    line_tree = proto_tree_add_subtree(ldss_tree, tvb, offset, linelen,",
      "502:         ett_ldss_transfer_req, NULL,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "499:    line = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, linelen, ENC_ASCII);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35344225fa4b9c8cf9a5fccc76917541d68f9b14",
      "candidate_info": {
        "commit_hash": "35344225fa4b9c8cf9a5fccc76917541d68f9b14",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/35344225fa4b9c8cf9a5fccc76917541d68f9b14",
        "files": [
          "epan/dissectors/packet-ldss.c"
        ],
        "message": "LDSS: Fix a read overrun in dissect_ldss_transfer.\n\ndissect_ldss_transfer had a trivial read overrun: \"line\" was not\nNUL-terminated, and strtol/g_ascii_strtoull will keep reading and discarding\nany leading whitespace, so a malformed LDSS packet (with only whitespace\ncharacters following the tag on a \"Size:\"/\"Start:\"/\"Compression:\" line) could\ntrigger a read overrun.\n\nLet's replace the tvb_memdup with tvb_get_string_enc, which does some checking\nof the input characters (which, it seems, must always be ASCII), and produces a\nneat NUL-terminated string.\n\nTesting Done: On Linux x64, ran \"valgrind tshark -r fuzz-2018-04-23-14422.pcap\"\n   without the fix (to reproduce the failure), and then with the fix, and\n   observed that no errors were reported anymore after the fix. 60,000 iters of\n   fuzz-test with ldss_filtered.pcap as input, plus 1,000 iters under valgrind.\n   Launched wireshark and opened ldss_filtered.pcap, and examined the dissection\n   of the \"ldss and tcp\" packets; All looks good.\n\nBug: 14615\nChange-Id: I3fccc4ffbe315a3cff6ea03cc7db37f884b0582c\nReviewed-on: https://code.wireshark.org/review/27204\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 295abe2e83ba8428e84e7ff9b2f6f94ae948fa76)\nReviewed-on: https://code.wireshark.org/review/27221",
        "before_after_code_files": [
          "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c": [
          "File: epan/dissectors/packet-ldss.c -> epan/dissectors/packet-ldss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:    linelen = tvb_find_line_end(tvb, offset, -1, &next_offset, FALSE);",
          "501:    line_tree = proto_tree_add_subtree(ldss_tree, tvb, offset, linelen,",
          "502:         ett_ldss_transfer_req, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:    line = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, linelen, ENC_ASCII);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f177008b04a530640de835ca878892e58b826d58",
      "candidate_info": {
        "commit_hash": "f177008b04a530640de835ca878892e58b826d58",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f177008b04a530640de835ca878892e58b826d58",
        "files": [
          "epan/dissectors/packet-ldss.c"
        ],
        "message": "LDSS: Fix a read overrun in dissect_ldss_transfer.\n\ndissect_ldss_transfer had a trivial read overrun: \"line\" was not\nNUL-terminated, and strtol/g_ascii_strtoull will keep reading and discarding\nany leading whitespace, so a malformed LDSS packet (with only whitespace\ncharacters following the tag on a \"Size:\"/\"Start:\"/\"Compression:\" line) could\ntrigger a read overrun.\n\nLet's replace the tvb_memdup with tvb_get_string_enc, which does some checking\nof the input characters (which, it seems, must always be ASCII), and produces a\nneat NUL-terminated string.\n\nTesting Done: On Linux x64, ran \"valgrind tshark -r fuzz-2018-04-23-14422.pcap\"\n   without the fix (to reproduce the failure), and then with the fix, and\n   observed that no errors were reported anymore after the fix. 60,000 iters of\n   fuzz-test with ldss_filtered.pcap as input, plus 1,000 iters under valgrind.\n   Launched wireshark and opened ldss_filtered.pcap, and examined the dissection\n   of the \"ldss and tcp\" packets; All looks good.\n\nBug: 14615\nChange-Id: I3fccc4ffbe315a3cff6ea03cc7db37f884b0582c\nReviewed-on: https://code.wireshark.org/review/27204\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 295abe2e83ba8428e84e7ff9b2f6f94ae948fa76)\nReviewed-on: https://code.wireshark.org/review/27223",
        "before_after_code_files": [
          "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c": [
          "File: epan/dissectors/packet-ldss.c -> epan/dissectors/packet-ldss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:    linelen = tvb_find_line_end(tvb, offset, -1, &next_offset, FALSE);",
          "517:    line_tree = proto_tree_add_subtree(ldss_tree, tvb, offset, linelen,",
          "518:         ett_ldss_transfer_req, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:    line = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, linelen, ENC_ASCII);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fe7632af04161065c2320cc33578022efa6f32b",
      "candidate_info": {
        "commit_hash": "6fe7632af04161065c2320cc33578022efa6f32b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6fe7632af04161065c2320cc33578022efa6f32b",
        "files": [
          "epan/dissectors/packet-ldss.c"
        ],
        "message": "LDSS: Fix a read overrun in dissect_ldss_transfer.\n\ndissect_ldss_transfer had a trivial read overrun: \"line\" was not\nNUL-terminated, and strtol/g_ascii_strtoull will keep reading and discarding\nany leading whitespace, so a malformed LDSS packet (with only whitespace\ncharacters following the tag on a \"Size:\"/\"Start:\"/\"Compression:\" line) could\ntrigger a read overrun.\n\nLet's replace the tvb_memdup with tvb_get_string_enc, which does some checking\nof the input characters (which, it seems, must always be ASCII), and produces a\nneat NUL-terminated string.\n\nTesting Done: On Linux x64, ran \"valgrind tshark -r fuzz-2018-04-23-14422.pcap\"\n   without the fix (to reproduce the failure), and then with the fix, and\n   observed that no errors were reported anymore after the fix. 60,000 iters of\n   fuzz-test with ldss_filtered.pcap as input, plus 1,000 iters under valgrind.\n   Launched wireshark and opened ldss_filtered.pcap, and examined the dissection\n   of the \"ldss and tcp\" packets; All looks good.\n\nBug: 14615\nChange-Id: I3fccc4ffbe315a3cff6ea03cc7db37f884b0582c\nReviewed-on: https://code.wireshark.org/review/27204\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 295abe2e83ba8428e84e7ff9b2f6f94ae948fa76)\nReviewed-on: https://code.wireshark.org/review/27222",
        "before_after_code_files": [
          "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ldss.c||epan/dissectors/packet-ldss.c": [
          "File: epan/dissectors/packet-ldss.c -> epan/dissectors/packet-ldss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:    linelen = tvb_find_line_end(tvb, offset, -1, &next_offset, FALSE);",
          "513:    line_tree = proto_tree_add_subtree(ldss_tree, tvb, offset, linelen,",
          "514:         ett_ldss_transfer_req, NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:    line = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, linelen, ENC_ASCII);",
          "",
          "---------------"
        ]
      }
    }
  ]
}