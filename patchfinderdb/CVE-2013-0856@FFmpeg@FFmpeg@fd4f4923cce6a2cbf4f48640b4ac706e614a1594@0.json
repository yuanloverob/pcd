{
  "cve_id": "CVE-2013-0856",
  "cve_desc": "The lpc_prediction function in libavcodec/alac.c in FFmpeg before 1.1 allows remote attackers to have an unspecified impact via crafted Apple Lossless Audio Codec (ALAC) data, related to a large nb_samples value.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "fd4f4923cce6a2cbf4f48640b4ac706e614a1594",
  "patch_info": {
    "commit_hash": "fd4f4923cce6a2cbf4f48640b4ac706e614a1594",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/fd4f4923cce6a2cbf4f48640b4ac706e614a1594",
    "files": [
      "libavcodec/alac.c"
    ],
    "message": "alac: fix nb_samples < order case\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/alac.c||libavcodec/alac.c"
    ]
  },
  "patch_diff": {
    "libavcodec/alac.c||libavcodec/alac.c": [
      "File: libavcodec/alac.c -> libavcodec/alac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:     }",
      "228:         buffer_out[i] = sign_extend(buffer_out[i - 1] + error_buffer[i], bps);",
      "",
      "[Removed Lines]",
      "227:     for (i = 1; i <= lpc_order; i++)",
      "",
      "[Added Lines]",
      "227:     for (i = 1; i <= lpc_order && i < nb_samples; i++)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0884eadf6a15e93142131b695f48776f9a0ac31",
      "candidate_info": {
        "commit_hash": "e0884eadf6a15e93142131b695f48776f9a0ac31",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e0884eadf6a15e93142131b695f48776f9a0ac31",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: fix nb_samples < order case\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit fd4f4923cce6a2cbf4f48640b4ac706e614a1594)",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     }",
          "228:         buffer_out[i] = sign_extend(buffer_out[i - 1] + error_buffer[i], bps);",
          "",
          "[Removed Lines]",
          "227:     for (i = 1; i <= lpc_order; i++)",
          "",
          "[Added Lines]",
          "227:     for (i = 1; i <= lpc_order && i < nb_samples; i++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2aebac691827caf78d700cec56b539f4d0d239f6",
      "candidate_info": {
        "commit_hash": "2aebac691827caf78d700cec56b539f4d0d239f6",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2aebac691827caf78d700cec56b539f4d0d239f6",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: cosmetics: rename some variables and function names",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     AV_CH_LAYOUT_7POINT1_WIDE_BACK",
          "113: };",
          "117: {",
          "118:     unsigned int x = get_unary_0_9(gb);",
          "123:     } else if (k != 1) {",
          "124:         int extrabits = show_bits(gb, k);",
          "",
          "[Removed Lines]",
          "115: static inline unsigned int decode_scalar(GetBitContext *gb, int k,",
          "116:                                          int readsamplesize)",
          "122:         x = get_bits_long(gb, readsamplesize);",
          "",
          "[Added Lines]",
          "115: static inline unsigned int decode_scalar(GetBitContext *gb, int k, int bps)",
          "121:         x = get_bits_long(gb, bps);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     return x;",
          "136: }",
          "143: {",
          "145:     unsigned int history = alac->rice_initial_history;",
          "146:     int sign_modifier = 0;",
          "149:         int k;",
          "150:         unsigned int x;",
          "153:         k = av_log2((history >> 9) + 3);",
          "154:         k = FFMIN(k, alac->rice_limit);",
          "156:         x += sign_modifier;",
          "157:         sign_modifier = 0;",
          "162:         if (x > 0xffff)",
          "",
          "[Removed Lines]",
          "138: static void bastardized_rice_decompress(ALACContext *alac,",
          "139:                                         int32_t *output_buffer,",
          "140:                                         int output_size,",
          "141:                                         int readsamplesize,",
          "142:                                         int rice_history_mult)",
          "144:     int output_count;",
          "148:     for (output_count = 0; output_count < output_size; output_count++) {",
          "155:         x = decode_scalar(&alac->gb, k, readsamplesize);",
          "159:         output_buffer[output_count] = (x >> 1) ^ -(x & 1);",
          "",
          "[Added Lines]",
          "137: static void rice_decompress(ALACContext *alac, int32_t *output_buffer,",
          "138:                             int nb_samples, int bps, int rice_history_mult)",
          "140:     int i;",
          "144:     for (i = 0; i < nb_samples; i++) {",
          "151:         x = decode_scalar(&alac->gb, k, bps);",
          "155:         output_buffer[i] = (x >> 1) ^ -(x & 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:                        ((history * rice_history_mult) >> 9);",
          "170:             int block_size;",
          "172:             k = 7 - av_log2(history) + ((history + 16) >> 6 /* / 64 */);",
          "",
          "[Removed Lines]",
          "169:         if ((history < 128) && (output_count+1 < output_size)) {",
          "",
          "[Added Lines]",
          "165:         if ((history < 128) && (i + 1 < nb_samples)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "175:             block_size = decode_scalar(&alac->gb, k, 16);",
          "177:             if (block_size > 0) {",
          "181:                 }",
          "183:                        block_size * sizeof(*output_buffer));",
          "185:             }",
          "187:             if (block_size <= 0xffff)",
          "",
          "[Removed Lines]",
          "178:                 if(block_size >= output_size - output_count){",
          "179:                     av_log(alac->avctx, AV_LOG_ERROR, \"invalid zero block size of %d %d %d\\n\", block_size, output_size, output_count);",
          "180:                     block_size= output_size - output_count - 1;",
          "182:                 memset(&output_buffer[output_count + 1], 0,",
          "184:                 output_count += block_size;",
          "",
          "[Added Lines]",
          "174:                 if (block_size >= nb_samples - i) {",
          "175:                     av_log(alac->avctx, AV_LOG_ERROR,",
          "176:                            \"invalid zero block size of %d %d %d\\n\", block_size,",
          "177:                            nb_samples, i);",
          "178:                     block_size = nb_samples - i - 1;",
          "180:                 memset(&output_buffer[i + 1], 0,",
          "182:                 i += block_size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197:     return v ? FFSIGN(v) : 0;",
          "198: }",
          "207: {",
          "208:     int i;",
          "214:         return;",
          "217:         memcpy(&buffer_out[1], &error_buffer[1],",
          "219:         return;",
          "220:     }",
          "225:             buffer_out[i] = sign_extend(buffer_out[i - 1] + error_buffer[i],",
          "227:         }",
          "228:         return;",
          "229:     }",
          "233:         buffer_out[i + 1] = sign_extend(buffer_out[i] + error_buffer[i + 1],",
          "235:     }",
          "241:         int j;",
          "242:         int val = 0;",
          "243:         int error_val = error_buffer[i + 1];",
          "244:         int error_sign;",
          "250:         }",
          "254:         val += d + error_val;",
          "259:         error_sign = sign_only(error_val);",
          "260:         if (error_sign) {",
          "262:                 int sign;",
          "263:                 val  = d - buffer_out[i - j];",
          "264:                 sign = sign_only(val) * error_sign;",
          "266:                 val *= sign;",
          "269:             }",
          "270:         }",
          "271:     }",
          "272: }",
          "274: static void decorrelate_stereo(int32_t *buffer[2],",
          "277: {",
          "278:     int i;",
          "281:         int32_t a, b;",
          "283:         a = buffer[0][i];",
          "284:         b = buffer[1][i];",
          "287:         b += a;",
          "289:         buffer[0][i] = b;",
          "",
          "[Removed Lines]",
          "200: static void predictor_decompress_fir_adapt(int32_t *error_buffer,",
          "201:                                            int32_t *buffer_out,",
          "202:                                            int output_size,",
          "203:                                            int readsamplesize,",
          "204:                                            int16_t *predictor_coef_table,",
          "205:                                            int predictor_coef_num,",
          "206:                                            int predictor_quantitization)",
          "213:     if (output_size <= 1)",
          "216:     if (!predictor_coef_num) {",
          "218:                (output_size - 1) * sizeof(*buffer_out));",
          "222:     if (predictor_coef_num == 31) {",
          "224:         for (i = 1; i < output_size; i++) {",
          "226:                                         readsamplesize);",
          "232:     for (i = 0; i < predictor_coef_num; i++) {",
          "234:                                         readsamplesize);",
          "240:     for (i = predictor_coef_num; i < output_size - 1; i++) {",
          "245:         int d = buffer_out[i - predictor_coef_num];",
          "247:         for (j = 0; j < predictor_coef_num; j++) {",
          "248:             val += (buffer_out[i - j] - d) *",
          "249:                    predictor_coef_table[j];",
          "252:         val = (val + (1 << (predictor_quantitization - 1))) >>",
          "253:               predictor_quantitization;",
          "256:         buffer_out[i + 1] = sign_extend(val, readsamplesize);",
          "261:             for (j = predictor_coef_num - 1; j >= 0 && error_val * error_sign > 0; j--) {",
          "265:                 predictor_coef_table[j] -= sign;",
          "267:                 error_val -= ((val >> predictor_quantitization) *",
          "268:                               (predictor_coef_num - j));",
          "275:                                int numsamples, uint8_t interlacing_shift,",
          "276:                                uint8_t interlacing_leftweight)",
          "280:     for (i = 0; i < numsamples; i++) {",
          "286:         a -= (b * interlacing_leftweight) >> interlacing_shift;",
          "",
          "[Added Lines]",
          "198: static void lpc_prediction(int32_t *error_buffer, int32_t *buffer_out,",
          "199:                            int nb_samples, int bps, int16_t *lpc_coefs,",
          "200:                            int lpc_order, int lpc_quant)",
          "207:     if (nb_samples <= 1)",
          "210:     if (!lpc_order) {",
          "212:                (nb_samples - 1) * sizeof(*buffer_out));",
          "216:     if (lpc_order == 31) {",
          "218:         for (i = 1; i < nb_samples; i++) {",
          "220:                                         bps);",
          "226:     for (i = 0; i < lpc_order; i++) {",
          "228:                                         bps);",
          "234:     for (i = lpc_order; i < nb_samples - 1; i++) {",
          "239:         int d = buffer_out[i - lpc_order];",
          "241:         for (j = 0; j < lpc_order; j++) {",
          "242:             val += (buffer_out[i - j] - d) * lpc_coefs[j];",
          "245:         val = (val + (1 << (lpc_quant - 1))) >> lpc_quant;",
          "248:         buffer_out[i + 1] = sign_extend(val, bps);",
          "253:             for (j = lpc_order - 1; j >= 0 && error_val * error_sign > 0; j--) {",
          "257:                 lpc_coefs[j] -= sign;",
          "259:                 error_val -= (val >> lpc_quant) * (lpc_order - j);",
          "266:                                int nb_samples, uint8_t decorr_shift,",
          "267:                                uint8_t decorr_left_weight)",
          "271:     for (i = 0; i < nb_samples; i++) {",
          "277:         a -= (b * decorr_left_weight) >> decorr_shift;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294: static void append_extra_bits(int32_t *buffer[2],",
          "295:                               int32_t *extra_bits_buffer[2],",
          "297: {",
          "298:     int i, ch;",
          "302:             buffer[ch][i] = (buffer[ch][i] << extra_bits) | extra_bits_buffer[ch][i];",
          "303: }",
          "",
          "[Removed Lines]",
          "296:                               int extra_bits, int numchannels, int numsamples)",
          "300:     for (ch = 0; ch < numchannels; ch++)",
          "301:         for (i = 0; i < numsamples; i++)",
          "",
          "[Added Lines]",
          "287:                               int extra_bits, int channels, int nb_samples)",
          "291:     for (ch = 0; ch < channels; ch++)",
          "292:         for (i = 0; i < nb_samples; i++)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:                           int channels)",
          "307: {",
          "308:     ALACContext *alac = avctx->priv_data;",
          "311:     int is_compressed;",
          "314:     uint32_t output_samples;",
          "315:     int i, ch, ret;",
          "",
          "[Removed Lines]",
          "309:     int hassize;",
          "310:     unsigned int readsamplesize;",
          "312:     uint8_t interlacing_shift;",
          "313:     uint8_t interlacing_leftweight;",
          "",
          "[Added Lines]",
          "300:     int has_size;",
          "301:     unsigned int bps;",
          "303:     uint8_t decorr_shift;",
          "304:     uint8_t decorr_left_weight;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323:     alac->extra_bits = get_bits(&alac->gb, 2) << 3;",
          "327:         return AVERROR_PATCHWELCOME;",
          "328:     }",
          "331:     is_compressed = !get_bits1(&alac->gb);",
          "334:         output_samples = get_bits_long(&alac->gb, 32);",
          "335:     else",
          "336:         output_samples = alac->max_samples_per_frame;",
          "",
          "[Removed Lines]",
          "321:     hassize = get_bits1(&alac->gb);",
          "324:     readsamplesize = alac->sample_size - alac->extra_bits + channels - 1;",
          "325:     if (readsamplesize > 32) {",
          "326:         av_log(avctx, AV_LOG_ERROR, \"bps is unsupported: %d\\n\", readsamplesize);",
          "333:     if (hassize)",
          "",
          "[Added Lines]",
          "312:     has_size = get_bits1(&alac->gb);",
          "315:     bps = alac->sample_size - alac->extra_bits + channels - 1;",
          "316:     if (bps > 32) {",
          "317:         av_log(avctx, AV_LOG_ERROR, \"bps is unsupported: %d\\n\", bps);",
          "324:     if (has_size)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "358:     alac->nb_samples = output_samples;",
          "360:     if (is_compressed) {",
          "363:         int prediction_type[2];",
          "370:         for (ch = 0; ch < channels; ch++) {",
          "380:         }",
          "382:         if (alac->extra_bits) {",
          "",
          "[Removed Lines]",
          "361:         int16_t predictor_coef_table[2][32];",
          "362:         int predictor_coef_num[2];",
          "364:         int prediction_quantitization[2];",
          "365:         int ricemodifier[2];",
          "367:         interlacing_shift = get_bits(&alac->gb, 8);",
          "368:         interlacing_leftweight = get_bits(&alac->gb, 8);",
          "371:             prediction_type[ch] = get_bits(&alac->gb, 4);",
          "372:             prediction_quantitization[ch] = get_bits(&alac->gb, 4);",
          "374:             ricemodifier[ch] = get_bits(&alac->gb, 3);",
          "375:             predictor_coef_num[ch] = get_bits(&alac->gb, 5);",
          "378:             for (i = 0; i < predictor_coef_num[ch]; i++)",
          "379:                 predictor_coef_table[ch][i] = get_sbits(&alac->gb, 16);",
          "",
          "[Added Lines]",
          "352:         int16_t lpc_coefs[2][32];",
          "353:         int lpc_order[2];",
          "355:         int lpc_quant[2];",
          "356:         int rice_history_mult[2];",
          "358:         decorr_shift       = get_bits(&alac->gb, 8);",
          "359:         decorr_left_weight = get_bits(&alac->gb, 8);",
          "362:             prediction_type[ch]   = get_bits(&alac->gb, 4);",
          "363:             lpc_quant[ch]         = get_bits(&alac->gb, 4);",
          "364:             rice_history_mult[ch] = get_bits(&alac->gb, 3);",
          "365:             lpc_order[ch]         = get_bits(&alac->gb, 5);",
          "368:             for (i = 0; i < lpc_order[ch]; i++)",
          "369:                 lpc_coefs[ch][i] = get_sbits(&alac->gb, 16);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "386:             }",
          "387:         }",
          "388:         for (ch = 0; ch < channels; ch++) {",
          "396:             if (prediction_type[ch] == 15) {",
          "",
          "[Removed Lines]",
          "389:             bastardized_rice_decompress(alac,",
          "390:                                         alac->predict_error_buffer[ch],",
          "391:                                         alac->nb_samples,",
          "392:                                         readsamplesize,",
          "393:                                         ricemodifier[ch] * alac->rice_history_mult / 4);",
          "",
          "[Added Lines]",
          "379:             rice_decompress(alac, alac->predict_error_buffer[ch],",
          "380:                             alac->nb_samples, bps,",
          "381:                             rice_history_mult[ch] * alac->rice_history_mult / 4);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:             } else if (prediction_type[ch] > 0) {",
          "409:                 av_log(avctx, AV_LOG_WARNING, \"unknown prediction type: %i\\n\",",
          "410:                        prediction_type[ch]);",
          "411:             }",
          "418:         }",
          "419:     } else {",
          "",
          "[Removed Lines]",
          "404:                 predictor_decompress_fir_adapt(alac->predict_error_buffer[ch],",
          "405:                                                alac->predict_error_buffer[ch],",
          "406:                                                alac->nb_samples, readsamplesize,",
          "407:                                                NULL, 31, 0);",
          "412:             predictor_decompress_fir_adapt(alac->predict_error_buffer[ch],",
          "413:                                            alac->output_samples_buffer[ch],",
          "414:                                            alac->nb_samples, readsamplesize,",
          "415:                                            predictor_coef_table[ch],",
          "416:                                            predictor_coef_num[ch],",
          "417:                                            prediction_quantitization[ch]);",
          "",
          "[Added Lines]",
          "392:                 lpc_prediction(alac->predict_error_buffer[ch],",
          "393:                                alac->predict_error_buffer[ch],",
          "394:                                alac->nb_samples, bps, NULL, 31, 0);",
          "399:             lpc_prediction(alac->predict_error_buffer[ch],",
          "400:                            alac->output_samples_buffer[ch], alac->nb_samples,",
          "401:                            bps, lpc_coefs[ch], lpc_order[ch], lpc_quant[ch]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "424:             }",
          "425:         }",
          "426:         alac->extra_bits = 0;",
          "429:     }",
          "432:         decorrelate_stereo(alac->output_samples_buffer, alac->nb_samples,",
          "434:     }",
          "436:     if (alac->extra_bits) {",
          "",
          "[Removed Lines]",
          "427:         interlacing_shift = 0;",
          "428:         interlacing_leftweight = 0;",
          "431:     if (channels == 2 && interlacing_leftweight) {",
          "433:                            interlacing_shift, interlacing_leftweight);",
          "",
          "[Added Lines]",
          "411:         decorr_shift       = 0;",
          "412:         decorr_left_weight = 0;",
          "415:     if (channels == 2 && decorr_left_weight) {",
          "417:                            decorr_shift, decorr_left_weight);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01880d287be6e2269b92eee8d9dc442532d277ea",
      "candidate_info": {
        "commit_hash": "01880d287be6e2269b92eee8d9dc442532d277ea",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/01880d287be6e2269b92eee8d9dc442532d277ea",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: simplify 1st order prediction and reading of warm-up samples",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         if (output_size <= 1)",
          "188:             return;",
          "197:         }",
          "198:         return;",
          "199:     }",
          "202:     for (i = 0; i < predictor_coef_num; i++) {",
          "208:     }",
          "",
          "[Removed Lines]",
          "189:         for (i = 0; i < output_size - 1; i++) {",
          "190:             int32_t prev_value;",
          "191:             int32_t error_value;",
          "193:             prev_value = buffer_out[i];",
          "194:             error_value = error_buffer[i+1];",
          "195:             buffer_out[i+1] =",
          "196:                 sign_extend((prev_value + error_value), readsamplesize);",
          "203:         int32_t val;",
          "205:         val = buffer_out[i] + error_buffer[i+1];",
          "206:         val = sign_extend(val, readsamplesize);",
          "207:         buffer_out[i+1] = val;",
          "",
          "[Added Lines]",
          "189:         for (i = 1; i < output_size; i++) {",
          "190:             buffer_out[i] = sign_extend(buffer_out[i - 1] + error_buffer[i],",
          "191:                                         readsamplesize);",
          "198:         buffer_out[i + 1] = sign_extend(buffer_out[i] + error_buffer[i + 1],",
          "199:                                         readsamplesize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb57e913e196b26b4ee6ede90f06821e2be7e28a",
      "candidate_info": {
        "commit_hash": "fb57e913e196b26b4ee6ede90f06821e2be7e28a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/fb57e913e196b26b4ee6ede90f06821e2be7e28a",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: reverse lpc coeff order, simplify filter\n\nReversing the lpc coefficient order simplifies indexing in the filter.",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:                            int lpc_order, int lpc_quant)",
          "195: {",
          "196:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     int32_t *pred = buffer_out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "228:         int j;",
          "229:         int val = 0;",
          "231:         int error_sign;",
          "235:         for (j = 0; j < lpc_order; j++)",
          "237:         val = (val + (1 << (lpc_quant - 1))) >> lpc_quant;",
          "238:         val += d + error_val;",
          "242:         error_sign = sign_only(error_val);",
          "243:         if (error_sign) {",
          "245:                 int sign;",
          "247:                 sign = sign_only(val) * error_sign;",
          "248:                 lpc_coefs[j] -= sign;",
          "249:                 val *= sign;",
          "251:             }",
          "252:         }",
          "253:     }",
          "",
          "[Removed Lines]",
          "220:     for (i = 0; i < lpc_order; i++) {",
          "221:         buffer_out[i + 1] = sign_extend(buffer_out[i] + error_buffer[i + 1],",
          "222:                                         bps);",
          "223:     }",
          "227:     for (i = lpc_order; i < nb_samples - 1; i++) {",
          "230:         int error_val = error_buffer[i + 1];",
          "232:         int d = buffer_out[i - lpc_order];",
          "236:             val += (buffer_out[i - j] - d) * lpc_coefs[j];",
          "239:         buffer_out[i + 1] = sign_extend(val, bps);",
          "244:             for (j = lpc_order - 1; j >= 0 && error_val * error_sign > 0; j--) {",
          "246:                 val  = d - buffer_out[i - j];",
          "250:                 error_val -= (val >> lpc_quant) * (lpc_order - j);",
          "",
          "[Added Lines]",
          "221:     for (i = 1; i <= lpc_order; i++)",
          "222:         buffer_out[i] = sign_extend(buffer_out[i - 1] + error_buffer[i], bps);",
          "226:     for (; i < nb_samples; i++) {",
          "229:         int error_val = error_buffer[i];",
          "231:         int d = *pred++;",
          "235:             val += (pred[j] - d) * lpc_coefs[j];",
          "238:         buffer_out[i] = sign_extend(val, bps);",
          "243:             for (j = 0; j < lpc_order && error_val * error_sign > 0; j++) {",
          "245:                 val  = d - pred[j];",
          "249:                 error_val -= (val >> lpc_quant) * (j + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:             lpc_order[ch]         = get_bits(&alac->gb, 5);",
          "354:                 lpc_coefs[ch][i] = get_sbits(&alac->gb, 16);",
          "355:         }",
          "",
          "[Removed Lines]",
          "353:             for (i = 0; i < lpc_order[ch]; i++)",
          "",
          "[Added Lines]",
          "352:             for (i = lpc_order[ch] - 1; i >= 0; i--)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0c0bf0d3e1bdb58188a2006bb24d83fae01236b",
      "candidate_info": {
        "commit_hash": "d0c0bf0d3e1bdb58188a2006bb24d83fae01236b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d0c0bf0d3e1bdb58188a2006bb24d83fae01236b",
        "files": [
          "libavcodec/alac.c"
        ],
        "message": "alac: cosmetics: reindent after last commit",
        "before_after_code_files": [
          "libavcodec/alac.c||libavcodec/alac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ],
          "candidate": [
            "libavcodec/alac.c||libavcodec/alac.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alac.c||libavcodec/alac.c": [
          "File: libavcodec/alac.c -> libavcodec/alac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     }",
          "263:             }",
          "266:         }",
          "267: }",
          "269: static void decorrelate_stereo(int32_t *buffer[MAX_CHANNELS],",
          "",
          "[Removed Lines]",
          "202:         for (i = 0; i < predictor_coef_num; i++) {",
          "203:             int32_t val;",
          "205:             val = buffer_out[i] + error_buffer[i+1];",
          "206:             val = sign_extend(val, readsamplesize);",
          "207:             buffer_out[i+1] = val;",
          "208:         }",
          "213:         for (i = predictor_coef_num + 1; i < output_size; i++) {",
          "214:             int j;",
          "215:             int sum = 0;",
          "216:             int outval;",
          "217:             int error_val = error_buffer[i];",
          "219:             for (j = 0; j < predictor_coef_num; j++) {",
          "220:                 sum += (buffer_out[predictor_coef_num-j] - buffer_out[0]) *",
          "221:                        predictor_coef_table[j];",
          "222:             }",
          "224:             outval = (1 << (predictor_quantitization-1)) + sum;",
          "225:             outval = outval >> predictor_quantitization;",
          "226:             outval = outval + buffer_out[0] + error_val;",
          "227:             outval = sign_extend(outval, readsamplesize);",
          "229:             buffer_out[predictor_coef_num+1] = outval;",
          "231:             if (error_val > 0) {",
          "232:                 int predictor_num = predictor_coef_num - 1;",
          "234:                 while (predictor_num >= 0 && error_val > 0) {",
          "235:                     int val = buffer_out[0] - buffer_out[predictor_coef_num - predictor_num];",
          "236:                     int sign = sign_only(val);",
          "238:                     predictor_coef_table[predictor_num] -= sign;",
          "242:                     error_val -= ((val >> predictor_quantitization) *",
          "243:                                   (predictor_coef_num - predictor_num));",
          "245:                     predictor_num--;",
          "246:                 }",
          "247:             } else if (error_val < 0) {",
          "248:                 int predictor_num = predictor_coef_num - 1;",
          "250:                 while (predictor_num >= 0 && error_val < 0) {",
          "251:                     int val = buffer_out[0] - buffer_out[predictor_coef_num - predictor_num];",
          "252:                     int sign = - sign_only(val);",
          "254:                     predictor_coef_table[predictor_num] -= sign;",
          "258:                     error_val -= ((val >> predictor_quantitization) *",
          "259:                                   (predictor_coef_num - predictor_num));",
          "261:                     predictor_num--;",
          "262:                 }",
          "265:             buffer_out++;",
          "",
          "[Added Lines]",
          "202:     for (i = 0; i < predictor_coef_num; i++) {",
          "203:         int32_t val;",
          "205:         val = buffer_out[i] + error_buffer[i+1];",
          "206:         val = sign_extend(val, readsamplesize);",
          "207:         buffer_out[i+1] = val;",
          "208:     }",
          "213:     for (i = predictor_coef_num + 1; i < output_size; i++) {",
          "214:         int j;",
          "215:         int sum = 0;",
          "216:         int outval;",
          "217:         int error_val = error_buffer[i];",
          "219:         for (j = 0; j < predictor_coef_num; j++) {",
          "220:             sum += (buffer_out[predictor_coef_num-j] - buffer_out[0]) *",
          "221:                    predictor_coef_table[j];",
          "222:         }",
          "224:         outval = (1 << (predictor_quantitization-1)) + sum;",
          "225:         outval = outval >> predictor_quantitization;",
          "226:         outval = outval + buffer_out[0] + error_val;",
          "227:         outval = sign_extend(outval, readsamplesize);",
          "229:         buffer_out[predictor_coef_num+1] = outval;",
          "231:         if (error_val > 0) {",
          "232:             int predictor_num = predictor_coef_num - 1;",
          "234:             while (predictor_num >= 0 && error_val > 0) {",
          "235:                 int val = buffer_out[0] - buffer_out[predictor_coef_num - predictor_num];",
          "236:                 int sign = sign_only(val);",
          "238:                 predictor_coef_table[predictor_num] -= sign;",
          "242:                 error_val -= ((val >> predictor_quantitization) *",
          "243:                               (predictor_coef_num - predictor_num));",
          "245:                 predictor_num--;",
          "246:             }",
          "247:         } else if (error_val < 0) {",
          "248:             int predictor_num = predictor_coef_num - 1;",
          "250:             while (predictor_num >= 0 && error_val < 0) {",
          "251:                 int val = buffer_out[0] - buffer_out[predictor_coef_num - predictor_num];",
          "252:                 int sign = - sign_only(val);",
          "254:                 predictor_coef_table[predictor_num] -= sign;",
          "258:                 error_val -= ((val >> predictor_quantitization) *",
          "259:                               (predictor_coef_num - predictor_num));",
          "261:                 predictor_num--;",
          "265:         buffer_out++;",
          "266:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}