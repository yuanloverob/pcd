{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3685e83e0c9071ed20704f643d32dcf58837927e",
      "candidate_info": {
        "commit_hash": "3685e83e0c9071ed20704f643d32dcf58837927e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3685e83e0c9071ed20704f643d32dcf58837927e",
        "files": [
          "hardware/plugins/DelayedLink.h",
          "hardware/plugins/PluginMessages.h",
          "hardware/plugins/PluginTransports.h",
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Multiple bugfixes: 1. Objects returned to framework not released 2. Serial connections not released properly",
        "before_after_code_files": [
          "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h",
          "hardware/plugins/PluginMessages.h||hardware/plugins/PluginMessages.h",
          "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h",
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/DelayedLink.h||hardware/plugins/DelayedLink.h": [
          "File: hardware/plugins/DelayedLink.h -> hardware/plugins/DelayedLink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   DECLARE_PYTHON_SYMBOL(Py_ssize_t, PyList_Size, PyObject*);",
          "80:   DECLARE_PYTHON_SYMBOL(int, PyList_Append, PyObject* COMMA PyObject*);",
          "81:   DECLARE_PYTHON_SYMBOL(PyObject*, PyList_GetItem, PyObject* COMMA Py_ssize_t);",
          "82:   DECLARE_PYTHON_SYMBOL(void*, PyModule_GetState, PyObject*);",
          "83:   DECLARE_PYTHON_SYMBOL(PyObject*, PyState_FindModule, struct PyModuleDef*);",
          "84:   DECLARE_PYTHON_SYMBOL(void, PyErr_Clear, );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   DECLARE_PYTHON_SYMBOL(int, PyList_SetItem, PyObject* COMMA Py_ssize_t COMMA PyObject*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:      RESOLVE_PYTHON_SYMBOL(PyList_New);",
          "198:      RESOLVE_PYTHON_SYMBOL(PyList_Size);",
          "199:      RESOLVE_PYTHON_SYMBOL(PyList_GetItem);",
          "200:      RESOLVE_PYTHON_SYMBOL(PyList_Append);",
          "201:      RESOLVE_PYTHON_SYMBOL(PyModule_GetState);",
          "202:      RESOLVE_PYTHON_SYMBOL(PyState_FindModule);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:      RESOLVE_PYTHON_SYMBOL(PyList_SetItem);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373: #define PyList_New    pythonLib->PyList_New",
          "374: #define PyList_Size    pythonLib->PyList_Size",
          "375: #define PyList_GetItem   pythonLib->PyList_GetItem",
          "376: #define PyList_Append   pythonLib->PyList_Append",
          "377: #define PyModule_GetState  pythonLib->PyModule_GetState",
          "378: #define PyState_FindModule  pythonLib->PyState_FindModule",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378: #define PyList_SetItem   pythonLib->PyList_SetItem",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginMessages.h||hardware/plugins/PluginMessages.h": [
          "File: hardware/plugins/PluginMessages.h -> hardware/plugins/PluginMessages.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:    m_Name = __func__;",
          "30:    m_When = time(0);",
          "31:   };",
          "32:  public:",
          "33:   virtual const char* Name() { return m_Name.c_str(); };",
          "34:   virtual const CPlugin* Plugin() { return m_pPlugin; };",
          "36:  };",
          "",
          "[Removed Lines]",
          "35:   virtual void Process() = 0;",
          "",
          "[Added Lines]",
          "32:   virtual void ProcessLocked() = 0;",
          "36:   virtual void Process()",
          "37:   {",
          "38:    std::lock_guard<std::mutex> l(PythonMutex);",
          "39:    m_pPlugin->RestoreThread();",
          "40:    ProcessLocked();",
          "41:    m_pPlugin->ReleaseThread();",
          "42:   };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   InitializeMessage(CPlugin* pPlugin) : CPluginMessageBase(pPlugin) { m_Name = __func__; };",
          "57:   virtual void Process()",
          "58:   {",
          "59:    m_pPlugin->Initialise();",
          "60:   };",
          "61:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:    std::lock_guard<std::mutex> l(PythonMutex);",
          "69:   virtual void ProcessLocked() {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  public:",
          "70:   CCallbackBase(CPlugin* pPlugin, const std::string &Callback) : CPluginMessageBase(pPlugin), m_Callback(Callback) {};",
          "71:   virtual void Callback(PyObject* pParams) { if (m_Callback.length()) m_pPlugin->Callback(m_Callback, pParams); };",
          "79:   virtual const char* PythonName() { return m_Callback.c_str(); };",
          "80:  };",
          "",
          "[Removed Lines]",
          "72:   void Process()",
          "73:   {",
          "74:    std::lock_guard<std::mutex> l(PythonMutex);",
          "75:    m_pPlugin->RestoreThread();",
          "76:    ProcessLocked();",
          "77:    m_pPlugin->ReleaseThread();",
          "78:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456:   virtual void ProcessLocked() = 0;",
          "457:  public:",
          "458:   CEventBase(CPlugin* pPlugin) : CPluginMessageBase(pPlugin) {};",
          "466:  };",
          "468:  class ReadEvent : public CEventBase, public CHasConnection",
          "",
          "[Removed Lines]",
          "459:   virtual void Process()",
          "460:   {",
          "461:    std::lock_guard<std::mutex> l(PythonMutex);",
          "462:    m_pPlugin->RestoreThread();",
          "463:    ProcessLocked();",
          "464:    m_pPlugin->ReleaseThread();",
          "465:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginTransports.h||hardware/plugins/PluginTransports.h": [
          "File: hardware/plugins/PluginTransports.h -> hardware/plugins/PluginTransports.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   bool    IsConnecting() { return m_bConnecting; };",
          "44:   bool    IsConnected() { return m_bConnected; };",
          "45:   time_t    LastSeen() { return m_tLastSeen; };",
          "46:   virtual bool  ThreadPoolRequired() { return false; };",
          "47:   long    TotalBytes() { return m_iTotalBytes; };",
          "48:   virtual void  VerifyConnection();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   virtual bool  AsyncDisconnect() { return false; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   virtual void  handleRead(const boost::system::error_code& e, std::size_t bytes_transferred);",
          "71:   virtual void  handleWrite(const std::vector<byte>& pMessage);",
          "72:   virtual bool  handleDisconnect();",
          "73:   virtual bool  ThreadPoolRequired() { return true; };",
          "74:   boost::asio::ip::tcp::socket& Socket() { return *m_Socket; };",
          "75:   ~CPluginTransportTCP();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   virtual bool  AsyncDisconnect() { return IsConnected() || IsConnecting(); };",
          "",
          "---------------"
        ],
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:  {",
          "1002:   m_bIsStarted = false;",
          "1006:   try",
          "1007:   {",
          "1008:    PyEval_RestoreThread((PyThreadState*)m_mainworker.m_pluginsystem.PythonThread());",
          "",
          "[Removed Lines]",
          "1004:   std::lock_guard<std::mutex> l(PythonMutex);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1500:      _log.Log(LOG_NORM, \"(%s) Disconnect directive received for '%s:%s'.\", m_Name.c_str(), sAddress.c_str(), sPort.c_str());",
          "1501:    }",
          "1505:    {",
          "1506:     pConnection->pTransport->handleDisconnect();",
          "1507:     RemoveConnection(pConnection->pTransport);",
          "",
          "[Removed Lines]",
          "1504:    if (!pConnection->pTransport->IsConnected() && !pConnection->pTransport->IsConnecting())",
          "",
          "[Added Lines]",
          "1502:    if (!pConnection->pTransport->AsyncDisconnect())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1659:      {",
          "1660:       LogPythonException(sHandler);",
          "1661:      }",
          "1662:     }",
          "1663:     else if (m_bDebug & PDM_QUEUE) _log.Log(LOG_NORM, \"(%s) Message handler '%s' not callable, ignored.\", m_Name.c_str(), sHandler.c_str());",
          "1664:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1660:      Py_XDECREF(pReturnValue);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ef5bf01a6fc577587972354cb9931e07f48f832",
      "candidate_info": {
        "commit_hash": "4ef5bf01a6fc577587972354cb9931e07f48f832",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4ef5bf01a6fc577587972354cb9931e07f48f832",
        "files": [
          "main/SignalHandler.cpp"
        ],
        "message": "Increased heartbeat_check timeout to 5 minutes (process rebooted while doing a large database operation (migration of a sensor))",
        "before_after_code_files": [
          "main/SignalHandler.cpp||main/SignalHandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SignalHandler.cpp||main/SignalHandler.cpp": [
          "File: main/SignalHandler.cpp -> main/SignalHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"SignalHandler.h\"",
          "29: extern MainWorker m_mainworker;",
          "31: extern std::string logfile;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #define Heartbeat_Timeout 300 //5 minutes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486:  mytime(&now);",
          "488:  double diff = difftime(now, m_mainworker.m_LastHeartbeat);",
          "490:  {",
          "491:   _log.Log(LOG_ERROR, \"mainworker seems to have ended or hung unexpectedly (last update %f seconds ago)\", diff);",
          "492:   if (!IsDebuggerPresent())",
          "",
          "[Removed Lines]",
          "489:  if (diff > 60)",
          "",
          "[Added Lines]",
          "491:  if (diff > Heartbeat_Timeout)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500:  }",
          "502:  diff = difftime(now, m_LastHeartbeat);",
          "504:  {",
          "505:   _log.Log(LOG_ERROR, \"main thread seems to have ended or hung unexpectedly (last update %f seconds ago)\", diff);",
          "506:   if (!IsDebuggerPresent())",
          "",
          "[Removed Lines]",
          "503:  if (diff > 60)",
          "",
          "[Added Lines]",
          "505:  if (diff > Heartbeat_Timeout)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d883c17fcda726d8854bf389dfee4eabcfa03af",
      "candidate_info": {
        "commit_hash": "1d883c17fcda726d8854bf389dfee4eabcfa03af",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1d883c17fcda726d8854bf389dfee4eabcfa03af",
        "files": [
          "hardware/MQTT.cpp",
          "main/SQLHelper.cpp"
        ],
        "message": "Removing obsolete user variable function Removed wrong code call in notification handler",
        "before_after_code_files": [
          "hardware/MQTT.cpp||hardware/MQTT.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  Json::Value root;",
          "126:  Json::Reader jReader;",
          "127:  std::string szCommand = \"udevice\";",
          "128:  std::vector<std::vector<std::string> > result;",
          "129:  uint64_t idx = 0;",
          "130:  bool ret = jReader.parse(qMessage, root);",
          "131:  if ((!ret) || (!root.isObject()))",
          "132:   goto mqttinvaliddata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:  std::string Var1,Var2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   else if (szCommand == \"setuservariable\")",
          "162:   {",
          "163:    idx = (uint64_t)root[\"idx\"].asInt64();",
          "165:    if (result.empty())",
          "166:    {",
          "167:     _log.Log(LOG_ERROR, \"MQTT: unknown idx received! (idx %\" PRIu64 \")\", idx);",
          "168:     return;",
          "169:    }",
          "170:   }",
          "172:   if (szCommand == \"udevice\")",
          "173:   {",
          "174:    int HardwareID = atoi(result[0][0].c_str());",
          "",
          "[Removed Lines]",
          "164:    result = m_sql.safe_query(\"SELECT Name FROM UserVariables WHERE (ID==%\" PRIu64 \")\", idx);",
          "",
          "[Added Lines]",
          "169:    result = m_sql.safe_query(\"SELECT Name, VarType FROM UserVariables WHERE (ID==%\" PRIu64 \")\", idx);",
          "175:    Var1 = result[0][0];",
          "176:    Var2 = result[0][1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:   else if (szCommand == \"setuservariable\")",
          "384:   {",
          "385:    std::string varvalue = root[\"value\"].asString();",
          "387:   }",
          "388:   else if (szCommand == \"addlogmessage\")",
          "389:   {",
          "",
          "[Removed Lines]",
          "386:    m_sql.SetUserVariable(idx, varvalue, true);",
          "",
          "[Added Lines]",
          "394:    m_sql.UpdateUserVariable(root[\"idx\"].asString(), Var1, Var2, varvalue, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:     sound = root[\"sound\"].asString();",
          "412:    }",
          "413:    m_notifications.SendMessageEx(0, std::string(\"\"), NOTIFYALL, subject, body, std::string(\"\"), priority, sound, true);",
          "416:   }",
          "417:   else if (szCommand == \"getdeviceinfo\")",
          "418:   {",
          "",
          "[Removed Lines]",
          "414:    std::string varvalue = root[\"value\"].asString();",
          "415:    m_sql.SetUserVariable(idx, varvalue, true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7978:  return \"OK\";",
          "7979: }",
          "8000: std::string CSQLHelper::CheckUserVariableName(const std::string &varname)",
          "8001: {",
          "8002:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "7981: bool CSQLHelper::SetUserVariable(const uint64_t idx, const std::string &varvalue, const bool eventtrigger)",
          "7982: {",
          "7983:  std::string szLastUpdate = TimeToString(NULL, TF_DateTime);",
          "7984:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7985:  safe_query(",
          "7986:   \"UPDATE UserVariables SET Value='%q', LastUpdate='%q' WHERE (ID == %\" PRIu64 \")\",",
          "7987:   szVarValue.c_str(),",
          "7988:   szLastUpdate.c_str(),",
          "7989:   idx",
          "7990:  );",
          "7991:  if (m_bEnableEventSystem)",
          "7992:  {",
          "7993:   if (eventtrigger)",
          "7994:    m_mainworker.m_eventsystem.SetEventTrigger(idx, m_mainworker.m_eventsystem.REASON_USERVARIABLE, 0);",
          "7995:   m_mainworker.m_eventsystem.UpdateUserVariable(idx, \"\", szVarValue, -1, szLastUpdate);",
          "7996:  }",
          "7997:  return true;",
          "7998: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "469e795e4ac7ea51acd91ed655916c00e874ef43",
      "candidate_info": {
        "commit_hash": "469e795e4ac7ea51acd91ed655916c00e874ef43",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/469e795e4ac7ea51acd91ed655916c00e874ef43",
        "files": [
          "hardware/XiaomiGateway.cpp"
        ],
        "message": "Xiaomi added a bit more logging",
        "before_after_code_files": [
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <boost/bind.hpp>",
          "16: #ifndef WIN32",
          "18: #endif",
          "",
          "[Removed Lines]",
          "17:  #include <ifaddrs.h>",
          "",
          "[Added Lines]",
          "17: #include <ifaddrs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: std::list<XiaomiGateway*> gatewaylist;",
          "34: std::mutex gatewaylist_mutex;",
          "37: {",
          "38:  XiaomiGateway * ret = NULL;",
          "39:  {",
          "40:   std::unique_lock<std::mutex> lock(gatewaylist_mutex);",
          "41:   std::list<XiaomiGateway*>::iterator    it = gatewaylist.begin();",
          "43:   {",
          "45:    {",
          "47:     break;",
          "48:    };",
          "49:   };",
          "",
          "[Removed Lines]",
          "36: XiaomiGateway * XiaomiGateway::GatewayByIp( std::string ip )",
          "42:   for ( ; it != gatewaylist.end(); it++ )",
          "44:    if( ( *it )->GetGatewayIp() == ip )",
          "46:     ret = ( *it );",
          "",
          "[Added Lines]",
          "36: XiaomiGateway * XiaomiGateway::GatewayByIp(std::string ip)",
          "42:   for (; it != gatewaylist.end(); it++)",
          "44:    if ((*it)->GetGatewayIp() == ip)",
          "46:     ret = (*it);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:  {",
          "58:   std::unique_lock<std::mutex> lock(gatewaylist_mutex);",
          "59:   std::list<XiaomiGateway*>::iterator    it = gatewaylist.begin();",
          "61:   {",
          "63:    {",
          "65:     break;",
          "66:    };",
          "67:   };",
          "70:   {",
          "71:    SetAsMainGateway();",
          "72:   }",
          "",
          "[Removed Lines]",
          "60:   for ( ; it != gatewaylist.end(); it++ )",
          "62:    if( ( *it )->IsMainGateway() )",
          "64:     maingw = ( *it );",
          "69:   if( !maingw )",
          "",
          "[Added Lines]",
          "60:   for (; it != gatewaylist.end(); it++)",
          "62:    if ((*it)->IsMainGateway())",
          "64:     maingw = (*it);",
          "69:   if (!maingw)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   {",
          "75:    maingw->UnSetMainGateway();",
          "76:   }",
          "79:  }",
          "82:  {",
          "83:   maingw->Restart();",
          "84:  }",
          "",
          "[Removed Lines]",
          "78:   gatewaylist.push_back( this );",
          "81:  if( maingw )",
          "",
          "[Added Lines]",
          "78:   gatewaylist.push_back(this);",
          "81:  if (maingw)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "89:  XiaomiGateway * maingw = NULL;",
          "90:  {",
          "91:   std::unique_lock<std::mutex> lock(gatewaylist_mutex);",
          "94:   {",
          "95:    UnSetMainGateway();",
          "98:    {",
          "99:     std::list<XiaomiGateway*>::iterator    it = gatewaylist.begin();",
          "101:    }",
          "102:   }",
          "103:  }",
          "106:  {",
          "107:   maingw->Restart();",
          "108:  }",
          "",
          "[Removed Lines]",
          "92:   gatewaylist.remove( this );",
          "93:   if( IsMainGateway() )",
          "97:    if( gatewaylist.begin() != gatewaylist.end() )",
          "100:     maingw = ( *it );",
          "105:  if( maingw )",
          "",
          "[Added Lines]",
          "92:   gatewaylist.remove(this);",
          "93:   if (IsMainGateway())",
          "97:    if (gatewaylist.begin() != gatewaylist.end())",
          "100:     maingw = (*it);",
          "105:  if (maingw)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121:  char buf[64];",
          "122:  int count = 0;",
          "125:  {",
          "126:   _log.Log(LOG_ERROR, \"getifaddrs failed! (when trying to determine local ip address)\");",
          "127:   perror(\"getifaddrs\");",
          "",
          "[Removed Lines]",
          "124:  if(getifaddrs(&myaddrs) != 0)",
          "",
          "[Added Lines]",
          "124:  if (getifaddrs(&myaddrs) != 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "138:   switch (ifa->ifa_addr->sa_family)",
          "139:   {",
          "156:   }",
          "158:   if (!inet_ntop(ifa->ifa_addr->sa_family, in_addr, buf, sizeof(buf)))",
          "",
          "[Removed Lines]",
          "140:    case AF_INET:",
          "141:    {",
          "142:     struct sockaddr_in *s4 = (struct sockaddr_in *)ifa->ifa_addr;",
          "143:     in_addr = &s4->sin_addr;",
          "144:     break;",
          "145:    }",
          "147:    case AF_INET6:",
          "148:    {",
          "149:     struct sockaddr_in6 *s6 = (struct sockaddr_in6 *)ifa->ifa_addr;",
          "150:     in_addr = &s6->sin6_addr;",
          "151:     break;",
          "152:    }",
          "154:    default:",
          "155:     continue;",
          "",
          "[Added Lines]",
          "140:   case AF_INET:",
          "141:   {",
          "142:    struct sockaddr_in *s4 = (struct sockaddr_in *)ifa->ifa_addr;",
          "143:    in_addr = &s4->sin_addr;",
          "144:    break;",
          "145:   }",
          "147:   case AF_INET6:",
          "148:   {",
          "149:    struct sockaddr_in6 *s6 = (struct sockaddr_in6 *)ifa->ifa_addr;",
          "150:    in_addr = &s6->sin6_addr;",
          "151:    break;",
          "152:   }",
          "154:   default:",
          "155:    continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:   if (xcmd->unitcode == 8 || xcmd->unitcode == 9 || xcmd->unitcode == 10) {",
          "255:    message = \"{\\\"cmd\\\":\\\"write\\\",\\\"model\\\":\\\"\" + cmddevice + \"\\\",\\\"sid\\\":\\\"158d00\" + sid + \"\\\",\\\"short_id\\\":0,\\\"data\\\":\\\"{\" + cmdchannel + cmdcommand + \"\\\\\\\",\\\\\\\"key\\\\\\\":\\\\\\\"@gatewaykey\\\\\\\"}\\\" }\";",
          "257:    std::string command = \"on\";",
          "258:    switch (xcmd->cmnd) {",
          "259:    case gswitch_sOff:",
          "",
          "[Removed Lines]",
          "256:   } else if ((xcmd->subtype == sSwitchGeneralSwitch) && (xcmd->unitcode == 1)) {",
          "",
          "[Added Lines]",
          "256:   }",
          "257:   else if ((xcmd->subtype == sSwitchGeneralSwitch) && (xcmd->unitcode == 1)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "619:    m_sql.safe_query(\"UPDATE DeviceStatus SET Name='Xiaomi Wired Switch 2', SwitchType=%d, CustomImage=%i, Unit='2' WHERE(HardwareID == %d) AND (DeviceID == '%q') AND (Unit == '2')\", (switchtype), customimage, m_HwdID, ID.c_str());",
          "620:   }",
          "625:   if (switchtype == STYPE_Selector) {",
          "",
          "[Removed Lines]",
          "622:    m_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q', SwitchType=%d, CustomImage=%i WHERE(HardwareID == %d) AND (DeviceID == '%q') AND (Unit == '%d')\", Name.c_str(), (switchtype), customimage, m_HwdID, ID.c_str(), xcmd.unitcode);",
          "",
          "[Added Lines]",
          "623:   m_sql.safe_query(\"UPDATE DeviceStatus SET Name='%q', SwitchType=%d, CustomImage=%i WHERE(HardwareID == %d) AND (DeviceID == '%q') AND (Unit == '%d')\", Name.c_str(), (switchtype), customimage, m_HwdID, ID.c_str(), xcmd.unitcode);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "782:  AddGatewayToList();",
          "785:  {",
          "786:   _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): Selected as main Gateway\", m_HwdID);",
          "787:  }",
          "",
          "[Removed Lines]",
          "784:  if( m_ListenPort9898 )",
          "",
          "[Added Lines]",
          "785:  if (m_ListenPort9898)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "828:  catch (std::exception& e) {",
          "829:   _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): Could not detect local IP address using Boost.Asio: %s\", m_HwdID, e.what());",
          "830:  }",
          "833:  if (m_LocalIp == \"\") {",
          "834:   try {",
          "836:    std::string compareIp = m_GatewayIp.substr(0, (m_GatewayIp.length() - 3));",
          "839:    std::vector<std::string> ip_addrs;",
          "840:    if (XiaomiGateway::get_local_ipaddr(ip_addrs) > 0)",
          "841:    {",
          "843:     {",
          "844:      std::size_t found = addr.find(compareIp);",
          "846:      {",
          "847:       m_LocalIp = addr;",
          "848:       _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): Using %s for local IP address.\", m_HwdID, m_LocalIp.c_str());",
          "",
          "[Removed Lines]",
          "837:    _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): XiaomiGateway IP address starts with: %s\", m_HwdID, compareIp.c_str());",
          "842:     for(const std::string &addr : ip_addrs)",
          "845:      if (found != std::string::npos)",
          "",
          "[Added Lines]",
          "838:    _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): XiaomiGateway IP address starts with: %s\", m_HwdID, compareIp.c_str());",
          "843:     for (const std::string &addr : ip_addrs)",
          "846:      if (found != std::string::npos)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "850:      }",
          "851:     }",
          "852:    }",
          "854:    {",
          "856:    }",
          "857:   }",
          "858:   catch (std::exception& e) {",
          "",
          "[Removed Lines]",
          "853:    else",
          "855:     _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): Could not find local IP address with ifaddrs\", m_HwdID);",
          "",
          "[Added Lines]",
          "854:    else",
          "856:     _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): Could not find local IP address with ifaddrs\", m_HwdID);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "996: {",
          "997:  if (!error || error == boost::asio::error::message_size)",
          "998:  {",
          "1002:   {",
          "1003:    _log.Log(LOG_ERROR, \"XiaomiGateway: received data from  unregisted gateway!\");",
          "1004:    start_receive();",
          "",
          "[Removed Lines]",
          "999:   XiaomiGateway * TrueGateway =  m_XiaomiGateway->GatewayByIp( remote_endpoint_.address().to_v4().to_string() );",
          "1001:   if( !TrueGateway )",
          "",
          "[Added Lines]",
          "1000:   XiaomiGateway * TrueGateway = m_XiaomiGateway->GatewayByIp(remote_endpoint_.address().to_v4().to_string());",
          "1002:   if (!TrueGateway)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1023:    std::string sid = root[\"sid\"].asString();",
          "1024:    std::string data = root[\"data\"].asString();",
          "1025:    int unitcode = 1;",
          "1028:     Json::Value root2;",
          "1029:     ret = jReader.parse(data.c_str(), root2);",
          "1030:     if ((ret) || (!root2.isObject()))",
          "",
          "[Removed Lines]",
          "1026:    if ((cmd == \"report\") || (cmd == \"read_ack\") || (cmd == \"heartbeat\")) {",
          "",
          "[Added Lines]",
          "1027:    if ((cmd == \"report\") || (cmd == \"read_ack\") || (cmd == \"heartbeat\"))",
          "1028:    {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1077:       name = \"Aqara Cube\";",
          "1078:       type = STYPE_Selector;",
          "1079:      }",
          "1081:       name = \"Xiaomi Wireless Dual Wall Switch\";",
          "1082:       type = STYPE_Selector;",
          "1083:      }",
          "",
          "[Removed Lines]",
          "1080:      else if (model == \"86sw2\" || model == \"remote.b286acn01\" ) {",
          "",
          "[Added Lines]",
          "1081:      else if (model == \"86sw2\" || model == \"remote.b286acn01\") {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1121:      if (voltage != \"\" && voltage != \"3600\") {",
          "1122:       battery = ((atoi(voltage.c_str()) - 2200) / 10);",
          "1123:      }",
          "1125:       std::string status = root2[\"status\"].asString();",
          "1126:       std::string no_close = root2[\"no_close\"].asString();",
          "1127:       std::string no_motion = root2[\"no_motion\"].asString();",
          "",
          "[Removed Lines]",
          "1124:      if (type != STYPE_END) {",
          "",
          "[Added Lines]",
          "1125:      if (type != STYPE_END)",
          "1126:      {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1179:        on = true;",
          "1180:       }",
          "1181:       else if ((status == \"tap_twice\") || (status == \"long_click_release\") || (aqara_wireless1 == \"double_click\")) {",
          "1184:       }",
          "1185:       else if ((status == \"shake_air\") || (aqara_wireless2 == \"double_click\")) {",
          "1188:       }",
          "1189:       else if ((status == \"swing\") || (aqara_wireless3 == \"double_both_click\")) {",
          "1192:       }",
          "1193:       else if ((status == \"alert\") || (aqara_wireless1 == \"long_click\")) {",
          "1196:       }",
          "1197:       else if ((status == \"free_fall\") || (aqara_wireless2 == \"long_click\")) {",
          "1200:       }",
          "1201:       else if (aqara_wireless3 == \"long_both_click\") {",
          "1204:       }",
          "1205:       std::string rotate = root2[\"rotate\"].asString();",
          "1206:       if (rotate != \"\") {",
          "",
          "[Removed Lines]",
          "1182:           level = 40;",
          "1183:           on = true;",
          "1186:           level = 50;",
          "1187:           on = true;",
          "1190:           level = 60;",
          "1191:           on = true;",
          "1194:           level = 70;",
          "1195:           on = true;",
          "1198:           level = 80;",
          "1199:           on = true;",
          "1202:           level = 90;",
          "1203:           on = true;",
          "",
          "[Added Lines]",
          "1184:        level = 40;",
          "1185:        on = true;",
          "1188:        level = 50;",
          "1189:        on = true;",
          "1192:        level = 60;",
          "1193:        on = true;",
          "1196:        level = 70;",
          "1197:        on = true;",
          "1200:        level = 80;",
          "1201:        on = true;",
          "1204:        level = 90;",
          "1205:        on = true;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1237:        }",
          "1238:       }",
          "1239:      }",
          "1242:       type = STYPE_OnOff;",
          "1243:       std::string aqara_wired1 = root2[\"channel_0\"].asString();",
          "",
          "[Removed Lines]",
          "1240:      else if ((name == \"Xiaomi Wired Dual Wall Switch\") || (name == \"Xiaomi Wired Single Wall Switch\")) {",
          "",
          "[Added Lines]",
          "1242:      else if ((name == \"Xiaomi Wired Dual Wall Switch\") || (name == \"Xiaomi Wired Single Wall Switch\"))",
          "1243:      {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1263:        TrueGateway->InsertUpdateSwitch(sid.c_str(), name, state, type, unitcode, 0, cmd, \"\", \"\", battery);",
          "1264:       }",
          "1265:      }",
          "1268:       std::string temperature = root2[\"temperature\"].asString();",
          "1269:       std::string humidity = root2[\"humidity\"].asString();",
          "1270:       float pressure = 0;",
          "",
          "[Removed Lines]",
          "1266:      else if ((name == \"Xiaomi Temperature/Humidity\") || (name == \"Xiaomi Aqara Weather\")) {",
          "",
          "[Added Lines]",
          "1269:      else if ((name == \"Xiaomi Temperature/Humidity\") || (name == \"Xiaomi Aqara Weather\"))",
          "1270:      {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1289:        TrueGateway->InsertUpdateTempHum(sid.c_str(), \"Xiaomi TempHum\", temp, hum, battery);",
          "1290:       }",
          "1291:       else if (temperature != \"\") {",
          "1293:        if (temp < 99) {",
          "1294:         TrueGateway->InsertUpdateTemperature(sid.c_str(), \"Xiaomi Temperature\", temp, battery);",
          "1295:        }",
          "1297:        int hum = atoi(humidity.c_str()) / 100;",
          "1298:        if (hum > 1) {",
          "1299:         TrueGateway->InsertUpdateHumidity(sid.c_str(), \"Xiaomi Humidity\", hum, battery);",
          "1300:        }",
          "1301:       }",
          "1302:      }",
          "1304:       std::string rgb = root2[\"rgb\"].asString();",
          "1305:       std::string illumination = root2[\"illumination\"].asString();",
          "1306:       if (rgb != \"\") {",
          "1310:        {",
          "1311:         std::stringstream ss;",
          "1312:         ss << std::hex << atoi(rgb.c_str());",
          "",
          "[Removed Lines]",
          "1292:        float temp = (float)atof(temperature.c_str())/100.0f;",
          "1296:       } else if (humidity != \"\") {",
          "1303:      else if (name == \"Xiaomi RGB Gateway\") {",
          "1309:        if (TrueGateway->GetGatewaySid() == sid)",
          "",
          "[Added Lines]",
          "1295:        float temp = (float)atof(temperature.c_str()) / 100.0f;",
          "1299:       }",
          "1300:       else if (humidity != \"\") {",
          "1307:      else if (name == \"Xiaomi RGB Gateway\")",
          "1308:      {",
          "1314:        if (TrueGateway->GetGatewaySid() == sid)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1342:        }",
          "1343:       }",
          "1344:      }",
          "1347:      }",
          "1348:     }",
          "1349:    }",
          "1351:     Json::Value root2;",
          "1352:     ret = jReader.parse(data.c_str(), root2);",
          "1353:     if ((ret) || (!root2.isObject()))",
          "",
          "[Removed Lines]",
          "1345:      else {",
          "1346:       _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): unhandled model: %s\", TrueGateway->GetGatewayHardwareID(), model.c_str());",
          "1350:    else if (cmd == \"get_id_list_ack\") {",
          "",
          "[Added Lines]",
          "1350:      else",
          "1351:      {",
          "1352:       _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): unhandled model: %s, name: %s\", TrueGateway->GetGatewayHardwareID(), model.c_str(), name.c_str());",
          "1356:    else if (cmd == \"get_id_list_ack\")",
          "1357:    {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1364:     }",
          "1365:     showmessage = false;",
          "1366:    }",
          "1369:      std::string ip = root[\"ip\"].asString();",
          "1372:      {",
          "1373:       _log.Log(LOG_STATUS, \"XiaomiGateway: RGB Gateway Detected\");",
          "1374:       TrueGateway->InsertUpdateRGBGateway(sid.c_str(), \"Xiaomi RGB Gateway (\" + ip + \")\", false, 0, 100);",
          "",
          "[Removed Lines]",
          "1367:    else if (cmd == \"iam\") {",
          "1368:     if (model == \"gateway\" || model == \"gateway.v3\" || model == \"acpartner.v3\") {",
          "1371:      if (ip == TrueGateway->GetGatewayIp())",
          "",
          "[Added Lines]",
          "1374:    else if (cmd == \"iam\")",
          "1375:    {",
          "1376:     if (model == \"gateway\" || model == \"gateway.v3\" || model == \"acpartner.v3\")",
          "1377:     {",
          "1380:      if (ip == TrueGateway->GetGatewayIp())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1388:     }",
          "1389:     showmessage = false;",
          "1390:    }",
          "1393:    }",
          "1394:   }",
          "1395:   if (showmessage && m_OutputMessage) {",
          "",
          "[Removed Lines]",
          "1391:    else {",
          "1392:     _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): unknown cmd received: %s\", TrueGateway->GetGatewayHardwareID(), cmd.c_str());",
          "",
          "[Added Lines]",
          "1400:    else",
          "1401:    {",
          "1402:     _log.Log(LOG_STATUS, \"XiaomiGateway (ID=%d): unknown cmd received: %s, model: %s\", TrueGateway->GetGatewayHardwareID(), cmd.c_str(), model.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2682b5ae04f235f6cc987d76bb300dd784895148",
      "candidate_info": {
        "commit_hash": "2682b5ae04f235f6cc987d76bb300dd784895148",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2682b5ae04f235f6cc987d76bb300dd784895148",
        "files": [
          "CMakeLists.txt",
          "hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h",
          "hardware/Netatmo.cpp",
          "hardware/Netatmo.h",
          "hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h",
          "main/BaroForecastCalculator.cpp",
          "main/BaroForecastCalculator.h",
          "main/Logger.h",
          "msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters"
        ],
        "message": "Moved pressure forecast calculator to it's own class",
        "before_after_code_files": [
          "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp",
          "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h",
          "hardware/Netatmo.cpp||hardware/Netatmo.cpp",
          "hardware/Netatmo.h||hardware/Netatmo.h",
          "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp",
          "hardware/TTNMQTT.h||hardware/TTNMQTT.h",
          "main/BaroForecastCalculator.cpp||main/BaroForecastCalculator.cpp",
          "main/BaroForecastCalculator.h||main/BaroForecastCalculator.h",
          "main/Logger.h||main/Logger.h",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/DomoticzHardware.cpp||hardware/DomoticzHardware.cpp": [
          "File: hardware/DomoticzHardware.cpp -> hardware/DomoticzHardware.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: {",
          "16:  mytime(&m_LastHeartbeat);",
          "17:  mytime(&m_LastHeartbeatReceive);",
          "19: };",
          "21: CDomoticzHardwareBase::~CDomoticzHardwareBase()",
          "",
          "[Removed Lines]",
          "18:  mytime(&m_BaroCalcLastTime);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "921:  gDevice.intval2 = FanSpeed;",
          "922:  sDecodeRXMessage(this, (const unsigned char *)&gDevice, defaultname.c_str(), BatteryLevel);",
          "923: }",
          "",
          "[Removed Lines]",
          "926: int CDomoticzHardwareBase::CalculateBaroForecast(const double pressure)",
          "927: {",
          "929:  if (m_baro_minuteCount <= 5){",
          "930:   m_pressureSamples[0][m_baro_minuteCount] = pressure;",
          "931:  }",
          "933:  else if ((m_baro_minuteCount >= 30) && (m_baro_minuteCount <= 35)){",
          "934:   m_pressureSamples[1][m_baro_minuteCount - 30] = pressure;",
          "935:  }",
          "937:  else if ((m_baro_minuteCount >= 60) && (m_baro_minuteCount <= 65)){",
          "938:   m_pressureSamples[2][m_baro_minuteCount - 60] = pressure;",
          "939:  }",
          "941:  else if ((m_baro_minuteCount >= 90) && (m_baro_minuteCount <= 95)){",
          "942:   m_pressureSamples[3][m_baro_minuteCount - 90] = pressure;",
          "943:  }",
          "945:  else if ((m_baro_minuteCount >= 120) && (m_baro_minuteCount <= 125)){",
          "946:   m_pressureSamples[4][m_baro_minuteCount - 120] = pressure;",
          "947:  }",
          "949:  else if ((m_baro_minuteCount >= 150) && (m_baro_minuteCount <= 155)){",
          "950:   m_pressureSamples[5][m_baro_minuteCount - 150] = pressure;",
          "951:  }",
          "953:  else if ((m_baro_minuteCount >= 180) && (m_baro_minuteCount <= 185)){",
          "954:   m_pressureSamples[6][m_baro_minuteCount - 180] = pressure;",
          "955:  }",
          "957:  else if ((m_baro_minuteCount >= 210) && (m_baro_minuteCount <= 215)){",
          "958:   m_pressureSamples[7][m_baro_minuteCount - 210] = pressure;",
          "959:  }",
          "961:  else if ((m_baro_minuteCount >= 240) && (m_baro_minuteCount <= 245)){",
          "962:   m_pressureSamples[8][m_baro_minuteCount - 240] = pressure;",
          "963:  }",
          "966:  if (m_baro_minuteCount == 5) {",
          "968:   m_pressureAvg[0] = ((m_pressureSamples[0][0] + m_pressureSamples[0][1]",
          "969:    + m_pressureSamples[0][2] + m_pressureSamples[0][3]",
          "970:    + m_pressureSamples[0][4] + m_pressureSamples[0][5]) / 6);",
          "971:  }",
          "972:  else if (m_baro_minuteCount == 35) {",
          "974:   m_pressureAvg[1] = ((m_pressureSamples[1][0] + m_pressureSamples[1][1]",
          "975:    + m_pressureSamples[1][2] + m_pressureSamples[1][3]",
          "976:    + m_pressureSamples[1][4] + m_pressureSamples[1][5]) / 6);",
          "977:   double change = (m_pressureAvg[1] - m_pressureAvg[0]);",
          "978:   m_dP_dt = change / 5;",
          "979:  }",
          "980:  else if (m_baro_minuteCount == 65) {",
          "982:   m_pressureAvg[2] = ((m_pressureSamples[2][0] + m_pressureSamples[2][1]",
          "983:    + m_pressureSamples[2][2] + m_pressureSamples[2][3]",
          "984:    + m_pressureSamples[2][4] + m_pressureSamples[2][5]) / 6);",
          "985:   double change = (m_pressureAvg[2] - m_pressureAvg[0]);",
          "986:   m_dP_dt = change / 10;",
          "987:  }",
          "988:  else if (m_baro_minuteCount == 95) {",
          "990:   m_pressureAvg[3] = ((m_pressureSamples[3][0] + m_pressureSamples[3][1]",
          "991:    + m_pressureSamples[3][2] + m_pressureSamples[3][3]",
          "992:    + m_pressureSamples[3][4] + m_pressureSamples[3][5]) / 6);",
          "993:   double change = (m_pressureAvg[3] - m_pressureAvg[0]);",
          "994:   m_dP_dt = change / 15;",
          "995:  }",
          "996:  else if (m_baro_minuteCount == 125) {",
          "998:   m_pressureAvg[4] = ((m_pressureSamples[4][0] + m_pressureSamples[4][1]",
          "999:    + m_pressureSamples[4][2] + m_pressureSamples[4][3]",
          "1000:    + m_pressureSamples[4][4] + m_pressureSamples[4][5]) / 6);",
          "1001:   double change = (m_pressureAvg[4] - m_pressureAvg[0]);",
          "1002:   m_dP_dt = change / 20;",
          "1003:  }",
          "1004:  else if (m_baro_minuteCount == 155) {",
          "1006:   m_pressureAvg[5] = ((m_pressureSamples[5][0] + m_pressureSamples[5][1]",
          "1007:    + m_pressureSamples[5][2] + m_pressureSamples[5][3]",
          "1008:    + m_pressureSamples[5][4] + m_pressureSamples[5][5]) / 6);",
          "1009:   double change = (m_pressureAvg[5] - m_pressureAvg[0]);",
          "1010:   m_dP_dt = change / 25;",
          "1011:  }",
          "1012:  else if (m_baro_minuteCount == 185) {",
          "1014:   m_pressureAvg[6] = ((m_pressureSamples[6][0] + m_pressureSamples[6][1]",
          "1015:    + m_pressureSamples[6][2] + m_pressureSamples[6][3]",
          "1016:    + m_pressureSamples[6][4] + m_pressureSamples[6][5]) / 6);",
          "1017:   double change = (m_pressureAvg[6] - m_pressureAvg[0]);",
          "1018:   m_dP_dt = change / 30;",
          "1019:  }",
          "1020:  else if (m_baro_minuteCount == 215) {",
          "1022:   m_pressureAvg[7] = ((m_pressureSamples[7][0] + m_pressureSamples[7][1]",
          "1023:    + m_pressureSamples[7][2] + m_pressureSamples[7][3]",
          "1024:    + m_pressureSamples[7][4] + m_pressureSamples[7][5]) / 6);",
          "1025:   double change = (m_pressureAvg[7] - m_pressureAvg[0]);",
          "1026:   m_dP_dt = change / 35;",
          "1027:  }",
          "1028:  else if (m_baro_minuteCount == 245) {",
          "1030:   m_pressureAvg[8] = ((m_pressureSamples[8][0] + m_pressureSamples[8][1]",
          "1031:    + m_pressureSamples[8][2] + m_pressureSamples[8][3]",
          "1032:    + m_pressureSamples[8][4] + m_pressureSamples[8][5]) / 6);",
          "1033:   double change = (m_pressureAvg[8] - m_pressureAvg[0]);",
          "1034:   m_dP_dt = change / 40; // note this is for t = 4 hour",
          "1036:   m_baro_minuteCount -= 30;",
          "1037:   m_pressureAvg[0] = m_pressureAvg[1];",
          "1038:   m_pressureAvg[1] = m_pressureAvg[2];",
          "1039:   m_pressureAvg[2] = m_pressureAvg[3];",
          "1040:   m_pressureAvg[3] = m_pressureAvg[4];",
          "1041:   m_pressureAvg[4] = m_pressureAvg[5];",
          "1042:   m_pressureAvg[5] = m_pressureAvg[6];",
          "1043:   m_pressureAvg[6] = m_pressureAvg[7];",
          "1044:   m_pressureAvg[7] = m_pressureAvg[8];",
          "1045:  }",
          "1047:  m_baro_minuteCount++;",
          "1049:  if (m_baro_minuteCount < 36) //if time is less than 35 min",
          "1050:   return wsbaroforcast_unknown; // Unknown, more time needed",
          "1051:  else if (m_dP_dt < (-0.25))",
          "1052:   return wsbaroforcast_heavy_rain; // Quickly falling LP, Thunderstorm, not stable",
          "1053:  else if (m_dP_dt > 0.25)",
          "1054:   return wsbaroforcast_unstable; // Quickly rising HP, not stable weather",
          "1055:  else if ((m_dP_dt > (-0.25)) && (m_dP_dt < (-0.05)))",
          "1056:   return wsbaroforcast_rain; // Slowly falling Low Pressure System, stable rainy weather",
          "1057:  else if ((m_dP_dt > 0.05) && (m_dP_dt < 0.25))",
          "1058:   return wsbaroforcast_sunny; // Slowly rising HP stable good weather",
          "1059:  else if ((m_dP_dt >(-0.05)) && (m_dP_dt < 0.05))",
          "1060:   return wsbaroforcast_stable; // Stable weather",
          "1061:  else",
          "1062:   return wsbaroforcast_unknown; // Unknown",
          "1063: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/DomoticzHardware.h||hardware/DomoticzHardware.h": [
          "File: hardware/DomoticzHardware.h -> hardware/DomoticzHardware.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  int m_iHBCounter = { 0 };",
          "98:  std::mutex readQueueMutex;",
          "99:  unsigned char m_rxbuffer[RX_BUFFER_SIZE] = { 0 };",
          "104:  bool m_bIsStarted = { false };",
          "106: private:",
          "107:     void Do_Heartbeat_Work();",
          "109:  volatile bool m_stopHeartbeatrequested = { false };",
          "110:  std::shared_ptr<std::thread> m_Heartbeatthread = { nullptr };",
          "119: };",
          "",
          "[Removed Lines]",
          "102:  int CalculateBaroForecast(const double pressure);",
          "112:  int m_baro_minuteCount = { 0 };",
          "113:     double m_pressureSamples[9][6];",
          "114:     double m_pressureAvg[9];",
          "115:  double m_dP_dt = { 0 };",
          "116:  int m_last_forecast = { 0x07 }; //unknown",
          "117:  time_t m_BaroCalcLastTime = { 0 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/Netatmo.cpp||hardware/Netatmo.cpp": [
          "File: hardware/Netatmo.cpp -> hardware/Netatmo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:  if (bHaveTemp && bHaveHum && bHaveBaro)",
          "517:  {",
          "545:   SendTempHumBaroSensorFloat(ID, batValue, temp, hum, baro, nforecast, name, rssiLevel);",
          "546:  }",
          "547:  else if (bHaveTemp && bHaveHum)",
          "",
          "[Removed Lines]",
          "518:   int nforecast = CalculateBaroForecast(baro);",
          "519:   if (temp < 0)",
          "520:   {",
          "521:    if (",
          "522:     (nforecast == wsbaroforcast_rain) ||",
          "523:     (nforecast == wsbaroforcast_heavy_rain)",
          "524:     )",
          "525:    {",
          "526:     nforecast = wsbaroforcast_snow;",
          "527:    }",
          "528:   }",
          "529:   if (nforecast == wsbaroforcast_unknown)",
          "530:   {",
          "531:    nforecast = wsbaroforcast_some_clouds;",
          "532:    float pressure = baro;",
          "533:    if (pressure <= 980)",
          "534:     nforecast = wsbaroforcast_heavy_rain;",
          "535:    else if (pressure <= 995)",
          "536:    {",
          "537:     if (temp > 1)",
          "538:      nforecast = wsbaroforcast_rain;",
          "539:     else",
          "540:      nforecast = wsbaroforcast_snow;",
          "541:    }",
          "542:    else if (pressure >= 1029)",
          "543:     nforecast = wsbaroforcast_sunny;",
          "544:   }",
          "",
          "[Added Lines]",
          "518:   int nforecast = m_forecast_calculators[ID].CalculateBaroForecast(temp, baro);",
          "",
          "---------------"
        ],
        "hardware/Netatmo.h||hardware/Netatmo.h": [
          "File: hardware/Netatmo.h -> hardware/Netatmo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #pragma once",
          "3: #include \"DomoticzHardware.h\"",
          "5: namespace Json",
          "6: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"../main/BaroForecastCalculator.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  std::map<std::string, std::string> m_ModuleNames;",
          "74:  std::map<std::string, int> m_ModuleIDs;",
          "76:  int GetBatteryLevel(const std::string &ModuleType, int battery_percent);",
          "77:  bool ParseDashboard(const Json::Value &root, const int DevIdx, const int ID, const std::string &name, const std::string &ModuleType, const int battery_percent, const int rf_status);",
          "78: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:  std::map<int, CBaroForecastCalculator> m_forecast_calculators;",
          "",
          "---------------"
        ],
        "hardware/TTNMQTT.cpp||hardware/TTNMQTT.cpp": [
          "File: hardware/TTNMQTT.cpp -> hardware/TTNMQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:  return ret;",
          "319: }",
          "322: {",
          "323:  for (auto itt = root.begin(); itt != root.end(); ++itt)",
          "324:  {",
          "",
          "[Removed Lines]",
          "321: void CTTNMQTT::FlasgSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel)",
          "",
          "[Added Lines]",
          "321: void CTTNMQTT::FlagSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:     if (bHaveBaro)",
          "445:     {",
          "446:      baro = vBaro[\"value\"].asFloat();",
          "459:     }",
          "460:     if (bHaveTemp && bHaveHumidity && bHaveBaro)",
          "461:     {",
          "",
          "[Removed Lines]",
          "448:      if (baro <= 980)",
          "449:       nforecast = wsbaroforcast_heavy_rain;",
          "450:      else if (baro <= 995)",
          "451:      {",
          "452:       if (temp > 1)",
          "453:        nforecast = wsbaroforcast_rain;",
          "454:       else",
          "455:        nforecast = wsbaroforcast_snow;",
          "456:      }",
          "457:      else if (baro >= 1029)",
          "458:       nforecast = wsbaroforcast_sunny;",
          "",
          "[Added Lines]",
          "447:      if (bHaveTemp)",
          "448:       nforecast = m_forecast_calculators[DeviceName].CalculateBaroForecast(temp, baro);",
          "449:      else",
          "450:       nforecast = m_forecast_calculators[DeviceName].CalculateBaroForecast(baro);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469:     {",
          "470:      SendTempBaroSensor(DeviceID, BatteryLevel, temp, baro, DeviceName);",
          "471:     }",
          "473:      if (bHaveTemp)",
          "474:      {",
          "475:       SendTempSensor(DeviceID, BatteryLevel, temp, DeviceName, rssi);",
          "",
          "[Removed Lines]",
          "472:     else {",
          "",
          "[Added Lines]",
          "464:     else",
          "465:     {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:      }",
          "481:      if (bHaveBaro)",
          "482:      {",
          "484:      }",
          "485:     }",
          "486:     if (bHaveTemp)",
          "488:     if (bHaveHumidity)",
          "490:     if (bHaveBaro)",
          "492:    }",
          "493:    else if (type == \"gps\")",
          "494:    {",
          "",
          "[Removed Lines]",
          "483:       SendBaroSensor(DeviceID, 1, BatteryLevel, baro, CalculateBaroForecast(baro), DeviceName);",
          "487:      FlasgSensorWithChannelUsed(payload, \"temp\", channel);",
          "489:      FlasgSensorWithChannelUsed(payload, \"humidity\", channel);",
          "491:      FlasgSensorWithChannelUsed(payload, \"baro\", channel);",
          "",
          "[Added Lines]",
          "476:       SendBaroSensor(DeviceID, 1, BatteryLevel, baro, nforecast, DeviceName);",
          "480:      FlagSensorWithChannelUsed(payload, \"temp\", channel);",
          "482:      FlagSensorWithChannelUsed(payload, \"humidity\", channel);",
          "484:      FlagSensorWithChannelUsed(payload, \"baro\", channel);",
          "",
          "---------------"
        ],
        "hardware/TTNMQTT.h||hardware/TTNMQTT.h": [
          "File: hardware/TTNMQTT.h -> hardware/TTNMQTT.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <mosquittopp.h>",
          "11: #endif",
          "12: #endif",
          "14: namespace Json",
          "15: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include \"../main/BaroForecastCalculator.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  bool m_bDoReconnect;",
          "35:  bool m_IsConnected;",
          "36:  boost::signals2::signal<void()> sDisconnected;",
          "42: protected:",
          "43:  std::string m_szIPAddress;",
          "44:  unsigned short m_usIPPort;",
          "",
          "[Removed Lines]",
          "37: private:",
          "38:  bool ConnectInt();",
          "39:  bool ConnectIntEx();",
          "40:  Json::Value GetSensorWithChannel(const Json::Value &root, const std::string &stype, const int sChannel);",
          "41:  void FlasgSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:  void WriteInt(const std::string &sendStr) override;",
          "55:  std::shared_ptr<std::thread> m_thread;",
          "56:  volatile bool m_stoprequested;",
          "57: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: private:",
          "54:  bool ConnectInt();",
          "55:  bool ConnectIntEx();",
          "56:  Json::Value GetSensorWithChannel(const Json::Value &root, const std::string &stype, const int sChannel);",
          "57:  void FlagSensorWithChannelUsed(Json::Value &root, const std::string &stype, const int sChannel);",
          "58:  std::map<std::string, CBaroForecastCalculator> m_forecast_calculators;",
          "",
          "---------------"
        ],
        "main/BaroForecastCalculator.cpp||main/BaroForecastCalculator.cpp": [
          "File: main/BaroForecastCalculator.cpp -> main/BaroForecastCalculator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"stdafx.h\"",
          "2: #include \"BaroForecastCalculator.h\"",
          "3: #include \"../hardware/hardwaretypes.h\"",
          "4: #include \"localtime_r.h\"",
          "8: CBaroForecastCalculator::CBaroForecastCalculator()",
          "9: {",
          "10:  Init();",
          "11: }",
          "13: CBaroForecastCalculator::~CBaroForecastCalculator()",
          "14: {",
          "15: }",
          "17: void CBaroForecastCalculator::Init()",
          "18: {",
          "19:  m_baro_minuteCount = 0;",
          "20:  m_dP_dt = 0; // Pressure delta over time",
          "21:  m_last_forecast = wsbaroforcast_unknown;",
          "22:  mytime(&m_BaroCalcLastTime);",
          "23:  for (int ii = 0; ii < 9; ii++)",
          "24:  {",
          "25:   for (int jj = 0; jj < 6; jj++)",
          "26:   {",
          "27:    m_pressureSamples[ii][jj] = 0;",
          "28:   }",
          "29:   m_pressureAvg[ii] = 0;",
          "30:  }",
          "31: }",
          "34: int CBaroForecastCalculator::CalculateBaroForecast(const double pressure)",
          "35: {",
          "37:  if (m_baro_minuteCount <= 5) {",
          "38:   m_pressureSamples[0][m_baro_minuteCount] = pressure;",
          "39:  }",
          "41:  else if ((m_baro_minuteCount >= 30) && (m_baro_minuteCount <= 35)) {",
          "42:   m_pressureSamples[1][m_baro_minuteCount - 30] = pressure;",
          "43:  }",
          "45:  else if ((m_baro_minuteCount >= 60) && (m_baro_minuteCount <= 65)) {",
          "46:   m_pressureSamples[2][m_baro_minuteCount - 60] = pressure;",
          "47:  }",
          "49:  else if ((m_baro_minuteCount >= 90) && (m_baro_minuteCount <= 95)) {",
          "50:   m_pressureSamples[3][m_baro_minuteCount - 90] = pressure;",
          "51:  }",
          "53:  else if ((m_baro_minuteCount >= 120) && (m_baro_minuteCount <= 125)) {",
          "54:   m_pressureSamples[4][m_baro_minuteCount - 120] = pressure;",
          "55:  }",
          "57:  else if ((m_baro_minuteCount >= 150) && (m_baro_minuteCount <= 155)) {",
          "58:   m_pressureSamples[5][m_baro_minuteCount - 150] = pressure;",
          "59:  }",
          "61:  else if ((m_baro_minuteCount >= 180) && (m_baro_minuteCount <= 185)) {",
          "62:   m_pressureSamples[6][m_baro_minuteCount - 180] = pressure;",
          "63:  }",
          "65:  else if ((m_baro_minuteCount >= 210) && (m_baro_minuteCount <= 215)) {",
          "66:   m_pressureSamples[7][m_baro_minuteCount - 210] = pressure;",
          "67:  }",
          "69:  else if ((m_baro_minuteCount >= 240) && (m_baro_minuteCount <= 245)) {",
          "70:   m_pressureSamples[8][m_baro_minuteCount - 240] = pressure;",
          "71:  }",
          "74:  if (m_baro_minuteCount == 5) {",
          "76:   m_pressureAvg[0] = ((m_pressureSamples[0][0] + m_pressureSamples[0][1]",
          "77:    + m_pressureSamples[0][2] + m_pressureSamples[0][3]",
          "78:    + m_pressureSamples[0][4] + m_pressureSamples[0][5]) / 6);",
          "79:  }",
          "80:  else if (m_baro_minuteCount == 35) {",
          "82:   m_pressureAvg[1] = ((m_pressureSamples[1][0] + m_pressureSamples[1][1]",
          "83:    + m_pressureSamples[1][2] + m_pressureSamples[1][3]",
          "84:    + m_pressureSamples[1][4] + m_pressureSamples[1][5]) / 6);",
          "85:   double change = (m_pressureAvg[1] - m_pressureAvg[0]);",
          "86:   m_dP_dt = change / 5;",
          "87:  }",
          "88:  else if (m_baro_minuteCount == 65) {",
          "90:   m_pressureAvg[2] = ((m_pressureSamples[2][0] + m_pressureSamples[2][1]",
          "91:    + m_pressureSamples[2][2] + m_pressureSamples[2][3]",
          "92:    + m_pressureSamples[2][4] + m_pressureSamples[2][5]) / 6);",
          "93:   double change = (m_pressureAvg[2] - m_pressureAvg[0]);",
          "94:   m_dP_dt = change / 10;",
          "95:  }",
          "96:  else if (m_baro_minuteCount == 95) {",
          "98:   m_pressureAvg[3] = ((m_pressureSamples[3][0] + m_pressureSamples[3][1]",
          "99:    + m_pressureSamples[3][2] + m_pressureSamples[3][3]",
          "100:    + m_pressureSamples[3][4] + m_pressureSamples[3][5]) / 6);",
          "101:   double change = (m_pressureAvg[3] - m_pressureAvg[0]);",
          "102:   m_dP_dt = change / 15;",
          "103:  }",
          "104:  else if (m_baro_minuteCount == 125) {",
          "106:   m_pressureAvg[4] = ((m_pressureSamples[4][0] + m_pressureSamples[4][1]",
          "107:    + m_pressureSamples[4][2] + m_pressureSamples[4][3]",
          "108:    + m_pressureSamples[4][4] + m_pressureSamples[4][5]) / 6);",
          "109:   double change = (m_pressureAvg[4] - m_pressureAvg[0]);",
          "110:   m_dP_dt = change / 20;",
          "111:  }",
          "112:  else if (m_baro_minuteCount == 155) {",
          "114:   m_pressureAvg[5] = ((m_pressureSamples[5][0] + m_pressureSamples[5][1]",
          "115:    + m_pressureSamples[5][2] + m_pressureSamples[5][3]",
          "116:    + m_pressureSamples[5][4] + m_pressureSamples[5][5]) / 6);",
          "117:   double change = (m_pressureAvg[5] - m_pressureAvg[0]);",
          "118:   m_dP_dt = change / 25;",
          "119:  }",
          "120:  else if (m_baro_minuteCount == 185) {",
          "122:   m_pressureAvg[6] = ((m_pressureSamples[6][0] + m_pressureSamples[6][1]",
          "123:    + m_pressureSamples[6][2] + m_pressureSamples[6][3]",
          "124:    + m_pressureSamples[6][4] + m_pressureSamples[6][5]) / 6);",
          "125:   double change = (m_pressureAvg[6] - m_pressureAvg[0]);",
          "126:   m_dP_dt = change / 30;",
          "127:  }",
          "128:  else if (m_baro_minuteCount == 215) {",
          "130:   m_pressureAvg[7] = ((m_pressureSamples[7][0] + m_pressureSamples[7][1]",
          "131:    + m_pressureSamples[7][2] + m_pressureSamples[7][3]",
          "132:    + m_pressureSamples[7][4] + m_pressureSamples[7][5]) / 6);",
          "133:   double change = (m_pressureAvg[7] - m_pressureAvg[0]);",
          "134:   m_dP_dt = change / 35;",
          "135:  }",
          "136:  else if (m_baro_minuteCount == 245) {",
          "138:   m_pressureAvg[8] = ((m_pressureSamples[8][0] + m_pressureSamples[8][1]",
          "139:    + m_pressureSamples[8][2] + m_pressureSamples[8][3]",
          "140:    + m_pressureSamples[8][4] + m_pressureSamples[8][5]) / 6);",
          "141:   double change = (m_pressureAvg[8] - m_pressureAvg[0]);",
          "142:   m_dP_dt = change / 40; // note this is for t = 4 hour",
          "144:   m_baro_minuteCount -= 30;",
          "145:   m_pressureAvg[0] = m_pressureAvg[1];",
          "146:   m_pressureAvg[1] = m_pressureAvg[2];",
          "147:   m_pressureAvg[2] = m_pressureAvg[3];",
          "148:   m_pressureAvg[3] = m_pressureAvg[4];",
          "149:   m_pressureAvg[4] = m_pressureAvg[5];",
          "150:   m_pressureAvg[5] = m_pressureAvg[6];",
          "151:   m_pressureAvg[6] = m_pressureAvg[7];",
          "152:   m_pressureAvg[7] = m_pressureAvg[8];",
          "153:  }",
          "155:  m_baro_minuteCount++;",
          "157:  if (m_baro_minuteCount < 36) //if time is less than 35 min",
          "158:   return wsbaroforcast_unknown; // Unknown, more time needed",
          "159:  else if (m_dP_dt < (-0.25))",
          "160:   return wsbaroforcast_heavy_rain; // Quickly falling LP, Thunderstorm, not stable",
          "161:  else if (m_dP_dt > 0.25)",
          "162:   return wsbaroforcast_unstable; // Quickly rising HP, not stable weather",
          "163:  else if ((m_dP_dt > (-0.25)) && (m_dP_dt < (-0.05)))",
          "164:   return wsbaroforcast_rain; // Slowly falling Low Pressure System, stable rainy weather",
          "165:  else if ((m_dP_dt > 0.05) && (m_dP_dt < 0.25))",
          "166:   return wsbaroforcast_sunny; // Slowly rising HP stable good weather",
          "167:  else if ((m_dP_dt > (-0.05)) && (m_dP_dt < 0.05))",
          "168:   return wsbaroforcast_stable; // Stable weather",
          "169:  else",
          "170:  {",
          "171:   if (pressure <= 980)",
          "172:    return  wsbaroforcast_heavy_rain;",
          "173:   else if (pressure <= 995)",
          "174:    return wsbaroforcast_rain;",
          "175:   else if (pressure >= 1029)",
          "176:    return wsbaroforcast_sunny;",
          "177:  }",
          "178:  return wsbaroforcast_unknown;",
          "179: }",
          "181: int CBaroForecastCalculator::CalculateBaroForecast(const float temp, const double pressure)",
          "182: {",
          "183:  int forecast = CalculateBaroForecast(pressure);",
          "184:  if (temp < 0)",
          "185:  {",
          "186:   if (",
          "187:    (forecast == wsbaroforcast_rain) ||",
          "188:    (forecast == wsbaroforcast_heavy_rain)",
          "189:    )",
          "190:   {",
          "191:    forecast = wsbaroforcast_snow;",
          "192:   }",
          "193:  }",
          "194:  return forecast;",
          "195: }",
          "",
          "---------------"
        ],
        "main/BaroForecastCalculator.h||main/BaroForecastCalculator.h": [
          "File: main/BaroForecastCalculator.h -> main/BaroForecastCalculator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "2: class CBaroForecastCalculator",
          "3: {",
          "4: public:",
          "5:  CBaroForecastCalculator();",
          "6:  ~CBaroForecastCalculator();",
          "7:  void Init();",
          "8:  int CalculateBaroForecast(const double pressure);",
          "9:  int CalculateBaroForecast(const float temp, const double pressure);",
          "10: private:",
          "11:  int m_baro_minuteCount = 0;",
          "12:  double m_pressureSamples[9][6];",
          "13:  double m_pressureAvg[9];",
          "14:  double m_dP_dt = 0;",
          "15:  int m_last_forecast = 0x07; //wsbaroforcast_unknown",
          "16:  time_t m_BaroCalcLastTime = 0;",
          "17: };",
          "",
          "---------------"
        ],
        "main/Logger.h||main/Logger.h": [
          "File: main/Logger.h -> main/Logger.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <list>",
          "5: #include <string>",
          "6: #include <fstream>",
          "9: enum _eLogLevel : uint32_t",
          "10: {",
          "",
          "[Removed Lines]",
          "7: #include <map>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:     <ClInclude Include=\"..\\httpclient\\HTTPClient.h\" />",
          "554:     <ClInclude Include=\"..\\main\\appversion.h\" />",
          "555:     <ClInclude Include=\"..\\hardware\\ASyncSerial.h\" />",
          "556:     <ClInclude Include=\"..\\main\\Camera.h\" />",
          "557:     <ClInclude Include=\"..\\main\\CmdLine.h\" />",
          "558:     <ClInclude Include=\"..\\hardware\\ColorSwitch.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:     <ClInclude Include=\"..\\main\\BaroForecastCalculator.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844:     <ClCompile Include=\"..\\hardware\\ZiBlueTCP.cpp\" />",
          "845:     <ClCompile Include=\"..\\hardware\\ZWaveBase.cpp\" />",
          "846:     <ClCompile Include=\"..\\httpclient\\HTTPClient.cpp\" />",
          "847:     <ClCompile Include=\"..\\main\\Camera.cpp\" />",
          "848:     <ClCompile Include=\"..\\hardware\\Rego6XXSerial.cpp\" />",
          "849:     <ClCompile Include=\"..\\main\\CmdLine.cpp\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:     <ClCompile Include=\"..\\main\\BaroForecastCalculator.cpp\" />",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "2125:     <ClInclude Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP.h\">",
          "2126:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2127:     </ClInclude>",
          "2128:   </ItemGroup>",
          "2129:   <ItemGroup>",
          "2130:     <ClCompile Include=\"..\\webserver\\Base64.cpp\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2128:     <ClInclude Include=\"..\\main\\BaroForecastCalculator.h\">",
          "2129:       <Filter>Header Files</Filter>",
          "2130:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2895:     <ClCompile Include=\"..\\hardware\\cayenne_lpp\\CayenneLPP_Dec.cpp\">",
          "2896:       <Filter>Devices\\The Things Network\\CayenneLPP</Filter>",
          "2897:     </ClCompile>",
          "2898:   </ItemGroup>",
          "2899:   <ItemGroup>",
          "2900:     <ResourceCompile Include=\"domoticz.rc\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2901:     <ClCompile Include=\"..\\main\\BaroForecastCalculator.cpp\">",
          "2902:       <Filter>Source Files</Filter>",
          "2903:     </ClCompile>",
          "",
          "---------------"
        ]
      }
    }
  ]
}