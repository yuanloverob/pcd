{
  "cve_id": "CVE-2022-35978",
  "cve_desc": "Minetest is a free open-source voxel game engine with easy modding and game creation. In **single player**, a mod can set a global setting that controls the Lua script loaded to display the main menu. The script is then loaded as soon as the game session is exited. The Lua environment the menu runs in is not sandboxed and can directly interfere with the user's system. There are currently no known workarounds.",
  "repo": "minetest/minetest",
  "patch_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
  "patch_info": {
    "commit_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "repo": "minetest/minetest",
    "commit_url": "https://github.com/minetest/minetest/commit/da71e86633d0b27cd02d7aac9fdac625d141ca13",
    "files": [
      "src/script/lua_api/l_settings.cpp"
    ],
    "message": "Protect a few more settings from being set from mods\n\nOf those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.",
    "before_after_code_files": [
      "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp"
    ]
  },
  "patch_diff": {
    "src/script/lua_api/l_settings.cpp||src/script/lua_api/l_settings.cpp": [
      "File: src/script/lua_api/l_settings.cpp -> src/script/lua_api/l_settings.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: static inline int checkSettingSecurity(lua_State* L, const std::string &name)",
      "42: {",
      "43:  if (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)",
      "46:  bool is_mainmenu = false;",
      "47: #ifndef SERVER",
      "",
      "[Removed Lines]",
      "44:   throw LuaError(\"Attempt to set secure setting.\");",
      "",
      "[Added Lines]",
      "46:   throw LuaError(\"Attempted to set secure setting.\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:   return -1;",
      "55:  }",
      "57:  return 0;",
      "58: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  const char *disallowed[] = {",
      "60:   \"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",",
      "61:   \"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",",
      "62:  };",
      "63:  if (!is_mainmenu) {",
      "64:   for (const char *name2 : disallowed) {",
      "65:    if (name == name2)",
      "66:     throw LuaError(\"Attempted to set disallowed setting.\");",
      "67:   }",
      "68:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f195db2d140a7b4f2f2fbc438680c9d5e23a0d6d",
      "candidate_info": {
        "commit_hash": "f195db2d140a7b4f2f2fbc438680c9d5e23a0d6d",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/f195db2d140a7b4f2f2fbc438680c9d5e23a0d6d",
        "files": [
          "doc/lua_api.txt",
          "src/script/lua_api/l_object.cpp",
          "src/script/lua_api/l_object.h",
          "src/server.cpp",
          "src/server.h"
        ],
        "message": "Add API function to invoke player respawn\n\ncloses #12272",
        "before_after_code_files": [
          "src/script/lua_api/l_object.cpp||src/script/lua_api/l_object.cpp",
          "src/script/lua_api/l_object.h||src/script/lua_api/l_object.h",
          "src/server.cpp||src/server.cpp",
          "src/server.h||src/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/script/lua_api/l_object.cpp||src/script/lua_api/l_object.cpp": [
          "File: src/script/lua_api/l_object.cpp -> src/script/lua_api/l_object.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2323:  return 1;",
          "2324: }",
          "2326: ObjectRef::ObjectRef(ServerActiveObject *object):",
          "2327:  m_object(object)",
          "2328: {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2327: int ObjectRef::l_respawn(lua_State *L)",
          "2328: {",
          "2329:  NO_MAP_LOCK_REQUIRED;",
          "2330:  ObjectRef *ref = checkobject(L, 1);",
          "2331:  RemotePlayer *player = getplayer(ref);",
          "2332:  if (player == nullptr)",
          "2333:   return 0;",
          "2335:  getServer(L)->RespawnPlayer(player->getPeerId());",
          "2336:  lua_pushboolean(L, true);",
          "2337:  return 1;",
          "2338: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2478:  luamethod(ObjectRef, set_minimap_modes),",
          "2479:  luamethod(ObjectRef, set_lighting),",
          "2480:  luamethod(ObjectRef, get_lighting),",
          "2481:  {0,0}",
          "2482: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2496:  luamethod(ObjectRef, respawn),",
          "",
          "---------------"
        ],
        "src/script/lua_api/l_object.h||src/script/lua_api/l_object.h": [
          "File: src/script/lua_api/l_object.h -> src/script/lua_api/l_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:  static int l_get_lighting(lua_State *L);",
          "385: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:  static int l_respawn(lua_State *L);",
          "",
          "---------------"
        ],
        "src/server.cpp||src/server.cpp": [
          "File: src/server.cpp -> src/server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2784:    << playersao->getPlayer()->getName()",
          "2785:    << \" respawns\" << std::endl;",
          "2788:    PlayerHPChangeReason(PlayerHPChangeReason::RESPAWN));",
          "2791:  bool repositioned = m_script->on_respawnplayer(playersao);",
          "2792:  if (!repositioned) {",
          "",
          "[Removed Lines]",
          "2787:  playersao->setHP(playersao->accessObjectProperties()->hp_max,",
          "2789:  playersao->setBreath(playersao->accessObjectProperties()->breath_max);",
          "",
          "[Added Lines]",
          "2787:  const auto *prop = playersao->accessObjectProperties();",
          "2788:  playersao->setHP(prop->hp_max,",
          "2790:  playersao->setBreath(prop->breath_max);",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:  void setLighting(RemotePlayer *player, const Lighting &lighting);",
          "340:  void peerAdded(con::Peer *peer);",
          "341:  void deletingPeer(con::Peer *peer, bool timeout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:  void RespawnPlayer(session_t peer_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  void HandlePlayerDeath(PlayerSAO* sao, const PlayerHPChangeReason &reason);",
          "533:  void DeleteClient(session_t peer_id, ClientDeletionReason reason);",
          "534:  void UpdateCrafting(RemotePlayer *player);",
          "535:  bool checkInteractDistance(RemotePlayer *player, const f32 d, const std::string &what);",
          "",
          "[Removed Lines]",
          "532:  void RespawnPlayer(session_t peer_id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea74680df4340172674adfc3335e6ba887c3f79e",
      "candidate_info": {
        "commit_hash": "ea74680df4340172674adfc3335e6ba887c3f79e",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/ea74680df4340172674adfc3335e6ba887c3f79e",
        "files": [
          "src/serverenvironment.cpp",
          "src/serverenvironment.h"
        ],
        "message": "Immediately activate blocks when a player joins\n\nissue: #10884\nThis makes it possible for objects to immediately be activated,\nbut doesn't guarantee it since blocks may still need be emerged.",
        "before_after_code_files": [
          "src/serverenvironment.cpp||src/serverenvironment.cpp",
          "src/serverenvironment.h||src/serverenvironment.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/serverenvironment.cpp||src/serverenvironment.cpp": [
          "File: src/serverenvironment.cpp -> src/serverenvironment.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:  addActiveObject(playersao);",
          "629:  return playersao;",
          "630: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:  m_force_update_active_blocks = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1333:   Manage active block list",
          "1336:   ScopeProfiler sp(g_profiler, \"ServerEnv: update active blocks\", SPT_AVG);",
          "1338:    Get player block positions",
          "",
          "[Removed Lines]",
          "1335:  if (m_active_blocks_management_interval.step(dtime, m_cache_active_block_mgmt_interval)) {",
          "",
          "[Added Lines]",
          "1338:  if (m_active_blocks_mgmt_interval.step(dtime, m_cache_active_block_mgmt_interval) ||",
          "1339:   m_force_update_active_blocks) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1396:    activateBlock(block);",
          "1397:   }",
          "1398:  }",
          "1401:   Mess around in active blocks",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:  m_force_update_active_blocks = false;",
          "",
          "---------------"
        ],
        "src/serverenvironment.h||src/serverenvironment.h": [
          "File: src/serverenvironment.h -> src/serverenvironment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:  IntervalLimiter m_object_management_interval;",
          "456:  ActiveBlockList m_active_blocks;",
          "458:  IntervalLimiter m_active_block_modifier_interval;",
          "459:  IntervalLimiter m_active_blocks_nodemetadata_interval;",
          "",
          "[Removed Lines]",
          "457:  IntervalLimiter m_active_blocks_management_interval;",
          "",
          "[Added Lines]",
          "457:  bool m_force_update_active_blocks = false;",
          "458:  IntervalLimiter m_active_blocks_mgmt_interval;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bccaf5fc2d11c31615d64b9bca91f908d06b7044",
      "candidate_info": {
        "commit_hash": "bccaf5fc2d11c31615d64b9bca91f908d06b7044",
        "repo": "minetest/minetest",
        "commit_url": "https://github.com/minetest/minetest/commit/bccaf5fc2d11c31615d64b9bca91f908d06b7044",
        "files": [
          "src/nodedef.cpp"
        ],
        "message": "Map opaque waving leaves to allfaces drawtype\n\nfixes #9842",
        "before_after_code_files": [
          "src/nodedef.cpp||src/nodedef.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/luanti-org/luanti/pull/12378"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/nodedef.cpp||src/nodedef.cpp": [
          "File: src/nodedef.cpp -> src/nodedef.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:    solidness = 0;",
          "902:    visual_solidness = 1;",
          "903:   } else {",
          "906:    for (TileDef &td : tdef)",
          "907:     td.name += std::string(\"^[noalpha\");",
          "908:   }",
          "",
          "[Removed Lines]",
          "904:    drawtype = NDT_NORMAL;",
          "905:    solidness = 2;",
          "",
          "[Added Lines]",
          "904:    if (waving >= 1) {",
          "906:     drawtype = NDT_ALLFACES;",
          "907:     solidness = 0;",
          "908:     visual_solidness = 1;",
          "909:    } else {",
          "910:     drawtype = NDT_NORMAL;",
          "911:     solidness = 2;",
          "912:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}