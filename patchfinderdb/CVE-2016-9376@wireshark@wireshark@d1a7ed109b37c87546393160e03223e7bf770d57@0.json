{
  "cve_id": "CVE-2016-9376",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.1 and 2.0.0 to 2.0.7, the OpenFlow dissector could crash with memory exhaustion, triggered by network traffic or a capture file. This was addressed in epan/dissectors/packet-openflow_v5.c by ensuring that certain length values were sufficiently large.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d1a7ed109b37c87546393160e03223e7bf770d57",
  "patch_info": {
    "commit_hash": "d1a7ed109b37c87546393160e03223e7bf770d57",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d1a7ed109b37c87546393160e03223e7bf770d57",
    "files": [
      "epan/dissectors/packet-openflow_v5.c"
    ],
    "message": "OpenFlow 1.4: check length to avoid rewinding offset\n\nBug: 13071\nChange-Id: Ia9d55212fe8423311222330ed516da35ee9f53de\nReviewed-on: https://code.wireshark.org/review/18565\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c": [
      "File: epan/dissectors/packet-openflow_v5.c -> epan/dissectors/packet-openflow_v5.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "871: static expert_field ei_openflow_v5_async_config_prop_undecoded = EI_INIT;",
      "872: static expert_field ei_openflow_v5_bundle_prop_undecoded = EI_INIT;",
      "873: static expert_field ei_openflow_v5_message_undecoded = EI_INIT;",
      "875: static const value_string openflow_v5_version_values[] = {",
      "876:     { 0x05, \"1.4\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "874: static expert_field ei_openflow_v5_length_too_short = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1306:     match_length = tvb_get_ntohs(tvb, offset);",
      "1307:     pad_length = (match_length + 7)/8*8 - match_length;",
      "1308:     proto_item_set_len(ti, match_length + pad_length);",
      "1310:     offset+=2;",
      "1313:     switch (match_type) {",
      "1314:     case OFPMT_STANDARD:",
      "",
      "[Removed Lines]",
      "1309:     proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "1310:     ti = proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "1313:     if (match_length < 4) {",
      "1314:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
      "1315:         return offset;",
      "1316:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1382:     band_len = tvb_get_ntohs(tvb, offset);",
      "1383:     proto_item_set_len(ti, band_len);",
      "1385:     offset+=2;",
      "",
      "[Removed Lines]",
      "1384:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "1390:     ti = proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1392:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_burst_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
      "1393:     offset+=4;",
      "1395:     switch (band_type) {",
      "1396:     case OFPMBT_DROP:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1401:     if (band_len < 12) {",
      "1402:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
      "1403:         return offset;",
      "1404:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4992:     prop_len = tvb_get_ntohs(tvb, offset);",
      "4993:     proto_item_set_len(ti, prop_len);",
      "4995:     offset+=2;",
      "4998:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_pad, tvb, offset, 4, ENC_NA);",
      "4999:     offset+=4;",
      "5001:     switch (prop_type) {",
      "5002:     case OFPQDPT_MIN_RATE:",
      "",
      "[Removed Lines]",
      "4994:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "5005:     ti = proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "5012:     if (prop_len < 8) {",
      "5013:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
      "5014:         return offset;",
      "5015:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5131:     guint16 update_len;",
      "5132:     guint16 update_event;",
      "5133:     gint32 update_end;",
      "5135:     update_len = tvb_get_ntohs(tvb, offset);",
      "5136:     update_end = offset + update_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5150:     proto_item *ti;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5142:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "5147:     switch (update_event) {",
      "5148:     case OFPFME_INITIAL:",
      "",
      "[Removed Lines]",
      "5145:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "",
      "[Added Lines]",
      "5160:     offset+=2;",
      "5163:     ti = proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "5164:     offset+=2;",
      "5166:     if (update_len < 4) {",
      "5167:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
      "5168:         return offset;",
      "5169:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "9817:         {&ei_openflow_v5_message_undecoded,",
      "9818:             { \"openflow_v5.message.undecoded\", PI_UNDECODED, PI_NOTE,",
      "9819:               \"Unknown message body.\", EXPFILL }",
      "9820:         }",
      "9821:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9844:         },",
      "9845:         {&ei_openflow_v5_length_too_short,",
      "9846:             { \"openflow_v5.message.length_too_short\", PI_MALFORMED, PI_ERROR,",
      "9847:               \"Length is too short.\", EXPFILL }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2a7af8d3928e18ef15778e63b9b6c78f8bd1bef",
      "candidate_info": {
        "commit_hash": "f2a7af8d3928e18ef15778e63b9b6c78f8bd1bef",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f2a7af8d3928e18ef15778e63b9b6c78f8bd1bef",
        "files": [
          "epan/dissectors/packet-openflow_v5.c"
        ],
        "message": "OpenFlow 1.4: check length to avoid rewinding offset\n\nBug: 13071\nChange-Id: Ia9d55212fe8423311222330ed516da35ee9f53de\nReviewed-on: https://code.wireshark.org/review/18565\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit d1a7ed109b37c87546393160e03223e7bf770d57)\nReviewed-on: https://code.wireshark.org/review/18569\n(cherry picked from commit 51348a7e3edae9cfaf995841854b7cf01895fff8)\nReviewed-on: https://code.wireshark.org/review/18570\nPetri-Dish: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ],
          "candidate": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c": [
          "File: epan/dissectors/packet-openflow_v5.c -> epan/dissectors/packet-openflow_v5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870: static expert_field ei_openflow_v5_async_config_prop_undecoded = EI_INIT;",
          "871: static expert_field ei_openflow_v5_bundle_prop_undecoded = EI_INIT;",
          "872: static expert_field ei_openflow_v5_message_undecoded = EI_INIT;",
          "874: static const value_string openflow_v5_version_values[] = {",
          "875:     { 0x05, \"1.4\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "873: static expert_field ei_openflow_v5_length_too_short = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1305:     match_length = tvb_get_ntohs(tvb, offset);",
          "1306:     pad_length = (match_length + 7)/8*8 - match_length;",
          "1307:     proto_item_set_len(ti, match_length + pad_length);",
          "1309:     offset+=2;",
          "1312:     switch (match_type) {",
          "1313:     case OFPMT_STANDARD:",
          "",
          "[Removed Lines]",
          "1308:     proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1309:     ti = proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1312:     if (match_length < 4) {",
          "1313:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1314:         return offset;",
          "1315:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1381:     band_len = tvb_get_ntohs(tvb, offset);",
          "1382:     proto_item_set_len(ti, band_len);",
          "1384:     offset+=2;",
          "",
          "[Removed Lines]",
          "1383:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1389:     ti = proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1391:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_burst_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1392:     offset+=4;",
          "1394:     switch (band_type) {",
          "1395:     case OFPMBT_DROP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:     if (band_len < 12) {",
          "1401:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1402:         return offset;",
          "1403:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4991:     prop_len = tvb_get_ntohs(tvb, offset);",
          "4992:     proto_item_set_len(ti, prop_len);",
          "4994:     offset+=2;",
          "4997:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_pad, tvb, offset, 4, ENC_NA);",
          "4998:     offset+=4;",
          "5000:     switch (prop_type) {",
          "5001:     case OFPQDPT_MIN_RATE:",
          "",
          "[Removed Lines]",
          "4993:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5004:     ti = proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5011:     if (prop_len < 8) {",
          "5012:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5013:         return offset;",
          "5014:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5130:     guint16 update_len;",
          "5131:     guint16 update_event;",
          "5132:     gint32 update_end;",
          "5134:     update_len = tvb_get_ntohs(tvb, offset);",
          "5135:     update_end = offset + update_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5149:     proto_item *ti;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5141:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5146:     switch (update_event) {",
          "5147:     case OFPFME_INITIAL:",
          "",
          "[Removed Lines]",
          "5144:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5159:     offset+=2;",
          "5162:     ti = proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5163:     offset+=2;",
          "5165:     if (update_len < 4) {",
          "5166:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5167:         return offset;",
          "5168:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9816:         {&ei_openflow_v5_message_undecoded,",
          "9817:             { \"openflow_v5.message.undecoded\", PI_UNDECODED, PI_NOTE,",
          "9818:               \"Unknown message body.\", EXPFILL }",
          "9819:         }",
          "9820:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9843:         },",
          "9844:         {&ei_openflow_v5_length_too_short,",
          "9845:             { \"openflow_v5.message.length_too_short\", PI_MALFORMED, PI_ERROR,",
          "9846:               \"Length is too short.\", EXPFILL }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51348a7e3edae9cfaf995841854b7cf01895fff8",
      "candidate_info": {
        "commit_hash": "51348a7e3edae9cfaf995841854b7cf01895fff8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/51348a7e3edae9cfaf995841854b7cf01895fff8",
        "files": [
          "epan/dissectors/packet-openflow_v5.c"
        ],
        "message": "OpenFlow 1.4: check length to avoid rewinding offset\n\nBug: 13071\nChange-Id: Ia9d55212fe8423311222330ed516da35ee9f53de\nReviewed-on: https://code.wireshark.org/review/18565\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit d1a7ed109b37c87546393160e03223e7bf770d57)\nReviewed-on: https://code.wireshark.org/review/18569",
        "before_after_code_files": [
          "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ],
          "candidate": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c": [
          "File: epan/dissectors/packet-openflow_v5.c -> epan/dissectors/packet-openflow_v5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "871: static expert_field ei_openflow_v5_async_config_prop_undecoded = EI_INIT;",
          "872: static expert_field ei_openflow_v5_bundle_prop_undecoded = EI_INIT;",
          "873: static expert_field ei_openflow_v5_message_undecoded = EI_INIT;",
          "875: static const value_string openflow_v5_version_values[] = {",
          "876:     { 0x05, \"1.4\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: static expert_field ei_openflow_v5_length_too_short = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1306:     match_length = tvb_get_ntohs(tvb, offset);",
          "1307:     pad_length = (match_length + 7)/8*8 - match_length;",
          "1308:     proto_item_set_len(ti, match_length + pad_length);",
          "1310:     offset+=2;",
          "1313:     switch (match_type) {",
          "1314:     case OFPMT_STANDARD:",
          "",
          "[Removed Lines]",
          "1309:     proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1310:     ti = proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1313:     if (match_length < 4) {",
          "1314:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1315:         return offset;",
          "1316:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1382:     band_len = tvb_get_ntohs(tvb, offset);",
          "1383:     proto_item_set_len(ti, band_len);",
          "1385:     offset+=2;",
          "",
          "[Removed Lines]",
          "1384:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1390:     ti = proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1392:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_burst_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1393:     offset+=4;",
          "1395:     switch (band_type) {",
          "1396:     case OFPMBT_DROP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1401:     if (band_len < 12) {",
          "1402:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1403:         return offset;",
          "1404:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4992:     prop_len = tvb_get_ntohs(tvb, offset);",
          "4993:     proto_item_set_len(ti, prop_len);",
          "4995:     offset+=2;",
          "4998:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_pad, tvb, offset, 4, ENC_NA);",
          "4999:     offset+=4;",
          "5001:     switch (prop_type) {",
          "5002:     case OFPQDPT_MIN_RATE:",
          "",
          "[Removed Lines]",
          "4994:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5005:     ti = proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5012:     if (prop_len < 8) {",
          "5013:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5014:         return offset;",
          "5015:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5131:     guint16 update_len;",
          "5132:     guint16 update_event;",
          "5133:     gint32 update_end;",
          "5135:     update_len = tvb_get_ntohs(tvb, offset);",
          "5136:     update_end = offset + update_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5150:     proto_item *ti;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5142:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5147:     switch (update_event) {",
          "5148:     case OFPFME_INITIAL:",
          "",
          "[Removed Lines]",
          "5145:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5160:     offset+=2;",
          "5163:     ti = proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5164:     offset+=2;",
          "5166:     if (update_len < 4) {",
          "5167:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5168:         return offset;",
          "5169:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9817:         {&ei_openflow_v5_message_undecoded,",
          "9818:             { \"openflow_v5.message.undecoded\", PI_UNDECODED, PI_NOTE,",
          "9819:               \"Unknown message body.\", EXPFILL }",
          "9820:         }",
          "9821:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9844:         },",
          "9845:         {&ei_openflow_v5_length_too_short,",
          "9846:             { \"openflow_v5.message.length_too_short\", PI_MALFORMED, PI_ERROR,",
          "9847:               \"Length is too short.\", EXPFILL }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3527ea3624ad8f5840844718dd7f04e3d5d5e408",
      "candidate_info": {
        "commit_hash": "3527ea3624ad8f5840844718dd7f04e3d5d5e408",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3527ea3624ad8f5840844718dd7f04e3d5d5e408",
        "files": [
          "epan/dissectors/packet-openflow_v5.c"
        ],
        "message": "OpenFlow 1.4: check length to avoid rewinding offset\n\nConflicts:\n\tepan/dissectors/packet-openflow_v5.c\n\nBug: 13071\nChange-Id: Ia9d55212fe8423311222330ed516da35ee9f53de\nReviewed-on: https://code.wireshark.org/review/18565\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit d1a7ed109b37c87546393160e03223e7bf770d57)\nReviewed-on: https://code.wireshark.org/review/18569\n(cherry picked from commit 51348a7e3edae9cfaf995841854b7cf01895fff8)\nReviewed-on: https://code.wireshark.org/review/18570\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/18874\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ],
          "candidate": [
            "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-openflow_v5.c||epan/dissectors/packet-openflow_v5.c": [
          "File: epan/dissectors/packet-openflow_v5.c -> epan/dissectors/packet-openflow_v5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "872: static expert_field ei_openflow_v5_async_config_prop_undecoded = EI_INIT;",
          "873: static expert_field ei_openflow_v5_bundle_prop_undecoded = EI_INIT;",
          "874: static expert_field ei_openflow_v5_message_undecoded = EI_INIT;",
          "876: static const value_string openflow_v5_version_values[] = {",
          "877:     { 0x05, \"1.4\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: static expert_field ei_openflow_v5_length_too_short = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1300:     match_length = tvb_get_ntohs(tvb, offset);",
          "1301:     pad_length = (match_length + 7)/8*8 - match_length;",
          "1302:     proto_item_set_len(ti, match_length + pad_length);",
          "1304:     offset+=2;",
          "1307:     switch (match_type) {",
          "1308:     case OFPMT_STANDARD:",
          "",
          "[Removed Lines]",
          "1303:     proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1304:     ti = proto_tree_add_item(match_tree, hf_openflow_v5_match_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1307:     if (match_length < 4) {",
          "1308:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1309:         return offset;",
          "1310:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1377:     band_len = tvb_get_ntohs(tvb, offset);",
          "1378:     proto_item_set_len(ti, band_len);",
          "1380:     offset+=2;",
          "",
          "[Removed Lines]",
          "1379:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1385:     ti = proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1387:     proto_tree_add_item(band_tree, hf_openflow_v5_meter_band_burst_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1388:     offset+=4;",
          "1390:     switch (band_type) {",
          "1391:     case OFPMBT_DROP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1396:     if (band_len < 12) {",
          "1397:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "1398:         return offset;",
          "1399:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5015:     prop_len = tvb_get_ntohs(tvb, offset);",
          "5016:     proto_item_set_len(ti, prop_len);",
          "5018:     offset+=2;",
          "5021:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_pad, tvb, offset, 4, ENC_NA);",
          "5022:     offset+=4;",
          "5024:     switch (prop_type) {",
          "5025:     case OFPQDPT_MIN_RATE:",
          "",
          "[Removed Lines]",
          "5017:     proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5028:     ti = proto_tree_add_item(prop_tree, hf_openflow_v5_queue_desc_prop_len, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5035:     if (prop_len < 8) {",
          "5036:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5037:         return offset;",
          "5038:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5169:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5174:     switch (update_event) {",
          "5175:     case OFPFME_INITIAL:",
          "",
          "[Removed Lines]",
          "5172:     proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "5186:     offset+=2;",
          "5189:     ti = proto_tree_add_item(update_tree, hf_openflow_v5_flow_update_event, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5190:     offset+=2;",
          "5192:     if (update_len < 4) {",
          "5193:         expert_add_info(pinfo, ti, &ei_openflow_v5_length_too_short);",
          "5194:         return offset;",
          "5195:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9846:         {&ei_openflow_v5_message_undecoded,",
          "9847:             { \"openflow_v5.message.undecoded\", PI_UNDECODED, PI_NOTE,",
          "9848:               \"Unknown message body.\", EXPFILL }",
          "9849:         }",
          "9850:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9872:         },",
          "9873:         {&ei_openflow_v5_length_too_short,",
          "9874:             { \"openflow_v5.message.length_too_short\", PI_MALFORMED, PI_ERROR,",
          "9875:               \"Length is too short.\", EXPFILL }",
          "",
          "---------------"
        ]
      }
    }
  ]
}