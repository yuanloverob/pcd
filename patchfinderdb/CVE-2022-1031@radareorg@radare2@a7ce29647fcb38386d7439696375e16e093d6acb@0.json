{
  "cve_id": "CVE-2022-1031",
  "cve_desc": "Use After Free in op_is_set_bp in GitHub repository radareorg/radare2 prior to 5.6.6.",
  "repo": "radareorg/radare2",
  "patch_hash": "a7ce29647fcb38386d7439696375e16e093d6acb",
  "patch_info": {
    "commit_hash": "a7ce29647fcb38386d7439696375e16e093d6acb",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/a7ce29647fcb38386d7439696375e16e093d6acb",
    "files": [
      "libr/anal/fcn.c",
      "libr/anal/var.c"
    ],
    "message": "Fix UAF in aaaa on arm/thumb switching ##crash\n\n* Reported by @peacock-doris via huntr.dev\n* Reproducer tests_65185\n* This is a logic fix, but not the fully safe as changes in the code\n  can result on UAF again, to properly protect r2 from crashing we\n  need to break the ABI and add refcounting to RRegItem, which can't\n  happen in 5.6.x because of abi-compat rules",
    "before_after_code_files": [
      "libr/anal/fcn.c||libr/anal/fcn.c",
      "libr/anal/var.c||libr/anal/var.c"
    ]
  },
  "patch_diff": {
    "libr/anal/fcn.c||libr/anal/fcn.c": [
      "File: libr/anal/fcn.c -> libr/anal/fcn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "817:    if (anal->verbose) {",
      "819:    }",
      "820:    delay.idx = idx - oplen;",
      "821:    delay.cnt = op->delay;",
      "",
      "[Removed Lines]",
      "818:     eprintf(\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);",
      "",
      "[Added Lines]",
      "818:     eprintf (\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "883:    r_anal_xrefs_set (anal, op->addr, op->ptr, R_ANAL_REF_TYPE_DATA);",
      "884:   }",
      "885:   analyze_retpoline (anal, op);",
      "886:   switch (op->type & R_ANAL_OP_TYPE_MASK) {",
      "887:   case R_ANAL_OP_TYPE_CMOV:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "885:   if (anal->opt.vars && !varset) {",
      "888:    r_anal_extract_vars (anal, fcn, op);",
      "889:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "973:     fcn->bp_off = fcn->stack - op->src[0]->delta;",
      "974:    }",
      "975:    if (op->dst && op->dst->reg && op->dst->reg->name && op->ptr > 0 && op->ptr != UT64_MAX) {",
      "977:     if ((last_reg_mov_lea_name = strdup(op->dst->reg->name))) {",
      "978:      last_reg_mov_lea_val = op->ptr;",
      "979:      last_is_reg_mov_lea = true;",
      "",
      "[Removed Lines]",
      "976:     free(last_reg_mov_lea_name);",
      "",
      "[Added Lines]",
      "982:     free (last_reg_mov_lea_name);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1404:     }",
      "1405:    }",
      "1406:   }",
      "1407:   if (anal->opt.vars && !varset) {",
      "1409:    r_anal_extract_vars (anal, fcn, op);",
      "1410:   }",
      "1411:   if (op->type != R_ANAL_OP_TYPE_MOV && op->type != R_ANAL_OP_TYPE_CMOV && op->type != R_ANAL_OP_TYPE_LEA) {",
      "1412:    last_is_reg_mov_lea = false;",
      "1413:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1413: #if 0",
      "1419: #endif",
      "",
      "---------------"
    ],
    "libr/anal/var.c||libr/anal/var.c": [
      "File: libr/anal/var.c -> libr/anal/var.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1048:   free (vartype);",
      "1049:  } else {",
      "1050:   st64 frame_off = -(ptr + fcn->bp_off);",
      "1052:    goto beach;",
      "1053:   }",
      "1054:   RAnalVar *var = get_stack_var (fcn, frame_off);",
      "",
      "[Removed Lines]",
      "1051:   if (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
      "",
      "[Added Lines]",
      "1051:   if (maxstackframe > 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2cb721bf053bec2a167c429a12d5e82bd537b74",
      "candidate_info": {
        "commit_hash": "b2cb721bf053bec2a167c429a12d5e82bd537b74",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/b2cb721bf053bec2a167c429a12d5e82bd537b74",
        "files": [
          "libr/anal/var.c",
          "libr/core/canal.c",
          "test/db/anal/x86_32",
          "test/db/cmd/cmd_graph"
        ],
        "message": "Restrict local vars and args in a 8KB range, otherwise skip ##analysis (#19811)\n\n* Update and verify tests accordingly, new output is better\n* Optimize function emulation by reusing bbdata",
        "before_after_code_files": [
          "libr/anal/var.c||libr/anal/var.c",
          "libr/core/canal.c||libr/core/canal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/anal/var.c||libr/anal/var.c"
          ],
          "candidate": [
            "libr/anal/var.c||libr/anal/var.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/var.c||libr/anal/var.c": [
          "File: libr/anal/var.c -> libr/anal/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "890: static void extract_arg(RAnal *anal, RAnalFunction *fcn, RAnalOp *op, const char *reg, const char *sign, char type) {",
          "891:  st64 ptr = 0;",
          "892:  char *addr, *esil_buf = NULL;",
          "894:  r_return_if_fail (anal && fcn && op && reg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:  const st64 maxstackframe = 1024 * 8;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "975:   } else {",
          "976:    frame_off = ptr - fcn->bp_off;",
          "977:   }",
          "978:   RAnalVar *var = get_stack_var (fcn, frame_off);",
          "979:   if (var) {",
          "980:    r_anal_var_set_access (var, reg, op->addr, rw, ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:   if (maxstackframe && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "980:    goto beach;",
          "981:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1023:    }",
          "1024:   }",
          "1025:   if (varname) {",
          "1026:    RAnalVar *var = r_anal_function_set_var (fcn, frame_off, type, vartype, anal->bits / 8, isarg, varname);",
          "1027:    if (var) {",
          "1028:     r_anal_var_set_access (var, reg, op->addr, rw, ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030:    if (isarg && frame_off > 48) {",
          "1031:     goto beach;",
          "1032:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1032:   free (vartype);",
          "1033:  } else {",
          "1034:   st64 frame_off = -(ptr + fcn->bp_off);",
          "1035:   RAnalVar *var = get_stack_var (fcn, frame_off);",
          "1036:   if (var) {",
          "1037:    r_anal_var_set_access (var, reg, op->addr, rw, -ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042:   if (maxstackframe && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "1043:    goto beach;",
          "1044:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1333:  r_return_if_fail (anal && fcn && op);",
          "1335:  const char *BP = anal->reg->name[R_REG_NAME_BP];",
          "1337:  if (BP) {",
          "1338:   extract_arg (anal, fcn, op, BP, \"+\", R_ANAL_VAR_KIND_BPV);",
          "1339:   extract_arg (anal, fcn, op, BP, \"-\", R_ANAL_VAR_KIND_BPV);",
          "1340:  }",
          "1341:  if (SP) {",
          "1342:   extract_arg (anal, fcn, op, SP, \"+\", R_ANAL_VAR_KIND_SPV);",
          "1343:  }",
          "",
          "[Removed Lines]",
          "1336:  const char *SP = anal->reg->name[R_REG_NAME_SP];",
          "",
          "[Added Lines]",
          "1350:  const char *SP = anal->reg->name[R_REG_NAME_SP];",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438:  if (bb->size > ctx->core->anal->opt.bb_max_size) {",
          "3439:   return true;",
          "3440:  }",
          "3441:  int *parent_reg_set = r_pvector_at (&ctx->reg_set, r_pvector_len (&ctx->reg_set) - 1);",
          "3442:  int *reg_set = R_NEWS (int, REG_SET_SIZE);",
          "3443:  memcpy (reg_set, parent_reg_set, REG_SET_SIZE * sizeof (int));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3441:  ut8 *buf = malloc (bb->size);",
          "3442:  if (!buf) {",
          "3443:   return false;",
          "3444:  }",
          "3445:  (void) r_io_read_at (ctx->core->io, bb->addr, buf, bb->size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3445:  RCore *core = ctx->core;",
          "3446:  RAnalFunction *fcn = ctx->fcn;",
          "3447:  fcn->stack = bb->parent_stackptr;",
          "3450:   if (r_cons_is_breaked ()) {",
          "3451:    break;",
          "3452:   }",
          "3456:    break;",
          "3457:   }",
          "3459:   if (!ctx->argonly) {",
          "3463:     fcn->stack = 0;",
          "3464:    }",
          "3466:   }",
          "3470:   if (opsize < 1) {",
          "3471:    break;",
          "3472:   }",
          "3473:   if (optype == R_ANAL_OP_TYPE_CALL) {",
          "3475:    int max_count = fcn->cc ? r_anal_cc_max_arg (core->anal, fcn->cc) : 0;",
          "3476:    for (i = 0; i < max_count; i++) {",
          "3477:     reg_set[i] = 2;",
          "3478:    }",
          "3479:   }",
          "3481:  }",
          "3482:  return true;",
          "3483: }",
          "",
          "[Removed Lines]",
          "3448:  ut64 pos = bb->addr;",
          "3449:  while (pos < bb->addr + bb->size) {",
          "3453:   RAnalOp *op = r_core_anal_op (core, pos, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT);",
          "3454:   if (!op) {",
          "3458:   r_anal_extract_rarg (core->anal, op, fcn, reg_set, &ctx->count);",
          "3460:    if (op->stackop == R_ANAL_STACK_INC) {",
          "3461:     fcn->stack += op->stackptr;",
          "3462:    } else if (op->stackop == R_ANAL_STACK_RESET) {",
          "3465:    r_anal_extract_vars (core->anal, fcn, op);",
          "3467:   int opsize = op->size;",
          "3468:   int optype = op->type;",
          "3469:   r_anal_op_free (op);",
          "3474:    size_t i;",
          "3480:   pos += opsize;",
          "",
          "[Added Lines]",
          "3454:  RAnalOp op;",
          "3456:  ut64 opaddr = bb->addr;",
          "3457:  const int mask = R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT;",
          "3458:  int pos;",
          "3459: #if 1",
          "3460:  int i = 0;",
          "3461:  for (i = 0; i < bb->ninstr; i++) {",
          "3462:   pos = i? bb->op_pos[i - 1]: 0;",
          "3463:   ut64 addr = bb->addr + pos;",
          "3464:   if (addr != opaddr) {",
          "3465:    if (ctx->core->anal->verbose) {",
          "3466:     eprintf (\"Inconsistency 0x%\" PFMT64x \" vs 0x%\" PFMT64x \" \\n\", addr, opaddr);",
          "3467:    }",
          "3468:   }",
          "3469:   if (addr < bb->addr || addr >= bb->addr + bb->size) {",
          "3470:    break;",
          "3471:   }",
          "3472: #else",
          "3473:  ut64 endaddr = bb->addr + bb->size;",
          "3474:  while (opaddr < endaddr) {",
          "3475: #endif",
          "3476:   if (opaddr < bb->addr || opaddr >= bb->addr + bb->size) {",
          "3477:    break;",
          "3478:   }",
          "3482: #if 0",
          "3483:   RAnalOp *hop = r_core_anal_op (core, opaddr, mask);",
          "3484:   if (!hop) {",
          "3487:   memcpy (&op, hop, sizeof (RAnalOp));",
          "3488:   free (hop);",
          "3489: #else",
          "3490:   pos = (opaddr - bb->addr);",
          "3491:   if (r_anal_op (core->anal, &op, opaddr, buf + pos, bb->size - pos, mask) < 1) {",
          "3492:    break;",
          "3493:   }",
          "3494: #endif",
          "3495:   r_anal_extract_rarg (core->anal, &op, fcn, reg_set, &ctx->count);",
          "3497:    if (op.stackop == R_ANAL_STACK_INC) {",
          "3498:     fcn->stack += op.stackptr;",
          "3499:    } else if (op.stackop == R_ANAL_STACK_RESET) {",
          "3502:    r_anal_extract_vars (core->anal, fcn, &op);",
          "3504:   int opsize = op.size;",
          "3505:   int optype = op.type;",
          "3506:   r_anal_op_fini (&op);",
          "3512:    int i;",
          "3518:   opaddr += opsize;",
          "3520:  free (buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3500:  r_pvector_push (&ctx.reg_set, reg_set);",
          "3501:  int saved_stack = fcn->stack;",
          "3502:  RAnalBlock *first_bb = r_anal_get_block_at (fcn->anal, fcn->addr);",
          "3504:  r_pvector_fini (&ctx.reg_set);",
          "3505:  fcn->stack = saved_stack;",
          "3506: }",
          "",
          "[Removed Lines]",
          "3503:  r_anal_block_recurse_depth_first (first_bb, (RAnalBlockCb)anal_block_cb, (RAnalBlockCb)anal_block_on_exit, &ctx);",
          "",
          "[Added Lines]",
          "3542:  r_anal_block_recurse_depth_first (first_bb, (RAnalBlockCb)anal_block_cb,",
          "3543:   (RAnalBlockCb)anal_block_on_exit, &ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63d4172d94f767a6f0b884780213f314087427a9",
      "candidate_info": {
        "commit_hash": "63d4172d94f767a6f0b884780213f314087427a9",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/63d4172d94f767a6f0b884780213f314087427a9",
        "files": [
          "libr/anal/var.c",
          "libr/bin/format/ne/ne.c",
          "libr/core/cmd_debug.c",
          "libr/core/cmd_eval.c",
          "libr/core/rvc.c",
          "libr/io/p/io_gzip.c",
          "libr/io/p/io_malloc.c",
          "libr/lang/p/zig.c",
          "libr/main/r2pm.c",
          "libr/util/file.c",
          "test/db/anal/x86_32",
          "test/db/cmd/cmd_graph"
        ],
        "message": "Fix last covs, mainly memleaks and update one test",
        "before_after_code_files": [
          "libr/anal/var.c||libr/anal/var.c",
          "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c",
          "libr/core/cmd_debug.c||libr/core/cmd_debug.c",
          "libr/core/cmd_eval.c||libr/core/cmd_eval.c",
          "libr/core/rvc.c||libr/core/rvc.c",
          "libr/io/p/io_gzip.c||libr/io/p/io_gzip.c",
          "libr/io/p/io_malloc.c||libr/io/p/io_malloc.c",
          "libr/lang/p/zig.c||libr/lang/p/zig.c",
          "libr/main/r2pm.c||libr/main/r2pm.c",
          "libr/util/file.c||libr/util/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/anal/var.c||libr/anal/var.c"
          ],
          "candidate": [
            "libr/anal/var.c||libr/anal/var.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/var.c||libr/anal/var.c": [
          "File: libr/anal/var.c -> libr/anal/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:   } else {",
          "977:    frame_off = ptr - fcn->bp_off;",
          "978:   }",
          "980:    goto beach;",
          "981:   }",
          "982:   RAnalVar *var = get_stack_var (fcn, frame_off);",
          "",
          "[Removed Lines]",
          "979:   if (maxstackframe && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "",
          "[Added Lines]",
          "979:   if (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:    }",
          "1028:   }",
          "1029:   if (varname) {",
          "1030:    if (isarg && frame_off > 48) {",
          "1031:     goto beach;",
          "1032:    }",
          "1033:    RAnalVar *var = r_anal_function_set_var (fcn, frame_off, type, vartype, anal->bits / 8, isarg, varname);",
          "1034:    if (var) {",
          "1035:     r_anal_var_set_access (var, reg, op->addr, rw, ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030: #if 0",
          "1032:     free (varname);",
          "1035: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1039:   free (vartype);",
          "1040:  } else {",
          "1041:   st64 frame_off = -(ptr + fcn->bp_off);",
          "1043:    goto beach;",
          "1044:   }",
          "1045:   RAnalVar *var = get_stack_var (fcn, frame_off);",
          "",
          "[Removed Lines]",
          "1042:   if (maxstackframe && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "",
          "[Added Lines]",
          "1045:   if (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {",
          "",
          "---------------"
        ],
        "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c": [
          "File: libr/bin/format/ne/ne.c -> libr/bin/format/ne/ne.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  } else {",
          "72:   name = ord;",
          "73:  }",
          "74:  return name;",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  free (path);",
          "",
          "---------------"
        ],
        "libr/core/cmd_debug.c||libr/core/cmd_debug.c": [
          "File: libr/core/cmd_debug.c -> libr/core/cmd_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5165:        \"%\" PFMT64x \", %d, %d\",",
          "5166:        addr, 2, 0644);",
          "5167:     } else {",
          "5169:      buf = r_core_syscallf (core, \"open\",",
          "5170:        \"\\\"%s\\\", %d, %d\",",
          "5171:        filename, 2, 0644);",
          "",
          "[Removed Lines]",
          "5168:      char *filename = r_str_escape (strdup (input + 2));",
          "",
          "[Added Lines]",
          "5168:      char *filename = r_str_escape (input + 2);",
          "",
          "---------------"
        ],
        "libr/core/cmd_eval.c||libr/core/cmd_eval.c": [
          "File: libr/core/cmd_eval.c -> libr/core/cmd_eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:    } else if (input[2] == '*') {",
          "426:     r_core_cmdf (core, \"cat %s\", core->themepath);",
          "427:    } else if (input[2] == '!') {",
          "429:     cmd_load_theme (core, core->theme); // reload",
          "430:    } else if (input[2] == ' ') {",
          "431:     cmd_load_theme (core, input + 3);",
          "",
          "[Removed Lines]",
          "428:     r_core_editor (core, core->themepath, NULL);",
          "",
          "[Added Lines]",
          "428:     char *res = r_core_editor (core, core->themepath, NULL);",
          "429:     free (res);",
          "",
          "---------------"
        ],
        "libr/core/rvc.c||libr/core/rvc.c": [
          "File: libr/core/rvc.c -> libr/core/rvc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: static inline char *sha256_file(const char *fname) {",
          "175:  size_t content_length = 0;",
          "176:  char *content = r_file_slurp (fname, &content_length);",
          "177:  if (content) {",
          "179:  }",
          "181: }",
          "183: static void free_blobs(RList *blobs) {",
          "",
          "[Removed Lines]",
          "178:   return find_sha256 ((const ut8 *)content, content_length);",
          "180:  return NULL;",
          "",
          "[Added Lines]",
          "176:  char *res = NULL;",
          "179:   res = find_sha256 ((const ut8 *)content, content_length);",
          "180:   free (content);",
          "182:  return res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "503:   ignore = r_str_split_duplist (c, \"\\n\", true);",
          "504:   free (c);",
          "505:  }",
          "506:  return ignore;",
          "507: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:  free (path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736:     goto fail_ret;",
          "737:    }",
          "738:    if (!r_list_append (ret, b)) {",
          "739:     free (b->fhash);",
          "740:     free (b->fname);",
          "741:     free (b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     free (absp);",
          "",
          "---------------"
        ],
        "libr/io/p/io_gzip.c||libr/io/p/io_gzip.c": [
          "File: libr/io/p/io_gzip.c -> libr/io/p/io_gzip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   ut8 *data = (ut8 *)r_file_slurp (pathname+7, &len); //memleak here?",
          "172:   int *size = (int*)&mal->size;",
          "173:   mal->buf = r_inflate (data, (int)len, NULL, size);",
          "174:   if (mal->buf) {",
          "175:    return r_io_desc_new (io, &r_io_plugin_gzip, pathname, rw, mode, mal);",
          "176:   }",
          "178:   eprintf (\"Cannot allocate (%s) %d byte(s)\\n\", pathname+9, mal->size);",
          "179:   free (mal);",
          "180:  }",
          "",
          "[Removed Lines]",
          "177:   free (data);",
          "",
          "[Added Lines]",
          "174:   free (data);",
          "",
          "---------------"
        ],
        "libr/io/p/io_malloc.c||libr/io/p/io_malloc.c": [
          "File: libr/io/p/io_malloc.c -> libr/io/p/io_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:    char *buf = r_file_slurp (pathname + 8, &size);",
          "23:    if (!buf || size < 1) {",
          "24:     free (mal);",
          "25:     return NULL;",
          "26:    }",
          "27:    mal->size = size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     free (buf);",
          "",
          "---------------"
        ],
        "libr/lang/p/zig.c||libr/lang/p/zig.c": [
          "File: libr/lang/p/zig.c -> libr/lang/p/zig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  if (a) {",
          "21:   libpath = name;",
          "23:  } else {",
          "24:   libpath = \".\";",
          "25:   libname = name;",
          "",
          "[Removed Lines]",
          "22:   libname = a+1;",
          "",
          "[Added Lines]",
          "22:   libname = a + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   r_lib_dl_close (lib);",
          "58:  } else {",
          "59:   eprintf (\"Cannot open library\\n\");",
          "60:   free (path);",
          "61:   free (cc);",
          "62:   return false;",
          "63:  }",
          "64:  r_file_rm (path); // remove lib",
          "65:  free (path);",
          "66:  free (cc);",
          "67:  return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   free (name);",
          "66:  free (name);",
          "",
          "---------------"
        ],
        "libr/main/r2pm.c||libr/main/r2pm.c": [
          "File: libr/main/r2pm.c -> libr/main/r2pm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  free (dbdir);",
          "120:  char *data = r_file_slurp (path, NULL);",
          "121:  if (!data) {",
          "122:   return NULL;",
          "123:  }",
          "124:  const char *needle = token; // \"\\nR2PM_DESC \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   free (path);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  if (r_file_exists (pmpath)) {",
          "203:   if (git_pull (pmpath) != 0) {",
          "204:    eprintf (\"Error\\n\");",
          "205:    return 1;",
          "206:   }",
          "207:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:    free (pmpath);",
          "207:    free (gpath);",
          "",
          "---------------"
        ],
        "libr/util/file.c||libr/util/file.c": [
          "File: libr/util/file.c -> libr/util/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:    char *nbuf = realloc (buf, size + 1);",
          "437:    if (!nbuf) {",
          "438:     free (buf);",
          "439:     return NULL;",
          "440:    }",
          "441:    buf = nbuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     fclose (fd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:    }",
          "662:   }",
          "663:   if (line > lines) {",
          "665:   }",
          "666:   i--;",
          "667:   for (; str[i] && line; i--) {",
          "",
          "[Removed Lines]",
          "664:    return strdup (str); // number of lines requested in more than present, return all",
          "",
          "[Added Lines]",
          "665:    return str; // number of lines requested in more than present, return all",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "669:     line--;",
          "670:    }",
          "671:   }",
          "673:   ptr = strdup (ptr);",
          "674:   free (str);",
          "675:  }",
          "",
          "[Removed Lines]",
          "672:   ptr = str+i;",
          "",
          "[Added Lines]",
          "673:   ptr = str + i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1fbd9b24d29a96c488bd82ba0b0eb3c69490a28",
      "candidate_info": {
        "commit_hash": "e1fbd9b24d29a96c488bd82ba0b0eb3c69490a28",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/e1fbd9b24d29a96c488bd82ba0b0eb3c69490a28",
        "files": [
          "binr/r2r/load.c",
          "binr/r2r/run.c",
          "binr/radare2/radare2.c",
          "libr/anal/fcn.c",
          "libr/anal/flirt.c",
          "libr/core/cmd_print.c",
          "shlr/ar/ar.c"
        ],
        "message": "Remove eprintf calls in favor of R_LOG ##api",
        "before_after_code_files": [
          "binr/r2r/load.c||binr/r2r/load.c",
          "binr/r2r/run.c||binr/r2r/run.c",
          "binr/radare2/radare2.c||binr/radare2/radare2.c",
          "libr/anal/fcn.c||libr/anal/fcn.c",
          "libr/anal/flirt.c||libr/anal/flirt.c",
          "libr/core/cmd_print.c||libr/core/cmd_print.c",
          "shlr/ar/ar.c||shlr/ar/ar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/anal/fcn.c||libr/anal/fcn.c"
          ],
          "candidate": [
            "libr/anal/fcn.c||libr/anal/fcn.c"
          ]
        }
      },
      "candidate_diff": {
        "binr/r2r/load.c||binr/r2r/load.c": [
          "File: binr/r2r/load.c -> binr/r2r/load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"r2r.h\"",
          "5: #define LINEFMT \"%s, line %\"PFMT64u\": \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #define R_LOG_ORIGIN \"r2r.load\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  if (val[0] == '\\'') {",
          "51:   size_t len = strlen (val);",
          "52:   if (len > 1 && val[len - 1] == '\\'') {",
          "54:    return NULL;",
          "55:   }",
          "56:  }",
          "",
          "[Removed Lines]",
          "53:    eprintf (\"Error: Invalid string syntax, use <<EOF instead of '...'\\n\");",
          "",
          "[Added Lines]",
          "55:    R_LOG_ERROR (\"Invalid string syntax, use <<EOF instead of '...'\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:   const char *endtoken = val + 2;",
          "60:   if (!*endtoken) {",
          "62:    return NULL;",
          "63:   }",
          "64:   if (strcmp (endtoken, \"EOF\") != 0) {",
          "68:    return NULL;",
          "69:   }",
          "70:   RStrBuf *buf = r_strbuf_new (\"\");",
          "",
          "[Removed Lines]",
          "61:    eprintf (\"Error: Missing opening end token after <<\\n\");",
          "67:    eprintf (\"Error: End token must be \\\"EOF\\\", got \\\"%s\\\" instead.\\n\", endtoken);",
          "",
          "[Added Lines]",
          "63:    R_LOG_ERROR (\"Missing opening end token after <<\");",
          "69:    R_LOG_ERROR (\"End token must be \\\"EOF\\\", got \\\"%s\\\" instead\", endtoken);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     r_strbuf_append (buf, \"\\n\");",
          "91:    }",
          "92:   } while ((line = *nextline));",
          "94:   r_strbuf_free (buf);",
          "95:   return NULL;",
          "96:  }",
          "",
          "[Removed Lines]",
          "93:   eprintf (\"Error: Missing closing end token %s\\n\", endtoken);",
          "",
          "[Added Lines]",
          "95:   R_LOG_ERROR (\"Missing closing end token %s\", endtoken);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: R_API RPVector *r2r_load_cmd_test_file(const char *file) {",
          "102:  char *contents = r_file_slurp (file, NULL);",
          "103:  if (!contents) {",
          "105:   return NULL;",
          "106:  }",
          "",
          "[Removed Lines]",
          "104:   eprintf (\"Failed to open file \\\"%s\\\"\\n\", file);",
          "",
          "[Added Lines]",
          "106:   R_LOG_ERROR (\"Failed to open %s\", file);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "450: R_API RPVector *r2r_load_json_test_file(const char *file) {",
          "451:  char *contents = r_file_slurp (file, NULL);",
          "452:  if (!contents) {",
          "454:   return NULL;",
          "455:  }",
          "",
          "[Removed Lines]",
          "453:   eprintf (\"Failed to open file \\\"%s\\\"\\n\", file);",
          "",
          "[Added Lines]",
          "455:   R_LOG_ERROR (\"Failed to open %s\", file);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "585: static bool database_load(R2RTestDatabase *db, const char *path, int depth) {",
          "586:  if (depth <= 0) {",
          "588:   return false;",
          "589:  }",
          "590:  if (r_file_is_directory (path)) {",
          "",
          "[Removed Lines]",
          "587:   eprintf (\"Directories for loading tests too deep: %s\\n\", path);",
          "",
          "[Added Lines]",
          "589:   R_LOG_ERROR (\"Directories for loading tests too deep: %s\", path);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "605:    }",
          "606:    if (!strcmp (subname, \"extras\")) {",
          "609:     continue;",
          "610:    }",
          "611:    if (skip_asm && strstr (path, R_SYS_DIR\"asm\"R_SYS_DIR)) {",
          "613:     continue;",
          "614:    }",
          "615:    bool is_archos_folder = !strcmp (path, \"archos\") || r_str_endswith (path, R_SYS_DIR\"archos\");",
          "616:    if (is_archos_folder && (skip_archos || strcmp (subname, R2R_ARCH_OS))) {",
          "618:     continue;",
          "619:    }",
          "620:    r_strbuf_setf (&subpath, \"%s%s%s\", path, R_SYS_DIR, subname);",
          "",
          "[Removed Lines]",
          "608:     eprintf (\"Skipping %s\"R_SYS_DIR\"%s because it requires additional dependencies.\\n\", path, subname);",
          "612:     eprintf (\"R2R_SKIP_ASM: Skipping %s.\\n\", path);",
          "617:     eprintf (\"Skipping %s\"R_SYS_DIR\"%s because it does not match the current platform.\\n\", path, subname);",
          "",
          "[Added Lines]",
          "610:     R_LOG_WARN (\"Skipping %s\"R_SYS_DIR\"%s because it requires additional dependencies\", path, subname);",
          "614:     R_LOG_INFO (\"R2R_SKIP_ASM: Skipping %s\", path);",
          "619:     R_LOG_ERROR (\"Skipping %s\"R_SYS_DIR\"%s because it does not match the current platform\", path, subname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "629:  }",
          "631:  if (!r_file_exists (path)) {",
          "633:   return false;",
          "634:  }",
          "",
          "[Removed Lines]",
          "632:   eprintf (\"Path \\\"%s\\\" does not exist\\n\", path);",
          "",
          "[Added Lines]",
          "634:   R_LOG_ERROR (\"Path \\\"%s\\\" does not exist\", path);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "759:  }",
          "761:  if (!r_file_exists (path)) {",
          "763:   return false;",
          "764:  }",
          "",
          "[Removed Lines]",
          "762:   eprintf (\"Path \\\"%s\\\" does not exist\\n\", path);",
          "",
          "[Added Lines]",
          "764:   R_LOG_ERROR (\"Path \\\"%s\\\" does not exist\", path);",
          "",
          "---------------"
        ],
        "binr/r2r/run.c||binr/r2r/run.c": [
          "File: binr/r2r/run.c -> binr/r2r/run.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:    NULL, NULL, TRUE, CREATE_UNICODE_ENVIRONMENT, env,",
          "213:    NULL, &start_info, &proc_info)) {",
          "214:   free (env);",
          "216:   goto error;",
          "217:  }",
          "218:  free (env);",
          "",
          "[Removed Lines]",
          "215:   eprintf (\"CreateProcess failed: %#x\\n\", (int)GetLastError ());",
          "",
          "[Added Lines]",
          "215:   R_LOG_ERROR (\"CreateProcess failed: %#x\", (int)GetLastError ());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:  const char *invalid_json = \"this is not json lol\";",
          "1000:  R2RSubprocess *proc = r2r_subprocess_start (JQ_CMD, args, 1, NULL, NULL, 0);",
          "1001:  if (!proc) {",
          "1003:   return false;",
          "1004:  }",
          "1005:  r2r_subprocess_stdin_write (proc, (const ut8 *)invalid_json, strlen (invalid_json));",
          "",
          "[Removed Lines]",
          "1002:   eprintf (\"Cnnot start subprocess\\n\");",
          "",
          "[Added Lines]",
          "1002:   R_LOG_ERROR (\"Cannot start subprocess\");",
          "",
          "---------------"
        ],
        "binr/radare2/radare2.c||binr/radare2/radare2.c": [
          "File: binr/radare2/radare2.c -> binr/radare2/radare2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:    r2cmd (in, out, argv[i]);",
          "89:   }",
          "90:  } else {",
          "93:   rc = 1;",
          "94:  }",
          "95:  free (_in);",
          "",
          "[Removed Lines]",
          "91:   eprintf (\"Error: R2PIPE_(IN|OUT) environment not set\\n\");",
          "92:   eprintf (\"Usage: r2 -c '!*r2p x' # run commands via r2pipe\\n\");",
          "",
          "[Added Lines]",
          "91:   R_LOG_ERROR (\"R2PIPE_(IN|OUT) environment not set\");",
          "92:   R_LOG_INFO (\"Usage: r2 -c '!*r2p x' # run commands via r2pipe\");",
          "",
          "---------------"
        ],
        "libr/anal/fcn.c||libr/anal/fcn.c": [
          "File: libr/anal/fcn.c -> libr/anal/fcn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:      if (from_addr != bb->addr) {",
          "793:       bb->fail = handle_addr;",
          "794:       ret = r_anal_function_bb (anal, fcn, handle_addr, depth - 1);",
          "796:       if (bb->size == 0) {",
          "797:        r_anal_function_remove_block (fcn, bb);",
          "798:       }",
          "",
          "[Removed Lines]",
          "795:       eprintf (\"(%s) 0x%08\"PFMT64x\"\\n\", handle, handle_addr);",
          "",
          "[Added Lines]",
          "795:       R_LOG_INFO (\"(%s) 0x%08\"PFMT64x, handle, handle_addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "819:    delay.idx = idx - oplen;",
          "820:    delay.cnt = op->delay;",
          "821:    delay.pending = 1; // we need this in case the actual idx is zero...",
          "",
          "[Removed Lines]",
          "816:    if (anal->verbose) {",
          "817:     eprintf (\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);",
          "818:    }",
          "",
          "[Added Lines]",
          "816:    R_LOG_DEBUG (\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u, at - oplen, bb->size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "830:    delay.cnt--;",
          "831:    if (!delay.cnt) {",
          "835:     delay.after = idx;",
          "836:     idx = delay.idx;",
          "",
          "[Removed Lines]",
          "832:     if (anal->verbose) {",
          "833:      eprintf (\"Last branch delayed opcode at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", addr + idx - oplen, bb->size);",
          "834:     }",
          "",
          "[Added Lines]",
          "830:     R_LOG_DEBUG (\"Last branch delayed opcode at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u, addr + idx - oplen, bb->size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "842:    }",
          "843:   } else if (op->delay > 0 && delay.pending) {",
          "850:    if (delay.adjust) {",
          "851:     r_anal_block_set_size (bb, (ut64)addrbytes * (ut64)delay.after);",
          "852:     fcn->ninstr--;",
          "857:    }",
          "",
          "[Removed Lines]",
          "844:    if (anal->verbose) {",
          "845:     eprintf (\"Revisit branch delay jump at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", addr + idx - oplen, bb->size);",
          "846:    }",
          "853:     if (anal->verbose) {",
          "854:      eprintf (\"Correct for branch delay @ %08\"PFMT64x \" bb.addr=%08\"PFMT64x \" corrected.bb=%\"PFMT64u\" f.uncorr=%\"PFMT64u\"\\n\",",
          "855:      addr + idx - oplen, bb->addr, bb->size, r_anal_function_linear_size (fcn));",
          "856:     }",
          "",
          "[Added Lines]",
          "840:    R_LOG_DEBUG (\"Revisit branch delay jump at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u, addr + idx - oplen, bb->size);",
          "847:     R_LOG_DEBUG (\"Correct for branch delay @ %08\"PFMT64x \" bb.addr=%08\"PFMT64x \" corrected.bb=%\"PFMT64u\" f.uncorr=%\"PFMT64u,",
          "848:     addr + idx - oplen, bb->addr, bb->size, r_anal_function_linear_size (fcn));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1419:    }",
          "1420:    if (!op->cond) {",
          "1421:     if (anal->verbose) {",
          "1423:       addr + delay.un_idx - oplen, r_str_bool (overlapped),",
          "1424:       bb->size, r_anal_function_linear_size (fcn));",
          "1425:     }",
          "",
          "[Removed Lines]",
          "1422:      eprintf (\"RET 0x%08\"PFMT64x \". overlap=%s %\"PFMT64u\" %\"PFMT64u\"\\n\",",
          "",
          "[Added Lines]",
          "1414:      R_LOG_DEBUG (\"RET 0x%08\"PFMT64x \". overlap=%s %\"PFMT64u\" %\"PFMT64u,",
          "",
          "---------------"
        ],
        "libr/anal/flirt.c||libr/anal/flirt.c": [
          "File: libr/anal/flirt.c -> libr/anal/flirt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "865:   } else {",
          "866:    function->name[i] = '\\0';",
          "867:   }",
          "872:   r_list_append (module->public_functions, function);",
          "873:  } while (*flags & IDASIG__PARSE__MORE_PUBLIC_NAMES);",
          "",
          "[Removed Lines]",
          "868: #if DEBUG",
          "869:   eprintf (\"%04X:%s \", function->offset, function->name);",
          "870: #endif",
          "",
          "[Added Lines]",
          "868:   R_LOG_ERROR (\"%04X:%s \", function->offset, function->name);",
          "",
          "---------------"
        ],
        "libr/core/cmd_print.c||libr/core/cmd_print.c": [
          "File: libr/core/cmd_print.c -> libr/core/cmd_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:  \"p\", \"[kK] [len]\", \"print key in randomart (K is for mosaic)\",",
          "162:  \"p-\", \"[?][jh] [mode]\", \"bar|json|histogram blocks (mode: e?search.in)\",",
          "163:  \"p2\", \" [len]\", \"8x8 2bpp-tiles\",",
          "165:  \"p6\", \"[de] [len]\", \"base64 decode/encode\",",
          "166:  \"p8\", \"[?][j] [len]\", \"8bit hexpair list of bytes\",",
          "167:  \"p=\", \"[?][bep] [N] [L] [b]\", \"show entropy/printable chars/chars bars\",",
          "",
          "[Removed Lines]",
          "164:  \"p3\", \" [file]\", \"print stereogram (3D)\",",
          "",
          "[Added Lines]",
          "164:  \"p3\", \" [file]\", \"print 3D stereogram image of current block\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: static void __cmd_pad(RCore *core, const char *arg) {",
          "628:  if (*arg == '?') {",
          "630:   return;",
          "631:  }",
          "632:  r_asm_set_pc (core->rasm, core->offset);",
          "",
          "[Removed Lines]",
          "629:   eprintf (\"Usage: pad [hexpairs] # disassembly given bytes\\n\");",
          "",
          "[Added Lines]",
          "629:   r_core_cmd_help_match (core, help_msg_pa, \"pad\", false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1775:    if (val) {",
          "1776:     r_cons_printf (\"%d\\n\", r_print_format_struct_size (core->print, val, mode, 0));",
          "1777:    } else {",
          "1779:    }",
          "1780:   } else if (*_input == ' ') {",
          "1781:    while (*_input == ' ' && *_input != '\\0') {",
          "",
          "[Removed Lines]",
          "1778:     eprintf (\"Struct %s not defined\\nUsage: pfs.struct_name | pfs format\\n\", _input);",
          "",
          "[Added Lines]",
          "1778:     R_LOG_WARN (\"Struct %s not defined. Use pfs.struct_name | pfs format\", _input);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1784:    if (*_input) {",
          "1785:     r_cons_printf (\"%d\\n\", r_print_format_struct_size (core->print, _input, mode, 0));",
          "1786:    } else {",
          "1788:    }",
          "1789:   } else {",
          "1790:    eprintf (\"Usage: pfs.struct_name | pfs format\\n\");",
          "",
          "[Removed Lines]",
          "1787:     eprintf (\"Struct %s not defined\\nUsage: pfs.struct_name | pfs format\\n\", _input);",
          "",
          "[Added Lines]",
          "1787:     R_LOG_WARN (\"Struct %s not defined. Use pfs.struct_name | pfs format\", _input);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5742:   bool all = strstr (input, \"-a\");",
          "5743:   bool halp = strstr (input, \"-h\");",
          "5744:   if (halp) {",
          "5746:    r_core_return_value (core, 1);",
          "5747:   } else {",
          "5748:    bool suc = all",
          "",
          "[Removed Lines]",
          "5745:    eprintf (\"Usage: popd [-a]\\n\");",
          "",
          "[Added Lines]",
          "5745:    R_LOG_ERROR (\"Usage: popd [-a]\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5877:      (void)r_io_read_at (core->io, 0, data, core->offset);",
          "5878:      char *res = r_print_json_path ((const char *)data, core->offset);",
          "5879:      if (res) {",
          "5881:      }",
          "5883:      char *res = r_print_json_indent ((char*)data, false, \"  \", NULL);",
          "",
          "[Removed Lines]",
          "5880:       eprintf (\"-> res(%s)\\n\", res);",
          "",
          "[Added Lines]",
          "5880:       r_cons_println (res);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6013:     __cmd_pad (core, arg);",
          "6014:     break;",
          "6015:    case '?': // \"pad?\"",
          "6017:     break;",
          "6018:    default:",
          "6019:     r_cons_printf (\"|Usage: pa[edD] [asm|hex]  print (dis)assembled\\n\");",
          "",
          "[Removed Lines]",
          "6016:     r_cons_printf (\"|Usage: pad [hex]       print assembly expression from hexpairs\\n\");",
          "",
          "[Added Lines]",
          "6016:     r_core_cmd_help_match (core, help_msg_pa, \"pad\", false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6030:    RAsmCode *acode = r_asm_massemble (core->rasm, input + 1);",
          "6031:    if (acode) {",
          "6032:     if (!acode->len) {",
          "6034:     } else {",
          "6035:      size_t i;",
          "6036:      for (i = 0; i < acode->len; i++) {",
          "",
          "[Removed Lines]",
          "6033:      eprintf (\"Usage: pa [instruction-to-assemble] ; use pd to disassemble\\n\");",
          "",
          "[Added Lines]",
          "6033:      r_core_cmd_help_match (core, help_msg_pa, \"pa\", false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7168:   break;",
          "7169:  case '3': // \"p3\" [file]",
          "7170:   if (input[1] == '?') {",
          "7172:   } else if (input[1] == ' ') {",
          "7173:    char *data = r_file_slurp (input + 2, NULL);",
          "7174:    if (!data) {",
          "",
          "[Removed Lines]",
          "7171:    eprintf (\"Usage: p3 [file] - print 3D stereogram image of current block\\n\");",
          "",
          "[Added Lines]",
          "7171:    r_core_cmd_help_match (core, help_msg_p, \"p3\", true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7492:     int mode = input[2];",
          "7493:     int wordsize = core->anal->config->bits / 8;",
          "7494:     if (mode == '?') {",
          "7496:      break;",
          "7497:     }",
          "7498:     if (mode && isdigit (mode)) {",
          "",
          "[Removed Lines]",
          "7495:      eprintf (\"Usage: pxr[1248][*,jq] [length]\\n\");",
          "",
          "[Added Lines]",
          "7495:      r_core_cmd_help_match (core, help_msg_px, \"pxr\", false);",
          "",
          "---------------"
        ],
        "shlr/ar/ar.c||shlr/ar/ar.c": [
          "File: shlr/ar/ar.c -> shlr/ar/ar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   return false;",
          "35:  }",
          "36:  if (strncmp (buf, AR_MAGIC_HEADER, 8)) {",
          "38:   return false;",
          "39:  }",
          "40:  return true;",
          "",
          "[Removed Lines]",
          "37:   eprintf (\"Wrong file type.\\n\");",
          "",
          "[Added Lines]",
          "37:   R_LOG_ERROR (\"Wrong file type\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: static char *name_from_table(ut64 off, filetable *tbl) {",
          "49:  if (off > tbl->size) {",
          "51:   return NULL;",
          "52:  }",
          "",
          "[Removed Lines]",
          "50:   eprintf (\"Malformed ar: name lookup out of bounds for header at offset 0x%\" PFMT64x \"\\n\", off);",
          "",
          "[Added Lines]",
          "50:   R_LOG_ERROR (\"Malformed ar: name lookup out of bounds for header at offset 0x%\" PFMT64x, off);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:  x[sizeof (x) - 1] = '\\0';                                                                \\",
          "72:  r_str_trim_tail (x);                                                                     \\",
          "73:  if (x[0] != '\\0' && (x[0] == '-' || !r_str_isnumber (x))) {                              \\",
          "75:   return -1;                                                                       \\",
          "76:  }",
          "",
          "[Removed Lines]",
          "74:   eprintf (\"Malformed AR: bad %s in header at offset 0x%\" PFMT64x \"\\n\", s, h_off); \\",
          "",
          "[Added Lines]",
          "74:   R_LOG_ERROR (\"Malformed AR: bad %s in header at offset 0x%\" PFMT64x, s, h_off); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:    return 1; // no more file",
          "107:   }",
          "108:   if (r < 0) {",
          "110:   } else {",
          "112:   }",
          "113:   return -1;",
          "114:  }",
          "116:  if (strncmp (h.end, AR_FILE_HEADER_END, sizeof (h.end))) {",
          "118:   return -1;",
          "119:  }",
          "",
          "[Removed Lines]",
          "109:    eprintf (\"AR read io error\\n\");",
          "111:    eprintf (\"Malformed AR: Invalid length while parsing header at 0x%\" PFMT64x \"\\n\", h_off);",
          "117:   eprintf (\"Invalid header at offset 0x%\" PFMT64x \": bad end field\\n\", h_off);",
          "",
          "[Added Lines]",
          "109:    R_LOG_ERROR (\"AR read io error\");",
          "111:    R_LOG_ERROR (\"Malformed AR: Invalid length while parsing header at 0x%\" PFMT64x, h_off);",
          "117:   R_LOG_ERROR (\"Invalid header at offset 0x%\" PFMT64x \": bad end field\", h_off);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:  VERIFY_AR_NUM_FIELD (h.size, \"size\")",
          "128:  if (h.size[0] == '\\0') {",
          "130:   return -1;",
          "131:  }",
          "132:  ut64 size = atol (h.size);",
          "",
          "[Removed Lines]",
          "129:   eprintf (\"Malformed AR: bad size in header at offset 0x%\" PFMT64x \"\\n\", h_off);",
          "",
          "[Added Lines]",
          "129:   R_LOG_ERROR (\"Malformed AR: bad size in header at offset 0x%\" PFMT64x, h_off);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:  if (!strcmp (h.name, \"/\")) {",
          "142:   if (r_buf_seek (b, size, R_BUF_CUR) <= 0 || r_buf_tell (b) > arsize) {",
          "144:    return -1;",
          "145:   }",
          "",
          "[Removed Lines]",
          "143:    eprintf (\"Malformed ar: too short\\n\");",
          "",
          "[Added Lines]",
          "143:    R_LOG_ERROR (\"Malformed ar: too short\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "148:  } else if (!strcmp (h.name, \"//\")) {",
          "150:   if (tbl->data || tbl->size != 0) {",
          "152:    return -1;",
          "153:   }",
          "154:   tbl->data = (char *)malloc (size + 1);",
          "",
          "[Removed Lines]",
          "151:    eprintf (\"invalid ar file: two filename lookup tables (at 0x%\" PFMT64x \", and 0x%\" PFMT64x \")\\n\", tbl->offset, h_off);",
          "",
          "[Added Lines]",
          "151:    R_LOG_ERROR (\"invalid ar file: two filename lookup tables (at 0x%\" PFMT64x \", and 0x%\" PFMT64x \")\", tbl->offset, h_off);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "169:  RList *list = r_str_split_duplist (h.name, \"/\", false); // don't strip spaces",
          "170:  if (r_list_length (list) != 2) {",
          "171:   r_list_free (list);",
          "173:   return -1;",
          "174:  }",
          "",
          "[Removed Lines]",
          "172:   eprintf (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x \"\\n\", h_off);",
          "",
          "[Added Lines]",
          "172:   R_LOG_ERROR (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x, h_off);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "180:   if (r_str_isnumber (tmp)) {",
          "181:    arf->name = name_from_table (atol (tmp), tbl);",
          "182:   } else {",
          "184:   }",
          "185:   free (tmp);",
          "186:  } else {",
          "",
          "[Removed Lines]",
          "183:    eprintf (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x \"\\n\", h_off);",
          "",
          "[Added Lines]",
          "183:    R_LOG_ERROR (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x, h_off);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "188:   tmp = r_list_pop (list);",
          "189:   if (tmp[0]) {",
          "190:    arf_clean_name (arf);",
          "192:   }",
          "193:   free (tmp);",
          "194:  }",
          "",
          "[Removed Lines]",
          "191:    eprintf (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x \"\\n\", h_off);",
          "",
          "[Added Lines]",
          "191:    R_LOG_ERROR (\"invalid ar file: invalid file name in header at: 0x%\" PFMT64x, h_off);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "204:  if (r_buf_seek (b, size, R_BUF_CUR) <= 0 || r_buf_tell (b) > arsize) {",
          "206:   arf_clean_name (arf);",
          "207:   return -1;",
          "208:  }",
          "",
          "[Removed Lines]",
          "205:   eprintf (\"Malformed ar: missing the end of %s (header offset: 0x%\" PFMT64x \")\\n\", arf->name, h_off);",
          "",
          "[Added Lines]",
          "205:   R_LOG_ERROR (\"Malformed ar: missing the end of %s (header offset: 0x%\" PFMT64x \")\", arf->name, h_off);",
          "",
          "---------------"
        ]
      }
    }
  ]
}