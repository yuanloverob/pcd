{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7f3edcd49d00380357ca2f55e93c0c7361792db",
      "candidate_info": {
        "commit_hash": "e7f3edcd49d00380357ca2f55e93c0c7361792db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7f3edcd49d00380357ca2f55e93c0c7361792db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Add an sqlite3FaultSim() to make an OOM case more accessible and remove the ALWAYS() on the conditional that is false when the OOM actually occurs.\n\nFossilOrigin-Name: 2a251af84ff1f5ca281aa69c5410d6ae7aa5a85ef47149909a297525e1651e9d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7052cf1d533f6404d0f45cf0b3e8a11c1ee27eccb64680a7fd308c8da7cbd544",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     );",
          "591:     assert( pWal->apWiData[iPage]!=0 || rc!=SQLITE_OK || pWal->writeLock==0 );",
          "592:     testcase( pWal->apWiData[iPage]==0 && rc==SQLITE_OK );",
          "594:       pWal->readOnly |= WAL_SHM_RDONLY;",
          "595:       if( rc==SQLITE_READONLY ){",
          "596:         rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "593:     if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "[Added Lines]",
          "593:     if( rc==SQLITE_OK ){",
          "594:       if( iPage>0 && sqlite3FaultSim(600) ) rc = SQLITE_NOMEM;",
          "595:     }else if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1065:   if( ALWAYS(rc==SQLITE_OK) ){",
          "",
          "[Added Lines]",
          "1067:   if( rc==SQLITE_OK ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3b75e982a2299d37b8bccab234b866f13420021",
      "candidate_info": {
        "commit_hash": "a3b75e982a2299d37b8bccab234b866f13420021",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3b75e982a2299d37b8bccab234b866f13420021",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mksourceid.c"
        ],
        "message": "Remove an asm() block from build tool mksourceid.c, as it causes build failures on some systems and performance is not important at build-time.\n\nFossilOrigin-Name: 8e100e6c35c30e0d7e4014b9435f81f9f61ddab2386dfe9a4218d8190a6da3be",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mksourceid.c||tool/mksourceid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mksourceid.c||tool/mksourceid.c": [
          "File: tool/mksourceid.c -> tool/mksourceid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "556: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "557: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "558: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "565: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "566:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "543: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "549: #define SHA_ROT(op, x, k) \\",
          "550:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "551: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "552: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "554: #else",
          "559: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15cedda9023901ac2f46fe5423f107bbd879c1fb",
      "candidate_info": {
        "commit_hash": "15cedda9023901ac2f46fe5423f107bbd879c1fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/15cedda9023901ac2f46fe5423f107bbd879c1fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Minor simplification to the 32-bit varint decoder.\n\nFossilOrigin-Name: 6ffd17b668a8ad561c37e89063afb6e7f8425e557e93025b7527fe3656585d77",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27d4a9a7b530c77a5b2593d1a5232b10746da9906f8d12890de7a8fbd7270256",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1141:     u64 v64;",
          "1142:     u8 n;",
          "1146:     assert( n>3 && n<=9 );",
          "1147:     if( (v64 & SQLITE_MAX_U32)!=v64 ){",
          "",
          "[Removed Lines]",
          "1144:     p -= 2;",
          "1145:     n = sqlite3GetVarint(p, &v64);",
          "",
          "[Added Lines]",
          "1144:     n = sqlite3GetVarint(p-2, &v64);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e26a602a3417bcc8ea65a434b7f56f608127dd2",
      "candidate_info": {
        "commit_hash": "2e26a602a3417bcc8ea65a434b7f56f608127dd2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e26a602a3417bcc8ea65a434b7f56f608127dd2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Backout change [4d0b9109f7a5312d4e1] because the conditional it added is no longer reachable due to check-in [1409758f72c0206c].\n\nFossilOrigin-Name: b3f2696705cc3e7b038f156423f808432a4680ea7e313dc15e34bdf6b1845655",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55c136ef61f23a04be1bf351ab7f6bdfa033653c32557a04916cc9770453f261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "e557b0155b1f0b70f95da0b8f1225e4d22e0d5c8",
      "candidate_info": {
        "commit_hash": "e557b0155b1f0b70f95da0b8f1225e4d22e0d5c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e557b0155b1f0b70f95da0b8f1225e4d22e0d5c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Improved VDBE comments on the ANALYZE code generator.  This change also fixes a harmless use of an uninitialized integer variable as an input to the %d format on a VDBE comment.\n\nFossilOrigin-Name: 1cb248a3fc4c35c5bc3993b554edcccaa5c5e91570af67ebb99643a15221ae33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e25d915bcb8d6f1747f9befdef64d2e0e495cc6c5948a8eff5d0097b6613d06",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:                              &statGetFuncdef, 0);",
          "952: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "958: static void analyzeVdbeCommentIndexWithColumnName(",
          "962: ){",
          "964:   assert( k>=0 && k<pIdx->nColumn );",
          "965:   i = pIdx->aiColumn[k];",
          "966:   if( NEVER(i==XN_ROWID) ){",
          "967:     VdbeComment((v,\"%s.rowid\",pIdx->zName));",
          "968:   }else if( i==XN_EXPR ){",
          "969:     VdbeComment((v,\"%s.expr(%d)\",pIdx->zName, k));",
          "970:   }else{",
          "971:     VdbeComment((v,\"%s.%s\", pIdx->zName, pIdx->pTable->aCol[i].zName));",
          "972:   }",
          "973: }",
          "974: #else",
          "975: # define analyzeVdbeCommentIndexWithColumnName(a,b,c)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1167:         char *pColl = (char*)sqlite3LocateCollSeq(pParse, pIdx->azColl[i]);",
          "1168:         sqlite3VdbeAddOp2(v, OP_Integer, i, regChng);",
          "1169:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, i, regTemp);",
          "1171:         aGotoChng[i] =",
          "1172:         sqlite3VdbeAddOp4(v, OP_Ne, regTemp, 0, regPrev+i, pColl, P4_COLLSEQ);",
          "1173:         sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "",
          "[Removed Lines]",
          "1170:         VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "[Added Lines]",
          "1194:         analyzeVdbeCommentIndexWithColumnName(v,pIdx,i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1188:       for(i=0; i<nColTest; i++){",
          "1189:         sqlite3VdbeJumpHere(v, aGotoChng[i]);",
          "1190:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, i, regPrev+i);",
          "1192:       }",
          "1193:       sqlite3VdbeResolveLabel(v, endDistinctTest);",
          "1194:       sqlite3DbFree(db, aGotoChng);",
          "",
          "[Removed Lines]",
          "1191:         VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "[Added Lines]",
          "1215:         analyzeVdbeCommentIndexWithColumnName(v,pIdx,i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1214:           k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "1215:           assert( k>=0 && k<pIdx->nColumn );",
          "1216:           sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1218:         }",
          "1219:         sqlite3VdbeAddOp3(v, OP_MakeRecord, regKey, pPk->nKeyCol, regRowid);",
          "1220:         sqlite3ReleaseTempRange(pParse, regKey, pPk->nKeyCol);",
          "",
          "[Removed Lines]",
          "1217:           VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "[Added Lines]",
          "1241:           analyzeVdbeCommentIndexWithColumnName(v,pIdx,k);",
          "",
          "---------------"
        ]
      }
    }
  ]
}