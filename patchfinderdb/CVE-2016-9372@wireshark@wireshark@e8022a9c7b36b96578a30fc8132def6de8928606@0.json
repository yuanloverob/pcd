{
  "cve_id": "CVE-2016-9372",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.1, the Profinet I/O dissector could loop excessively, triggered by network traffic or a capture file. This was addressed in plugins/profinet/packet-pn-rtc-one.c by rejecting input with too many I/O objects.",
  "repo": "wireshark/wireshark",
  "patch_hash": "e8022a9c7b36b96578a30fc8132def6de8928606",
  "patch_info": {
    "commit_hash": "e8022a9c7b36b96578a30fc8132def6de8928606",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/e8022a9c7b36b96578a30fc8132def6de8928606",
    "files": [
      "plugins/profinet/packet-pn-rtc-one.c"
    ],
    "message": "Profinet I/O: Sanity check number of I/O objects\n\nCan prevent really long loops from fuzz testing.\n\nBug: 12851\nChange-Id: I85e00af2c4753ce4c5bcb650a7df188d7f679c9a\nReviewed-on: https://code.wireshark.org/review/18136\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
    ]
  },
  "patch_diff": {
    "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c": [
      "File: plugins/profinet/packet-pn-rtc-one.c -> plugins/profinet/packet-pn-rtc-one.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: #include <epan/packet.h>",
      "72: #include <epan/dissectors/packet-dcerpc.h>",
      "73: #include <epan/proto.h>",
      "75: #include \"packet-pn.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137: static gint ett_pn_io_ioxs = -1;",
      "138: static gint ett_pn_io_io_data_object = -1;",
      "141: static const value_string pn_io_ioxs_extension[] = {",
      "142:     { 0x00 /*  0*/, \"No IOxS octet follows\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141: static expert_field ei_pn_io_too_many_data_objects = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "377:     gboolean    outputFlag;",
      "380:     proto_item *IODataObject_item;",
      "381:     proto_item *IODataObject_item_info;",
      "382:     proto_tree *IODataObject_tree;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:     proto_item *data_item;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "424:             \"PROFINET IO Cyclic Service Data Unit: %u bytes\", tvb_captured_length(tvb));",
      "429:     if (!(dissect_CSF_SDU_heur(tvb, pinfo, data_tree, NULL) == FALSE))",
      "",
      "[Removed Lines]",
      "421:     if (tree) {",
      "422:         proto_item *data_item;",
      "423:         data_item = proto_tree_add_protocol_format(tree, proto_pn_io_rtc1, tvb, offset, tvb_captured_length(tvb),",
      "425:         data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
      "426:     }",
      "",
      "[Added Lines]",
      "424:     data_item = proto_tree_add_protocol_format(tree, proto_pn_io_rtc1, tvb, offset, tvb_captured_length(tvb),",
      "426:     data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "501:         objectCounter = number_io_data_objects_input_cr + number_iocs_input_cr;",
      "502:         while (objectCounter--) {",
      "504:             if (station_info != NULL) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "502:         if (objectCounter > (guint)tvb_reported_length_remaining(tvb, offset)) {",
      "503:             expert_add_info_format(pinfo, data_item, &ei_pn_io_too_many_data_objects, \"Too many data objects: %d\", objectCounter);",
      "504:             return(tvb_captured_length(tvb));",
      "505:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "696:         objectCounter = number_io_data_objects_output_cr + number_iocs_output_cr;",
      "697:         while (objectCounter--) {",
      "699:             if (station_info != NULL) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "702:         if (objectCounter > (guint)tvb_reported_length_remaining(tvb, offset)) {",
      "703:             expert_add_info_format(pinfo, data_item, &ei_pn_io_too_many_data_objects, \"Too many data objects: %d\", objectCounter);",
      "704:             return(tvb_captured_length(tvb));",
      "705:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1073:         &ett_pn_io_io_data_object",
      "1074:     };",
      "1076:     proto_pn_io_rtc1 = proto;",
      "1077:     proto_register_field_array(proto, hf, array_length(hf));",
      "1078:     proto_register_subtree_array(ett, array_length(ett));",
      "1079: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1085:     static ei_register_info ei[] = {",
      "1086:         { &ei_pn_io_too_many_data_objects, { \"pn_io.too_many_data_objects\", PI_MALFORMED, PI_ERROR, \"Too many data objects\", EXPFILL }},",
      "1087:     };",
      "1089:     expert_module_t* expert_pn_io;",
      "1094:     expert_pn_io = expert_register_protocol(proto_pn_io_rtc1);",
      "1095:     expert_register_field_array(expert_pn_io, ei, array_length(ei));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4127e3930ef663114567002001f44e01eba8a250",
      "candidate_info": {
        "commit_hash": "4127e3930ef663114567002001f44e01eba8a250",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4127e3930ef663114567002001f44e01eba8a250",
        "files": [
          "plugins/profinet/packet-pn-rtc-one.c"
        ],
        "message": "Profinet I/O: Sanity check number of I/O objects\n\nCan prevent really long loops from fuzz testing.\n\nBug: 12851\nChange-Id: I85e00af2c4753ce4c5bcb650a7df188d7f679c9a\nReviewed-on: https://code.wireshark.org/review/18136\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit e8022a9c7b36b96578a30fc8132def6de8928606)\nReviewed-on: https://code.wireshark.org/review/18137",
        "before_after_code_files": [
          "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
          ],
          "candidate": [
            "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c": [
          "File: plugins/profinet/packet-pn-rtc-one.c -> plugins/profinet/packet-pn-rtc-one.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #include <epan/packet.h>",
          "72: #include <epan/dissectors/packet-dcerpc.h>",
          "73: #include <epan/proto.h>",
          "75: #include \"packet-pn.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: static gint ett_pn_io_ioxs = -1;",
          "138: static gint ett_pn_io_io_data_object = -1;",
          "141: static const value_string pn_io_ioxs_extension[] = {",
          "142:     { 0x00 /*  0*/, \"No IOxS octet follows\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: static expert_field ei_pn_io_too_many_data_objects = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:     gboolean    outputFlag;",
          "380:     proto_item *IODataObject_item;",
          "381:     proto_item *IODataObject_item_info;",
          "382:     proto_tree *IODataObject_tree;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:     proto_item *data_item;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "424:             \"PROFINET IO Cyclic Service Data Unit: %u bytes\", tvb_captured_length(tvb));",
          "429:     if (!(dissect_CSF_SDU_heur(tvb, pinfo, data_tree, NULL) == FALSE))",
          "",
          "[Removed Lines]",
          "421:     if (tree) {",
          "422:         proto_item *data_item;",
          "423:         data_item = proto_tree_add_protocol_format(tree, proto_pn_io_rtc1, tvb, offset, tvb_captured_length(tvb),",
          "425:         data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
          "426:     }",
          "",
          "[Added Lines]",
          "424:     data_item = proto_tree_add_protocol_format(tree, proto_pn_io_rtc1, tvb, offset, tvb_captured_length(tvb),",
          "426:     data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:         objectCounter = number_io_data_objects_input_cr + number_iocs_input_cr;",
          "502:         while (objectCounter--) {",
          "504:             if (station_info != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:         if (objectCounter > (guint)tvb_reported_length_remaining(tvb, offset)) {",
          "503:             expert_add_info_format(pinfo, data_item, &ei_pn_io_too_many_data_objects, \"Too many data objects: %d\", objectCounter);",
          "504:             return(tvb_captured_length(tvb));",
          "505:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "696:         objectCounter = number_io_data_objects_output_cr + number_iocs_output_cr;",
          "697:         while (objectCounter--) {",
          "699:             if (station_info != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702:         if (objectCounter > (guint)tvb_reported_length_remaining(tvb, offset)) {",
          "703:             expert_add_info_format(pinfo, data_item, &ei_pn_io_too_many_data_objects, \"Too many data objects: %d\", objectCounter);",
          "704:             return(tvb_captured_length(tvb));",
          "705:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1073:         &ett_pn_io_io_data_object",
          "1074:     };",
          "1076:     proto_pn_io_rtc1 = proto;",
          "1077:     proto_register_field_array(proto, hf, array_length(hf));",
          "1078:     proto_register_subtree_array(ett, array_length(ett));",
          "1079: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:     static ei_register_info ei[] = {",
          "1086:         { &ei_pn_io_too_many_data_objects, { \"pn_io.too_many_data_objects\", PI_MALFORMED, PI_ERROR, \"Too many data objects\", EXPFILL }},",
          "1087:     };",
          "1089:     expert_module_t* expert_pn_io;",
          "1094:     expert_pn_io = expert_register_protocol(proto_pn_io_rtc1);",
          "1095:     expert_register_field_array(expert_pn_io, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0e679e0a991103db30bb8d57e8172ab29671884",
      "candidate_info": {
        "commit_hash": "c0e679e0a991103db30bb8d57e8172ab29671884",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c0e679e0a991103db30bb8d57e8172ab29671884",
        "files": [
          "plugins/profinet/AUTHORS",
          "plugins/profinet/CMakeLists.txt",
          "plugins/profinet/Makefile.common",
          "plugins/profinet/packet-dcerpc-pn-io.c",
          "plugins/profinet/packet-pn-dcp.c",
          "plugins/profinet/packet-pn-rtc-one.c",
          "plugins/profinet/packet-pn.c",
          "plugins/profinet/packet-pn.h"
        ],
        "message": "Cyclic PROFINET PROFIsafe RTC1 data dissection\n\nNew implemented functions for profinet plug-in to read cyclic RTC1 data\nframes more detailed and further to dissect PROFIsafe on PROFINET frames.\n\nNew functions include:\n- Reading the PROFINET \"Ident OK\" Frame for detailed module information,\n  as ModuleIdentNr., SubModuleIdentNr., etc. total dynamically\n- Improved the existing dissection of fParameter with usage of GSDML-files,\n  as the indexnumber for those parameters can change\n- Reading a GSDML-file for further module-information, such as PROFIsafe\n  Module, etc.\n- Aded new pnio protocol preferences, in which the user can define its own\n  network path to his GSDML-files, so that Wireshark is able to read those\n  files for detailed information output.\n- Added new filter functions for PROFINET and PROFIsafe\n- All gained and saved information will be used to dissect the cyclic\n  PROFINET frames\n\nBug: 12216\nChange-Id: I379da1d349fa099047953042f1aa30450bee5b30\nReviewed-on: https://code.wireshark.org/review/14119\nPetri-Dish: Jim Young <jim.young.ws@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Birol Capa <birol.capa@siemens.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "plugins/profinet/Makefile.common||plugins/profinet/Makefile.common",
          "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c",
          "plugins/profinet/packet-pn-dcp.c||plugins/profinet/packet-pn-dcp.c",
          "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c",
          "plugins/profinet/packet-pn.c||plugins/profinet/packet-pn.c",
          "plugins/profinet/packet-pn.h||plugins/profinet/packet-pn.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
          ],
          "candidate": [
            "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/profinet/Makefile.common||plugins/profinet/Makefile.common": [
          "File: plugins/profinet/Makefile.common -> plugins/profinet/Makefile.common",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  packet-pn-mrp.c \\",
          "34:  packet-pn-mrrt.c \\",
          "35:  packet-pn-ptcp.c \\",
          "38: # Non-generated sources",
          "39: NONGENERATED_C_FILES = \\",
          "",
          "[Removed Lines]",
          "36:  packet-pn-rt.c",
          "",
          "[Added Lines]",
          "36:  packet-pn-rt.c \\",
          "37:  packet-pn-rtc-one.c",
          "",
          "---------------"
        ],
        "plugins/profinet/packet-dcerpc-pn-io.c||plugins/profinet/packet-dcerpc-pn-io.c": [
          "File: plugins/profinet/packet-dcerpc-pn-io.c -> plugins/profinet/packet-dcerpc-pn-io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"config.h\"",
          "48: #include <string.h>",
          "50: #include <epan/packet.h>",
          "51: #include <epan/to_str.h>",
          "52: #include <epan/expert.h>",
          "53: #include <epan/dissector_filters.h>",
          "54: #include <epan/proto_data.h>",
          "57: #include \"packet-pn.h\"",
          "59: void proto_register_pn_io(void);",
          "60: void proto_reg_handoff_pn_io(void);",
          "62: static int proto_pn_io = -1;",
          "63: static int proto_pn_io_controller = -1;",
          "64: static int proto_pn_io_supervisor = -1;",
          "",
          "[Removed Lines]",
          "55: #include <epan/dissectors/packet-dcerpc.h>",
          "",
          "[Added Lines]",
          "70: #include <glib.h>",
          "74: #include <epan/wmem/wmem.h>",
          "75: #include <epan/dissectors/packet-dcerpc.h>",
          "80: #include <wsutil/file_util.h>",
          "81: #include <epan/prefs.h>",
          "85: #include <stdio.h>",
          "86: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596: static int hf_pn_io_check_sync_mode_sync_master = -1;",
          "597: static int hf_pn_io_check_sync_mode_cable_delay = -1;",
          "614: static int hf_pn_io_profidrive_request_reference = -1;",
          "615: static int hf_pn_io_profidrive_request_id = -1;",
          "",
          "[Removed Lines]",
          "599: static int hf_pn_io_profisafe_f_prm_flag1 = -1;",
          "600: static int hf_pn_io_profisafe_f_prm_flag1_chck_seq = -1;",
          "601: static int hf_pn_io_profisafe_f_prm_flag1_chck_ipar = -1;",
          "602: static int hf_pn_io_profisafe_f_prm_flag1_sil = -1;",
          "603: static int hf_pn_io_profisafe_f_prm_flag1_crc_len = -1;",
          "604: static int hf_pn_io_profisafe_f_prm_flag1_reserved = -1;",
          "605: static int hf_pn_io_profisafe_f_prm_flag2 = -1;",
          "606: static int hf_pn_io_profisafe_f_src_addr = -1;",
          "607: static int hf_pn_io_profisafe_f_dst_addr = -1;",
          "608: static int hf_pn_io_profisafe_f_wd_time = -1;",
          "609: static int hf_pn_io_profisafe_f_par_crc = -1;",
          "610: static int hf_pn_io_profisafe_f_prm_flag2_reserved = -1;",
          "611: static int hf_pn_io_profisafe_f_prm_flag2_f_block_id = -1;",
          "612: static int hf_pn_io_profisafe_f_prm_flag2_f_par_version = -1;",
          "",
          "[Added Lines]",
          "638: static int hf_pn_io_ps_f_prm_flag1 = -1;",
          "639: static int hf_pn_io_ps_f_prm_flag1_chck_seq = -1;",
          "640: static int hf_pn_io_ps_f_prm_flag1_chck_ipar = -1;",
          "641: static int hf_pn_io_ps_f_prm_flag1_sil = -1;",
          "642: static int hf_pn_io_ps_f_prm_flag1_crc_len = -1;",
          "643: static int hf_pn_io_ps_f_prm_flag1_crc_seed = -1;",
          "644: static int hf_pn_io_ps_f_prm_flag1_reserved = -1;",
          "645: static int hf_pn_io_ps_f_prm_flag2 = -1;",
          "646: static int hf_pn_io_ps_f_wd_time = -1;",
          "647: static int hf_pn_io_ps_f_ipar_crc = -1;",
          "648: static int hf_pn_io_ps_f_par_crc = -1;",
          "649: static int hf_pn_io_ps_f_src_adr = -1;",
          "650: static int hf_pn_io_ps_f_dest_adr = -1;",
          "651: static int hf_pn_io_ps_f_prm_flag2_reserved = -1;",
          "652: static int hf_pn_io_ps_f_prm_flag2_f_block_id = -1;",
          "653: static int hf_pn_io_ps_f_prm_flag2_f_par_version = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707: static e_guid_t uuid_pn_io_parameterserver = { 0xDEA00004, 0x6C97, 0x11D1, { 0x82, 0x71, 0x00, 0xA0, 0x24, 0x42, 0xDF, 0x7D } };",
          "708: static guint16  ver_pn_io_parameterserver = 1;",
          "711: static heur_dissector_list_t heur_pn_subdissector_list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753: gboolean           pnio_ps_selection = TRUE;",
          "754: static const char *pnio_ps_networkpath = \"\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2561:     { 0, NULL }",
          "2562: };",
          "2564: static const value_string pn_io_f_block_id[] = {",
          "2568:     { 0, NULL }",
          "2569: };",
          "",
          "[Removed Lines]",
          "2565:     { 0x00, \"Parameter set for F-Host/F-Device relationship\" },",
          "2566:     { 0x01, \"Additional F_Address parameter block\" },",
          "",
          "[Added Lines]",
          "2611: static const value_string pn_io_f_crc_seed[] = {",
          "2612:     { 0x00, \"CRC-FP as seed value and counter\" },",
          "2613:     { 0x01, \"'1' as seed value and CRC-FP+/MNR\" },",
          "2614:     { 0, NULL }",
          "2615: };",
          "2619:     { 0x00, \"No F_WD_Time_2, no F_iPar_CRC\" },",
          "2620:     { 0x01, \"No F_WD_Time_2, F_iPar_CRC\" },",
          "2621:     { 0x02, \"F_WD_Time_2, no F_iPar_CRC\" },",
          "2622:     { 0x03, \"F_WD_Time_2, F_iPar_CRC\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7183:     proto_tree *sub_tree;",
          "7184:     guint32     u32SubStart;",
          "7187:     if (u8BlockVersionHigh != 1 || u8BlockVersionLow != 0) {",
          "7188:         expert_add_info_format(pinfo, item, &ei_pn_io_block_version,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7247:     conversation_t    *conversation;",
          "7248:     stationInfo       *station_info = NULL;",
          "7249:     iocsObject        *iocs_object;",
          "7250:     iocsObject        *cmp_iocs_object;",
          "7251:     ioDataObject      *io_data_object;",
          "7252:     ioDataObject      *cmp_io_data_object;",
          "7253:     wmem_list_frame_t *frame;",
          "7254:     wmem_list_t       *iocs_list;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7242:         offset = dissect_dcerpc_uint16(tvb, offset, pinfo, api_tree, drep,",
          "7243:                             hf_pn_io_number_of_io_data_objects, &u16NumberOfIODataObjects);",
          "7245:         u16Tmp = u16NumberOfIODataObjects;",
          "7246:         while (u16Tmp--) {",
          "7247:             sub_item = proto_tree_add_item(api_tree, hf_pn_io_io_data_object, tvb, offset, 0, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7316:         if (pinfo->fd->flags.visited == FALSE) {",
          "7318:             conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "7319:             if (conversation == NULL) {",
          "7323:                 conversation = conversation_new(pinfo->num, &pinfo->dl_dst, &pinfo->dl_src, PT_NONE, 0, 0, 0);",
          "7324:             }",
          "7326:             station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "7327:             if (station_info == NULL) {",
          "7328:                 station_info = wmem_new0(wmem_file_scope(), stationInfo);",
          "7329:                 init_pnio_rtc1_station(station_info);",
          "7330:                 conversation_add_proto_data(conversation, proto_pn_dcp, station_info);",
          "7331:             }",
          "7332:             else {",
          "7333:                 station_info->ioDataObjectNr = u16NumberOfIODataObjects;",
          "7334:             }",
          "7335:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7262:                 u16SlotNr, u16SubslotNr, u16IODataObjectFrameOffset);",
          "7264:             proto_item_set_len(sub_item, offset - u32SubStart);",
          "7265:         }",
          "7267:         offset = dissect_dcerpc_uint16(tvb, offset, pinfo, api_tree, drep,",
          "7268:                             hf_pn_io_number_of_iocs, &u16NumberOfIOCS);",
          "7270:         u16Tmp = u16NumberOfIOCS;",
          "7271:         while (u16Tmp--) {",
          "7272:             sub_item = proto_tree_add_item(api_tree, hf_pn_io_io_cs, tvb, offset, 0, ENC_NA);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7358:             if (pinfo->fd->flags.visited == FALSE && station_info != NULL) {",
          "7359:                 io_data_object = wmem_new(wmem_file_scope(), ioDataObject);",
          "7360:                 io_data_object->slotNr = u16SlotNr;",
          "7361:                 io_data_object->subSlotNr = u16SubslotNr;",
          "7362:                 io_data_object->frameOffset = u16IODataObjectFrameOffset;",
          "7364:                 io_data_object->f_dest_adr = 0;",
          "7365:                 io_data_object->f_par_crc1 = 0;",
          "7366:                 io_data_object->f_src_adr = 0;",
          "7367:                 io_data_object->f_crc_seed = FALSE;",
          "7368:                 io_data_object->f_crc_len = 0;",
          "7370:                 io_data_object->last_sb_cb = 0;",
          "7371:                 io_data_object->lastToggleBit = 0;",
          "7373:                 if (u16IOCRType == PN_INPUT_CR) {",
          "7374:                     iocs_list = station_info->ioobject_data_in;",
          "7375:                 }",
          "7376:                 else {",
          "7377:                     iocs_list = station_info->ioobject_data_out;",
          "7378:                 }",
          "7380:                 for (frame = wmem_list_head(iocs_list); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "7381:                     cmp_io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "7382:                     if (cmp_io_data_object->slotNr == u16SlotNr && cmp_io_data_object->subSlotNr == u16SubslotNr) {",
          "7384:                         break;",
          "7385:                     }",
          "7386:                 }",
          "7388:                 if (frame == NULL) {",
          "7390:                     wmem_list_append(iocs_list, io_data_object);",
          "7391:                 }",
          "7392:             }",
          "7400:         if (pinfo->fd->flags.visited == FALSE) {",
          "7401:             if (station_info != NULL) {",
          "7402:                 station_info->iocsNr = u16NumberOfIOCS;",
          "7403:             }",
          "7404:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7287:                 u16SlotNr, u16SubslotNr, u16IOCSFrameOffset);",
          "7289:             proto_item_set_len(sub_item, offset - u32SubStart);",
          "7290:         }",
          "7292:         proto_item_append_text(api_item, \": 0x%x, NumberOfIODataObjects: %u NumberOfIOCS: %u\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7427:             if (pinfo->fd->flags.visited == FALSE) {",
          "7428:                 if (station_info != NULL) {",
          "7429:                     if (u16IOCRType == PN_INPUT_CR) {",
          "7430:                         iocs_list = station_info->iocs_data_in;",
          "7431:                     }",
          "7432:                     else {",
          "7433:                         iocs_list = station_info->iocs_data_out;",
          "7434:                     }",
          "7436:                     for (frame = wmem_list_head(iocs_list); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "7437:                         cmp_iocs_object = (iocsObject*)wmem_list_frame_data(frame);",
          "7438:                         if (cmp_iocs_object->slotNr == u16SlotNr && cmp_iocs_object->subSlotNr == u16SubslotNr) {",
          "7440:                             break;",
          "7441:                         }",
          "7442:                     }",
          "7444:                     if (frame == NULL) {",
          "7446:                         iocs_object = wmem_new(wmem_file_scope(), iocsObject);",
          "7447:                         iocs_object->slotNr = u16SlotNr;",
          "7448:                         iocs_object->subSlotNr = u16SubslotNr;",
          "7449:                         iocs_object->frameOffset = u16IOCSFrameOffset;",
          "7450:                         wmem_list_append(iocs_list, iocs_object);",
          "7451:                     }",
          "7452:                 }",
          "7453:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7843: static int",
          "7844: dissect_DataDescription(tvbuff_t *tvb, int offset,",
          "7846: {",
          "7847:     guint16     u16DataDescription;",
          "7848:     guint16     u16SubmoduleDataLength;",
          "",
          "[Removed Lines]",
          "7845:     packet_info *pinfo, proto_tree *tree, guint8 *drep)",
          "",
          "[Added Lines]",
          "8011:     packet_info *pinfo, proto_tree *tree, guint8 *drep, ioDataObject *tmp_io_data_object)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7852:     proto_tree *sub_tree;",
          "7853:     guint32     u32SubStart;",
          "7856:     sub_item = proto_tree_add_item(tree, hf_pn_io_data_description_tree, tvb, offset, 0, ENC_NA);",
          "7857:     sub_tree = proto_item_add_subtree(sub_item, ett_pn_io_data_description);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8021:     conversation_t    *conversation;",
          "8022:     stationInfo       *station_info = NULL;",
          "8023:     ioDataObject      *io_data_object;",
          "8024:     wmem_list_frame_t *frame;",
          "8025:     wmem_list_t       *ioobject_list;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7875:         u16SubmoduleDataLength, u8LengthIOCS, u8LengthIOPS);",
          "7876:     proto_item_set_len(sub_item, offset - u32SubStart);",
          "7878:     return offset;",
          "7879: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8050:     if (pinfo->fd->flags.visited == FALSE) {",
          "8052:         conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8053:         if (conversation == NULL) {",
          "8054:             conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8055:         }",
          "8057:         station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "8059:         if (station_info != NULL) {",
          "8060:             if (u16DataDescription == PN_INPUT_DATADESCRITPION) {",
          "8062:                 ioobject_list = station_info->ioobject_data_in;",
          "8063:             }",
          "8064:             else {",
          "8066:                 ioobject_list = station_info->ioobject_data_out;",
          "8067:             }",
          "8069:             for (frame = wmem_list_head(ioobject_list); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "8070:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "8071:                 if (io_data_object->slotNr == tmp_io_data_object->slotNr && io_data_object->subSlotNr == tmp_io_data_object->subSlotNr) {",
          "8073:                     io_data_object->moduleIdentNr = tmp_io_data_object->moduleIdentNr;",
          "8074:                     io_data_object->subModuleIdentNr = tmp_io_data_object->subModuleIdentNr;",
          "8075:                     io_data_object->length = u16SubmoduleDataLength;",
          "8077:                     io_data_object->moduleNameStr = wmem_strdup(wmem_file_scope(), tmp_io_data_object->moduleNameStr);",
          "8078:                     io_data_object->profisafeSupported = tmp_io_data_object->profisafeSupported;",
          "8079:                     io_data_object->discardIOXS = tmp_io_data_object->discardIOXS;",
          "8080:                     io_data_object->amountInGSDML = tmp_io_data_object->amountInGSDML;",
          "8081:                     io_data_object->fParameterIndexNr = tmp_io_data_object->fParameterIndexNr;",
          "8083:                     break;",
          "8084:                 }",
          "8085:             }",
          "8086:         }",
          "8087:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7902:     proto_tree *submodule_tree;",
          "7903:     guint32     u32SubStart;",
          "7906:     if (u8BlockVersionHigh != 1 || u8BlockVersionLow != 0) {",
          "7907:         expert_add_info_format(pinfo, item, &ei_pn_io_block_version,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8117:     const char vendorIdStr[] = \"VendorID=\\\"\";",
          "8118:     const char deviceIdStr[] = \"DeviceID=\\\"\";",
          "8119:     const char moduleStr[] = \"ModuleIdentNumber=\\\"\";",
          "8120:     const char subModuleStr[] = \"SubmoduleIdentNumber=\\\"\";",
          "8121:     const char profisafeStr[] = \"PROFIsafeSupported=\\\"true\\\"\";",
          "8122:     const char fParameterStr[] = \"<F_ParameterRecordDataItem\";",
          "8123:     const char fParameterIndexStr[] = \"Index=\";",
          "8124:     const char moduleNameInfo[] = \"<Name\";",
          "8125:     const char moduleValueInfo[] = \"Value=\\\"\";",
          "8127:     guint16  searchVendorID = 0;",
          "8128:     guint16  searchDeviceID = 0;",
          "8129:     gint32   filePosRecord;",
          "8130:     gboolean vendorMatch;",
          "8131:     gboolean deviceMatch;",
          "8132:     conversation_t *conversation;",
          "8133:     stationInfo    *station_info = NULL;",
          "8137:     guint32  read_vendor_id;",
          "8138:     guint32  read_device_id;",
          "8139:     guint32  read_module_id;",
          "8140:     guint32  read_submodule_id;",
          "8141:     gboolean gsdmlFoundFlag;",
          "8142:     gchar   tmp_moduletext[MAX_NAMELENGTH];",
          "8148:     GDir    *dir;",
          "8153:     convertStr = (gchar*)wmem_alloc(wmem_packet_scope(), MAX_NAMELENGTH);",
          "8154:     convertStr[0] = '\\0';",
          "8155:     pch = (gchar*)wmem_alloc(wmem_packet_scope(), MAX_LINE_LENGTH);",
          "8156:     pch[0] = '\\0';",
          "8157:     puffer = (gchar*)wmem_alloc(wmem_packet_scope(), MAX_LINE_LENGTH);",
          "8158:     puffer[0] = '\\0';",
          "8159:     temp = (gchar*)wmem_alloc(wmem_packet_scope(), MAX_LINE_LENGTH);",
          "8160:     temp[0] = '\\0';",
          "8163:     io_data_object = wmem_new0(wmem_file_scope(), ioDataObject);",
          "8164:     io_data_object->profisafeSupported = FALSE;",
          "8165:     io_data_object->moduleNameStr = wmem_strdup(wmem_file_scope(), \"Unknown\");",
          "8166:     vendorMatch = FALSE;",
          "8167:     deviceMatch = FALSE;",
          "8168:     gsdmlFoundFlag = FALSE;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7915:     proto_item_append_text(item, \": APIs:%u\", u16NumberOfAPIs);",
          "7917:     while (u16NumberOfAPIs--) {",
          "7918:         api_item = proto_tree_add_item(tree, hf_pn_io_api_tree, tvb, offset, 0, ENC_NA);",
          "7919:         api_tree = proto_item_add_subtree(api_item, ett_pn_io_api);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8184:     conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8185:     if (conversation == NULL) {",
          "8186:         conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8187:     }",
          "8189:     station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "8190:     if (station_info != NULL) {",
          "8191:         station_info->gsdFound = FALSE;",
          "8192:         station_info->gsdPathLength = FALSE;",
          "8195:         searchVendorID = station_info->u16Vendor_id;",
          "8196:         searchDeviceID = station_info->u16Device_id;",
          "8200:             station_info->gsdPathLength = TRUE;",
          "8202:             if ((dir = g_dir_open(pnio_ps_networkpath, 0, NULL)) != NULL) {",
          "8204:                 while ((filename = g_dir_read_name(dir)) != NULL) {",
          "8207:                     diropen = wmem_strdup_printf(wmem_packet_scope(), \"%s\" G_DIR_SEPARATOR_S \"%s\", pnio_ps_networkpath, filename);",
          "8210:                     fp = ws_fopen(diropen, \"r\");",
          "8212:                     if(fp != NULL) {",
          "8214:                         while(fp != NULL && fgets(puffer, MAX_LINE_LENGTH, fp) != NULL) {",
          "8216:                             if((strstr(puffer, vendorIdStr)) != NULL) {",
          "8217:                                 memset (convertStr, 0, sizeof(*convertStr));",
          "8218:                                 pch = strstr(puffer, vendorIdStr);",
          "8219:                                 sscanf(pch, \"VendorID=\\\"%[^\\\"]\", convertStr);",
          "8220:                                 read_vendor_id = (guint32) strtoul (convertStr, NULL, 0);",
          "8222:                                 if(read_vendor_id == searchVendorID) {",
          "8224:                                 }",
          "8225:                             }",
          "8228:                             if((strstr(puffer, deviceIdStr)) != NULL) {",
          "8229:                                 memset(convertStr, 0, sizeof(*convertStr));",
          "8230:                                 pch = strstr(puffer, deviceIdStr);",
          "8231:                                 sscanf(pch, \"DeviceID=\\\"%[^\\\"]\", convertStr);",
          "8232:                                 read_device_id = (guint32)strtoul(convertStr, NULL, 0);",
          "8234:                                 if(read_device_id == searchDeviceID) {",
          "8236:                                 }",
          "8237:                             }",
          "8238:                         }",
          "8240:                         if(fclose(fp) == 0) {",
          "8242:                             fp = NULL;",
          "8243:                         }",
          "8245:                         if(vendorMatch == TRUE && deviceMatch == TRUE) {",
          "8247:                         }",
          "8248:                         else {",
          "8250:                             vendorMatch = FALSE;",
          "8251:                             deviceMatch = FALSE;",
          "8252:                             gsdmlFoundFlag = FALSE;",
          "8254:                         }",
          "8255:                     }",
          "8256:                 }",
          "8258:                 g_dir_close(dir);",
          "8259:             }",
          "8262:             if((vendorMatch == TRUE) && (deviceMatch == TRUE)) {",
          "8263:                 gsdmlFoundFlag = TRUE;",
          "8264:                 station_info->gsdFound = TRUE;",
          "8265:                 station_info->gsdLocation = wmem_strdup(wmem_file_scope(), diropen);",
          "8266:             }",
          "8267:             else {",
          "8269:                 station_info->gsdLocation = wmem_strdup_printf(wmem_file_scope(), \"%s\" G_DIR_SEPARATOR_S \"*.xml\", pnio_ps_networkpath);",
          "8270:             }",
          "8271:         }",
          "8272:         else {",
          "8274:             station_info->gsdPathLength = FALSE;",
          "8275:         }",
          "8276:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7967:             offset = dissect_dcerpc_uint16(tvb, offset, pinfo, submodule_tree, drep,",
          "7968:                             hf_pn_io_submodule_properties_type, &u16SubmoduleProperties);",
          "7970:             switch (u16SubmoduleProperties & 0x03) {",
          "7973:                 break;",
          "7976:                 break;",
          "7979:                 break;",
          "7983:                 break;",
          "7984:             }",
          "",
          "[Removed Lines]",
          "7972:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep);",
          "7975:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep);",
          "7978:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep);",
          "7981:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep);",
          "7982:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep);",
          "",
          "[Added Lines]",
          "8331:             io_data_object->slotNr = u16SlotNr;",
          "8332:             io_data_object->subSlotNr = u16SubslotNr;",
          "8333:             io_data_object->moduleIdentNr = u32ModuleIdentNumber;",
          "8334:             io_data_object->subModuleIdentNr = u32SubmoduleIdentNumber;",
          "8335:             io_data_object->discardIOXS = u16SubmoduleProperties & 0x0020;",
          "8347:             io_data_object->amountInGSDML = 0;",
          "8348:             io_data_object->fParameterIndexNr = 0;",
          "8349:             io_data_object->profisafeSupported = FALSE;",
          "8351:             if (diropen != NULL) {",
          "8352:                 fp = ws_fopen(diropen, \"r\");",
          "8353:             }",
          "8354:             if(gsdmlFoundFlag == TRUE && fp != NULL) {",
          "8355:                 fseek(fp, 0, SEEK_SET);",
          "8358:                 while(fgets(temp, MAX_LINE_LENGTH, fp) != NULL) {",
          "8359:                     if((strstr(temp, fParameterStr)) != NULL) {",
          "8360:                         memset (convertStr, 0, sizeof(*convertStr));",
          "8362:                         pch = strstr(temp, fParameterIndexStr);",
          "8363:                         sscanf(pch, \"Index=\\\"%[^\\\"]\", convertStr);",
          "8364:                         io_data_object->fParameterIndexNr = (guint32)strtoul(convertStr, NULL, 0);",
          "8367:                     }",
          "8368:                 }",
          "8370:                 memset (temp, 0, sizeof(*temp));",
          "8373:                 while(fgets(temp, MAX_LINE_LENGTH, fp) != NULL) {",
          "8375:                         memset (convertStr, 0, sizeof(*convertStr));",
          "8381:                         if (read_module_id == io_data_object->moduleIdentNr) {",
          "8384:                             while(fgets(temp, MAX_LINE_LENGTH, fp) != NULL) {",
          "8390:                                     while (fgets(temp, MAX_LINE_LENGTH, fp) != NULL && io_data_object->amountInGSDML == 1) {",
          "8392:                                         if(((strstr(temp, tmp_moduletext)) != NULL) && ((strstr(temp, moduleValueInfo)) != NULL)) {",
          "8393:                                             pch = strstr(temp, moduleValueInfo);",
          "8394:                                             sscanf(pch, \"Value=\\\"%[^\\\"]\", io_data_object->moduleNameStr);",
          "8396:                                         }",
          "8397:                                     }",
          "8400:                                 }",
          "8403:                                 if((strstr(temp, subModuleStr)) != NULL) {",
          "8404:                                     memset (convertStr, 0, sizeof(*convertStr));",
          "8405:                                     pch = strstr(temp, subModuleStr);",
          "8406:                                     sscanf(pch, \"SubmoduleIdentNumber=\\\"%[^\\\"]\", convertStr);",
          "8410:                                     if(read_submodule_id == io_data_object->subModuleIdentNr) {",
          "8411:                                         if((strstr(temp, profisafeStr)) != NULL) {",
          "8413:                                             break;",
          "8414:                                         }",
          "8416:                                             while(fgets(temp, MAX_LINE_LENGTH, fp) != NULL) {",
          "8417:                                                 if((strstr(temp, profisafeStr)) != NULL) {",
          "8418:                                                     io_data_object->profisafeSupported = TRUE;",
          "8420:                                                 }",
          "8422:                                                 else if((strstr(temp, \">\")) != NULL) {",
          "8423:                                                     break;",
          "8424:                                                 }",
          "8425:                                             }",
          "8426:                                         }",
          "8427:                                     }",
          "8429:                                 }",
          "8430:                             }",
          "8431:                         }",
          "8432:                     }",
          "8433:                 }",
          "8435:                 if (fclose(fp) == 0) {",
          "8437:                     fp = NULL;",
          "8438:                 }",
          "8439:             }",
          "8443:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep, io_data_object);",
          "8446:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep, io_data_object);",
          "8449:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep, io_data_object);",
          "8452:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep, io_data_object);",
          "8453:                 offset = dissect_DataDescription(tvb, offset, pinfo, sub_tree, drep, io_data_object);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8022:     proto_tree *submodule_tree;",
          "8023:     guint32     u32SubStart;",
          "8026:     if (u8BlockVersionHigh != 1 || u8BlockVersionLow != 0) {",
          "8027:         expert_add_info_format(pinfo, item, &ei_pn_io_block_version,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8496:     conversation_t    *conversation;",
          "8497:     stationInfo       *station_info;",
          "8498:     wmem_list_frame_t *frame;",
          "8499:     moduleDiffInfo    *module_diff_info;",
          "8500:     moduleDiffInfo    *cmp_module_diff_info;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8075:                 val_to_str(u16ModuleState, pn_io_module_state, \"(0x%x)\"),",
          "8076:                 u16NumberOfSubmodules);",
          "8078:             proto_item_append_text(item, \", Submodules:%u\", u16NumberOfSubmodules);",
          "8080:             while (u16NumberOfSubmodules--) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8555:             if (pinfo->fd->flags.visited == FALSE) {",
          "8557:                 conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8558:                 if (conversation == NULL) {",
          "8559:                     conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "8560:                 }",
          "8562:                 station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "8563:                 if (station_info != NULL) {",
          "8564:                     for (frame = wmem_list_head(station_info->diff_module); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "8565:                         cmp_module_diff_info = (moduleDiffInfo*)wmem_list_frame_data(frame);",
          "8566:                         if (cmp_module_diff_info->slotNr == u16SlotNr) {",
          "8568:                             break;",
          "8569:                         }",
          "8570:                     }",
          "8572:                     if (frame == NULL) {",
          "8574:                         module_diff_info = wmem_new(wmem_file_scope(), moduleDiffInfo);",
          "8575:                         module_diff_info->slotNr = u16SlotNr;",
          "8576:                         module_diff_info->modulID = u32ModuleIdentNumber;",
          "8577:                         wmem_list_append(station_info->diff_module, module_diff_info);",
          "8578:                     }",
          "8579:                 }",
          "8580:             }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9225: static int",
          "9226: dissect_ProfiSafeParameterRequest(tvbuff_t *tvb, int offset,",
          "9228: {",
          "9229:     proto_item *f_item;",
          "9230:     proto_tree *f_tree;",
          "",
          "[Removed Lines]",
          "9227:     packet_info *pinfo, proto_tree *tree, guint8 *drep)",
          "",
          "[Added Lines]",
          "9731:     packet_info *pinfo, proto_tree *tree, guint8 *drep, guint16 u16Index, wmem_list_frame_t *frame)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9236:     guint16     dst_addr;",
          "9237:     guint16     wd_time;",
          "9238:     guint16     par_crc;",
          "9239:     guint8      prm_flag1;",
          "9240:     guint8      prm_flag1_chck_seq;",
          "9241:     guint8      prm_flag1_chck_ipar;",
          "9242:     guint8      prm_flag1_sil;",
          "9243:     guint8      prm_flag1_crc_len;",
          "9244:     guint8      prm_flag1_reserved;",
          "9245:     guint8      prm_flag2;",
          "9246:     guint8      prm_flag2_reserved;",
          "9247:     guint8      prm_flag2_f_block_id;",
          "9248:     guint8      prm_flag2_f_par_version;",
          "9250:     f_item = proto_tree_add_item(tree, hf_pn_io_block, tvb, offset, 0, ENC_NA);",
          "9251:     f_tree = proto_item_add_subtree(f_item, ett_pn_io_profisafe_f_parameter);",
          "9252:     proto_item_set_text(f_item, \"F-Parameter: \");",
          "9256:     flags1_tree = proto_item_add_subtree(flags1_item, ett_pn_io_profisafe_f_parameter_prm_flag1);",
          "9258:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9260:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9262:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9264:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9266:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9269:     offset++;",
          "9272:     flags2_tree = proto_item_add_subtree(flags2_item, ett_pn_io_profisafe_f_parameter_prm_flag2);",
          "9274:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags2_tree, drep,",
          "9276:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags2_tree, drep,",
          "9278:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags2_tree, drep,",
          "9280:     prm_flag2 = prm_flag2_reserved|prm_flag2_f_block_id|prm_flag2_f_par_version;",
          "9281:     offset++;",
          "9283:     offset = dissect_dcerpc_uint16(tvb, offset, pinfo, f_item, drep,",
          "9285:     offset = dissect_dcerpc_uint16(tvb, offset, pinfo, f_item, drep,",
          "9287:     offset = dissect_dcerpc_uint16(tvb, offset, pinfo, f_item, drep,",
          "9289:     offset = dissect_dcerpc_uint16(tvb, offset, pinfo, f_item, drep,",
          "9300:     return offset;",
          "9301: }",
          "9302: static int",
          "9303: dissect_RecordDataWrite(tvbuff_t *tvb, int offset,",
          "9304:     packet_info *pinfo, proto_tree *tree, guint8 *drep, guint16 u16Index, guint32 u32RecDataLen)",
          "9305: {",
          "9306:     const gchar *userProfile;",
          "9307:     pnio_ar_t   *ar = NULL;",
          "9312:     }",
          "",
          "[Removed Lines]",
          "9255:     flags1_item = proto_tree_add_item(f_tree, hf_pn_io_profisafe_f_prm_flag1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9259:         hf_pn_io_profisafe_f_prm_flag1_chck_seq, &prm_flag1_chck_seq);",
          "9261:         hf_pn_io_profisafe_f_prm_flag1_chck_ipar, &prm_flag1_chck_ipar);",
          "9263:         hf_pn_io_profisafe_f_prm_flag1_sil, &prm_flag1_sil);",
          "9265:         hf_pn_io_profisafe_f_prm_flag1_crc_len, &prm_flag1_crc_len);",
          "9267:         hf_pn_io_profisafe_f_prm_flag1_reserved, &prm_flag1_reserved);",
          "9268:     prm_flag1 = prm_flag1_chck_seq|prm_flag1_chck_ipar|prm_flag1_sil|prm_flag1_reserved;",
          "9271:     flags2_item = proto_tree_add_item(f_tree, hf_pn_io_profisafe_f_prm_flag2, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9275:         hf_pn_io_profisafe_f_prm_flag2_reserved, &prm_flag2_reserved);",
          "9277:         hf_pn_io_profisafe_f_prm_flag2_f_block_id, &prm_flag2_f_block_id);",
          "9279:         hf_pn_io_profisafe_f_prm_flag2_f_par_version, &prm_flag2_f_par_version);",
          "9284:                     hf_pn_io_profisafe_f_src_addr, &src_addr);",
          "9286:                     hf_pn_io_profisafe_f_dst_addr, &dst_addr);",
          "9288:                     hf_pn_io_profisafe_f_wd_time, &wd_time);",
          "9290:                     hf_pn_io_profisafe_f_par_crc, &par_crc);",
          "9292:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "9293:                     \", F-Parameter record, prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x,\"",
          "9294:                      \" dst:0x%04x, wd_time:%d, crc:0x%04x\",",
          "9295:                     prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, par_crc);",
          "9297:     proto_item_append_text(f_item, \"prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x, dst:0x%04x, wd_time:%d, crc:0x%04x\",",
          "9298:             prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, par_crc);",
          "9310:     if (u16Index == 0x0100) {",
          "9311:         return dissect_ProfiSafeParameterRequest(tvb, offset, pinfo, tree, drep);",
          "",
          "[Added Lines]",
          "9743:     guint32     ipar_crc;",
          "9749:     guint8      prm_flag1_crc_seed;",
          "9756:     conversation_t    *conversation;",
          "9757:     stationInfo       *station_info;",
          "9758:     ioDataObject      *io_data_object;",
          "9759:     wmem_list_frame_t *frame_out;",
          "9765:     flags1_item = proto_tree_add_item(f_tree, hf_pn_io_ps_f_prm_flag1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9769:     dissect_dcerpc_uint8(tvb, offset, pinfo, flags1_tree, drep,",
          "9770:         hf_pn_io_ps_f_prm_flag1_chck_seq, &prm_flag1_chck_seq);",
          "9772:         hf_pn_io_ps_f_prm_flag1_chck_ipar, &prm_flag1_chck_ipar);",
          "9774:         hf_pn_io_ps_f_prm_flag1_sil, &prm_flag1_sil);",
          "9776:         hf_pn_io_ps_f_prm_flag1_crc_len, &prm_flag1_crc_len);",
          "9778:         hf_pn_io_ps_f_prm_flag1_crc_seed, &prm_flag1_crc_seed);",
          "9780:         hf_pn_io_ps_f_prm_flag1_reserved, &prm_flag1_reserved);",
          "9781:     prm_flag1 = prm_flag1_chck_seq|prm_flag1_chck_ipar|prm_flag1_sil|prm_flag1_crc_len|prm_flag1_crc_seed|prm_flag1_reserved;",
          "9784:     flags2_item = proto_tree_add_item(f_tree, hf_pn_io_ps_f_prm_flag2, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "9789:         hf_pn_io_ps_f_prm_flag2_reserved, &prm_flag2_reserved);",
          "9791:         hf_pn_io_ps_f_prm_flag2_f_block_id, &prm_flag2_f_block_id);",
          "9793:         hf_pn_io_ps_f_prm_flag2_f_par_version, &prm_flag2_f_par_version);",
          "9798:                     hf_pn_io_ps_f_src_adr, &src_addr);",
          "9800:                     hf_pn_io_ps_f_dest_adr, &dst_addr);",
          "9802:                     hf_pn_io_ps_f_wd_time, &wd_time);",
          "9805:     if( ((prm_flag2_f_block_id & 0x08)>>3) == TRUE && ((prm_flag2_f_block_id & 0x20)>>5) == FALSE ) {",
          "9806:         offset = dissect_dcerpc_uint32(tvb, offset, pinfo, f_item, drep,",
          "9807:                         hf_pn_io_ps_f_ipar_crc, &ipar_crc);",
          "9808:     }",
          "9811:                     hf_pn_io_ps_f_par_crc, &par_crc);",
          "9816:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "9817:                         \", F-Parameter record, prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x,\"",
          "9818:                          \" dst:0x%04x, wd_time:%d, ipar_crc:0x%04x, crc:0x%04x\",",
          "9819:                         prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, ipar_crc, par_crc);",
          "9821:         proto_item_append_text(f_item, \"prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x, dst:0x%04x, wd_time:%d, ipar_crc:0x%04x, par_crc:0x%04x\",",
          "9822:                 prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, ipar_crc, par_crc);",
          "9823:     }",
          "9825:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "9826:                         \", F-Parameter record, prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x,\"",
          "9827:                          \" dst:0x%04x, wd_time:%d, crc:0x%04x\",",
          "9828:                         prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, par_crc);",
          "9830:         proto_item_append_text(f_item, \"prm_flag1:0x%02x, prm_flag2:0x%02x, src:0x%04x, dst:0x%04x, wd_time:%d, par_crc:0x%04x\",",
          "9831:                 prm_flag1, prm_flag2, src_addr, dst_addr, wd_time, par_crc);",
          "9832:     }",
          "9834:     if (pinfo->fd->flags.visited == FALSE) {",
          "9836:         conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "9837:         if (conversation == NULL) {",
          "9838:             conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "9839:         }",
          "9841:         station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "9842:         if (station_info != NULL) {",
          "9843:             if (frame != NULL) {",
          "9844:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "9846:                 io_data_object->f_par_crc1 = par_crc;",
          "9847:                 io_data_object->f_src_adr = src_addr;",
          "9848:                 io_data_object->f_dest_adr = dst_addr;",
          "9849:                 io_data_object->f_crc_seed = prm_flag1 & 0x40;",
          "9850:                 if ((prm_flag1 & 0x10) == FALSE && (prm_flag1 & 0x20) == FALSE) {",
          "9851:                     io_data_object->f_crc_len = 3;",
          "9852:                 }",
          "9853:                 if ((prm_flag1 & 0x10) == FALSE && (prm_flag1 & 0x20) == TRUE) {",
          "9854:                     io_data_object->f_crc_len = 4;",
          "9855:                 }",
          "9856:             }",
          "9859:             for (frame_out = wmem_list_head(station_info->ioobject_data_out); frame_out != NULL; frame_out = wmem_list_frame_next(frame_out)) {",
          "9860:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame_out);",
          "9865:                     io_data_object->f_par_crc1 = par_crc;",
          "9866:                     io_data_object->f_src_adr = src_addr;",
          "9867:                     io_data_object->f_dest_adr = dst_addr;",
          "9868:                     io_data_object->f_crc_seed = prm_flag1 & 0x40;",
          "9869:                     if ((prm_flag1 & 0x10) == FALSE && (prm_flag1 & 0x20) == FALSE) {",
          "9870:                         io_data_object->f_crc_len = 3;",
          "9871:                     }",
          "9872:                     if ((prm_flag1 & 0x10) == FALSE && (prm_flag1 & 0x20) == TRUE) {",
          "9873:                         io_data_object->f_crc_len = 4;",
          "9874:                     }",
          "9876:                     break;",
          "9877:                 }",
          "9878:             }",
          "9879:         }",
          "9880:     }",
          "9889:     conversation_t    *conversation;",
          "9890:     stationInfo       *station_info;",
          "9891:     wmem_list_frame_t *frame;",
          "9892:     ioDataObject      *io_data_object;",
          "9899:     conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "9900:     if (conversation == NULL) {",
          "9901:         conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "9902:     }",
          "9904:     station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "9905:     if (station_info != NULL) {",
          "9906:         if (pinfo->fd->flags.visited == FALSE) {",
          "9908:             for (frame = wmem_list_head(station_info->ioobject_data_in); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "9909:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "9914:                     return dissect_ProfiSafeParameterRequest(tvb, offset, pinfo, tree, drep, u16Index, frame);",
          "9915:                 }",
          "9916:             }",
          "9917:         }",
          "9918:         else {",
          "9923:             for (frame = wmem_list_head(station_info->ioobject_data_in); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "9924:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "9928:                     return dissect_ProfiSafeParameterRequest(tvb, offset, pinfo, tree, drep, u16Index, frame);",
          "9929:                 }",
          "9930:             }",
          "9932:             for (frame = wmem_list_head(station_info->ioobject_data_out); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "9933:                 io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "9937:                     return dissect_ProfiSafeParameterRequest(tvb, offset, pinfo, tree, drep, u16Index, frame);",
          "9938:                 }",
          "9939:             }",
          "9940:         }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "9494: dissect_PNIO_C_SDU(tvbuff_t *tvb, int offset,",
          "9495:     packet_info *pinfo, proto_tree *tree, guint8 *drep _U_)",
          "9496: {",
          "9502:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PNIO\");",
          "9504:     if (tree) {",
          "9505:         proto_item *data_item;",
          "9506:         data_item = proto_tree_add_protocol_format(tree, proto_pn_io, tvb, offset, tvb_captured_length(tvb),",
          "9508:         data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
          "9509:     }",
          "",
          "[Removed Lines]",
          "9497:     proto_tree *data_tree = NULL;",
          "9507:                     \"PROFINET IO Cyclic Service Data Unit: %u bytes\", tvb_captured_length(tvb));",
          "",
          "[Added Lines]",
          "10126:     proto_tree  *data_tree = NULL;",
          "10135:             \"PROFINET IO Cyclic Service Data Unit: %u bytes\", tvb_captured_length(tvb));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "9521:     offset = dissect_pn_user_data(tvb, offset, pinfo, tree, tvb_captured_length_remaining(tvb, offset),",
          "9525:     return offset;",
          "9526: }",
          "",
          "[Removed Lines]",
          "9522:                                   \"User Data (including GAP and RTCPadding)\");",
          "",
          "[Added Lines]",
          "10150:         \"User Data (including GAP and RTCPadding)\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9655:         dissect_PNIO_C_SDU(tvb, 0, pinfo, tree, drep);",
          "9656:         return TRUE;",
          "9657:     }",
          "9668:         dissect_PNIO_C_SDU(tvb, 0, pinfo, tree, drep);",
          "9669:         return TRUE;",
          "9670:     }",
          "",
          "[Removed Lines]",
          "9662:     if ((",
          "9667:         && u8CBAVersion != 0x11) {",
          "",
          "[Added Lines]",
          "10289:     if (u16FrameID >= 0x1000 && u16FrameID <= 0x7fff && u8CBAVersion != 0x11) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "9675:     if (u16FrameID >= 0xc000 && u16FrameID < 0xfbff && u8CBAVersion != 0x11) {",
          "9677:         return TRUE;",
          "9678:     }",
          "",
          "[Removed Lines]",
          "9676:         dissect_PNIO_C_SDU(tvb, 0, pinfo, tree, drep);",
          "",
          "[Added Lines]",
          "10297:     if (u16FrameID >= 0x8000 && u16FrameID < 0xbfff && u8CBAVersion != 0x11) {",
          "10298:         dissect_PNIO_C_SDU_RTC1(tvb, 0, pinfo, tree, drep);",
          "10299:         return TRUE;",
          "10300:     }",
          "10306:         dissect_PNIO_C_SDU_RTC1(tvb, 0, pinfo, tree, drep);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "10260:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "10261:         NULL, HFILL }",
          "10262:     },",
          "10268:     { &hf_pn_io_number_of_iocs,",
          "10269:       { \"NumberOfIOCS\", \"pn_io.number_of_iocs\",",
          "10270:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "10263:     { &hf_pn_io_io_data_object_frame_offset,",
          "10264:       { \"IODataObjectFrameOffset\", \"pn_io.io_data_object_frame_offset\",",
          "10265:         FT_UINT16, BASE_DEC_HEX, NULL, 0x0,",
          "10266:         NULL, HFILL }",
          "10267:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "10355:         FT_NONE, BASE_NONE, NULL, 0x0,",
          "10356:         NULL, HFILL }",
          "10357:     },",
          "10358:     { &hf_pn_io_io_cs,",
          "10359:       { \"IOCS\", \"pn_io.io_cs\",",
          "10360:         FT_NONE, BASE_NONE, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10983:     { &hf_pn_io_io_data_object_frame_offset,",
          "10984:         { \"IODataObjectFrameOffset\", \"pn_io.io_data_object.frame_offset\",",
          "10985:         FT_UINT16, BASE_DEC_HEX, NULL, 0x0,",
          "10986:         NULL, HFILL }",
          "10987:     },",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "12070:         FT_UINT16, BASE_HEX, NULL, 0x0001,",
          "12071:         NULL, HFILL }",
          "12072:     },",
          "12077:         FT_UINT8, BASE_HEX, NULL, 0x0,",
          "12078:         NULL, HFILL }",
          "12079:     },",
          "12082:         FT_UINT8, BASE_HEX, VALS(pn_io_f_check_seqnr), 0x01,",
          "12083:         NULL, HFILL }",
          "12084:     },",
          "12087:         FT_UINT8, BASE_HEX, VALS(pn_io_f_check_ipar), 0x02,",
          "12088:         NULL, HFILL }",
          "12089:     },",
          "12092:         FT_UINT8, BASE_HEX, VALS(pn_io_f_sil), 0xc,",
          "12093:         NULL, HFILL }",
          "12094:     },",
          "12097:         FT_UINT8, BASE_HEX, VALS(pn_io_f_crc_len), 0x30,",
          "12098:         NULL, HFILL }",
          "12099:     },",
          "12103:         NULL, HFILL }",
          "12104:     },",
          "12107:         FT_UINT8, BASE_HEX, NULL, 0x0,",
          "12108:         NULL, HFILL }",
          "12109:     },",
          "12112:         FT_UINT8, BASE_HEX, NULL, 0x07,",
          "12113:         NULL, HFILL }",
          "12114:     },",
          "12117:         FT_UINT8, BASE_HEX, VALS(pn_io_f_block_id), 0x38,",
          "12118:         NULL, HFILL }",
          "12119:     },",
          "12122:         FT_UINT8, BASE_HEX, VALS(pn_io_f_par_version), 0xC0,",
          "12123:         NULL, HFILL }",
          "12124:     },",
          "12133:         NULL, HFILL }",
          "12134:     },",
          "12137:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "12138:         NULL, HFILL }",
          "12139:     },",
          "12143:         NULL, HFILL }",
          "12144:     },",
          "",
          "[Removed Lines]",
          "12075:     { &hf_pn_io_profisafe_f_prm_flag1,",
          "12076:       { \"F_Prm_Flag1\", \"pn_io.profisafe.f_prm_flag1\",",
          "12080:     { &hf_pn_io_profisafe_f_prm_flag1_chck_seq,",
          "12081:       { \"F_Check_SeqNr\", \"pn_io.profisafe.f_prm_flag1.f_check_seqnr\",",
          "12085:     { &hf_pn_io_profisafe_f_prm_flag1_chck_ipar,",
          "12086:       { \"F_Check_iPar\", \"pn_io.profisafe.f_prm_flag1.f_check_ipar\",",
          "12090:     { &hf_pn_io_profisafe_f_prm_flag1_sil,",
          "12091:       { \"F_SIL\", \"pn_io.profisafe.f_prm_flag1.f_sil\",",
          "12095:     { &hf_pn_io_profisafe_f_prm_flag1_crc_len,",
          "12096:       { \"F_CRC_Length\", \"pn_io.profisafe.f_prm_flag1.f_crc_len\",",
          "12100:     { &hf_pn_io_profisafe_f_prm_flag1_reserved,",
          "12101:       { \"Reserved\", \"pn_io.profisafe.f_prm_flag1.reserved\",",
          "12102:         FT_UINT8, BASE_HEX, NULL, 0xC0,",
          "12105:     { &hf_pn_io_profisafe_f_prm_flag2,",
          "12106:       { \"F_Prm_Flag2\", \"pn_io.profisafe.f_prm_flag2\",",
          "12110:     { &hf_pn_io_profisafe_f_prm_flag2_reserved,",
          "12111:       { \"Reserved\", \"pn_io.profisafe.f_prm_flag2.reserved\",",
          "12115:     { &hf_pn_io_profisafe_f_prm_flag2_f_block_id,",
          "12116:       { \"F_BlockId\", \"pn_io.profisafe.f_prm_flag2.f_block_id\",",
          "12120:     { &hf_pn_io_profisafe_f_prm_flag2_f_par_version,",
          "12121:       { \"F_ParVersion\", \"pn_io.profisafe.f_prm_flag2.f_par_version\",",
          "12125:       { &hf_pn_io_profisafe_f_src_addr,",
          "12126:         { \"F_Source_Address\", \"pn_io.profisafe.f_src_addr\",",
          "12127:           FT_UINT16, BASE_HEX, NULL, 0x0,",
          "12128:           NULL, HFILL }",
          "12129:       },",
          "12130:     { &hf_pn_io_profisafe_f_dst_addr,",
          "12131:       { \"F_Destination_Address\", \"pn_io.profisafe.f_dst_addr\",",
          "12132:         FT_UINT16, BASE_HEX, NULL, 0x0,",
          "12135:     { &hf_pn_io_profisafe_f_wd_time,",
          "12136:       { \"F_WD_Time\", \"pn_io.profisafe.f_wd_time\",",
          "12140:     { &hf_pn_io_profisafe_f_par_crc,",
          "12141:       { \"F_Par_CRC\", \"pn_io.profisafe.f_par_crc\",",
          "12142:         FT_UINT16, BASE_HEX, NULL, 0x0,",
          "",
          "[Added Lines]",
          "12704:     { &hf_pn_io_ps_f_prm_flag1,",
          "12705:       { \"F_Prm_Flag1\", \"pn_io.ps.f_prm_flag1\",",
          "12709:     { &hf_pn_io_ps_f_prm_flag1_chck_seq,",
          "12710:       { \"F_Check_SeqNr\", \"pn_io.ps.f_prm_flag1.f_check_seqnr\",",
          "12714:     { &hf_pn_io_ps_f_prm_flag1_chck_ipar,",
          "12715:       { \"F_Check_iPar\", \"pn_io.ps.f_prm_flag1.f_check_ipar\",",
          "12719:     { &hf_pn_io_ps_f_prm_flag1_sil,",
          "12720:       { \"F_SIL\", \"pn_io.ps.f_prm_flag1.f_sil\",",
          "12724:     { &hf_pn_io_ps_f_prm_flag1_crc_len,",
          "12725:       { \"F_CRC_Length\", \"pn_io.ps.f_prm_flag1.f_crc_len\",",
          "12729:     { &hf_pn_io_ps_f_prm_flag1_crc_seed,",
          "12730:         { \"F_CRC_Seed\", \"pn_io.ps.f_prm_flag1.f_crc_seed\",",
          "12731:         FT_UINT8, BASE_HEX, VALS(pn_io_f_crc_seed), 0x40,",
          "12734:     { &hf_pn_io_ps_f_prm_flag1_reserved,",
          "12735:       { \"Reserved\", \"pn_io.ps.f_prm_flag1.reserved\",",
          "12736:         FT_UINT8, BASE_HEX, NULL, 0x80,",
          "12737:         NULL, HFILL }",
          "12738:     },",
          "12739:     { &hf_pn_io_ps_f_prm_flag2,",
          "12740:       { \"F_Prm_Flag2\", \"pn_io.ps.f_prm_flag2\",",
          "12744:     { &hf_pn_io_ps_f_prm_flag2_reserved,",
          "12745:       { \"Reserved\", \"pn_io.ps.f_prm_flag2.reserved\",",
          "12749:     { &hf_pn_io_ps_f_prm_flag2_f_block_id,",
          "12750:       { \"F_Block_ID\", \"pn_io.ps.f_prm_flag2.f_block_id\",",
          "12754:     { &hf_pn_io_ps_f_prm_flag2_f_par_version,",
          "12755:       { \"F_Par_Version\", \"pn_io.ps.f_prm_flag2.f_par_version\",",
          "12759:     { &hf_pn_io_ps_f_wd_time,",
          "12760:       { \"F_WD_Time\", \"pn_io.ps.f_wd_time\",",
          "12761:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "12762:         NULL, HFILL }",
          "12763:     },",
          "12764:     { &hf_pn_io_ps_f_ipar_crc,",
          "12765:         { \"F_iPar_CRC\", \"pn_io.ps.f_ipar_crc\",",
          "12766:         FT_UINT32, BASE_DEC, NULL, 0x0,",
          "12769:     { &hf_pn_io_ps_f_par_crc,",
          "12770:         { \"F_Par_CRC\", \"pn_io.ps.f_par_crc\",",
          "12774:     { &hf_pn_io_ps_f_dest_adr,",
          "12775:         { \"F_Dest_Add\", \"pn_io.ps.f_dest_add\",",
          "12776:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "12777:         NULL, HFILL }",
          "12778:     },",
          "12779:     { &hf_pn_io_ps_f_src_adr,",
          "12780:         { \"F_Source_Add\", \"pn_io.ps.f_source_add\",",
          "12781:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "12290:         { &ei_pn_io_nr_of_tx_port_groups, { \"pn_io.nr_of_tx_port_groups.not_allowed\", PI_PROTOCOL, PI_WARN, \"Not allowed value of NumberOfTxPortGroups\", EXPFILL }},",
          "12291:     };",
          "12293:     expert_module_t* expert_pn_io;",
          "12295:     proto_pn_io = proto_register_protocol (\"PROFINET IO\", \"PNIO\", \"pn_io\");",
          "12298:     proto_pn_io_controller = proto_register_protocol (\"PROFINET IO (Controller)\", \"PNIO (Controller)\", \"pn_io_controller\");",
          "12299:     proto_pn_io_supervisor = proto_register_protocol (\"PROFINET IO (Supervisor)\", \"PNIO (Supervisor)\", \"pn_io_supervisor\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12932:     module_t *pnio_module;",
          "12938:     register_dissector(\"pnio\", dissect_PNIO_heur, proto_pn_io);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "12304:     expert_pn_io = expert_register_protocol(proto_pn_io);",
          "12305:     expert_register_field_array(expert_pn_io, ei, array_length(ei));",
          "12308:     register_dissector(\"pn_io\", dissect_PNIO_heur, proto_pn_io);",
          "12309:     heur_pn_subdissector_list = register_heur_dissector_list(\"pn_io\", proto_pn_io);",
          "12311:     register_cleanup_routine(pnio_cleanup);",
          "12313:     register_conversation_filter(\"pn_io\", \"PN-IO AR\", pn_io_ar_conv_valid, pn_io_ar_conv_filter);",
          "12314:     register_conversation_filter(\"pn_io\", \"PN-IO AR (with data)\", pn_io_ar_conv_valid, pn_io_ar_conv_data_filter);",
          "12315: }",
          "12317: void",
          "12318: proto_reg_handoff_pn_io (void)",
          "12319: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12951:     pnio_module = prefs_register_protocol(proto_pn_io, NULL);",
          "12952:     prefs_register_bool_preference(pnio_module, \"pnio_ps_selection\",",
          "12953:         \"Enable detailed PROFIsafe dissection\",",
          "12954:         \"Whether the PNIO dissector is allowed to use detailed PROFIsafe dissection of cyclic data frames\",",
          "12955:         &pnio_ps_selection);",
          "12956:     prefs_register_directory_preference(pnio_module, \"pnio_ps_networkpath\",",
          "12966:     init_pn_io_rtc1(proto_pn_io);",
          "",
          "---------------"
        ],
        "plugins/profinet/packet-pn-dcp.c||plugins/profinet/packet-pn-dcp.c": [
          "File: plugins/profinet/packet-pn-dcp.c -> plugins/profinet/packet-pn-dcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"config.h\"",
          "26: #include <string.h>",
          "28: #include <epan/packet.h>",
          "29: #include <epan/exceptions.h>",
          "30: #include <epan/to_str.h>",
          "31: #include <epan/expert.h>",
          "34: #include \"packet-pn.h\"",
          "36: void proto_register_pn_dcp(void);",
          "37: void proto_reg_handoff_pn_dcp(void);",
          "41: static int hf_pn_dcp_service_id = -1;",
          "42: static int hf_pn_dcp_service_type = -1;",
          "",
          "[Removed Lines]",
          "32: #include <epan/dissectors/packet-dcerpc.h>",
          "39: static int proto_pn_dcp = -1;",
          "",
          "[Added Lines]",
          "44: #include <glib.h>",
          "49: #include <epan/wmem/wmem.h>",
          "51: #include <epan/conversation.h>",
          "59: int proto_pn_dcp = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:     guint8    device_instance_low;",
          "484:     guint16   oem_vendor_id;",
          "485:     guint16   oem_device_id;",
          "489:     offset = dissect_pn_uint8(tvb, offset, pinfo, tree, hf_pn_dcp_suboption_device, &suboption);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:     conversation_t    *conversation;",
          "506:     stationInfo       *station_info;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "523:                                    val_to_str(block_info, pn_dcp_block_info, \"Unknown\"));",
          "524:         }",
          "525:         proto_item_append_text(block_item, \", DeviceVendorValue: \\\"%s\\\"\", typeofstation);",
          "526:         offset += block_length;",
          "527:         break;",
          "528:     case PNDCP_SUBOPTION_DEVICE_NAMEOFSTATION:",
          "529:         nameofstation = (char *)wmem_alloc(wmem_packet_scope(), block_length+1);",
          "530:         tvb_memcpy(tvb, (guint8 *) nameofstation, offset, block_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:         if (pinfo->fd->flags.visited == FALSE) {",
          "550:             conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "551:             if (conversation == NULL) {",
          "552:                 conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "553:             }",
          "555:             station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "556:             if (station_info == NULL) {",
          "557:                 station_info = wmem_new0(wmem_file_scope(), stationInfo);",
          "558:                 init_pnio_rtc1_station(station_info);",
          "559:                 conversation_add_proto_data(conversation, proto_pn_dcp, station_info);",
          "560:             }",
          "562:             station_info->typeofstation = wmem_strdup(wmem_file_scope(), typeofstation);",
          "563:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "541:                                    val_to_str(block_info, pn_dcp_block_info, \"Unknown\"));",
          "542:         }",
          "543:         proto_item_append_text(block_item, \", \\\"%s\\\"\", nameofstation);",
          "544:         offset += block_length;",
          "545:         break;",
          "546:     case PNDCP_SUBOPTION_DEVICE_DEV_ID:",
          "547:         offset = dissect_pn_uint16(tvb, offset, pinfo, tree, hf_pn_dcp_suboption_vendor_id, &vendor_id);",
          "548:         offset = dissect_pn_uint16(tvb, offset, pinfo, tree, hf_pn_dcp_suboption_device_id, &device_id);",
          "549:         pn_append_info(pinfo, dcp_item, \", Dev-ID\");",
          "550:         proto_item_append_text(block_item, \"Device/Device ID\");",
          "551:         if (have_block_qualifier) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:         if (pinfo->fd->flags.visited == FALSE) {",
          "588:             conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "589:             if (conversation == NULL) {",
          "590:                 conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "591:             }",
          "593:             station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "594:             if (station_info == NULL) {",
          "595:                 station_info = wmem_new0(wmem_file_scope(), stationInfo);",
          "596:                 init_pnio_rtc1_station(station_info);",
          "597:                 conversation_add_proto_data(conversation, proto_pn_dcp, station_info);",
          "598:             }",
          "600:             station_info->nameofstation = wmem_strdup(wmem_file_scope(), nameofstation);",
          "601:         }",
          "610:         if (pinfo->fd->flags.visited == FALSE) {",
          "612:             conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "613:             if (conversation == NULL) {",
          "614:                 conversation = conversation_new(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "615:             }",
          "617:             station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "618:             if (station_info == NULL) {",
          "619:                 station_info = wmem_new0(wmem_file_scope(), stationInfo);",
          "620:                 init_pnio_rtc1_station(station_info);",
          "621:                 conversation_add_proto_data(conversation, proto_pn_dcp, station_info);",
          "622:             }",
          "624:             station_info->u16Vendor_id = vendor_id;",
          "625:             station_info->u16Device_id = device_id;",
          "626:         }",
          "",
          "---------------"
        ],
        "plugins/profinet/packet-pn-rtc-one.c||plugins/profinet/packet-pn-rtc-one.c": [
          "File: plugins/profinet/packet-pn-rtc-one.c -> plugins/profinet/packet-pn-rtc-one.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: #include \"config.h\"",
          "68: #include <stdio.h>",
          "69: #include <string.h>",
          "70: #include <glib.h>",
          "71: #include <epan/packet.h>",
          "72: #include <epan/dissectors/packet-dcerpc.h>",
          "73: #include <epan/proto.h>",
          "75: #include \"packet-pn.h\"",
          "84: static int proto_pn_io_rtc1 = -1;",
          "87: static int hf_pn_io_frame_info_type = -1;",
          "88: static int hf_pn_io_frame_info_vendor = -1;",
          "89: static int hf_pn_io_frame_info_nameofstation = -1;",
          "90: static int hf_pn_io_frame_info_gsd_found = -1;",
          "91: static int hf_pn_io_frame_info_gsd_error = -1;",
          "92: static int hf_pn_io_frame_info_gsd_path = -1;",
          "93: static int hf_pn_io_io_data_object = -1;",
          "94: static int hf_pn_io_io_data_object_info_module_diff = -1;",
          "95: static int hf_pn_io_io_data_object_info_moduleidentnumber = -1;",
          "96: static int hf_pn_io_io_data_object_info_submoduleidentnumber = -1;",
          "98: static int hf_pn_io_iocs = -1;",
          "99: static int hf_pn_io_iops = -1;",
          "100: static int hf_pn_io_ioxs_extension = -1;",
          "101: static int hf_pn_io_ioxs_res14 = -1;",
          "102: static int hf_pn_io_ioxs_instance = -1;",
          "103: static int hf_pn_io_ioxs_datastate = -1;",
          "106: static int hf_pn_io_ps_sb = -1;",
          "107: static int hf_pn_io_ps_sb_iparOK = -1;",
          "108: static int hf_pn_io_ps_sb_DeviceFault = -1;",
          "109: static int hf_pn_io_ps_sb_CECRC = -1;",
          "110: static int hf_pn_io_ps_sb_WDtimeout = -1;",
          "111: static int hf_pn_io_ps_sb_FVactivated = -1;",
          "112: static int hf_pn_io_ps_sb_Toggle_d = -1;",
          "113: static int hf_pn_io_ps_sb_ConsNr_reset = -1;",
          "114: static int hf_pn_io_ps_sb_res = -1;",
          "115: static int hf_pn_io_ps_sb_toggelBitChanged = -1;",
          "116: static int hf_pn_io_ps_sb_toggelBitChange_slot_nr = -1;",
          "117: static int hf_pn_io_ps_sb_toggelBitChange_subslot_nr = -1;",
          "119: static int hf_pn_io_ps_cb = -1;",
          "120: static int hf_pn_io_ps_cb_iparEN = -1;",
          "121: static int hf_pn_io_ps_cb_OAReq = -1;",
          "122: static int hf_pn_io_ps_cb_resetConsNr = -1;",
          "123: static int hf_pn_io_ps_cb_useTO2 = -1;",
          "124: static int hf_pn_io_ps_cb_activateFV = -1;",
          "125: static int hf_pn_io_ps_cb_Toggle_h = -1;",
          "126: static int hf_pn_io_ps_cb_Chf_ACK = -1;",
          "127: static int hf_pn_io_ps_cb_loopcheck = -1;",
          "128: static int hf_pn_io_ps_cb_toggelBitChanged = -1;",
          "129: static int hf_pn_io_ps_cb_toggelBitChange_slot_nr = -1;",
          "130: static int hf_pn_io_ps_cb_toggelBitChange_subslot_nr = -1;",
          "133: static int hf_pn_io_ps_f_dest_adr = -1;",
          "134: static int hf_pn_io_ps_f_data = -1;",
          "136: static gint ett_pn_io_rtc = -1;",
          "137: static gint ett_pn_io_ioxs = -1;",
          "138: static gint ett_pn_io_io_data_object = -1;",
          "141: static const value_string pn_io_ioxs_extension[] = {",
          "142:     { 0x00 /*  0*/, \"No IOxS octet follows\" },",
          "143:     { 0x01 /*  1*/, \"One more IOxS octet follows\" },",
          "144:     { 0, NULL }",
          "145: };",
          "147: static const value_string pn_io_ioxs_instance[] = {",
          "148:     { 0x00 /*  0*/, \"Detected by subslot\" },",
          "149:     { 0x01 /*  1*/, \"Detected by slot\" },",
          "150:     { 0x02 /*  2*/, \"Detected by IO device\" },",
          "151:     { 0x03 /*  3*/, \"Detected by IO controller\" },",
          "152:     { 0, NULL }",
          "153: };",
          "155: static const value_string pn_io_ioxs_datastate[] = {",
          "156:     { 0x00 /*  0*/, \"Bad\" },",
          "157:     { 0x01 /*  1*/, \"Good\" },",
          "158:     { 0, NULL }",
          "159: };",
          "162: static const int *ps_sb_fields[] = {",
          "163:     &hf_pn_io_ps_sb_res,",
          "164:     &hf_pn_io_ps_sb_ConsNr_reset,",
          "165:     &hf_pn_io_ps_sb_Toggle_d,",
          "166:     &hf_pn_io_ps_sb_FVactivated,",
          "167:     &hf_pn_io_ps_sb_WDtimeout,",
          "168:     &hf_pn_io_ps_sb_CECRC,",
          "169:     &hf_pn_io_ps_sb_DeviceFault,",
          "170:     &hf_pn_io_ps_sb_iparOK,",
          "171:     NULL",
          "172: };",
          "174: static const int *ps_cb_fields[] = {",
          "175:     &hf_pn_io_ps_cb_loopcheck,",
          "176:     &hf_pn_io_ps_cb_Chf_ACK,",
          "177:     &hf_pn_io_ps_cb_Toggle_h,",
          "178:     &hf_pn_io_ps_cb_activateFV,",
          "179:     &hf_pn_io_ps_cb_useTO2,",
          "180:     &hf_pn_io_ps_cb_resetConsNr,",
          "181:     &hf_pn_io_ps_cb_OAReq,",
          "182:     &hf_pn_io_ps_cb_iparEN,",
          "183:     NULL",
          "184: };",
          "186: static const int *ioxs_fields[] = {",
          "187:     &hf_pn_io_ioxs_datastate,",
          "188:     &hf_pn_io_ioxs_instance,",
          "189:     &hf_pn_io_ioxs_res14,",
          "190:     &hf_pn_io_ioxs_extension,",
          "191:     NULL",
          "192: };",
          "196: static int",
          "197: dissect_pn_io_ps_SB(tvbuff_t *tvb, int offset,",
          "198: packet_info *pinfo _U_, proto_tree *tree, guint8 *drep _U_, int hfindex, const int **fields)",
          "199: {",
          "201:     if (tree) {",
          "202:         guint8     u8StatusByte;",
          "203:         proto_item *sb_item;",
          "205:         u8StatusByte = tvb_get_guint8(tvb, offset);",
          "208:         sb_item = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hfindex, ett_pn_io_ioxs, fields,",
          "209:             ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "210:         proto_item_append_text(sb_item, \" (%s)\", ((u8StatusByte == 0x20) || (u8StatusByte == 0x00)) ? \"normal\" : \"unnormal\");",
          "211:     }",
          "213:     return offset + 1;",
          "214: }",
          "218: static int",
          "219: dissect_pn_io_ps_CB(tvbuff_t *tvb, int offset,",
          "220: packet_info *pinfo _U_, proto_tree *tree, guint8 *drep _U_, int hfindex, const int **fields)",
          "221: {",
          "223:     if (tree) {",
          "224:         guint8     u8ControlByte;",
          "225:         proto_item *cb_item;",
          "227:         u8ControlByte = tvb_get_guint8(tvb, offset);",
          "230:         cb_item = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hfindex, ett_pn_io_ioxs, fields,",
          "231:             ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "232:         proto_item_append_text(cb_item, \" (%s)\", ((u8ControlByte == 0x20) || (u8ControlByte == 0x00) ||",
          "233:             (u8ControlByte == 0xa0) || (u8ControlByte == 0x80)) ? \"normal\" : \"unnormal\");",
          "234:     }",
          "236:     return offset + 1;",
          "237: }",
          "241: static int",
          "242: dissect_PNIO_IOCS(tvbuff_t *tvb, int offset, packet_info *pinfo _U_, proto_tree *tree,",
          "243:             guint8 *drep _U_, int hfindex, guint16 slotNr, guint16 subSlotNr, const int **fields)",
          "244: {",
          "246:     if (tree) {",
          "247:         guint8      u8IOxS;",
          "248:         proto_item *ioxs_item;",
          "250:         u8IOxS = tvb_get_guint8(tvb, offset);",
          "253:         ioxs_item = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hfindex,",
          "254:             ett_pn_io_ioxs, fields, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "255:         proto_item_append_text(ioxs_item,",
          "256:             \" (%s%s), Slot: 0x%x, Subslot: 0x%x\",",
          "257:             (u8IOxS & 0x01) ? \"another IOxS follows \" : \"\",",
          "258:             (u8IOxS & 0x80) ? \"good\" : \"bad\",",
          "259:             slotNr,",
          "260:             subSlotNr);",
          "261:     }",
          "263:     return offset + 1;",
          "264: }",
          "268: static int",
          "269: dissect_PNIO_IOxS(tvbuff_t *tvb, int offset,",
          "270: packet_info *pinfo _U_, proto_tree *tree, guint8 *drep _U_, int hfindex, const int **fields)",
          "271: {",
          "273:     if (tree) {",
          "274:         guint8     u8IOxS;",
          "275:         proto_item *ioxs_item;",
          "277:         u8IOxS = tvb_get_guint8(tvb, offset);",
          "280:         ioxs_item = proto_tree_add_bitmask_with_flags(tree, tvb, offset, hfindex,",
          "281:             ett_pn_io_ioxs, fields, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);",
          "282:         proto_item_append_text(ioxs_item,",
          "283:             \" (%s%s)\",",
          "284:             (u8IOxS & 0x01) ? \"another IOxS follows \" : \"\",",
          "285:             (u8IOxS & 0x80) ? \"good\" : \"bad\");",
          "286:     }",
          "288:     return offset + 1;",
          "289: }",
          "293: static int",
          "294: dissect_pn_io_ps_uint(tvbuff_t *tvb, gint offset, packet_info *pinfo _U_,",
          "295:     proto_tree *tree, guint8 *drep,",
          "296: int hfindex, guint8 bytelength, guint64 *pdata)",
          "297: {",
          "298:     guint64  data;",
          "299:     gboolean generalDissection;",
          "301:     generalDissection = FALSE;",
          "303:     switch (bytelength) {",
          "305:         data = tvb_get_guint8(tvb, offset);",
          "306:         if (pdata)",
          "308:         break;",
          "311:         data = tvb_get_letohs(tvb, offset);",
          "312:         if (pdata)",
          "314:         break;",
          "317:         data = tvb_get_letoh24(tvb, offset);",
          "318:         if (pdata)",
          "320:         break;",
          "323:         data = tvb_get_letohl(tvb, offset);",
          "324:         if (pdata)",
          "326:         break;",
          "329:         data = tvb_get_letoh40(tvb, offset);",
          "330:         if (pdata)",
          "332:         break;",
          "335:         data = tvb_get_letoh48(tvb, offset);",
          "336:         if (pdata)",
          "338:         break;",
          "341:         data = tvb_get_letoh56(tvb, offset);",
          "342:         if (pdata)",
          "344:         break;",
          "347:         data = tvb_get_letoh64(tvb, offset);",
          "348:         if (pdata)",
          "350:         break;",
          "353:         dissect_pn_user_data(tvb, offset, pinfo, tree, bytelength, \"Safety IO Data\");",
          "354:         generalDissection = TRUE;",
          "355:         break;",
          "356:     }",
          "358:     if (tree && generalDissection == FALSE) {",
          "359:         proto_tree_add_item(tree, hfindex, tvb, offset, bytelength, DREP_ENC_INTEGER(drep));",
          "360:     }",
          "362:     return offset + bytelength;",
          "363: }",
          "367: int",
          "368: dissect_PNIO_C_SDU_RTC1(tvbuff_t *tvb, int offset,",
          "369:     packet_info *pinfo, proto_tree *tree, guint8 *drep _U_)",
          "370: {",
          "371:     proto_tree  *data_tree = NULL;",
          "374:     guint16     frameOffset;",
          "375:     guint32     objectCounter;",
          "376:     gboolean    inputFlag;",
          "377:     gboolean    outputFlag;",
          "380:     proto_item *IODataObject_item;",
          "381:     proto_item *IODataObject_item_info;",
          "382:     proto_tree *IODataObject_tree;",
          "383:     proto_item *ModuleID_item;",
          "384:     proto_item *ModuleDiff_item;",
          "386:     wmem_strbuf_t *moduleName;",
          "388:     guint8  toggleBitSb;",
          "389:     guint8  toggleBitCb;",
          "390:     guint64 f_data;",
          "392:     guint8  statusbyte;",
          "393:     guint8  controlbyte;",
          "395:     guint16 number_io_data_objects_input_cr;",
          "396:     guint16 number_iocs_input_cr;",
          "397:     guint16 number_io_data_objects_output_cr;",
          "398:     guint16 number_iocs_output_cr;",
          "400:     conversation_t    *conversation;",
          "401:     stationInfo       *station_info = NULL;",
          "402:     iocsObject        *iocs_object;",
          "403:     ioDataObject      *io_data_object;",
          "404:     moduleDiffInfo    *module_diff_info;",
          "405:     wmem_list_frame_t *frame;",
          "406:     wmem_list_frame_t *frame_diff;",
          "409:     frameOffset = 0;",
          "410:     f_data = 0;",
          "411:     inputFlag = FALSE;",
          "412:     outputFlag = FALSE;",
          "413:     psInfoText = FALSE;",
          "414:     number_io_data_objects_input_cr = 0;",
          "415:     number_iocs_input_cr = 0;",
          "416:     number_io_data_objects_output_cr = 0;",
          "417:     number_iocs_output_cr = 0;",
          "421:     if (tree) {",
          "422:         proto_item *data_item;",
          "423:         data_item = proto_tree_add_protocol_format(tree, proto_pn_io_rtc1, tvb, offset, tvb_captured_length(tvb),",
          "424:             \"PROFINET IO Cyclic Service Data Unit: %u bytes\", tvb_captured_length(tvb));",
          "425:         data_tree = proto_item_add_subtree(data_item, ett_pn_io_rtc);",
          "426:     }",
          "429:     if (!(dissect_CSF_SDU_heur(tvb, pinfo, data_tree, NULL) == FALSE))",
          "430:         return(tvb_captured_length(tvb));",
          "433:     conversation = find_conversation(pinfo->num, &pinfo->dl_src, &pinfo->dl_dst, PT_NONE, 0, 0, 0);",
          "436:     if (conversation != NULL) {",
          "437:         station_info = (stationInfo*)conversation_get_proto_data(conversation, proto_pn_dcp);",
          "438:         if (station_info != NULL) {",
          "439:             if (pnio_ps_selection == TRUE) {",
          "441:             }",
          "443:             if (addresses_equal(&(pinfo->src), &(conversation->key_ptr->addr1)) && addresses_equal(&(pinfo->dst), &(conversation->key_ptr->addr2))) {",
          "444:                 inputFlag = TRUE;",
          "445:                 outputFlag = FALSE;",
          "446:                 number_io_data_objects_input_cr = station_info->ioDataObjectNr;",
          "447:                 number_iocs_input_cr = station_info->iocsNr;",
          "448:             }",
          "450:             if (addresses_equal(&(pinfo->dst), &(conversation->key_ptr->addr1)) && addresses_equal(&(pinfo->src), &(conversation->key_ptr->addr2))) {",
          "451:                 outputFlag = TRUE;",
          "452:                 inputFlag = FALSE;",
          "453:                 number_io_data_objects_output_cr = station_info->ioDataObjectNr;",
          "454:                 number_iocs_output_cr = station_info->iocsNr;",
          "455:             }",
          "456:         }",
          "457:     }",
          "460:     if (inputFlag) {",
          "461:         if (pnio_ps_selection == TRUE) {",
          "462:             proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_type, tvb,",
          "463:                 offset, 0, \"Response\", \"Response Frame (IO_Device -> IO_Controller)\");",
          "464:         }",
          "465:         else {",
          "466:             proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_type, tvb,",
          "467:                 offset, 0, \"Input\", \"Input Frame (IO_Device -> IO_Controller)\");",
          "468:         }",
          "470:         if (station_info != NULL) {",
          "471:             if (station_info->typeofstation != NULL) {",
          "472:                 proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_vendor, tvb, 0,",
          "473:                     0, station_info->typeofstation, \"\\\"%s\\\"\", station_info->typeofstation);",
          "474:             }",
          "475:             if (station_info->nameofstation != NULL) {",
          "476:                 proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_nameofstation, tvb, 0,",
          "477:                     0, station_info->nameofstation, \"\\\"%s\\\"\", station_info->nameofstation);",
          "478:             }",
          "482:                     if (station_info->gsdLocation != NULL) {",
          "483:                         IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_found, tvb, offset, 0, ENC_NA);",
          "484:                         proto_item_append_text(IODataObject_item_info, \": \\\"%s\\\"\", station_info->gsdLocation);",
          "485:                     }",
          "486:                 }",
          "487:                 else {",
          "488:                     if (station_info->gsdLocation != NULL) {",
          "489:                         IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_error, tvb, offset, 0, ENC_NA);",
          "490:                         proto_item_append_text(IODataObject_item_info, \" Please place relevant GSD-file under \\\"%s\\\"\", station_info->gsdLocation);",
          "491:                     }",
          "492:                 }",
          "493:             }",
          "494:             else {",
          "495:                 IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_path, tvb, offset, 0, ENC_NA);",
          "496:                 proto_item_append_text(IODataObject_item_info, \" Please check your GSD-file networkpath. (No Path configured)\");",
          "497:             }",
          "498:         }",
          "501:         objectCounter = number_io_data_objects_input_cr + number_iocs_input_cr;",
          "502:         while (objectCounter--) {",
          "504:             if (station_info != NULL) {",
          "505:                 for (frame = wmem_list_head(station_info->ioobject_data_in); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "506:                     io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "507:                     if (io_data_object->frameOffset == frameOffset) {",
          "510:                         IODataObject_item = proto_tree_add_item(data_tree, hf_pn_io_io_data_object, tvb, offset, 0, ENC_NA);",
          "511:                         IODataObject_tree = proto_item_add_subtree(IODataObject_item, ett_pn_io_io_data_object);",
          "514:                         for (frame_diff = wmem_list_head(station_info->diff_module); frame_diff != NULL; frame_diff = wmem_list_frame_next(frame_diff)) {",
          "515:                             module_diff_info = (moduleDiffInfo*)wmem_list_frame_data(frame_diff);",
          "516:                             if (io_data_object->moduleIdentNr != module_diff_info->modulID) {",
          "517:                                 ModuleDiff_item = proto_tree_add_item(IODataObject_tree, hf_pn_io_io_data_object_info_module_diff, tvb, 0, 0, ENC_NA);",
          "518:                                 proto_item_append_text(ModuleDiff_item, \": Device using ModuleIdentNumber 0x%08x instead of 0x%08x\", module_diff_info->modulID, io_data_object->moduleIdentNr);",
          "519:                                 break;",
          "520:                             }",
          "521:                         }",
          "523:                         proto_tree_add_uint(IODataObject_tree, hf_pn_io_io_data_object_info_moduleidentnumber, tvb, 0, 0, io_data_object->moduleIdentNr);",
          "524:                         proto_tree_add_uint(IODataObject_tree, hf_pn_io_io_data_object_info_submoduleidentnumber, tvb, 0, 0, io_data_object->subModuleIdentNr);",
          "527:                         if (io_data_object->profisafeSupported == TRUE && pnio_ps_selection == TRUE) {",
          "528:                             if (io_data_object->profisafeSupported == TRUE && psInfoText == FALSE) {",
          "531:                                 psInfoText = TRUE;",
          "532:                             }",
          "534:                             proto_tree_add_uint(IODataObject_tree, hf_pn_io_ps_f_dest_adr, tvb, 0, 0, io_data_object->f_dest_adr);",
          "537:                             if ((io_data_object->length - F_MESSAGE_TRAILER_4BYTE) > 0) {",
          "538:                                 offset = dissect_pn_io_ps_uint(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_ps_f_data,",
          "539:                                     (io_data_object->length - F_MESSAGE_TRAILER_4BYTE), &f_data);",
          "540:                             }",
          "543:                             statusbyte = tvb_get_guint8(tvb, offset);",
          "548:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_sb_toggelBitChanged, tvb, offset, 0,",
          "549:                                     toggleBitSb, \"%u\", toggleBitSb);",
          "550:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "552:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_sb_toggelBitChange_slot_nr, tvb, offset, 0,",
          "553:                                     io_data_object->slotNr, \"%u\", io_data_object->slotNr);",
          "554:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "556:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_sb_toggelBitChange_subslot_nr, tvb, offset, 0,",
          "557:                                     io_data_object->subSlotNr, \"%u\", io_data_object->subSlotNr);",
          "558:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "559:                             }",
          "561:                             offset = dissect_pn_io_ps_SB(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_ps_sb, ps_sb_fields);",
          "562:                             offset = dissect_pn_user_data(tvb, offset, pinfo, IODataObject_tree, io_data_object->f_crc_len, \"CRC\");",
          "568:                         else {",
          "570:                             offset = dissect_pn_user_data(tvb, offset, pinfo, IODataObject_tree, io_data_object->length, \"IO Data\");",
          "571:                         }",
          "573:                         if (io_data_object->discardIOXS == FALSE) {",
          "574:                             offset = dissect_PNIO_IOxS(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_iops, ioxs_fields);",
          "576:                         }",
          "577:                         else {",
          "579:                         }",
          "581:                         proto_item_append_text(IODataObject_item, \": Slot: 0x%x Subslot: 0x%x\",",
          "582:                             io_data_object->slotNr, io_data_object->subSlotNr);",
          "587:                             if (io_data_object->slotNr == 0) {",
          "588:                                 moduleName = wmem_strbuf_new(wmem_packet_scope(), \"Headstation\");",
          "589:                             }",
          "590:                             else {",
          "591:                                 moduleName = wmem_strbuf_new(wmem_packet_scope(), \"Module\");",
          "592:                             }",
          "594:                             if (io_data_object->profisafeSupported == TRUE) {",
          "597:                                     wmem_strbuf_append(moduleName, \", DI\");",
          "598:                                 }",
          "599:                                 else {",
          "600:                                     wmem_strbuf_append(moduleName, \", DO\");",
          "601:                                 }",
          "602:                             }",
          "603:                             else {",
          "605:                                 if (io_data_object->length > 0) {",
          "606:                                     wmem_strbuf_append(moduleName, \", DI\");",
          "607:                                 }",
          "608:                                 else {",
          "609:                                     wmem_strbuf_append(moduleName, \", DO\");",
          "610:                                 }",
          "611:                             }",
          "613:                             io_data_object->moduleNameStr = wmem_strdup(wmem_file_scope(), wmem_strbuf_get_str(moduleName));",
          "614:                         }",
          "616:                         proto_item_append_text(IODataObject_item, \" ModuleName: \\\"%s\\\"\", io_data_object->moduleNameStr);",
          "619:                         if (io_data_object->profisafeSupported == TRUE && pnio_ps_selection == TRUE) {",
          "620:                             (proto_item_append_text(IODataObject_item, \" (PROFIsafe Module)\"));",
          "621:                         }",
          "626:                         if (io_data_object->discardIOXS == FALSE) {",
          "628:                         }",
          "629:                     }",
          "630:                 }",
          "631:             }",
          "634:             if (station_info != NULL) {",
          "635:                 for (frame = wmem_list_head(station_info->iocs_data_in); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "636:                     iocs_object = (iocsObject*)wmem_list_frame_data(frame);",
          "637:                     if (iocs_object->frameOffset == frameOffset) {",
          "638:                         offset = dissect_PNIO_IOCS(tvb, offset, pinfo, data_tree, drep, hf_pn_io_iocs, iocs_object->slotNr,",
          "639:                             iocs_object->subSlotNr, ioxs_fields);",
          "644:                         break;",
          "645:                     }",
          "646:                 }",
          "647:             }",
          "648:         }",
          "651:         offset = dissect_pn_user_data(tvb, offset, pinfo, tree, tvb_captured_length_remaining(tvb, offset), \"GAP and RTCPadding\");",
          "655:     else if (outputFlag) {",
          "656:         if (pnio_ps_selection == TRUE) {",
          "657:             proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_type, tvb,",
          "658:                 offset, 0, \"Request\", \"Request Frame (IO_Controller -> IO_Device)\");",
          "659:         }",
          "660:         else {",
          "661:             proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_type, tvb,",
          "662:                 offset, 0, \"Output\", \"Output Frame (IO_Controller -> IO_Device)\");",
          "663:         }",
          "665:         if (station_info != NULL) {",
          "666:             if (station_info->typeofstation != NULL) {",
          "667:                 proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_vendor, tvb, 0,",
          "668:                     0, station_info->typeofstation, \"\\\"%s\\\"\", station_info->typeofstation);",
          "669:             }",
          "670:             if (station_info->nameofstation != NULL) {",
          "671:                 proto_tree_add_string_format_value(data_tree, hf_pn_io_frame_info_nameofstation, tvb, 0,",
          "672:                     0, station_info->nameofstation, \"\\\"%s\\\"\", station_info->nameofstation);",
          "673:             }",
          "677:                     if (station_info->gsdLocation != NULL) {",
          "678:                         IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_found, tvb, offset, 0, ENC_NA);",
          "679:                         proto_item_append_text(IODataObject_item_info, \": \\\"%s\\\"\", station_info->gsdLocation);",
          "680:                     }",
          "681:                 }",
          "682:                 else {",
          "683:                     if (station_info->gsdLocation != NULL) {",
          "684:                         IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_error, tvb, offset, 0, ENC_NA);",
          "685:                         proto_item_append_text(IODataObject_item_info, \" Please place relevant GSD-file under \\\"%s\\\"\", station_info->gsdLocation);",
          "686:                     }",
          "687:                 }",
          "688:             }",
          "689:             else {",
          "690:                 IODataObject_item_info = proto_tree_add_item(data_tree, hf_pn_io_frame_info_gsd_path, tvb, offset, 0, ENC_NA);",
          "691:                 proto_item_append_text(IODataObject_item_info, \" Please check your GSD-file networkpath. (No Path configured)\");",
          "692:             }",
          "693:         }",
          "696:         objectCounter = number_io_data_objects_output_cr + number_iocs_output_cr;",
          "697:         while (objectCounter--) {",
          "699:             if (station_info != NULL) {",
          "700:                 for (frame = wmem_list_head(station_info->ioobject_data_out); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "701:                     io_data_object = (ioDataObject*)wmem_list_frame_data(frame);",
          "702:                     if (io_data_object != NULL && io_data_object->frameOffset == frameOffset) {",
          "705:                         IODataObject_item = proto_tree_add_item(data_tree, hf_pn_io_io_data_object, tvb, offset, 0, ENC_NA);",
          "706:                         IODataObject_tree = proto_item_add_subtree(IODataObject_item, ett_pn_io_io_data_object);",
          "709:                         for (frame_diff = wmem_list_head(station_info->diff_module); frame_diff != NULL; frame_diff = wmem_list_frame_next(frame_diff)) {",
          "710:                             module_diff_info = (moduleDiffInfo*)wmem_list_frame_data(frame_diff);",
          "711:                             if (io_data_object->moduleIdentNr != module_diff_info->modulID) {",
          "712:                                 ModuleDiff_item = proto_tree_add_item(IODataObject_tree, hf_pn_io_io_data_object_info_module_diff, tvb, 0, 0, ENC_NA);",
          "713:                                 proto_item_append_text(ModuleDiff_item, \": Device using ModuleIdentNumber 0x%08x instead of 0x%08x\", module_diff_info->modulID, io_data_object->moduleIdentNr);",
          "714:                                 break;",
          "715:                             }",
          "716:                         }",
          "718:                         proto_tree_add_uint(IODataObject_tree, hf_pn_io_io_data_object_info_moduleidentnumber, tvb, 0, 0, io_data_object->moduleIdentNr);",
          "719:                         proto_tree_add_uint(IODataObject_tree, hf_pn_io_io_data_object_info_submoduleidentnumber, tvb, 0, 0, io_data_object->subModuleIdentNr);",
          "721:                         if (io_data_object->profisafeSupported == TRUE && pnio_ps_selection == TRUE) {",
          "722:                             if (io_data_object->profisafeSupported == TRUE && psInfoText == FALSE) {",
          "725:                                 psInfoText = TRUE;",
          "726:                             }",
          "728:                             proto_tree_add_uint(IODataObject_tree, hf_pn_io_ps_f_dest_adr, tvb, 0, 0, io_data_object->f_dest_adr);",
          "731:                             if ((io_data_object->length - F_MESSAGE_TRAILER_4BYTE) > 0) {",
          "732:                                 offset = dissect_pn_io_ps_uint(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_ps_f_data,",
          "733:                                     (io_data_object->length - F_MESSAGE_TRAILER_4BYTE), &f_data);",
          "734:                             }",
          "737:                             controlbyte = tvb_get_guint8(tvb, offset);",
          "742:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_cb_toggelBitChanged, tvb, offset, 0,",
          "743:                                     toggleBitCb, \"%u\", toggleBitCb);",
          "744:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "746:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_cb_toggelBitChange_slot_nr, tvb, offset, 0,",
          "747:                                     io_data_object->slotNr, \"%u\", io_data_object->slotNr);",
          "748:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "750:                                 ModuleID_item = proto_tree_add_uint_format_value(IODataObject_tree, hf_pn_io_ps_cb_toggelBitChange_subslot_nr, tvb, offset, 0,",
          "751:                                     io_data_object->subSlotNr, \"%u\", io_data_object->subSlotNr);",
          "752:                                 PROTO_ITEM_SET_HIDDEN(ModuleID_item);",
          "753:                             }",
          "755:                             offset = dissect_pn_io_ps_CB(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_ps_cb, ps_cb_fields);",
          "756:                             offset = dissect_pn_user_data(tvb, offset, pinfo, IODataObject_tree, io_data_object->f_crc_len, \"CRC\");",
          "761:                         else {",
          "763:                             offset = dissect_pn_user_data(tvb, offset, pinfo, IODataObject_tree, io_data_object->length, \"IO Data\");",
          "764:                         }",
          "766:                         if (io_data_object->discardIOXS == FALSE) {",
          "767:                             offset = dissect_PNIO_IOxS(tvb, offset, pinfo, IODataObject_tree, drep, hf_pn_io_iops, ioxs_fields);",
          "769:                         }",
          "770:                         else {",
          "772:                         }",
          "774:                         proto_item_append_text(IODataObject_item, \": Slot: 0x%x Subslot: 0x%x\",",
          "775:                             io_data_object->slotNr, io_data_object->subSlotNr);",
          "780:                             if (io_data_object->slotNr == 0) {",
          "781:                                 moduleName = wmem_strbuf_new(wmem_packet_scope(), \"Headstation\");",
          "782:                             }",
          "783:                             else {",
          "784:                                 moduleName = wmem_strbuf_new(wmem_packet_scope(), \"Module\");",
          "785:                             }",
          "787:                             if (io_data_object->profisafeSupported == TRUE) {",
          "790:                                     wmem_strbuf_append(moduleName, \", DO\");",
          "791:                                 }",
          "792:                                 else {",
          "793:                                     wmem_strbuf_append(moduleName, \", DI\");",
          "794:                                 }",
          "795:                             }",
          "796:                             else {",
          "798:                                 if (io_data_object->length > 0) {",
          "799:                                     wmem_strbuf_append(moduleName, \", DO\");",
          "800:                                 }",
          "801:                                 else {",
          "802:                                     wmem_strbuf_append(moduleName, \", DI\");",
          "803:                                 }",
          "804:                             }",
          "806:                             io_data_object->moduleNameStr = wmem_strdup(wmem_file_scope(), wmem_strbuf_get_str(moduleName));",
          "807:                         }",
          "809:                         proto_item_append_text(IODataObject_item, \" ModuleName: \\\"%s\\\"\", io_data_object->moduleNameStr);",
          "812:                         if (io_data_object->profisafeSupported == TRUE && pnio_ps_selection == TRUE) {",
          "813:                             proto_item_append_text(IODataObject_item, \" (PROFIsafe Module)\");",
          "814:                         }",
          "818:                         if (io_data_object->discardIOXS == FALSE) {",
          "820:                         }",
          "821:                     }",
          "822:                 }",
          "823:             }",
          "826:             if (station_info != NULL) {",
          "827:                 for (frame = wmem_list_head(station_info->iocs_data_out); frame != NULL; frame = wmem_list_frame_next(frame)) {",
          "828:                     iocs_object = (iocsObject*)wmem_list_frame_data(frame);",
          "829:                     if (iocs_object->frameOffset == frameOffset) {",
          "830:                         offset = dissect_PNIO_IOCS(tvb, offset, pinfo, data_tree, drep, hf_pn_io_iocs, iocs_object->slotNr,",
          "831:                             iocs_object->subSlotNr, ioxs_fields);",
          "836:                         break;",
          "837:                     }",
          "838:                 }",
          "839:             }",
          "840:         }",
          "843:         offset = dissect_pn_user_data(tvb, offset, pinfo, tree, tvb_captured_length_remaining(tvb, offset), \"GAP and RTCPadding\");",
          "846:     return offset;",
          "847: }",
          "850: void",
          "851: init_pn_io_rtc1(int proto)",
          "852: {",
          "853:     static hf_register_info hf[] = {",
          "854:         { &hf_pn_io_io_data_object,",
          "855:             { \"IODataObject\", \"pn_io.io_data_object\",",
          "856:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "857:             NULL, HFILL }",
          "858:         },",
          "859:         { &hf_pn_io_io_data_object_info_module_diff,",
          "860:             { \"Difference\", \"pn_io.io_data_object.diff_module\",",
          "861:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "862:             NULL, HFILL }",
          "863:         },",
          "864:         { &hf_pn_io_io_data_object_info_moduleidentnumber,",
          "865:             { \"ModuleIdentNumber\", \"pn_io.io_data_object.module_nr\",",
          "866:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "867:             NULL, HFILL }",
          "868:         },",
          "869:         { &hf_pn_io_io_data_object_info_submoduleidentnumber,",
          "870:             { \"SubmoduleIdentNumber\", \"pn_io.io_data_object.submodule_nr\",",
          "871:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "872:             NULL, HFILL }",
          "873:         },",
          "874:         { &hf_pn_io_frame_info_type,",
          "875:             { \"PN Frame Type\", \"pn_io.frame_info.type\",",
          "876:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "877:             NULL, HFILL }",
          "878:         },",
          "879:         { &hf_pn_io_frame_info_vendor,",
          "880:             { \"DeviceVendorValue\", \"pn_io.frame_info.vendor\",",
          "881:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "882:             NULL, HFILL }",
          "883:         },",
          "884:         { &hf_pn_io_frame_info_nameofstation,",
          "885:             { \"NameOfStation\", \"pn_io.frame_info.nameofstation\",",
          "886:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "887:             NULL, HFILL }",
          "888:         },",
          "889:         { &hf_pn_io_frame_info_gsd_found,",
          "890:             { \"GSD-file found\", \"pn_io.frame_info.gsd_found\",",
          "891:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "892:             NULL, HFILL }",
          "893:         },",
          "894:         { &hf_pn_io_frame_info_gsd_error,",
          "895:             { \"GSD-file not found.\", \"pn_io.frame_info.gsd_error\",",
          "896:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "897:             NULL, HFILL }",
          "898:         },",
          "899:         { &hf_pn_io_frame_info_gsd_path,",
          "900:             { \"GSD-file networkpath failure!\", \"pn_io.frame_info.gsd_path\",",
          "901:             FT_NONE, BASE_NONE, NULL, 0x0,",
          "902:             NULL, HFILL }",
          "903:         },",
          "904:         { &hf_pn_io_iocs,",
          "905:             { \"IOCS\", \"pn_io.ioxs\",",
          "906:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "907:             NULL, HFILL }",
          "908:         },",
          "909:         { &hf_pn_io_iops,",
          "910:             { \"IOPS\", \"pn_io.ioxs\",",
          "911:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "912:             NULL, HFILL }",
          "913:         },",
          "914:         { &hf_pn_io_ioxs_extension,",
          "915:             { \"Extension\", \"pn_io.ioxs.extension\",",
          "916:             FT_UINT8, BASE_HEX, VALS(pn_io_ioxs_extension), 0x01,",
          "917:             NULL, HFILL }",
          "918:         },",
          "919:         { &hf_pn_io_ioxs_res14,",
          "920:             { \"Reserved\", \"pn_io.ioxs.res14\",",
          "921:             FT_UINT8, BASE_HEX, NULL, 0x1E,",
          "922:             NULL, HFILL }",
          "923:         },",
          "924:         { &hf_pn_io_ioxs_instance,",
          "925:             { \"Instance\", \"pn_io.ioxs.instance\",",
          "926:             FT_UINT8, BASE_HEX, VALS(pn_io_ioxs_instance), 0x60,",
          "927:             NULL, HFILL }",
          "928:         },",
          "929:         { &hf_pn_io_ioxs_datastate,",
          "930:             { \"DataState\", \"pn_io.ioxs.datastate\",",
          "931:             FT_UINT8, BASE_HEX, VALS(pn_io_ioxs_datastate), 0x80,",
          "932:             NULL, HFILL }",
          "933:         },",
          "936:         { &hf_pn_io_ps_sb,",
          "937:             { \"Status Byte\", \"pn_io.ps.sb\",",
          "938:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "939:             NULL, HFILL }",
          "940:         },",
          "941:         { &hf_pn_io_ps_sb_toggelBitChanged,",
          "942:             { \"Status Byte\", \"pn_io.ps.sb.toggle_d_changed\",",
          "943:             FT_UINT8, BASE_HEX, NULL, 0x00,",
          "944:             NULL, HFILL }",
          "945:         },",
          "946:         { &hf_pn_io_ps_sb_toggelBitChange_slot_nr,",
          "947:             { \"Slot_Number\", \"pn_io.ps.sb.toggle_d_changed.slot\",",
          "948:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "949:             NULL, HFILL }",
          "950:         },",
          "951:         { &hf_pn_io_ps_sb_toggelBitChange_subslot_nr,",
          "952:             { \"Sub_Slot_Number\", \"pn_io.ps.sb.toggle_d_changed.subslot\",",
          "953:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "954:             NULL, HFILL }",
          "955:         },",
          "956:         { &hf_pn_io_ps_cb,",
          "957:             { \"Control Byte\", \"pn_io.ps.cb\",",
          "958:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "959:             NULL, HFILL }",
          "960:         },",
          "961:         { &hf_pn_io_ps_cb_toggelBitChanged,",
          "962:             { \"Control Byte\", \"pn_io.ps.cb.toggle_h_changed\",",
          "963:             FT_UINT8, BASE_HEX, NULL, 0x00,",
          "964:             NULL, HFILL }",
          "965:         },",
          "966:         { &hf_pn_io_ps_cb_toggelBitChange_slot_nr,",
          "967:             { \"Slot_Number\", \"pn_io.ps.cb.toggle_h_changed.slot\",",
          "968:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "969:             NULL, HFILL }",
          "970:         },",
          "971:         { &hf_pn_io_ps_cb_toggelBitChange_subslot_nr,",
          "972:             { \"Sub_Slot_Number\", \"pn_io.ps.cb.toggle_h_changed.subslot\",",
          "973:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "974:             NULL, HFILL }",
          "975:         },",
          "977:         { &hf_pn_io_ps_sb_iparOK,",
          "978:             { \"iPar_OK - F-Device has new iParameter values assigned\", \"pn_io.ps.sb.iPar_OK\",",
          "979:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "980:             NULL, HFILL }",
          "981:         },",
          "982:         { &hf_pn_io_ps_sb_DeviceFault,",
          "983:             { \"Device_Fault - Failure exists in F-Device or F-Module\", \"pn_io.ps.sb.DeviceFault\",",
          "984:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "985:             NULL, HFILL }",
          "986:         },",
          "987:         { &hf_pn_io_ps_sb_CECRC,",
          "988:             { \"CE_CRC - CRC Communication fault\", \"pn_io.ps.sb.CE_CRC\",",
          "989:             FT_UINT8, BASE_HEX, NULL, 0x04,",
          "990:             NULL, HFILL }",
          "991:         },",
          "992:         { &hf_pn_io_ps_sb_WDtimeout,",
          "993:             { \"WD_timeout - WatchDog timeout Communication fault\", \"pn_io.ps.sb.WD_timeout\",",
          "994:             FT_UINT8, BASE_HEX, NULL, 0x08,",
          "995:             NULL, HFILL }",
          "996:         },",
          "997:         { &hf_pn_io_ps_sb_FVactivated,",
          "998:             { \"FV_activated - Fail-safe values (FV) activated\", \"pn_io.ps.sb.FV_activated\",",
          "999:             FT_UINT8, BASE_HEX, NULL, 0x10,",
          "1000:             NULL, HFILL }",
          "1001:         },",
          "1002:         { &hf_pn_io_ps_sb_Toggle_d,",
          "1003:             { \"Toggle_d - Device-based Toggle Bit\", \"pn_io.ps.sb.Toggle_d\",",
          "1004:             FT_UINT8, BASE_HEX, NULL, 0x20,",
          "1005:             NULL, HFILL }",
          "1006:         },",
          "1007:         { &hf_pn_io_ps_sb_ConsNr_reset,",
          "1008:             { \"cons_nr_R - F-Device has reset its consecutive number counter\", \"pn_io.ps.sb.cons_nr_R\",",
          "1009:             FT_UINT8, BASE_HEX, NULL, 0x40,",
          "1010:             NULL, HFILL }",
          "1011:         },",
          "1012:         { &hf_pn_io_ps_sb_res,",
          "1013:             { \"Bit7 - reserved for future releases\", \"pn_io.ps.sb.bit7\",",
          "1014:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "1015:             NULL, HFILL }",
          "1016:         },",
          "1017:         { &hf_pn_io_ps_cb_iparEN,",
          "1018:             { \"iPar_EN - iParameter assignment deblocked\", \"pn_io.ps.cb.iparEN\",",
          "1019:             FT_UINT8, BASE_HEX, NULL, 0x01,",
          "1020:             NULL, HFILL }",
          "1021:         },",
          "1022:         { &hf_pn_io_ps_cb_OAReq,",
          "1023:             { \"OA_Req - Operator acknowledge requested\", \"pn_io.ps.cb.OA_Req\",",
          "1024:             FT_UINT8, BASE_HEX, NULL, 0x02,",
          "1025:             NULL, HFILL }",
          "1026:         },",
          "1027:         { &hf_pn_io_ps_cb_resetConsNr,",
          "1028:             { \"R_cons_nr - Set the Virtual Consecutive Number within the F-Device to be \\\"0\\\"\", \"pn_io.ps.cb.R_cons_nr\",",
          "1029:             FT_UINT8, BASE_HEX, NULL, 0x04,",
          "1030:             NULL, HFILL }",
          "1031:         },",
          "1032:         { &hf_pn_io_ps_cb_useTO2,",
          "1033:             { \"Bit3 - Reserved or Use the secondary watchdog (Use_TO2)\", \"pn_io.ps.cb.bit3\",",
          "1034:             FT_UINT8, BASE_HEX, NULL, 0x08,",
          "1035:             NULL, HFILL }",
          "1036:         },",
          "1037:         { &hf_pn_io_ps_cb_activateFV,",
          "1038:             { \"activate_FV - Fail-safe values (FV) to be activated\", \"pn_io.ps.cb.activate_FV\",",
          "1039:             FT_UINT8, BASE_HEX, NULL, 0x10,",
          "1040:             NULL, HFILL }",
          "1041:         },",
          "1042:         { &hf_pn_io_ps_cb_Toggle_h,",
          "1043:             { \"Toggle_h - Host-based Toggle Bit\", \"pn_io.ps.cb.Toggle_h\",",
          "1044:             FT_UINT8, BASE_HEX, NULL, 0x20,",
          "1045:             NULL, HFILL }",
          "1046:         },",
          "1047:         { &hf_pn_io_ps_cb_Chf_ACK,",
          "1048:             { \"Bit6 - Reserved or Operator acknowledge after cleared channel fault (ChF_Ack)\", \"pn_io.ps.cb.bit6\",",
          "1049:             FT_UINT8, BASE_HEX, NULL, 0x40,",
          "1050:             NULL, HFILL }",
          "1051:         },",
          "1052:         { &hf_pn_io_ps_cb_loopcheck,",
          "1053:             { \"Bit7 - Reserved or Loop-back check (Loopcheck, shall be set to 1)\", \"pn_io.ps.cb.bit7\",",
          "1054:             FT_UINT8, BASE_HEX, NULL, 0x80,",
          "1055:             NULL, HFILL }",
          "1056:         },",
          "1058:         { &hf_pn_io_ps_f_dest_adr,",
          "1059:             { \"F_Dest_Add\", \"pn_io.ps.f_dest_add\",",
          "1060:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "1061:             NULL, HFILL }",
          "1062:         },",
          "1063:         { &hf_pn_io_ps_f_data,",
          "1064:             { \"SafetyIO Data\", \"pn_io.ps.f_data\",",
          "1065:             FT_UINT64, BASE_HEX, NULL, 0x0,",
          "1066:             NULL, HFILL }",
          "1067:         },",
          "1068:     };",
          "1070:     static gint *ett[] = {",
          "1071:         &ett_pn_io_rtc,",
          "1072:         &ett_pn_io_ioxs,",
          "1073:         &ett_pn_io_io_data_object",
          "1074:     };",
          "1076:     proto_pn_io_rtc1 = proto;",
          "1077:     proto_register_field_array(proto, hf, array_length(hf));",
          "1078:     proto_register_subtree_array(ett, array_length(ett));",
          "1079: }",
          "",
          "---------------"
        ],
        "plugins/profinet/packet-pn.c||plugins/profinet/packet-pn.c": [
          "File: plugins/profinet/packet-pn.c -> plugins/profinet/packet-pn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <epan/packet.h>",
          "29: #include <epan/expert.h>",
          "30: #include <epan/dissectors/packet-dcerpc.h>",
          "32: #include \"packet-pn.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: static expert_field ei_pn_undecoded_data = EI_INIT;",
          "46: int",
          "47: dissect_pn_uint8(tvbuff_t *tvb, gint offset, packet_info *pinfo _U_,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: void",
          "48: init_pnio_rtc1_station(stationInfo *station_info) {",
          "49:     station_info->iocs_data_in = wmem_list_new(wmem_file_scope());",
          "50:     station_info->iocs_data_out = wmem_list_new(wmem_file_scope());",
          "51:     station_info->ioobject_data_in = wmem_list_new(wmem_file_scope());",
          "52:     station_info->ioobject_data_out = wmem_list_new(wmem_file_scope());",
          "53:     station_info->diff_module = wmem_list_new(wmem_file_scope());",
          "54: }",
          "",
          "---------------"
        ],
        "plugins/profinet/packet-pn.h||plugins/profinet/packet-pn.h": [
          "File: plugins/profinet/packet-pn.h -> plugins/profinet/packet-pn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define FRAME_ID_DCP_HELLO      0xfefc",
          "24: #define FRAME_ID_DCP_GETORSET   0xfefd",
          "25: #define FRAME_ID_DCP_IDENT_REQ  0xfefe",
          "26: #define FRAME_ID_DCP_IDENT_RES  0xfeff",
          "29: extern void init_pn(int proto);",
          "31: extern int dissect_pn_uint8(tvbuff_t *tvb, gint offset, packet_info *pinfo,",
          "32:                   proto_tree *tree, int hfindex, guint8 *pdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: extern int       proto_pn_dcp;",
          "43: typedef struct tagStationInfo {",
          "45:     gchar    *typeofstation;",
          "46:     gchar    *nameofstation;",
          "47:     guint16   u16Vendor_id;",
          "48:     guint16   u16Device_id;",
          "50:     guint16   ioDataObjectNr;",
          "51:     guint16   iocsNr;",
          "53:     gboolean  gsdFound;",
          "54:     gboolean  gsdPathLength;",
          "55:     gchar    *gsdLocation;",
          "57:     wmem_list_t *iocs_data_in;",
          "58:     wmem_list_t *iocs_data_out;",
          "60:     wmem_list_t *ioobject_data_in;",
          "61:     wmem_list_t *ioobject_data_out;",
          "63:     wmem_list_t *diff_module;",
          "64: } stationInfo;",
          "67: typedef struct tagIocsObject {",
          "68:     guint16    slotNr;",
          "69:     guint16    subSlotNr;",
          "70:     guint16    frameOffset;",
          "71: } iocsObject;",
          "74: typedef struct tagIoDataObject {",
          "75:     guint16     slotNr;",
          "76:     guint16     subSlotNr;",
          "77:     guint32     moduleIdentNr;",
          "78:     guint32     subModuleIdentNr;",
          "79:     guint16     frameOffset;",
          "80:     guint16     length;",
          "81:     guint16     amountInGSDML;",
          "82:     guint32     fParameterIndexNr;",
          "83:     guint16     f_par_crc1;",
          "84:     guint16     f_src_adr;",
          "85:     guint16     f_dest_adr;",
          "86:     gboolean    f_crc_seed;",
          "87:     guint8      f_crc_len;",
          "88:     address     srcAddr;",
          "89:     address     dstAddr;",
          "90:     gboolean    profisafeSupported;",
          "91:     gboolean    discardIOXS;",
          "92:     gchar      *moduleNameStr;",
          "93:     tvbuff_t   *tvb_slot;",
          "94:     tvbuff_t   *tvb_subslot;",
          "96:     guint8     last_sb_cb;",
          "97:     guint8     lastToggleBit;",
          "98: } ioDataObject;",
          "101: typedef struct tagModuleDiffInfo {",
          "102:     guint16    slotNr;",
          "103:     guint32    modulID;",
          "104: } moduleDiffInfo;",
          "108: extern void init_pn_io_rtc1(int proto);",
          "110: extern void init_pnio_rtc1_station(stationInfo *station_info);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: extern int dissect_pn_align4(tvbuff_t *tvb, int offset, packet_info *pinfo, proto_tree *tree);",
          "80: extern void pn_append_info(packet_info *pinfo, proto_item *dcp_item, const char *text);",
          "82: extern gboolean dissect_CSF_SDU_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: extern int dissect_PNIO_C_SDU_RTC1(tvbuff_t *tvb, int offset, packet_info *pinfo,",
          "162:                     proto_tree *tree, guint8 *drep _U_);",
          "",
          "---------------"
        ]
      }
    }
  ]
}