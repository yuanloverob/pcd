{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
      "candidate_info": {
        "commit_hash": "ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) IN (FALSE)\" does not imply that X is NOT NULL. Ticket [f8f472cbc77ba9c9]\n\nFossilOrigin-Name: dd66134817ecbda01c59a05ad0d6ac44bee700ab10cd2119c869dd69af293fe2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4995:       if( seenNot && ExprHasProperty(p, EP_xIsSelect) ) return 0;",
          "4996:       assert( ExprHasProperty(p,EP_xIsSelect)",
          "4997:            || (p->x.pList!=0 && p->x.pList->nExpr>0) );",
          "4999:     }",
          "5000:     case TK_BETWEEN: {",
          "5001:       ExprList *pList = p->x.pList;",
          "",
          "[Removed Lines]",
          "4998:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "4998:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "443: #",
          "444: do_execsql_test index6-15.1 {",
          "445:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: # https://sqlite.org/src/info/bac716244fddac1fe841",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "461: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461: do_execsql_test index6-15.5 {",
          "462:   SELECT 1 FROM t0 WHERE (c0 IS FALSE) IN (FALSE);",
          "463: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
      "candidate_info": {
        "commit_hash": "4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
        "files": [
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a buffer overwrite triggered by a prefix query on a corrupt fts5 table.\n\nFossilOrigin-Name: 1d8172a94bce2d067027685e5aa1dc8f5d5d55b5da0832ad2836f6939de68c8f",
        "before_after_code_files": [
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5021:         fts5BufferSafeAppendBlob(&out, tmp.p, tmp.n);",
          "5022:         fts5DoclistIterNext(&i1);",
          "5023:         fts5DoclistIterNext(&i2);",
          "5024:         if( i1.aPoslist==0 || i2.aPoslist==0 ) break;",
          "5025:       }",
          "5026:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5024:         assert( out.n<=(p1->n+p2->n+9) );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4896: do_catchsql_test 38.1 {",
          "4897:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4902: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "4898: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4898: } {0 {}}",
          "4900: #-------------------------------------------------------------------------",
          "4901: reset_db",
          "4902: do_test 39.0 {",
          "4903:   sqlite3 db {}",
          "4904:   db deserialize [decode_hexdb {",
          "4905: .open --hexdb",
          "4906: | size 24576 pagesize 4096 filename crash-e650fe95502908.db",
          "4907: | page 1 offset 0",
          "4908: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "4909: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "4910: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "4911: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "4912: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "4913: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "4914: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "4915: |   3600: 06 06 17 11 11 01 31 74 61 62 6c 65 62 62 62 62   ......1tablebbbb",
          "4916: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "4917: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "4918: |   3648: 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_configt1_conf",
          "4919: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "4920: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "4921: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "4922: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "4923: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 63 73   !...tablet1_docs",
          "4924: |   3744: 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65 04 43 52   izet1_docsize.CR",
          "4925: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 64   EATE TABLE 't1_d",
          "4926: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "4927: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "4928: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "4929: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "4930: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "4931: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "4932: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "4933: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "4934: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "4935: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "4936: |   3936: 65 74 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   et1_datat1_data.",
          "4937: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "4938: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "4939: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "4940: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 11 11   lock BLOB)T.....",
          "4941: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "4942: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "4943: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "4944: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 32 2c 32 2c 33   ,b,prefix=.2,2,3",
          "4945: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "4946: | page 2 offset 4096",
          "4947: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "4948: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "4949: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "4950: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "4951: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cc 0b b0   ...s.T.2........",
          "4952: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "4953: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "4954: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "4955: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "4956: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "4957: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "4958: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "4959: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "4960: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "4961: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "4962: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 03 06 01 01 04   .<.....3the.....",
          "4963: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "4964: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "4965: |   2528: 01 05 01 03 74 61 62 03 02 03 04 0a 19 8c 80 80   ....tab.........",
          "4966: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 32 77 68 03 02   .....8.....2wh..",
          "4967: |   2560: 04 00 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "4968: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "4969: |   2592: 03 02 01 68 03 06 01 01 04 04 07 1b 8c 80 80 80   ...h............",
          "4970: |   2608: 80 0a 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "4971: |   2624: 01 05 01 02 6f 66 03 06 01 01 06 04 09 19 8c 80   ....of..........",
          "4972: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "4973: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "4974: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "4975: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "4976: |   2704: 80 80 07 03 00 3a ff 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "4977: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "4978: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "4979: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "4980: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "4981: |   2784: 06 00 f1 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "4982: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "4983: |   2816: 06 30 74 61 62 6c 65 03 02 03 07 1c 8c 80 80 80   .0table.........",
          "4984: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "4985: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "4986: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "4987: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "4988: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "4989: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "4990: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "4991: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "4992: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "4993: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "4994: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "4995: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "4996: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "4997: |   3040: 02 06 01 01 05 01 03 74 68 65 02 08 05 0a 1b 88   .......the......",
          "4998: |   3056: 80 80 80 80 0e 03 00 3c 00 00 00 16 01 01 02 04   .......<........",
          "4999: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "5000: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "5001: |   3104: 74 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   th........3and..",
          "5002: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "5003: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "5004: |   3152: 01 05 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .............6..",
          "5005: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "5006: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "5007: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "5008: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "5009: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "5010: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "5011: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "5012: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "5013: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "5014: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "5015: |   3328: 16 06 30 74 68 65 72 65 02 02 02 00 02 31 31 02   ..0there.....11.",
          "5016: |   3344: 06 01 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "5017: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "5018: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "5019: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "5020: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 00   .............<..",
          "5021: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "5022: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "5023: |   3456: 00 00 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "5024: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "5025: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "5026: |   3504: 02 02 05 04 08 08 84 80 80 80 81 12 03 00 16 00   ................",
          "5027: |   3520: 00 00 05 04 1b 84 61 80 80 80 11 03 00 3c 00 00   ......a......<..",
          "5028: |   3536: 00 16 05 34 74 61 62 6c 01 06 01 01 05 02 03 65   ...4tabl.......e",
          "5029: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "5030: |   3568: 00 00 00 16 05 34 65 61 63 68 01 02 03 01 04 70   .....4each.....p",
          "5031: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "5032: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "5033: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "5034: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "5035: |   3648: 03 74 61 62 01 06 01 01 05 04 08 1a 84 80 80 80   .tab............",
          "5036: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 02   ....:.....3for..",
          "5037: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "5038: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "5039: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "5040: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 71   .......6.....2tq",
          "5041: |   3744: 01 06 01 01 05 02 01 65 01 02 04 04 09 19 84 80   .......e........",
          "5042: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "5043: |   3776: 06 01 01 02 01 02 70 72 01 02 05 0b 89 18 84 80   ......pr........",
          "5044: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "5045: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "5046: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "5047: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "5048: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "5049: |   3872: 06 01 01 02 01 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "5050: |   3888: 80 80 06 03 00 36 00 00 00 13 02 31 65 01 02 03   .....6.....1e...",
          "5051: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "5052: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "5053: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "5054: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "5055: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "5056: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "5057: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "5058: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "5059: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "5060: |   4048: 00 00 00 15 05 30 65 61 63 f4 01 02 03 01 03 66   .....0eac......f",
          "5061: |   4064: 6f 72 01 02 02 04 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "5062: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "5063: | page 3 offset 8192",
          "5064: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "5065: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "5066: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "5067: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "5068: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "5069: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 96 0e 8e 0e 85   ................",
          "5070: |     96: 0e 7c 0e 73 0e 6a 0e 60 0e 58 0e 4f 00 00 00 00   .|.s.j.`.X.O....",
          "5071: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "5072: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "5073: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "5074: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "5075: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "5076: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 08   ....2.......1t..",
          "5077: |   3744: 04 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "5078: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "5079: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "5080: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 03 02 08 04 01   ...0n...........",
          "5081: |   3808: 10 01 02 34 72 22 07 04 01 0e 01 02 34 20 08 04   ...4r.......4 ..",
          "5082: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "5083: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 b3 02   .......2t.......",
          "5084: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "5085: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "5086: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "5087: |   3904: 0e 0b 04 01 16 01 02 30 74 68 65 72 0c 08 04 01   .......0ther....",
          "5088: |   3920: 10 01 02 30 74 0a 08 04 01 10 01 02 30 6e 08 08   ...0t.......0n..",
          "5089: |   3936: 04 01 10 01 02 30 62 06 08 04 01 10 01 02 30 61   .....0b.......0a",
          "5090: |   3952: 05 06 04 01 0c 01 02 02 07 04 09 10 01 34 74 22   .............4t.",
          "5091: |   3968: 06 04 09 0e 01 34 20 08 04 09 12 01 33 74 65 1e   .....4 .....3te.",
          "5092: |   3984: 07 04 09 10 01 33 70 1c 07 04 09 10 01 33 66 1a   .....3p......3f.",
          "5093: |   4000: 08 04 09 12 01 32 74 68 18 07 04 09 10 01 32 2d   .....2th......2-",
          "5094: |   4016: 16 07 04 09 10 01 32 69 14 07 04 09 10 01 32 66   ......2i......2f",
          "5095: |   4032: 12 07 04 09 10 01 31 74 10 07 04 09 10 01 31 69   ......1t......1i",
          "5096: |   4048: 0e 06 04 09 0e 01 31 0c 08 04 09 12 01 30 74 65   ......1......0te",
          "5097: |   4064: 0a 07 04 09 10 01 30 74 08 07 04 09 10 01 30 70   ......0t......0p",
          "5098: |   4080: 06 08 04 09 12 01 30 66 74 04 05 04 09 0c 01 02   ......0ft.......",
          "5099: | page 4 offset 12288",
          "5100: |      0: 0d 00 00 00 03 0f eb 00 0f f9 0f f2 0f eb 00 00   ................",
          "5101: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 03 03 00 10   ................",
          "5102: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 03   ................",
          "5103: | page 5 offset 16384",
          "5104: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "5105: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "5106: |   4080: 67 73 7a 18 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "5107: | page 6 offset 20480",
          "5108: |      0: 0d 00 00 00 03 0f f2 00 0f fc 0f f7 0f f2 00 00   ................",
          "5109: |   4080: 00 00 03 03 02 01 03 03 02 02 01 02 02 01 02 09   ................",
          "5110: | end crash-e650fe95502908.db",
          "5111: }]} {}",
          "5113: do_execsql_test 39.1 {",
          "5114:   SELECT rowid FROM t1('t*');",
          "5115: } {1 2 3}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abc4415648e69362061e9f9a4f2c1d419ba33801999b377650d8b9a4d2d3a7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
      "candidate_info": {
        "commit_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Slightly faster keyword hash table.\n\nFossilOrigin-Name: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: static Keyword aKeywordTable[] = {",
          "306: };",
          "",
          "[Removed Lines]",
          "161:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER       },",
          "162:   { \"ACTION\",           \"TK_ACTION\",       FKEY                   },",
          "163:   { \"ADD\",              \"TK_ADD\",          ALTER                  },",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "168:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "169:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "170:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "171:   { \"ASC\",              \"TK_ASC\",          ALWAYS                 },",
          "172:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH                 },",
          "173:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR               },",
          "174:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER                },",
          "175:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS                 },",
          "176:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS                 },",
          "177:   { \"BY\",               \"TK_BY\",           ALWAYS                 },",
          "178:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY                   },",
          "179:   { \"CASE\",             \"TK_CASE\",         ALWAYS                 },",
          "180:   { \"CAST\",             \"TK_CAST\",         CAST                   },",
          "181:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS                 },",
          "182:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS                 },",
          "183:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER                  },",
          "184:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS                 },",
          "185:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT               },",
          "186:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS                 },",
          "187:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS                 },",
          "188:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "189:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC             },",
          "190:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "191:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "192:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS                 },",
          "193:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH                 },",
          "194:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS                 },",
          "195:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS                 },",
          "196:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY                   },",
          "197:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS                 },",
          "198:   { \"DESC\",             \"TK_DESC\",         ALWAYS                 },",
          "199:   { \"DETACH\",           \"TK_DETACH\",       ATTACH                 },",
          "200:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS                 },",
          "201:   { \"DO\",               \"TK_DO\",           UPSERT                 },",
          "202:   { \"DROP\",             \"TK_DROP\",         ALWAYS                 },",
          "203:   { \"END\",              \"TK_END\",          ALWAYS                 },",
          "204:   { \"EACH\",             \"TK_EACH\",         TRIGGER                },",
          "205:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS                 },",
          "206:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS                 },",
          "207:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND               },",
          "208:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS                 },",
          "209:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC             },",
          "210:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS                 },",
          "211:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "212:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "213:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "214:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "215:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "216:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "217:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "218:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "219:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "221:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "222:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "223:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "224:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS                 },",
          "225:   { \"IF\",               \"TK_IF\",           ALWAYS                 },",
          "226:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER       },",
          "227:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS                 },",
          "228:   { \"IN\",               \"TK_IN\",           ALWAYS                 },",
          "229:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS                 },",
          "230:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS                 },",
          "231:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY                   },",
          "232:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "233:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS                 },",
          "234:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER                },",
          "235:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND               },",
          "236:   { \"INTO\",             \"TK_INTO\",         ALWAYS                 },",
          "237:   { \"IS\",               \"TK_IS\",           ALWAYS                 },",
          "238:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "239:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "240:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "241:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "242:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "243:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "244:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "245:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS                 },",
          "246:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS                 },",
          "247:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC        },",
          "248:   { \"NOT\",              \"TK_NOT\",          ALWAYS                 },",
          "249:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "250:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "251:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "252:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "253:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "254:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "255:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "256:   { \"OR\",               \"TK_OR\",           ALWAYS                 },",
          "257:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS                 },",
          "258:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC             },",
          "259:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "260:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC             },",
          "261:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC             },",
          "262:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN                },",
          "263:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA                 },",
          "264:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC             },",
          "265:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS                 },",
          "266:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN                },",
          "267:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER                },",
          "268:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC             },",
          "269:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE                    },",
          "270:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY                   },",
          "271:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS                 },",
          "272:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX                },",
          "273:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS                 },",
          "274:   { \"RENAME\",           \"TK_RENAME\",       ALTER                  },",
          "275:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT               },",
          "276:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY                   },",
          "277:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "278:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS                 },",
          "279:   { \"ROW\",              \"TK_ROW\",          TRIGGER                },",
          "280:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS                 },",
          "281:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS                 },",
          "282:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS                 },",
          "283:   { \"SET\",              \"TK_SET\",          ALWAYS                 },",
          "284:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS                 },",
          "285:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS                 },",
          "286:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS                 },",
          "287:   { \"THEN\",             \"TK_THEN\",         ALWAYS                 },",
          "288:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC             },",
          "289:   { \"TO\",               \"TK_TO\",           ALWAYS                 },",
          "290:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS                 },",
          "291:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER                },",
          "292:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC             },",
          "293:   { \"UNION\",            \"TK_UNION\",        COMPOUND               },",
          "294:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS                 },",
          "295:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS                 },",
          "296:   { \"USING\",            \"TK_USING\",        ALWAYS                 },",
          "297:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM                 },",
          "298:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "299:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "300:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "301:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "302:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "303:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "304:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "305:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "",
          "[Added Lines]",
          "162:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER, 0      },",
          "163:   { \"ACTION\",           \"TK_ACTION\",       FKEY,             0      },",
          "164:   { \"ADD\",              \"TK_ADD\",          ALTER,            1      },",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "172:   { \"ASC\",              \"TK_ASC\",          ALWAYS,           0      },",
          "173:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH,           1      },",
          "174:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR,         0      },",
          "175:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER,          0      },",
          "176:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS,           1      },",
          "177:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS,           5      },",
          "178:   { \"BY\",               \"TK_BY\",           ALWAYS,           10     },",
          "179:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY,             1      },",
          "180:   { \"CASE\",             \"TK_CASE\",         ALWAYS,           5      },",
          "181:   { \"CAST\",             \"TK_CAST\",         CAST,             5      },",
          "182:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS,           1      },",
          "183:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS,           1      },",
          "184:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER,            1      },",
          "185:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS,           1      },",
          "186:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT,         0      },",
          "187:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS,           1      },",
          "188:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS,           2      },",
          "189:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "190:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC,       1      },",
          "191:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "192:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "193:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS,           1      },",
          "194:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH,           0      },",
          "195:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS,           1      },",
          "196:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS,           1      },",
          "197:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY,             1      },",
          "198:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS,           10     },",
          "199:   { \"DESC\",             \"TK_DESC\",         ALWAYS,           3      },",
          "200:   { \"DETACH\",           \"TK_DETACH\",       ATTACH,           0      },",
          "201:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS,           5      },",
          "202:   { \"DO\",               \"TK_DO\",           UPSERT,           2      },",
          "203:   { \"DROP\",             \"TK_DROP\",         ALWAYS,           1      },",
          "204:   { \"END\",              \"TK_END\",          ALWAYS,           1      },",
          "205:   { \"EACH\",             \"TK_EACH\",         TRIGGER,          1      },",
          "206:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS,           2      },",
          "207:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS,           4      },",
          "208:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND,         4      },",
          "209:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS,           1      },",
          "210:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC,       1      },",
          "211:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS,           4      },",
          "212:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN,          1      },",
          "213:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER, 1      },",
          "214:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC,       4      },",
          "215:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS,           4      },",
          "216:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC,       4      },",
          "217:   { \"FOR\",              \"TK_FOR\",          TRIGGER,          2      },",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "225:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS,           5      },",
          "226:   { \"IF\",               \"TK_IF\",           ALWAYS,           2      },",
          "227:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER, 1      },",
          "228:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS,           1      },",
          "229:   { \"IN\",               \"TK_IN\",           ALWAYS,           10     },",
          "230:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS,           1      },",
          "231:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS,           0      },",
          "232:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY,             1      },",
          "233:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS,           1      },",
          "234:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS,           10     },",
          "235:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER,          1      },",
          "236:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND,         5      },",
          "237:   { \"INTO\",             \"TK_INTO\",         ALWAYS,           10     },",
          "238:   { \"IS\",               \"TK_IS\",           ALWAYS,           5      },",
          "239:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS,           5      },",
          "240:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS,           5      },",
          "241:   { \"KEY\",              \"TK_KEY\",          ALWAYS,           1      },",
          "242:   { \"LAST\",             \"TK_LAST\",         ALWAYS,           4      },",
          "243:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "244:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS,           5      },",
          "245:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS,           3      },",
          "246:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS,           2      },",
          "247:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "248:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC,  2      },",
          "249:   { \"NOT\",              \"TK_NOT\",          ALWAYS,           10     },",
          "250:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT,           1      },",
          "251:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS,           3      },",
          "252:   { \"NULL\",             \"TK_NULL\",         ALWAYS,           10     },",
          "253:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS,           3      },",
          "254:   { \"OF\",               \"TK_OF\",           ALWAYS,           3      },",
          "255:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS,           1      },",
          "256:   { \"ON\",               \"TK_ON\",           ALWAYS,           1      },",
          "257:   { \"OR\",               \"TK_OR\",           ALWAYS,           9      },",
          "258:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS,           10     },",
          "259:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC,       3      },",
          "260:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "261:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC,       3      },",
          "262:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC,       3      },",
          "263:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN,          0      },",
          "264:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA,           0      },",
          "265:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC,       3      },",
          "266:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS,           1      },",
          "267:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN,          0      },",
          "268:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER,          1      },",
          "269:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC,       3      },",
          "270:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE,              3      },",
          "271:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY,             1      },",
          "272:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "273:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX,          1      },",
          "274:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS,           1      },",
          "275:   { \"RENAME\",           \"TK_RENAME\",       ALTER,            1      },",
          "276:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT,         10     },",
          "277:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY,             1      },",
          "278:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS,           0      },",
          "279:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS,           1      },",
          "280:   { \"ROW\",              \"TK_ROW\",          TRIGGER,          1      },",
          "281:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS,           1      },",
          "282:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS,           1      },",
          "283:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS,           10     },",
          "284:   { \"SET\",              \"TK_SET\",          ALWAYS,           10     },",
          "285:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS,           1      },",
          "286:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS,           1      },",
          "287:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS,           1      },",
          "288:   { \"THEN\",             \"TK_THEN\",         ALWAYS,           3      },",
          "289:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC,       3      },",
          "290:   { \"TO\",               \"TK_TO\",           ALWAYS,           3      },",
          "291:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS,           1      },",
          "292:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER,          1      },",
          "293:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC,       3      },",
          "294:   { \"UNION\",            \"TK_UNION\",        COMPOUND,         3      },",
          "295:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS,           1      },",
          "296:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS,           10     },",
          "297:   { \"USING\",            \"TK_USING\",        ALWAYS,           8      },",
          "298:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM,           1      },",
          "299:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS,           10     },",
          "300:   { \"VIEW\",             \"TK_VIEW\",         VIEW,             1      },",
          "301:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB,             1      },",
          "302:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS,           1      },",
          "303:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS,           10     },",
          "304:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC,       3      },",
          "305:   { \"WITH\",             \"TK_WITH\",         CTE,              4      },",
          "306:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS,           1      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:   return &aKeywordTable[i];",
          "358: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "367:   int j = aKeywordTable[i].iNext;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "371:   aKeywordTable[i].iNext = aKeywordTable[j].iNext;",
          "372:   aKeywordTable[j].iNext = i+1;",
          "374:   reorder(&aKeywordTable[i].iNext);",
          "375: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:     h = aKeywordTable[i].hash % bestSize;",
          "492:     aKeywordTable[i].iNext = aKWHash[h];",
          "493:     aKWHash[h] = i+1;",
          "494:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     reorder(&aKWHash[h]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:     }",
          "606:   }",
          "607:   printf(\"%s};\\n\", j==0 ? \"\" : \"\\n\");",
          "608:   printf(\"/* Check to see if z[0..n-1] is a keyword. If it is, write the\\n\");",
          "609:   printf(\"** parser symbol code for that keyword into *pType.  Always\\n\");",
          "610:   printf(\"** return the integer n (the length of the token). */\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   printf(\"/* Hash table decoded:\\n\");",
          "627:   for(i=0; i<bestSize; i++){",
          "628:     j = aKWHash[i];",
          "629:     printf(\"** %3d:\", i);",
          "630:     while( j ){",
          "631:       printf(\" %s\", aKeywordTable[j-1].zOrigName);",
          "632:       j = aKeywordTable[j-1].iNext;",
          "633:     }",
          "634:     printf(\"\\n\");",
          "635:   }",
          "636:   printf(\"*/\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "643d855da9625dd18f784674792dadd9697bb3ad",
      "candidate_info": {
        "commit_hash": "643d855da9625dd18f784674792dadd9697bb3ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/643d855da9625dd18f784674792dadd9697bb3ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Refactor the sqlite3_normalized_sql() implementation. This is a work-in-progress. There are still issues.\n\nFossilOrigin-Name: a4c890b0af9786295e6df05022009d8946550adb873535c610be805c2b7a4083",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   return rc;",
          "710: }",
          "",
          "[Removed Lines]",
          "712: #ifdef SQLITE_ENABLE_NORMALIZE",
          "721: static int estimateNormalizedSize(",
          "724: ){",
          "725:   int nOut = nSql + 4;",
          "726:   const char *z = zSql;",
          "727:   while( nOut<nSql*5 ){",
          "728:     while( z[0]!=0 && z[0]!='I' && z[0]!='i' ){ z++; }",
          "729:     if( z[0]==0 ) break;",
          "730:     z++;",
          "731:     if( z[0]!='N' && z[0]!='n' ) break;",
          "732:     z++;",
          "733:     while( sqlite3Isspace(z[0]) ){ z++; }",
          "734:     if( z[0]!='(' ) break;",
          "735:     z++;",
          "737:   }",
          "738:   return nOut;",
          "739: }",
          "747: static void copyNormalizedToken(",
          "754: ){",
          "755:   int bQuoted = tokenFlags & SQLITE_TOKEN_QUOTED;",
          "756:   int bKeyword = tokenFlags & SQLITE_TOKEN_KEYWORD;",
          "757:   int j = *piOut, k = 0;",
          "758:   for(; k<nToken; k++){",
          "759:     if( bQuoted ){",
          "760:       if( k==0 && iIn>0 ){",
          "761:         zOut[j++] = '\"';",
          "762:         continue;",
          "763:       }else if( k==nToken-1 ){",
          "764:         zOut[j++] = '\"';",
          "765:         continue;",
          "766:       }",
          "767:     }",
          "768:     if( bKeyword ){",
          "769:       zOut[j++] = sqlite3Toupper(zSql[iIn+k]);",
          "770:     }else{",
          "771:       zOut[j++] = sqlite3Tolower(zSql[iIn+k]);",
          "772:     }",
          "773:   }",
          "775: }",
          "782: char *sqlite3Normalize(",
          "786: ){",
          "799:   db = sqlite3VdbeDb(pVdbe);",
          "800:   assert( db!=0 );",
          "801:   if( zSql==0 ) return 0;",
          "802:   nZ = estimateNormalizedSize(zSql, nSql);",
          "803:   z = sqlite3DbMallocRawNN(db, nZ);",
          "804:   if( z==0 ) goto normalizeError;",
          "805:   for(i=j=0; i<nSql && zSql[i]; i+=n){",
          "806:     int flags = 0;",
          "807:     if( tokenType!=TK_SPACE ) prevTokenType = tokenType;",
          "808:     n = sqlite3GetTokenNormalized((unsigned char*)zSql+i, &tokenType, &flags);",
          "809:     switch( tokenType ){",
          "810:       case TK_SPACE: {",
          "811:         break;",
          "812:       }",
          "813:       case TK_ILLEGAL: {",
          "814:         goto normalizeError;",
          "815:       }",
          "816:       case TK_STRING:",
          "817:       case TK_INTEGER:",
          "818:       case TK_FLOAT:",
          "819:       case TK_VARIABLE:",
          "820:       case TK_BLOB: {",
          "821:         z[j++] = '?';",
          "822:         break;",
          "823:       }",
          "824:       case TK_LP:",
          "825:       case TK_RP: {",
          "826:         if( tokenType==TK_LP ){",
          "827:           nParen++;",
          "828:           if( prevTokenType==TK_IN ){",
          "829:             iStartIN = j;",
          "830:             nParenAtIN = nParen;",
          "831:           }",
          "832:         }else{",
          "833:           if( iStartIN>0 && nParen==nParenAtIN ){",
          "834:             assert( iStartIN+6<nZ );",
          "835:             memcpy(z+iStartIN+1, \"?,?,?\", 5);",
          "836:             j = iStartIN+6;",
          "837:             assert( nZ-1-j>=0 );",
          "838:             assert( nZ-1-j<nZ );",
          "839:             memset(z+j, 0, nZ-1-j);",
          "840:             iStartIN = 0;",
          "841:           }",
          "842:           nParen--;",
          "843:         }",
          "844:         assert( nParen>=0 );",
          "846:       }",
          "847:       case TK_MINUS:",
          "848:       case TK_SEMI:",
          "849:       case TK_PLUS:",
          "850:       case TK_STAR:",
          "851:       case TK_SLASH:",
          "852:       case TK_REM:",
          "853:       case TK_EQ:",
          "854:       case TK_LE:",
          "855:       case TK_NE:",
          "856:       case TK_LSHIFT:",
          "857:       case TK_LT:",
          "858:       case TK_RSHIFT:",
          "859:       case TK_GT:",
          "860:       case TK_GE:",
          "861:       case TK_BITOR:",
          "862:       case TK_CONCAT:",
          "863:       case TK_COMMA:",
          "864:       case TK_BITAND:",
          "865:       case TK_BITNOT:",
          "866:       case TK_DOT:",
          "867:       case TK_IN:",
          "868:       case TK_IS:",
          "869:       case TK_NOT:",
          "870:       case TK_NULL:",
          "871:       case TK_ID: {",
          "872:         if( tokenType==TK_NULL ){",
          "873:           if( prevTokenType==TK_IS || prevTokenType==TK_NOT ){",
          "875:           }else{",
          "877:             z[j++] = '?';",
          "878:             break;",
          "879:           }",
          "880:         }",
          "881:         if( j>0 && sqlite3IsIdChar(z[j-1]) && sqlite3IsIdChar(zSql[i]) ){",
          "882:           z[j++] = ' ';",
          "883:         }",
          "884:         if( tokenType==TK_ID ){",
          "885:           if( zSql[i]=='\"'",
          "886:            && sqlite3VdbeUsesDoubleQuotedString(db,pVdbe,zSql+i,n)",
          "887:           ){",
          "888:             z[j++] = '?';",
          "889:             break;",
          "890:           }",
          "891:           if( nParen==nParenAtIN ) iStartIN = 0;",
          "892:         }",
          "893:         copyNormalizedToken(zSql, i, n, flags, z, &j);",
          "894:         break;",
          "895:       }",
          "896:     }",
          "897:   }",
          "898:   assert( j<nZ && \"one\" );",
          "899:   while( j>0 && z[j-1]==' ' ){ j--; }",
          "900:   if( j>0 && z[j-1]!=';' ){ z[j++] = ';'; }",
          "901:   z[j] = 0;",
          "902:   assert( j<nZ && \"two\" );",
          "903:   return z;",
          "905: normalizeError:",
          "906:   sqlite3DbFree(db, z);",
          "907:   return 0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4255: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "4256: void sqlite3AlterRenameColumn(Parse*, SrcList*, Token*, Token*);",
          "4257: int sqlite3GetToken(const unsigned char *, int *);",
          "4261: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4262: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4263: int sqlite3CodeSubselect(Parse*, Expr *, int, int);",
          "",
          "[Removed Lines]",
          "4258: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4259: int sqlite3GetTokenNormalized(const unsigned char *, int *, int *);",
          "4260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:   return i;",
          "546: }",
          "",
          "[Removed Lines]",
          "548: #ifdef SQLITE_ENABLE_NORMALIZE",
          "560: int sqlite3GetTokenNormalized(",
          "561:   const unsigned char *z,",
          "562:   int *tokenType,",
          "563:   int *flags",
          "564: ){",
          "565:   int n;",
          "566:   unsigned char iClass = aiClass[*z];",
          "567:   if( iClass==CC_KYWD ){",
          "568:     int i;",
          "569:     for(i=1; aiClass[z[i]]<=CC_KYWD; i++){}",
          "570:     if( IdChar(z[i]) ){",
          "574:       i++;",
          "575:       while( IdChar(z[i]) ){ i++; }",
          "577:       return i;",
          "578:     }",
          "580:     n = keywordCode((char*)z, i, tokenType);",
          "585:     switch( *tokenType ){",
          "586:       case TK_ID: {",
          "588:         break;",
          "589:       }",
          "590:       case TK_IN:",
          "591:       case TK_IS:",
          "592:       case TK_NOT:",
          "593:       case TK_NULL: {",
          "595:         break;",
          "596:       }",
          "597:       default: {",
          "600:         break;",
          "601:       }",
          "602:     }",
          "603:   }else{",
          "604:     n = sqlite3GetToken(z, tokenType);",
          "607:     if( *tokenType==TK_ID && (iClass==CC_QUOTE || iClass==CC_QUOTE2) ){",
          "609:     }",
          "610:   }",
          "611:   return n;",
          "612: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "782:   return nErr;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifdef SQLITE_ENABLE_NORMALIZE",
          "724: static void addSpaceSeparator(sqlite3_str *pStr){",
          "725:   if( pStr->nChar && sqlite3IsIdChar(pStr->zText[pStr->nChar-1]) ){",
          "726:     sqlite3_str_append(pStr, \" \", 1);",
          "727:   }",
          "728: }",
          "735: char *sqlite3Normalize(",
          "739: ){",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "760:     n = sqlite3GetToken((unsigned char*)zSql+i, &tokenType);",
          "761:     if( NEVER(n<=0) ) break;",
          "762:     switch( tokenType ){",
          "763:       case TK_SPACE: {",
          "764:         break;",
          "765:       }",
          "766:       case TK_NULL: {",
          "767:         if( prevType==TK_IS || prevType==TK_NOT ){",
          "768:           sqlite3_str_append(pStr, \" NULL\", 5);",
          "769:           break;",
          "770:         }",
          "772:       }",
          "773:       case TK_STRING:",
          "774:       case TK_INTEGER:",
          "775:       case TK_FLOAT:",
          "776:       case TK_VARIABLE:",
          "777:       case TK_BLOB: {",
          "778:         sqlite3_str_append(pStr, \"?\", 1);",
          "779:         break;",
          "780:       }",
          "781:       case TK_LP: {",
          "782:         nParen++;",
          "783:         if( prevType==TK_IN ){",
          "784:           iStartIN = pStr->nChar;",
          "785:           nParenAtIN = nParen;",
          "786:         }",
          "787:         sqlite3_str_append(pStr, \"(\", 1);",
          "788:         break;",
          "789:       }",
          "790:       case TK_RP: {",
          "791:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "792:           assert( pStr->nChar>=iStartIN );",
          "793:           pStr->nChar = iStartIN+1;",
          "794:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "795:           iStartIN = 0;",
          "796:         }",
          "797:         nParen--;",
          "798:         sqlite3_str_append(pStr, \")\", 1);",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         j = pStr->nChar;",
          "803:         if( sqlite3Isquote(zSql[i]) ){",
          "804:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "805:           int nId;",
          "806:           int eType = 0;",
          "807:           if( zId==0 ) break;",
          "808:           sqlite3Dequote(zId);",
          "809:           if( zSql[i]=='\"' && sqlite3VdbeUsesDoubleQuotedString(pVdbe, zId) ){",
          "810:             sqlite3_str_append(pStr, \"?\", 1);",
          "811:             sqlite3DbFree(db, zId);",
          "812:             break;",
          "813:           }",
          "814:           nId = sqlite3Strlen30(zId);",
          "815:           if( sqlite3GetToken((u8*)zId, &eType)==nId && eType==TK_ID ){",
          "816:             addSpaceSeparator(pStr);",
          "817:             sqlite3_str_append(pStr, zId, nId);",
          "818:           }else{",
          "819:             sqlite3_str_appendf(pStr, \"\\\"%w\\\"\", zId);",
          "820:           }",
          "821:           sqlite3DbFree(db, zId);",
          "822:         }else{",
          "823:           addSpaceSeparator(pStr);",
          "824:           sqlite3_str_append(pStr, zSql+i, n);",
          "825:         }",
          "826:         while( j<pStr->nChar ){",
          "827:           pStr->zText[j] = sqlite3Tolower(pStr->zText[j]);",
          "828:           j++;",
          "829:         }",
          "830:         break;",
          "831:       }",
          "832:       default: {",
          "833:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "834:         j = pStr->nChar;",
          "835:         sqlite3_str_append(pStr, zSql+i, n);",
          "836:         while( j<pStr->nChar ){",
          "837:           pStr->zText[j] = sqlite3Toupper(pStr->zText[j]);",
          "838:           j++;",
          "839:         }",
          "840:         break;",
          "841:       }",
          "842:     }",
          "843:   }",
          "844:   return sqlite3_str_finish(pStr);",
          "845: }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, u8);",
          "254: #ifdef SQLITE_ENABLE_NORMALIZE",
          "255: void sqlite3VdbeAddDblquoteStr(sqlite3*,Vdbe*,const char*);",
          "257: #endif",
          "258: void sqlite3VdbeSwap(Vdbe*,Vdbe*);",
          "259: VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);",
          "",
          "[Removed Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(sqlite3*,Vdbe*,const char*,int);",
          "",
          "[Added Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(Vdbe*,const char*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int sqlite3VdbeUsesDoubleQuotedString(",
          "104: ){",
          "106:   DblquoteStr *pStr;",
          "107:   assert( zId!=0 );",
          "111:   if( pVdbe->pDblStr==0 ) return 0;",
          "115:   for(pStr=pVdbe->pDblStr; pStr; pStr=pStr->pNextStr){",
          "117:   }",
          "120: }",
          "121: #endif",
          "",
          "[Removed Lines]",
          "105:   char *z;",
          "108:   assert( zId[0]=='\"' );",
          "109:   assert( nId>=2 );",
          "110:   assert( zId[nId-1]=='\"' );",
          "112:   z = sqlite3DbStrNDup(db, zId, nId);",
          "113:   if( z==0 ) return 0;",
          "114:   sqlite3Dequote(z);",
          "116:     if( strcmp(z, pStr->z)==0 ) break;",
          "118:   sqlite3DbFree(db, z);",
          "119:   return pStr!=0;",
          "",
          "[Added Lines]",
          "107:     if( strcmp(zId, pStr->z)==0 ) return 1;",
          "109:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
      "candidate_info": {
        "commit_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97afa309d7bf31ec6856a74c13d41f118c780809",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Fix another pattern for which the LIKE optimization does not work for a non-TEXT affinity.  Case found by Manuel Rigger.\n\nFossilOrigin-Name: 740201107ae802c12b678e388ea524db01ad0eb70601c78490ad63eae0fe6cf1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (zNew[0]+1=='0' && iTo==1)",
          "",
          "[Added Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: # 2019-05-01",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "",
          "[Removed Lines]",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "",
          "[Added Lines]",
          "182: # another case of the above reported on the mailing list by Manuel Rigger.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "191: # 2019-02-27",
          "192: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "193: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # 2019-05-08",
          "192: # Yet another case for the above from Manuel Rigger.",
          "193: #",
          "194: do_execsql_test like3-5.400 {",
          "195:   DROP TABLE IF EXISTS t0;",
          "196:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "197:   INSERT INTO t0(c0) VALUES ('./');",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "",
          "---------------"
        ]
      }
    }
  ]
}