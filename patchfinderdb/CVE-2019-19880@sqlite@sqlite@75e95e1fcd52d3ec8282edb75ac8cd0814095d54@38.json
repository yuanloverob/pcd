{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92107a38dccca75441fb080875e24822ec7a7695",
      "candidate_info": {
        "commit_hash": "92107a38dccca75441fb080875e24822ec7a7695",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92107a38dccca75441fb080875e24822ec7a7695",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/walfault2.test",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walfault2.test and walvfs.test.\n\nFossilOrigin-Name: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/walfault2.test||test/walfault2.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   walfault2.test",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2010 May 03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/malloc_common.tcl",
          "19: source $testdir/lock_common.tcl",
          "21: ifcapable !wal {finish_test ; return }",
          "22: set testprefix walfault2",
          "24: #-------------------------------------------------------------------------",
          "25: # Inject faults while truncating the wal file.",
          "26: #",
          "27: do_execsql_test 1.0 {",
          "28:   PRAGMA auto_vacuum = 0;",
          "29:   CREATE TABLE t1(a, b);",
          "30:   PRAGMA journal_mode = wal;",
          "31:   WITH s(i) AS (",
          "32:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "33:   )",
          "34:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "35: } {wal}",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "42:   execsql {",
          "43:     PRAGMA wal_checkpoint;",
          "44:     PRAGMA journal_size_limit = 10000;",
          "45:     PRAGMA synchronous = full;",
          "46:   }",
          "47: } -body {",
          "48:   execsql { INSERT INTO t1 VALUES(1,1) }",
          "49: } -test {",
          "50:   faultsim_test_result {0 {}}",
          "51: }",
          "53: #-------------------------------------------------------------------------",
          "54: # Inject faults while rewriting checksums.",
          "55: #",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   PRAGMA auto_vacuum = 0;",
          "59:   CREATE TABLE t1(a, b);",
          "60:   PRAGMA journal_mode = wal;",
          "61:   WITH s(i) AS (",
          "62:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "63:   )",
          "64:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "65: } {wal}",
          "66: faultsim_save_and_close",
          "68: do_faultsim_test 2 -prep {",
          "69:   faultsim_restore_and_reopen",
          "70:   execsql {",
          "71:     PRAGMA cache_size = 2;",
          "72:     BEGIN;",
          "73:     UPDATE t1 SET a=randomblob(400);",
          "74:     UPDATE t1 SET b=randomblob(400);",
          "75:     UPDATE t1 SET a=randomblob(400);",
          "76:     UPDATE t1 SET b=randomblob(400);",
          "77:     UPDATE t1 SET a=randomblob(400);",
          "78:     UPDATE t1 SET b=randomblob(400);",
          "79:     UPDATE t1 SET a=randomblob(400);",
          "80:     UPDATE t1 SET b=randomblob(400);",
          "81:   }",
          "82: } -body {",
          "83:   execsql COMMIT",
          "84: } -test {",
          "85:   faultsim_test_result {0 {}}",
          "86: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "277: db close",
          "278: tvfs delete",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Check that a checkpoint fails if it cannot get the CHECKPOINTER lock",
          "280: #",
          "281: reset_db",
          "282: tvfs filter {}",
          "283: db close",
          "284: sqlite3 db test.db -vfs tvfs",
          "285: do_execsql_test 7.0 {",
          "286:   PRAGMA auto_vacuum = 0;",
          "287:   PRAGMA page_size = 1024;",
          "288:   CREATE TABLE t1(x);",
          "289:   PRAGMA journal_mode = wal;",
          "290:   WITH s(i) AS (",
          "291:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "292:   )",
          "293:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "294: } {wal}",
          "296: tvfs script xShmLock",
          "297: tvfs filter xShmLock",
          "298: proc xShmLock {method file handle spec} {",
          "299:   if {$spec==\"1 1 lock exclusive\"} {",
          "300:     return SQLITE_BUSY",
          "301:   }",
          "302:   return SQLITE_OK",
          "303: }",
          "305: do_execsql_test 7.1 {",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
      "candidate_info": {
        "commit_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid reading off the front of a page buffer when balancing a corrupt btree page.\n\nFossilOrigin-Name: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6663:     assert( idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB );",
          "6664:     assert( idx+sz <= (int)pPage->pBt->usableSize );",
          "6665:     pPage->nFree -= (u16)(2 + sz);",
          "6667:     if( iChild ){",
          "6668:       put4byte(&data[idx], iChild);",
          "6669:     }",
          "6670:     pIns = pPage->aCellIdx + i*2;",
          "6671:     memmove(pIns+2, pIns, 2*(pPage->nCell - i));",
          "",
          "[Removed Lines]",
          "6666:     memcpy(&data[idx], pCell, sz);",
          "",
          "[Added Lines]",
          "6672:       memcpy(&data[idx+4], pCell+4, sz-4);",
          "6674:     }else{",
          "6675:       memcpy(&data[idx], pCell, sz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
      "candidate_info": {
        "commit_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove code from the constraint checker that generates virtual column values with the incorrect time.  Turns out the the regular code for all other columns works correctly and so the incorrect special-case code is not actually needed.  Fix for ticket [3ea175512444b0d1].\n\nFossilOrigin-Name: 5b4c0f2ddc6f324e23bbde0ee3d1ab672cfe8ab5044c9b693f4c33cdd75c211e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1862:         x = regNewData;",
          "1863:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1864:         VdbeComment((v, \"rowid\"));",
          "1872:       }else{",
          "1873:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "1874:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "[Removed Lines]",
          "1865: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1866:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1867:         pParse->iSelfTab = -(regNewData+1);",
          "1868:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1869:         pParse->iSelfTab = 0;",
          "1870:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1871: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
      "candidate_info": {
        "commit_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem with bytecode generation when a query involves two or more indexes on expressions connected by OR. Ticket [d96eba87698a428c1ddd0790ea04]\n\nFossilOrigin-Name: 7e4ed8b5c2047b69bbb037497111e56e465a4d9f8afca3b337f9ac744471dc4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "780:       pOrTerm = pOrWc->a;",
          "781:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "782:         assert( pOrTerm->eOperator & WO_EQ );",
          "783:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       Expr *pLeft = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "800:         }",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         break;",
          "804:       }",
          "805:       if( i<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:         assert( pOrTerm->eOperator & WO_EQ );",
          "820:         if( pOrTerm->leftCursor!=iCursor ){",
          "821:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "823:           okToChngToIN = 0;",
          "824:         }else{",
          "825:           int affLeft, affRight;",
          "",
          "[Removed Lines]",
          "822:         }else if( pOrTerm->u.leftColumn!=iColumn ){",
          "",
          "[Added Lines]",
          "824:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "825:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "826:         )){",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #-------------------------------------------------------------------------",
          "235: # Test that ticket [d96eba87] has been fixed.",
          "236: #",
          "237: do_execsql_test 5.0 {",
          "238:   CREATE TABLE t5(a INTEGER, b INTEGER);",
          "239:   INSERT INTO t5 VALUES(2, 4), (3, 9);",
          "240: }",
          "241: do_execsql_test 5.1 {",
          "242:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "243: } {2 4 3 9}",
          "244: do_execsql_test 5.2 {",
          "245:   CREATE INDEX t5a ON t5( abs(a) );",
          "246:   CREATE INDEX t5b ON t5( abs(b) );",
          "247: }",
          "248: do_execsql_test 5.4 {",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
      "candidate_info": {
        "commit_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove redundant code resulting from a merge error on the previous check-in.\n\nFossilOrigin-Name: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b855acf1831943b3914491ed0bc333131321930cab480a5281012a3aebbba492",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:         continue;",
          "1499:       }",
          "1502:       if( overrideError!=OE_Default ){",
          "1503:         onError = overrideError;",
          "1504:       }else if( onError==OE_Default ){",
          "",
          "[Removed Lines]",
          "1500:       onError = pTab->aCol[i].notNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}