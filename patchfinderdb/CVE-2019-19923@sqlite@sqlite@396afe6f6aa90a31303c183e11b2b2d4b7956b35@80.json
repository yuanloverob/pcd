{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
      "candidate_info": {
        "commit_hash": "0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0708054570e0cb484491cee24a2ff3a8d54fe4b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Add an extra IO-error test to windowfault.test.\n\nFossilOrigin-Name: 5b8c44cd39c529e8adbc51f67088409e963515b988868856120a59e6c7160210",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2edbf3b8c643edcd5823eb907fd7531cf5be8a8b6a014fa1b123eb0ea3231cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   faultsim_test_result {0 {1 2 5 6 9 10}}",
          "163: }",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: # The following test causes a cursor in REQURESEEK state to be passed",
          "167: # to sqlite3BtreeDelete(). An error is simulated within the seek operation",
          "168: # to restore the cursors position.",
          "169: #",
          "170: reset_db",
          "171: set big [string repeat x 900]",
          "172: do_execsql_test 9.0 {",
          "173:   PRAGMA page_size = 512;",
          "174:   PRAGMA cache_size = 2;",
          "175:   CREATE TABLE t(x INTEGER PRIMARY KEY, y TEXT);",
          "176:   WITH s(i) AS (",
          "177:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<1900",
          "178:   )",
          "179:   INSERT INTO t(y) SELECT $big FROM s;",
          "180: }",
          "181: db close",
          "183: testvfs tvfs -default 1",
          "184: tvfs script vfs_callback",
          "185: tvfs filter xRead",
          "187: sqlite3 db test.db",
          "188: proc vfs_callback {method file args} {",
          "189:   if {$file==\"\" && [info exists ::tmp_read_fail]} {",
          "190:     incr ::tmp_read_fail -1",
          "191:     if {$::tmp_read_fail<=0} {",
          "192:       return \"SQLITE_IOERR\"",
          "193:     }",
          "194:   }",
          "195:   return \"SQLITE_OK\"",
          "196: }",
          "198: set FAULTSIM(tmpread) [list                \\",
          "199:   -injectstart   tmpread_injectstart       \\",
          "200:   -injectstop    tmpread_injectstop        \\",
          "201:   -injecterrlist {{1 {disk I/O error}}}    \\",
          "202: ]",
          "203: proc tmpread_injectstart {iFail} {",
          "204:   set ::tmp_read_fail $iFail",
          "205: }",
          "206: proc tmpread_injectstop {} {",
          "207:   set ret [expr $::tmp_read_fail<=0]",
          "208:   unset -nocomplain ::tmp_read_fail",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "215:     WINDOW win AS (",
          "216:       ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1800 FOLLOWING",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "220:   faultsim_test_result {0 {}}",
          "221: }",
          "223: catch {db close}",
          "224: tvfs delete",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
      "candidate_info": {
        "commit_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a31dc201e905816f97fd20001cb5f154276f91d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "If the initial byte of a record is a large value, then always used the generalized record comparison routine sqlite3VdbeRecordCompare() rather than one of the specialized versions that are optimized for shorter records.\n\nFossilOrigin-Name: c1ac00706bae45fe9735061ada025880606cdfb8ecfdaa36b4e2d04275820861",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 906d1fd8650874236e0bf5734d5347dcc45ec036164a56570fec37da4ffeaf8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5552:             sqlite3_free(pCellKey);",
          "5553:             goto moveto_finish;",
          "5554:           }",
          "5556:           sqlite3_free(pCellKey);",
          "5557:         }",
          "5558:         assert(",
          "",
          "[Removed Lines]",
          "5555:           c = xRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "[Added Lines]",
          "5555:           c = sqlite3VdbeRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
      "candidate_info": {
        "commit_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Performance optimizations in the rtreeStepToLeaf() routine of RTree.\n\nFossilOrigin-Name: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:   eInt = pRtree->eCoordType==RTREE_COORD_INT32;",
          "1566:   while( (p = rtreeSearchPointFirst(pCur))!=0 && p->iLevel>0 ){",
          "1567:     pNode = rtreeNodeOfFirstSearchPoint(pCur, &rc);",
          "1568:     if( rc ) return rc;",
          "1569:     nCell = NCELL(pNode);",
          "1570:     assert( nCell<200 );",
          "1571:     while( p->iCell<nCell ){",
          "1572:       sqlite3_rtree_dbl rScore = (sqlite3_rtree_dbl)-1;",
          "1574:       eWithin = FULLY_WITHIN;",
          "1575:       for(ii=0; ii<nConstraint; ii++){",
          "1576:         RtreeConstraint *pConstraint = pCur->aConstraint + ii;",
          "",
          "[Removed Lines]",
          "1573:       u8 *pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "[Added Lines]",
          "1567:     u8 *pCellData;",
          "1572:     pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:         }else{",
          "1584:           rtreeNonleafConstraint(pConstraint, eInt, pCellData, &eWithin);",
          "1585:         }",
          "1587:       }",
          "1589:       if( eWithin==NOT_WITHIN ) continue;",
          "1590:       x.iLevel = p->iLevel - 1;",
          "1591:       if( x.iLevel ){",
          "1592:         x.id = readInt64(pCellData);",
          "",
          "[Removed Lines]",
          "1586:         if( eWithin==NOT_WITHIN ) break;",
          "1588:       p->iCell++;",
          "",
          "[Added Lines]",
          "1587:         if( eWithin==NOT_WITHIN ){",
          "1588:           p->iCell++;",
          "1589:           pCellData += pRtree->nBytesPerCell;",
          "1590:           break;",
          "1591:         }",
          "1594:       p->iCell++;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6488271f055df2c2f403883cb8eb6ad459da2222",
      "candidate_info": {
        "commit_hash": "6488271f055df2c2f403883cb8eb6ad459da2222",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6488271f055df2c2f403883cb8eb6ad459da2222",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Change the parser on this branch to more closely match trunk. This saves a few more cycles.\n\nFossilOrigin-Name: be01b801fbc258f0ab9542130cec12a5ea5e2d0bf087684a9eda909ad459c211",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcc8b38ac75b731a4cd2873ab83f423be036467a511b617c779869de9bbb5383",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036: %endif  SQLITE_OMIT_CAST",
          "1040: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP. {",
          "1041:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1042: }",
          "1043: expr(A) ::= id(X) LP STAR RP. {",
          "1044:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1045: }",
          "1048: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1050:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1052: }",
          "1054:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1056: }",
          "1057: %endif",
          "",
          "[Removed Lines]",
          "1039: %ifdef SQLITE_OMIT_WINDOWFUNC",
          "1046: %endif",
          "1049: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_opt(F) over_opt(Z). {",
          "1051:   sqlite3WindowAttach(pParse, A, F, Z);",
          "1053: expr(A) ::= id(X) LP STAR RP filter_opt(F) over_opt(Z). {",
          "1055:   sqlite3WindowAttach(pParse, A, F, Z);",
          "",
          "[Added Lines]",
          "1047: %type filter_over {",
          "1048:   struct FunctionTail {",
          "1049:     Window *pWin;",
          "1050:     Expr *pFilter;",
          "1051:   }",
          "1052: }",
          "1053: %destructor filter_over {",
          "1054:   sqlite3WindowDelete(pParse->db, $$.pWin);",
          "1055:   sqlite3ExprDelete(pParse->db, $$.pFilter);",
          "1056: }",
          "1057: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(F). {",
          "1059:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "1061: expr(A) ::= id(X) LP STAR RP filter_over(F). {",
          "1063:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1659: %type part_opt {ExprList*}",
          "1660: %destructor part_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "1665: %type range_or_rows {int}",
          "",
          "[Removed Lines]",
          "1662: %type filter_opt {Expr*}",
          "1663: %destructor filter_opt {sqlite3ExprDelete(pParse->db, $$);}",
          "",
          "[Added Lines]",
          "1670: %type filter_clause {Expr*}",
          "1671: %destructor filter_clause {sqlite3ExprDelete(pParse->db, $$);}",
          "1673: %type over_clause {Window*}",
          "1674: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1726: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1727: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1733:   A = Z;",
          "1734:   assert( A!=0 );",
          "1735: }",
          "1737:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1738:   if( A ){",
          "1739:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1740:   }",
          "1741: }",
          "",
          "[Removed Lines]",
          "1729: %type over_opt {Window*}",
          "1730: %destructor over_opt {sqlite3WindowDelete(pParse->db, $$);}",
          "1731: over_opt(A) ::= . { A=0; }",
          "1732: over_opt(A) ::= OVER LP window(Z) RP. {",
          "1736: over_opt(A) ::= OVER nm(Z). {",
          "1743: filter_opt(A) ::= .                            { A = 0; }",
          "1744: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Added Lines]",
          "1740: filter_over(F) ::= filter_clause(A) over_clause(B). {",
          "1741:   F.pFilter = A;",
          "1742:   F.pWin = B;",
          "1743: }",
          "1744: filter_over(F) ::= over_clause(B). {",
          "1745:   F.pFilter = 0;",
          "1746:   F.pWin = B;",
          "1747: }",
          "1748: filter_over(F) ::= filter_clause(A). {",
          "1749:   F.pFilter = A;",
          "1750:   F.pWin = 0;",
          "1751: }",
          "1753: over_clause(A) ::= OVER LP window(Z) RP. {",
          "1757: over_clause(A) ::= OVER nm(Z). {",
          "1764: filter_clause(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
      "candidate_info": {
        "commit_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95866af326ad06f6162fc7448100e0162ea2e2e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Abort the OP_Savepoint opcode early if a virtual table xSync method fails, perhaps due to an interrupt.\n\nFossilOrigin-Name: 672e749aef7351de3c69b365c1f80c756fda4e261b5d2ac1faa01d3a7d5a4c49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a89b38605661e36d192df1d074383b704b34a959fcbc169837c0d4f6848f3208",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3293:           db->mDbFlags |= DBFLAG_SchemaChange;",
          "3294:         }",
          "3295:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3296:       if( rc ) goto abort_due_to_error;",
          "",
          "---------------"
        ]
      }
    }
  ]
}