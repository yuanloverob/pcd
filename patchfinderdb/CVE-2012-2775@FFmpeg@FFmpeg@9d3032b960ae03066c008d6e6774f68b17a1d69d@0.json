{
  "cve_id": "CVE-2012-2775",
  "cve_desc": "Unspecified vulnerability in the read_var_block_data function in libavcodec/alsdec.c in FFmpeg before 0.11, and Libav 0.7.x before 0.7.7 and 0.8.x before 0.8.4, has unknown impact and attack vectors, related to a large order and an \"out of array write in quant_cof.\"",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "9d3032b960ae03066c008d6e6774f68b17a1d69d",
  "patch_info": {
    "commit_hash": "9d3032b960ae03066c008d6e6774f68b17a1d69d",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/9d3032b960ae03066c008d6e6774f68b17a1d69d",
    "files": [
      "libavcodec/alsdec.c"
    ],
    "message": "alsdec: check opt_order.\n\nFixes out of array write in quant_cof\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/alsdec.c||libavcodec/alsdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/alsdec.c||libavcodec/alsdec.c": [
      "File: libavcodec/alsdec.c -> libavcodec/alsdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "663:             int opt_order_length = av_ceil_log2(av_clip((bd->block_length >> 3) - 1,",
      "664:                                                 2, sconf->max_order + 1));",
      "666:         } else {",
      "668:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "666:             if (*bd->opt_order > sconf->max_order) {",
      "667:                 av_log(avctx, AV_LOG_ERROR, \"Order too large\\n\");",
      "668:                 return -1;",
      "669:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95f81159de780d25e8ce69e3e3235efc7b6d10b7",
      "candidate_info": {
        "commit_hash": "95f81159de780d25e8ce69e3e3235efc7b6d10b7",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/95f81159de780d25e8ce69e3e3235efc7b6d10b7",
        "files": [
          "libavcodec/alsdec.c"
        ],
        "message": "alsdec: Consistently use a period at the end of error messages.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/alsdec.c||libavcodec/alsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ],
          "candidate": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alsdec.c||libavcodec/alsdec.c": [
          "File: libavcodec/alsdec.c -> libavcodec/alsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:             if (*bd->opt_order > sconf->max_order) {",
          "687:                 return AVERROR_INVALIDDATA;",
          "688:             }",
          "689:         } else {",
          "",
          "[Removed Lines]",
          "686:                 av_log(avctx, AV_LOG_ERROR, \"Predictor order too large!\\n\");",
          "",
          "[Added Lines]",
          "686:                 av_log(avctx, AV_LOG_ERROR, \"Predictor order too large.\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:                     int offset     = parcor_rice_table[sconf->coef_table][k][0];",
          "720:                     quant_cof[k] = decode_rice(gb, rice_param) + offset;",
          "721:                     if (quant_cof[k] < -64 || quant_cof[k] > 63) {",
          "723:                         return AVERROR_INVALIDDATA;",
          "724:                     }",
          "725:                 }",
          "",
          "[Removed Lines]",
          "722:                         av_log(avctx, AV_LOG_ERROR, \"quant_cof %d is out of range\\n\", quant_cof[k]);",
          "",
          "[Added Lines]",
          "722:                         av_log(avctx, AV_LOG_ERROR, \"quant_cof %d is out of range.\\n\", quant_cof[k]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1184:         current->master_channel = get_bits_long(gb, av_ceil_log2(channels));",
          "1186:         if (current->master_channel >= channels) {",
          "1188:             return -1;",
          "1189:         }",
          "",
          "[Removed Lines]",
          "1187:             av_log(ctx->avctx, AV_LOG_ERROR, \"Invalid master channel!\\n\");",
          "",
          "[Added Lines]",
          "1187:             av_log(ctx->avctx, AV_LOG_ERROR, \"Invalid master channel.\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1209:     }",
          "1211:     if (entries == channels) {",
          "1213:         return -1;",
          "1214:     }",
          "",
          "[Removed Lines]",
          "1212:         av_log(ctx->avctx, AV_LOG_ERROR, \"Damaged channel data!\\n\");",
          "",
          "[Added Lines]",
          "1212:         av_log(ctx->avctx, AV_LOG_ERROR, \"Damaged channel data.\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1370:         for (c = 0; c < avctx->channels; c++)",
          "1371:             if (ctx->chan_data[c] < ctx->chan_data_buffer) {",
          "1373:                 return -1;",
          "1374:             }",
          "",
          "[Removed Lines]",
          "1372:                 av_log(ctx->avctx, AV_LOG_ERROR, \"Invalid channel data!\\n\");",
          "",
          "[Added Lines]",
          "1372:                 av_log(ctx->avctx, AV_LOG_ERROR, \"Invalid channel data.\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1479:     ctx->frame.nb_samples = ctx->cur_frame_length;",
          "1480:     if ((ret = ff_get_buffer(avctx, &ctx->frame)) < 0) {",
          "1482:         return ret;",
          "1483:     }",
          "",
          "[Removed Lines]",
          "1481:         av_log(avctx, AV_LOG_ERROR, \"get_buffer() failed\\n\");",
          "",
          "[Added Lines]",
          "1481:         av_log(avctx, AV_LOG_ERROR, \"get_buffer() failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1556:         if (ctx->cur_frame_length != sconf->frame_length &&",
          "1557:             ctx->crc_org != ctx->crc) {",
          "1559:         }",
          "1560:     }",
          "",
          "[Removed Lines]",
          "1558:             av_log(avctx, AV_LOG_ERROR, \"CRC error!\\n\");",
          "",
          "[Added Lines]",
          "1558:             av_log(avctx, AV_LOG_ERROR, \"CRC error.\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1617:     ctx->avctx = avctx;",
          "1619:     if (!avctx->extradata) {",
          "1621:         return -1;",
          "1622:     }",
          "1624:     if (read_specific_config(ctx)) {",
          "1626:         decode_end(avctx);",
          "1627:         return -1;",
          "1628:     }",
          "",
          "[Removed Lines]",
          "1620:         av_log(avctx, AV_LOG_ERROR, \"Missing required ALS extradata!\\n\");",
          "1625:         av_log(avctx, AV_LOG_ERROR, \"Reading ALSSpecificConfig failed!\\n\");",
          "",
          "[Added Lines]",
          "1620:         av_log(avctx, AV_LOG_ERROR, \"Missing required ALS extradata.\\n\");",
          "1625:         av_log(avctx, AV_LOG_ERROR, \"Reading ALSSpecificConfig failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1668:     if (!ctx->quant_cof              || !ctx->lpc_cof        ||",
          "1669:         !ctx->quant_cof_buffer       || !ctx->lpc_cof_buffer ||",
          "1670:         !ctx->lpc_cof_reversed_buffer) {",
          "1672:         return AVERROR(ENOMEM);",
          "1673:     }",
          "",
          "[Removed Lines]",
          "1671:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed!\\n\");",
          "",
          "[Added Lines]",
          "1671:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1693:         !ctx->opt_order || !ctx->store_prev_samples ||",
          "1694:         !ctx->use_ltp  || !ctx->ltp_lag ||",
          "1695:         !ctx->ltp_gain || !ctx->ltp_gain_buffer) {",
          "1697:         decode_end(avctx);",
          "1698:         return AVERROR(ENOMEM);",
          "1699:     }",
          "",
          "[Removed Lines]",
          "1696:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed!\\n\");",
          "",
          "[Added Lines]",
          "1696:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1711:                                            num_buffers);",
          "1713:         if (!ctx->chan_data_buffer || !ctx->chan_data || !ctx->reverted_channels) {",
          "1715:             decode_end(avctx);",
          "1716:             return AVERROR(ENOMEM);",
          "1717:         }",
          "",
          "[Removed Lines]",
          "1714:             av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed!\\n\");",
          "",
          "[Added Lines]",
          "1714:             av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1734:     if (!ctx->prev_raw_samples || !ctx->raw_buffer|| !ctx->raw_samples) {",
          "1736:         decode_end(avctx);",
          "1737:         return AVERROR(ENOMEM);",
          "1738:     }",
          "",
          "[Removed Lines]",
          "1735:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed!\\n\");",
          "",
          "[Added Lines]",
          "1735:         av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed.\\n\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1750:                                     avctx->channels *",
          "1751:                                     av_get_bytes_per_sample(avctx->sample_fmt));",
          "1752:         if (!ctx->crc_buffer) {",
          "1754:             decode_end(avctx);",
          "1755:             return AVERROR(ENOMEM);",
          "1756:         }",
          "",
          "[Removed Lines]",
          "1753:             av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed!\\n\");",
          "",
          "[Added Lines]",
          "1753:             av_log(avctx, AV_LOG_ERROR, \"Allocating buffer memory failed.\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04dc7e7e5e73a1cc01cb2333f24449e400ac9dd7",
      "candidate_info": {
        "commit_hash": "04dc7e7e5e73a1cc01cb2333f24449e400ac9dd7",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/04dc7e7e5e73a1cc01cb2333f24449e400ac9dd7",
        "files": [
          "libavcodec/alsdec.c"
        ],
        "message": "ALS error message pretty print\n\nOne prettier message.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/alsdec.c||libavcodec/alsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ],
          "candidate": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alsdec.c||libavcodec/alsdec.c": [
          "File: libavcodec/alsdec.c -> libavcodec/alsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:                                                 2, sconf->max_order + 1));",
          "666:             if (*bd->opt_order > sconf->max_order) {",
          "668:                 return -1;",
          "669:             }",
          "670:         } else {",
          "",
          "[Removed Lines]",
          "667:                 av_log(avctx, AV_LOG_ERROR, \"Order too large\\n\");",
          "",
          "[Added Lines]",
          "667:                 av_log(avctx, AV_LOG_ERROR, \"Predictor order too large!\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1b127515bb79c715933d0d4201e4ef3152b3dcb",
      "candidate_info": {
        "commit_hash": "a1b127515bb79c715933d0d4201e4ef3152b3dcb",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a1b127515bb79c715933d0d4201e4ef3152b3dcb",
        "files": [
          "libavcodec/alsdec.c"
        ],
        "message": "alsdec: check opt_order.\n\nFixes out of array write in quant_cof.\nAlso make sure no invalid opt_order stays in the context.\n\nFixes CVE-2012-2775\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 9853e41aa0a6cfff629ff7009685eb8bf8d64e7f)\n\nSigned-off-by: Anton Khirnov <anton@khirnov.net>",
        "before_after_code_files": [
          "libavcodec/alsdec.c||libavcodec/alsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ],
          "candidate": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alsdec.c||libavcodec/alsdec.c": [
          "File: libavcodec/alsdec.c -> libavcodec/alsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:             int opt_order_length = av_ceil_log2(av_clip((bd->block_length >> 3) - 1,",
          "664:                                                 2, sconf->max_order + 1));",
          "666:         } else {",
          "668:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:             if (*bd->opt_order > sconf->max_order) {",
          "668:                 av_log(avctx, AV_LOG_ERROR, \"Predictor order too large!\\n\");",
          "669:                 return AVERROR_INVALIDDATA;",
          "670:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6ba39f931a82561389553ab2ac0ddb61b73a1e3",
      "candidate_info": {
        "commit_hash": "b6ba39f931a82561389553ab2ac0ddb61b73a1e3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b6ba39f931a82561389553ab2ac0ddb61b73a1e3",
        "files": [
          "libavcodec/alsdec.c"
        ],
        "message": "alsdec: check opt_order.\n\nFixes out of array write in quant_cof.\nAlso make sure no invalid opt_order stays in the context.\n\nFixes CVE-2012-2775\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 9853e41aa0a6cfff629ff7009685eb8bf8d64e7f)\n\nSigned-off-by: Anton Khirnov <anton@khirnov.net>\n(cherry picked from commit a1b127515bb79c715933d0d4201e4ef3152b3dcb)\n\nSigned-off-by: Anton Khirnov <anton@khirnov.net>",
        "before_after_code_files": [
          "libavcodec/alsdec.c||libavcodec/alsdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ],
          "candidate": [
            "libavcodec/alsdec.c||libavcodec/alsdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/alsdec.c||libavcodec/alsdec.c": [
          "File: libavcodec/alsdec.c -> libavcodec/alsdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:             int opt_order_length = av_ceil_log2(av_clip((bd->block_length >> 3) - 1,",
          "663:                                                 2, sconf->max_order + 1));",
          "665:         } else {",
          "667:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:             if (*bd->opt_order > sconf->max_order) {",
          "667:                 av_log(avctx, AV_LOG_ERROR, \"Predictor order too large!\\n\");",
          "668:                 return AVERROR_INVALIDDATA;",
          "669:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}