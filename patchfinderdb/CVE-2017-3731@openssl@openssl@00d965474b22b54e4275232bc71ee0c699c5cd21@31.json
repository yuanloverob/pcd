{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "389252a37e37d096d584899a4bfb47c7adce3710",
      "candidate_info": {
        "commit_hash": "389252a37e37d096d584899a4bfb47c7adce3710",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/389252a37e37d096d584899a4bfb47c7adce3710",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Fix a few more typos\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3066)\n(cherry picked from commit 1ee4b98e695cd041da931c10fbdaf82f0ee0f268)",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c"
        ]
      }
    },
    {
      "candidate_hash": "3cca3e29f9c694585783074ba5fcc90dfd58c1f7",
      "candidate_info": {
        "commit_hash": "3cca3e29f9c694585783074ba5fcc90dfd58c1f7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3cca3e29f9c694585783074ba5fcc90dfd58c1f7",
        "files": [
          "test/build.info",
          "test/exdatatest.c",
          "test/recipes/03-test_exdata.t"
        ],
        "message": "Exdata test was never enabled.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2787)\n(cherry picked from commit 629192c1b9f17965e0a6b73229b7b1e004bfbd98)",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/exdatatest.c||test/exdatatest.c",
          "test/recipes/03-test_exdata.t||test/recipes/03-test_exdata.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: IF[{- !$disabled{tests} -}]",
          "2:   PROGRAMS_NO_INST=\\",
          "3:           aborttest \\",
          "5:           ectest ecdsatest ecdhtest gmdifftest pbelutest ideatest \\",
          "6:           md2test md4test md5test \\",
          "7:           hmactest wp_test \\",
          "",
          "[Removed Lines]",
          "4:           sanitytest bntest \\",
          "",
          "[Added Lines]",
          "4:           sanitytest exdatatest bntest \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   INCLUDE[sanitytest]=../include",
          "27:   DEPEND[sanitytest]=../libcrypto",
          "29:   SOURCE[bntest]=bntest.c",
          "30:   INCLUDE[bntest]=.. ../crypto/include ../include",
          "31:   DEPEND[bntest]=../libcrypto",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   SOURCE[exdatatest]=exdatatest.c",
          "30:   INCLUDE[exdatatest]=../include",
          "31:   DEPEND[exdatatest]=../libcrypto",
          "",
          "---------------"
        ],
        "test/exdatatest.c||test/exdatatest.c": [
          "File: test/exdatatest.c -> test/exdatatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdio.h>",
          "12: #include <string.h>",
          "13: #include <stdlib.h>",
          "14: #include <openssl/crypto.h>",
          "20: static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "21:           int idx, long argl, void *argp)",
          "22: {",
          "26: }",
          "29:           void *from_d, int idx, long argl, void *argp)",
          "30: {",
          "34:     return 0;",
          "35: }",
          "37: static void exfree(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "38:             int idx, long argl, void *argp)",
          "39: {",
          "43: }",
          "45: typedef struct myobj_st {",
          "46:     CRYPTO_EX_DATA ex_data;",
          "47:     int id;",
          "48: } MYOBJ;",
          "50: static MYOBJ *MYOBJ_new()",
          "51: {",
          "52:     static int count = 0;",
          "53:     MYOBJ *obj = OPENSSL_malloc(sizeof(*obj));",
          "56:     obj->id = ++count;",
          "59:     return obj;",
          "60: }",
          "62: static void MYOBJ_sethello(MYOBJ *obj, char *cp)",
          "63: {",
          "68: }",
          "70: static char *MYOBJ_gethello(MYOBJ *obj)",
          "71: {",
          "73: }",
          "75: static void MYOBJ_free(MYOBJ *obj)",
          "",
          "[Removed Lines]",
          "11: #include <assert.h>",
          "16: static long sargl;",
          "17: static void *sargp;",
          "18: static int sidx;",
          "23:     assert(idx == sidx);",
          "24:     assert(argl == sargl);",
          "25:     assert(argp == sargp);",
          "28: static int exdup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from,",
          "31:     assert(idx == sidx);",
          "32:     assert(argl == sargl);",
          "33:     assert(argp == sargp);",
          "40:     assert(idx == sidx);",
          "41:     assert(argl == sargl);",
          "42:     assert(argp == sargp);",
          "54:     int st;",
          "57:     st = CRYPTO_new_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);",
          "58:     assert(st != 0);",
          "64:     int st;",
          "66:     st = CRYPTO_set_ex_data(&obj->ex_data, sidx, cp);",
          "67:     assert(st != 0);",
          "72:     return CRYPTO_get_ex_data(&obj->ex_data, sidx);",
          "",
          "[Added Lines]",
          "13: #include <assert.h>",
          "16: static long saved_argl;",
          "17: static void *saved_argp;",
          "18: static int saved_idx;",
          "23:     assert(idx == saved_idx);",
          "24:     assert(argl == saved_argl);",
          "25:     assert(argp == saved_argp);",
          "28: static int exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "31:     assert(idx == saved_idx);",
          "32:     assert(argl == saved_argl);",
          "33:     assert(argp == saved_argp);",
          "40:     assert(idx == saved_idx);",
          "41:     assert(argl == saved_argl);",
          "42:     assert(argp == saved_argp);",
          "48:     int st;",
          "57:     obj->st = CRYPTO_new_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);",
          "58:     assert(obj->st != 0);",
          "64:     obj->st = CRYPTO_set_ex_data(&obj->ex_data, saved_idx, cp);",
          "65:     assert(obj->st != 0);",
          "70:     return CRYPTO_get_ex_data(&obj->ex_data, saved_idx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     char *p;",
          "87:     p = strdup(\"hello world\");",
          "92:     t1 = MYOBJ_new();",
          "93:     t2 = MYOBJ_new();",
          "94:     MYOBJ_sethello(t1, p);",
          "95:     cp = MYOBJ_gethello(t1);",
          "96:     assert(cp == p);",
          "97:     cp = MYOBJ_gethello(t2);",
          "98:     assert(cp == NULL);",
          "99:     MYOBJ_free(t1);",
          "100:     MYOBJ_free(t2);",
          "102:     free(p);",
          "103:     return 0;",
          "104: }",
          "",
          "[Removed Lines]",
          "88:     sargl = 21;",
          "89:     sargp = malloc(1);",
          "90:     sidx = CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_APP, sargl, sargp,",
          "91:                                    exnew, exdup, exfree);",
          "101:     free(sargp);",
          "",
          "[Added Lines]",
          "86:     saved_argl = 21;",
          "87:     saved_argp = malloc(1);",
          "88:     saved_idx = CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_APP,",
          "89:                                         saved_argl, saved_argp,",
          "90:                                         exnew, exdup, exfree);",
          "96:     if (cp != p)",
          "97:         return 1;",
          "100:     if (cp != NULL)",
          "101:         return 1;",
          "104:     free(saved_argp);",
          "",
          "---------------"
        ],
        "test/recipes/03-test_exdata.t||test/recipes/03-test_exdata.t": [
          "File: test/recipes/03-test_exdata.t -> test/recipes/03-test_exdata.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use OpenSSL::Test::Simple;",
          "12: simple_test(\"test_exdata\", \"exdatatest\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c81fa2e187c9dfb2cf67d6e183fee3d2a726c59f",
      "candidate_info": {
        "commit_hash": "c81fa2e187c9dfb2cf67d6e183fee3d2a726c59f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c81fa2e187c9dfb2cf67d6e183fee3d2a726c59f",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Configurations/10-main.conf: omit redundant -lresolv from Solaris configs.\n\nGH#2816\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 8cfc21f53af5187497a8567bb2801c36472d7016)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         inherit_from     => [ \"BASE_unix\" ],",
          "180:         template         => 1,",
          "181:         cflags           => \"-DFILIO_H\",",
          "183:         dso_scheme       => \"dlfcn\",",
          "184:         thread_scheme    => \"pthreads\",",
          "185:         shared_target    => \"solaris-shared\",",
          "",
          "[Removed Lines]",
          "182:         ex_libs          => add(\"-lresolv -lsocket -lnsl -ldl\"),",
          "",
          "[Added Lines]",
          "182:         ex_libs          => add(\"-lsocket -lnsl -ldl\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca0a7a9a4ebe9bb0f646930262f43372fa73254c",
      "candidate_info": {
        "commit_hash": "ca0a7a9a4ebe9bb0f646930262f43372fa73254c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ca0a7a9a4ebe9bb0f646930262f43372fa73254c",
        "files": [
          "crypto/asn1/a_time.c"
        ],
        "message": "Fix potential memory leak in ASN1_TIME_to_generalizedtime()\n\nIf ret is allocated, it may be leaked on error.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2666)\n(cherry picked from commit 4483e23444fa18034344874ffbe67919207e9e47)",
        "before_after_code_files": [
          "crypto/asn1/a_time.c||crypto/asn1/a_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_time.c||crypto/asn1/a_time.c": [
          "File: crypto/asn1/a_time.c -> crypto/asn1/a_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t,",
          "63:                                                    ASN1_GENERALIZEDTIME **out)",
          "64: {",
          "66:     char *str;",
          "67:     int newlen;",
          "",
          "[Removed Lines]",
          "65:     ASN1_GENERALIZEDTIME *ret;",
          "",
          "[Added Lines]",
          "65:     ASN1_GENERALIZEDTIME *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     if (out == NULL || *out == NULL) {",
          "73:         if ((ret = ASN1_GENERALIZEDTIME_new()) == NULL)",
          "77:     } else",
          "78:         ret = *out;",
          "81:     if (t->type == V_ASN1_GENERALIZEDTIME) {",
          "82:         if (!ASN1_STRING_set(ret, t->data, t->length))",
          "85:     }",
          "88:     if (!ASN1_STRING_set(ret, NULL, t->length + 2))",
          "91:     newlen = t->length + 2 + 1;",
          "92:     str = (char *)ret->data;",
          "",
          "[Removed Lines]",
          "74:             return NULL;",
          "75:         if (out)",
          "83:             return NULL;",
          "84:         return ret;",
          "89:         return NULL;",
          "",
          "[Added Lines]",
          "74:             goto err;",
          "81:             goto err;",
          "82:         goto done;",
          "87:         goto err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     else",
          "97:         OPENSSL_strlcpy(str, \"20\", newlen);",
          "102: }",
          "104: int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)",
          "105: {",
          "106:     ASN1_TIME t;",
          "",
          "[Removed Lines]",
          "99:     OPENSSL_strlcat(str, (char *)t->data, newlen);",
          "101:     return ret;",
          "",
          "[Added Lines]",
          "97:     OPENSSL_strlcat(str, (const char *)t->data, newlen);",
          "99:  done:",
          "100:    if (out != NULL && *out == NULL)",
          "102:    return ret;",
          "104:  err:",
          "105:     if (out == NULL || *out != ret)",
          "106:         ASN1_GENERALIZEDTIME_free(ret);",
          "107:     return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ba62f06496f809814ab7fd4028887216387d65b",
      "candidate_info": {
        "commit_hash": "2ba62f06496f809814ab7fd4028887216387d65b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ba62f06496f809814ab7fd4028887216387d65b",
        "files": [
          "crypto/evp/e_aes_cbc_hmac_sha256.c"
        ],
        "message": "Don't access memory before checking the correct length in aesni_cbc_hmac_sha256_ctrl in case EVP_CTRL_AEAD_TLS1_AAD.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3023)\n\n(cherry picked from commit 1b6f5a4d3b8cdb02e0bba6878a2b70c850522440)",
        "before_after_code_files": [
          "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha256.c -> crypto/evp/e_aes_cbc_hmac_sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "777:     case EVP_CTRL_AEAD_TLS1_AAD:",
          "778:         {",
          "779:             unsigned char *p = ptr;",
          "782:             if (arg != EVP_AEAD_TLS1_AAD_LEN)",
          "783:                 return -1;",
          "785:             if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "786:                 key->payload_length = len;",
          "787:                 if ((key->aux.tls_ver =",
          "",
          "[Removed Lines]",
          "780:             unsigned int len = p[arg - 2] << 8 | p[arg - 1];",
          "",
          "[Added Lines]",
          "780:             unsigned int len;",
          "785:             len = p[arg - 2] << 8 | p[arg - 1];",
          "",
          "---------------"
        ]
      }
    }
  ]
}