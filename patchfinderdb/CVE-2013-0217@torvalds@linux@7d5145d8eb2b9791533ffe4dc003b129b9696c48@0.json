{
  "cve_id": "CVE-2013-0217",
  "cve_desc": "Memory leak in drivers/net/xen-netback/netback.c in the Xen netback functionality in the Linux kernel before 3.7.8 allows guest OS users to cause a denial of service (memory consumption) by triggering certain error conditions.",
  "repo": "torvalds/linux",
  "patch_hash": "7d5145d8eb2b9791533ffe4dc003b129b9696c48",
  "patch_info": {
    "commit_hash": "7d5145d8eb2b9791533ffe4dc003b129b9696c48",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7d5145d8eb2b9791533ffe4dc003b129b9696c48",
    "files": [
      "drivers/net/xen-netback/netback.c"
    ],
    "message": "xen/netback: don't leak pages on failure in xen_netbk_tx_check_gop.\n\nSigned-off-by: Matthew Daley <mattjd@gmail.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nAcked-by: Ian Campbell <ian.campbell@citrix.com>\nAcked-by: Jan Beulich <JBeulich@suse.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
    ]
  },
  "patch_diff": {
    "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c": [
      "File: drivers/net/xen-netback/netback.c -> drivers/net/xen-netback/netback.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "147:  atomic_dec(&netbk->netfront_count);",
      "148: }",
      "151: static void make_tx_response(struct xenvif *vif,",
      "152:         struct xen_netif_tx_request *txp,",
      "153:         s8       st);",
      "",
      "[Removed Lines]",
      "150: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx);",
      "",
      "[Added Lines]",
      "150: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx,",
      "151:       u8 status);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1007: {",
      "1008:  struct gnttab_copy *gop = *gopp;",
      "1009:  u16 pending_idx = *((u16 *)skb->data);",
      "1013:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
      "1014:  int nr_frags = shinfo->nr_frags;",
      "1015:  int i, err, start;",
      "1018:  err = gop->status;",
      "1029:  start = (frag_get_pending_idx(&shinfo->frags[0]) == pending_idx);",
      "1031:  for (i = start; i < nr_frags; i++) {",
      "1032:   int j, newerr;",
      "1035:   pending_idx = frag_get_pending_idx(&shinfo->frags[i]);",
      "",
      "[Removed Lines]",
      "1010:  struct pending_tx_info *pending_tx_info = netbk->pending_tx_info;",
      "1011:  struct xenvif *vif = pending_tx_info[pending_idx].vif;",
      "1012:  struct xen_netif_tx_request *txp;",
      "1019:  if (unlikely(err)) {",
      "1020:   pending_ring_idx_t index;",
      "1021:   index = pending_index(netbk->pending_prod++);",
      "1022:   txp = &pending_tx_info[pending_idx].req;",
      "1023:   make_tx_response(vif, txp, XEN_NETIF_RSP_ERROR);",
      "1024:   netbk->pending_ring[index] = pending_idx;",
      "1025:   xenvif_put(vif);",
      "1026:  }",
      "1033:   pending_ring_idx_t index;",
      "",
      "[Added Lines]",
      "1017:  if (unlikely(err))",
      "1018:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_ERROR);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1039:   if (likely(!newerr)) {",
      "1041:    if (unlikely(err))",
      "1043:    continue;",
      "1044:   }",
      "1054:   if (err)",
      "",
      "[Removed Lines]",
      "1042:     xen_netbk_idx_release(netbk, pending_idx);",
      "1047:   txp = &netbk->pending_tx_info[pending_idx].req;",
      "1048:   make_tx_response(vif, txp, XEN_NETIF_RSP_ERROR);",
      "1049:   index = pending_index(netbk->pending_prod++);",
      "1050:   netbk->pending_ring[index] = pending_idx;",
      "1051:   xenvif_put(vif);",
      "",
      "[Added Lines]",
      "1033:     xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
      "1038:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_ERROR);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1058:   pending_idx = *((u16 *)skb->data);",
      "1060:   for (j = start; j < i; j++) {",
      "1061:    pending_idx = frag_get_pending_idx(&shinfo->frags[j]);",
      "1063:   }",
      "",
      "[Removed Lines]",
      "1059:   xen_netbk_idx_release(netbk, pending_idx);",
      "1062:    xen_netbk_idx_release(netbk, pending_idx);",
      "",
      "[Added Lines]",
      "1046:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
      "1049:    xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1095:   get_page(netbk->mmap_pages[pending_idx]);",
      "1097:  }",
      "1098: }",
      "",
      "[Removed Lines]",
      "1096:   xen_netbk_idx_release(netbk, pending_idx);",
      "",
      "[Added Lines]",
      "1083:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1476:    txp->size -= data_len;",
      "1477:   } else {",
      "1480:   }",
      "1482:   if (txp->flags & XEN_NETTXF_csum_blank)",
      "",
      "[Removed Lines]",
      "1479:    xen_netbk_idx_release(netbk, pending_idx);",
      "",
      "[Added Lines]",
      "1466:    xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1528:  xen_netbk_tx_submit(netbk);",
      "1529: }",
      "1532: {",
      "1533:  struct xenvif *vif;",
      "1534:  struct pending_tx_info *pending_tx_info;",
      "",
      "[Removed Lines]",
      "1531: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx)",
      "",
      "[Added Lines]",
      "1518: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx,",
      "1519:       u8 status)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1543:  vif = pending_tx_info->vif;",
      "1547:  index = pending_index(netbk->pending_prod++);",
      "1548:  netbk->pending_ring[index] = pending_idx;",
      "",
      "[Removed Lines]",
      "1545:  make_tx_response(vif, &pending_tx_info->req, XEN_NETIF_RSP_OKAY);",
      "",
      "[Added Lines]",
      "1533:  make_tx_response(vif, &pending_tx_info->req, status);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3f980bd827e6e81a050c518d60ed7811a83061d",
      "candidate_info": {
        "commit_hash": "b3f980bd827e6e81a050c518d60ed7811a83061d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b3f980bd827e6e81a050c518d60ed7811a83061d",
        "files": [
          "drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c"
        ],
        "message": "xen-netback: switch to NAPI + kthread 1:1 model\n\nThis patch implements 1:1 model netback. NAPI and kthread are utilized\nto do the weight-lifting job:\n\n- NAPI is used for guest side TX (host side RX)\n- kthread is used for guest side RX (host side TX)\n\nXenvif and xen_netbk are made into one structure to reduce code size.\n\nThis model provides better scheduling fairness among vifs. It is also\nprerequisite for implementing multiqueue for Xen netback.\n\nSigned-off-by: Wei Liu <wei.liu2@citrix.com>\nAcked-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ],
          "candidate": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h": [
          "File: drivers/net/xen-netback/common.h -> drivers/net/xen-netback/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <xen/grant_table.h>",
          "46: #include <xen/xenbus.h>",
          "50: struct xenvif {",
          "52:  domid_t          domid;",
          "53:  unsigned int     handle;",
          "62:  unsigned int rx_irq;",
          "75:  u8 can_sg:1;",
          "",
          "[Removed Lines]",
          "48: struct xen_netbk;",
          "56:  struct xen_netbk *netbk;",
          "58:  u8               fe_dev_addr[6];",
          "61:  unsigned int tx_irq;",
          "68:  struct list_head notify_list;",
          "71:  struct xen_netif_tx_back_ring tx;",
          "72:  struct xen_netif_rx_back_ring rx;",
          "",
          "[Added Lines]",
          "48: typedef unsigned int pending_ring_idx_t;",
          "49: #define INVALID_PENDING_RING_IDX (~0U)",
          "76: struct pending_tx_info {",
          "78:  pending_ring_idx_t head; /* head != INVALID_PENDING_RING_IDX",
          "82: };",
          "84: #define XEN_NETIF_TX_RING_SIZE __CONST_RING_SIZE(xen_netif_tx, PAGE_SIZE)",
          "85: #define XEN_NETIF_RX_RING_SIZE __CONST_RING_SIZE(xen_netif_rx, PAGE_SIZE)",
          "87: struct xenvif_rx_meta {",
          "88:  int id;",
          "89:  int size;",
          "90:  int gso_size;",
          "91: };",
          "94: #define INVALID_PENDING_IDX 0xFFFF",
          "96: #define MAX_BUFFER_OFFSET PAGE_SIZE",
          "98: #define MAX_PENDING_REQS 256",
          "106:  struct napi_struct napi;",
          "108:  unsigned int tx_irq;",
          "111:  struct xen_netif_tx_back_ring tx;",
          "112:  struct sk_buff_head tx_queue;",
          "113:  struct page *mmap_pages[MAX_PENDING_REQS];",
          "114:  pending_ring_idx_t pending_prod;",
          "115:  pending_ring_idx_t pending_cons;",
          "116:  u16 pending_ring[MAX_PENDING_REQS];",
          "117:  struct pending_tx_info pending_tx_info[MAX_PENDING_REQS];",
          "123:  struct gnttab_copy tx_copy_ops[2*MAX_PENDING_REQS];",
          "127:  struct task_struct *task;",
          "128:  wait_queue_head_t wq;",
          "133:  struct xen_netif_rx_back_ring rx;",
          "134:  struct sk_buff_head rx_queue;",
          "140:  RING_IDX rx_req_cons_peek;",
          "146:  struct gnttab_copy grant_copy_op[2*XEN_NETIF_RX_RING_SIZE];",
          "147:  struct xenvif_rx_meta meta[2*XEN_NETIF_RX_RING_SIZE];",
          "150:  u8               fe_dev_addr[6];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  unsigned long   credit_bytes;",
          "92:  unsigned long   credit_usec;",
          "",
          "[Removed Lines]",
          "88:  RING_IDX rx_req_cons_peek;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  unsigned long rx_gso_checksum_fixup;",
          "102:  struct net_device *dev;",
          "105: };",
          "107: static inline struct xenbus_device *xenvif_to_xenbus_device(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "100:  struct list_head schedule_list;",
          "101:  atomic_t         refcnt;",
          "104:  wait_queue_head_t waiting_to_free;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:  return to_xenbus_device(vif->dev->dev.parent);",
          "110: }",
          "115: struct xenvif *xenvif_alloc(struct device *parent,",
          "116:        domid_t domid,",
          "117:        unsigned int handle);",
          "",
          "[Removed Lines]",
          "112: #define XEN_NETIF_TX_RING_SIZE __CONST_RING_SIZE(xen_netif_tx, PAGE_SIZE)",
          "113: #define XEN_NETIF_RX_RING_SIZE __CONST_RING_SIZE(xen_netif_rx, PAGE_SIZE)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:      unsigned int rx_evtchn);",
          "122: void xenvif_disconnect(struct xenvif *vif);",
          "127: int xenvif_xenbus_init(void);",
          "128: void xenvif_xenbus_fini(void);",
          "",
          "[Removed Lines]",
          "124: void xenvif_get(struct xenvif *vif);",
          "125: void xenvif_put(struct xenvif *vif);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:      grant_ref_t tx_ring_ref,",
          "140:      grant_ref_t rx_ring_ref);",
          "151: void xen_netbk_check_rx_xenvif(struct xenvif *vif);",
          "156: void xen_netbk_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb);",
          "",
          "[Removed Lines]",
          "143: void xen_netbk_add_xenvif(struct xenvif *vif);",
          "144: void xen_netbk_remove_xenvif(struct xenvif *vif);",
          "147: void xen_netbk_schedule_xenvif(struct xenvif *vif);",
          "148: void xen_netbk_deschedule_xenvif(struct xenvif *vif);",
          "153: void xenvif_receive_skb(struct xenvif *vif, struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "164: unsigned int xen_netbk_count_skb_slots(struct xenvif *vif, struct sk_buff *skb);",
          "166: extern bool separate_tx_rx_irq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: int xen_netbk_tx_action(struct xenvif *vif, int budget);",
          "218: void xen_netbk_rx_action(struct xenvif *vif);",
          "220: int xen_netbk_kthread(void *data);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c": [
          "File: drivers/net/xen-netback/interface.c -> drivers/net/xen-netback/interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"common.h\"",
          "33: #include <linux/ethtool.h>",
          "34: #include <linux/rtnetlink.h>",
          "35: #include <linux/if_vlan.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <linux/kthread.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: #include <asm/xen/hypercall.h>",
          "40: #define XENVIF_QUEUE_LENGTH 32",
          "53: int xenvif_schedulable(struct xenvif *vif)",
          "54: {",
          "",
          "[Removed Lines]",
          "42: void xenvif_get(struct xenvif *vif)",
          "43: {",
          "44:  atomic_inc(&vif->refcnt);",
          "45: }",
          "47: void xenvif_put(struct xenvif *vif)",
          "48: {",
          "49:  if (atomic_dec_and_test(&vif->refcnt))",
          "50:   wake_up(&vif->waiting_to_free);",
          "51: }",
          "",
          "[Added Lines]",
          "42: #define XENVIF_NAPI_WEIGHT  64",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: {",
          "65:  struct xenvif *vif = dev_id;",
          "72:  return IRQ_HANDLED;",
          "73: }",
          "75: static irqreturn_t xenvif_rx_interrupt(int irq, void *dev_id)",
          "76: {",
          "77:  struct xenvif *vif = dev_id;",
          "82:  if (xenvif_rx_schedulable(vif))",
          "83:   netif_wake_queue(vif->dev);",
          "",
          "[Removed Lines]",
          "67:  if (vif->netbk == NULL)",
          "68:   return IRQ_HANDLED;",
          "70:  xen_netbk_schedule_xenvif(vif);",
          "79:  if (vif->netbk == NULL)",
          "80:   return IRQ_HANDLED;",
          "",
          "[Added Lines]",
          "58:  if (RING_HAS_UNCONSUMED_REQUESTS(&vif->tx))",
          "59:   napi_schedule(&vif->napi);",
          "64: static int xenvif_poll(struct napi_struct *napi, int budget)",
          "65: {",
          "66:  struct xenvif *vif = container_of(napi, struct xenvif, napi);",
          "67:  int work_done;",
          "69:  work_done = xen_netbk_tx_action(vif, budget);",
          "71:  if (work_done < budget) {",
          "72:   int more_to_do = 0;",
          "73:   unsigned long flags;",
          "91:   local_irq_save(flags);",
          "93:   RING_FINAL_CHECK_FOR_REQUESTS(&vif->tx, more_to_do);",
          "94:   if (!more_to_do)",
          "95:    __napi_complete(napi);",
          "97:   local_irq_restore(flags);",
          "98:  }",
          "100:  return work_done;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  BUG_ON(skb->dev != dev);",
          "103:   goto drop;",
          "",
          "[Removed Lines]",
          "102:  if (vif->netbk == NULL)",
          "",
          "[Added Lines]",
          "128:  if (vif->task == NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:  vif->rx_req_cons_peek += xen_netbk_count_skb_slots(vif, skb);",
          "113:  if (vif->can_queue && xen_netbk_must_stop_queue(vif))",
          "114:   netif_stop_queue(dev);",
          "",
          "[Removed Lines]",
          "111:  xenvif_get(vif);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:  return NETDEV_TX_OK;",
          "124: }",
          "131: void xenvif_notify_tx_completion(struct xenvif *vif)",
          "132: {",
          "133:  if (netif_queue_stopped(vif->dev) && xenvif_rx_schedulable(vif))",
          "",
          "[Removed Lines]",
          "126: void xenvif_receive_skb(struct xenvif *vif, struct sk_buff *skb)",
          "127: {",
          "128:  netif_rx_ni(skb);",
          "129: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143: static void xenvif_up(struct xenvif *vif)",
          "144: {",
          "146:  enable_irq(vif->tx_irq);",
          "147:  if (vif->tx_irq != vif->rx_irq)",
          "148:   enable_irq(vif->rx_irq);",
          "",
          "[Removed Lines]",
          "145:  xen_netbk_add_xenvif(vif);",
          "",
          "[Added Lines]",
          "165:  napi_enable(&vif->napi);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "152: static void xenvif_down(struct xenvif *vif)",
          "153: {",
          "154:  disable_irq(vif->tx_irq);",
          "155:  if (vif->tx_irq != vif->rx_irq)",
          "156:   disable_irq(vif->rx_irq);",
          "157:  del_timer_sync(&vif->credit_timeout);",
          "160: }",
          "162: static int xenvif_open(struct net_device *dev)",
          "",
          "[Removed Lines]",
          "158:  xen_netbk_deschedule_xenvif(vif);",
          "159:  xen_netbk_remove_xenvif(vif);",
          "",
          "[Added Lines]",
          "174:  napi_disable(&vif->napi);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "272:  struct net_device *dev;",
          "273:  struct xenvif *vif;",
          "274:  char name[IFNAMSIZ] = {};",
          "276:  snprintf(name, IFNAMSIZ - 1, \"vif%u.%u\", domid, handle);",
          "277:  dev = alloc_netdev(sizeof(struct xenvif), name, ether_setup);",
          "278:  if (dev == NULL) {",
          "280:   return ERR_PTR(-ENOMEM);",
          "281:  }",
          "",
          "[Removed Lines]",
          "279:   pr_warn(\"Could not allocate netdev\\n\");",
          "",
          "[Added Lines]",
          "294:  int i;",
          "299:   pr_warn(\"Could not allocate netdev for %s\\n\", name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "285:  vif = netdev_priv(dev);",
          "286:  vif->domid  = domid;",
          "287:  vif->handle = handle;",
          "289:  vif->can_sg = 1;",
          "290:  vif->csum = 1;",
          "293:  vif->dev = dev;",
          "297:  vif->credit_bytes = vif->remaining_credit = ~0UL;",
          "298:  vif->credit_usec  = 0UL;",
          "",
          "[Removed Lines]",
          "288:  vif->netbk  = NULL;",
          "291:  atomic_set(&vif->refcnt, 1);",
          "292:  init_waitqueue_head(&vif->waiting_to_free);",
          "294:  INIT_LIST_HEAD(&vif->schedule_list);",
          "295:  INIT_LIST_HEAD(&vif->notify_list);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "308:  dev->tx_queue_len = XENVIF_QUEUE_LENGTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:  skb_queue_head_init(&vif->rx_queue);",
          "326:  skb_queue_head_init(&vif->tx_queue);",
          "328:  vif->pending_cons = 0;",
          "329:  vif->pending_prod = MAX_PENDING_REQS;",
          "330:  for (i = 0; i < MAX_PENDING_REQS; i++)",
          "331:   vif->pending_ring[i] = i;",
          "332:  for (i = 0; i < MAX_PENDING_REQS; i++)",
          "333:   vif->mmap_pages[i] = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "316:  memset(dev->dev_addr, 0xFF, ETH_ALEN);",
          "317:  dev->dev_addr[0] &= ~0x01;",
          "319:  netif_carrier_off(dev);",
          "321:  err = register_netdev(dev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:  netif_napi_add(dev, &vif->napi, xenvif_poll, XENVIF_NAPI_WEIGHT);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "377:   disable_irq(vif->rx_irq);",
          "378:  }",
          "382:  rtnl_lock();",
          "383:  if (!vif->can_sg && vif->dev->mtu > ETH_DATA_LEN)",
          "",
          "[Removed Lines]",
          "380:  xenvif_get(vif);",
          "",
          "[Added Lines]",
          "407:  init_waitqueue_head(&vif->wq);",
          "408:  vif->task = kthread_create(xen_netbk_kthread,",
          "409:        (void *)vif, vif->dev->name);",
          "410:  if (IS_ERR(vif->task)) {",
          "411:   pr_warn(\"Could not allocate kthread for %s\\n\", vif->dev->name);",
          "412:   err = PTR_ERR(vif->task);",
          "413:   goto err_rx_unbind;",
          "414:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "388:   xenvif_up(vif);",
          "389:  rtnl_unlock();",
          "391:  return 0;",
          "392: err_tx_unbind:",
          "393:  unbind_from_irqhandler(vif->tx_irq, vif);",
          "394:  vif->tx_irq = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:  wake_up_process(vif->task);",
          "429: err_rx_unbind:",
          "430:  unbind_from_irqhandler(vif->rx_irq, vif);",
          "431:  vif->rx_irq = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "408:  if (netif_running(dev))",
          "409:   xenvif_down(vif);",
          "410:  rtnl_unlock();",
          "412: }",
          "414: void xenvif_disconnect(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "411:  xenvif_put(vif);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "422:  if (netif_carrier_ok(vif->dev))",
          "423:   xenvif_carrier_off(vif);",
          "428:  if (vif->tx_irq) {",
          "429:   if (vif->tx_irq == vif->rx_irq)",
          "430:    unbind_from_irqhandler(vif->tx_irq, vif);",
          "",
          "[Removed Lines]",
          "425:  atomic_dec(&vif->refcnt);",
          "426:  wait_event(vif->waiting_to_free, atomic_read(&vif->refcnt) == 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "438:   need_module_put = 1;",
          "439:  }",
          "441:  unregister_netdev(vif->dev);",
          "443:  xen_netbk_unmap_frontend_rings(vif);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:  if (vif->task)",
          "478:   kthread_stop(vif->task);",
          "480:  netif_napi_del(&vif->napi);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c": [
          "File: drivers/net/xen-netback/netback.c -> drivers/net/xen-netback/netback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #define XEN_NETBK_LEGACY_SLOTS_MAX XEN_NETIF_NR_SLOTS_MIN",
          "172: {",
          "176: }",
          "179:       u8 status);",
          "180: static void make_tx_response(struct xenvif *vif,",
          "181:         struct xen_netif_tx_request *txp,",
          "182:         s8       st);",
          "183: static struct xen_netif_rx_response *make_rx_response(struct xenvif *vif,",
          "184:           u16      id,",
          "185:           s8       st,",
          "",
          "[Removed Lines]",
          "73: typedef unsigned int pending_ring_idx_t;",
          "74: #define INVALID_PENDING_RING_IDX (~0U)",
          "76: struct pending_tx_info {",
          "78:  struct xenvif *vif;",
          "79:  pending_ring_idx_t head; /* head != INVALID_PENDING_RING_IDX",
          "83: };",
          "85: struct netbk_rx_meta {",
          "86:  int id;",
          "87:  int size;",
          "88:  int gso_size;",
          "89: };",
          "91: #define MAX_PENDING_REQS 256",
          "94: #define INVALID_PENDING_IDX 0xFFFF",
          "96: #define MAX_BUFFER_OFFSET PAGE_SIZE",
          "98: struct xen_netbk {",
          "99:  wait_queue_head_t wq;",
          "100:  struct task_struct *task;",
          "102:  struct sk_buff_head rx_queue;",
          "103:  struct sk_buff_head tx_queue;",
          "105:  struct timer_list net_timer;",
          "107:  struct page *mmap_pages[MAX_PENDING_REQS];",
          "109:  pending_ring_idx_t pending_prod;",
          "110:  pending_ring_idx_t pending_cons;",
          "111:  struct list_head net_schedule_list;",
          "114:  spinlock_t net_schedule_list_lock;",
          "116:  atomic_t netfront_count;",
          "118:  struct pending_tx_info pending_tx_info[MAX_PENDING_REQS];",
          "123:  struct gnttab_copy tx_copy_ops[2*MAX_PENDING_REQS];",
          "125:  u16 pending_ring[MAX_PENDING_REQS];",
          "132:  struct gnttab_copy grant_copy_op[2*XEN_NETIF_RX_RING_SIZE];",
          "133:  struct netbk_rx_meta meta[2*XEN_NETIF_RX_RING_SIZE];",
          "134: };",
          "136: static struct xen_netbk *xen_netbk;",
          "137: static int xen_netbk_group_nr;",
          "144: static inline int pending_tx_is_head(struct xen_netbk *netbk, RING_IDX idx)",
          "145: {",
          "146:  return netbk->pending_tx_info[idx].head != INVALID_PENDING_RING_IDX;",
          "147: }",
          "149: void xen_netbk_add_xenvif(struct xenvif *vif)",
          "150: {",
          "151:  int i;",
          "152:  int min_netfront_count;",
          "153:  int min_group = 0;",
          "154:  struct xen_netbk *netbk;",
          "156:  min_netfront_count = atomic_read(&xen_netbk[0].netfront_count);",
          "157:  for (i = 0; i < xen_netbk_group_nr; i++) {",
          "158:   int netfront_count = atomic_read(&xen_netbk[i].netfront_count);",
          "159:   if (netfront_count < min_netfront_count) {",
          "160:    min_group = i;",
          "161:    min_netfront_count = netfront_count;",
          "162:   }",
          "163:  }",
          "165:  netbk = &xen_netbk[min_group];",
          "167:  vif->netbk = netbk;",
          "168:  atomic_inc(&netbk->netfront_count);",
          "169: }",
          "171: void xen_netbk_remove_xenvif(struct xenvif *vif)",
          "173:  struct xen_netbk *netbk = vif->netbk;",
          "174:  vif->netbk = NULL;",
          "175:  atomic_dec(&netbk->netfront_count);",
          "178: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx,",
          "",
          "[Added Lines]",
          "78: static inline int pending_tx_is_head(struct xenvif *vif, RING_IDX idx)",
          "80:  return vif->pending_tx_info[idx].head != INVALID_PENDING_RING_IDX;",
          "83: static void xen_netbk_idx_release(struct xenvif *vif, u16 pending_idx,",
          "89: static inline int tx_work_todo(struct xenvif *vif);",
          "90: static inline int rx_work_todo(struct xenvif *vif);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:           u16      size,",
          "188:           u16      flags);",
          "191:            u16 idx)",
          "192: {",
          "194: }",
          "197:       u16 idx)",
          "198: {",
          "200: }",
          "",
          "[Removed Lines]",
          "190: static inline unsigned long idx_to_pfn(struct xen_netbk *netbk,",
          "193:  return page_to_pfn(netbk->mmap_pages[idx]);",
          "196: static inline unsigned long idx_to_kaddr(struct xen_netbk *netbk,",
          "199:  return (unsigned long)pfn_to_kaddr(idx_to_pfn(netbk, idx));",
          "",
          "[Added Lines]",
          "99: static inline unsigned long idx_to_pfn(struct xenvif *vif,",
          "102:  return page_to_pfn(vif->mmap_pages[idx]);",
          "105: static inline unsigned long idx_to_kaddr(struct xenvif *vif,",
          "108:  return (unsigned long)pfn_to_kaddr(idx_to_pfn(vif, idx));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:  return i & (MAX_PENDING_REQS-1);",
          "225: }",
          "228: {",
          "229:  return MAX_PENDING_REQS -",
          "236: }",
          "238: static int max_required_rx_slots(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "227: static inline pending_ring_idx_t nr_pending_reqs(struct xen_netbk *netbk)",
          "230:   netbk->pending_prod + netbk->pending_cons;",
          "231: }",
          "233: static void xen_netbk_kick_thread(struct xen_netbk *netbk)",
          "234: {",
          "235:  wake_up(&netbk->wq);",
          "",
          "[Added Lines]",
          "136: static inline pending_ring_idx_t nr_pending_reqs(struct xenvif *vif)",
          "139:   vif->pending_prod + vif->pending_cons;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:  unsigned copy_prod, copy_cons;",
          "365:  unsigned meta_prod, meta_cons;",
          "366:  struct gnttab_copy *copy;",
          "368:  int copy_off;",
          "369:  grant_ref_t copy_gref;",
          "370: };",
          "374: {",
          "376:  struct xen_netif_rx_request *req;",
          "378:  req = RING_GET_REQUEST(&vif->rx, vif->rx.req_cons++);",
          "",
          "[Removed Lines]",
          "367:  struct netbk_rx_meta *meta;",
          "372: static struct netbk_rx_meta *get_next_rx_buffer(struct xenvif *vif,",
          "373:       struct netrx_pending_operations *npo)",
          "375:  struct netbk_rx_meta *meta;",
          "",
          "[Added Lines]",
          "271:  struct xenvif_rx_meta *meta;",
          "276: static struct xenvif_rx_meta *get_next_rx_buffer(struct xenvif *vif,",
          "277:        struct netrx_pending_operations *npo)",
          "279:  struct xenvif_rx_meta *meta;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:     unsigned long offset, int *head)",
          "399: {",
          "400:  struct gnttab_copy *copy_gop;",
          "402:  unsigned long bytes;",
          "",
          "[Removed Lines]",
          "401:  struct netbk_rx_meta *meta;",
          "",
          "[Added Lines]",
          "305:  struct xenvif_rx_meta *meta;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "435:   copy_gop = npo->copy + npo->copy_prod++;",
          "436:   copy_gop->flags = GNTCOPY_dest_gref;",
          "437:   copy_gop->source.domid = DOMID_SELF;",
          "438:   copy_gop->source.u.gmfn = virt_to_mfn(page_address(page));",
          "440:   copy_gop->source.offset = offset;",
          "443:   copy_gop->dest.offset = npo->copy_off;",
          "444:   copy_gop->dest.u.ref = npo->copy_gref;",
          "447:   npo->copy_off += bytes;",
          "448:   meta->size += bytes;",
          "",
          "[Removed Lines]",
          "441:   copy_gop->dest.domid = vif->domid;",
          "445:   copy_gop->len = bytes;",
          "",
          "[Added Lines]",
          "341:   copy_gop->len = bytes;",
          "347:   copy_gop->dest.domid = vif->domid;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "485:  int nr_frags = skb_shinfo(skb)->nr_frags;",
          "486:  int i;",
          "487:  struct xen_netif_rx_request *req;",
          "489:  unsigned char *data;",
          "490:  int head = 1;",
          "491:  int old_meta_prod;",
          "",
          "[Removed Lines]",
          "488:  struct netbk_rx_meta *meta;",
          "",
          "[Added Lines]",
          "392:  struct xenvif_rx_meta *meta;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "565: }",
          "567: static void netbk_add_frag_responses(struct xenvif *vif, int status,",
          "569:          int nr_meta_slots)",
          "570: {",
          "571:  int i;",
          "",
          "[Removed Lines]",
          "568:          struct netbk_rx_meta *meta,",
          "",
          "[Added Lines]",
          "472:          struct xenvif_rx_meta *meta,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "594:  int meta_slots_used;",
          "595: };",
          "598: {",
          "600:  s8 status;",
          "601:  u16 flags;",
          "602:  struct xen_netif_rx_response *resp;",
          "",
          "[Removed Lines]",
          "597: static void xen_netbk_rx_action(struct xen_netbk *netbk)",
          "599:  struct xenvif *vif = NULL, *tmp;",
          "",
          "[Added Lines]",
          "501: static void xen_netbk_kick_thread(struct xenvif *vif)",
          "502: {",
          "503:  wake_up(&vif->wq);",
          "504: }",
          "506: void xen_netbk_rx_action(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "608:  int count;",
          "609:  unsigned long offset;",
          "610:  struct skb_cb_overlay *sco;",
          "612:  struct netrx_pending_operations npo = {",
          "615:  };",
          "617:  skb_queue_head_init(&rxq);",
          "619:  count = 0;",
          "622:   vif = netdev_priv(skb->dev);",
          "623:   nr_frags = skb_shinfo(skb)->nr_frags;",
          "",
          "[Removed Lines]",
          "613:   .copy  = netbk->grant_copy_op,",
          "614:   .meta  = netbk->meta,",
          "621:  while ((skb = skb_dequeue(&netbk->rx_queue)) != NULL) {",
          "",
          "[Added Lines]",
          "519:  int need_to_notify = 0;",
          "522:   .copy  = vif->grant_copy_op,",
          "523:   .meta  = vif->meta,",
          "530:  while ((skb = skb_dequeue(&vif->rx_queue)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "635:    break;",
          "636:  }",
          "640:  if (!npo.copy_prod)",
          "641:   return;",
          "646:  while ((skb = __skb_dequeue(&rxq)) != NULL) {",
          "647:   sco = (struct skb_cb_overlay *)skb->cb;",
          "649:   vif = netdev_priv(skb->dev);",
          "652:    resp = RING_GET_RESPONSE(&vif->rx,",
          "655:    resp->flags = XEN_NETRXF_gso_prefix | XEN_NETRXF_more_data;",
          "659:    resp->status = sco->meta_slots_used;",
          "661:    npo.meta_cons++;",
          "",
          "[Removed Lines]",
          "638:  BUG_ON(npo.meta_prod > ARRAY_SIZE(netbk->meta));",
          "643:  BUG_ON(npo.copy_prod > ARRAY_SIZE(netbk->grant_copy_op));",
          "644:  gnttab_batch_copy(netbk->grant_copy_op, npo.copy_prod);",
          "651:   if (netbk->meta[npo.meta_cons].gso_size && vif->gso_prefix) {",
          "653:       vif->rx.rsp_prod_pvt++);",
          "657:    resp->offset = netbk->meta[npo.meta_cons].gso_size;",
          "658:    resp->id = netbk->meta[npo.meta_cons].id;",
          "",
          "[Added Lines]",
          "547:  BUG_ON(npo.meta_prod > ARRAY_SIZE(vif->meta));",
          "552:  BUG_ON(npo.copy_prod > ARRAY_SIZE(vif->grant_copy_op));",
          "553:  gnttab_batch_copy(vif->grant_copy_op, npo.copy_prod);",
          "560:   if (vif->meta[npo.meta_cons].gso_size && vif->gso_prefix) {",
          "562:        vif->rx.rsp_prod_pvt++);",
          "566:    resp->offset = vif->meta[npo.meta_cons].gso_size;",
          "567:    resp->id = vif->meta[npo.meta_cons].id;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "680:    flags |= XEN_NETRXF_data_validated;",
          "682:   offset = 0;",
          "684:      status, offset,",
          "686:      flags);",
          "689:    struct xen_netif_extra_info *gso =",
          "690:     (struct xen_netif_extra_info *)",
          "691:     RING_GET_RESPONSE(&vif->rx,",
          "",
          "[Removed Lines]",
          "683:   resp = make_rx_response(vif, netbk->meta[npo.meta_cons].id,",
          "685:      netbk->meta[npo.meta_cons].size,",
          "688:   if (netbk->meta[npo.meta_cons].gso_size && !vif->gso_prefix) {",
          "",
          "[Added Lines]",
          "592:   resp = make_rx_response(vif, vif->meta[npo.meta_cons].id,",
          "594:      vif->meta[npo.meta_cons].size,",
          "597:   if (vif->meta[npo.meta_cons].gso_size && !vif->gso_prefix) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "694:    resp->flags |= XEN_NETRXF_extra_info;",
          "697:    gso->u.gso.type = XEN_NETIF_GSO_TYPE_TCPV4;",
          "698:    gso->u.gso.pad = 0;",
          "699:    gso->u.gso.features = 0;",
          "",
          "[Removed Lines]",
          "696:    gso->u.gso.size = netbk->meta[npo.meta_cons].gso_size;",
          "",
          "[Added Lines]",
          "605:    gso->u.gso.size = vif->meta[npo.meta_cons].gso_size;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "703:   }",
          "705:   netbk_add_frag_responses(vif, status,",
          "707:       sco->meta_slots_used);",
          "709:   RING_PUSH_RESPONSES_AND_CHECK_NOTIFY(&vif->rx, ret);",
          "711:   xenvif_notify_tx_completion(vif);",
          "717:   npo.meta_cons += sco->meta_slots_used;",
          "718:   dev_kfree_skb(skb);",
          "719:  }",
          "722:   notify_remote_via_irq(vif->rx_irq);",
          "731: }",
          "733: void xen_netbk_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb)",
          "734: {",
          "812: }",
          "814: void xen_netbk_check_rx_xenvif(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "706:       netbk->meta + npo.meta_cons + 1,",
          "713:   if (ret && list_empty(&vif->notify_list))",
          "714:    list_add_tail(&vif->notify_list, &notify);",
          "715:   else",
          "716:    xenvif_put(vif);",
          "721:  list_for_each_entry_safe(vif, tmp, &notify, notify_list) {",
          "723:   list_del_init(&vif->notify_list);",
          "724:   xenvif_put(vif);",
          "725:  }",
          "728:  if (!skb_queue_empty(&netbk->rx_queue) &&",
          "729:    !timer_pending(&netbk->net_timer))",
          "730:   xen_netbk_kick_thread(netbk);",
          "735:  struct xen_netbk *netbk = vif->netbk;",
          "737:  skb_queue_tail(&netbk->rx_queue, skb);",
          "739:  xen_netbk_kick_thread(netbk);",
          "740: }",
          "742: static void xen_netbk_alarm(unsigned long data)",
          "743: {",
          "744:  struct xen_netbk *netbk = (struct xen_netbk *)data;",
          "745:  xen_netbk_kick_thread(netbk);",
          "746: }",
          "748: static int __on_net_schedule_list(struct xenvif *vif)",
          "749: {",
          "750:  return !list_empty(&vif->schedule_list);",
          "751: }",
          "754: static void remove_from_net_schedule_list(struct xenvif *vif)",
          "755: {",
          "756:  if (likely(__on_net_schedule_list(vif))) {",
          "757:   list_del_init(&vif->schedule_list);",
          "758:   xenvif_put(vif);",
          "759:  }",
          "760: }",
          "762: static struct xenvif *poll_net_schedule_list(struct xen_netbk *netbk)",
          "763: {",
          "764:  struct xenvif *vif = NULL;",
          "766:  spin_lock_irq(&netbk->net_schedule_list_lock);",
          "767:  if (list_empty(&netbk->net_schedule_list))",
          "768:   goto out;",
          "770:  vif = list_first_entry(&netbk->net_schedule_list,",
          "771:           struct xenvif, schedule_list);",
          "772:  if (!vif)",
          "773:   goto out;",
          "775:  xenvif_get(vif);",
          "777:  remove_from_net_schedule_list(vif);",
          "778: out:",
          "779:  spin_unlock_irq(&netbk->net_schedule_list_lock);",
          "780:  return vif;",
          "781: }",
          "783: void xen_netbk_schedule_xenvif(struct xenvif *vif)",
          "784: {",
          "785:  unsigned long flags;",
          "786:  struct xen_netbk *netbk = vif->netbk;",
          "788:  if (__on_net_schedule_list(vif))",
          "789:   goto kick;",
          "791:  spin_lock_irqsave(&netbk->net_schedule_list_lock, flags);",
          "792:  if (!__on_net_schedule_list(vif) &&",
          "793:      likely(xenvif_schedulable(vif))) {",
          "794:   list_add_tail(&vif->schedule_list, &netbk->net_schedule_list);",
          "795:   xenvif_get(vif);",
          "796:  }",
          "797:  spin_unlock_irqrestore(&netbk->net_schedule_list_lock, flags);",
          "799: kick:",
          "800:  smp_mb();",
          "801:  if ((nr_pending_reqs(netbk) < (MAX_PENDING_REQS/2)) &&",
          "802:      !list_empty(&netbk->net_schedule_list))",
          "803:   xen_netbk_kick_thread(netbk);",
          "804: }",
          "806: void xen_netbk_deschedule_xenvif(struct xenvif *vif)",
          "807: {",
          "808:  struct xen_netbk *netbk = vif->netbk;",
          "809:  spin_lock_irq(&netbk->net_schedule_list_lock);",
          "810:  remove_from_net_schedule_list(vif);",
          "811:  spin_unlock_irq(&netbk->net_schedule_list_lock);",
          "",
          "[Added Lines]",
          "615:       vif->meta + npo.meta_cons + 1,",
          "620:   if (ret)",
          "621:    need_to_notify = 1;",
          "629:  if (need_to_notify)",
          "633:  if (!skb_queue_empty(&vif->rx_queue))",
          "634:   xen_netbk_kick_thread(vif);",
          "639:  skb_queue_tail(&vif->rx_queue, skb);",
          "641:  xen_netbk_kick_thread(vif);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "818:  RING_FINAL_CHECK_FOR_REQUESTS(&vif->tx, more_to_do);",
          "820:  if (more_to_do)",
          "822: }",
          "824: static void tx_add_credit(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "821:   xen_netbk_schedule_xenvif(vif);",
          "",
          "[Added Lines]",
          "651:   napi_schedule(&vif->napi);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "860:   txp = RING_GET_REQUEST(&vif->tx, cons++);",
          "861:  } while (1);",
          "862:  vif->tx.req_cons = cons;",
          "865: }",
          "867: static void netbk_fatal_tx_err(struct xenvif *vif)",
          "868: {",
          "869:  netdev_err(vif->dev, \"fatal error; disabling device\\n\");",
          "870:  xenvif_carrier_off(vif);",
          "872: }",
          "874: static int netbk_count_requests(struct xenvif *vif,",
          "",
          "[Removed Lines]",
          "863:  xen_netbk_check_rx_xenvif(vif);",
          "864:  xenvif_put(vif);",
          "871:  xenvif_put(vif);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "969:  return slots;",
          "970: }",
          "973:       u16 pending_idx)",
          "974: {",
          "975:  struct page *page;",
          "977:  if (!page)",
          "978:   return NULL;",
          "980:  return page;",
          "981: }",
          "985:         struct sk_buff *skb,",
          "986:         struct xen_netif_tx_request *txp,",
          "987:         struct gnttab_copy *gop)",
          "",
          "[Removed Lines]",
          "972: static struct page *xen_netbk_alloc_page(struct xen_netbk *netbk,",
          "976:  page = alloc_page(GFP_KERNEL|__GFP_COLD);",
          "979:  netbk->mmap_pages[pending_idx] = page;",
          "983: static struct gnttab_copy *xen_netbk_get_requests(struct xen_netbk *netbk,",
          "984:         struct xenvif *vif,",
          "",
          "[Added Lines]",
          "799: static struct page *xen_netbk_alloc_page(struct xenvif *vif,",
          "804:  page = alloc_page(GFP_ATOMIC|__GFP_COLD);",
          "807:  vif->mmap_pages[pending_idx] = page;",
          "812: static struct gnttab_copy *xen_netbk_get_requests(struct xenvif *vif,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1012:  for (shinfo->nr_frags = slot = start; slot < nr_slots;",
          "1013:       shinfo->nr_frags++) {",
          "1014:   struct pending_tx_info *pending_tx_info =",
          "1018:   if (!page)",
          "1019:    goto err;",
          "",
          "[Removed Lines]",
          "1015:    netbk->pending_tx_info;",
          "1017:   page = alloc_page(GFP_KERNEL|__GFP_COLD);",
          "",
          "[Added Lines]",
          "843:    vif->pending_tx_info;",
          "845:   page = alloc_page(GFP_ATOMIC|__GFP_COLD);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1049:     gop->len = txp->size;",
          "1050:     dst_offset += gop->len;",
          "1056:     memcpy(&pending_tx_info[pending_idx].req, txp,",
          "1057:            sizeof(*txp));",
          "1067:     pending_tx_info[pending_idx].head =",
          "1068:      INVALID_PENDING_RING_IDX;",
          "",
          "[Removed Lines]",
          "1052:     index = pending_index(netbk->pending_cons++);",
          "1054:     pending_idx = netbk->pending_ring[index];",
          "1058:     xenvif_get(vif);",
          "1060:     pending_tx_info[pending_idx].vif = vif;",
          "1066:     netbk->mmap_pages[pending_idx] = (void *)(~0UL);",
          "",
          "[Added Lines]",
          "880:     index = pending_index(vif->pending_cons++);",
          "882:     pending_idx = vif->pending_ring[index];",
          "891:     vif->mmap_pages[pending_idx] = (void *)(~0UL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1083:   first->req.offset = 0;",
          "1084:   first->req.size = dst_offset;",
          "1085:   first->head = start_idx;",
          "1087:   frag_set_pending_idx(&frags[shinfo->nr_frags], head_idx);",
          "1088:  }",
          "",
          "[Removed Lines]",
          "1086:   netbk->mmap_pages[head_idx] = page;",
          "",
          "[Added Lines]",
          "911:   vif->mmap_pages[head_idx] = page;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1093: err:",
          "1095:  while (shinfo->nr_frags-- > start) {",
          "1097:     frag_get_pending_idx(&frags[shinfo->nr_frags]),",
          "1098:     XEN_NETIF_RSP_ERROR);",
          "1099:  }",
          "1101:  if (start)",
          "1104:  return NULL;",
          "1105: }",
          "1108:       struct sk_buff *skb,",
          "1109:       struct gnttab_copy **gopp)",
          "1110: {",
          "",
          "[Removed Lines]",
          "1096:   xen_netbk_idx_release(netbk,",
          "1102:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_ERROR);",
          "1107: static int xen_netbk_tx_check_gop(struct xen_netbk *netbk,",
          "",
          "[Added Lines]",
          "921:   xen_netbk_idx_release(vif,",
          "927:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "932: static int xen_netbk_tx_check_gop(struct xenvif *vif,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1120:  err = gop->status;",
          "1121:  if (unlikely(err))",
          "1125:  start = (frag_get_pending_idx(&shinfo->frags[0]) == pending_idx);",
          "",
          "[Removed Lines]",
          "1122:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "[Added Lines]",
          "947:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1129:   pending_ring_idx_t head;",
          "1131:   pending_idx = frag_get_pending_idx(&shinfo->frags[i]);",
          "1133:   head = tx_info->head;",
          "",
          "[Removed Lines]",
          "1132:   tx_info = &netbk->pending_tx_info[pending_idx];",
          "",
          "[Added Lines]",
          "957:   tx_info = &vif->pending_tx_info[pending_idx];",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1137:    newerr = (++gop)->status;",
          "1138:    if (newerr)",
          "1139:     break;",
          "1143:   if (likely(!newerr)) {",
          "1145:    if (unlikely(err))",
          "1147:    continue;",
          "1148:   }",
          "1154:   if (err)",
          "",
          "[Removed Lines]",
          "1140:    peek = netbk->pending_ring[pending_index(++head)];",
          "1141:   } while (!pending_tx_is_head(netbk, peek));",
          "1146:     xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
          "1151:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "[Added Lines]",
          "965:    peek = vif->pending_ring[pending_index(++head)];",
          "966:   } while (!pending_tx_is_head(vif, peek));",
          "971:     xen_netbk_idx_release(vif, pending_idx,",
          "972:             XEN_NETIF_RSP_OKAY);",
          "977:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1158:   pending_idx = *((u16 *)skb->data);",
          "1160:   for (j = start; j < i; j++) {",
          "1161:    pending_idx = frag_get_pending_idx(&shinfo->frags[j]);",
          "1163:   }",
          "",
          "[Removed Lines]",
          "1159:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
          "1162:    xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
          "",
          "[Added Lines]",
          "985:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "988:    xen_netbk_idx_release(vif, pending_idx,",
          "989:            XEN_NETIF_RSP_OKAY);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1170:  return err;",
          "1171: }",
          "1174: {",
          "1175:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
          "1176:  int nr_frags = shinfo->nr_frags;",
          "",
          "[Removed Lines]",
          "1173: static void xen_netbk_fill_frags(struct xen_netbk *netbk, struct sk_buff *skb)",
          "",
          "[Added Lines]",
          "1000: static void xen_netbk_fill_frags(struct xenvif *vif, struct sk_buff *skb)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1185:   pending_idx = frag_get_pending_idx(frag);",
          "1189:   __skb_fill_page_desc(skb, i, page, txp->offset, txp->size);",
          "1190:   skb->len += txp->size;",
          "1191:   skb->data_len += txp->size;",
          "1192:   skb->truesize += txp->size;",
          "1197:  }",
          "1198: }",
          "",
          "[Removed Lines]",
          "1187:   txp = &netbk->pending_tx_info[pending_idx].req;",
          "1188:   page = virt_to_page(idx_to_kaddr(netbk, pending_idx));",
          "1195:   get_page(netbk->mmap_pages[pending_idx]);",
          "1196:   xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
          "",
          "[Added Lines]",
          "1014:   txp = &vif->pending_tx_info[pending_idx].req;",
          "1015:   page = virt_to_page(idx_to_kaddr(vif, pending_idx));",
          "1022:   get_page(vif->mmap_pages[pending_idx]);",
          "1023:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1353:  return false;",
          "1354: }",
          "1357: {",
          "1359:  struct sk_buff *skb;",
          "1360:  int ret;",
          "1366:   struct xen_netif_tx_request txreq;",
          "1367:   struct xen_netif_tx_request txfrags[XEN_NETBK_LEGACY_SLOTS_MAX];",
          "1368:   struct page *page;",
          "",
          "[Removed Lines]",
          "1356: static unsigned xen_netbk_tx_build_gops(struct xen_netbk *netbk)",
          "1358:  struct gnttab_copy *gop = netbk->tx_copy_ops, *request_gop;",
          "1362:  while ((nr_pending_reqs(netbk) + XEN_NETBK_LEGACY_SLOTS_MAX",
          "1363:   < MAX_PENDING_REQS) &&",
          "1364:   !list_empty(&netbk->net_schedule_list)) {",
          "1365:   struct xenvif *vif;",
          "",
          "[Added Lines]",
          "1183: static unsigned xen_netbk_tx_build_gops(struct xenvif *vif)",
          "1185:  struct gnttab_copy *gop = vif->tx_copy_ops, *request_gop;",
          "1189:  while ((nr_pending_reqs(vif) + XEN_NETBK_LEGACY_SLOTS_MAX",
          "1190:   < MAX_PENDING_REQS)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1373:   unsigned int data_len;",
          "1374:   pending_ring_idx_t index;",
          "1386:   if (vif->tx.sring->req_prod - vif->tx.req_cons >",
          "1387:       XEN_NETIF_TX_RING_SIZE) {",
          "1388:    netdev_err(vif->dev,",
          "",
          "[Removed Lines]",
          "1377:   vif = poll_net_schedule_list(netbk);",
          "1383:   if (!vif)",
          "1384:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1395:   }",
          "1397:   RING_FINAL_CHECK_FOR_REQUESTS(&vif->tx, work_to_do);",
          "1403:   idx = vif->tx.req_cons;",
          "",
          "[Removed Lines]",
          "1398:   if (!work_to_do) {",
          "1399:    xenvif_put(vif);",
          "1400:    continue;",
          "1401:   }",
          "",
          "[Added Lines]",
          "1213:   if (!work_to_do)",
          "1214:    break;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1408:   if (txreq.size > vif->remaining_credit &&",
          "1414:   vif->remaining_credit -= txreq.size;",
          "",
          "[Removed Lines]",
          "1409:       tx_credit_exceeded(vif, txreq.size)) {",
          "1410:    xenvif_put(vif);",
          "1411:    continue;",
          "1412:   }",
          "",
          "[Added Lines]",
          "1222:       tx_credit_exceeded(vif, txreq.size))",
          "1223:    break;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1422:          work_to_do);",
          "1423:    idx = vif->tx.req_cons;",
          "1424:    if (unlikely(work_to_do < 0))",
          "1426:   }",
          "1428:   ret = netbk_count_requests(vif, &txreq, txfrags, work_to_do);",
          "1429:   if (unlikely(ret < 0))",
          "1432:   idx += ret;",
          "",
          "[Removed Lines]",
          "1425:     continue;",
          "1430:    continue;",
          "",
          "[Added Lines]",
          "1236:     break;",
          "1241:    break;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1435:    netdev_dbg(vif->dev,",
          "1436:        \"Bad packet size: %d\\n\", txreq.size);",
          "1437:    netbk_tx_err(vif, &txreq, idx);",
          "1439:   }",
          "",
          "[Removed Lines]",
          "1438:    continue;",
          "",
          "[Added Lines]",
          "1249:    break;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1445:        txreq.offset, txreq.size,",
          "1446:        (txreq.offset&~PAGE_MASK) + txreq.size);",
          "1447:    netbk_fatal_tx_err(vif);",
          "1449:   }",
          "1454:   data_len = (txreq.size > PKT_PROT_LEN &&",
          "1455:        ret < XEN_NETBK_LEGACY_SLOTS_MAX) ?",
          "",
          "[Removed Lines]",
          "1448:    continue;",
          "1451:   index = pending_index(netbk->pending_cons);",
          "1452:   pending_idx = netbk->pending_ring[index];",
          "",
          "[Added Lines]",
          "1259:    break;",
          "1262:   index = pending_index(vif->pending_cons);",
          "1263:   pending_idx = vif->pending_ring[index];",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1474:    if (netbk_set_skb_gso(vif, skb, gso)) {",
          "1476:     kfree_skb(skb);",
          "1478:    }",
          "1479:   }",
          "1483:   if (!page) {",
          "1484:    kfree_skb(skb);",
          "1485:    netbk_tx_err(vif, &txreq, idx);",
          "1487:   }",
          "1489:   gop->source.u.ref = txreq.gref;",
          "",
          "[Removed Lines]",
          "1477:     continue;",
          "1482:   page = xen_netbk_alloc_page(netbk, pending_idx);",
          "1486:    continue;",
          "",
          "[Added Lines]",
          "1288:     break;",
          "1293:   page = xen_netbk_alloc_page(vif, pending_idx);",
          "1297:    break;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1500:   gop++;",
          "1503:          &txreq, sizeof(txreq));",
          "1508:   __skb_put(skb, data_len);",
          "",
          "[Removed Lines]",
          "1502:   memcpy(&netbk->pending_tx_info[pending_idx].req,",
          "1504:   netbk->pending_tx_info[pending_idx].vif = vif;",
          "1505:   netbk->pending_tx_info[pending_idx].head = index;",
          "",
          "[Added Lines]",
          "1313:   memcpy(&vif->pending_tx_info[pending_idx].req,",
          "1315:   vif->pending_tx_info[pending_idx].head = index;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1517:           INVALID_PENDING_IDX);",
          "1518:   }",
          "1524:   if (request_gop == NULL) {",
          "1525:    kfree_skb(skb);",
          "1526:    netbk_tx_err(vif, &txreq, idx);",
          "1528:   }",
          "1529:   gop = request_gop;",
          "1533:   vif->tx.req_cons = idx;",
          "1537:    break;",
          "1538:  }",
          "1541: }",
          "1544: {",
          "1546:  struct sk_buff *skb;",
          "1549:   struct xen_netif_tx_request *txp;",
          "1551:   u16 pending_idx;",
          "1552:   unsigned data_len;",
          "1554:   pending_idx = *((u16 *)skb->data);",
          "1560:    netdev_dbg(vif->dev, \"netback grant failed.\\n\");",
          "1561:    skb_shinfo(skb)->nr_frags = 0;",
          "1562:    kfree_skb(skb);",
          "",
          "[Removed Lines]",
          "1520:   netbk->pending_cons++;",
          "1522:   request_gop = xen_netbk_get_requests(netbk, vif,",
          "1523:            skb, txfrags, gop);",
          "1527:    continue;",
          "1531:   __skb_queue_tail(&netbk->tx_queue, skb);",
          "1534:   xen_netbk_check_rx_xenvif(vif);",
          "1536:   if ((gop-netbk->tx_copy_ops) >= ARRAY_SIZE(netbk->tx_copy_ops))",
          "1540:  return gop - netbk->tx_copy_ops;",
          "1543: static void xen_netbk_tx_submit(struct xen_netbk *netbk)",
          "1545:  struct gnttab_copy *gop = netbk->tx_copy_ops;",
          "1548:  while ((skb = __skb_dequeue(&netbk->tx_queue)) != NULL) {",
          "1550:   struct xenvif *vif;",
          "1555:   vif = netbk->pending_tx_info[pending_idx].vif;",
          "1556:   txp = &netbk->pending_tx_info[pending_idx].req;",
          "1559:   if (unlikely(xen_netbk_tx_check_gop(netbk, skb, &gop))) {",
          "",
          "[Added Lines]",
          "1330:   vif->pending_cons++;",
          "1332:   request_gop = xen_netbk_get_requests(vif, skb, txfrags, gop);",
          "1336:    break;",
          "1340:   __skb_queue_tail(&vif->tx_queue, skb);",
          "1344:   if ((gop-vif->tx_copy_ops) >= ARRAY_SIZE(vif->tx_copy_ops))",
          "1348:  return gop - vif->tx_copy_ops;",
          "1352: static int xen_netbk_tx_submit(struct xenvif *vif, int budget)",
          "1354:  struct gnttab_copy *gop = vif->tx_copy_ops;",
          "1356:  int work_done = 0;",
          "1358:  while (work_done < budget &&",
          "1359:         (skb = __skb_dequeue(&vif->tx_queue)) != NULL) {",
          "1365:   txp = &vif->pending_tx_info[pending_idx].req;",
          "1368:   if (unlikely(xen_netbk_tx_check_gop(vif, skb, &gop))) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1566:   data_len = skb->len;",
          "1567:   memcpy(skb->data,",
          "1569:          data_len);",
          "1570:   if (data_len < txp->size) {",
          "",
          "[Removed Lines]",
          "1568:          (void *)(idx_to_kaddr(netbk, pending_idx)|txp->offset),",
          "",
          "[Added Lines]",
          "1377:          (void *)(idx_to_kaddr(vif, pending_idx)|txp->offset),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1573:    txp->size -= data_len;",
          "1574:   } else {",
          "1577:   }",
          "1579:   if (txp->flags & XEN_NETTXF_csum_blank)",
          "",
          "[Removed Lines]",
          "1576:    xen_netbk_idx_release(netbk, pending_idx, XEN_NETIF_RSP_OKAY);",
          "",
          "[Added Lines]",
          "1385:    xen_netbk_idx_release(vif, pending_idx,",
          "1386:            XEN_NETIF_RSP_OKAY);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1581:   else if (txp->flags & XEN_NETTXF_data_validated)",
          "1582:    skb->ip_summed = CHECKSUM_UNNECESSARY;",
          "",
          "[Removed Lines]",
          "1584:   xen_netbk_fill_frags(netbk, skb);",
          "",
          "[Added Lines]",
          "1394:   xen_netbk_fill_frags(vif, skb);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1609:   vif->dev->stats.rx_bytes += skb->len;",
          "1610:   vif->dev->stats.rx_packets++;",
          "1613:  }",
          "1614: }",
          "1618: {",
          "1619:  unsigned nr_gops;",
          "1623:  if (nr_gops == 0)",
          "1629: }",
          "1632:       u8 status)",
          "1633: {",
          "1635:  struct pending_tx_info *pending_tx_info;",
          "1636:  pending_ring_idx_t head;",
          "1643:   return;",
          "1648:  head = pending_tx_info->head;",
          "1653:  do {",
          "1654:   pending_ring_idx_t index;",
          "1655:   pending_ring_idx_t idx = pending_index(head);",
          "1659:   make_tx_response(vif, &pending_tx_info->req, status);",
          "",
          "[Removed Lines]",
          "1612:   xenvif_receive_skb(vif, skb);",
          "1617: static void xen_netbk_tx_action(struct xen_netbk *netbk)",
          "1621:  nr_gops = xen_netbk_tx_build_gops(netbk);",
          "1624:   return;",
          "1626:  gnttab_batch_copy(netbk->tx_copy_ops, nr_gops);",
          "1628:  xen_netbk_tx_submit(netbk);",
          "1631: static void xen_netbk_idx_release(struct xen_netbk *netbk, u16 pending_idx,",
          "1634:  struct xenvif *vif;",
          "1639:  BUG_ON(netbk->mmap_pages[pending_idx] == (void *)(~0UL));",
          "1642:  if (netbk->mmap_pages[pending_idx] == NULL)",
          "1645:  pending_tx_info = &netbk->pending_tx_info[pending_idx];",
          "1647:  vif = pending_tx_info->vif;",
          "1650:  BUG_ON(!pending_tx_is_head(netbk, head));",
          "1651:  BUG_ON(netbk->pending_ring[pending_index(head)] != pending_idx);",
          "1656:   u16 info_idx = netbk->pending_ring[idx];",
          "1658:   pending_tx_info = &netbk->pending_tx_info[info_idx];",
          "",
          "[Added Lines]",
          "1422:   work_done++;",
          "1424:   netif_receive_skb(skb);",
          "1427:  return work_done;",
          "1431: int xen_netbk_tx_action(struct xenvif *vif, int budget)",
          "1434:  int work_done;",
          "1436:  if (unlikely(!tx_work_todo(vif)))",
          "1437:   return 0;",
          "1439:  nr_gops = xen_netbk_tx_build_gops(vif);",
          "1442:   return 0;",
          "1444:  gnttab_batch_copy(vif->tx_copy_ops, nr_gops);",
          "1446:  work_done = xen_netbk_tx_submit(vif, nr_gops);",
          "1448:  return work_done;",
          "1451: static void xen_netbk_idx_release(struct xenvif *vif, u16 pending_idx,",
          "1458:  BUG_ON(vif->mmap_pages[pending_idx] == (void *)(~0UL));",
          "1461:  if (vif->mmap_pages[pending_idx] == NULL)",
          "1464:  pending_tx_info = &vif->pending_tx_info[pending_idx];",
          "1468:  BUG_ON(!pending_tx_is_head(vif, head));",
          "1469:  BUG_ON(vif->pending_ring[pending_index(head)] != pending_idx);",
          "1474:   u16 info_idx = vif->pending_ring[idx];",
          "1476:   pending_tx_info = &vif->pending_tx_info[info_idx];",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1665:   pending_tx_info->head = 0;",
          "1679: }",
          "",
          "[Removed Lines]",
          "1667:   index = pending_index(netbk->pending_prod++);",
          "1668:   netbk->pending_ring[index] = netbk->pending_ring[info_idx];",
          "1670:   xenvif_put(vif);",
          "1672:   peek = netbk->pending_ring[pending_index(++head)];",
          "1674:  } while (!pending_tx_is_head(netbk, peek));",
          "1676:  netbk->mmap_pages[pending_idx]->mapping = 0;",
          "1677:  put_page(netbk->mmap_pages[pending_idx]);",
          "1678:  netbk->mmap_pages[pending_idx] = NULL;",
          "",
          "[Added Lines]",
          "1485:   index = pending_index(vif->pending_prod++);",
          "1486:   vif->pending_ring[index] = vif->pending_ring[info_idx];",
          "1488:   peek = vif->pending_ring[pending_index(++head)];",
          "1490:  } while (!pending_tx_is_head(vif, peek));",
          "1492:  put_page(vif->mmap_pages[pending_idx]);",
          "1493:  vif->mmap_pages[pending_idx] = NULL;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1723:  return resp;",
          "1724: }",
          "1727: {",
          "1729: }",
          "1732: {",
          "1737:   return 1;",
          "1739:  return 0;",
          "1740: }",
          "1765: void xen_netbk_unmap_frontend_rings(struct xenvif *vif)",
          "1766: {",
          "1767:  if (vif->tx.sring)",
          "",
          "[Removed Lines]",
          "1726: static inline int rx_work_todo(struct xen_netbk *netbk)",
          "1728:  return !skb_queue_empty(&netbk->rx_queue);",
          "1731: static inline int tx_work_todo(struct xen_netbk *netbk)",
          "1734:  if ((nr_pending_reqs(netbk) + XEN_NETBK_LEGACY_SLOTS_MAX",
          "1735:       < MAX_PENDING_REQS) &&",
          "1736:       !list_empty(&netbk->net_schedule_list))",
          "1742: static int xen_netbk_kthread(void *data)",
          "1743: {",
          "1744:  struct xen_netbk *netbk = data;",
          "1745:  while (!kthread_should_stop()) {",
          "1746:   wait_event_interruptible(netbk->wq,",
          "1747:     rx_work_todo(netbk) ||",
          "1748:     tx_work_todo(netbk) ||",
          "1749:     kthread_should_stop());",
          "1750:   cond_resched();",
          "1752:   if (kthread_should_stop())",
          "1753:    break;",
          "1755:   if (rx_work_todo(netbk))",
          "1756:    xen_netbk_rx_action(netbk);",
          "1758:   if (tx_work_todo(netbk))",
          "1759:    xen_netbk_tx_action(netbk);",
          "1760:  }",
          "1762:  return 0;",
          "1763: }",
          "",
          "[Added Lines]",
          "1541: static inline int rx_work_todo(struct xenvif *vif)",
          "1543:  return !skb_queue_empty(&vif->rx_queue);",
          "1546: static inline int tx_work_todo(struct xenvif *vif)",
          "1549:  if (likely(RING_HAS_UNCONSUMED_REQUESTS(&vif->tx)) &&",
          "1550:      (nr_pending_reqs(vif) + XEN_NETBK_LEGACY_SLOTS_MAX",
          "1551:       < MAX_PENDING_REQS))",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1807:  return err;",
          "1808: }",
          "1810: static int __init netback_init(void)",
          "1811: {",
          "1813:  int rc = 0;",
          "1816:  if (!xen_domain())",
          "1817:   return -ENODEV;",
          "",
          "[Removed Lines]",
          "1812:  int i;",
          "1814:  int group;",
          "",
          "[Added Lines]",
          "1602: int xen_netbk_kthread(void *data)",
          "1603: {",
          "1604:  struct xenvif *vif = data;",
          "1606:  while (!kthread_should_stop()) {",
          "1607:   wait_event_interruptible(vif->wq,",
          "1608:       rx_work_todo(vif) ||",
          "1609:       kthread_should_stop());",
          "1610:   if (kthread_should_stop())",
          "1611:    break;",
          "1613:   if (rx_work_todo(vif))",
          "1614:    xen_netbk_rx_action(vif);",
          "1616:   cond_resched();",
          "1617:  }",
          "1619:  return 0;",
          "1620: }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1822:   fatal_skb_slots = XEN_NETBK_LEGACY_SLOTS_MAX;",
          "1823:  }",
          "1867:  rc = xenvif_xenbus_init();",
          "1868:  if (rc)",
          "1869:   goto failed_init;",
          "",
          "[Removed Lines]",
          "1825:  xen_netbk_group_nr = num_online_cpus();",
          "1826:  xen_netbk = vzalloc(sizeof(struct xen_netbk) * xen_netbk_group_nr);",
          "1827:  if (!xen_netbk)",
          "1828:   return -ENOMEM;",
          "1830:  for (group = 0; group < xen_netbk_group_nr; group++) {",
          "1831:   struct xen_netbk *netbk = &xen_netbk[group];",
          "1832:   skb_queue_head_init(&netbk->rx_queue);",
          "1833:   skb_queue_head_init(&netbk->tx_queue);",
          "1835:   init_timer(&netbk->net_timer);",
          "1836:   netbk->net_timer.data = (unsigned long)netbk;",
          "1837:   netbk->net_timer.function = xen_netbk_alarm;",
          "1839:   netbk->pending_cons = 0;",
          "1840:   netbk->pending_prod = MAX_PENDING_REQS;",
          "1841:   for (i = 0; i < MAX_PENDING_REQS; i++)",
          "1842:    netbk->pending_ring[i] = i;",
          "1844:   init_waitqueue_head(&netbk->wq);",
          "1845:   netbk->task = kthread_create(xen_netbk_kthread,",
          "1846:           (void *)netbk,",
          "1847:           \"netback/%u\", group);",
          "1849:   if (IS_ERR(netbk->task)) {",
          "1850:    pr_alert(\"kthread_create() fails at netback\\n\");",
          "1851:    del_timer(&netbk->net_timer);",
          "1852:    rc = PTR_ERR(netbk->task);",
          "1853:    goto failed_init;",
          "1854:   }",
          "1856:   kthread_bind(netbk->task, group);",
          "1858:   INIT_LIST_HEAD(&netbk->net_schedule_list);",
          "1860:   spin_lock_init(&netbk->net_schedule_list_lock);",
          "1862:   atomic_set(&netbk->netfront_count, 0);",
          "1864:   wake_up_process(netbk->task);",
          "1865:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1871:  return 0;",
          "1873: failed_init:",
          "1880:  return rc;",
          "1882: }",
          "1884: module_init(netback_init);",
          "1886: static void __exit netback_fini(void)",
          "1887: {",
          "1890:  xenvif_xenbus_fini();",
          "1903: }",
          "1904: module_exit(netback_fini);",
          "",
          "[Removed Lines]",
          "1874:  while (--group >= 0) {",
          "1875:   struct xen_netbk *netbk = &xen_netbk[group];",
          "1876:   del_timer(&netbk->net_timer);",
          "1877:   kthread_stop(netbk->task);",
          "1878:  }",
          "1879:  vfree(xen_netbk);",
          "1888:  int i, j;",
          "1892:  for (i = 0; i < xen_netbk_group_nr; i++) {",
          "1893:   struct xen_netbk *netbk = &xen_netbk[i];",
          "1894:   del_timer_sync(&netbk->net_timer);",
          "1895:   kthread_stop(netbk->task);",
          "1896:   for (j = 0; j < MAX_PENDING_REQS; j++) {",
          "1897:    if (netbk->mmap_pages[j])",
          "1898:     __free_page(netbk->mmap_pages[j]);",
          "1899:   }",
          "1900:  }",
          "1902:  vfree(xen_netbk);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2810e5b9a7731ca5fce22bfbe12c96e16ac44b6f",
      "candidate_info": {
        "commit_hash": "2810e5b9a7731ca5fce22bfbe12c96e16ac44b6f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2810e5b9a7731ca5fce22bfbe12c96e16ac44b6f",
        "files": [
          "drivers/net/xen-netback/netback.c",
          "include/xen/interface/io/netif.h"
        ],
        "message": "xen-netback: coalesce slots in TX path and fix regressions\n\nThis patch tries to coalesce tx requests when constructing grant copy\nstructures. It enables netback to deal with situation when frontend's\nMAX_SKB_FRAGS is larger than backend's MAX_SKB_FRAGS.\n\nWith the help of coalescing, this patch tries to address two regressions\navoid reopening the security hole in XSA-39.\n\nRegression 1. The reduction of the number of supported ring entries (slots)\nper packet (from 18 to 17). This regression has been around for some time but\nremains unnoticed until XSA-39 security fix. This is fixed by coalescing\nslots.\n\nRegression 2. The XSA-39 security fix turning \"too many frags\" errors from\njust dropping the packet to a fatal error and disabling the VIF. This is fixed\nby coalescing slots (handling 18 slots when backend's MAX_SKB_FRAGS is 17)\nwhich rules out false positive (using 18 slots is legit) and dropping packets\nusing 19 to `max_skb_slots` slots.\n\nTo avoid reopening security hole in XSA-39, frontend sending packet using more\nthan max_skb_slots is considered malicious.\n\nThe behavior of netback for packet is thus:\n\n    1-18            slots: valid\n   19-max_skb_slots slots: drop and respond with an error\n   max_skb_slots+   slots: fatal error\n\nmax_skb_slots is configurable by admin, default value is 20.\n\nAlso change variable name from \"frags\" to \"slots\" in netbk_count_requests.\n\nPlease note that RX path still has dependency on MAX_SKB_FRAGS. This will be\nfixed with separate patch.\n\nSigned-off-by: Wei Liu <wei.liu2@citrix.com>\nAcked-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c",
          "include/xen/interface/io/netif.h||include/xen/interface/io/netif.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ],
          "candidate": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c": [
          "File: drivers/net/xen-netback/netback.c -> drivers/net/xen-netback/netback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #include <asm/xen/hypercall.h>",
          "48: #include <asm/xen/page.h>",
          "50: struct pending_tx_info {",
          "52:  struct xenvif *vif;",
          "53: };",
          "56: struct netbk_rx_meta {",
          "57:  int id;",
          "",
          "[Removed Lines]",
          "51:  struct xen_netif_tx_request req;",
          "54: typedef unsigned int pending_ring_idx_t;",
          "",
          "[Added Lines]",
          "54: #define MAX_SKB_SLOTS_DEFAULT 20",
          "55: static unsigned int max_skb_slots = MAX_SKB_SLOTS_DEFAULT;",
          "56: module_param(max_skb_slots, uint, 0444);",
          "58: typedef unsigned int pending_ring_idx_t;",
          "59: #define INVALID_PENDING_RING_IDX (~0U)",
          "64:  pending_ring_idx_t head; /* head != INVALID_PENDING_RING_IDX",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  atomic_t netfront_count;",
          "104:  struct pending_tx_info pending_tx_info[MAX_PENDING_REQS];",
          "107:  u16 pending_ring[MAX_PENDING_REQS];",
          "",
          "[Removed Lines]",
          "105:  struct gnttab_copy tx_copy_ops[MAX_PENDING_REQS];",
          "",
          "[Added Lines]",
          "123:  struct gnttab_copy tx_copy_ops[2*MAX_PENDING_REQS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118: static struct xen_netbk *xen_netbk;",
          "119: static int xen_netbk_group_nr;",
          "121: void xen_netbk_add_xenvif(struct xenvif *vif)",
          "122: {",
          "123:  int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: static inline int pending_tx_is_head(struct xen_netbk *netbk, RING_IDX idx)",
          "145: {",
          "146:  return netbk->pending_tx_info[idx].head != INVALID_PENDING_RING_IDX;",
          "147: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "899: static int netbk_count_requests(struct xenvif *vif,",
          "900:     struct xen_netif_tx_request *first,",
          "901:     struct xen_netif_tx_request *txp,",
          "902:     int work_to_do)",
          "903: {",
          "904:  RING_IDX cons = vif->tx.req_cons;",
          "907:  if (!(first->flags & XEN_NETTXF_more_data))",
          "908:   return 0;",
          "910:  do {",
          "913:    netbk_fatal_tx_err(vif);",
          "914:    return -ENODATA;",
          "915:   }",
          "919:    netbk_fatal_tx_err(vif);",
          "920:    return -E2BIG;",
          "921:   }",
          "924:          sizeof(*txp));",
          "925:   if (txp->size > first->size) {",
          "927:    netbk_fatal_tx_err(vif);",
          "928:    return -EIO;",
          "929:   }",
          "931:   first->size -= txp->size;",
          "934:   if (unlikely((txp->offset + txp->size) > PAGE_SIZE)) {",
          "936:      txp->offset, txp->size);",
          "937:    netbk_fatal_tx_err(vif);",
          "938:    return -EINVAL;",
          "939:   }",
          "940:  } while ((txp++)->flags & XEN_NETTXF_more_data);",
          "942: }",
          "944: static struct page *xen_netbk_alloc_page(struct xen_netbk *netbk,",
          "",
          "[Removed Lines]",
          "905:  int frags = 0;",
          "911:   if (frags >= work_to_do) {",
          "912:    netdev_err(vif->dev, \"Need more frags\\n\");",
          "917:   if (unlikely(frags >= MAX_SKB_FRAGS)) {",
          "918:    netdev_err(vif->dev, \"Too many frags\\n\");",
          "923:   memcpy(txp, RING_GET_REQUEST(&vif->tx, cons + frags),",
          "926:    netdev_err(vif->dev, \"Frag is bigger than frame.\\n\");",
          "932:   frags++;",
          "935:    netdev_err(vif->dev, \"txp->offset: %x, size: %u\\n\",",
          "941:  return frags;",
          "",
          "[Added Lines]",
          "931:     RING_IDX first_idx,",
          "936:  int slots = 0;",
          "937:  int drop_err = 0;",
          "943:   if (slots >= work_to_do) {",
          "944:    netdev_err(vif->dev,",
          "945:        \"Asked for %d slots but exceeds this limit\\n\",",
          "946:        work_to_do);",
          "954:   if (unlikely(slots >= max_skb_slots)) {",
          "955:    netdev_err(vif->dev,",
          "956:        \"Malicious frontend using %d slots, threshold %u\\n\",",
          "957:        slots, max_skb_slots);",
          "968:   if (!drop_err && slots >= XEN_NETIF_NR_SLOTS_MIN) {",
          "969:    if (net_ratelimit())",
          "970:     netdev_dbg(vif->dev,",
          "971:         \"Too many slots (%d) exceeding limit (%d), dropping packet\\n\",",
          "972:         slots, XEN_NETIF_NR_SLOTS_MIN);",
          "973:    drop_err = -E2BIG;",
          "974:   }",
          "976:   memcpy(txp, RING_GET_REQUEST(&vif->tx, cons + slots),",
          "979:    netdev_err(vif->dev,",
          "980:        \"Invalid tx request, slot size %u > remaining size %u\\n\",",
          "981:        txp->size, first->size);",
          "987:   slots++;",
          "990:    netdev_err(vif->dev, \"Cross page boundary, txp->offset: %x, size: %u\\n\",",
          "997:  if (drop_err) {",
          "998:   netbk_tx_err(vif, first, first_idx + slots);",
          "999:   return drop_err;",
          "1000:  }",
          "1002:  return slots;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "962:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
          "963:  skb_frag_t *frags = shinfo->frags;",
          "964:  u16 pending_idx = *((u16 *)skb->data);",
          "968:  start = (frag_get_pending_idx(&shinfo->frags[0]) == pending_idx);",
          "973:   struct pending_tx_info *pending_tx_info =",
          "974:    netbk->pending_tx_info;",
          "979:   if (!page)",
          "980:    goto err;",
          "999:  }",
          "1001:  return gop;",
          "1002: err:",
          "1007:  }",
          "1009:  if (start)",
          "",
          "[Removed Lines]",
          "965:  int i, start;",
          "970:  for (i = start; i < shinfo->nr_frags; i++, txp++) {",
          "971:   struct page *page;",
          "972:   pending_ring_idx_t index;",
          "976:   index = pending_index(netbk->pending_cons++);",
          "977:   pending_idx = netbk->pending_ring[index];",
          "978:   page = xen_netbk_alloc_page(netbk, pending_idx);",
          "982:   gop->source.u.ref = txp->gref;",
          "983:   gop->source.domid = vif->domid;",
          "984:   gop->source.offset = txp->offset;",
          "986:   gop->dest.u.gmfn = virt_to_mfn(page_address(page));",
          "987:   gop->dest.domid = DOMID_SELF;",
          "988:   gop->dest.offset = txp->offset;",
          "990:   gop->len = txp->size;",
          "991:   gop->flags = GNTCOPY_source_gref;",
          "993:   gop++;",
          "995:   memcpy(&pending_tx_info[pending_idx].req, txp, sizeof(*txp));",
          "996:   xenvif_get(vif);",
          "997:   pending_tx_info[pending_idx].vif = vif;",
          "998:   frag_set_pending_idx(&frags[i], pending_idx);",
          "1004:  while (i-- > start) {",
          "1005:   xen_netbk_idx_release(netbk, frag_get_pending_idx(&frags[i]),",
          "1006:           XEN_NETIF_RSP_ERROR);",
          "",
          "[Added Lines]",
          "1026:  u16 head_idx = 0;",
          "1027:  int slot, start;",
          "1028:  struct page *page;",
          "1029:  pending_ring_idx_t index, start_idx = 0;",
          "1030:  uint16_t dst_offset;",
          "1031:  unsigned int nr_slots;",
          "1032:  struct pending_tx_info *first = NULL;",
          "1037:  nr_slots = shinfo->nr_frags;",
          "1046:  for (shinfo->nr_frags = slot = start; slot < nr_slots;",
          "1047:       shinfo->nr_frags++) {",
          "1051:   page = alloc_page(GFP_KERNEL|__GFP_COLD);",
          "1055:   dst_offset = 0;",
          "1056:   first = NULL;",
          "1057:   while (dst_offset < PAGE_SIZE && slot < nr_slots) {",
          "1058:    gop->flags = GNTCOPY_source_gref;",
          "1060:    gop->source.u.ref = txp->gref;",
          "1061:    gop->source.domid = vif->domid;",
          "1062:    gop->source.offset = txp->offset;",
          "1064:    gop->dest.domid = DOMID_SELF;",
          "1066:    gop->dest.offset = dst_offset;",
          "1067:    gop->dest.u.gmfn = virt_to_mfn(page_address(page));",
          "1069:    if (dst_offset + txp->size > PAGE_SIZE) {",
          "1077:     gop->len = PAGE_SIZE - dst_offset;",
          "1078:     txp->offset += gop->len;",
          "1079:     txp->size -= gop->len;",
          "1081:    } else {",
          "1083:     gop->len = txp->size;",
          "1084:     dst_offset += gop->len;",
          "1086:     index = pending_index(netbk->pending_cons++);",
          "1088:     pending_idx = netbk->pending_ring[index];",
          "1090:     memcpy(&pending_tx_info[pending_idx].req, txp,",
          "1091:            sizeof(*txp));",
          "1092:     xenvif_get(vif);",
          "1094:     pending_tx_info[pending_idx].vif = vif;",
          "1100:     netbk->mmap_pages[pending_idx] = (void *)(~0UL);",
          "1101:     pending_tx_info[pending_idx].head =",
          "1102:      INVALID_PENDING_RING_IDX;",
          "1104:     if (!first) {",
          "1105:      first = &pending_tx_info[pending_idx];",
          "1106:      start_idx = index;",
          "1107:      head_idx = pending_idx;",
          "1108:     }",
          "1110:     txp++;",
          "1111:     slot++;",
          "1112:    }",
          "1114:    gop++;",
          "1115:   }",
          "1117:   first->req.offset = 0;",
          "1118:   first->req.size = dst_offset;",
          "1119:   first->head = start_idx;",
          "1120:   set_page_ext(page, netbk, head_idx);",
          "1121:   netbk->mmap_pages[head_idx] = page;",
          "1122:   frag_set_pending_idx(&frags[shinfo->nr_frags], head_idx);",
          "1125:  BUG_ON(shinfo->nr_frags > MAX_SKB_FRAGS);",
          "1130:  while (shinfo->nr_frags-- > start) {",
          "1131:   xen_netbk_idx_release(netbk,",
          "1132:     frag_get_pending_idx(&frags[shinfo->nr_frags]),",
          "1133:     XEN_NETIF_RSP_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1019:  struct gnttab_copy *gop = *gopp;",
          "1020:  u16 pending_idx = *((u16 *)skb->data);",
          "1021:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
          "1022:  int nr_frags = shinfo->nr_frags;",
          "1023:  int i, err, start;",
          "1026:  err = gop->status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:  struct pending_tx_info *tx_info;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1033:  for (i = start; i < nr_frags; i++) {",
          "1034:   int j, newerr;",
          "1036:   pending_idx = frag_get_pending_idx(&shinfo->frags[i]);",
          "1040:   if (likely(!newerr)) {",
          "1042:    if (unlikely(err))",
          "",
          "[Removed Lines]",
          "1039:   newerr = (++gop)->status;",
          "",
          "[Added Lines]",
          "1164:   pending_ring_idx_t head;",
          "1167:   tx_info = &netbk->pending_tx_info[pending_idx];",
          "1168:   head = tx_info->head;",
          "1171:   do {",
          "1172:    newerr = (++gop)->status;",
          "1173:    if (newerr)",
          "1174:     break;",
          "1175:    peek = netbk->pending_ring[pending_index(++head)];",
          "1176:   } while (!pending_tx_is_head(netbk, peek));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1256:  struct sk_buff *skb;",
          "1257:  int ret;",
          "1260:   !list_empty(&netbk->net_schedule_list)) {",
          "1261:   struct xenvif *vif;",
          "1262:   struct xen_netif_tx_request txreq;",
          "1264:   struct page *page;",
          "1265:   struct xen_netif_extra_info extras[XEN_NETIF_EXTRA_TYPE_MAX-1];",
          "1266:   u16 pending_idx;",
          "",
          "[Removed Lines]",
          "1259:  while (((nr_pending_reqs(netbk) + MAX_SKB_FRAGS) < MAX_PENDING_REQS) &&",
          "1263:   struct xen_netif_tx_request txfrags[MAX_SKB_FRAGS];",
          "",
          "[Added Lines]",
          "1397:  while ((nr_pending_reqs(netbk) + XEN_NETIF_NR_SLOTS_MIN",
          "1398:   < MAX_PENDING_REQS) &&",
          "1402:   struct xen_netif_tx_request txfrags[max_skb_slots];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1321:     continue;",
          "1322:   }",
          "1325:   if (unlikely(ret < 0))",
          "1326:    continue;",
          "",
          "[Removed Lines]",
          "1324:   ret = netbk_count_requests(vif, &txreq, txfrags, work_to_do);",
          "",
          "[Added Lines]",
          "1463:   ret = netbk_count_requests(vif, &txreq, idx,",
          "1464:         txfrags, work_to_do);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1348:   pending_idx = netbk->pending_ring[index];",
          "1350:   data_len = (txreq.size > PKT_PROT_LEN &&",
          "1352:    PKT_PROT_LEN : txreq.size;",
          "1354:   skb = alloc_skb(data_len + NET_SKB_PAD + NET_IP_ALIGN,",
          "",
          "[Removed Lines]",
          "1351:        ret < MAX_SKB_FRAGS) ?",
          "",
          "[Added Lines]",
          "1491:        ret < XEN_NETIF_NR_SLOTS_MIN) ?",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1398:   memcpy(&netbk->pending_tx_info[pending_idx].req,",
          "1399:          &txreq, sizeof(txreq));",
          "1400:   netbk->pending_tx_info[pending_idx].vif = vif;",
          "1403:   __skb_put(skb, data_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541:   netbk->pending_tx_info[pending_idx].head = index;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1528: {",
          "1529:  struct xenvif *vif;",
          "1530:  struct pending_tx_info *pending_tx_info;",
          "1534:  if (netbk->mmap_pages[pending_idx] == NULL)",
          "",
          "[Removed Lines]",
          "1531:  pending_ring_idx_t index;",
          "",
          "[Added Lines]",
          "1672:  pending_ring_idx_t head;",
          "1675:  BUG_ON(netbk->mmap_pages[pending_idx] == (void *)(~0UL));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1537:  pending_tx_info = &netbk->pending_tx_info[pending_idx];",
          "1539:  vif = pending_tx_info->vif;",
          "1549:  put_page(netbk->mmap_pages[pending_idx]);",
          "1550:  netbk->mmap_pages[pending_idx] = NULL;",
          "1551: }",
          "1553: static void make_tx_response(struct xenvif *vif,",
          "1554:         struct xen_netif_tx_request *txp,",
          "1555:         s8       st)",
          "",
          "[Removed Lines]",
          "1541:  make_tx_response(vif, &pending_tx_info->req, status);",
          "1543:  index = pending_index(netbk->pending_prod++);",
          "1544:  netbk->pending_ring[index] = pending_idx;",
          "1546:  xenvif_put(vif);",
          "1548:  netbk->mmap_pages[pending_idx]->mapping = NULL;",
          "",
          "[Added Lines]",
          "1684:  head = pending_tx_info->head;",
          "1686:  BUG_ON(!pending_tx_is_head(netbk, head));",
          "1687:  BUG_ON(netbk->pending_ring[pending_index(head)] != pending_idx);",
          "1689:  do {",
          "1690:   pending_ring_idx_t index;",
          "1691:   pending_ring_idx_t idx = pending_index(head);",
          "1692:   u16 info_idx = netbk->pending_ring[idx];",
          "1694:   pending_tx_info = &netbk->pending_tx_info[info_idx];",
          "1695:   make_tx_response(vif, &pending_tx_info->req, status);",
          "1701:   pending_tx_info->head = 0;",
          "1703:   index = pending_index(netbk->pending_prod++);",
          "1704:   netbk->pending_ring[index] = netbk->pending_ring[info_idx];",
          "1706:   xenvif_put(vif);",
          "1708:   peek = netbk->pending_ring[pending_index(++head)];",
          "1710:  } while (!pending_tx_is_head(netbk, peek));",
          "1712:  netbk->mmap_pages[pending_idx]->mapping = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1602: static inline int tx_work_todo(struct xen_netbk *netbk)",
          "1603: {",
          "1607:   return 1;",
          "1609:  return 0;",
          "",
          "[Removed Lines]",
          "1605:  if (((nr_pending_reqs(netbk) + MAX_SKB_FRAGS) < MAX_PENDING_REQS) &&",
          "1606:    !list_empty(&netbk->net_schedule_list))",
          "",
          "[Added Lines]",
          "1770:  if ((nr_pending_reqs(netbk) + XEN_NETIF_NR_SLOTS_MIN",
          "1771:       < MAX_PENDING_REQS) &&",
          "1772:       !list_empty(&netbk->net_schedule_list))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1686:  if (!xen_domain())",
          "1687:   return -ENODEV;",
          "1689:  xen_netbk_group_nr = num_online_cpus();",
          "1690:  xen_netbk = vzalloc(sizeof(struct xen_netbk) * xen_netbk_group_nr);",
          "1691:  if (!xen_netbk)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1855:  if (max_skb_slots < XEN_NETIF_NR_SLOTS_MIN) {",
          "1856:   printk(KERN_INFO",
          "1857:          \"xen-netback: max_skb_slots too small (%d), bump it to XEN_NETIF_NR_SLOTS_MIN (%d)\\n\",",
          "1858:          max_skb_slots, XEN_NETIF_NR_SLOTS_MIN);",
          "1859:   max_skb_slots = XEN_NETIF_NR_SLOTS_MIN;",
          "1860:  }",
          "",
          "---------------"
        ],
        "include/xen/interface/io/netif.h||include/xen/interface/io/netif.h": [
          "File: include/xen/interface/io/netif.h -> include/xen/interface/io/netif.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <xen/interface/io/ring.h>",
          "13: #include <xen/interface/grant_table.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define XEN_NETIF_NR_SLOTS_MIN 18",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48856286b64e4b66ec62b94e504d0b29c1ade664",
      "candidate_info": {
        "commit_hash": "48856286b64e4b66ec62b94e504d0b29c1ade664",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/48856286b64e4b66ec62b94e504d0b29c1ade664",
        "files": [
          "drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c"
        ],
        "message": "xen/netback: shutdown the ring if it contains garbage.\n\nA buggy or malicious frontend should not be able to confuse netback.\nIf we spot anything which is not as it should be then shutdown the\ndevice and don't try to continue with the ring in a potentially\nhostile state. Well behaved and non-hostile frontends will not be\npenalised.\n\nAs well as making the existing checks for such errors fatal also add a\nnew check that ensures that there isn't an insane number of requests\non the ring (i.e. more than would fit in the ring). If the ring\ncontains garbage then previously is was possible to loop over this\ninsane number, getting an error each time and therefore not generating\nany more pending requests and therefore not exiting the loop in\nxen_netbk_tx_build_gops for an externded period.\n\nAlso turn various netdev_dbg calls which no precipitate a fatal error\ninto netdev_err, they are rate limited because the device is shutdown\nafterwards.\n\nThis fixes at least one known DoS/softlockup of the backend domain.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nAcked-by: Jan Beulich <JBeulich@suse.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ],
          "candidate": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h": [
          "File: drivers/net/xen-netback/common.h -> drivers/net/xen-netback/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: void xenvif_notify_tx_completion(struct xenvif *vif);",
          "155: unsigned int xen_netbk_count_skb_slots(struct xenvif *vif, struct sk_buff *skb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: void xenvif_carrier_off(struct xenvif *vif);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c": [
          "File: drivers/net/xen-netback/interface.c -> drivers/net/xen-netback/interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:  return err;",
          "344: }",
          "347: {",
          "348:  struct net_device *dev = vif->dev;",
          "358:  atomic_dec(&vif->refcnt);",
          "359:  wait_event(vif->waiting_to_free, atomic_read(&vif->refcnt) == 0);",
          "",
          "[Removed Lines]",
          "346: void xenvif_disconnect(struct xenvif *vif)",
          "349:  if (netif_carrier_ok(dev)) {",
          "350:   rtnl_lock();",
          "352:   if (netif_running(dev))",
          "353:    xenvif_down(vif);",
          "354:   rtnl_unlock();",
          "355:   xenvif_put(vif);",
          "356:  }",
          "",
          "[Added Lines]",
          "346: void xenvif_carrier_off(struct xenvif *vif)",
          "350:  rtnl_lock();",
          "352:  if (netif_running(dev))",
          "353:   xenvif_down(vif);",
          "354:  rtnl_unlock();",
          "355:  xenvif_put(vif);",
          "356: }",
          "358: void xenvif_disconnect(struct xenvif *vif)",
          "359: {",
          "360:  if (netif_carrier_ok(vif->dev))",
          "361:   xenvif_carrier_off(vif);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c": [
          "File: drivers/net/xen-netback/netback.c -> drivers/net/xen-netback/netback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:  xenvif_put(vif);",
          "889: }",
          "891: static int netbk_count_requests(struct xenvif *vif,",
          "892:     struct xen_netif_tx_request *first,",
          "893:     struct xen_netif_tx_request *txp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891: static void netbk_fatal_tx_err(struct xenvif *vif)",
          "892: {",
          "893:  netdev_err(vif->dev, \"fatal error; disabling device\\n\");",
          "894:  xenvif_carrier_off(vif);",
          "895:  xenvif_put(vif);",
          "896: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:  do {",
          "903:   if (frags >= work_to_do) {",
          "905:    return -frags;",
          "906:   }",
          "908:   if (unlikely(frags >= MAX_SKB_FRAGS)) {",
          "910:    return -frags;",
          "911:   }",
          "913:   memcpy(txp, RING_GET_REQUEST(&vif->tx, cons + frags),",
          "914:          sizeof(*txp));",
          "915:   if (txp->size > first->size) {",
          "917:    return -frags;",
          "918:   }",
          "",
          "[Removed Lines]",
          "904:    netdev_dbg(vif->dev, \"Need more frags\\n\");",
          "909:    netdev_dbg(vif->dev, \"Too many frags\\n\");",
          "916:    netdev_dbg(vif->dev, \"Frags galore\\n\");",
          "",
          "[Added Lines]",
          "911:    netdev_err(vif->dev, \"Need more frags\\n\");",
          "912:    netbk_fatal_tx_err(vif);",
          "917:    netdev_err(vif->dev, \"Too many frags\\n\");",
          "918:    netbk_fatal_tx_err(vif);",
          "925:    netdev_err(vif->dev, \"Frag is bigger than frame.\\n\");",
          "926:    netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "921:   frags++;",
          "923:   if (unlikely((txp->offset + txp->size) > PAGE_SIZE)) {",
          "925:      txp->offset, txp->size);",
          "926:    return -frags;",
          "927:   }",
          "928:  } while ((txp++)->flags & XEN_NETTXF_more_data);",
          "",
          "[Removed Lines]",
          "924:    netdev_dbg(vif->dev, \"txp->offset: %x, size: %u\\n\",",
          "",
          "[Added Lines]",
          "934:    netdev_err(vif->dev, \"txp->offset: %x, size: %u\\n\",",
          "936:    netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1096:  do {",
          "1097:   if (unlikely(work_to_do-- <= 0)) {",
          "1099:    return -EBADR;",
          "1100:   }",
          "",
          "[Removed Lines]",
          "1098:    netdev_dbg(vif->dev, \"Missing extra info\\n\");",
          "",
          "[Added Lines]",
          "1109:    netdev_err(vif->dev, \"Missing extra info\\n\");",
          "1110:    netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1104:   if (unlikely(!extra.type ||",
          "1105:         extra.type >= XEN_NETIF_EXTRA_TYPE_MAX)) {",
          "1106:    vif->tx.req_cons = ++cons;",
          "1108:        \"Invalid extra type: %d\\n\", extra.type);",
          "1109:    return -EINVAL;",
          "1110:   }",
          "",
          "[Removed Lines]",
          "1107:    netdev_dbg(vif->dev,",
          "",
          "[Added Lines]",
          "1119:    netdev_err(vif->dev,",
          "1121:    netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1121:         struct xen_netif_extra_info *gso)",
          "1122: {",
          "1123:  if (!gso->u.gso.size) {",
          "1125:   return -EINVAL;",
          "1126:  }",
          "1129:  if (gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) {",
          "1131:   return -EINVAL;",
          "1132:  }",
          "",
          "[Removed Lines]",
          "1124:   netdev_dbg(vif->dev, \"GSO size must not be zero.\\n\");",
          "1130:   netdev_dbg(vif->dev, \"Bad GSO type %d.\\n\", gso->u.gso.type);",
          "",
          "[Added Lines]",
          "1137:   netdev_err(vif->dev, \"GSO size must not be zero.\\n\");",
          "1138:   netbk_fatal_tx_err(vif);",
          "1144:   netdev_err(vif->dev, \"Bad GSO type %d.\\n\", gso->u.gso.type);",
          "1145:   netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1266:   vif = poll_net_schedule_list(netbk);",
          "1267:   if (!vif)",
          "1268:    continue;",
          "1270:   RING_FINAL_CHECK_FOR_REQUESTS(&vif->tx, work_to_do);",
          "1271:   if (!work_to_do) {",
          "1272:    xenvif_put(vif);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290:   if (vif->tx.sring->req_prod - vif->tx.req_cons >",
          "1291:       XEN_NETIF_TX_RING_SIZE) {",
          "1292:    netdev_err(vif->dev,",
          "1293:        \"Impossible number of requests. \"",
          "1294:        \"req_prod %d, req_cons %d, size %ld\\n\",",
          "1295:        vif->tx.sring->req_prod, vif->tx.req_cons,",
          "1296:        XEN_NETIF_TX_RING_SIZE);",
          "1297:    netbk_fatal_tx_err(vif);",
          "1298:    continue;",
          "1299:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1294:    work_to_do = xen_netbk_get_extras(vif, extras,",
          "1295:          work_to_do);",
          "1296:    idx = vif->tx.req_cons;",
          "1299:     continue;",
          "1301:   }",
          "1303:   ret = netbk_count_requests(vif, &txreq, txfrags, work_to_do);",
          "1306:    continue;",
          "1308:   idx += ret;",
          "1310:   if (unlikely(txreq.size < ETH_HLEN)) {",
          "",
          "[Removed Lines]",
          "1297:    if (unlikely(work_to_do < 0)) {",
          "1298:     netbk_tx_err(vif, &txreq, idx);",
          "1300:    }",
          "1304:   if (unlikely(ret < 0)) {",
          "1305:    netbk_tx_err(vif, &txreq, idx - ret);",
          "1307:   }",
          "",
          "[Added Lines]",
          "1328:    if (unlikely(work_to_do < 0))",
          "1333:   if (unlikely(ret < 0))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1318:   if (unlikely((txreq.offset + txreq.size) > PAGE_SIZE)) {",
          "1320:        \"txreq.offset: %x, size: %u, end: %lu\\n\",",
          "1321:        txreq.offset, txreq.size,",
          "1322:        (txreq.offset&~PAGE_MASK) + txreq.size);",
          "1324:    continue;",
          "1325:   }",
          "",
          "[Removed Lines]",
          "1319:    netdev_dbg(vif->dev,",
          "1323:    netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "1347:    netdev_err(vif->dev,",
          "1351:    netbk_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1348:    gso = &extras[XEN_NETIF_EXTRA_TYPE_GSO - 1];",
          "1350:    if (netbk_set_skb_gso(vif, skb, gso)) {",
          "1351:     kfree_skb(skb);",
          "1353:     continue;",
          "1354:    }",
          "1355:   }",
          "",
          "[Removed Lines]",
          "1352:     netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7376419a4697657b2e0ab904a592aacc2e485bf1",
      "candidate_info": {
        "commit_hash": "7376419a4697657b2e0ab904a592aacc2e485bf1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7376419a4697657b2e0ab904a592aacc2e485bf1",
        "files": [
          "drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c"
        ],
        "message": "xen-netback: rename functions\n\nAs we move to 1:1 model and melt xen_netbk and xenvif together, it would\nbe better to use single prefix for all functions in xen-netback.\n\nSigned-off-by: Wei Liu <wei.liu2@citrix.com>\nAcked-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h",
          "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c",
          "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ],
          "candidate": [
            "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/xen-netback/common.h||drivers/net/xen-netback/common.h": [
          "File: drivers/net/xen-netback/common.h -> drivers/net/xen-netback/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "191: int xenvif_schedulable(struct xenvif *vif);",
          "209: void xenvif_notify_tx_completion(struct xenvif *vif);",
          "",
          "[Removed Lines]",
          "193: int xen_netbk_rx_ring_full(struct xenvif *vif);",
          "195: int xen_netbk_must_stop_queue(struct xenvif *vif);",
          "198: void xen_netbk_unmap_frontend_rings(struct xenvif *vif);",
          "199: int xen_netbk_map_frontend_rings(struct xenvif *vif,",
          "200:      grant_ref_t tx_ring_ref,",
          "201:      grant_ref_t rx_ring_ref);",
          "204: void xen_netbk_check_rx_xenvif(struct xenvif *vif);",
          "207: void xen_netbk_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "193: int xenvif_rx_ring_full(struct xenvif *vif);",
          "195: int xenvif_must_stop_queue(struct xenvif *vif);",
          "198: void xenvif_unmap_frontend_rings(struct xenvif *vif);",
          "199: int xenvif_map_frontend_rings(struct xenvif *vif,",
          "200:          grant_ref_t tx_ring_ref,",
          "201:          grant_ref_t rx_ring_ref);",
          "204: void xenvif_check_rx_xenvif(struct xenvif *vif);",
          "207: void xenvif_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212: void xenvif_carrier_off(struct xenvif *vif);",
          "222: extern bool separate_tx_rx_irq;",
          "",
          "[Removed Lines]",
          "215: unsigned int xen_netbk_count_skb_slots(struct xenvif *vif, struct sk_buff *skb);",
          "217: int xen_netbk_tx_action(struct xenvif *vif, int budget);",
          "218: void xen_netbk_rx_action(struct xenvif *vif);",
          "220: int xen_netbk_kthread(void *data);",
          "",
          "[Added Lines]",
          "215: unsigned int xenvif_count_skb_slots(struct xenvif *vif, struct sk_buff *skb);",
          "217: int xenvif_tx_action(struct xenvif *vif, int budget);",
          "218: void xenvif_rx_action(struct xenvif *vif);",
          "220: int xenvif_kthread(void *data);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/interface.c||drivers/net/xen-netback/interface.c": [
          "File: drivers/net/xen-netback/interface.c -> drivers/net/xen-netback/interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static int xenvif_rx_schedulable(struct xenvif *vif)",
          "50: {",
          "52: }",
          "54: static irqreturn_t xenvif_tx_interrupt(int irq, void *dev_id)",
          "",
          "[Removed Lines]",
          "51:  return xenvif_schedulable(vif) && !xen_netbk_rx_ring_full(vif);",
          "",
          "[Added Lines]",
          "51:  return xenvif_schedulable(vif) && !xenvif_rx_ring_full(vif);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  struct xenvif *vif = container_of(napi, struct xenvif, napi);",
          "67:  int work_done;",
          "71:  if (work_done < budget) {",
          "72:   int more_to_do = 0;",
          "",
          "[Removed Lines]",
          "69:  work_done = xen_netbk_tx_action(vif, budget);",
          "",
          "[Added Lines]",
          "69:  work_done = xenvif_tx_action(vif, budget);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   goto drop;",
          "139:   netif_stop_queue(dev);",
          "143:  return NETDEV_TX_OK;",
          "",
          "[Removed Lines]",
          "136:  vif->rx_req_cons_peek += xen_netbk_count_skb_slots(vif, skb);",
          "138:  if (vif->can_queue && xen_netbk_must_stop_queue(vif))",
          "141:  xen_netbk_queue_tx_skb(vif, skb);",
          "",
          "[Added Lines]",
          "136:  vif->rx_req_cons_peek += xenvif_count_skb_slots(vif, skb);",
          "138:  if (vif->can_queue && xenvif_must_stop_queue(vif))",
          "141:  xenvif_queue_tx_skb(vif, skb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "166:  enable_irq(vif->tx_irq);",
          "167:  if (vif->tx_irq != vif->rx_irq)",
          "168:   enable_irq(vif->rx_irq);",
          "170: }",
          "172: static void xenvif_down(struct xenvif *vif)",
          "",
          "[Removed Lines]",
          "169:  xen_netbk_check_rx_xenvif(vif);",
          "",
          "[Added Lines]",
          "169:  xenvif_check_rx_xenvif(vif);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:  __module_get(THIS_MODULE);",
          "372:  if (err < 0)",
          "373:   goto err;",
          "",
          "[Removed Lines]",
          "371:  err = xen_netbk_map_frontend_rings(vif, tx_ring_ref, rx_ring_ref);",
          "",
          "[Added Lines]",
          "371:  err = xenvif_map_frontend_rings(vif, tx_ring_ref, rx_ring_ref);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:  }",
          "407:  init_waitqueue_head(&vif->wq);",
          "409:        (void *)vif, vif->dev->name);",
          "410:  if (IS_ERR(vif->task)) {",
          "411:   pr_warn(\"Could not allocate kthread for %s\\n\", vif->dev->name);",
          "",
          "[Removed Lines]",
          "408:  vif->task = kthread_create(xen_netbk_kthread,",
          "",
          "[Added Lines]",
          "408:  vif->task = kthread_create(xenvif_kthread,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "433:  unbind_from_irqhandler(vif->tx_irq, vif);",
          "434:  vif->tx_irq = 0;",
          "435: err_unmap:",
          "437: err:",
          "438:  module_put(THIS_MODULE);",
          "439:  return err;",
          "",
          "[Removed Lines]",
          "436:  xen_netbk_unmap_frontend_rings(vif);",
          "",
          "[Added Lines]",
          "436:  xenvif_unmap_frontend_rings(vif);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "482:  unregister_netdev(vif->dev);",
          "486:  free_netdev(vif->dev);",
          "",
          "[Removed Lines]",
          "484:  xen_netbk_unmap_frontend_rings(vif);",
          "",
          "[Added Lines]",
          "484:  xenvif_unmap_frontend_rings(vif);",
          "",
          "---------------"
        ],
        "drivers/net/xen-netback/netback.c||drivers/net/xen-netback/netback.c": [
          "File: drivers/net/xen-netback/netback.c -> drivers/net/xen-netback/netback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  return vif->pending_tx_info[idx].head != INVALID_PENDING_RING_IDX;",
          "81: }",
          "85: static void make_tx_response(struct xenvif *vif,",
          "86:         struct xen_netif_tx_request *txp,",
          "87:         s8       st);",
          "",
          "[Removed Lines]",
          "83: static void xen_netbk_idx_release(struct xenvif *vif, u16 pending_idx,",
          "84:       u8 status);",
          "",
          "[Added Lines]",
          "83: static void xenvif_idx_release(struct xenvif *vif, u16 pending_idx,",
          "84:           u8 status);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:  return max;",
          "151: }",
          "154: {",
          "155:  RING_IDX peek   = vif->rx_req_cons_peek;",
          "156:  RING_IDX needed = max_required_rx_slots(vif);",
          "",
          "[Removed Lines]",
          "153: int xen_netbk_rx_ring_full(struct xenvif *vif)",
          "",
          "[Added Lines]",
          "154: int xenvif_rx_ring_full(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:         ((vif->rx.rsp_prod_pvt + XEN_NETIF_RX_RING_SIZE - peek) < needed);",
          "160: }",
          "163: {",
          "165:   return 0;",
          "167:  vif->rx.sring->req_event = vif->rx_req_cons_peek +",
          "168:   max_required_rx_slots(vif);",
          "172: }",
          "",
          "[Removed Lines]",
          "162: int xen_netbk_must_stop_queue(struct xenvif *vif)",
          "164:  if (!xen_netbk_rx_ring_full(vif))",
          "171:  return xen_netbk_rx_ring_full(vif);",
          "",
          "[Added Lines]",
          "163: int xenvif_must_stop_queue(struct xenvif *vif)",
          "165:  if (!xenvif_rx_ring_full(vif))",
          "172:  return xenvif_rx_ring_full(vif);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220: {",
          "221:  unsigned int count;",
          "222:  int i, copy_off;",
          "",
          "[Removed Lines]",
          "219: unsigned int xen_netbk_count_skb_slots(struct xenvif *vif, struct sk_buff *skb)",
          "",
          "[Added Lines]",
          "220: unsigned int xenvif_count_skb_slots(struct xenvif *vif, struct sk_buff *skb)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303: {",
          "304:  struct gnttab_copy *copy_gop;",
          "305:  struct xenvif_rx_meta *meta;",
          "",
          "[Removed Lines]",
          "299: static void netbk_gop_frag_copy(struct xenvif *vif, struct sk_buff *skb,",
          "300:     struct netrx_pending_operations *npo,",
          "301:     struct page *page, unsigned long size,",
          "302:     unsigned long offset, int *head)",
          "",
          "[Added Lines]",
          "300: static void xenvif_gop_frag_copy(struct xenvif *vif, struct sk_buff *skb,",
          "301:      struct netrx_pending_operations *npo,",
          "302:      struct page *page, unsigned long size,",
          "303:      unsigned long offset, int *head)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "387: {",
          "388:  struct xenvif *vif = netdev_priv(skb->dev);",
          "389:  int nr_frags = skb_shinfo(skb)->nr_frags;",
          "",
          "[Removed Lines]",
          "385: static int netbk_gop_skb(struct sk_buff *skb,",
          "386:     struct netrx_pending_operations *npo)",
          "",
          "[Added Lines]",
          "386: static int xenvif_gop_skb(struct sk_buff *skb,",
          "387:      struct netrx_pending_operations *npo)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "426:   if (data + len > skb_tail_pointer(skb))",
          "427:    len = skb_tail_pointer(skb) - data;",
          "431:   data += len;",
          "432:  }",
          "434:  for (i = 0; i < nr_frags; i++) {",
          "440:  }",
          "442:  return npo->meta_prod - old_meta_prod;",
          "443: }",
          "453: {",
          "454:  struct gnttab_copy     *copy_op;",
          "455:  int status = XEN_NETIF_RSP_OKAY;",
          "",
          "[Removed Lines]",
          "429:   netbk_gop_frag_copy(vif, skb, npo,",
          "430:         virt_to_page(data), len, offset, &head);",
          "435:   netbk_gop_frag_copy(vif, skb, npo,",
          "436:         skb_frag_page(&skb_shinfo(skb)->frags[i]),",
          "437:         skb_frag_size(&skb_shinfo(skb)->frags[i]),",
          "438:         skb_shinfo(skb)->frags[i].page_offset,",
          "439:         &head);",
          "451: static int netbk_check_gop(struct xenvif *vif, int nr_meta_slots,",
          "452:       struct netrx_pending_operations *npo)",
          "",
          "[Added Lines]",
          "430:   xenvif_gop_frag_copy(vif, skb, npo,",
          "431:          virt_to_page(data), len, offset, &head);",
          "436:   xenvif_gop_frag_copy(vif, skb, npo,",
          "437:          skb_frag_page(&skb_shinfo(skb)->frags[i]),",
          "438:          skb_frag_size(&skb_shinfo(skb)->frags[i]),",
          "439:          skb_shinfo(skb)->frags[i].page_offset,",
          "440:          &head);",
          "452: static int xenvif_check_gop(struct xenvif *vif, int nr_meta_slots,",
          "453:        struct netrx_pending_operations *npo)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:  return status;",
          "469: }",
          "474: {",
          "475:  int i;",
          "476:  unsigned long offset;",
          "",
          "[Removed Lines]",
          "471: static void netbk_add_frag_responses(struct xenvif *vif, int status,",
          "472:          struct xenvif_rx_meta *meta,",
          "473:          int nr_meta_slots)",
          "",
          "[Added Lines]",
          "472: static void xenvif_add_frag_responses(struct xenvif *vif, int status,",
          "473:           struct xenvif_rx_meta *meta,",
          "474:           int nr_meta_slots)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "498:  int meta_slots_used;",
          "499: };",
          "502: {",
          "503:  wake_up(&vif->wq);",
          "504: }",
          "507: {",
          "508:  s8 status;",
          "509:  u16 flags;",
          "",
          "[Removed Lines]",
          "501: static void xen_netbk_kick_thread(struct xenvif *vif)",
          "506: void xen_netbk_rx_action(struct xenvif *vif)",
          "",
          "[Added Lines]",
          "502: static void xenvif_kick_thread(struct xenvif *vif)",
          "507: void xenvif_rx_action(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "532:   nr_frags = skb_shinfo(skb)->nr_frags;",
          "534:   sco = (struct skb_cb_overlay *)skb->cb;",
          "537:   count += nr_frags + 1;",
          "",
          "[Removed Lines]",
          "535:   sco->meta_slots_used = netbk_gop_skb(skb, &npo);",
          "",
          "[Added Lines]",
          "536:   sco->meta_slots_used = xenvif_gop_skb(skb, &npo);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "575:   vif->dev->stats.tx_bytes += skb->len;",
          "576:   vif->dev->stats.tx_packets++;",
          "580:   if (sco->meta_slots_used == 1)",
          "581:    flags = 0;",
          "",
          "[Removed Lines]",
          "578:   status = netbk_check_gop(vif, sco->meta_slots_used, &npo);",
          "",
          "[Added Lines]",
          "579:   status = xenvif_check_gop(vif, sco->meta_slots_used, &npo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "611:    gso->flags = 0;",
          "612:   }",
          "618:   RING_PUSH_RESPONSES_AND_CHECK_NOTIFY(&vif->rx, ret);",
          "",
          "[Removed Lines]",
          "614:   netbk_add_frag_responses(vif, status,",
          "615:       vif->meta + npo.meta_cons + 1,",
          "616:       sco->meta_slots_used);",
          "",
          "[Added Lines]",
          "615:   xenvif_add_frag_responses(vif, status,",
          "616:        vif->meta + npo.meta_cons + 1,",
          "617:        sco->meta_slots_used);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "633:  if (!skb_queue_empty(&vif->rx_queue))",
          "635: }",
          "638: {",
          "639:  skb_queue_tail(&vif->rx_queue, skb);",
          "642: }",
          "645: {",
          "646:  int more_to_do;",
          "",
          "[Removed Lines]",
          "634:   xen_netbk_kick_thread(vif);",
          "637: void xen_netbk_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb)",
          "641:  xen_netbk_kick_thread(vif);",
          "644: void xen_netbk_check_rx_xenvif(struct xenvif *vif)",
          "",
          "[Added Lines]",
          "635:   xenvif_kick_thread(vif);",
          "638: void xenvif_queue_tx_skb(struct xenvif *vif, struct sk_buff *skb)",
          "642:  xenvif_kick_thread(vif);",
          "645: void xenvif_check_rx_xenvif(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "675: {",
          "676:  struct xenvif *vif = (struct xenvif *)data;",
          "677:  tx_add_credit(vif);",
          "679: }",
          "683: {",
          "684:  RING_IDX cons = vif->tx.req_cons;",
          "",
          "[Removed Lines]",
          "678:  xen_netbk_check_rx_xenvif(vif);",
          "681: static void netbk_tx_err(struct xenvif *vif,",
          "682:     struct xen_netif_tx_request *txp, RING_IDX end)",
          "",
          "[Added Lines]",
          "679:  xenvif_check_rx_xenvif(vif);",
          "682: static void xenvif_tx_err(struct xenvif *vif,",
          "683:      struct xen_netif_tx_request *txp, RING_IDX end)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "692:  vif->tx.req_cons = cons;",
          "693: }",
          "696: {",
          "697:  netdev_err(vif->dev, \"fatal error; disabling device\\n\");",
          "698:  xenvif_carrier_off(vif);",
          "699: }",
          "705: {",
          "706:  RING_IDX cons = vif->tx.req_cons;",
          "707:  int slots = 0;",
          "",
          "[Removed Lines]",
          "695: static void netbk_fatal_tx_err(struct xenvif *vif)",
          "701: static int netbk_count_requests(struct xenvif *vif,",
          "702:     struct xen_netif_tx_request *first,",
          "703:     struct xen_netif_tx_request *txp,",
          "704:     int work_to_do)",
          "",
          "[Added Lines]",
          "696: static void xenvif_fatal_tx_err(struct xenvif *vif)",
          "702: static int xenvif_count_requests(struct xenvif *vif,",
          "703:      struct xen_netif_tx_request *first,",
          "704:      struct xen_netif_tx_request *txp,",
          "705:      int work_to_do)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "718:    netdev_err(vif->dev,",
          "719:        \"Asked for %d slots but exceeds this limit\\n\",",
          "720:        work_to_do);",
          "722:    return -ENODATA;",
          "723:   }",
          "",
          "[Removed Lines]",
          "721:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "722:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "729:    netdev_err(vif->dev,",
          "730:        \"Malicious frontend using %d slots, threshold %u\\n\",",
          "731:        slots, fatal_skb_slots);",
          "733:    return -E2BIG;",
          "734:   }",
          "",
          "[Removed Lines]",
          "732:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "733:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "777:   if (unlikely((txp->offset + txp->size) > PAGE_SIZE)) {",
          "778:    netdev_err(vif->dev, \"Cross page boundary, txp->offset: %x, size: %u\\n\",",
          "779:      txp->offset, txp->size);",
          "781:    return -EINVAL;",
          "782:   }",
          "",
          "[Removed Lines]",
          "780:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "781:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "789:  } while (more_data);",
          "791:  if (drop_err) {",
          "793:   return drop_err;",
          "794:  }",
          "796:  return slots;",
          "797: }",
          "801: {",
          "802:  struct page *page;",
          "",
          "[Removed Lines]",
          "792:   netbk_tx_err(vif, first, cons + slots);",
          "799: static struct page *xen_netbk_alloc_page(struct xenvif *vif,",
          "800:       u16 pending_idx)",
          "",
          "[Added Lines]",
          "793:   xenvif_tx_err(vif, first, cons + slots);",
          "800: static struct page *xenvif_alloc_page(struct xenvif *vif,",
          "801:           u16 pending_idx)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "809:  return page;",
          "810: }",
          "816: {",
          "817:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
          "818:  skb_frag_t *frags = shinfo->frags;",
          "",
          "[Removed Lines]",
          "812: static struct gnttab_copy *xen_netbk_get_requests(struct xenvif *vif,",
          "813:         struct sk_buff *skb,",
          "814:         struct xen_netif_tx_request *txp,",
          "815:         struct gnttab_copy *gop)",
          "",
          "[Added Lines]",
          "813: static struct gnttab_copy *xenvif_get_requests(struct xenvif *vif,",
          "814:             struct sk_buff *skb,",
          "815:             struct xen_netif_tx_request *txp,",
          "816:             struct gnttab_copy *gop)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "918: err:",
          "920:  while (shinfo->nr_frags-- > start) {",
          "922:     frag_get_pending_idx(&frags[shinfo->nr_frags]),",
          "923:     XEN_NETIF_RSP_ERROR);",
          "924:  }",
          "926:  if (start)",
          "929:  return NULL;",
          "930: }",
          "935: {",
          "936:  struct gnttab_copy *gop = *gopp;",
          "937:  u16 pending_idx = *((u16 *)skb->data);",
          "",
          "[Removed Lines]",
          "921:   xen_netbk_idx_release(vif,",
          "927:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "932: static int xen_netbk_tx_check_gop(struct xenvif *vif,",
          "933:       struct sk_buff *skb,",
          "934:       struct gnttab_copy **gopp)",
          "",
          "[Added Lines]",
          "922:   xenvif_idx_release(vif,",
          "928:   xenvif_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "933: static int xenvif_tx_check_gop(struct xenvif *vif,",
          "934:           struct sk_buff *skb,",
          "935:           struct gnttab_copy **gopp)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "945:  err = gop->status;",
          "946:  if (unlikely(err))",
          "950:  start = (frag_get_pending_idx(&shinfo->frags[0]) == pending_idx);",
          "",
          "[Removed Lines]",
          "947:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "[Added Lines]",
          "948:   xenvif_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "968:   if (likely(!newerr)) {",
          "970:    if (unlikely(err))",
          "973:    continue;",
          "974:   }",
          "980:   if (err)",
          "",
          "[Removed Lines]",
          "971:     xen_netbk_idx_release(vif, pending_idx,",
          "972:             XEN_NETIF_RSP_OKAY);",
          "977:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "[Added Lines]",
          "972:     xenvif_idx_release(vif, pending_idx,",
          "973:          XEN_NETIF_RSP_OKAY);",
          "978:   xenvif_idx_release(vif, pending_idx, XEN_NETIF_RSP_ERROR);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "984:   pending_idx = *((u16 *)skb->data);",
          "986:   for (j = start; j < i; j++) {",
          "987:    pending_idx = frag_get_pending_idx(&shinfo->frags[j]);",
          "990:   }",
          "",
          "[Removed Lines]",
          "985:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "988:    xen_netbk_idx_release(vif, pending_idx,",
          "989:            XEN_NETIF_RSP_OKAY);",
          "",
          "[Added Lines]",
          "986:   xenvif_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "989:    xenvif_idx_release(vif, pending_idx,",
          "990:         XEN_NETIF_RSP_OKAY);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "997:  return err;",
          "998: }",
          "1001: {",
          "1002:  struct skb_shared_info *shinfo = skb_shinfo(skb);",
          "1003:  int nr_frags = shinfo->nr_frags;",
          "",
          "[Removed Lines]",
          "1000: static void xen_netbk_fill_frags(struct xenvif *vif, struct sk_buff *skb)",
          "",
          "[Added Lines]",
          "1001: static void xenvif_fill_frags(struct xenvif *vif, struct sk_buff *skb)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1018:   skb->data_len += txp->size;",
          "1019:   skb->truesize += txp->size;",
          "1022:   get_page(vif->mmap_pages[pending_idx]);",
          "1024:  }",
          "1025: }",
          "1028:     struct xen_netif_extra_info *extras,",
          "1029:     int work_to_do)",
          "1030: {",
          "",
          "[Removed Lines]",
          "1023:   xen_netbk_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "1027: static int xen_netbk_get_extras(struct xenvif *vif,",
          "",
          "[Added Lines]",
          "1024:   xenvif_idx_release(vif, pending_idx, XEN_NETIF_RSP_OKAY);",
          "1028: static int xenvif_get_extras(struct xenvif *vif,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1034:  do {",
          "1035:   if (unlikely(work_to_do-- <= 0)) {",
          "1036:    netdev_err(vif->dev, \"Missing extra info\\n\");",
          "1038:    return -EBADR;",
          "1039:   }",
          "",
          "[Removed Lines]",
          "1037:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "1038:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1045:    vif->tx.req_cons = ++cons;",
          "1046:    netdev_err(vif->dev,",
          "1047:        \"Invalid extra type: %d\\n\", extra.type);",
          "1049:    return -EINVAL;",
          "1050:   }",
          "",
          "[Removed Lines]",
          "1048:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "1049:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1056:  return work_to_do;",
          "1057: }",
          "1062: {",
          "1063:  if (!gso->u.gso.size) {",
          "1064:   netdev_err(vif->dev, \"GSO size must not be zero.\\n\");",
          "1066:   return -EINVAL;",
          "1067:  }",
          "1070:  if (gso->u.gso.type != XEN_NETIF_GSO_TYPE_TCPV4) {",
          "1071:   netdev_err(vif->dev, \"Bad GSO type %d.\\n\", gso->u.gso.type);",
          "1073:   return -EINVAL;",
          "1074:  }",
          "",
          "[Removed Lines]",
          "1059: static int netbk_set_skb_gso(struct xenvif *vif,",
          "1060:         struct sk_buff *skb,",
          "1061:         struct xen_netif_extra_info *gso)",
          "1065:   netbk_fatal_tx_err(vif);",
          "1072:   netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "1060: static int xenvif_set_skb_gso(struct xenvif *vif,",
          "1061:          struct sk_buff *skb,",
          "1062:          struct xen_netif_extra_info *gso)",
          "1066:   xenvif_fatal_tx_err(vif);",
          "1073:   xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1180:  return false;",
          "1181: }",
          "1184: {",
          "1185:  struct gnttab_copy *gop = vif->tx_copy_ops, *request_gop;",
          "1186:  struct sk_buff *skb;",
          "",
          "[Removed Lines]",
          "1183: static unsigned xen_netbk_tx_build_gops(struct xenvif *vif)",
          "",
          "[Added Lines]",
          "1184: static unsigned xenvif_tx_build_gops(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1205:        \"req_prod %d, req_cons %d, size %ld\\n\",",
          "1206:        vif->tx.sring->req_prod, vif->tx.req_cons,",
          "1207:        XEN_NETIF_TX_RING_SIZE);",
          "1209:    continue;",
          "1210:   }",
          "",
          "[Removed Lines]",
          "1208:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "1209:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1230:   memset(extras, 0, sizeof(extras));",
          "1231:   if (txreq.flags & XEN_NETTXF_extra_info) {",
          "1234:    idx = vif->tx.req_cons;",
          "1235:    if (unlikely(work_to_do < 0))",
          "1236:     break;",
          "1237:   }",
          "1240:   if (unlikely(ret < 0))",
          "1241:    break;",
          "",
          "[Removed Lines]",
          "1232:    work_to_do = xen_netbk_get_extras(vif, extras,",
          "1233:          work_to_do);",
          "1239:   ret = netbk_count_requests(vif, &txreq, txfrags, work_to_do);",
          "",
          "[Added Lines]",
          "1233:    work_to_do = xenvif_get_extras(vif, extras,",
          "1234:              work_to_do);",
          "1240:   ret = xenvif_count_requests(vif, &txreq, txfrags, work_to_do);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1245:   if (unlikely(txreq.size < ETH_HLEN)) {",
          "1246:    netdev_dbg(vif->dev,",
          "1247:        \"Bad packet size: %d\\n\", txreq.size);",
          "1249:    break;",
          "1250:   }",
          "",
          "[Removed Lines]",
          "1248:    netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "1249:    xenvif_tx_err(vif, &txreq, idx);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1255:        \"txreq.offset: %x, size: %u, end: %lu\\n\",",
          "1256:        txreq.offset, txreq.size,",
          "1257:        (txreq.offset&~PAGE_MASK) + txreq.size);",
          "1259:    break;",
          "1260:   }",
          "",
          "[Removed Lines]",
          "1258:    netbk_fatal_tx_err(vif);",
          "",
          "[Added Lines]",
          "1259:    xenvif_fatal_tx_err(vif);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1271:   if (unlikely(skb == NULL)) {",
          "1272:    netdev_dbg(vif->dev,",
          "1273:        \"Can't allocate a skb in start_xmit.\\n\");",
          "1275:    break;",
          "1276:   }",
          "",
          "[Removed Lines]",
          "1274:    netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "1275:    xenvif_tx_err(vif, &txreq, idx);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1282:    struct xen_netif_extra_info *gso;",
          "1283:    gso = &extras[XEN_NETIF_EXTRA_TYPE_GSO - 1];",
          "1287:     kfree_skb(skb);",
          "1288:     break;",
          "1289:    }",
          "1290:   }",
          "1294:   if (!page) {",
          "1295:    kfree_skb(skb);",
          "1297:    break;",
          "1298:   }",
          "",
          "[Removed Lines]",
          "1285:    if (netbk_set_skb_gso(vif, skb, gso)) {",
          "1293:   page = xen_netbk_alloc_page(vif, pending_idx);",
          "1296:    netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "1286:    if (xenvif_set_skb_gso(vif, skb, gso)) {",
          "1294:   page = xenvif_alloc_page(vif, pending_idx);",
          "1297:    xenvif_tx_err(vif, &txreq, idx);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1330:   vif->pending_cons++;",
          "1333:   if (request_gop == NULL) {",
          "1334:    kfree_skb(skb);",
          "1336:    break;",
          "1337:   }",
          "1338:   gop = request_gop;",
          "",
          "[Removed Lines]",
          "1332:   request_gop = xen_netbk_get_requests(vif, skb, txfrags, gop);",
          "1335:    netbk_tx_err(vif, &txreq, idx);",
          "",
          "[Added Lines]",
          "1333:   request_gop = xenvif_get_requests(vif, skb, txfrags, gop);",
          "1336:    xenvif_tx_err(vif, &txreq, idx);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1349: }",
          "1353: {",
          "1354:  struct gnttab_copy *gop = vif->tx_copy_ops;",
          "1355:  struct sk_buff *skb;",
          "",
          "[Removed Lines]",
          "1352: static int xen_netbk_tx_submit(struct xenvif *vif, int budget)",
          "",
          "[Added Lines]",
          "1353: static int xenvif_tx_submit(struct xenvif *vif, int budget)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1365:   txp = &vif->pending_tx_info[pending_idx].req;",
          "1369:    netdev_dbg(vif->dev, \"netback grant failed.\\n\");",
          "1370:    skb_shinfo(skb)->nr_frags = 0;",
          "1371:    kfree_skb(skb);",
          "",
          "[Removed Lines]",
          "1368:   if (unlikely(xen_netbk_tx_check_gop(vif, skb, &gop))) {",
          "",
          "[Added Lines]",
          "1369:   if (unlikely(xenvif_tx_check_gop(vif, skb, &gop))) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1382:    txp->size -= data_len;",
          "1383:   } else {",
          "1387:   }",
          "1389:   if (txp->flags & XEN_NETTXF_csum_blank)",
          "",
          "[Removed Lines]",
          "1385:    xen_netbk_idx_release(vif, pending_idx,",
          "1386:            XEN_NETIF_RSP_OKAY);",
          "",
          "[Added Lines]",
          "1386:    xenvif_idx_release(vif, pending_idx,",
          "1387:         XEN_NETIF_RSP_OKAY);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1391:   else if (txp->flags & XEN_NETTXF_data_validated)",
          "1392:    skb->ip_summed = CHECKSUM_UNNECESSARY;",
          "",
          "[Removed Lines]",
          "1394:   xen_netbk_fill_frags(vif, skb);",
          "",
          "[Added Lines]",
          "1395:   xenvif_fill_frags(vif, skb);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1428: }",
          "1432: {",
          "1433:  unsigned nr_gops;",
          "1434:  int work_done;",
          "",
          "[Removed Lines]",
          "1431: int xen_netbk_tx_action(struct xenvif *vif, int budget)",
          "",
          "[Added Lines]",
          "1432: int xenvif_tx_action(struct xenvif *vif, int budget)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1436:  if (unlikely(!tx_work_todo(vif)))",
          "1437:   return 0;",
          "1441:  if (nr_gops == 0)",
          "1442:   return 0;",
          "1444:  gnttab_batch_copy(vif->tx_copy_ops, nr_gops);",
          "1448:  return work_done;",
          "1449: }",
          "1453: {",
          "1454:  struct pending_tx_info *pending_tx_info;",
          "1455:  pending_ring_idx_t head;",
          "",
          "[Removed Lines]",
          "1439:  nr_gops = xen_netbk_tx_build_gops(vif);",
          "1446:  work_done = xen_netbk_tx_submit(vif, nr_gops);",
          "1451: static void xen_netbk_idx_release(struct xenvif *vif, u16 pending_idx,",
          "1452:       u8 status)",
          "",
          "[Added Lines]",
          "1440:  nr_gops = xenvif_tx_build_gops(vif);",
          "1447:  work_done = xenvif_tx_submit(vif, nr_gops);",
          "1452: static void xenvif_idx_release(struct xenvif *vif, u16 pending_idx,",
          "1453:           u8 status)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1554:  return 0;",
          "1555: }",
          "1558: {",
          "1559:  if (vif->tx.sring)",
          "1560:   xenbus_unmap_ring_vfree(xenvif_to_xenbus_device(vif),",
          "",
          "[Removed Lines]",
          "1557: void xen_netbk_unmap_frontend_rings(struct xenvif *vif)",
          "",
          "[Added Lines]",
          "1558: void xenvif_unmap_frontend_rings(struct xenvif *vif)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1564:      vif->rx.sring);",
          "1565: }",
          "1570: {",
          "1571:  void *addr;",
          "1572:  struct xen_netif_tx_sring *txs;",
          "",
          "[Removed Lines]",
          "1567: int xen_netbk_map_frontend_rings(struct xenvif *vif,",
          "1568:      grant_ref_t tx_ring_ref,",
          "1569:      grant_ref_t rx_ring_ref)",
          "",
          "[Added Lines]",
          "1568: int xenvif_map_frontend_rings(struct xenvif *vif,",
          "1569:          grant_ref_t tx_ring_ref,",
          "1570:          grant_ref_t rx_ring_ref)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1595:  return 0;",
          "1597: err:",
          "1599:  return err;",
          "1600: }",
          "1603: {",
          "1604:  struct xenvif *vif = data;",
          "",
          "[Removed Lines]",
          "1598:  xen_netbk_unmap_frontend_rings(vif);",
          "1602: int xen_netbk_kthread(void *data)",
          "",
          "[Added Lines]",
          "1599:  xenvif_unmap_frontend_rings(vif);",
          "1603: int xenvif_kthread(void *data)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1611:    break;",
          "1613:   if (rx_work_todo(vif))",
          "1616:   cond_resched();",
          "1617:  }",
          "",
          "[Removed Lines]",
          "1614:    xen_netbk_rx_action(vif);",
          "",
          "[Added Lines]",
          "1615:    xenvif_rx_action(vif);",
          "",
          "---------------"
        ]
      }
    }
  ]
}