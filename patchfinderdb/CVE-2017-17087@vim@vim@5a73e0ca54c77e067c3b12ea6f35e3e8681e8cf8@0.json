{
  "cve_id": "CVE-2017-17087",
  "cve_desc": "fileio.c in Vim prior to 8.0.1263 sets the group ownership of a .swp file to the editor's primary group (which may be different from the group ownership of the original file), which allows local users to obtain sensitive information by leveraging an applicable group membership, as demonstrated by /etc/shadow owned by root:shadow mode 0640, but /etc/.shadow.swp owned by root:users mode 0640, a different vulnerability than CVE-2017-1000382.",
  "repo": "vim/vim",
  "patch_hash": "5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
  "patch_info": {
    "commit_hash": "5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/5a73e0ca54c77e067c3b12ea6f35e3e8681e8cf8",
    "files": [
      "src/Makefile",
      "src/fileio.c",
      "src/testdir/test_swap.vim",
      "src/version.c"
    ],
    "message": "patch 8.0.1263: others can read the swap file if a user is careless\n\nProblem:    Others can read the swap file if a user is careless with his\n            primary group.\nSolution:   If the group permission allows for reading but the world\n            permissions doesn't, make sure the group is right.",
    "before_after_code_files": [
      "src/fileio.c||src/fileio.c",
      "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/fileio.c||src/fileio.c": [
      "File: src/fileio.c -> src/fileio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "717:  if (swap_mode > 0 && curbuf->b_ml.ml_mfp != NULL",
      "718:      && curbuf->b_ml.ml_mfp->mf_fname != NULL)",
      "720: #endif",
      "721:     }",
      "",
      "[Removed Lines]",
      "719:      (void)mch_setperm(curbuf->b_ml.ml_mfp->mf_fname, (long)swap_mode);",
      "",
      "[Added Lines]",
      "719:  {",
      "720:      char_u *swap_fname = curbuf->b_ml.ml_mfp->mf_fname;",
      "729:      if ((swap_mode & 044) == 040)",
      "730:      {",
      "731:   stat_T swap_st;",
      "733:   if (mch_stat((char *)swap_fname, &swap_st) >= 0",
      "734:    && st.st_gid != swap_st.st_gid",
      "735:    && fchown(curbuf->b_ml.ml_mfp->mf_fd, -1, st.st_gid)",
      "736:           == -1)",
      "737:       swap_mode &= 0600;",
      "738:      }",
      "740:      (void)mch_setperm(swap_fname, (long)swap_mode);",
      "741:  }",
      "",
      "---------------"
    ],
    "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
      "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \" Tests for the swap feature",
      "5:   if !has(\"unix\")",
      "6:     return",
      "7:   endif",
      "48: endfunc",
      "",
      "[Removed Lines]",
      "3: \" Tests for 'directory' option.",
      "4: func Test_swap_directory()",
      "8:   let content = ['start of testfile',",
      "9:        \\ 'line 2 Abcdefghij',",
      "10:        \\ 'line 3 Abcdefghij',",
      "11:        \\ 'end of testfile']",
      "12:   call writefile(content, 'Xtest1')",
      "14:   \"  '.', swap file in the same directory as file",
      "15:   set dir=.,~",
      "17:   \" Verify that the swap file doesn't exist in the current directory",
      "18:   call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
      "19:   edit Xtest1",
      "20:   let swfname = split(execute(\"swapname\"))[0]",
      "21:   call assert_equal([swfname], glob(swfname, 1, 1, 1))",
      "23:   \" './dir', swap file in a directory relative to the file",
      "24:   set dir=./Xtest2,.,~",
      "26:   call mkdir(\"Xtest2\")",
      "27:   edit Xtest1",
      "28:   call assert_equal([], glob(swfname, 1, 1, 1))",
      "29:   let swfname = \"Xtest2/Xtest1.swp\"",
      "30:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "31:   call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
      "33:   \" 'dir', swap file in directory relative to the current dir",
      "34:   set dir=Xtest.je,~",
      "36:   call mkdir(\"Xtest.je\")",
      "37:   call writefile(content, 'Xtest2/Xtest3')",
      "38:   edit Xtest2/Xtest3",
      "39:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
      "40:   let swfname = \"Xtest.je/Xtest3.swp\"",
      "41:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "42:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
      "44:   set dir&",
      "45:   call delete(\"Xtest1\")",
      "46:   call delete(\"Xtest2\", \"rf\")",
      "47:   call delete(\"Xtest.je\", \"rf\")",
      "",
      "[Added Lines]",
      "3: \"\" Tests for 'directory' option.",
      "4: \"func Test_swap_directory()",
      "5: \"  if !has(\"unix\")",
      "6: \"    return",
      "7: \"  endif",
      "8: \"  let content = ['start of testfile',",
      "9: \"       \\ 'line 2 Abcdefghij',",
      "10: \"       \\ 'line 3 Abcdefghij',",
      "11: \"       \\ 'end of testfile']",
      "12: \"  call writefile(content, 'Xtest1')",
      "13: \"",
      "14: \"  \"  '.', swap file in the same directory as file",
      "15: \"  set dir=.,~",
      "16: \"",
      "17: \"  \" Verify that the swap file doesn't exist in the current directory",
      "18: \"  call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
      "19: \"  edit Xtest1",
      "20: \"  let swfname = split(execute(\"swapname\"))[0]",
      "21: \"  call assert_equal([swfname], glob(swfname, 1, 1, 1))",
      "22: \"",
      "23: \"  \" './dir', swap file in a directory relative to the file",
      "24: \"  set dir=./Xtest2,.,~",
      "25: \"",
      "26: \"  call mkdir(\"Xtest2\")",
      "27: \"  edit Xtest1",
      "28: \"  call assert_equal([], glob(swfname, 1, 1, 1))",
      "29: \"  let swfname = \"Xtest2/Xtest1.swp\"",
      "30: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "31: \"  call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
      "32: \"",
      "33: \"  \" 'dir', swap file in directory relative to the current dir",
      "34: \"  set dir=Xtest.je,~",
      "35: \"",
      "36: \"  call mkdir(\"Xtest.je\")",
      "37: \"  call writefile(content, 'Xtest2/Xtest3')",
      "38: \"  edit Xtest2/Xtest3",
      "39: \"  call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
      "40: \"  let swfname = \"Xtest.je/Xtest3.swp\"",
      "41: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
      "42: \"  call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
      "43: \"",
      "44: \"  set dir&",
      "45: \"  call delete(\"Xtest1\")",
      "46: \"  call delete(\"Xtest2\", \"rf\")",
      "47: \"  call delete(\"Xtest.je\", \"rf\")",
      "48: \"endfunc",
      "50: func Test_swap_group()",
      "54:   let groups = split(system('groups'))",
      "55:   if len(groups) <= 1",
      "56:     throw 'Skipped: need at least two groups, got ' . groups",
      "57:   endif",
      "59:   call delete('Xtest')",
      "60:   split Xtest",
      "61:   call setline(1, 'just some text')",
      "62:   wq",
      "63:   if system('ls -l Xtest') !~ ' ' . groups[0] . ' \\d'",
      "64:     throw 'Skipped: test file does not have the first group'",
      "65:   else",
      "66:     silent !chmod 640 Xtest",
      "67:     call system('chgrp ' . groups[1] . ' Xtest')",
      "68:     if system('ls -l Xtest') !~ ' ' . groups[1] . ' \\d'",
      "69:       throw 'Skipped: cannot set second group on test file'",
      "70:     else",
      "71:       split Xtest",
      "72:       let swapname = substitute(execute('swapname'), '[[:space:]]', '', 'g')",
      "73:       call assert_match('Xtest', swapname)",
      "74:       \" Group of swapfile must now match original file.",
      "75:       call assert_match(' ' . groups[1] . ' \\d', system('ls -l ' . swapname))",
      "77:       bwipe!",
      "78:     endif",
      "79:   endif",
      "81:   call delete('Xtest')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "762: static int included_patches[] =",
      "765:     1262,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:     1263,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02e802b2da9e25b5824185976b163691b5bbd558",
      "candidate_info": {
        "commit_hash": "02e802b2da9e25b5824185976b163691b5bbd558",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/02e802b2da9e25b5824185976b163691b5bbd558",
        "files": [
          "src/fileio.c",
          "src/version.c"
        ],
        "message": "patch 8.0.1737: fchown() used when it is not supported\n\nProblem:    fchown() used when it is not supported.\nSolution:   Add #ifdef.",
        "before_after_code_files": [
          "src/fileio.c||src/fileio.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/fileio.c||src/fileio.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/fileio.c||src/fileio.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/fileio.c||src/fileio.c": [
          "File: src/fileio.c -> src/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "713:   if (mch_stat((char *)swap_fname, &swap_st) >= 0",
          "714:    && st.st_gid != swap_st.st_gid",
          "715:    && fchown(curbuf->b_ml.ml_mfp->mf_fd, -1, st.st_gid)",
          "717:       swap_mode &= 0600;",
          "718:      }",
          "",
          "[Removed Lines]",
          "716:           == -1)",
          "",
          "[Added Lines]",
          "715: # ifdef HAVE_FCHOWN",
          "717: # endif",
          "718:            == -1",
          "719:      )",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: static int included_patches[] =",
          "766:     1736,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:     1737,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "110bd60985c31e8978e9b071e2179f4233ef8557",
      "candidate_info": {
        "commit_hash": "110bd60985c31e8978e9b071e2179f4233ef8557",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/110bd60985c31e8978e9b071e2179f4233ef8557",
        "files": [
          "runtime/doc/eval.txt",
          "src/evalfunc.c",
          "src/testdir/test_swap.vim",
          "src/version.c"
        ],
        "message": "patch 8.1.0401: can't get swap name of another buffer\n\nProblem:    Can't get swap name of another buffer.\nSolution:   Add swapname(). (Ozaki Kiichi, closes #3441)",
        "before_after_code_files": [
          "src/evalfunc.c||src/evalfunc.c",
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/evalfunc.c||src/evalfunc.c": [
          "File: src/evalfunc.c -> src/evalfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "399: static void f_submatch(typval_T *argvars, typval_T *rettv);",
          "400: static void f_substitute(typval_T *argvars, typval_T *rettv);",
          "401: static void f_swapinfo(typval_T *argvars, typval_T *rettv);",
          "402: static void f_synID(typval_T *argvars, typval_T *rettv);",
          "403: static void f_synIDattr(typval_T *argvars, typval_T *rettv);",
          "404: static void f_synIDtrans(typval_T *argvars, typval_T *rettv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: static void f_swapname(typval_T *argvars, typval_T *rettv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:     {\"submatch\", 1, 2, f_submatch},",
          "866:     {\"substitute\", 4, 4, f_substitute},",
          "867:     {\"swapinfo\", 1, 1, f_swapinfo},",
          "868:     {\"synID\",  3, 3, f_synID},",
          "869:     {\"synIDattr\", 2, 3, f_synIDattr},",
          "870:     {\"synIDtrans\", 1, 1, f_synIDtrans},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:     {\"swapname\", 1, 1, f_swapname},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12341:  get_b0_dict(get_tv_string(argvars), rettv->vval.v_dict);",
          "12342: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12349:     static void",
          "12350: f_swapname(typval_T *argvars, typval_T *rettv)",
          "12351: {",
          "12352:     buf_T *buf;",
          "12354:     rettv->v_type = VAR_STRING;",
          "12355:     buf = get_buf_tv(&argvars[0], FALSE);",
          "12356:     if (buf == NULL || buf->b_ml.ml_mfp == NULL",
          "12357:      || buf->b_ml.ml_mfp->mf_fname == NULL)",
          "12358:  rettv->vval.v_string = NULL;",
          "12359:     else",
          "12360:  rettv->vval.v_string = vim_strsave(buf->b_ml.ml_mfp->mf_fname);",
          "12361: }",
          "",
          "---------------"
        ],
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \" Tests for the swap feature",
          "3: \" Tests for 'directory' option.",
          "4: func Test_swap_directory()",
          "5:   if !has(\"unix\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: func s:swapname()",
          "4:   return trim(execute('swapname'))",
          "5: endfunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   \" Verify that the swap file doesn't exist in the current directory",
          "18:   call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
          "19:   edit Xtest1",
          "21:   call assert_equal([swfname], glob(swfname, 1, 1, 1))",
          "23:   \" './dir', swap file in a directory relative to the file",
          "",
          "[Removed Lines]",
          "20:   let swfname = split(execute(\"swapname\"))[0]",
          "",
          "[Added Lines]",
          "24:   let swfname = s:swapname()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:   edit Xtest1",
          "28:   call assert_equal([], glob(swfname, 1, 1, 1))",
          "29:   let swfname = \"Xtest2/Xtest1.swp\"",
          "31:   call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
          "33:   \" 'dir', swap file in directory relative to the current dir",
          "",
          "[Removed Lines]",
          "30:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "",
          "[Added Lines]",
          "34:   call assert_equal(swfname, s:swapname())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "38:   edit Xtest2/Xtest3",
          "39:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
          "40:   let swfname = \"Xtest.je/Xtest3.swp\"",
          "42:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
          "44:   set dir&",
          "",
          "[Removed Lines]",
          "41:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "",
          "[Added Lines]",
          "45:   call assert_equal(swfname, s:swapname())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "70:  throw 'Skipped: cannot set second group on test file'",
          "71:       else",
          "72:  split Xtest",
          "74:  call assert_match('Xtest', swapname)",
          "75:  \" Group of swapfile must now match original file.",
          "76:  call assert_match(' ' . groups[1] . ' \\d', system('ls -l ' . swapname))",
          "",
          "[Removed Lines]",
          "73:  let swapname = substitute(execute('swapname'), '[[:space:]]', '', 'g')",
          "",
          "[Added Lines]",
          "77:  let swapname = s:swapname()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "102:   new Xswapinfo",
          "103:   call setline(1, ['one', 'two', 'three'])",
          "104:   w",
          "106:   call assert_match('Xswapinfo', fname)",
          "107:   let info = swapinfo(fname)",
          "",
          "[Removed Lines]",
          "105:   let fname = trim(execute('swapname'))",
          "",
          "[Added Lines]",
          "109:   let fname = s:swapname()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:   call assert_equal('Not a swap file', info.error)",
          "137:   call delete('Xnotaswapfile')",
          "138: endfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: func Test_swapname()",
          "145:   edit Xtest1",
          "146:   let expected = s:swapname()",
          "147:   call assert_equal(expected, swapname('%'))",
          "149:   new Xtest2",
          "150:   let buf = bufnr('%')",
          "151:   let expected = s:swapname()",
          "152:   wincmd p",
          "153:   call assert_equal(expected, swapname(buf))",
          "155:   new Xtest3",
          "156:   setlocal noswapfile",
          "157:   call assert_equal('', swapname('%'))",
          "159:   bwipe!",
          "160:   call delete('Xtest1')",
          "161:   call delete('Xtest2')",
          "162:   call delete('Xtest3')",
          "163: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "795: static int included_patches[] =",
          "798:     400,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:     401,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5842a748be8039fd6d267f5557fe391c6c95399d",
      "candidate_info": {
        "commit_hash": "5842a748be8039fd6d267f5557fe391c6c95399d",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5842a748be8039fd6d267f5557fe391c6c95399d",
        "files": [
          "src/testdir/test_swap.vim",
          "src/testdir/test_undo.vim",
          "src/version.c"
        ],
        "message": "patch 8.0.1267: Test_swap_group may leave file behind\n\nProblem:    Test_swap_group may leave file behind.\nSolution:   Add a try/finally.",
        "before_after_code_files": [
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/testdir/test_undo.vim||src/testdir/test_undo.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     throw 'Skipped: need at least two groups, got ' . string(groups)",
          "57:   endif",
          "70:     else",
          "78:     endif",
          "82: endfunc",
          "",
          "[Removed Lines]",
          "59:   call delete('Xtest')",
          "60:   split Xtest",
          "61:   call setline(1, 'just some text')",
          "62:   wq",
          "63:   if system('ls -l Xtest') !~ ' ' . groups[0] . ' \\d'",
          "64:     throw 'Skipped: test file does not have the first group'",
          "65:   else",
          "66:     silent !chmod 640 Xtest",
          "67:     call system('chgrp ' . groups[1] . ' Xtest')",
          "68:     if system('ls -l Xtest') !~ ' ' . groups[1] . ' \\d'",
          "69:       throw 'Skipped: cannot set second group on test file'",
          "71:       split Xtest",
          "72:       let swapname = substitute(execute('swapname'), '[[:space:]]', '', 'g')",
          "73:       call assert_match('Xtest', swapname)",
          "74:       \" Group of swapfile must now match original file.",
          "75:       call assert_match(' ' . groups[1] . ' \\d', system('ls -l ' . swapname))",
          "77:       bwipe!",
          "79:   endif",
          "81:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "59:   try",
          "60:     call delete('Xtest')",
          "61:     split Xtest",
          "62:     call setline(1, 'just some text')",
          "63:     wq",
          "64:     if system('ls -l Xtest') !~ ' ' . groups[0] . ' \\d'",
          "65:       throw 'Skipped: test file does not have the first group'",
          "67:       silent !chmod 640 Xtest",
          "68:       call system('chgrp ' . groups[1] . ' Xtest')",
          "69:       if system('ls -l Xtest') !~ ' ' . groups[1] . ' \\d'",
          "70:  throw 'Skipped: cannot set second group on test file'",
          "71:       else",
          "72:  split Xtest",
          "73:  let swapname = substitute(execute('swapname'), '[[:space:]]', '', 'g')",
          "74:  call assert_match('Xtest', swapname)",
          "75:  \" Group of swapfile must now match original file.",
          "76:  call assert_match(' ' . groups[1] . ' \\d', system('ls -l ' . swapname))",
          "78:  bwipe!",
          "79:       endif",
          "81:   finally",
          "82:     call delete('Xtest')",
          "83:   endtry",
          "",
          "---------------"
        ],
        "src/testdir/test_undo.vim||src/testdir/test_undo.vim": [
          "File: src/testdir/test_undo.vim -> src/testdir/test_undo.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: endfunc",
          "192: func Test_undo_write()",
          "193:   split Xtest",
          "194:   call feedkeys(\"ione one one\\<Esc>\", 'xt')",
          "195:   w!",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   call delete('Xtest')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762: static int included_patches[] =",
          "765:     1266,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:     1267,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffe010fa0363d1a04b15cc6af119a4af63ba9363",
      "candidate_info": {
        "commit_hash": "ffe010fa0363d1a04b15cc6af119a4af63ba9363",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ffe010fa0363d1a04b15cc6af119a4af63ba9363",
        "files": [
          "src/testdir/test_swap.vim",
          "src/version.c"
        ],
        "message": "patch 8.0.1266: Test_swap_directory was commented out\n\nProblem:    Test_swap_directory was accidentally commented out.\nSolution:   Uncomment the test.",
        "before_after_code_files": [
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \" Tests for the swap feature",
          "50: func Test_swap_group()",
          "51:   if !has(\"unix\")",
          "",
          "[Removed Lines]",
          "3: \"\" Tests for 'directory' option.",
          "4: \"func Test_swap_directory()",
          "5: \"  if !has(\"unix\")",
          "6: \"    return",
          "7: \"  endif",
          "8: \"  let content = ['start of testfile',",
          "9: \"       \\ 'line 2 Abcdefghij',",
          "10: \"       \\ 'line 3 Abcdefghij',",
          "11: \"       \\ 'end of testfile']",
          "12: \"  call writefile(content, 'Xtest1')",
          "13: \"",
          "14: \"  \"  '.', swap file in the same directory as file",
          "15: \"  set dir=.,~",
          "16: \"",
          "17: \"  \" Verify that the swap file doesn't exist in the current directory",
          "18: \"  call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
          "19: \"  edit Xtest1",
          "20: \"  let swfname = split(execute(\"swapname\"))[0]",
          "21: \"  call assert_equal([swfname], glob(swfname, 1, 1, 1))",
          "22: \"",
          "23: \"  \" './dir', swap file in a directory relative to the file",
          "24: \"  set dir=./Xtest2,.,~",
          "25: \"",
          "26: \"  call mkdir(\"Xtest2\")",
          "27: \"  edit Xtest1",
          "28: \"  call assert_equal([], glob(swfname, 1, 1, 1))",
          "29: \"  let swfname = \"Xtest2/Xtest1.swp\"",
          "30: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "31: \"  call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
          "32: \"",
          "33: \"  \" 'dir', swap file in directory relative to the current dir",
          "34: \"  set dir=Xtest.je,~",
          "35: \"",
          "36: \"  call mkdir(\"Xtest.je\")",
          "37: \"  call writefile(content, 'Xtest2/Xtest3')",
          "38: \"  edit Xtest2/Xtest3",
          "39: \"  call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
          "40: \"  let swfname = \"Xtest.je/Xtest3.swp\"",
          "41: \"  call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "42: \"  call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
          "43: \"",
          "44: \"  set dir&",
          "45: \"  call delete(\"Xtest1\")",
          "46: \"  call delete(\"Xtest2\", \"rf\")",
          "47: \"  call delete(\"Xtest.je\", \"rf\")",
          "48: \"endfunc",
          "",
          "[Added Lines]",
          "3: \" Tests for 'directory' option.",
          "4: func Test_swap_directory()",
          "5:   if !has(\"unix\")",
          "6:     return",
          "7:   endif",
          "8:   let content = ['start of testfile',",
          "9:        \\ 'line 2 Abcdefghij',",
          "10:        \\ 'line 3 Abcdefghij',",
          "11:        \\ 'end of testfile']",
          "12:   call writefile(content, 'Xtest1')",
          "14:   \"  '.', swap file in the same directory as file",
          "15:   set dir=.,~",
          "17:   \" Verify that the swap file doesn't exist in the current directory",
          "18:   call assert_equal([], glob(\".Xtest1*.swp\", 1, 1, 1))",
          "19:   edit Xtest1",
          "20:   let swfname = split(execute(\"swapname\"))[0]",
          "21:   call assert_equal([swfname], glob(swfname, 1, 1, 1))",
          "23:   \" './dir', swap file in a directory relative to the file",
          "24:   set dir=./Xtest2,.,~",
          "26:   call mkdir(\"Xtest2\")",
          "27:   edit Xtest1",
          "28:   call assert_equal([], glob(swfname, 1, 1, 1))",
          "29:   let swfname = \"Xtest2/Xtest1.swp\"",
          "30:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "31:   call assert_equal([swfname], glob(\"Xtest2/*\", 1, 1, 1))",
          "33:   \" 'dir', swap file in directory relative to the current dir",
          "34:   set dir=Xtest.je,~",
          "36:   call mkdir(\"Xtest.je\")",
          "37:   call writefile(content, 'Xtest2/Xtest3')",
          "38:   edit Xtest2/Xtest3",
          "39:   call assert_equal([\"Xtest2/Xtest3\"], glob(\"Xtest2/*\", 1, 1, 1))",
          "40:   let swfname = \"Xtest.je/Xtest3.swp\"",
          "41:   call assert_equal(swfname, split(execute(\"swapname\"))[0])",
          "42:   call assert_equal([swfname], glob(\"Xtest.je/*\", 1, 1, 1))",
          "44:   set dir&",
          "45:   call delete(\"Xtest1\")",
          "46:   call delete(\"Xtest2\", \"rf\")",
          "47:   call delete(\"Xtest.je\", \"rf\")",
          "48: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762: static int included_patches[] =",
          "765:     1265,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:     1266,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad7dac85c3c90893e78e5463ca44b874082b482f",
      "candidate_info": {
        "commit_hash": "ad7dac85c3c90893e78e5463ca44b874082b482f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ad7dac85c3c90893e78e5463ca44b874082b482f",
        "files": [
          "src/testdir/test_swap.vim",
          "src/version.c"
        ],
        "message": "patch 8.0.1265: swap test not skipped when there is one group\n\nProblem:    Swap test not skipped when there is one group.\nSolution:   Convert list to string for the message.",
        "before_after_code_files": [
          "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_swap.vim||src/testdir/test_swap.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_swap.vim||src/testdir/test_swap.vim": [
          "File: src/testdir/test_swap.vim -> src/testdir/test_swap.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   endif",
          "54:   let groups = split(system('groups'))",
          "55:   if len(groups) <= 1",
          "57:   endif",
          "59:   call delete('Xtest')",
          "",
          "[Removed Lines]",
          "56:     throw 'Skipped: need at least two groups, got ' . groups",
          "",
          "[Added Lines]",
          "56:     throw 'Skipped: need at least two groups, got ' . string(groups)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762: static int included_patches[] =",
          "765:     1264,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:     1265,",
          "",
          "---------------"
        ]
      }
    }
  ]
}