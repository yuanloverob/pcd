{
  "cve_id": "CVE-2022-23587",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "0aaaae6eca5a7175a193696383f582f53adab23f",
  "patch_info": {
    "commit_hash": "0aaaae6eca5a7175a193696383f582f53adab23f",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/0aaaae6eca5a7175a193696383f582f53adab23f",
    "files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ],
    "message": "Prevent overflow in grappler cost estimation of crop&resize op.\n\nThe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\nPiperOrigin-RevId: 409670234\nChange-Id: I7994734a98b037c5642e051240329d16f959aae4",
    "before_after_code_files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2685:   int64_t ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;",
      "2692:   if (use_bilinear_interp) {",
      "2699:     ops +=",
      "2700:         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *",
      "2701:         output_elements;",
      "2702:   } else /* method == \"nearest\" */ {",
      "2706:     ops += cast_to_float_cost * output_elements;",
      "2707:   }",
      "",
      "[Removed Lines]",
      "2687:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;",
      "2689:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *",
      "2690:          num_boxes;",
      "2694:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;",
      "2696:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *",
      "2697:            num_boxes;",
      "2704:     ops += round_cost * 2 * crop_height * crop_width * num_boxes;",
      "",
      "[Added Lines]",
      "2685:   int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);",
      "2686:   if (crop_area < 0)",
      "2687:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
      "2688:                                    crop_height, \" with \", crop_width,",
      "2689:                                    \" would overflow\");",
      "2690:   int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);",
      "2691:   if (crop_volume < 0)",
      "2692:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
      "2693:                                    crop_area, \" with \", num_boxes,",
      "2694:                                    \" would overflow\");",
      "2695:   int64_t crop_depth = MultiplyWithoutOverflow(crop_height, num_boxes);",
      "2696:   if (crop_depth < 0)",
      "2697:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
      "2698:                                    crop_height, \" with \", num_boxes,",
      "2699:                                    \" would overflow\");",
      "2704:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_depth;",
      "2706:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_volume;",
      "2710:     ops += (floor_cost + ceil_cost + sub_cost) * crop_depth;",
      "2712:     ops += (floor_cost + ceil_cost + sub_cost) * crop_volume;",
      "2719:     ops += round_cost * 2 * crop_volume;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "528d6545c21e6abd37788b7324355e1b094f7daf",
      "candidate_info": {
        "commit_hash": "528d6545c21e6abd37788b7324355e1b094f7daf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/528d6545c21e6abd37788b7324355e1b094f7daf",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ],
        "message": "Add CropAndResize cost estimate\n\nPiperOrigin-RevId: 344292836\nChange-Id: I711a96bb300bbff52ea2219b9055ac0f3993b33f",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: constexpr char kUnpack[] = \"Unpack\";",
          "101: constexpr char kSoftmax[] = \"Softmax\";",
          "102: constexpr char kResizeBilinear[] = \"ResizeBilinear\";",
          "104: constexpr char kSwitch[] = \"Switch\";",
          "105: constexpr char kMerge[] = \"Merge\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: constexpr char kCropAndResize[] = \"CropAndResize\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518:                             wrap(&OpLevelCostEstimator::PredictSoftmax));",
          "519:   device_cost_impl_.emplace(kResizeBilinear,",
          "520:                             wrap(&OpLevelCostEstimator::PredictResizeBilinear));",
          "521:   device_cost_impl_.emplace(",
          "522:       kAssignVariableOp, wrap(&OpLevelCostEstimator::PredictAssignVariableOps));",
          "523:   device_cost_impl_.emplace(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:   device_cost_impl_.emplace(kCropAndResize,",
          "523:                             wrap(&OpLevelCostEstimator::PredictCropAndResize));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2455:                                  op_context.op_info);",
          "2456: }",
          "2458: }  // end namespace grappler",
          "2459: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2461: Costs OpLevelCostEstimator::PredictCropAndResize(",
          "2462:     const OpContext& op_context) const {",
          "2463:   bool found_unknown_shapes = false;",
          "2465:   const auto method = op_context.op_info.attr().find(\"method\");",
          "2466:   bool use_bilinear_interp;",
          "2467:   if (method == op_context.op_info.attr().end() ||",
          "2468:       method->second.s() == \"bilinear\") {",
          "2469:     use_bilinear_interp = true;",
          "2470:   } else if (method->second.s() == \"nearest\") {",
          "2471:     use_bilinear_interp = false;",
          "2472:   } else {",
          "2473:     LOG(WARNING) << \"method attr in CropAndResize invalid; expected bilinear \"",
          "2474:                     \"or nearest.\";",
          "2475:     return PredictCostOfAnUnknownOp(op_context);",
          "2476:   }",
          "2478:   const int input_size =",
          "2479:       CalculateTensorSize(op_context.op_info.inputs(0), &found_unknown_shapes);",
          "2480:   const int output_size =",
          "2481:       CalculateOutputSize(op_context.op_info, &found_unknown_shapes);",
          "2483:   const int64 num_boxes = op_context.op_info.inputs(1).shape().dim(0).size();",
          "2484:   const auto crop_shape = MaybeGetMinimumShape(",
          "2485:       op_context.op_info.outputs(0).shape(), 4, &found_unknown_shapes);",
          "2486:   const int64 crop_height = crop_shape.dim(1).size();",
          "2487:   const int64 crop_width = crop_shape.dim(2).size();",
          "2488:   const int64 output_elements = CalculateTensorElementCount(",
          "2489:       op_context.op_info.outputs(0), &found_unknown_shapes);",
          "2491: #define EIGEN_COST(X) Eigen::internal::functor_traits<Eigen::internal::X>::Cost",
          "2492:   const auto sub_cost = EIGEN_COST(scalar_difference_op<float>);",
          "2493:   const auto add_cost = EIGEN_COST(scalar_sum_op<float>);",
          "2494:   const auto mul_cost = EIGEN_COST(scalar_product_op<float>);",
          "2495:   auto div_cost = EIGEN_COST(scalar_div_cost<float>);",
          "2496:   const auto floor_cost = EIGEN_COST(scalar_floor_op<float>);",
          "2497:   const auto ceil_cost = EIGEN_COST(scalar_ceil_op<float>);",
          "2498:   auto round_cost = EIGEN_COST(scalar_round_op<float>);",
          "2499:   const auto cast_to_float_cost = Eigen::internal::functor_traits<",
          "2500:       Eigen::internal::scalar_cast_op<int64, float>>::Cost;",
          "2501: #undef EIGEN_COST",
          "2509:   int64 ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;",
          "2511:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;",
          "2513:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *",
          "2514:          num_boxes;",
          "2516:   if (use_bilinear_interp) {",
          "2518:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;",
          "2520:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *",
          "2521:            num_boxes;",
          "2523:     ops +=",
          "2524:         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *",
          "2525:         output_elements;",
          "2526:   } else /* method == \"nearest\" */ {",
          "2528:     ops += round_cost * 2 * crop_height * crop_width * num_boxes;",
          "2530:     ops += cast_to_float_cost * output_elements;",
          "2531:   }",
          "2533:   return PredictOpCountBasedCost(ops, input_size, output_size,",
          "2534:                                  op_context.op_info);",
          "2535: }",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator.h||tensorflow/core/grappler/costs/op_level_cost_estimator.h": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.h -> tensorflow/core/grappler/costs/op_level_cost_estimator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   Costs PredictPureMemoryOp(const OpContext& op_context) const;",
          "91:   Costs PredictSoftmax(const OpContext& op_context) const;",
          "92:   Costs PredictResizeBilinear(const OpContext& op_context) const;",
          "95:   Costs PredictFusedOp(const OpContext& op_context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   Costs PredictCropAndResize(const OpContext& op_context) const;",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc||tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2239:   }",
          "2240: }",
          "2242: }  // end namespace grappler",
          "2243: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2242: TEST_F(OpLevelCostEstimatorTest, CropAndResizeExecutionTime) {",
          "2243:   const int kImageDim = 255;",
          "2244:   const int kChannelSize = 10;",
          "2245:   const int kOutputImageDim = 100;",
          "2246:   const int kNumBoxes = 10;",
          "2247:   const int kOutputElements =",
          "2248:       kNumBoxes * kOutputImageDim * kOutputImageDim * kChannelSize;",
          "2249:   OpContext op_context;",
          "2250:   SetCpuDevice(&op_context.op_info);",
          "2251:   op_context.op_info.set_op(\"CropAndResize\");",
          "2252:   DescribeTensor4D(1, kImageDim, kImageDim, kChannelSize,",
          "2253:                    op_context.op_info.add_inputs());",
          "2254:   DescribeArbitraryRankInput({kNumBoxes, 4}, DT_INT64, &op_context.op_info);",
          "2255:   DescribeTensor4D(kNumBoxes, kOutputImageDim, kOutputImageDim, kChannelSize,",
          "2256:                    op_context.op_info.add_outputs());",
          "2258:   const int kExpectedMemoryTime =",
          "2259:       (kImageDim * kImageDim + kNumBoxes * kOutputImageDim * kOutputImageDim) *",
          "2260:       4;",
          "2262:   {",
          "2264:     AttrValue method;",
          "2265:     method.set_s(\"bilinear\");",
          "2266:     (*op_context.op_info.mutable_attr())[\"method\"] = method;",
          "2267:     int num_ops = 28 * kNumBoxes + 4 * kNumBoxes * kOutputImageDim +",
          "2268:                   4 * kNumBoxes * kOutputImageDim * kOutputImageDim +",
          "2269:                   3 * kNumBoxes * kOutputImageDim +",
          "2270:                   3 * kNumBoxes * kOutputImageDim * kOutputImageDim +",
          "2271:                   13 * kOutputElements;",
          "2272:     const int expected_compute_time = std::ceil(",
          "2273:         num_ops /",
          "2274:         estimator_.GetDeviceInfo(op_context.op_info.device()).gigaops);",
          "2276:     const auto cost = PredictCosts(op_context);",
          "2277:     EXPECT_EQ(cost.compute_time, Costs::Duration(expected_compute_time));",
          "2278:     EXPECT_EQ(cost.memory_time, Costs::Duration(kExpectedMemoryTime));",
          "2279:     EXPECT_EQ(cost.execution_time,",
          "2280:               Costs::Duration(kExpectedMemoryTime + expected_compute_time));",
          "2281:     EXPECT_FALSE(cost.inaccurate);",
          "2282:     EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "2283:   }",
          "2285:   {",
          "2287:     AttrValue method;",
          "2288:     method.set_s(\"nearest\");",
          "2289:     (*op_context.op_info.mutable_attr())[\"method\"] = method;",
          "2290:     int num_ops = 28 * kNumBoxes + 4 * kNumBoxes * kOutputImageDim +",
          "2291:                   4 * kNumBoxes * kOutputImageDim * kOutputImageDim +",
          "2292:                   2 * kNumBoxes * kOutputImageDim * kOutputImageDim +",
          "2293:                   kOutputElements;",
          "2294:     const int expected_compute_time = std::ceil(",
          "2295:         num_ops /",
          "2296:         estimator_.GetDeviceInfo(op_context.op_info.device()).gigaops);",
          "2298:     const auto cost = PredictCosts(op_context);",
          "2299:     EXPECT_EQ(cost.compute_time, Costs::Duration(expected_compute_time));",
          "2300:     EXPECT_EQ(cost.memory_time, Costs::Duration(kExpectedMemoryTime));",
          "2301:     EXPECT_EQ(cost.execution_time,",
          "2302:               Costs::Duration(kExpectedMemoryTime + expected_compute_time));",
          "2303:     EXPECT_FALSE(cost.inaccurate);",
          "2304:     EXPECT_EQ(cost.num_ops_with_unknown_shapes, 0);",
          "2305:   }",
          "2306: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87d03d839b2f75e3879f93b8eae4cb76f608d34d",
      "candidate_info": {
        "commit_hash": "87d03d839b2f75e3879f93b8eae4cb76f608d34d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/87d03d839b2f75e3879f93b8eae4cb76f608d34d",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent overflow in grappler cost estimation of crop&resize op.\n\nThe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\nPiperOrigin-RevId: 409670234\nChange-Id: I7994734a98b037c5642e051240329d16f959aae4",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2675:   int64_t ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;",
          "2682:   if (use_bilinear_interp) {",
          "2689:     ops +=",
          "2690:         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *",
          "2691:         output_elements;",
          "2692:   } else /* method == \"nearest\" */ {",
          "2696:     ops += cast_to_float_cost * output_elements;",
          "2697:   }",
          "",
          "[Removed Lines]",
          "2677:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;",
          "2679:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *",
          "2680:          num_boxes;",
          "2684:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;",
          "2686:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *",
          "2687:            num_boxes;",
          "2694:     ops += round_cost * 2 * crop_height * crop_width * num_boxes;",
          "",
          "[Added Lines]",
          "2675:   int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);",
          "2676:   if (crop_area < 0)",
          "2677:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2678:                                    crop_height, \" with \", crop_width,",
          "2679:                                    \" would overflow\");",
          "2680:   int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);",
          "2681:   if (crop_volume < 0)",
          "2682:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2683:                                    crop_area, \" with \", num_boxes,",
          "2684:                                    \" would overflow\");",
          "2685:   int64_t crop_depth = MultiplyWithoutOverflow(crop_height, num_boxes);",
          "2686:   if (crop_depth < 0)",
          "2687:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2688:                                    crop_height, \" with \", num_boxes,",
          "2689:                                    \" would overflow\");",
          "2694:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_depth;",
          "2696:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_volume;",
          "2700:     ops += (floor_cost + ceil_cost + sub_cost) * crop_depth;",
          "2702:     ops += (floor_cost + ceil_cost + sub_cost) * crop_volume;",
          "2709:     ops += round_cost * 2 * crop_volume;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57b139d16261006bd6c1a4c85dcccba54c1308a5",
      "candidate_info": {
        "commit_hash": "57b139d16261006bd6c1a4c85dcccba54c1308a5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/57b139d16261006bd6c1a4c85dcccba54c1308a5",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent overflow in grappler cost estimation of crop&resize op.\n\nThe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\nPiperOrigin-RevId: 409670234\nChange-Id: I7994734a98b037c5642e051240329d16f959aae4",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2670:   int64 ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;",
          "2677:   if (use_bilinear_interp) {",
          "2684:     ops +=",
          "2685:         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *",
          "2686:         output_elements;",
          "2687:   } else /* method == \"nearest\" */ {",
          "2691:     ops += cast_to_float_cost * output_elements;",
          "2692:   }",
          "",
          "[Removed Lines]",
          "2672:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;",
          "2674:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *",
          "2675:          num_boxes;",
          "2679:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;",
          "2681:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *",
          "2682:            num_boxes;",
          "2689:     ops += round_cost * 2 * crop_height * crop_width * num_boxes;",
          "",
          "[Added Lines]",
          "2670:   int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);",
          "2671:   if (crop_area < 0)",
          "2672:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2673:                                    crop_height, \" with \", crop_width,",
          "2674:                                    \" would overflow\");",
          "2675:   int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);",
          "2676:   if (crop_volume < 0)",
          "2677:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2678:                                    crop_area, \" with \", num_boxes,",
          "2679:                                    \" would overflow\");",
          "2680:   int64_t crop_depth = MultiplyWithoutOverflow(crop_height, num_boxes);",
          "2681:   if (crop_depth < 0)",
          "2682:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2683:                                    crop_height, \" with \", num_boxes,",
          "2684:                                    \" would overflow\");",
          "2689:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_depth;",
          "2691:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_volume;",
          "2695:     ops += (floor_cost + ceil_cost + sub_cost) * crop_depth;",
          "2697:     ops += (floor_cost + ceil_cost + sub_cost) * crop_volume;",
          "2704:     ops += round_cost * 2 * crop_volume;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c947c939aa110337860f9678bf73eb2610ef2072",
      "candidate_info": {
        "commit_hash": "c947c939aa110337860f9678bf73eb2610ef2072",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c947c939aa110337860f9678bf73eb2610ef2072",
        "files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent overflow in grappler cost estimation of crop&resize op.\n\nThe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\nPiperOrigin-RevId: 409670234\nChange-Id: I7994734a98b037c5642e051240329d16f959aae4",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2661:   int64 ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;",
          "2668:   if (use_bilinear_interp) {",
          "2675:     ops +=",
          "2676:         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *",
          "2677:         output_elements;",
          "2678:   } else /* method == \"nearest\" */ {",
          "2682:     ops += cast_to_float_cost * output_elements;",
          "2683:   }",
          "",
          "[Removed Lines]",
          "2663:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;",
          "2665:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *",
          "2666:          num_boxes;",
          "2670:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;",
          "2672:     ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *",
          "2673:            num_boxes;",
          "2680:     ops += round_cost * 2 * crop_height * crop_width * num_boxes;",
          "",
          "[Added Lines]",
          "2661:   int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);",
          "2662:   if (crop_area < 0)",
          "2663:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2664:                                    crop_height, \" with \", crop_width,",
          "2665:                                    \" would overflow\");",
          "2666:   int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);",
          "2667:   if (crop_volume < 0)",
          "2668:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2669:                                    crop_area, \" with \", num_boxes,",
          "2670:                                    \" would overflow\");",
          "2671:   int64_t crop_depth = MultiplyWithoutOverflow(crop_height, num_boxes);",
          "2672:   if (crop_depth < 0)",
          "2673:     return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",",
          "2674:                                    crop_height, \" with \", num_boxes,",
          "2675:                                    \" would overflow\");",
          "2680:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_depth;",
          "2682:   ops += (mul_cost * 2 + sub_cost + add_cost) * crop_volume;",
          "2686:     ops += (floor_cost + ceil_cost + sub_cost) * crop_depth;",
          "2688:     ops += (floor_cost + ceil_cost + sub_cost) * crop_volume;",
          "2695:     ops += round_cost * 2 * crop_volume;",
          "",
          "---------------"
        ]
      }
    }
  ]
}