{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
      "candidate_info": {
        "commit_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01d1801cab06d9ea35f07a530868cb79391a49a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to fuzzdata8.db.\n\nFossilOrigin-Name: 5baffcda7d5a42a99fa905faa834f14b94b1e2a26b5221f15d8ae8f1f5e3236a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "387af48ed43c1adea3f193bdb0445026597688ba",
      "candidate_info": {
        "commit_hash": "387af48ed43c1adea3f193bdb0445026597688ba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/387af48ed43c1adea3f193bdb0445026597688ba",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Add ALWAYS() around a conditional that is always true.\n\nFossilOrigin-Name: 270e17bba1d35f8c300844e75b2aa15f79a1ab62e40bc5e6bc9694902f8f7dde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 587ded6035a3ce91db81a29fe34ed30d0e59022cba6f107f25b04d034ef37ba9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     }",
          "247: #endif",
          "248:   }",
          "251:     for(i=0; i<pChanges->nExpr; i++){",
          "252:       pList = sqlite3ExprListAppend(pParse, pList,",
          "253:           sqlite3ExprDup(db, pChanges->a[i].pExpr, 0)",
          "",
          "[Removed Lines]",
          "249:   assert( pChanges || db->mallocFailed );",
          "250:   if( pChanges ){",
          "",
          "[Added Lines]",
          "249:   if( ALWAYS(pChanges) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d44327a83c28bcb743034e5761951e785d57a28",
      "candidate_info": {
        "commit_hash": "9d44327a83c28bcb743034e5761951e785d57a28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d44327a83c28bcb743034e5761951e785d57a28",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix another case where a corrupt record could cause an assert() to fail in fts3.\n\nFossilOrigin-Name: 28515bbbae4fbc260457dea7a0f7414be1837d6db27fec5514f8da358bfc1f0c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5831:       fts3EvalRestart(pCsr, pRoot, &rc);",
          "5832:       do {",
          "5833:         fts3EvalNextRow(pCsr, pRoot, &rc);",
          "5835:       }while( pRoot->iDocid!=iDocid && rc==SQLITE_OK );",
          "5836:     }",
          "5837:   }",
          "",
          "[Removed Lines]",
          "5834:         assert( pRoot->bEof==0 );",
          "",
          "[Added Lines]",
          "5834:         assert_fts3_nc( pRoot->bEof==0 );",
          "5835:         if( pRoot->bEof ) rc = FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65dd321432e8f80bc1cb11be8ca06656b41ac997a74a5eb271c797cf0fbb764e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6283: set sqlite_fts3_enable_parentheses $saved",
          "6285: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6285: #-------------------------------------------------------------------------",
          "6286: reset_db",
          "6287: do_execsql_test 47.1 {",
          "6288:   CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "6289: }",
          "6290: do_execsql_test 47.2 {",
          "6291:   INSERT INTO t1_segdir VALUES(0,0,0,0,0,X'000130120106000106000106001f030001030001030000083230313630363039090107000107000107000001340901050001050001050000013509010400010400010400010730303030303030091c0400010400010400000662696e6172793c0301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000008636f6d70696c657209010200010200010200000664627374617409070300010300010300010465627567090402000102000102000006656e61626c653f07020001020001020001020001020001020001020001020001020001020001020001020001010001020001020001020001020001020001020001020001020001087874656e73696f6e091f0400010400010400000466747334090a0300010300010300030135090d03000103000103000003676363090103000103000103000106656f706f6c790910030001030001030000056a736f6e310913030001030001030000046c6f6164091f030001030001030000036d6178091c02000102000102000105656d6f7279091c03000103000103000304737973350916030001030001030000066e6f636173653c02010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020000046f6d6974091f020001020001020000057274726565091903000103000103000302696d3c01010202000301020200030102020003010202000301020200030102020003010202000301a202000301020200030102020003010202000301020200000a746872656164736166650922020001020001020000047674616209070400010400010400000178b401010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200');",
          "6292:   INSERT INTO t1_segdir VALUES(0,1,0,0,0,X'0001300425061b000008323031363036303903250700000134032505000001350325040001073030303030303003251a000008636f6d70696c657203250200000664627374617403250a00010465627567032508000006656e61626c650925090504040404040001087874656e73696f6e03251d0000046674733403250d0003013503250f000003676363032503000106656f706f6c790325110000056a736f6e310325130000046c6f616403251c0000036d6178032518000105656d6f7279032519000304737973350325150000046f6d697403251b000005727472656503251700000a7468726561647361666503251e0000047674616333250b00');",
          "6293: }",
          "6295: do_catchsql_test 47.3 {",
          "6296:   SELECT matchinfo(t1) FROM t1 WHERE t1 MATCH '\"json1 enable\"';",
          "6297: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2267a7fa873c203d0b59fe53b459e0e5772a4938",
      "candidate_info": {
        "commit_hash": "2267a7fa873c203d0b59fe53b459e0e5772a4938",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2267a7fa873c203d0b59fe53b459e0e5772a4938",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "test/func.test",
          "test/func5.test"
        ],
        "message": "Do not factor out constant functions into the initialization section of a prepared statement, because even though they are constant, they can still throw exceptions.  Instead, put such functions in an OP_Once block.  This fixes ticket [3c9eadd2a6ba0aa5] and causes COALESCE() and CASE...END to be short-circuit.\n\nFossilOrigin-Name: c5f96a085db9688a09793f52ce1ecf033c2e6e2e5873a19fe0fb374b242b317f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "test/func.test||test/func.test",
          "test/func5.test||test/func5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb5a8a9edd0a4f979d6c30278d4ddc73c651f56ae989b4e5983fca36887c5ceb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127: #endif",
          "4129:       if( ConstFactorOk(pParse) && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4133:       }",
          "4134:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4135:       assert( !ExprHasProperty(pExpr, EP_TokenOnly) );",
          "",
          "[Removed Lines]",
          "4132:         return sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4132:         return sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4507: }",
          "",
          "[Removed Lines]",
          "4518: int sqlite3ExprCodeAtInit(",
          "",
          "[Added Lines]",
          "4526: int sqlite3ExprCodeRunJustOnce(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4533:     }",
          "4534:   }",
          "4535:   pExpr = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "4542:   }",
          "4544:   return regDest;",
          "4545: }",
          "",
          "[Removed Lines]",
          "4536:   p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4537:   if( p ){",
          "4538:      struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4539:      pItem->reusable = regDest<0;",
          "4540:      if( regDest<0 ) regDest = ++pParse->nMem;",
          "4541:      pItem->u.iConstExprReg = regDest;",
          "4543:   pParse->pConstExpr = p;",
          "",
          "[Added Lines]",
          "4544:   if( pExpr!=0 && ExprHasProperty(pExpr, EP_HasFunc) ){",
          "4545:     Vdbe *v = pParse->pVdbe;",
          "4546:     int addr;",
          "4547:     assert( v );",
          "4548:     addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "4549:     pParse->okConstFactor = 0;",
          "4550:     if( !pParse->db->mallocFailed ){",
          "4551:       if( regDest<0 ) regDest = ++pParse->nMem;",
          "4552:       sqlite3ExprCode(pParse, pExpr, regDest);",
          "4553:     }",
          "4554:     pParse->okConstFactor = 1;",
          "4555:     sqlite3ExprDelete(pParse->db, pExpr);",
          "4556:     sqlite3VdbeJumpHere(v, addr);",
          "4557:   }else{",
          "4558:     p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4559:     if( p ){",
          "4560:        struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4561:        pItem->reusable = regDest<0;",
          "4562:        if( regDest<0 ) regDest = ++pParse->nMem;",
          "4563:        pItem->u.iConstExprReg = regDest;",
          "4564:     }",
          "4565:     pParse->pConstExpr = p;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4565:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4566:   ){",
          "4569:   }else{",
          "4570:     int r1 = sqlite3GetTempReg(pParse);",
          "4571:     r2 = sqlite3ExprCodeTarget(pParse, pExpr, r1);",
          "",
          "[Removed Lines]",
          "4568:     r2 = sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4591:     r2 = sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4623: void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){",
          "4624:   if( pParse->okConstFactor && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4626:   }else{",
          "4627:     sqlite3ExprCodeCopy(pParse, pExpr, target);",
          "4628:   }",
          "",
          "[Removed Lines]",
          "4625:     sqlite3ExprCodeAtInit(pParse, pExpr, target);",
          "",
          "[Added Lines]",
          "4648:     sqlite3ExprCodeRunJustOnce(pParse, pExpr, target);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4682:     }else if( (flags & SQLITE_ECEL_FACTOR)!=0",
          "4683:            && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4684:     ){",
          "4686:     }else{",
          "4687:       int inReg = sqlite3ExprCodeTarget(pParse, pExpr, target+i);",
          "4688:       if( inReg!=target+i ){",
          "",
          "[Removed Lines]",
          "4685:       sqlite3ExprCodeAtInit(pParse, pExpr, target+i);",
          "",
          "[Added Lines]",
          "4708:       sqlite3ExprCodeRunJustOnce(pParse, pExpr, target+i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5242:      && ALWAYS((combinedFlags & EP_Reduced)==0)",
          "5243:     ){",
          "5244:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5260:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5261:         return 2;",
          "5262:       }",
          "",
          "[Removed Lines]",
          "5245:       if( pA->op2!=pB->op2 ){",
          "5246:         if( pA->op==TK_TRUTH ) return 2;",
          "5247:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5257:           return 2;",
          "5258:         }",
          "5259:       }",
          "",
          "[Added Lines]",
          "5268:       if( pA->op2!=pB->op2 && pA->op==TK_TRUTH ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4239: #endif",
          "4240: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "4241: void sqlite3ExprCodeFactorable(Parse*, Expr*, int);",
          "4243: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4244: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4245: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4242: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4242: int sqlite3ExprCodeRunJustOnce(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1544:   pIn1 = &aMem[pOp->p1];",
          "1545:   pIn2 = &aMem[pOp->p2];",
          "1546:   pOut = &aMem[pOp->p3];",
          "1548:   testcase( pOut==pIn2 );",
          "1549:   assert( pIn1!=pOut );",
          "1550:   flags1 = pIn1->flags;",
          "",
          "[Removed Lines]",
          "1547:   testcase( pIn1==pIn2 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477:   SELECT * FROM t1;",
          "1478: } {1 2}",
          "1480: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1480: # 2020-03-11 COALESCE() should short-circuit",
          "1481: # See also ticket 3c9eadd2a6ba0aa5",
          "1482: # Both issues stem from the fact that functions that could",
          "1483: # throw exceptions were being factored out into initialization",
          "1484: # code.  The fix was to put those function calls inside of",
          "1485: # OP_Once instead.",
          "1486: #",
          "1487: reset_db",
          "1488: do_execsql_test func-35.100 {",
          "1489:   CREATE TABLE t1(x);",
          "1490:   SELECT coalesce(x, abs(-9223372036854775808)) FROM t1;",
          "1491: } {}",
          "1492: do_execsql_test func-35.110 {",
          "1493:   SELECT coalesce(x, 'xyz' LIKE printf('%.1000000c','y')) FROM t1;",
          "1494: } {}",
          "1495: do_execsql_test func-35.200 {",
          "1496:   CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));",
          "1497:   PRAGMA integrity_check;",
          "1498: } {ok}",
          "",
          "---------------"
        ],
        "test/func5.test||test/func5.test": [
          "File: test/func5.test -> test/func5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:    WHERE x+counter1('hello')=counter1('hello')+x",
          "54:    ORDER BY +x;",
          "55: } {}",
          "56: do_execsql_test func5-2.3 {",
          "57:   SELECT x, y FROM t2",
          "59:    ORDER BY +x;",
          "60: } {1 2 3 4 5 6 7 8}",
          "",
          "[Removed Lines]",
          "58:    WHERE x+counter2('hello')=counter2('hello')+x",
          "",
          "[Added Lines]",
          "56: set cvalue [db one {SELECT counter2('hello')+1}]",
          "59:    WHERE x+counter2('hello')=$cvalue+x",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66373329881e0474de08707dcf07808672f1da02",
      "candidate_info": {
        "commit_hash": "66373329881e0474de08707dcf07808672f1da02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66373329881e0474de08707dcf07808672f1da02",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test",
          "manifest",
          "manifest.uuid",
          "test/fts4content.test"
        ],
        "message": "Prevent direct and indirect recursive content= options in fts3/4 and fts5.\n\nFossilOrigin-Name: 2eb997327c2c369c10b7835be80112d77cb2a7cfa9fe4d564042984c21d94698",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test",
          "manifest.uuid||manifest.uuid",
          "test/fts4content.test||test/fts4content.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:   int iIdx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1614:   if( p->bLock ){",
          "1615:     return SQLITE_ERROR;",
          "1616:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1809:     }else{",
          "1810:       zSql = sqlite3_mprintf(\"SELECT %s WHERE rowid = ?\", p->zReadExprlist);",
          "1811:       if( !zSql ) return SQLITE_NOMEM;",
          "1813:       sqlite3_free(zSql);",
          "1814:     }",
          "1815:     if( rc==SQLITE_OK ) pCsr->bSeekStmt = 1;",
          "",
          "[Removed Lines]",
          "1812:       rc = sqlite3_prepare_v3(p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "1816:       p->bLock++;",
          "1817:       rc = sqlite3_prepare_v3(",
          "1818:           p->db, zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "1819:       );",
          "1820:       p->bLock--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1827:   if( pCsr->isRequireSeek ){",
          "1828:     rc = fts3CursorSeekStmt(pCsr);",
          "1829:     if( rc==SQLITE_OK ){",
          "1830:       sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iPrevId);",
          "1831:       pCsr->isRequireSeek = 0;",
          "1832:       if( SQLITE_ROW==sqlite3_step(pCsr->pStmt) ){",
          "1833:         return SQLITE_OK;",
          "1834:       }else{",
          "1835:         rc = sqlite3_reset(pCsr->pStmt);",
          "1836:         if( rc==SQLITE_OK && ((Fts3Table *)pCsr->base.pVtab)->zContentTbl==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1838:       Fts3Table *pTab = (Fts3Table*)pCsr->base.pVtab;",
          "1839:       pTab->bLock++;",
          "1843:         pTab->bLock--;",
          "1846:         pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3218:   int rc;",
          "3219:   Fts3Cursor *pCsr = (Fts3Cursor *)pCursor;",
          "3220:   if( pCsr->eSearch==FTS3_DOCID_SEARCH || pCsr->eSearch==FTS3_FULLSCAN_SEARCH ){",
          "3221:     if( SQLITE_ROW!=sqlite3_step(pCsr->pStmt) ){",
          "3222:       pCsr->isEof = 1;",
          "3223:       rc = sqlite3_reset(pCsr->pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3233:     Fts3Table *pTab = (Fts3Table*)pCursor->pVtab;",
          "3234:     pTab->bLock++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3225:       pCsr->iPrevId = sqlite3_column_int64(pCsr->pStmt, 0);",
          "3226:       rc = SQLITE_OK;",
          "3227:     }",
          "3228:   }else{",
          "3229:     rc = fts3EvalNext((Fts3Cursor *)pCursor);",
          "3230:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3242:     pTab->bLock--;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3285:   UNUSED_PARAMETER(idxStr);",
          "3286:   UNUSED_PARAMETER(nVal);",
          "3288:   eSearch = (idxNum & 0x0000FFFF);",
          "3289:   assert( eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) );",
          "3290:   assert( p->pSegments==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3303:   if( p->bLock ){",
          "3304:     return SQLITE_ERROR;",
          "3305:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3356:       );",
          "3357:     }",
          "3358:     if( zSql ){",
          "3360:       sqlite3_free(zSql);",
          "3361:     }else{",
          "3362:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3359:       rc = sqlite3_prepare_v3(p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0);",
          "",
          "[Added Lines]",
          "3378:       p->bLock++;",
          "3379:       rc = sqlite3_prepare_v3(",
          "3380:           p->db,zSql,-1,SQLITE_PREPARE_PERSISTENT,&pCsr->pStmt,0",
          "3381:       );",
          "3382:       p->bLock--;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:         break;",
          "896:       }",
          "899:         rc = sqlite3_step(pCsr->pStmt);",
          "900:         if( rc!=SQLITE_ROW ){",
          "901:           CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "902:           rc = sqlite3_reset(pCsr->pStmt);",
          "903:         }else{",
          "904:           rc = SQLITE_OK;",
          "905:         }",
          "906:         break;",
          "907:     }",
          "908:   }",
          "",
          "[Removed Lines]",
          "898:       default:",
          "",
          "[Added Lines]",
          "898:       default: {",
          "899:         Fts5Config *pConfig = ((Fts5Table*)pCursor->pVtab)->pConfig;",
          "900:         pConfig->bLock++;",
          "902:         pConfig->bLock--;",
          "906:           if( rc!=SQLITE_OK ){",
          "907:             pCursor->pVtab->zErrMsg = sqlite3_mprintf(",
          "908:                 \"%s\", sqlite3_errmsg(pConfig->db)",
          "909:             );",
          "910:           }",
          "915:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:   int iIdxStr = 0;",
          "1189:   Fts5Expr *pExpr = 0;",
          "1191:   if( pCsr->ePlan ){",
          "1192:     fts5FreeCursorComponents(pCsr);",
          "1193:     memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan-(u8*)pCsr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200:   if( pConfig->bLock ){",
          "1201:     pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "1202:         \"recursively defined fts5 content table\"",
          "1203:     );",
          "1204:     return SQLITE_ERROR;",
          "1205:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:   }",
          "1410:   if( rc==SQLITE_OK && CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) ){",
          "1411:     assert( pCsr->pExpr );",
          "1412:     sqlite3_reset(pCsr->pStmt);",
          "1413:     sqlite3_bind_int64(pCsr->pStmt, 1, fts5CursorRowid(pCsr));",
          "1414:     rc = sqlite3_step(pCsr->pStmt);",
          "1415:     if( rc==SQLITE_ROW ){",
          "1416:       rc = SQLITE_OK;",
          "1417:       CsrFlagClear(pCsr, FTS5CSR_REQUIRE_CONTENT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1431:     pTab->pConfig->bLock++;",
          "1433:     pTab->pConfig->bLock--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1419:       rc = sqlite3_reset(pCsr->pStmt);",
          "1420:       if( rc==SQLITE_OK ){",
          "1421:         rc = FTS5_CORRUPT;",
          "1422:       }",
          "1423:     }",
          "1424:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441:       }else{",
          "1442:         pTab->base.zErrMsg = sqlite3_mprintf(",
          "1443:             \"%s\", sqlite3_errmsg(pTab->pConfig->db)",
          "1444:         );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test": [
          "File: ext/fts5/test/fts5content.test -> ext/fts5/test/fts5content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: # Check that an fts5 table cannot be its own content table.",
          "258: #",
          "259: reset_db",
          "261:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t1 );",
          "262:   INSERT INTO t1( a ) VALUES('abc');",
          "263: }",
          "265:   SELECT * FROM t1;",
          "266: } {1 {recursively defined fts5 content table}}",
          "268:   SELECT * FROM t1('abc');",
          "269: } {1 {recursively defined fts5 content table}}",
          "271: finish_test",
          "",
          "[Removed Lines]",
          "260: do_execsql_test 7.1 {",
          "264: do_catchsql_test 7.2 {",
          "267: do_catchsql_test 7.3 {",
          "",
          "[Added Lines]",
          "260: do_execsql_test 7.1.1 {",
          "264: do_catchsql_test 7.1.2 {",
          "267: do_catchsql_test 7.1.3 {",
          "270: do_catchsql_test 7.1.4 {",
          "271:   SELECT count(*) FROM t1;",
          "272: } {1 {recursively defined fts5 content table}}",
          "273: do_catchsql_test 7.1.5 {",
          "274:   SELECT * FROM t1('abc') ORDER BY rank;",
          "275: } {1 {recursively defined fts5 content table}}",
          "277: reset_db",
          "278: do_execsql_test 7.2.1 {",
          "279:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t2 );",
          "280:   CREATE VIRTUAL TABLE t2 USING fts5(a, c=t1 );",
          "281:   INSERT INTO t1( a ) VALUES('abc');",
          "282: }",
          "283: do_catchsql_test 7.2.2 {",
          "284:   SELECT * FROM t1;",
          "285: } {1 {recursively defined fts5 content table}}",
          "286: do_catchsql_test 7.2.3 {",
          "287:   SELECT * FROM t1('abc');",
          "288: } {1 {recursively defined fts5 content table}}",
          "289: do_catchsql_test 7.2.4 {",
          "290:   SELECT count(*) FROM t1;",
          "291: } {1 {recursively defined fts5 content table}}",
          "292: do_catchsql_test 7.2.5 {",
          "293:   SELECT * FROM t1('abc') ORDER BY rank;",
          "294: } {1 {recursively defined fts5 content table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4content.test||test/fts4content.test": [
          "File: test/fts4content.test -> test/fts4content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:   CREATE VIRTUAL TABLE x1 USING fts4(content=x1);",
          "635: } {1 {vtable constructor called recursively: x1}}",
          "638: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637: #---------------------------------------------------------------------------",
          "638: # Check that an fts4 table cannot be its own content table.",
          "639: #",
          "640: reset_db",
          "641: breakpoint",
          "642: do_execsql_test 12.1.1 {",
          "643:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t1 );",
          "644:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "645: }",
          "646: do_catchsql_test 12.1.2 {",
          "647:   SELECT * FROM t1;",
          "648: } {1 {SQL logic error}}",
          "649: do_catchsql_test 12.1.3 {",
          "650:   SELECT * FROM t1('abc');",
          "651: } {1 {SQL logic error}}",
          "652: do_catchsql_test 12.1.4 {",
          "653:   SELECT count(*) FROM t1;",
          "654: } {1 {SQL logic error}}",
          "656: reset_db",
          "657: do_execsql_test 12.2.1 {",
          "658:   CREATE VIRTUAL TABLE t1 USING fts4(a, content=t2 );",
          "659:   CREATE VIRTUAL TABLE t2 USING fts4(a, content=t1 );",
          "660:   INSERT INTO t1(rowid, a) VALUES(1, 'abc');",
          "661: }",
          "662: do_catchsql_test 12.2.2 {",
          "663:   SELECT * FROM t1;",
          "664: } {1 {SQL logic error}}",
          "665: do_catchsql_test 12.2.3 {",
          "666:   SELECT * FROM t1('abc');",
          "667: } {1 {SQL logic error}}",
          "668: do_catchsql_test 12.2.4 {",
          "669:   SELECT count(*) FROM t1;",
          "670: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}