{
  "cve_id": "CVE-2012-3412",
  "cve_desc": "The sfc (aka Solarflare Solarstorm) driver in the Linux kernel before 3.2.30 allows remote attackers to cause a denial of service (DMA descriptor consumption and network-controller outage) via crafted TCP packets that trigger a small MSS value.",
  "repo": "torvalds/linux",
  "patch_hash": "68cb695ccecf949d48949e72f8ce591fdaaa325c",
  "patch_info": {
    "commit_hash": "68cb695ccecf949d48949e72f8ce591fdaaa325c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/68cb695ccecf949d48949e72f8ce591fdaaa325c",
    "files": [
      "drivers/net/ethernet/sfc/efx.c",
      "drivers/net/ethernet/sfc/efx.h",
      "drivers/net/ethernet/sfc/ethtool.c",
      "drivers/net/ethernet/sfc/nic.h",
      "drivers/net/ethernet/sfc/tx.c"
    ],
    "message": "sfc: Fix maximum number of TSO segments and minimum TX queue size\n\n[ Upstream commit 7e6d06f0de3f74ca929441add094518ae332257c ]\n\nCurrently an skb requiring TSO may not fit within a minimum-size TX\nqueue.  The TX queue selected for the skb may stall and trigger the TX\nwatchdog repeatedly (since the problem skb will be retried after the\nTX reset).  This issue is designated as CVE-2012-3412.\n\nSet the maximum number of TSO segments for our devices to 100.  This\nshould make no difference to behaviour unless the actual MSS is less\nthan about 700.  Increase the minimum TX queue size accordingly to\nallow for 2 worst-case skbs, so that there will definitely be space\nto add an skb after we wake a queue.\n\nTo avoid invalidating existing configurations, change\nefx_ethtool_set_ringparam() to fix up values that are too small rather\nthan returning -EINVAL.\n\nSigned-off-by: Ben Hutchings <bhutchings@solarflare.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>",
    "before_after_code_files": [
      "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c",
      "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h",
      "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c",
      "drivers/net/ethernet/sfc/nic.h||drivers/net/ethernet/sfc/nic.h",
      "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c": [
      "File: drivers/net/ethernet/sfc/efx.c -> drivers/net/ethernet/sfc/efx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1383:   goto fail2;",
      "1384:  }",
      "1386:  efx->rxq_entries = efx->txq_entries = EFX_DEFAULT_DMAQ_SIZE;",
      "1387:  rc = efx_probe_channels(efx);",
      "1388:  if (rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1386:  BUILD_BUG_ON(EFX_DEFAULT_DMAQ_SIZE < EFX_RXQ_MIN_ENT);",
      "1387:  if (WARN_ON(EFX_DEFAULT_DMAQ_SIZE < EFX_TXQ_MIN_ENT(efx))) {",
      "1388:   rc = -EINVAL;",
      "1389:   goto fail3;",
      "1390:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1973:  net_dev->irq = efx->pci_dev->irq;",
      "1974:  net_dev->netdev_ops = &efx_netdev_ops;",
      "1975:  SET_ETHTOOL_OPS(net_dev, &efx_ethtool_ops);",
      "1978:  efx->mac_op->update_stats(efx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1981:  net_dev->gso_max_segs = EFX_TSO_MAX_SEGS;",
      "",
      "---------------"
    ],
    "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h": [
      "File: drivers/net/ethernet/sfc/efx.h -> drivers/net/ethernet/sfc/efx.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: efx_enqueue_skb(struct efx_tx_queue *tx_queue, struct sk_buff *skb);",
      "35: extern void efx_xmit_done(struct efx_tx_queue *tx_queue, unsigned int index);",
      "36: extern int efx_setup_tc(struct net_device *net_dev, u8 num_tc);",
      "39: extern int efx_probe_rx_queue(struct efx_rx_queue *rx_queue);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: extern unsigned int efx_tx_max_skb_descs(struct efx_nic *efx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: #define EFX_MAX_EVQ_SIZE 16384UL",
      "57: #define EFX_MIN_EVQ_SIZE 512UL",
      "65: extern int efx_probe_filters(struct efx_nic *efx);",
      "",
      "[Removed Lines]",
      "62: #define EFX_MIN_RING_SIZE (roundup_pow_of_two(2 * 3 * MAX_SKB_FRAGS))",
      "",
      "[Added Lines]",
      "61: #define EFX_TSO_MAX_SEGS 100",
      "67: #define EFX_RXQ_MIN_ENT  128U",
      "68: #define EFX_TXQ_MIN_ENT(efx) (2 * efx_tx_max_skb_descs(efx))",
      "",
      "---------------"
    ],
    "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c": [
      "File: drivers/net/ethernet/sfc/ethtool.c -> drivers/net/ethernet/sfc/ethtool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "690:          struct ethtool_ringparam *ring)",
      "691: {",
      "692:  struct efx_nic *efx = netdev_priv(net_dev);",
      "694:  if (ring->rx_mini_pending || ring->rx_jumbo_pending ||",
      "695:      ring->rx_pending > EFX_MAX_DMAQ_SIZE ||",
      "696:      ring->tx_pending > EFX_MAX_DMAQ_SIZE)",
      "697:   return -EINVAL;",
      "701:   netif_err(efx, drv, efx->net_dev,",
      "704:   return -EINVAL;",
      "705:  }",
      "708: }",
      "710: static int efx_ethtool_set_pauseparam(struct net_device *net_dev,",
      "",
      "[Removed Lines]",
      "699:  if (ring->rx_pending < EFX_MIN_RING_SIZE ||",
      "700:      ring->tx_pending < EFX_MIN_RING_SIZE) {",
      "702:      \"TX and RX queues cannot be smaller than %ld\\n\",",
      "703:      EFX_MIN_RING_SIZE);",
      "707:  return efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending);",
      "",
      "[Added Lines]",
      "693:  u32 txq_entries;",
      "700:  if (ring->rx_pending < EFX_RXQ_MIN_ENT) {",
      "702:      \"RX queues cannot be smaller than %u\\n\",",
      "703:      EFX_RXQ_MIN_ENT);",
      "707:  txq_entries = max(ring->tx_pending, EFX_TXQ_MIN_ENT(efx));",
      "708:  if (txq_entries != ring->tx_pending)",
      "709:   netif_warn(efx, drv, efx->net_dev,",
      "710:       \"increasing TX queue size to minimum of %u\\n\",",
      "711:       txq_entries);",
      "713:  return efx_realloc_channels(efx, ring->rx_pending, txq_entries);",
      "",
      "---------------"
    ],
    "drivers/net/ethernet/sfc/nic.h||drivers/net/ethernet/sfc/nic.h": [
      "File: drivers/net/ethernet/sfc/nic.h -> drivers/net/ethernet/sfc/nic.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: #define FALCON_GMAC_LOOPBACKS   \\",
      "66:  (1 << LOOPBACK_GMAC)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: #define EFX_PAGE_SIZE 4096",
      "",
      "---------------"
    ],
    "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c": [
      "File: drivers/net/ethernet/sfc/tx.c -> drivers/net/ethernet/sfc/tx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "115:  return len;",
      "116: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118: unsigned int efx_tx_max_skb_descs(struct efx_nic *efx)",
      "119: {",
      "123:  unsigned int max_descs = EFX_TSO_MAX_SEGS * 2 + MAX_SKB_FRAGS;",
      "126:  if (EFX_WORKAROUND_5391(efx))",
      "127:   max_descs += EFX_TSO_MAX_SEGS;",
      "130:  if (PAGE_SIZE > EFX_PAGE_SIZE)",
      "131:   max_descs += max_t(unsigned int, MAX_SKB_FRAGS,",
      "132:        DIV_ROUND_UP(GSO_MAX_SIZE, EFX_PAGE_SIZE));",
      "134:  return max_descs;",
      "135: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e6d06f0de3f74ca929441add094518ae332257c",
      "candidate_info": {
        "commit_hash": "7e6d06f0de3f74ca929441add094518ae332257c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7e6d06f0de3f74ca929441add094518ae332257c",
        "files": [
          "drivers/net/ethernet/sfc/efx.c",
          "drivers/net/ethernet/sfc/efx.h",
          "drivers/net/ethernet/sfc/ethtool.c",
          "drivers/net/ethernet/sfc/tx.c"
        ],
        "message": "sfc: Fix maximum number of TSO segments and minimum TX queue size\n\nCurrently an skb requiring TSO may not fit within a minimum-size TX\nqueue.  The TX queue selected for the skb may stall and trigger the TX\nwatchdog repeatedly (since the problem skb will be retried after the\nTX reset).  This issue is designated as CVE-2012-3412.\n\nSet the maximum number of TSO segments for our devices to 100.  This\nshould make no difference to behaviour unless the actual MSS is less\nthan about 700.  Increase the minimum TX queue size accordingly to\nallow for 2 worst-case skbs, so that there will definitely be space\nto add an skb after we wake a queue.\n\nTo avoid invalidating existing configurations, change\nefx_ethtool_set_ringparam() to fix up values that are too small rather\nthan returning -EINVAL.\n\nSigned-off-by: Ben Hutchings <bhutchings@solarflare.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c",
          "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h",
          "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c",
          "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c",
            "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h",
            "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c",
            "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c"
          ],
          "candidate": [
            "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c",
            "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h",
            "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c",
            "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/sfc/efx.c||drivers/net/ethernet/sfc/efx.c": [
          "File: drivers/net/ethernet/sfc/efx.c -> drivers/net/ethernet/sfc/efx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1503:   goto fail2;",
          "1504:  }",
          "1506:  efx->rxq_entries = efx->txq_entries = EFX_DEFAULT_DMAQ_SIZE;",
          "1508:  rc = efx_probe_filters(efx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1506:  BUILD_BUG_ON(EFX_DEFAULT_DMAQ_SIZE < EFX_RXQ_MIN_ENT);",
          "1507:  if (WARN_ON(EFX_DEFAULT_DMAQ_SIZE < EFX_TXQ_MIN_ENT(efx))) {",
          "1508:   rc = -EINVAL;",
          "1509:   goto fail3;",
          "1510:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2070:  net_dev->irq = efx->pci_dev->irq;",
          "2071:  net_dev->netdev_ops = &efx_netdev_ops;",
          "2072:  SET_ETHTOOL_OPS(net_dev, &efx_ethtool_ops);",
          "2074:  rtnl_lock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:  net_dev->gso_max_segs = EFX_TSO_MAX_SEGS;",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/sfc/efx.h||drivers/net/ethernet/sfc/efx.h": [
          "File: drivers/net/ethernet/sfc/efx.h -> drivers/net/ethernet/sfc/efx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: efx_enqueue_skb(struct efx_tx_queue *tx_queue, struct sk_buff *skb);",
          "31: extern void efx_xmit_done(struct efx_tx_queue *tx_queue, unsigned int index);",
          "32: extern int efx_setup_tc(struct net_device *net_dev, u8 num_tc);",
          "35: extern int efx_probe_rx_queue(struct efx_rx_queue *rx_queue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: extern unsigned int efx_tx_max_skb_descs(struct efx_nic *efx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #define EFX_MAX_EVQ_SIZE 16384UL",
          "53: #define EFX_MIN_EVQ_SIZE 512UL",
          "61: extern int efx_probe_filters(struct efx_nic *efx);",
          "",
          "[Removed Lines]",
          "58: #define EFX_MIN_RING_SIZE (roundup_pow_of_two(2 * 3 * MAX_SKB_FRAGS))",
          "",
          "[Added Lines]",
          "57: #define EFX_TSO_MAX_SEGS 100",
          "63: #define EFX_RXQ_MIN_ENT  128U",
          "64: #define EFX_TXQ_MIN_ENT(efx) (2 * efx_tx_max_skb_descs(efx))",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/sfc/ethtool.c||drivers/net/ethernet/sfc/ethtool.c": [
          "File: drivers/net/ethernet/sfc/ethtool.c -> drivers/net/ethernet/sfc/ethtool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:          struct ethtool_ringparam *ring)",
          "681: {",
          "682:  struct efx_nic *efx = netdev_priv(net_dev);",
          "684:  if (ring->rx_mini_pending || ring->rx_jumbo_pending ||",
          "685:      ring->rx_pending > EFX_MAX_DMAQ_SIZE ||",
          "686:      ring->tx_pending > EFX_MAX_DMAQ_SIZE)",
          "687:   return -EINVAL;",
          "691:   netif_err(efx, drv, efx->net_dev,",
          "694:   return -EINVAL;",
          "695:  }",
          "698: }",
          "700: static int efx_ethtool_set_pauseparam(struct net_device *net_dev,",
          "",
          "[Removed Lines]",
          "689:  if (ring->rx_pending < EFX_MIN_RING_SIZE ||",
          "690:      ring->tx_pending < EFX_MIN_RING_SIZE) {",
          "692:      \"TX and RX queues cannot be smaller than %ld\\n\",",
          "693:      EFX_MIN_RING_SIZE);",
          "697:  return efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending);",
          "",
          "[Added Lines]",
          "683:  u32 txq_entries;",
          "690:  if (ring->rx_pending < EFX_RXQ_MIN_ENT) {",
          "692:      \"RX queues cannot be smaller than %u\\n\",",
          "693:      EFX_RXQ_MIN_ENT);",
          "697:  txq_entries = max(ring->tx_pending, EFX_TXQ_MIN_ENT(efx));",
          "698:  if (txq_entries != ring->tx_pending)",
          "699:   netif_warn(efx, drv, efx->net_dev,",
          "700:       \"increasing TX queue size to minimum of %u\\n\",",
          "701:       txq_entries);",
          "703:  return efx_realloc_channels(efx, ring->rx_pending, txq_entries);",
          "",
          "---------------"
        ],
        "drivers/net/ethernet/sfc/tx.c||drivers/net/ethernet/sfc/tx.c": [
          "File: drivers/net/ethernet/sfc/tx.c -> drivers/net/ethernet/sfc/tx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  return len;",
          "120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: unsigned int efx_tx_max_skb_descs(struct efx_nic *efx)",
          "123: {",
          "127:  unsigned int max_descs = EFX_TSO_MAX_SEGS * 2 + MAX_SKB_FRAGS;",
          "130:  if (EFX_WORKAROUND_5391(efx))",
          "131:   max_descs += EFX_TSO_MAX_SEGS;",
          "134:  if (PAGE_SIZE > EFX_PAGE_SIZE)",
          "135:   max_descs += max_t(unsigned int, MAX_SKB_FRAGS,",
          "136:        DIV_ROUND_UP(GSO_MAX_SIZE, EFX_PAGE_SIZE));",
          "138:  return max_descs;",
          "139: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}