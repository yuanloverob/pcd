{
  "cve_id": "CVE-2022-2980",
  "cve_desc": "NULL Pointer Dereference in GitHub repository vim/vim prior to 9.0.0259.",
  "repo": "vim/vim",
  "patch_hash": "80525751c5ce9ed82c41d83faf9ef38667bf61b1",
  "patch_info": {
    "commit_hash": "80525751c5ce9ed82c41d83faf9ef38667bf61b1",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/80525751c5ce9ed82c41d83faf9ef38667bf61b1",
    "files": [
      "src/mouse.c",
      "src/testdir/test_tabline.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0259: crash with mouse click when not initialized\n\nProblem:    Crash with mouse click when not initialized.\nSolution:   Check TabPageIdxs[] is not NULL.",
    "before_after_code_files": [
      "src/mouse.c||src/mouse.c",
      "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/mouse.c||src/mouse.c": [
      "File: src/mouse.c -> src/mouse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "472:     start_visual.lnum = 0;",
      "476:     {",
      "478:  {",
      "480:      {",
      "484:      }",
      "490: # ifdef FEAT_CMDWIN",
      "492: # endif",
      "498:      {",
      "507:   {",
      "514:    end_visual_mode_keep_button();",
      "515:   }",
      "524:   else",
      "527:   {",
      "530:   }",
      "533:      }",
      "534:  }",
      "542:     }",
      "",
      "[Removed Lines]",
      "475:     if (mouse_row == 0 && firstwin->w_winrow > 0)",
      "477:  if (is_drag)",
      "479:      if (in_tab_line)",
      "481:   c1 = TabPageIdxs[mouse_col];",
      "482:   tabpage_move(c1 <= 0 ? 9999 : c1 < tabpage_index(curtab)",
      "483:         ? c1 - 1 : c1);",
      "485:      return FALSE;",
      "486:  }",
      "489:  if (is_click",
      "491:   && cmdwin_type == 0",
      "493:   && mouse_col < Columns)",
      "494:  {",
      "495:      in_tab_line = TRUE;",
      "496:      c1 = TabPageIdxs[mouse_col];",
      "497:      if (c1 >= 0)",
      "499:   if ((mod_mask & MOD_MASK_MULTI_CLICK) == MOD_MASK_2CLICK)",
      "500:   {",
      "502:       end_visual_mode_keep_button();",
      "503:       tabpage_new();",
      "504:       tabpage_move(c1 == 0 ? 9999 : c1 - 1);",
      "505:   }",
      "506:   else",
      "510:       goto_tabpage(c1);",
      "513:       if (curwin != old_curwin)",
      "516:      }",
      "517:      else",
      "518:      {",
      "519:   tabpage_T *tp;",
      "522:   if (c1 == -999)",
      "523:       tp = curtab;",
      "525:       tp = find_tabpage(-c1);",
      "526:   if (tp == curtab)",
      "528:       if (first_tabpage->tp_next != NULL)",
      "529:    tabpage_close(FALSE);",
      "531:   else if (tp != NULL)",
      "532:       tabpage_close_other(tp, FALSE);",
      "535:  return TRUE;",
      "536:     }",
      "537:     else if (is_drag && in_tab_line)",
      "538:     {",
      "539:  c1 = TabPageIdxs[mouse_col];",
      "540:  tabpage_move(c1 <= 0 ? 9999 : c1 - 1);",
      "541:  return FALSE;",
      "",
      "[Added Lines]",
      "474:     if (TabPageIdxs != NULL)  // only when initialized",
      "477:  if (mouse_row == 0 && firstwin->w_winrow > 0)",
      "479:      if (is_drag)",
      "481:   if (in_tab_line)",
      "482:   {",
      "483:       c1 = TabPageIdxs[mouse_col];",
      "484:       tabpage_move(c1 <= 0 ? 9999 : c1 < tabpage_index(curtab)",
      "485:             ? c1 - 1 : c1);",
      "486:   }",
      "487:   return FALSE;",
      "491:      if (is_click",
      "493:       && cmdwin_type == 0",
      "495:       && mouse_col < Columns)",
      "497:   in_tab_line = TRUE;",
      "498:   c1 = TabPageIdxs[mouse_col];",
      "499:   if (c1 >= 0)",
      "501:       if ((mod_mask & MOD_MASK_MULTI_CLICK) == MOD_MASK_2CLICK)",
      "502:       {",
      "505:    tabpage_new();",
      "506:    tabpage_move(c1 == 0 ? 9999 : c1 - 1);",
      "507:       }",
      "508:       else",
      "509:       {",
      "512:    goto_tabpage(c1);",
      "515:    if (curwin != old_curwin)",
      "516:        end_visual_mode_keep_button();",
      "517:       }",
      "521:       tabpage_T *tp;",
      "524:       if (c1 == -999)",
      "525:    tp = curtab;",
      "526:       else",
      "527:    tp = find_tabpage(-c1);",
      "528:       if (tp == curtab)",
      "529:       {",
      "530:    if (first_tabpage->tp_next != NULL)",
      "531:        tabpage_close(FALSE);",
      "532:       }",
      "533:       else if (tp != NULL)",
      "534:    tabpage_close_other(tp, FALSE);",
      "537:      return TRUE;",
      "538:  }",
      "539:  else if (is_drag && in_tab_line)",
      "540:  {",
      "541:      c1 = TabPageIdxs[mouse_col];",
      "542:      tabpage_move(c1 <= 0 ? 9999 : c1 - 1);",
      "543:      return FALSE;",
      "",
      "---------------"
    ],
    "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim": [
      "File: src/testdir/test_tabline.vim -> src/testdir/test_tabline.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "147:   set showtabline& tabline&",
      "148: endfunc",
      "150: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150: func Test_mouse_click_in_tab()",
      "151:   \" This used to crash because TabPageIdxs[] was not initialized",
      "152:   let lines =<< trim END",
      "153:       tabnew",
      "154:       set mouse=a",
      "155:       exe \"norm \\<LeftMouse>\"",
      "156:   END",
      "157:   call writefile(lines, 'Xclickscript')",
      "158:   call RunVim([], [], \"-e -s -S Xclickscript -c qa\")",
      "160:   call delete('Xclickscript')",
      "161: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "732: static int included_patches[] =",
      "735:     258,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:     259,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4860bdd2832feb7ab054c6dc14f68abe24c2373",
      "candidate_info": {
        "commit_hash": "c4860bdd2832feb7ab054c6dc14f68abe24c2373",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c4860bdd2832feb7ab054c6dc14f68abe24c2373",
        "files": [
          "src/testdir/test_tabline.vim",
          "src/testdir/test_tabpage.vim",
          "src/testdir/test_tagcase.vim",
          "src/testdir/test_tagfunc.vim",
          "src/testdir/test_tagjump.vim",
          "src/testdir/test_taglist.vim",
          "src/testdir/test_tcl.vim",
          "src/testdir/test_termencoding.vim",
          "src/testdir/test_terminal.vim",
          "src/testdir/test_terminal2.vim",
          "src/testdir/test_terminal3.vim",
          "src/testdir/test_timers.vim",
          "src/testdir/test_trycatch.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0767: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim",
          "src/testdir/test_tabpage.vim||src/testdir/test_tabpage.vim",
          "src/testdir/test_tagcase.vim||src/testdir/test_tagcase.vim",
          "src/testdir/test_tagfunc.vim||src/testdir/test_tagfunc.vim",
          "src/testdir/test_tagjump.vim||src/testdir/test_tagjump.vim",
          "src/testdir/test_taglist.vim||src/testdir/test_taglist.vim",
          "src/testdir/test_tcl.vim||src/testdir/test_tcl.vim",
          "src/testdir/test_termencoding.vim||src/testdir/test_termencoding.vim",
          "src/testdir/test_terminal.vim||src/testdir/test_terminal.vim",
          "src/testdir/test_terminal2.vim||src/testdir/test_terminal2.vim",
          "src/testdir/test_terminal3.vim||src/testdir/test_terminal3.vim",
          "src/testdir/test_timers.vim||src/testdir/test_timers.vim",
          "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_tabline.vim||src/testdir/test_tabline.vim": [
          "File: src/testdir/test_tabline.vim -> src/testdir/test_tabline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:       set mouse=a",
          "155:       exe \"norm \\<LeftMouse>\"",
          "156:   END",
          "158:   call RunVim([], [], \"-e -s -S Xclickscript -c qa\")",
          "161: endfunc",
          "",
          "[Removed Lines]",
          "157:   call writefile(lines, 'Xclickscript')",
          "160:   call delete('Xclickscript')",
          "",
          "[Added Lines]",
          "157:   call writefile(lines, 'Xclickscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_tabpage.vim||src/testdir/test_tabpage.vim": [
          "File: src/testdir/test_tabpage.vim -> src/testdir/test_tabpage.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "606:         \\ 'echo \"hello\\nthere\"',",
          "607:         \\ 'tabnext',",
          "608:         \\ 'redraw',",
          "610:   \" Check that cursor line is concealed",
          "611:   let buf = RunVimInTerminal('-S XTest_tabpage_cmdheight', {'statusoff': 3})",
          "612:   call VerifyScreenDump(buf, 'Test_tabpage_cmdheight', {})",
          "614:   call StopVimInTerminal(buf)",
          "616: endfunc",
          "618: \" Test for closing the tab page from a command window",
          "",
          "[Removed Lines]",
          "609:  \\ ], 'XTest_tabpage_cmdheight')",
          "615:   call delete('XTest_tabpage_cmdheight')",
          "",
          "[Added Lines]",
          "609:  \\ ], 'XTest_tabpage_cmdheight', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_tagcase.vim||src/testdir/test_tagcase.vim": [
          "File: src/testdir/test_tagcase.vim -> src/testdir/test_tagcase.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \" test 'tagcase' option",
          "3: func Test_tagcase()",
          "5:   set tags=Xtags",
          "6:   e Xtext",
          "",
          "[Removed Lines]",
          "4:   call writefile([\"Bar\\tXtext\\t3\", \"Foo\\tXtext\\t2\", \"foo\\tXtext\\t4\"], 'Xtags')",
          "",
          "[Added Lines]",
          "4:   call writefile([\"Bar\\tXtext\\t3\", \"Foo\\tXtext\\t2\", \"foo\\tXtext\\t4\"], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     endfor",
          "44:   endfor",
          "47:   set tags&",
          "48:   set ic&",
          "49:   setg tc&",
          "",
          "[Removed Lines]",
          "46:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_tagfunc.vim||src/testdir/test_tagfunc.vim": [
          "File: src/testdir/test_tagfunc.vim -> src/testdir/test_tagfunc.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     return [{'name' : 'mytag', 'filename' : 'Xtest', 'cmd' : '1'}]",
          "106:   endfunc",
          "107:   set tagfunc=Mytagfunc1",
          "109:   call assert_fails('tag xyz', 'E986:')",
          "111:   func Mytagfunc2(pat, flags, info)",
          "",
          "[Removed Lines]",
          "108:   call writefile([''], 'Xtest')",
          "",
          "[Added Lines]",
          "108:   call writefile([''], 'Xtest', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   set tagfunc=Mytagfunc2",
          "116:   call assert_fails('tag xyz', 'E986:')",
          "119:   set tagfunc&",
          "120:   delfunc Mytagfunc1",
          "121:   delfunc Mytagfunc2",
          "",
          "[Removed Lines]",
          "118:   call delete('Xtest')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_tagjump.vim||src/testdir/test_tagjump.vim": [
          "File: src/testdir/test_tagjump.vim -> src/testdir/test_tagjump.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         \\ \"one\\tXptfile\\t1\",",
          "21:         \\ \"three\\tXptfile\\t3\",",
          "22:         \\ \"two\\tXptfile\\t2\"],",
          "26:   %bw!",
          "27:   ptjump two",
          "",
          "[Removed Lines]",
          "23:         \\ 'Xpttags')",
          "24:   call writefile(['one', 'two', 'three'], 'Xptfile')",
          "",
          "[Added Lines]",
          "23:         \\ 'Xpttags', 'D')",
          "24:   call writefile(['one', 'two', 'three'], 'Xptfile', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   call assert_equal(5, winheight(0))",
          "49:   close",
          "53:   set tags&",
          "54: endfunc",
          "",
          "[Removed Lines]",
          "51:   call delete('Xpttags')",
          "52:   call delete('Xptfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "61:         \\ \"word\\tfile1\\tcmd1\",",
          "62:         \\ \"word\\tfile2\\tcmd2\"],",
          "65:   only!",
          "66:   call feedkeys(\":ptjump word\\<CR>\\<CR>\", \"xt\")",
          "67:   help",
          "68:   call assert_equal(2, winnr('$'))",
          "71:   set tags&",
          "72:   quit",
          "73: endfunc",
          "",
          "[Removed Lines]",
          "63:         \\ 'Xtags')",
          "70:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "61:         \\ 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "78:         \\ \"one\\tXtjfile1\\t/^one/;\\\"\\tf\\tfile:\\tsignature:(void)\",",
          "79:         \\ \"word\\tXtjfile2\\tcmd2\"],",
          "81:   new Xtjfile1",
          "82:   call setline(1, ['empty', 'one()', 'empty'])",
          "83:   write",
          "",
          "[Removed Lines]",
          "80:         \\ 'Xtjtags')",
          "",
          "[Added Lines]",
          "77:         \\ 'Xtjtags', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   bwipe!",
          "88:   set tags&",
          "90:   call delete('Xtjfile1')",
          "91: endfunc",
          "",
          "[Removed Lines]",
          "89:   call delete('Xtjtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "97:         \\ \"thesame\\tXdtfile1\\t2;\\\"\\td\\tfile:\",",
          "98:         \\ \"thesame\\tXdtfile1\\t3;\\\"\\td\\tfile:\",",
          "99:         \\ ],",
          "101:   new Xdtfile1",
          "102:   call setline(1, ['thesame one', 'thesame two', 'thesame three'])",
          "103:   write",
          "",
          "[Removed Lines]",
          "100:         \\ 'Xdttags')",
          "",
          "[Added Lines]",
          "96:         \\ 'Xdttags', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "111:   bwipe!",
          "112:   set tags&",
          "114:   call delete('Xdtfile1')",
          "115: endfunc",
          "",
          "[Removed Lines]",
          "113:   call delete('Xdttags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "121:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "122:         \\ \"second\\tXsbfile1\\t2\",",
          "123:         \\ \"third\\tXsbfile1\\t3\",],",
          "127:   enew | only",
          "128:   set switchbuf=",
          "",
          "[Removed Lines]",
          "124:         \\ 'Xswtags')",
          "125:   call writefile(['first', 'second', 'third'], 'Xsbfile1')",
          "",
          "[Added Lines]",
          "119:         \\ 'Xswtags', 'D')",
          "120:   call writefile(['first', 'second', 'third'], 'Xsbfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "154:   tabclose!",
          "155:   enew | only",
          "158:   set tags&",
          "159:   set switchbuf&vim",
          "160: endfunc",
          "",
          "[Removed Lines]",
          "156:   call delete('Xsbfile1')",
          "157:   call delete('Xswtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "168:        \\ \"  test text\",",
          "169:        \\ \"  start OK if found this line\",",
          "170:        \\ \" start found wrong line\",",
          "172:   call writefile([\"/* test text test tex start here\",",
          "173:        \\ \"  some text\",",
          "174:        \\ \"  test text\",",
          "175:        \\ \"  start OK if found this line\",",
          "176:        \\ \" start found wrong line\",",
          "178:   new Xtestfile",
          "179:   call cursor(1,1)",
          "180:   call search(\"start\")",
          "",
          "[Removed Lines]",
          "171:        \\ \"test text\"], 'Xtestfile')",
          "177:        \\ \"test text\"], 'Xinclude')",
          "",
          "[Added Lines]",
          "164:        \\ \"test text\"], 'Xtestfile', 'D')",
          "170:        \\ \"test text\"], 'Xinclude', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "189:   call assert_fails('tag /\\%(/', 'E426:')",
          "191:   enew! | only",
          "194: endfunction",
          "196: \" Test for jumping to a tag with 'hidden' set, with symbolic link in path of",
          "",
          "[Removed Lines]",
          "192:   call delete('Xtestfile')",
          "193:   call delete('Xinclude')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "205:   call writefile([",
          "206:         \\ \"SECTION_OFF \" . getcwd() . \"/Xtest.dir/Xtest.c /^#define  SECTION_OFF  3$/\",",
          "207:         \\ '',",
          "209:   call writefile(['#define  SECTION_OFF  3',",
          "212:   \" Try jumping to a tag, but with a path that contains a symbolic link.  When",
          "213:   \" wrong, this will give the ATTENTION message.  The next space will then be",
          "",
          "[Removed Lines]",
          "208:         \\ ], 'Xsymtags')",
          "210:         \\ '#define  NUM_SECTIONS 3'], 'Xtest.c')",
          "",
          "[Added Lines]",
          "199:         \\ ], 'Xsymtags', 'D')",
          "201:         \\ '#define  NUM_SECTIONS 3'], 'Xtest.c', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "223:   set hidden&",
          "224:   set tags&",
          "225:   enew!",
          "228:   call delete(\"Xtest.dir\", \"rf\")",
          "229:   %bwipe!",
          "230: endfunc",
          "",
          "[Removed Lines]",
          "226:   call delete('Xsymtags')",
          "227:   call delete('Xtest.c')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "243:   set encoding=utf8",
          "245:   let content = ['text for tags1', 'abcdefghijklmnopqrs']",
          "247:   let content = ['text for tags2', '\uff21\uff22\uff23']",
          "249:   let content = ['text for tags3', '\uff21\uff22\uff23']",
          "251:   let content = ['!_TAG_FILE_ENCODING utf-8 //', 'abcdefghijklmnopqrs Xtags1.txt /abcdefghijklmnopqrs']",
          "254:   \" case1:",
          "255:   new",
          "",
          "[Removed Lines]",
          "246:   call writefile(content, 'Xtags1.txt')",
          "248:   call writefile(content, 'Xtags2.txt')",
          "250:   call writefile(content, 'Xtags3.txt')",
          "252:   call writefile(content, 'Xtags1')",
          "",
          "[Added Lines]",
          "235:   call writefile(content, 'Xtags1.txt', 'D')",
          "237:   call writefile(content, 'Xtags2.txt', 'D')",
          "239:   call writefile(content, 'Xtags3.txt', 'D')",
          "241:   call writefile(content, 'Xtags1', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "280:       call add(contents, 'abc' .. i",
          "281:             \\ .. \" Xtags3.txt /\\x82`\\x82a\\x82b\")",
          "282:   endfor",
          "284:   set tags=Xenctags",
          "285:   tag abc50",
          "286:   call assert_equal('Xtags3.txt', expand('%:t'))",
          "287:   call assert_equal('\uff21\uff22\uff23', getline('.'))",
          "289:   close",
          "291:   set tags&",
          "292:   let &encoding = save_enc",
          "297: endfunc",
          "299: \" Test for emacs-style tags file (TAGS)",
          "",
          "[Removed Lines]",
          "283:   call writefile(contents, 'Xenctags')",
          "288:   call delete('Xenctags')",
          "293:   call delete('Xtags1.txt')",
          "294:   call delete('Xtags2.txt')",
          "295:   call delete('Xtags3.txt')",
          "296:   call delete('Xtags1')",
          "",
          "[Added Lines]",
          "272:   call writefile(contents, 'Xenctags', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "307:         \\ \"\\tfoo();\",",
          "308:         \\ \"\\treturn 0;\",",
          "309:         \\ \"}\",",
          "312:   call writefile([",
          "313:  \\ \"\\x0c\",",
          "314:         \\ \"Xmain.c,64\",",
          "315:         \\ \"void foo() {}\\x7ffoo\\x011,0\",",
          "316:         \\ \"int main(int argc, char **argv)\\x7fmain\\x012,14\",",
          "318:   set tags=Xtetags",
          "319:   ta foo",
          "320:   call assert_equal('void foo() {}', getline('.'))",
          "",
          "[Removed Lines]",
          "310:         \\ ], 'Xmain.c')",
          "317:  \\ ], 'Xtetags')",
          "",
          "[Added Lines]",
          "294:         \\ ], 'Xmain.c', 'D')",
          "301:  \\ ], 'Xtetags', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "333:         \\ \"\\x0c\",",
          "334:         \\ \"Xmain.c,64\",",
          "335:         \\ \"int main(int argc, char **argv)\\x7fmain\\x012,14\",",
          "337:   tag main",
          "338:   call assert_equal(2, line('.'))",
          "339:   call assert_fails('tag bar', 'E426:')",
          "",
          "[Removed Lines]",
          "336:         \\ ], 'Xtags2')",
          "",
          "[Added Lines]",
          "320:         \\ ], 'Xtags2', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "383:         \\ ], 'Xtags2')",
          "384:   call assert_fails('tag foo', 'E431:')",
          "389:   set tags&",
          "390:   bwipe!",
          "391: endfunc",
          "393: \" Test for getting and modifying the tag stack",
          "394: func Test_getsettagstack()",
          "399:   enew | only",
          "400:   call settagstack(1, {'items' : []})",
          "",
          "[Removed Lines]",
          "386:   call delete('Xtetags')",
          "387:   call delete('Xtags2')",
          "388:   call delete('Xmain.c')",
          "395:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile1')",
          "396:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile2')",
          "397:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile3')",
          "",
          "[Added Lines]",
          "376:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile1', 'D')",
          "377:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile2', 'D')",
          "378:   call writefile(['line1', 'line2', 'line3'], 'Xstsfile3', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "414:         \\ \"one\\tXstsfile1\\t1\",",
          "415:         \\ \"three\\tXstsfile3\\t3\",",
          "416:         \\ \"two\\tXstsfile2\\t2\"],",
          "419:   let stk = []",
          "420:   call add(stk, {'bufnr' : bufnr('%'), 'tagname' : 'one',",
          "",
          "[Removed Lines]",
          "417:         \\ 'Xtsttags')",
          "",
          "[Added Lines]",
          "398:         \\ 'Xtsttags', 'D')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "515:   call assert_fails('call gettagstack()', 'E342:')",
          "517:   call settagstack(1, {'items' : []})",
          "522:   set tags&",
          "523: endfunc",
          "525: func Test_tag_with_count()",
          "526:   call writefile([",
          "527:  \\ 'test Xtest.h /^void test();$/;\" p typeref:typename:void signature:()',",
          "529:   call writefile([",
          "530:  \\ 'main Xtest.c /^int main()$/;\" f typeref:typename:int signature:()',",
          "531:  \\ 'test Xtest.c /^void test()$/;\" f typeref:typename:void signature:()',",
          "533:   cal writefile([",
          "534:  \\ 'int main()',",
          "535:  \\ 'void test()',",
          "537:   cal writefile([",
          "538:  \\ 'void test();',",
          "540:   set tags=Xtags,Ytags",
          "542:   new Xtest.c",
          "",
          "[Removed Lines]",
          "518:   call delete('Xstsfile1')",
          "519:   call delete('Xstsfile2')",
          "520:   call delete('Xstsfile3')",
          "521:   call delete('Xtsttags')",
          "528:  \\ ], 'Xtags')",
          "532:  \\ ], 'Ytags')",
          "536:  \\ ], 'Xtest.c')",
          "539:  \\ ], 'Xtest.h')",
          "",
          "[Added Lines]",
          "505:  \\ ], 'Xtags', 'D')",
          "509:  \\ ], 'Ytags', 'D')",
          "513:  \\ ], 'Xtest.c', 'D')",
          "516:  \\ ], 'Xtest.h', 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "552:   call assert_equal(bufname('%'), 'Xtest.h')",
          "554:   set tags&",
          "557:   bwipe Xtest.h",
          "558:   bwipe Xtest.c",
          "561: endfunc",
          "563: func Test_tagnr_recall()",
          "",
          "[Removed Lines]",
          "555:   call delete('Xtags')",
          "556:   call delete('Ytags')",
          "559:   call delete('Xtest.h')",
          "560:   call delete('Xtest.c')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "565:  \\ 'test Xtest.h /^void test();$/;\" p',",
          "566:  \\ 'main Xtest.c /^int main()$/;\" f',",
          "567:  \\ 'test Xtest.c /^void test()$/;\" f',",
          "569:   cal writefile([",
          "570:  \\ 'int main()',",
          "571:  \\ 'void test()',",
          "573:   cal writefile([",
          "574:  \\ 'void test();',",
          "576:   set tags=Xtags",
          "578:   new Xtest.c",
          "",
          "[Removed Lines]",
          "568:  \\ ], 'Xtags')",
          "572:  \\ ], 'Xtest.c')",
          "575:  \\ ], 'Xtest.h')",
          "",
          "[Added Lines]",
          "541:  \\ ], 'Xtags', 'D')",
          "545:  \\ ], 'Xtest.c', 'D')",
          "548:  \\ ], 'Xtest.h', 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "588:   call assert_equal(bufname('%'), 'Xtest.h')",
          "590:   set tags&",
          "592:   bwipe Xtest.h",
          "593:   bwipe Xtest.c",
          "596: endfunc",
          "598: func Test_tag_line_toolong()",
          "599:   call writefile([",
          "600:  \\ '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678 django/contrib/admin/templates/admin/edit_inline/stacked.html 16;\" j line:16 language:HTML'",
          "602:   set tags=Xtags",
          "603:   let old_vbs = &verbose",
          "604:   set verbose=5",
          "",
          "[Removed Lines]",
          "591:   call delete('Xtags')",
          "594:   call delete('Xtest.h')",
          "595:   call delete('Xtest.c')",
          "601:  \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "571:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "635:         \\ 'two',",
          "636:         \\ 'trhee',",
          "637:         \\ 'four',",
          "639:   tag foobar",
          "640:   call assert_equal('Xsomewhere', expand('%'))",
          "641:   call assert_equal(3, getcurpos()[1])",
          "",
          "[Removed Lines]",
          "638:         \\ ], 'Xsomewhere')",
          "",
          "[Added Lines]",
          "608:         \\ ], 'Xsomewhere', 'D')",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "650:   \" Should not crash",
          "651:   call assert_true(v:true)",
          "655:   set tags&",
          "656:   let &verbose = old_vbs",
          "657: endfunc",
          "",
          "[Removed Lines]",
          "653:   call delete('Xtags')",
          "654:   call delete('Xsomewhere')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "665:  \\ 'main Xtest.h /^void test();$/;\" f',",
          "666:  \\ 'main Xtest.c /^int main()$/;\" f',",
          "667:  \\ 'main Xtest.x /^void test()$/;\" f',",
          "669:   cal writefile([",
          "670:  \\ 'int main()',",
          "671:  \\ 'void test()',",
          "674:   let lines =<< trim [SCRIPT]",
          "675:     set tags=Xtags",
          "676:   [SCRIPT]",
          "678:   let buf = RunVimInTerminal('-S XTest_tselect', {'rows': 10, 'cols': 50})",
          "680:   call TermWait(buf, 50)",
          "",
          "[Removed Lines]",
          "668:  \\ ], 'Xtags')",
          "672:  \\ ], 'Xtest.c')",
          "677:   call writefile(lines, 'XTest_tselect')",
          "",
          "[Added Lines]",
          "636:  \\ ], 'Xtags', 'D')",
          "640:  \\ ], 'Xtest.c', 'D')",
          "645:   call writefile(lines, 'XTest_tselect', 'D')",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "682:   call VerifyScreenDump(buf, 'Test_tselect_1', {})",
          "684:   call StopVimInTerminal(buf)",
          "688: endfunc",
          "690: func Test_tagline()",
          "691:   call writefile([",
          "692:  \\ 'provision Xtest.py /^    def provision(self, **kwargs):$/;\" m line:1 language:Python class:Foo',",
          "693:  \\ 'provision Xtest.py /^    def provision(self, **kwargs):$/;\" m line:3 language:Python class:Bar',",
          "695:   call writefile([",
          "696:  \\ '    def provision(self, **kwargs):',",
          "697:  \\ '        pass',",
          "698:  \\ '    def provision(self, **kwargs):',",
          "699:  \\ '        pass',",
          "702:   set tags=Xtags",
          "",
          "[Removed Lines]",
          "685:   call delete('Xtags')",
          "686:   call delete('Xtest.c')",
          "687:   call delete('XTest_tselect')",
          "694:  \\], 'Xtags')",
          "700:  \\], 'Xtest.py')",
          "",
          "[Added Lines]",
          "659:  \\], 'Xtags', 'D')",
          "665:  \\], 'Xtest.py', 'D')",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "706:   2tag provision",
          "707:   call assert_equal(line('.'), 3)",
          "711:   set tags&",
          "712: endfunc",
          "714: \" Test for expanding environment variable in a tag file name",
          "715: func Test_tag_envvar()",
          "717:   set tags=Xtags",
          "719:   let $FOO='TagTestEnv'",
          "",
          "[Removed Lines]",
          "709:   call delete('Xtags')",
          "710:   call delete('Xtest.py')",
          "716:   call writefile([\"Func1\\t$FOO\\t/^Func1/\"], 'Xtags')",
          "",
          "[Added Lines]",
          "679:   call writefile([\"Func1\\t$FOO\\t/^Func1/\"], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "728:   call assert_true(caught_exception)",
          "730:   set tags&",
          "732:   unlet $FOO",
          "733: endfunc",
          "",
          "[Removed Lines]",
          "731:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "737:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "738:         \\ \"second\\tXtpfile1\\t2\",",
          "739:         \\ \"third\\tXtpfile1\\t3\",],",
          "741:   set tags=Xtags",
          "744:   enew | only",
          "745:   ptag third",
          "",
          "[Removed Lines]",
          "740:         \\ 'Xtags')",
          "742:   call writefile(['first', 'second', 'third'], 'Xtpfile1')",
          "",
          "[Added Lines]",
          "702:         \\ 'Xtags', 'D')",
          "704:   call writefile(['first', 'second', 'third'], 'Xtpfile1', 'D')",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "766:   pclose",
          "767:   call assert_equal(1, winnr('$'))",
          "771:   set tags&",
          "772: endfunc",
          "",
          "[Removed Lines]",
          "769:   call delete('Xtpfile1')",
          "770:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "778:         \\ \"func2\\tXfoo\\t/^int func2(int y)/\",",
          "779:         \\ \"func3\\tXfoo\\t/^func3/\",",
          "780:         \\ \"func4\\tXfoo\\t/^func4/\"],",
          "782:   set tags=Xtags",
          "783:   let code =<< trim [CODE]",
          "",
          "[Removed Lines]",
          "781:         \\ 'Xtags')",
          "",
          "[Added Lines]",
          "741:         \\ 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "788:     int * func3 () { }",
          "790:   [CODE]",
          "793:   let v:statusmsg = ''",
          "794:   ta func1",
          "",
          "[Removed Lines]",
          "791:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "751:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "804:   call assert_equal(5, line('.'))",
          "805:   call assert_fails('ta func4', 'E434:')",
          "809:   set tags&",
          "810: endfunc",
          "",
          "[Removed Lines]",
          "807:   call delete('Xtags')",
          "808:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "815:         \\ \"first\\tXfoo\\t1\",",
          "816:         \\ \"ten\\tXfoo\\t3\",",
          "817:         \\ \"six\\tXfoo\\t2\"]",
          "819:   set tags=Xtags",
          "820:   let code =<< trim [CODE]",
          "821:     int first() {}",
          "822:     int six() {}",
          "823:     int ten() {}",
          "824:   [CODE]",
          "827:   call assert_fails('tag first', 'E432:')",
          "829:   \" When multiple tag files are not sorted, then message should be displayed",
          "830:   \" multiple times",
          "832:   set tags=Xtags,Xtags2",
          "833:   call assert_fails('tag first', ['E432:', 'E432:'])",
          "838:   set tags&",
          "839:   %bwipe",
          "840: endfunc",
          "",
          "[Removed Lines]",
          "818:   call writefile(l, 'Xtags')",
          "825:   call writefile(code, 'Xfoo')",
          "831:   call writefile(l, 'Xtags2')",
          "835:   call delete('Xtags')",
          "836:   call delete('Xtags2')",
          "837:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "776:   call writefile(l, 'Xtags', 'D')",
          "783:   call writefile(code, 'Xfoo', 'D')",
          "789:   call writefile(l, 'Xtags2', 'D')",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "847:         \\ \"first\\tXfoo\\t1\",",
          "848:         \\ \"second\\tXfoo\\t2\",",
          "849:         \\ \"third\\tXfoo\\t3\"],",
          "851:   set tags=Xtags",
          "852:   let code =<< trim [CODE]",
          "853:     int first() {}",
          "854:     int second() {}",
          "855:     int third() {}",
          "856:   [CODE]",
          "859:   enew",
          "860:   tag second",
          "861:   call assert_equal('Xfoo', bufname(''))",
          "862:   call assert_equal(2, line('.'))",
          "866:   set tags&",
          "867:   %bwipe",
          "868: endfunc",
          "",
          "[Removed Lines]",
          "850:         \\ 'Xtags')",
          "857:   call writefile(code, 'Xfoo')",
          "864:   call delete('Xtags')",
          "865:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "805:         \\ 'Xtags', 'D')",
          "812:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "874:         \\ \"first\\tXfoo\\t1\",",
          "875:         \\ \"second\\tXfoo\\t/^int second() {}$/\",",
          "876:         \\ \"third\\tXfoo\\t3\"],",
          "878:   set tags=Xtags",
          "879:   let code =<< trim [CODE]",
          "880:     int first() {}",
          "881:     int second() {}",
          "882:     int third() {}",
          "883:   [CODE]",
          "886:   enew",
          "887:   call setloclist(0, [], 'f')",
          "",
          "[Removed Lines]",
          "877:         \\ 'Xtags')",
          "884:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "830:         \\ 'Xtags', 'D')",
          "837:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "899:         \\ 'valid': 1, 'vcol': 0, 'nr': 0, 'type': '', 'module': '',",
          "900:         \\ 'text': 'second'}], getloclist(0))",
          "904:   set tags&",
          "905:   %bwipe",
          "906: endfunc",
          "",
          "[Removed Lines]",
          "902:   call delete('Xtags')",
          "903:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "913:         \\ \"first\\tXfoo\\t/^int first() {}/\",",
          "914:         \\ \"second\\tXfoo\\t/^int second() {}/\",",
          "915:         \\ \"third\\tXfoo\\t/^int third() {}/\"],",
          "917:   set tags=Xtags",
          "918:   let code =<< trim [CODE]",
          "919:     int first() {}",
          "920:     int second() {}",
          "921:     int third() {}",
          "922:   [CODE]",
          "925:   enew",
          "926:   let save_cpo = &cpo",
          "",
          "[Removed Lines]",
          "916:         \\ 'Xtags')",
          "923:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "867:         \\ 'Xtags', 'D')",
          "874:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "930:   call assert_equal('^int second() {}', @/)",
          "931:   let &cpo = save_cpo",
          "935:   set tags&",
          "936:   %bwipe",
          "937: endfunc",
          "",
          "[Removed Lines]",
          "933:   call delete('Xtags')",
          "934:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "942:   for i in range(10, 31)",
          "943:     let l += [\"var\" .. i .. \"\\tXfoo\\t/^int var\" .. i .. \";$/\"]",
          "944:   endfor",
          "946:   set tags=Xtags",
          "948:   let l = []",
          "949:   for i in range(10, 31)",
          "950:     let l += [\"int var\" .. i .. \";\"]",
          "951:   endfor",
          "954:   \" Jump to a tag when the tag stack is full. Oldest entry should be removed.",
          "955:   enew",
          "",
          "[Removed Lines]",
          "945:   call writefile(l, 'Xtags')",
          "952:   call writefile(l, 'Xfoo')",
          "",
          "[Added Lines]",
          "894:   call writefile(l, 'Xtags', 'D')",
          "901:   call writefile(l, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "994:   call settagstack(1, {'items' : []})",
          "995:   call assert_fails('pop', 'E73:')",
          "999:   set tags&",
          "1000:   %bwipe",
          "1001: endfunc",
          "",
          "[Removed Lines]",
          "997:   call delete('Xtags')",
          "998:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1007:         \\ \"first\\tXfoo\\t1\",",
          "1008:         \\ \"first\\tXfoo\\t2\",",
          "1009:         \\ \"first\\tXfoo\\t3\"],",
          "1011:   set tags=Xtags",
          "1012:   let code =<< trim [CODE]",
          "1013:     int first() {}",
          "1014:     int first() {}",
          "1015:     int first() {}",
          "1016:   [CODE]",
          "1019:   call settagstack(1, {'items' : []})",
          "1020:   tag first",
          "",
          "[Removed Lines]",
          "1010:         \\ 'Xtags')",
          "1017:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "957:         \\ 'Xtags', 'D')",
          "964:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1041:   call assert_equal(1, line('.'))",
          "1042:   set ignorecase&",
          "1046:   set tags&",
          "1047:   %bwipe",
          "1048: endfunc",
          "",
          "[Removed Lines]",
          "1044:   call delete('Xtags')",
          "1045:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1054:         \\ \"first\\tXfoo\\t1\",",
          "1055:         \\ \"first\\tXfoo\\t2\",",
          "1056:         \\ \"first\\tXfoo\\t3\"],",
          "1058:   set tags=Xtags",
          "1059:   let code =<< trim [CODE]",
          "1060:     int first() {}",
          "1061:     int first() {}",
          "1062:     int first() {}",
          "1063:   [CODE]",
          "1066:   enew | only",
          "1067:   ptag first",
          "",
          "[Removed Lines]",
          "1057:         \\ 'Xtags')",
          "1064:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "1002:         \\ 'Xtags', 'D')",
          "1009:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1092:   pclose",
          "1096:   set tags&",
          "1097:   %bwipe",
          "1098: endfunc",
          "",
          "[Removed Lines]",
          "1094:   call delete('Xtags')",
          "1095:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1104:         \\ \"first\\tXfoo1\\t1\",",
          "1105:         \\ \"first\\tXfoo2\\t1\",",
          "1106:         \\ \"first\\tXfoo3\\t1\"],",
          "1108:   set tags=Xtags",
          "1109:   let code =<< trim [CODE]",
          "1110:     int first() {}",
          "1111:   [CODE]",
          "1116:   tag first",
          "1117:   tag first",
          "",
          "[Removed Lines]",
          "1107:         \\ 'Xtags')",
          "1112:   call writefile(code, 'Xfoo1')",
          "1113:   call writefile(code, 'Xfoo2')",
          "1114:   call writefile(code, 'Xfoo3')",
          "",
          "[Added Lines]",
          "1050:         \\ 'Xtags', 'D')",
          "1055:   call writefile(code, 'Xfoo1', 'D')",
          "1056:   call writefile(code, 'Xfoo2', 'D')",
          "1057:   call writefile(code, 'Xfoo3', 'D')",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1120:   tnext",
          "1121:   call assert_fails('tnext', 'E428:')",
          "1127:   set tags&",
          "1128:   %bwipe",
          "1129: endfunc",
          "",
          "[Removed Lines]",
          "1123:   call delete('Xtags')",
          "1124:   call delete('Xfoo1')",
          "1125:   call delete('Xfoo2')",
          "1126:   call delete('Xfoo3')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1135:         \\ \"first\\tXfoo1\\t1\",",
          "1136:         \\ \"first\\tXfoo2\\t1\",",
          "1137:         \\ \"first\\tXfoo3\\t1\"],",
          "1139:   set tags=Xtags",
          "1141:   call settagstack(1, {'items' : []})",
          "1142:   call assert_fails('tag first', 'E429:')",
          "1143:   call assert_equal(3, gettagstack().items[0].matchnr)",
          "1146:   set tags&",
          "1147:   %bwipe",
          "1148: endfunc",
          "",
          "[Removed Lines]",
          "1138:         \\ 'Xtags')",
          "1145:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "1077:         \\ 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1152:         \\ \"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "1153:         \\ \"first\\tXfoo\\t1\" .. ';\"' .. \"\\tv\\ttyperef:typename:int\\tfile:\",",
          "1154:         \\ \"first\\tXfoo\\t2\" .. ';\"' .. \"\\tkind:v\\ttyperef:typename:char\\tfile:\"],",
          "1156:   set tags=Xtags",
          "1158:   let code =<< trim [CODE]",
          "1159:     static int first;",
          "1160:     static char first;",
          "1161:   [CODE]",
          "1164:   call feedkeys(\"\\<CR>\", \"t\")",
          "1165:   let l = split(execute(\"tselect first\"), \"\\n\")",
          "",
          "[Removed Lines]",
          "1155:         \\ 'Xtags')",
          "1162:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "1093:         \\ 'Xtags', 'D')",
          "1100:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1175: [DATA]",
          "1176:   call assert_equal(expected, l)",
          "1180:   set tags&",
          "1181:   %bwipe",
          "1182: endfunc",
          "",
          "[Removed Lines]",
          "1178:   call delete('Xtags')",
          "1179:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1454:   set tags=Xtags",
          "1455:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "1456:         \\ \"tame\\tXtlfile1\\t1;\",",
          "1461:   \" Jumping to the tag 'tape', should instead jump to 'tame'",
          "1462:   new",
          "",
          "[Removed Lines]",
          "1457:         \\ \"tape\\tXtlfile2\\t1;\"], 'Xtags')",
          "1458:   call writefile(['tame'], 'Xtlfile1')",
          "1459:   call writefile(['tape'], 'Xtlfile2')",
          "",
          "[Added Lines]",
          "1393:         \\ \"tape\\tXtlfile2\\t1;\"], 'Xtags', 'D')",
          "1394:   call writefile(['tame'], 'Xtlfile1', 'D')",
          "1395:   call writefile(['tape'], 'Xtlfile2', 'D')",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1468:   tag /^tape$",
          "1469:   call assert_equal('Xtlfile2', @%)",
          "1474:   set tags& taglength&",
          "1475: endfunc",
          "",
          "[Removed Lines]",
          "1471:   call delete('Xtags')",
          "1472:   call delete('Xtlfile1')",
          "1473:   call delete('Xtlfile2')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1481:   \" missing search pattern or line number for a tag",
          "1482:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "1486:   enew",
          "1487:   tag foo",
          "",
          "[Removed Lines]",
          "1483:         \\ \"foo\\tXfile\\t\"], 'Xtags', 'b')",
          "1484:   call writefile(['foo'], 'Xfile')",
          "",
          "[Added Lines]",
          "1416:         \\ \"foo\\tXfile\\t\"], 'Xtags', 'bD')",
          "1417:   call writefile(['foo'], 'Xfile', 'D')",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1504:         \\ \"foo\\tXfile 1;\"], 'Xtags')",
          "1505:   call assert_fails('tag foo', 'E431:')",
          "1509:   set tags&",
          "1510: endfunc",
          "",
          "[Removed Lines]",
          "1507:   call delete('Xtags')",
          "1508:   call delete('Xfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1514:   new | only",
          "1515:   set tags=Xtags",
          "1516:   call writefile([\"!_TAG_FILE_ENCODING\\tutf-8\\t//\",",
          "1520:   \" Remove the catch-all that runtest.vim adds",
          "1521:   au! SwapExists",
          "1522:   augroup StagTest",
          "",
          "[Removed Lines]",
          "1517:         \\ \"foo\\tXfile\\t1\"], 'Xtags')",
          "1518:   call writefile(['foo'], 'Xfile')",
          "1519:   call writefile([], '.Xfile.swp')",
          "",
          "[Added Lines]",
          "1448:         \\ \"foo\\tXfile\\t1\"], 'Xtags', 'D')",
          "1449:   call writefile(['foo'], 'Xfile', 'D')",
          "1450:   call writefile([], '.Xfile.swp', 'D')",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1531:   augroup StagTest",
          "1532:     au!",
          "1533:   augroup END",
          "1536:   set tags&",
          "1537: endfunc",
          "",
          "[Removed Lines]",
          "1534:   call delete('Xfile')",
          "1535:   call delete('.Xfile.swp')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1546:         \\ \"third\\tXfoo\\t3\",",
          "1547:         \\ \"second\\tXfoo\\t2\",",
          "1548:         \\ \"first\\tXfoo\\t1\"],",
          "1550:   set tags=Xtags",
          "1551:   let code =<< trim [CODE]",
          "1552:     int first() {}",
          "1553:     int second() {}",
          "1554:     int third() {}",
          "1555:   [CODE]",
          "1558:   enew",
          "1559:   set tagbsearch",
          "",
          "[Removed Lines]",
          "1549:         \\ 'Xtags')",
          "1556:   call writefile(code, 'Xfoo')",
          "",
          "[Added Lines]",
          "1478:         \\ 'Xtags', 'D')",
          "1485:   call writefile(code, 'Xfoo', 'D')",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1613:         \\ 'Xtags')",
          "1614:   call assert_fails('tag bbb', 'E426:')",
          "1618:   set tags& tagbsearch&",
          "1619: endfunc",
          "",
          "[Removed Lines]",
          "1616:   call delete('Xtags')",
          "1617:   call delete('Xfoo')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_taglist.vim||src/testdir/test_taglist.vim": [
          "File: src/testdir/test_taglist.vim -> src/testdir/test_taglist.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \\ \"Kindly\\tXbar\\t3;\\\"\\tv\\tfile:\",",
          "13:  \\ \"Lambda\\tXbar\\t3;\\\"\\t\u03bb\\tfile:\",",
          "14:  \\ \"Command\\tXbar\\tcall cursor(3, 4)|;\\\"\\td\",",
          "16:   set tags=Xtags",
          "17:   split Xtext",
          "",
          "[Removed Lines]",
          "15:  \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "15:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   \" Use characters with value > 127 in the tag extra field.",
          "41:   call writefile([",
          "42:  \\ \"vFoo\\tXfoo\\t4\" .. ';\"' .. \"\\ttypename:int\\ta\u00a3\u00a3\u00a3\\tv\",",
          "44:   call assert_equal('v', taglist('vFoo')[0].kind)",
          "46:   call assert_fails(\"let l=taglist([])\", 'E730:')",
          "49:   set tags&",
          "50:   bwipe",
          "51: endfunc",
          "",
          "[Removed Lines]",
          "43:  \\ ], 'Xtags')",
          "48:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "43:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  \\ \"src/os_unix.c,13491\",",
          "59:  \\ \"set_signals(\\x7f1335,32699\",",
          "60:  \\ \"reset_signals(\\x7f1407,34136\",",
          "63:   set tags=Xtags",
          "65:   call assert_equal([['set_signals', '1335,32699'], ['reset_signals', '1407,34136']],",
          "66:  \\ map(taglist('set_signals'), {i, v -> [v.name, v.cmd]}))",
          "69:   set tags&",
          "70: endfunc",
          "",
          "[Removed Lines]",
          "61:  \\ ], 'Xtags')",
          "68:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "60:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:  \\ \"src/os_unix.c,13491\",",
          "78:  \\ \"set_signals(void)\\x7fset_signals\\x011335,32699\",",
          "79:  \\ \"reset_signals(void)\\x7freset_signals\\x011407,34136\",",
          "82:   set tags=Xtags",
          "84:   call assert_equal([['set_signals', '1335,32699'], ['reset_signals', '1407,34136']],",
          "85:  \\ map(taglist('set_signals'), {i, v -> [v.name, v.cmd]}))",
          "88:   set tags&",
          "89: endfunc",
          "",
          "[Removed Lines]",
          "80:  \\ ], 'Xtags')",
          "87:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "78:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96: func Test_tagfiles()",
          "97:   call assert_equal([], tagfiles())",
          "101:   set tags=Xtags1,Xtags2",
          "102:   call assert_equal(['Xtags1', 'Xtags2'], tagfiles())",
          "",
          "[Removed Lines]",
          "99:   call writefile([\"FFoo\\tXfoo\\t1\"], 'Xtags1')",
          "100:   call writefile([\"FBar\\tXbar\\t1\"], 'Xtags2')",
          "",
          "[Added Lines]",
          "96:   call writefile([\"FFoo\\tXfoo\\t1\"], 'Xtags1', 'D')",
          "97:   call writefile([\"FBar\\tXbar\\t1\"], 'Xtags2', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "111:   set tags&",
          "112:   call assert_equal([], tagfiles())",
          "116:   bd",
          "117: endfunc",
          "119: \" For historical reasons we support a tags file where the last line is missing",
          "120: \" the newline.",
          "121: func Test_tagsfile_without_trailing_newline()",
          "123:   set tags=Xtags",
          "125:   let tl = taglist('.*')",
          "126:   call assert_equal(1, len(tl))",
          "127:   call assert_equal('Foo', tl[0].name)",
          "130:   set tags&",
          "131: endfunc",
          "",
          "[Removed Lines]",
          "114:   call delete('Xtags1')",
          "115:   call delete('Xtags2')",
          "122:   call writefile([\"Foo\\tfoo\\t1\"], 'Xtags', 'b')",
          "129:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "117:   call writefile([\"Foo\\tfoo\\t1\"], 'Xtags', 'bD')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:  \\ \"!_TAG_PROGRAM_NAME /Test tags generator/\",",
          "137:  \\ \"FBar\\tXfoo\\t2\" .. ';\"' .. \"\\textrafield\\tf\",",
          "138:  \\ \"!_TAG_FILE_FORMAT 2 /extended format/\",",
          "140:   set tags=Xtags",
          "142:   let l = taglist('.*')",
          "",
          "[Removed Lines]",
          "139:  \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "133:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "144:   call assert_equal('FBar', l[0].name)",
          "146:   set tags&",
          "148: endfunc",
          "150: \" Test for using an excmd in a tags file to position the cursor (instead of a",
          "",
          "[Removed Lines]",
          "147:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "152: func Test_tagfile_excmd()",
          "153:   call writefile([",
          "154:  \\ \"vFoo\\tXfoo\\tcall cursor(3, 4)\" .. '|;\"' .. \"\\tv\",",
          "156:   set tags=Xtags",
          "158:   let l = taglist('.*')",
          "",
          "[Removed Lines]",
          "155:  \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "148:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "164:        \\ 'filename' : 'Xfoo'}], l)",
          "166:   set tags&",
          "168: endfunc",
          "170: \" Test for duplicate fields in a tag in a tags file",
          "171: func Test_duplicate_field()",
          "172:   call writefile([",
          "173:  \\ \"vFoo\\tXfoo\\t4\" .. ';\"' .. \"\\ttypename:int\\ttypename:int\\tv\",",
          "175:   set tags=Xtags",
          "177:   let l = taglist('.*')",
          "",
          "[Removed Lines]",
          "167:   call delete('Xtags')",
          "174:  \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "166:  \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "184:        \\ 'filename' : 'Xfoo'}], l)",
          "186:   set tags&",
          "188: endfunc",
          "190: \" Test for tag address with ;",
          "191: func Test_tag_addr_with_semicolon()",
          "192:   call writefile([",
          "193:        \\ \"Func1\\tXfoo\\t6;/^Func1/\" .. ';\"' .. \"\\tf\"",
          "195:   set tags=Xtags",
          "197:   let l = taglist('.*')",
          "",
          "[Removed Lines]",
          "187:   call delete('Xtags')",
          "194:        \\ ], 'Xtags')",
          "",
          "[Added Lines]",
          "185:        \\ ], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "203:        \\ 'filename' : 'Xfoo'}], l)",
          "205:   set tags&",
          "207: endfunc",
          "209: \" Test for format error in a tags file",
          "210: func Test_format_error()",
          "212:   set tags=Xtags",
          "214:   let caught_exception = v:false",
          "",
          "[Removed Lines]",
          "206:   call delete('Xtags')",
          "211:   call writefile(['vFoo-Xfoo-4'], 'Xtags')",
          "",
          "[Added Lines]",
          "201:   call writefile(['vFoo-Xfoo-4'], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "228:   call assert_fails(\"echo taglist('foo')\", 'E431:')",
          "230:   set tags&",
          "232: endfunc",
          "234: \" Test for :tag command completion with 'wildoptions' set to 'tagfile'",
          "235: func Test_tag_complete_wildoptions()",
          "237:   set tags=Xtags",
          "238:   set wildoptions=tagfile",
          "",
          "[Removed Lines]",
          "231:   call delete('Xtags')",
          "236:   call writefile([\"foo\\ta.c\\t10;\\\"\\tf\", \"bar\\tb.c\\t20;\\\"\\td\"], 'Xtags')",
          "",
          "[Added Lines]",
          "225:   call writefile([\"foo\\ta.c\\t10;\\\"\\tf\", \"bar\\tb.c\\t20;\\\"\\td\"], 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "243:   call assert_equal('\"tag bar d b.c : foo f a.c', @:)",
          "246:   set wildoptions&",
          "247:   set tags&",
          "248: endfunc",
          "",
          "[Removed Lines]",
          "245:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "256:       inboundGovernor a 2;\" kind:\u22a2 type:forall (muxMode :: MuxMode) socket peerAddr versionNumber m a b. (MonadAsync m, MonadCatch m, MonadEvaluate m, MonadThrow m, MonadThrow (STM m), MonadTime m, MonadTimer m, MonadMask m, Ord peerAddr, HasResponder muxMode ~ True) => Tracer m (RemoteTransitionTrace peerAddr) -> Tracer m (InboundGovernorTrace peerAddr) -> ServerControlChannel muxMode peerAddr ByteString m a b -> DiffTime -> MuxConnectionManager muxMode socket peerAddr versionNumber ByteString m a b -> StrictTVar m InboundGovernorObservableState -> m Void",
          "257:       inboundGovernorCounters a 3;\" kind:\u22a2 type:InboundGovernorState muxMode peerAddr m a b -> InboundGovernorCounters",
          "258:   END",
          "260:   set tags=Xtags",
          "262:   \" try with binary search",
          "",
          "[Removed Lines]",
          "259:   call writefile(tagslines, 'Xtags')",
          "",
          "[Added Lines]",
          "247:   call writefile(tagslines, 'Xtags', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "269:   call assert_equal('\"tag inboundGSV inboundGovernor inboundGovernorCounters', @:)",
          "270:   set tagbsearch&",
          "273:   set tags&",
          "274: endfunc",
          "",
          "[Removed Lines]",
          "272:   call delete('Xtags')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_tcl.vim||src/testdir/test_tcl.vim": [
          "File: src/testdir/test_tcl.vim -> src/testdir/test_tcl.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "684: \" Test :tclfile",
          "685: func Test_tclfile()",
          "686:   call delete('Xtcl_file')",
          "688:   call setfperm('Xtcl_file', 'r-xr-xr-x')",
          "690:   tclfile Xtcl_file",
          "691:   call assert_equal('3.14', TclEval('set pi'))",
          "693:   tcl unset pi",
          "695: endfunc",
          "697: \" Test :tclfile with syntax error in tcl script",
          "698: func Test_tclfile_error()",
          "699:   call delete('Xtcl_file')",
          "701:   call setfperm('Xtcl_file', 'r-xr-xr-x')",
          "703:   call assert_fails('tclfile Xtcl_file', 'invalid command name \"xyz\"')",
          "706: endfunc",
          "708: \" Test exiting current Tcl interpreter and re-creating one.",
          "",
          "[Removed Lines]",
          "687:   call writefile(['set pi [format \"%.2f\" [expr acos(-1.0)]]'], 'Xtcl_file')",
          "694:   call delete('Xtcl_file')",
          "700:   call writefile(['xyz'], 'Xtcl_file')",
          "705:   call delete('Xtcl_file')",
          "",
          "[Added Lines]",
          "687:   call writefile(['set pi [format \"%.2f\" [expr acos(-1.0)]]'], 'Xtcl_file', 'D')",
          "699:   call writefile(['xyz'], 'Xtcl_file', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_termencoding.vim||src/testdir/test_termencoding.vim": [
          "File: src/testdir/test_termencoding.vim -> src/testdir/test_termencoding.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  \\ 'scriptencoding utf-8',",
          "27:  \\ 'exe \"normal aE83: \u30d0\u30c3\u30d5\u30a1\u3092\u4f5c\u6210\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u4ed6\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059...\\<Esc>\"',",
          "28:  \\ 'split Xeuc_jp.txt',",
          "30:   let buf = RunVimInTerminal('-S XTest_tenc_euc_jp', {'rows': 10})",
          "31:   call VerifyScreenDump(buf, 'Test_tenc_euc_jp_01', {})",
          "33:   \" clean up",
          "34:   call StopVimInTerminal(buf)",
          "35:   call delete('Xeuc_jp.txt')",
          "37: endfunc",
          "39: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "29:  \\ ], 'XTest_tenc_euc_jp')",
          "36:   call delete('XTest_tenc_euc_jp')",
          "",
          "[Added Lines]",
          "29:  \\ ], 'XTest_tenc_euc_jp', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_terminal.vim||src/testdir/test_terminal.vim": [
          "File: src/testdir/test_terminal.vim -> src/testdir/test_terminal.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: endfunc",
          "407: func Test_terminal_scrape_multibyte()",
          "409:   if has('win32')",
          "410:     \" Run cmd with UTF-8 codepage to make the type command print the expected",
          "411:     \" multibyte characters.",
          "",
          "[Removed Lines]",
          "408:   call writefile([\"l\u00e9tt\u307ers\"], 'Xtext')",
          "",
          "[Added Lines]",
          "408:   call writefile([\"l\u00e9tt\u307ers\"], 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:   call TermWait(buf)",
          "438:   exe buf . 'bwipe'",
          "440: endfunc",
          "442: func Test_terminal_one_column()",
          "",
          "[Removed Lines]",
          "439:   call delete('Xtext')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455: endfunc",
          "457: func Test_terminal_scroll()",
          "459:   if has('win32')",
          "460:     let cmd = 'cmd /c \"type Xtext\"'",
          "461:   else",
          "",
          "[Removed Lines]",
          "458:   call writefile(range(1, 200), 'Xtext')",
          "",
          "[Added Lines]",
          "457:   call writefile(range(1, 200), 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "484:   call assert_equal('200', term_getline(buf, 200 - scrolled))",
          "486:   exe buf . 'bwipe'",
          "488: endfunc",
          "490: func Test_terminal_scrollback()",
          "491:   let buf = Run_shell_in_terminal({'term_rows': 15})",
          "492:   set termwinscroll=100",
          "494:   if has('win32')",
          "495:     call term_sendkeys(buf, \"type Xtext\\<CR>\")",
          "496:   else",
          "",
          "[Removed Lines]",
          "487:   call delete('Xtext')",
          "493:   call writefile(range(150), 'Xtext')",
          "",
          "[Added Lines]",
          "491:   call writefile(range(150), 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "505:   call StopShellInTerminal(buf)",
          "506:   exe buf . 'bwipe'",
          "507:   set termwinscroll&",
          "509: endfunc",
          "511: func Test_terminal_postponed_scrollback()",
          "512:   \" tail -f only works on Unix",
          "513:   CheckUnix",
          "516:   call writefile([",
          "517:  \\ 'set shell=/bin/sh noruler',",
          "518:  \\ 'terminal',",
          "",
          "[Removed Lines]",
          "508:   call delete('Xtext')",
          "515:   call writefile(range(50), 'Xtext')",
          "",
          "[Added Lines]",
          "512:   call writefile(range(50), 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  \\ 'call feedkeys(\"tail -n 100 -f Xtext\\<CR>\", \"xt\")',",
          "521:  \\ 'sleep 100m',",
          "522:  \\ 'call feedkeys(\"\\<C-W>N\", \"xt\")',",
          "524:   let buf = RunVimInTerminal('-S XTest_postponed', {})",
          "525:   \" Check that the Xtext lines are displayed and in Terminal-Normal mode",
          "526:   call VerifyScreenDump(buf, 'Test_terminal_scrollback_1', {})",
          "",
          "[Removed Lines]",
          "523:  \\ ], 'XTest_postponed')",
          "",
          "[Added Lines]",
          "520:  \\ ], 'XTest_postponed', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547:   echo type(tsk_ret)",
          "549:   call StopVimInTerminal(buf)",
          "552: endfunc",
          "554: \" Run diff on two dumps with different size.",
          "",
          "[Removed Lines]",
          "550:   call delete('XTest_postponed')",
          "551:   call delete('Xtext')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "783: func Test_terminal_cwd_failure()",
          "784:   \" Case 1: Provided directory is not actually a directory.  Attempt to make",
          "785:   \" the file executable as well.",
          "787:   call setfperm('Xtcfile', 'rwx------')",
          "788:   call assert_fails(\"call term_start(&shell, {'cwd': 'Xtcfile'})\", 'E475:')",
          "791:   \" Case 2: Directory does not exist.",
          "792:   call assert_fails(\"call term_start(&shell, {'cwd': 'Xdir'})\", 'E475:')",
          "",
          "[Removed Lines]",
          "786:   call writefile([], 'Xtcfile')",
          "789:   call delete('Xtcfile')",
          "",
          "[Added Lines]",
          "781:   call writefile([], 'Xtcfile', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "989:   \" this file name only works on Unix",
          "990:   CheckUnix",
          "993:   call writefile(['x'], 'Xdir with spaces/quoted\"file')",
          "994:   term ls Xdir\\ with\\ spaces/quoted\\\"file",
          "995:   call WaitForAssert({-> assert_match('quoted\"file', term_getline('', 1))})",
          "996:   \" make sure the job has finished",
          "997:   call WaitForAssert({-> assert_match('finish', term_getstatus(bufnr()))})",
          "1000:   bwipe",
          "1001: endfunc",
          "",
          "[Removed Lines]",
          "992:   call mkdir('Xdir with spaces')",
          "999:   call delete('Xdir with spaces', 'rf')",
          "",
          "[Added Lines]",
          "986:   call mkdir('Xdir with spaces', 'R')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1040:   bwipe",
          "1042:   if has('unix')",
          "1044:     let buf = term_start('cat', {'in_io': 'file', 'in_name': 'Xtrfile'})",
          "1045:     call TermWait(buf)",
          "1046:     call WaitForAssert({-> assert_equal('one line', term_getline(buf, 1))})",
          "1047:     let g:job = term_getjob(buf)",
          "1048:     call WaitForAssert({-> assert_equal('dead', job_status(g:job))})",
          "1049:     bwipe",
          "1051:   endif",
          "1052: endfunc",
          "",
          "[Removed Lines]",
          "1043:     call writefile(['one line'], 'Xtrfile')",
          "1050:     call delete('Xtrfile')",
          "",
          "[Added Lines]",
          "1036:     call writefile(['one line'], 'Xtrfile', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1279:       au FocusLost * call setline(1, 'I am lost') | set nomod",
          "1280:       au FocusGained * call setline(1, 'I am back') | set nomod",
          "1281:   END",
          "1283:   let buf = RunVimInTerminal('-S XtermFocus', #{rows: 6})",
          "1285:   \" Send a focus event to ourselves, it should be forwarded to the terminal",
          "",
          "[Removed Lines]",
          "1282:   call writefile(lines, 'XtermFocus')",
          "",
          "[Added Lines]",
          "1274:   call writefile(lines, 'XtermFocus', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1297:   call term_sendkeys(buf, \"\\<Esc>\")",
          "1299:   call StopVimInTerminal(buf)",
          "1301:   let &term = save_term",
          "1302:   let &ttymouse = save_ttymouse",
          "1303: endfunc",
          "",
          "[Removed Lines]",
          "1300:   call delete('XtermFocus')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1399:      close",
          "1400:      call win_gotoid(termid)",
          "1401:   END",
          "1403:   let buf = RunVimInTerminal('-S XtermExit', #{rows: 10})",
          "1404:   let job = term_getjob(buf)",
          "1405:   call WaitForAssert({-> assert_equal(\"run\", job_status(job))})",
          "",
          "[Removed Lines]",
          "1402:   call writefile(lines, 'XtermExit')",
          "",
          "[Added Lines]",
          "1393:   call writefile(lines, 'XtermExit', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1407:   \" quit the shell, it will make Vim exit",
          "1408:   call term_sendkeys(buf, \"exit\\<CR>\")",
          "1409:   call WaitForAssert({-> assert_equal(\"dead\", job_status(job))})",
          "1412: endfunc",
          "1414: func Test_terminal_open_autocmd()",
          "",
          "[Removed Lines]",
          "1411:   call delete('XtermExit')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1455:       set incsearch",
          "1456:       cnoremap <F3> <Cmd>call term_start(['/bin/sh', '-c', ':'])<CR>",
          "1457:   END",
          "1459:   let buf = RunVimInTerminal('-S Xopenterm', {})",
          "1461:   \" this opens a window, incsearch should not use the old cursor position",
          "",
          "[Removed Lines]",
          "1458:   call writefile(lines, 'Xopenterm')",
          "",
          "[Added Lines]",
          "1447:   call writefile(lines, 'Xopenterm', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1465:   call term_sendkeys(buf, \":q\\<CR>\")",
          "1467:   call StopVimInTerminal(buf)",
          "1469: endfunc",
          "1471: func Test_combining_double_width()",
          "1472:   CheckUnix",
          "1473:   CheckRunVimInTerminal",
          "1476:   let lines =<< trim END",
          "1477:       call term_start(['/bin/sh', '-c', 'cat Xonedouble'])",
          "1478:   END",
          "1480:   let buf = RunVimInTerminal('-S Xcombining', #{rows: 9})",
          "1482:   \" this opens a window, incsearch should not use the old cursor position",
          "",
          "[Removed Lines]",
          "1468:   call delete('Xopenterm')",
          "1475:   call writefile([\"\\xe3\\x83\\x9b\\xe3\\x82\\x9a\"], 'Xonedouble')",
          "1479:   call writefile(lines, 'Xcombining')",
          "",
          "[Added Lines]",
          "1463:   call writefile([\"\\xe3\\x83\\x9b\\xe3\\x82\\x9a\"], 'Xonedouble', 'D')",
          "1467:   call writefile(lines, 'Xcombining', 'D')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1484:   call term_sendkeys(buf, \":q\\<CR>\")",
          "1486:   call StopVimInTerminal(buf)",
          "1489: endfunc",
          "1491: func Test_terminal_popup_with_cmd()",
          "",
          "[Removed Lines]",
          "1487:   call delete('Xonedouble')",
          "1488:   call delete('Xcombining')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1532:       call term_sendkeys(termbuf, \"echo 'test'\")",
          "1533:   END",
          "1535:   let buf = RunVimInTerminal('-S XpopupScript', {})",
          "1537:   \" typed text appears both in normal window and in popup",
          "",
          "[Removed Lines]",
          "1534:   call writefile(lines, 'XpopupScript')",
          "",
          "[Added Lines]",
          "1520:   call writefile(lines, 'XpopupScript', 'D')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1542:   call TermWait(buf)",
          "1543:   call term_sendkeys(buf, \":q\\<CR>\")",
          "1544:   call StopVimInTerminal(buf)",
          "1546: endfunc",
          "1548: func Test_terminal_popup_insert_cmd()",
          "",
          "[Removed Lines]",
          "1545:   call delete('XpopupScript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1576:   call assert_equal(1, winnr('$'))",
          "1578:   let text = \" a\\u0300 e\\u0302 o\\u0308\"",
          "1580:   let buf = RunVimInTerminal('--cmd \"set encoding=utf-8\" Xcomposing', {})",
          "1581:   call WaitForAssert({-> assert_match(text, term_getline(buf, 1))})",
          "1582:   eval 'Xdump'->term_dumpwrite(buf)",
          "",
          "[Removed Lines]",
          "1579:   call writefile([text], 'Xcomposing')",
          "",
          "[Added Lines]",
          "1564:   call writefile([text], 'Xcomposing', 'D')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1584:   call assert_match('|a\u0300| |e\u0302| |o\u0308', dumpline)",
          "1586:   call StopVimInTerminal(buf)",
          "1588:   call delete('Xdump')",
          "1589:   let &encoding = save_enc",
          "1590: endfunc",
          "",
          "[Removed Lines]",
          "1587:   call delete('Xcomposing')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1647:   let lines =<< trim END",
          "1648:      call term_dumpload('dumps/Test_popupwin_22.dump', #{term_rows: 12})",
          "1649:   END",
          "1651:   let buf = RunVimInTerminal('-S XtermDumpload', #{rows: 15})",
          "1652:   call VerifyScreenDump(buf, 'Test_terminal_dumpload', {})",
          "1654:   call StopVimInTerminal(buf)",
          "1656: endfunc",
          "1658: func Test_terminal_dumpdiff()",
          "",
          "[Removed Lines]",
          "1650:   call writefile(lines, 'XtermDumpload')",
          "1655:   call delete('XtermDumpload')",
          "",
          "[Added Lines]",
          "1634:   call writefile(lines, 'XtermDumpload', 'D')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1668:   call assert_fails('call term_dumpdiff(\"X1.dump\", [])', 'E730:')",
          "1669:   call assert_fails('call term_dumpdiff(\"X1.dump\", \"X2.dump\")', 'E485:')",
          "1671:   call assert_fails('call term_dumpdiff(\"X1.dump\", \"X2.dump\")', 'E485:')",
          "1673: endfunc",
          "1675: func Test_terminal_dumpdiff_swap()",
          "",
          "[Removed Lines]",
          "1670:   call writefile([], 'X1.dump')",
          "1672:   call delete('X1.dump')",
          "",
          "[Added Lines]",
          "1653:   call writefile([], 'X1.dump', 'D')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1766:   CheckFeature timers",
          "1768:   \" Open a terminal window from a timer, typed text goes to the terminal",
          "1770:   let buf = RunVimInTerminal('-S XtimerTerm', {})",
          "1771:   call CheckTerminalWindowWorks(buf)",
          "",
          "[Removed Lines]",
          "1769:   call writefile([\"call timer_start(100, { -> term_start('sh') })\"], 'XtimerTerm')",
          "",
          "[Added Lines]",
          "1751:   call writefile([\"call timer_start(100, { -> term_start('sh') })\"], 'XtimerTerm', 'D')",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1775:   call CheckTerminalWindowWorks(buf)",
          "1777:   call StopVimInTerminal(buf)",
          "1779: endfunc",
          "1781: func Test_terminal_window_focus()",
          "",
          "[Removed Lines]",
          "1778:   call delete('XtimerTerm')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1923:  \\ 'let &titlestring = ''[\"drop\",\"Xtextfile\"]''',",
          "1924:  \\ 'redraw',",
          "1925:  \\ \"set t_ts=\",",
          "1927:   let buf = RunVimInTerminal('-S Xscript', {'rows': 10})",
          "1928:   call WaitForAssert({-> assert_equal('Xtextfile', expand('%:t'))})",
          "1929:   call assert_equal(textfile_winid, win_getid())",
          "1931:   call StopVimInTerminal(buf)",
          "1933:   bwipe Xtextfile",
          "1934: endfunc",
          "",
          "[Removed Lines]",
          "1926:  \\ ], 'Xscript')",
          "1932:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "1907:  \\ ], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2261:  \\ 'call  matchadd(\"TgreenBold\", \"Y\")',",
          "2262:  \\ 'call  matchadd(\"TmagentaBold\", \"Z\")',",
          "2263:  \\ 'redraw',",
          "2265:   let buf = RunVimInTerminal('-S Xcolorscript', {'rows': 10})",
          "2266:   call VerifyScreenDump(buf, 'Test_terminal_all_ansi_colors', {})",
          "2268:   call term_sendkeys(buf, \":q\\<CR>\")",
          "2269:   call StopVimInTerminal(buf)",
          "2271: endfunc",
          "2273: function On_BufFilePost()",
          "",
          "[Removed Lines]",
          "2264:  \\ ], 'Xcolorscript')",
          "2270:   call delete('Xcolorscript')",
          "",
          "[Added Lines]",
          "2244:  \\ ], 'Xcolorscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_terminal2.vim||src/testdir/test_terminal2.vim": [
          "File: src/testdir/test_terminal2.vim -> src/testdir/test_terminal2.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   for n in range(10)",
          "20:     call add(text, repeat(n, 50))",
          "21:   endfor",
          "23:   let buf = RunVimInTerminal('Xwinsize', {})",
          "24:   let win = bufwinid(buf)",
          "25:   call assert_equal([6, 40], term_getsize(buf))",
          "",
          "[Removed Lines]",
          "22:   call writefile(text, 'Xwinsize')",
          "",
          "[Added Lines]",
          "22:   call writefile(text, 'Xwinsize', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   call assert_equal(60, winwidth(win))",
          "36:   call StopVimInTerminal(buf)",
          "39:   call assert_fails('set termwinsize=40', 'E474:')",
          "40:   call assert_fails('set termwinsize=10+40', 'E474:')",
          "",
          "[Removed Lines]",
          "37:   call delete('Xwinsize')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:  \\ '#!/bin/sh',",
          "193:  \\ 'echo \"this is standard error\" >&2',",
          "194:  \\ 'echo \"this is standard out\" >&1',",
          "196:   call setfperm('Xechoerrout.sh', 'rwxrwx---')",
          "198:   let outfile = 'Xtermstdout'",
          "",
          "[Removed Lines]",
          "195:  \\ ], 'Xechoerrout.sh')",
          "",
          "[Added Lines]",
          "194:  \\ ], 'Xechoerrout.sh', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:   call WaitForAssert({-> assert_equal('dead', job_status(term_getjob(buf)))})",
          "206:   exe buf . 'bwipe'",
          "208:   call delete(outfile)",
          "209: endfunc",
          "",
          "[Removed Lines]",
          "207:   call delete('Xechoerrout.sh')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:   unlet g:job",
          "291: endfunc",
          "324: func Test_terminal_hidden()",
          "325:   CheckUnix",
          "",
          "[Removed Lines]",
          "293: \" TODO: re-enable when this no longer hangs on Travis",
          "294: \"func Test_zz2_terminal_guioptions_bang()",
          "295: \"  CheckGui",
          "296: \"  set guioptions+=!",
          "297: \"",
          "298: \"  let filename = 'Xtestscript'",
          "299: \"  if has('win32')",
          "300: \"    let filename .= '.bat'",
          "301: \"    let prefix = ''",
          "302: \"    let contents = ['@echo off', 'exit %1']",
          "303: \"  else",
          "304: \"    let filename .= '.sh'",
          "305: \"    let prefix = './'",
          "306: \"    let contents = ['#!/bin/sh', 'exit $1']",
          "307: \"  endif",
          "308: \"  call writefile(contents, filename)",
          "309: \"  call setfperm(filename, 'rwxrwx---')",
          "310: \"",
          "311: \"  \" Check if v:shell_error is equal to the exit status.",
          "312: \"  let exitval = 0",
          "313: \"  execute printf(':!%s%s %d', prefix, filename, exitval)",
          "314: \"  call assert_equal(exitval, v:shell_error)",
          "315: \"",
          "316: \"  let exitval = 9",
          "317: \"  execute printf(':!%s%s %d', prefix, filename, exitval)",
          "318: \"  call assert_equal(exitval, v:shell_error)",
          "319: \"",
          "320: \"  set guioptions&",
          "321: \"  call delete(filename)",
          "322: \"endfunc",
          "",
          "[Added Lines]",
          "291: func Test_zz2_terminal_guioptions_bang()",
          "292:   CheckGui",
          "293:   set guioptions+=!",
          "295:   let filename = 'Xtestscript'",
          "296:   if has('win32')",
          "297:     let filename .= '.bat'",
          "298:     let prefix = ''",
          "299:     let contents = ['@echo off', 'exit %1']",
          "300:   else",
          "301:     let filename .= '.sh'",
          "302:     let prefix = './'",
          "303:     let contents = ['#!/bin/sh', 'exit $1']",
          "304:   endif",
          "305:   call writefile(contents, filename, 'D')",
          "306:   call setfperm(filename, 'rwxrwx---')",
          "308:   \" Check if v:shell_error is equal to the exit status.",
          "309:   let exitval = 0",
          "310:   execute printf(':!%s%s %d', prefix, filename, exitval)",
          "311:   call assert_equal(exitval, v:shell_error)",
          "313:   let exitval = 9",
          "314:   execute printf(':!%s%s %d', prefix, filename, exitval)",
          "315:   call assert_equal(exitval, v:shell_error)",
          "317:   set guioptions&",
          "318: endfunc",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:     call setline(1, range(11111, 11122))",
          "373:     3",
          "374:   END",
          "376:   let buf = RunVimInTerminal('-S XtermNormal', {'rows': 8})",
          "377:   call TermWait(buf)",
          "",
          "[Removed Lines]",
          "375:   call writefile(lines, 'XtermNormal')",
          "",
          "[Added Lines]",
          "371:   call writefile(lines, 'XtermNormal', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "389:   call assert_fails('call term_sendkeys(buf, [])', 'E730:')",
          "390:   call term_sendkeys(buf, \"a:q!\\<CR>:q\\<CR>:q\\<CR>\")",
          "391:   call StopVimInTerminal(buf)",
          "393: endfunc",
          "395: func Test_terminal_hidden_and_close()",
          "",
          "[Removed Lines]",
          "392:   call delete('XtermNormal')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "415:   \\ ]",
          "417:   for c in contents",
          "419:     if has('win32')",
          "420:       term cmd /c type Xdntfile",
          "421:     else",
          "",
          "[Removed Lines]",
          "418:     call writefile(c, 'Xdntfile')",
          "",
          "[Added Lines]",
          "413:     call writefile(c, 'Xdntfile', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:     call assert_equal(c, getline(1, line('$')))",
          "429:     quit",
          "430:   endfor",
          "433: endfunc",
          "435: func GetDummyCmd()",
          "",
          "[Removed Lines]",
          "432:   call delete('Xdntfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_terminal3.vim||src/testdir/test_terminal3.vim": [
          "File: src/testdir/test_terminal3.vim -> src/testdir/test_terminal3.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   let cmd = \"cat Xtext\\<CR>\"",
          "20:   let buf = term_start(&shell, {})",
          "22:   call term_sendkeys(buf, cmd)",
          "23:   call WaitForAssert({-> assert_equal(1, term_getaltscreen(buf))})",
          "",
          "[Removed Lines]",
          "21:   call writefile([\"\\<Esc>[?1047h\"], 'Xtext')",
          "",
          "[Added Lines]",
          "21:   call writefile([\"\\<Esc>[?1047h\"], 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   call term_sendkeys(buf, \"exit\\r\")",
          "30:   exe buf . \"bwipe!\"",
          "32: endfunc",
          "34: func Test_terminal_shell_option()",
          "",
          "[Removed Lines]",
          "31:   call delete('Xtext')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:  \\ ] + a:open_cmds + [",
          "80:  \\ 'endfunc',",
          "81:  \\ ] + a:highlight_cmds",
          "83:   let buf = RunVimInTerminal('-S XtermStart', #{rows: 15})",
          "84:   call TermWait(buf, 100)",
          "85:   call term_sendkeys(buf, \":call OpenTerm()\\<CR>\")",
          "",
          "[Removed Lines]",
          "82:   call writefile(lines, 'XtermStart')",
          "",
          "[Added Lines]",
          "81:   call writefile(lines, 'XtermStart', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:   call term_sendkeys(buf, \"\\<C-D>\")",
          "91:   call TermWait(buf, 50)",
          "92:   call StopVimInTerminal(buf)",
          "94: endfunc",
          "96: func Test_terminal_color_Terminal()",
          "",
          "[Removed Lines]",
          "93:   call delete('XtermStart')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   \\ 'highlight MyWinCol ctermfg=red ctermbg=darkyellow',",
          "144:   \\ 'highlight MyWinCol2 ctermfg=black ctermbg=blue',",
          "145:  \\ ]",
          "147:   let buf = RunVimInTerminal('-S XtermStart', #{rows: 15})",
          "148:   call TermWait(buf, 100)",
          "149:   call term_sendkeys(buf, \":call OpenTerm()\\<CR>\")",
          "",
          "[Removed Lines]",
          "146:   call writefile(lines, 'XtermStart')",
          "",
          "[Added Lines]",
          "144:   call writefile(lines, 'XtermStart', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:   call term_sendkeys(buf, \"\\<C-D>\")",
          "163:   call TermWait(buf, 50)",
          "164:   call StopVimInTerminal(buf)",
          "166: endfunc",
          "168: func Test_terminal_color_transp_Terminal()",
          "",
          "[Removed Lines]",
          "165:   call delete('XtermStart')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:     to edit",
          "246:     in a popup window",
          "247:   END",
          "249:   let cmd = GetVimCommandCleanTerm()",
          "250:   let lines = [",
          "251:  \\ 'call setline(1, range(20))',",
          "",
          "[Removed Lines]",
          "248:   call writefile(text, 'Xtext')",
          "",
          "[Added Lines]",
          "245:   call writefile(text, 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "268:  \\ '  call popup_create(s:buf, #{minwidth: 40, minheight: 6, border: []})',",
          "269:  \\ 'endfunc',",
          "270:  \\ ]",
          "272:   let buf = RunVimInTerminal('-S XtermPopup', #{rows: 15})",
          "273:   call TermWait(buf, 100)",
          "274:   call term_sendkeys(buf, \":call OpenTerm(0)\\<CR>\")",
          "",
          "[Removed Lines]",
          "271:   call writefile(lines, 'XtermPopup')",
          "",
          "[Added Lines]",
          "268:   call writefile(lines, 'XtermPopup', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "312:   call TermWait(buf, 250)  \" wait for terminal to vanish",
          "314:   call StopVimInTerminal(buf)",
          "317: endfunc",
          "319: \" Check a terminal in popup window uses the default minimum size.",
          "",
          "[Removed Lines]",
          "315:   call delete('Xtext')",
          "316:   call delete('XtermPopup')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "325:     to show",
          "326:     in a popup window",
          "327:   END",
          "329:   let lines = [",
          "330:  \\ 'call setline(1, range(20))',",
          "331:  \\ 'func OpenTerm()',",
          "",
          "[Removed Lines]",
          "328:   call writefile(text, 'Xtext')",
          "",
          "[Added Lines]",
          "323:   call writefile(text, 'Xtext', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "333:  \\ '  let g:winid = popup_create(s:buf, #{ border: []})',",
          "334:  \\ 'endfunc',",
          "335:  \\ ]",
          "337:   let buf = RunVimInTerminal('-S XtermPopup', #{rows: 15})",
          "338:   call TermWait(buf, 100)",
          "339:   call term_sendkeys(buf, \":set noruler\\<CR>\")",
          "",
          "[Removed Lines]",
          "336:   call writefile(lines, 'XtermPopup')",
          "",
          "[Added Lines]",
          "331:   call writefile(lines, 'XtermPopup', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "346:   call term_sendkeys(buf, \":q\\<CR>\")",
          "347:   call TermWait(buf, 50)  \" wait for terminal to vanish",
          "348:   call StopVimInTerminal(buf)",
          "351: endfunc",
          "353: \" Check a terminal in popup window with different colors",
          "",
          "[Removed Lines]",
          "349:   call delete('Xtext')",
          "350:   call delete('XtermPopup')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "365:   \\ ] + a:popup_cmds + [",
          "366:  \\ 'endfunc',",
          "367:  \\ ] + a:highlight_cmds",
          "369:   let buf = RunVimInTerminal('-S XtermPopup', #{rows: 15})",
          "370:   call TermWait(buf, 100)",
          "371:   call term_sendkeys(buf, \":set noruler\\<CR>\")",
          "",
          "[Removed Lines]",
          "368:   call writefile(lines, 'XtermPopup')",
          "",
          "[Added Lines]",
          "361:   call writefile(lines, 'XtermPopup', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "379:   call term_sendkeys(buf, \":q\\<CR>\")",
          "380:   call TermWait(buf, 50)  \" wait for terminal to vanish",
          "381:   call StopVimInTerminal(buf)",
          "383: endfunc",
          "385: func Test_terminal_in_popup_color_Terminal()",
          "",
          "[Removed Lines]",
          "382:   call delete('XtermPopup')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "582:      term",
          "583:      startinsert",
          "584:   EOL",
          "586:   let buf = RunVimInTerminal('-S XTest_startinsert', {})",
          "588:   call term_sendkeys(buf, \"exit\\r\")",
          "",
          "[Removed Lines]",
          "585:   call writefile(lines, 'XTest_startinsert')",
          "",
          "[Added Lines]",
          "577:   call writefile(lines, 'XTest_startinsert', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "592:   call WaitForAssert({-> assert_equal(\"some text<\", term_getline(buf, 1))})",
          "594:   call StopVimInTerminal(buf)",
          "596: endfunc",
          "598: \" Test for passing invalid arguments to terminal functions",
          "",
          "[Removed Lines]",
          "595:   call delete('XTest_startinsert')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "683:     red green yellow red blue",
          "684:     vim emacs sublime nano",
          "685:   END",
          "688:   \" Create a terminal window running Vim for the test with mouse enabled",
          "689:   let prev_win = win_getid()",
          "",
          "[Removed Lines]",
          "686:   call writefile(lines, 'Xtest_mouse')",
          "",
          "[Added Lines]",
          "677:   call writefile(lines, 'Xtest_mouse', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "783:   let &ttymouse = save_ttymouse",
          "784:   let &clipboard = save_clipboard",
          "785:   set mousetime&",
          "787:   call delete('Xbuf')",
          "788: endfunc",
          "",
          "[Removed Lines]",
          "786:   call delete('Xtest_mouse')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "836:     red green yellow red blue",
          "837:     vim emacs sublime nano",
          "838:   END",
          "841:   \" Create a terminal window running Vim for the test with mouse disabled",
          "842:   let prev_win = win_getid()",
          "",
          "[Removed Lines]",
          "839:   call writefile(lines, 'Xtest_modeless')",
          "",
          "[Added Lines]",
          "829:   call writefile(lines, 'Xtest_modeless', 'D')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "869:   let &term = save_term",
          "870:   let &ttymouse = save_ttymouse",
          "871:   set mousetime& clipboard&",
          "873:   new | only!",
          "874: endfunc",
          "",
          "[Removed Lines]",
          "872:   call delete('Xtest_modeless')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_timers.vim||src/testdir/test_timers.vim": [
          "File: src/testdir/test_timers.vim -> src/testdir/test_timers.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:         \\ '  normal 3j',",
          "372:         \\ 'endfunc',",
          "373:         \\ 'call timer_start(100, \"Doit\")',",
          "375:   call writefile([",
          "376:         \\ '1-1234',",
          "377:         \\ '2-1234',",
          "378:         \\ '3-1234',",
          "380:   let buf = RunVimInTerminal('-S Xtrcscript Xtrctext', {})",
          "382:   \" Wait for the timer to move the cursor to the third line.",
          "",
          "[Removed Lines]",
          "374:  \\ ], 'Xtrcscript')",
          "379:  \\ ], 'Xtrctext')",
          "",
          "[Added Lines]",
          "374:  \\ ], 'Xtrcscript', 'D')",
          "379:  \\ ], 'Xtrctext', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:   call WaitForAssert({-> assert_equal(2, term_getcursor(buf)[1])})",
          "389:   call StopVimInTerminal(buf)",
          "392: endfunc",
          "394: \" Test that the garbage collector isn't triggered if a timer callback invokes",
          "",
          "[Removed Lines]",
          "390:   call delete('Xtrcscript')",
          "391:   call delete('Xtrctext')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:   set updatetime=50",
          "439:   call timer_start(1, 'Func')",
          "440:   [CODE]",
          "443:   let buf = term_start(GetVimCommandCleanTerm() .. ' -S Xtest.vim', {'term_rows': 8})",
          "444:   let job = term_getjob(buf)",
          "",
          "[Removed Lines]",
          "441:   call writefile(lines, 'Xtest.vim')",
          "",
          "[Added Lines]",
          "439:   call writefile(lines, 'Xtest.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "456:     call assert_equal('', job_info(job).termsig)",
          "457:   endif",
          "460:   exe buf .. 'bwipe!'",
          "461: endfunc",
          "",
          "[Removed Lines]",
          "459:   call delete('Xtest.vim')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:     endfor",
          "486:     au CmdlineLeave : call timer_start(0, {-> 0})",
          "487:   END",
          "489:   let buf = RunVimInTerminal('-S XTest_timerchange', #{rows: 10})",
          "490:   call term_sendkeys(buf, \":fu\\<CR>\")",
          "491:   call WaitForAssert({-> assert_match('-- More --', term_getline(buf, 10))})",
          "",
          "[Removed Lines]",
          "488:   call writefile(lines, 'XTest_timerchange')",
          "",
          "[Added Lines]",
          "485:   call writefile(lines, 'XTest_timerchange', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494:   call term_sendkeys(buf, \"\\<Esc>\")",
          "496:   call StopVimInTerminal(buf)",
          "498: endfunc",
          "500: func Test_timer_outputting_message()",
          "",
          "[Removed Lines]",
          "497:   call delete('XTest_timerchange')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "508:             echon repeat('x', &columns - 11)",
          "509:         })",
          "510:   END",
          "512:   let buf = RunVimInTerminal('-S XTest_timermessage', #{rows: 6})",
          "513:   call term_sendkeys(buf, \"l\")",
          "514:   call term_wait(buf)",
          "",
          "[Removed Lines]",
          "511:   call writefile(lines, 'XTest_timermessage')",
          "",
          "[Added Lines]",
          "507:   call writefile(lines, 'XTest_timermessage', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "516:   call WaitForAssert({-> assert_match('xxxxxxxxxxx', term_getline(buf, 6))})",
          "518:   call StopVimInTerminal(buf)",
          "520: endfunc",
          "522: func Test_timer_using_win_execute_undo_sync()",
          "",
          "[Removed Lines]",
          "519:   call delete('XTest_timermessage')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim": [
          "File: src/testdir/test_trycatch.vim -> src/testdir/test_trycatch.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1975: endfunc",
          "1977: func Test_reload_in_try_catch()",
          "1979:   set autoread",
          "1980:   edit Xreload",
          "1981:   tabnew",
          "",
          "[Removed Lines]",
          "1978:   call writefile(['x'], 'Xreload')",
          "",
          "[Added Lines]",
          "1978:   call writefile(['x'], 'Xreload', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1995:   autocmd! ReLoad",
          "1996:   set noautoread",
          "1997:   bwipe! Xreload",
          "1999: endfunc",
          "2001: \" Test for errors with :catch, :throw, :finally                            {{{1",
          "",
          "[Removed Lines]",
          "1998:   call delete('Xreload')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2306:       call s:main()",
          "2307:       call assert_equal('yes', s:caught)",
          "2308:   END",
          "2310:   source XtestThrow",
          "2313: endfunc",
          "2315: func ThisWillFail()",
          "",
          "[Removed Lines]",
          "2309:   call writefile(lines, 'XtestThrow')",
          "2312:   call delete('XtestThrow')",
          "",
          "[Added Lines]",
          "2308:   call writefile(lines, 'XtestThrow', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2325:       for l in []",
          "2326:     finally",
          "2327:   END",
          "2329:   try",
          "2330:     source XtestCatchAndFinally",
          "2331:   catch /E600:/",
          "2332:   endtry",
          "2335: endfunc",
          "2337: \" This was causing an illegal memory access",
          "",
          "[Removed Lines]",
          "2328:   call writefile(lines, 'XtestCatchAndFinally')",
          "2334:   call delete('XtestCatchAndFinally')",
          "",
          "[Added Lines]",
          "2325:   call writefile(lines, 'XtestCatchAndFinally', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2345:       if",
          "2346:       endtry",
          "2347:   END",
          "2349:   try",
          "2350:     source XtestEndtry",
          "2351:   catch /E171:/",
          "2352:   endtry",
          "2355: endfunc",
          "2357: \" Modeline            {{{1",
          "",
          "[Removed Lines]",
          "2348:   call writefile(lines, 'XtestEndtry')",
          "2354:   call delete('XtestEndtry')",
          "",
          "[Added Lines]",
          "2343:   call writefile(lines, 'XtestEndtry', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     766,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     767,",
          "",
          "---------------"
        ]
      }
    }
  ]
}