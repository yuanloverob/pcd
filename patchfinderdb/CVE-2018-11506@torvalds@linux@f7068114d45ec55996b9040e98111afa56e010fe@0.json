{
  "cve_id": "CVE-2018-11506",
  "cve_desc": "The sr_do_ioctl function in drivers/scsi/sr_ioctl.c in the Linux kernel through 4.16.12 allows local users to cause a denial of service (stack-based buffer overflow) or possibly have unspecified other impact because sense buffers have different sizes at the CDROM layer and the SCSI layer, as demonstrated by a CDROMREADMODE2 ioctl call.",
  "repo": "torvalds/linux",
  "patch_hash": "f7068114d45ec55996b9040e98111afa56e010fe",
  "patch_info": {
    "commit_hash": "f7068114d45ec55996b9040e98111afa56e010fe",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f7068114d45ec55996b9040e98111afa56e010fe",
    "files": [
      "drivers/scsi/sr_ioctl.c"
    ],
    "message": "sr: pass down correctly sized SCSI sense buffer\n\nWe're casting the CDROM layer request_sense to the SCSI sense\nbuffer, but the former is 64 bytes and the latter is 96 bytes.\nAs we generally allocate these on the stack, we end up blowing\nup the stack.\n\nFix this by wrapping the scsi_execute() call with a properly\nsized sense buffer, and copying back the bits for the CDROM\nlayer.\n\nCc: stable@vger.kernel.org\nReported-by: Piotr Gabriel Kosinski <pg.kosinski@gmail.com>\nReported-by: Daniel Shapira <daniel@twistlock.com>\nTested-by: Kees Cook <keescook@chromium.org>\nFixes: 82ed4db499b8 (\"block: split scsi_request out of struct request\")\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c": [
      "File: drivers/scsi/sr_ioctl.c -> drivers/scsi/sr_ioctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:  struct scsi_device *SDev;",
      "189:  struct scsi_sense_hdr sshdr;",
      "190:  int result, err = 0, retries = 0;",
      "192:  SDev = cd->device;",
      "194:       retry:",
      "195:  if (!scsi_block_when_processing_errors(SDev)) {",
      "196:   err = -ENODEV;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:  unsigned char sense_buffer[SCSI_SENSE_BUFFERSIZE], *senseptr = NULL;",
      "195:  if (cgc->sense)",
      "196:   senseptr = sense_buffer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:  }",
      "200:  result = scsi_execute(SDev, cgc->cmd, cgc->data_direction,",
      "203:          cgc->timeout, IOCTL_RETRIES, 0, 0, NULL);",
      "206:  if (driver_byte(result) != 0) {",
      "207:   switch (sshdr.sense_key) {",
      "",
      "[Removed Lines]",
      "201:          cgc->buffer, cgc->buflen,",
      "202:          (unsigned char *)cgc->sense, &sshdr,",
      "",
      "[Added Lines]",
      "205:          cgc->buffer, cgc->buflen, senseptr, &sshdr,",
      "208:  if (cgc->sense)",
      "209:   memcpy(cgc->sense, sense_buffer, sizeof(*cgc->sense));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7d0748dd71695b94f3a35c8bdc05226a7f3d919",
      "candidate_info": {
        "commit_hash": "e7d0748dd71695b94f3a35c8bdc05226a7f3d919",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e7d0748dd71695b94f3a35c8bdc05226a7f3d919",
        "files": [
          "drivers/block/pktcdvd.c",
          "drivers/cdrom/cdrom.c",
          "drivers/ide/ide-cd.c",
          "drivers/ide/ide-cd.h",
          "drivers/ide/ide-cd_ioctl.c",
          "drivers/scsi/sr_ioctl.c",
          "include/linux/cdrom.h"
        ],
        "message": "block: Switch struct packet_command to use struct scsi_sense_hdr\n\nThere is a lot of needless struct request_sense usage in the CDROM\ncode. These can all be struct scsi_sense_hdr instead, to avoid any\nconfusion over their respective structure sizes. This patch is a lot\nof noise changing \"sense\" to \"sshdr\", but the final code is more\nreadable to distinguish between \"sense\" meaning \"struct request_sense\"\nand \"sshdr\" meaning \"struct scsi_sense_hdr\".\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "drivers/block/pktcdvd.c||drivers/block/pktcdvd.c",
          "drivers/cdrom/cdrom.c||drivers/cdrom/cdrom.c",
          "drivers/ide/ide-cd.c||drivers/ide/ide-cd.c",
          "drivers/ide/ide-cd.h||drivers/ide/ide-cd.h",
          "drivers/ide/ide-cd_ioctl.c||drivers/ide/ide-cd_ioctl.c",
          "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c",
          "include/linux/cdrom.h||include/linux/cdrom.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c"
          ],
          "candidate": [
            "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/block/pktcdvd.c||drivers/block/pktcdvd.c": [
          "File: drivers/block/pktcdvd.c -> drivers/block/pktcdvd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: static void pkt_dump_sense(struct pktcdvd_device *pd,",
          "749:       struct packet_command *cgc)",
          "750: {",
          "754:   pkt_err(pd, \"%*ph - sense %02x.%02x.%02x (%s)\\n\",",
          "755:    CDROM_PACKET_SIZE, cgc->cmd,",
          "758:  else",
          "759:   pkt_err(pd, \"%*ph - no sense\\n\", CDROM_PACKET_SIZE, cgc->cmd);",
          "760: }",
          "",
          "[Removed Lines]",
          "751:  struct request_sense *sense = cgc->sense;",
          "753:  if (sense)",
          "756:    sense->sense_key, sense->asc, sense->ascq,",
          "757:    sense_key_string(sense->sense_key));",
          "",
          "[Added Lines]",
          "751:  struct scsi_sense_hdr *sshdr = cgc->sshdr;",
          "753:  if (sshdr)",
          "756:    sshdr->sense_key, sshdr->asc, sshdr->ascq,",
          "757:    sense_key_string(sshdr->sense_key));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     unsigned write_speed, unsigned read_speed)",
          "788: {",
          "789:  struct packet_command cgc;",
          "791:  int ret;",
          "793:  init_cdrom_command(&cgc, NULL, 0, CGC_DATA_NONE);",
          "795:  cgc.cmd[0] = GPCMD_SET_SPEED;",
          "796:  cgc.cmd[2] = (read_speed >> 8) & 0xff;",
          "797:  cgc.cmd[3] = read_speed & 0xff;",
          "",
          "[Removed Lines]",
          "790:  struct request_sense sense;",
          "794:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "790:  struct scsi_sense_hdr sshdr;",
          "794:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1651: static noinline_for_stack int pkt_set_write_settings(struct pktcdvd_device *pd)",
          "1652: {",
          "1653:  struct packet_command cgc;",
          "1655:  write_param_page *wp;",
          "1656:  char buffer[128];",
          "1657:  int ret, size;",
          "",
          "[Removed Lines]",
          "1654:  struct request_sense sense;",
          "",
          "[Added Lines]",
          "1654:  struct scsi_sense_hdr sshdr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1663:  memset(buffer, 0, sizeof(buffer));",
          "1664:  init_cdrom_command(&cgc, buffer, sizeof(*wp), CGC_DATA_READ);",
          "1666:  ret = pkt_mode_sense(pd, &cgc, GPMODE_WRITE_PARMS_PAGE, 0);",
          "1667:  if (ret) {",
          "1668:   pkt_dump_sense(pd, &cgc);",
          "",
          "[Removed Lines]",
          "1665:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "1665:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1680:  init_cdrom_command(&cgc, buffer, size, CGC_DATA_READ);",
          "1682:  ret = pkt_mode_sense(pd, &cgc, GPMODE_WRITE_PARMS_PAGE, 0);",
          "1683:  if (ret) {",
          "1684:   pkt_dump_sense(pd, &cgc);",
          "",
          "[Removed Lines]",
          "1681:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "1681:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1916:       int set)",
          "1917: {",
          "1918:  struct packet_command cgc;",
          "1920:  unsigned char buf[64];",
          "1921:  int ret;",
          "1923:  init_cdrom_command(&cgc, buf, sizeof(buf), CGC_DATA_READ);",
          "1925:  cgc.buflen = pd->mode_offset + 12;",
          "",
          "[Removed Lines]",
          "1919:  struct request_sense sense;",
          "1924:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "1919:  struct scsi_sense_hdr sshdr;",
          "1924:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1962:       unsigned *write_speed)",
          "1963: {",
          "1964:  struct packet_command cgc;",
          "1966:  unsigned char buf[256+18];",
          "1967:  unsigned char *cap_buf;",
          "1968:  int ret, offset;",
          "1970:  cap_buf = &buf[sizeof(struct mode_page_header) + pd->mode_offset];",
          "1971:  init_cdrom_command(&cgc, buf, sizeof(buf), CGC_DATA_UNKNOWN);",
          "1974:  ret = pkt_mode_sense(pd, &cgc, GPMODE_CAPABILITIES_PAGE, 0);",
          "1975:  if (ret) {",
          "",
          "[Removed Lines]",
          "1965:  struct request_sense sense;",
          "1972:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "1965:  struct scsi_sense_hdr sshdr;",
          "1972:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2023:       unsigned *speed)",
          "2024: {",
          "2025:  struct packet_command cgc;",
          "2027:  unsigned char buf[64];",
          "2028:  unsigned int size, st, sp;",
          "2029:  int ret;",
          "2031:  init_cdrom_command(&cgc, buf, 2, CGC_DATA_READ);",
          "2033:  cgc.cmd[0] = GPCMD_READ_TOC_PMA_ATIP;",
          "2034:  cgc.cmd[1] = 2;",
          "",
          "[Removed Lines]",
          "2026:  struct request_sense sense;",
          "2032:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "2026:  struct scsi_sense_hdr sshdr;",
          "2032:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2044:   size = sizeof(buf);",
          "2046:  init_cdrom_command(&cgc, buf, size, CGC_DATA_READ);",
          "2048:  cgc.cmd[0] = GPCMD_READ_TOC_PMA_ATIP;",
          "2049:  cgc.cmd[1] = 2;",
          "2050:  cgc.cmd[2] = 4;",
          "",
          "[Removed Lines]",
          "2047:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "2047:  cgc.sshdr = &sshdr;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2095: static noinline_for_stack int pkt_perform_opc(struct pktcdvd_device *pd)",
          "2096: {",
          "2097:  struct packet_command cgc;",
          "2099:  int ret;",
          "2101:  pkt_dbg(2, pd, \"Performing OPC\\n\");",
          "2103:  init_cdrom_command(&cgc, NULL, 0, CGC_DATA_NONE);",
          "2105:  cgc.timeout = 60*HZ;",
          "2106:  cgc.cmd[0] = GPCMD_SEND_OPC;",
          "2107:  cgc.cmd[1] = 1;",
          "",
          "[Removed Lines]",
          "2098:  struct request_sense sense;",
          "2104:  cgc.sense = &sense;",
          "",
          "[Added Lines]",
          "2098:  struct scsi_sense_hdr sshdr;",
          "2104:  cgc.sshdr = &sshdr;",
          "",
          "---------------"
        ],
        "drivers/cdrom/cdrom.c||drivers/cdrom/cdrom.c": [
          "File: drivers/cdrom/cdrom.c -> drivers/cdrom/cdrom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: int cdrom_dummy_generic_packet(struct cdrom_device_info *cdi,",
          "346:           struct packet_command *cgc)",
          "347: {",
          "352:  }",
          "354:  cgc->stat = -EIO;",
          "",
          "[Removed Lines]",
          "348:  if (cgc->sense) {",
          "349:   cgc->sense->sense_key = 0x05;",
          "350:   cgc->sense->asc = 0x20;",
          "351:   cgc->sense->ascq = 0x00;",
          "",
          "[Added Lines]",
          "348:  if (cgc->sshdr) {",
          "349:   cgc->sshdr->sense_key = 0x05;",
          "350:   cgc->sshdr->asc = 0x20;",
          "351:   cgc->sshdr->ascq = 0x00;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2943:            struct packet_command *cgc,",
          "2944:            int cmd)",
          "2945: {",
          "2947:  struct cdrom_msf msf;",
          "2948:  int blocksize = 0, format = 0, lba;",
          "2949:  int ret;",
          "",
          "[Removed Lines]",
          "2946:  struct request_sense sense;",
          "",
          "[Added Lines]",
          "2946:  struct scsi_sense_hdr sshdr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2971:  if (cgc->buffer == NULL)",
          "2972:   return -ENOMEM;",
          "2976:  cgc->data_direction = CGC_DATA_READ;",
          "2977:  ret = cdrom_read_block(cdi, cgc, lba, 1, format, blocksize);",
          "",
          "[Removed Lines]",
          "2974:  memset(&sense, 0, sizeof(sense));",
          "2975:  cgc->sense = &sense;",
          "2978:  if (ret && sense.sense_key == 0x05 &&",
          "2979:      sense.asc == 0x20 &&",
          "2980:      sense.ascq == 0x00) {",
          "",
          "[Added Lines]",
          "2974:  memset(&sshdr, 0, sizeof(sshdr));",
          "2975:  cgc->sshdr = &sshdr;",
          "2978:  if (ret && sshdr.sense_key == 0x05 &&",
          "2979:      sshdr.asc == 0x20 &&",
          "2980:      sshdr.ascq == 0x00) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2986:   ret = cdrom_switch_blocksize(cdi, blocksize);",
          "2987:   if (ret)",
          "2988:    goto out;",
          "2990:   ret = cdrom_read_cd(cdi, cgc, lba, blocksize, 1);",
          "2991:   ret |= cdrom_switch_blocksize(cdi, blocksize);",
          "2992:  }",
          "",
          "[Removed Lines]",
          "2989:   cgc->sense = NULL;",
          "",
          "[Added Lines]",
          "2989:   cgc->sshdr = NULL;",
          "",
          "---------------"
        ],
        "drivers/ide/ide-cd.c||drivers/ide/ide-cd.c": [
          "File: drivers/ide/ide-cd.c -> drivers/ide/ide-cd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420: int ide_cd_queue_pc(ide_drive_t *drive, const unsigned char *cmd,",
          "421:       int write, void *buffer, unsigned *bufflen,",
          "423:       req_flags_t rq_flags)",
          "424: {",
          "425:  struct cdrom_info *info = drive->driver_data;",
          "",
          "[Removed Lines]",
          "422:       struct request_sense *sense, int timeout,",
          "",
          "[Added Lines]",
          "422:       struct scsi_sense_hdr *sshdr, int timeout,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:   if (buffer)",
          "",
          "[Removed Lines]",
          "459:   if (sense)",
          "460:    memcpy(sense, scsi_req(rq)->sense, sizeof(*sense));",
          "",
          "[Added Lines]",
          "459:   if (sshdr)",
          "460:    scsi_normalize_sense(scsi_req(rq)->sense,",
          "461:           scsi_req(rq)->sense_len, sshdr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "864:  msf->frame  = bcd2bin(msf->frame);",
          "865: }",
          "868: {",
          "869:  struct cdrom_info *info = drive->driver_data;",
          "870:  struct cdrom_device_info *cdi;",
          "",
          "[Removed Lines]",
          "867: int cdrom_check_status(ide_drive_t *drive, struct request_sense *sense)",
          "",
          "[Added Lines]",
          "868: int cdrom_check_status(ide_drive_t *drive, struct scsi_sense_hdr *sshdr)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "887:  cmd[7] = cdi->sanyo_slot % 3;",
          "890: }",
          "892: static int cdrom_read_capacity(ide_drive_t *drive, unsigned long *capacity,",
          "",
          "[Removed Lines]",
          "889:  return ide_cd_queue_pc(drive, cmd, 0, NULL, NULL, sense, 0, RQF_QUIET);",
          "",
          "[Added Lines]",
          "890:  return ide_cd_queue_pc(drive, cmd, 0, NULL, NULL, sshdr, 0, RQF_QUIET);",
          "",
          "---------------"
        ],
        "drivers/ide/ide-cd.h||drivers/ide/ide-cd.h": [
          "File: drivers/ide/ide-cd.h -> drivers/ide/ide-cd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: int ide_cd_queue_pc(ide_drive_t *, const unsigned char *, int, void *,",
          "102: int ide_cd_read_toc(ide_drive_t *);",
          "103: int ide_cdrom_get_capabilities(ide_drive_t *, u8 *);",
          "104: void ide_cdrom_update_speed(ide_drive_t *, u8 *);",
          "108: int ide_cdrom_open_real(struct cdrom_device_info *, int);",
          "",
          "[Removed Lines]",
          "101:       unsigned *, struct request_sense *, int, req_flags_t);",
          "105: int cdrom_check_status(ide_drive_t *, struct request_sense *);",
          "",
          "[Added Lines]",
          "101:       unsigned *, struct scsi_sense_hdr *, int, req_flags_t);",
          "105: int cdrom_check_status(ide_drive_t *, struct scsi_sense_hdr *);",
          "",
          "---------------"
        ],
        "drivers/ide/ide-cd_ioctl.c||drivers/ide/ide-cd_ioctl.c": [
          "File: drivers/ide/ide-cd_ioctl.c -> drivers/ide/ide-cd_ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: {",
          "44:  ide_drive_t *drive = cdi->handle;",
          "45:  struct media_event_desc med;",
          "47:  int stat;",
          "49:  if (slot_nr != CDSL_CURRENT)",
          "50:   return -EINVAL;",
          "54:   return CDS_DISC_OK;",
          "56:  if (!cdrom_get_media_event(cdi, &med)) {",
          "",
          "[Removed Lines]",
          "46:  struct request_sense sense;",
          "52:  stat = cdrom_check_status(drive, &sense);",
          "53:  if (!stat || sense.sense_key == UNIT_ATTENTION)",
          "",
          "[Added Lines]",
          "46:  struct scsi_sense_hdr sshdr;",
          "52:  stat = cdrom_check_status(drive, &sshdr);",
          "53:  if (!stat || sshdr.sense_key == UNIT_ATTENTION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:    return CDS_NO_DISC;",
          "63:  }",
          "67:   return CDS_DISC_OK;",
          "",
          "[Removed Lines]",
          "65:  if (sense.sense_key == NOT_READY && sense.asc == 0x04",
          "66:    && sense.ascq == 0x04)",
          "",
          "[Added Lines]",
          "65:  if (sshdr.sense_key == NOT_READY && sshdr.asc == 0x04",
          "66:    && sshdr.ascq == 0x04)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:    return CDS_NO_DISC;",
          "77:   else",
          "78:    return CDS_TRAY_OPEN;",
          "",
          "[Removed Lines]",
          "74:  if (sense.sense_key == NOT_READY) {",
          "75:   if (sense.asc == 0x3a && sense.ascq == 1)",
          "",
          "[Added Lines]",
          "74:  if (sshdr.sense_key == NOT_READY) {",
          "75:   if (sshdr.asc == 0x3a && sshdr.ascq == 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135: static",
          "136: int ide_cd_lockdoor(ide_drive_t *drive, int lockflag)",
          "137: {",
          "139:  int stat;",
          "",
          "[Removed Lines]",
          "138:  struct request_sense my_sense, *sense = &my_sense;",
          "",
          "[Added Lines]",
          "138:  struct scsi_sense_hdr sshdr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:   cmd[4] = lockflag ? 1 : 0;",
          "152:   stat = ide_cd_queue_pc(drive, cmd, 0, NULL, NULL,",
          "154:  }",
          "158:  if (stat != 0 &&",
          "161:   printk(KERN_ERR \"%s: door locking not supported\\n\",",
          "162:    drive->name);",
          "163:   drive->dev_flags &= ~IDE_DFLAG_DOORLOCKING;",
          "",
          "[Removed Lines]",
          "153:            sense, 0, 0);",
          "159:      sense->sense_key == ILLEGAL_REQUEST &&",
          "160:      (sense->asc == 0x24 || sense->asc == 0x20)) {",
          "",
          "[Added Lines]",
          "153:            &sshdr, 0, 0);",
          "159:      sshdr.sense_key == ILLEGAL_REQUEST &&",
          "160:      (sshdr.asc == 0x24 || sshdr.asc == 0x20)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:  }",
          "169:   stat = 0;",
          "171:  if (stat == 0) {",
          "",
          "[Removed Lines]",
          "168:  if (stat != 0 && sense->sense_key == NOT_READY && sense->asc == 0x3a)",
          "",
          "[Added Lines]",
          "168:  if (stat != 0 && sshdr.sense_key == NOT_READY && sshdr.asc == 0x3a)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451:     layer. the packet must be complete, as we do not",
          "457:  if (cgc->quiet)",
          "458:   flags |= RQF_QUIET;",
          "",
          "[Removed Lines]",
          "454:  if (cgc->sense)",
          "455:   memset(cgc->sense, 0, sizeof(struct request_sense));",
          "",
          "[Added Lines]",
          "454:  if (cgc->sshdr)",
          "455:   memset(cgc->sshdr, 0, sizeof(*cgc->sshdr));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "460:  cgc->stat = ide_cd_queue_pc(drive, cgc->cmd,",
          "461:         cgc->data_direction == CGC_DATA_WRITE,",
          "462:         cgc->buffer, &len,",
          "464:  if (!cgc->stat)",
          "465:   cgc->buflen -= len;",
          "466:  return cgc->stat;",
          "",
          "[Removed Lines]",
          "463:         cgc->sense, cgc->timeout, flags);",
          "",
          "[Added Lines]",
          "463:         cgc->sshdr, cgc->timeout, flags);",
          "",
          "---------------"
        ],
        "drivers/scsi/sr_ioctl.c||drivers/scsi/sr_ioctl.c": [
          "File: drivers/scsi/sr_ioctl.c -> drivers/scsi/sr_ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: int sr_do_ioctl(Scsi_CD *cd, struct packet_command *cgc)",
          "187: {",
          "188:  struct scsi_device *SDev;",
          "190:  int result, err = 0, retries = 0;",
          "193:  SDev = cd->device;",
          "198:       retry:",
          "199:  if (!scsi_block_when_processing_errors(SDev)) {",
          "",
          "[Removed Lines]",
          "189:  struct scsi_sense_hdr sshdr;",
          "191:  unsigned char sense_buffer[SCSI_SENSE_BUFFERSIZE], *senseptr = NULL;",
          "195:  if (cgc->sense)",
          "196:   senseptr = sense_buffer;",
          "",
          "[Added Lines]",
          "189:  struct scsi_sense_hdr local_sshdr, *sshdr = &local_sshdr;",
          "194:  if (cgc->sshdr)",
          "195:   sshdr = cgc->sshdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  }",
          "204:  result = scsi_execute(SDev, cgc->cmd, cgc->data_direction,",
          "206:          cgc->timeout, IOCTL_RETRIES, 0, 0, NULL);",
          "212:  if (driver_byte(result) != 0) {",
          "214:   case UNIT_ATTENTION:",
          "215:    SDev->changed = 1;",
          "216:    if (!cgc->quiet)",
          "",
          "[Removed Lines]",
          "205:          cgc->buffer, cgc->buflen, senseptr, &sshdr,",
          "208:  if (cgc->sense)",
          "209:   memcpy(cgc->sense, sense_buffer, sizeof(*cgc->sense));",
          "213:   switch (sshdr.sense_key) {",
          "",
          "[Added Lines]",
          "204:          cgc->buffer, cgc->buflen, NULL, sshdr,",
          "209:   switch (sshdr->sense_key) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:    err = -ENOMEDIUM;",
          "222:    break;",
          "227:     if (!cgc->quiet)",
          "228:      sr_printk(KERN_INFO, cd,",
          "",
          "[Removed Lines]",
          "224:    if (sshdr.asc == 0x04 &&",
          "225:        sshdr.ascq == 0x01) {",
          "",
          "[Added Lines]",
          "220:    if (sshdr->asc == 0x04 &&",
          "221:        sshdr->ascq == 0x01) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:    break;",
          "246:   case ILLEGAL_REQUEST:",
          "247:    err = -EIO;",
          "251:     err = -EDRIVE_CANT_DO_THIS;",
          "252:    break;",
          "",
          "[Removed Lines]",
          "248:    if (sshdr.asc == 0x20 &&",
          "249:        sshdr.ascq == 0x00)",
          "",
          "[Added Lines]",
          "244:    if (sshdr->asc == 0x20 &&",
          "245:        sshdr->ascq == 0x00)",
          "",
          "---------------"
        ],
        "include/linux/cdrom.h||include/linux/cdrom.h": [
          "File: include/linux/cdrom.h -> include/linux/cdrom.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <linux/list.h>",
          "16: #include <uapi/linux/cdrom.h>",
          "18: struct packet_command",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <scsi/scsi_common.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  unsigned char   *buffer;",
          "22:  unsigned int   buflen;",
          "23:  int   stat;",
          "25:  unsigned char  data_direction;",
          "26:  int   quiet;",
          "27:  int   timeout;",
          "",
          "[Removed Lines]",
          "24:  struct request_sense *sense;",
          "",
          "[Added Lines]",
          "25:  struct scsi_sense_hdr *sshdr;",
          "",
          "---------------"
        ]
      }
    }
  ]
}