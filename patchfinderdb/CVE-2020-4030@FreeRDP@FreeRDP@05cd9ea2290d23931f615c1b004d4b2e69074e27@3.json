{
  "cve_id": "CVE-2020-4030",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out of bounds read in TrioParse. Logging might bypass string length checks due to an integer overflow. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
  "patch_info": {
    "commit_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/05cd9ea2290d23931f615c1b004d4b2e69074e27",
    "files": [
      "winpr/libwinpr/utils/trio/trio.c",
      "winpr/libwinpr/utils/trio/triostr.c"
    ],
    "message": "Fixed TrioParse and trio_length limts.\n\nCVE-2020-4030 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c",
      "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c": [
      "File: winpr/libwinpr/utils/trio/trio.c -> winpr/libwinpr/utils/trio/trio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2729:                                              trio_class_t* self, TRIO_CONST char* string,",
      "2730:                                              trio_flags_t flags, int width, int precision)",
      "2731: {",
      "2733:  int ch;",
      "2735:  assert(VALID(self));",
      "",
      "[Removed Lines]",
      "2732:  int length;",
      "",
      "[Added Lines]",
      "2732:  int length = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2747:  }",
      "2748:  else",
      "2749:  {",
      "2751:   {",
      "2752:    length = trio_length(string);",
      "2753:   }",
      "",
      "[Removed Lines]",
      "2750:   if (precision == 0)",
      "",
      "[Added Lines]",
      "2750:   if (precision <= 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4754:   }",
      "4758:    return NULL;",
      "",
      "[Removed Lines]",
      "4757:   if (trio_length(name) >= MAX_USER_NAME)",
      "",
      "[Added Lines]",
      "4757:   if (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)",
      "",
      "---------------"
    ],
    "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c": [
      "File: winpr/libwinpr/utils/trio/triostr.c -> winpr/libwinpr/utils/trio/triostr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <assert.h>",
      "26: #include <stdlib.h>",
      "27: #include <string.h>",
      "28: #include <ctype.h>",
      "29: #include \"triodef.h\"",
      "30: #include \"triostr.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <limits.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "329: TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)",
      "330: {",
      "332: }",
      "334: #endif",
      "",
      "[Removed Lines]",
      "331:  return strlen(string);",
      "",
      "[Added Lines]",
      "332:  return trio_length_max(string, INT_MAX);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
      "candidate_info": {
        "commit_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/58a3122250d54de3a944c487776bcd4d1da4721e",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
        ],
        "message": "Fixed OOB read in ntlm_av_pair_get\n\nCVE-2020-11097 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"../../log.h\"",
          "40: #define TAG WINPR_TAG(\"sspi.NTLM\")",
          "49: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPairList, size_t* pcbAvPairList);",
          "51: static INLINE void ntlm_av_pair_set_id(NTLM_AV_PAIR* pAvPair, UINT16 id)",
          "",
          "[Removed Lines]",
          "42: static const char* const AV_PAIR_STRINGS[] = {",
          "43:  \"MsvAvEOL\",           \"MsvAvNbComputerName\", \"MsvAvNbDomainName\", \"MsvAvDnsComputerName\",",
          "44:  \"MsvAvDnsDomainName\", \"MsvAvDnsTreeName\",    \"MsvAvFlags\",        \"MsvAvTimestamp\",",
          "45:  \"MsvAvRestrictions\",  \"MsvAvTargetName\",     \"MsvChannelBindings\"",
          "46: };",
          "48: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
          "",
          "[Added Lines]",
          "42: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset);",
          "44: static BOOL ntlm_av_pair_check_data(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair, size_t size)",
          "45: {",
          "46:  size_t offset;",
          "47:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR) + size)",
          "48:   return FALSE;",
          "49:  if (!ntlm_av_pair_get_next_offset(pAvPair, cbAvPair, &offset))",
          "50:   return FALSE;",
          "51:  return cbAvPair >= offset;",
          "52: }",
          "54: static const char* get_av_pair_string(UINT16 pair)",
          "55: {",
          "56:  switch (pair)",
          "57:  {",
          "58:   case MsvAvEOL:",
          "59:    return \"MsvAvEOL\";",
          "60:   case MsvAvNbComputerName:",
          "61:    return \"MsvAvNbComputerName\";",
          "62:   case MsvAvNbDomainName:",
          "63:    return \"MsvAvNbDomainName\";",
          "64:   case MsvAvDnsComputerName:",
          "65:    return \"MsvAvDnsComputerName\";",
          "66:   case MsvAvDnsDomainName:",
          "67:    return \"MsvAvDnsDomainName\";",
          "68:   case MsvAvDnsTreeName:",
          "69:    return \"MsvAvDnsTreeName\";",
          "70:   case MsvAvFlags:",
          "71:    return \"MsvAvFlags\";",
          "72:   case MsvAvTimestamp:",
          "73:    return \"MsvAvTimestamp\";",
          "74:   case MsvAvSingleHost:",
          "75:    return \"MsvAvSingleHost\";",
          "76:   case MsvAvTargetName:",
          "77:    return \"MsvAvTargetName\";",
          "78:   case MsvChannelBindings:",
          "79:    return \"MsvChannelBindings\";",
          "80:   default:",
          "81:    return \"UNKNOWN\";",
          "82:  }",
          "83: }",
          "85: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  return TRUE;",
          "71: }",
          "74: {",
          "75:  UINT16 AvId;",
          "77:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
          "80: }",
          "82: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "",
          "[Removed Lines]",
          "73: static INLINE UINT16 ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair)",
          "79:  return AvId;",
          "",
          "[Added Lines]",
          "110: static INLINE BOOL ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair, size_t size, UINT16* pair)",
          "113:  if (!pAvPair || !pair)",
          "114:   return FALSE;",
          "116:  if (size < sizeof(NTLM_AV_PAIR))",
          "117:   return FALSE;",
          "122:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:  return ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
          "92: }",
          "95: {",
          "96:  UINT16 AvLen;",
          "98:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
          "101: }",
          "103: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "104: {",
          "105:  size_t cbAvPair = cbAvPairList;",
          "106:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "",
          "[Removed Lines]",
          "94: static INLINE SIZE_T ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair)",
          "100:  return AvLen;",
          "",
          "[Added Lines]",
          "137: static INLINE BOOL ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pAvLen)",
          "140:  if (!pAvPair)",
          "141:   return FALSE;",
          "143:  if (size < sizeof(NTLM_AV_PAIR))",
          "144:   return FALSE;",
          "149:  return TRUE;",
          "154:  UINT16 pair;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:  WLog_INFO(TAG, \"AV_PAIRs =\");",
          "114:  {",
          "121:   pAvPair = ntlm_av_pair_next(pAvPair, &cbAvPair);",
          "122:  }",
          "",
          "[Removed Lines]",
          "113:  while (pAvPair && ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)",
          "115:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",",
          "116:             AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),",
          "117:             ntlm_av_pair_get_len(pAvPair));",
          "118:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),",
          "119:                 ntlm_av_pair_get_len(pAvPair));",
          "",
          "[Added Lines]",
          "163:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair) && (pair != MsvAvEOL))",
          "165:   size_t cbLen = 0;",
          "166:   ntlm_av_pair_get_len(pAvPair, cbAvPair, &cbLen);",
          "168:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\", get_av_pair_string(pair), pair);",
          "169:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair), cbLen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:  return (PBYTE)pAvPair + sizeof(NTLM_AV_PAIR);",
          "134: }",
          "137: {",
          "139: }",
          "142: {",
          "146: }",
          "148: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)",
          "",
          "[Removed Lines]",
          "136: static size_t ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair)",
          "138:  return ntlm_av_pair_get_len(pAvPair) + sizeof(NTLM_AV_PAIR);",
          "141: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "143:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR))",
          "144:   return FALSE;",
          "145:  return cbAvPair >= ntlm_av_pair_get_next_offset(pAvPair);",
          "",
          "[Added Lines]",
          "186: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset)",
          "188:  size_t avLen;",
          "189:  if (!pOffset)",
          "190:   return FALSE;",
          "192:  if (!ntlm_av_pair_get_len(pAvPair, size, &avLen))",
          "193:   return FALSE;",
          "195:  return TRUE;",
          "198: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "200:  return ntlm_av_pair_check_data(pAvPair, cbAvPair, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:  if (!ntlm_av_pair_check(pAvPair, *pcbAvPair))",
          "155:   return NULL;",
          "159:  return (NTLM_AV_PAIR*)((PBYTE)pAvPair + offset);",
          "160: }",
          "",
          "[Removed Lines]",
          "157:  offset = ntlm_av_pair_get_next_offset(pAvPair);",
          "",
          "[Added Lines]",
          "212:  if (!ntlm_av_pair_get_next_offset(pAvPair, *pcbAvPair, &offset))",
          "213:   return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList, NTLM_AV_ID AvId,",
          "163:                                size_t* pcbAvPairListRemaining)",
          "164: {",
          "165:  size_t cbAvPair = cbAvPairList;",
          "166:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
          "168:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
          "169:   pAvPair = NULL;",
          "172:  {",
          "175:   if (id == AvId)",
          "176:    break;",
          "177:   if (id == MsvAvEOL)",
          "",
          "[Removed Lines]",
          "171:  while (pAvPair)",
          "173:   UINT16 id = ntlm_av_pair_get_id(pAvPair);",
          "",
          "[Added Lines]",
          "222:  UINT16 id;",
          "229:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &id))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218: static BOOL ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList,",
          "219:                                   NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
          "220: {",
          "221:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
          "222:   return FALSE;",
          "226: }",
          "228: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
          "",
          "[Removed Lines]",
          "224:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, ntlm_av_pair_get_id(pAvPair),",
          "225:                          ntlm_av_pair_get_value_pointer(pAvPair), ntlm_av_pair_get_len(pAvPair));",
          "",
          "[Added Lines]",
          "277:  UINT16 pair;",
          "278:  size_t avLen;",
          "283:  if (!ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair))",
          "284:   return FALSE;",
          "286:  if (!ntlm_av_pair_get_len(pAvPair, cbAvPair, &avLen))",
          "287:   return FALSE;",
          "289:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, pair,",
          "290:                          ntlm_av_pair_get_value_pointer(pAvPair), avLen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:  if (AvNbDomainName)",
          "502:  {",
          "505:  }",
          "507:  if (AvNbComputerName)",
          "508:  {",
          "511:  }",
          "513:  if (AvDnsDomainName)",
          "514:  {",
          "517:  }",
          "519:  if (AvDnsComputerName)",
          "520:  {",
          "523:  }",
          "525:  if (AvDnsTreeName)",
          "526:  {",
          "529:  }",
          "",
          "[Removed Lines]",
          "504:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName);",
          "510:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName);",
          "516:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName);",
          "522:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName);",
          "528:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName);",
          "",
          "[Added Lines]",
          "568:   size_t avLen;",
          "569:   if (!ntlm_av_pair_get_len(AvNbDomainName, cbAvNbDomainName, &avLen))",
          "570:    goto fail;",
          "572:   AvPairsValueLength += avLen;",
          "577:   size_t avLen;",
          "578:   if (!ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName, &avLen))",
          "579:    goto fail;",
          "581:   AvPairsValueLength += avLen;",
          "586:   size_t avLen;",
          "587:   if (!ntlm_av_pair_get_len(AvDnsDomainName, cbAvDnsDomainName, &avLen))",
          "588:    goto fail;",
          "590:   AvPairsValueLength += avLen;",
          "595:   size_t avLen;",
          "596:   if (!ntlm_av_pair_get_len(AvDnsComputerName, cbAvDnsComputerName, &avLen))",
          "597:    goto fail;",
          "599:   AvPairsValueLength += avLen;",
          "604:   size_t avLen;",
          "605:   if (!ntlm_av_pair_get_len(AvDnsTreeName, cbAvDnsTreeName, &avLen))",
          "606:    goto fail;",
          "608:   AvPairsValueLength += avLen;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c6a6923f87dcfb295c508963f21bebbbc4292ae",
      "candidate_info": {
        "commit_hash": "1c6a6923f87dcfb295c508963f21bebbbc4292ae",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1c6a6923f87dcfb295c508963f21bebbbc4292ae",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c"
        ],
        "message": "Fixed broken const variable.",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "",
          "[Added Lines]",
          "601:  char uname[MAX_PATH] = { 0 };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
      "candidate_info": {
        "commit_hash": "c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c0fd449ec0870b050d350d6d844b1ea6dad4bc7d",
        "files": [
          "libfreerdp/cache/glyph.c"
        ],
        "message": "Fixed Out-of-bound read in glyph_cache_put\n\nCVE-2020-11098 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c": [
          "File: libfreerdp/cache/glyph.c -> libfreerdp/cache/glyph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "579:   return FALSE;",
          "580:  }",
          "583:  {",
          "584:   WLog_ERR(TAG, \"invalid glyph cache index: %\" PRIu32 \" in cache id: %\" PRIu32 \"\", index, id);",
          "585:   return FALSE;",
          "",
          "[Removed Lines]",
          "582:  if (index > glyphCache->glyphCache[id].number)",
          "",
          "[Added Lines]",
          "582:  if (index >= glyphCache->glyphCache[id].number)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
      "candidate_info": {
        "commit_hash": "c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c3a1ed780cc4aed639e3391d7cafb9edc9dc623c",
        "files": [
          "channels/printer/client/win/printer_win.c"
        ],
        "message": "Use localtime_s on windows",
        "before_after_code_files": [
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:  int rc;",
          "87:  tt = time(NULL);",
          "90:  str = calloc(len, sizeof(WCHAR));",
          "91:  if (!str)",
          "",
          "[Removed Lines]",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "[Added Lines]",
          "88:  t = localtime_s(&tt, &tres);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
      "candidate_info": {
        "commit_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed memory leaks in ntlm",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:  if (!sspi_SecBufferAlloc(&context->AuthenticateTargetInfo, size))",
          "577:  AuthenticateTargetInfo = (NTLM_AV_PAIR*)context->AuthenticateTargetInfo.pvBuffer;",
          "578:  cbAuthenticateTargetInfo = context->AuthenticateTargetInfo.cbBuffer;",
          "580:  if (!ntlm_av_pair_list_init(AuthenticateTargetInfo, cbAuthenticateTargetInfo))",
          "583:  if (AvNbDomainName)",
          "584:  {",
          "585:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvNbDomainName,",
          "586:                              cbAvNbDomainName))",
          "588:  }",
          "590:  if (AvNbComputerName)",
          "591:  {",
          "592:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "593:                              AvNbComputerName, cbAvNbComputerName))",
          "595:  }",
          "597:  if (AvDnsDomainName)",
          "598:  {",
          "599:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "600:                              AvDnsDomainName, cbAvDnsDomainName))",
          "602:  }",
          "604:  if (AvDnsComputerName)",
          "605:  {",
          "606:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "607:                              AvDnsComputerName, cbAvDnsComputerName))",
          "609:  }",
          "611:  if (AvDnsTreeName)",
          "612:  {",
          "613:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvDnsTreeName,",
          "614:                              cbAvDnsTreeName))",
          "616:  }",
          "618:  if (AvTimestamp)",
          "619:  {",
          "620:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvTimestamp,",
          "621:                              cbAvTimestamp))",
          "623:  }",
          "625:  if (context->UseMIC)",
          "",
          "[Removed Lines]",
          "575:   return -1;",
          "581:   return -1;",
          "587:    return -1;",
          "594:    return -1;",
          "601:    return -1;",
          "608:    return -1;",
          "615:    return -1;",
          "622:    return -1;",
          "",
          "[Added Lines]",
          "575:   goto fail;",
          "581:   goto fail;",
          "587:    goto fail;",
          "594:    goto fail;",
          "601:    goto fail;",
          "608:    goto fail;",
          "615:    goto fail;",
          "622:    goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvFlags,",
          "631:                         (PBYTE)&flags, 4))",
          "633:  }",
          "635:  if (context->SendSingleHostData)",
          "636:  {",
          "637:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvSingleHost,",
          "638:                         (PBYTE)&context->SingleHostData, context->SingleHostData.Size))",
          "640:  }",
          "642:  if (!context->SuppressExtendedProtection)",
          "643:  {",
          "644:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvChannelBindings,",
          "645:                         context->ChannelBindingsHash, 16))",
          "648:   if (context->ServicePrincipalName.Length > 0)",
          "649:   {",
          "650:    if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvTargetName,",
          "651:                          (PBYTE)context->ServicePrincipalName.Buffer,",
          "652:                          context->ServicePrincipalName.Length))",
          "654:   }",
          "655:  }",
          "",
          "[Removed Lines]",
          "632:    return -1;",
          "639:    return -1;",
          "646:    return -1;",
          "653:     return -1;",
          "",
          "[Added Lines]",
          "632:    goto fail;",
          "639:    goto fail;",
          "646:    goto fail;",
          "653:     goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:   AvEOL = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvEOL, NULL);",
          "662:   if (!AvEOL)",
          "665:   ZeroMemory(AvEOL, sizeof(NTLM_AV_PAIR));",
          "666:  }",
          "668:  return 1;",
          "669: }",
          "",
          "[Removed Lines]",
          "663:    return -1;",
          "",
          "[Added Lines]",
          "663:    goto fail;",
          "669: fail:",
          "670:  sspi_SecBufferFree(&context->AuthenticateTargetInfo);",
          "671:  return -1;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:  winpr_HexDump(TAG, WLOG_DEBUG, context->Timestamp, 8);",
          "545: #endif",
          "546:  context->state = NTLM_STATE_AUTHENTICATE;",
          "548:  status = SEC_I_CONTINUE_NEEDED;",
          "549: fail:",
          "550:  Stream_Free(s, FALSE);",
          "551:  return status;",
          "552: }",
          "",
          "[Removed Lines]",
          "547:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "[Added Lines]",
          "549:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "---------------"
        ]
      }
    }
  ]
}