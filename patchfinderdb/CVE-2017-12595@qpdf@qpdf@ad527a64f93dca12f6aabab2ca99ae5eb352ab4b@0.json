{
  "cve_id": "CVE-2017-12595",
  "cve_desc": "The tokenizer in QPDF 6.0.0 and 7.0.b1 is recursive for arrays and dictionaries, which allows remote attackers to cause a denial of service (stack consumption and segmentation fault) or possibly have unspecified other impact via a PDF document with a deep data structure, as demonstrated by a crash in QPDFObjectHandle::parseInternal in libqpdf/QPDFObjectHandle.cc.",
  "repo": "qpdf/qpdf",
  "patch_hash": "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
  "patch_info": {
    "commit_hash": "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
    "repo": "qpdf/qpdf",
    "commit_url": "https://github.com/qpdf/qpdf/commit/ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
    "files": [
      "ChangeLog",
      "include/qpdf/QPDFObjectHandle.hh",
      "libqpdf/QPDFObjectHandle.cc",
      "qpdf/qtest/qpdf.test",
      "qpdf/qtest/qpdf/issue-146.out",
      "qpdf/qtest/qpdf/issue-146.pdf"
    ],
    "message": "Parse iteratively to avoid stack overflow (fixes #146)",
    "before_after_code_files": [
      "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
      "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
      "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
    ]
  },
  "patch_diff": {
    "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh": [
      "File: include/qpdf/QPDFObjectHandle.hh -> include/qpdf/QPDFObjectHandle.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "667:         std::string const& object_description,",
      "668:         QPDFTokenizer& tokenizer, bool& empty,",
      "669:         StringDecrypter* decrypter, QPDF* context,",
      "671:         bool content_stream);",
      "672:     static void parseContentStream_internal(",
      "673:         PointerHolder<Buffer> stream_data,",
      "",
      "[Removed Lines]",
      "670:         bool in_array, bool in_dictionary,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
      "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "883:     while (static_cast<size_t>(input->tell()) < length)",
      "884:     {",
      "885:         QPDFObjectHandle obj =",
      "888:         if (! obj.isInitialized())",
      "889:         {",
      "",
      "[Removed Lines]",
      "886:             parseInternal(input, \"content\", tokenizer, empty,",
      "887:                           0, 0, false, false, true);",
      "",
      "[Added Lines]",
      "886:             parseInternal(input, \"content\", tokenizer, empty, 0, 0, true);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "945:                         StringDecrypter* decrypter, QPDF* context)",
      "946: {",
      "947:     return parseInternal(input, object_description, tokenizer, empty,",
      "949: }",
      "951: QPDFObjectHandle",
      "",
      "[Removed Lines]",
      "948:                          decrypter, context, false, false, false);",
      "",
      "[Added Lines]",
      "947:                          decrypter, context, false);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "953:                                 std::string const& object_description,",
      "954:                                 QPDFTokenizer& tokenizer, bool& empty,",
      "955:                                 StringDecrypter* decrypter, QPDF* context,",
      "957:                                 bool content_stream)",
      "958: {",
      "",
      "[Removed Lines]",
      "956:                                 bool in_array, bool in_dictionary,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "964:     empty = false;",
      "974:     QPDFObjectHandle object;",
      "978:     bool done = false;",
      "979:     while (! done)",
      "980:     {",
      "981:  object = QPDFObjectHandle();",
      "983:  QPDFTokenizer::Token token =",
      "",
      "[Removed Lines]",
      "965:     if (in_dictionary && in_array)",
      "966:     {",
      "970:  throw std::logic_error(",
      "971:      \"INTERNAL ERROR: parseInternal: in_dict && in_array\");",
      "972:     }",
      "976:     qpdf_offset_t offset = input->tell();",
      "977:     std::vector<QPDFObjectHandle> olist;",
      "",
      "[Added Lines]",
      "966:     std::vector<std::vector<QPDFObjectHandle> > olist_stack;",
      "967:     olist_stack.push_back(std::vector<QPDFObjectHandle>());",
      "968:     enum state_e { st_top, st_start, st_stop, st_eof, st_dictionary, st_array };",
      "969:     std::vector<state_e> state_stack;",
      "970:     state_stack.push_back(st_top);",
      "971:     std::vector<qpdf_offset_t> offset_stack;",
      "972:     offset_stack.push_back(input->tell());",
      "976:         std::vector<QPDFObjectHandle>& olist = olist_stack.back();",
      "977:         state_e state = state_stack.back();",
      "978:         qpdf_offset_t offset = offset_stack.back();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "988:           case QPDFTokenizer::tt_eof:",
      "989:             if (content_stream)",
      "990:             {",
      "993:             }",
      "994:             else",
      "995:             {",
      "",
      "[Removed Lines]",
      "992:                 return object;",
      "",
      "[Added Lines]",
      "990:                 state = st_eof;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1012:      break;",
      "1014:    case QPDFTokenizer::tt_array_close:",
      "1016:      {",
      "1018:      }",
      "1019:      else",
      "1020:      {",
      "",
      "[Removed Lines]",
      "1015:      if (in_array)",
      "1017:   done = true;",
      "",
      "[Added Lines]",
      "1013:      if (state == st_array)",
      "1015:                 state = st_stop;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1029:      break;",
      "1031:    case QPDFTokenizer::tt_dict_close:",
      "1033:      {",
      "1035:      }",
      "1036:      else",
      "1037:      {",
      "",
      "[Removed Lines]",
      "1032:      if (in_dictionary)",
      "1034:   done = true;",
      "",
      "[Added Lines]",
      "1030:      if (state == st_dictionary)",
      "1032:                 state = st_stop;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1046:      break;",
      "1048:    case QPDFTokenizer::tt_array_open:",
      "1054:    case QPDFTokenizer::tt_dict_open:",
      "1058:      break;",
      "1060:    case QPDFTokenizer::tt_bool:",
      "",
      "[Removed Lines]",
      "1049:      object = parseInternal(",
      "1050:   input, object_description, tokenizer, empty,",
      "1051:                 decrypter, context, true, false, content_stream);",
      "1052:      break;",
      "1055:      object = parseInternal(",
      "1056:   input, object_description, tokenizer, empty,",
      "1057:                 decrypter, context, false, true, content_stream);",
      "",
      "[Added Lines]",
      "1048:             olist_stack.push_back(std::vector<QPDFObjectHandle>());",
      "1049:             state = st_start;",
      "1050:             offset_stack.push_back(input->tell());",
      "1051:             state_stack.push_back(",
      "1052:                 (token.getType() == QPDFTokenizer::tt_array_open) ?",
      "1053:                 st_array : st_dictionary);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1084:                 {",
      "1085:                     object = QPDFObjectHandle::newOperator(value);",
      "1086:                 }",
      "1093:   {",
      "1094:                     if (context == 0)",
      "1095:                     {",
      "",
      "[Removed Lines]",
      "1087:   else if ((value == \"R\") && (in_array || in_dictionary) &&",
      "1088:       (olist.size() >= 2) &&",
      "1089:                     (! olist.at(olist.size() - 1).isIndirect()) &&",
      "1090:       (olist.at(olist.size() - 1).isInteger()) &&",
      "1091:                     (! olist.at(olist.size() - 2).isIndirect()) &&",
      "1092:       (olist.at(olist.size() - 2).isInteger()))",
      "",
      "[Added Lines]",
      "1083:   else if ((value == \"R\") && (state != st_top) &&",
      "1084:                          (olist.size() >= 2) &&",
      "1085:                          (! olist.at(olist.size() - 1).isIndirect()) &&",
      "1086:                          (olist.at(olist.size() - 1).isInteger()) &&",
      "1087:                          (! olist.at(olist.size() - 2).isIndirect()) &&",
      "1088:                          (olist.at(olist.size() - 2).isInteger()))",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1106:       olist.pop_back();",
      "1107:       olist.pop_back();",
      "1108:   }",
      "1111:   {",
      "",
      "[Removed Lines]",
      "1109:   else if ((value == \"endobj\") &&",
      "1110:     (! (in_array || in_dictionary)))",
      "",
      "[Added Lines]",
      "1105:   else if ((value == \"endobj\") && (state == st_top))",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1153:      break;",
      "1154:  }",
      "1170:             object = newNull();",
      "1190:         {",
      "1192:             {",
      "1194:             }",
      "1204:             {",
      "1208:                 {",
      "1214:                 }",
      "1224:             }",
      "1226:             {",
      "1235:             }",
      "1236:             else",
      "1237:             {",
      "1239:             }",
      "1241:         }",
      "1243:     }",
      "1245:     return object;",
      "",
      "[Removed Lines]",
      "1156:  if (in_dictionary || in_array)",
      "1157:  {",
      "1158:      if (! done)",
      "1159:      {",
      "1160:   olist.push_back(object);",
      "1161:      }",
      "1162:  }",
      "1163:  else if (! object.isInitialized())",
      "1164:  {",
      "1165:             warn(context,",
      "1166:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
      "1167:                          object_description,",
      "1168:                          input->getLastOffset(),",
      "1169:                          \"parse error while reading object\"));",
      "1171:  }",
      "1172:  else",
      "1173:  {",
      "1174:      done = true;",
      "1175:  }",
      "1176:     }",
      "1178:     if (in_array)",
      "1179:     {",
      "1180:  object = newArray(olist);",
      "1181:     }",
      "1182:     else if (in_dictionary)",
      "1183:     {",
      "1187:         std::set<std::string> names;",
      "1188:         for (std::vector<QPDFObjectHandle>::iterator iter = olist.begin();",
      "1189:              iter != olist.end(); ++iter)",
      "1191:             if ((! (*iter).isIndirect()) && (*iter).isName())",
      "1193:                 names.insert((*iter).getName());",
      "1195:         }",
      "1197:         std::map<std::string, QPDFObjectHandle> dict;",
      "1198:         int next_fake_key = 1;",
      "1199:         for (unsigned int i = 0; i < olist.size(); ++i)",
      "1200:         {",
      "1201:             QPDFObjectHandle key_obj = olist.at(i);",
      "1202:             QPDFObjectHandle val;",
      "1203:             if (key_obj.isIndirect() || (! key_obj.isName()))",
      "1205:                 bool found_fake = false;",
      "1206:                 std::string candidate;",
      "1207:                 while (! found_fake)",
      "1209:                     candidate =",
      "1210:                         \"/QPDFFake\" + QUtil::int_to_string(next_fake_key++);",
      "1211:                     found_fake = (names.count(candidate) == 0);",
      "1212:                     QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",",
      "1213:                             (found_fake ? 0 : 1));",
      "1215:                 warn(context,",
      "1216:                      QPDFExc(",
      "1217:                          qpdf_e_damaged_pdf,",
      "1218:                          input->getName(), object_description, offset,",
      "1219:                          \"expected dictionary key but found\"",
      "1220:                          \" non-name object; inserting key \" +",
      "1221:                          candidate));",
      "1222:                 val = key_obj;",
      "1223:                 key_obj = newName(candidate);",
      "1225:             else if (i + 1 >= olist.size())",
      "1227:                 QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");",
      "1228:                 warn(context,",
      "1229:                      QPDFExc(",
      "1230:                          qpdf_e_damaged_pdf,",
      "1231:                          input->getName(), object_description, offset,",
      "1232:                          \"dictionary ended prematurely; using null as value\"",
      "1233:                          \" for last key\"));",
      "1234:                 val = newNull();",
      "1238:                 val = olist.at(++i);",
      "1240:             dict[key_obj.getName()] = val;",
      "1242:         object = newDictionary(dict);",
      "",
      "[Added Lines]",
      "1151:         if ((! object.isInitialized()) &&",
      "1152:             (! ((state == st_start) ||",
      "1153:                 (state == st_stop) ||",
      "1154:                 (state == st_eof))))",
      "1155:         {",
      "1156:             throw std::logic_error(",
      "1157:                 \"QPDFObjectHandle::parseInternal: \"",
      "1158:                 \"unexpected uninitialized object\");",
      "1160:         }",
      "1162:         switch (state)",
      "1164:           case st_eof:",
      "1165:             if (state_stack.size() > 1)",
      "1167:                 warn(context,",
      "1168:                      QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
      "1169:                              object_description,",
      "1170:                              input->getLastOffset(),",
      "1171:                              \"parse error while reading object\"));",
      "1173:             done = true;",
      "1175:             break;",
      "1177:           case st_dictionary:",
      "1178:           case st_array:",
      "1179:             olist.push_back(object);",
      "1180:             break;",
      "1182:           case st_top:",
      "1183:             done = true;",
      "1184:             break;",
      "1186:           case st_start:",
      "1187:             break;",
      "1189:           case st_stop:",
      "1190:             if ((state_stack.size() < 2) || (olist_stack.size() < 2))",
      "1191:             {",
      "1192:                 throw std::logic_error(",
      "1193:                     \"QPDFObjectHandle::parseInternal: st_stop encountered\"",
      "1194:                     \" with insufficient elements in stack\");",
      "1195:             }",
      "1196:             state_e old_state = state_stack.back();",
      "1197:             state_stack.pop_back();",
      "1198:             if (old_state == st_array)",
      "1200:                 object = newArray(olist);",
      "1201:             }",
      "1202:             else if (old_state == st_dictionary)",
      "1203:             {",
      "1207:                 std::set<std::string> names;",
      "1208:                 for (std::vector<QPDFObjectHandle>::iterator iter =",
      "1209:                          olist.begin();",
      "1210:                      iter != olist.end(); ++iter)",
      "1211:                 {",
      "1212:                     if ((! (*iter).isIndirect()) && (*iter).isName())",
      "1213:                     {",
      "1214:                         names.insert((*iter).getName());",
      "1215:                     }",
      "1216:                 }",
      "1218:                 std::map<std::string, QPDFObjectHandle> dict;",
      "1219:                 int next_fake_key = 1;",
      "1220:                 for (unsigned int i = 0; i < olist.size(); ++i)",
      "1222:                     QPDFObjectHandle key_obj = olist.at(i);",
      "1223:                     QPDFObjectHandle val;",
      "1224:                     if (key_obj.isIndirect() || (! key_obj.isName()))",
      "1225:                     {",
      "1226:                         bool found_fake = false;",
      "1227:                         std::string candidate;",
      "1228:                         while (! found_fake)",
      "1229:                         {",
      "1230:                             candidate =",
      "1231:                                 \"/QPDFFake\" +",
      "1232:                                 QUtil::int_to_string(next_fake_key++);",
      "1233:                             found_fake = (names.count(candidate) == 0);",
      "1234:                             QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",",
      "1235:                                     (found_fake ? 0 : 1));",
      "1236:                         }",
      "1237:                         warn(context,",
      "1238:                              QPDFExc(",
      "1239:                                  qpdf_e_damaged_pdf,",
      "1240:                                  input->getName(), object_description, offset,",
      "1241:                                  \"expected dictionary key but found\"",
      "1242:                                  \" non-name object; inserting key \" +",
      "1243:                                  candidate));",
      "1244:                         val = key_obj;",
      "1245:                         key_obj = newName(candidate);",
      "1246:                     }",
      "1247:                     else if (i + 1 >= olist.size())",
      "1248:                     {",
      "1249:                         QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");",
      "1250:                         warn(context,",
      "1251:                              QPDFExc(",
      "1252:                                  qpdf_e_damaged_pdf,",
      "1253:                                  input->getName(), object_description, offset,",
      "1254:                                  \"dictionary ended prematurely; \"",
      "1255:                                  \"using null as value for last key\"));",
      "1256:                         val = newNull();",
      "1257:                     }",
      "1258:                     else",
      "1259:                     {",
      "1260:                         val = olist.at(++i);",
      "1261:                     }",
      "1262:                     dict[key_obj.getName()] = val;",
      "1264:                 object = newDictionary(dict);",
      "1266:             olist_stack.pop_back();",
      "1267:             offset_stack.pop_back();",
      "1268:             if (state_stack.back() == st_top)",
      "1270:                 done = true;",
      "1274:                 olist_stack.back().push_back(object);",
      "",
      "---------------"
    ],
    "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
      "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "221:     [\"141a\", \"/W entry size 0\", 2],",
      "222:     [\"141b\", \"/W entry size 0\", 2],",
      "223:     [\"143\", \"self-referential ostream\", 3],",
      "224:     [\"149\", \"xref prev pointer loop\", 3],",
      "225:     );",
      "226: $n_tests += scalar(@bug_tests);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:     [\"146\", \"very deeply nested array\", 2],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40f00122b811ca5c8788856f5baf4e5e088926eb",
      "candidate_info": {
        "commit_hash": "40f00122b811ca5c8788856f5baf4e5e088926eb",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/40f00122b811ca5c8788856f5baf4e5e088926eb",
        "files": [
          "ChangeLog",
          "include/qpdf/QPDF.hh",
          "include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDF.cc",
          "libqpdf/QPDFObjectHandle.cc",
          "libqpdf/qpdf-c.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/bad13-recover.out",
          "qpdf/qtest/qpdf/bad13.out",
          "qpdf/qtest/qpdf/bad14-recover.out",
          "qpdf/qtest/qpdf/bad14.out",
          "qpdf/qtest/qpdf/bad15-recover.out",
          "qpdf/qtest/qpdf/bad15.out",
          "qpdf/qtest/qpdf/bad16-recover.out",
          "qpdf/qtest/qpdf/bad16.out",
          "qpdf/qtest/qpdf/bad17-recover.out",
          "qpdf/qtest/qpdf/bad17.out",
          "qpdf/qtest/qpdf/bad36-recover.out",
          "qpdf/qtest/qpdf/bad36.out",
          "qpdf/qtest/qpdf/bad36.pdf",
          "qpdf/qtest/qpdf/c-read-warnings-and-errors.out",
          "qpdf/qtest/qpdf/indirect-r-arg.out",
          "qpdf/qtest/qpdf/issue-100.out",
          "qpdf/qtest/qpdf/issue-101.out",
          "qpdf/qtest/qpdf/issue-119.out"
        ],
        "message": "Convert object parsing errors to warnings\n\nQPDFObjectHandle::parseInternal now issues warnings instead of\nthrowing exceptions for all error conditions that it finds (except\ninternal logic errors) and has stronger recovery for things like\ninvalid tokens and malformed dictionaries. This should improve qpdf's\nability to recover from a wide range of broken files that currently\ncause it to fail.",
        "before_after_code_files": [
          "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
          "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "libqpdf/qpdf-c.cc||libqpdf/qpdf-c.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
          "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     };",
          "523:     friend class Resolver;",
          "526:     class Pipe",
          "527:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     class Warner",
          "527:     {",
          "528:  friend class QPDFObjectHandle;",
          "529:       private:",
          "530:         static void warn(QPDF* qpdf, QPDFExc const& e)",
          "531:         {",
          "532:             qpdf->warn(e);",
          "533:         }",
          "534:     };",
          "535:     friend class Warner;",
          "",
          "---------------"
        ],
        "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh": [
          "File: include/qpdf/QPDFObjectHandle.hh -> include/qpdf/QPDFObjectHandle.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: class QPDF_Dictionary;",
          "29: class QPDF_Array;",
          "30: class QPDFTokenizer;",
          "32: class QPDFObjectHandle",
          "33: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: class QPDFExc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:     static void parseContentStream_internal(",
          "624:         QPDFObjectHandle stream, ParserCallbacks* callbacks);",
          "626:     bool initialized;",
          "628:     QPDF* qpdf;   // 0 for direct object",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:     static void warn(QPDF*, QPDFExc const&);",
          "",
          "---------------"
        ],
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: {",
          "335:     if (this->reconstructed_xref)",
          "336:     {",
          "339:         throw e;",
          "340:     }",
          "",
          "[Removed Lines]",
          "338:         QTC::TC(\"qpdf\", \"QPDF caught recursive xref reconstruction\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:    case QPDFTokenizer::tt_brace_open:",
          "893:    case QPDFTokenizer::tt_brace_close:",
          "895:      QTC::TC(\"qpdf\", \"QPDFObjectHandle bad brace\");",
          "900:      break;",
          "902:    case QPDFTokenizer::tt_array_close:",
          "",
          "[Removed Lines]",
          "896:      throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "897:      object_description,",
          "898:      input->getLastOffset(),",
          "899:      \"unexpected brace token\");",
          "",
          "[Added Lines]",
          "900:             warn(context,",
          "901:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "902:                          object_description,",
          "903:                          input->getLastOffset(),",
          "904:                          \"treating unexpected brace token as null\"));",
          "905:             object = newNull();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "907:      else",
          "908:      {",
          "909:   QTC::TC(\"qpdf\", \"QPDFObjectHandle bad array close\");",
          "914:      }",
          "915:      break;",
          "",
          "[Removed Lines]",
          "910:   throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "911:          object_description,",
          "912:          input->getLastOffset(),",
          "913:          \"unexpected array close token\");",
          "",
          "[Added Lines]",
          "916:                 warn(context,",
          "917:                      QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "918:                              object_description,",
          "919:                              input->getLastOffset(),",
          "920:                              \"treating unexpected array close token as null\"));",
          "921:                 object = newNull();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "922:      else",
          "923:      {",
          "924:   QTC::TC(\"qpdf\", \"QPDFObjectHandle bad dictionary close\");",
          "929:      }",
          "930:      break;",
          "",
          "[Removed Lines]",
          "925:   throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "926:          object_description,",
          "927:          input->getLastOffset(),",
          "928:          \"unexpected dictionary close token\");",
          "",
          "[Added Lines]",
          "933:                 warn(context,",
          "934:                      QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "935:                              object_description,",
          "936:                              input->getLastOffset(),",
          "937:                              \"unexpected dictionary close token\"));",
          "938:                 object = newNull();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1002:   }",
          "1003:   else",
          "1004:   {",
          "1010:   }",
          "1011:      }",
          "1012:      break;",
          "",
          "[Removed Lines]",
          "1005:       throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1006:       object_description,",
          "1007:       input->getLastOffset(),",
          "1008:       \"unknown token while reading object (\" +",
          "1009:       value + \")\");",
          "",
          "[Added Lines]",
          "1015:                     QTC::TC(\"qpdf\", \"QPDFObjectHandle treat word as string\");",
          "1016:                     warn(context,",
          "1017:                          QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1018:                                  object_description,",
          "1019:                                  input->getLastOffset(),",
          "1020:                                  \"unknown token while reading object;\"",
          "1021:                                  \" treating as string\"));",
          "1022:                     object = newString(value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1024:      break;",
          "1026:    default:",
          "1031:      break;",
          "1032:  }",
          "",
          "[Removed Lines]",
          "1027:      throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1028:      object_description,",
          "1029:      input->getLastOffset(),",
          "1030:      \"unknown token type while reading object\");",
          "",
          "[Added Lines]",
          "1040:             warn(context,",
          "1041:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1042:                          object_description,",
          "1043:                          input->getLastOffset(),",
          "1044:                          \"treating unknown token type as null while \"",
          "1045:                          \"reading object\"));",
          "1046:             object = newNull();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1040:  }",
          "1041:  else if (! object.isInitialized())",
          "1042:  {",
          "1047:  }",
          "1048:  else",
          "1049:  {",
          "",
          "[Removed Lines]",
          "1043:      throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1044:      object_description,",
          "1045:      input->getLastOffset(),",
          "1046:      \"parse error while reading object\");",
          "",
          "[Added Lines]",
          "1059:             warn(context,",
          "1060:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1061:                          object_description,",
          "1062:                          input->getLastOffset(),",
          "1063:                          \"parse error while reading object\"));",
          "1064:             object = newNull();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1057:     }",
          "1058:     else if (in_dictionary)",
          "1059:     {",
          "1084:     }",
          "1086:     return object;",
          "",
          "[Removed Lines]",
          "1061:  std::map<std::string, QPDFObjectHandle> dict;",
          "1062:  if (olist.size() % 2)",
          "1063:  {",
          "1064:      QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary odd number of elements\");",
          "1065:      throw QPDFExc(",
          "1066:   qpdf_e_damaged_pdf, input->getName(),",
          "1067:   object_description, input->getLastOffset(),",
          "1068:   \"dictionary ending here has an odd number of elements\");",
          "1069:  }",
          "1070:  for (unsigned int i = 0; i < olist.size(); i += 2)",
          "1071:  {",
          "1072:      QPDFObjectHandle key_obj = olist.at(i);",
          "1073:      QPDFObjectHandle val = olist.at(i + 1);",
          "1074:      if (! key_obj.isName())",
          "1075:      {",
          "1076:   throw QPDFExc(",
          "1077:       qpdf_e_damaged_pdf,",
          "1078:       input->getName(), object_description, offset,",
          "1079:       std::string(\"dictionary key is not not a name token\"));",
          "1080:      }",
          "1081:      dict[key_obj.getName()] = val;",
          "1082:  }",
          "1083:  object = newDictionary(dict);",
          "",
          "[Added Lines]",
          "1081:         std::set<std::string> names;",
          "1082:         for (std::vector<QPDFObjectHandle>::iterator iter = olist.begin();",
          "1083:              iter != olist.end(); ++iter)",
          "1084:         {",
          "1085:             if ((! (*iter).isIndirect()) && (*iter).isName())",
          "1086:             {",
          "1087:                 names.insert((*iter).getName());",
          "1088:             }",
          "1089:         }",
          "1091:         std::map<std::string, QPDFObjectHandle> dict;",
          "1092:         int next_fake_key = 1;",
          "1093:         for (unsigned int i = 0; i < olist.size(); ++i)",
          "1094:         {",
          "1095:             QPDFObjectHandle key_obj = olist.at(i);",
          "1096:             QPDFObjectHandle val;",
          "1097:             if (key_obj.isIndirect() || (! key_obj.isName()))",
          "1098:             {",
          "1099:                 bool found_fake = false;",
          "1100:                 std::string candidate;",
          "1101:                 while (! found_fake)",
          "1102:                 {",
          "1103:                     candidate =",
          "1104:                         \"/QPDFFake\" + QUtil::int_to_string(next_fake_key++);",
          "1105:                     found_fake = (names.count(candidate) == 0);",
          "1106:                     QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",",
          "1107:                             (found_fake ? 0 : 1));",
          "1108:                 }",
          "1109:                 warn(context,",
          "1110:                      QPDFExc(",
          "1111:                          qpdf_e_damaged_pdf,",
          "1112:                          input->getName(), object_description, offset,",
          "1113:                          \"expected dictionary key but found\"",
          "1114:                          \" non-name object; inserting key \" +",
          "1115:                          candidate));",
          "1116:                 val = key_obj;",
          "1117:                 key_obj = newName(candidate);",
          "1118:             }",
          "1119:             else if (i + 1 >= olist.size())",
          "1120:             {",
          "1121:                 QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");",
          "1122:                 warn(context,",
          "1123:                      QPDFExc(",
          "1124:                          qpdf_e_damaged_pdf,",
          "1125:                          input->getName(), object_description, offset,",
          "1126:                          \"dictionary ended prematurely; using null as value\"",
          "1127:                          \" for last key\"));",
          "1128:                 val = newNull();",
          "1129:             }",
          "1130:             else",
          "1131:             {",
          "1132:                 val = olist.at(++i);",
          "1133:             }",
          "1134:             dict[key_obj.getName()] = val;",
          "1135:         }",
          "1136:         object = newDictionary(dict);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1544:         }",
          "1545:     }",
          "1546: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1601: void",
          "1602: QPDFObjectHandle::warn(QPDF* qpdf, QPDFExc const& e)",
          "1603: {",
          "1608:     if (qpdf)",
          "1609:     {",
          "1610:         QPDF::Warner::warn(qpdf, e);",
          "1611:     }",
          "1612:     else",
          "1613:     {",
          "1614:         throw e;",
          "1615:     }",
          "1616: }",
          "",
          "---------------"
        ],
        "libqpdf/qpdf-c.cc||libqpdf/qpdf-c.cc": [
          "File: libqpdf/qpdf-c.cc -> libqpdf/qpdf-c.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     qpdf->filename = filename;",
          "262:     qpdf->password = password;",
          "263:     status = trap_errors(qpdf, &call_read);",
          "265:     return status;",
          "266: }",
          "",
          "[Removed Lines]",
          "264:     QTC::TC(\"qpdf\", \"qpdf-c called qpdf_read\", status);",
          "",
          "[Added Lines]",
          "267:     QTC::TC(\"qpdf\", \"qpdf-c called qpdf_read\",",
          "268:             (status == 0) ? 0",
          "269:             : (status & QPDF_WARNINGS) ? 1",
          "270:             : (status & QPDF_ERRORS) ? 2 :",
          "271:             -1",
          "272:         );",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: QPDF trailer prev not integer 0",
          "62: QPDFObjectHandle bad brace 0",
          "63: QPDFObjectHandle bad array close 0",
          "65: QPDF stream without length 0",
          "66: QPDF stream length not integer 0",
          "67: QPDF missing endstream 0",
          "",
          "[Removed Lines]",
          "64: QPDFObjectHandle dictionary odd number of elements 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: qpdf-c called qpdf_set_suppress_warnings 0",
          "125: qpdf-c called qpdf_set_ignore_xref_streams 0",
          "126: qpdf-c called qpdf_set_attempt_recovery 0",
          "128: qpdf-c called qpdf_get_pdf_version 0",
          "129: qpdf-c called qpdf_get_user_password 0",
          "130: qpdf-c called qpdf_is_linearized 0",
          "",
          "[Removed Lines]",
          "127: qpdf-c called qpdf_read 3",
          "",
          "[Added Lines]",
          "126: qpdf-c called qpdf_read 2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275: qpdf-c called qpdf_set_deterministic_ID 0",
          "276: QPDFObjectHandle indirect with 0 objid 0",
          "277: QPDF object id 0 0",
          "279: QPDF recursion loop in resolve 0",
          "",
          "[Removed Lines]",
          "278: QPDF caught recursive xref reconstruction 0",
          "",
          "[Added Lines]",
          "278: QPDFObjectHandle treat word as string 0",
          "279: QPDFObjectHandle found fake 1",
          "280: QPDFObjectHandle no val for last key 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "232:     )",
          "233: {",
          "235:     $td->runtest($description,",
          "236:                  {$td->COMMAND => \"qpdf issue-$n.pdf a.pdf\"},",
          "237:                  {$td->FILE => \"issue-$n.out\",",
          "239:                  $td->NORMALIZE_NEWLINES);",
          "240: }",
          "",
          "[Removed Lines]",
          "223:     [\"51\", \"resolve loop\"],",
          "224:     [\"99\", \"object 0\"],",
          "225:     [\"99b\", \"object 0\"],",
          "226:     [\"100\",\"xref reconstruction loop\"],",
          "227:     [\"101\", \"resolve for exception text\"],",
          "228:     [\"117\", \"other infinite loop\"],",
          "229:     [\"118\", \"other infinite loop\"],",
          "230:     [\"119\", \"other infinite loop\"],",
          "231:     [\"120\", \"other infinite loop\"],",
          "234:     my ($n, $description) = @$d;",
          "238:                   $td->EXIT_STATUS => 2},",
          "",
          "[Added Lines]",
          "223:     [\"51\", \"resolve loop\", 2],",
          "224:     [\"99\", \"object 0\", 2],",
          "225:     [\"99b\", \"object 0\", 2],",
          "226:     [\"100\", \"xref reconstruction loop\", 2],",
          "227:     [\"101\", \"resolve for exception text\", 2],",
          "228:     [\"117\", \"other infinite loop\", 2],",
          "229:     [\"118\", \"other infinite loop\", 2],",
          "230:     [\"119\", \"other infinite loop\", 3],",
          "231:     [\"120\", \"other infinite loop\", 2],",
          "234:     my ($n, $description, $exit_status) = @$d;",
          "238:                   $td->EXIT_STATUS => $exit_status},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:              $td->NORMALIZE_NEWLINES);",
          "594: $td->runtest(\"ensure arguments to R are direct\",",
          "595:              {$td->COMMAND => \"qpdf --check indirect-r-arg.pdf\"},",
          "597:              $td->NORMALIZE_NEWLINES);",
          "598: $td->runtest(\"detect loops in pages structure\",",
          "599:              {$td->COMMAND => \"qpdf --check pages-loop.pdf\"},",
          "",
          "[Removed Lines]",
          "596:              {$td->FILE => \"indirect-r-arg.out\", $td->EXIT_STATUS => 2},",
          "",
          "[Added Lines]",
          "596:              {$td->FILE => \"indirect-r-arg.out\", $td->EXIT_STATUS => 3},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784:   \"invalid stream /Filter and xref\", # 33",
          "785:   \"obj/gen in wrong place\",  # 34",
          "786:   \"object stream of wrong type\",  # 35",
          "787:   );",
          "791: # Test 6 contains errors in the free table consistency, but we no",
          "792: # longer have any consistency check for this since it is not important",
          "793: # neither Acrobat nor other PDF viewers really care.  Tests 12 and 28",
          "794: # have error conditions that used to be fatal but are now considered",
          "795: # non-fatal.",
          "797: for (my $i = 1; $i <= scalar(@badfiles); ++$i)",
          "798: {",
          "799:     my $status = $badtest_overrides{$i};",
          "",
          "[Removed Lines]",
          "789: $n_tests += @badfiles + 5;",
          "796: my %badtest_overrides = (6 => 0, 12 => 0, 28 => 0, 31 => 0);",
          "",
          "[Added Lines]",
          "787:                 \"bad dictionary key\",                   # 36",
          "790: $n_tests += @badfiles + 4;",
          "797: my %badtest_overrides = (6 => 0, 12 => 0, 13 => 0,",
          "798:                          14 => 0, 15 => 0, 17 => 0,",
          "799:                          28 => 0, 31 => 0, 36 => 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "810:       {$td->FILE => \"c-read-errors.out\",",
          "811:        $td->EXIT_STATUS => 0},",
          "812:       $td->NORMALIZE_NEWLINES);",
          "818: $td->runtest(\"C API: errors writing\",",
          "819:       {$td->COMMAND => \"qpdf-ctest 2 bad30.pdf '' a.pdf\"},",
          "820:       {$td->FILE => \"c-write-errors.out\",",
          "",
          "[Removed Lines]",
          "813: $td->runtest(\"C API: warnings and errors\",",
          "814:       {$td->COMMAND => \"qpdf-ctest 2 bad17.pdf '' a.pdf\"},",
          "815:       {$td->FILE => \"c-read-warnings-and-errors.out\",",
          "816:        $td->EXIT_STATUS => 0},",
          "817:       $td->NORMALIZE_NEWLINES);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "842: # though in some cases it may.  Acrobat Reader would not be able to",
          "843: # recover any of these files any better.",
          "844: my %recover_failures = ();",
          "846: {",
          "847:     $recover_failures{$_} = 1;",
          "848: }",
          "",
          "[Removed Lines]",
          "845: for (1, 7, 13..21, 24, 29..30, 33, 35)",
          "",
          "[Added Lines]",
          "843: for (1, 7, 16, 18..21, 24, 29..30, 33, 35)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12db09898e70fcdc308cf500a95fb166e696b6dc",
      "candidate_info": {
        "commit_hash": "12db09898e70fcdc308cf500a95fb166e696b6dc",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/12db09898e70fcdc308cf500a95fb166e696b6dc",
        "files": [
          "ChangeLog",
          "libqpdf/QPDFObjectHandle.cc"
        ],
        "message": "Don't interpret word tokens in content streams (fixes #82)",
        "before_after_code_files": [
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
          ],
          "candidate": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:    case QPDFTokenizer::tt_word:",
          "965:      {",
          "966:   std::string const& value = token.getValue();",
          "968:       (olist.size() >= 2) &&",
          "969:                     (! olist.at(olist.size() - 1).isIndirect()) &&",
          "970:       (olist.at(olist.size() - 1).isInteger()) &&",
          "",
          "[Removed Lines]",
          "967:   if ((value == \"R\") && (in_array || in_dictionary) &&",
          "",
          "[Added Lines]",
          "967:                 if (content_stream)",
          "968:                 {",
          "969:                     object = QPDFObjectHandle::newOperator(value);",
          "970:                 }",
          "971:   else if ((value == \"R\") && (in_array || in_dictionary) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "996:       input->seek(input->getLastOffset(), SEEK_SET);",
          "997:                     empty = true;",
          "998:   }",
          "1003:   else",
          "1004:   {",
          "1005:       throw QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "",
          "[Removed Lines]",
          "999:   else if (content_stream)",
          "1000:                 {",
          "1001:                     object = QPDFObjectHandle::newOperator(token.getValue());",
          "1002:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "603f222365252f1a1e20303b3dbe52466be3053b",
      "candidate_info": {
        "commit_hash": "603f222365252f1a1e20303b3dbe52466be3053b",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/603f222365252f1a1e20303b3dbe52466be3053b",
        "files": [
          "ChangeLog",
          "libqpdf/QPDFObjectHandle.cc",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-101.out",
          "qpdf/qtest/qpdf/issue-101.pdf"
        ],
        "message": "Fix infinite loop while reporting an error (fixes #101)\n\nThis is CVE-2017-9210.\n\nThe description string for an error message included unparsing an\nobject, which is too complex of a thing to try to do while throwing an\nexception. There was only one example of this in the entire codebase,\nso it is not a pervasive problem. Fixing this eliminated one class of\ninfinite loop errors.",
        "before_after_code_files": [
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:   throw QPDFExc(",
          "1077:       qpdf_e_damaged_pdf,",
          "1078:       input->getName(), object_description, offset,",
          "1081:      }",
          "1082:      dict[key_obj.getName()] = val;",
          "1083:  }",
          "",
          "[Removed Lines]",
          "1079:       std::string(\"dictionary key not name (\") +",
          "1080:       key_obj.unparse() + \")\");",
          "",
          "[Added Lines]",
          "1079:       std::string(\"dictionary key is not not a name token\"));",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 77;",
          "",
          "[Added Lines]",
          "209: $n_tests += 78;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:        $td->EXIT_STATUS => 0},",
          "219:       $td->NORMALIZE_NEWLINES);",
          "221: foreach (my $i = 1; $i <= 3; ++$i)",
          "222: {",
          "223:     $td->runtest(\"misc tests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: # Files to reproduce various bugs",
          "222: foreach my $d (",
          "223:     [\"101\", \"resolve for exception text\"],",
          "224:     )",
          "225: {",
          "226:     my ($n, $description) = @$d;",
          "227:     $td->runtest($description,",
          "228:                  {$td->COMMAND => \"qpdf issue-$n.pdf a.pdf\"},",
          "229:                  {$td->FILE => \"issue-$n.out\",",
          "230:                   $td->EXIT_STATUS => 2},",
          "231:                  $td->NORMALIZE_NEWLINES);",
          "232: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "728dc9e6d8975eebbbc0f5b35628b57d273ffe2d",
      "candidate_info": {
        "commit_hash": "728dc9e6d8975eebbbc0f5b35628b57d273ffe2d",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/728dc9e6d8975eebbbc0f5b35628b57d273ffe2d",
        "files": [
          "include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDFObjectHandle.cc"
        ],
        "message": "Fix error caught by clang",
        "before_after_code_files": [
          "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
          ],
          "candidate": [
            "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh": [
          "File: include/qpdf/QPDFObjectHandle.hh -> include/qpdf/QPDFObjectHandle.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:     QPDFObjectHandle(QPDF*, int objid, int generation);",
          "653:     QPDFObjectHandle(QPDFObject*);",
          "656:     static QPDFObjectHandle newIndirect(QPDF*, int objid, int generation);",
          "657:     static QPDFObjectHandle newStream(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655:     enum parser_state_e",
          "656:     {",
          "657:         st_top,",
          "658:         st_start,",
          "659:         st_stop,",
          "660:         st_eof,",
          "661:         st_dictionary,",
          "662:         st_array",
          "663:     };",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:     std::vector<std::vector<QPDFObjectHandle> > olist_stack;",
          "967:     olist_stack.push_back(std::vector<QPDFObjectHandle>());",
          "970:     state_stack.push_back(st_top);",
          "971:     std::vector<qpdf_offset_t> offset_stack;",
          "972:     offset_stack.push_back(input->tell());",
          "",
          "[Removed Lines]",
          "968:     enum state_e { st_top, st_start, st_stop, st_eof, st_dictionary, st_array };",
          "969:     std::vector<state_e> state_stack;",
          "",
          "[Added Lines]",
          "968:     std::vector<parser_state_e> state_stack;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:     while (! done)",
          "975:     {",
          "976:         std::vector<QPDFObjectHandle>& olist = olist_stack.back();",
          "978:         qpdf_offset_t offset = offset_stack.back();",
          "980:  object = QPDFObjectHandle();",
          "",
          "[Removed Lines]",
          "977:         state_e state = state_stack.back();",
          "",
          "[Added Lines]",
          "976:         parser_state_e state = state_stack.back();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1193:                     \"QPDFObjectHandle::parseInternal: st_stop encountered\"",
          "1194:                     \" with insufficient elements in stack\");",
          "1195:             }",
          "1197:             state_stack.pop_back();",
          "1198:             if (old_state == st_array)",
          "1199:             {",
          "",
          "[Removed Lines]",
          "1196:             state_e old_state = state_stack.back();",
          "",
          "[Added Lines]",
          "1195:             parser_state_e old_state = state_stack.back();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4d6cf6836ce025ba1811b7bbec52680c7204223",
      "candidate_info": {
        "commit_hash": "b4d6cf6836ce025ba1811b7bbec52680c7204223",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/b4d6cf6836ce025ba1811b7bbec52680c7204223",
        "files": [
          "ChangeLog",
          "libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-146.out",
          "qpdf/qtest/qpdf/issue-202.out",
          "qpdf/qtest/qpdf/issue-202.pdf"
        ],
        "message": "Limit depth of nesting in direct objects (fixes #202)\n\nThis fixes CVE-2018-9918.",
        "before_after_code_files": [
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1488:    case QPDFTokenizer::tt_array_open:",
          "1489:    case QPDFTokenizer::tt_dict_open:",
          "1496:      break;",
          "1498:    case QPDFTokenizer::tt_bool:",
          "",
          "[Removed Lines]",
          "1490:             olist_stack.push_back(std::vector<QPDFObjectHandle>());",
          "1491:             state = st_start;",
          "1492:             offset_stack.push_back(input->tell());",
          "1493:             state_stack.push_back(",
          "1494:                 (token.getType() == QPDFTokenizer::tt_array_open) ?",
          "1495:                 st_array : st_dictionary);",
          "",
          "[Added Lines]",
          "1490:             if (olist_stack.size() > 500)",
          "1491:             {",
          "1492:   QTC::TC(\"qpdf\", \"QPDFObjectHandle too deep\");",
          "1493:                 warn(context,",
          "1494:                      QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1495:                              object_description,",
          "1496:                              input->getLastOffset(),",
          "1497:                              \"ignoring excessively deeply nested data structure\"));",
          "1498:                 object = newNull();",
          "1499:                 state = st_top;",
          "1500:             }",
          "1501:             else",
          "1502:             {",
          "1503:                 olist_stack.push_back(std::vector<QPDFObjectHandle>());",
          "1504:                 state = st_start;",
          "1505:                 offset_stack.push_back(input->tell());",
          "1506:                 state_stack.push_back(",
          "1507:                     (token.getType() == QPDFTokenizer::tt_array_open) ?",
          "1508:                     st_array : st_dictionary);",
          "1509:             }",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: QPDFObjectHandle erase array bounds 0",
          "336: qpdf-c called qpdf_check_pdf 0",
          "337: QPDF xref loop 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338: QPDFObjectHandle too deep 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     [\"148\", \"free memory on bad flate\", 2],",
          "237:     [\"149\", \"xref prev pointer loop\", 3],",
          "238:     [\"150\", \"integer overflow\", 2],",
          "239:     );",
          "240: $n_tests += scalar(@bug_tests);",
          "241: foreach my $d (@bug_tests)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:     [\"202\", \"even more deeply nested dictionary\", 2],",
          "",
          "---------------"
        ]
      }
    }
  ]
}