{
  "cve_id": "CVE-2022-28356",
  "cve_desc": "In the Linux kernel before 5.17.1, a refcount leak bug was found in net/llc/af_llc.c.",
  "repo": "torvalds/linux",
  "patch_hash": "764f4eb6846f5475f1244767d24d25dd86528a4a",
  "patch_info": {
    "commit_hash": "764f4eb6846f5475f1244767d24d25dd86528a4a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/764f4eb6846f5475f1244767d24d25dd86528a4a",
    "files": [
      "net/llc/af_llc.c"
    ],
    "message": "llc: fix netdevice reference leaks in llc_ui_bind()\n\nWhenever llc_ui_bind() and/or llc_ui_autobind()\ntook a reference on a netdevice but subsequently fail,\nthey must properly release their reference\nor risk the infamous message from unregister_netdevice()\nat device dismantle.\n\nunregister_netdevice: waiting for eth0 to become free. Usage count = 3\n\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: \u8d75\u5b50\u8f69 <beraphin@gmail.com>\nReported-by: Stoyan Manolov <smanolov@suse.de>\nLink: https://lore.kernel.org/r/20220323004147.1990845-1-eric.dumazet@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "before_after_code_files": [
      "net/llc/af_llc.c||net/llc/af_llc.c"
    ]
  },
  "patch_diff": {
    "net/llc/af_llc.c||net/llc/af_llc.c": [
      "File: net/llc/af_llc.c -> net/llc/af_llc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:  sock_reset_flag(sk, SOCK_ZAPPED);",
      "312:  rc = 0;",
      "313: out:",
      "314:  return rc;",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "314:  if (rc) {",
      "315:   dev_put_track(llc->dev, &llc->dev_tracker);",
      "316:   llc->dev = NULL;",
      "317:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "408: out_put:",
      "409:  llc_sap_put(sap);",
      "410: out:",
      "411:  release_sock(sk);",
      "412:  return rc;",
      "413: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "415:  if (rc) {",
      "416:   dev_put_track(llc->dev, &llc->dev_tracker);",
      "417:   llc->dev = NULL;",
      "418:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d327a79ee176930dc72c131a970c891d367c1dc",
      "candidate_info": {
        "commit_hash": "2d327a79ee176930dc72c131a970c891d367c1dc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2d327a79ee176930dc72c131a970c891d367c1dc",
        "files": [
          "net/llc/af_llc.c"
        ],
        "message": "llc: only change llc->dev when bind() succeeds\n\nMy latest patch, attempting to fix the refcount leak in a minimal\nway turned out to add a new bug.\n\nWhenever the bind operation fails before we attempt to grab\na reference count on a device, we might release the device refcount\nof a prior successful bind() operation.\n\nsyzbot was not happy about this [1].\n\nNote to stable teams:\n\nMake sure commit b37a46683739 (\"netdevice: add the case if dev is NULL\")\nis already present in your trees.\n\n[1]\ngeneral protection fault, probably for non-canonical address 0xdffffc0000000070: 0000 [#1] PREEMPT SMP KASAN\nKASAN: null-ptr-deref in range [0x0000000000000380-0x0000000000000387]\nCPU: 1 PID: 3590 Comm: syz-executor361 Tainted: G        W         5.17.0-syzkaller-04796-g169e77764adc #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nRIP: 0010:llc_ui_connect+0x400/0xcb0 net/llc/af_llc.c:500\nCode: 80 3c 02 00 0f 85 fc 07 00 00 4c 8b a5 38 05 00 00 48 b8 00 00 00 00 00 fc ff df 49 8d bc 24 80 03 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 a9 07 00 00 49 8b b4 24 80 03 00 00 4c 89 f2 48\nRSP: 0018:ffffc900038cfcc0 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8880756eb600 RCX: 0000000000000000\nRDX: 0000000000000070 RSI: ffffc900038cfe3e RDI: 0000000000000380\nRBP: ffff888015ee5000 R08: 0000000000000001 R09: ffff888015ee5535\nR10: ffffed1002bdcaa6 R11: 0000000000000000 R12: 0000000000000000\nR13: ffffc900038cfe37 R14: ffffc900038cfe38 R15: ffff888015ee5012\nFS:  0000555555acd300(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000280 CR3: 0000000077db6000 CR4: 00000000003506e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n __sys_connect_file+0x155/0x1a0 net/socket.c:1900\n __sys_connect+0x161/0x190 net/socket.c:1917\n __do_sys_connect net/socket.c:1927 [inline]\n __se_sys_connect net/socket.c:1924 [inline]\n __x64_sys_connect+0x6f/0xb0 net/socket.c:1924\n do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x44/0xae\nRIP: 0033:0x7f016acb90b9\nCode: 28 c3 e8 2a 14 00 00 66 2e 0f 1f 84 00 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007ffd417947f8 EFLAGS: 00000246 ORIG_RAX: 000000000000002a\nRAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f016acb90b9\nRDX: 0000000000000010 RSI: 0000000020000140 RDI: 0000000000000003\nRBP: 00007f016ac7d0a0 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f016ac7d130\nR13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n </TASK>\nModules linked in:\n---[ end trace 0000000000000000 ]---\nRIP: 0010:llc_ui_connect+0x400/0xcb0 net/llc/af_llc.c:500\n\nFixes: 764f4eb6846f (\"llc: fix netdevice reference leaks in llc_ui_bind()\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: syzbot <syzkaller@googlegroups.com>\nCc: \u8d75\u5b50\u8f69 <beraphin@gmail.com>\nCc: Stoyan Manolov <smanolov@suse.de>\nLink: https://lore.kernel.org/r/20220325035827.360418-1-eric.dumazet@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "net/llc/af_llc.c||net/llc/af_llc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/llc/af_llc.c||net/llc/af_llc.c"
          ],
          "candidate": [
            "net/llc/af_llc.c||net/llc/af_llc.c"
          ]
        }
      },
      "candidate_diff": {
        "net/llc/af_llc.c||net/llc/af_llc.c": [
          "File: net/llc/af_llc.c -> net/llc/af_llc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275: {",
          "276:  struct sock *sk = sock->sk;",
          "277:  struct llc_sock *llc = llc_sk(sk);",
          "278:  struct llc_sap *sap;",
          "279:  int rc = -EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:  struct net_device *dev = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:   goto out;",
          "287:  rc = -ENODEV;",
          "288:  if (sk->sk_bound_dev_if) {",
          "293:   }",
          "294:  } else",
          "297:   goto out;",
          "299:  rc = -EUSERS;",
          "300:  llc->laddr.lsap = llc_ui_autoport();",
          "301:  if (!llc->laddr.lsap)",
          "",
          "[Removed Lines]",
          "289:   llc->dev = dev_get_by_index(&init_net, sk->sk_bound_dev_if);",
          "290:   if (llc->dev && addr->sllc_arphrd != llc->dev->type) {",
          "291:    dev_put(llc->dev);",
          "292:    llc->dev = NULL;",
          "295:   llc->dev = dev_getfirstbyhwtype(&init_net, addr->sllc_arphrd);",
          "296:  if (!llc->dev)",
          "298:  netdev_tracker_alloc(llc->dev, &llc->dev_tracker, GFP_KERNEL);",
          "",
          "[Added Lines]",
          "290:   dev = dev_get_by_index(&init_net, sk->sk_bound_dev_if);",
          "291:   if (dev && addr->sllc_arphrd != dev->type) {",
          "292:    dev_put(dev);",
          "293:    dev = NULL;",
          "296:   dev = dev_getfirstbyhwtype(&init_net, addr->sllc_arphrd);",
          "297:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:  sap = llc_sap_open(llc->laddr.lsap, NULL);",
          "305:  if (!sap)",
          "306:   goto out;",
          "307:  memcpy(llc->laddr.mac, llc->dev->dev_addr, IFHWADDRLEN);",
          "308:  memcpy(&llc->addr, addr, sizeof(llc->addr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:  llc->dev = dev;",
          "310:  netdev_tracker_alloc(llc->dev, &llc->dev_tracker, GFP_KERNEL);",
          "311:  dev = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:  sock_reset_flag(sk, SOCK_ZAPPED);",
          "312:  rc = 0;",
          "313: out:",
          "318:  return rc;",
          "319: }",
          "",
          "[Removed Lines]",
          "314:  if (rc) {",
          "315:   dev_put_track(llc->dev, &llc->dev_tracker);",
          "316:   llc->dev = NULL;",
          "317:  }",
          "",
          "[Added Lines]",
          "320:  dev_put(dev);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337:  struct sockaddr_llc *addr = (struct sockaddr_llc *)uaddr;",
          "338:  struct sock *sk = sock->sk;",
          "339:  struct llc_sock *llc = llc_sk(sk);",
          "340:  struct llc_sap *sap;",
          "341:  int rc = -EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:  struct net_device *dev = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:  rc = -ENODEV;",
          "353:  rcu_read_lock();",
          "354:  if (sk->sk_bound_dev_if) {",
          "357:    if (is_zero_ether_addr(addr->sllc_mac))",
          "359:            IFHWADDRLEN);",
          "361:        !ether_addr_equal(addr->sllc_mac,",
          "363:     rc = -EINVAL;",
          "365:    }",
          "366:   }",
          "369:         addr->sllc_mac);",
          "371:  rcu_read_unlock();",
          "373:   goto out;",
          "374:  if (!addr->sllc_sap) {",
          "375:   rc = -EUSERS;",
          "376:   addr->sllc_sap = llc_ui_autoport();",
          "",
          "[Removed Lines]",
          "355:   llc->dev = dev_get_by_index_rcu(&init_net, sk->sk_bound_dev_if);",
          "356:   if (llc->dev) {",
          "358:     memcpy(addr->sllc_mac, llc->dev->dev_addr,",
          "360:    if (addr->sllc_arphrd != llc->dev->type ||",
          "362:            llc->dev->dev_addr)) {",
          "364:     llc->dev = NULL;",
          "367:  } else",
          "368:   llc->dev = dev_getbyhwaddr_rcu(&init_net, addr->sllc_arphrd,",
          "370:  dev_hold_track(llc->dev, &llc->dev_tracker, GFP_ATOMIC);",
          "372:  if (!llc->dev)",
          "",
          "[Added Lines]",
          "359:   dev = dev_get_by_index_rcu(&init_net, sk->sk_bound_dev_if);",
          "360:   if (dev) {",
          "362:     memcpy(addr->sllc_mac, dev->dev_addr,",
          "364:    if (addr->sllc_arphrd != dev->type ||",
          "366:            dev->dev_addr)) {",
          "368:     dev = NULL;",
          "371:  } else {",
          "372:   dev = dev_getbyhwaddr_rcu(&init_net, addr->sllc_arphrd,",
          "374:  }",
          "375:  dev_hold(dev);",
          "377:  if (!dev)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "402:    goto out_put;",
          "403:   }",
          "404:  }",
          "405:  llc->laddr.lsap = addr->sllc_sap;",
          "406:  memcpy(llc->laddr.mac, addr->sllc_mac, IFHWADDRLEN);",
          "407:  memcpy(&llc->addr, addr, sizeof(llc->addr));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:  llc->dev = dev;",
          "414:  netdev_tracker_alloc(llc->dev, &llc->dev_tracker, GFP_KERNEL);",
          "415:  dev = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "412: out_put:",
          "413:  llc_sap_put(sap);",
          "414: out:",
          "419:  release_sock(sk);",
          "420:  return rc;",
          "421: }",
          "",
          "[Removed Lines]",
          "415:  if (rc) {",
          "416:   dev_put_track(llc->dev, &llc->dev_tracker);",
          "417:   llc->dev = NULL;",
          "418:  }",
          "",
          "[Added Lines]",
          "427:  dev_put(dev);",
          "",
          "---------------"
        ]
      }
    }
  ]
}