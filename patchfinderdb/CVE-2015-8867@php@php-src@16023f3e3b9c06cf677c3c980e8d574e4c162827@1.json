{
  "cve_id": "CVE-2015-8867",
  "cve_desc": "The openssl_random_pseudo_bytes function in ext/openssl/openssl.c in PHP before 5.4.44, 5.5.x before 5.5.28, and 5.6.x before 5.6.12 incorrectly relies on the deprecated RAND_pseudo_bytes function, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via unspecified vectors.",
  "repo": "php/php-src",
  "patch_hash": "16023f3e3b9c06cf677c3c980e8d574e4c162827",
  "patch_info": {
    "commit_hash": "16023f3e3b9c06cf677c3c980e8d574e4c162827",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/16023f3e3b9c06cf677c3c980e8d574e4c162827",
    "files": [
      "ext/openssl/openssl.c"
    ],
    "message": "Fix bug #70014 - use RAND_bytes instead of deprecated RAND_pseudo_bytes",
    "before_after_code_files": [
      "ext/openssl/openssl.c||ext/openssl/openssl.c"
    ]
  },
  "patch_diff": {
    "ext/openssl/openssl.c||ext/openssl/openssl.c": [
      "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5070:  long buffer_length;",
      "5071:  unsigned char *buffer = NULL;",
      "5072:  zval *zstrong_result_returned = NULL;",
      "5075:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|z\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
      "5076:   return;",
      "",
      "[Removed Lines]",
      "5073:  int strong_result = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5088:  buffer = emalloc(buffer_length + 1);",
      "5090: #ifdef PHP_WIN32",
      "5093:  if (php_win32_get_random_bytes(buffer, (size_t) buffer_length) == FAILURE) {",
      "5094:   efree(buffer);",
      "",
      "[Removed Lines]",
      "5091:  strong_result = 1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5098:   RETURN_FALSE;",
      "5099:  }",
      "5100: #else",
      "5102:   efree(buffer);",
      "5103:   if (zstrong_result_returned) {",
      "5104:    ZVAL_BOOL(zstrong_result_returned, 0);",
      "",
      "[Removed Lines]",
      "5101:  if ((strong_result = RAND_pseudo_bytes(buffer, buffer_length)) < 0) {",
      "",
      "[Added Lines]",
      "5099:  if (RAND_bytes(buffer, buffer_length) <= 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5111:  RETVAL_STRINGL((char *)buffer, buffer_length, 0);",
      "5113:  if (zstrong_result_returned) {",
      "5115:  }",
      "5116: }",
      "",
      "[Removed Lines]",
      "5114:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
      "",
      "[Added Lines]",
      "5112:   ZVAL_BOOL(zstrong_result_returned, 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e254ac00ea88a5e6f585fb089c240e88d99b506",
      "candidate_info": {
        "commit_hash": "7e254ac00ea88a5e6f585fb089c240e88d99b506",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7e254ac00ea88a5e6f585fb089c240e88d99b506",
        "files": [
          ".gitignore",
          "Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c",
          "ext/date/php_date.c",
          "ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c",
          "ext/phar/phar_internal.h",
          "ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt",
          "ext/phar/tests/bug70019.zip",
          "ext/soap/php_http.c",
          "ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt"
        ],
        "message": "Merge branch 'PHP-5.5' into PHP-5.6\n\n* PHP-5.5:\n  update NEWS\n  fix test\n  update NEWS\n  Fix bug #70019 - limit extracted files to given directory\n  Do not do convert_to_* on unserialize, it messes up references\n  Fix #69793 - limit what we accept when unserializing exception\n  Fixed bug #70169 (Use After Free Vulnerability in unserialize() with SplDoublyLinkedList)\n  Fixed bug #70166 - Use After Free Vulnerability in unserialize() with SPLArrayObject\n  ignore signatures for packages too\n  Fix bug #70168 - Use After Free Vulnerability in unserialize() with SplObjectStorage\n  Fixed bug #69892\n  Fix bug #70014 - use RAND_bytes instead of deprecated RAND_pseudo_bytes\n  Improved fix for Bug #69441\n  Fix bug #70068 (Dangling pointer in the unserialization of ArrayObject items)\n  Fix bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)\n  Fix bug #70081: check types for SOAP variables\n\nConflicts:\n\text/soap/php_http.c\n\text/spl/spl_observer.c",
        "before_after_code_files": [
          "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/date/php_date.c||ext/date/php_date.c",
          "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/phar/phar_internal.h||ext/phar/phar_internal.h",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt",
          "ext/soap/php_http.c||ext/soap/php_http.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c||ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt": [
          "File: Zend/tests/bug70121.phpt -> Zend/tests/bug70121.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)",
          "3: --FILE--",
          "4: <?php",
          "5: unserialize('O:12:\"DateInterval\":1:{s:4:\"days\";O:9:\"Exception\":7:{s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";s:1:\"x\";s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"A\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";O:8:\"stdClass\":0:{}}}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  if (exception == add_previous || !add_previous || !exception) {",
          "42:   return;",
          "43:  }",
          "45:   zend_error(E_ERROR, \"Cannot set non exception as previous exception\");",
          "46:   return;",
          "47:  }",
          "",
          "[Removed Lines]",
          "44:  if (Z_TYPE_P(add_previous) != IS_OBJECT && !instanceof_function(Z_OBJCE_P(add_previous), default_exception_ce TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "44:  if (Z_TYPE_P(add_previous) != IS_OBJECT || !instanceof_function(Z_OBJCE_P(add_previous), default_exception_ce TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218: }",
          "223: ZEND_METHOD(error_exception, __construct)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: #define CHECK_EXC_TYPE(name, type) \\",
          "224:  value = zend_read_property(default_exception_ce, object, name, sizeof(name)-1, 0 TSRMLS_CC); \\",
          "225:  if(value && Z_TYPE_P(value) != type) { \\",
          "226:   zval *tmp; \\",
          "227:   MAKE_STD_ZVAL(tmp); \\",
          "228:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
          "229:   Z_OBJ_HANDLER_P(object, unset_property)(object, tmp, 0 TSRMLS_CC); \\",
          "230:   zval_ptr_dtor(&tmp); \\",
          "231:  }",
          "233: ZEND_METHOD(exception, __wakeup)",
          "234: {",
          "235:  zval *value;",
          "236:  zval *object = getThis();",
          "237:  HashTable *intern_ht = zend_std_get_properties(getThis() TSRMLS_CC);",
          "238:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
          "239:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
          "240:  CHECK_EXC_TYPE(\"code\", IS_LONG);",
          "241:  CHECK_EXC_TYPE(\"file\", IS_STRING);",
          "242:  CHECK_EXC_TYPE(\"line\", IS_LONG);",
          "243:  CHECK_EXC_TYPE(\"trace\", IS_ARRAY);",
          "244:  CHECK_EXC_TYPE(\"previous\", IS_OBJECT);",
          "245: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:  TRACE_APPEND_STRL(s_tmp, strlen(s_tmp));",
          "603:  efree(s_tmp);",
          "607: }",
          "",
          "[Removed Lines]",
          "605:  res[res_len] = '\\0';",
          "606:  RETURN_STRINGL(res, res_len, 0);",
          "",
          "[Added Lines]",
          "632:  res[res_len] = '\\0';",
          "633:  RETURN_STRINGL(res, res_len, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "640:  int len = 0;",
          "641:  zend_fcall_info fci;",
          "642:  zval fname;",
          "644:  DEFAULT_0_PARAMS;",
          "646:  str = estrndup(\"\", 0);",
          "648:  exception = getThis();",
          "649:  ZVAL_STRINGL(&fname, \"gettraceasstring\", sizeof(\"gettraceasstring\")-1, 1);",
          "652:   prev_str = str;",
          "653:   _default_exception_get_entry(exception, \"message\", sizeof(\"message\")-1, &message TSRMLS_CC);",
          "654:   _default_exception_get_entry(exception, \"file\", sizeof(\"file\")-1, &file TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "651:  while (exception && Z_TYPE_P(exception) == IS_OBJECT) {",
          "",
          "[Added Lines]",
          "678:  while (exception && Z_TYPE_P(exception) == IS_OBJECT && instanceof_function(Z_OBJCE_P(exception), default_exception_ce TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "658:   convert_to_string(&file);",
          "659:   convert_to_long(&line);",
          "661:   fci.size = sizeof(fci);",
          "662:   fci.function_table = &Z_OBJCE_P(exception)->function_table;",
          "663:   fci.function_name = &fname;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:   trace = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "671:   zend_call_function(&fci, NULL TSRMLS_CC);",
          "674:    zval_ptr_dtor(&trace);",
          "675:    trace = NULL;",
          "676:   }",
          "",
          "[Removed Lines]",
          "673:   if (Z_TYPE_P(trace) != IS_STRING) {",
          "",
          "[Added Lines]",
          "701:   if (trace && Z_TYPE_P(trace) != IS_STRING) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "727: const static zend_function_entry default_exception_functions[] = {",
          "728:  ZEND_ME(exception, __clone, NULL, ZEND_ACC_PRIVATE|ZEND_ACC_FINAL)",
          "729:  ZEND_ME(exception, __construct, arginfo_exception___construct, ZEND_ACC_PUBLIC)",
          "730:  ZEND_ME(exception, getMessage, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "731:  ZEND_ME(exception, getCode, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "732:  ZEND_ME(exception, getFile, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:  ZEND_ME(exception, __wakeup, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "---------------"
        ],
        "ext/date/php_date.c||ext/date/php_date.c": [
          "File: ext/date/php_date.c -> ext/date/php_date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049:  timelib_sll day_of_week = timelib_day_of_week(y, m, d);",
          "1050:  if (day_of_week < 0) {",
          "1051:   return \"Unknown\";",
          "1054: }",
          "1056: char *php_date_short_day_name(timelib_sll y, timelib_sll m, timelib_sll d)",
          "",
          "[Removed Lines]",
          "1052:  }",
          "1053:  return day_full_names[day_of_week];",
          "",
          "[Added Lines]",
          "1052:  }",
          "1053:  return day_full_names[day_of_week];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1058:  timelib_sll day_of_week = timelib_day_of_week(y, m, d);",
          "1059:  if (day_of_week < 0) {",
          "1060:   return \"Unknown\";",
          "1063: }",
          "",
          "[Removed Lines]",
          "1061:  }",
          "1062:  return day_short_names[day_of_week];",
          "",
          "[Added Lines]",
          "1061:  }",
          "1062:  return day_short_names[day_of_week];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1091:    offset->leap_secs = 0;",
          "1092:    offset->is_dst = 0;",
          "1095:                              localtime ? ((offset->offset < 0) ? '-' : '+') : '+',",
          "1096:                              localtime ? abs(offset->offset / 3600) : 0,",
          "1097:                              localtime ? abs((offset->offset % 3600) / 60) : 0 );",
          "",
          "[Removed Lines]",
          "1094:    snprintf(offset->abbr, 9, \"GMT%c%02d%02d\",",
          "",
          "[Added Lines]",
          "1094:    snprintf(offset->abbr, 9, \"GMT%c%02d%02d\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1137:    case 'a': length = slprintf(buffer, 32, \"%s\", t->h >= 12 ? \"pm\" : \"am\"); break;",
          "1138:    case 'A': length = slprintf(buffer, 32, \"%s\", t->h >= 12 ? \"PM\" : \"AM\"); break;",
          "1139:    case 'B': {",
          "1141:     while (retval < 0) {",
          "1142:      retval += 1000;",
          "1143:     }",
          "",
          "[Removed Lines]",
          "1140:     int retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);",
          "",
          "[Added Lines]",
          "1140:     int retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1302:    offset->leap_secs = 0;",
          "1303:    offset->is_dst = t->dst;",
          "1306:                              !localtime ? ((offset->offset < 0) ? '-' : '+') : '+',",
          "1307:                              !localtime ? abs(offset->offset / 3600) : 0,",
          "1308:                              !localtime ? abs((offset->offset % 3600) / 60) : 0 );",
          "",
          "[Removed Lines]",
          "1305:    snprintf(offset->abbr, 9, \"GMT%c%02d%02d\",",
          "",
          "[Added Lines]",
          "1305:    snprintf(offset->abbr, 9, \"GMT%c%02d%02d\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1336:   case 'B':",
          "1338:    while (retval < 0) {",
          "1339:     retval += 1000;",
          "1340:    }",
          "",
          "[Removed Lines]",
          "1337:    retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);",
          "",
          "[Added Lines]",
          "1337:    retval = (((((long)t->sse)-(((long)t->sse) - ((((long)t->sse) % 86400) + 3600))) * 10) / 864);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1386:  char   *format;",
          "1387:  int     format_len;",
          "1388:  long    ts = 0;",
          "1391:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &format, &format_len, &ts) == FAILURE) {",
          "1392:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1389:  int ret;",
          "",
          "[Added Lines]",
          "1389:  int ret;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1485:  }",
          "1487:  if (!time_len) {",
          "1489:   RETURN_FALSE;",
          "1490:  }",
          "",
          "[Removed Lines]",
          "1488:   timelib_time_dtor(now);",
          "",
          "[Added Lines]",
          "1488:   timelib_time_dtor(now);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4189: #define PHP_DATE_INTERVAL_READ_PROPERTY(element, member, itype, def) \\",
          "4190:  do { \\",
          "4191:   zval **z_arg = NULL; \\",
          "4194:    (*intobj)->diff->member = (itype)Z_LVAL_PP(z_arg); \\",
          "4195:   } else { \\",
          "4196:    (*intobj)->diff->member = (itype)def; \\",
          "",
          "[Removed Lines]",
          "4192:   if (zend_hash_find(myht, element, strlen(element) + 1, (void**) &z_arg) == SUCCESS) { \\",
          "4193:    convert_to_long(*z_arg); \\",
          "",
          "[Added Lines]",
          "4192:   if (zend_hash_find(myht, element, strlen(element) + 1, (void**) &z_arg) == SUCCESS && Z_TYPE_PP(z_arg) == IS_LONG) { \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4201:  do { \\",
          "4202:   zval **z_arg = NULL; \\",
          "4203:   if (zend_hash_find(myht, element, strlen(element) + 1, (void**) &z_arg) == SUCCESS) { \\",
          "4206:   } else { \\",
          "4207:    (*intobj)->diff->member = -1LL; \\",
          "4208:   } \\",
          "",
          "[Removed Lines]",
          "4204:    convert_to_string(*z_arg); \\",
          "4205:    DATE_A64I((*intobj)->diff->member, Z_STRVAL_PP(z_arg)); \\",
          "",
          "[Added Lines]",
          "4203:    if (Z_TYPE_PP(z_arg) == IS_STRING) { \\",
          "4204:     DATE_A64I((*intobj)->diff->member, Z_STRVAL_PP(z_arg)); \\",
          "4205:    } else if (Z_TYPE_PP(z_arg) == IS_LONG || Z_TYPE_PP(z_arg) == IS_BOOL) { \\",
          "4206:     (*intobj)->diff->member = (timelib_sll)Z_LVAL_PP(z_arg); \\",
          "4207:    } else if (Z_TYPE_PP(z_arg) == IS_DOUBLE) { \\",
          "4208:     (*intobj)->diff->member = (timelib_sll)Z_DVAL_PP(z_arg); \\",
          "4209:    } else { \\",
          "4210:     (*intobj)->diff->member = -1LL; \\",
          "4211:    } \\",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt": [
          "File: ext/date/tests/bug53437_var3.phpt -> ext/date/tests/bug53437_var3.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt": [
          "File: ext/date/tests/bug53437_var5.phpt -> ext/date/tests/bug53437_var5.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5390:  long buffer_length;",
          "5391:  unsigned char *buffer = NULL;",
          "5392:  zval *zstrong_result_returned = NULL;",
          "5395:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|z\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
          "5396:   return;",
          "",
          "[Removed Lines]",
          "5393:  int strong_result = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5408:  buffer = emalloc(buffer_length + 1);",
          "5410: #ifdef PHP_WIN32",
          "5413:  if (php_win32_get_random_bytes(buffer, (size_t) buffer_length) == FAILURE){",
          "5414:   efree(buffer);",
          "",
          "[Removed Lines]",
          "5411:  strong_result = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5418:   RETURN_FALSE;",
          "5419:  }",
          "5420: #else",
          "5422:   efree(buffer);",
          "5423:   if (zstrong_result_returned) {",
          "5424:    ZVAL_BOOL(zstrong_result_returned, 0);",
          "",
          "[Removed Lines]",
          "5421:  if ((strong_result = RAND_pseudo_bytes(buffer, buffer_length)) < 0) {",
          "",
          "[Added Lines]",
          "5419:  if (RAND_bytes(buffer, buffer_length) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5431:  RETVAL_STRINGL((char *)buffer, buffer_length, 0);",
          "5433:  if (zstrong_result_returned) {",
          "5435:  }",
          "5436: }",
          "",
          "[Removed Lines]",
          "5434:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
          "",
          "[Added Lines]",
          "5432:   ZVAL_BOOL(zstrong_result_returned, 1);",
          "",
          "---------------"
        ],
        "ext/phar/phar_internal.h||ext/phar/phar_internal.h": [
          "File: ext/phar/phar_internal.h -> ext/phar/phar_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "536: {",
          "537:  char tmp[MAXPATHLEN];",
          "538:  int tmp_len;",
          "541:  tmp_len = MIN(MAXPATHLEN, entry->filename_len + entry->phar->fname_len);",
          "546:  entry->inode = (unsigned short)zend_get_hash_value(tmp, tmp_len);",
          "547: }",
          "",
          "[Removed Lines]",
          "539:  size_t len;",
          "542:  len = MIN(entry->phar->fname_len, tmp_len);",
          "543:  memcpy(tmp, entry->phar->fname, len);",
          "544:  len = MIN(tmp_len - len, entry->filename_len);",
          "545:  memcpy(tmp + entry->phar->fname_len, entry->filename, len);",
          "",
          "[Added Lines]",
          "539:  size_t len1, len2;",
          "543:  len1 = MIN(entry->phar->fname_len, tmp_len);",
          "544:  memcpy(tmp, entry->phar->fname, len1);",
          "546:  len2 = MIN(tmp_len - len1, entry->filename_len);",
          "547:  memcpy(tmp + len1, entry->filename, len2);",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4119:  char *fullpath;",
          "4120:  const char *slash;",
          "4121:  mode_t mode;",
          "4123:  if (entry->is_mounted) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4122:  cwd_state new_state;",
          "4123:  char *filename;",
          "4124:  size_t filename_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4128:  if (entry->filename_len >= sizeof(\".phar\")-1 && !memcmp(entry->filename, \".phar\", sizeof(\".phar\")-1)) {",
          "4129:   return SUCCESS;",
          "4130:  }",
          "4134:  if (len >= MAXPATHLEN) {",
          "4135:   char *tmp;",
          "",
          "[Removed Lines]",
          "4132:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, entry->filename);",
          "",
          "[Added Lines]",
          "4135:  new_state.cwd = (char*)malloc(2);",
          "4136:  new_state.cwd[0] = DEFAULT_SLASH;",
          "4137:  new_state.cwd[1] = '\\0';",
          "4138:  new_state.cwd_length = 1;",
          "4139:  if (virtual_file_ex(&new_state, entry->filename, NULL, CWD_EXPAND TSRMLS_CC) != 0 ||",
          "4140:    new_state.cwd_length <= 1) {",
          "4141:   if (EINVAL == errno && entry->filename_len > 50) {",
          "4142:    char *tmp = estrndup(entry->filename, 50);",
          "4143:    spprintf(error, 4096, \"Cannot extract \\\"%s...\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", tmp, dest);",
          "4144:    efree(tmp);",
          "4145:   } else {",
          "4146:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4147:   }",
          "4148:   free(new_state.cwd);",
          "4149:   return FAILURE;",
          "4150:  }",
          "4151:  filename = new_state.cwd + 1;",
          "4152:  filename_len = new_state.cwd_length - 1;",
          "4153: #ifdef PHP_WIN32",
          "4155:  {",
          "4156:   int cnt = filename_len;",
          "4158:   do {",
          "4159:    if ('\\\\' == filename[cnt]) {",
          "4160:     filename[cnt] = '/';",
          "4161:    }",
          "4162:   } while (cnt-- >= 0);",
          "4163:  }",
          "4164: #endif",
          "4166:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4143:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", entry->filename, fullpath);",
          "4144:   }",
          "4145:   efree(fullpath);",
          "4146:   return FAILURE;",
          "4147:  }",
          "4149:  if (!len) {",
          "4150:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4151:   efree(fullpath);",
          "4152:   return FAILURE;",
          "4153:  }",
          "4155:  if (PHAR_OPENBASEDIR_CHECKPATH(fullpath)) {",
          "4156:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", openbasedir/safe mode restrictions in effect\", entry->filename, fullpath);",
          "4157:   efree(fullpath);",
          "4158:   return FAILURE;",
          "4159:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4180:   free(new_state.cwd);",
          "4187:   free(new_state.cwd);",
          "4194:   free(new_state.cwd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4162:  if (!overwrite && SUCCESS == php_stream_stat_path(fullpath, &ssb)) {",
          "4163:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", path already exists\", entry->filename, fullpath);",
          "4164:   efree(fullpath);",
          "4165:   return FAILURE;",
          "4166:  }",
          "4171:  if (slash) {",
          "4173:  } else {",
          "4174:   fullpath[dest_len] = '\\0';",
          "4175:  }",
          "",
          "[Removed Lines]",
          "4169:  slash = zend_memrchr(entry->filename, '/', entry->filename_len);",
          "4172:   fullpath[dest_len + (slash - entry->filename) + 1] = '\\0';",
          "",
          "[Added Lines]",
          "4202:   free(new_state.cwd);",
          "4207:  slash = zend_memrchr(filename, '/', filename_len);",
          "4210:   fullpath[dest_len + (slash - filename) + 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4179:    if (!php_stream_mkdir(fullpath, entry->flags & PHAR_ENT_PERM_MASK,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4180:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4181:     efree(fullpath);",
          "4182:     return FAILURE;",
          "4183:    }",
          "4184:   } else {",
          "4185:    if (!php_stream_mkdir(fullpath, 0777,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4186:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4187:     efree(fullpath);",
          "4188:     return FAILURE;",
          "4189:    }",
          "4190:   }",
          "4191:  }",
          "4193:  if (slash) {",
          "4195:  } else {",
          "4196:   fullpath[dest_len] = '/';",
          "4197:  }",
          "4200:  if (entry->is_dir) {",
          "4201:   efree(fullpath);",
          "",
          "[Removed Lines]",
          "4194:   fullpath[dest_len + (slash - entry->filename) + 1] = '/';",
          "",
          "[Added Lines]",
          "4220:     free(new_state.cwd);",
          "4227:     free(new_state.cwd);",
          "4234:   fullpath[dest_len + (slash - filename) + 1] = '/';",
          "4239:  filename = NULL;",
          "4240:  free(new_state.cwd);",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt": [
          "File: ext/phar/tests/bug70019.phpt -> ext/phar/tests/bug70019.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70019 Files extracted from archive may be placed outside of destination directory",
          "3: --FILE--",
          "4: <?php",
          "5: $dir = __DIR__.\"/bug70019\";",
          "6: $phar = new PharData(__DIR__.\"/bug70019.zip\");",
          "7: if(!is_dir($dir)) {",
          "8:   mkdir($dir);",
          "9: }",
          "10: $phar->extractTo($dir);",
          "11: var_dump(file_exists(\"$dir/ThisIsATestFile.txt\"));",
          "12: ?>",
          "13: ===DONE===",
          "14: --CLEAN--",
          "15: <?php",
          "16: $dir = __DIR__.\"/bug70019\";",
          "17: unlink(\"$dir/ThisIsATestFile.txt\");",
          "18: rmdir($dir);",
          "19: ?>",
          "20: --EXPECTF--",
          "21: bool(true)",
          "22: ===DONE===",
          "",
          "---------------"
        ],
        "ext/soap/php_http.c||ext/soap/php_http.c": [
          "File: ext/soap/php_http.c -> ext/soap/php_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:   context = php_stream_context_from_zval(*tmp, 0);",
          "435:  }",
          "438:   php_stream_context_get_option(context, \"http\", \"max_redirects\", &tmp) == SUCCESS) {",
          "439:   if (Z_TYPE_PP(tmp) != IS_STRING || !is_numeric_string(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), &redirect_max, NULL, 1)) {",
          "440:    if (Z_TYPE_PP(tmp) == IS_LONG)",
          "",
          "[Removed Lines]",
          "437:  if (context &&",
          "",
          "[Added Lines]",
          "437:  if (context &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:   add_property_resource(this_ptr, \"httpurl\", ret);",
          "536:       php_stream_context_get_option(context, \"http\", \"protocol_version\", &tmp) == SUCCESS &&",
          "537:       Z_TYPE_PP(tmp) == IS_DOUBLE &&",
          "538:       Z_DVAL_PP(tmp) == 1.0) {",
          "",
          "[Removed Lines]",
          "535:   if (context &&",
          "",
          "[Added Lines]",
          "535:   if (context &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:     smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "591:     smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "592:    }",
          "594:              php_stream_context_get_option(context, \"http\", \"user_agent\", &tmp) == SUCCESS &&",
          "595:              Z_TYPE_PP(tmp) == IS_STRING) {",
          "596:    if (Z_STRLEN_PP(tmp) > 0) {",
          "",
          "[Removed Lines]",
          "593:   } else if (context &&",
          "",
          "[Added Lines]",
          "593:   } else if (context &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "750:       smart_str_appends(&soap_headers, phpurl->path);",
          "751:      } else {",
          "752:       smart_str_appendc(&soap_headers, '/');",
          "754:      if (phpurl->query) {",
          "755:       smart_str_appendc(&soap_headers, '?');",
          "756:       smart_str_appends(&soap_headers, phpurl->query);",
          "",
          "[Removed Lines]",
          "753:      }",
          "",
          "[Added Lines]",
          "753:      }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "822:     zend_hash_internal_pointer_reset(Z_ARRVAL_PP(cookies));",
          "823:     smart_str_append_const(&soap_headers, \"Cookie: \");",
          "824:     for (i = 0; i < n; i++) {",
          "825:      zend_hash_get_current_data(Z_ARRVAL_PP(cookies), (void **)&data);",
          "829:        zval** value;",
          "831:       if (zend_hash_index_find(Z_ARRVAL_PP(data), 0, (void**)&value) == SUCCESS &&",
          "832:           Z_TYPE_PP(value) == IS_STRING) {",
          "833:         zval **tmp;",
          "834:         if ((zend_hash_index_find(Z_ARRVAL_PP(data), 1, (void**)&tmp) == FAILURE ||",
          "835:              strncmp(phpurl->path?phpurl->path:\"/\",Z_STRVAL_PP(tmp),Z_STRLEN_PP(tmp)) == 0) &&",
          "836:             (zend_hash_index_find(Z_ARRVAL_PP(data), 2, (void**)&tmp) == FAILURE ||",
          "837:              in_domain(phpurl->host,Z_STRVAL_PP(tmp))) &&",
          "838:             (use_ssl || zend_hash_index_find(Z_ARRVAL_PP(data), 3, (void**)&tmp) == FAILURE)) {",
          "839:         smart_str_appendl(&soap_headers, key, key_len-1);",
          "",
          "[Removed Lines]",
          "826:      zend_hash_get_current_key_ex(Z_ARRVAL_PP(cookies), &key, &key_len, NULL, 0, NULL);",
          "828:      if (Z_TYPE_PP(data) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "825:      ulong numindx;",
          "826:      int res = zend_hash_get_current_key_ex(Z_ARRVAL_PP(cookies), &key, &key_len, &numindx, 0, NULL);",
          "829:      if (res == HASH_KEY_IS_STRING && Z_TYPE_PP(data) == IS_ARRAY) {",
          "836:                 Z_TYPE_PP(tmp) != IS_STRING ||",
          "839:              Z_TYPE_PP(tmp) != IS_STRING ||",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1060:     efree(connection);",
          "1061:    }",
          "1062:   }",
          "1065:  if (!get_http_body(stream, http_close, http_headers, &http_body, &http_body_size TSRMLS_CC)) {",
          "1066:   if (request != buf) {efree(request);}",
          "",
          "[Removed Lines]",
          "1063:  }",
          "",
          "[Added Lines]",
          "1066:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1111:         strcat(s, new_url->path);",
          "1112:         efree(new_url->path);",
          "1113:         new_url->path = s;",
          "1115:       } else {",
          "1116:        char *s = emalloc(strlen(new_url->path) + 2);",
          "1117:        s[0] = '/'; s[1] = 0;",
          "",
          "[Removed Lines]",
          "1114:        }",
          "",
          "[Added Lines]",
          "1117:        }",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:  ALLOC_INIT_ZVAL(pflags);",
          "1772:  if (!php_var_unserialize(&pflags, &p, s + buf_len, &var_hash TSRMLS_CC) || Z_TYPE_P(pflags) != IS_LONG) {",
          "1774:   goto outexcept;",
          "1775:  }",
          "1778:  flags = Z_LVAL_P(pflags);",
          "",
          "[Removed Lines]",
          "1773:   zval_ptr_dtor(&pflags);",
          "1779:  zval_ptr_dtor(&pflags);",
          "",
          "[Added Lines]",
          "1776:  var_push_dtor(&var_hash, &pflags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1798:   if (!php_var_unserialize(&intern->array, &p, s + buf_len, &var_hash TSRMLS_CC)) {",
          "1799:    goto outexcept;",
          "1800:   }",
          "1801:  }",
          "1802:  if (*p != ';') {",
          "1803:   goto outexcept;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1800:   var_push_dtor(&var_hash, &intern->array);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1816:   goto outexcept;",
          "1817:  }",
          "1820:  if (!intern->std.properties) {",
          "1821:   rebuild_object_properties(&intern->std);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1819:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1828:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1829:  return;",
          "1831: outexcept:",
          "1832:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1833:  zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Error at offset %ld of %d bytes\", (long)((char*)p - buf), buf_len);",
          "1834:  return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1830:  if (pflags) {",
          "1831:   zval_ptr_dtor(&pflags);",
          "1832:  }",
          "1837:  if (pflags) {",
          "1838:   zval_ptr_dtor(&pflags);",
          "1839:  }",
          "",
          "---------------"
        ],
        "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c": [
          "File: ext/spl/spl_dllist.c -> ext/spl/spl_dllist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:  return SUCCESS;",
          "",
          "[Removed Lines]",
          "503: }",
          "",
          "[Added Lines]",
          "503: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:  spl_ptr_llist_push(intern->llist, value TSRMLS_CC);",
          "573:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "574: }",
          "",
          "[Added Lines]",
          "574: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "614:  }",
          "616:  RETURN_ZVAL(value, 1, 1);",
          "",
          "[Removed Lines]",
          "617: }",
          "",
          "[Added Lines]",
          "617: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "637:  }",
          "639:  RETURN_ZVAL(value, 1, 1);",
          "",
          "[Removed Lines]",
          "640: }",
          "",
          "[Added Lines]",
          "640: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1207:   zval_ptr_dtor(&flags);",
          "1208:   goto error;",
          "1209:  }",
          "1210:  intern->flags = Z_LVAL_P(flags);",
          "1211:  zval_ptr_dtor(&flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1210:  var_push_dtor(&var_hash, &flags);",
          "",
          "---------------"
        ],
        "ext/spl/spl_observer.c||ext/spl/spl_observer.c": [
          "File: ext/spl/spl_observer.c -> ext/spl/spl_observer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:   goto outexcept;",
          "839:  }",
          "842:  count = Z_LVAL_P(pcount);",
          "844:  while(count-- > 0) {",
          "845:   spl_SplObjectStorageElement *pelement;",
          "846:   char *hash;",
          "847:   int hash_len;",
          "849:   if (*p != ';') {",
          "850:    goto outexcept;",
          "851:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:  var_push_dtor(&var_hash, &pcount);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:    if(pelement->obj) {",
          "887:     var_push_dtor(&var_hash, &pelement->obj);",
          "888:    }",
          "890:   spl_object_storage_attach(intern, getThis(), pentry, pinf TSRMLS_CC);",
          "891:   zval_ptr_dtor(&pentry);",
          "892:   zval_ptr_dtor(&pinf);",
          "",
          "[Removed Lines]",
          "889:   }",
          "",
          "[Added Lines]",
          "890:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:   goto outexcept;",
          "910:  }",
          "913:  if (!intern->std.properties) {",
          "914:   rebuild_object_properties(&intern->std);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt": [
          "File: ext/spl/tests/bug70068.phpt -> ext/spl/tests/bug70068.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70068 (Dangling pointer in the unserialization of ArrayObject items)",
          "3: --FILE--",
          "4: <?php",
          "5: $a = unserialize('a:3:{i:0;C:11:\"ArrayObject\":20:{x:i:0;r:3;;m:a:0:{};}i:1;d:11;i:2;S:31:\"AAAAAAAABBBBCCCC\\01\\00\\00\\00\\04\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\";}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt": [
          "File: ext/spl/tests/bug70166.phpt -> ext/spl/tests/bug70166.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70166 Use After Free Vulnerability in unserialize() with SPLArrayObject",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;a:0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:11:\"ArrayObject\":'.strlen($inner).':{'.$inner.'}i:1;R:5;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(ArrayObject)#%d (1) {",
          "21:     [\"storage\":\"ArrayObject\":private]=>",
          "22:     array(0) {",
          "23:     }",
          "24:   }",
          "25:   [1]=>",
          "26:   array(0) {",
          "27:   }",
          "28: }",
          "29: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt": [
          "File: ext/spl/tests/bug70168.phpt -> ext/spl/tests/bug70168.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70168 Use After Free Vulnerability in unserialize() with SplObjectStorage",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;O:8:\"stdClass\":0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:16:\"SplObjectStorage\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplObjectStorage)#%d (1) {",
          "21:     [\"storage\":\"SplObjectStorage\":private]=>",
          "22:     array(1) {",
          "23:       [\"%s\"]=>",
          "24:       array(2) {",
          "25:         [\"obj\"]=>",
          "26:         object(stdClass)#2 (0) {",
          "27:         }",
          "28:         [\"inf\"]=>",
          "29:         NULL",
          "30:       }",
          "31:     }",
          "32:   }",
          "33:   [1]=>",
          "34:   int(1)",
          "35: }",
          "36: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt": [
          "File: ext/spl/tests/bug70169.phpt -> ext/spl/tests/bug70169.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70169 Use After Free Vulnerability in unserialize() with SplDoublyLinkedList",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'i:1;';",
          "6: $exploit = 'a:2:{i:0;C:19:\"SplDoublyLinkedList\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplDoublyLinkedList)#%d (2) {",
          "21:     [\"flags\":\"SplDoublyLinkedList\":private]=>",
          "22:     int(1)",
          "23:     [\"dllist\":\"SplDoublyLinkedList\":private]=>",
          "24:     array(0) {",
          "25:     }",
          "26:   }",
          "27:   [1]=>",
          "28:   int(1)",
          "29: }",
          "30: ===DONE===",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt": [
          "File: ext/standard/tests/serialize/bug69152.phpt -> ext/standard/tests/serialize/bug69152.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: ?>",
          "11: --EXPECTF--",
          "12: exception 'Exception' in %s:%d",
          "13: Stack trace:",
          "14: #0 {main}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: Notice: Undefined property: Exception::$previous in %s on line %d",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
          "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #69793: Remotely triggerable stack exhaustion via recursive method calls",
          "3: --FILE--",
          "4: <?php",
          "5: $e = unserialize('O:9:\"Exception\":7:{s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:1;s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";i:10;s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";N;}');",
          "7: var_dump($e.\"\");",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Notice: Undefined property: Exception::$message in %s/bug69793.php on line %d",
          "12: Notice: Undefined property: Exception::$file in %s/bug69793.php on line %d",
          "14: Notice: Undefined property: Exception::$previous in %s/bug69793.php on line %d",
          "15: string(53) \"exception 'Exception' in :1337",
          "16: Stack trace:",
          "17: #0 {main}\"",
          "",
          "---------------"
        ],
        "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt": [
          "File: sapi/cli/tests/005.phpt -> sapi/cli/tests/005.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: <?php",
          "5: include \"skipif.inc\";",
          "6: if (!extension_loaded(\"reflection\")) {",
          "8: }",
          "9: ?>",
          "10: --FILE--",
          "",
          "[Removed Lines]",
          "7:  die(\"skip reflection extension required\");",
          "",
          "[Added Lines]",
          "7:     die(\"skip reflection extension required\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: echo \"Done\\n\";",
          "20: ?>",
          "22: string(40) \"Exception: Class unknown does not exist",
          "23: \"",
          "24: string(183) \"Class [ <internal:Core> class stdClass ] {",
          "",
          "[Removed Lines]",
          "21: --EXPECTF--",
          "",
          "[Added Lines]",
          "21: --EXPECTF--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: }",
          "42: \"",
          "45:   - Constants [0] {",
          "46:   }",
          "",
          "[Removed Lines]",
          "43: string(1355) \"Class [ <internal:Core> class Exception ] {",
          "",
          "[Added Lines]",
          "43: string(1424) \"Class [ <internal:Core> class Exception ] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:     Property [ <default> private $previous ]",
          "62:   }",
          "65:     Method [ <internal:Core> final private method __clone ] {",
          "66:     }",
          "",
          "[Removed Lines]",
          "64:   - Methods [10] {",
          "",
          "[Added Lines]",
          "64:   - Methods [11] {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "77:     Method [ <internal:Core> final public method getMessage ] {",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     Method [ <internal:Core> final public method __wakeup ] {",
          "78:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}