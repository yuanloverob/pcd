{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "644337a33794c1ebedb601d61141cb0f12a40557",
      "candidate_info": {
        "commit_hash": "644337a33794c1ebedb601d61141cb0f12a40557",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/644337a33794c1ebedb601d61141cb0f12a40557",
        "files": [
          "test/test-spawn.c"
        ],
        "message": "test: fix compiler warning",
        "before_after_code_files": [
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106: #ifndef _WIN32",
          "1107: TEST_IMPL(closed_fd_events) {",
          "1113:   uv_pipe_t pipe_handle;",
          "1114:   int fd[2];",
          "",
          "[Removed Lines]",
          "1108:   uv_stdio_container_t stdio[3] = {",
          "1109:     { UV_INHERIT_FD },",
          "1110:     { UV_IGNORE },",
          "1111:     { UV_IGNORE }",
          "1112:   };",
          "",
          "[Added Lines]",
          "1108:   uv_stdio_container_t stdio[3];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1121:   init_process_options(\"spawn_helper4\", exit_cb);",
          "1122:   options.stdio_count = 3;",
          "1123:   options.stdio = stdio;",
          "1126:   ASSERT(0 == uv_spawn(uv_default_loop(), &process, &options));",
          "1127:   uv_unref((uv_handle_t*) &process);",
          "",
          "[Removed Lines]",
          "1124:   stdio[0].data.fd = fd[0];",
          "",
          "[Added Lines]",
          "1120:   options.stdio[0].flags = UV_INHERIT_FD;",
          "1121:   options.stdio[0].data.fd = fd[0];",
          "1122:   options.stdio[1].flags = UV_IGNORE;",
          "1123:   options.stdio[2].flags = UV_IGNORE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "429bb804ed26e1928818907b1cfcf0161c954ea8",
      "candidate_info": {
        "commit_hash": "429bb804ed26e1928818907b1cfcf0161c954ea8",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/429bb804ed26e1928818907b1cfcf0161c954ea8",
        "files": [
          "src/unix/fsevents.c",
          "test/test-fs-event.c",
          "test/test-list.h"
        ],
        "message": "fsevents: fix clever rescheduling\n\nThere're could be a situation, where one fsevents handle gets created\nand another one is destroyed simultaneously. In such cases\n`fsevent_need_reschedule` will be set to 1 twice and reset only once,\nleaving handle destructor hanging in uv_sem_wait().",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: struct uv__cf_loop_state_s {",
          "77:   CFRunLoopRef loop;",
          "78:   CFRunLoopSourceRef signal_source;",
          "80:   FSEventStreamRef fsevent_stream;",
          "81:   uv_sem_t fsevent_sem;",
          "82:   uv_mutex_t fsevent_mutex;",
          "",
          "[Removed Lines]",
          "79:   volatile int fsevent_need_reschedule;",
          "",
          "[Added Lines]",
          "79:   int fsevent_need_reschedule;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:   state->fsevent_need_reschedule = 0;",
          "368:   uv__fsevents_destroy_stream(handle->loop);",
          "",
          "[Removed Lines]",
          "363:   if (!state->fsevent_need_reschedule)",
          "364:     return;",
          "",
          "[Added Lines]",
          "363:   uv_mutex_lock(&state->fsevent_mutex);",
          "364:   if (state->fsevent_need_reschedule == 0) {",
          "365:     uv_mutex_unlock(&state->fsevent_mutex);",
          "366:     goto final;",
          "367:   }",
          "369:   uv_mutex_unlock(&state->fsevent_mutex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:     uv__fsevents_create_stream(handle->loop, cf_paths);",
          "400:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: final:",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: TEST_IMPL(fs_event_start_and_close) {",
          "507:   uv_loop_t* loop;",
          "508:   uv_fs_event_t fs_event1;",
          "509:   uv_fs_event_t fs_event2;",
          "510:   int r;",
          "512:   loop = uv_default_loop();",
          "514:   create_dir(loop, \"watch_dir\");",
          "516:   r = uv_fs_event_init(loop, &fs_event1, \"watch_dir\", fs_event_cb_dir, 0);",
          "517:   ASSERT(r == 0);",
          "519:   r = uv_fs_event_init(loop, &fs_event2, \"watch_dir\", fs_event_cb_dir, 0);",
          "520:   ASSERT(r == 0);",
          "522:   uv_close((uv_handle_t*) &fs_event2, close_cb);",
          "523:   uv_close((uv_handle_t*) &fs_event1, close_cb);",
          "525:   uv_run(loop, UV_RUN_DEFAULT);",
          "527:   ASSERT(close_cb_called == 2);",
          "529:   remove(\"watch_dir/\");",
          "530:   MAKE_VALGRIND_HAPPY();",
          "531:   return 0;",
          "532: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: TEST_DECLARE   (fs_event_immediate_close)",
          "194: TEST_DECLARE   (fs_event_close_with_pending_event)",
          "195: TEST_DECLARE   (fs_event_close_in_callback)",
          "196: TEST_DECLARE   (fs_readdir_empty_dir)",
          "197: TEST_DECLARE   (fs_readdir_file)",
          "198: TEST_DECLARE   (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: TEST_DECLARE   (fs_event_start_and_close)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:   TEST_ENTRY  (fs_event_immediate_close)",
          "489:   TEST_ENTRY  (fs_event_close_with_pending_event)",
          "490:   TEST_ENTRY  (fs_event_close_in_callback)",
          "491:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "492:   TEST_ENTRY  (fs_readdir_file)",
          "493:   TEST_ENTRY  (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:   TEST_ENTRY  (fs_event_start_and_close)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e43e5b3d954a0989db5588aa110e1fe4fe6e0219",
      "candidate_info": {
        "commit_hash": "e43e5b3d954a0989db5588aa110e1fe4fe6e0219",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e43e5b3d954a0989db5588aa110e1fe4fe6e0219",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.05.30, Version 0.11.4 (Unstable)\n\nChanges since version 0.11.3:\n\n* windows: make uv_spawn not fail when the libuv embedding application\n  is run under external job control (Bert Belder)\n\n* darwin: assume CFRunLoopStop() isn't thread-safe, fixing a race\n  condition when stopping the 'stdin select hack' thread (Fedor Indutny)\n\n* win: fix UV_EALREADY not being reported correctly to the libuv user in\n  some cases (Bert Belder)\n\n* darwin: make the uv__cf_loop_runner and uv__cf_loop_cb functions\n  static (Ben Noordhuis)\n\n* darwin: task_info() cannot fail (Ben Noordhuis)\n\n* unix: add error mapping for ENETDOWN (Ben Noordhuis)\n\n* unix: implicitly signal write errors to the libuv user (Ben Noordhuis)\n\n* unix: fix assertion error on signal pipe overflow (Bert Belder)\n\n* unix: turn off POLLOUT after stream connect (Ben Noordhuis)\n\n* unix: fix stream refcounting buglet (Ben Noordhuis)\n\n* unix: remove assert statements that are no longer correct (Ben\n  Noordhuis)\n\n* unix: appease warning about non-standard `inline` (Sean Silva)\n\n* unix: add uv__is_closing() macro (Ben Noordhuis)\n\n* unix: stop stream POLLOUT watcher on write error (Ben Noordhuis)\n\n* include: document uv_update_time() and uv_now() (Ben Noordhuis)\n\n* linux: fix cpu model parsing on newer arm kernels (Ben Noordhuis)\n\n* linux: fix a memory leak in uv_cpu_info() error path (Ben Noordhuis)\n\n* linux: don't ignore out-of-memory errors in uv_cpu_info() (Ben\n  Noordhuis)\n\n* unix, windows: move uv_now() to uv-common.c (Ben Noordhuis)\n\n* test: fix a compilation problem in test-osx-select.c that was caused\n  by the use of c-style comments (Bert Belder)\n\n* darwin: use uv_fs_sendfile() use the sendfile api correctly (Wynn\n  Wilkes)\n\n* windows: call idle handles on every loop iteration, something the unix\n  implementation already did (Bert Belder)\n\n* test: update the idle-starvation test to verify that idle handles are\n  called in every loop iteration (Bert Belder)\n\n* unix, windows: ensure that uv_run() in RUN_ONCE mode calls timers that\n  expire after blocking (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 4",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a92b66fe3379e4d23f8051056fa0a9a1292f26b2",
      "candidate_info": {
        "commit_hash": "a92b66fe3379e4d23f8051056fa0a9a1292f26b2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a92b66fe3379e4d23f8051056fa0a9a1292f26b2",
        "files": [
          "include/uv.h",
          "src/uv-common.c",
          "src/uv-common.h",
          "test/test-list.h",
          "test/test-ref.c"
        ],
        "message": "unix, windows: add uv_has_ref() function",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "test/test-list.h||test/test-list.h",
          "test/test-ref.c||test/test-ref.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: UV_EXTERN void uv_ref(uv_handle_t*);",
          "283: UV_EXTERN void uv_unref(uv_handle_t*);",
          "285: UV_EXTERN void uv_update_time(uv_loop_t*);",
          "286: UV_EXTERN uint64_t uv_now(uv_loop_t*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: UV_EXTERN int uv_has_ref(const uv_handle_t*);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426: }",
          "429: void uv_stop(uv_loop_t* loop) {",
          "430:   loop->stop_flag = 1;",
          "431: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429: int uv_has_ref(const uv_handle_t* handle) {",
          "430:   return uv__has_ref(handle);",
          "431: }",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   }                                                                           \\",
          "187:   while (0)",
          "189: #if defined(_WIN32)",
          "190: # define uv__handle_platform_init(h)",
          "191: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: #define uv__has_ref(h)                                                        \\",
          "190:   (((h)->flags & UV__HANDLE_REF) != 0)",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: TEST_DECLARE   (pipe_ref3)",
          "129: TEST_DECLARE   (pipe_ref4)",
          "130: TEST_DECLARE   (process_ref)",
          "131: TEST_DECLARE   (active)",
          "132: TEST_DECLARE   (embed)",
          "133: TEST_DECLARE   (async)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: TEST_DECLARE   (has_ref)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:   TEST_ENTRY  (pipe_ref4)",
          "378:   TEST_HELPER (pipe_ref4, pipe_echo_server)",
          "379:   TEST_ENTRY  (process_ref)",
          "381:   TEST_ENTRY  (loop_handles)",
          "382:   TEST_ENTRY  (walk_handles)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   TEST_ENTRY  (has_ref)",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:   MAKE_VALGRIND_HAPPY();",
          "414:   return 0;",
          "415: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418: TEST_IMPL(has_ref) {",
          "419:   uv_idle_t h;",
          "420:   uv_idle_init(uv_default_loop(), &h);",
          "421:   uv_ref((uv_handle_t*)&h);",
          "422:   ASSERT(uv_has_ref((uv_handle_t*)&h) == 1);",
          "423:   uv_unref((uv_handle_t*)&h);",
          "424:   ASSERT(uv_has_ref((uv_handle_t*)&h) == 0);",
          "425:   MAKE_VALGRIND_HAPPY();",
          "426:   return 0;",
          "427: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3f23b2d0550709b0852a776dfc7531878520aad",
      "candidate_info": {
        "commit_hash": "f3f23b2d0550709b0852a776dfc7531878520aad",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f3f23b2d0550709b0852a776dfc7531878520aad",
        "files": [
          "src/uv-common.c"
        ],
        "message": "unix: define _GNU_SOURCE, exposes glibc-isms\n\nEAI_NODATA and some other getaddrinfo() error codes are returned by\nglibc but not exposed in the headers unless _GNU_SOURCE is defined.\n\nOnly define in src/uv-common.c because that's the only file that deals\nwith EAI_* error codes.",
        "before_after_code_files": [
          "src/uv-common.c||src/uv-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"uv-common.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifndef _GNU_SOURCE",
          "26: # define _GNU_SOURCE",
          "27: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}