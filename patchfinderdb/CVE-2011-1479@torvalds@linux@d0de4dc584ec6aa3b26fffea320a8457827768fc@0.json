{
  "cve_id": "CVE-2011-1479",
  "cve_desc": "Double free vulnerability in the inotify subsystem in the Linux kernel before 2.6.39 allows local users to cause a denial of service (system crash) via vectors involving failed attempts to create files.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2010-4250.",
  "repo": "torvalds/linux",
  "patch_hash": "d0de4dc584ec6aa3b26fffea320a8457827768fc",
  "patch_info": {
    "commit_hash": "d0de4dc584ec6aa3b26fffea320a8457827768fc",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/d0de4dc584ec6aa3b26fffea320a8457827768fc",
    "files": [
      "fs/notify/inotify/inotify_fsnotify.c",
      "fs/notify/inotify/inotify_user.c"
    ],
    "message": "inotify: fix double free/corruption of stuct user\n\nOn an error path in inotify_init1 a normal user can trigger a double\nfree of struct user.  This is a regression introduced by a2ae4cc9a16e\n(\"inotify: stop kernel memory leak on file creation failure\").\n\nWe fix this by making sure that if a group exists the user reference is\ndropped when the group is cleaned up.  We should not explictly drop the\nreference on error and also drop the reference when the group is cleaned\nup.\n\nThe new lifetime rules are that an inotify group lives from\ninotify_new_group to the last fsnotify_put_group.  Since the struct user\nand inotify_devs are directly tied to this lifetime they are only\nchanged/updated in those two locations.  We get rid of all special\ncasing of struct user or user->inotify_devs.\n\nSigned-off-by: Eric Paris <eparis@redhat.com>\nCc: stable@kernel.org (2.6.37 and up)\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "fs/notify/inotify/inotify_fsnotify.c||fs/notify/inotify/inotify_fsnotify.c",
      "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c"
    ]
  },
  "patch_diff": {
    "fs/notify/inotify/inotify_fsnotify.c||fs/notify/inotify/inotify_fsnotify.c": [
      "File: fs/notify/inotify/inotify_fsnotify.c -> fs/notify/inotify/inotify_fsnotify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:  idr_for_each(&group->inotify_data.idr, idr_callback, group);",
      "199:  idr_remove_all(&group->inotify_data.idr);",
      "200:  idr_destroy(&group->inotify_data.idr);",
      "201:  free_uid(group->inotify_data.user);",
      "202: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "201:  atomic_dec(&group->inotify_data.user->inotify_devs);",
      "",
      "---------------"
    ],
    "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c": [
      "File: fs/notify/inotify/inotify_user.c -> fs/notify/inotify/inotify_user.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "290: static int inotify_release(struct inode *ignored, struct file *file)",
      "291: {",
      "292:  struct fsnotify_group *group = file->private_data;",
      "295:  pr_debug(\"%s: group=%p\\n\", __func__, group);",
      "",
      "[Removed Lines]",
      "293:  struct user_struct *user = group->inotify_data.user;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:  fsnotify_put_group(group);",
      "304:  return 0;",
      "305: }",
      "",
      "[Removed Lines]",
      "302:  atomic_dec(&user->inotify_devs);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "697:  return ret;",
      "698: }",
      "701: {",
      "702:  struct fsnotify_group *group;",
      "",
      "[Removed Lines]",
      "700: static struct fsnotify_group *inotify_new_group(struct user_struct *user, unsigned int max_events)",
      "",
      "[Added Lines]",
      "697: static struct fsnotify_group *inotify_new_group(unsigned int max_events)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "710:  spin_lock_init(&group->inotify_data.idr_lock);",
      "711:  idr_init(&group->inotify_data.idr);",
      "712:  group->inotify_data.last_wd = 0;",
      "714:  group->inotify_data.fa = NULL;",
      "716:  return group;",
      "717: }",
      "",
      "[Removed Lines]",
      "713:  group->inotify_data.user = user;",
      "",
      "[Added Lines]",
      "711:  group->inotify_data.user = get_current_user();",
      "713:  if (atomic_inc_return(&group->inotify_data.user->inotify_devs) >",
      "714:      inotify_max_user_instances) {",
      "715:   fsnotify_put_group(group);",
      "716:   return ERR_PTR(-EMFILE);",
      "717:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "721: SYSCALL_DEFINE1(inotify_init1, int, flags)",
      "722: {",
      "723:  struct fsnotify_group *group;",
      "725:  int ret;",
      "",
      "[Removed Lines]",
      "724:  struct user_struct *user;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "731:  if (flags & ~(IN_CLOEXEC | IN_NONBLOCK))",
      "732:   return -EINVAL;",
      "750:  ret = anon_inode_getfd(\"inotify\", &inotify_fops, group,",
      "751:       O_RDONLY | flags);",
      "759:  return ret;",
      "760: }",
      "",
      "[Removed Lines]",
      "734:  user = get_current_user();",
      "735:  if (unlikely(atomic_read(&user->inotify_devs) >=",
      "736:    inotify_max_user_instances)) {",
      "737:   ret = -EMFILE;",
      "738:   goto out_free_uid;",
      "739:  }",
      "742:  group = inotify_new_group(user, inotify_max_queued_events);",
      "743:  if (IS_ERR(group)) {",
      "744:   ret = PTR_ERR(group);",
      "745:   goto out_free_uid;",
      "746:  }",
      "748:  atomic_inc(&user->inotify_devs);",
      "752:  if (ret >= 0)",
      "753:   return ret;",
      "755:  fsnotify_put_group(group);",
      "756:  atomic_dec(&user->inotify_devs);",
      "757: out_free_uid:",
      "758:  free_uid(user);",
      "",
      "[Added Lines]",
      "737:  group = inotify_new_group(inotify_max_queued_events);",
      "738:  if (IS_ERR(group))",
      "739:   return PTR_ERR(group);",
      "743:  if (ret < 0)",
      "744:   fsnotify_put_group(group);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2ae4cc9a16e211c8a128ba10d22a85431f093ab",
      "candidate_info": {
        "commit_hash": "a2ae4cc9a16e211c8a128ba10d22a85431f093ab",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a2ae4cc9a16e211c8a128ba10d22a85431f093ab",
        "files": [
          "fs/notify/inotify/inotify_user.c"
        ],
        "message": "inotify: stop kernel memory leak on file creation failure\n\nIf inotify_init is unable to allocate a new file for the new inotify\ngroup we leak the new group.  This patch drops the reference on the\ngroup on file allocation failure.\n\nReported-by: Vegard Nossum <vegard.nossum@gmail.com>\ncc: stable@kernel.org\nSigned-off-by: Eric Paris <eparis@redhat.com>",
        "before_after_code_files": [
          "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c"
          ],
          "candidate": [
            "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/notify/inotify/inotify_user.c||fs/notify/inotify/inotify_user.c": [
          "File: fs/notify/inotify/inotify_user.c -> fs/notify/inotify/inotify_user.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:  if (ret >= 0)",
          "753:   return ret;",
          "755:  atomic_dec(&user->inotify_devs);",
          "756: out_free_uid:",
          "757:  free_uid(user);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "755:  fsnotify_put_group(group);",
          "",
          "---------------"
        ]
      }
    }
  ]
}