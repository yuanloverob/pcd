{
  "cve_id": "CVE-2019-10639",
  "cve_desc": "The Linux kernel 4.x (starting from 4.1) and 5.x before 5.0.8 allows Information Exposure (partial kernel address disclosure), leading to a KASLR bypass. Specifically, it is possible to extract the KASLR kernel image offset using the IP ID values the kernel produces for connection-less protocols (e.g., UDP and ICMP). When such traffic is sent to multiple destination IP addresses, it is possible to obtain hash collisions (of indices to the counter array) and thereby obtain the hashing key (via enumeration). This key contains enough bits from a kernel address (of a static variable) so when the key is extracted (via enumeration), the offset of the kernel image is exposed. This attack can be carried out remotely, by the attacker forcing the target device to send UDP or ICMP (or certain other) traffic to attacker-controlled IP addresses. Forcing a server to send UDP traffic is trivial if the server is a DNS server. ICMP traffic is trivial if the server answers ICMP Echo requests (ping). For client targets, if the target visits the attacker's web page, then WebRTC or gQUIC can be used to force UDP traffic to attacker-controlled IP addresses. NOTE: this attack against KASLR became viable in 4.1 because IP ID generation was changed to have a dependency on an address associated with a network namespace.",
  "repo": "torvalds/linux",
  "patch_hash": "355b98553789b646ed97ad801a619ff898471b92",
  "patch_info": {
    "commit_hash": "355b98553789b646ed97ad801a619ff898471b92",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/355b98553789b646ed97ad801a619ff898471b92",
    "files": [
      "include/net/net_namespace.h",
      "include/net/netns/hash.h",
      "net/core/net_namespace.c"
    ],
    "message": "netns: provide pure entropy for net_hash_mix()\n\nnet_hash_mix() currently uses kernel address of a struct net,\nand is used in many places that could be used to reveal this\naddress to a patient attacker, thus defeating KASLR, for\nthe typical case (initial net namespace, &init_net is\nnot dynamically allocated)\n\nI believe the original implementation tried to avoid spending\ntoo many cycles in this function, but security comes first.\n\nAlso provide entropy regardless of CONFIG_NET_NS.\n\nFixes: 0b4419162aa6 (\"netns: introduce the net_hash_mix \"salt\" for hashes\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Amit Klein <aksecurity@gmail.com>\nReported-by: Benny Pinkas <benny@pinkas.net>\nCc: Pavel Emelyanov <xemul@openvz.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/net/net_namespace.h||include/net/net_namespace.h",
      "include/net/netns/hash.h||include/net/netns/hash.h",
      "net/core/net_namespace.c||net/core/net_namespace.c"
    ]
  },
  "patch_diff": {
    "include/net/net_namespace.h||include/net/net_namespace.h": [
      "File: include/net/net_namespace.h -> include/net/net_namespace.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:  spinlock_t  rules_mod_lock;",
      "62:  atomic64_t  cookie_gen;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:  u32   hash_mix;",
      "",
      "---------------"
    ],
    "include/net/netns/hash.h||include/net/netns/hash.h": [
      "File: include/net/netns/hash.h -> include/net/netns/hash.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #ifndef __NET_NS_HASH_H__",
      "3: #define __NET_NS_HASH_H__",
      "9: static inline u32 net_hash_mix(const struct net *net)",
      "10: {",
      "16: }",
      "17: #endif",
      "",
      "[Removed Lines]",
      "5: #include <asm/cache.h>",
      "7: struct net;",
      "11: #ifdef CONFIG_NET_NS",
      "12:  return (u32)(((unsigned long)net) >> ilog2(sizeof(*net)));",
      "13: #else",
      "14:  return 0;",
      "15: #endif",
      "",
      "[Added Lines]",
      "5: #include <net/net_namespace.h>",
      "9:  return net->hash_mix;",
      "",
      "---------------"
    ],
    "net/core/net_namespace.c||net/core/net_namespace.c": [
      "File: net/core/net_namespace.c -> net/core/net_namespace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "305:  refcount_set(&net->count, 1);",
      "306:  refcount_set(&net->passive, 1);",
      "307:  net->dev_base_seq = 1;",
      "308:  net->user_ns = user_ns;",
      "309:  idr_init(&net->netns_ids);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:  get_random_bytes(&net->hash_mix, sizeof(u32));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a06b8982f8f2f40d03a3daf634676386bd84dbc",
      "candidate_info": {
        "commit_hash": "2a06b8982f8f2f40d03a3daf634676386bd84dbc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2a06b8982f8f2f40d03a3daf634676386bd84dbc",
        "files": [
          "include/net/net_namespace.h"
        ],
        "message": "net: reorder 'struct net' fields to avoid false sharing\n\nIntel test robot reported a ~7% regression on TCP_CRR tests\nthat they bisected to the cited commit.\n\nIndeed, every time a new TCP socket is created or deleted,\nthe atomic counter net->count is touched (via get_net(net)\nand put_net(net) calls)\n\nSo cpus might have to reload a contended cache line in\nnet_hash_mix(net) calls.\n\nWe need to reorder 'struct net' fields to move @hash_mix\nin a read mostly cache line.\n\nWe move in the first cache line fields that can be\ndirtied often.\n\nWe probably will have to address in a followup patch\nthe __randomize_layout that was added in linux-4.13,\nsince this might break our placement choices.\n\nFixes: 355b98553789 (\"netns: provide pure entropy for net_hash_mix()\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: kernel test robot <oliver.sang@intel.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/net_namespace.h||include/net/net_namespace.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/net_namespace.h||include/net/net_namespace.h"
          ],
          "candidate": [
            "include/net/net_namespace.h||include/net/net_namespace.h"
          ]
        }
      },
      "candidate_diff": {
        "include/net/net_namespace.h||include/net/net_namespace.h": [
          "File: include/net/net_namespace.h -> include/net/net_namespace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  spinlock_t  rules_mod_lock;",
          "66:  struct list_head exit_list; /* To linked to call pernet exit",
          "",
          "[Removed Lines]",
          "63:  u32   hash_mix;",
          "",
          "[Added Lines]",
          "66:  unsigned int  dev_unreg_count;",
          "69:  int   ifindex;",
          "71:  spinlock_t  nsid_lock;",
          "72:  atomic_t  fnhe_genid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: #endif",
          "78:  struct ucounts  *ucounts;",
          "80:  struct idr  netns_ids;",
          "82:  struct ns_common ns;",
          "84:  struct proc_dir_entry  *proc_net;",
          "85:  struct proc_dir_entry  *proc_net_stat;",
          "",
          "[Removed Lines]",
          "79:  spinlock_t  nsid_lock;",
          "",
          "[Added Lines]",
          "92:  struct list_head  dev_base_head;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  struct hlist_head  *dev_name_head;",
          "98:  struct hlist_head *dev_index_head;",
          "104:  struct list_head rules_ops;",
          "107:  struct netns_core core;",
          "108:  struct netns_mib mib;",
          "109:  struct netns_packet packet;",
          "",
          "[Removed Lines]",
          "96:  struct list_head  dev_base_head;",
          "100:  int   ifindex;",
          "101:  unsigned int  dev_unreg_count;",
          "",
          "[Added Lines]",
          "110:  u32   hash_mix;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:  struct sock  *crypto_nlsk;",
          "172: #endif",
          "173:  struct sock  *diag_nlsk;",
          "175: } __randomize_layout;",
          "177: #include <linux/seq_file_net.h>",
          "",
          "[Removed Lines]",
          "174:  atomic_t  fnhe_genid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}