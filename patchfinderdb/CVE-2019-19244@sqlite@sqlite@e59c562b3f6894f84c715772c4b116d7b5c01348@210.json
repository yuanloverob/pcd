{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
      "candidate_info": {
        "commit_hash": "25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/sessionfuzz.c"
        ],
        "message": "Remove a debugging printf() left in test/sessionfuzz.c.\n\nFossilOrigin-Name: 73c4abc90264355f3ea6e8c34e5aad6ed665b70fb136c4d416e2a98e46562bbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/sessionfuzz.c||test/sessionfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f2129f59f7df929106e2af876c2976dea6528c1dc1850d64cddb256f20e121a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/sessionfuzz.c||test/sessionfuzz.c": [
          "File: test/sessionfuzz.c -> test/sessionfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "830: ){",
          "831:   (void)NotUsed;",
          "832:   (void)p;",
          "834:   return SQLITE_CHANGESET_OMIT;",
          "835: }",
          "",
          "[Removed Lines]",
          "833:   printf(\"Conflict %d\\n\", eConflict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
      "candidate_info": {
        "commit_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e25007602b08bc237d828260514b4fe12b901ad4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Do not use the %lld printf conversion in the platform printf() as some legacy platforms do not support it.\n\nFossilOrigin-Name: f8696b60eec0dcacfe92d9a31cbf1436d674140e5447de0cd1c2f52bff6c2be4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7396:       utf8_printf(p->out, \"Usage: .filectrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "7397:       rc = 1;",
          "7398:     }else if( isOk==1 ){",
          "7400:     }",
          "7401:   }else",
          "",
          "[Removed Lines]",
          "7399:       raw_printf(p->out, \"%lld\\n\", iRes);",
          "",
          "[Added Lines]",
          "7399:       char zBuf[100];",
          "7400:       sqlite3_snprintf(sizeof(zBuf), zBuf, \"%lld\", iRes);",
          "7401:       raw_printf(p->out, \"%s\\n\", zBuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
      "candidate_info": {
        "commit_hash": "25fb50674f17198acfee9ac96ff5309adce37291",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25fb50674f17198acfee9ac96ff5309adce37291",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with joining two or more fts5_vocab tables that access the same underlying fts5 table.\n\nFossilOrigin-Name: 49956395e14b61f6bf839e59ae7dd95eb32ebf32f3d16388844de6621b9c2d98",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "526: int sqlite3Fts5GetTokenizer(",
          "527:   Fts5Global*,",
          "528:   const char **azArg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529: typedef struct Fts5Table Fts5Table;",
          "530: struct Fts5Table {",
          "534: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:   char **pzErr",
          "533: );",
          "",
          "[Removed Lines]",
          "535: Fts5Index *sqlite3Fts5IndexFromCsrid(Fts5Global*, i64, Fts5Config **);",
          "",
          "[Added Lines]",
          "545: Fts5Table *sqlite3Fts5TableFromCsrid(Fts5Global*, i64);",
          "547: int sqlite3Fts5FlushToDisk(Fts5Table*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: typedef struct Fts5Auxdata Fts5Auxdata;",
          "29: typedef struct Fts5Auxiliary Fts5Auxiliary;",
          "30: typedef struct Fts5Cursor Fts5Cursor;",
          "31: typedef struct Fts5Sorter Fts5Sorter;",
          "33: typedef struct Fts5TokenizerModule Fts5TokenizerModule;",
          "",
          "[Removed Lines]",
          "32: typedef struct Fts5Table Fts5Table;",
          "",
          "[Added Lines]",
          "31: typedef struct Fts5FullTable Fts5FullTable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: };",
          "",
          "[Removed Lines]",
          "116: struct Fts5Table {",
          "",
          "[Added Lines]",
          "113: struct Fts5FullTable {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254: #define FTS5_SAVEPOINT  5",
          "255: #define FTS5_RELEASE    6",
          "256: #define FTS5_ROLLBACKTO 7",
          "258:   switch( op ){",
          "259:     case FTS5_BEGIN:",
          "260:       assert( p->ts.eState==0 );",
          "",
          "[Removed Lines]",
          "257: static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){",
          "",
          "[Added Lines]",
          "252: static void fts5CheckTransactionState(Fts5FullTable *p, int op, int iSavepoint){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: }",
          "317:   if( pTab ){",
          "319:     sqlite3Fts5StorageClose(pTab->pStorage);",
          "321:     sqlite3_free(pTab);",
          "322:   }",
          "323: }",
          "",
          "[Removed Lines]",
          "309: static int fts5IsContentless(Fts5Table *pTab){",
          "310:   return pTab->pConfig->eContent==FTS5_CONTENT_NONE;",
          "316: static void fts5FreeVtab(Fts5Table *pTab){",
          "318:     sqlite3Fts5IndexClose(pTab->pIndex);",
          "320:     sqlite3Fts5ConfigFree(pTab->pConfig);",
          "",
          "[Added Lines]",
          "304: static int fts5IsContentless(Fts5FullTable *pTab){",
          "305:   return pTab->p.pConfig->eContent==FTS5_CONTENT_NONE;",
          "311: static void fts5FreeVtab(Fts5FullTable *pTab){",
          "313:     sqlite3Fts5IndexClose(pTab->p.pIndex);",
          "315:     sqlite3Fts5ConfigFree(pTab->p.pConfig);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328: static int fts5DisconnectMethod(sqlite3_vtab *pVtab){",
          "330:   return SQLITE_OK;",
          "331: }",
          "",
          "[Removed Lines]",
          "329:   fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "324:   fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "338:   int rc = sqlite3Fts5DropAll(pTab->pConfig);",
          "339:   if( rc==SQLITE_OK ){",
          "341:   }",
          "342:   return rc;",
          "343: }",
          "",
          "[Removed Lines]",
          "340:     fts5FreeVtab((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "335:     fts5FreeVtab((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:   const char **azConfig = (const char**)argv;",
          "373:   if( rc==SQLITE_OK ){",
          "374:     rc = sqlite3Fts5ConfigParse(pGlobal, db, argc, azConfig, &pConfig, pzErr);",
          "375:     assert( (rc==SQLITE_OK && *pzErr==0) || pConfig==0 );",
          "376:   }",
          "377:   if( rc==SQLITE_OK ){",
          "379:     pTab->pGlobal = pGlobal;",
          "380:   }",
          "383:   if( rc==SQLITE_OK ){",
          "385:   }",
          "388:   if( rc==SQLITE_OK ){",
          "389:     rc = sqlite3Fts5StorageOpen(",
          "391:     );",
          "392:   }",
          "",
          "[Removed Lines]",
          "372:   pTab = (Fts5Table*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5Table));",
          "378:     pTab->pConfig = pConfig;",
          "384:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->pIndex, pzErr);",
          "390:         pConfig, pTab->pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "[Added Lines]",
          "367:   pTab = (Fts5FullTable*)sqlite3Fts5MallocZero(&rc, sizeof(Fts5FullTable));",
          "373:     pTab->p.pConfig = pConfig;",
          "379:     rc = sqlite3Fts5IndexOpen(pConfig, bCreate, &pTab->p.pIndex, pzErr);",
          "385:         pConfig, pTab->p.pIndex, bCreate, &pTab->pStorage, pzErr",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "400:   if( rc==SQLITE_OK ){",
          "401:     assert( pConfig->pzErrmsg==0 );",
          "402:     pConfig->pzErrmsg = pzErr;",
          "405:     pConfig->pzErrmsg = 0;",
          "406:   }",
          "",
          "[Removed Lines]",
          "403:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "404:     sqlite3Fts5IndexRollback(pTab->pIndex);",
          "",
          "[Added Lines]",
          "398:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "399:     sqlite3Fts5IndexRollback(pTab->p.pIndex);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:   return SQLITE_OK;",
          "615: }",
          "618:   Fts5Cursor *pCsr;",
          "619:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "620:     if( pCsr->base.pVtab==(sqlite3_vtab*)pTab ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "617: static int fts5NewTransaction(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "612: static int fts5NewTransaction(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "628: static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){",
          "",
          "[Removed Lines]",
          "629:   Fts5Table *pTab = (Fts5Table*)pVTab;",
          "630:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "624:   Fts5FullTable *pTab = (Fts5FullTable*)pVTab;",
          "625:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "673: }",
          "675: static void fts5FreeCursorComponents(Fts5Cursor *pCsr){",
          "677:   Fts5Auxdata *pData;",
          "678:   Fts5Auxdata *pNext;",
          "",
          "[Removed Lines]",
          "676:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "671:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "718: static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){",
          "719:   if( pCursor ){",
          "721:     Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "722:     Fts5Cursor **pp;",
          "",
          "[Removed Lines]",
          "720:     Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "",
          "[Added Lines]",
          "715:     Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "778:   Fts5Cursor *pCsr;",
          "779:   for(pCsr=pTab->pGlobal->pCsr; pCsr; pCsr=pCsr->pNext){",
          "780:     if( pCsr->ePlan==FTS5_PLAN_MATCH",
          "",
          "[Removed Lines]",
          "777: static void fts5TripCursors(Fts5Table *pTab){",
          "",
          "[Added Lines]",
          "772: static void fts5TripCursors(Fts5FullTable *pTab){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "801:   int rc = SQLITE_OK;",
          "802:   assert( *pbSkip==0 );",
          "803:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_RESEEK) ){",
          "805:     int bDesc = pCsr->bDesc;",
          "806:     i64 iRowid = sqlite3Fts5ExprRowid(pCsr->pExpr);",
          "809:     if( rc==SQLITE_OK &&  iRowid!=sqlite3Fts5ExprRowid(pCsr->pExpr) ){",
          "811:     }",
          "",
          "[Removed Lines]",
          "804:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "808:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->pIndex, iRowid, bDesc);",
          "",
          "[Added Lines]",
          "799:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "803:     rc = sqlite3Fts5ExprFirst(pCsr->pExpr, pTab->p.pIndex, iRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "902:   return rc;",
          "903: }",
          "907:   Fts5Sorter *pSorter;",
          "908:   int nPhrase;",
          "909:   sqlite3_int64 nByte;",
          "",
          "[Removed Lines]",
          "905: static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "906:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "900: static int fts5CursorFirstSorted(",
          "901:   Fts5FullTable *pTab,",
          "902:   Fts5Cursor *pCsr,",
          "903:   int bDesc",
          "904: ){",
          "905:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "950:   return rc;",
          "951: }",
          "954:   int rc;",
          "955:   Fts5Expr *pExpr = pCsr->pExpr;",
          "957:   if( sqlite3Fts5ExprEof(pExpr) ){",
          "958:     CsrFlagSet(pCsr, FTS5CSR_EOF);",
          "959:   }",
          "",
          "[Removed Lines]",
          "953: static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){",
          "956:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "[Added Lines]",
          "952: static int fts5CursorFirst(Fts5FullTable *pTab, Fts5Cursor *pCsr, int bDesc){",
          "955:   rc = sqlite3Fts5ExprFirst(pExpr, pTab->p.pIndex, pCsr->iFirstRowid, bDesc);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "970: static int fts5SpecialMatch(",
          "972:   Fts5Cursor *pCsr,",
          "973:   const char *zQuery",
          "974: ){",
          "",
          "[Removed Lines]",
          "971:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "970:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "979:   while( z[0]==' ' ) z++;",
          "980:   for(n=0; z[n] && z[n]!=' '; n++);",
          "983:   pCsr->ePlan = FTS5_PLAN_SPECIAL;",
          "985:   if( 0==sqlite3_strnicmp(\"reads\", z, n) ){",
          "987:   }",
          "988:   else if( 0==sqlite3_strnicmp(\"id\", z, n) ){",
          "989:     pCsr->iSpecial = pCsr->iCsrId;",
          "990:   }",
          "991:   else{",
          "994:     rc = SQLITE_ERROR;",
          "995:   }",
          "",
          "[Removed Lines]",
          "982:   assert( pTab->base.zErrMsg==0 );",
          "986:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->pIndex);",
          "993:     pTab->base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "[Added Lines]",
          "981:   assert( pTab->p.base.zErrMsg==0 );",
          "985:     pCsr->iSpecial = sqlite3Fts5IndexReads(pTab->p.pIndex);",
          "992:     pTab->p.base.zErrMsg = sqlite3_mprintf(\"unknown special query: %.*s\", n, z);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1006:   Fts5Auxiliary *pAux;",
          "1008:   for(pAux=pTab->pGlobal->pAux; pAux; pAux=pAux->pNext){",
          "",
          "[Removed Lines]",
          "1005: static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){",
          "",
          "[Added Lines]",
          "1004: static Fts5Auxiliary *fts5FindAuxiliary(Fts5FullTable *pTab, const char *zName){",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1017: static int fts5FindRankFunction(Fts5Cursor *pCsr){",
          "1020:   int rc = SQLITE_OK;",
          "1021:   Fts5Auxiliary *pAux = 0;",
          "1022:   const char *zRank = pCsr->zRank;",
          "",
          "[Removed Lines]",
          "1018:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1019:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1017:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1018:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1054:   if( rc==SQLITE_OK ){",
          "1055:     pAux = fts5FindAuxiliary(pTab, zRank);",
          "1056:     if( pAux==0 ){",
          "1059:       rc = SQLITE_ERROR;",
          "1060:     }",
          "1061:   }",
          "",
          "[Removed Lines]",
          "1057:       assert( pTab->base.zErrMsg==0 );",
          "1058:       pTab->base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "[Added Lines]",
          "1056:       assert( pTab->p.base.zErrMsg==0 );",
          "1057:       pTab->p.base.zErrMsg = sqlite3_mprintf(\"no such function: %s\", zRank);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1132: ){",
          "1135:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "",
          "[Removed Lines]",
          "1133:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "1134:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1132:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "1133:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1160:   assert( pCsr->zRank==0 );",
          "1161:   assert( pCsr->zRankArgs==0 );",
          "",
          "[Removed Lines]",
          "1163:   assert( pzErrmsg==0 || pzErrmsg==&pTab->base.zErrMsg );",
          "1164:   pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1162:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1163:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1228:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1229:       }else{",
          "1231:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1232:         if( rc==SQLITE_OK ){",
          "1233:           if( bOrderByRank ){",
          "",
          "[Removed Lines]",
          "1230:         char **pzErr = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1229:         char **pzErr = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1251:     pCsr->ePlan = (pRowidEq ? FTS5_PLAN_ROWID : FTS5_PLAN_SCAN);",
          "1252:     rc = sqlite3Fts5StorageStmt(",
          "1254:     );",
          "1255:     if( rc==SQLITE_OK ){",
          "1256:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "",
          "[Removed Lines]",
          "1253:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->base.zErrMsg",
          "",
          "[Added Lines]",
          "1252:         pTab->pStorage, fts5StmtType(pCsr), &pCsr->pStmt, &pTab->p.base.zErrMsg",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1335:   if( pCsr->pStmt==0 ){",
          "1337:     int eStmt = fts5StmtType(pCsr);",
          "1338:     rc = sqlite3Fts5StorageStmt(",
          "1340:     );",
          "1342:     assert( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) );",
          "1343:   }",
          "",
          "[Removed Lines]",
          "1336:     Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1339:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->base.zErrMsg:0)",
          "1341:     assert( rc!=SQLITE_OK || pTab->base.zErrMsg==0 );",
          "",
          "[Added Lines]",
          "1335:     Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1338:         pTab->pStorage, eStmt, &pCsr->pStmt, (bErrormsg?&pTab->p.base.zErrMsg:0)",
          "1340:     assert( rc!=SQLITE_OK || pTab->p.base.zErrMsg==0 );",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1360:   return rc;",
          "1361: }",
          "1365:   va_start(ap, zFormat);",
          "1368:   va_end(ap);",
          "1369: }",
          "",
          "[Removed Lines]",
          "1363: static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){",
          "1366:   assert( p->base.zErrMsg==0 );",
          "1367:   p->base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "[Added Lines]",
          "1362: static void fts5SetVtabError(Fts5FullTable *p, const char *zFormat, ...){",
          "1365:   assert( p->p.base.zErrMsg==0 );",
          "1366:   p->p.base.zErrMsg = sqlite3_vmprintf(zFormat, ap);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1386: static int fts5SpecialInsert(",
          "1390: ){",
          "1392:   int rc = SQLITE_OK;",
          "1393:   int bError = 0;",
          "",
          "[Removed Lines]",
          "1391:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1390:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1423:     pConfig->bPrefixIndex = sqlite3_value_int(pVal);",
          "1424: #endif",
          "1425:   }else{",
          "1427:     if( rc==SQLITE_OK ){",
          "1429:     }",
          "1430:     if( rc==SQLITE_OK ){",
          "1431:       if( bError ){",
          "",
          "[Removed Lines]",
          "1426:     rc = sqlite3Fts5IndexLoadConfig(pTab->pIndex);",
          "1428:       rc = sqlite3Fts5ConfigSetValue(pTab->pConfig, zCmd, pVal, &bError);",
          "",
          "[Added Lines]",
          "1425:     rc = sqlite3Fts5IndexLoadConfig(pTab->p.pIndex);",
          "1427:       rc = sqlite3Fts5ConfigSetValue(pTab->p.pConfig, zCmd, pVal, &bError);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1439: }",
          "1441: static int fts5SpecialDelete(",
          "1443:   sqlite3_value **apVal",
          "1444: ){",
          "1445:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1442:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1441:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1454: static void fts5StorageInsert(",
          "1455:   int *pRc,",
          "1457:   sqlite3_value **apVal,",
          "1458:   i64 *piRowid",
          "1459: ){",
          "",
          "[Removed Lines]",
          "1456:   Fts5Table *pTab,",
          "",
          "[Added Lines]",
          "1455:   Fts5FullTable *pTab,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1489: ){",
          "",
          "[Removed Lines]",
          "1490:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1491:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1489:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1490:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "1502:   );",
          "1507:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "1503:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1504:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Added Lines]",
          "1502:   assert( pTab->p.pConfig->pzErrmsg==0 );",
          "1503:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1544:     if( eType0==SQLITE_INTEGER && fts5IsContentless(pTab) ){",
          "1546:           \"cannot %s contentless fts5 table: %s\",",
          "1547:           (nArg>1 ? \"UPDATE\" : \"DELETE from\"), pConfig->zName",
          "1548:       );",
          "",
          "[Removed Lines]",
          "1545:       pTab->base.zErrMsg = sqlite3_mprintf(",
          "",
          "[Added Lines]",
          "1544:       pTab->p.base.zErrMsg = sqlite3_mprintf(",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1600:     }",
          "1601:   }",
          "1604:   return rc;",
          "1605: }",
          "",
          "[Removed Lines]",
          "1603:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1602:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1610: static int fts5SyncMethod(sqlite3_vtab *pVtab){",
          "1611:   int rc;",
          "1613:   fts5CheckTransactionState(pTab, FTS5_SYNC, 0);",
          "1615:   fts5TripCursors(pTab);",
          "1616:   rc = sqlite3Fts5StorageSync(pTab->pStorage);",
          "1618:   return rc;",
          "1619: }",
          "",
          "[Removed Lines]",
          "1612:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "1614:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "1617:   pTab->pConfig->pzErrmsg = 0;",
          "",
          "[Added Lines]",
          "1611:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "1613:   pTab->p.pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1616:   pTab->p.pConfig->pzErrmsg = 0;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1624: static int fts5BeginMethod(sqlite3_vtab *pVtab){",
          "1627:   return SQLITE_OK;",
          "1628: }",
          "",
          "[Removed Lines]",
          "1625:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_BEGIN, 0);",
          "1626:   fts5NewTransaction((Fts5Table*)pVtab);",
          "",
          "[Added Lines]",
          "1624:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_BEGIN, 0);",
          "1625:   fts5NewTransaction((Fts5FullTable*)pVtab);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1635: static int fts5CommitMethod(sqlite3_vtab *pVtab){",
          "1638:   return SQLITE_OK;",
          "1639: }",
          "",
          "[Removed Lines]",
          "1637:   fts5CheckTransactionState((Fts5Table*)pVtab, FTS5_COMMIT, 0);",
          "",
          "[Added Lines]",
          "1636:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_COMMIT, 0);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1645: static int fts5RollbackMethod(sqlite3_vtab *pVtab){",
          "1646:   int rc;",
          "1648:   fts5CheckTransactionState(pTab, FTS5_ROLLBACK, 0);",
          "1649:   rc = sqlite3Fts5StorageRollback(pTab->pStorage);",
          "1650:   return rc;",
          "",
          "[Removed Lines]",
          "1647:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "1646:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1668:   sqlite3_int64 *pnToken",
          "1669: ){",
          "1670:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1672:   return sqlite3Fts5StorageSize(pTab->pStorage, iCol, pnToken);",
          "1673: }",
          "1675: static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){",
          "1676:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1678:   return sqlite3Fts5StorageRowCount(pTab->pStorage, pnRow);",
          "1679: }",
          "",
          "[Removed Lines]",
          "1671:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1677:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "1670:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1676:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1709: ){",
          "1710:   int rc = SQLITE_OK;",
          "1711:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1715:   }else{",
          "",
          "[Removed Lines]",
          "1712:   if( fts5IsContentless((Fts5Table*)(pCsr->base.pVtab)) ){",
          "",
          "[Added Lines]",
          "1711:   if( fts5IsContentless((Fts5FullTable*)(pCsr->base.pVtab)) ){",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1904: static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){",
          "1905:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "1908:   int rc = SQLITE_OK;",
          "1910:   if( CsrFlagTest(pCsr, FTS5CSR_REQUIRE_DOCSIZE) ){",
          "",
          "[Removed Lines]",
          "1906:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "1907:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "1905:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "1906:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2160:   int(*xCallback)(const Fts5ExtensionApi*, Fts5Context*, void*)",
          "2161: ){",
          "2162:   Fts5Cursor *pCsr = (Fts5Cursor*)pCtx;",
          "2164:   int rc;",
          "2165:   Fts5Cursor *pNew = 0;",
          "",
          "[Removed Lines]",
          "2163:   Fts5Table *pTab = (Fts5Table*)(pCsr->base.pVtab);",
          "",
          "[Added Lines]",
          "2162:   Fts5FullTable *pTab = (Fts5FullTable*)(pCsr->base.pVtab);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2250: ){",
          "2251:   Fts5Cursor *pCsr;",
          "2252:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2253:   if( pCsr ){",
          "2257:   }",
          "2258:   return 0;",
          "2259: }",
          "",
          "[Removed Lines]",
          "2246: Fts5Index *sqlite3Fts5IndexFromCsrid(",
          "2254:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2256:     return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2242: Fts5Table *sqlite3Fts5TableFromCsrid(",
          "2249:     return (Fts5Table*)pCsr->base.pVtab;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2337: ){",
          "2340:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "2341:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "2338:   Fts5Table *pTab = (Fts5Table*)(pCursor->pVtab);",
          "2339:   Fts5Config *pConfig = pTab->pConfig;",
          "",
          "[Added Lines]",
          "2331:   Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);",
          "2332:   Fts5Config *pConfig = pTab->p.pConfig;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2390: ){",
          "2392:   Fts5Auxiliary *pAux;",
          "2394:   UNUSED_PARAM(nUnused);",
          "",
          "[Removed Lines]",
          "2391:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2384:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2412: ){",
          "2414:   return sqlite3Fts5StorageRename(pTab->pStorage, zName);",
          "2415: }",
          "2422: static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2428: }",
          "",
          "[Removed Lines]",
          "2413:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2423:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2425:   fts5CheckTransactionState(pTab, FTS5_SAVEPOINT, iSavepoint);",
          "2426:   fts5TripCursors(pTab);",
          "2427:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2406:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "2410: int sqlite3Fts5FlushToDisk(Fts5Table *pTab){",
          "2411:   fts5TripCursors((Fts5FullTable*)pTab);",
          "2412:   return sqlite3Fts5StorageSync(((Fts5FullTable*)pTab)->pStorage);",
          "2413: }",
          "2422:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_SAVEPOINT, iSavepoint);",
          "2423:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2435: static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2441: }",
          "",
          "[Removed Lines]",
          "2436:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "2438:   fts5CheckTransactionState(pTab, FTS5_RELEASE, iSavepoint);",
          "2439:   fts5TripCursors(pTab);",
          "2440:   return sqlite3Fts5StorageSync(pTab->pStorage);",
          "",
          "[Added Lines]",
          "2433:   fts5CheckTransactionState((Fts5FullTable*)pVtab, FTS5_RELEASE, iSavepoint);",
          "2434:   return sqlite3Fts5FlushToDisk((Fts5Table*)pVtab);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2448: static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){",
          "2451:   fts5CheckTransactionState(pTab, FTS5_ROLLBACKTO, iSavepoint);",
          "2452:   fts5TripCursors(pTab);",
          "",
          "[Removed Lines]",
          "2449:   Fts5Table *pTab = (Fts5Table*)pVtab;",
          "",
          "[Added Lines]",
          "2443:   Fts5FullTable *pTab = (Fts5FullTable*)pVtab;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   sqlite3_vtab_cursor **ppCsr",
          "328: ){",
          "329:   Fts5VocabTable *pTab = (Fts5VocabTable*)pVTab;",
          "332:   Fts5VocabCursor *pCsr = 0;",
          "333:   int rc = SQLITE_OK;",
          "334:   sqlite3_stmt *pStmt = 0;",
          "",
          "[Removed Lines]",
          "330:   Fts5Index *pIndex = 0;",
          "331:   Fts5Config *pConfig = 0;",
          "",
          "[Added Lines]",
          "329:   Fts5Table *pFts5 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "349:     i64 iId = sqlite3_column_int64(pStmt, 0);",
          "351:   }",
          "361:     }",
          "362:   }",
          "364:   if( rc==SQLITE_OK ){",
          "366:     pCsr = (Fts5VocabCursor*)sqlite3Fts5MallocZero(&rc, nByte);",
          "367:   }",
          "369:   if( pCsr ){",
          "371:     pCsr->pStmt = pStmt;",
          "373:     pCsr->aCnt = (i64*)&pCsr[1];",
          "375:   }else{",
          "376:     sqlite3_finalize(pStmt);",
          "377:   }",
          "",
          "[Removed Lines]",
          "350:     pIndex = sqlite3Fts5IndexFromCsrid(pTab->pGlobal, iId, &pConfig);",
          "353:   if( rc==SQLITE_OK && pIndex==0 ){",
          "354:     rc = sqlite3_finalize(pStmt);",
          "355:     pStmt = 0;",
          "356:     if( rc==SQLITE_OK ){",
          "357:       pVTab->zErrMsg = sqlite3_mprintf(",
          "358:           \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "359:       );",
          "360:       rc = SQLITE_ERROR;",
          "365:     int nByte = pConfig->nCol * sizeof(i64) * 2 + sizeof(Fts5VocabCursor);",
          "370:     pCsr->pIndex = pIndex;",
          "372:     pCsr->pConfig = pConfig;",
          "374:     pCsr->aDoc = &pCsr->aCnt[pConfig->nCol];",
          "",
          "[Added Lines]",
          "348:     pFts5 = sqlite3Fts5TableFromCsrid(pTab->pGlobal, iId);",
          "351:   if( rc==SQLITE_OK ){",
          "352:     if( pFts5==0 ){",
          "353:       rc = sqlite3_finalize(pStmt);",
          "354:       pStmt = 0;",
          "355:       if( rc==SQLITE_OK ){",
          "356:         pVTab->zErrMsg = sqlite3_mprintf(",
          "357:             \"no such fts5 table: %s.%s\", pTab->zFts5Db, pTab->zFts5Tbl",
          "358:             );",
          "359:         rc = SQLITE_ERROR;",
          "360:       }",
          "361:     }else{",
          "362:       rc = sqlite3Fts5FlushToDisk(pFts5);",
          "367:     int nByte = pFts5->pConfig->nCol * sizeof(i64)*2 + sizeof(Fts5VocabCursor);",
          "372:     pCsr->pFts5 = pFts5;",
          "375:     pCsr->aDoc = &pCsr->aCnt[pFts5->pConfig->nCol];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:   sqlite3_free(pCsr->zLeTerm);",
          "388:   pCsr->nLeTerm = -1;",
          "389:   pCsr->zLeTerm = 0;",
          "390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   pCsr->bEof = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425: }",
          "427: static int fts5VocabInstanceNext(Fts5VocabCursor *pCsr){",
          "429:   int rc = SQLITE_OK;",
          "430:   Fts5IndexIter *pIter = pCsr->pIter;",
          "431:   i64 *pp = &pCsr->iInstPos;",
          "",
          "[Removed Lines]",
          "428:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "430:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "461:   Fts5VocabTable *pTab = (Fts5VocabTable*)pCursor->pVtab;",
          "462:   int rc = SQLITE_OK;",
          "465:   pCsr->rowid++;",
          "",
          "[Removed Lines]",
          "463:   int nCol = pCsr->pConfig->nCol;",
          "",
          "[Added Lines]",
          "465:   int nCol = pCsr->pFts5->pConfig->nCol;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "499:       assert( pTab->eType==FTS5_VOCAB_COL || pTab->eType==FTS5_VOCAB_ROW );",
          "500:       while( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "501:         int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "503:         int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "570:   if( rc==SQLITE_OK && pCsr->bEof==0 && pTab->eType==FTS5_VOCAB_COL ){",
          "571:     while( pCsr->aDoc[pCsr->iCol]==0 ) pCsr->iCol++;",
          "573:   }",
          "574:   return rc;",
          "575: }",
          "",
          "[Removed Lines]",
          "572:     assert( pCsr->iCol<pCsr->pConfig->nCol );",
          "",
          "[Added Lines]",
          "574:     assert( pCsr->iCol<pCsr->pFts5->pConfig->nCol );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "627:   }",
          "629:   if( rc==SQLITE_OK ){",
          "631:   }",
          "632:   if( rc==SQLITE_OK && eType==FTS5_VOCAB_INSTANCE ){",
          "633:     rc = fts5VocabInstanceNewTerm(pCsr);",
          "634:   }",
          "638:   ){",
          "639:     rc = fts5VocabNextMethod(pCursor);",
          "640:   }",
          "",
          "[Removed Lines]",
          "630:     rc = sqlite3Fts5IndexQuery(pCsr->pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "635:   if( rc==SQLITE_OK",
          "636:    && !pCsr->bEof",
          "637:    && (eType!=FTS5_VOCAB_INSTANCE || pCsr->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "[Added Lines]",
          "632:     Fts5Index *pIndex = pCsr->pFts5->pIndex;",
          "633:     rc = sqlite3Fts5IndexQuery(pIndex, zTerm, nTerm, f, 0, &pCsr->pIter);",
          "638:   if( rc==SQLITE_OK && !pCsr->bEof",
          "639:    && (eType!=FTS5_VOCAB_INSTANCE",
          "640:     || pCsr->pFts5->pConfig->eDetail!=FTS5_DETAIL_NONE)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "658: ){",
          "659:   Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;",
          "661:   int eType = ((Fts5VocabTable*)(pCursor->pVtab))->eType;",
          "662:   i64 iVal = 0;",
          "",
          "[Removed Lines]",
          "660:   int eDetail = pCsr->pConfig->eDetail;",
          "",
          "[Added Lines]",
          "663:   int eDetail = pCsr->pFts5->pConfig->eDetail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "669:     assert( iCol==1 || iCol==2 || iCol==3 );",
          "670:     if( iCol==1 ){",
          "671:       if( eDetail!=FTS5_DETAIL_NONE ){",
          "673:         sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "674:       }",
          "675:     }else if( iCol==2 ){",
          "",
          "[Removed Lines]",
          "672:         const char *z = pCsr->pConfig->azCol[pCsr->iCol];",
          "",
          "[Added Lines]",
          "675:         const char *z = pCsr->pFts5->pConfig->azCol[pCsr->iCol];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:         }else if( eDetail==FTS5_DETAIL_COLUMNS ){",
          "698:           ii = (int)pCsr->iInstPos;",
          "699:         }",
          "702:           sqlite3_result_text(pCtx, z, -1, SQLITE_STATIC);",
          "703:         }",
          "704:         break;",
          "",
          "[Removed Lines]",
          "700:         if( ii>=0 && ii<pCsr->pConfig->nCol ){",
          "701:           const char *z = pCsr->pConfig->azCol[ii];",
          "",
          "[Added Lines]",
          "703:         if( ii>=0 && ii<pCsr->pFts5->pConfig->nCol ){",
          "704:           const char *z = pCsr->pFts5->pConfig->azCol[ii];",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:   expr [lsearch $e2 SorterSort]<0",
          "480: } 0",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: #-------------------------------------------------------------------------",
          "483: do_execsql_test 10.0 {",
          "484:   CREATE VIRTUAL TABLE ft USING fts5(a, b, c);",
          "485:   CREATE VIRTUAL TABLE t2 USING fts5vocab('ft','row');",
          "486:   CREATE VIRTUAL TABLE t3 USING fts5vocab('ft','row');",
          "487: }",
          "489: do_execsql_test 10.1 {",
          "490:   BEGIN;",
          "491:     INSERT INTO ft(b) VALUES('x y');",
          "492: }",
          "494: do_execsql_test 10.2 {",
          "495:   SELECT t2.term FROM t2;",
          "496: } {x y}",
          "498: do_execsql_test 10.3 {",
          "499:   SELECT t2.term, t3.term FROM t2, t3;",
          "500: } {x x x y y x y y}",
          "502: do_execsql_test 10.4 {",
          "503:   COMMIT;",
          "504: }",
          "506: do_execsql_test 10.5 {",
          "507:   BEGIN;",
          "508:     INSERT INTO ft(a) VALUES('1 2 3');",
          "509:     INSERT INTO ft(a) VALUES('4 5 6');",
          "510:     INSERT INTO ft(a) VALUES('1 2 3');",
          "511:     INSERT INTO ft(a) VALUES('4 5 6');",
          "512:     INSERT INTO ft(a) VALUES('1 2 3');",
          "513:     INSERT INTO ft(a) VALUES('4 5 6');",
          "514: }",
          "516: do_test 10.6 {",
          "517:   set res [list]",
          "518:   db eval { SELECT rowid FROM ft('4') } x {",
          "519:     db eval { SELECT * FROM t2 }",
          "520:     lappend res $x(rowid)",
          "521:   }",
          "522:   db eval COMMIT",
          "523:   set res",
          "524: } {3 5 7}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af9b58b335308ea31f088fbd9283714f58d406d0",
      "candidate_info": {
        "commit_hash": "af9b58b335308ea31f088fbd9283714f58d406d0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af9b58b335308ea31f088fbd9283714f58d406d0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Simplify the fix in the previous commit.\n\nFossilOrigin-Name: 5ef64b0f55d952c7b0016055eaf6bbc1b5b7afc09a62ee8e5e694ffa9863ac7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5347:   struct AggInfo_func *pF;",
          "5348:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "5371:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "5363:         bFilterMinMax = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5418:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5419:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5420:   }",
          "5428:   pAggInfo->directMode = 0;",
          "5429:   if( addrHitTest ){",
          "",
          "[Removed Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20c00823713980df47f51413c22e54294d0a5382",
      "candidate_info": {
        "commit_hash": "20c00823713980df47f51413c22e54294d0a5382",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20c00823713980df47f51413c22e54294d0a5382",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the CSV extension.\n\nFossilOrigin-Name: fbcd72565f4425016cebbbf5dfd6aa510234cfb31c785cf364f04fff444aacae",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = (int)(ftell(sRdr.in) - sRdr.nIn + sRdr.iIn);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bef216dfa1456a787e3d9c74936ee1c6600827d4e252bd13e7a93046ce07469f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}