{
  "cve_id": "CVE-2019-15226",
  "cve_desc": "Upon receiving each incoming request header data, Envoy will iterate over existing request headers to verify that the total size of the headers stays below a maximum limit. The implementation in versions 1.10.0 through 1.11.1 for HTTP/1.x traffic and all versions of Envoy for HTTP/2 traffic had O(n^2) performance characteristics. A remote attacker may craft a request that stays below the maximum request header size but consists of many thousands of small headers to consume CPU and result in a denial-of-service attack.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
  "patch_info": {
    "commit_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/afc39bea36fd436e54262f150c009e8d72db5014",
    "files": [
      "docs/root/intro/version_history.rst",
      "include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc",
      "test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc"
    ],
    "message": "Track byteSize of HeaderMap internally.\n\nIntroduces a cached byte size updated internally in HeaderMap. The value\nis stored as an optional, and is cleared whenever a non-const pointer or\nreference to a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum\nthe size of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
    "before_after_code_files": [
      "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc||source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc||test/integration/http_integration.cc",
      "test/integration/http_integration.h||test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
    ]
  },
  "patch_diff": {
    "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h": [
      "File: include/envoy/access_log/access_log.h -> include/envoy/access_log/access_log.h"
    ],
    "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
      "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "457:   virtual void setReferenceKey(const LowerCaseString& key, const std::string& value) PURE;",
      "",
      "[Removed Lines]",
      "462:   virtual uint64_t byteSize() const PURE;",
      "",
      "[Added Lines]",
      "473:   virtual absl::optional<uint64_t> byteSize() const PURE;",
      "484:   virtual uint64_t refreshByteSize() PURE;",
      "494:   virtual uint64_t byteSizeInternal() const PURE;",
      "",
      "---------------"
    ],
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:   }",
      "508:   connection_manager_.stats_.named_.downstream_rq_active_.dec();",
      "509:   for (const AccessLog::InstanceSharedPtr& access_log : connection_manager_.config_.accessLogs()) {",
      "510:     access_log->log(request_headers_.get(), response_headers_.get(), response_trailers_.get(),",
      "511:                     stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:   if (request_headers_ != nullptr) {",
      "513:     request_headers_->refreshByteSize();",
      "514:   }",
      "515:   if (response_headers_ != nullptr) {",
      "516:     response_headers_->refreshByteSize();",
      "517:   }",
      "518:   if (response_trailers_ != nullptr) {",
      "519:     response_trailers_->refreshByteSize();",
      "520:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "719:     }",
      "720:   }",
      "",
      "[Removed Lines]",
      "722:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
      "723:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
      "724:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
      "725:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
      "726:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
      "727:     return;",
      "728:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
      "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:   }",
      "296: };",
      "299:   if (data.empty()) {",
      "301:   }",
      "302:   if (!header.empty()) {",
      "303:     header.append(\",\", 1);",
      "304:   }",
      "305:   header.append(data.data(), data.size());",
      "306: }",
      "308: HeaderMapImpl::HeaderMapImpl() { memset(&inline_headers_, 0, sizeof(inline_headers_)); }",
      "",
      "[Removed Lines]",
      "298: void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return;",
      "",
      "[Added Lines]",
      "298: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return 0;",
      "302:   uint64_t byte_size = 0;",
      "305:     byte_size += 1;",
      "308:   return data.size() + byte_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320: }",
      "322: void HeaderMapImpl::copyFrom(const HeaderMap& header_map) {",
      "323:   header_map.iterate(",
      "324:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325: void HeaderMapImpl::addSize(uint64_t size) {",
      "327:   if (cached_byte_size_.has_value()) {",
      "328:     cached_byte_size_.value() += size;",
      "329:   }",
      "330: }",
      "332: void HeaderMapImpl::subtractSize(uint64_t size) {",
      "333:   if (cached_byte_size_.has_value()) {",
      "334:     ASSERT(cached_byte_size_ >= size);",
      "335:     cached_byte_size_.value() -= size;",
      "336:   }",
      "337: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "359:     if (*ref_lookup_response.entry_ == nullptr) {",
      "360:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
      "361:     } else {",
      "363:       value.clear();",
      "364:     }",
      "365:   } else {",
      "366:     std::list<HeaderEntryImpl>::iterator i = headers_.insert(std::move(key), std::move(value));",
      "367:     i->entry_ = i;",
      "368:   }",
      "",
      "[Removed Lines]",
      "362:       appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "379:       const uint64_t added_size =",
      "380:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "381:       addSize(added_size);",
      "385:     addSize(key.size() + value.size());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "374:   auto* entry = getExistingInline(key.getStringView());",
      "375:   if (entry != nullptr) {",
      "377:     key.clear();",
      "378:     value.clear();",
      "379:   } else {",
      "",
      "[Removed Lines]",
      "376:     appendToHeader(entry->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "396:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
      "397:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "408:   if (entry != nullptr) {",
      "409:     char buf[32];",
      "410:     StringUtil::itoa(buf, sizeof(buf), value);",
      "412:     return;",
      "413:   }",
      "414:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "411:     appendToHeader(entry->value(), buf);",
      "",
      "[Added Lines]",
      "432:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
      "433:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "423: void HeaderMapImpl::addCopy(const LowerCaseString& key, const std::string& value) {",
      "424:   auto* entry = getExistingInline(key.get());",
      "425:   if (entry != nullptr) {",
      "427:     return;",
      "428:   }",
      "429:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "426:     appendToHeader(entry->value(), value);",
      "",
      "[Added Lines]",
      "448:     const uint64_t added_size = appendToHeader(entry->value(), value);",
      "449:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "451:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
      "452: }",
      "455:   uint64_t byte_size = 0;",
      "456:   for (const HeaderEntryImpl& header : headers_) {",
      "457:     byte_size += header.key().size();",
      "458:     byte_size += header.value().size();",
      "459:   }",
      "461:   return byte_size;",
      "462: }",
      "",
      "[Removed Lines]",
      "454: uint64_t HeaderMapImpl::byteSize() const {",
      "",
      "[Added Lines]",
      "477: absl::optional<uint64_t> HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
      "479: uint64_t HeaderMapImpl::refreshByteSize() {",
      "480:   if (!cached_byte_size_.has_value()) {",
      "483:     cached_byte_size_ = byteSizeInternal();",
      "484:   }",
      "485:   return cached_byte_size_.value();",
      "486: }",
      "488: uint64_t HeaderMapImpl::byteSizeInternal() const {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "474: HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) {",
      "475:   for (HeaderEntryImpl& header : headers_) {",
      "476:     if (header.key() == key.get().c_str()) {",
      "477:       return &header;",
      "478:     }",
      "479:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "511:       cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "528:   } else {",
      "529:     for (auto i = headers_.begin(); i != headers_.end();) {",
      "530:       if (i->key() == key.get().c_str()) {",
      "531:         i = headers_.erase(i);",
      "532:       } else {",
      "533:         ++i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "566:         subtractSize(i->key().size() + i->value().size());",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "537: }",
      "539: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
      "541:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
      "542:     if (to_remove) {",
      "",
      "[Removed Lines]",
      "540:   headers_.remove_if([&](const HeaderEntryImpl& entry) {",
      "",
      "[Added Lines]",
      "576:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "546:       if (cb) {",
      "547:         StaticLookupResponse ref_lookup_response = cb(*this);",
      "548:         if (ref_lookup_response.entry_) {",
      "550:         }",
      "551:       }",
      "552:     }",
      "553:     return to_remove;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "585:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
      "586:                                           (*ref_lookup_response.entry_)->value().size();",
      "587:           subtractSize(key_value_size);",
      "590:       } else {",
      "591:         subtractSize(entry.key().size() + entry.value().size());",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "571: HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,",
      "572:                                                                  const LowerCaseString& key) {",
      "573:   if (*entry) {",
      "574:     return **entry;",
      "575:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614:   cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "588:     return **entry;",
      "589:   }",
      "591:   std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));",
      "592:   i->entry_ = i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   addSize(key.get().size() + value.size());",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "609:   }",
      "611:   HeaderEntryImpl* entry = *ptr_to_entry;",
      "613:   headers_.erase(entry->entry_);",
      "614: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:   const uint64_t size_to_subtract = entry->entry_->key().size() + entry->entry_->value().size();",
      "656:   subtractSize(size_to_subtract);",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
      "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define DEFINE_INLINE_HEADER_FUNCS(name)                                                           \\",
      "21: public:                                                                                            \\",
      "22:   const HeaderEntry* name() const override { return inline_headers_.name##_; }                     \\",
      "24:   HeaderEntry& insert##name() override {                                                           \\",
      "25:     return maybeCreateInline(&inline_headers_.name##_, Headers::get().name);                       \\",
      "26:   }                                                                                                \\",
      "27:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
      "",
      "[Removed Lines]",
      "23:   HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\",
      "",
      "[Added Lines]",
      "28:   HeaderEntry* name() override {                                                                   \\",
      "29:     cached_byte_size_.reset();                                                                     \\",
      "30:     return inline_headers_.name##_;                                                                \\",
      "31:   }                                                                                                \\",
      "33:     cached_byte_size_.reset();                                                                     \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:   HeaderMapImpl();",
      "49:   explicit HeaderMapImpl(",
      "",
      "[Removed Lines]",
      "46:   static void appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "[Added Lines]",
      "55:   static uint64_t appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:   void addCopy(const LowerCaseString& key, const std::string& value) override;",
      "72:   void setReference(const LowerCaseString& key, const std::string& value) override;",
      "73:   void setReferenceKey(const LowerCaseString& key, const std::string& value) override;",
      "75:   const HeaderEntry* get(const LowerCaseString& key) const override;",
      "76:   HeaderEntry* get(const LowerCaseString& key) override;",
      "77:   void iterate(ConstIterateCb cb, void* context) const override;",
      "",
      "[Removed Lines]",
      "74:   uint64_t byteSize() const override;",
      "",
      "[Added Lines]",
      "83:   absl::optional<uint64_t> byteSize() const override;",
      "84:   uint64_t refreshByteSize() override;",
      "85:   uint64_t byteSizeInternal() const override;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
      "197:   void removeInline(HeaderEntryImpl** entry);",
      "199:   AllInlineHeaders inline_headers_;",
      "200:   HeaderList headers_;",
      "202:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
      "203: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   void addSize(uint64_t size);",
      "210:   void subtractSize(uint64_t size);",
      "217:   absl::optional<uint64_t> cached_byte_size_ = 0;",
      "",
      "---------------"
    ],
    "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
      "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:   header_parsing_state_ = HeaderParsingState::Value;",
      "461:   current_header_value_.append(data, length);",
      "465:   if (total > (max_request_headers_kb_ * 1024)) {",
      "466:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
      "467:     sendProtocolError();",
      "",
      "[Removed Lines]",
      "463:   const uint32_t total =",
      "464:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
      "",
      "[Added Lines]",
      "464:   ASSERT(current_header_map_->byteSize().has_value());",
      "465:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
      "466:                          current_header_map_->byteSize().value();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472: int ConnectionImpl::onHeadersCompleteBase() {",
      "473:   ENVOY_CONN_LOG(trace, \"headers complete\", connection_);",
      "474:   completeLastHeader();",
      "475:   if (!(parser_.http_major == 1 && parser_.http_minor == 1)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:   ASSERT(current_header_map_->byteSize().has_value() &&",
      "480:          current_header_map_->byteSize() == current_header_map_->byteSizeInternal());",
      "",
      "---------------"
    ],
    "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
      "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   switch (frame->hd.type) {",
      "511:   case NGHTTP2_HEADERS: {",
      "512:     stream->remote_end_stream_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "513:     if (!stream->cookies_.empty()) {",
      "514:       HeaderString key(Headers::get().Cookie);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     ASSERT(stream->headers_->byteSize().has_value() &&",
      "515:            stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "620:   case NGHTTP2_HEADERS:",
      "621:   case NGHTTP2_DATA: {",
      "622:     StreamImpl* stream = getStream(frame->hd.stream_id);",
      "623:     stream->local_end_stream_sent_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "624:     break;",
      "625:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "627:     if (stream->headers_) {",
      "630:       ASSERT(stream->headers_->byteSize().has_value() &&",
      "631:              stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "632:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808:     stats_.headers_cb_no_stream_.inc();",
      "809:     return 0;",
      "810:   }",
      "812:   stream->saveHeader(std::move(name), std::move(value));",
      "815:     stats_.header_overflow_.inc();",
      "816:     return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
      "",
      "[Removed Lines]",
      "813:   if (stream->headers_->byteSize() > max_request_headers_kb_ * 1024) {",
      "",
      "[Added Lines]",
      "823:   ASSERT(stream->headers_->byteSize().has_value());",
      "824:   if (stream->headers_->byteSize().value() > max_request_headers_kb_ * 1024) {",
      "",
      "---------------"
    ],
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:   stream_info_.setUpstreamTiming(upstream_timing_);",
      "1400:   stream_info_.onRequestComplete();",
      "1401:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
      "1402:     upstream_log->log(parent_.downstream_headers_, upstream_headers_.get(),",
      "1403:                       upstream_trailers_.get(), stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:   if (upstream_headers_ != nullptr) {",
      "1405:     upstream_headers_->refreshByteSize();",
      "1406:   }",
      "1407:   if (upstream_trailers_ != nullptr) {",
      "1408:     upstream_trailers_->refreshByteSize();",
      "1409:   }",
      "",
      "---------------"
    ],
    "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h": [
      "File: source/extensions/access_loggers/common/access_log_base.h -> source/extensions/access_loggers/common/access_log_base.h"
    ],
    "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
      "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     request_properties->set_original_path(",
      "96:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
      "97:   }",
      "99:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
      "100:   if (request_headers.Method() != nullptr) {",
      "101:     envoy::api::v2::core::RequestMethod method =",
      "",
      "[Removed Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize());",
      "",
      "[Added Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize().value());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   if (stream_info.responseCodeDetails()) {",
      "124:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
      "125:   }",
      "127:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
      "128:   if (!response_headers_to_log_.empty()) {",
      "129:     auto* logged_headers = response_properties->mutable_response_headers();",
      "",
      "[Removed Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize());",
      "",
      "[Added Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc": [
      "File: source/extensions/filters/common/expr/context.cc -> source/extensions/filters/common/expr/context.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     } else if (value == UserAgent) {",
      "80:       return convertHeaderEntry(headers_.value_->UserAgent());",
      "81:     } else if (value == TotalSize) {",
      "83:     }",
      "84:   }",
      "85:   return {};",
      "",
      "[Removed Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize());",
      "",
      "[Added Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc": [
      "File: source/extensions/filters/http/rbac/rbac_filter.cc -> source/extensions/filters/http/rbac/rbac_filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:   if (shadow_engine != nullptr) {",
      "77:     std::string shadow_resp_code =",
      "78:         Filters::Common::RBAC::DynamicMetadataKeysSingleton::get().EngineResultAllowed;",
      "79:     if (shadow_engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(),",
      "80:                                &effective_policy_id)) {",
      "81:       ENVOY_LOG(debug, \"shadow allowed\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     headers.refreshByteSize();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:   const auto engine =",
      "106:       config_->engine(callbacks_->route(), Filters::Common::RBAC::EnforcementMode::Enforced);",
      "107:   if (engine != nullptr) {",
      "108:     if (engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(), nullptr)) {",
      "109:       ENVOY_LOG(debug, \"enforced allowed\");",
      "110:       config_->stats().allowed_.inc();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:     headers.refreshByteSize();",
      "",
      "---------------"
    ],
    "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
      "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4409:   EXPECT_EQ(1U, stats_.named_.downstream_cx_overload_disable_keepalive_.value());",
      "4410: }",
      "4457: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
      "4458:   setup(false, \"envoy-custom-server\", false);",
      "4459:   setUpEncoderAndDecoder(true, true);",
      "",
      "[Removed Lines]",
      "4412: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
      "4413:   setup(false, \"\");",
      "4415:   std::string response_code;",
      "4416:   std::string response_body;",
      "4417:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4418:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4419:     HeaderMapPtr headers{",
      "4420:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4421:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4423:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
      "4424:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
      "4425:           response_code = std::string(headers.Status()->value().getStringView());",
      "4426:         }));",
      "4427:     decoder->decodeHeaders(std::move(headers), true);",
      "4428:     conn_manager_->newStream(response_encoder_);",
      "4429:   }));",
      "4431:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4432:   conn_manager_->onData(fake_input, false); // kick off request",
      "4434:   EXPECT_EQ(\"431\", response_code);",
      "4435:   EXPECT_EQ(\"\", response_body);",
      "4436: }",
      "4438: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
      "4439:   max_request_headers_kb_ = 62;",
      "4440:   setup(false, \"\");",
      "4442:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4443:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4444:     HeaderMapPtr headers{",
      "4445:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4446:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4448:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
      "4449:     decoder->decodeHeaders(std::move(headers), true);",
      "4450:     conn_manager_->newStream(response_encoder_);",
      "4451:   }));",
      "4453:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4454:   conn_manager_->onData(fake_input, false); // kick off request",
      "4455: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
      "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:   addDummyHeaders(headers, state.range(0));",
      "105:   uint64_t size = 0;",
      "106:   for (auto _ : state) {",
      "108:   }",
      "109:   benchmark::DoNotOptimize(size);",
      "110: }",
      "",
      "[Removed Lines]",
      "107:     size += headers.byteSize();",
      "",
      "[Added Lines]",
      "107:     size += headers.byteSize().value();",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
      "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "366:   HeaderMapImpl headers;",
      "367:   EXPECT_TRUE(headers.empty());",
      "368:   EXPECT_EQ(0, headers.size());",
      "369:   EXPECT_EQ(nullptr, headers.Host());",
      "370:   headers.insertHost().value(std::string(\"hello\"));",
      "371:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "369:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
      "376: }",
      "378: TEST(HeaderMapImplTest, MoveIntoInline) {",
      "379:   HeaderMapImpl headers;",
      "380:   HeaderString key;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "380: uint64_t countBytesForTest(const HeaderMapImpl& headers) {",
      "381:   uint64_t byte_size = 0;",
      "382:   headers.iterate(",
      "383:       [](const Http::HeaderEntry& header, void* context) -> Http::HeaderMap::Iterate {",
      "384:         auto* byte_size = static_cast<uint64_t*>(context);",
      "386:         return Http::HeaderMap::Iterate::Continue;",
      "387:       },",
      "388:       &byte_size);",
      "389:   return byte_size;",
      "390: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "392:   headers.addViaMove(std::move(key2), std::move(value2));",
      "393:   EXPECT_EQ(\"cache-control\", headers.CacheControl()->key().getStringView());",
      "394:   EXPECT_EQ(\"hello,there\", headers.CacheControl()->value().getStringView());",
      "395: }",
      "397: TEST(HeaderMapImplTest, Remove) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "409:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "401:   LowerCaseString static_key(\"hello\");",
      "402:   std::string ref_value(\"value\");",
      "403:   headers.addReference(static_key, ref_value);",
      "404:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "405:   EXPECT_EQ(HeaderString::Type::Reference, headers.get(static_key)->value().type());",
      "406:   EXPECT_EQ(1UL, headers.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "409:   EXPECT_EQ(nullptr, headers.get(static_key));",
      "410:   EXPECT_EQ(0UL, headers.size());",
      "411:   EXPECT_TRUE(headers.empty());",
      "414:   headers.insertContentLength().value(5);",
      "415:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "416:   EXPECT_EQ(1UL, headers.size());",
      "417:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "428:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "432:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "419:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "420:   EXPECT_EQ(0UL, headers.size());",
      "421:   EXPECT_TRUE(headers.empty());",
      "424:   headers.insertContentLength().value(5);",
      "425:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "426:   EXPECT_EQ(1UL, headers.size());",
      "427:   EXPECT_FALSE(headers.empty());",
      "428:   headers.remove(Headers::get().ContentLength);",
      "429:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "430:   EXPECT_EQ(0UL, headers.size());",
      "431:   EXPECT_TRUE(headers.empty());",
      "432: }",
      "434: TEST(HeaderMapImplTest, RemoveRegex) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "440:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "447:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "452:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "446:   headers.addReference(key3, \"value\");",
      "447:   headers.addReference(key4, \"value\");",
      "448:   headers.addReference(key5, \"value\");",
      "451:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
      "452:   EXPECT_EQ(nullptr, headers.get(key1));",
      "453:   EXPECT_NE(nullptr, headers.get(key2));",
      "454:   EXPECT_EQ(nullptr, headers.get(key3));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "470:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "474:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:   EXPECT_EQ(nullptr, headers.get(key5));",
      "459:   headers.removePrefix(LowerCaseString(\"\"));",
      "460:   EXPECT_EQ(nullptr, headers.get(key2));",
      "461:   EXPECT_EQ(nullptr, headers.get(key4));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:   headers.refreshByteSize();",
      "484:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "465:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "466:   EXPECT_EQ(1UL, headers.size());",
      "467:   EXPECT_FALSE(headers.empty());",
      "468:   headers.removePrefix(LowerCaseString(\"content\"));",
      "469:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "470: }",
      "472: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "493:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "496:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "484:   headers.addReference(key2, ref_value2);",
      "485:   headers.addReference(key1, ref_value3);",
      "486:   headers.addReference(key1, ref_value4);",
      "488:   using MockCb = testing::MockFunction<void(const std::string&, const std::string&)>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "531:     const std::string bar(\"bar\");",
      "532:     headers.addReference(Headers::get().ContentLength, foo);",
      "533:     headers.addReference(Headers::get().ContentLength, bar);",
      "534:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "535:     EXPECT_EQ(1UL, headers.size());",
      "536:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "538:     HeaderMapImpl headers;",
      "539:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
      "540:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
      "541:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "542:     EXPECT_EQ(1UL, headers.size());",
      "543:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "570:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "545:     HeaderMapImpl headers;",
      "546:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
      "547:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "548:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
      "549:     EXPECT_EQ(1UL, headers.size());",
      "550:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "553:     const std::string foo(\"foo\");",
      "554:     headers.addReference(Headers::get().ContentLength, foo);",
      "555:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "556:     EXPECT_EQ(\"foo,6\", headers.ContentLength()->value().getStringView());",
      "557:     EXPECT_EQ(1UL, headers.size());",
      "558:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "568:   headers.addReference(set_cookie, foo);",
      "569:   headers.addReference(set_cookie, bar);",
      "570:   EXPECT_EQ(2UL, headers.size());",
      "572:   std::vector<absl::string_view> out;",
      "573:   Http::HeaderUtility::getAllOfHeader(headers, \"set-cookie\", out);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "580:   HeaderMapImpl headers;",
      "581:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
      "582:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
      "583:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
      "584:   EXPECT_EQ(1UL, headers.size());",
      "585: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "588:   HeaderMapImpl headers;",
      "589:   LowerCaseString foo(\"hello\");",
      "590:   headers.addReferenceKey(foo, \"world\");",
      "591:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "592:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "593: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "625:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "596:   HeaderMapImpl headers;",
      "597:   LowerCaseString foo(\"hello\");",
      "598:   headers.setReferenceKey(foo, \"world\");",
      "599:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "600:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "602:   headers.setReferenceKey(foo, \"monde\");",
      "603:   EXPECT_NE(\"monde\", headers.get(foo)->value().getStringView().data());",
      "604:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
      "605: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "637:   headers.refreshByteSize();",
      "640:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "611:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
      "612:   headers.addCopy(*lcKeyPtr, \"world\");",
      "614:   const HeaderString& value = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "632:   headers.remove(LowerCaseString(\"hello\"));",
      "636:   lcKeyPtr = std::make_unique<LowerCaseString>(std::string(\"he\") + \"llo\");",
      "637:   EXPECT_STREQ(\"hello\", lcKeyPtr->get().c_str());",
      "639:   headers.addCopy(*lcKeyPtr, 42);",
      "641:   const HeaderString& value3 = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:   headers.refreshByteSize();",
      "674:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "681:   headers.refreshByteSize();",
      "683:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "662:   headers.addCopy(cache_control, \"max-age=1345\");",
      "663:   EXPECT_EQ(\"max-age=1345\", headers.get(cache_control)->value().getStringView());",
      "664:   EXPECT_EQ(\"max-age=1345\", headers.CacheControl()->value().getStringView());",
      "665:   headers.addCopy(cache_control, \"public\");",
      "666:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "667:   headers.addCopy(cache_control, \"\");",
      "668:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "669:   headers.addCopy(cache_control, 123);",
      "670:   EXPECT_EQ(\"max-age=1345,public,123\", headers.get(cache_control)->value().getStringView());",
      "671:   headers.addCopy(cache_control, std::numeric_limits<uint64_t>::max());",
      "672:   EXPECT_EQ(\"max-age=1345,public,123,18446744073709551615\",",
      "673:             headers.get(cache_control)->value().getStringView());",
      "674: }",
      "676: TEST(HeaderMapImplTest, Equality) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "711:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "714:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "717:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "722:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "690:   LowerCaseString static_key(\"\\x90hello\");",
      "691:   std::string ref_value(\"value\");",
      "692:   headers.addReference(static_key, ref_value);",
      "693:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "694: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "844:   {",
      "845:     LowerCaseString foo(\"hello\");",
      "846:     Http::TestHeaderMapImpl headers{};",
      "847:     EXPECT_EQ(0UL, headers.size());",
      "848:     EXPECT_TRUE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "897:     EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------"
    ],
    "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
      "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1090:   TestHeaderMapImpl request_headers;",
      "1091:   HttpTestUtility::addDefaultHeaders(request_headers);",
      "1092:   std::string key = \"big\";",
      "1093:   uint32_t head_room = 77;",
      "1094:   uint32_t long_string_length =",
      "1096:   std::string long_string = std::string(long_string_length, 'q');",
      "1097:   request_headers.addCopy(key, long_string);",
      "1104:   EXPECT_CALL(request_decoder_, decodeHeaders_(_, _));",
      "1105:   request_encoder_->encodeHeaders(request_headers, true);",
      "",
      "[Removed Lines]",
      "1095:       codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;",
      "1102:   ASSERT_EQ(request_headers.byteSize() + head_room, codec_limit_kb * 1024);",
      "",
      "[Added Lines]",
      "1093:   request_headers.refreshByteSize();",
      "1097:       codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;",
      "1104:   ASSERT_EQ(request_headers.byteSize().value() + head_room, codec_limit_kb * 1024);",
      "",
      "---------------"
    ],
    "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
      "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: TEST_P(Http2IntegrationTest, RetryAttemptCount) { testRetryAttemptCountHeader(); }",
      "67: static std::string response_metadata_filter = R\"EOF(",
      "68: name: response-metadata-filter",
      "69: config: {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: TEST_P(Http2IntegrationTest, LargeRequestTrailersRejected) { testLargeRequestTrailers(66, 60); }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.cc||test/integration/http_integration.cc": [
      "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "261: IntegrationStreamDecoderPtr HttpIntegrationTest::sendRequestAndWaitForResponse(",
      "262:     const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "264:   ASSERT(codec_client_ != nullptr);",
      "266:   IntegrationStreamDecoderPtr response;",
      "",
      "[Removed Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index) {",
      "",
      "[Added Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index,",
      "264:     std::chrono::milliseconds time) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:   } else {",
      "270:     response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "271:   }",
      "274:   upstream_request_->encodeHeaders(response_headers, response_size == 0);",
      "",
      "[Removed Lines]",
      "272:   waitForNextUpstreamRequest(upstream_index);",
      "",
      "[Added Lines]",
      "273:   waitForNextUpstreamRequest(upstream_index, time);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333: }",
      "335: uint64_t",
      "337:   uint64_t upstream_with_request;",
      "339:   if (!fake_upstream_connection_) {",
      "",
      "[Removed Lines]",
      "336: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {",
      "",
      "[Added Lines]",
      "337: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
      "338:                                                 std::chrono::milliseconds connection_wait_timeout) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "361:   return upstream_with_request;",
      "362: }",
      "366: }",
      "368: void HttpIntegrationTest::checkSimpleRequestSuccess(uint64_t expected_request_size,",
      "",
      "[Removed Lines]",
      "364: void HttpIntegrationTest::waitForNextUpstreamRequest(uint64_t upstream_index) {",
      "365:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}));",
      "",
      "[Added Lines]",
      "366: void HttpIntegrationTest::waitForNextUpstreamRequest(",
      "367:     uint64_t upstream_index, std::chrono::milliseconds connection_wait_timeout) {",
      "368:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}), connection_wait_timeout);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "916:   }",
      "917: }",
      "919: void HttpIntegrationTest::testDownstreamResetBeforeResponseComplete() {",
      "920:   initialize();",
      "921:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "922: void HttpIntegrationTest::testLargeRequestTrailers(uint32_t size, uint32_t max_size) {",
      "927:   config_helper_.addConfigModifier(",
      "928:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "929:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_size); });",
      "930:   max_request_headers_kb_ = max_size;",
      "931:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
      "932:   request_trailers.addCopy(\"big\", std::string(size * 1024, 'a'));",
      "934:   initialize();",
      "936:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "937:   fake_upstreams_[0]->set_allow_unexpected_disconnects(true);",
      "939:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "940:   request_encoder_ = &encoder_decoder.first;",
      "941:   auto response = std::move(encoder_decoder.second);",
      "942:   codec_client_->sendData(*request_encoder_, 10, false);",
      "943:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "945:   if (size >= max_size && downstream_protocol_ == Http::CodecClient::Type::HTTP2) {",
      "948:     response->waitForReset();",
      "949:     codec_client_->close();",
      "950:     EXPECT_FALSE(response->complete());",
      "952:   } else {",
      "953:     waitForNextUpstreamRequest();",
      "954:     upstream_request_->encodeHeaders(default_response_headers_, true);",
      "955:     response->waitForEndStream();",
      "956:     EXPECT_TRUE(response->complete());",
      "957:   }",
      "958: }",
      "960: void HttpIntegrationTest::testManyRequestHeaders(std::chrono::milliseconds time) {",
      "961:   config_helper_.addConfigModifier(",
      "962:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "963:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "964:   max_request_headers_kb_ = 96;",
      "966:   Http::TestHeaderMapImpl big_headers{",
      "967:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
      "969:   for (int i = 0; i < 20000; i++) {",
      "970:     big_headers.addCopy(std::to_string(i), std::string(0, 'a'));",
      "971:   }",
      "972:   initialize();",
      "974:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "976:   auto response =",
      "977:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
      "979:   EXPECT_TRUE(response->complete());",
      "980:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "981: }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.h||test/integration/http_integration.h": [
      "File: test/integration/http_integration.h -> test/integration/http_integration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:   void cleanupUpstreamAndDownstream();",
      "",
      "[Removed Lines]",
      "125:   IntegrationStreamDecoderPtr",
      "126:   sendRequestAndWaitForResponse(const Http::TestHeaderMapImpl& request_headers,",
      "127:                                 uint32_t request_body_size,",
      "128:                                 const Http::TestHeaderMapImpl& response_headers,",
      "129:                                 uint32_t response_body_size, int upstream_index = 0);",
      "135:   uint64_t waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices);",
      "136:   void waitForNextUpstreamRequest(uint64_t upstream_index = 0);",
      "",
      "[Added Lines]",
      "125:   IntegrationStreamDecoderPtr sendRequestAndWaitForResponse(",
      "126:       const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "127:       const Http::TestHeaderMapImpl& response_headers, uint32_t response_body_size,",
      "128:       int upstream_index = 0, std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "134:   uint64_t waitForNextUpstreamRequest(",
      "135:       const std::vector<uint64_t>& upstream_indices,",
      "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "137:   void waitForNextUpstreamRequest(",
      "138:       uint64_t upstream_index = 0,",
      "139:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:   void testRouterUpstreamResponseBeforeRequestComplete();",
      "187:   void testTwoRequests(bool force_network_backup = false);",
      "188:   void testLargeRequestHeaders(uint32_t size, uint32_t max_size = 60);",
      "190:   void testAddEncodedTrailers();",
      "191:   void testRetry();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
      "192:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
      "194:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
      "195:   void testManyRequestHeaders(std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "",
      "---------------"
    ],
    "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
      "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "576:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "577: }",
      "579: TEST_P(DownstreamProtocolIntegrationTest, InvalidContentLength) {",
      "580:   initialize();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingConcatenated) {",
      "581:   initialize();",
      "583:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "584:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "585:                                           {\":path\", \"/test/long/url\"},",
      "586:                                           {\":scheme\", \"http\"},",
      "587:                                           {\":authority\", \"host\"},",
      "588:                                           {\"content-length\", \"0\"}};",
      "589:   std::vector<std::string> cookie_pieces;",
      "590:   for (int i = 0; i < 7000; i++) {",
      "591:     cookie_pieces.push_back(fmt::sprintf(\"a%x=b\", i));",
      "592:   }",
      "593:   request_headers.addCopy(\"cookie\", absl::StrJoin(cookie_pieces, \"; \"));",
      "594:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "596:   ASSERT_TRUE(response->complete());",
      "597:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "598: }",
      "601: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingMany) {",
      "602:   initialize();",
      "604:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "605:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "606:                                           {\":path\", \"/test/long/url\"},",
      "607:                                           {\":scheme\", \"http\"},",
      "608:                                           {\":authority\", \"host\"},",
      "609:                                           {\"content-length\", \"0\"}};",
      "610:   for (int i = 0; i < 2000; i++) {",
      "611:     request_headers.addCopy(\"cookie\", fmt::sprintf(\"a%x=b\", i));",
      "612:   }",
      "613:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "615:   ASSERT_TRUE(response->complete());",
      "616:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "617: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850:   testLargeRequestHeaders(95, 96);",
      "851: }",
      "855: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "893: TEST_P(DownstreamProtocolIntegrationTest, ManyRequestHeadersTimeout) {",
      "895:   testManyRequestHeaders(std::chrono::milliseconds(5000));",
      "896: }",
      "898: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersAccepted) {",
      "899:   testLargeRequestTrailers(60, 96);",
      "900: }",
      "902: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersRejected) {",
      "903:   testLargeRequestTrailers(66, 60);",
      "904: }",
      "906: TEST_P(DownstreamProtocolIntegrationTest, ManyTrailerHeaders) {",
      "907:   config_helper_.addConfigModifier(",
      "908:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "909:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "911:   Http::TestHeaderMapImpl request_trailers{};",
      "912:   for (int i = 0; i < 20000; i++) {",
      "913:     request_trailers.addCopy(std::to_string(i), \"\");",
      "914:   }",
      "916:   initialize();",
      "917:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "918:   auto encoder_decoder =",
      "919:       codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
      "920:                                                           {\":path\", \"/test/long/url\"},",
      "921:                                                           {\":scheme\", \"http\"},",
      "922:                                                           {\":authority\", \"host\"}});",
      "923:   request_encoder_ = &encoder_decoder.first;",
      "924:   auto response = std::move(encoder_decoder.second);",
      "925:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "926:   waitForNextUpstreamRequest();",
      "927:   upstream_request_->encodeHeaders(default_response_headers_, true);",
      "928:   response->waitForEndStream();",
      "930:   EXPECT_TRUE(upstream_request_->complete());",
      "931:   EXPECT_TRUE(response->complete());",
      "932:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "933: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e86671759938e4b0c308b8d593ab3a1ce6375be9",
      "candidate_info": {
        "commit_hash": "e86671759938e4b0c308b8d593ab3a1ce6375be9",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/e86671759938e4b0c308b8d593ab3a1ce6375be9",
        "files": [
          "include/envoy/http/filter.h",
          "include/envoy/stream_info/stream_info.h",
          "source/common/http/async_client_impl.h",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "test/common/http/conn_manager_impl_test.cc",
          "test/common/router/router_test.cc",
          "test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc",
          "test/mocks/http/mocks.h"
        ],
        "message": "http: rc details for main Envoy workflow (#6560)\n\nAdding response code details to for router and http connection manager local replies.\n\nRisk Level: low (adding strings to access logger)\nTesting: unit tests\nDocs Changes: n/a\nRelease Notes: n/a\nPart of #6542\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "include/envoy/http/filter.h||include/envoy/http/filter.h",
          "include/envoy/stream_info/stream_info.h||include/envoy/stream_info/stream_info.h",
          "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h",
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc||test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/filter.h||include/envoy/http/filter.h": [
          "File: include/envoy/http/filter.h -> include/envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:   virtual HeaderMap& addDecodedTrailers() PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:   void sendLocalReply(Code response_code, absl::string_view body_text,",
          "293:                       std::function<void(HeaderMap& headers)> modify_headers,",
          "294:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status) {",
          "295:     sendLocalReply(response_code, body_text, modify_headers, grpc_status, \"\");",
          "296:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:   virtual void sendLocalReply(Code response_code, absl::string_view body_text,",
          "300:                               std::function<void(HeaderMap& headers)> modify_headers,",
          "",
          "[Removed Lines]",
          "301:                               const absl::optional<Grpc::Status::GrpcStatus> grpc_status) PURE;",
          "",
          "[Added Lines]",
          "314:                               const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "315:                               absl::string_view details) PURE;",
          "",
          "---------------"
        ],
        "include/envoy/stream_info/stream_info.h||include/envoy/stream_info/stream_info.h": [
          "File: include/envoy/stream_info/stream_info.h -> include/envoy/stream_info/stream_info.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: struct ResponseCodeDetailValues {",
          "78:   const std::string ViaUpstream = \"via_upstream\";",
          "81: };",
          "83: typedef ConstSingleton<ResponseCodeDetailValues> ResponseCodeDetails;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   const std::string RequestPayloadTooLarge = \"request_payload_too_large\";",
          "84:   const std::string ResponsePayloadTooLArge = \"response_payload_too_large\";",
          "86:   const std::string StreamIdleTimeout = \"stream_idle_timeout\";",
          "88:   const std::string RequestOverallTimeout = \"request_overall_timeout\";",
          "90:   const std::string Overload = \"overload\";",
          "92:   const std::string LowVersion = \"low_version\";",
          "94:   const std::string MissingHost = \"missing_host_header\";",
          "96:   const std::string RequestHeadersTooLarge = \"request_headers_too_large\";",
          "98:   const std::string MissingPath = \"missing_path_rejected\";",
          "100:   const std::string AbsolutePath = \"absolute_path_rejected\";",
          "103:   const std::string PathNormalizationFailed = \"path_normalization_failed\";",
          "105:   const std::string UpgradeFailed = \"upgrade_failed\";",
          "107:   const std::string RouteNotFound = \"route_not_found\";",
          "109:   const std::string DirectResponse = \"direct_response\";",
          "112:   const std::string ClusterNotFound = \"cluster_not_found\";",
          "114:   const std::string MaintenanceMode = \"maintenance_mode\";",
          "116:   const std::string NoHealthyUpstream = \"no_healthy_upstream\";",
          "118:   const std::string UpstreamTimeout = \"upstream_response_timeout\";",
          "120:   const std::string UpstreamPerTryTimeout = \"upstream_per_try_timeout\";",
          "123:   const std::string EarlyUpstreamReset = \"upstream_reset_before_response_started\";",
          "128:   const std::string LateUpstreamReset = \"upstream_reset_after_response_started\";",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h": [
          "File: source/common/http/async_client_impl.h -> source/common/http/async_client_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   }",
          "328:   void sendLocalReply(Code code, absl::string_view body,",
          "329:                       std::function<void(HeaderMap& headers)> modify_headers,",
          "333:     Utility::sendLocalReply(",
          "334:         is_grpc_request_,",
          "335:         [this, modify_headers](HeaderMapPtr&& headers, bool end_stream) -> void {",
          "",
          "[Removed Lines]",
          "330:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status) override {",
          "332:     stream_info_.setResponseCodeDetails(\"\");",
          "",
          "[Added Lines]",
          "330:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "331:                       absl::string_view details) override {",
          "332:     stream_info_.setResponseCodeDetails(details);",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     connection_manager_.doEndStream(*this);",
          "495:   } else {",
          "496:     stream_info_.setResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "500:   }",
          "501: }",
          "",
          "[Removed Lines]",
          "497:     sendLocalReply(",
          "498:         request_headers_ != nullptr && Grpc::Common::hasGrpcContentType(*request_headers_),",
          "499:         Http::Code::RequestTimeout, \"stream timeout\", nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "497:     sendLocalReply(request_headers_ != nullptr &&",
          "498:                        Grpc::Common::hasGrpcContentType(*request_headers_),",
          "499:                    Http::Code::RequestTimeout, \"stream timeout\", nullptr, is_head_request_,",
          "500:                    absl::nullopt, StreamInfo::ResponseCodeDetails::get().StreamIdleTimeout);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:   connection_manager_.stats_.named_.downstream_rq_timeout_.inc();",
          "505:   sendLocalReply(request_headers_ != nullptr && Grpc::Common::hasGrpcContentType(*request_headers_),",
          "506:                  Http::Code::RequestTimeout, \"request timeout\", nullptr, is_head_request_,",
          "508: }",
          "510: void ConnectionManagerImpl::ActiveStream::addStreamDecoderFilterWorker(",
          "",
          "[Removed Lines]",
          "507:                  absl::nullopt);",
          "",
          "[Added Lines]",
          "508:                  absl::nullopt, StreamInfo::ResponseCodeDetails::get().RequestOverallTimeout);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "594:     connection_manager_.stats_.named_.downstream_rq_overload_close_.inc();",
          "595:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
          "596:                    Http::Code::ServiceUnavailable, \"envoy overloaded\", nullptr, is_head_request_,",
          "598:     return;",
          "599:   }",
          "",
          "[Removed Lines]",
          "597:                    absl::nullopt);",
          "",
          "[Added Lines]",
          "598:                    absl::nullopt, StreamInfo::ResponseCodeDetails::get().Overload);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "622:     stream_info_.protocol(protocol);",
          "623:     if (!connection_manager_.config_.http1Settings().accept_http_10_) {",
          "626:       return;",
          "627:     } else {",
          "",
          "[Removed Lines]",
          "625:       sendLocalReply(false, Code::UpgradeRequired, \"\", nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "626:       sendLocalReply(false, Code::UpgradeRequired, \"\", nullptr, is_head_request_, absl::nullopt,",
          "627:                      StreamInfo::ResponseCodeDetails::get().LowVersion);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645:     } else {",
          "647:       sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_), Code::BadRequest, \"\",",
          "649:       return;",
          "650:     }",
          "651:   }",
          "",
          "[Removed Lines]",
          "648:                      nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "650:                      nullptr, is_head_request_, absl::nullopt,",
          "651:                      StreamInfo::ResponseCodeDetails::get().MissingHost);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "653:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
          "654:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
          "655:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
          "657:     return;",
          "658:   }",
          "",
          "[Removed Lines]",
          "656:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "659:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
          "660:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "665:   if (!request_headers_->Path() || request_headers_->Path()->value().getStringView().empty() ||",
          "666:       request_headers_->Path()->value().getStringView()[0] != '/') {",
          "667:     connection_manager_.stats_.named_.downstream_rq_non_relative_path_.inc();",
          "668:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_), Code::NotFound, \"\", nullptr,",
          "670:     return;",
          "671:   }",
          "",
          "[Removed Lines]",
          "669:                    is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "671:     const bool has_path =",
          "672:         request_headers_->Path() && !request_headers_->Path()->value().getStringView().empty();",
          "675:                    is_head_request_, absl::nullopt,",
          "676:                    has_path ? StreamInfo::ResponseCodeDetails::get().AbsolutePath",
          "677:                             : StreamInfo::ResponseCodeDetails::get().MissingPath);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "674:   if (!ConnectionManagerUtility::maybeNormalizePath(*request_headers_,",
          "675:                                                     connection_manager_.config_)) {",
          "676:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_), Code::BadRequest, \"\",",
          "678:     return;",
          "679:   }",
          "",
          "[Removed Lines]",
          "677:                    nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "685:                    nullptr, is_head_request_, absl::nullopt,",
          "686:                    StreamInfo::ResponseCodeDetails::get().PathNormalizationFailed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "705:       connection_manager_.stats_.named_.downstream_rq_ws_on_non_ws_route_.inc();",
          "706:       sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_), Code::Forbidden, \"\",",
          "708:       return;",
          "709:     }",
          "",
          "[Removed Lines]",
          "707:                      nullptr, is_head_request_, absl::nullopt);",
          "",
          "[Added Lines]",
          "716:                      nullptr, is_head_request_, absl::nullopt,",
          "717:                      StreamInfo::ResponseCodeDetails::get().UpgradeFailed);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1114: void ConnectionManagerImpl::ActiveStream::sendLocalReply(",
          "1115:     bool is_grpc_request, Code code, absl::string_view body,",
          "1116:     const std::function<void(HeaderMap& headers)>& modify_headers, bool is_head_request,",
          "1118:   ASSERT(response_headers_ == nullptr);",
          "1121:   if (!state_.created_filter_chain_) {",
          "1122:     createFilterChain();",
          "1123:   }",
          "1124:   Utility::sendLocalReply(",
          "1125:       is_grpc_request,",
          "1126:       [this, modify_headers](HeaderMapPtr&& headers, bool end_stream) -> void {",
          "",
          "[Removed Lines]",
          "1117:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status) {",
          "",
          "[Added Lines]",
          "1127:     const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details) {",
          "1128:   ENVOY_STREAM_LOG(debug, \"Sending local reply with details {}\", *this, details);",
          "1135:   stream_info_.setResponseCodeDetails(details);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1875:   } else {",
          "1876:     parent_.connection_manager_.stats_.named_.downstream_rq_too_large_.inc();",
          "1877:     sendLocalReply(Code::PayloadTooLarge, CodeUtility::toString(Code::PayloadTooLarge), nullptr,",
          "1879:   }",
          "1880: }",
          "",
          "[Removed Lines]",
          "1878:                    absl::nullopt);",
          "",
          "[Added Lines]",
          "1890:                    absl::nullopt, StreamInfo::ResponseCodeDetails::get().RequestPayloadTooLarge);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1980:       parent_.state_.encoder_filters_streaming_ = true;",
          "1981:       allowIteration();",
          "1983:       Http::Utility::sendLocalReply(",
          "1984:           Grpc::Common::hasGrpcContentType(*parent_.request_headers_),",
          "1985:           [&](HeaderMapPtr&& response_headers, bool end_stream) -> void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1995:       parent_.stream_info_.setResponseCodeDetails(",
          "1996:           StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h": [
          "File: source/common/http/conn_manager_impl.h -> source/common/http/conn_manager_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:     void sendLocalReply(Code code, absl::string_view body,",
          "223:                         std::function<void(HeaderMap& headers)> modify_headers,",
          "227:       parent_.sendLocalReply(is_grpc_request_, code, body, modify_headers, parent_.is_head_request_,",
          "229:     }",
          "230:     void encode100ContinueHeaders(HeaderMapPtr&& headers) override;",
          "231:     void encodeHeaders(HeaderMapPtr&& headers, bool end_stream) override;",
          "",
          "[Removed Lines]",
          "224:                         const absl::optional<Grpc::Status::GrpcStatus> grpc_status) override {",
          "226:       parent_.stream_info_.setResponseCodeDetails(\"\");",
          "228:                              grpc_status);",
          "",
          "[Added Lines]",
          "224:                         const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "225:                         absl::string_view details) override {",
          "226:       parent_.stream_info_.setResponseCodeDetails(details);",
          "228:                              grpc_status, details);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:     void sendLocalReply(bool is_grpc_request, Code code, absl::string_view body,",
          "360:                         const std::function<void(HeaderMap& headers)>& modify_headers,",
          "361:                         bool is_head_request,",
          "363:     void encode100ContinueHeaders(ActiveStreamEncoderFilter* filter, HeaderMap& headers);",
          "364:     void encodeHeaders(ActiveStreamEncoderFilter* filter, HeaderMap& headers, bool end_stream);",
          "",
          "[Removed Lines]",
          "362:                         const absl::optional<Grpc::Status::GrpcStatus> grpc_status);",
          "",
          "[Added Lines]",
          "362:                         const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "363:                         absl::string_view details);",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:                      headers.Path()->value().getStringView());",
          "289:     callbacks_->streamInfo().setResponseFlag(StreamInfo::ResponseFlag::NoRouteFound);",
          "291:     return Http::FilterHeadersStatus::StopIteration;",
          "292:   }",
          "",
          "[Removed Lines]",
          "290:     callbacks_->sendLocalReply(Http::Code::NotFound, \"\", nullptr, absl::nullopt);",
          "",
          "[Added Lines]",
          "290:     callbacks_->sendLocalReply(Http::Code::NotFound, \"\", nullptr, absl::nullopt,",
          "291:                                StreamInfo::ResponseCodeDetails::get().RouteNotFound);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:           }",
          "307:           direct_response->finalizeResponseHeaders(response_headers, callbacks_->streamInfo());",
          "308:         },",
          "310:     return Http::FilterHeadersStatus::StopIteration;",
          "311:   }",
          "",
          "[Removed Lines]",
          "309:         absl::nullopt);",
          "",
          "[Added Lines]",
          "310:         absl::nullopt, StreamInfo::ResponseCodeDetails::get().DirectResponse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:     callbacks_->streamInfo().setResponseFlag(StreamInfo::ResponseFlag::NoRouteFound);",
          "321:     callbacks_->sendLocalReply(route_entry_->clusterNotFoundResponseCode(), \"\", nullptr,",
          "323:     return Http::FilterHeadersStatus::StopIteration;",
          "324:   }",
          "325:   cluster_ = cluster->info();",
          "",
          "[Removed Lines]",
          "322:                                absl::nullopt);",
          "",
          "[Added Lines]",
          "323:                                absl::nullopt,",
          "324:                                StreamInfo::ResponseCodeDetails::get().ClusterNotFound);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346:             headers.insertEnvoyOverloaded().value(Http::Headers::get().EnvoyOverloadedValues.True);",
          "347:           }",
          "348:         },",
          "350:     cluster_->stats().upstream_rq_maintenance_mode_.inc();",
          "351:     return Http::FilterHeadersStatus::StopIteration;",
          "352:   }",
          "",
          "[Removed Lines]",
          "349:         absl::nullopt);",
          "",
          "[Added Lines]",
          "351:         absl::nullopt, StreamInfo::ResponseCodeDetails::get().MaintenanceMode);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "420:   callbacks_->streamInfo().setResponseFlag(StreamInfo::ResponseFlag::NoHealthyUpstream);",
          "421:   chargeUpstreamCode(Http::Code::ServiceUnavailable, nullptr, false);",
          "422:   callbacks_->sendLocalReply(Http::Code::ServiceUnavailable, \"no healthy upstream\", nullptr,",
          "424: }",
          "426: Http::FilterDataStatus Filter::decodeData(Buffer::Instance& data, bool end_stream) {",
          "",
          "[Removed Lines]",
          "423:                              absl::nullopt);",
          "",
          "[Added Lines]",
          "425:                              absl::nullopt,",
          "426:                              StreamInfo::ResponseCodeDetails::get().NoHealthyUpstream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:     upstream_requests_.front()->resetStream();",
          "559:   }",
          "562: }",
          "564: void Filter::onPerTryTimeout(UpstreamRequest& upstream_request) {",
          "",
          "[Removed Lines]",
          "561:   onUpstreamTimeoutAbort(StreamInfo::ResponseFlag::UpstreamRequestTimeout);",
          "",
          "[Added Lines]",
          "564:   onUpstreamTimeoutAbort(StreamInfo::ResponseFlag::UpstreamRequestTimeout,",
          "565:                          StreamInfo::ResponseCodeDetails::get().UpstreamTimeout);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "568:     return;",
          "569:   }",
          "572: }",
          "574: void Filter::updateOutlierDetection(Http::Code code, UpstreamRequest& upstream_request) {",
          "",
          "[Removed Lines]",
          "571:   onUpstreamTimeoutAbort(StreamInfo::ResponseFlag::UpstreamRequestTimeout);",
          "",
          "[Added Lines]",
          "575:   onUpstreamTimeoutAbort(StreamInfo::ResponseFlag::UpstreamRequestTimeout,",
          "576:                          StreamInfo::ResponseCodeDetails::get().UpstreamPerTryTimeout);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "577:   }",
          "578: }",
          "581:   const absl::string_view body =",
          "582:       timeout_response_code_ == Http::Code::GatewayTimeout ? \"upstream request timeout\" : \"\";",
          "584: }",
          "586: void Filter::onUpstreamAbort(Http::Code code, StreamInfo::ResponseFlag response_flags,",
          "588:   ASSERT(upstream_requests_.size() <= 1);",
          "",
          "[Removed Lines]",
          "580: void Filter::onUpstreamTimeoutAbort(StreamInfo::ResponseFlag response_flags) {",
          "583:   onUpstreamAbort(timeout_response_code_, response_flags, body, false);",
          "587:                              absl::string_view body, bool dropped) {",
          "",
          "[Added Lines]",
          "585: void Filter::onUpstreamTimeoutAbort(StreamInfo::ResponseFlag response_flags,",
          "586:                                     absl::string_view details) {",
          "589:   onUpstreamAbort(timeout_response_code_, response_flags, body, false, details);",
          "593:                              absl::string_view body, bool dropped, absl::string_view details) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "594:       config_.stats_.rq_reset_after_downstream_response_started_.inc();",
          "595:     }",
          "597:     cleanup();",
          "598:     callbacks_->resetStream();",
          "599:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:     callbacks_->streamInfo().setResponseCodeDetails(details);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "622:             headers.insertEnvoyOverloaded().value(Http::Headers::get().EnvoyOverloadedValues.True);",
          "623:           }",
          "624:         },",
          "626:   }",
          "627: }",
          "",
          "[Removed Lines]",
          "625:         absl::nullopt);",
          "",
          "[Added Lines]",
          "632:         absl::nullopt, details);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "677:   const bool dropped = reset_reason == Http::StreamResetReason::Overflow;",
          "678:   callbacks_->streamInfo().setUpstreamTransportFailureReason(transport_failure_reason);",
          "680: }",
          "682: StreamInfo::ResponseFlag",
          "",
          "[Removed Lines]",
          "679:   onUpstreamAbort(Http::Code::ServiceUnavailable, response_flags, body, dropped);",
          "",
          "[Added Lines]",
          "686:   const std::string& basic_details =",
          "687:       downstream_response_started_ ? StreamInfo::ResponseCodeDetails::get().LateUpstreamReset",
          "688:                                    : StreamInfo::ResponseCodeDetails::get().EarlyUpstreamReset;",
          "689:   const std::string details = absl::StrCat(",
          "690:       basic_details, \"{\", Http::Utility::resetReasonToString(reset_reason),",
          "691:       transport_failure_reason.empty() ? \"\" : absl::StrCat(\",\", transport_failure_reason), \"}\");",
          "692:   onUpstreamAbort(Http::Code::ServiceUnavailable, response_flags, body, dropped, details);",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   void onUpstream100ContinueHeaders(Http::HeaderMapPtr&& headers,",
          "386:                                     UpstreamRequest& upstream_request);",
          "392:   void onUpstreamAbort(Http::Code code, StreamInfo::ResponseFlag response_flag,",
          "394:   void onUpstreamHeaders(uint64_t response_code, Http::HeaderMapPtr&& headers,",
          "395:                          UpstreamRequest& upstream_request, bool end_stream);",
          "396:   void onUpstreamData(Buffer::Instance& data, UpstreamRequest& upstream_request, bool end_stream);",
          "",
          "[Removed Lines]",
          "388:   void onUpstreamTimeoutAbort(StreamInfo::ResponseFlag response_flag);",
          "393:                        absl::string_view body, bool dropped);",
          "",
          "[Added Lines]",
          "388:   void onUpstreamTimeoutAbort(StreamInfo::ResponseFlag response_flag, absl::string_view details);",
          "393:                        absl::string_view body, bool dropped, absl::string_view details);",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
          "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:   EXPECT_CALL(*filter, encodeHeaders(_, true));",
          "553:   EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
          "555:         EXPECT_EQ(\"404\", headers.Status()->value().getStringView());",
          "556:       }));",
          "557:   EXPECT_CALL(*filter, onDestroy());",
          "",
          "[Removed Lines]",
          "554:       .WillOnce(Invoke([](const HeaderMap& headers, bool) -> void {",
          "",
          "[Added Lines]",
          "554:       .WillOnce(Invoke([&](const HeaderMap& headers, bool) -> void {",
          "556:         EXPECT_EQ(\"absolute_path_rejected\",",
          "557:                   filter->decoder_callbacks_->streamInfo().responseCodeDetails().value());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:   EXPECT_CALL(*filter, encodeHeaders(_, true));",
          "590:   EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
          "592:         EXPECT_EQ(\"400\", headers.Status()->value().getStringView());",
          "593:       }));",
          "594:   EXPECT_CALL(*filter, onDestroy());",
          "",
          "[Removed Lines]",
          "591:       .WillOnce(Invoke([](const HeaderMap& headers, bool) -> void {",
          "",
          "[Added Lines]",
          "593:       .WillOnce(Invoke([&](const HeaderMap& headers, bool) -> void {",
          "595:         EXPECT_EQ(\"path_normalization_failed\",",
          "596:                   filter->decoder_callbacks_->streamInfo().responseCodeDetails().value());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1191:                           const StreamInfo::StreamInfo& stream_info) {",
          "1192:         EXPECT_TRUE(stream_info.responseCode());",
          "1193:         EXPECT_EQ(stream_info.responseCode().value(), uint32_t(400));",
          "1194:         EXPECT_NE(nullptr, stream_info.downstreamLocalAddress());",
          "1195:         EXPECT_NE(nullptr, stream_info.downstreamRemoteAddress());",
          "1196:         EXPECT_NE(nullptr, stream_info.downstreamDirectRemoteAddress());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198:         EXPECT_EQ(\"missing_host_header\", stream_info.responseCodeDetails().value());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3130:   Buffer::OwnedImpl data(\"A longer string\");",
          "3131:   decoder_filters_[0]->callbacks_->addDecodedData(data, false);",
          "3132:   const auto rc_details = encoder_filters_[1]->callbacks_->streamInfo().responseCodeDetails();",
          "3135: }",
          "",
          "[Removed Lines]",
          "3133:   EXPECT_TRUE(rc_details.has_value());",
          "3134:   EXPECT_EQ(\"\", rc_details.value());",
          "",
          "[Added Lines]",
          "3138:   EXPECT_EQ(\"request_payload_too_large\", rc_details.value());",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:   router_.decodeHeaders(headers, true);",
          "260:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_route\").value());",
          "261:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "262: }",
          "264: TEST_F(RouterTest, ClusterNotFound) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   EXPECT_EQ(callbacks_.details_, \"route_not_found\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:   router_.decodeHeaders(headers, true);",
          "272:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_cluster\").value());",
          "273:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "274: }",
          "276: TEST_F(RouterTest, PoolFailureWithPriority) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:   EXPECT_EQ(callbacks_.details_, \"cluster_not_found\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:   HttpTestUtility::addDefaultHeaders(headers);",
          "302:   router_.decodeHeaders(headers, true);",
          "303:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "304: }",
          "306: TEST_F(RouterTest, Http1Upstream) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   EXPECT_EQ(callbacks_.details_, \"upstream_reset_before_response_started{connection failure}\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:   HttpTestUtility::addDefaultHeaders(headers);",
          "501:   router_.decodeHeaders(headers, true);",
          "503:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"200\"}});",
          "504:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:   absl::string_view rc_details2 = \"via_upstream\";",
          "507:   EXPECT_CALL(callbacks_.stream_info_, setResponseCodeDetails(rc_details2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "696:                     .counter(\"upstream_rq_maintenance_mode\")",
          "697:                     .value());",
          "698:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "699: }",
          "701: TEST_F(RouterTest, MaintenanceMode) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   EXPECT_EQ(callbacks_.details_, \"no_healthy_upstream\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "720:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->load_report_stats_store_",
          "721:                     .counter(\"upstream_rq_dropped\")",
          "722:                     .value());",
          "723: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:   EXPECT_EQ(callbacks_.details_, \"maintenance_mode\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1555:   Http::HeaderMapPtr response_headers(new Http::TestHeaderMapImpl{{\":status\", \"200\"}});",
          "1556:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_, putHttpResponseCode(200));",
          "1557:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "1558:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_, putHttpResponseCode(503));",
          "1559:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1565:   absl::string_view rc_details2 = \"upstream_reset_after_response_started{remote reset}\";",
          "1566:   EXPECT_CALL(callbacks_.stream_info_, setResponseCodeDetails(rc_details2));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3112:   EXPECT_CALL(cm_.conn_pool_.host_->outlier_detector_, putHttpResponseCode(503));",
          "3113:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "3114: }",
          "3116: class RouterTestChildSpan : public RouterTestBase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3123:   EXPECT_EQ(callbacks_.details_, \"upstream_reset_before_response_started{remote reset}\");",
          "",
          "---------------"
        ],
        "test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc||test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc": [
          "File: test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc -> test/extensions/access_loggers/http_grpc/grpc_access_log_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     response:",
          "135:       response_code:",
          "136:         value: 404",
          "137:       response_headers_bytes: 54",
          "138: )EOF\",",
          "139:                                                   VersionInfo::version())));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:       response_code_details: \"route_not_found\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:     response:",
          "158:       response_code:",
          "159:         value: 404",
          "160:       response_headers_bytes: 54",
          "161: )EOF\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:       response_code_details: \"route_not_found\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:     response:",
          "205:       response_code:",
          "206:         value: 404",
          "207:       response_headers_bytes: 54",
          "208: )EOF\",",
          "209:                                                   VersionInfo::version())));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:       response_code_details: \"route_not_found\"",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   void sendLocalReply(Code code, absl::string_view body,",
          "154:                       std::function<void(HeaderMap& headers)> modify_headers,",
          "156:     Utility::sendLocalReply(",
          "157:         is_grpc_request_,",
          "158:         [this, modify_headers](HeaderMapPtr&& headers, bool end_stream) -> void {",
          "",
          "[Removed Lines]",
          "155:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status) override {",
          "",
          "[Added Lines]",
          "155:                       const absl::optional<Grpc::Status::GrpcStatus> grpc_status,",
          "156:                       absl::string_view details) override {",
          "157:     details_ = std::string(details);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   std::list<DownstreamWatermarkCallbacks*> callbacks_{};",
          "192:   testing::NiceMock<Tracing::MockSpan> active_span_;",
          "193:   testing::NiceMock<Tracing::MockConfig> tracing_config_;",
          "194:   bool is_grpc_request_{};",
          "195:   bool is_head_request_{false};",
          "196:   bool stream_destroyed_{};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   std::string details_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d9d95f891fb37fa57e77512f06b89c021bc94b9",
      "candidate_info": {
        "commit_hash": "7d9d95f891fb37fa57e77512f06b89c021bc94b9",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7d9d95f891fb37fa57e77512f06b89c021bc94b9",
        "files": [
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "test/integration/BUILD",
          "test/integration/http2_upstream_integration_test.cc"
        ],
        "message": "[router] Fix byte size logging in HTTP gRPC upstream logs (#8836)\n\nRefreshes byte size on downstream headers in `router.cc`. Enabling gRPC upstream\nlogs will write the byte size of these headers to the logs. Without the refresh,\ncalling `byteSize()` on this header map will result in a bad optional access.\n\nTesting: Added test that configures upstream logs with `envoy.http_grpc_access_log`.\nWould otherwise result in a crash due to instance of `absl::bad_optional_access`\n\nFixes #8828\n\nSigned-off-by: Asra Ali <asraa@google.com>\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "test/integration/http2_upstream_integration_test.cc||test/integration/http2_upstream_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc"
          ],
          "candidate": [
            "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
          "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     request_properties->set_original_path(",
          "99:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
          "100:   }",
          "102:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
          "103:   if (request_headers.Method() != nullptr) {",
          "104:     envoy::api::v2::core::RequestMethod method =",
          "",
          "[Removed Lines]",
          "101:   request_properties->set_request_headers_bytes(request_headers.byteSize().value());",
          "",
          "[Added Lines]",
          "103:   request_properties->set_request_headers_bytes(request_headers.byteSizeInternal());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:   if (stream_info.responseCodeDetails()) {",
          "127:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
          "128:   }",
          "129:   response_properties->set_response_headers_bytes(response_headers.byteSize().value());",
          "130:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
          "131:   if (!response_headers_to_log_.empty()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   ASSERT(response_headers.byteSize().has_value());",
          "",
          "---------------"
        ],
        "test/integration/http2_upstream_integration_test.cc||test/integration/http2_upstream_integration_test.cc": [
          "File: test/integration/http2_upstream_integration_test.cc -> test/integration/http2_upstream_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:   EXPECT_EQ(\"503\", response->headers().Status()->value().getStringView());",
          "439: }",
          "441: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: TEST_P(Http2UpstreamIntegrationTest, ConfigureHttpOverGrpcLogs) {",
          "445:   config_helper_.addConfigModifier(",
          "446:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "447:           -> void {",
          "448:         const std::string access_log_name =",
          "449:             TestEnvironment::temporaryPath(TestUtility::uniqueFilename());",
          "451:         const std::string yaml_string = R\"EOF(",
          "452: name: envoy.router",
          "453: typed_config:",
          "454:   \"@type\": type.googleapis.com/envoy.config.filter.http.router.v2.Router",
          "455:   upstream_log:",
          "456:     name: envoy.http_grpc_access_log",
          "457:     filter:",
          "458:       not_health_check_filter: {}",
          "459:     typed_config:",
          "460:       \"@type\": type.googleapis.com/envoy.config.accesslog.v2.HttpGrpcAccessLogConfig",
          "461:       common_config:",
          "462:         log_name: foo",
          "463:         grpc_service:",
          "464:           envoy_grpc:",
          "465:             cluster_name: cluster_0",
          "466:   )EOF\";",
          "468:         hcm.clear_http_filters();",
          "469:         TestUtility::loadFromYaml(yaml_string, *hcm.add_http_filters());",
          "470:       });",
          "472:   initialize();",
          "475:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "476:   auto response = codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "477:   waitForNextUpstreamRequest();",
          "480:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "481:   response->waitForEndStream();",
          "482:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "483: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43ab77f86fcbc4c7eee4f70f6b630d6cfdbc8686",
      "candidate_info": {
        "commit_hash": "43ab77f86fcbc4c7eee4f70f6b630d6cfdbc8686",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/43ab77f86fcbc4c7eee4f70f6b630d6cfdbc8686",
        "files": [
          "test/extensions/clusters/aggregate/cluster_integration_test.cc",
          "test/integration/cds_integration_test.cc",
          "test/integration/http2_integration_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/idle_timeout_integration_test.cc",
          "test/integration/integration_test.cc",
          "test/integration/local_reply_integration_test.cc",
          "test/integration/overload_integration_test.cc",
          "test/integration/protocol_integration_test.cc",
          "test/integration/tcp_tunneling_integration_test.cc",
          "test/integration/vhds_integration_test.cc",
          "test/integration/websocket_integration_test.h"
        ],
        "message": "test: changing waitForDisconnect to only wait for the default timeout (#11428)\n\nThis way if waitForDisconect fails one test case should fail rather than the entire test hanging.\nAlso tagged it with ABSL_MUST_USE_RESULT so tests which wait for a disconnect before doing work would correctly fast-fail.\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "test/extensions/clusters/aggregate/cluster_integration_test.cc||test/extensions/clusters/aggregate/cluster_integration_test.cc",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc",
          "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/idle_timeout_integration_test.cc||test/integration/idle_timeout_integration_test.cc",
          "test/integration/integration_test.cc||test/integration/integration_test.cc",
          "test/integration/local_reply_integration_test.cc||test/integration/local_reply_integration_test.cc",
          "test/integration/overload_integration_test.cc||test/integration/overload_integration_test.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc",
          "test/integration/vhds_integration_test.cc||test/integration/vhds_integration_test.cc",
          "test/integration/websocket_integration_test.h||test/integration/websocket_integration_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/extensions/clusters/aggregate/cluster_integration_test.cc||test/extensions/clusters/aggregate/cluster_integration_test.cc": [
          "File: test/extensions/clusters/aggregate/cluster_integration_test.cc -> test/extensions/clusters/aggregate/cluster_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "201:   cleanupUpstreamAndDownstream();",
          "205:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "202:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "202:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   testRouterHeaderOnlyRequestAndResponse(nullptr, FirstUpstreamIndex, \"/aggregatecluster\");",
          "220:   cleanupUpstreamAndDownstream();",
          "224:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "221:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "221:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:   testRouterHeaderOnlyRequestAndResponse(nullptr, FirstUpstreamIndex, \"/aggregatecluster\");",
          "232:   cleanupUpstreamAndDownstream();",
          "236:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "233:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "233:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:   testRouterHeaderOnlyRequestAndResponse(nullptr, SecondUpstreamIndex, \"/aggregatecluster\");",
          "244:   cleanupUpstreamAndDownstream();",
          "248:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "245:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "245:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "165:   cleanupUpstreamAndDownstream();",
          "169:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "166:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "166:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex1, \"/cluster1\");",
          "188:   cleanupUpstreamAndDownstream();",
          "192:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "189:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "189:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex2, \"/cluster2\");",
          "200:   cleanupUpstreamAndDownstream();",
          "204:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "201:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "201:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex2, \"/cluster2\");",
          "213:   cleanupUpstreamAndDownstream();",
          "217:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"42\", {}, {}, {}));",
          "",
          "[Removed Lines]",
          "214:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "214:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex1, \"/cluster1\");",
          "238:   cleanupUpstreamAndDownstream();",
          "242:   AssertionResult result = xds_connection_->close();",
          "",
          "[Removed Lines]",
          "239:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "239:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "266:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex1, \"/cluster1\");",
          "267:   cleanupUpstreamAndDownstream();",
          "270:   testRouterHeaderOnlyRequestAndResponse(nullptr, UpstreamIndex2, \"/cluster2\");",
          "271:   cleanupUpstreamAndDownstream();",
          "273: }",
          "275: } // namespace",
          "",
          "[Removed Lines]",
          "268:   codec_client_->waitForDisconnect();",
          "272:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "268:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "272:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
          "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:   }",
          "516:   ASSERT_FALSE(response->complete());",
          "517: }",
          "",
          "[Removed Lines]",
          "515:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "515:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:   return {encoder, std::move(response)};",
          "153: }",
          "156:   Event::TimerPtr wait_timer;",
          "157:   bool wait_timer_triggered = false;",
          "158:   if (time_to_wait.count()) {",
          "",
          "[Removed Lines]",
          "155: bool IntegrationCodecClient::waitForDisconnect(std::chrono::milliseconds time_to_wait) {",
          "",
          "[Added Lines]",
          "155: AssertionResult IntegrationCodecClient::waitForDisconnect(std::chrono::milliseconds time_to_wait) {",
          "156:   if (disconnected_) {",
          "157:     return AssertionSuccess();",
          "158:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   }",
          "173:   if (wait_timer_triggered && !disconnected_) {",
          "175:   }",
          "176:   EXPECT_TRUE(disconnected_);",
          "179: }",
          "181: void IntegrationCodecClient::ConnectionCallbacks::onEvent(Network::ConnectionEvent event) {",
          "",
          "[Removed Lines]",
          "174:     return false;",
          "178:   return true;",
          "",
          "[Added Lines]",
          "177:     return AssertionFailure() << \"Timed out waiting for disconnect\";",
          "181:   return AssertionSuccess();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:   response->waitForEndStream();",
          "539:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "541:   } else {",
          "542:     codec_client_->close();",
          "543:   }",
          "",
          "[Removed Lines]",
          "540:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "543:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "564:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "566:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "568:   } else {",
          "569:     response->waitForReset();",
          "570:     codec_client_->close();",
          "",
          "[Removed Lines]",
          "567:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "570:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "661:   }",
          "663:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "665:   } else {",
          "666:     codec_client_->close();",
          "667:   }",
          "",
          "[Removed Lines]",
          "664:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "667:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "992:     auto response = std::move(encoder_decoder.second);",
          "994:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "996:       EXPECT_TRUE(response->complete());",
          "997:       EXPECT_EQ(\"431\", response->headers().getStatusValue());",
          "998:     } else {",
          "",
          "[Removed Lines]",
          "995:       codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "998:       ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1032:   if (size >= max_size) {",
          "1033:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1035:       EXPECT_TRUE(response->complete());",
          "1036:       EXPECT_EQ(\"431\", response->headers().getStatusValue());",
          "1037:     } else {",
          "",
          "[Removed Lines]",
          "1034:       codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1037:       ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1236:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_rq_max_duration_reached\", 1);",
          "1238:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1240:   } else {",
          "1241:     response->waitForReset();",
          "1242:     codec_client_->close();",
          "",
          "[Removed Lines]",
          "1239:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1242:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1281:   if (invoke_retry_upstream_disconnect) {",
          "1282:     test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_rq_max_duration_reached\", 2);",
          "1283:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1285:     } else {",
          "1286:       response->waitForReset();",
          "1287:       codec_client_->close();",
          "",
          "[Removed Lines]",
          "1284:       codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1287:       ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   void sendMetadata(Http::RequestEncoder& encoder, Http::MetadataMap metadata_map);",
          "39:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr>",
          "40:   startRequest(const Http::RequestHeaderMap& headers);",
          "42:   Network::ClientConnection* connection() const { return connection_.get(); }",
          "43:   Network::ConnectionEvent lastConnectionEvent() const { return last_connection_event_; }",
          "44:   Network::Connection& rawConnection() { return *connection_; }",
          "",
          "[Removed Lines]",
          "41:   bool waitForDisconnect(std::chrono::milliseconds time_to_wait = std::chrono::milliseconds(0));",
          "",
          "[Added Lines]",
          "41:   ABSL_MUST_USE_RESULT AssertionResult",
          "42:   waitForDisconnect(std::chrono::milliseconds time_to_wait = TestUtility::DefaultTimeout);",
          "",
          "---------------"
        ],
        "test/integration/idle_timeout_integration_test.cc||test/integration/idle_timeout_integration_test.cc": [
          "File: test/integration/idle_timeout_integration_test.cc -> test/integration/idle_timeout_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   void waitForTimeout(IntegrationStreamDecoder& response, absl::string_view stat_name = \"\",",
          "67:                       absl::string_view stat_prefix = \"http.config_test\") {",
          "68:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "70:     } else {",
          "71:       response.waitForReset();",
          "72:       codec_client_->close();",
          "",
          "[Removed Lines]",
          "69:       codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "69:       ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/integration_test.cc||test/integration/integration_test.cc": [
          "File: test/integration/integration_test.cc -> test/integration/integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:                                                                           {\":authority\", \"host\"},",
          "152:                                                                           {\"connection\", \"close\"}});",
          "153:   response->waitForEndStream();",
          "156:   EXPECT_TRUE(response->complete());",
          "157:   EXPECT_THAT(response->headers(), HttpStatusIs(\"200\"));",
          "",
          "[Removed Lines]",
          "154:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "154:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:   ASSERT_TRUE(fake_upstream_connection->waitForData(187, &data));",
          "810:   ASSERT_TRUE(fake_upstream_connection->write(\"bad protocol data!\"));",
          "811:   ASSERT_TRUE(fake_upstream_connection->waitForDisconnect());",
          "814:   EXPECT_TRUE(response->complete());",
          "815:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "",
          "[Removed Lines]",
          "812:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "812:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "953:   EXPECT_THAT(upstream_request_->headers(), HeaderValueOf(Headers::get().Via, \"foo, bar\"));",
          "954:   upstream_request_->encodeHeaders(Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}}, true);",
          "955:   response->waitForEndStream();",
          "957:   EXPECT_TRUE(response->complete());",
          "958:   EXPECT_THAT(response->headers(), HttpStatusIs(\"200\"));",
          "959:   EXPECT_THAT(response->headers(), HeaderValueOf(Headers::get().Via, \"bar\"));",
          "",
          "[Removed Lines]",
          "956:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "956:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1134:                                                                           {\":authority\", \"host\"},",
          "1135:                                                                           {\"connection\", \"close\"}});",
          "1136:   response->waitForEndStream();",
          "1139:   EXPECT_TRUE(response->complete());",
          "1140:   EXPECT_THAT(response->headers(), HttpStatusIs(\"200\"));",
          "",
          "[Removed Lines]",
          "1137:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1137:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1155:                                                                           {\":authority\", \"host\"},",
          "1156:                                                                           {\"connection\", \"close\"}});",
          "1157:   response->waitForEndStream();",
          "1160:   EXPECT_TRUE(response->complete());",
          "1161:   EXPECT_THAT(response->headers(), HttpStatusIs(\"500\"));",
          "",
          "[Removed Lines]",
          "1158:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1158:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/local_reply_integration_test.cc||test/integration/local_reply_integration_test.cc": [
          "File: test/integration/local_reply_integration_test.cc -> test/integration/local_reply_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   response->waitForEndStream();",
          "64:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "66:   } else {",
          "67:     codec_client_->close();",
          "68:   }",
          "",
          "[Removed Lines]",
          "65:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "65:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   response->waitForEndStream();",
          "136:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "138:   } else {",
          "139:     codec_client_->close();",
          "140:   }",
          "",
          "[Removed Lines]",
          "137:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "137:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   response->waitForEndStream();",
          "208:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "210:   } else {",
          "211:     codec_client_->close();",
          "212:   }",
          "",
          "[Removed Lines]",
          "209:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "209:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:   response->waitForEndStream();",
          "269:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "271:   } else {",
          "272:     codec_client_->close();",
          "273:   }",
          "",
          "[Removed Lines]",
          "270:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "270:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "324:   response->waitForEndStream();",
          "326:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "328:   } else {",
          "329:     codec_client_->close();",
          "330:   }",
          "",
          "[Removed Lines]",
          "327:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "327:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/overload_integration_test.cc||test/integration/overload_integration_test.cc": [
          "File: test/integration/overload_integration_test.cc -> test/integration/overload_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   Http::TestRequestHeaderMapImpl request_headers{",
          "119:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
          "120:   auto response = sendRequestAndWaitForResponse(request_headers, 1, default_response_headers_, 1);",
          "123:   EXPECT_TRUE(response->complete());",
          "124:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "",
          "[Removed Lines]",
          "121:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "121:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:   }",
          "301:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_cx_drain_close\")->value(), 1L);",
          "304:   EXPECT_TRUE(response->complete());",
          "306:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "",
          "[Removed Lines]",
          "303:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "303:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "992:                                      {\"foo_bar\", \"baz\"}});",
          "994:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "996:     ASSERT_TRUE(response->complete());",
          "997:     EXPECT_EQ(\"400\", response->headers().getStatusValue());",
          "998:   } else {",
          "",
          "[Removed Lines]",
          "995:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "995:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:                                                                  {\"content-length\", \"-1\"}});",
          "1128:   auto response = std::move(encoder_decoder.second);",
          "1132:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1133:     ASSERT_TRUE(response->complete());",
          "",
          "[Removed Lines]",
          "1130:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1130:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1158:   auto response = std::move(encoder_decoder.second);",
          "1160:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1162:   } else {",
          "1163:     response->waitForReset();",
          "1164:     codec_client_->close();",
          "",
          "[Removed Lines]",
          "1161:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1161:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1183:                                                                  {\"content-length\", \"3,2\"}});",
          "1184:   auto response = std::move(encoder_decoder.second);",
          "1188:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1189:     ASSERT_TRUE(response->complete());",
          "",
          "[Removed Lines]",
          "1186:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1186:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1212:   auto response = std::move(encoder_decoder.second);",
          "1214:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1216:   } else {",
          "1217:     response->waitForReset();",
          "1218:     codec_client_->close();",
          "",
          "[Removed Lines]",
          "1215:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1215:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1420:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "1422:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "1424:     EXPECT_TRUE(response->complete());",
          "1425:     EXPECT_EQ(\"431\", response->headers().getStatusValue());",
          "1426:   } else {",
          "",
          "[Removed Lines]",
          "1423:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1423:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1543:     auto encoder_decoder = codec_client_->startRequest(request_headers);",
          "1544:     request_encoder_ = &encoder_decoder.first;",
          "1545:     auto response = std::move(encoder_decoder.second);",
          "1547:     EXPECT_TRUE(response->complete());",
          "1548:     EXPECT_EQ(\"400\", response->headers().getStatusValue());",
          "1549:   } else {",
          "",
          "[Removed Lines]",
          "1546:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1546:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1845:     ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "1846:   }",
          "1849: }",
          "",
          "[Removed Lines]",
          "1848:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1848:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1954:   } else {",
          "1958:     ASSERT_FALSE(response->complete());",
          "1959:   }",
          "1960: }",
          "",
          "[Removed Lines]",
          "1957:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1957:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1973:     EXPECT_TRUE(response->complete());",
          "1974:   } else {",
          "1975:     response->waitForReset();",
          "1977:   }",
          "1978: }",
          "",
          "[Removed Lines]",
          "1976:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "1976:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc": [
          "File: test/integration/tcp_tunneling_integration_test.cc -> test/integration/tcp_tunneling_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_rq_max_duration_reached\", 1);",
          "179:   if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "181:   } else {",
          "182:     response_->waitForReset();",
          "183:     codec_client_->close();",
          "",
          "[Removed Lines]",
          "180:     codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "180:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/vhds_integration_test.cc||test/integration/vhds_integration_test.cc": [
          "File: test/integration/vhds_integration_test.cc -> test/integration/vhds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "208:   cleanupUpstreamAndDownstream();",
          "212:   sendSotwDiscoveryResponse<envoy::config::route::v3::RouteConfiguration>(",
          "",
          "[Removed Lines]",
          "209:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "209:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/\", \"vhost.first\");",
          "233:   cleanupUpstreamAndDownstream();",
          "235: }",
          "237: class VhdsIntegrationTest : public HttpIntegrationTest,",
          "",
          "[Removed Lines]",
          "234:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "234:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392: TEST_P(VhdsIntegrationTest, RdsUpdateWithoutVHDSChangesDoesNotRestartVHDS) {",
          "393:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/\", \"host\");",
          "394:   cleanupUpstreamAndDownstream();",
          "398:   sendSotwDiscoveryResponse<envoy::config::route::v3::RouteConfiguration>(",
          "",
          "[Removed Lines]",
          "395:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "395:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "404:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/\", \"host\");",
          "405:   cleanupUpstreamAndDownstream();",
          "407: }",
          "",
          "[Removed Lines]",
          "406:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "406:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1);",
          "418:   cleanupUpstreamAndDownstream();",
          "422:   sendDeltaDiscoveryResponse<envoy::config::route::v3::VirtualHost>(",
          "",
          "[Removed Lines]",
          "419:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "419:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/one\", \"vhost.first\");",
          "428:   cleanupUpstreamAndDownstream();",
          "430:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/two\", \"vhost.second\");",
          "431:   cleanupUpstreamAndDownstream();",
          "435:   sendDeltaDiscoveryResponse<envoy::config::route::v3::VirtualHost>(",
          "",
          "[Removed Lines]",
          "429:   codec_client_->waitForDisconnect();",
          "432:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "429:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "432:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "476:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1);",
          "477:   cleanupUpstreamAndDownstream();",
          "481:   sendDeltaDiscoveryResponse<envoy::config::route::v3::VirtualHost>(",
          "",
          "[Removed Lines]",
          "478:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "478:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "487:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "488:   cleanupUpstreamAndDownstream();",
          "490:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/one\", \"vhost.first\");",
          "491:   cleanupUpstreamAndDownstream();",
          "493:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/two\", \"vhost.second\");",
          "494:   cleanupUpstreamAndDownstream();",
          "498:   sendDeltaDiscoveryResponse<envoy::config::route::v3::VirtualHost>(",
          "",
          "[Removed Lines]",
          "489:   codec_client_->waitForDisconnect();",
          "492:   codec_client_->waitForDisconnect();",
          "495:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "489:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "492:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "495:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "504:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "505:   cleanupUpstreamAndDownstream();",
          "508:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "509:   Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
          "",
          "[Removed Lines]",
          "506:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "506:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "539:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1);",
          "540:   cleanupUpstreamAndDownstream();",
          "544:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "545:   cleanupUpstreamAndDownstream();",
          "549:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "",
          "[Removed Lines]",
          "541:   codec_client_->waitForDisconnect();",
          "546:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "541:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "546:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "585:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1);",
          "586:   cleanupUpstreamAndDownstream();",
          "590:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "591:   cleanupUpstreamAndDownstream();",
          "595:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "",
          "[Removed Lines]",
          "587:   codec_client_->waitForDisconnect();",
          "592:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "587:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "592:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "626:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1);",
          "627:   cleanupUpstreamAndDownstream();",
          "631:   testRouterHeaderOnlyRequestAndResponse(nullptr, 1, \"/rdsone\", \"vhost.rds.first\");",
          "632:   cleanupUpstreamAndDownstream();",
          "636:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "",
          "[Removed Lines]",
          "628:   codec_client_->waitForDisconnect();",
          "633:   codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "628:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "633:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ],
        "test/integration/websocket_integration_test.h||test/integration/websocket_integration_test.h": [
          "File: test/integration/websocket_integration_test.h -> test/integration/websocket_integration_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     if (downstreamProtocol() != Http::CodecClient::Type::HTTP1) {",
          "40:       response_->waitForReset();",
          "41:     } else {",
          "43:     }",
          "44:   }",
          "",
          "[Removed Lines]",
          "42:       codec_client_->waitForDisconnect();",
          "",
          "[Added Lines]",
          "42:       ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41da9533358b77f2ebf9eed2e33fa6ae130a0855",
      "candidate_info": {
        "commit_hash": "41da9533358b77f2ebf9eed2e33fa6ae130a0855",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/41da9533358b77f2ebf9eed2e33fa6ae130a0855",
        "files": [
          "docs/root/intro/version_history.rst",
          "include/envoy/access_log/access_log.h",
          "include/envoy/http/header_map.h",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http2/codec_impl.cc",
          "source/common/router/router.cc",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "source/extensions/filters/http/rbac/rbac_filter.cc",
          "test/common/http/conn_manager_impl_test.cc",
          "test/common/http/header_map_impl_speed_test.cc",
          "test/common/http/header_map_impl_test.cc",
          "test/common/http/http2/codec_impl_test.cc",
          "test/integration/http2_integration_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "backport the master bytesize removal patch to v1.11.1\n\nThis backports the change to track the byte size of the HeaderMap to v1.11.1 (#42):\n\nIntroduces a cached byte size updated internally in HeaderMap. The value is\nstored as an optional, and is cleared whenever a non-const pointer or reference\nto a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum the\nsize of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
        "before_after_code_files": [
          "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
          "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
          "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
          "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
          "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
          "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
            "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
            "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
            "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
            "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
            "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
            "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h": [
          "File: include/envoy/access_log/access_log.h -> include/envoy/access_log/access_log.h"
        ],
        "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
          "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   virtual void setReferenceKey(const LowerCaseString& key, const std::string& value) PURE;",
          "",
          "[Removed Lines]",
          "461:   virtual uint64_t byteSize() const PURE;",
          "",
          "[Added Lines]",
          "472:   virtual absl::optional<uint64_t> byteSize() const PURE;",
          "483:   virtual uint64_t refreshByteSize() PURE;",
          "493:   virtual uint64_t byteSizeInternal() const PURE;",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:   }",
          "489:   connection_manager_.stats_.named_.downstream_rq_active_.dec();",
          "490:   for (const AccessLog::InstanceSharedPtr& access_log : connection_manager_.config_.accessLogs()) {",
          "491:     access_log->log(request_headers_.get(), response_headers_.get(), response_trailers_.get(),",
          "492:                     stream_info_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:   if (request_headers_ != nullptr) {",
          "494:     request_headers_->refreshByteSize();",
          "495:   }",
          "496:   if (response_headers_ != nullptr) {",
          "497:     response_headers_->refreshByteSize();",
          "498:   }",
          "499:   if (response_trailers_ != nullptr) {",
          "500:     response_trailers_->refreshByteSize();",
          "501:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "690:     }",
          "691:   }",
          "",
          "[Removed Lines]",
          "693:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
          "694:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
          "695:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
          "696:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
          "697:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
          "698:     return;",
          "699:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   }",
          "297: };",
          "300:   if (data.empty()) {",
          "302:   }",
          "303:   if (!header.empty()) {",
          "304:     header.append(\",\", 1);",
          "305:   }",
          "306:   header.append(data.data(), data.size());",
          "307: }",
          "309: HeaderMapImpl::HeaderMapImpl() { memset(&inline_headers_, 0, sizeof(inline_headers_)); }",
          "",
          "[Removed Lines]",
          "299: void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
          "301:     return;",
          "",
          "[Added Lines]",
          "299: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
          "301:     return 0;",
          "303:   uint64_t byte_size = 0;",
          "306:     byte_size += 1;",
          "309:   return data.size() + byte_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   }",
          "321: }",
          "323: void HeaderMapImpl::copyFrom(const HeaderMap& header_map) {",
          "324:   header_map.iterate(",
          "325:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326: void HeaderMapImpl::addSize(uint64_t size) {",
          "328:   if (cached_byte_size_.has_value()) {",
          "329:     cached_byte_size_.value() += size;",
          "330:   }",
          "331: }",
          "333: void HeaderMapImpl::subtractSize(uint64_t size) {",
          "334:   if (cached_byte_size_.has_value()) {",
          "335:     ASSERT(cached_byte_size_ >= size);",
          "336:     cached_byte_size_.value() -= size;",
          "337:   }",
          "338: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:     if (*ref_lookup_response.entry_ == nullptr) {",
          "361:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
          "362:     } else {",
          "364:       value.clear();",
          "365:     }",
          "366:   } else {",
          "367:     std::list<HeaderEntryImpl>::iterator i = headers_.insert(std::move(key), std::move(value));",
          "368:     i->entry_ = i;",
          "369:   }",
          "",
          "[Removed Lines]",
          "363:       appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
          "",
          "[Added Lines]",
          "380:       const uint64_t added_size =",
          "381:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
          "382:       addSize(added_size);",
          "386:     addSize(key.size() + value.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "375:   auto* entry = getExistingInline(key.getStringView());",
          "376:   if (entry != nullptr) {",
          "378:     key.clear();",
          "379:     value.clear();",
          "380:   } else {",
          "",
          "[Removed Lines]",
          "377:     appendToHeader(entry->value(), value.getStringView());",
          "",
          "[Added Lines]",
          "397:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
          "398:     addSize(added_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:   if (entry != nullptr) {",
          "410:     char buf[32];",
          "411:     StringUtil::itoa(buf, sizeof(buf), value);",
          "413:     return;",
          "414:   }",
          "415:   HeaderString new_key;",
          "",
          "[Removed Lines]",
          "412:     appendToHeader(entry->value(), buf);",
          "",
          "[Added Lines]",
          "433:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
          "434:     addSize(added_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "424: void HeaderMapImpl::addCopy(const LowerCaseString& key, const std::string& value) {",
          "425:   auto* entry = getExistingInline(key.get());",
          "426:   if (entry != nullptr) {",
          "428:     return;",
          "429:   }",
          "430:   HeaderString new_key;",
          "",
          "[Removed Lines]",
          "427:     appendToHeader(entry->value(), value);",
          "",
          "[Added Lines]",
          "449:     const uint64_t added_size = appendToHeader(entry->value(), value);",
          "450:     addSize(added_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "452:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
          "453: }",
          "456:   uint64_t byte_size = 0;",
          "457:   for (const HeaderEntryImpl& header : headers_) {",
          "458:     byte_size += header.key().size();",
          "459:     byte_size += header.value().size();",
          "460:   }",
          "462:   return byte_size;",
          "463: }",
          "",
          "[Removed Lines]",
          "455: uint64_t HeaderMapImpl::byteSize() const {",
          "",
          "[Added Lines]",
          "478: absl::optional<uint64_t> HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
          "480: uint64_t HeaderMapImpl::refreshByteSize() {",
          "481:   if (!cached_byte_size_.has_value()) {",
          "484:     cached_byte_size_ = byteSizeInternal();",
          "485:   }",
          "486:   return cached_byte_size_.value();",
          "487: }",
          "489: uint64_t HeaderMapImpl::byteSizeInternal() const {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "475: HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) {",
          "476:   for (HeaderEntryImpl& header : headers_) {",
          "477:     if (header.key() == key.get().c_str()) {",
          "478:       return &header;",
          "479:     }",
          "480:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:       cached_byte_size_.reset();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "529:   } else {",
          "530:     for (auto i = headers_.begin(); i != headers_.end();) {",
          "531:       if (i->key() == key.get().c_str()) {",
          "532:         i = headers_.erase(i);",
          "533:       } else {",
          "534:         ++i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:         subtractSize(i->key().size() + i->value().size());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "538: }",
          "540: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "542:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
          "543:     if (to_remove) {",
          "",
          "[Removed Lines]",
          "541:   headers_.remove_if([&](const HeaderEntryImpl& entry) {",
          "",
          "[Added Lines]",
          "577:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "547:       if (cb) {",
          "548:         StaticLookupResponse ref_lookup_response = cb(*this);",
          "549:         if (ref_lookup_response.entry_) {",
          "551:         }",
          "552:       }",
          "553:     }",
          "554:     return to_remove;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
          "587:                                           (*ref_lookup_response.entry_)->value().size();",
          "588:           subtractSize(key_value_size);",
          "591:       } else {",
          "592:         subtractSize(entry.key().size() + entry.value().size());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "572: HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,",
          "573:                                                                  const LowerCaseString& key) {",
          "574:   if (*entry) {",
          "575:     return **entry;",
          "576:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:   cached_byte_size_.reset();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "589:     return **entry;",
          "590:   }",
          "592:   std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));",
          "593:   i->entry_ = i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:   addSize(key.get().size() + value.size());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "610:   }",
          "612:   HeaderEntryImpl* entry = *ptr_to_entry;",
          "614:   headers_.erase(entry->entry_);",
          "615: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:   const uint64_t size_to_subtract = entry->entry_->key().size() + entry->entry_->value().size();",
          "657:   subtractSize(size_to_subtract);",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define DEFINE_INLINE_HEADER_FUNCS(name)                                                           \\",
          "21: public:                                                                                            \\",
          "22:   const HeaderEntry* name() const override { return inline_headers_.name##_; }                     \\",
          "24:   HeaderEntry& insert##name() override {                                                           \\",
          "25:     return maybeCreateInline(&inline_headers_.name##_, Headers::get().name);                       \\",
          "26:   }                                                                                                \\",
          "27:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
          "",
          "[Removed Lines]",
          "23:   HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\",
          "",
          "[Added Lines]",
          "28:   HeaderEntry* name() override {                                                                   \\",
          "29:     cached_byte_size_.reset();                                                                     \\",
          "30:     return inline_headers_.name##_;                                                                \\",
          "31:   }                                                                                                \\",
          "33:     cached_byte_size_.reset();                                                                     \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   HeaderMapImpl();",
          "49:   explicit HeaderMapImpl(",
          "",
          "[Removed Lines]",
          "46:   static void appendToHeader(HeaderString& header, absl::string_view data);",
          "",
          "[Added Lines]",
          "55:   static uint64_t appendToHeader(HeaderString& header, absl::string_view data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   void addCopy(const LowerCaseString& key, const std::string& value) override;",
          "72:   void setReference(const LowerCaseString& key, const std::string& value) override;",
          "73:   void setReferenceKey(const LowerCaseString& key, const std::string& value) override;",
          "75:   const HeaderEntry* get(const LowerCaseString& key) const override;",
          "76:   HeaderEntry* get(const LowerCaseString& key) override;",
          "77:   void iterate(ConstIterateCb cb, void* context) const override;",
          "",
          "[Removed Lines]",
          "74:   uint64_t byteSize() const override;",
          "",
          "[Added Lines]",
          "83:   absl::optional<uint64_t> byteSize() const override;",
          "84:   uint64_t refreshByteSize() override;",
          "85:   uint64_t byteSizeInternal() const override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
          "197:   void removeInline(HeaderEntryImpl** entry);",
          "199:   AllInlineHeaders inline_headers_;",
          "200:   HeaderList headers_;",
          "202:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
          "203: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   void addSize(uint64_t size);",
          "210:   void subtractSize(uint64_t size);",
          "217:   absl::optional<uint64_t> cached_byte_size_ = 0;",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   header_parsing_state_ = HeaderParsingState::Value;",
          "433:   current_header_value_.append(data, length);",
          "437:   if (total > (max_headers_kb_ * 1024)) {",
          "438:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "439:     sendProtocolError();",
          "",
          "[Removed Lines]",
          "435:   const uint32_t total =",
          "436:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
          "",
          "[Added Lines]",
          "436:   ASSERT(current_header_map_->byteSize().has_value());",
          "437:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
          "438:                          current_header_map_->byteSize().value();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444: int ConnectionImpl::onHeadersCompleteBase() {",
          "445:   ENVOY_CONN_LOG(trace, \"headers complete\", connection_);",
          "446:   completeLastHeader();",
          "447:   if (!(parser_.http_major == 1 && parser_.http_minor == 1)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:   ASSERT(current_header_map_->byteSize().has_value() &&",
          "452:          current_header_map_->byteSize() == current_header_map_->byteSizeInternal());",
          "",
          "---------------"
        ],
        "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
          "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   switch (frame->hd.type) {",
          "511:   case NGHTTP2_HEADERS: {",
          "512:     stream->remote_end_stream_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
          "513:     if (!stream->cookies_.empty()) {",
          "514:       HeaderString key(Headers::get().Cookie);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:     ASSERT(stream->headers_->byteSize().has_value() &&",
          "515:            stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:   case NGHTTP2_HEADERS:",
          "621:   case NGHTTP2_DATA: {",
          "622:     StreamImpl* stream = getStream(frame->hd.stream_id);",
          "623:     stream->local_end_stream_sent_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
          "624:     break;",
          "625:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:     if (stream->headers_) {",
          "630:       ASSERT(stream->headers_->byteSize().has_value() &&",
          "631:              stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
          "632:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "808:     stats_.headers_cb_no_stream_.inc();",
          "809:     return 0;",
          "810:   }",
          "812:   stream->saveHeader(std::move(name), std::move(value));",
          "815:     stats_.header_overflow_.inc();",
          "816:     return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
          "",
          "[Removed Lines]",
          "813:   if (stream->headers_->byteSize() > max_request_headers_kb_ * 1024) {",
          "",
          "[Added Lines]",
          "823:   ASSERT(stream->headers_->byteSize().has_value());",
          "824:   if (stream->headers_->byteSize().value() > max_request_headers_kb_ * 1024) {",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323:   stream_info_.setUpstreamTiming(upstream_timing_);",
          "1324:   stream_info_.onRequestComplete();",
          "1325:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
          "1326:     upstream_log->log(parent_.downstream_headers_, upstream_headers_.get(),",
          "1327:                       upstream_trailers_.get(), stream_info_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:   if (upstream_headers_ != nullptr) {",
          "1329:     upstream_headers_->refreshByteSize();",
          "1330:   }",
          "1331:   if (upstream_trailers_ != nullptr) {",
          "1332:     upstream_trailers_->refreshByteSize();",
          "1333:   }",
          "",
          "---------------"
        ],
        "source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc||source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc": [
          "File: source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc -> source/extensions/access_loggers/http_grpc/grpc_access_log_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     request_properties->set_original_path(",
          "371:         std::string(request_headers->EnvoyOriginalPath()->value().getStringView()));",
          "372:   }",
          "374:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
          "375:   if (request_headers->Method() != nullptr) {",
          "376:     envoy::api::v2::core::RequestMethod method =",
          "",
          "[Removed Lines]",
          "373:   request_properties->set_request_headers_bytes(request_headers->byteSize());",
          "",
          "[Added Lines]",
          "373:   request_properties->set_request_headers_bytes(request_headers->byteSize().value());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:   if (stream_info.responseCodeDetails()) {",
          "399:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
          "400:   }",
          "402:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
          "403:   if (!response_headers_to_log_.empty()) {",
          "404:     auto* logged_headers = response_properties->mutable_response_headers();",
          "",
          "[Removed Lines]",
          "401:   response_properties->set_response_headers_bytes(response_headers->byteSize());",
          "",
          "[Added Lines]",
          "401:   response_properties->set_response_headers_bytes(response_headers->byteSize().value());",
          "",
          "---------------"
        ],
        "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc": [
          "File: source/extensions/filters/http/rbac/rbac_filter.cc -> source/extensions/filters/http/rbac/rbac_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   if (shadow_engine.has_value()) {",
          "77:     std::string shadow_resp_code =",
          "78:         Filters::Common::RBAC::DynamicMetadataKeysSingleton::get().EngineResultAllowed;",
          "79:     if (shadow_engine->allowed(*callbacks_->connection(), headers,",
          "80:                                callbacks_->streamInfo().dynamicMetadata(), &effective_policy_id)) {",
          "81:       ENVOY_LOG(debug, \"shadow allowed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     headers.refreshByteSize();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   const auto& engine =",
          "106:       config_->engine(callbacks_->route(), Filters::Common::RBAC::EnforcementMode::Enforced);",
          "107:   if (engine.has_value()) {",
          "108:     if (engine->allowed(*callbacks_->connection(), headers,",
          "109:                         callbacks_->streamInfo().dynamicMetadata(), nullptr)) {",
          "110:       ENVOY_LOG(debug, \"enforced allowed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     headers.refreshByteSize();",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
          "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4187:   EXPECT_EQ(1U, stats_.named_.downstream_cx_overload_disable_keepalive_.value());",
          "4188: }",
          "4235: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
          "4236:   setup(false, \"envoy-custom-server\", false);",
          "4237:   setUpEncoderAndDecoder(true, true);",
          "",
          "[Removed Lines]",
          "4190: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
          "4191:   setup(false, \"\");",
          "4193:   std::string response_code;",
          "4194:   std::string response_body;",
          "4195:   EXPECT_CALL(*codec_, dispatch(_)).Times(1).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
          "4196:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
          "4197:     HeaderMapPtr headers{",
          "4198:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "4199:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
          "4201:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
          "4202:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
          "4203:           response_code = std::string(headers.Status()->value().getStringView());",
          "4204:         }));",
          "4205:     decoder->decodeHeaders(std::move(headers), true);",
          "4206:     conn_manager_->newStream(response_encoder_);",
          "4207:   }));",
          "4209:   Buffer::OwnedImpl fake_input(\"1234\");",
          "4210:   conn_manager_->onData(fake_input, false); // kick off request",
          "4212:   EXPECT_EQ(\"431\", response_code);",
          "4213:   EXPECT_EQ(\"\", response_body);",
          "4214: }",
          "4216: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
          "4217:   max_request_headers_kb_ = 62;",
          "4218:   setup(false, \"\");",
          "4220:   EXPECT_CALL(*codec_, dispatch(_)).Times(1).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
          "4221:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
          "4222:     HeaderMapPtr headers{",
          "4223:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "4224:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
          "4226:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
          "4227:     decoder->decodeHeaders(std::move(headers), true);",
          "4228:     conn_manager_->newStream(response_encoder_);",
          "4229:   }));",
          "4231:   Buffer::OwnedImpl fake_input(\"1234\");",
          "4232:   conn_manager_->onData(fake_input, false); // kick off request",
          "4233: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
          "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   addDummyHeaders(headers, state.range(0));",
          "105:   uint64_t size = 0;",
          "106:   for (auto _ : state) {",
          "108:   }",
          "109:   benchmark::DoNotOptimize(size);",
          "110: }",
          "",
          "[Removed Lines]",
          "107:     size += headers.byteSize();",
          "",
          "[Added Lines]",
          "107:     size += headers.byteSize().value();",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:   HeaderMapImpl headers;",
          "366:   EXPECT_TRUE(headers.empty());",
          "367:   EXPECT_EQ(0, headers.size());",
          "368:   EXPECT_EQ(nullptr, headers.Host());",
          "369:   headers.insertHost().value(std::string(\"hello\"));",
          "370:   EXPECT_FALSE(headers.empty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:   EXPECT_EQ(headers.byteSize().value(), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
          "375: }",
          "377: TEST(HeaderMapImplTest, MoveIntoInline) {",
          "378:   HeaderMapImpl headers;",
          "379:   HeaderString key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: uint64_t countBytesForTest(const HeaderMapImpl& headers) {",
          "380:   uint64_t byte_size = 0;",
          "381:   headers.iterate(",
          "382:       [](const Http::HeaderEntry& header, void* context) -> Http::HeaderMap::Iterate {",
          "383:         auto* byte_size = static_cast<uint64_t*>(context);",
          "385:         return Http::HeaderMap::Iterate::Continue;",
          "386:       },",
          "387:       &byte_size);",
          "388:   return byte_size;",
          "389: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:   headers.addViaMove(std::move(key2), std::move(value2));",
          "392:   EXPECT_EQ(\"cache-control\", headers.CacheControl()->key().getStringView());",
          "393:   EXPECT_EQ(\"hello,there\", headers.CacheControl()->value().getStringView());",
          "394: }",
          "396: TEST(HeaderMapImplTest, Remove) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:   LowerCaseString static_key(\"hello\");",
          "401:   std::string ref_value(\"value\");",
          "402:   headers.addReference(static_key, ref_value);",
          "403:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
          "404:   EXPECT_EQ(HeaderString::Type::Reference, headers.get(static_key)->value().type());",
          "405:   EXPECT_EQ(1UL, headers.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "408:   EXPECT_EQ(nullptr, headers.get(static_key));",
          "409:   EXPECT_EQ(0UL, headers.size());",
          "410:   EXPECT_TRUE(headers.empty());",
          "413:   headers.insertContentLength().value(5);",
          "414:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "415:   EXPECT_EQ(1UL, headers.size());",
          "416:   EXPECT_FALSE(headers.empty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:   EXPECT_EQ(headers.refreshByteSize(), 0);",
          "431:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "418:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "419:   EXPECT_EQ(0UL, headers.size());",
          "420:   EXPECT_TRUE(headers.empty());",
          "423:   headers.insertContentLength().value(5);",
          "424:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "425:   EXPECT_EQ(1UL, headers.size());",
          "426:   EXPECT_FALSE(headers.empty());",
          "427:   headers.remove(Headers::get().ContentLength);",
          "428:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "429:   EXPECT_EQ(0UL, headers.size());",
          "430:   EXPECT_TRUE(headers.empty());",
          "431: }",
          "433: TEST(HeaderMapImplTest, RemoveRegex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "446:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "451:   EXPECT_EQ(headers.refreshByteSize(), 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "445:   headers.addReference(key3, \"value\");",
          "446:   headers.addReference(key4, \"value\");",
          "447:   headers.addReference(key5, \"value\");",
          "450:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
          "451:   EXPECT_EQ(nullptr, headers.get(key1));",
          "452:   EXPECT_NE(nullptr, headers.get(key2));",
          "453:   EXPECT_EQ(nullptr, headers.get(key3));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "473:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "455:   EXPECT_EQ(nullptr, headers.get(key5));",
          "458:   headers.removePrefix(LowerCaseString(\"\"));",
          "459:   EXPECT_EQ(nullptr, headers.get(key2));",
          "460:   EXPECT_EQ(nullptr, headers.get(key4));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:   headers.refreshByteSize();",
          "483:   EXPECT_EQ(headers.byteSize().value(), 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "464:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "465:   EXPECT_EQ(1UL, headers.size());",
          "466:   EXPECT_FALSE(headers.empty());",
          "467:   headers.removePrefix(LowerCaseString(\"content\"));",
          "468:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "469: }",
          "471: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "495:   EXPECT_EQ(headers.refreshByteSize(), 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "483:   headers.addReference(key2, ref_value2);",
          "484:   headers.addReference(key1, ref_value3);",
          "485:   headers.addReference(key1, ref_value4);",
          "487:   using MockCb = testing::MockFunction<void(const std::string&, const std::string&)>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "530:     const std::string bar(\"bar\");",
          "531:     headers.addReference(Headers::get().ContentLength, foo);",
          "532:     headers.addReference(Headers::get().ContentLength, bar);",
          "533:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
          "534:     EXPECT_EQ(1UL, headers.size());",
          "535:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "537:     HeaderMapImpl headers;",
          "538:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
          "539:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
          "540:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
          "541:     EXPECT_EQ(1UL, headers.size());",
          "542:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "544:     HeaderMapImpl headers;",
          "545:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
          "546:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
          "547:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
          "548:     EXPECT_EQ(1UL, headers.size());",
          "549:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "552:     const std::string foo(\"foo\");",
          "553:     headers.addReference(Headers::get().ContentLength, foo);",
          "554:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
          "555:     EXPECT_EQ(\"foo,6\", headers.ContentLength()->value().getStringView());",
          "556:     EXPECT_EQ(1UL, headers.size());",
          "557:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "561:   HeaderMapImpl headers;",
          "562:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
          "563:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
          "564:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
          "565:   EXPECT_EQ(1UL, headers.size());",
          "566: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "569:   HeaderMapImpl headers;",
          "570:   LowerCaseString foo(\"hello\");",
          "571:   headers.addReferenceKey(foo, \"world\");",
          "572:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
          "573:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
          "574: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "577:   HeaderMapImpl headers;",
          "578:   LowerCaseString foo(\"hello\");",
          "579:   headers.setReferenceKey(foo, \"world\");",
          "580:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
          "581:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
          "583:   headers.setReferenceKey(foo, \"monde\");",
          "584:   EXPECT_NE(\"monde\", headers.get(foo)->value().getStringView().data());",
          "585:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "617:   headers.refreshByteSize();",
          "620:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "592:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
          "593:   headers.addCopy(*lcKeyPtr, \"world\");",
          "595:   const HeaderString& value = headers.get(*lcKeyPtr)->value();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "613:   headers.remove(LowerCaseString(\"hello\"));",
          "617:   lcKeyPtr = std::make_unique<LowerCaseString>(std::string(\"he\") + \"llo\");",
          "618:   EXPECT_STREQ(\"hello\", lcKeyPtr->get().c_str());",
          "620:   headers.addCopy(*lcKeyPtr, 42);",
          "622:   const HeaderString& value3 = headers.get(*lcKeyPtr)->value();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:   headers.refreshByteSize();",
          "654:   EXPECT_EQ(headers.byteSize().value(), 0);",
          "661:   headers.refreshByteSize();",
          "663:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "643:   headers.addCopy(cache_control, \"max-age=1345\");",
          "644:   EXPECT_EQ(\"max-age=1345\", headers.get(cache_control)->value().getStringView());",
          "645:   EXPECT_EQ(\"max-age=1345\", headers.CacheControl()->value().getStringView());",
          "646:   headers.addCopy(cache_control, \"public\");",
          "647:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
          "648:   headers.addCopy(cache_control, \"\");",
          "649:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
          "650:   headers.addCopy(cache_control, 123);",
          "651:   EXPECT_EQ(\"max-age=1345,public,123\", headers.get(cache_control)->value().getStringView());",
          "652:   headers.addCopy(cache_control, std::numeric_limits<uint64_t>::max());",
          "653:   EXPECT_EQ(\"max-age=1345,public,123,18446744073709551615\",",
          "654:             headers.get(cache_control)->value().getStringView());",
          "655: }",
          "657: TEST(HeaderMapImplTest, Equality) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "691:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "694:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "697:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "702:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "671:   LowerCaseString static_key(\"\\x90hello\");",
          "672:   std::string ref_value(\"value\");",
          "673:   headers.addReference(static_key, ref_value);",
          "674:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
          "675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "825:   {",
          "826:     LowerCaseString foo(\"hello\");",
          "827:     Http::TestHeaderMapImpl headers{};",
          "828:     EXPECT_EQ(0UL, headers.size());",
          "829:     EXPECT_TRUE(headers.empty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:     EXPECT_EQ(headers.refreshByteSize(), 0);",
          "",
          "---------------"
        ],
        "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
          "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   TestHeaderMapImpl request_headers;",
          "1111:   HttpTestUtility::addDefaultHeaders(request_headers);",
          "1112:   std::string key = \"big\";",
          "1113:   uint32_t head_room = 77;",
          "1114:   uint32_t long_string_length =",
          "1116:   std::string long_string = std::string(long_string_length, 'q');",
          "1117:   request_headers.addCopy(key, long_string);",
          "1124:   EXPECT_CALL(request_decoder_, decodeHeaders_(_, _));",
          "1125:   request_encoder_->encodeHeaders(request_headers, true);",
          "",
          "[Removed Lines]",
          "1115:       codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;",
          "1122:   ASSERT_EQ(request_headers.byteSize() + head_room, codec_limit_kb * 1024);",
          "",
          "[Added Lines]",
          "1113:   request_headers.refreshByteSize();",
          "1117:       codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;",
          "1124:   ASSERT_EQ(request_headers.byteSize().value() + head_room, codec_limit_kb * 1024);",
          "",
          "---------------"
        ],
        "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
          "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: TEST_P(Http2IntegrationTest, RetryAttemptCount) { testRetryAttemptCountHeader(); }",
          "67: static std::string response_metadata_filter = R\"EOF(",
          "68: name: response-metadata-filter",
          "69: config: {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: TEST_P(Http2IntegrationTest, LargeRequestTrailersRejected) { testLargeRequestTrailers(66, 60); }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: IntegrationStreamDecoderPtr HttpIntegrationTest::sendRequestAndWaitForResponse(",
          "259:     const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
          "261:   ASSERT(codec_client_ != nullptr);",
          "263:   IntegrationStreamDecoderPtr response;",
          "",
          "[Removed Lines]",
          "260:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index) {",
          "",
          "[Added Lines]",
          "260:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index,",
          "261:     std::chrono::milliseconds time) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:   } else {",
          "267:     response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "268:   }",
          "271:   upstream_request_->encodeHeaders(response_headers, response_size == 0);",
          "",
          "[Removed Lines]",
          "269:   waitForNextUpstreamRequest(upstream_index);",
          "",
          "[Added Lines]",
          "270:   waitForNextUpstreamRequest(upstream_index, time);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296: }",
          "298: uint64_t",
          "300:   uint64_t upstream_with_request;",
          "302:   if (!fake_upstream_connection_) {",
          "303:     AssertionResult result = AssertionFailure();",
          "304:     for (auto upstream_index : upstream_indices) {",
          "305:       result = fake_upstreams_[upstream_index]->waitForHttpConnection(",
          "307:           max_request_headers_kb_);",
          "308:       if (result) {",
          "309:         upstream_with_request = upstream_index;",
          "",
          "[Removed Lines]",
          "299: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {",
          "",
          "[Added Lines]",
          "300: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
          "301:                                                 std::chrono::milliseconds connection_wait_timeout) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:   return upstream_with_request;",
          "324: }",
          "328: }",
          "330: void HttpIntegrationTest::addFilters(std::vector<std::string> filters) {",
          "",
          "[Removed Lines]",
          "326: void HttpIntegrationTest::waitForNextUpstreamRequest(uint64_t upstream_index) {",
          "327:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}));",
          "",
          "[Added Lines]",
          "328: void HttpIntegrationTest::waitForNextUpstreamRequest(",
          "329:     uint64_t upstream_index, std::chrono::milliseconds connection_wait_timeout) {",
          "330:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}), connection_wait_timeout);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "884:   }",
          "885: }",
          "887: void HttpIntegrationTest::testDownstreamResetBeforeResponseComplete() {",
          "888:   initialize();",
          "889:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890: void HttpIntegrationTest::testLargeRequestTrailers(uint32_t size, uint32_t max_size) {",
          "895:   config_helper_.addConfigModifier(",
          "896:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "897:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_size); });",
          "898:   max_request_headers_kb_ = max_size;",
          "899:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
          "900:   request_trailers.addCopy(\"big\", std::string(size * 1024, 'a'));",
          "902:   initialize();",
          "904:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "905:   fake_upstreams_[0]->set_allow_unexpected_disconnects(true);",
          "907:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "908:   request_encoder_ = &encoder_decoder.first;",
          "909:   auto response = std::move(encoder_decoder.second);",
          "910:   codec_client_->sendData(*request_encoder_, 10, false);",
          "911:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "913:   if (size >= max_size && downstream_protocol_ == Http::CodecClient::Type::HTTP2) {",
          "916:     response->waitForReset();",
          "917:     codec_client_->close();",
          "918:     EXPECT_FALSE(response->complete());",
          "920:   } else {",
          "921:     waitForNextUpstreamRequest();",
          "922:     upstream_request_->encodeHeaders(default_response_headers_, true);",
          "923:     response->waitForEndStream();",
          "924:     EXPECT_TRUE(response->complete());",
          "925:   }",
          "926: }",
          "928: void HttpIntegrationTest::testManyRequestHeaders(std::chrono::milliseconds time) {",
          "929:   config_helper_.addConfigModifier(",
          "930:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "931:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
          "932:   max_request_headers_kb_ = 96;",
          "934:   Http::TestHeaderMapImpl big_headers{",
          "935:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
          "937:   for (int i = 0; i < 20000; i++) {",
          "938:     big_headers.addCopy(std::to_string(i), std::string(0, 'a'));",
          "939:   }",
          "940:   initialize();",
          "942:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "944:   auto response =",
          "945:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
          "947:   EXPECT_TRUE(response->complete());",
          "948:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "949: }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   void cleanupUpstreamAndDownstream();",
          "",
          "[Removed Lines]",
          "122:   IntegrationStreamDecoderPtr",
          "123:   sendRequestAndWaitForResponse(const Http::TestHeaderMapImpl& request_headers,",
          "124:                                 uint32_t request_body_size,",
          "125:                                 const Http::TestHeaderMapImpl& response_headers,",
          "126:                                 uint32_t response_body_size, int upstream_index = 0);",
          "132:   uint64_t waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices);",
          "133:   void waitForNextUpstreamRequest(uint64_t upstream_index = 0);",
          "",
          "[Added Lines]",
          "122:   IntegrationStreamDecoderPtr sendRequestAndWaitForResponse(",
          "123:       const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
          "124:       const Http::TestHeaderMapImpl& response_headers, uint32_t response_body_size,",
          "125:       int upstream_index = 0, std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
          "131:   uint64_t waitForNextUpstreamRequest(",
          "132:       const std::vector<uint64_t>& upstream_indices,",
          "133:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
          "134:   void waitForNextUpstreamRequest(",
          "135:       uint64_t upstream_index = 0,",
          "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   void testRouterUpstreamResponseBeforeRequestComplete();",
          "173:   void testTwoRequests(bool force_network_backup = false);",
          "174:   void testLargeRequestHeaders(uint32_t size, uint32_t max_size = 60);",
          "176:   void testAddEncodedTrailers();",
          "177:   void testRetry();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
          "178:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
          "180:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
          "181:   void testManyRequestHeaders(std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "581: }",
          "583: TEST_P(DownstreamProtocolIntegrationTest, InvalidContentLength) {",
          "584:   initialize();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingConcatenated) {",
          "585:   initialize();",
          "587:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "588:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
          "589:                                           {\":path\", \"/test/long/url\"},",
          "590:                                           {\":scheme\", \"http\"},",
          "591:                                           {\":authority\", \"host\"},",
          "592:                                           {\"content-length\", \"0\"}};",
          "593:   std::vector<std::string> cookie_pieces;",
          "594:   for (int i = 0; i < 7000; i++) {",
          "595:     cookie_pieces.push_back(fmt::sprintf(\"a%x=b\", i));",
          "596:   }",
          "597:   request_headers.addCopy(\"cookie\", absl::StrJoin(cookie_pieces, \"; \"));",
          "598:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
          "600:   ASSERT_TRUE(response->complete());",
          "601:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "602: }",
          "605: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingMany) {",
          "606:   initialize();",
          "608:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "609:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
          "610:                                           {\":path\", \"/test/long/url\"},",
          "611:                                           {\":scheme\", \"http\"},",
          "612:                                           {\":authority\", \"host\"},",
          "613:                                           {\"content-length\", \"0\"}};",
          "614:   for (int i = 0; i < 2000; i++) {",
          "615:     request_headers.addCopy(\"cookie\", fmt::sprintf(\"a%x=b\", i));",
          "616:   }",
          "617:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
          "619:   ASSERT_TRUE(response->complete());",
          "620:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "621: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:   testLargeRequestHeaders(95, 96);",
          "855: }",
          "859: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897: TEST_P(DownstreamProtocolIntegrationTest, ManyRequestHeadersTimeout) {",
          "899:   testManyRequestHeaders(std::chrono::milliseconds(5000));",
          "900: }",
          "902: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersAccepted) {",
          "903:   testLargeRequestTrailers(60, 96);",
          "904: }",
          "906: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersRejected) {",
          "907:   testLargeRequestTrailers(66, 60);",
          "908: }",
          "910: TEST_P(DownstreamProtocolIntegrationTest, ManyTrailerHeaders) {",
          "911:   config_helper_.addConfigModifier(",
          "912:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "913:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
          "915:   Http::TestHeaderMapImpl request_trailers{};",
          "916:   for (int i = 0; i < 20000; i++) {",
          "917:     request_trailers.addCopy(std::to_string(i), \"\");",
          "918:   }",
          "920:   initialize();",
          "921:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "922:   auto encoder_decoder =",
          "923:       codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
          "924:                                                           {\":path\", \"/test/long/url\"},",
          "925:                                                           {\":scheme\", \"http\"},",
          "926:                                                           {\":authority\", \"host\"}});",
          "927:   request_encoder_ = &encoder_decoder.first;",
          "928:   auto response = std::move(encoder_decoder.second);",
          "929:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "930:   waitForNextUpstreamRequest();",
          "931:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "932:   response->waitForEndStream();",
          "934:   EXPECT_TRUE(upstream_request_->complete());",
          "935:   EXPECT_TRUE(response->complete());",
          "936:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "937: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}