{
  "cve_id": "CVE-2014-2270",
  "cve_desc": "softmagic.c in file before 5.17 and libmagic allows context-dependent attackers to cause a denial of service (out-of-bounds memory access and crash) via crafted offsets in the softmagic of a PE executable.",
  "repo": "file/file",
  "patch_hash": "447558595a3650db2886cd2f416ad0beba965801",
  "patch_info": {
    "commit_hash": "447558595a3650db2886cd2f416ad0beba965801",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/447558595a3650db2886cd2f416ad0beba965801",
    "files": [
      "src/softmagic.c"
    ],
    "message": "PR/313: Aaron Reffett: Check properly for exceeding the offset.",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.170 2014/01/06 02:25:32 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.171 2014/01/08 22:02:06 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71: private void cvt_32(union VALUETYPE *, const struct magic *);",
      "72: private void cvt_64(union VALUETYPE *, const struct magic *);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) >= ((n) - (o)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1223:   }",
      "1224:   switch (in_type = cvt_flip(m->in_type, flip)) {",
      "1225:   case FILE_BYTE:",
      "1227:     return 0;",
      "1228:    if (off) {",
      "1229:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1226:    if (nbytes < offset || nbytes < (offset + 1))",
      "",
      "[Added Lines]",
      "1227:    if (OFFSET_OOB(nbytes, offset, 1))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1258:     offset = ~offset;",
      "1259:    break;",
      "1260:   case FILE_BESHORT:",
      "1262:     return 0;",
      "1263:    if (off) {",
      "1264:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1261:    if (nbytes < offset || nbytes < (offset + 2))",
      "",
      "[Added Lines]",
      "1262:    if (OFFSET_OOB(nbytes, offset, 2))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1310:     offset = ~offset;",
      "1311:    break;",
      "1312:   case FILE_LESHORT:",
      "1314:     return 0;",
      "1315:    if (off) {",
      "1316:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1313:    if (nbytes < offset || nbytes < (offset + 2))",
      "",
      "[Added Lines]",
      "1314:    if (OFFSET_OOB(nbytes, offset, 2))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1362:     offset = ~offset;",
      "1363:    break;",
      "1364:   case FILE_SHORT:",
      "1366:     return 0;",
      "1367:    if (off) {",
      "1368:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1365:    if (nbytes < offset || nbytes < (offset + 2))",
      "",
      "[Added Lines]",
      "1366:    if (OFFSET_OOB(nbytes, offset, 2))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1399:    break;",
      "1400:   case FILE_BELONG:",
      "1401:   case FILE_BEID3:",
      "1403:     return 0;",
      "1404:    if (off) {",
      "1405:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1402:    if (nbytes < offset || nbytes < (offset + 4))",
      "",
      "[Added Lines]",
      "1403:    if (OFFSET_OOB(nbytes, offset, 4))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1470:    break;",
      "1471:   case FILE_LELONG:",
      "1472:   case FILE_LEID3:",
      "1474:     return 0;",
      "1475:    if (off) {",
      "1476:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1473:    if (nbytes < offset || nbytes < (offset + 4))",
      "",
      "[Added Lines]",
      "1474:    if (OFFSET_OOB(nbytes, offset, 4))",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1540:     offset = ~offset;",
      "1541:    break;",
      "1542:   case FILE_MELONG:",
      "1544:     return 0;",
      "1545:    if (off) {",
      "1546:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1543:    if (nbytes < offset || nbytes < (offset + 4))",
      "",
      "[Added Lines]",
      "1544:    if (OFFSET_OOB(nbytes, offset, 4))",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1610:     offset = ~offset;",
      "1611:    break;",
      "1612:   case FILE_LONG:",
      "1614:     return 0;",
      "1615:    if (off) {",
      "1616:     switch (m->in_op & FILE_OPS_MASK) {",
      "",
      "[Removed Lines]",
      "1613:    if (nbytes < offset || nbytes < (offset + 4))",
      "",
      "[Added Lines]",
      "1614:    if (OFFSET_OOB(nbytes, offset, 4))",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1688:  switch (m->type) {",
      "1689:  case FILE_BYTE:",
      "1691:    return 0;",
      "1692:   break;",
      "1694:  case FILE_SHORT:",
      "1695:  case FILE_BESHORT:",
      "1696:  case FILE_LESHORT:",
      "1698:    return 0;",
      "1699:   break;",
      "",
      "[Removed Lines]",
      "1697:   if (nbytes < (offset + 2))",
      "",
      "[Added Lines]",
      "1691:   if (OFFSET_OOB(nbytes, offset, 1))",
      "1698:   if (OFFSET_OOB(nbytes, offset, 2))",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1713:  case FILE_FLOAT:",
      "1714:  case FILE_BEFLOAT:",
      "1715:  case FILE_LEFLOAT:",
      "1717:    return 0;",
      "1718:   break;",
      "1720:  case FILE_DOUBLE:",
      "1721:  case FILE_BEDOUBLE:",
      "1722:  case FILE_LEDOUBLE:",
      "1724:    return 0;",
      "1725:   break;",
      "1727:  case FILE_STRING:",
      "1728:  case FILE_PSTRING:",
      "1729:  case FILE_SEARCH:",
      "1731:    return 0;",
      "1732:   break;",
      "1734:  case FILE_REGEX:",
      "1736:    return 0;",
      "1737:   break;",
      "1739:  case FILE_INDIRECT:",
      "1741:    return 0;",
      "1742:   sbuf = ms->o.buf;",
      "1743:   soffset = ms->offset;",
      "",
      "[Removed Lines]",
      "1716:   if (nbytes < (offset + 4))",
      "1723:   if (nbytes < (offset + 8))",
      "1730:   if (nbytes < (offset + m->vallen))",
      "1735:   if (nbytes < offset)",
      "1740:   if (nbytes < offset)",
      "",
      "[Added Lines]",
      "1717:   if (OFFSET_OOB(nbytes, offset, 4))",
      "1724:   if (OFFSET_OOB(nbytes, offset, 8))",
      "1731:   if (OFFSET_OOB(nbytes, offset, m->vallen))",
      "1736:   if (OFFSET_OOB(nbytes, offset, 0))",
      "1741:   if (OFFSET_OOB(nbytes, offset, 0))",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1761:   return rv;",
      "1763:  case FILE_USE:",
      "1765:    return 0;",
      "1766:   sbuf = m->value.s;",
      "1767:   if (*sbuf == '^') {",
      "",
      "[Removed Lines]",
      "1764:   if (nbytes < offset)",
      "",
      "[Added Lines]",
      "1765:   if (OFFSET_OOB(nbytes, offset, 0))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d3bc3aa5b5bdbd05de47c3db8118056435bed5e8",
      "candidate_info": {
        "commit_hash": "d3bc3aa5b5bdbd05de47c3db8118056435bed5e8",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d3bc3aa5b5bdbd05de47c3db8118056435bed5e8",
        "files": [
          "src/file.h",
          "src/funcs.c",
          "src/softmagic.c"
        ],
        "message": "factor out all the duplicated regex code into a wrapper.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:     size_t);",
          "472: #ifndef COMPILE_ONLY",
          "473: extern const char *file_names[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: typedef struct {",
          "472:  const char *pat;",
          "473:  char *old_lc_ctype;",
          "474:  int rc;",
          "475:  regex_t rx;",
          "476: } file_regex_t;",
          "478: protected int file_regcomp(file_regex_t *, const char *, int);",
          "479: protected int file_regexec(file_regex_t *, const char *, size_t, regmatch_t *,",
          "480:     int);",
          "481: protected void file_regfree(file_regex_t *);",
          "482: protected void file_regerror(file_regex_t *, int, struct magic_set *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.69 2014/03/06 16:03:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.70 2014/03/14 19:02:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427: protected int",
          "428: file_replace(struct magic_set *ms, const char *pat, const char *rep)",
          "429: {",
          "431:  int rc, rv = -1;",
          "440:  if (rc) {",
          "444:  } else {",
          "445:   regmatch_t rm;",
          "446:   int nm = 0;",
          "448:    ms->o.buf[rm.rm_so] = '\\0';",
          "449:    if (file_printf(ms, \"%s%s\", rep,",
          "450:        rm.rm_eo != 0 ? ms->o.buf + rm.rm_eo : \"\") == -1)",
          "451:     goto out;",
          "452:    nm++;",
          "453:   }",
          "455:   rv = nm;",
          "456:  }",
          "457: out:",
          "460:  return rv;",
          "461: }",
          "",
          "[Removed Lines]",
          "430:  regex_t rx;",
          "432:  char *old_lc_ctype;",
          "434:  old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "435:  assert(old_lc_ctype != NULL);",
          "436:  old_lc_ctype = strdup(old_lc_ctype);",
          "437:  assert(old_lc_ctype != NULL);",
          "438:  (void)setlocale(LC_CTYPE, \"C\");",
          "439:  rc = regcomp(&rx, pat, REG_EXTENDED);",
          "441:   char errmsg[512];",
          "442:   (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "443:   file_magerror(ms, \"regex error %d, (%s)\", rc, errmsg);",
          "447:   while (regexec(&rx, ms->o.buf, 1, &rm, 0) == 0) {",
          "454:   regfree(&rx);",
          "458:  (void)setlocale(LC_CTYPE, old_lc_ctype);",
          "459:  free(old_lc_ctype);",
          "",
          "[Added Lines]",
          "430:  file_regex_t rx;",
          "433:  rc = file_regcomp(&rx, pat, REG_EXTENDED);",
          "435:   file_regerror(&rx, rc, ms);",
          "439:   while (file_regexec(&rx, ms->o.buf, 1, &rm, 0) == 0) {",
          "449:  file_regfree(&rx);",
          "453: protected int",
          "454: file_regcomp(file_regex_t *rx, const char *pat, int flags)",
          "455: {",
          "456:  rx->old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "457:  assert(rx->old_lc_ctype != NULL);",
          "458:  rx->old_lc_ctype = strdup(rx->old_lc_ctype);",
          "459:  assert(rx->old_lc_ctype != NULL);",
          "460:  rx->pat = pat;",
          "462:  (void)setlocale(LC_CTYPE, \"C\");",
          "463:  return rx->rc = regcomp(&rx->rx, pat, flags);",
          "464: }",
          "466: protected int",
          "467: file_regexec(file_regex_t *rx, const char *str, size_t nmatch,",
          "468:     regmatch_t* pmatch, int eflags)",
          "469: {",
          "470:  assert(rx->rc == 0);",
          "471:  return regexec(&rx->rx, str, nmatch, pmatch, eflags);",
          "472: }",
          "474: protected void",
          "475: file_regfree(file_regex_t *rx)",
          "476: {",
          "477:  if (rx->rc == 0)",
          "478:   regfree(&rx->rx);",
          "479:  (void)setlocale(LC_CTYPE, rx->old_lc_ctype);",
          "480:  free(rx->old_lc_ctype);",
          "481: }",
          "483: protected void",
          "484: file_regerror(file_regex_t *rx, int rc, struct magic_set *ms)",
          "485: {",
          "486:  char errmsg[512];",
          "488:  (void)regerror(rc, &rx->rx, errmsg, sizeof(errmsg));",
          "489:  file_magerror(ms, \"regex error %d for `%s', (%s)\", rc, rx->pat,",
          "490:      errmsg);",
          "491: }",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.184 2014/04/12 15:47:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.185 2014/04/30 21:41:02 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364: private int",
          "365: check_fmt(struct magic_set *ms, struct magic *m)",
          "366: {",
          "368:  int rc, rv = -1;",
          "371:  if (strchr(m->desc, '%') == NULL)",
          "372:   return 0;",
          "380:  if (rc) {",
          "384:  } else {",
          "387:   rv = !rc;",
          "388:  }",
          "391:  return rv;",
          "392: }",
          "",
          "[Removed Lines]",
          "367:  regex_t rx;",
          "369:  char *old_lc_ctype;",
          "374:  old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "375:  assert(old_lc_ctype != NULL);",
          "376:  old_lc_ctype = strdup(old_lc_ctype);",
          "377:  assert(old_lc_ctype != NULL);",
          "378:  (void)setlocale(LC_CTYPE, \"C\");",
          "379:  rc = regcomp(&rx, \"%[-0-9\\\\.]*s\", REG_EXTENDED|REG_NOSUB);",
          "381:   char errmsg[512];",
          "382:   (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "383:   file_magerror(ms, \"regex error %d, (%s)\", rc, errmsg);",
          "385:   rc = regexec(&rx, m->desc, 0, 0, 0);",
          "386:   regfree(&rx);",
          "389:  (void)setlocale(LC_CTYPE, old_lc_ctype);",
          "390:  free(old_lc_ctype);",
          "",
          "[Added Lines]",
          "367:  file_regex_t rx;",
          "373:  rc = file_regcomp(&rx, \"%[-0-9\\\\.]*s\", REG_EXTENDED|REG_NOSUB);",
          "375:   file_regerror(&rx, rc, ms);",
          "377:   rc = file_regexec(&rx, m->desc, 0, 0, 0);",
          "380:  file_regfree(&rx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1776:  double dl, dv;",
          "1777:  int matched;",
          "1778:  union VALUETYPE *p = &ms->ms_value;",
          "1781:  switch (m->type) {",
          "1782:  case FILE_BYTE:",
          "",
          "[Removed Lines]",
          "1779:  char *old_lc_ctype;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1929:  }",
          "1930:  case FILE_REGEX: {",
          "1931:   int rc;",
          "1935:   if (ms->search.s == NULL)",
          "1936:    return 0;",
          "1943:   l = 0;",
          "1945:       REG_EXTENDED|REG_NEWLINE|",
          "1946:       ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0));",
          "1947:   if (rc) {",
          "1951:    v = (uint64_t)-1;",
          "1954:    regmatch_t pmatch[1];",
          "1955: #ifndef REG_STARTEND",
          "1956: #define REG_STARTEND 0",
          "",
          "[Removed Lines]",
          "1932:   regex_t rx;",
          "1933:   char errmsg[512];",
          "1938:   old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "1939:   assert(old_lc_ctype != NULL);",
          "1940:   old_lc_ctype = strdup(old_lc_ctype);",
          "1941:   assert(old_lc_ctype != NULL);",
          "1942:   (void)setlocale(LC_CTYPE, \"C\");",
          "1944:   rc = regcomp(&rx, m->value.s,",
          "1948:    (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "1949:    file_magerror(ms, \"regex error %d, (%s)\",",
          "1950:        rc, errmsg);",
          "1952:   }",
          "1953:   else {",
          "",
          "[Added Lines]",
          "1921:   file_regex_t rx;",
          "1927:   rc = file_regcomp(&rx, m->value.s,",
          "1931:    file_regerror(&rx, rc, ms);",
          "1933:   } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1961:    pmatch[0].rm_so = 0;",
          "1962:    pmatch[0].rm_eo = ms->search.s_len;",
          "1963: #endif",
          "1965:        1, pmatch, REG_STARTEND);",
          "1966: #if REG_STARTEND == 0",
          "1967:    ((char *)(intptr_t)ms->search.s)[l] = c;",
          "",
          "[Removed Lines]",
          "1964:    rc = regexec(&rx, (const char *)ms->search.s,",
          "",
          "[Added Lines]",
          "1944:    rc = file_regexec(&rx, (const char *)ms->search.s,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1980:     break;",
          "1982:    default:",
          "1986:     v = (uint64_t)-1;",
          "1987:     break;",
          "1988:    }",
          "1990:   }",
          "1993:   if (v == (uint64_t)-1)",
          "1994:    return -1;",
          "1995:   break;",
          "",
          "[Removed Lines]",
          "1983:     (void)regerror(rc, &rx, errmsg, sizeof(errmsg));",
          "1984:     file_magerror(ms, \"regexec error %d, (%s)\",",
          "1985:         rc, errmsg);",
          "1989:    regfree(&rx);",
          "1991:   (void)setlocale(LC_CTYPE, old_lc_ctype);",
          "1992:   free(old_lc_ctype);",
          "",
          "[Added Lines]",
          "1963:     file_regerror(&rx, rc, ms);",
          "1968:   file_regfree(&rx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4561d3b89ed5d24090eac2eedadad3d9db734e6",
      "candidate_info": {
        "commit_hash": "f4561d3b89ed5d24090eac2eedadad3d9db734e6",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/f4561d3b89ed5d24090eac2eedadad3d9db734e6",
        "files": [
          "src/softmagic.c"
        ],
        "message": "PR/313: Aaron Reffett: Check properly for exceeding the offset.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.171 2014/01/08 22:02:06 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.172 2014/01/08 22:22:54 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: private void cvt_32(union VALUETYPE *, const struct magic *);",
          "72: private void cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) >= ((n) - (o)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1223:   }",
          "1224:   switch (in_type = cvt_flip(m->in_type, flip)) {",
          "1225:   case FILE_BYTE:",
          "1227:     return 0;",
          "1228:    if (off) {",
          "1229:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1226:    if (nbytes < offset || nbytes < (offset + 1))",
          "",
          "[Added Lines]",
          "1227:    if (OFFSET_OOB(nbytes, offset, 1))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1258:     offset = ~offset;",
          "1259:    break;",
          "1260:   case FILE_BESHORT:",
          "1262:     return 0;",
          "1263:    if (off) {",
          "1264:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1261:    if (nbytes < offset || nbytes < (offset + 2))",
          "",
          "[Added Lines]",
          "1262:    if (OFFSET_OOB(nbytes, offset, 2))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1310:     offset = ~offset;",
          "1311:    break;",
          "1312:   case FILE_LESHORT:",
          "1314:     return 0;",
          "1315:    if (off) {",
          "1316:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1313:    if (nbytes < offset || nbytes < (offset + 2))",
          "",
          "[Added Lines]",
          "1314:    if (OFFSET_OOB(nbytes, offset, 2))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1362:     offset = ~offset;",
          "1363:    break;",
          "1364:   case FILE_SHORT:",
          "1366:     return 0;",
          "1367:    if (off) {",
          "1368:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1365:    if (nbytes < offset || nbytes < (offset + 2))",
          "",
          "[Added Lines]",
          "1366:    if (OFFSET_OOB(nbytes, offset, 2))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1399:    break;",
          "1400:   case FILE_BELONG:",
          "1401:   case FILE_BEID3:",
          "1403:     return 0;",
          "1404:    if (off) {",
          "1405:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1402:    if (nbytes < offset || nbytes < (offset + 4))",
          "",
          "[Added Lines]",
          "1403:    if (OFFSET_OOB(nbytes, offset, 4))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1470:    break;",
          "1471:   case FILE_LELONG:",
          "1472:   case FILE_LEID3:",
          "1474:     return 0;",
          "1475:    if (off) {",
          "1476:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1473:    if (nbytes < offset || nbytes < (offset + 4))",
          "",
          "[Added Lines]",
          "1474:    if (OFFSET_OOB(nbytes, offset, 4))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1540:     offset = ~offset;",
          "1541:    break;",
          "1542:   case FILE_MELONG:",
          "1544:     return 0;",
          "1545:    if (off) {",
          "1546:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1543:    if (nbytes < offset || nbytes < (offset + 4))",
          "",
          "[Added Lines]",
          "1544:    if (OFFSET_OOB(nbytes, offset, 4))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1610:     offset = ~offset;",
          "1611:    break;",
          "1612:   case FILE_LONG:",
          "1614:     return 0;",
          "1615:    if (off) {",
          "1616:     switch (m->in_op & FILE_OPS_MASK) {",
          "",
          "[Removed Lines]",
          "1613:    if (nbytes < offset || nbytes < (offset + 4))",
          "",
          "[Added Lines]",
          "1614:    if (OFFSET_OOB(nbytes, offset, 4))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1688:  switch (m->type) {",
          "1689:  case FILE_BYTE:",
          "1691:    return 0;",
          "1692:   break;",
          "1694:  case FILE_SHORT:",
          "1695:  case FILE_BESHORT:",
          "1696:  case FILE_LESHORT:",
          "1698:    return 0;",
          "1699:   break;",
          "",
          "[Removed Lines]",
          "1697:   if (nbytes < (offset + 2))",
          "",
          "[Added Lines]",
          "1691:   if (OFFSET_OOB(nbytes, offset, 1))",
          "1698:   if (OFFSET_OOB(nbytes, offset, 2))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1713:  case FILE_FLOAT:",
          "1714:  case FILE_BEFLOAT:",
          "1715:  case FILE_LEFLOAT:",
          "1717:    return 0;",
          "1718:   break;",
          "1720:  case FILE_DOUBLE:",
          "1721:  case FILE_BEDOUBLE:",
          "1722:  case FILE_LEDOUBLE:",
          "1724:    return 0;",
          "1725:   break;",
          "1727:  case FILE_STRING:",
          "1728:  case FILE_PSTRING:",
          "1729:  case FILE_SEARCH:",
          "1731:    return 0;",
          "1732:   break;",
          "1734:  case FILE_REGEX:",
          "1736:    return 0;",
          "1737:   break;",
          "1739:  case FILE_INDIRECT:",
          "1741:    return 0;",
          "1742:   sbuf = ms->o.buf;",
          "1743:   soffset = ms->offset;",
          "",
          "[Removed Lines]",
          "1716:   if (nbytes < (offset + 4))",
          "1723:   if (nbytes < (offset + 8))",
          "1730:   if (nbytes < (offset + m->vallen))",
          "1735:   if (nbytes < offset)",
          "1740:   if (nbytes < offset)",
          "",
          "[Added Lines]",
          "1717:   if (OFFSET_OOB(nbytes, offset, 4))",
          "1724:   if (OFFSET_OOB(nbytes, offset, 8))",
          "1731:   if (OFFSET_OOB(nbytes, offset, m->vallen))",
          "1736:   if (OFFSET_OOB(nbytes, offset, 0))",
          "1741:   if (OFFSET_OOB(nbytes, offset, 0))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1761:   return rv;",
          "1763:  case FILE_USE:",
          "1765:    return 0;",
          "1766:   sbuf = m->value.s;",
          "1767:   if (*sbuf == '^') {",
          "",
          "[Removed Lines]",
          "1764:   if (nbytes < offset)",
          "",
          "[Added Lines]",
          "1765:   if (OFFSET_OOB(nbytes, offset, 0))",
          "",
          "---------------"
        ]
      }
    }
  ]
}