{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "faa4d9ff5f7ff676db06240e09140f9780e2638c",
      "candidate_info": {
        "commit_hash": "faa4d9ff5f7ff676db06240e09140f9780e2638c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/faa4d9ff5f7ff676db06240e09140f9780e2638c",
        "files": [
          "lib/http.js"
        ],
        "message": "Re-apply http fixes from v0.6 branch properly",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:   }",
          "1274: }",
          "1276: function socketCloseListener() {",
          "1277:   var socket = this;",
          "1278:   var parser = socket.parser;",
          "1279:   var req = socket._httpMessage;",
          "1280:   debug('HTTP socket close');",
          "1281:   req.emit('close');",
          "1282:   if (req.res && req.res.readable) {",
          "1284:     req.res.emit('aborted');",
          "1287:   } else if (!req.res && !req._hadError) {",
          "",
          "[Removed Lines]",
          "1285:     req.res._emitEnd();",
          "1286:     req.res.emit('close');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1315:   socket.destroy();",
          "1316: }",
          "1332:     }",
          "1334:   }",
          "1335: }",
          "1337: function parserOnIncomingClient(res, shouldKeepAlive) {",
          "1338:   var parser = this;",
          "1339:   var socket = this.socket;",
          "",
          "[Removed Lines]",
          "1319: function responseOnEnd() {",
          "1320:   var req = this.req;",
          "1321:   var socket = req.socket;",
          "1323:   if (req.shouldKeepAlive) {",
          "1324:     debug('AGENT socket keep-alive');",
          "1325:     socket.removeListener('close', socketCloseListener);",
          "1326:     socket.removeListener('error', socketErrorListener);",
          "1327:     socket.emit('free');",
          "1328:   } else {",
          "1329:     if (socket.writable) {",
          "1330:       debug('AGENT socket.destroySoon()');",
          "1331:       socket.destroySoon();",
          "1333:     assert(!socket.writable);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1349:   }",
          "1350:   req.res = res;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1364:     return true;",
          "1365:   }",
          "1371:     req.shouldKeepAlive = false;",
          "1372:   }",
          "1374:   DTRACE_HTTP_CLIENT_RESPONSE(socket, req);",
          "1375:   req.emit('response', res);",
          "1376:   req.res = res;",
          "",
          "[Removed Lines]",
          "1367:   if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgraded) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1381:   return isHeadResponse;",
          "1382: }",
          "1429:     }",
          "1437:   }",
          "1438: }",
          "",
          "[Removed Lines]",
          "1384: function socketOnEnd() {",
          "1385:   var socket = this;",
          "1386:   var req = this._httpMessage;",
          "1387:   var parser = this.parser;",
          "1388:   if (!req.res) {",
          "1391:     req.emit('error', createHangUpError());",
          "1392:     req._hadError = true;",
          "1393:   }",
          "1394:   if (parser) {",
          "1395:     parser.finish();",
          "1396:     freeParser(parser, req);",
          "1397:   }",
          "1398:   socket.destroy();",
          "1399: }",
          "1401: function socketOnData(d, start, end) {",
          "1402:   var socket = this;",
          "1403:   var req = this._httpMessage;",
          "1404:   var parser = this.parser;",
          "1406:   var ret = parser.execute(d, start, end - start);",
          "1407:   if (ret instanceof Error) {",
          "1408:     debug('parse error');",
          "1409:     freeParser(parser, req);",
          "1410:     socket.destroy(ret);",
          "1411:   } else if (parser.incoming && parser.incoming.upgrade) {",
          "1412:     var bytesParsed = ret;",
          "1413:     socket.ondata = null;",
          "1414:     socket.onend = null;",
          "1416:     var res = parser.incoming;",
          "1417:     req.res = res;",
          "1420:     var upgradeHead = d.slice(start + bytesParsed, end);",
          "1421:     if (req.listeners('upgrade').length) {",
          "1423:       req.upgraded = true;",
          "1424:       req.emit('upgrade', res, socket, upgradeHead);",
          "1425:       socket.emit('agentRemove');",
          "1426:     } else {",
          "1428:       socket.destroy();",
          "1430:     freeParser(parser, req);",
          "1431:   } else if (parser.incoming && parser.incoming.complete &&",
          "1435:              parser.incoming.statusCode !== 100) {",
          "1436:     freeParser(parser, req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1443:   process.nextTick(function() {",
          "1444:     var parser = parsers.alloc();",
          "1446:     req.socket = socket;",
          "1447:     req.connection = socket;",
          "1450:     parser.reinitialize(HTTPParser.RESPONSE);",
          "1451:     parser.incoming = null;",
          "1452:     req.parser = parser;",
          "1455:     if (typeof req.maxHeadersCount === 'number') {",
          "1456:       parser.maxHeaderPairs = req.maxHeadersCount << 1;",
          "",
          "[Removed Lines]",
          "1448:     parser.socket = socket;",
          "1449:     socket.parser = parser;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1459:       parser.maxHeaderPairs = 2000;",
          "1460:     }",
          "1466:     socket.ondata = socketOnData;",
          "1467:     socket.onend = socketOnEnd;",
          "1469:     socket.on('close', socketCloseListener);",
          "1470:     parser.onIncoming = parserOnIncomingClient;",
          "1472:     req.emit('socket', socket);",
          "1473:   });",
          "1474: };",
          "1476: ClientRequest.prototype._deferToConnect = function(method, arguments_, cb) {",
          "",
          "[Removed Lines]",
          "1462:     socket._httpMessage = req;",
          "1465:     httpSocketSetup(socket);",
          "1468:     socket.on('error', socketErrorListener);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1624:   var parser = parsers.alloc();",
          "1625:   parser.reinitialize(HTTPParser.REQUEST);",
          "1626:   parser.socket = socket;",
          "1627:   parser.incoming = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6ce259d2caf338fec991c2dd447de763ce99ab7",
      "candidate_info": {
        "commit_hash": "e6ce259d2caf338fec991c2dd447de763ce99ab7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e6ce259d2caf338fec991c2dd447de763ce99ab7",
        "files": [
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.08.28, Version 0.9.1 (Unstable)\n\n* buffer: Add Buffer.isEncoding(enc) to test for valid encoding values (isaacs)\n\n* Raise UV_ECANCELED on premature close. (Ben Noordhuis)\n\n* Remove c-ares from libuv, move to a top-level node dependency (Bert Belder)\n\n* ref/unref for all HandleWraps, timers, servers, and sockets (Timothy J Fontaine)\n\n* addon: remove node-waf, superseded by node-gyp (Ben Noordhuis)\n\n* child_process: emit error on exec failure (Ben Noordhuis)\n\n* cluster: do not use internal server API (Andreas Madsen)\n\n* constants: add O_DIRECT (Ian Babrou)\n\n* crypto: add sync interface to crypto.pbkdf2() (Ben Noordhuis)\n\n* darwin: emulate fdatasync() (Fedor Indutny)\n\n* dgram: make .bind() always asynchronous (Ben Noordhuis)\n\n* events: Make emitter.listeners() side-effect free (isaacs, Joe Andaverde)\n\n* fs: Throw early on invalid encoding args (isaacs)\n\n* fs: fix naming of truncate/ftruncate functions (isaacs)\n\n* http: bubble up parser errors to ClientRequest (Brian White)\n\n* linux: improve cpuinfo parser on ARM and MIPS (Ben Noordhuis)\n\n* net: add support for IPv6 addresses ending in :: (Josh Erickson)\n\n* net: support Server.listen(Pipe) (Andreas Madsen)\n\n* node: don't scan add-on for \"init\" symbol (Ben Noordhuis)\n\n* remove process.uvCounters() (Ben Noordhuis)\n\n* repl: console writes to repl rather than process stdio (Nathan Rajlich)\n\n* timers: implement setImmediate (Timothy J Fontaine)\n\n* tls: fix segfault in pummel/test-tls-ci-reneg-attack (Ben Noordhuis)\n\n* tools: Move gyp addon tools to node-gyp (Nathan Rajlich)\n\n* unix: preliminary signal handler support (Ben Noordhuis)\n\n* unix: remove dependency on ev_child (Ben Noordhuis)\n\n* unix: work around darwin bug, don't poll() on pipe (Fedor Indutny)\n\n* util: Formally deprecate util.pump() (Ben Noordhuis)\n\n* windows: make active and closing handle state independent (Bert Belder)\n\n* windows: report spawn errors to the exit callback (Bert Belder)\n\n* windows: signal handling support with uv_signal_t (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 9",
          "27: #define NODE_PATCH_VERSION 1",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "544e5ee1fbddcc09418e1e99bd05d39bcee1ab3c",
      "candidate_info": {
        "commit_hash": "544e5ee1fbddcc09418e1e99bd05d39bcee1ab3c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/544e5ee1fbddcc09418e1e99bd05d39bcee1ab3c",
        "files": [
          "benchmark/http_simple_auto.js"
        ],
        "message": "bench: add http_simple_auto benchmark\n\nStarts a server and benchmarks it with ab.",
        "before_after_code_files": [
          "benchmark/http_simple_auto.js||benchmark/http_simple_auto.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_simple_auto.js||benchmark/http_simple_auto.js": [
          "File: benchmark/http_simple_auto.js -> benchmark/http_simple_auto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: var path = require(\"path\");",
          "11: var http = require(\"http\");",
          "12: var spawn = require(\"child_process\").spawn;",
          "14: var port = parseInt(process.env.PORT || 8000);",
          "16: var fixed = \"\"",
          "17: for (var i = 0; i < 20*1024; i++) {",
          "18:   fixed += \"C\";",
          "19: }",
          "21: var stored = {};",
          "22: var storedBuffer = {};",
          "24: var server = http.createServer(function (req, res) {",
          "25:   var commands = req.url.split(\"/\");",
          "26:   var command = commands[1];",
          "27:   var body = \"\";",
          "28:   var arg = commands[2];",
          "29:   var n_chunks = parseInt(commands[3], 10);",
          "30:   var status = 200;",
          "32:   if (command == \"bytes\") {",
          "33:     var n = parseInt(arg, 10)",
          "34:     if (n <= 0)",
          "35:       throw \"bytes called with n <= 0\"",
          "36:     if (stored[n] === undefined) {",
          "37:       stored[n] = \"\";",
          "38:       for (var i = 0; i < n; i++) {",
          "39:         stored[n] += \"C\"",
          "40:       }",
          "41:     }",
          "42:     body = stored[n];",
          "44:   } else if (command == \"buffer\") {",
          "45:     var n = parseInt(arg, 10)",
          "46:     if (n <= 0) throw new Error(\"bytes called with n <= 0\");",
          "47:     if (storedBuffer[n] === undefined) {",
          "48:       storedBuffer[n] = new Buffer(n);",
          "49:       for (var i = 0; i < n; i++) {",
          "50:         storedBuffer[n][i] = \"C\".charCodeAt(0);",
          "51:       }",
          "52:     }",
          "53:     body = storedBuffer[n];",
          "55:   } else if (command == \"quit\") {",
          "56:     res.connection.server.close();",
          "57:     body = \"quitting\";",
          "59:   } else if (command == \"fixed\") {",
          "60:     body = fixed;",
          "62:   } else if (command == \"echo\") {",
          "63:     res.writeHead(200, { \"Content-Type\": \"text/plain\",",
          "64:                          \"Transfer-Encoding\": \"chunked\" });",
          "65:     req.pipe(res);",
          "66:     return;",
          "68:   } else {",
          "69:     status = 404;",
          "70:     body = \"not found\\n\";",
          "71:   }",
          "75:   if (n_chunks > 0) {",
          "76:     res.writeHead(status, { \"Content-Type\": \"text/plain\",",
          "77:                             \"Transfer-Encoding\": \"chunked\" });",
          "79:     var len = body.length;",
          "80:     var step = ~~(len / n_chunks) || len;",
          "82:     for (var i = 0; i < len; i += step) {",
          "83:       res.write(body.slice(i, i + step));",
          "84:     }",
          "86:     res.end();",
          "87:   } else {",
          "88:     var content_length = body.length.toString();",
          "90:     res.writeHead(status, { \"Content-Type\": \"text/plain\",",
          "91:                             \"Content-Length\": content_length });",
          "92:     res.end(body);",
          "93:   }",
          "95: });",
          "97: server.listen(port, function () {",
          "98:   var url = 'http://127.0.0.1:' + port + '/';",
          "100:   var n = process.argv.length - 1;",
          "101:   process.argv[n] = url + process.argv[n];",
          "103:   var cp = spawn('ab', process.argv.slice(2));",
          "104:   cp.stdout.pipe(process.stdout);",
          "105:   cp.stderr.pipe(process.stderr);",
          "106:   cp.on('exit', function() {",
          "107:     server.close();",
          "108:   });",
          "109: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16fca262be5a6769ec425ab9d97e330f9c46fce2",
      "candidate_info": {
        "commit_hash": "16fca262be5a6769ec425ab9d97e330f9c46fce2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/16fca262be5a6769ec425ab9d97e330f9c46fce2",
        "files": [
          "lib/net.js",
          "src/tcp_wrap.cc"
        ],
        "message": "net: honor 'enable' flag in .setNoDelay()\n\nFixes #3096.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "src/tcp_wrap.cc||src/tcp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: };",
          "187:   if (this._handle && this._handle.setNoDelay)",
          "189: };",
          "",
          "[Removed Lines]",
          "186: Socket.prototype.setNoDelay = function() {",
          "188:     this._handle.setNoDelay();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:   UNWRAP",
          "257:   if (r)",
          "258:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Removed Lines]",
          "256:   int r = uv_tcp_nodelay(&wrap->handle_, 1);",
          "",
          "[Added Lines]",
          "256:   int enable = static_cast<int>(args[0]->BooleanValue());",
          "257:   int r = uv_tcp_nodelay(&wrap->handle_, enable);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcb5bdebe7731739daa720c5bcc2728314db0534",
      "candidate_info": {
        "commit_hash": "bcb5bdebe7731739daa720c5bcc2728314db0534",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/bcb5bdebe7731739daa720c5bcc2728314db0534",
        "files": [
          "test/pummel/test-net-throttle.js"
        ],
        "message": "test: raise pummel/test-net-throttle write req size\n\npummel/test-net-throttle assumes that a couple of big write requests result in\nsome of them getting queued because the kernel's send buffer fills up.\n\nSaid assumption breaks on systems with large send buffers. Raise the size of\nthe write request to ameliorate the issue.\n\nThis is a back-port of commit 6770555 from the master branch.",
        "before_after_code_files": [
          "test/pummel/test-net-throttle.js||test/pummel/test-net-throttle.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-net-throttle.js||test/pummel/test-net-throttle.js": [
          "File: test/pummel/test-net-throttle.js -> test/pummel/test-net-throttle.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: var assert = require('assert');",
          "27: var net = require('net');",
          "30: var part_N = N / 3;",
          "31: var chars_recved = 0;",
          "32: var npauses = 0;",
          "",
          "[Removed Lines]",
          "29: var N = 160 * 1024;",
          "",
          "[Added Lines]",
          "29: var N = 1024 * 1024;",
          "",
          "---------------"
        ]
      }
    }
  ]
}