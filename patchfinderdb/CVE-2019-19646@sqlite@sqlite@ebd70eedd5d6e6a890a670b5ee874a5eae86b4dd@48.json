{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
      "candidate_info": {
        "commit_hash": "e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7acce66b2f3bedc07e99ddf60bd3551e7bc6242",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid a buffer overread in ptrmapPutOvflPtr() that can occurs in a corrupt database file that has large entries and uses autovacuum.\n\nFossilOrigin-Name: f8b781cf41800e9f61a1c5376404a97e76a2bbbcaa17396d42be62f731363947",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc9791ea987352e3e1322fbb7f833c23b402432af8249f9d397c6f7456788637",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369:   assert( pCell!=0 );",
          "1370:   pPage->xParseCell(pPage, pCell, &info);",
          "1371:   if( info.nLocal<info.nPayload ){",
          "1373:     ptrmapPut(pPage->pBt, ovfl, PTRMAP_OVERFLOW1, pPage->pgno, pRC);",
          "1374:   }",
          "1375: }",
          "",
          "[Removed Lines]",
          "1372:     Pgno ovfl = get4byte(&pCell[info.nSize-4]);",
          "",
          "[Added Lines]",
          "1372:     Pgno ovfl;",
          "1373:     if( SQLITE_WITHIN(pPage->aDataEnd, pCell, pCell+info.nLocal) ){",
          "1375:       return;",
          "1376:     }",
          "1377:     ovfl = get4byte(&pCell[info.nSize-4]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2081dd859867674dccd51b95d77d42fdada14cf",
      "candidate_info": {
        "commit_hash": "e2081dd859867674dccd51b95d77d42fdada14cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2081dd859867674dccd51b95d77d42fdada14cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz001.test"
        ],
        "message": "Partially revert the test file changes in [4371a0c46e]. It is no longer required following [93ae382e97c23c90].\n\nFossilOrigin-Name: 593a7e6e20a2f91fe3497edd7effad50ac876f7f03c9222e332dfeb43d26882e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6fc0deffa4eed902fd13eefe6d2765f338f3dadc5b29f7cae5064e135417746b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: # cause a rebalance operation, which would leave the btree in a weird",
          "190: # state that would lead to segfaults and or assertion faults.",
          "191: #",
          "195:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "198: # This is a dbfuzz2-generate test case that can cause a page with",
          "199: # pPage->nCell==0 to enter the balancer.",
          "",
          "[Removed Lines]",
          "192: set res {0 {}}",
          "193: ifcapable oversize_cell_check { set res {1 {database disk image is malformed}} }",
          "194: do_catchsql_test dbfuzz001-110 {",
          "196: } $res",
          "",
          "[Added Lines]",
          "192: do_execsql_test dbfuzz001-110 {",
          "194: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
      "candidate_info": {
        "commit_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak introduced by [55c5d72a].\n\nFossilOrigin-Name: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2570:   }",
          "2574:   assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2572:   if( rc!=SQLITE_OK ){",
          "2573:     sqlite3_free(aOut);",
          "2574:     p = aOut = 0;",
          "2575:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acf6e08d20a663de5d4012effba666675bd23fe9",
      "candidate_info": {
        "commit_hash": "acf6e08d20a663de5d4012effba666675bd23fe9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/acf6e08d20a663de5d4012effba666675bd23fe9",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix typo for one instance of line number handling in the Lemon tool.\n\nFossilOrigin-Name: 980be1730dc1239c63a107923bf2e32b4ec7d4bc31b9190e711cc35f18cc2bb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a97804620a27acc30bebd2aaa04e38f2f36de48b0931038ca8bdc9cb0c36b8f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4426:     }",
          "4427:     i++;",
          "4428:   }",
          "4430:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4429:   if( j>0 ){ fprintf(out, \"\\n\"); lineno++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
      "candidate_info": {
        "commit_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35fb866ea334beedadb258eaacb68b627a6b2554",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with fts5 \"ORDER BY rank\" queries when the fts5 table name requires quoting.\n\nFossilOrigin-Name: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   rc = fts5PrepareStatement(&pSorter->pStmt, pConfig,",
          "936:       pConfig->zDb, pConfig->zName, zRank, pConfig->zName,",
          "937:       (zRankArgs ? \", \" : \"\"),",
          "938:       (zRankArgs ? zRankArgs : \"\"),",
          "",
          "[Removed Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s\",",
          "",
          "[Added Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(\\\"%w\\\"%s%s) %s\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: do_catchsql_test 13.1 {",
          "769:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "772: #-------------------------------------------------------------------------",
          "773: reset_db",
          "",
          "[Removed Lines]",
          "770: } {1 {vtable constructor failed: t1}}",
          "",
          "[Added Lines]",
          "770: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959: do_catchsql_test 15.1 {",
          "960:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "963: #---------------------------------------------------------------------------",
          "964: #",
          "",
          "[Removed Lines]",
          "961: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "961: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3903: | end crash-fed6e90021ba5d.db",
          "3904: }]} {}",
          "3907:   CREATE VIRTUAL TABLE t2 USING fts5vocab('t1','row');",
          "3908:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3909:   CREATE VIRTUAL TABLE t4 USING fts5vocab('t1','instance');",
          "3912: do_catchsql_test 33.2 {",
          "3913:   SELECT * FROM t2;",
          "3916: do_catchsql_test 33.3 {",
          "3917:   SELECT * FROM t2, t3, t4 WHERE t2.term=t3.term AND t3.term=t4.term;",
          "3920: #-------------------------------------------------------------------------",
          "3921: reset_db",
          "",
          "[Removed Lines]",
          "3906: do_execsql_test 33.1 {",
          "3910: }",
          "3914: } {1 {database disk image is malformed}}",
          "3918: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "3906: do_catchsql_test 33.1 {",
          "3910: } {/*malformed database schema*/}",
          "3914: } {/*malformed database schema*/}",
          "3918: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4638: do_catchsql_test 37.1 {",
          "4639:   SELECT * FROM t3;",
          "4642: #-------------------------------------------------------------------------",
          "4643: reset_db",
          "4645:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4646:   INSERT INTO t1 VALUES('a', 'b');",
          "4647:   SELECT quote(block) FROM t1_data WHERE rowid=10;",
          "4648: } {X'000000000101010001010101'}",
          "4651:   UPDATE t1_data SET block = X'FFFFFFFF0101010001010101' WHERE rowid = 10;",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "",
          "[Removed Lines]",
          "4640: } {1 {database disk image is malformed}}",
          "4644: do_execsql_test 37.0 {",
          "4650: do_execsql_test 37.1 {",
          "",
          "[Added Lines]",
          "4640: } {/*malformed database schema*/}",
          "4644: do_execsql_test 37a.0 {",
          "4650: do_execsql_test 37a.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4895: do_catchsql_test 38.1 {",
          "4896:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4899: #-------------------------------------------------------------------------",
          "4900: reset_db",
          "",
          "[Removed Lines]",
          "4897: } {0 {}}",
          "",
          "[Added Lines]",
          "4897: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5326: | end crash2.txt.db",
          "5327: }]} {}",
          "5330:   BEGIN;",
          "5331:   INSERT INTO t1(b) VALUES(X'819192e578de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bf');",
          "5332:   INSERT INTO t1(b) VALUES(X'c8ae0d0e7c3175946e62ba2b449511d4eb504079984a20f77969f62206c9f3d7ea25358ab705e6978627290b6d48db9032f815a06a79a4f4b809841a0942eed12954ed166f666111812a508abc3bec87958846edaec0a6fe14564bc0a4b78f1c35ebcacca6bae29cc37ae9b59d8a2d7593af1e47dda0ece2268a98d20febafad037964f139851f9a57f48b3706b01721769071991412044cd6006f1d72eb6eb4aa5ad77e378176db8c15575fbeee47165e38a7c6c5a557ac2dfe11813976eaf6741cf593a9e457053a3c34cddfbe605a6e25419f993de8374fafcd3636509d8416a51dc7bcc14cfca322ae343078f47e23522431c17d0da0c033');",
          "5333:   INSERT INTO t1(b) VALUES(X'dc29a94e873a45a4243fce9b912aaefbadf1d0423e0345793874b356eeb500b92fb05284c1601fe9bad3143f72162f10242cec27c44ebf764c8fc9fb0824e32c4161472a4f914f579e0e8274f08ca1a02e59b9d8eec1f31061f9ccb9ed97a6f06534e991f7992c761489e6a7724f6e9c2b581e77487ded3a986d53c4419bbd3e9747cee300e670dd7294874c77e2ed48da68eaa6c3ec954a09ac410493d98e34d6686e54fbbe80696705f10e040c66093efb40746b33600685c94c664c7942835a9e954866121d5dcfb2cb12e92521ea3df175ee17072502dad9b9c1565f801b2179799011eb7418bfa00323e3157589e648ff7378be233c79b7');",
          "5336: do_catchsql_test 40.2 {",
          "5337:   INSERT INTO t1(a,b) VALUES(1,11),(2,22),(3, true ),(4,44);",
          "5340: #-------------------------------------------------------------------------",
          "5341: reset_db",
          "",
          "[Removed Lines]",
          "5329: do_execsql_test 40.1 {",
          "5334: }",
          "5338: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5329: do_catchsql_test 40.1 {",
          "5334: } {/*malformed database schema*/}",
          "5338: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5790: do_catchsql_test 43.1 {",
          "5791:   INSERT INTO t1(t1) VALUES('optimize');",
          "5794: #-------------------------------------------------------------------------",
          "5795: reset_db",
          "",
          "[Removed Lines]",
          "5792: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5792: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6047:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6048:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6049:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6052: #--------------------------------------------------------------------------",
          "6053: reset_db",
          "",
          "[Removed Lines]",
          "6050: } {0 {}}",
          "",
          "[Added Lines]",
          "6050: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6266: do_catchsql_test 46.1 {",
          "6267:   SELECT snippet(t1,'[','', '--',-1,10) FROM t1('*');",
          "6270: #--------------------------------------------------------------------------",
          "6271: reset_db",
          "",
          "[Removed Lines]",
          "6268: } {0 {{}}}",
          "",
          "[Added Lines]",
          "6268: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6419: do_catchsql_test 47.1 {",
          "6420:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6423: do_catchsql_test 47.2 {",
          "6424:   SELECT count(*) FROM (",
          "",
          "[Removed Lines]",
          "6421: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "6421: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6426:       highlight(t1, 2, '[', ']') FROM t1('g h')",
          "6427:       WHERE rank MATCH 'bm25(1.0, 1.0)' ORDER BY rank",
          "6428:   )",
          "6431: #--------------------------------------------------------------------------",
          "6432: reset_db",
          "",
          "[Removed Lines]",
          "6429: } {0 3}",
          "",
          "[Added Lines]",
          "6429: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7131: do_catchsql_test 52.1 {",
          "7132:   SELECT fts5_decode(id, block) FROM t1_data;",
          "7135: #-------------------------------------------------------------------------",
          "7136: reset_db",
          "",
          "[Removed Lines]",
          "7133: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7133: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7346: do_catchsql_test 53.1 {",
          "7347:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x<>1 FROM c WHERE x<10)",
          "7348:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7351: #-------------------------------------------------------------------------",
          "7352: reset_db",
          "",
          "[Removed Lines]",
          "7349: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7349: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7563: do_catchsql_test 54.1 {",
          "7564:   SELECT rowid==-1 FROM t1('t*');",
          "7567: #-------------------------------------------------------------------------",
          "7568: reset_db",
          "",
          "[Removed Lines]",
          "7565: } {0 {0 0 0}}",
          "",
          "[Added Lines]",
          "7565: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7777: | end crash-b366b5ac0d3887.db",
          "7778: }]} {}",
          "7781:   SAVEPOINT one;",
          "7782:   DELETE FROM t1 WHERE a MATCH 'ts';",
          "7785: do_execsql_test 55.2 {",
          "7786:   ROLLBACK TO one;",
          "",
          "[Removed Lines]",
          "7780: do_execsql_test 55.1 {",
          "7783: }",
          "",
          "[Added Lines]",
          "7780: do_catchsql_test 55.1 {",
          "7783: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8013:     set res \"1 {database disk image is malformed}\"",
          "8014:   }",
          "8015:   set res",
          "8018: #-------------------------------------------------------------------------",
          "8019: reset_db",
          "",
          "[Removed Lines]",
          "8016: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8016: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8132: do_catchsql_test 57.1 {",
          "8133:   INSERT INTO t1(t1) VALUES('optimize')",
          "8136: #-------------------------------------------------------------------------",
          "8137: reset_db",
          "",
          "[Removed Lines]",
          "8134: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8134: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8339: | end crash-5a5acd0ab42d31.db",
          "8340: }]} {}",
          "8343:   SELECT * FROM t1('t*');",
          "8346: #-------------------------------------------------------------------------",
          "8347: do_test 59.0 {",
          "",
          "[Removed Lines]",
          "8342: do_execsql_test 58.1 {",
          "8344: } {{} {} {} {} {} {}}",
          "",
          "[Added Lines]",
          "8342: do_catchsql_test 58.1 {",
          "8344: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8948: | end crash-e5fa281edabddf.db",
          "8949: }]} {}",
          "8952:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1'(),'col' );",
          "8955: do_catchsql_test 61.2 {",
          "8956:   SELECT * FROM t3 ORDER BY rowid;",
          "8959: breakpoint",
          "8960: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "8951: do_execsql_test 61.1 {",
          "8953: }",
          "8957: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8951: do_catchsql_test 61.1 {",
          "8953: } {/*malformed database schema*/}",
          "8957: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "9159: do_catchsql_test 62.1 {",
          "9160:   WITH c(x) AS (VALUES(false) UNION ALL SELECT x+1 FROM c WHERE x<72)",
          "9161:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "9164: #---------------------------------------------------------------------------",
          "9165: do_test 63.0 {",
          "",
          "[Removed Lines]",
          "9162: } {0 {}}",
          "",
          "[Added Lines]",
          "9162: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9358: do_catchsql_test 63.1 {",
          "9359:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9362: do_catchsql_test 63.2 {",
          "9363:   INSERT INTO t1(t1) VALUES('optimize');",
          "9367: do_catchsql_test 63.3 {",
          "9368:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9371: sqlite3_fts5_may_be_corrupt 0",
          "9372: finish_test",
          "",
          "[Removed Lines]",
          "9360: } {1 {database disk image is malformed}}",
          "9364: } {0 {}}",
          "9366: breakpoint",
          "9369: } {0 {}}",
          "",
          "[Added Lines]",
          "9360: } {/*malformed database schema*/}",
          "9364: } {/*malformed database schema*/}",
          "9368: } {/*malformed database schema*/}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test": [
          "File: ext/fts5/test/fts5rank.test -> ext/fts5/test/fts5rank.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   SELECT rowid FROM ttt('word') WHERE rowid BETWEEN 30 AND 40 ORDER BY rank;",
          "163: } {30 31 32 33 34 35 36 37 38 39 40}",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: reset_db",
          "167: do_execsql_test 6.0 {",
          "168:   CREATE VIRTUAL TABLE \"My.Table\" USING fts5(Text);",
          "170:   INSERT INTO \"My.Table\" VALUES ('hello this is a test');",
          "171:   INSERT INTO \"My.Table\" VALUES ('of trying to order by');",
          "172:   INSERT INTO \"My.Table\" VALUES ('rank on an fts5 table');",
          "173:   INSERT INTO \"My.Table\" VALUES ('that have periods in');",
          "174:   INSERT INTO \"My.Table\" VALUES ('the table names.');",
          "175:   INSERT INTO \"My.Table\" VALUES ('table table table');",
          "176: }",
          "177: do_execsql_test 6.1 {",
          "178:   SELECT * FROM \"My.Table\" WHERE Text MATCH 'table' ORDER BY rank;",
          "179: } {",
          "180:   {table table table} {the table names.} {rank on an fts5 table}",
          "181: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75aec4fc886c04fe098828cc03bc72c197cbf40f0a1890fe5bbb98d4fd5c3c7e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}