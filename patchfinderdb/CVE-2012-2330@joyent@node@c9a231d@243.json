{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9edb9842742c0734a9063576ae283c86b90d0676",
      "candidate_info": {
        "commit_hash": "9edb9842742c0734a9063576ae283c86b90d0676",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9edb9842742c0734a9063576ae283c86b90d0676",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: silence unused variable warning\n\n`retry` is not used if SSL_PRINT_DEBUG is not defined.",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:   if (rv >= 0) return rv;",
          "609:   int retry = BIO_should_retry(bio);",
          "611:   if (BIO_should_write(bio)) {",
          "612:     DEBUG_PRINT(\"[%p] BIO: %s want write. should retry %d\\n\", ssl_, func, retry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:   (void) retry; // unused if !defined(SSL_PRINT_DEBUG)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9701f1c4b27ac41928c22f076b185d0517bb0d9d",
      "candidate_info": {
        "commit_hash": "9701f1c4b27ac41928c22f076b185d0517bb0d9d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9701f1c4b27ac41928c22f076b185d0517bb0d9d",
        "files": [
          "src/node.cc"
        ],
        "message": "process: expose the zlib version in use in process.versions",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #endif",
          "56: #include <errno.h>",
          "57: #include <sys/types.h>",
          "59: #ifdef __POSIX__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #include \"zlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2088:   versions->Set(String::NewSymbol(\"ares\"), String::New(ARES_VERSION_STR));",
          "2089:   snprintf(buf, 20, \"%d.%d\", UV_VERSION_MAJOR, UV_VERSION_MINOR);",
          "2090:   versions->Set(String::NewSymbol(\"uv\"), String::New(buf));",
          "2091: #if HAVE_OPENSSL",
          "2093:   int c, l = strlen(OPENSSL_VERSION_TEXT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2092:   versions->Set(String::NewSymbol(\"zlib\"), String::New(ZLIB_VERSION));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f749338e1eee390fc654f129f4419895db4f8e50",
      "candidate_info": {
        "commit_hash": "f749338e1eee390fc654f129f4419895db4f8e50",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f749338e1eee390fc654f129f4419895db4f8e50",
        "files": [
          "lib/dgram.js",
          "src/udp_wrap.cc",
          "test/simple/test-dgram-broadcast-multi-process.js"
        ],
        "message": "dgram: reintroduce setBroadcast()\n\nRemoved during the early stages of node 0.5 refactoring to libuv.",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "src/udp_wrap.cc||src/udp_wrap.cc",
          "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: Socket.prototype.setBroadcast = function(arg) {",
          "227: };",
          "",
          "[Removed Lines]",
          "226:   throw new Error('not yet implemented');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   static Handle<Value> GetSockName(const Arguments& args);",
          "94:   static Handle<Value> AddMembership(const Arguments& args);",
          "95:   static Handle<Value> DropMembership(const Arguments& args);",
          "97: private:",
          "98:   static inline char* NewSlab(v8::Handle<v8::Object> global, v8::Handle<v8::Object> wrap_obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   static Handle<Value> SetBroadcast(const Arguments& args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:   NODE_SET_PROTOTYPE_METHOD(t, \"getsockname\", GetSockName);",
          "154:   NODE_SET_PROTOTYPE_METHOD(t, \"addMembership\", AddMembership);",
          "155:   NODE_SET_PROTOTYPE_METHOD(t, \"dropMembership\", DropMembership);",
          "157:   target->Set(String::NewSymbol(\"UDP\"),",
          "158:               Persistent<FunctionTemplate>::New(t)->GetFunction());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:   NODE_SET_PROTOTYPE_METHOD(t, \"setBroadcast\", SetBroadcast);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:   return DoBind(args, AF_INET6);",
          "210: }",
          "213: Handle<Value> UDPWrap::SetMembership(const Arguments& args,",
          "214:                                      uv_membership membership) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: Handle<Value> UDPWrap::SetBroadcast(const Arguments& args) {",
          "215:   HandleScope scope;",
          "216:   UNWRAP",
          "218:   assert(args.Length() == 1);",
          "220:   int on = args[0]->Uint32Value();",
          "221:   int r = uv_udp_set_broadcast(&wrap->handle_, on);",
          "223:   if (r)",
          "224:     SetErrno(uv_last_error(uv_default_loop()));",
          "226:   return scope.Close(Integer::New(r));",
          "227: }",
          "",
          "---------------"
        ],
        "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js": [
          "File: test/simple/test-dgram-broadcast-multi-process.js -> test/simple/test-dgram-broadcast-multi-process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common'),",
          "23:     assert = require('assert'),",
          "24:     cluster = require('cluster'),",
          "25:     dgram = require('dgram'),",
          "26:     util = require('util'),",
          "27:     assert = require('assert'),",
          "28:     Buffer = require('buffer').Buffer,",
          "29:     LOCAL_BROADCAST_HOST = '255.255.255.255',",
          "30:     messages = [",
          "31:       new Buffer('First message to send'),",
          "32:       new Buffer('Second message to send'),",
          "33:       new Buffer('Third message to send'),",
          "34:       new Buffer('Fourth message to send')",
          "35:     ];",
          "37: if (cluster.isMaster) {",
          "38:   var workers = {},",
          "39:     listeners = 3,",
          "40:     listening = 0,",
          "41:     i = 0,",
          "42:     done = 0;",
          "45:   for (var x = 0; x < listeners; x++) {",
          "46:     (function () {",
          "47:       var worker = cluster.fork();",
          "48:       workers[worker.pid] = worker;",
          "50:       worker.messagesReceived = [];",
          "52:       worker.on('message', function (msg) {",
          "53:         if (msg.listening) {",
          "54:           listening += 1;",
          "56:           if (listening === listeners) {",
          "58:             sendSocket.sendNext();",
          "59:           }",
          "60:         }",
          "61:         else if (msg.message) {",
          "62:           worker.messagesReceived.push(msg.message);",
          "64:           if (worker.messagesReceived.length === messages.length) {",
          "65:             done += 1;",
          "66:             console.error('%d received %d messages total.', worker.pid,",
          "67:                     worker.messagesReceived.length);",
          "68:           }",
          "70:           if (done === listeners) {",
          "71:             console.error('All workers have received the required number of '",
          "72:                     + 'messages. Will now compare.');",
          "74:             Object.keys(workers).forEach(function (pid) {",
          "75:               var worker = workers[pid];",
          "77:               var count = 0;",
          "79:               worker.messagesReceived.forEach(function(buf) {",
          "80:                 for (var i = 0; i < messages.length; ++i) {",
          "81:                   if (buf.toString() === messages[i].toString()) {",
          "82:                     count++;",
          "83:                     break;",
          "84:                   }",
          "85:                 }",
          "86:               });",
          "88:               console.error('%d received %d matching messges.', worker.pid",
          "89:                     , count);",
          "91:               assert.equal(count, messages.length",
          "92:                 ,'A worker received an invalid multicast message');",
          "93:             });",
          "94:           }",
          "95:         }",
          "96:       });",
          "97:     })(x);",
          "98:   }",
          "100:   var sendSocket = dgram.createSocket('udp4');",
          "102:   sendSocket.bind(common.PORT);",
          "103:   sendSocket.setBroadcast(true);",
          "105:   sendSocket.on('close', function() {",
          "106:     console.error('sendSocket closed');",
          "107:   });",
          "109:   sendSocket.sendNext = function() {",
          "110:     var buf = messages[i++];",
          "112:     if (!buf) {",
          "113:       try { sendSocket.close(); } catch (e) {}",
          "114:       return;",
          "115:     }",
          "117:     sendSocket.send(buf, 0, buf.length,",
          "118:                 common.PORT, LOCAL_BROADCAST_HOST, function(err) {",
          "120:       if (err) throw err;",
          "122:       console.error('sent %s to %s:%s', util.inspect(buf.toString())",
          "123:                 , LOCAL_BROADCAST_HOST, common.PORT);",
          "125:       process.nextTick(sendSocket.sendNext);",
          "126:     });",
          "127:   };",
          "128: }",
          "130: if (!cluster.isMaster) {",
          "131:   var receivedMessages = [];",
          "132:   var listenSocket = dgram.createSocket('udp4');",
          "134:   listenSocket.on('message', function(buf, rinfo) {",
          "135:     console.error('%s received %s from %j', process.pid",
          "136:                 , util.inspect(buf.toString()), rinfo);",
          "138:     receivedMessages.push(buf);",
          "140:     process.send({ message : buf.toString() });",
          "142:     if (receivedMessages.length == messages.length) {",
          "143:       listenSocket.dropMembership(LOCAL_BROADCAST_HOST);",
          "144:       process.nextTick(function() { // TODO should be changed to below.",
          "146:         listenSocket.close();",
          "147:       });",
          "148:     }",
          "149:   });",
          "151:   listenSocket.on('close', function() {",
          "152:     process.exit();",
          "153:   });",
          "155:   listenSocket.on('listening', function() {",
          "156:     process.send({ listening : true });",
          "157:   });",
          "159:   listenSocket.bind(common.PORT);",
          "160: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d69bbfbdbb389b6828122181a55df778eab2328",
      "candidate_info": {
        "commit_hash": "5d69bbfbdbb389b6828122181a55df778eab2328",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5d69bbfbdbb389b6828122181a55df778eab2328",
        "files": [
          "deps/v8/src/regexp-macro-assembler-tracer.cc",
          "deps/v8/src/x64/regexp-macro-assembler-x64.cc",
          "deps/v8/test/mjsunit/regress/regress-1748.js"
        ],
        "message": "Fix bug in x64 RegExp detecting start of string.\n\nAlso add missing MIPS case in regexp tracer.\n\nFixes issues v8:1748 and v8:1746\n\nBUG=v8:1748, v8:1746\nTEST=mjsunit/regress/regress-1748.js\n\nReview URL: http://codereview.chromium.org/8116001\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@9504 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/regexp-macro-assembler-tracer.cc||deps/v8/src/regexp-macro-assembler-tracer.cc",
          "deps/v8/src/x64/regexp-macro-assembler-x64.cc||deps/v8/src/x64/regexp-macro-assembler-x64.cc",
          "deps/v8/test/mjsunit/regress/regress-1748.js||deps/v8/test/mjsunit/regress/regress-1748.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/regexp-macro-assembler-tracer.cc||deps/v8/src/regexp-macro-assembler-tracer.cc": [
          "File: deps/v8/src/regexp-macro-assembler-tracer.cc -> deps/v8/src/regexp-macro-assembler-tracer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     RegExpMacroAssembler* assembler) :",
          "38:   assembler_(assembler) {",
          "39:   unsigned int type = assembler->Implementation();",
          "42:   PrintF(\"RegExpMacroAssembler%s();\\n\", impl_names[type]);",
          "43: }",
          "",
          "[Removed Lines]",
          "40:   ASSERT(type < 4);",
          "41:   const char* impl_names[4] = {\"IA32\", \"ARM\", \"X64\", \"Bytecode\"};",
          "",
          "[Added Lines]",
          "40:   ASSERT(type < 5);",
          "41:   const char* impl_names[4] = {\"IA32\", \"ARM\", \"MIPS\", \"X64\", \"Bytecode\"};",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/regexp-macro-assembler-x64.cc||deps/v8/src/x64/regexp-macro-assembler-x64.cc": [
          "File: deps/v8/src/x64/regexp-macro-assembler-x64.cc -> deps/v8/src/x64/regexp-macro-assembler-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: void RegExpMacroAssemblerX64::CheckAtStart(Label* on_at_start) {",
          "194:   Label not_at_start;",
          "197:   BranchOrBacktrack(not_equal, &not_at_start);",
          "199:   __ lea(rax, Operand(rsi, rdi, times_1, 0));",
          "",
          "[Removed Lines]",
          "196:   __ cmpb(Operand(rbp, kStartIndex), Immediate(0));",
          "",
          "[Added Lines]",
          "196:   __ cmpl(Operand(rbp, kStartIndex), Immediate(0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206: void RegExpMacroAssemblerX64::CheckNotAtStart(Label* on_not_at_start) {",
          "209:   BranchOrBacktrack(not_equal, on_not_at_start);",
          "211:   __ lea(rax, Operand(rsi, rdi, times_1, 0));",
          "",
          "[Removed Lines]",
          "208:   __ cmpb(Operand(rbp, kStartIndex), Immediate(0));",
          "",
          "[Added Lines]",
          "208:   __ cmpl(Operand(rbp, kStartIndex), Immediate(0));",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/regress/regress-1748.js||deps/v8/test/mjsunit/regress/regress-1748.js": [
          "File: deps/v8/test/mjsunit/regress/regress-1748.js -> deps/v8/test/mjsunit/regress/regress-1748.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: var str = Array(10000).join(\"X\");",
          "33: str.replace(/^|X/g, function(m, i, s) {",
          "34:   if (i > 0) assertEquals(\"X\", m, \"at position 0x\" + i.toString(16));",
          "35: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea44d3031d101b42b427e2b33355e27ec616e731",
      "candidate_info": {
        "commit_hash": "ea44d3031d101b42b427e2b33355e27ec616e731",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ea44d3031d101b42b427e2b33355e27ec616e731",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: fix compile-time error with openssl <= 0.9.7e",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "993: }",
          "997:   if (where & SSL_CB_HANDSHAKE_START) {",
          "998:     HandleScope scope;",
          "999:     Connection* c = static_cast<Connection*>(SSL_get_app_data(ssl));",
          "",
          "[Removed Lines]",
          "996: void Connection::SSLInfoCallback(const SSL *ssl, int where, int ret) {",
          "",
          "[Added Lines]",
          "996: void Connection::SSLInfoCallback(const SSL *ssl_, int where, int ret) {",
          "999:   SSL* ssl = const_cast<SSL*>(ssl_);",
          "",
          "---------------"
        ]
      }
    }
  ]
}