{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "675f73bcabad39a517c8e6e370d10f20ce41f172",
      "candidate_info": {
        "commit_hash": "675f73bcabad39a517c8e6e370d10f20ce41f172",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/675f73bcabad39a517c8e6e370d10f20ce41f172",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz test cases added.\n\nFossilOrigin-Name: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de6e6d6846d6a41c4821454dfdc042096234df753be08c5567b79fe535d9b6ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec123e13014c585d1c408e1583714de438b50aff",
      "candidate_info": {
        "commit_hash": "ec123e13014c585d1c408e1583714de438b50aff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec123e13014c585d1c408e1583714de438b50aff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Fix an indentation error and improve the placement of an assert() based on a tweet from Yuri Kotov.\n\nFossilOrigin-Name: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     rc = pWalker->xExprCallback(pWalker, pExpr);",
          "74:     if( rc ) return rc & WRC_Abort;",
          "75:     if( !ExprHasProperty(pExpr,(EP_TokenOnly|EP_Leaf)) ){",
          "76:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "78:       if( pExpr->pRight ){",
          "79:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "80:         pExpr = pExpr->pRight;",
          "",
          "[Removed Lines]",
          "77:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "[Added Lines]",
          "76:       assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
      "candidate_info": {
        "commit_hash": "685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Allow fts5 to filter on multiple MATCH clauses in a single scan.\n\nFossilOrigin-Name: 9d418a7a491761eeb38a70898677a493e2631e5d62e75ee88431f52d3dfd2344",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: i64 sqlite3Fts5ExprRowid(Fts5Expr*);",
          "697: void sqlite3Fts5ExprFree(Fts5Expr*);",
          "700: int sqlite3Fts5ExprInit(Fts5Global*, sqlite3*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   }",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2){",
          "313:   Fts5Parse sParse;",
          "314:   memset(&sParse, 0, sizeof(sParse));",
          "316:   if( *pp1 ){",
          "317:     Fts5Expr *p1 = *pp1;",
          "318:     int nPhrase = p1->nPhrase + p2->nPhrase;",
          "320:     p1->pRoot = sqlite3Fts5ParseNode(&sParse, FTS5_AND, p1->pRoot, p2->pRoot,0);",
          "321:     p2->pRoot = 0;",
          "323:     if( sParse.rc==SQLITE_OK ){",
          "324:       Fts5ExprPhrase **ap = (Fts5ExprPhrase**)sqlite3_realloc(",
          "325:           p1->apExprPhrase, nPhrase * sizeof(Fts5ExprPhrase*)",
          "326:       );",
          "327:       if( ap==0 ){",
          "328:         sParse.rc = SQLITE_NOMEM;",
          "329:       }else{",
          "330:         int i;",
          "331:         memmove(&ap[p2->nPhrase], ap, p1->nPhrase*sizeof(Fts5ExprPhrase*));",
          "332:         for(i=0; i<p2->nPhrase; i++){",
          "333:           ap[i] = p2->apExprPhrase[i];",
          "334:         }",
          "335:         p1->nPhrase = nPhrase;",
          "336:         p1->apExprPhrase = ap;",
          "337:       }",
          "338:     }",
          "339:     sqlite3_free(p2->apExprPhrase);",
          "340:     sqlite3_free(p2);",
          "341:   }else{",
          "343:   }",
          "345:   return sParse.rc;",
          "346: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   Fts5Config *pConfig = pTab->pConfig;",
          "504:   const int nCol = pConfig->nCol;",
          "508:   int i;",
          "533:   assert( SQLITE_INDEX_CONSTRAINT_EQ<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "534:   assert( SQLITE_INDEX_CONSTRAINT_GT<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "",
          "[Removed Lines]",
          "506:   int bHasMatch;",
          "507:   int iNext;",
          "510:   struct Constraint {",
          "516:   } aConstraint[] = {",
          "517:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "518:                                     FTS5_BI_MATCH,    1, 1, -1},",
          "519:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "520:                                     FTS5_BI_RANK,     2, 1, -1},",
          "521:     {SQLITE_INDEX_CONSTRAINT_EQ,    FTS5_BI_ROWID_EQ, 0, 0, -1},",
          "522:     {SQLITE_INDEX_CONSTRAINT_LT|SQLITE_INDEX_CONSTRAINT_LE,",
          "523:                                     FTS5_BI_ROWID_LE, 0, 0, -1},",
          "524:     {SQLITE_INDEX_CONSTRAINT_GT|SQLITE_INDEX_CONSTRAINT_GE,",
          "525:                                     FTS5_BI_ROWID_GE, 0, 0, -1},",
          "526:   };",
          "528:   int aColMap[3];",
          "529:   aColMap[0] = -1;",
          "530:   aColMap[1] = nCol;",
          "531:   aColMap[2] = nCol+1;",
          "",
          "[Added Lines]",
          "530:   char *idxStr;",
          "531:   int iIdxStr = 0;",
          "532:   int iCons = 0;",
          "534:   int bSeenEq = 0;",
          "535:   int bSeenGt = 0;",
          "536:   int bSeenLt = 0;",
          "537:   int bSeenMatch = 0;",
          "538:   int bSeenRank = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "547:   for(i=0; i<pInfo->nConstraint; i++){",
          "548:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "549:     int iCol = p->iColumn;",
          "553:     ){",
          "561:         pInfo->estimatedCost = 1e50;",
          "562:         return SQLITE_OK;",
          "563:       }",
          "571:         }",
          "572:       }",
          "573:     }",
          "574:   }",
          "577:   if( pInfo->nOrderBy==1 ){",
          "578:     int iSort = pInfo->aOrderBy[0].iColumn;",
          "580:       idxFlags |= FTS5_BI_ORDER_RANK;",
          "581:     }else if( iSort==-1 ){",
          "582:       idxFlags |= FTS5_BI_ORDER_ROWID;",
          "",
          "[Removed Lines]",
          "551:     if( (p->op==SQLITE_INDEX_CONSTRAINT_MATCH && iCol>=0 && iCol<=nCol)",
          "552:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol==nCol)",
          "555:       if( p->usable ){",
          "556:         idxFlags = (idxFlags & 0xFFFF) | FTS5_BI_MATCH | (iCol << 16);",
          "557:         aConstraint[0].iConsIndex = i;",
          "558:       }else{",
          "564:     }else if( p->op<=SQLITE_INDEX_CONSTRAINT_MATCH ){",
          "565:       int j;",
          "566:       for(j=1; j<ArraySize(aConstraint); j++){",
          "567:         struct Constraint *pC = &aConstraint[j];",
          "568:         if( iCol==aColMap[pC->iCol] && (p->op & pC->op) && p->usable ){",
          "569:           pC->iConsIndex = i;",
          "570:           idxFlags |= pC->fts5op;",
          "579:     if( iSort==(pConfig->nCol+1) && BitFlagTest(idxFlags, FTS5_BI_MATCH) ){",
          "",
          "[Added Lines]",
          "554:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "555:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "556:   pInfo->idxStr = idxStr;",
          "557:   pInfo->needToFreeIdxStr = 1;",
          "562:     if( p->op==SQLITE_INDEX_CONSTRAINT_MATCH",
          "563:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol>=nCol)",
          "566:       if( p->usable==0 || iCol<0 ){",
          "571:       }else{",
          "572:         if( iCol==nCol+1 ){",
          "573:           if( bSeenRank ) continue;",
          "574:           idxStr[iIdxStr++] = 'r';",
          "575:           bSeenRank = 1;",
          "576:         }else{",
          "577:           bSeenMatch = 1;",
          "578:           idxStr[iIdxStr++] = 'm';",
          "579:           if( iCol<nCol ){",
          "580:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "581:             idxStr += strlen(&idxStr[iIdxStr]);",
          "582:             assert( idxStr[iIdxStr]=='\\0' );",
          "583:           }",
          "584:         }",
          "585:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "586:         pInfo->aConstraintUsage[i].omit = 1;",
          "588:     }",
          "589:     else if( p->usable && bSeenEq==0",
          "590:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "591:     ){",
          "592:       idxStr[iIdxStr++] = '=';",
          "593:       bSeenEq = 1;",
          "594:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "595:     }",
          "596:   }",
          "598:   if( bSeenEq==0 ){",
          "599:     for(i=0; i<pInfo->nConstraint; i++){",
          "600:       struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "601:       if( p->iColumn<0 && p->usable ){",
          "602:         int op = p->op;",
          "603:         if( op==SQLITE_INDEX_CONSTRAINT_LT || op==SQLITE_INDEX_CONSTRAINT_LE ){",
          "604:           if( bSeenLt ) continue;",
          "605:           idxStr[iIdxStr++] = '<';",
          "606:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "607:           bSeenLt = 1;",
          "608:         }else",
          "609:         if( op==SQLITE_INDEX_CONSTRAINT_GT || op==SQLITE_INDEX_CONSTRAINT_GE ){",
          "610:           if( bSeenGt ) continue;",
          "611:           idxStr[iIdxStr++] = '>';",
          "612:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "613:           bSeenGt = 1;",
          "618:   idxStr[iIdxStr] = '\\0';",
          "623:     if( iSort==(pConfig->nCol+1) && bSeenMatch ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:   }",
          "601:   }else{",
          "613:   }",
          "615:   pInfo->idxNum = idxFlags;",
          "",
          "[Removed Lines]",
          "593:   bHasMatch = BitFlagTest(idxFlags, FTS5_BI_MATCH);",
          "594:   if( BitFlagTest(idxFlags, FTS5_BI_ROWID_EQ) ){",
          "595:     pInfo->estimatedCost = bHasMatch ? 100.0 : 10.0;",
          "596:     if( bHasMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "597:   }else if( BitFlagAllTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "598:     pInfo->estimatedCost = bHasMatch ? 500.0 : 250000.0;",
          "599:   }else if( BitFlagTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "600:     pInfo->estimatedCost = bHasMatch ? 750.0 : 750000.0;",
          "602:     pInfo->estimatedCost = bHasMatch ? 1000.0 : 1000000.0;",
          "603:   }",
          "606:   iNext = 1;",
          "607:   for(i=0; i<ArraySize(aConstraint); i++){",
          "608:     struct Constraint *pC = &aConstraint[i];",
          "609:     if( pC->iConsIndex>=0 ){",
          "610:       pInfo->aConstraintUsage[pC->iConsIndex].argvIndex = iNext++;",
          "611:       pInfo->aConstraintUsage[pC->iConsIndex].omit = (unsigned char)pC->omit;",
          "612:     }",
          "",
          "[Added Lines]",
          "637:   if( bSeenEq ){",
          "638:     pInfo->estimatedCost = bSeenMatch ? 100.0 : 10.0;",
          "639:     if( bSeenMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "640:   }else if( bSeenLt && bSeenGt ){",
          "641:     pInfo->estimatedCost = bSeenMatch ? 500.0 : 250000.0;",
          "642:   }else if( bSeenLt || bSeenGt ){",
          "643:     pInfo->estimatedCost = bSeenMatch ? 750.0 : 750000.0;",
          "645:     pInfo->estimatedCost = bSeenMatch ? 1000.0 : 1000000.0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1152:   char **pzErrmsg = pConfig->pzErrmsg;",
          "1157:   if( pCsr->ePlan ){",
          "1158:     fts5FreeCursorComponents(pCsr);",
          "",
          "[Removed Lines]",
          "1154:   UNUSED_PARAM(zUnused);",
          "1155:   UNUSED_PARAM(nVal);",
          "",
          "[Added Lines]",
          "1185:   int i;",
          "1186:   int iIdxStr = 0;",
          "1187:   Fts5Expr *pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:   assert( pCsr->pRank==0 );",
          "1166:   assert( pCsr->zRank==0 );",
          "1167:   assert( pCsr->zRankArgs==0 );",
          "1169:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1170:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1185:   bOrderByRank = ((idxNum & FTS5_BI_ORDER_RANK) ? 1 : 0);",
          "1186:   pCsr->bDesc = bDesc = ((idxNum & FTS5_BI_ORDER_DESC) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "1177:   if( BitFlagTest(idxNum, FTS5_BI_MATCH) ) pMatch = apVal[iVal++];",
          "1178:   if( BitFlagTest(idxNum, FTS5_BI_RANK) ) pRank = apVal[iVal++];",
          "1179:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_EQ) ) pRowidEq = apVal[iVal++];",
          "1180:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_LE) ) pRowidLe = apVal[iVal++];",
          "1181:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_GE) ) pRowidGe = apVal[iVal++];",
          "1182:   iCol = (idxNum>>16);",
          "1183:   assert( iCol>=0 && iCol<=pConfig->nCol );",
          "1184:   assert( iVal==nVal );",
          "",
          "[Added Lines]",
          "1200:   assert( pTab->pSortCsr==0 || nVal==0 );",
          "1206:   for(i=0; i<nVal; i++){",
          "1207:     switch( idxStr[iIdxStr++] ){",
          "1208:       case 'r':",
          "1209:         pRank = apVal[i];",
          "1210:         break;",
          "1211:       case 'm': {",
          "1212:         char *zText = sqlite3_value_text(apVal[i]);",
          "1213:         if( zText==0 ) zText = \"\";",
          "1215:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1216:           iCol = 0;",
          "1217:           do{",
          "1218:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1219:             iIdxStr++;",
          "1220:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1221:         }else{",
          "1222:           iCol = pConfig->nCol;",
          "1223:         }",
          "1225:         if( zText[0]=='*' ){",
          "1229:           rc = fts5SpecialMatch(pTab, pCsr, &zText[1]);",
          "1230:           goto filter_out;",
          "1231:         }else{",
          "1232:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1233:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "1234:           if( rc==SQLITE_OK ){",
          "1235:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1236:             pExpr = 0;",
          "1237:           }",
          "1238:           if( rc!=SQLITE_OK ) goto filter_out;",
          "1239:         }",
          "1241:         break;",
          "1242:       }",
          "1243:       case '=':",
          "1244:         pRowidEq = apVal[i];",
          "1245:         break;",
          "1246:       case '<':",
          "1247:         pRowidLe = apVal[i];",
          "1248:         break;",
          "1249:       default: assert( idxStr[iIdxStr-1]=='>' );",
          "1250:         pRowidGe = apVal[i];",
          "1251:         break;",
          "1252:     }",
          "1253:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221:     pCsr->ePlan = FTS5_PLAN_SOURCE;",
          "1222:     pCsr->pExpr = pTab->pSortCsr->pExpr;",
          "1223:     rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1228:     rc = fts5CursorParseRank(pConfig, pCsr, pRank);",
          "1229:     if( rc==SQLITE_OK ){",
          "1235:       }else{",
          "1247:       }",
          "1248:     }",
          "1249:   }else if( pConfig->zContent==0 ){",
          "",
          "[Removed Lines]",
          "1224:   }else if( pMatch ){",
          "1225:     const char *zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "1226:     if( zExpr==0 ) zExpr = \"\";",
          "1230:       if( zExpr[0]=='*' ){",
          "1234:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1236:         char **pzErr = &pTab->p.base.zErrMsg;",
          "1237:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1238:         if( rc==SQLITE_OK ){",
          "1239:           if( bOrderByRank ){",
          "1240:             pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1241:             rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1242:           }else{",
          "1243:             pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1244:             rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1245:           }",
          "1246:         }",
          "",
          "[Added Lines]",
          "1293:   }else if( pCsr->pExpr ){",
          "1296:       if( bOrderByRank ){",
          "1297:         pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1298:         rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1300:         pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1301:         rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1260:     );",
          "1261:     if( rc==SQLITE_OK ){",
          "1262:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "1264:       }else{",
          "1265:         sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iFirstRowid);",
          "1266:         sqlite3_bind_int64(pCsr->pStmt, 2, pCsr->iLastRowid);",
          "",
          "[Removed Lines]",
          "1263:         sqlite3_bind_value(pCsr->pStmt, 1, apVal[0]);",
          "",
          "[Added Lines]",
          "1318:         sqlite3_bind_value(pCsr->pStmt, 1, pRowidEq);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1269:     }",
          "1270:   }",
          "1272:   pConfig->pzErrmsg = pzErrmsg;",
          "1273:   return rc;",
          "1274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327:  filter_out:",
          "1328:   sqlite3Fts5ExprFree(pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test": [
          "File: ext/fts5/test/fts5faultB.test -> ext/fts5/test/fts5faultB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   faultsim_test_result {0 {1 4}}",
          "148: }",
          "151: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #-------------------------------------------------------------------------",
          "151: # Test OOM injection in a query with two MATCH expressions",
          "152: #",
          "153: reset_db",
          "154: do_execsql_test 6.0 {",
          "155:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "156:   INSERT INTO t1 VALUES('a b c d');  -- 1",
          "157:   INSERT INTO t1 VALUES('d a b c');  -- 2",
          "158:   INSERT INTO t1 VALUES('c d a b');  -- 3",
          "159:   INSERT INTO t1 VALUES('b c d a');  -- 4",
          "160: }",
          "161: do_faultsim_test 6.1 -faults oom* -body {",
          "162:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a' AND t1 MATCH 'b' }",
          "163: } -test {",
          "164:   faultsim_test_result {0 {1 2 3 4}}",
          "165: }",
          "166: do_faultsim_test 6.2 -faults oom* -body {",
          "167:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a OR b' AND t1 MATCH 'c OR d' }",
          "168: } -test {",
          "169:   faultsim_test_result {0 {1 2 3 4}}",
          "170: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test": [
          "File: ext/fts5/test/fts5multi.test -> ext/fts5/test/fts5multi.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 September 13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5multi",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: fts5_aux_test_functions db",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE VIRTUAL TABLE t1 USING fts5(a, b, c);",
          "28:   INSERT INTO t1 VALUES('gg bb bb'   ,'gg ff gg'   ,'ii ii');",
          "29:   INSERT INTO t1 VALUES('dd dd hh kk','jj'         ,'aa');",
          "30:   INSERT INTO t1 VALUES('kk gg ee'   ,'hh cc'      ,'hh jj aa cc');",
          "31:   INSERT INTO t1 VALUES('hh'         ,'bb jj cc'   ,'kk ii');",
          "32:   INSERT INTO t1 VALUES('kk dd kk ii','aa ee aa'   ,'ee');",
          "33:   INSERT INTO t1 VALUES('ee'         ,'ff gg kk aa','ee ff ee');",
          "34:   INSERT INTO t1 VALUES('ff jj'      ,'gg ee'      ,'kk ee gg kk');",
          "35:   INSERT INTO t1 VALUES('ff ee dd hh','kk ee'      ,'gg dd');",
          "36:   INSERT INTO t1 VALUES('bb'         ,'aa'         ,'bb aa');",
          "37:   INSERT INTO t1 VALUES('hh cc bb'   ,'ff bb'      ,'cc');",
          "38:   INSERT INTO t1 VALUES('jj'         ,'ff dd bb aa','dd dd ff ff');",
          "39:   INSERT INTO t1 VALUES('ff dd gg dd','gg aa bb ff','cc');",
          "40:   INSERT INTO t1 VALUES('ff aa cc jj','kk'         ,'ii dd');",
          "41:   INSERT INTO t1 VALUES('jj dd'      ,'cc'         ,'ii hh ee aa');",
          "42:   INSERT INTO t1 VALUES('ff ii hh'   ,'dd'         ,'gg');",
          "43:   INSERT INTO t1 VALUES('ff dd gg hh','hh'         ,'ff dd');",
          "44:   INSERT INTO t1 VALUES('cc cc'      ,'ff dd ff'   ,'bb');",
          "45:   INSERT INTO t1 VALUES('ii'         ,'bb ii'      ,'jj kk');",
          "46:   INSERT INTO t1 VALUES('ff hh'      ,'hh bb'      ,'bb dd ee');",
          "47:   INSERT INTO t1 VALUES('jj kk'      ,'jj'         ,'gg ff cc');",
          "48:   INSERT INTO t1 VALUES('dd kk'      ,'ii gg'      ,'dd');",
          "49:   INSERT INTO t1 VALUES('cc'         ,'aa ff'      ,'ii');",
          "50:   INSERT INTO t1 VALUES('bb ff bb ii','bb kk bb aa','hh ff ii dd');",
          "51:   INSERT INTO t1 VALUES('aa'         ,'ee bb jj jj','dd');",
          "52:   INSERT INTO t1 VALUES('kk dd cc'   ,'aa jj'      ,'ee aa ff');",
          "53:   INSERT INTO t1 VALUES('aa gg aa'   ,'jj'         ,'ii kk hh gg');",
          "54:   INSERT INTO t1 VALUES('ff hh aa'   ,'jj ii'      ,'hh dd bb jj');",
          "55:   INSERT INTO t1 VALUES('hh'         ,'aa gg kk'   ,'bb ee');",
          "56:   INSERT INTO t1 VALUES('bb'         ,'ee'         ,'gg');",
          "57:   INSERT INTO t1 VALUES('dd kk'      ,'kk bb aa'   ,'ee');",
          "58: }",
          "60: foreach {tn c1 e1 c2 e2} {",
          "61:   1     t1 aa     t1 bb",
          "62:   2     a  aa     b  bb",
          "63:   3     a  \"aa OR bb OR cc\"    b  \"jj OR ii OR hh\"",
          "64:   4     t1  \"aa AND bb\"       t1  \"cc\"",
          "65:   5     c   \"kk\"               b  \"aa OR bb OR cc OR dd OR ee\"",
          "66: } {",
          "67:   if {$c1==\"t1\"} {",
          "68:     set lhs \"( $e1 )\"",
          "69:   } else {",
          "70:     set lhs \"$c1 : ( $e1 )\"",
          "71:   }",
          "72:   if {$c2==\"t1\"} {",
          "73:     set rhs \"( $e2 )\"",
          "74:   } else {",
          "75:     set rhs \"$c2 : ( $e2 )\"",
          "76:   }",
          "78:   set q1 \"t1 MATCH '($lhs) AND ($rhs)'\"",
          "79:   set q2 \"$c1 MATCH '$e1' AND $c2 MATCH '$e2'\"",
          "81:   set ret [execsql \"SELECT rowid FROM t1 WHERE $q1\"]",
          "82:   set N [llength $ret]",
          "83:   do_execsql_test 1.$tn.1.($N) \"SELECT rowid FROM t1 WHERE $q2\" $ret",
          "85:   set ret [execsql \"SELECT fts5_test_poslist(t1) FROM t1 WHERE $q1\"]",
          "86:   do_execsql_test 1.$tn.2.($N) \"",
          "87:     SELECT fts5_test_poslist(t1) FROM t1 WHERE $q2",
          "88:   \" $ret",
          "89: }",
          "91: do_catchsql_test 2.1.1 {",
          "92:   SELECT rowid FROM t1 WHERE t1 MATCH '(NOT' AND t1 MATCH 'aa bb';",
          "93: } {1 {fts5: syntax error near \"NOT\"}}",
          "94: do_catchsql_test 2.1.2 {",
          "95:   SELECT rowid FROM t1 WHERE t1 MATCH 'aa bb' AND t1 MATCH '(NOT';",
          "96: } {1 {fts5: syntax error near \"NOT\"}}",
          "98: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: do_eqp_test 1.5 {",
          "62:   SELECT * FROM f1 WHERE rank MATCH ?",
          "65: finish_test",
          "",
          "[Removed Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 2:}",
          "",
          "[Added Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 0:r}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test": [
          "File: ext/fts5/test/fts5simple.test -> ext/fts5/test/fts5simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   SELECT rowid FROM x1($doc);",
          "468: } {11112}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #-------------------------------------------------------------------------",
          "471: reset_db",
          "472: do_execsql_test 22.0 {",
          "473:   CREATE VIRTUAL TABLE x1 USING fts5(x);",
          "474:   INSERT INTO x1(x) VALUES('a b c');",
          "475:   INSERT INTO x1(x) VALUES('x y z');",
          "476:   INSERT INTO x1(x) VALUES('c b a');",
          "477:   INSERT INTO x1(x) VALUES('z y x');",
          "478: }",
          "480: do_catchsql_test 22.1 {SELECT * FROM x1('')}   {1 {fts5: syntax error near \"\"}}",
          "481: do_catchsql_test 22.2 {SELECT * FROM x1(NULL)} {1 {fts5: syntax error near \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 980be1730dc1239c63a107923bf2e32b4ec7d4bc31b9190e711cc35f18cc2bb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
      "candidate_info": {
        "commit_hash": "d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d790c9a1613334e2fc6b92211911e032ecbf36cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Tweak the shell tool \".recover\" command so that it can recover rows that consist of a rowid and no fields.\n\nFossilOrigin-Name: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6712:     \"    )\"",
          "6713:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6714:     \") \"",
          "6716:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6717:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6718:     \");\"",
          "",
          "[Removed Lines]",
          "6715:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "[Added Lines]",
          "6715:     \"FROM pages WHERE maxlen IS NOT NULL AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfee884e7366462eaaef4d3873c741948d5c1c79",
      "candidate_info": {
        "commit_hash": "cfee884e7366462eaaef4d3873c741948d5c1c79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfee884e7366462eaaef4d3873c741948d5c1c79",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Remove references to test scripts analyzeA.test and analyzeB.test from permutations.test, since those test modules no longer exist.\n\nFossilOrigin-Name: 2394879698107479270c9d899c704de3756ceae177a338b3c37844e2a31aa6dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 361eb2f682a303bba72b39d322d9de630494ca044fe0508dcb23b6130d312d85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:   Coverage tests for file analyze.c.",
          "456: } -files {",
          "457:   analyze3.test analyze4.test analyze5.test analyze6.test",
          "460: }",
          "462: test_suite \"coverage-sorter\" -description {",
          "",
          "[Removed Lines]",
          "458:   analyze7.test analyze8.test analyze9.test analyzeA.test",
          "459:   analyze.test analyzeB.test mallocA.test",
          "",
          "[Added Lines]",
          "458:   analyze7.test analyze8.test analyze9.test",
          "459:   analyze.test mallocA.test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "624: } -files {",
          "625:     alter.test alter3.test",
          "626:     analyze.test analyze3.test analyze4.test analyze5.test analyze6.test",
          "628:     auth.test bind.test blob.test capi2.test capi3.test collate1.test",
          "629:     collate2.test collate3.test collate4.test collate5.test collate6.test",
          "630:     conflict.test date.test delete.test expr.test fkey1.test func.test",
          "",
          "[Removed Lines]",
          "627:     analyze7.test analyze8.test analyze9.test analyzeA.test analyzeB.test",
          "",
          "[Added Lines]",
          "627:     analyze7.test analyze8.test analyze9.test",
          "",
          "---------------"
        ]
      }
    }
  ]
}