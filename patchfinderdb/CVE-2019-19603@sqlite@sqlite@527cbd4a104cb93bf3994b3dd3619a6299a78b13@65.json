{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
      "candidate_info": {
        "commit_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "The two-argument version of fts3_tokenizer() works regardless of the value of SQLITE_DBCONFIG_ENABLE_FT3_TOKENIZER as long as the second argument is a bind parameter.\n\nFossilOrigin-Name: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "95: do_test fts3atoken-1.7 {",
          "96:   execsql {",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "104:   }",
          "105: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
      "candidate_info": {
        "commit_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: 6ac0f822450b26c7d67c33cdb2a90189cd3cf65a052af8497b795c3f71a23813",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
      "candidate_info": {
        "commit_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join.test",
          "test/with1.test"
        ],
        "message": "Limit the size of SrcList objects to 200 entries (compile-time configurable using -DSQLITE_MAX_SRCLIST=n).  The maximum number of tables in a join has always been 64, so this is not a real constraint on capability.  Limiting the size of a SrcList prevents DOS attacks (discovered by OSSFuzz) using crazy nexted CTE joins.\n\nFossilOrigin-Name: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join.test||test/join.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3823:   return -1;",
          "3824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3834: #ifndef SQLITE_MAX_SRCLIST",
          "3835: # define SQLITE_MAX_SRCLIST 200",
          "3836: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3861:     SrcList *pNew;",
          "3862:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3863:     int nGot;",
          "3864:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3865:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3866:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "671: jointest join-12.6 66 {1 {at most 64 tables in a join}}",
          "672: jointest join-12.7 127 {1 {at most 64 tables in a join}}",
          "673: jointest join-12.8 128 {1 {at most 64 tables in a join}}",
          "690: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "674: jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "676: # If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "677: # calls made by the following test cases are too time consuming to run.",
          "678: # Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "679: # a problem.",
          "680: ifcapable pragma&&compileoption_diags {",
          "681:   if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "682:     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "683:     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "684:     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "685:     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "686:   }",
          "687: }",
          "",
          "[Added Lines]",
          "675: # As of 2019-01-17, the number of elements in a SrcList is limited",
          "676: # to 200.  The following tests still run, but the answer is now",
          "677: # an SQLITE_NOMEM error.",
          "678: #",
          "679: # jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "680: #",
          "681: #  If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "682: #  calls made by the following test cases are too time consuming to run.",
          "683: #  Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "684: #  a problem.",
          "685: #",
          "686: # ifcapable pragma&&compileoption_diags {",
          "687: #    if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "688: #     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "689: #     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "690: #     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "691: #     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "692: #   }",
          "693: # }",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1072: } {{}}",
          "1074: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: # 2019-01-17",
          "1075: # Make sure crazy nexted CTE joins terminate with an error quickly.",
          "1076: #",
          "1077: do_catchsql_test 22.1 {",
          "1078:   WITH RECURSIVE c AS (",
          "1079:      WITH RECURSIVE c AS (",
          "1080:         WITH RECURSIVE c AS (",
          "1081:            WITH RECURSIVE c AS (",
          "1082:                WITH  c AS (VALUES(0))",
          "1083:                SELECT 1 FROM c LEFT JOIN c ON ltrim(1)",
          "1084:            )",
          "1085:            SELECT 1 FROM c,c,c,c,c,c,c,c,c",
          "1086:         )",
          "1087:         SELECT  2 FROM c,c,c,c,c,c,c,c,c",
          "1088:      )",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {out of memory}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
      "candidate_info": {
        "commit_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Performance improvement on the instr() function, especially for large haystacks.\n\nFossilOrigin-Name: ce51f1a2b6a1789a5876e01cf829e45d84f3851d135a2fa5c44a56f948673a60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   int typeHaystack, typeNeedle;",
          "202:   int N = 1;",
          "203:   int isText;",
          "205:   UNUSED_PARAMETER(argc);",
          "206:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   unsigned char firstChar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:       isText = 1;",
          "220:     }",
          "221:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "223:       N++;",
          "224:       do{",
          "225:         nHaystack--;",
          "",
          "[Removed Lines]",
          "222:     while( nNeedle<=nHaystack && memcmp(zHaystack, zNeedle, nNeedle)!=0 ){",
          "",
          "[Added Lines]",
          "223:     firstChar = zNeedle[0];",
          "224:     while( nNeedle<=nHaystack",
          "225:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "226:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
      "candidate_info": {
        "commit_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Improvement to the hexdb interpreter built into the CLI and into the TCL test harness: Round the \"size\" up to the next multiple of the \"pagesize\".\n\nFossilOrigin-Name: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3891:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3892:   if( rc!=2 ) goto readHexDb_error;",
          "3893:   if( n<0 ) goto readHexDb_error;",
          "3894:   a = sqlite3_malloc( n ? n : 1 );",
          "3895:   if( a==0 ){",
          "3896:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3894:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7740:       int pgsz;",
          "7741:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7742:       if( rc!=2 ) continue;",
          "7743:       if( n<512 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7743:       if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'pagesize' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "7746:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}