{
  "cve_id": "CVE-2014-6300",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the micro history implementation in phpMyAdmin 4.0.x before 4.0.10.3, 4.1.x before 4.1.14.4, and 4.2.x before 4.2.8.1 allows remote attackers to inject arbitrary web script or HTML, and consequently conduct a cross-site request forgery (CSRF) attack to create a root account, via a crafted URL, related to js/ajax.js.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
  "patch_info": {
    "commit_hash": "33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/33b39f9f1dd9a4d27856530e5ac004e23b30e8ac",
    "files": [
      "ChangeLog",
      "js/ajax.js",
      "js/whitelist.php",
      "libraries/Header.class.php",
      "libraries/Scripts.class.php"
    ],
    "message": "bug #4530 [security] DOM based XSS that results to a CSRF that creates a ROOT account in certain conditions\n\nSigned-off-by: Marc Delisle <marc@infomarc.info>",
    "before_after_code_files": [
      "js/ajax.js||js/ajax.js",
      "js/whitelist.php||js/whitelist.php",
      "libraries/Header.class.php||libraries/Header.class.php",
      "libraries/Scripts.class.php||libraries/Scripts.class.php"
    ]
  },
  "patch_diff": {
    "js/ajax.js||js/ajax.js": [
      "File: js/ajax.js -> js/ajax.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "783:     if (window.location.hash.substring(0, 8) == '#PMAURL-') {",
      "789:     } else {",
      "",
      "[Removed Lines]",
      "786:         window.location = window.location.hash.substring(",
      "787:             window.location.hash.indexOf(':') + 1",
      "788:         );",
      "",
      "[Added Lines]",
      "786:         var colon_position = window.location.hash.indexOf(':');",
      "787:         var questionmark_position = window.location.hash.indexOf('?');",
      "788:         if (colon_position != -1 && questionmark_position != -1 && colon_position < questionmark_position) {",
      "789:             var hash_url = window.location.hash.substring(colon_position + 1, questionmark_position);",
      "790:             if (PMA_gotoWhitelist.indexOf(hash_url) != -1) {",
      "791:                 window.location = window.location.hash.substring(",
      "792:                     colon_position + 1",
      "793:                 );",
      "794:             }",
      "795:         }",
      "",
      "---------------"
    ],
    "js/whitelist.php||js/whitelist.php": [
      "File: js/whitelist.php -> js/whitelist.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "9: chdir('..');",
      "12: header('Content-Type: text/javascript; charset=UTF-8');",
      "16: header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');",
      "20: define('PMA_MINIMUM_COMMON', true);",
      "21: require_once './libraries/common.inc.php';",
      "23: session_write_close();",
      "25: echo \"var PMA_gotoWhitelist = new Array();\\n\";",
      "26: $i = -1;",
      "27: foreach ($GLOBALS['goto_whitelist'] as $one_whitelist) {",
      "28:     $i++;",
      "29:     echo 'PMA_gotoWhitelist[' . $i . ']=\"' . $one_whitelist . '\";' . \"\\n\";",
      "30: }",
      "31: ?>",
      "",
      "---------------"
    ],
    "libraries/Header.class.php||libraries/Header.class.php": [
      "File: libraries/Header.class.php -> libraries/Header.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:     private function _addDefaultScripts()",
      "146:     {",
      "147:         $this->_scripts->addFile('jquery/jquery-1.8.3.min.js');",
      "148:         $this->_scripts->addFile('ajax.js');",
      "149:         $this->_scripts->addFile('keyhandler.js');",
      "150:         $this->_scripts->addFile('jquery/jquery-ui-1.9.2.custom.min.js');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:         $params = array('lang' => $GLOBALS['lang']);",
      "149:         if (isset($GLOBALS['db'])) {",
      "150:             $params['db'] = $GLOBALS['db'];",
      "151:         }",
      "153:         $this->_scripts->addFile(",
      "154:             'whitelist.php' . PMA_URL_getCommon($params), false, true",
      "155:         );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "179:         $this->_scripts->addFile('messages.php' . PMA_URL_getCommon($params));",
      "",
      "[Removed Lines]",
      "175:         $params = array('lang' => $GLOBALS['lang']);",
      "176:         if (isset($GLOBALS['db'])) {",
      "177:             $params['db'] = $GLOBALS['db'];",
      "178:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libraries/Scripts.class.php||libraries/Scripts.class.php": [
      "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     private function _includeFiles($files)",
      "52:     {",
      "53:         $dynamic_scripts = \"\";",
      "54:         $scripts = array();",
      "55:         foreach ($files as $value) {",
      "56:             if (strpos($value['filename'], \"?\") !== false) {",
      "59:                 continue;",
      "60:             }",
      "61:             $include = true;",
      "",
      "[Removed Lines]",
      "57:                 $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "58:                     . $value['filename'] . \"'></script>\";",
      "",
      "[Added Lines]",
      "53:         $first_dynamic_scripts = \"\";",
      "58:                 if ($value['before_statics'] === true) {",
      "59:                     $first_dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "60:                         . $value['filename'] . \"'></script>\";",
      "61:                 } else {",
      "62:                     $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
      "63:                         . $value['filename'] . \"'></script>\";",
      "64:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:             '<script type=\"text/javascript\" src=\"%s\"></script>',",
      "84:             htmlspecialchars($url)",
      "85:         );",
      "87:     }",
      "",
      "[Removed Lines]",
      "86:         return $static_scripts . $dynamic_scripts;",
      "",
      "[Added Lines]",
      "92:         return $first_dynamic_scripts . $static_scripts . $dynamic_scripts;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:     {",
      "113:         $hash = md5($filename);",
      "114:         if (!empty($this->_files[$hash])) {",
      "",
      "[Removed Lines]",
      "111:     public function addFile($filename, $conditional_ie = false)",
      "",
      "[Added Lines]",
      "119:     public function addFile($filename, $conditional_ie = false, $before_statics = false)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "119:         $this->_files[$hash] = array(",
      "120:             'has_onload' => $has_onload,",
      "121:             'filename' => $filename,",
      "123:         );",
      "124:     }",
      "",
      "[Removed Lines]",
      "122:             'conditional_ie' => $conditional_ie",
      "",
      "[Added Lines]",
      "130:             'conditional_ie' => $conditional_ie,",
      "131:             'before_statics' => $before_statics",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e2b847f4e2ada2f2c8dede2984c4d889b47b77e",
      "candidate_info": {
        "commit_hash": "0e2b847f4e2ada2f2c8dede2984c4d889b47b77e",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/0e2b847f4e2ada2f2c8dede2984c4d889b47b77e",
        "files": [
          "libraries/Scripts.class.php",
          "test/classes/PMA_Scripts_test.php"
        ],
        "message": "Honor URL separator in get_scripts parameters\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "libraries/Scripts.class.php||libraries/Scripts.class.php",
          "test/classes/PMA_Scripts_test.php||test/classes/PMA_Scripts_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ],
          "candidate": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Scripts.class.php||libraries/Scripts.class.php": [
          "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:                 $scripts[] = \"scripts[]=\" . $value['filename'];",
          "74:             }",
          "75:         }",
          "76:         $static_scripts = sprintf(",
          "80:         );",
          "81:         return $static_scripts . $dynamic_scripts;",
          "82:     }",
          "",
          "[Removed Lines]",
          "77:             '<script type=\"text/javascript\" '",
          "78:             . 'src=\"js/get_scripts.js.php%s&%s\"></script>',",
          "79:             PMA_URL_getCommon(array(), 'none'), implode(\"&\", $scripts)",
          "",
          "[Added Lines]",
          "76:         $separator = PMA_URL_getArgSeparator();",
          "77:         $url = 'js/get_scripts.js.php'",
          "78:             . PMA_URL_getCommon(array(), 'none')",
          "79:             . $separator . implode($separator, $scripts);",
          "82:             '<script type=\"text/javascript\" src=\"%s\"></script>',",
          "83:             htmlspecialchars($url)",
          "",
          "---------------"
        ],
        "test/classes/PMA_Scripts_test.php||test/classes/PMA_Scripts_test.php": [
          "File: test/classes/PMA_Scripts_test.php -> test/classes/PMA_Scripts_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: require_once 'libraries/Scripts.class.php';",
          "13: require_once 'libraries/js_escape.lib.php';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: require_once 'libraries/url_generating.lib.php';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     {",
          "79:         $this->assertEquals(",
          "80:             '<script type=\"text/javascript\" src=\"js/get_scripts.js.php?lang=en'",
          "82:             $this->_callPrivateFunction(",
          "83:                 '_includeFiles',",
          "84:                 array(",
          "",
          "[Removed Lines]",
          "81:             . '&token=token&scripts[]=common.js\"></script>',",
          "",
          "[Added Lines]",
          "82:             . '&amp;token=token&amp;scripts[]=common.js\"></script>',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:         $this->assertRegExp(",
          "109:             '@<script type=\"text/javascript\" src=\"js/get_scripts.js.php\\\\?lang=en'",
          "111:             . 'javascript\">// <!\\\\[CDATA\\\\[' . \"\\n\"",
          "112:             . 'AJAX.scriptHandler.add\\\\(\"common.js\",1\\\\);' . \"\\n\"",
          "113:             . '\\\\$\\\\(function\\\\(\\\\) \\\\{AJAX.fireOnload\\\\(\"common.js\"\\\\);\\\\}\\\\);'",
          "",
          "[Removed Lines]",
          "110:             . '&token=token&scripts\\\\[\\\\]=common.js\"></script><script type=\"text/'",
          "",
          "[Added Lines]",
          "111:             . '&amp;token=token&amp;scripts\\\\[\\\\]=common.js\"></script><script type=\"text/'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c85c9fd4176eafc9a3586d9fddad6343365a2738",
      "candidate_info": {
        "commit_hash": "c85c9fd4176eafc9a3586d9fddad6343365a2738",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/c85c9fd4176eafc9a3586d9fddad6343365a2738",
        "files": [
          "ChangeLog",
          "js/ajax.js",
          "js/whitelist.php",
          "libraries/Header.class.php",
          "libraries/Scripts.class.php"
        ],
        "message": "Fix merge conflicts\n\nSigned-off-by: Marc Delisle <marc@infomarc.info>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "js/whitelist.php||js/whitelist.php",
          "libraries/Header.class.php||libraries/Header.class.php",
          "libraries/Scripts.class.php||libraries/Scripts.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js",
            "js/whitelist.php||js/whitelist.php",
            "libraries/Header.class.php||libraries/Header.class.php",
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js",
            "js/whitelist.php||js/whitelist.php",
            "libraries/Header.class.php||libraries/Header.class.php",
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "920:     if (window.location.hash.substring(0, 8) == '#PMAURL-') {",
          "926:     } else {",
          "",
          "[Removed Lines]",
          "923:         window.location = window.location.hash.substring(",
          "924:             window.location.hash.indexOf(':') + 1",
          "925:         );",
          "",
          "[Added Lines]",
          "923:         var colon_position = window.location.hash.indexOf(':');",
          "924:         var questionmark_position = window.location.hash.indexOf('?');",
          "925:         if (colon_position != -1 && questionmark_position != -1 && colon_position < questionmark_position) {",
          "926:             var hash_url = window.location.hash.substring(colon_position + 1, questionmark_position);",
          "927:             if (PMA_gotoWhitelist.indexOf(hash_url) != -1) {",
          "928:                 window.location = window.location.hash.substring(",
          "929:                     colon_position + 1",
          "930:                 );",
          "931:             }",
          "932:         }",
          "",
          "---------------"
        ],
        "js/whitelist.php||js/whitelist.php": [
          "File: js/whitelist.php -> js/whitelist.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "9: chdir('..');",
          "12: header('Content-Type: text/javascript; charset=UTF-8');",
          "16: header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');",
          "20: define('PMA_MINIMUM_COMMON', true);",
          "21: require_once './libraries/common.inc.php';",
          "23: session_write_close();",
          "25: echo \"var PMA_gotoWhitelist = new Array();\\n\";",
          "26: $i = -1;",
          "27: foreach ($GLOBALS['goto_whitelist'] as $one_whitelist) {",
          "28:     $i++;",
          "29:     echo 'PMA_gotoWhitelist[' . $i . ']=\"' . $one_whitelist . '\";' . \"\\n\";",
          "30: }",
          "31: ?>",
          "",
          "---------------"
        ],
        "libraries/Header.class.php||libraries/Header.class.php": [
          "File: libraries/Header.class.php -> libraries/Header.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     private function _addDefaultScripts()",
          "155:     {",
          "156:         $this->_scripts->addFile('jquery/jquery-1.8.3.min.js');",
          "157:         $this->_scripts->addFile('ajax.js');",
          "158:         $this->_scripts->addFile('keyhandler.js');",
          "159:         $this->_scripts->addFile('jquery/jquery-ui-1.9.2.custom.min.js');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         $params = array('lang' => $GLOBALS['lang']);",
          "158:         if (isset($GLOBALS['db'])) {",
          "159:             $params['db'] = $GLOBALS['db'];",
          "160:         }",
          "162:         $this->_scripts->addFile(",
          "163:             'whitelist.php' . PMA_URL_getCommon($params), false, true",
          "164:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         $this->_scripts->addFile('messages.php' . PMA_URL_getCommon($params));",
          "",
          "[Removed Lines]",
          "184:         $params = array('lang' => $GLOBALS['lang']);",
          "185:         if (isset($GLOBALS['db'])) {",
          "186:             $params['db'] = $GLOBALS['db'];",
          "187:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraries/Scripts.class.php||libraries/Scripts.class.php": [
          "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     private function _includeFiles($files)",
          "52:     {",
          "53:         $dynamic_scripts = \"\";",
          "54:         $scripts = array();",
          "55:         foreach ($files as $value) {",
          "56:             if ($GLOBALS['PMA_String']->strpos($value['filename'], \"?\") !== false) {",
          "59:                 continue;",
          "60:             }",
          "61:             $include = true;",
          "",
          "[Removed Lines]",
          "57:                 $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
          "58:                     . $value['filename'] . \"'></script>\";",
          "",
          "[Added Lines]",
          "53:         $first_dynamic_scripts = \"\";",
          "58:                 if ($value['before_statics'] === true) {",
          "59:                     $first_dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
          "60:                         . $value['filename'] . \"'></script>\";",
          "61:                 } else {",
          "62:                     $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
          "63:                         . $value['filename'] . \"'></script>\";",
          "64:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:             '<script type=\"text/javascript\" src=\"%s\"></script>',",
          "84:             htmlspecialchars($url)",
          "85:         );",
          "87:     }",
          "",
          "[Removed Lines]",
          "86:         return $static_scripts . $dynamic_scripts;",
          "",
          "[Added Lines]",
          "92:         return $first_dynamic_scripts . $static_scripts . $dynamic_scripts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     {",
          "113:         $hash = md5($filename);",
          "114:         if (!empty($this->_files[$hash])) {",
          "",
          "[Removed Lines]",
          "111:     public function addFile($filename, $conditional_ie = false)",
          "",
          "[Added Lines]",
          "119:     public function addFile($filename, $conditional_ie = false, $before_statics = false)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:         $this->_files[$hash] = array(",
          "120:             'has_onload' => $has_onload,",
          "121:             'filename' => $filename,",
          "123:         );",
          "124:     }",
          "",
          "[Removed Lines]",
          "122:             'conditional_ie' => $conditional_ie",
          "",
          "[Added Lines]",
          "130:             'conditional_ie' => $conditional_ie,",
          "131:             'before_statics' => $before_statics",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b101e2ab726b656337d3349af392b4c5c1bdc10",
      "candidate_info": {
        "commit_hash": "9b101e2ab726b656337d3349af392b4c5c1bdc10",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/9b101e2ab726b656337d3349af392b4c5c1bdc10",
        "files": [
          "js/ajax.js",
          "js/error_report.js",
          "js/functions.js",
          "js/microhistory.js",
          "js/server_databases.js",
          "js/sql.js",
          "libraries/Footer.class.php"
        ],
        "message": "Separate microhistory code conditionally\n\nSigned-off-by: Atul Pratap Singh <atulpratapsingh05@gmail.com>",
        "before_after_code_files": [
          "js/ajax.js||js/ajax.js",
          "js/error_report.js||js/error_report.js",
          "js/functions.js||js/functions.js",
          "js/microhistory.js||js/microhistory.js",
          "js/server_databases.js||js/server_databases.js",
          "js/sql.js||js/sql.js",
          "libraries/Footer.class.php||libraries/Footer.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "js/ajax.js||js/ajax.js"
          ],
          "candidate": [
            "js/ajax.js||js/ajax.js"
          ]
        }
      },
      "candidate_diff": {
        "js/ajax.js||js/ajax.js": [
          "File: js/ajax.js -> js/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         AJAX.lockedTargets = {};",
          "185:         $('#lock_page_icon').html('');",
          "186:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:     handleMenu: {",
          "188:         replace: function (content) {",
          "189:             $('#floating_menubar').html(content)",
          "192:                 .children().first().remove();",
          "193:             $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);",
          "194:         }",
          "195:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:         if (! isLink) {",
          "265:             params += '&' + $(this).serialize();",
          "266:         }",
          "270:         if (AJAX._debug) {",
          "271:             console.log(\"Loading: \" + url); // no need to translate",
          "",
          "[Removed Lines]",
          "268:         params += AJAX.cache.menus.getRequestParam();",
          "",
          "[Added Lines]",
          "276:         if (! (history && history.pushState)) {",
          "278:             params += PMA_MicroHistory.menus.getRequestParam();",
          "279:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:                     $('title').replaceWith(data._title);",
          "329:                 }",
          "330:                 if (data._menu) {",
          "333:                 } else if (data._menuHash) {",
          "335:                 }",
          "336:                 if (data._disableNaviSettings) {",
          "337:                     PMA_disableNaviSettings();",
          "",
          "[Removed Lines]",
          "331:                     AJAX.cache.menus.replace(data._menu);",
          "332:                     AJAX.cache.menus.add(data._menuHash, data._menu);",
          "334:                     AJAX.cache.menus.replace(AJAX.cache.menus.get(data._menuHash));",
          "",
          "[Added Lines]",
          "343:                     if (! (history && history.pushState)) {",
          "344:                         PMA_MicroHistory.menus.replace(data._menu);",
          "345:                         PMA_MicroHistory.menus.add(data._menuHash, data._menu);",
          "346:                     }",
          "348:                     if (! (history && history.pushState)) {",
          "349:                         PMA_MicroHistory.menus.replace(PMA_MicroHistory.menus.get(data._menuHash));",
          "350:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:                     AJAX.scriptHandler.load(data._scripts);",
          "383:                 }",
          "384:                 if (data._selflink && data._scripts && data._menuHash && data._params) {",
          "392:                 }",
          "393:                 if (data._params) {",
          "394:                     PMA_commonParams.setAll(data._params);",
          "",
          "[Removed Lines]",
          "385:                     AJAX.cache.add(",
          "386:                         data._selflink,",
          "387:                         data._scripts,",
          "388:                         data._menuHash,",
          "389:                         data._params,",
          "390:                         AJAX.source.attr('rel')",
          "391:                     );",
          "",
          "[Added Lines]",
          "401:                     if (! (history && history.pushState)) {",
          "402:                         PMA_MicroHistory.add(",
          "403:                             data._selflink,",
          "404:                             data._scripts,",
          "405:                             data._menuHash,",
          "406:                             data._params,",
          "407:                             AJAX.source.attr('rel')",
          "408:                         );",
          "409:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586:             $(document).off('click', 'a').on('click', 'a', AJAX.requestHandler);",
          "587:             $(document).off('submit', 'form').on('submit', 'form', AJAX.requestHandler);",
          "589:             callback();",
          "590:         }",
          "591:     }",
          "",
          "[Removed Lines]",
          "588:             AJAX.cache.update();",
          "",
          "[Added Lines]",
          "606:             if (! (history && history.pushState)) {",
          "607:                 PMA_MicroHistory.update();",
          "608:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655: });",
          "751:             );",
          "910:         }",
          "948:                 );",
          "949:             }",
          "963:         });",
          "964:     }",
          "1015: });",
          "",
          "[Removed Lines]",
          "662: AJAX.cache = {",
          "666:     MAX: 6,",
          "672:     primer: {},",
          "676:     pages: [],",
          "681:     current: 0,",
          "701:     add: function (hash, scripts, menu, params, rel) {",
          "702:         if (this.pages.length > AJAX.cache.MAX) {",
          "705:             for (var i = 0; i < this.pages.length - this.MAX; i++) {",
          "706:                 delete this.pages[i];",
          "707:             }",
          "708:         }",
          "709:         while (this.current < this.pages.length) {",
          "712:             this.pages.pop();",
          "713:         }",
          "714:         if (rel === 'newpage' ||",
          "715:             (",
          "716:                 typeof rel === 'undefined' && (",
          "717:                     typeof this.pages[this.current - 1] === 'undefined' ||",
          "718:                     this.pages[this.current - 1].hash !== hash",
          "719:                 )",
          "720:             )",
          "721:         ) {",
          "722:             this.pages.push({",
          "723:                 hash: hash,",
          "724:                 content: $('#page_content').html(),",
          "725:                 scripts: scripts,",
          "726:                 selflink: $('#selflink').html(),",
          "727:                 menu: menu,",
          "728:                 params: params",
          "729:             });",
          "730:             AJAX.setUrlHash(this.current, hash);",
          "731:             this.current++;",
          "732:         }",
          "733:     },",
          "742:     navigate: function (index) {",
          "743:         if (typeof this.pages[index] === 'undefined' ||",
          "744:             typeof this.pages[index].content === 'undefined' ||",
          "745:             typeof this.pages[index].menu === 'undefined' ||",
          "746:             ! AJAX.cache.menus.get(this.pages[index].menu)",
          "747:         ) {",
          "748:             PMA_ajaxShowMessage(",
          "749:                 '<div class=\"error\">' + PMA_messages.strInvalidPage + '</div>',",
          "750:                 false",
          "752:         } else {",
          "753:             AJAX.active = true;",
          "754:             var record = this.pages[index];",
          "755:             AJAX.scriptHandler.reset(function () {",
          "756:                 $('#page_content').html(record.content);",
          "757:                 $('#selflink').html(record.selflink);",
          "758:                 AJAX.cache.menus.replace(AJAX.cache.menus.get(record.menu));",
          "759:                 PMA_commonParams.setAll(record.params);",
          "760:                 AJAX.scriptHandler.load(record.scripts);",
          "761:                 AJAX.cache.current = ++index;",
          "762:             });",
          "763:         }",
          "764:     },",
          "771:     update: function () {",
          "772:         var page = this.pages[this.current - 1];",
          "773:         if (page) {",
          "774:             page.content = $('#page_content').html();",
          "775:         }",
          "776:     },",
          "780:     menus: {",
          "786:         size: function (obj) {",
          "787:             var size = 0, key;",
          "788:             for (key in obj) {",
          "789:                 if (obj.hasOwnProperty(key)) {",
          "790:                     size++;",
          "791:                 }",
          "792:             }",
          "793:             return size;",
          "794:         },",
          "798:         data: {},",
          "807:         add: function (hash, content) {",
          "808:             if (this.size(this.data) > AJAX.cache.MAX) {",
          "810:                 var oldest, key, init = 0;",
          "811:                 for (var i in this.data) {",
          "812:                     if (this.data[i]) {",
          "813:                         if (! init || this.data[i].timestamp.getTime() < oldest.getTime()) {",
          "814:                             oldest = this.data[i].timestamp;",
          "815:                             key = i;",
          "816:                             init = 1;",
          "817:                         }",
          "818:                     }",
          "819:                 }",
          "820:                 delete this.data[key];",
          "821:             }",
          "822:             this.data[hash] = {",
          "823:                 content: content,",
          "824:                 timestamp: new Date()",
          "825:             };",
          "826:         },",
          "834:         get: function (hash) {",
          "835:             if (this.data[hash]) {",
          "836:                 return this.data[hash].content;",
          "837:             } else {",
          "840:                 return '';",
          "841:             }",
          "842:         },",
          "849:         getRequestParam: function () {",
          "850:             var param = '';",
          "851:             var menuHashes = [];",
          "852:             for (var i in this.data) {",
          "853:                 menuHashes.push(i);",
          "854:             }",
          "855:             var menuHashesParam = menuHashes.join('-');",
          "856:             if (menuHashesParam) {",
          "857:                 param = '&menuHashes=' + menuHashesParam;",
          "858:             }",
          "859:             return param;",
          "860:         },",
          "866:         replace: function (content) {",
          "867:             $('#floating_menubar').html(content)",
          "870:                 .children().first().remove();",
          "871:             $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);",
          "872:         }",
          "873:     }",
          "874: };",
          "880: AJAX.setUrlHash = (function (jQuery, window) {",
          "881:     \"use strict\";",
          "888:     var ready = false;",
          "894:     var savedHash = \"\";",
          "902:     var userChange = true;",
          "905:     function resetFavicon() {",
          "906:         if (navigator.userAgent.indexOf('Firefox') > -1) {",
          "909:             $('head > link[href=favicon\\\\.ico]').appendTo('head');",
          "911:     }",
          "918:     function setUrlHash(index, hash) {",
          "927:         userChange = false;",
          "928:         if (ready) {",
          "929:             window.location.hash = \"PMAURL-\" + index + \":\" + hash;",
          "930:             resetFavicon();",
          "931:         } else {",
          "932:             savedHash = \"PMAURL-\" + index + \":\" + hash;",
          "933:         }",
          "934:     }",
          "938:     if (window.location.hash.substring(0, 8) == '#PMAURL-') {",
          "941:         var colon_position = window.location.hash.indexOf(':');",
          "942:         var questionmark_position = window.location.hash.indexOf('?');",
          "943:         if (colon_position != -1 && questionmark_position != -1 && colon_position < questionmark_position) {",
          "944:             var hash_url = window.location.hash.substring(colon_position + 1, questionmark_position);",
          "945:             if (PMA_gotoWhitelist.indexOf(hash_url) != -1) {",
          "946:                 window.location = window.location.hash.substring(",
          "947:                     colon_position + 1",
          "950:         }",
          "951:     } else {",
          "954:         jQuery(function () {",
          "956:             if (savedHash !== \"\") {",
          "957:                 window.location.hash = savedHash;",
          "958:                 savedHash = \"\";",
          "959:                 resetFavicon();",
          "960:             }",
          "962:             ready = true;",
          "968:     jQuery(function () {",
          "969:         jQuery(window).hashchange(function () {",
          "970:             if (userChange === false) {",
          "972:                 userChange = true;",
          "973:             } else if (/^#PMAURL-\\d+:/.test(window.location.hash)) {",
          "975:                 var index = window.location.hash.substring(",
          "976:                     8, window.location.hash.indexOf(':')",
          "977:                 );",
          "978:                 AJAX.cache.navigate(index);",
          "979:             }",
          "980:         });",
          "981:     });",
          "985:     return setUrlHash;",
          "986: })(jQuery, window);",
          "991: $(function () {",
          "994:     if (AJAX.cache.primer.url) {",
          "995:         AJAX.cache.menus.add(",
          "996:             AJAX.cache.primer.menuHash,",
          "997:             $('<div></div>')",
          "998:                 .append('<div></div>')",
          "999:                 .append($('#serverinfo').clone())",
          "1000:                 .append($('#topmenucontainer').clone())",
          "1001:                 .html()",
          "1002:         );",
          "1003:     }",
          "1004:     $(function () {",
          "1007:         if (AJAX.cache.primer.url) {",
          "1008:             AJAX.cache.add(",
          "1009:                 AJAX.cache.primer.url,",
          "1010:                 AJAX.cache.primer.scripts,",
          "1011:                 AJAX.cache.primer.menuHash",
          "1012:             );",
          "1013:         }",
          "1014:     });",
          "",
          "[Added Lines]",
          "680: $(function () {",
          "681:     if (history && history.pushState) {",
          "683:     } else {",
          "687:         if (PMA_MicroHistory.primer.url) {",
          "688:             PMA_MicroHistory.menus.add(",
          "689:                 PMA_MicroHistory.primer.menuHash,",
          "690:                 $('<div></div>')",
          "691:                     .append('<div></div>')",
          "692:                     .append($('#serverinfo').clone())",
          "693:                     .append($('#topmenucontainer').clone())",
          "694:                     .html()",
          "697:         $(function () {",
          "700:             if (PMA_MicroHistory.primer.url) {",
          "701:                 PMA_MicroHistory.add(",
          "702:                     PMA_MicroHistory.primer.url,",
          "703:                     PMA_MicroHistory.primer.scripts,",
          "704:                     PMA_MicroHistory.primer.menuHash",
          "",
          "---------------"
        ],
        "js/error_report.js||js/error_report.js": [
          "File: js/error_report.js -> js/error_report.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:     _get_microhistory: function () {",
          "218:     },",
          "",
          "[Removed Lines]",
          "196:         var cached_pages = AJAX.cache.pages.slice(-7);",
          "197:         var remove = [\"common_query\", \"table\", \"db\", \"token\", \"pma_absolute_uri\"];",
          "198:         return {",
          "199:             pages: cached_pages.map(function (page) {",
          "200:                 var simplepage = {",
          "201:                     hash: page.hash",
          "202:                 };",
          "204:                 if (page.params) {",
          "205:                     simplepage.params = $.extend({}, page.params);",
          "206:                     $.each(simplepage.params, function (param) {",
          "207:                         if ($.inArray(param, remove) != -1) {",
          "208:                             delete simplepage.params[param];",
          "209:                         }",
          "210:                     });",
          "211:                 }",
          "213:                 return simplepage;",
          "214:             }),",
          "215:             current_index: AJAX.cache.current -",
          "216:                 (AJAX.cache.pages.length - cached_pages.length)",
          "217:         };",
          "",
          "[Added Lines]",
          "196:         if (! (history && history.pushState)) {",
          "197:             var cached_pages = PMA_MicroHistory.pages.slice(-7);",
          "198:             var remove = [\"common_query\", \"table\", \"db\", \"token\", \"pma_absolute_uri\"];",
          "199:             return {",
          "200:                 pages: cached_pages.map(function (page) {",
          "201:                     var simplepage = {",
          "202:                         hash: page.hash",
          "203:                     };",
          "205:                     if (page.params) {",
          "206:                         simplepage.params = $.extend({}, page.params);",
          "207:                         $.each(simplepage.params, function (param) {",
          "208:                             if ($.inArray(param, remove) != -1) {",
          "209:                                 delete simplepage.params[param];",
          "210:                             }",
          "211:                         });",
          "212:                     }",
          "214:                     return simplepage;",
          "215:                 }),",
          "216:                 current_index: PMA_MicroHistory.current -",
          "217:                     (PMA_MicroHistory.pages.length - cached_pages.length)",
          "218:             };",
          "219:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:             \"microhistory\": ErrorReport._get_microhistory(),",
          "242:             \"exception_type\": 'js'",
          "243:         };",
          "246:                 function (script) {",
          "247:                     return script.name;",
          "248:                 }",
          "",
          "[Removed Lines]",
          "244:         if (typeof AJAX.cache.pages[AJAX.cache.current - 1] !== 'undefined') {",
          "245:             report_data.scripts = AJAX.cache.pages[AJAX.cache.current - 1].scripts.map(",
          "",
          "[Added Lines]",
          "246:         if (AJAX.scriptHandler._scripts.length > 0) {",
          "247:             report_data.scripts = AJAX.scriptHandler._scripts.map(",
          "",
          "---------------"
        ],
        "js/functions.js||js/functions.js": [
          "File: js/functions.js -> js/functions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2812:                         PMA_reloadNavigation();",
          "2814:                         var params_12 = 'ajax_request=true&ajax_page_request=true';",
          "2816:                         tblStruct_url = 'tbl_structure.php?server=' + data._params.server +",
          "2817:                             '&db='+ data._params.db + '&token=' + data._params.token +",
          "2818:                             '&goto=db_structure.php&table=' + data._params.table + '';",
          "",
          "[Removed Lines]",
          "2815:                         params_12 += AJAX.cache.menus.getRequestParam();",
          "",
          "[Added Lines]",
          "2815:                         if (! (history && history.pushState)) {",
          "2816:                             params_12 += PMA_Microhistory.menus.getRequestParam();",
          "2817:                         }",
          "",
          "---------------"
        ],
        "js/microhistory.js||js/microhistory.js": [
          "File: js/microhistory.js -> js/microhistory.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: PMA_MicroHistory = {",
          "11:     MAX: 6,",
          "17:     primer: {},",
          "21:     pages: [],",
          "26:     current: 0,",
          "46:     add: function (hash, scripts, menu, params, rel) {",
          "47:         if (this.pages.length > PMA_MicroHistory.MAX) {",
          "50:             for (var i = 0; i < this.pages.length - this.MAX; i++) {",
          "51:                 delete this.pages[i];",
          "52:             }",
          "53:         }",
          "54:         while (this.current < this.pages.length) {",
          "57:             this.pages.pop();",
          "58:         }",
          "59:         if (rel === 'newpage' ||",
          "60:             (",
          "61:                 typeof rel === 'undefined' && (",
          "62:                     typeof this.pages[this.current - 1] === 'undefined' ||",
          "63:                     this.pages[this.current - 1].hash !== hash",
          "64:                 )",
          "65:             )",
          "66:         ) {",
          "67:             this.pages.push({",
          "68:                 hash: hash,",
          "69:                 content: $('#page_content').html(),",
          "70:                 scripts: scripts,",
          "71:                 selflink: $('#selflink').html(),",
          "72:                 menu: menu,",
          "73:                 params: params",
          "74:             });",
          "75:             PMA_SetUrlHash(this.current, hash);",
          "76:             this.current++;",
          "77:         }",
          "78:     },",
          "87:     navigate: function (index) {",
          "88:         if (typeof this.pages[index] === 'undefined' ||",
          "89:             typeof this.pages[index].content === 'undefined' ||",
          "90:             typeof this.pages[index].menu === 'undefined' ||",
          "91:             ! PMA_MicroHistory.menus.get(this.pages[index].menu)",
          "92:         ) {",
          "93:             PMA_ajaxShowMessage(",
          "94:                 '<div class=\"error\">' + PMA_messages.strInvalidPage + '</div>',",
          "95:                 false",
          "96:             );",
          "97:         } else {",
          "98:             AJAX.active = true;",
          "99:             var record = this.pages[index];",
          "100:             AJAX.scriptHandler.reset(function () {",
          "101:                 $('#page_content').html(record.content);",
          "102:                 $('#selflink').html(record.selflink);",
          "103:                 PMA_MicroHistory.menus.replace(PMA_MicroHistory.menus.get(record.menu));",
          "104:                 PMA_commonParams.setAll(record.params);",
          "105:                 AJAX.scriptHandler.load(record.scripts);",
          "106:                 PMA_MicroHistory.current = ++index;",
          "107:             });",
          "108:         }",
          "109:     },",
          "116:     update: function () {",
          "117:         var page = this.pages[this.current - 1];",
          "118:         if (page) {",
          "119:             page.content = $('#page_content').html();",
          "120:         }",
          "121:     },",
          "125:     menus: {",
          "131:         size: function (obj) {",
          "132:             var size = 0, key;",
          "133:             for (key in obj) {",
          "134:                 if (obj.hasOwnProperty(key)) {",
          "135:                     size++;",
          "136:                 }",
          "137:             }",
          "138:             return size;",
          "139:         },",
          "143:         data: {},",
          "152:         add: function (hash, content) {",
          "153:             if (this.size(this.data) > PMA_MicroHistory.MAX) {",
          "155:                 var oldest, key, init = 0;",
          "156:                 for (var i in this.data) {",
          "157:                     if (this.data[i]) {",
          "158:                         if (! init || this.data[i].timestamp.getTime() < oldest.getTime()) {",
          "159:                             oldest = this.data[i].timestamp;",
          "160:                             key = i;",
          "161:                             init = 1;",
          "162:                         }",
          "163:                     }",
          "164:                 }",
          "165:                 delete this.data[key];",
          "166:             }",
          "167:             this.data[hash] = {",
          "168:                 content: content,",
          "169:                 timestamp: new Date()",
          "170:             };",
          "171:         },",
          "179:         get: function (hash) {",
          "180:             if (this.data[hash]) {",
          "181:                 return this.data[hash].content;",
          "182:             } else {",
          "185:                 return '';",
          "186:             }",
          "187:         },",
          "194:         getRequestParam: function () {",
          "195:             var param = '';",
          "196:             var menuHashes = [];",
          "197:             for (var i in this.data) {",
          "198:                 menuHashes.push(i);",
          "199:             }",
          "200:             var menuHashesParam = menuHashes.join('-');",
          "201:             if (menuHashesParam) {",
          "202:                 param = '&menuHashes=' + menuHashesParam;",
          "203:             }",
          "204:             return param;",
          "205:         },",
          "211:         replace: function (content) {",
          "212:             $('#floating_menubar').html(content)",
          "215:                 .children().first().remove();",
          "216:             $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);",
          "217:         }",
          "218:     }",
          "219: };",
          "225: PMA_SetUrlHash = (function (jQuery, window) {",
          "226:     \"use strict\";",
          "233:     var ready = false;",
          "239:     var savedHash = \"\";",
          "247:     var userChange = true;",
          "250:     function resetFavicon() {",
          "251:         if (navigator.userAgent.indexOf('Firefox') > -1) {",
          "254:             $('head > link[href=favicon\\\\.ico]').appendTo('head');",
          "255:         }",
          "256:     }",
          "263:     function setUrlHash(index, hash) {",
          "272:         userChange = false;",
          "273:         if (ready) {",
          "274:             window.location.hash = \"PMAURL-\" + index + \":\" + hash;",
          "275:             resetFavicon();",
          "276:         } else {",
          "277:             savedHash = \"PMAURL-\" + index + \":\" + hash;",
          "278:         }",
          "279:     }",
          "283:     if (window.location.hash.substring(0, 8) == '#PMAURL-') {",
          "286:         var colon_position = window.location.hash.indexOf(':');",
          "287:         var questionmark_position = window.location.hash.indexOf('?');",
          "288:         if (colon_position != -1 && questionmark_position != -1 && colon_position < questionmark_position) {",
          "289:             var hash_url = window.location.hash.substring(colon_position + 1, questionmark_position);",
          "290:             if (PMA_gotoWhitelist.indexOf(hash_url) != -1) {",
          "291:                 window.location = window.location.hash.substring(",
          "292:                     colon_position + 1",
          "293:                 );",
          "294:             }",
          "295:         }",
          "296:     } else {",
          "299:         jQuery(function () {",
          "301:             if (savedHash !== \"\") {",
          "302:                 window.location.hash = savedHash;",
          "303:                 savedHash = \"\";",
          "304:                 resetFavicon();",
          "305:             }",
          "307:             ready = true;",
          "308:         });",
          "309:     }",
          "313:     jQuery(function () {",
          "314:         jQuery(window).hashchange(function () { return;",
          "315:             if (userChange === false) {",
          "317:                 userChange = true;",
          "318:             } else if (/^#PMAURL-\\d+:/.test(window.location.hash)) {",
          "320:                 var index = window.location.hash.substring(",
          "321:                     8, window.location.hash.indexOf(':')",
          "322:                 );",
          "323:                 PMA_MicroHistory.navigate(index);",
          "324:             }",
          "325:         });",
          "326:     });",
          "330:     return setUrlHash;",
          "331: })(jQuery, window);",
          "",
          "---------------"
        ],
        "js/server_databases.js||js/server_databases.js": [
          "File: js/server_databases.js -> js/server_databases.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:             var dbStruct_url = data.url_query;",
          "131:             dbStruct_url = dbStruct_url.replace(/amp;/ig, '');",
          "132:             var params = 'ajax_request=true&ajax_page_request=true';",
          "134:             $.get(dbStruct_url, params, AJAX.responseHandler);",
          "135:         }); // end $.post()",
          "136:     }); // end $(document).on()",
          "",
          "[Removed Lines]",
          "133:             params += AJAX.cache.menus.getRequestParam();",
          "",
          "[Added Lines]",
          "133:             if (! (history && history.pushState)) {",
          "134:                 params += PMA_Microhistory.menus.getRequestParam();",
          "135:             }",
          "",
          "---------------"
        ],
        "js/sql.js||js/sql.js": [
          "File: js/sql.js -> js/sql.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:                 PMA_highlightSQL($sqlqueryresultsouter);",
          "390:                 if (data._menu) {",
          "393:                 } else if (data._menuHash) {",
          "395:                 }",
          "397:                 if (data._params) {",
          "",
          "[Removed Lines]",
          "391:                     AJAX.cache.menus.replace(data._menu);",
          "392:                     AJAX.cache.menus.add(data._menuHash, data._menu);",
          "394:                     AJAX.cache.menus.replace(AJAX.cache.menus.get(data._menuHash));",
          "",
          "[Added Lines]",
          "391:                     if (history && history.pushState) {",
          "392:                         history.replaceState({",
          "393:                             menu : data._menu",
          "394:                             },",
          "395:                             null",
          "396:                         );",
          "397:                         AJAX.handleMenu.replace(data._menu);",
          "398:                     } else {",
          "399:                         PMA_Microhistory.menus.replace(data._menu);",
          "400:                         PMA_Microhistory.menus.add(data._menuHash, data._menu);",
          "401:                     }",
          "403:                     if (! (history && history.pushState)) {",
          "404:                         PMA_Microhistory.menus.replace(PMA_Microhistory.menus.get(data._menuHash));",
          "405:                     }",
          "",
          "---------------"
        ],
        "libraries/Footer.class.php||libraries/Footer.class.php": [
          "File: libraries/Footer.class.php -> libraries/Footer.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:                     $this->_scripts->addCode(",
          "324:                         sprintf(",
          "326:                             . ' url: \"%s\",'",
          "327:                             . ' scripts: %s,'",
          "328:                             . ' menuHash: \"%s\"'",
          "",
          "[Removed Lines]",
          "325:                             'AJAX.cache.primer = {'",
          "",
          "[Added Lines]",
          "325:                             'PMA_Microhistory.primer = {'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfa542cfa9b8e9869c5a6c55d7db594261a93548",
      "candidate_info": {
        "commit_hash": "cfa542cfa9b8e9869c5a6c55d7db594261a93548",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/cfa542cfa9b8e9869c5a6c55d7db594261a93548",
        "files": [
          "libraries/Scripts.class.php"
        ],
        "message": "Bug #4845 White screen (Cloudflare)\n\nSigned-off-by: Ryan Stasel <staze@staze.org>",
        "before_after_code_files": [
          "libraries/Scripts.class.php||libraries/Scripts.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ],
          "candidate": [
            "libraries/Scripts.class.php||libraries/Scripts.class.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Scripts.class.php||libraries/Scripts.class.php": [
          "File: libraries/Scripts.class.php -> libraries/Scripts.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:             if (/*overload*/mb_strpos($value['filename'], \"?\") !== false) {",
          "58:                 if ($value['before_statics'] === true) {",
          "59:                     $first_dynamic_scripts",
          "61:                         . $value['filename'] . \"'></script>\";",
          "62:                 } else {",
          "64:                         . $value['filename'] . \"'></script>\";",
          "65:                 }",
          "66:                 continue;",
          "",
          "[Removed Lines]",
          "60:                         .= \"<script type='text/javascript' src='js/\"",
          "63:                     $dynamic_scripts .= \"<script type='text/javascript' src='js/\"",
          "",
          "[Added Lines]",
          "60:                         .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "63:                     $dynamic_scripts .= \"<script data-cfasync='false' type='text/javascript' src='js/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         $url = 'js/get_scripts.js.php?' . implode($separator, $scripts);",
          "87:         $static_scripts = sprintf(",
          "89:             htmlspecialchars($url)",
          "90:         );",
          "91:         return $first_dynamic_scripts . $static_scripts . $dynamic_scripts;",
          "",
          "[Removed Lines]",
          "88:             '<script type=\"text/javascript\" src=\"%s\"></script>',",
          "",
          "[Added Lines]",
          "88:             '<script data-cfasync=\"false\" type=\"text/javascript\" src=\"%s\"></script>',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:         $code .= '});';",
          "267:         $this->addCode($code);",
          "270:         $retval .= \"// <![CDATA[\\n\";",
          "271:         $retval .= $this->_code;",
          "272:         foreach ($this->_events as $js_event) {",
          "",
          "[Removed Lines]",
          "269:         $retval .= '<script type=\"text/javascript\">';",
          "",
          "[Added Lines]",
          "269:         $retval .= '<script data-cfasync=\"false\" type=\"text/javascript\">';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "addb363cdb86bfd3f2e89aa6a9ae254641225080",
      "candidate_info": {
        "commit_hash": "addb363cdb86bfd3f2e89aa6a9ae254641225080",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/addb363cdb86bfd3f2e89aa6a9ae254641225080",
        "files": [
          "js/tracekit.js",
          "js/tracekit/tracekit.js",
          "libraries/Header.class.php"
        ],
        "message": "Move tracekit library to separate folder\n\nThis makes it somehow separated from our code",
        "before_after_code_files": [
          "libraries/Header.class.php||libraries/Header.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/Header.class.php||libraries/Header.class.php"
          ],
          "candidate": [
            "libraries/Header.class.php||libraries/Header.class.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Header.class.php||libraries/Header.class.php": [
          "File: libraries/Header.class.php -> libraries/Header.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:         $this->_scripts->addFile('rte.js');",
          "168:         if ($GLOBALS['cfg']['ErrorReporting'] == true) {",
          "170:             $this->_scripts->addFile('error_report.js');",
          "171:         }",
          "",
          "[Removed Lines]",
          "169:             $this->_scripts->addFile('tracekit.js');",
          "",
          "[Added Lines]",
          "169:             $this->_scripts->addFile('tracekit/tracekit.js');",
          "",
          "---------------"
        ]
      }
    }
  ]
}