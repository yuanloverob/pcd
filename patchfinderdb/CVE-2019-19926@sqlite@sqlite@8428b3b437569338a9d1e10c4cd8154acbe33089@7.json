{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
      "candidate_info": {
        "commit_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a faulty testcase() macro.\n\nFossilOrigin-Name: 80124ae55246b79023d23d3f55487ac3c0b40e8ff301c5daf4dd0631de8ddb29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8e9f77d52974f6ba0a536d05837b280a996745deb3a2169bb29379f10e49df4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5112:     case TK_IN:",
          "5113:     case TK_FUNCTION:",
          "5114:       testcase( pExpr->op==TK_ISNOT );",
          "5116:       testcase( pExpr->op==TK_ISNULL );",
          "5117:       testcase( pExpr->op==TK_NOTNULL );",
          "5118:       testcase( pExpr->op==TK_IS );",
          "",
          "[Removed Lines]",
          "5115:       testcase( pExpr->op==TK_NOT );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37eca05112b7d3d87325ea36fb4bca0f419c95f8",
      "candidate_info": {
        "commit_hash": "37eca05112b7d3d87325ea36fb4bca0f419c95f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37eca05112b7d3d87325ea36fb4bca0f419c95f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Tweaks to wapptest.tcl: Ensure that the \"Debug\" checkbox is disabled unless the app is in \"config\" state, and have Debug variants run \"test\" instead of \"fulltest\".\n\nFossilOrigin-Name: dd248c186a157b5ed60bbdae669b31237b8354c1a7e6ed64d377904043bd57ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56b664185e3e56ad22e0c16a5b946fc8204d4d33221b6b4269d6d650dfd9969c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         regsub -all {fulltest[a-z]*} $xtarget test xtarget",
          "136:         if {$debug_idx<0} {",
          "137:           lappend G(test_array) [",
          "139:           ]",
          "140:         } else {",
          "141:           lappend G(test_array) [",
          "",
          "[Removed Lines]",
          "138:             dict create config $config-(Debug) target $target",
          "",
          "[Added Lines]",
          "138:             dict create config $config-(Debug) target $xtarget",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:   if {$script != \"config.js\"} {",
          "609:     wapp-subst {",
          "610:       var lElem = \\[\"control_platform\", \"control_test\",",
          "612:       \\];",
          "613:       lElem.forEach(function(e) {",
          "614:         var elem = document.getElementById(e);",
          "",
          "[Removed Lines]",
          "611:           \"control_tcl\", \"control_keep\", \"control_msvc\"",
          "",
          "[Added Lines]",
          "611:           \"control_tcl\", \"control_keep\", \"control_msvc\",",
          "612:           \"control_debug\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93b6c1666dfe43b77653d11512ba391a82f66094",
      "candidate_info": {
        "commit_hash": "93b6c1666dfe43b77653d11512ba391a82f66094",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/93b6c1666dfe43b77653d11512ba391a82f66094",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with using ALTER TABLE to rename a table or column when the database schema contains a trigger or view that itself contains an expression  \"<column> AND 0\".\n\nFossilOrigin-Name: 908ff7fffa302255a74e2334ca3a1779ed43acb0268fce5a83a56fd16794dc88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851: ){",
          "852:   Expr *p;",
          "855:     p = sqlite3ExprAnd(pParse->db, pLeft, pRight);",
          "856:   }else{",
          "",
          "[Removed Lines]",
          "853:   if( op==TK_AND && pParse->nErr==0 ){",
          "",
          "[Added Lines]",
          "853:   if( op==TK_AND && pParse->nErr==0 && !IN_RENAME_OBJECT ){",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   INSERT INTO t3 VALUES(4, 5, 6);",
          "334: }",
          "336: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: do_execsql_test 8.1 {",
          "337:   CREATE TABLE t4(a, b);",
          "338:   CREATE VIEW v4 AS SELECT * FROM t4 WHERE (a=1 AND 0) OR b=2;",
          "339: }",
          "340: do_execsql_test 8.2 {",
          "341:   ALTER TABLE t4 RENAME a TO c;",
          "342:   SELECT sql FROM sqlite_master WHERE name = 'v4'",
          "343: } {{CREATE VIEW v4 AS SELECT * FROM t4 WHERE (c=1 AND 0) OR b=2}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e7fd73b25f83b6aac246a79990e0f5ff3019e7c",
      "candidate_info": {
        "commit_hash": "7e7fd73b25f83b6aac246a79990e0f5ff3019e7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e7fd73b25f83b6aac246a79990e0f5ff3019e7c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/update.c"
        ],
        "message": "In UPDATE processing, include generated columns in the set of columns being updated if and only if their generator expressions reference some other column that is being updated.\n\nFossilOrigin-Name: d38176e93a628e03f1bd8b689fbc4152a1495388da917c2d89cefed04353d2d6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 412799fc5527aaca987e4e04b8a4f774dcdb70fb80e3a126dc3a26d48a66935c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1405:     if( !sqlite3ExprIsConstantOrFunction(pExpr, db->init.busy) ){",
          "1406:       sqlite3ErrorMsg(pParse, \"default value of column [%s] is not constant\",",
          "1407:           pCol->zName);",
          "1408:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1408: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1409:     }else if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1410:       testcase( pCol->colflags & COLFLAG_VIRTUAL );",
          "1411:       testcase( pCol->colflags & COLFLAG_STORED );",
          "1412:       sqlite3ErrorMsg(pParse, \"cannot use DEFAULT on a generated column\");",
          "1413: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1633:   goto generated_done;",
          "1635: generated_error:",
          "1637:                   pCol->zName);",
          "1638: generated_done:",
          "1639:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1640: #else",
          "1644:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1645: #endif",
          "1646: }",
          "",
          "[Removed Lines]",
          "1636:   sqlite3ErrorMsg(pParse, \"incorrect GENERATED ALWAYS AS on column \\\"%s\\\"\",",
          "1643:   sqlite3ErrorMsg(pParse, \"GENERATED ALWAYS AS not supported\");",
          "",
          "[Added Lines]",
          "1642:   sqlite3ErrorMsg(pParse, \"error in generated column \\\"%s\\\"\",",
          "1649:   sqlite3ErrorMsg(pParse, \"generated columns not supported\");",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:   assert( chngPk==0 || chngPk==1 );",
          "357:   chngKey = chngRowid + chngPk;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "367:   if( pTab->tabFlags & TF_HasGenerated ){",
          "368:     int bProgress;",
          "369:     testcase( pTab->tabFlags & TF_HasVirtual );",
          "370:     testcase( pTab->tabFlags & TF_HasStored );",
          "371:     do{",
          "372:       bProgress = 0;",
          "373:       for(i=0; i<pTab->nCol; i++){",
          "374:         if( aXRef[i]>=0 ) continue;",
          "375:         if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 ) continue;",
          "376:         if( sqlite3ExprReferencesUpdatedColumn(pTab->aCol[i].pDflt,",
          "377:                                                aXRef, chngRowid) ){",
          "378:           aXRef[i] = 99999;",
          "379:           bProgress = 1;",
          "380:         }",
          "381:       }",
          "382:     }while( bProgress );",
          "383:   }",
          "384: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "954:   for(i=0; i<pTab->nCol; i++){",
          "955:     if( aXRef[i]>=0 ){",
          "956:       sqlite3ExprCode(pParse, pChanges->a[aXRef[i]].pExpr, regArg+2+i);",
          "957:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:     assert( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c754a3613e22b0f19c8e0847615cca9f98a4ac4",
      "candidate_info": {
        "commit_hash": "8c754a3613e22b0f19c8e0847615cca9f98a4ac4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c754a3613e22b0f19c8e0847615cca9f98a4ac4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Omit the \"_except\" term from the name of the new interface.\n\nFossilOrigin-Name: e5ba47c2d8eb9f48a0e0d325e57d0092d536f85983819634c871ebd51829f1d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0851db4d337a87f8b2d3ce2ae9f9c928b9483591ca41a9e39cc01548059b1888",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9409: #ifdef SQLITE_DEBUG",
          "9410:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9411:     int ii;",
          "9412:     char *zOpt;",
          "9413:     if( nArg<2 ){",
          "9414:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9412:     int lenOpt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9418:     open_db(p, 0);",
          "9419:     zOpt = azArg[1];",
          "9420:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9422:       assert( azArg[nArg]==0 );",
          "9424:     }else{",
          "9425:       for(ii=1; ii<nArg; ii++){",
          "9426:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Removed Lines]",
          "9421:     if( strcmp(zOpt, \"-allexcept\")==0 ){",
          "9423:       sqlite3_drop_modules_except(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "",
          "[Added Lines]",
          "9422:     lenOpt = (int)strlen(zOpt);",
          "9423:     if( lenOpt>=3 && strncmp(zOpt, \"-allexcept\",lenOpt)==0 ){",
          "9425:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6670: );",
          "",
          "[Removed Lines]",
          "6667: int sqlite3_drop_modules_except(",
          "",
          "[Added Lines]",
          "6671: int sqlite3_drop_modules(",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1111: }",
          "1121:   void *NotUsed,",
          "",
          "[Removed Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_except(",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_modules(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "[Removed Lines]",
          "1135:   sqlite3_drop_modules_except(db, argc>2 ? (const char**)(argv+2) : 0);",
          "",
          "[Added Lines]",
          "1135:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7886:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7887:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7888:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7890:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7891:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7892:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "7889:      { \"sqlite3_drop_modules_except\",   (Tcl_CmdProc*)test_drop_except      },",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules\",          (Tcl_CmdProc*)test_drop_modules     },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "",
          "[Removed Lines]",
          "140: int sqlite3_drop_modules_except(sqlite3 *db, const char** azNames){",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "",
          "---------------"
        ]
      }
    }
  ]
}