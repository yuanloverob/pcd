{
  "cve_id": "CVE-2021-29619",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. Passing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "82e6203221865de4008445b13c69b6826d2b28d9",
  "patch_info": {
    "commit_hash": "82e6203221865de4008445b13c69b6826d2b28d9",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/82e6203221865de4008445b13c69b6826d2b28d9",
    "files": [
      "tensorflow/core/kernels/count_ops.cc"
    ],
    "message": "Fix segfaults in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 360547563\nChange-Id: I781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
    "before_after_code_files": [
      "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
      "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:               \"; values shape: \", values.shape().DebugString()));",
      "193:     }",
      "195:     bool is_1d = shape.NumElements() == 1;",
      "196:     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);",
      "197:     int num_values = values.NumElements();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:     OP_REQUIRES(context, shape.NumElements() != 0,",
      "196:                 errors::InvalidArgument(",
      "197:                     \"The shape argument requires at least one element.\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "213:     for (int idx = 0; idx < num_values; ++idx) {",
      "214:       int batch = is_1d ? 0 : indices_values(idx, 0);",
      "215:       const auto& value = values_values(idx);",
      "216:       if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {",
      "217:         if (binary_output_) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:       if (batch >= num_batches) {",
      "220:         OP_REQUIRES(context, batch < num_batches,",
      "221:                     errors::InvalidArgument(",
      "222:                         \"Indices value along the first dimension must be \",",
      "223:                         \"lower than the first index of the shape.\", \"Got \",",
      "224:                         batch, \" as batch and \", num_batches,",
      "225:                         \" as the first dimension of the shape.\"));",
      "226:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9645ca19de2d4b3bfedf2a2d12aff5ffeac371a5",
      "candidate_info": {
        "commit_hash": "9645ca19de2d4b3bfedf2a2d12aff5ffeac371a5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9645ca19de2d4b3bfedf2a2d12aff5ffeac371a5",
        "files": [
          "tensorflow/core/kernels/count_ops.cc"
        ],
        "message": "Fix segfaults in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 360547563\nChange-Id: I781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
        "before_after_code_files": [
          "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
          "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:               \"; values shape: \", values.shape().DebugString()));",
          "193:     }",
          "195:     bool is_1d = shape.NumElements() == 1;",
          "196:     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);",
          "197:     int num_values = values.NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     OP_REQUIRES(context, shape.NumElements() != 0,",
          "196:                 errors::InvalidArgument(",
          "197:                     \"The shape argument requires at least one element.\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     for (int idx = 0; idx < num_values; ++idx) {",
          "214:       int batch = is_1d ? 0 : indices_values(idx, 0);",
          "215:       const auto& value = values_values(idx);",
          "216:       if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {",
          "217:         if (binary_output_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:       if (batch >= num_batches) {",
          "220:         OP_REQUIRES(context, batch < num_batches,",
          "221:                     errors::InvalidArgument(",
          "222:                         \"Indices value along the first dimension must be \",",
          "223:                         \"lower than the first index of the shape.\", \"Got \",",
          "224:                         batch, \" as batch and \", num_batches,",
          "225:                         \" as the first dimension of the shape.\"));",
          "226:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16fe89a3a12b70e6a798afdd4dda01d94d4deafc",
      "candidate_info": {
        "commit_hash": "16fe89a3a12b70e6a798afdd4dda01d94d4deafc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/16fe89a3a12b70e6a798afdd4dda01d94d4deafc",
        "files": [
          "tensorflow/core/kernels/count_ops.cc"
        ],
        "message": "Fix segfaults in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 360547563\nChange-Id: I781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
        "before_after_code_files": [
          "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
          "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:               \"; values shape: \", values.shape().DebugString()));",
          "193:     }",
          "195:     bool is_1d = shape.NumElements() == 1;",
          "196:     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);",
          "197:     int num_values = values.NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     OP_REQUIRES(context, shape.NumElements() != 0,",
          "196:                 errors::InvalidArgument(",
          "197:                     \"The shape argument requires at least one element.\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     for (int idx = 0; idx < num_values; ++idx) {",
          "214:       int batch = is_1d ? 0 : indices_values(idx, 0);",
          "215:       const auto& value = values_values(idx);",
          "216:       if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {",
          "217:         if (binary_output_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:       if (batch >= num_batches) {",
          "220:         OP_REQUIRES(context, batch < num_batches,",
          "221:                     errors::InvalidArgument(",
          "222:                         \"Indices value along the first dimension must be \",",
          "223:                         \"lower than the first index of the shape.\", \"Got \",",
          "224:                         batch, \" as batch and \", num_batches,",
          "225:                         \" as the first dimension of the shape.\"));",
          "226:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}