{
  "cve_id": "CVE-2012-2798",
  "cve_desc": "Unspecified vulnerability in the decode_dds1 function in libavcodec/dfa.c in FFmpeg before 0.11, and Libav 0.7.x before 0.7.7 and 0.8.x before 0.8.4, has unknown impact and attack vectors, related to an \"out of array write.\"",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "72b9537d8886f679494651df517dfed9b420cf1f",
  "patch_info": {
    "commit_hash": "72b9537d8886f679494651df517dfed9b420cf1f",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/72b9537d8886f679494651df517dfed9b420cf1f",
    "files": [
      "libavcodec/dfa.c"
    ],
    "message": "dfa: Fix out of array write in decode_dds1()\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/dfa.c||libavcodec/dfa.c"
    ]
  },
  "patch_diff": {
    "libavcodec/dfa.c||libavcodec/dfa.c": [
      "File: libavcodec/dfa.c -> libavcodec/dfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:             bitbuf = bytestream2_get_le16u(gb);",
      "150:             mask = 1;",
      "151:         }",
      "153:             return -1;",
      "154:         if (bitbuf & mask) {",
      "155:             v = bytestream2_get_le16(gb);",
      "",
      "[Removed Lines]",
      "152:         if (frame_end - frame < 2)",
      "",
      "[Added Lines]",
      "152:         if (frame_end - frame < width + 2)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29b0d94b43ac960cb442049a5d737a3386ff0337",
      "candidate_info": {
        "commit_hash": "29b0d94b43ac960cb442049a5d737a3386ff0337",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/29b0d94b43ac960cb442049a5d737a3386ff0337",
        "files": [
          "libavcodec/dfa.c"
        ],
        "message": "dfa: convert to bytestream2 API\n\nProtects from overreads.\n\nSigned-off-by: Paul B Mahol <onemda@gmail.com>\nSigned-off-by: Ronald S. Bultje <rsbultje@gmail.com>",
        "before_after_code_files": [
          "libavcodec/dfa.c||libavcodec/dfa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/dfa.c||libavcodec/dfa.c"
          ],
          "candidate": [
            "libavcodec/dfa.c||libavcodec/dfa.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/dfa.c||libavcodec/dfa.c": [
          "File: libavcodec/dfa.c -> libavcodec/dfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"avcodec.h\"",
          "25: #include \"bytestream.h\"",
          "26: #include \"libavutil/lzo.h\" // for av_memcpy_backptr",
          "",
          "[Removed Lines]",
          "24: #include \"libavutil/intreadwrite.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     return 0;",
          "46: }",
          "50: {",
          "51:     const int size = width * height;",
          "54:         return -1;",
          "56:     return 0;",
          "57: }",
          "61: {",
          "62:     const uint8_t *frame_start = frame;",
          "63:     const uint8_t *frame_end   = frame + width * height;",
          "",
          "[Removed Lines]",
          "48: static int decode_copy(uint8_t *frame, int width, int height,",
          "49:                        const uint8_t *src, const uint8_t *src_end)",
          "53:     if (src_end - src < size)",
          "55:     bytestream_get_buffer(&src, frame, size);",
          "59: static int decode_tsw1(uint8_t *frame, int width, int height,",
          "60:                        const uint8_t *src, const uint8_t *src_end)",
          "",
          "[Added Lines]",
          "47: static int decode_copy(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "51:     if (bytestream2_get_buffer(gb, frame, size) != size)",
          "56: static int decode_tsw1(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     int v, count, segments;",
          "66:     unsigned offset;",
          "70:     if (frame_end - frame <= offset)",
          "71:         return -1;",
          "72:     frame += offset;",
          "73:     while (segments--) {",
          "74:         if (mask == 0x10000) {",
          "78:             mask = 1;",
          "79:         }",
          "81:             return -1;",
          "82:         if (bitbuf & mask) {",
          "84:             offset = (v & 0x1FFF) << 1;",
          "85:             count = ((v >> 13) + 2) << 1;",
          "86:             if (frame - frame_start < offset || frame_end - frame < count)",
          "",
          "[Removed Lines]",
          "68:     segments = bytestream_get_le32(&src);",
          "69:     offset   = bytestream_get_le32(&src);",
          "75:             if (src >= src_end)",
          "76:                 return -1;",
          "77:             bitbuf = bytestream_get_le16(&src);",
          "80:         if (src_end - src < 2 || frame_end - frame < 2)",
          "83:             v = bytestream_get_le16(&src);",
          "",
          "[Added Lines]",
          "64:     segments = bytestream2_get_le32(gb);",
          "65:     offset   = bytestream2_get_le32(gb);",
          "70:         if (bytestream2_get_bytes_left(gb) < 2)",
          "71:             return -1;",
          "73:             bitbuf = bytestream2_get_le16u(gb);",
          "76:         if (frame_end - frame < 2)",
          "79:             v = bytestream2_get_le16(gb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:     return 0;",
          "98: }",
          "102: {",
          "103:     const uint8_t *frame_start = frame;",
          "104:     const uint8_t *frame_end   = frame + width * height;",
          "105:     int mask = 0x10000, bitbuf = 0;",
          "106:     int v, offset, count, segments;",
          "109:     while (segments--) {",
          "110:         if (mask == 0x10000) {",
          "114:             mask = 1;",
          "115:         }",
          "117:             return -1;",
          "118:         if (bitbuf & mask) {",
          "120:             offset = (v & 0x1FFF) << 1;",
          "121:             count = ((v >> 13) + 2) << 1;",
          "122:             if (frame - frame_start < offset || frame_end - frame < count)",
          "",
          "[Removed Lines]",
          "100: static int decode_dsw1(uint8_t *frame, int width, int height,",
          "101:                        const uint8_t *src, const uint8_t *src_end)",
          "108:     segments = bytestream_get_le16(&src);",
          "111:             if (src >= src_end)",
          "112:                 return -1;",
          "113:             bitbuf = bytestream_get_le16(&src);",
          "116:         if (src_end - src < 2 || frame_end - frame < 2)",
          "119:             v = bytestream_get_le16(&src);",
          "",
          "[Added Lines]",
          "96: static int decode_dsw1(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "103:     segments = bytestream2_get_le16(gb);",
          "105:         if (bytestream2_get_bytes_left(gb) < 2)",
          "106:             return -1;",
          "108:             bitbuf = bytestream2_get_le16u(gb);",
          "111:         if (frame_end - frame < 2)",
          "114:             v = bytestream2_get_le16(gb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:                 frame[v] = frame[v - offset];",
          "127:             frame += count;",
          "128:         } else if (bitbuf & (mask << 1)) {",
          "130:         } else {",
          "133:         }",
          "134:         mask <<= 2;",
          "135:     }",
          "",
          "[Removed Lines]",
          "129:             frame += bytestream_get_le16(&src);",
          "",
          "[Added Lines]",
          "124:             frame += bytestream2_get_le16(gb);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:     return 0;",
          "138: }",
          "142: {",
          "143:     const uint8_t *frame_start = frame;",
          "144:     const uint8_t *frame_end   = frame + width * height;",
          "145:     int mask = 0x10000, bitbuf = 0;",
          "146:     int i, v, offset, count, segments;",
          "149:     while (segments--) {",
          "150:         if (mask == 0x10000) {",
          "154:             mask = 1;",
          "155:         }",
          "157:             return -1;",
          "158:         if (bitbuf & mask) {",
          "160:             offset = (v & 0x1FFF) << 2;",
          "161:             count = ((v >> 13) + 2) << 1;",
          "162:             if (frame - frame_start < offset || frame_end - frame < count*2 + width)",
          "",
          "[Removed Lines]",
          "140: static int decode_dds1(uint8_t *frame, int width, int height,",
          "141:                        const uint8_t *src, const uint8_t *src_end)",
          "148:     segments = bytestream_get_le16(&src);",
          "151:             if (src >= src_end)",
          "152:                 return -1;",
          "153:             bitbuf = bytestream_get_le16(&src);",
          "156:         if (src_end - src < 2 || frame_end - frame < 2)",
          "159:             v = bytestream_get_le16(&src);",
          "",
          "[Added Lines]",
          "135: static int decode_dds1(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "142:     segments = bytestream2_get_le16(gb);",
          "144:         if (bytestream2_get_bytes_left(gb) < 2)",
          "145:             return -1;",
          "147:             bitbuf = bytestream2_get_le16u(gb);",
          "150:         if (frame_end - frame < 2)",
          "153:             v = bytestream2_get_le16(gb);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:                 frame += 2;",
          "169:             }",
          "170:         } else if (bitbuf & (mask << 1)) {",
          "172:         } else {",
          "173:             frame[0] = frame[1] =",
          "175:             frame += 2;",
          "176:             frame[0] = frame[1] =",
          "178:             frame += 2;",
          "179:         }",
          "180:         mask <<= 2;",
          "",
          "[Removed Lines]",
          "171:             frame += bytestream_get_le16(&src) * 2;",
          "174:             frame[width] = frame[width + 1] =  *src++;",
          "177:             frame[width] = frame[width + 1] =  *src++;",
          "",
          "[Added Lines]",
          "165:             frame += bytestream2_get_le16(gb) * 2;",
          "168:             frame[width] = frame[width + 1] =  bytestream2_get_byte(gb);",
          "171:             frame[width] = frame[width + 1] =  bytestream2_get_byte(gb);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:     return 0;",
          "184: }",
          "188: {",
          "189:     uint8_t *line_ptr;",
          "190:     int count, lines, segments;",
          "193:     if (count >= height)",
          "194:         return -1;",
          "195:     frame += width * count;",
          "198:         return -1;",
          "200:     while (lines--) {",
          "201:         line_ptr = frame;",
          "202:         frame += width;",
          "204:         while (segments--) {",
          "206:                 return -1;",
          "211:             if (count >= 0) {",
          "213:                     return -1;",
          "215:             } else {",
          "216:                 count = -count;",
          "218:                     return -1;",
          "220:             }",
          "221:             line_ptr += count;",
          "222:         }",
          "",
          "[Removed Lines]",
          "186: static int decode_bdlt(uint8_t *frame, int width, int height,",
          "187:                        const uint8_t *src, const uint8_t *src_end)",
          "192:     count = bytestream_get_le16(&src);",
          "196:     lines = bytestream_get_le16(&src);",
          "197:     if (count + lines > height || src >= src_end)",
          "203:         segments = *src++;",
          "205:             if (src_end - src < 3)",
          "207:             if (frame - line_ptr <= *src)",
          "208:                 return -1;",
          "209:             line_ptr += *src++;",
          "210:             count = (int8_t)*src++;",
          "212:                 if (frame - line_ptr < count || src_end - src < count)",
          "214:                 bytestream_get_buffer(&src, line_ptr, count);",
          "217:                 if (frame - line_ptr < count || src >= src_end)",
          "219:                 memset(line_ptr, *src++, count);",
          "",
          "[Added Lines]",
          "180: static int decode_bdlt(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "185:     count = bytestream2_get_le16(gb);",
          "189:     lines = bytestream2_get_le16(gb);",
          "190:     if (count + lines > height)",
          "194:         if (bytestream2_get_bytes_left(gb) < 1)",
          "195:             return -1;",
          "198:         segments = bytestream2_get_byteu(gb);",
          "200:             if (frame - line_ptr <= bytestream2_peek_byte(gb))",
          "202:             line_ptr += bytestream2_get_byte(gb);",
          "203:             count = (int8_t)bytestream2_get_byte(gb);",
          "205:                 if (frame - line_ptr < count)",
          "206:                     return -1;",
          "207:                 if (bytestream2_get_buffer(gb, line_ptr, count) != count)",
          "211:                 if (frame - line_ptr < count)",
          "213:                 memset(line_ptr, bytestream2_get_byte(gb), count);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:     return 0;",
          "226: }",
          "230: {",
          "231:     const uint8_t *frame_end   = frame + width * height;",
          "232:     uint8_t *line_ptr;",
          "233:     int count, i, v, lines, segments;",
          "237:         return -1;",
          "239:     while (lines--) {",
          "241:         while ((segments & 0xC000) == 0xC000) {",
          "242:             unsigned delta = -((int16_t)segments * width);",
          "243:             if (frame_end - frame <= delta)",
          "244:                 return -1;",
          "245:             frame    += delta;",
          "247:         }",
          "248:         if (segments & 0x8000) {",
          "249:             frame[width - 1] = segments & 0xFF;",
          "251:         }",
          "252:         line_ptr = frame;",
          "253:         frame += width;",
          "254:         while (segments--) {",
          "258:                 return -1;",
          "261:             if (count >= 0) {",
          "263:                     return -1;",
          "265:                 line_ptr += count * 2;",
          "266:             } else {",
          "267:                 count = -count;",
          "269:                     return -1;",
          "271:                 for (i = 0; i < count; i++)",
          "272:                     bytestream_put_le16(&line_ptr, v);",
          "273:             }",
          "",
          "[Removed Lines]",
          "228: static int decode_wdlt(uint8_t *frame, int width, int height,",
          "229:                        const uint8_t *src, const uint8_t *src_end)",
          "235:     lines = bytestream_get_le16(&src);",
          "236:     if (lines > height || src >= src_end)",
          "240:         segments = bytestream_get_le16(&src);",
          "246:             segments = bytestream_get_le16(&src);",
          "250:             segments = bytestream_get_le16(&src);",
          "255:             if (src_end - src < 2)",
          "256:                 return -1;",
          "257:             if (frame - line_ptr <= *src)",
          "259:             line_ptr += *src++;",
          "260:             count = (int8_t)*src++;",
          "262:                 if (frame - line_ptr < count*2 || src_end - src < count*2)",
          "264:                 bytestream_get_buffer(&src, line_ptr, count*2);",
          "268:                 if (frame - line_ptr < count*2 || src_end - src < 2)",
          "270:                 v = bytestream_get_le16(&src);",
          "",
          "[Added Lines]",
          "222: static int decode_wdlt(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "228:     lines = bytestream2_get_le16(gb);",
          "229:     if (lines > height)",
          "233:         if (bytestream2_get_bytes_left(gb) < 2)",
          "234:             return -1;",
          "235:         segments = bytestream2_get_le16u(gb);",
          "241:             segments = bytestream2_get_le16(gb);",
          "245:             segments = bytestream2_get_le16(gb);",
          "250:             if (frame - line_ptr <= bytestream2_peek_byte(gb))",
          "252:             line_ptr += bytestream2_get_byte(gb);",
          "253:             count = (int8_t)bytestream2_get_byte(gb);",
          "255:                 if (frame - line_ptr < count * 2)",
          "256:                     return -1;",
          "257:                 if (bytestream2_get_buffer(gb, line_ptr, count * 2) != count * 2)",
          "262:                 if (frame - line_ptr < count * 2)",
          "264:                 v = bytestream2_get_le16(gb);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "277:     return 0;",
          "278: }",
          "282: {",
          "283:     return -1;",
          "284: }",
          "288: {",
          "289:     memset(frame, 0, width * height);",
          "290:     return 0;",
          "291: }",
          "297: static const chunk_decoder decoder[8] = {",
          "298:     decode_copy, decode_tsw1, decode_bdlt, decode_wdlt,",
          "",
          "[Removed Lines]",
          "280: static int decode_unk6(uint8_t *frame, int width, int height,",
          "281:                        const uint8_t *src, const uint8_t *src_end)",
          "286: static int decode_blck(uint8_t *frame, int width, int height,",
          "287:                        const uint8_t *src, const uint8_t *src_end)",
          "294: typedef int (*chunk_decoder)(uint8_t *frame, int width, int height,",
          "295:                              const uint8_t *src, const uint8_t *src_end);",
          "",
          "[Added Lines]",
          "274: static int decode_unk6(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "279: static int decode_blck(GetByteContext *gb, uint8_t *frame, int width, int height)",
          "286: typedef int (*chunk_decoder)(GetByteContext *gb, uint8_t *frame, int width, int height);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "308:                             AVPacket *avpkt)",
          "309: {",
          "310:     DfaContext *s = avctx->priv_data;",
          "311:     const uint8_t *buf = avpkt->data;",
          "314:     uint32_t chunk_type, chunk_size;",
          "315:     uint8_t *dst;",
          "316:     int ret;",
          "",
          "[Removed Lines]",
          "312:     const uint8_t *buf_end = avpkt->data + avpkt->size;",
          "313:     const uint8_t *tmp_buf;",
          "",
          "[Added Lines]",
          "302:     GetByteContext gb;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "324:         return ret;",
          "325:     }",
          "335:         if (!chunk_type)",
          "336:             break;",
          "337:         if (chunk_type == 1) {",
          "338:             pal_elems = FFMIN(chunk_size / 3, 256);",
          "340:             for (i = 0; i < pal_elems; i++) {",
          "342:                 s->pal[i] |= (s->pal[i] >> 6) & 0x333;",
          "343:             }",
          "344:             s->pic.palette_has_changed = 1;",
          "345:         } else if (chunk_type <= 9) {",
          "348:                 av_log(avctx, AV_LOG_ERROR, \"Error decoding %s chunk\\n\",",
          "349:                        chunk_name[chunk_type - 2]);",
          "350:                 return -1;",
          "",
          "[Removed Lines]",
          "327:     while (buf < buf_end) {",
          "328:         chunk_size = AV_RL32(buf + 4);",
          "329:         chunk_type = AV_RL32(buf + 8);",
          "330:         buf += 12;",
          "331:         if (buf_end - buf < chunk_size) {",
          "332:             av_log(avctx, AV_LOG_ERROR, \"Chunk size is too big (%d bytes)\\n\", chunk_size);",
          "333:             return -1;",
          "334:         }",
          "339:             tmp_buf = buf;",
          "341:                 s->pal[i] = bytestream_get_be24(&tmp_buf) << 2;",
          "346:             if (decoder[chunk_type - 2](s->frame_buf, avctx->width, avctx->height,",
          "347:                                         buf, buf + chunk_size)) {",
          "",
          "[Added Lines]",
          "317:     bytestream2_init(&gb, avpkt->data, avpkt->size);",
          "318:     while (bytestream2_get_bytes_left(&gb) > 0) {",
          "319:         bytestream2_skip(&gb, 4);",
          "320:         chunk_size = bytestream2_get_le32(&gb);",
          "321:         chunk_type = bytestream2_get_le32(&gb);",
          "327:                 s->pal[i] = bytestream2_get_be24(&gb) << 2;",
          "332:             if (decoder[chunk_type - 2](&gb, s->frame_buf, avctx->width, avctx->height)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}