{
  "cve_id": "CVE-2018-20217",
  "cve_desc": "A Reachable Assertion issue was discovered in the KDC in MIT Kerberos 5 (aka krb5) before 1.17. If an attacker can obtain a krbtgt ticket using an older encryption type (single-DES, triple-DES, or RC4), the attacker can crash the KDC by making an S4U2Self request.",
  "repo": "krb5/krb5",
  "patch_hash": "5e6d1796106df8ba6bc1973ee0917c170d929086",
  "patch_info": {
    "commit_hash": "5e6d1796106df8ba6bc1973ee0917c170d929086",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/5e6d1796106df8ba6bc1973ee0917c170d929086",
    "files": [
      "src/kdc/kdc_util.c",
      "src/lib/krb5/krb/s4u_creds.c",
      "src/tests/gssapi/t_s4u.py"
    ],
    "message": "Ignore password attributes for S4U2Self requests\n\nFor consistency with Windows KDCs, allow protocol transition to work\neven if the password has expired or needs changing.\n\nAlso, when looking up an enterprise principal with an AS request,\ntreat ERR_KEY_EXP as confirmation that the client is present in the\nrealm.\n\n[ghudson@mit.edu: added comment in kdc_process_s4u2self_req(); edited\ncommit message]\n\nticket: 8763 (new)\ntags: pullup\ntarget_version: 1.17",
    "before_after_code_files": [
      "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
      "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
      "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
    ]
  },
  "patch_diff": {
    "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
      "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1608:         memset(&no_server, 0, sizeof(no_server));",
      "1610:         code = validate_as_request(kdc_active_realm, request, *princ,",
      "1611:                                    no_server, kdc_time, status, &e_data);",
      "1612:         if (code) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1612:         princ->pw_expiration = 0;",
      "1613:         clear(princ->attributes, KRB5_KDB_REQUIRES_PWCHANGE);",
      "",
      "---------------"
    ],
    "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c": [
      "File: src/lib/krb5/krb/s4u_creds.c -> src/lib/krb5/krb/s4u_creds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     code = k5_get_init_creds(context, &creds, &client, NULL, NULL, 0, NULL,",
      "117:                              opts, krb5_get_as_key_noop, &userid, &use_master,",
      "118:                              NULL);",
      "121:         userid.user = NULL;",
      "122:         code = 0;",
      "",
      "[Removed Lines]",
      "119:     if (code == 0 || code == KRB5_PREAUTH_FAILED) {",
      "",
      "[Added Lines]",
      "119:     if (!code || code == KRB5_PREAUTH_FAILED || code == KRB5KDC_ERR_KEY_EXP) {",
      "",
      "---------------"
    ],
    "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py": [
      "File: src/tests/gssapi/t_s4u.py -> src/tests/gssapi/t_s4u.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: # Get forwardable creds for service1 in the default cache.",
      "20: realm.kinit(service1, None, ['-f', '-k'])",
      "22: # Try krb5 -> S4U2Proxy with forwardable user creds.  This should fail",
      "23: # at the S4U2Proxy step since the DB2 back end currently has no",
      "24: # support for allowing it.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: # Try S4U2Self for user with a restricted password.",
      "23: realm.run([kadminl, 'modprinc', '+needchange', realm.user_princ])",
      "24: realm.run(['./t_s4u', 'e:user', '-'])",
      "25: realm.run([kadminl, 'modprinc', '-needchange',",
      "26:           '-pwexpire', '1/1/2000', realm.user_princ])",
      "27: realm.run(['./t_s4u', 'e:user', '-'])",
      "28: realm.run([kadminl, 'modprinc', '-pwexpire', 'never', realm.user_princ])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18f64cd1dea7d213fd9d337bdb831eca2a86d2fa",
      "candidate_info": {
        "commit_hash": "18f64cd1dea7d213fd9d337bdb831eca2a86d2fa",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/18f64cd1dea7d213fd9d337bdb831eca2a86d2fa",
        "files": [
          "src/kdc/kdc_util.c",
          "src/lib/krb5/krb/s4u_creds.c",
          "src/tests/gssapi/t_s4u.py"
        ],
        "message": "Ignore password attributes for S4U2Self requests\n\nFor consistency with Windows KDCs, allow protocol transition to work\neven if the password has expired or needs changing.\n\nAlso, when looking up an enterprise principal with an AS request,\ntreat ERR_KEY_EXP as confirmation that the client is present in the\nrealm.\n\n[ghudson@mit.edu: added comment in kdc_process_s4u2self_req(); edited\ncommit message]\n\n(cherry picked from commit 5e6d1796106df8ba6bc1973ee0917c170d929086)\n\nticket: 8763\nversion_fixed: 1.17",
        "before_after_code_files": [
          "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
          "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
          "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
            "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
            "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
          ],
          "candidate": [
            "src/kdc/kdc_util.c||src/kdc/kdc_util.c",
            "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
            "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
          ]
        }
      },
      "candidate_diff": {
        "src/kdc/kdc_util.c||src/kdc/kdc_util.c": [
          "File: src/kdc/kdc_util.c -> src/kdc/kdc_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1596:         memset(&no_server, 0, sizeof(no_server));",
          "1598:         code = validate_as_request(kdc_active_realm, request, *princ,",
          "1599:                                    no_server, kdc_time, status, &e_data);",
          "1600:         if (code) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1600:         princ->pw_expiration = 0;",
          "1601:         clear(princ->attributes, KRB5_KDB_REQUIRES_PWCHANGE);",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c": [
          "File: src/lib/krb5/krb/s4u_creds.c -> src/lib/krb5/krb/s4u_creds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     code = k5_get_init_creds(context, &creds, &client, NULL, NULL, 0, NULL,",
          "117:                              opts, krb5_get_as_key_noop, &userid, &use_master,",
          "118:                              NULL);",
          "121:         userid.user = NULL;",
          "122:         code = 0;",
          "",
          "[Removed Lines]",
          "119:     if (code == 0 || code == KRB5_PREAUTH_FAILED) {",
          "",
          "[Added Lines]",
          "119:     if (!code || code == KRB5_PREAUTH_FAILED || code == KRB5KDC_ERR_KEY_EXP) {",
          "",
          "---------------"
        ],
        "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py": [
          "File: src/tests/gssapi/t_s4u.py -> src/tests/gssapi/t_s4u.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # Get forwardable creds for service1 in the default cache.",
          "20: realm.kinit(service1, None, ['-f', '-k'])",
          "22: # Try krb5 -> S4U2Proxy with forwardable user creds.  This should fail",
          "23: # at the S4U2Proxy step since the DB2 back end currently has no",
          "24: # support for allowing it.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: # Try S4U2Self for user with a restricted password.",
          "23: realm.run([kadminl, 'modprinc', '+needchange', realm.user_princ])",
          "24: realm.run(['./t_s4u', 'e:user', '-'])",
          "25: realm.run([kadminl, 'modprinc', '-needchange',",
          "26:           '-pwexpire', '1/1/2000', realm.user_princ])",
          "27: realm.run(['./t_s4u', 'e:user', '-'])",
          "28: realm.run([kadminl, 'modprinc', '-pwexpire', 'never', realm.user_princ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d6847c8f0187a0dd6466420335b5460de5c449e",
      "candidate_info": {
        "commit_hash": "9d6847c8f0187a0dd6466420335b5460de5c449e",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/9d6847c8f0187a0dd6466420335b5460de5c449e",
        "files": [
          "src/include/k5-trace.h",
          "src/lib/krb5/krb/get_in_tkt.c",
          "src/lib/krb5/krb/init_creds_ctx.h",
          "src/lib/krb5/krb/int-proto.h",
          "src/lib/krb5/krb/preauth2.c",
          "src/lib/krb5/krb/s4u_creds.c",
          "src/tests/gssapi/t_s4u.py"
        ],
        "message": "Improve S4U2Self realm identification internals\n\nRealm identification for S4U2Self requests ([MS-SFU] 3.1.5.1.1.1) uses\nthe AS code path with some differences: we might want to include a\nsubject certificate in pa-data, we want to stop as soon as we get a\nreply indicating which realm the client is in, and we want to\ncommunicate that realm to the caller.  The current method of making\nthese changes is fragile--it uses an optimistic preauth type but does\nnot actually pre-authenticate, and it assumes that the AS code will\nterminate with a predictable error if there is no prompter and a\ntrivial GAK function.\n\nInstead, add fields to krb5_get_init_creds_context for realm\nidentification, and support them in the AS state machine, making sure\nnever to invoke preauth modules.  Add a new library-internal function\nk5_identify_realm() to set up an appropriate context, run the state\nmachine, and copy out the client principal of the last request on\nsuccess.",
        "before_after_code_files": [
          "src/include/k5-trace.h||src/include/k5-trace.h",
          "src/lib/krb5/krb/get_in_tkt.c||src/lib/krb5/krb/get_in_tkt.c",
          "src/lib/krb5/krb/init_creds_ctx.h||src/lib/krb5/krb/init_creds_ctx.h",
          "src/lib/krb5/krb/int-proto.h||src/lib/krb5/krb/int-proto.h",
          "src/lib/krb5/krb/preauth2.c||src/lib/krb5/krb/preauth2.c",
          "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
          "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
            "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
          ],
          "candidate": [
            "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c",
            "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py"
          ]
        }
      },
      "candidate_diff": {
        "src/include/k5-trace.h||src/include/k5-trace.h": [
          "File: src/include/k5-trace.h -> src/include/k5-trace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "227: #define TRACE_INIT_CREDS_GAK(c, salt, s2kparams)                    \\",
          "228:     TRACE(c, \"Getting AS key, salt \\\"{data}\\\", params \\\"{data}\\\"\",  \\",
          "229:           salt, s2kparams)",
          "230: #define TRACE_INIT_CREDS_KEYTAB_LOOKUP(c, etypes)               \\",
          "231:     TRACE(c, \"Looked up etypes in keytab: {etypes}\", etypes)",
          "232: #define TRACE_INIT_CREDS_KEYTAB_LOOKUP_FAILED(c, code)          \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: #define TRACE_INIT_CREDS_IDENTIFIED_REALM(c, realm)                     \\",
          "231:     TRACE(c, \"Identified realm of client principal as {data}\", realm)",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/get_in_tkt.c||src/lib/krb5/krb/get_in_tkt.c": [
          "File: src/lib/krb5/krb/get_in_tkt.c -> src/lib/krb5/krb/get_in_tkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:     if (code)",
          "1425:         goto cleanup;",
          "1427:     code = maybe_add_pac_request(context, ctx);",
          "1428:     if (code)",
          "1429:         goto cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     if (ctx->subject_cert != NULL) {",
          "1428:         code = add_padata(&ctx->request->padata, KRB5_PADATA_S4U_X509_USER,",
          "1429:                           ctx->subject_cert->data, ctx->subject_cert->length);",
          "1430:         if (code)",
          "1431:             return code;",
          "1432:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1567:             ctx->restarted = FALSE;",
          "1568:             code = restart_init_creds_loop(context, ctx, FALSE);",
          "1569:         } else if (reply_code == KDC_ERR_PREAUTH_REQUIRED && retry) {",
          "1570:             note_req_timestamp(context, ctx, ctx->err_reply->stime,",
          "1571:                                ctx->err_reply->susec);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1576:         } else if (ctx->identify_realm &&",
          "1577:                    (reply_code == KDC_ERR_PREAUTH_REQUIRED ||",
          "1578:                     reply_code == KDC_ERR_KEY_EXP)) {",
          "1580:             ctx->complete = TRUE;",
          "1581:             goto cleanup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1625:     if (code != 0)",
          "1626:         goto cleanup;",
          "1628:     code = sort_krb5_padata_sequence(context, &ctx->request->client->realm,",
          "1629:                                      ctx->reply->padata);",
          "1630:     if (code != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1641:     if (ctx->identify_realm) {",
          "1643:         ctx->complete = TRUE;",
          "1644:         goto cleanup;",
          "1645:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1849:     return code;",
          "1850: }",
          "1852: krb5_error_code",
          "1853: k5_populate_gic_opt(krb5_context context, krb5_get_init_creds_opt **out,",
          "1854:                     krb5_flags options, krb5_address *const *addrs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871: krb5_error_code",
          "1872: k5_identify_realm(krb5_context context, krb5_principal client,",
          "1873:                   const krb5_data *subject_cert, krb5_principal *client_out)",
          "1874: {",
          "1875:     krb5_error_code ret;",
          "1876:     krb5_get_init_creds_opt *opts = NULL;",
          "1877:     krb5_init_creds_context ctx = NULL;",
          "1878:     int use_master = 0;",
          "1882:     ret = krb5_get_init_creds_opt_alloc(context, &opts);",
          "1883:     if (ret)",
          "1884:         goto cleanup;",
          "1885:     krb5_get_init_creds_opt_set_tkt_life(opts, 15);",
          "1886:     krb5_get_init_creds_opt_set_renew_life(opts, 0);",
          "1887:     krb5_get_init_creds_opt_set_forwardable(opts, 0);",
          "1888:     krb5_get_init_creds_opt_set_proxiable(opts, 0);",
          "1889:     krb5_get_init_creds_opt_set_canonicalize(opts, 1);",
          "1891:     ret = krb5_init_creds_init(context, client, NULL, NULL, 0, opts, &ctx);",
          "1892:     if (ret)",
          "1893:         goto cleanup;",
          "1895:     ctx->identify_realm = TRUE;",
          "1896:     ctx->subject_cert = subject_cert;",
          "1898:     ret = k5_init_creds_get(context, ctx, &use_master);",
          "1899:     if (ret)",
          "1900:         goto cleanup;",
          "1902:     TRACE_INIT_CREDS_IDENTIFIED_REALM(context, &ctx->request->client->realm);",
          "1903:     ret = krb5_copy_principal(context, ctx->request->client, client_out);",
          "1905: cleanup:",
          "1906:     krb5_get_init_creds_opt_free(context, opts);",
          "1907:     krb5_init_creds_free(context, ctx);",
          "1908:     return ret;",
          "1909: }",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/init_creds_ctx.h||src/lib/krb5/krb/init_creds_ctx.h": [
          "File: src/lib/krb5/krb/init_creds_ctx.h -> src/lib/krb5/krb/init_creds_ctx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: struct _krb5_init_creds_context {",
          "21:     krb5_get_init_creds_opt *opt;",
          "22:     krb5_get_init_creds_opt opt_storage;",
          "23:     char *in_tkt_service;",
          "24:     krb5_prompter_fct prompter;",
          "25:     void *prompter_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     krb5_boolean identify_realm;",
          "24:     const krb5_data *subject_cert;",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/int-proto.h||src/lib/krb5/krb/int-proto.h": [
          "File: src/lib/krb5/krb/int-proto.h -> src/lib/krb5/krb/int-proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:                   get_as_key_fn gak, void *gak_data, int *master,",
          "292:                   krb5_kdc_rep **as_reply);",
          "294: krb5_error_code",
          "295: k5_populate_gic_opt(krb5_context context, krb5_get_init_creds_opt **opt,",
          "296:                     krb5_flags options, krb5_address *const *addrs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: krb5_error_code",
          "302: k5_identify_realm(krb5_context context, krb5_principal client,",
          "303:                   const krb5_data *subject_cert, krb5_principal *client_out);",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/preauth2.c||src/lib/krb5/krb/preauth2.c": [
          "File: src/lib/krb5/krb/preauth2.c -> src/lib/krb5/krb/preauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:     return ENOMEM;",
          "880: }",
          "",
          "[Removed Lines]",
          "882: static krb5_error_code",
          "883: add_s4u_x509_user_padata(krb5_context context, krb5_s4u_userid *userid,",
          "884:                          krb5_principal client, krb5_pa_data ***out_pa_list,",
          "885:                          int *out_pa_list_size)",
          "886: {",
          "887:     krb5_pa_data *s4u_padata;",
          "888:     krb5_error_code code;",
          "889:     krb5_principal client_copy;",
          "891:     if (userid == NULL)",
          "892:         return EINVAL;",
          "893:     code = krb5_copy_principal(context, client, &client_copy);",
          "894:     if (code != 0)",
          "895:         return code;",
          "896:     krb5_free_principal(context, userid->user);",
          "897:     userid->user = client_copy;",
          "899:     if (userid->subject_cert.length != 0) {",
          "900:         s4u_padata = malloc(sizeof(*s4u_padata));",
          "901:         if (s4u_padata == NULL)",
          "902:             return ENOMEM;",
          "904:         s4u_padata->magic = KV5M_PA_DATA;",
          "905:         s4u_padata->pa_type = KRB5_PADATA_S4U_X509_USER;",
          "906:         s4u_padata->contents = k5memdup(userid->subject_cert.data,",
          "907:                                         userid->subject_cert.length, &code);",
          "908:         if (s4u_padata->contents == NULL) {",
          "909:             free(s4u_padata);",
          "910:             return code;",
          "911:         }",
          "912:         s4u_padata->length = userid->subject_cert.length;",
          "914:         code = grow_pa_list(out_pa_list, out_pa_list_size, &s4u_padata, 1);",
          "915:         if (code) {",
          "916:             free(s4u_padata->contents);",
          "917:             free(s4u_padata);",
          "918:             return code;",
          "919:         }",
          "920:     }",
          "922:     return 0;",
          "923: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1021:         return 0;",
          "1023:     TRACE_PREAUTH_INPUT(context, in_padata);",
          "",
          "[Removed Lines]",
          "1020:     if (in_padata == NULL)",
          "",
          "[Added Lines]",
          "978:     if (in_padata == NULL || ctx->identify_realm)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1032:     if (ret)",
          "1033:         goto error;",
          "1046:     k5_init_preauth_context(context);",
          "1047:     if (context->preauth_context == NULL) {",
          "",
          "[Removed Lines]",
          "1035:     if (krb5int_find_pa_data(context, in_padata,",
          "1036:                              KRB5_PADATA_S4U_X509_USER) != NULL) {",
          "1038:         ret = add_s4u_x509_user_padata(context, ctx->gak_data,",
          "1039:                                        ctx->request->client,",
          "1040:                                        &out_pa_list, &out_pa_list_size);",
          "1041:         if (ret)",
          "1042:             goto error;",
          "1043:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/s4u_creds.c||src/lib/krb5/krb/s4u_creds.c": [
          "File: src/lib/krb5/krb/s4u_creds.c -> src/lib/krb5/krb/s4u_creds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: static krb5_error_code",
          "56: s4u_identify_user(krb5_context context,",
          "57:                   krb5_creds *in_creds,",
          "58:                   krb5_data *subject_cert,",
          "59:                   krb5_principal *canon_user)",
          "60: {",
          "66:     krb5_principal_data client;",
          "",
          "[Removed Lines]",
          "38: static krb5_error_code",
          "39: krb5_get_as_key_noop(",
          "40:     krb5_context context,",
          "41:     krb5_principal client,",
          "42:     krb5_enctype etype,",
          "43:     krb5_prompter_fct prompter,",
          "44:     void *prompter_data,",
          "45:     krb5_data *salt,",
          "46:     krb5_data *params,",
          "47:     krb5_keyblock *as_key,",
          "48:     void *gak_data,",
          "49:     k5_response_items *ritems)",
          "50: {",
          "52:     return KRB5_PREAUTH_FAILED;",
          "53: }",
          "61:     krb5_error_code code;",
          "62:     krb5_preauthtype ptypes[1] = { KRB5_PADATA_S4U_X509_USER };",
          "63:     krb5_creds creds;",
          "64:     int use_master = 0;",
          "65:     krb5_get_init_creds_opt *opts = NULL;",
          "67:     krb5_s4u_userid userid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:                                    canon_user);",
          "86:     }",
          "104:     if (in_creds->client != NULL) {",
          "105:         client = *in_creds->client;",
          "106:         client.realm = in_creds->server->realm;",
          "",
          "[Removed Lines]",
          "88:     memset(&creds, 0, sizeof(creds));",
          "90:     memset(&userid, 0, sizeof(userid));",
          "91:     if (subject_cert != NULL)",
          "92:         userid.subject_cert = *subject_cert;",
          "94:     code = krb5_get_init_creds_opt_alloc(context, &opts);",
          "95:     if (code != 0)",
          "96:         goto cleanup;",
          "97:     krb5_get_init_creds_opt_set_tkt_life(opts, 15);",
          "98:     krb5_get_init_creds_opt_set_renew_life(opts, 0);",
          "99:     krb5_get_init_creds_opt_set_forwardable(opts, 0);",
          "100:     krb5_get_init_creds_opt_set_proxiable(opts, 0);",
          "101:     krb5_get_init_creds_opt_set_canonicalize(opts, 1);",
          "102:     krb5_get_init_creds_opt_set_preauth_list(opts, ptypes, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         client.type = KRB5_NT_ENTERPRISE_PRINCIPAL;",
          "114:     }",
          "133: }",
          "135: static krb5_error_code",
          "",
          "[Removed Lines]",
          "116:     code = k5_get_init_creds(context, &creds, &client, NULL, NULL, 0, NULL,",
          "117:                              opts, krb5_get_as_key_noop, &userid, &use_master,",
          "118:                              NULL);",
          "119:     if (!code || code == KRB5_PREAUTH_FAILED || code == KRB5KDC_ERR_KEY_EXP) {",
          "121:         userid.user = NULL;",
          "122:         code = 0;",
          "123:     }",
          "125: cleanup:",
          "126:     krb5_free_cred_contents(context, &creds);",
          "127:     if (opts != NULL)",
          "128:         krb5_get_init_creds_opt_free(context, opts);",
          "129:     if (userid.user != NULL)",
          "130:         krb5_free_principal(context, userid.user);",
          "132:     return code;",
          "",
          "[Added Lines]",
          "77:     return k5_identify_realm(context, &client, subject_cert, canon_user);",
          "",
          "---------------"
        ],
        "src/tests/gssapi/t_s4u.py||src/tests/gssapi/t_s4u.py": [
          "File: src/tests/gssapi/t_s4u.py -> src/tests/gssapi/t_s4u.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: # that we start at the server realm.",
          "199: mark('cross-realm S4U2Self with enterprise name')",
          "200: msgs = ('Getting initial credentials for enterprise\\\\@abc@SREALM',",
          "202:         'Sending unauthenticated request',",
          "203:         '/Realm not local to KDC',",
          "204:         'Following referral to realm UREALM',",
          "206:         'Sending unauthenticated request',",
          "207:         '/Additional pre-authentication required',",
          "209:         'Getting credentials enterprise\\\\@abc@UREALM -> user@SREALM',",
          "210:         'TGS reply is for enterprise\\@abc@UREALM -> user@SREALM')",
          "211: r1.run(['./t_s4u', 'e:enterprise@abc@NOREALM', '-', r1.keytab],",
          "",
          "[Removed Lines]",
          "201:         'Processing preauth types: PA-FOR-X509-USER (130)',",
          "205:         'Processing preauth types: PA-FOR-X509-USER (130)',",
          "208:         '/Generic preauthentication failure',",
          "",
          "[Added Lines]",
          "206:         'Identified realm of client principal as UREALM',",
          "",
          "---------------"
        ]
      }
    }
  ]
}