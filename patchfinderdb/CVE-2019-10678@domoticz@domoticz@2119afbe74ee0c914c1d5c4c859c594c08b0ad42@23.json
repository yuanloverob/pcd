{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5fb220c7d8aed08f016ced39dd9c83eea9e92d6",
      "candidate_info": {
        "commit_hash": "f5fb220c7d8aed08f016ced39dd9c83eea9e92d6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f5fb220c7d8aed08f016ced39dd9c83eea9e92d6",
        "files": [
          "History.txt",
          "main/Scheduler.cpp",
          "main/WebServer.cpp",
          "main/WebServer.h",
          "www/app/TimerplanController.js",
          "www/i18n/domoticz-ar.json.gz",
          "www/i18n/domoticz-bg.json.gz",
          "www/i18n/domoticz-bs.json.gz",
          "www/i18n/domoticz-ca.json.gz",
          "www/i18n/domoticz-cs.json.gz",
          "www/i18n/domoticz-da.json.gz",
          "www/i18n/domoticz-de.json.gz",
          "www/i18n/domoticz-el.json.gz",
          "www/i18n/domoticz-en.json.gz",
          "www/i18n/domoticz-es.json.gz",
          "www/i18n/domoticz-et.json.gz",
          "www/i18n/domoticz-fa.json.gz",
          "www/i18n/domoticz-fi.json.gz",
          "www/i18n/domoticz-fr.json.gz",
          "www/i18n/domoticz-he.json.gz",
          "www/i18n/domoticz-hu.json.gz",
          "www/i18n/domoticz-is.json.gz",
          "www/i18n/domoticz-it.json.gz",
          "www/i18n/domoticz-lt.json.gz",
          "www/i18n/domoticz-lv.json.gz",
          "www/i18n/domoticz-mk.json.gz",
          "www/i18n/domoticz-nl.json.gz",
          "www/i18n/domoticz-no.json.gz",
          "www/i18n/domoticz-pl.json.gz",
          "www/i18n/domoticz-pt.json.gz",
          "www/i18n/domoticz-ro.json.gz",
          "www/i18n/domoticz-ru.json.gz",
          "www/i18n/domoticz-sk.json.gz",
          "www/i18n/domoticz-sl.json.gz",
          "www/i18n/domoticz-sq.json.gz",
          "www/i18n/domoticz-sr.json.gz",
          "www/i18n/domoticz-sv.json.gz",
          "www/i18n/domoticz-th.json.gz",
          "www/i18n/domoticz-tr.json.gz",
          "www/i18n/domoticz-uk.json.gz",
          "www/i18n/domoticz-zh.json.gz",
          "www/views/timerplan.html"
        ],
        "message": "Implemented: Timer Plan, duplicate option",
        "before_after_code_files": [
          "main/Scheduler.cpp||main/Scheduler.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WebServer.h||main/WebServer.h",
          "www/app/TimerplanController.js||www/app/TimerplanController.js",
          "www/views/timerplan.html||www/views/timerplan.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Scheduler.cpp||main/Scheduler.cpp": [
          "File: main/Scheduler.cpp -> main/Scheduler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2152:     );",
          "2153:    m_mainworker.m_scheduler.ReloadSchedules();",
          "2154:   }",
          "2155:  }",
          "2156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2156:   void CWebServer::Cmd_GetTimerPlans(WebEmSession & session, const request& req, Json::Value &root)",
          "2157:   {",
          "2158:    if (session.rights != 2)",
          "2159:    {",
          "2160:     session.reply_status = reply::forbidden;",
          "2161:     return; //Only admin user allowed",
          "2162:    }",
          "2163:    root[\"status\"] = \"OK\";",
          "2164:    root[\"title\"] = \"GetTimerPlans\";",
          "2165:    std::vector<std::vector<std::string> > result;",
          "2166:    result = m_sql.safe_query(\"SELECT ID, Name FROM TimerPlans ORDER BY Name COLLATE NOCASE ASC\");",
          "2167:    if (!result.empty())",
          "2168:    {",
          "2169:     int ii = 0;",
          "2170:     for (const auto & itt : result)",
          "2171:     {",
          "2172:      std::vector<std::string> sd = itt;",
          "2173:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "2174:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "2175:      ii++;",
          "2176:     }",
          "2177:    }",
          "2178:   }",
          "2180:   void CWebServer::Cmd_AddTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2181:   {",
          "2182:    if (session.rights != 2)",
          "2183:    {",
          "2184:     session.reply_status = reply::forbidden;",
          "2185:     return; //Only admin user allowed",
          "2186:    }",
          "2188:    std::string name = request::findValue(&req, \"name\");",
          "2189:    root[\"status\"] = \"OK\";",
          "2190:    root[\"title\"] = \"AddTimerPlan\";",
          "2191:    m_sql.safe_query(\"INSERT INTO TimerPlans (Name) VALUES ('%q')\", name.c_str());",
          "2192:   }",
          "2194:   void CWebServer::Cmd_UpdateTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2195:   {",
          "2196:    if (session.rights != 2)",
          "2197:    {",
          "2198:     session.reply_status = reply::forbidden;",
          "2199:     return; //Only admin user allowed",
          "2200:    }",
          "2202:    std::string idx = request::findValue(&req, \"idx\");",
          "2203:    if (idx.empty())",
          "2204:     return;",
          "2205:    std::string name = request::findValue(&req, \"name\");",
          "2206:    if (",
          "2207:     (name.empty())",
          "2208:     )",
          "2209:     return;",
          "2211:    root[\"status\"] = \"OK\";",
          "2212:    root[\"title\"] = \"UpdateTimerPlan\";",
          "2214:    m_sql.safe_query(\"UPDATE TimerPlans SET Name='%q' WHERE (ID == '%q')\", name.c_str(), idx.c_str());",
          "2215:   }",
          "2217:   void CWebServer::Cmd_DeleteTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2218:   {",
          "2219:    if (session.rights != 2)",
          "2220:    {",
          "2221:     session.reply_status = reply::forbidden;",
          "2222:     return; //Only admin user allowed",
          "2223:    }",
          "2225:    std::string idx = request::findValue(&req, \"idx\");",
          "2226:    if (idx.empty())",
          "2227:     return;",
          "2228:    int iPlan = atoi(idx.c_str());",
          "2229:    if (iPlan < 1)",
          "2230:     return;",
          "2232:    root[\"status\"] = \"OK\";",
          "2233:    root[\"title\"] = \"DeletePlan\";",
          "2235:    m_sql.safe_query(\"DELETE FROM Timers WHERE (TimerPlan == '%q')\", idx.c_str());",
          "2236:    m_sql.safe_query(\"DELETE FROM SceneTimers WHERE (TimerPlan == '%q')\", idx.c_str());",
          "2237:    m_sql.safe_query(\"DELETE FROM SetpointTimers WHERE (TimerPlan == '%q')\", idx.c_str());",
          "2239:    m_sql.safe_query(\"DELETE FROM TimerPlans WHERE (ID == '%q')\", idx.c_str());",
          "2241:    if (m_sql.m_ActiveTimerPlan == iPlan)",
          "2242:    {",
          "2244:     m_sql.UpdatePreferencesVar(\"ActiveTimerPlan\", 0);",
          "2245:     m_sql.m_ActiveTimerPlan = 0;",
          "2246:     m_mainworker.m_scheduler.ReloadSchedules();",
          "2247:    }",
          "2248:   }",
          "2250:   void CWebServer::Cmd_DuplicateTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2251:   {",
          "2252:    if (session.rights != 2)",
          "2253:    {",
          "2254:     session.reply_status = reply::forbidden;",
          "2255:     return; //Only admin user allowed",
          "2256:    }",
          "2258:    std::string idx = request::findValue(&req, \"idx\");",
          "2259:    if (idx.empty())",
          "2260:     return;",
          "2261:    std::string name = request::findValue(&req, \"name\");",
          "2262:    if (",
          "2263:     (name.empty())",
          "2264:     )",
          "2265:     return;",
          "2267:    root[\"status\"] = \"OK\";",
          "2268:    root[\"title\"] = \"DuplicateTimerPlan\";",
          "2270:    m_sql.safe_query(\"INSERT INTO TimerPlans (Name) VALUES ('%q')\", name.c_str());",
          "2272:    std::vector<std::vector<std::string> > result;",
          "2274:    result = m_sql.safe_query(\"SELECT MAX(ID) FROM TimerPlans WHERE (Name=='%q')\", name.c_str());",
          "2275:    if (!result.empty())",
          "2276:    {",
          "2277:     std::string nID = result[0][0];",
          "2280:     result = m_sql.safe_query(\"SELECT Active, DeviceRowID, Time, Type, Cmd, Level, Days, UseRandomness, Hue, [Date], MDay, Month, Occurence, Color FROM Timers WHERE (TimerPlan==%q) ORDER BY ID\", idx.c_str());",
          "2281:     for (const auto & itt : result)",
          "2282:     {",
          "2283:      std::vector<std::string> sd = itt;",
          "2284:      m_sql.safe_query(",
          "2285:       \"INSERT INTO Timers (Active, DeviceRowID, Time, Type, Cmd, Level, Days, UseRandomness, Hue, [Date], MDay, Month, Occurence, Color, TimerPlan) VALUES (%q, %q, '%q', %q, %q, %q, %q, %q, %q, '%q', %q, %q, %q, '%q', %q)\",",
          "2286:       sd[0].c_str(),",
          "2287:       sd[1].c_str(),",
          "2288:       sd[2].c_str(),",
          "2289:       sd[3].c_str(),",
          "2290:       sd[4].c_str(),",
          "2291:       sd[5].c_str(),",
          "2292:       sd[6].c_str(),",
          "2293:       sd[7].c_str(),",
          "2294:       sd[8].c_str(),",
          "2295:       sd[9].c_str(),",
          "2296:       sd[10].c_str(),",
          "2297:       sd[11].c_str(),",
          "2298:       sd[12].c_str(),",
          "2299:       sd[13].c_str(),",
          "2300:       nID.c_str()",
          "2301:      );",
          "2302:     }",
          "2304:     result = m_sql.safe_query(\"SELECT Active, SceneRowID, Time, Type, Cmd, Level, Days, UseRandomness, Hue, [Date], Month, MDay, Occurence FROM SceneTimers WHERE (TimerPlan==%q) ORDER BY ID\", idx.c_str());",
          "2305:     for (const auto & itt : result)",
          "2306:     {",
          "2307:      std::vector<std::string> sd = itt;",
          "2308:      m_sql.safe_query(",
          "2309:       \"INSERT INTO SceneTimers (Active, SceneRowID, Time, Type, Cmd, Level, Days, UseRandomness, Hue, [Date], Month, MDay, Occurence, TimerPlan) VALUES (%q, %q, '%q', %q, %q, %q, %q, %q, %q, '%q', %q, %q, %q, %q)\",",
          "2310:       sd[0].c_str(),",
          "2311:       sd[1].c_str(),",
          "2312:       sd[2].c_str(),",
          "2313:       sd[3].c_str(),",
          "2314:       sd[4].c_str(),",
          "2315:       sd[5].c_str(),",
          "2316:       sd[6].c_str(),",
          "2317:       sd[7].c_str(),",
          "2318:       sd[8].c_str(),",
          "2319:       sd[9].c_str(),",
          "2320:       sd[10].c_str(),",
          "2321:       sd[11].c_str(),",
          "2322:       sd[12].c_str(),",
          "2323:       nID.c_str()",
          "2324:      );",
          "2325:     }",
          "2327:     result = m_sql.safe_query(\"SELECT Active, DeviceRowID, [Date], Time, Type, Temperature, Days, Month, MDay, Occurence FROM SetpointTimers WHERE (TimerPlan==%q) ORDER BY ID\", idx.c_str());",
          "2328:     for (const auto & itt : result)",
          "2329:     {",
          "2330:      std::vector<std::string> sd = itt;",
          "2331:      m_sql.safe_query(",
          "2332:       \"INSERT INTO SetpointTimers (Active, DeviceRowID, [Date], Time, Type, Temperature, Days, Month, MDay, Occurence, TimerPlan) VALUES (%q, %q, '%q', '%q', %q, %q, %q, %q, %q, %q, %q)\",",
          "2333:       sd[0].c_str(),",
          "2334:       sd[1].c_str(),",
          "2335:       sd[2].c_str(),",
          "2336:       sd[3].c_str(),",
          "2337:       sd[4].c_str(),",
          "2338:       sd[5].c_str(),",
          "2339:       sd[6].c_str(),",
          "2340:       sd[7].c_str(),",
          "2341:       sd[8].c_str(),",
          "2342:       sd[9].c_str(),",
          "2343:       nID.c_str()",
          "2344:      );",
          "2345:     }",
          "2346:    }",
          "2347:   }",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:    RegisterCommandCode(\"addtimerplan\", boost::bind(&CWebServer::Cmd_AddTimerPlan, this, _1, _2, _3));",
          "501:    RegisterCommandCode(\"updatetimerplan\", boost::bind(&CWebServer::Cmd_UpdateTimerPlan, this, _1, _2, _3));",
          "502:    RegisterCommandCode(\"deletetimerplan\", boost::bind(&CWebServer::Cmd_DeleteTimerPlan, this, _1, _2, _3));",
          "504:    RegisterCommandCode(\"getactualhistory\", boost::bind(&CWebServer::Cmd_GetActualHistory, this, _1, _2, _3));",
          "505:    RegisterCommandCode(\"getnewhistory\", boost::bind(&CWebServer::Cmd_GetNewHistory, this, _1, _2, _3));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:    RegisterCommandCode(\"duplicatetimerplan\", boost::bind(&CWebServer::Cmd_DuplicateTimerPlan, this, _1, _2, _3));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416:     aOrder.c_str(), oID.c_str());",
          "2417:   }",
          "2509:   void CWebServer::Cmd_GetVersion(WebEmSession & session, const request& req, Json::Value &root)",
          "2510:   {",
          "2511:    root[\"status\"] = \"OK\";",
          "",
          "[Removed Lines]",
          "2419:   void CWebServer::Cmd_GetTimerPlans(WebEmSession & session, const request& req, Json::Value &root)",
          "2420:   {",
          "2421:    if (session.rights != 2)",
          "2422:    {",
          "2423:     session.reply_status = reply::forbidden;",
          "2424:     return; //Only admin user allowed",
          "2425:    }",
          "2426:    root[\"status\"] = \"OK\";",
          "2427:    root[\"title\"] = \"GetTimerPlans\";",
          "2428:    std::vector<std::vector<std::string> > result;",
          "2429:    result = m_sql.safe_query(\"SELECT ID, Name FROM TimerPlans ORDER BY Name COLLATE NOCASE ASC\");",
          "2430:    if (!result.empty())",
          "2431:    {",
          "2432:     int ii = 0;",
          "2433:     for (const auto & itt : result)",
          "2434:     {",
          "2435:      std::vector<std::string> sd = itt;",
          "2436:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "2437:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "2438:      ii++;",
          "2439:     }",
          "2440:    }",
          "2441:   }",
          "2443:   void CWebServer::Cmd_AddTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2444:   {",
          "2445:    if (session.rights != 2)",
          "2446:    {",
          "2447:     session.reply_status = reply::forbidden;",
          "2448:     return; //Only admin user allowed",
          "2449:    }",
          "2451:    std::string name = request::findValue(&req, \"name\");",
          "2452:    root[\"status\"] = \"OK\";",
          "2453:    root[\"title\"] = \"AddTimerPlan\";",
          "2454:    m_sql.safe_query(\"INSERT INTO TimerPlans (Name) VALUES ('%q')\", name.c_str());",
          "2455:   }",
          "2457:   void CWebServer::Cmd_UpdateTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2458:   {",
          "2459:    if (session.rights != 2)",
          "2460:    {",
          "2461:     session.reply_status = reply::forbidden;",
          "2462:     return; //Only admin user allowed",
          "2463:    }",
          "2465:    std::string idx = request::findValue(&req, \"idx\");",
          "2466:    if (idx.empty())",
          "2467:     return;",
          "2468:    std::string name = request::findValue(&req, \"name\");",
          "2469:    if (",
          "2470:     (name.empty())",
          "2471:     )",
          "2472:     return;",
          "2474:    root[\"status\"] = \"OK\";",
          "2475:    root[\"title\"] = \"UpdateTimerPlan\";",
          "2477:    m_sql.safe_query(\"UPDATE TimerPlans SET Name='%q' WHERE (ID == '%q')\", name.c_str(), idx.c_str());",
          "2478:   }",
          "2480:   void CWebServer::Cmd_DeleteTimerPlan(WebEmSession & session, const request& req, Json::Value &root)",
          "2481:   {",
          "2482:    if (session.rights != 2)",
          "2483:    {",
          "2484:     session.reply_status = reply::forbidden;",
          "2485:     return; //Only admin user allowed",
          "2486:    }",
          "2488:    std::string idx = request::findValue(&req, \"idx\");",
          "2489:    if (idx.empty())",
          "2490:     return;",
          "2491:    int iPlan = atoi(idx.c_str());",
          "2492:    if (iPlan < 1)",
          "2493:     return;",
          "2495:    root[\"status\"] = \"OK\";",
          "2496:    root[\"title\"] = \"DeletePlan\";",
          "2497:    m_sql.safe_query(\"DELETE FROM Timers WHERE (TimerPlan == '%q')\", idx.c_str());",
          "2498:    m_sql.safe_query(\"DELETE FROM TimerPlans WHERE (ID == '%q')\", idx.c_str());",
          "2500:    if (m_sql.m_ActiveTimerPlan == iPlan)",
          "2501:    {",
          "2503:     m_sql.UpdatePreferencesVar(\"ActiveTimerPlan\", 0);",
          "2504:     m_sql.m_ActiveTimerPlan = 0;",
          "2505:     m_mainworker.m_scheduler.ReloadSchedules();",
          "2506:    }",
          "2507:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/WebServer.h||main/WebServer.h": [
          "File: main/WebServer.h -> main/WebServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:  void Cmd_AddTimerPlan(WebEmSession & session, const request& req, Json::Value &root);",
          "281:  void Cmd_UpdateTimerPlan(WebEmSession & session, const request& req, Json::Value &root);",
          "282:  void Cmd_DeleteTimerPlan(WebEmSession & session, const request& req, Json::Value &root);",
          "284:  void Cmd_AddCamera(WebEmSession & session, const request& req, Json::Value &root);",
          "285:  void Cmd_UpdateCamera(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:  void Cmd_DuplicateTimerPlan(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "---------------"
        ],
        "www/app/TimerplanController.js||www/app/TimerplanController.js": [
          "File: www/app/TimerplanController.js -> www/app/TimerplanController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:    });",
          "56:   }",
          "58:   DeleteTimerPlan = function(idx)",
          "59:   {",
          "60:    bootbox.confirm($.t(\"Are you sure you want to delete this Plan?\"), function(result) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   CopyTimerPlan = function(idx)",
          "59:   {",
          "60:    $( \"#dialog-add-edit-timerplan\" ).dialog({",
          "61:     resizable: false,",
          "62:     width: 390,",
          "63:     height:200,",
          "64:     modal: true,",
          "65:     title: 'Duplicate Plan',",
          "66:     buttons: {",
          "67:      \"Cancel\": function() {",
          "68:       $( this ).dialog( \"close\" );",
          "69:      },",
          "70:      \"Duplicate\": function() {",
          "71:       var csettings=GetTimerPlanSettings();",
          "72:       if (typeof csettings == 'undefined') {",
          "73:        return;",
          "74:       }",
          "75:       $( this ).dialog( \"close\" );",
          "76:       DuplicateTimerPlan(idx);",
          "77:      }",
          "78:     },",
          "79:     close: function() {",
          "80:      $( this ).dialog( \"close\" );",
          "81:     }",
          "82:    });",
          "83:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:    });",
          "109:   }",
          "111:   AddTimerPlan = function()",
          "112:   {",
          "113:    var csettings=GetTimerPlanSettings();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   DuplicateTimerPlan = function(idx)",
          "139:   {",
          "140:    var csettings=GetTimerPlanSettings();",
          "141:    if (typeof csettings == 'undefined') {",
          "142:     return;",
          "143:    }",
          "145:    $.ajax({",
          "146:      url: \"json.htm?type=command&param=duplicatetimerplan&idx=\" + idx +\"&name=\" + csettings.name,",
          "147:      async: false,",
          "148:      dataType: 'json',",
          "149:      success: function(data) {",
          "150:      RefreshTimerPlanTable();",
          "151:      },",
          "152:      error: function(){",
          "153:      ShowNotify('Problem duplicating Plan!', 2500, true);",
          "154:      }",
          "155:    });",
          "156:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:    $.devIdx=-1;",
          "137:    $('#updelclr #timerplanedit').attr(\"class\", \"btnstyle3-dis\");",
          "138:    $('#updelclr #timerplandelete').attr(\"class\", \"btnstyle3-dis\");",
          "140:    var oTable = $('#timerplantable').dataTable();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:    $('#updelclr #timerplancopy').attr(\"class\", \"btnstyle3-dis\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     if ( $(this).hasClass('row_selected') ) {",
          "171:      $(this).removeClass('row_selected');",
          "172:      $('#updelclr #timerplanedit').attr(\"class\", \"btnstyle3-dis\");",
          "173:      $('#updelclr #timerplandelete').attr(\"class\", \"btnstyle3-dis\");",
          "174:      $(\"#dialog-add-edit-plan #planname\").val(\"\");",
          "175:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:      $('#updelclr #timerplancopy').attr(\"class\", \"btnstyle3-dis\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:      oTable.$('tr.row_selected').removeClass('row_selected');",
          "179:      $(this).addClass('row_selected');",
          "180:      $('#updelclr #timerplanedit').attr(\"class\", \"btnstyle3-dis\");",
          "181:      $('#updelclr #timerplandelete').attr(\"class\", \"btnstyle3-dis\");",
          "183:      var anSelected = fnGetSelected( oTable );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:      $('#updelclr #timerplancopy').attr(\"class\", \"btnstyle3-dis\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:       $.devIdx=idx;",
          "188:       $('#updelclr #timerplanedit').attr(\"class\", \"btnstyle3\");",
          "189:       $(\"#updelclr #timerplanedit\").attr(\"href\", \"javascript:EditTimerPlan(\" + idx + \")\");",
          "190:       if (idx!=0) {",
          "192:        $('#updelclr #timerplandelete').attr(\"class\", \"btnstyle3\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:       $('#updelclr #timerplancopy').attr(\"class\", \"btnstyle3\");",
          "241:       $(\"#updelclr #timerplancopy\").attr(\"href\", \"javascript:CopyTimerPlan(\" + idx + \")\");",
          "",
          "---------------"
        ],
        "www/views/timerplan.html||www/views/timerplan.html": [
          "File: www/views/timerplan.html -> www/views/timerplan.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   <tr>",
          "30:    <td>",
          "31:     <a class=\"btnstyle3-dis\" id=\"timerplanedit\" data-i18n=\"Edit\">Edit</a>&nbsp;&nbsp;&nbsp;",
          "32:     <a class=\"btnstyle3-dis\" id=\"timerplandelete\" data-i18n=\"Delete\">Delete</a>",
          "33:    </td>",
          "34:   </tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     <a class=\"btnstyle3-dis\" id=\"timerplancopy\" data-i18n=\"Duplicate\">Duplicate</a>&nbsp;&nbsp;&nbsp;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
      "candidate_info": {
        "commit_hash": "75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/75069fe9b19cc1feb31d376422a42c3cfc1e2f28",
        "files": [
          "hardware/Kodi.cpp"
        ],
        "message": "Update: Handle new OnResume message (replaces OnPlay when playback resumes)",
        "before_after_code_files": [
          "hardware/Kodi.cpp||hardware/Kodi.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Kodi.cpp||hardware/Kodi.cpp": [
          "File: hardware/Kodi.cpp -> hardware/Kodi.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:         m_CurrentStatus.Status(MSTAT_ON);",
          "232:         UpdateStatus();",
          "233:        }",
          "235:        {",
          "236:         m_CurrentStatus.Clear();",
          "237:         m_CurrentStatus.PlayerID(root[\"params\"][\"data\"][\"player\"][\"playerid\"].asInt());",
          "",
          "[Removed Lines]",
          "234:        else if (root[\"method\"] == \"Player.OnPlay\")",
          "",
          "[Added Lines]",
          "234:        else if ((root[\"method\"] == \"Player.OnPlay\") || (root[\"method\"] == \"Player.OnResume\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:          m_CurrentStatus.Status(MSTAT_VIDEO);",
          "250:         else",
          "251:         {",
          "253:         }",
          "255:         if (m_CurrentStatus.PlayerID() != \"\")  // if we now have a player id then request more details",
          "",
          "[Removed Lines]",
          "252:          _log.Log(LOG_ERROR, \"Kodi: (%s) Message error, unknown type in OnPlay message: '%s' from '%s'\", m_Name.c_str(), root[\"params\"][\"data\"][\"item\"][\"type\"].asCString(), pMessage.c_str());",
          "",
          "[Added Lines]",
          "252:          _log.Log(LOG_ERROR, \"Kodi: (%s) Message error, unknown type in OnPlay/OnResume message: '%s' from '%s'\", m_Name.c_str(), root[\"params\"][\"data\"][\"item\"][\"type\"].asCString(), pMessage.c_str());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4ef8eea999e3a776651591d3b83010e4f468b2d",
      "candidate_info": {
        "commit_hash": "e4ef8eea999e3a776651591d3b83010e4f468b2d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e4ef8eea999e3a776651591d3b83010e4f468b2d",
        "files": [
          "www/app/report/EnergyMultiCounterReport.js"
        ],
        "message": "P1 Report graph tooltip now displays 'total' field again",
        "before_after_code_files": [
          "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js": [
          "File: www/app/report/EnergyMultiCounterReport.js -> www/app/report/EnergyMultiCounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                     min: 0",
          "371:                 },",
          "372:                 tooltip: {",
          "375:                 },",
          "376:                 plotOptions: {",
          "377:                     column: {",
          "",
          "[Removed Lines]",
          "373:      valueDecimals: 3,",
          "374:                     valueSuffix: ' ' + vm.unit",
          "",
          "[Added Lines]",
          "373:      formatter: function () {",
          "374:       return $.t(Highcharts.dateFormat('%A', this.x)) + ' ' + Highcharts.dateFormat('%Y-%m-%d', this.x) + '<br/>' + $.t(this.series.name) + ': ' + Highcharts.numberFormat(this.y,3) + ' ' + vm.unit + '<br/>Total: ' + this.point.stackTotal + ' ' + vm.unit;",
          "375:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62274b5b24e99749e5aaf53d0593d1b50296f762",
      "candidate_info": {
        "commit_hash": "62274b5b24e99749e5aaf53d0593d1b50296f762",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/62274b5b24e99749e5aaf53d0593d1b50296f762",
        "files": [
          "hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp",
          "main/SQLHelper.cpp",
          "main/SQLHelper.h",
          "main/WebServer.cpp"
        ],
        "message": "Renamed SaveUserVariable function to comply with rest of the code",
        "before_after_code_files": [
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp",
          "main/EventSystem.cpp||main/EventSystem.cpp",
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h",
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:    }",
          "651:   }",
          "652:   else if (switchtype == STYPE_OnOff && Name == \"Xiaomi Gateway MP3\") {",
          "654:   }",
          "655:  }",
          "656:  else {",
          "",
          "[Removed Lines]",
          "653:    m_sql.SaveUserVariable(\"XiaomiMP3\", \"0\", \"10001\");",
          "",
          "[Added Lines]",
          "653:    m_sql.AddUserVariable(\"XiaomiMP3\", \"0\", \"10001\");",
          "",
          "---------------"
        ],
        "main/EventSystem.cpp||main/EventSystem.cpp": [
          "File: main/EventSystem.cpp -> main/EventSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1342:  boost::unique_lock<boost::shared_mutex> uservariablesMutexLock(m_uservariablesMutex);",
          "1344:  std::map<uint64_t, _tUserVariable>::iterator itt = m_uservariables.find(ulDevID);",
          "1367:  }",
          "1368: }",
          "1370: std::string CEventSystem::UpdateSingleState(const uint64_t ulDevID, const std::string &devname, const int nValue, const char* sValue, const unsigned char devType, const unsigned char subType, const _eSwitchType switchType, const std::string &lastUpdate, const unsigned char lastLevel, const std::map<std::string, std::string> & options)",
          "",
          "[Removed Lines]",
          "1345:  if (itt != m_uservariables.end())",
          "1346:  {",
          "1347:   _tUserVariable replaceitem = itt->second;",
          "1348:   if (!varName.empty())",
          "1349:    replaceitem.variableName = varName;",
          "1350:   if (!varValue.empty())",
          "1351:    replaceitem.variableValue = varValue;",
          "1352:   if (varType != -1)",
          "1353:    replaceitem.variableType = varType;",
          "1355:   if (GetEventTrigger(ulDevID, REASON_USERVARIABLE, false))",
          "1356:   {",
          "1357:    _tEventQueue item;",
          "1358:    item.reason = REASON_USERVARIABLE;",
          "1359:    item.id = ulDevID;",
          "1360:    item.sValue = varValue;",
          "1361:    item.lastUpdate = itt->second.lastUpdate;",
          "1362:    m_eventqueue.push(item);",
          "1363:   }",
          "1364:   replaceitem.lastUpdate = lastUpdate;",
          "1365:   itt->second = replaceitem;",
          "",
          "[Added Lines]",
          "1345:  if (itt == m_uservariables.end())",
          "1346:   return; //not found",
          "1348:  _tUserVariable replaceitem = itt->second;",
          "1350:  if (!varName.empty())",
          "1351:   replaceitem.variableName = varName;",
          "1352:  if (!varValue.empty())",
          "1353:   replaceitem.variableValue = varValue;",
          "1354:  if (varType != -1)",
          "1355:   replaceitem.variableType = varType;",
          "1357:  if (GetEventTrigger(ulDevID, REASON_USERVARIABLE, false))",
          "1358:  {",
          "1359:   _tEventQueue item;",
          "1360:   item.reason = REASON_USERVARIABLE;",
          "1361:   item.id = ulDevID;",
          "1362:   item.sValue = varValue;",
          "1363:   item.lastUpdate = itt->second.lastUpdate;",
          "1364:   m_eventqueue.push(item);",
          "1366:  replaceitem.lastUpdate = lastUpdate;",
          "1367:  itt->second = replaceitem;",
          "",
          "---------------"
        ],
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7897:  {",
          "7898:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7899:  }",
          "7901:  return \"OK\";",
          "7903: }",
          "7906: {",
          "7907:  int typei = atoi(vartype.c_str());",
          "7908:  std::string dupeName = CheckUserVariableName(varname);",
          "",
          "[Removed Lines]",
          "7905: std::string CSQLHelper::SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue)",
          "",
          "[Added Lines]",
          "7903: std::string CSQLHelper::AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7916:  std::string szVarValue = CURLEncode::URLDecode(varvalue.c_str());",
          "7917:  std::vector<std::vector<std::string> > result;",
          "7924:  if (m_bEnableEventSystem)",
          "7925:  {",
          "7926:   m_mainworker.m_eventsystem.GetCurrentUserVariables();",
          "7930:   if (!result.empty())",
          "7931:   {",
          "7932:    std::vector<std::string> sd = result[0];",
          "",
          "[Removed Lines]",
          "7918:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\",",
          "7919:   varname.c_str(),",
          "7920:   typei,",
          "7921:   szVarValue.c_str()",
          "7922:  );",
          "7927:   result = safe_query(\"SELECT ID, LastUpdate FROM UserVariables WHERE (Name == '%q')\",",
          "7928:    varname.c_str()",
          "7929:   );",
          "",
          "[Added Lines]",
          "7916:  safe_query(\"INSERT INTO UserVariables (Name,ValueType,Value) VALUES ('%q','%d','%q')\", varname.c_str(), typei, szVarValue.c_str());",
          "7921:   result = safe_query(\"SELECT ID, LastUpdate FROM UserVariables WHERE (Name == '%q')\", varname.c_str());",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:  void safe_exec_no_return(const char *fmt, ...);",
          "378:  bool safe_UpdateBlobInTableWithID(const std::string &Table, const std::string &Column, const std::string &sID, const std::string &BlobData);",
          "379:  bool DoesColumnExistsInTable(const std::string &columnname, const std::string &tablename);",
          "382:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger);",
          "383:  std::vector<std::vector<std::string> > GetUserVariables();",
          "385:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "380:  std::string DeleteUserVariable(const std::string &idx);",
          "381:  std::string SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "",
          "[Added Lines]",
          "380:  std::string AddUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "382:  std::string DeleteUserVariable(const std::string &idx);",
          "383:  std::string CheckUserVariable(const int vartype, const std::string &varvalue);",
          "384:  std::string CheckUserVariableName(const std::string &varname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:  void AddCalendarUpdatePercentage();",
          "485:  void AddCalendarUpdateFan();",
          "486:  void CleanupShortLog();",
          "489:  bool CheckDate(const std::string &sDate, int &d, int &m, int &y);",
          "490:  bool CheckDateSQL(const std::string &sDate);",
          "491:  bool CheckDateTimeSQL(const std::string &sDateTime);",
          "",
          "[Removed Lines]",
          "487:  std::string CheckUserVariable(const int vartype, const std::string &varvalue);",
          "488:  std::string CheckUserVariableName(const std::string &varname);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:     )",
          "1906:     return;",
          "1910:   }",
          "1912:   void CWebServer::Cmd_UpdateUserVariable(WebEmSession & session, const request& req, Json::Value &root)",
          "",
          "[Removed Lines]",
          "1908:    root[\"status\"] = m_sql.SaveUserVariable(variablename, variabletype, variablevalue);",
          "1909:    root[\"title\"] = \"SaveUserVariable\";",
          "",
          "[Added Lines]",
          "1908:    root[\"status\"] = m_sql.AddUserVariable(variablename, variabletype, variablevalue);",
          "1909:    root[\"title\"] = \"AddUserVariable\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
      "candidate_info": {
        "commit_hash": "696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/696904b8c9ae85b7ac6ec2a3cff51c2f99a3f4f3",
        "files": [
          "www/app/log/DeviceLog.js"
        ],
        "message": "Fix for Wind temperature log",
        "before_after_code_files": [
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             if (!vm.device) {",
          "49:                 return undefined;",
          "50:             }",
          "53:         }",
          "55:         function isGraphLog() {",
          "",
          "[Removed Lines]",
          "52:             return (/Temp|Thermostat|Humidity|Radiator/i).test(vm.device.Type)",
          "",
          "[Added Lines]",
          "54:             return (/Temp|Thermostat|Humidity|Radiator|Wind/i).test(vm.device.Type)",
          "",
          "---------------"
        ]
      }
    }
  ]
}