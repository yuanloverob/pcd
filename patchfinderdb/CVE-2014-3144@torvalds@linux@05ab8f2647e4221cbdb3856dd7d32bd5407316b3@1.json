{
  "cve_id": "CVE-2014-3144",
  "cve_desc": "The (1) BPF_S_ANC_NLATTR and (2) BPF_S_ANC_NLATTR_NEST extension implementations in the sk_run_filter function in net/core/filter.c in the Linux kernel through 3.14.3 do not check whether a certain length value is sufficiently large, which allows local users to cause a denial of service (integer underflow and system crash) via crafted BPF instructions.  NOTE: the affected code was moved to the __skb_get_nlattr and __skb_get_nlattr_nest functions before the vulnerability was announced.",
  "repo": "torvalds/linux",
  "patch_hash": "05ab8f2647e4221cbdb3856dd7d32bd5407316b3",
  "patch_info": {
    "commit_hash": "05ab8f2647e4221cbdb3856dd7d32bd5407316b3",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/05ab8f2647e4221cbdb3856dd7d32bd5407316b3",
    "files": [
      "net/core/filter.c"
    ],
    "message": "filter: prevent nla extensions to peek beyond the end of the message\n\nThe BPF_S_ANC_NLATTR and BPF_S_ANC_NLATTR_NEST extensions fail to check\nfor a minimal message length before testing the supplied offset to be\nwithin the bounds of the message. This allows the subtraction of the nla\nheader to underflow and therefore -- as the data type is unsigned --\nallowing far to big offset and length values for the search of the\nnetlink attribute.\n\nThe remainder calculation for the BPF_S_ANC_NLATTR_NEST extension is\nalso wrong. It has the minuend and subtrahend mixed up, therefore\ncalculates a huge length value, allowing to overrun the end of the\nmessage while looking for the netlink attribute.\n\nThe following three BPF snippets will trigger the bugs when attached to\na UNIX datagram socket and parsing a message with length 1, 2 or 3.\n\n ,-[ PoC for missing size check in BPF_S_ANC_NLATTR ]--\n | ld\t#0x87654321\n | ldx\t#42\n | ld\t#nla\n | ret\ta\n `---\n\n ,-[ PoC for the same bug in BPF_S_ANC_NLATTR_NEST ]--\n | ld\t#0x87654321\n | ldx\t#42\n | ld\t#nlan\n | ret\ta\n `---\n\n ,-[ PoC for wrong remainder calculation in BPF_S_ANC_NLATTR_NEST ]--\n | ; (needs a fake netlink header at offset 0)\n | ld\t#0\n | ldx\t#42\n | ld\t#nlan\n | ret\ta\n `---\n\nFix the first issue by ensuring the message length fulfills the minimal\nsize constrains of a nla header. Fix the second bug by getting the math\nfor the remainder calculation right.\n\nFixes: 4738c1db15 (\"[SKFILTER]: Add SKF_ADF_NLATTR instruction\")\nFixes: d214c7537b (\"filter: add SKF_AD_NLATTR_NEST to look for nested..\")\nCc: Patrick McHardy <kaber@trash.net>\nCc: Pablo Neira Ayuso <pablo@netfilter.org>\nSigned-off-by: Mathias Krause <minipli@googlemail.com>\nAcked-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/core/filter.c||net/core/filter.c"
    ]
  },
  "patch_diff": {
    "net/core/filter.c||net/core/filter.c": [
      "File: net/core/filter.c -> net/core/filter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "600:  if (skb_is_nonlinear(skb))",
      "601:   return 0;",
      "603:  if (A > skb->len - sizeof(struct nlattr))",
      "604:   return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:  if (skb->len < sizeof(struct nlattr))",
      "604:   return 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "618:  if (skb_is_nonlinear(skb))",
      "619:   return 0;",
      "621:  if (A > skb->len - sizeof(struct nlattr))",
      "622:   return 0;",
      "624:  nla = (struct nlattr *) &skb->data[A];",
      "626:   return 0;",
      "628:  nla = nla_find_nested(nla, X);",
      "",
      "[Removed Lines]",
      "625:  if (nla->nla_len > A - skb->len)",
      "",
      "[Added Lines]",
      "624:  if (skb->len < sizeof(struct nlattr))",
      "625:   return 0;",
      "631:  if (nla->nla_len > skb->len - A)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "30743837dd204d2b04fd4e9d3db78cc7b118c81a",
      "candidate_info": {
        "commit_hash": "30743837dd204d2b04fd4e9d3db78cc7b118c81a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/30743837dd204d2b04fd4e9d3db78cc7b118c81a",
        "files": [
          "include/linux/filter.h",
          "net/core/filter.c"
        ],
        "message": "net: filter: make register naming more comprehensible\n\nThe current code is a bit hard to parse on which registers can be used,\nhow they are mapped and all play together. It makes much more sense to\ndefine this a bit more clearly so that the code is a bit more intuitive.\nThis patch cleans this up, and makes naming a bit more consistent among\nthe code. This also allows for moving some of the defines into the header\nfile. Clearing of A and X registers in __sk_run_filter() do not get a\nparticular register name assigned as they have not an 'official' function,\nbut rather just result from the concrete initial mapping of old BPF\nprograms. Since for BPF helper functions for BPF_CALL we already use\nsmall letters, so be consistent here as well. No functional changes.\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/filter.h||include/linux/filter.h",
          "net/core/filter.c||net/core/filter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/filter.c||net/core/filter.c"
          ],
          "candidate": [
            "net/core/filter.c||net/core/filter.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/filter.h||include/linux/filter.h": [
          "File: include/linux/filter.h -> include/linux/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define BPF_0  0",
          "47: #define MAX_BPF_STACK 512",
          "54: struct sock_filter_int {",
          "",
          "[Removed Lines]",
          "44: #define MAX_BPF_REG 11",
          "50: #define ARG1_REG 1",
          "51: #define CTX_REG  6",
          "52: #define FP_REG  10",
          "",
          "[Added Lines]",
          "44: enum {",
          "45:  BPF_REG_0 = 0,",
          "46:  BPF_REG_1,",
          "47:  BPF_REG_2,",
          "48:  BPF_REG_3,",
          "49:  BPF_REG_4,",
          "50:  BPF_REG_5,",
          "51:  BPF_REG_6,",
          "52:  BPF_REG_7,",
          "53:  BPF_REG_8,",
          "54:  BPF_REG_9,",
          "55:  BPF_REG_10,",
          "56:  __MAX_BPF_REG,",
          "57: };",
          "60: #define MAX_BPF_REG __MAX_BPF_REG",
          "66: #define BPF_REG_ARG1 BPF_REG_1",
          "67: #define BPF_REG_ARG2 BPF_REG_2",
          "68: #define BPF_REG_ARG3 BPF_REG_3",
          "69: #define BPF_REG_ARG4 BPF_REG_4",
          "70: #define BPF_REG_ARG5 BPF_REG_5",
          "71: #define BPF_REG_CTX BPF_REG_6",
          "72: #define BPF_REG_FP BPF_REG_10",
          "75: #define BPF_REG_A BPF_REG_0",
          "76: #define BPF_REG_X BPF_REG_7",
          "77: #define BPF_REG_TMP BPF_REG_8",
          "83: #define SK_RUN_FILTER(filter, ctx)  (*filter->bpf_func)(ctx, filter->insnsi)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: #define sk_filter_proglen(fprog)   \\",
          "101:   (fprog->len * sizeof(fprog->filter[0]))",
          "106: int sk_filter(struct sock *sk, struct sk_buff *skb);",
          "108: u32 sk_run_filter_int_seccomp(const struct seccomp_data *ctx,",
          "",
          "[Removed Lines]",
          "103: #define SK_RUN_FILTER(filter, ctx)   \\",
          "104:   (*filter->bpf_func)(ctx, filter->insnsi)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/core/filter.c||net/core/filter.c": [
          "File: net/core/filter.c -> net/core/filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include <linux/seccomp.h>",
          "46: #include <linux/if_vlan.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #define R0 regs[BPF_REG_0]",
          "50: #define R1 regs[BPF_REG_1]",
          "51: #define R2 regs[BPF_REG_2]",
          "52: #define R3 regs[BPF_REG_3]",
          "53: #define R4 regs[BPF_REG_4]",
          "54: #define R5 regs[BPF_REG_5]",
          "55: #define R6 regs[BPF_REG_6]",
          "56: #define R7 regs[BPF_REG_7]",
          "57: #define R8 regs[BPF_REG_8]",
          "58: #define R9 regs[BPF_REG_9]",
          "59: #define R10 regs[BPF_REG_10]",
          "62: #define A regs[insn->a_reg]",
          "63: #define X regs[insn->x_reg]",
          "64: #define FP regs[BPF_REG_FP]",
          "65: #define ARG1 regs[BPF_REG_ARG1]",
          "66: #define CTX regs[BPF_REG_CTX]",
          "67: #define K insn->imm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:  return 0;",
          "123: }",
          "",
          "[Removed Lines]",
          "126: #define A_REG  0",
          "127: #define X_REG  7",
          "128: #define TMP_REG  8",
          "129: #define ARG2_REG 2",
          "130: #define ARG3_REG 3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: {",
          "143:  u64 stack[MAX_BPF_STACK / sizeof(u64)];",
          "144:  u64 regs[MAX_BPF_REG], tmp;",
          "156:  static const void *jumptable[256] = {",
          "157:   [0 ... 255] = &&default_label,",
          "",
          "[Removed Lines]",
          "145:  void *ptr;",
          "146:  int off;",
          "148: #define K  insn->imm",
          "149: #define A  regs[insn->a_reg]",
          "150: #define X  regs[insn->x_reg]",
          "151: #define R0 regs[0]",
          "153: #define CONT  ({insn++; goto select_insn; })",
          "154: #define CONT_JMP ({insn++; goto select_insn; })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:   DL(LD, IND, B),",
          "247: #undef DL",
          "248:  };",
          "255: select_insn:",
          "256:  goto *jumptable[insn->code];",
          "",
          "[Removed Lines]",
          "250:  regs[FP_REG]  = (u64) (unsigned long) &stack[ARRAY_SIZE(stack)];",
          "251:  regs[ARG1_REG] = (u64) (unsigned long) ctx;",
          "252:  regs[A_REG] = 0;",
          "253:  regs[X_REG] = 0;",
          "",
          "[Added Lines]",
          "252:  void *ptr;",
          "253:  int off;",
          "255: #define CONT  ({ insn++; goto select_insn; })",
          "256: #define CONT_JMP ({ insn++; goto select_insn; })",
          "258:  FP = (u64) (unsigned long) &stack[ARRAY_SIZE(stack)];",
          "259:  ARG1 = (u64) (unsigned long) ctx;",
          "262:  regs[BPF_REG_A] = 0;",
          "263:  regs[BPF_REG_X] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:   CONT;",
          "",
          "[Removed Lines]",
          "378:   R0 = (__bpf_call_base + insn->imm)(regs[1], regs[2], regs[3],",
          "379:          regs[4], regs[5]);",
          "",
          "[Added Lines]",
          "388:   R0 = (__bpf_call_base + insn->imm)(R1, R2, R3, R4, R5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "557:   WARN_RATELIMIT(1, \"unknown opcode %02x\\n\", insn->code);",
          "558:   return 0;",
          "566: }",
          "568: u32 sk_run_filter_int_seccomp(const struct seccomp_data *ctx,",
          "",
          "[Removed Lines]",
          "559: #undef CONT_JMP",
          "560: #undef CONT",
          "562: #undef R0",
          "563: #undef X",
          "564: #undef A",
          "565: #undef K",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "594:  return -1;",
          "595: }",
          "598: {",
          "599:  struct sk_buff *skb = (struct sk_buff *)(long) ctx;",
          "601:  return __skb_get_poff(skb);",
          "602: }",
          "605: {",
          "606:  struct sk_buff *skb = (struct sk_buff *)(long) ctx;",
          "607:  struct nlattr *nla;",
          "",
          "[Removed Lines]",
          "597: static u64 __skb_get_pay_offset(u64 ctx, u64 A, u64 X, u64 r4, u64 r5)",
          "604: static u64 __skb_get_nlattr(u64 ctx, u64 A, u64 X, u64 r4, u64 r5)",
          "",
          "[Added Lines]",
          "599: static u64 __skb_get_pay_offset(u64 ctx, u64 a, u64 x, u64 r4, u64 r5)",
          "606: static u64 __skb_get_nlattr(u64 ctx, u64 a, u64 x, u64 r4, u64 r5)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "612:  if (skb->len < sizeof(struct nlattr))",
          "613:   return 0;",
          "616:   return 0;",
          "619:  if (nla)",
          "620:   return (void *) nla - (void *) skb->data;",
          "622:  return 0;",
          "623: }",
          "626: {",
          "627:  struct sk_buff *skb = (struct sk_buff *)(long) ctx;",
          "628:  struct nlattr *nla;",
          "",
          "[Removed Lines]",
          "615:  if (A > skb->len - sizeof(struct nlattr))",
          "618:  nla = nla_find((struct nlattr *) &skb->data[A], skb->len - A, X);",
          "625: static u64 __skb_get_nlattr_nest(u64 ctx, u64 A, u64 X, u64 r4, u64 r5)",
          "",
          "[Added Lines]",
          "617:  if (a > skb->len - sizeof(struct nlattr))",
          "620:  nla = nla_find((struct nlattr *) &skb->data[a], skb->len - a, x);",
          "627: static u64 __skb_get_nlattr_nest(u64 ctx, u64 a, u64 x, u64 r4, u64 r5)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "633:  if (skb->len < sizeof(struct nlattr))",
          "634:   return 0;",
          "637:   return 0;",
          "641:   return 0;",
          "644:  if (nla)",
          "645:   return (void *) nla - (void *) skb->data;",
          "647:  return 0;",
          "648: }",
          "651: {",
          "652:  return raw_smp_processor_id();",
          "653: }",
          "657: {",
          "658:  return (u64)prandom_u32();",
          "659: }",
          "",
          "[Removed Lines]",
          "636:  if (A > skb->len - sizeof(struct nlattr))",
          "639:  nla = (struct nlattr *) &skb->data[A];",
          "640:  if (nla->nla_len > skb->len - A)",
          "643:  nla = nla_find_nested(nla, X);",
          "650: static u64 __get_raw_cpu_id(u64 ctx, u64 A, u64 X, u64 r4, u64 r5)",
          "656: static u64 __get_random_u32(u64 ctx, u64 A, u64 X, u64 r4, u64 r5)",
          "",
          "[Added Lines]",
          "638:  if (a > skb->len - sizeof(struct nlattr))",
          "641:  nla = (struct nlattr *) &skb->data[a];",
          "642:  if (nla->nla_len > skb->len - a)",
          "645:  nla = nla_find_nested(nla, x);",
          "652: static u64 __get_raw_cpu_id(u64 ctx, u64 a, u64 x, u64 r4, u64 r5)",
          "658: static u64 __get_random_u32(u64 ctx, u64 a, u64 x, u64 r4, u64 r5)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "668:   BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, protocol) != 2);",
          "670:   insn->code = BPF_LDX | BPF_MEM | BPF_H;",
          "673:   insn->off = offsetof(struct sk_buff, protocol);",
          "674:   insn++;",
          "677:   insn->code = BPF_ALU | BPF_END | BPF_FROM_BE;",
          "679:   insn->imm = 16;",
          "680:   break;",
          "682:  case SKF_AD_OFF + SKF_AD_PKTTYPE:",
          "683:   insn->code = BPF_LDX | BPF_MEM | BPF_B;",
          "686:   insn->off = pkt_type_offset();",
          "687:   if (insn->off < 0)",
          "688:    return false;",
          "689:   insn++;",
          "691:   insn->code = BPF_ALU | BPF_AND | BPF_K;",
          "693:   insn->imm = PKT_TYPE_MAX;",
          "694:   break;",
          "",
          "[Removed Lines]",
          "671:   insn->a_reg = A_REG;",
          "672:   insn->x_reg = CTX_REG;",
          "678:   insn->a_reg = A_REG;",
          "684:   insn->a_reg = A_REG;",
          "685:   insn->x_reg = CTX_REG;",
          "692:   insn->a_reg = A_REG;",
          "",
          "[Added Lines]",
          "673:   insn->a_reg = BPF_REG_A;",
          "674:   insn->x_reg = BPF_REG_CTX;",
          "680:   insn->a_reg = BPF_REG_A;",
          "686:   insn->a_reg = BPF_REG_A;",
          "687:   insn->x_reg = BPF_REG_CTX;",
          "694:   insn->a_reg = BPF_REG_A;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "699:    insn->code = BPF_LDX | BPF_MEM | BPF_DW;",
          "700:   else",
          "701:    insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "704:   insn->off = offsetof(struct sk_buff, dev);",
          "705:   insn++;",
          "707:   insn->code = BPF_JMP | BPF_JNE | BPF_K;",
          "709:   insn->imm = 0;",
          "710:   insn->off = 1;",
          "711:   insn++;",
          "",
          "[Removed Lines]",
          "702:   insn->a_reg = TMP_REG;",
          "703:   insn->x_reg = CTX_REG;",
          "708:   insn->a_reg = TMP_REG;",
          "",
          "[Added Lines]",
          "704:   insn->a_reg = BPF_REG_TMP;",
          "705:   insn->x_reg = BPF_REG_CTX;",
          "710:   insn->a_reg = BPF_REG_TMP;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "716:   BUILD_BUG_ON(FIELD_SIZEOF(struct net_device, ifindex) != 4);",
          "717:   BUILD_BUG_ON(FIELD_SIZEOF(struct net_device, type) != 2);",
          "722:   if (fp->k == SKF_AD_OFF + SKF_AD_IFINDEX) {",
          "723:    insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "",
          "[Removed Lines]",
          "719:   insn->a_reg = A_REG;",
          "720:   insn->x_reg = TMP_REG;",
          "",
          "[Added Lines]",
          "721:   insn->a_reg = BPF_REG_A;",
          "722:   insn->x_reg = BPF_REG_TMP;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "732:   BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, mark) != 4);",
          "734:   insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "737:   insn->off = offsetof(struct sk_buff, mark);",
          "738:   break;",
          "",
          "[Removed Lines]",
          "735:   insn->a_reg = A_REG;",
          "736:   insn->x_reg = CTX_REG;",
          "",
          "[Added Lines]",
          "737:   insn->a_reg = BPF_REG_A;",
          "738:   insn->x_reg = BPF_REG_CTX;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "741:   BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, hash) != 4);",
          "743:   insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "746:   insn->off = offsetof(struct sk_buff, hash);",
          "747:   break;",
          "",
          "[Removed Lines]",
          "744:   insn->a_reg = A_REG;",
          "745:   insn->x_reg = CTX_REG;",
          "",
          "[Added Lines]",
          "746:   insn->a_reg = BPF_REG_A;",
          "747:   insn->x_reg = BPF_REG_CTX;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "750:   BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, queue_mapping) != 2);",
          "752:   insn->code = BPF_LDX | BPF_MEM | BPF_H;",
          "755:   insn->off = offsetof(struct sk_buff, queue_mapping);",
          "756:   break;",
          "",
          "[Removed Lines]",
          "753:   insn->a_reg = A_REG;",
          "754:   insn->x_reg = CTX_REG;",
          "",
          "[Added Lines]",
          "755:   insn->a_reg = BPF_REG_A;",
          "756:   insn->x_reg = BPF_REG_CTX;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "760:   BUILD_BUG_ON(FIELD_SIZEOF(struct sk_buff, vlan_tci) != 2);",
          "762:   insn->code = BPF_LDX | BPF_MEM | BPF_H;",
          "765:   insn->off = offsetof(struct sk_buff, vlan_tci);",
          "766:   insn++;",
          "",
          "[Removed Lines]",
          "763:   insn->a_reg = A_REG;",
          "764:   insn->x_reg = CTX_REG;",
          "",
          "[Added Lines]",
          "765:   insn->a_reg = BPF_REG_A;",
          "766:   insn->x_reg = BPF_REG_CTX;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "770:   if (fp->k == SKF_AD_OFF + SKF_AD_VLAN_TAG) {",
          "771:    insn->code = BPF_ALU | BPF_AND | BPF_K;",
          "773:    insn->imm = ~VLAN_TAG_PRESENT;",
          "774:   } else {",
          "775:    insn->code = BPF_ALU | BPF_RSH | BPF_K;",
          "777:    insn->imm = 12;",
          "778:    insn++;",
          "780:    insn->code = BPF_ALU | BPF_AND | BPF_K;",
          "782:    insn->imm = 1;",
          "783:   }",
          "784:   break;",
          "",
          "[Removed Lines]",
          "772:    insn->a_reg = A_REG;",
          "776:    insn->a_reg = A_REG;",
          "781:    insn->a_reg = A_REG;",
          "",
          "[Added Lines]",
          "774:    insn->a_reg = BPF_REG_A;",
          "778:    insn->a_reg = BPF_REG_A;",
          "783:    insn->a_reg = BPF_REG_A;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "790:  case SKF_AD_OFF + SKF_AD_RANDOM:",
          "792:   insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "795:   insn++;",
          "798:   insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "801:   insn++;",
          "804:   insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "807:   insn++;",
          "",
          "[Removed Lines]",
          "793:   insn->a_reg = ARG1_REG;",
          "794:   insn->x_reg = CTX_REG;",
          "799:   insn->a_reg = ARG2_REG;",
          "800:   insn->x_reg = A_REG;",
          "805:   insn->a_reg = ARG3_REG;",
          "806:   insn->x_reg = X_REG;",
          "",
          "[Added Lines]",
          "795:   insn->a_reg = BPF_REG_ARG1;",
          "796:   insn->x_reg = BPF_REG_CTX;",
          "801:   insn->a_reg = BPF_REG_ARG2;",
          "802:   insn->x_reg = BPF_REG_A;",
          "807:   insn->a_reg = BPF_REG_ARG3;",
          "808:   insn->x_reg = BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "830:  case SKF_AD_OFF + SKF_AD_ALU_XOR_X:",
          "831:   insn->code = BPF_ALU | BPF_XOR | BPF_X;",
          "834:   break;",
          "836:  default:",
          "",
          "[Removed Lines]",
          "832:   insn->a_reg = A_REG;",
          "833:   insn->x_reg = X_REG;",
          "",
          "[Added Lines]",
          "834:   insn->a_reg = BPF_REG_A;",
          "835:   insn->x_reg = BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "880:  u8 bpf_src;",
          "882:  BUILD_BUG_ON(BPF_MEMWORDS * sizeof(u32) > MAX_BPF_STACK);",
          "885:  if (len <= 0 || len >= BPF_MAXINSNS)",
          "886:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "883:  BUILD_BUG_ON(FP_REG + 1 != MAX_BPF_REG);",
          "",
          "[Added Lines]",
          "885:  BUILD_BUG_ON(BPF_REG_FP + 1 != MAX_BPF_REG);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "898:  if (new_insn) {",
          "899:   new_insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "902:  }",
          "903:  new_insn++;",
          "",
          "[Removed Lines]",
          "900:   new_insn->a_reg = CTX_REG;",
          "901:   new_insn->x_reg = ARG1_REG;",
          "",
          "[Added Lines]",
          "902:   new_insn->a_reg = BPF_REG_CTX;",
          "903:   new_insn->x_reg = BPF_REG_ARG1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "948:     break;",
          "950:    insn->code = fp->code;",
          "953:    insn->imm = fp->k;",
          "954:    break;",
          "",
          "[Removed Lines]",
          "951:    insn->a_reg = A_REG;",
          "952:    insn->x_reg = X_REG;",
          "",
          "[Added Lines]",
          "953:    insn->a_reg = BPF_REG_A;",
          "954:    insn->x_reg = BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "985:     insn->code = BPF_ALU | BPF_MOV | BPF_K;",
          "987:     insn->imm = fp->k;",
          "988:     insn++;",
          "992:     bpf_src = BPF_X;",
          "993:    } else {",
          "996:     insn->imm = fp->k;",
          "997:     bpf_src = BPF_SRC(fp->code);",
          "998:    }",
          "",
          "[Removed Lines]",
          "986:     insn->a_reg = TMP_REG;",
          "990:     insn->a_reg = A_REG;",
          "991:     insn->x_reg = TMP_REG;",
          "994:     insn->a_reg = A_REG;",
          "995:     insn->x_reg = X_REG;",
          "",
          "[Added Lines]",
          "988:     insn->a_reg = BPF_REG_TMP;",
          "992:     insn->a_reg = BPF_REG_A;",
          "993:     insn->x_reg = BPF_REG_TMP;",
          "996:     insn->a_reg = BPF_REG_A;",
          "997:     insn->x_reg = BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1028:   case BPF_LDX | BPF_MSH | BPF_B:",
          "1029:    insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "1032:    insn++;",
          "1034:    insn->code = BPF_LD | BPF_ABS | BPF_B;",
          "1036:    insn->imm = fp->k;",
          "1037:    insn++;",
          "1039:    insn->code = BPF_ALU | BPF_AND | BPF_K;",
          "1041:    insn->imm = 0xf;",
          "1042:    insn++;",
          "1044:    insn->code = BPF_ALU | BPF_LSH | BPF_K;",
          "1046:    insn->imm = 2;",
          "1047:    insn++;",
          "1049:    insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "1052:    insn++;",
          "1054:    insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "1057:    break;",
          "",
          "[Removed Lines]",
          "1030:    insn->a_reg = TMP_REG;",
          "1031:    insn->x_reg = A_REG;",
          "1035:    insn->a_reg = A_REG;",
          "1040:    insn->a_reg = A_REG;",
          "1045:    insn->a_reg = A_REG;",
          "1050:    insn->a_reg = X_REG;",
          "1051:    insn->x_reg = A_REG;",
          "1055:    insn->a_reg = A_REG;",
          "1056:    insn->x_reg = TMP_REG;",
          "",
          "[Added Lines]",
          "1032:    insn->a_reg = BPF_REG_TMP;",
          "1033:    insn->x_reg = BPF_REG_A;",
          "1037:    insn->a_reg = BPF_REG_A;",
          "1042:    insn->a_reg = BPF_REG_A;",
          "1047:    insn->a_reg = BPF_REG_A;",
          "1052:    insn->a_reg = BPF_REG_X;",
          "1053:    insn->x_reg = BPF_REG_A;",
          "1057:    insn->a_reg = BPF_REG_A;",
          "1058:    insn->x_reg = BPF_REG_TMP;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1063:          (BPF_RVAL(fp->code) == BPF_K ?",
          "1064:           BPF_K : BPF_X);",
          "1065:    insn->a_reg = 0;",
          "1067:    insn->imm = fp->k;",
          "1068:    insn++;",
          "",
          "[Removed Lines]",
          "1066:    insn->x_reg = A_REG;",
          "",
          "[Added Lines]",
          "1068:    insn->x_reg = BPF_REG_A;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1074:   case BPF_ST:",
          "1075:   case BPF_STX:",
          "1076:    insn->code = BPF_STX | BPF_MEM | BPF_W;",
          "1079:    insn->off = -(BPF_MEMWORDS - fp->k) * 4;",
          "1080:    break;",
          "",
          "[Removed Lines]",
          "1077:    insn->a_reg = FP_REG;",
          "1078:    insn->x_reg = fp->code == BPF_ST ? A_REG : X_REG;",
          "",
          "[Added Lines]",
          "1079:    insn->a_reg = BPF_REG_FP;",
          "1080:    insn->x_reg = fp->code == BPF_ST ?",
          "1081:           BPF_REG_A : BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1084:   case BPF_LDX | BPF_MEM:",
          "1085:    insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "1086:    insn->a_reg = BPF_CLASS(fp->code) == BPF_LD ?",
          "1089:    insn->off = -(BPF_MEMWORDS - fp->k) * 4;",
          "1090:    break;",
          "",
          "[Removed Lines]",
          "1087:           A_REG : X_REG;",
          "1088:    insn->x_reg = FP_REG;",
          "",
          "[Added Lines]",
          "1090:           BPF_REG_A : BPF_REG_X;",
          "1091:    insn->x_reg = BPF_REG_FP;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1094:   case BPF_LDX | BPF_IMM:",
          "1095:    insn->code = BPF_ALU | BPF_MOV | BPF_K;",
          "1096:    insn->a_reg = BPF_CLASS(fp->code) == BPF_LD ?",
          "1098:    insn->imm = fp->k;",
          "1099:    break;",
          "1102:   case BPF_MISC | BPF_TAX:",
          "1103:    insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "1106:    break;",
          "1109:   case BPF_MISC | BPF_TXA:",
          "1110:    insn->code = BPF_ALU64 | BPF_MOV | BPF_X;",
          "1113:    break;",
          "",
          "[Removed Lines]",
          "1097:           A_REG : X_REG;",
          "1104:    insn->a_reg = X_REG;",
          "1105:    insn->x_reg = A_REG;",
          "1111:    insn->a_reg = A_REG;",
          "1112:    insn->x_reg = X_REG;",
          "",
          "[Added Lines]",
          "1100:           BPF_REG_A : BPF_REG_X;",
          "1107:    insn->a_reg = BPF_REG_X;",
          "1108:    insn->x_reg = BPF_REG_A;",
          "1114:    insn->a_reg = BPF_REG_A;",
          "1115:    insn->x_reg = BPF_REG_X;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1117:   case BPF_LDX | BPF_W | BPF_LEN:",
          "1118:    insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "1119:    insn->a_reg = BPF_CLASS(fp->code) == BPF_LD ?",
          "1122:    insn->off = offsetof(struct sk_buff, len);",
          "1123:    break;",
          "1126:   case BPF_LDX | BPF_ABS | BPF_W:",
          "1127:    insn->code = BPF_LDX | BPF_MEM | BPF_W;",
          "1130:    insn->off = fp->k;",
          "1131:    break;",
          "",
          "[Removed Lines]",
          "1120:           A_REG : X_REG;",
          "1121:    insn->x_reg = CTX_REG;",
          "1128:    insn->a_reg = A_REG;",
          "1129:    insn->x_reg = CTX_REG;",
          "",
          "[Added Lines]",
          "1123:           BPF_REG_A : BPF_REG_X;",
          "1124:    insn->x_reg = BPF_REG_CTX;",
          "1131:    insn->a_reg = BPF_REG_A;",
          "1132:    insn->x_reg = BPF_REG_CTX;",
          "",
          "---------------"
        ]
      }
    }
  ]
}