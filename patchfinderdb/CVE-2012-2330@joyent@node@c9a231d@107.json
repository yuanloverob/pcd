{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b114162ab451b04604cc3fa2c88c1592e432b94",
      "candidate_info": {
        "commit_hash": "1b114162ab451b04604cc3fa2c88c1592e432b94",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1b114162ab451b04604cc3fa2c88c1592e432b94",
        "files": [
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c"
        ],
        "message": "uv: upgrade to 0387c23",
        "before_after_code_files": [
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     case ERROR_NOT_SUPPORTED:               return UV_ENOTSUP;",
          "133:     case ERROR_INSUFFICIENT_BUFFER:         return UV_EINVAL;",
          "134:     case ERROR_INVALID_FLAGS:               return UV_EBADF;",
          "135:     case ERROR_INVALID_PARAMETER:           return UV_EINVAL;",
          "136:     case ERROR_NO_UNICODE_TRANSLATION:      return UV_ECHARSET;",
          "137:     case ERROR_BROKEN_PIPE:                 return UV_EOF;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     case ERROR_INVALID_HANDLE:              return UV_EBADF;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   if (file == -1) {                                                         \\",
          "88:     req->result = -1;                                                       \\",
          "89:     req->errorno = UV_EBADF;                                                \\",
          "91:     return;                                                                 \\",
          "92:   }",
          "94: #define FILETIME_TO_TIME_T(filetime)                                        \\",
          "95:    ((*((uint64_t*) &(filetime)) - 116444736000000000ULL) / 10000000ULL);",
          "97: #define IS_SLASH(c) ((c) == L'\\\\' || (c) == L'/')",
          "98: #define IS_LETTER(c) (((c) >= L'a' && (c) <= L'z') || \\",
          "99:   ((c) >= L'A' && (c) <= L'Z'))",
          "",
          "[Removed Lines]",
          "90:     req->sys_errno_ = ERROR_SUCCESS;                                        \\",
          "",
          "[Added Lines]",
          "90:     req->sys_errno_ = ERROR_INVALID_HANDLE;                                 \\",
          "97: #define TIME_T_TO_FILETIME(time, filetime_ptr)                              \\",
          "98:   do {                                                                      \\",
          "100:                                   116444736000000000ULL;                    \\",
          "101:   } while(0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575: }",
          "580:   int target_length;",
          "582:   BY_HANDLE_FILE_INFORMATION info;",
          "583:   DWORD flags;",
          "585:   req->ptr = NULL;",
          "586:   flags = FILE_FLAG_BACKUP_SEMANTICS;",
          "589:     flags |= FILE_FLAG_OPEN_REPARSE_POINT;",
          "590:   }",
          "",
          "[Removed Lines]",
          "578: static void fs__stat(uv_fs_t* req, const wchar_t* path, int link) {",
          "579:   HANDLE handle;",
          "581:   int symlink = 0;",
          "588:   if (link) {",
          "",
          "[Added Lines]",
          "585: INLINE static int fs__stat_handle(HANDLE handle, uv_statbuf_t* statbuf) {",
          "589:   if (!GetFileInformationByHandle(handle, &info)) {",
          "590:     return -1;",
          "591:   }",
          "594:   statbuf->st_ino = 0;",
          "595:   statbuf->st_dev = 0;",
          "596:   statbuf->st_rdev = 0;",
          "598:   statbuf->st_gid = 0;",
          "599:   statbuf->st_uid = 0;",
          "601:   statbuf->st_mode = 0;",
          "603:   if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT &&",
          "604:     get_reparse_point(handle, &target_length)) {",
          "605:       statbuf->st_mode = S_IFLNK;",
          "607:       statbuf->st_size = target_length - JUNCTION_PREFIX_LEN;",
          "608:   } else {",
          "609:     if (info.dwFileAttributes & FILE_ATTRIBUTE_READONLY) {",
          "610:       statbuf->st_mode |= (_S_IREAD + (_S_IREAD >> 3) + (_S_IREAD >> 6));",
          "611:     } else {",
          "612:       statbuf->st_mode |= ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "613:         ((_S_IREAD|_S_IWRITE) >> 6));",
          "614:     }",
          "616:     if (info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "617:       statbuf->st_mode |= _S_IFDIR;",
          "618:     } else {",
          "619:       statbuf->st_mode |= _S_IFREG;",
          "620:     }",
          "622:     statbuf->st_size = ((int64_t) info.nFileSizeHigh << 32) +",
          "623:                         (int64_t) info.nFileSizeLow;",
          "625:   }",
          "627:   statbuf->st_mtime = FILETIME_TO_TIME_T(info.ftLastWriteTime);",
          "628:   statbuf->st_atime = FILETIME_TO_TIME_T(info.ftLastAccessTime);",
          "629:   statbuf->st_ctime = FILETIME_TO_TIME_T(info.ftCreationTime);",
          "631:   statbuf->st_nlink = (info.nNumberOfLinks <= SHRT_MAX) ?",
          "632:                       (short) info.nNumberOfLinks : SHRT_MAX;",
          "634:   return 0;",
          "635: }",
          "638: INLINE static void fs__stat(uv_fs_t* req, const wchar_t* path, int do_lstat) {",
          "639:   HANDLE handle;",
          "645:   if (do_lstat) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "601:     return;",
          "602:   }",
          "605:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "606:     CloseHandle(handle);",
          "607:     return;",
          "608:   }",
          "643:   req->ptr = &req->stat;",
          "644:   req->result = 0;",
          "645:   CloseHandle(handle);",
          "",
          "[Removed Lines]",
          "604:   if (!GetFileInformationByHandle(handle, &info)) {",
          "610:   memset(&req->stat, 0, sizeof req->stat);",
          "614:   if (link && get_reparse_point(handle, &target_length)) {",
          "615:     req->stat.st_mode = S_IFLNK;",
          "617:     req->stat.st_size = target_length - JUNCTION_PREFIX_LEN;",
          "618:   } else {",
          "619:     if (info.dwFileAttributes & FILE_ATTRIBUTE_READONLY) {",
          "620:       req->stat.st_mode |= (_S_IREAD + (_S_IREAD >> 3) + (_S_IREAD >> 6));",
          "621:     } else {",
          "622:       req->stat.st_mode |= ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "623:         ((_S_IREAD|_S_IWRITE) >> 6));",
          "624:     }",
          "626:     if (info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "627:       req->stat.st_mode |= _S_IFDIR;",
          "628:     } else {",
          "629:       req->stat.st_mode |= _S_IFREG;",
          "630:     }",
          "632:     req->stat.st_size = ((int64_t) info.nFileSizeHigh << 32) +",
          "633:                         (int64_t) info.nFileSizeLow;",
          "634:   }",
          "636:   req->stat.st_mtime = FILETIME_TO_TIME_T(info.ftLastWriteTime);",
          "637:   req->stat.st_atime = FILETIME_TO_TIME_T(info.ftLastAccessTime);",
          "638:   req->stat.st_ctime = FILETIME_TO_TIME_T(info.ftCreationTime);",
          "640:   req->stat.st_nlink = (info.nNumberOfLinks <= SHRT_MAX) ?",
          "641:                        (short) info.nNumberOfLinks : SHRT_MAX;",
          "",
          "[Added Lines]",
          "661:   if (fs__stat_handle(handle, &req->stat) != 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "649: void fs__fstat(uv_fs_t* req, uv_file file) {",
          "652:   VERIFY_UV_FILE(file, req);",
          "659:   }",
          "662: }",
          "",
          "[Removed Lines]",
          "650:   int result;",
          "654:   result = _fstati64(file, &req->stat);",
          "655:   if (result == -1) {",
          "656:     req->ptr = NULL;",
          "657:   } else {",
          "658:     req->ptr = &req->stat;",
          "661:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "674:   HANDLE handle;",
          "676:   req->ptr = NULL;",
          "680:   handle = (HANDLE) _get_osfhandle(file);",
          "682:   if (handle == INVALID_HANDLE_VALUE) {",
          "683:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "684:     return;",
          "687:   if (fs__stat_handle(handle, &req->stat) != 0) {",
          "688:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "689:     return;",
          "690:   }",
          "692:   req->ptr = &req->stat;",
          "693:   req->result = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807: }",
          "810: void fs__utime(uv_fs_t* req, const wchar_t* path, double atime, double mtime) {",
          "815: }",
          "818: void fs__futime(uv_fs_t* req, uv_file file, double atime, double mtime) {",
          "822:   VERIFY_UV_FILE(file, req);",
          "826: }",
          "",
          "[Removed Lines]",
          "811:   int result;",
          "812:   struct _utimbuf b = {(time_t)atime, (time_t)mtime};",
          "813:   result = _wutime(path, &b);",
          "814:   SET_REQ_RESULT(req, result);",
          "819:   int result;",
          "820:   struct _utimbuf b = {(time_t)atime, (time_t)mtime};",
          "824:   result = _futime(file, &b);",
          "825:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "842: INLINE static int fs__utime_handle(HANDLE handle, double atime, double mtime) {",
          "843:   FILETIME filetime_a, filetime_m;",
          "845:   TIME_T_TO_FILETIME((time_t) atime, &filetime_a);",
          "846:   TIME_T_TO_FILETIME((time_t) mtime, &filetime_m);",
          "848:   if (!SetFileTime(handle, NULL, &filetime_a, &filetime_m)) {",
          "849:     return -1;",
          "850:   }",
          "852:   return 0;",
          "853: }",
          "857:   HANDLE handle;",
          "859:   handle = CreateFileW(path,",
          "860:                        FILE_WRITE_ATTRIBUTES,",
          "861:                        FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,",
          "862:                        NULL,",
          "863:                        OPEN_EXISTING,",
          "864:                        FILE_FLAG_BACKUP_SEMANTICS,",
          "865:                        NULL);",
          "867:   if (handle == INVALID_HANDLE_VALUE) {",
          "868:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "869:     return;",
          "870:   }",
          "872:   if (fs__utime_handle(handle, atime, mtime) != 0) {",
          "873:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "874:     return;",
          "875:   }",
          "877:   req->result = 0;",
          "882:   HANDLE handle;",
          "885:   handle = (HANDLE) _get_osfhandle(file);",
          "887:   if (handle == INVALID_HANDLE_VALUE) {",
          "888:     SET_REQ_WIN32_ERROR(req, ERROR_INVALID_HANDLE);",
          "889:     return;",
          "890:   }",
          "892:   if (fs__utime_handle(handle, atime, mtime) != 0) {",
          "893:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "894:     return;",
          "895:   }",
          "897:   req->result = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d614d161c7f1ac340251271e911cd4752c158d38",
      "candidate_info": {
        "commit_hash": "d614d161c7f1ac340251271e911cd4752c158d38",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d614d161c7f1ac340251271e911cd4752c158d38",
        "files": [
          "test/simple/test-child-process-fork-net.js"
        ],
        "message": "test: Don't reuse common.PORT in test-child-process-fork-net\n\nThis fixes #3447",
        "before_after_code_files": [
          "test/simple/test-child-process-fork-net.js||test/simple/test-child-process-fork-net.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-fork-net.js||test/simple/test-child-process-fork-net.js": [
          "File: test/simple/test-child-process-fork-net.js -> test/simple/test-child-process-fork-net.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:       console.log('PARENT: server closed');",
          "158:       callback();",
          "159:     });",
          "162:       var store = '';",
          "163:       connect.on('data', function(chunk) {",
          "164:         store += chunk;",
          "",
          "[Removed Lines]",
          "160:     server.listen(common.PORT, function() {",
          "161:       var connect = net.connect(common.PORT);",
          "",
          "[Added Lines]",
          "166:     server.listen(common.PORT + 1, function() {",
          "167:       console.error('testSocket, listening');",
          "168:       var connect = net.connect(common.PORT + 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c68604823ef71526aad604377f5a7db5d3dfb90",
      "candidate_info": {
        "commit_hash": "0c68604823ef71526aad604377f5a7db5d3dfb90",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0c68604823ef71526aad604377f5a7db5d3dfb90",
        "files": [
          "vcbuild.bat"
        ],
        "message": "add jslint to vcbuild.bat",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: set test_args=",
          "24: set msi=",
          "25: set upload=",
          "27: :next-arg",
          "28: if \"%1\"==\"\" goto args-done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: set jslint=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: if /i \"%1\"==\"test\"          set test=test&goto arg-ok",
          "46: if /i \"%1\"==\"msi\"           set msi=1&goto arg-ok",
          "47: if /i \"%1\"==\"upload\"        set upload=1&goto arg-ok",
          "49: echo Warning: ignoring invalid command line option `%1`.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: if /i \"%1\"==\"jslint\"        set jslint=1&goto arg-ok",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: goto next-arg",
          "54: :args-done",
          "55: if defined upload goto upload",
          "58: :project-gen",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: if defined jslint goto jslint",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127: echo running 'python tools/test.py %test_args%'",
          "128: python tools/test.py %test_args%",
          "129: goto exit",
          "131: :create-msvs-files-failed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: if \"%test%\"==\"test\" goto jslint",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145: @echo off",
          "146: goto exit",
          "148: :help",
          "149: echo vcbuild.bat [debug/release] [msi] [test-all/test-uv/test-internet/test-pummel/test-simple/test-message] [clean] [noprojgen] [nobuild] [nosign]",
          "150: echo Examples:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: :jslint",
          "155: echo running jslint",
          "156: set PYTHONPATH=tools/closure_linter/",
          "157: python tools/closure_linter/closure_linter/gjslint.py --unix_mode --strict --nojsdoc -r lib/ -r src/ -r test/ --exclude_files lib/punycode.js",
          "158: goto exit",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cda2542fdb086f9fe5de889bea435a65e377dea",
      "candidate_info": {
        "commit_hash": "5cda2542fdb086f9fe5de889bea435a65e377dea",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5cda2542fdb086f9fe5de889bea435a65e377dea",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.03.30, Version 0.7.7 (unstable)\n\n* Upgrade V8 to 3.9.24.7\n\n* Upgrade npm to 1.1.15\n\n* Handle Emoji characters properly (Erik Corry, Bert Belder)\n\n* readline: migrate ansi/vt100 logic from tty to readline (Nathan Rajlich)\n\n* readline: Fix multiline handling (Alex Kocharin)\n\n* add a -i/--interactive flag to force the REPL (Nathan Rajlich)\n\n* debugger: add breakOnException command (Fedor Indutny)\n\n* cluster: kill workers when master dies (Andreas Madsen)\n\n* cluster: add graceful disconnect support (Andreas Madsen)\n\n* child_process: Separate 'close' event from 'exit' (Charlie McConnell)\n\n* typed arrays: add Uint8ClampedArray (Mikael Bourges-Sevenier)\n\n* buffer: Fix byte alignment issues (Ben Noordhuis, Erik Lundin)\n\n* tls: fix CryptoStream.setKeepAlive() (Shigeki Ohtsu)\n\n* Expose http parse error codes (Felix Geisendo\u0308rfer)\n\n* events: don't delete the listeners array (Ben Noordhuis, Nathan Rajlich)\n\n* process: add process.config to view node's ./configure settings (Nathan Rajlich)\n\n* process: process.execArgv to see node's arguments (Micheil Smith)\n\n* process: fix process.title setter (Ben Noordhuis)\n\n* timers: handle negative or non-numeric timeout values (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ad0140f487cae31859cc5fe82472420743ed29a",
      "candidate_info": {
        "commit_hash": "5ad0140f487cae31859cc5fe82472420743ed29a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5ad0140f487cae31859cc5fe82472420743ed29a",
        "files": [
          "lib/http.js",
          "test/simple/test-http-pause-resume-one-end.js"
        ],
        "message": "Emit end event only once fixes #2888\n\nPreviously a pair of end events would be emitted if a response was\npaused/resumed, and the underlying socket was closed while the\nresponse was paused",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-pause-resume-one-end.js||test/simple/test-http-pause-resume-one-end.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         parser.incoming._pendings.push(END_OF_FILE);",
          "150:       } else {",
          "151:         parser.incoming.readable = false;",
          "153:       }",
          "154:     }",
          "",
          "[Removed Lines]",
          "152:         parser.incoming.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   this._paused = false;",
          "262:   this._pendings = [];",
          "265:   this.url = '';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:   if (this.socket) {",
          "299:     this.socket.resume();",
          "300:   }",
          "301:   if (this._pendings.length) {",
          "302:     var self = this;",
          "303:     process.nextTick(function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:         } else {",
          "310:           assert(self._pendings.length === 0);",
          "311:           self.readable = false;",
          "313:         }",
          "314:       }",
          "315:     });",
          "316:   }",
          "317: };",
          "",
          "[Removed Lines]",
          "312:           self.emit('end');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "329: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1315:       if (req.res && req.res.readable) {",
          "1317:         req.res.emit('aborted');",
          "1320:       } else if (!req.res && !req._hadError) {",
          "",
          "[Removed Lines]",
          "1318:         req.res.emit('end');",
          "1319:         req.res.emit('close');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-pause-resume-one-end.js||test/simple/test-http-pause-resume-one-end.js": [
          "File: test/simple/test-http-pause-resume-one-end.js -> test/simple/test-http-pause-resume-one-end.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var server = http.Server(function(req, res) {",
          "27:   res.writeHead(200, {'Content-Type': 'text/plain'});",
          "28:   res.end('Hello World\\n');",
          "29:   server.close();",
          "30: });",
          "33: var dataCount = 0, endCount = 0;",
          "35: server.listen(common.PORT, function() {",
          "36:   var opts = {",
          "37:     port: common.PORT,",
          "38:     headers: { connection: 'close' }",
          "39:   };",
          "41:   http.get(opts, function(res) {",
          "42:     res.on('data', function(chunk) {",
          "43:       dataCount++;",
          "44:       res.pause();",
          "45:     });",
          "47:     res.on('end', function() {",
          "48:       endCount++;",
          "49:       res.resume();",
          "50:     });",
          "51:   });",
          "52: });",
          "55: process.on('exit', function() {",
          "56:   assert.equal(1, dataCount);",
          "57:   assert.equal(1, endCount);",
          "58: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}