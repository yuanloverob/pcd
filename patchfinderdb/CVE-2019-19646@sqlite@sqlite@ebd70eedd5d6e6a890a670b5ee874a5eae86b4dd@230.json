{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
      "candidate_info": {
        "commit_hash": "94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c"
        ],
        "message": "In the test_vfs.c VFS, if a Tcl xWrite script returns \"SQLITE_OMIT\", silently omit the write() call.\n\nFossilOrigin-Name: 8b5a621e2ee3bb9d7d4f905217872e7e59153be9477aaa626cea287d56710b5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e859d3184606dd453b9fc4ee388922d7be4b61aad84a66ac82107935ffd56f3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "237:     { SQLITE_READONLY_CANTINIT, \"SQLITE_READONLY_CANTINIT\"   },",
          "238:   };",
          "240:   const char *z;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     { -1,              \"SQLITE_OMIT\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:         Tcl_NewWideIntObj(iOfst), Tcl_NewIntObj(iAmt)",
          "383:     );",
          "384:     tvfsResultCode(p, &rc);",
          "385:   }",
          "387:   if( rc==SQLITE_OK && tvfsInjectFullerr(p) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     if( rc<0 ) return SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
      "candidate_info": {
        "commit_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Ensure that the btree cursor is correctly set up prior to backing it up as part of a delete operation on a divider cell in an index.\n\nFossilOrigin-Name: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d59567dda231e7ffec437d5e055676cf42d791196406cdc696cafa2583eb483b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8772:   if( !pPage->leaf ){",
          "8773:     rc = sqlite3BtreePrevious(pCur, 0);",
          "8774:     assert( rc!=SQLITE_DONE );",
          "8775:     if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8773:     pCur->skipNext = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e534eac193a746a6f2e71796c7ad31c5d93016b",
      "candidate_info": {
        "commit_hash": "3e534eac193a746a6f2e71796c7ad31c5d93016b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e534eac193a746a6f2e71796c7ad31c5d93016b",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improved shadow table corruption detection in the matchinfo() function of FTS3.\n\nFossilOrigin-Name: 567be3bb1e8b6477f3bf1c7b4cd6ec066fba69d0dcf8785632e244ce25db639f",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5603:   if( pExpr ){",
          "5604:     Fts3Phrase *pPhrase = pExpr->pPhrase;",
          "5605:     if( pPhrase && pPhrase->doclist.pList ){",
          "",
          "[Removed Lines]",
          "5602: static void fts3EvalUpdateCounts(Fts3Expr *pExpr){",
          "",
          "[Added Lines]",
          "5602: static void fts3EvalUpdateCounts(Fts3Expr *pExpr, int nCol){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5607:       char *p = pPhrase->doclist.pList;",
          "5609:       assert( *p );",
          "5611:         u8 c = 0;",
          "5612:         int iCnt = 0;",
          "5613:         while( 0xFE & (*p | c) ){",
          "",
          "[Removed Lines]",
          "5610:       while( 1 ){",
          "",
          "[Added Lines]",
          "5610:       do{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5623:         if( *p==0x00 ) break;",
          "5624:         p++;",
          "5625:         p += fts3GetVarint32(p, &iCol);",
          "5627:     }",
          "5631:   }",
          "5632: }",
          "",
          "[Removed Lines]",
          "5626:       }",
          "5629:     fts3EvalUpdateCounts(pExpr->pLeft);",
          "5630:     fts3EvalUpdateCounts(pExpr->pRight);",
          "",
          "[Added Lines]",
          "5626:       }while( iCol<nCol );",
          "5629:     fts3EvalUpdateCounts(pExpr->pLeft, nCol);",
          "5630:     fts3EvalUpdateCounts(pExpr->pRight, nCol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5697:       );",
          "5699:       if( rc==SQLITE_OK && pCsr->isEof==0 ){",
          "5701:       }",
          "5702:     }",
          "",
          "[Removed Lines]",
          "5700:         fts3EvalUpdateCounts(pRoot);",
          "",
          "[Added Lines]",
          "5700:         fts3EvalUpdateCounts(pRoot, pTab->nColumn);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 473626d5579dd19023abccaf7c1822ac0c883a0b98904837ea096fa16e4f41c4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11d07ed64364346dc13df20b1641e3bcdb76f828",
      "candidate_info": {
        "commit_hash": "11d07ed64364346dc13df20b1641e3bcdb76f828",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/11d07ed64364346dc13df20b1641e3bcdb76f828",
        "files": [
          "ext/fts5/test/fts5aa.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix one more instance of excess whitespace in test result strings.\n\nFossilOrigin-Name: c064964deb0b7220ba784f07ca9c603680f3c8bb936d56ab4eca1962beac1359",
        "before_after_code_files": [
          "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test": [
          "File: ext/fts5/test/fts5aa.test -> ext/fts5/test/fts5aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: do_execsql_test 1.1 {",
          "39:   DROP TABLE t1;",
          "40:   SELECT name, sql FROM sqlite_master;",
          "44: #-------------------------------------------------------------------------",
          "45: #",
          "",
          "[Removed Lines]",
          "41: } {",
          "42: }",
          "",
          "[Added Lines]",
          "41: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad70f03ceda74163903d247a975666b35fae722a27c48dd3efd31c1164b5627e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "070ae3beeabde3cb0538dad323d15a9b0411e6a0",
      "candidate_info": {
        "commit_hash": "070ae3beeabde3cb0538dad323d15a9b0411e6a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/070ae3beeabde3cb0538dad323d15a9b0411e6a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/delete.c",
          "src/sqliteInt.h"
        ],
        "message": "Break out the test for writable shadow tables into a separate subroutine.\n\nFossilOrigin-Name: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "",
          "[Removed Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "",
          "[Added Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)!=0",
          "35:         && sqlite3ReadOnlyShadowTables(pParse->db)",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "[Removed Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "",
          "[Added Lines]",
          "2901: int sqlite3ReadOnlyShadowTables(sqlite3 *db){",
          "2902: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2903:   if( (db->flags & SQLITE_Defensive)!=0",
          "2904:    && db->pVtabCtx==0",
          "2905:    && db->nVdbeExec==0",
          "2906:   ){",
          "2907:     return 1;",
          "2908:   }",
          "2909: #endif",
          "2910:   return 0;",
          "2911: }",
          "2916: static int tableMayNotBeDropped(sqlite3 *db, Table *pTab){",
          "2922:   if( (pTab->tabFlags & TF_Shadow)!=0 && sqlite3ReadOnlyShadowTables(db) ){",
          "2923:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2979:     }",
          "2980:   }",
          "2981: #endif",
          "2983:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2984:     goto exit_drop_table;",
          "2985:   }",
          "",
          "[Removed Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "[Added Lines]",
          "2997:   if( tableMayNotBeDropped(db, pTab) ){",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "78: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "[Added Lines]",
          "73:   return sqlite3ReadOnlyShadowTables(db);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4547:    );",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4551: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4552: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "",
          "---------------"
        ]
      }
    }
  ]
}