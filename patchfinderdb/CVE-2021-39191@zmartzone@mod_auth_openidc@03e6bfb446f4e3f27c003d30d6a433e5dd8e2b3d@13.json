{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f8f85ffd98fd1f5e4b5c7910093ca2817f2b1c1",
      "candidate_info": {
        "commit_hash": "2f8f85ffd98fd1f5e4b5c7910093ca2817f2b1c1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/2f8f85ffd98fd1f5e4b5c7910093ca2817f2b1c1",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/jose.c",
          "src/jose.h",
          "src/proto.c"
        ],
        "message": "add \"x5t\" to JWT header in private_key_jwt client assertions\n\n- required for interoperability with Azure AD, see #762; thanks @juur\n- bump to 2.4.10.1rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c",
          "src/jose.h||src/jose.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "880:   oidc_jwt_hdr_set(jwt, CJOSE_HDR_KID, jwt->header.kid);",
          "881:  if (jwt->header.enc)",
          "882:   oidc_jwt_hdr_set(jwt, CJOSE_HDR_ENC, jwt->header.enc);",
          "884:  if (jwt->cjose_jws)",
          "885:   cjose_jws_release(jwt->cjose_jws);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883:  if (jwt->header.x5t)",
          "884:   oidc_jwt_hdr_set(jwt, OIDC_JOSE_JWK_X5T_STR, jwt->header.x5t);",
          "",
          "---------------"
        ],
        "src/jose.h||src/jose.h": [
          "File: src/jose.h -> src/jose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:  char *kid;",
          "206:  char *enc;",
          "207: } oidc_jwt_hdr_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:  char *x5t;",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1867: #define OIDC_PROTO_JWT_ASSERTION_ASYMMETRIC_ALG CJOSE_HDR_ALG_RS256",
          "1872:   apr_table_t *params) {",
          "1873:  oidc_jwt_t *jwt = NULL;",
          "1874:  oidc_jwk_t *jwk = NULL;",
          "1877:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "1869: static apr_byte_t oidc_proto_endpoint_auth_private_key_jwt(request_rec *r,",
          "1870:   oidc_cfg *cfg, const char *client_id,",
          "1871:   const apr_array_header_t *client_signing_keys, const char *audience,",
          "1875:  const apr_array_header_t *signing_keys = NULL;",
          "",
          "[Added Lines]",
          "1869: static apr_byte_t oidc_proto_endpoint_auth_private_key_jwt(request_rec *r, oidc_cfg *cfg,",
          "1870:   const char *client_id, const apr_array_header_t *client_signing_keys, const char *audience,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1880:   return FALSE;",
          "1882:  if ((client_signing_keys != NULL) && (client_signing_keys->nelts > 0)) {",
          "1884:  } else if ((cfg->private_keys != NULL) && (cfg->private_keys->nelts > 0)) {",
          "1886:  } else {",
          "1889:   oidc_jwt_destroy(jwt);",
          "1890:   return FALSE;",
          "1891:  }",
          "1895:  jwt->header.kid = apr_pstrdup(r->pool, jwk->kid);",
          "1896:  jwt->header.alg = apr_pstrdup(r->pool, CJOSE_HDR_ALG_RS256);",
          "",
          "[Removed Lines]",
          "1883:   signing_keys = client_signing_keys;",
          "1885:   signing_keys = cfg->private_keys;",
          "1887:   oidc_error(r,",
          "1888:     \"no private keys have been configured to use for private_key_jwt client authentication (\" OIDCPrivateKeyFiles \")\");",
          "1893:  jwk = ((oidc_jwk_t**) signing_keys->elts)[0];",
          "",
          "[Added Lines]",
          "1881:   jwk = ((oidc_jwk_t**) client_signing_keys->elts)[0];",
          "1882:   jwt->header.x5t = apr_pstrdup(r->pool, jwk->x5t);",
          "1884:   jwk = ((oidc_jwk_t**) cfg->private_keys->elts)[0];",
          "1885:   if (cfg->public_keys->nelts > 0)",
          "1887:    jwt->header.x5t =",
          "1888:      apr_pstrdup(r->pool, ((oidc_jwk_t**) (cfg->public_keys->elts))[0]->x5t);",
          "1890:   oidc_error(r, \"no private keys have been configured to use for private_key_jwt client authentication (\" OIDCPrivateKeyFiles \")\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99a8d9e52a9ce661cf9e649c99f865d90b2cee44",
      "candidate_info": {
        "commit_hash": "99a8d9e52a9ce661cf9e649c99f865d90b2cee44",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/99a8d9e52a9ce661cf9e649c99f865d90b2cee44",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "make \"no issuer found in session\" a warning only\n\nbump to 2.4.9-dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.8.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:  const char *issuer = oidc_session_get_issuer(r, session);",
          "994:  if (issuer == NULL) {",
          "996:   return FALSE;",
          "997:  }",
          "",
          "[Removed Lines]",
          "995:   oidc_error(r, \"session corrupted: no issuer found in session\");",
          "",
          "[Added Lines]",
          "995:   oidc_warn(r, \"empty or invalid session: no issuer found\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8eb3002f62608817f18e7123e65f265cb93753aa",
      "candidate_info": {
        "commit_hash": "8eb3002f62608817f18e7123e65f265cb93753aa",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/8eb3002f62608817f18e7123e65f265cb93753aa",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/cache/redis.c",
          "src/config.c",
          "src/mod_auth_openidc.h"
        ],
        "message": "add options to configure Redis timeouts\n\nwith OIDCRedisCacheConnectTimeout and OIDCRedisCacheTimeout\nbump to 2.4.7.2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "629: # When not defined the default database 0 is used.",
          "630: #OIDCRedisCacheDatabase <number>",
          "632: ########################################################################################",
          "633: #",
          "634: # Advanced Settings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: # Timeout for connecting to the Redis servers.",
          "633: # When not defined the default connect timeout is 5 seconds.",
          "634: #OIDCRedisCacheConnectTimeout <seconds>",
          "636: # Timeout waiting for a response of the Redis servers after a request was sent.",
          "637: # When not defined the default timeout is 5 seconds.",
          "638: #OIDCRedisCacheTimeout <seconds>",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  apr_port_t port;",
          "65:  char *passwd;",
          "66:  int database;",
          "67:  redisContext *ctx;",
          "68: } oidc_cache_cfg_redis_t;",
          "71: static void *oidc_cache_redis_cfg_create(apr_pool_t *pool) {",
          "72:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:  struct timeval connect_timeout;",
          "68:  struct timeval timeout;",
          "72: #define REDIS_CONNECT_TIMEOUT_DEFAULT 5",
          "73: #define REDIS_TIMEOUT_DEFAULT 5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  context->host_str = NULL;",
          "76:  context->passwd = NULL;",
          "77:  context->database = -1;",
          "78:  context->ctx = NULL;",
          "79:  return context;",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:  context->connect_timeout.tv_sec = REDIS_CONNECT_TIMEOUT_DEFAULT;",
          "84:  context->connect_timeout.tv_usec = 0;",
          "85:  context->timeout.tv_sec = REDIS_TIMEOUT_DEFAULT;",
          "86:  context->timeout.tv_usec = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  if (cfg->cache_redis_database != -1)",
          "129:   context->database = cfg->cache_redis_database;",
          "131:  if (oidc_cache_mutex_post_config(s, context->mutex, \"redis\") == FALSE)",
          "132:   return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  if (cfg->cache_redis_connect_timeout != -1)",
          "141:   context->connect_timeout.tv_sec = cfg->cache_redis_connect_timeout;",
          "143:  if (cfg->cache_redis_timeout != -1)",
          "144:   context->timeout.tv_sec = cfg->cache_redis_timeout;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:  if (context->ctx == NULL) {",
          "192:   if ((context->ctx == NULL) || (context->ctx->err != 0)) {",
          "",
          "[Removed Lines]",
          "189:   context->ctx = redisConnect(context->host_str, context->port);",
          "",
          "[Added Lines]",
          "204:   oidc_debug(r, \"calling redisConnectWithTimeout\");",
          "205:   context->ctx = redisConnectWithTimeout(context->host_str, context->port, context->connect_timeout);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:     oidc_cache_redis_reply_free(&reply);",
          "235:    }",
          "236:   }",
          "237:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:    if (redisSetTimeout(context->ctx, context->timeout) != REDIS_OK)",
          "254:     oidc_error(r, \"redisSetTimeout failed: %s\", context->ctx->errstr);",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: #define OIDCCacheFileCleanInterval             \"OIDCCacheFileCleanInterval\"",
          "249: #define OIDCRedisCachePassword                 \"OIDCRedisCachePassword\"",
          "250: #define OIDCRedisCacheDatabase                 \"OIDCRedisCacheDatabase\"",
          "251: #define OIDCHTMLErrorTemplate                  \"OIDCHTMLErrorTemplate\"",
          "252: #define OIDCDiscoverURL                        \"OIDCDiscoverURL\"",
          "253: #define OIDCPassCookies                        \"OIDCPassCookies\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: #define OIDCRedisCacheConnectTimeout           \"OIDCRedisCacheConnectTimeout\"",
          "252: #define OIDCRedisCacheTimeout                  \"OIDCRedisCacheTimeout\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1340:  c->cache_redis_server = NULL;",
          "1341:  c->cache_redis_password = NULL;",
          "1342:  c->cache_redis_database = -1;",
          "1343: #endif",
          "1345:  c->metadata_dir = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1345:  c->cache_redis_connect_timeout = -1;",
          "1346:  c->cache_redis_timeout = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1760:  c->cache_redis_database =",
          "1761:    add->cache_redis_database != -1 ?",
          "1762:      add->cache_redis_database : base->cache_redis_database;",
          "1763: #endif",
          "1765:  c->metadata_dir =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:  c->cache_redis_connect_timeout =",
          "1768:    add->cache_redis_connect_timeout != -1 ?",
          "1769:      add->cache_redis_connect_timeout : base->cache_redis_connect_timeout;",
          "1770:  c->cache_redis_timeout =",
          "1771:    add->cache_redis_timeout != -1 ?",
          "1772:      add->cache_redis_timeout : base->cache_redis_timeout;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3200:     (void*)APR_OFFSETOF(oidc_cfg, cache_redis_database),",
          "3201:     RSRC_CONF,",
          "3202:     \"Database for the Redis servers.\"),",
          "3203: #endif",
          "3204:   AP_INIT_TAKE1(OIDCHTMLErrorTemplate,",
          "3205:     oidc_set_string_slot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3213:   AP_INIT_TAKE1(OIDCRedisCacheConnectTimeout,",
          "3214:     oidc_set_int_slot,",
          "3215:     (void*)APR_OFFSETOF(oidc_cfg, cache_redis_connect_timeout),",
          "3216:     RSRC_CONF,",
          "3217:     \"Timeout for connecting to the Redis servers.\"),",
          "3218:   AP_INIT_TAKE1(OIDCRedisCacheTimeout,",
          "3219:     oidc_set_int_slot,",
          "3220:     (void*)APR_OFFSETOF(oidc_cfg, cache_redis_timeout),",
          "3221:     RSRC_CONF,",
          "3222:     \"Timeout waiting for a response of the Redis servers.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:  char *cache_redis_server;",
          "388:  char *cache_redis_password;",
          "389:  int cache_redis_database;",
          "390: #endif",
          "391:  int cache_encrypt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:  int cache_redis_connect_timeout;",
          "391:  int cache_redis_timeout;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2def2c4bec066ca7a52dfbb6523fc9c1c609f9ae",
      "candidate_info": {
        "commit_hash": "2def2c4bec066ca7a52dfbb6523fc9c1c609f9ae",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/2def2c4bec066ca7a52dfbb6523fc9c1c609f9ae",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "fix double HTML inclusion on state timeout HTML error page\n\nsee also f5959d767b0eec4856d561cbaa6d2262a52da551 and #484; at least\nDebian Buster Apache 2.4 was affected\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.8.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:       oidc_proto_state_get_original_url(*proto_state)),",
          "700:       OK);",
          "701:   oidc_proto_state_destroy(*proto_state);",
          "702:   return FALSE;",
          "703:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707:   r->header_only = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "192f083c3e6208a39a2ad67bee53b83d25599fc2",
      "candidate_info": {
        "commit_hash": "192f083c3e6208a39a2ad67bee53b83d25599fc2",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/192f083c3e6208a39a2ad67bee53b83d25599fc2",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c"
        ],
        "message": "add redirect/text options to OIDCUnAutzAction\n\nsee #715; thanks @chrisinmtown; bump to 2.4.10rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "849: # Defines the action to be taken when an unauthorized request is made i.e. the user is authenticated but",
          "850: # does not meet the `Require claim <>` directives or similar.",
          "854: # Useful in Location/Directory/Proxy path contexts that need to do stepup authentication",
          "855: # When not defined the default \"401\" is used.",
          "858: # Indicates whether POST data will be preserved across authentication requests (and discovery in case of multiple OPs).",
          "859: # This is designed to prevent data loss when a session timeout occurs in a (long) user filled HTML form.",
          "",
          "[Removed Lines]",
          "851: # \"401\" means that HTTP 401 Unauthorized is returned.",
          "852: # \"403\" means that HTTP 403 Forbidded is returned: NB: for Apache 2.4 this is controlled by the AuthzSendForbiddenOnFailure directive!",
          "853: # \"auth\" means that the user is redirected to the OpenID Connect Provider or Discovery page.",
          "856: #OIDCUnAutzAction [401|403|auth]",
          "",
          "[Added Lines]",
          "851: # \"401\" return HTTP 401 Unauthorized with optional text message if specified in <argument>",
          "852: # \"403\" return HTTP 403 Forbidded with optional text message: NB: for Apache 2.4 this is controlled by the AuthzSendForbiddenOnFailure directive!",
          "853: # \"302\" redirect to the URL specified in the <argument> parameter",
          "854: # \"auth\"redirect the user to the OpenID Connect Provider or Discovery page for authentication",
          "857: #OIDCUnAutzAction [401|403|302|auth] [<argument>]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:  ap_expr_info_t *unauth_expression;",
          "280: #endif",
          "281:  int unautz_action;",
          "282:  apr_array_header_t *pass_cookies;",
          "283:  apr_array_header_t *strip_cookies;",
          "284:  int pass_info_in_headers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  char *unauthz_arg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1029:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg*) m;",
          "1032:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1033: }",
          "",
          "[Removed Lines]",
          "1027: static const char* oidc_set_unautz_action(cmd_parms *cmd, void *m,",
          "1028:   const char *arg) {",
          "1030:  const char *rv = oidc_parse_unautz_action(cmd->pool, arg,",
          "1031:    &dir_cfg->unautz_action);",
          "",
          "[Added Lines]",
          "1028: static const char* oidc_set_unautz_action(cmd_parms *cmd, void *m, const char *arg1,",
          "1029:   const char *arg2) {",
          "1031:  const char *rv = oidc_parse_unautz_action(cmd->pool, arg1, &dir_cfg->unautz_action);",
          "1032:  if ((rv == NULL) && (arg2 != NULL)) {",
          "1033:   dir_cfg->unauthz_arg = apr_pstrdup(cmd->pool, arg2);",
          "1034:  } else if (dir_cfg->unautz_action == OIDC_UNAUTZ_RETURN302) {",
          "1035:   rv =",
          "1036:     apr_psprintf(cmd->temp_pool, \"the (2nd) URL argument to %s must be set\", cmd->directive->directive);",
          "1037:   return rv;",
          "1038:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1953:  c->unauth_expression = NULL;",
          "1954: #endif",
          "1955:  c->unautz_action = OIDC_CONFIG_POS_INT_UNSET;",
          "1956:  c->pass_cookies = NULL;",
          "1957:  c->strip_cookies = NULL;",
          "1958:  c->pass_info_in_headers = OIDC_CONFIG_POS_INT_UNSET;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1963:  c->unauthz_arg = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2132:  return dir_cfg->unautz_action;",
          "2133: }",
          "2135: char* oidc_dir_cfg_path_auth_request_params(request_rec *r) {",
          "2136:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2137:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2143: char *oidc_dir_cfg_unauthz_arg(request_rec *r) {",
          "2144:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2145:    &auth_openidc_module);",
          "2146:  return dir_cfg->unauthz_arg;",
          "2147: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2174:  c->unautz_action =",
          "2175:    add->unautz_action != OIDC_CONFIG_POS_INT_UNSET ?",
          "2176:      add->unautz_action : base->unautz_action;",
          "2178:  c->pass_cookies =",
          "2179:    add->pass_cookies != NULL ? add->pass_cookies : base->pass_cookies;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2191:  c->unauthz_arg =",
          "2192:    add->unauthz_arg != NULL ?",
          "2193:      add->unauthz_arg : base->unauthz_arg;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3299:     (void *) APR_OFFSETOF(oidc_dir_cfg, unauth_action),",
          "3300:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "3301:     \"Sets the action taken when an unauthenticated request occurs: must be one of \\\"auth\\\" (default), \\\"pass\\\" , \\\"401\\\", \\\"407\\\", or \\\"410\\\".\"),",
          "3303:     oidc_set_unautz_action,",
          "3304:     (void *) APR_OFFSETOF(oidc_dir_cfg, unautz_action),",
          "3305:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "",
          "[Removed Lines]",
          "3302:   AP_INIT_TAKE1(OIDCUnAutzAction,",
          "",
          "[Added Lines]",
          "3319:   AP_INIT_TAKE12(OIDCUnAutzAction,",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3983:  oidc_debug(r, \"enter\");",
          "3985:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "3987:  if (apr_strnatcasecmp((const char*) ap_auth_type(r),",
          "3988:         OIDC_AUTH_TYPE_OPENID_OAUTH20) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3986:  char *html_head = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3997:   case OIDC_UNAUTZ_RETURN403:",
          "3998:   case OIDC_UNAUTZ_RETURN401:",
          "3999:    return AUTHZ_DENIED;",
          "4000:    break;",
          "4001:   case OIDC_UNAUTZ_AUTHENTICATE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4000:    if (oidc_dir_cfg_unauthz_arg(r)) {",
          "4001:     oidc_util_html_send(r, \"Authorization Error\", NULL, NULL, oidc_dir_cfg_unauthz_arg(r),",
          "4002:          HTTP_UNAUTHORIZED);",
          "4003:     r->header_only = 1;",
          "4004:    }",
          "4005:    return AUTHZ_DENIED;",
          "4006:    break;",
          "4007:   case OIDC_UNAUTZ_RETURN302:",
          "4008:    html_head =",
          "4009:      apr_psprintf(r->pool, \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; url=%s\\\">\", oidc_dir_cfg_unauthz_arg(r));",
          "4010:    oidc_util_html_send(r, \"Authorization Error Redirect\", html_head, NULL, NULL,",
          "4011:      HTTP_UNAUTHORIZED);",
          "4012:    r->header_only = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4019:  if (location != NULL) {",
          "4020:   oidc_debug(r, \"send HTML refresh with authorization redirect: %s\", location);",
          "4023:     apr_psprintf(r->pool, \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; url=%s\\\">\", location);",
          "4024:   oidc_util_html_send(r, \"Stepup Authentication\", html_head, NULL, NULL,",
          "4025:     HTTP_UNAUTHORIZED);",
          "",
          "[Removed Lines]",
          "4022:   char *html_head =",
          "",
          "[Added Lines]",
          "4036:   html_head =",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4109:  switch (oidc_dir_cfg_unautz_action(r)) {",
          "4110:  case OIDC_UNAUTZ_RETURN403:",
          "4111:   return HTTP_FORBIDDEN;",
          "4112:  case OIDC_UNAUTZ_RETURN401:",
          "4113:   return HTTP_UNAUTHORIZED;",
          "4114:  case OIDC_UNAUTZ_AUTHENTICATE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4125:   if (oidc_dir_cfg_unauthz_arg(r))",
          "4126:    oidc_util_html_send(r, \"Authorization Error\", NULL, NULL, oidc_dir_cfg_unauthz_arg(r),",
          "4127:         HTTP_FORBIDDEN);",
          "4130:   if (oidc_dir_cfg_unauthz_arg(r))",
          "4131:    oidc_util_html_send(r, \"Authorization Error\", NULL, NULL, oidc_dir_cfg_unauthz_arg(r),",
          "4132:         HTTP_UNAUTHORIZED);",
          "4134:  case OIDC_UNAUTZ_RETURN302:",
          "4135:   oidc_util_hdr_out_location_set(r, oidc_dir_cfg_unauthz_arg(r));",
          "4136:   return HTTP_MOVED_TEMPORARILY;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #define OIDC_UNAUTZ_RETURN403    1",
          "220: #define OIDC_UNAUTZ_RETURN401    2",
          "221: #define OIDC_UNAUTZ_AUTHENTICATE 3",
          "223: #define OIDC_REQUEST_URI_CACHE_DURATION 30",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #define OIDC_UNAUTZ_RETURN302    4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "741: int oidc_dir_cfg_unauth_action(request_rec *r);",
          "742: apr_byte_t oidc_dir_cfg_unauth_expr_is_set(request_rec *r);",
          "743: int oidc_dir_cfg_unautz_action(request_rec *r);",
          "744: char *oidc_dir_cfg_path_auth_request_params(request_rec *r);",
          "745: char *oidc_dir_cfg_path_scope(request_rec *r);",
          "746: oidc_valid_function_t oidc_cfg_get_valid_endpoint_auth_function(oidc_cfg *cfg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745: char *oidc_dir_cfg_unauthz_arg(request_rec *r);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013: #define OIDC_UNAUTZ_ACTION_AUTH_STR \"auth\"",
          "1014: #define OIDC_UNAUTZ_ACTION_401_STR  \"401\"",
          "1015: #define OIDC_UNAUTZ_ACTION_403_STR  \"403\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016: #define OIDC_UNAUTZ_ACTION_302_STR  \"302\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1023:    OIDC_UNAUTZ_ACTION_AUTH_STR,",
          "1024:    OIDC_UNAUTZ_ACTION_401_STR,",
          "1025:    OIDC_UNAUTZ_ACTION_403_STR,",
          "1026:    NULL };",
          "1027:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "1028:  if (rv != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1027:    OIDC_UNAUTZ_ACTION_302_STR,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1035:  else if (apr_strnatcmp(arg, OIDC_UNAUTZ_ACTION_403_STR) == 0)",
          "1038:  return NULL;",
          "1039: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:  else if (apr_strnatcmp(arg, OIDC_UNAUTZ_ACTION_302_STR) == 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}