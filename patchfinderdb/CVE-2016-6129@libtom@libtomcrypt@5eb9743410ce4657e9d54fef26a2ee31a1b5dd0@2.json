{
  "cve_id": "CVE-2016-6129",
  "cve_desc": "The rsa_verify_hash_ex function in rsa_verify_hash.c in LibTomCrypt, as used in OP-TEE before 2.2.0, does not validate that the message length is equal to the ASN.1 encoded data length, which makes it easier for remote attackers to forge RSA signatures or public certificates by leveraging a Bleichenbacher signature forgery attack.",
  "repo": "libtom/libtomcrypt",
  "patch_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
  "patch_info": {
    "commit_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "repo": "libtom/libtomcrypt",
    "commit_url": "https://github.com/libtom/libtomcrypt/commit/5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "files": [
      "src/pk/rsa/rsa_verify_hash.c"
    ],
    "message": "rsa_verify_hash: fix possible bleichenbacher signature attack",
    "before_after_code_files": [
      "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
    ]
  },
  "patch_diff": {
    "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c": [
      "File: src/pk/rsa/rsa_verify_hash.c -> src/pk/rsa/rsa_verify_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:   } else {",
      "105:     unsigned char *out;",
      "107:     int           decoded;",
      "108:     ltc_asn1_list digestinfo[2], siginfo[2];",
      "",
      "[Removed Lines]",
      "106:     unsigned long outlen, loid[16];",
      "",
      "[Added Lines]",
      "106:     unsigned long outlen, loid[16], reallen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:        goto bail_2;",
      "146:     }",
      "150:         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&",
      "151:         (siginfo[1].size == hashlen) &&",
      "152:         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)) {",
      "",
      "[Removed Lines]",
      "149:     if ((digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "[Added Lines]",
      "148:     if ((err = der_length_sequence(siginfo, 2, &reallen)) != CRYPT_OK) {",
      "149:        XFREE(out);",
      "150:        goto bail_2;",
      "151:     }",
      "154:     if ((reallen == outlen) &&",
      "155:         (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3324da26019640d7df72841f5e644d7e42a6b8f6",
      "candidate_info": {
        "commit_hash": "3324da26019640d7df72841f5e644d7e42a6b8f6",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/3324da26019640d7df72841f5e644d7e42a6b8f6",
        "files": [
          "src/pk/pkcs1/pkcs_1_pss_decode.c",
          "src/pk/pkcs1/pkcs_1_pss_encode.c",
          "src/pk/rsa/rsa_verify_hash.c"
        ],
        "message": "Fixed small padding error in the PKCS#1 PSS code.\n\nThe existing LTC code for padding meassages for PSS signatures\ncontained a small error. In particular, the PSS-passing algorithms is\nsupposed to be given (bitlength of key - 1) as an argument. The LTC\ncode passes (bitlength of key), and subtracts 1 in the middle of the\nPSS-padding. This subtraction unfortunately comes too late: a\ncalculation using that argument has already been made. Fortunately,\nthis bug only appeared if the bit-length of the key was 1 mod 8, and\nso is unlikely to show up in practice. Still, this patch fixes the\nproblem.\n\nConflicts:\n\tsrc/pk/pkcs1/pkcs_1_pss_decode.c",
        "before_after_code_files": [
          "src/pk/pkcs1/pkcs_1_pss_decode.c||src/pk/pkcs1/pkcs_1_pss_decode.c",
          "src/pk/pkcs1/pkcs_1_pss_encode.c||src/pk/pkcs1/pkcs_1_pss_encode.c",
          "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [
            "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
          ],
          "candidate": [
            "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
          ]
        }
      },
      "candidate_diff": {
        "src/pk/pkcs1/pkcs_1_pss_decode.c||src/pk/pkcs1/pkcs_1_pss_decode.c": [
          "File: src/pk/pkcs1/pkcs_1_pss_decode.c -> src/pk/pkcs1/pkcs_1_pss_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:    }",
          "53:    hLen        = hash_descriptor[hash_idx].hashsize;",
          "54:    modulus_len = (modulus_bitlen>>3) + (modulus_bitlen & 7 ? 1 : 0);",
          "57:    if ((saltlen > modulus_len) ||",
          "59:       return CRYPT_PK_INVALID_SIZE;",
          "60:    }",
          "",
          "[Removed Lines]",
          "58:        (modulus_len < hLen + saltlen + 2) || (siglen != modulus_len)) {",
          "",
          "[Added Lines]",
          "54:    modulus_bitlen--;",
          "59:        (modulus_len < hLen + saltlen + 2)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:    XMEMCPY(hash, sig + x, hLen);",
          "96:    x += hLen;",
          "100:       err = CRYPT_INVALID_PACKET;",
          "101:       goto LBL_ERR;",
          "102:    }",
          "",
          "[Removed Lines]",
          "99:    if ((sig[0] & ~(0xFF >> ((modulus_len<<3) - (modulus_bitlen-1)))) != 0) {",
          "",
          "[Added Lines]",
          "101:    if ((sig[0] & ~(0xFF >> ((modulus_len<<3) - (modulus_bitlen)))) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:    }",
          "",
          "[Removed Lines]",
          "115:    DB[0] &= 0xFF >> ((modulus_len<<3) - (modulus_bitlen-1));",
          "",
          "[Added Lines]",
          "117:    DB[0] &= 0xFF >> ((modulus_len<<3) - (modulus_bitlen));",
          "",
          "---------------"
        ],
        "src/pk/pkcs1/pkcs_1_pss_encode.c||src/pk/pkcs1/pkcs_1_pss_encode.c": [
          "File: src/pk/pkcs1/pkcs_1_pss_encode.c -> src/pk/pkcs1/pkcs_1_pss_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:    }",
          "56:    hLen        = hash_descriptor[hash_idx].hashsize;",
          "57:    modulus_len = (modulus_bitlen>>3) + (modulus_bitlen & 7 ? 1 : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:    modulus_bitlen--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:    out[y] = 0xBC;",
          "",
          "[Removed Lines]",
          "150:    out[0] &= 0xFF >> ((modulus_len<<3) - (modulus_bitlen-1));",
          "",
          "[Added Lines]",
          "151:    out[0] &= 0xFF >> ((modulus_len<<3) - modulus_bitlen);",
          "",
          "---------------"
        ],
        "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c": [
          "File: src/pk/rsa/rsa_verify_hash.c -> src/pk/rsa/rsa_verify_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   if (padding == LTC_PKCS_1_PSS) {",
          "96:   } else {",
          "98:     unsigned char *out;",
          "",
          "[Removed Lines]",
          "95:     err = pkcs_1_pss_decode(hash, hashlen, tmpbuf, x, saltlen, hash_idx, modulus_bitlen, stat);",
          "",
          "[Added Lines]",
          "96:     if(modulus_bitlen%8 == 1){",
          "97:       err = pkcs_1_pss_decode(hash, hashlen, tmpbuf+1, x-1, saltlen, hash_idx, modulus_bitlen, stat);",
          "98:     }",
          "99:     else{",
          "100:       err = pkcs_1_pss_decode(hash, hashlen, tmpbuf, x, saltlen, hash_idx, modulus_bitlen, stat);",
          "101:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e227000578566d1a6aa5be3da1568e225fef164a",
      "candidate_info": {
        "commit_hash": "e227000578566d1a6aa5be3da1568e225fef164a",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/e227000578566d1a6aa5be3da1568e225fef164a",
        "files": [
          "testprof/tomcrypt_test.h"
        ],
        "message": "tests: remove surplus ';' in DO()/DOX() macros",
        "before_after_code_files": [
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: void run_cmd(int res, int line, char *file, char *cmd, const char *algorithm);",
          "41: #ifdef LTC_VERBOSE",
          "44: #else",
          "47: #endif",
          "",
          "[Removed Lines]",
          "42: #define DO(x) do { fprintf(stderr, \"%s:\\n\", #x); run_cmd((x), __LINE__, __FILE__, #x, NULL); } while (0);",
          "43: #define DOX(x, str) do { fprintf(stderr, \"%s - %s:\\n\", #x, (str)); run_cmd((x), __LINE__, __FILE__, #x, (str)); } while (0);",
          "45: #define DO(x) do { run_cmd((x), __LINE__, __FILE__, #x, NULL); } while (0);",
          "46: #define DOX(x, str) do { run_cmd((x), __LINE__, __FILE__, #x, (str)); } while (0);",
          "",
          "[Added Lines]",
          "42: #define DO(x) do { fprintf(stderr, \"%s:\\n\", #x); run_cmd((x), __LINE__, __FILE__, #x, NULL); } while (0)",
          "43: #define DOX(x, str) do { fprintf(stderr, \"%s - %s:\\n\", #x, (str)); run_cmd((x), __LINE__, __FILE__, #x, (str)); } while (0)",
          "45: #define DO(x) do { run_cmd((x), __LINE__, __FILE__, #x, NULL); } while (0)",
          "46: #define DOX(x, str) do { run_cmd((x), __LINE__, __FILE__, #x, (str)); } while (0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b570175b473ccc41eba11c8d2891ec8c7ca6600a",
      "candidate_info": {
        "commit_hash": "b570175b473ccc41eba11c8d2891ec8c7ca6600a",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/b570175b473ccc41eba11c8d2891ec8c7ca6600a",
        "files": [
          "testprof/makefile",
          "testprof/makefile.icc",
          "testprof/makefile.mingw",
          "testprof/makefile.msvc",
          "testprof/makefile.shared",
          "testprof/no_prng.c",
          "testprof/tomcrypt_test.h"
        ],
        "message": "add testprof/no_prng\n\na PRNG that is no PRNG as its output is predefined and can be set\nby calling add_entropy()",
        "before_after_code_files": [
          "testprof/makefile.icc||testprof/makefile.icc",
          "testprof/makefile.mingw||testprof/makefile.mingw",
          "testprof/makefile.msvc||testprof/makefile.msvc",
          "testprof/makefile.shared||testprof/makefile.shared",
          "testprof/no_prng.c||testprof/no_prng.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/makefile.icc||testprof/makefile.icc": [
          "File: testprof/makefile.icc -> testprof/makefile.icc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: CFLAGS += -I../src/headers -I./",
          "2: CC?=icc",
          "5: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o",
          "",
          "[Removed Lines]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o                                   \\",
          "",
          "[Added Lines]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "",
          "---------------"
        ],
        "testprof/makefile.mingw||testprof/makefile.mingw": [
          "File: testprof/makefile.mingw -> testprof/makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: CFLAGS = $(CFLAGS_OPTS) -W -I../src/headers -I. -Wall -W",
          "8: dsa_test.o ecc_test.o mac_test.o misc_test.o modes_test.o pkcs_1_test.o rsa_test.o       \\",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o",
          "",
          "[Removed Lines]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o                                   \\",
          "",
          "[Added Lines]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "",
          "---------------"
        ],
        "testprof/makefile.msvc||testprof/makefile.msvc": [
          "File: testprof/makefile.msvc -> testprof/makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: CFLAGS = /I../src/headers/ /I./ /Ox /DWIN32 /DLTC_SOURCE /W3 /Fo$@",
          "4: dsa_test.obj ecc_test.obj mac_test.obj modes_test.obj pkcs_1_test.obj \\",
          "5: rsa_test.obj store_test.obj test_driver.obj x86_prof.obj katja_test.obj \\",
          "6: dh_test.obj misc_test.obj",
          "",
          "[Removed Lines]",
          "3: OBJECTS=base64_test.obj cipher_hash_test.obj der_tests.obj            \\",
          "",
          "[Added Lines]",
          "3: OBJECTS=base64_test.obj cipher_hash_test.obj der_tests.obj no_prng.obj \\",
          "",
          "---------------"
        ],
        "testprof/makefile.shared||testprof/makefile.shared": [
          "File: testprof/makefile.shared -> testprof/makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: CFLAGS += -I../src/headers -I./ -Wall -Wsign-compare -W -Wshadow -Wno-unused-parameter",
          "10: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o",
          "",
          "[Removed Lines]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o                                   \\",
          "",
          "[Added Lines]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "",
          "---------------"
        ],
        "testprof/no_prng.c||testprof/no_prng.c": [
          "File: testprof/no_prng.c -> testprof/no_prng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include \"tomcrypt.h\"",
          "14:   @file no_prng.c",
          "15:   NO PRNG, Steffen Jaeckel",
          "18: #ifdef LTC_PKCS_1",
          "20: static unsigned char no_prng_entropy[1024];",
          "21: static unsigned long no_prng_len = 0;",
          "22: static unsigned long no_prng_offset = 0;",
          "25:   Start the PRNG",
          "26:   @param prng     [out] The PRNG state to initialize",
          "27:   @return CRYPT_OK if successful",
          "29: int no_prng_start(prng_state *prng)",
          "30: {",
          "31:     no_prng_len = 0;",
          "32:     no_prng_offset = 0;",
          "34:     return CRYPT_OK;",
          "35: }",
          "38:   Add entropy to the PRNG state",
          "39:   @param in       The data to add",
          "40:   @param inlen    Length of the data to add",
          "41:   @param prng     PRNG state to update",
          "42:   @return CRYPT_OK if successful",
          "44: int no_prng_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)",
          "45: {",
          "46:     LTC_ARGCHK(in  != NULL);",
          "47:     LTC_ARGCHK(inlen <= sizeof(no_prng_entropy));",
          "49:     no_prng_len = MIN(inlen, sizeof(no_prng_entropy));",
          "50:     memcpy(no_prng_entropy, in, no_prng_len);",
          "51:     no_prng_offset = 0;",
          "53:     return CRYPT_OK;",
          "55: }",
          "58:   Make the PRNG ready to read from",
          "59:   @param prng   The PRNG to make active",
          "60:   @return CRYPT_OK if successful",
          "62: int no_prng_ready(prng_state *prng)",
          "63: {",
          "64:     LTC_ARGCHK(prng != NULL);",
          "66:     return CRYPT_OK;",
          "67: }",
          "70:   Read from the PRNG",
          "71:   @param out      Destination",
          "72:   @param outlen   Length of output",
          "73:   @param prng     The active PRNG to read from",
          "74:   @return Number of octets read",
          "76: unsigned long no_prng_read(unsigned char *out, unsigned long outlen, prng_state *prng)",
          "77: {",
          "78:    LTC_ARGCHK(out != NULL);",
          "80:    outlen = MIN(outlen, no_prng_len - no_prng_offset);",
          "81:    memcpy(out, &no_prng_entropy[no_prng_offset], outlen);",
          "82:    no_prng_offset += outlen;",
          "84:    return outlen;",
          "85: }",
          "88:   Terminate the PRNG",
          "89:   @param prng   The PRNG to terminate",
          "90:   @return CRYPT_OK if successful",
          "92: int no_prng_done(prng_state *prng)",
          "93: {",
          "94:    return CRYPT_OK;",
          "95: }",
          "98:   Export the PRNG state",
          "99:   @param out       [out] Destination",
          "100:   @param outlen    [in/out] Max size and resulting size of the state",
          "101:   @param prng      The PRNG to export",
          "102:   @return CRYPT_OK if successful",
          "104: int no_prng_export(unsigned char *out, unsigned long *outlen, prng_state *prng)",
          "105: {",
          "106:    return CRYPT_OK;",
          "107: }",
          "110:   Import a PRNG state",
          "111:   @param in       The PRNG state",
          "112:   @param inlen    Size of the state",
          "113:   @param prng     The PRNG to import",
          "114:   @return CRYPT_OK if successful",
          "116: int no_prng_import(const unsigned char *in, unsigned long inlen, prng_state *prng)",
          "117: {",
          "118:    return CRYPT_OK;",
          "119: }",
          "122:   PRNG self-test",
          "123:   @return CRYPT_OK if successful, CRYPT_NOP if self-testing has been disabled",
          "125: int no_prng_test(void)",
          "126: {",
          "127:    return CRYPT_OK;",
          "128: }",
          "130: const struct ltc_prng_descriptor no_prng_desc =",
          "131: {",
          "132:    \"no_prng\", 0,",
          "133:     &no_prng_start,",
          "134:     &no_prng_add_entropy,",
          "135:     &no_prng_ready,",
          "136:     &no_prng_read,",
          "137:     &no_prng_done,",
          "138:     &no_prng_export,",
          "139:     &no_prng_import,",
          "140:     &no_prng_test",
          "141: };",
          "143: #endif",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: extern int no_results;",
          "75: int sorter(const void *a, const void *b);",
          "76: void tally_results(int type);",
          "77: ulong64 rdtsc (void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: #ifdef LTC_PKCS_1",
          "76: extern const struct ltc_prng_descriptor no_prng_desc;",
          "77: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7302a7cfcb58679f3d8462af4f9f255c78780160",
      "candidate_info": {
        "commit_hash": "7302a7cfcb58679f3d8462af4f9f255c78780160",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/7302a7cfcb58679f3d8462af4f9f255c78780160",
        "files": [
          "demos/test.c",
          "notes/rsa-testvectors/pkcs1v15sign-vectors.c",
          "testprof/makefile",
          "testprof/makefile.icc",
          "testprof/makefile.mingw",
          "testprof/makefile.msvc",
          "testprof/makefile.shared",
          "testprof/pkcs_1_emsa_test.c",
          "testprof/tomcrypt_test.h"
        ],
        "message": "add testprof/pkcs_1_emsa_test",
        "before_after_code_files": [
          "demos/test.c||demos/test.c",
          "testprof/makefile.icc||testprof/makefile.icc",
          "testprof/makefile.mingw||testprof/makefile.mingw",
          "testprof/makefile.msvc||testprof/makefile.msvc",
          "testprof/makefile.shared||testprof/makefile.shared",
          "testprof/pkcs_1_emsa_test.c||testprof/pkcs_1_emsa_test.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "demos/test.c||demos/test.c": [
          "File: demos/test.c -> demos/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:    printf(\"\\npkcs_1_test...\"); fflush(stdout); x = pkcs_1_test();      printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "27:    printf(\"\\npkcs_1_pss_test....\"); fflush(stdout); x = pkcs_1_pss_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "28:    printf(\"\\npkcs_1_oaep_test....\"); fflush(stdout); x = pkcs_1_oaep_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "29:    printf(\"\\nrsa_test......\"); fflush(stdout); x = rsa_test();         printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "30:    printf(\"\\ndh_test.......\"); fflush(stdout); x = dh_test();          printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "31:    printf(\"\\necc_test......\"); fflush(stdout); x = ecc_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:    printf(\"\\npkcs_1_emsa_test....\"); fflush(stdout); x = pkcs_1_emsa_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "---------------"
        ],
        "testprof/makefile.icc||testprof/makefile.icc": [
          "File: testprof/makefile.icc -> testprof/makefile.icc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "5: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "9: ifndef LIBTEST_S",
          "10:    LIBTEST_S = libtomcrypt_prof.a",
          "",
          "[Removed Lines]",
          "7: pkcs_1_pss_test.o pkcs_1_oaep_test.o",
          "",
          "[Added Lines]",
          "7: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.mingw||testprof/makefile.mingw": [
          "File: testprof/makefile.mingw -> testprof/makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "8: dsa_test.o ecc_test.o mac_test.o misc_test.o modes_test.o pkcs_1_test.o rsa_test.o       \\",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o pkcs_1_pss_test.o           \\",
          "12: default: $(LIBTEST_S)",
          "",
          "[Removed Lines]",
          "10: pkcs_1_oaep_test.o",
          "",
          "[Added Lines]",
          "10: pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.msvc||testprof/makefile.msvc": [
          "File: testprof/makefile.msvc -> testprof/makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: OBJECTS=base64_test.obj cipher_hash_test.obj der_tests.obj no_prng.obj \\",
          "4: dsa_test.obj ecc_test.obj mac_test.obj modes_test.obj pkcs_1_test.obj \\",
          "5: rsa_test.obj store_test.obj test_driver.obj x86_prof.obj katja_test.obj \\",
          "8: tomcrypt_prof.lib: $(OBJECTS)",
          "9:  lib /out:tomcrypt_prof.lib $(OBJECTS)",
          "",
          "[Removed Lines]",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj pkcs_1_oaep_test.obj",
          "",
          "[Added Lines]",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj pkcs_1_oaep_test.obj \\",
          "7: pkcs_1_emsa_test.obj",
          "",
          "---------------"
        ],
        "testprof/makefile.shared||testprof/makefile.shared": [
          "File: testprof/makefile.shared -> testprof/makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "10: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "14: ifndef LIBTEST",
          "15:    LIBTEST=libtomcrypt_prof.la",
          "",
          "[Removed Lines]",
          "12: pkcs_1_pss_test.o pkcs_1_oaep_test.o",
          "",
          "[Added Lines]",
          "12: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "---------------"
        ],
        "testprof/pkcs_1_emsa_test.c||testprof/pkcs_1_emsa_test.c": [
          "File: testprof/pkcs_1_emsa_test.c -> testprof/pkcs_1_emsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <tomcrypt_test.h>",
          "3: #ifdef LTC_PKCS_1",
          "5: #include \"../notes/rsa-testvectors/pkcs1v15sign-vectors.c\"",
          "9: int pkcs_1_emsa_test(void)",
          "10: {",
          "11:   int hash_idx = find_hash(\"sha1\");",
          "12:   unsigned int i;",
          "14:   DO(hash_is_valid(hash_idx));",
          "16:   for (i = 0; i < sizeof(testcases_emsa)/sizeof(testcases_emsa[0]); ++i) {",
          "17:     testcase_t* t = &testcases_emsa[i];",
          "18:     rsa_key k, *key = &k;",
          "19:     DOX(mp_init_multi(&key->e, &key->d, &key->N, &key->dQ,",
          "20:                        &key->dP, &key->qP, &key->p, &key->q, NULL), t->name);",
          "22:     DOX(mp_read_unsigned_bin(key->e, t->rsa.e, t->rsa.e_l), t->name);",
          "23:     DOX(mp_read_unsigned_bin(key->d, t->rsa.d, t->rsa.d_l), t->name);",
          "24:     DOX(mp_read_unsigned_bin(key->N, t->rsa.n, t->rsa.n_l), t->name);",
          "25:     DOX(mp_read_unsigned_bin(key->dQ, t->rsa.dQ, t->rsa.dQ_l), t->name);",
          "26:     DOX(mp_read_unsigned_bin(key->dP, t->rsa.dP, t->rsa.dP_l), t->name);",
          "27:     DOX(mp_read_unsigned_bin(key->qP, t->rsa.qInv, t->rsa.qInv_l), t->name);",
          "28:     DOX(mp_read_unsigned_bin(key->q, t->rsa.q, t->rsa.q_l), t->name);",
          "29:     DOX(mp_read_unsigned_bin(key->p, t->rsa.p, t->rsa.p_l), t->name);",
          "30:     key->type = PK_PRIVATE;",
          "32:     unsigned int j;",
          "33:     for (j = 0; j < sizeof(t->data)/sizeof(t->data[0]); ++j) {",
          "34:         rsaData_t* s = &t->data[j];",
          "35:         unsigned char buf[20], obuf[256];",
          "36:         unsigned long buflen = sizeof(buf), obuflen = sizeof(obuf);",
          "37:         int stat;",
          "38:         DOX(hash_memory(hash_idx, s->o1, s->o1_l, buf, &buflen), s->name);",
          "39:         DOX(rsa_sign_hash_ex(buf, buflen, obuf, &obuflen, LTC_PKCS_1_V1_5, NULL, -1, hash_idx, 0, key), s->name);",
          "40:         DOX(obuflen == (unsigned long)s->o2_l?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "41:         DOX(memcmp(s->o2, obuf, s->o2_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "42:         DOX(rsa_verify_hash_ex(obuf, obuflen, buf, buflen, LTC_PKCS_1_V1_5, hash_idx, 0, &stat, key), s->name);",
          "43:         DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "46:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "49:   return 0;",
          "50: }",
          "52: #else",
          "54: int pkcs_1_emsa_test(void)",
          "55: {",
          "56:    fprintf(stderr, \"NOP\");",
          "57:    return 0;",
          "58: }",
          "60: #endif",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: int pkcs_1_test(void);",
          "54: int pkcs_1_pss_test(void);",
          "55: int pkcs_1_oaep_test(void);",
          "56: int store_test(void);",
          "57: int rsa_test(void);",
          "58: int dh_test(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: int pkcs_1_emsa_test(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b3c603c6c66cda1761146779d218b593d27d466",
      "candidate_info": {
        "commit_hash": "2b3c603c6c66cda1761146779d218b593d27d466",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/2b3c603c6c66cda1761146779d218b593d27d466",
        "files": [
          "testprof/rsa_test.c"
        ],
        "message": "udpate bleichenbacher signature attack\n\nalso test for too short padding strings",
        "before_after_code_files": [
          "testprof/rsa_test.c||testprof/rsa_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/rsa_test.c||testprof/rsa_test.c": [
          "File: testprof/rsa_test.c -> testprof/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: {",
          "105:    unsigned char in[1024], out[1024], tmp[1024];",
          "106:    rsa_key       key, privKey, pubKey;",
          "108:    unsigned long rsa_msgsize, len, len2, len3, cnt, cnt2;",
          "109:    static unsigned char lparam[] = { 0x01, 0x02, 0x03, 0x04 };",
          "",
          "[Removed Lines]",
          "107:    int           hash_idx, prng_idx, stat, stat2;",
          "",
          "[Added Lines]",
          "107:    int           hash_idx, prng_idx, stat, stat2, i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:    unsigned char* p = in;",
          "362:    unsigned char* p2 = out;",
          "363:    unsigned char* p3 = tmp;",
          "376: #if 0",
          "383: #endif",
          "401: #if 0",
          "409: #endif",
          "421:    rsa_free(&key);",
          "",
          "[Removed Lines]",
          "364:    len = sizeof(in);",
          "365:    len2 = sizeof(out);",
          "366:    cnt = rsa_get_size(&key);",
          "368:    DO(rsa_sign_hash_ex(p, 20, p2, &len2, LTC_PKCS_1_V1_5, &yarrow_prng, prng_idx, hash_idx, 8, &privKey));",
          "370:    DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "371:    DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should succeed\");",
          "372:    len3 = sizeof(tmp);",
          "374:    DO(ltc_mp.rsa_me(p2, len2, p3, &len3, PK_PUBLIC, &key));",
          "377:    printf(\"\\nBefore:\");",
          "378:    for (cnt = 0; cnt < len3; ++cnt) {",
          "379:      if (cnt%32 == 0)",
          "380:        printf(\"\\n%3d:\", cnt);",
          "381:      printf(\" %02x\", p3[cnt]);",
          "382:    }",
          "385:    for (cnt = 0; cnt < len3; ++cnt) {",
          "386:       if (p3[cnt] == 0xff)",
          "387:         break;",
          "388:    }",
          "389:    for (cnt2 = cnt+1; cnt2 < len3; ++cnt2) {",
          "390:       if (p3[cnt2] != 0xff)",
          "391:         break;",
          "392:    }",
          "394:    memmove(&p3[cnt+1], &p3[cnt2], len3-cnt2);",
          "396:    for (cnt = cnt + len3-cnt2+1; cnt < len; ++cnt) {",
          "397:       do {",
          "398:           p3[cnt] = (unsigned char)rand();",
          "399:       } while (p3[cnt] == 0);",
          "400:    }",
          "402:    printf(\"\\nAfter:\");",
          "403:    for (cnt = 0; cnt < len3; ++cnt) {",
          "404:      if (cnt%32 == 0)",
          "405:        printf(\"\\n%3d:\", cnt);",
          "406:      printf(\" %02x\", p3[cnt]);",
          "407:    }",
          "408:    printf(\"\\n\");",
          "411:    len2 = sizeof(out);",
          "413:    DO(ltc_mp.rsa_me(p3, len3, p2, &len2, PK_PRIVATE, &key));",
          "415:    len3 = sizeof(tmp);",
          "417:    DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "418:    DOX(stat == 0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should fail\");",
          "",
          "[Added Lines]",
          "364:    for (i = 0; i < 9; ++i) {",
          "365:      len = sizeof(in);",
          "366:      len2 = sizeof(out);",
          "367:      cnt = rsa_get_size(&key);",
          "369:      DO(rsa_sign_hash_ex(p, 20, p2, &len2, LTC_PKCS_1_V1_5, &yarrow_prng, prng_idx, hash_idx, 8, &privKey));",
          "371:      DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "372:      DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should succeed\");",
          "373:      len3 = sizeof(tmp);",
          "375:      DO(ltc_mp.rsa_me(p2, len2, p3, &len3, PK_PUBLIC, &key));",
          "378:      printf(\"\\nBefore:\");",
          "379:      for (cnt = 0; cnt < len3; ++cnt) {",
          "380:        if (cnt%32 == 0)",
          "381:          printf(\"\\n%3d:\", cnt);",
          "382:        printf(\" %02x\", p3[cnt]);",
          "383:      }",
          "386:      for (cnt = 0; cnt < len3; ++cnt) {",
          "387:         if (p3[cnt] == 0xff)",
          "388:           break;",
          "389:      }",
          "390:      for (cnt2 = cnt+1; cnt2 < len3; ++cnt2) {",
          "391:         if (p3[cnt2] != 0xff)",
          "392:           break;",
          "393:      }",
          "395:      memmove(&p3[cnt+i], &p3[cnt2], len3-cnt2);",
          "397:      for (cnt = cnt + len3-cnt2+i; cnt < len; ++cnt) {",
          "398:         do {",
          "399:             p3[cnt] = (unsigned char)rand();",
          "400:         } while (p3[cnt] == 0);",
          "401:      }",
          "403:      printf(\"\\nAfter:\");",
          "404:      for (cnt = 0; cnt < len3; ++cnt) {",
          "405:        if (cnt%32 == 0)",
          "406:          printf(\"\\n%3d:\", cnt);",
          "407:        printf(\" %02x\", p3[cnt]);",
          "408:      }",
          "409:      printf(\"\\n\");",
          "412:      len2 = sizeof(out);",
          "414:      DO(ltc_mp.rsa_me(p3, len3, p2, &len2, PK_PRIVATE, &key));",
          "416:      len3 = sizeof(tmp);",
          "418:      if (i < 8)",
          "419:        DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey)",
          "420:            == CRYPT_INVALID_PACKET ? CRYPT_OK:CRYPT_INVALID_PACKET, \"should fail\");",
          "421:      else",
          "422:        DOX(rsa_verify_hash_ex(p2, len2, p, 20, LTC_PKCS_1_V1_5, hash_idx, -1, &stat, &pubKey), \"should succeed\");",
          "423:      DOX(stat == 0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, \"should fail\");",
          "424:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}