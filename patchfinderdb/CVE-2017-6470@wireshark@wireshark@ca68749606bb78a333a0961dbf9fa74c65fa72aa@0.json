{
  "cve_id": "CVE-2017-6470",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.4 and 2.0.0 to 2.0.10, there is an IAX2 infinite loop, triggered by packet injection or a malformed capture file. This was addressed in epan/dissectors/packet-iax2.c by constraining packet lateness.",
  "repo": "wireshark/wireshark",
  "patch_hash": "ca68749606bb78a333a0961dbf9fa74c65fa72aa",
  "patch_info": {
    "commit_hash": "ca68749606bb78a333a0961dbf9fa74c65fa72aa",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/ca68749606bb78a333a0961dbf9fa74c65fa72aa",
    "files": [
      "epan/dissectors/packet-iax2.c"
    ],
    "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
    "before_after_code_files": [
      "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
      "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
      "190: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
      "191: static expert_field ei_iax_invalid_len = EI_INIT;",
      "193: static dissector_handle_t iax2_handle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192: static expert_field ei_iax_invalid_ts = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1565:   return offset;",
      "1566: }",
      "1569: {",
      "1571:   nstime_t    ts;",
      "1572:   proto_item *item;",
      "",
      "[Removed Lines]",
      "1568: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
      "1570:   guint32     longts =shortts;",
      "",
      "[Added Lines]",
      "1570: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
      "1572:   guint       longts =shortts;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1580:     time_t start_secs = iax_packet->call_data->start_time.secs;",
      "1581:     time_t abs_secs = start_secs + longts/1000;",
      "1588:     }",
      "1590:     iax_packet->abstime.secs=abs_secs;",
      "",
      "[Removed Lines]",
      "1585:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
      "1586:       longts += 32768;",
      "1587:       abs_secs = start_secs + longts/1000;",
      "",
      "[Added Lines]",
      "1585:     if (pinfo->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
      "1586:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
      "1587:     } else {",
      "1591:       while(abs_secs < pinfo->abs_ts.secs - 16) {",
      "1592:         longts += 32768;",
      "1593:         abs_secs = start_secs + longts/1000;",
      "1594:       }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1597:   iax2_info->timestamp = longts;",
      "1599:   if (iax2_tree) {",
      "1601:     PROTO_ITEM_SET_GENERATED(item);",
      "1603:     ts  = pinfo->abs_ts;",
      "1604:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
      "1607:     PROTO_ITEM_SET_GENERATED(item);",
      "1608:   }",
      "1609: }",
      "",
      "[Removed Lines]",
      "1600:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
      "1606:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
      "",
      "[Added Lines]",
      "1607:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
      "1613:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1677:       }",
      "1679:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
      "1682:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
      "1683:                           ENC_BIG_ENDIAN);",
      "",
      "[Removed Lines]",
      "1680:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "",
      "[Added Lines]",
      "1687:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1691:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
      "1692:   } else {",
      "1694:   }",
      "",
      "[Removed Lines]",
      "1693:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "",
      "[Added Lines]",
      "1700:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1894:     }",
      "1896:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "1898:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "1899:   } else {",
      "1901:   }",
      "1903:   offset += 2;",
      "",
      "[Removed Lines]",
      "1897:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "1900:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "",
      "[Added Lines]",
      "1904:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "1907:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1936:     }",
      "1938:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
      "1940:   } else {",
      "1942:   }",
      "",
      "[Removed Lines]",
      "1939:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "1941:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
      "",
      "[Added Lines]",
      "1946:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "1948:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3180:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
      "3181:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
      "3182:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
      "3184:   };",
      "3186:   expert_module_t* expert_iax;",
      "",
      "[Removed Lines]",
      "3183:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }}",
      "",
      "[Added Lines]",
      "3190:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
      "3191:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e8fe96cdca53cbfabc9247639676275a2483ac3d",
      "candidate_info": {
        "commit_hash": "e8fe96cdca53cbfabc9247639676275a2483ac3d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e8fe96cdca53cbfabc9247639676275a2483ac3d",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nConflicts:\n\tepan/dissectors/packet-iax2.c\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit ca68749606bb78a333a0961dbf9fa74c65fa72aa)\nReviewed-on: https://code.wireshark.org/review/20367\n(cherry picked from commit 9f297d6d51d7daab0c5a6a8d2800e07c29539c2e)\nReviewed-on: https://code.wireshark.org/review/20369\nReviewed-on: https://code.wireshark.org/review/20525\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: static expert_field ei_iax_too_many_transfers = EI_INIT;",
          "188: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
          "189: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
          "191: static const fragment_items iax2_fragment_items = {",
          "192:   &ett_iax2_fragment,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: static expert_field ei_iax_invalid_ts = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:   return offset;",
          "1584: }",
          "1587: {",
          "1589:   nstime_t    ts;",
          "1590:   proto_item *item;",
          "",
          "[Removed Lines]",
          "1586: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
          "1588:   guint32     longts =shortts;",
          "",
          "[Added Lines]",
          "1588: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
          "1590:   guint       longts =shortts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1598:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1599:     time_t abs_secs = start_secs + longts/1000;",
          "1606:     }",
          "1608:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1603:     while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1604:       longts += 32768;",
          "1605:       abs_secs = start_secs + longts/1000;",
          "",
          "[Added Lines]",
          "1603:     if (pinfo->fd->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
          "1604:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
          "1605:     } else {",
          "1608:       while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1609:         longts += 32768;",
          "1610:         abs_secs = start_secs + longts/1000;",
          "1611:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1615:   iax2_info->timestamp = longts;",
          "1617:   if (iax2_tree) {",
          "1619:     PROTO_ITEM_SET_GENERATED(item);",
          "1621:     ts  = pinfo->fd->abs_ts;",
          "1622:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
          "1625:     PROTO_ITEM_SET_GENERATED(item);",
          "1626:   }",
          "1627: }",
          "",
          "[Removed Lines]",
          "1618:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
          "1624:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
          "",
          "[Added Lines]",
          "1624:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
          "1630:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1695:       }",
          "1697:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
          "1700:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
          "1701:                           ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1698:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1704:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1709:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
          "1710:   } else {",
          "1712:   }",
          "",
          "[Removed Lines]",
          "1711:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1717:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1912:     }",
          "1914:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1916:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1917:   } else {",
          "1919:   }",
          "1921:   offset += 2;",
          "",
          "[Removed Lines]",
          "1915:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1918:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1921:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1924:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1954:     }",
          "1956:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
          "1958:   } else {",
          "1960:   }",
          "",
          "[Removed Lines]",
          "1957:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1959:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1963:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1965:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3160:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
          "3161:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
          "3162:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
          "3163:   };",
          "3165:   expert_module_t* expert_iax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3169:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b89174ef4c531a1917437fff586fe525ee7bf2d",
      "candidate_info": {
        "commit_hash": "0b89174ef4c531a1917437fff586fe525ee7bf2d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0b89174ef4c531a1917437fff586fe525ee7bf2d",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit ca68749606bb78a333a0961dbf9fa74c65fa72aa)\nReviewed-on: https://code.wireshark.org/review/20367\n(cherry picked from commit 9f297d6d51d7daab0c5a6a8d2800e07c29539c2e)\nReviewed-on: https://code.wireshark.org/review/20369",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
          "187: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
          "188: static expert_field ei_iax_invalid_len = EI_INIT;",
          "190: static const fragment_items iax2_fragment_items = {",
          "191:   &ett_iax2_fragment,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: static expert_field ei_iax_invalid_ts = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1562:   return offset;",
          "1563: }",
          "1566: {",
          "1568:   nstime_t    ts;",
          "1569:   proto_item *item;",
          "",
          "[Removed Lines]",
          "1565: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
          "1567:   guint32     longts =shortts;",
          "",
          "[Added Lines]",
          "1567: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
          "1569:   guint       longts =shortts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1577:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1578:     time_t abs_secs = start_secs + longts/1000;",
          "1585:     }",
          "1587:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1582:     while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1583:       longts += 32768;",
          "1584:       abs_secs = start_secs + longts/1000;",
          "",
          "[Added Lines]",
          "1582:     if (pinfo->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
          "1583:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
          "1584:     } else {",
          "1587:       while(abs_secs < pinfo->fd->abs_ts.secs - 16) {",
          "1588:         longts += 32768;",
          "1589:         abs_secs = start_secs + longts/1000;",
          "1590:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1594:   iax2_info->timestamp = longts;",
          "1596:   if (iax2_tree) {",
          "1598:     PROTO_ITEM_SET_GENERATED(item);",
          "1600:     ts  = pinfo->fd->abs_ts;",
          "1601:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
          "1604:     PROTO_ITEM_SET_GENERATED(item);",
          "1605:   }",
          "1606: }",
          "",
          "[Removed Lines]",
          "1597:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
          "1603:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
          "",
          "[Added Lines]",
          "1603:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
          "1609:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1674:       }",
          "1676:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
          "1679:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
          "1680:                           ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1677:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1683:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1688:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
          "1689:   } else {",
          "1691:   }",
          "",
          "[Removed Lines]",
          "1690:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1696:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1891:     }",
          "1893:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1895:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1896:   } else {",
          "1898:   }",
          "1900:   offset += 2;",
          "",
          "[Removed Lines]",
          "1894:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1897:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1900:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1903:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1933:     }",
          "1935:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
          "1937:   } else {",
          "1939:   }",
          "",
          "[Removed Lines]",
          "1936:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1938:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1942:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1944:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3181:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
          "3182:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
          "3183:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
          "3185:   };",
          "3187:   expert_module_t* expert_iax;",
          "",
          "[Removed Lines]",
          "3184:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }}",
          "",
          "[Added Lines]",
          "3190:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "3191:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
      "candidate_info": {
        "commit_hash": "9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9f297d6d51d7daab0c5a6a8d2800e07c29539c2e",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: Add a timestamp check.\n\nDon't try to process timestamps that are more than 60 seconds apart.\nAvoids the infinite loop in bug 13432.\n\nBug: 13432\nChange-Id: I05aea4c733c94cbfe832f03ba826c74a41e6bb2f\nReviewed-on: https://code.wireshark.org/review/20366\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit ca68749606bb78a333a0961dbf9fa74c65fa72aa)\nReviewed-on: https://code.wireshark.org/review/20367",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: static expert_field ei_iax_circuit_id_conflict = EI_INIT;",
          "190: static expert_field ei_iax_peer_address_unsupported = EI_INIT;",
          "191: static expert_field ei_iax_invalid_len = EI_INIT;",
          "193: static const fragment_items iax2_fragment_items = {",
          "194:   &ett_iax2_fragment,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: static expert_field ei_iax_invalid_ts = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:   return offset;",
          "1564: }",
          "1567: {",
          "1569:   nstime_t    ts;",
          "1570:   proto_item *item;",
          "",
          "[Removed Lines]",
          "1566: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, iax_packet_data *iax_packet, guint16 shortts)",
          "1568:   guint32     longts =shortts;",
          "",
          "[Added Lines]",
          "1568: static void iax2_add_ts_fields(packet_info *pinfo, proto_tree *iax2_tree, tvbuff_t *tvb, iax_packet_data *iax_packet, guint16 shortts)",
          "1570:   guint       longts =shortts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1578:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1579:     time_t abs_secs = start_secs + longts/1000;",
          "1586:     }",
          "1588:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1583:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1584:       longts += 32768;",
          "1585:       abs_secs = start_secs + longts/1000;",
          "",
          "[Added Lines]",
          "1583:     if (pinfo->abs_ts.secs - abs_secs > MAX_SECS_DIFF) {",
          "1584:       proto_tree_add_expert(iax2_tree, pinfo, &ei_iax_invalid_ts, tvb, 0, 0);",
          "1585:     } else {",
          "1589:       while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1590:         longts += 32768;",
          "1591:         abs_secs = start_secs + longts/1000;",
          "1592:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:   iax2_info->timestamp = longts;",
          "1597:   if (iax2_tree) {",
          "1599:     PROTO_ITEM_SET_GENERATED(item);",
          "1601:     ts  = pinfo->abs_ts;",
          "1602:     nstime_delta(&ts, &ts, &iax_packet->abstime);",
          "1605:     PROTO_ITEM_SET_GENERATED(item);",
          "1606:   }",
          "1607: }",
          "",
          "[Removed Lines]",
          "1598:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, NULL, 0, 0, &iax_packet->abstime);",
          "1604:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, NULL, 0, 0, &ts);",
          "",
          "[Added Lines]",
          "1605:     item = proto_tree_add_time(iax2_tree, hf_iax2_absts, tvb, 0, 0, &iax_packet->abstime);",
          "1611:     item = proto_tree_add_time(iax2_tree, hf_iax2_lateness, tvb, 0, 0, &ts);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1675:       }",
          "1677:       proto_tree_add_uint(iax2_tree, hf_iax2_ts, tvb, offset+2, 4, ts);",
          "1680:       proto_tree_add_item(iax2_tree, hf_iax2_oseqno, tvb, offset+6, 1,",
          "1681:                           ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1678:       iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1685:       iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1689:       packet_type_tree = proto_item_add_subtree(packet_type_base, ett_iax2_type);",
          "1690:   } else {",
          "1692:   }",
          "",
          "[Removed Lines]",
          "1691:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1698:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1892:     }",
          "1894:     proto_tree_add_item(iax2_tree, hf_iax2_minividts, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1896:     proto_tree_add_item(iax2_tree, hf_iax2_minividmarker, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1897:   } else {",
          "1899:   }",
          "1901:   offset += 2;",
          "",
          "[Removed Lines]",
          "1895:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1898:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1902:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1905:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1934:     }",
          "1936:     proto_tree_add_uint(iax2_tree, hf_iax2_minits, tvb, offset, 2, ts);",
          "1938:   } else {",
          "1940:   }",
          "",
          "[Removed Lines]",
          "1937:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "1939:     iax2_add_ts_fields(pinfo, iax2_tree, iax_packet, (guint16)ts);",
          "",
          "[Added Lines]",
          "1944:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "1946:     iax2_add_ts_fields(pinfo, iax2_tree, tvb, iax_packet, (guint16)ts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3182:     { &ei_iax_too_many_transfers, { \"iax2.too_many_transfers\", PI_PROTOCOL, PI_WARN, \"Too many transfers for iax_call\", EXPFILL }},",
          "3183:     { &ei_iax_circuit_id_conflict, { \"iax2.circuit_id_conflict\", PI_PROTOCOL, PI_WARN, \"Circuit ID conflict\", EXPFILL }},",
          "3184:     { &ei_iax_peer_address_unsupported, { \"iax2.peer_address_unsupported\", PI_PROTOCOL, PI_WARN, \"Peer address unsupported\", EXPFILL }},",
          "3186:   };",
          "3188:   expert_module_t* expert_iax;",
          "",
          "[Removed Lines]",
          "3185:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }}",
          "",
          "[Added Lines]",
          "3192:     { &ei_iax_invalid_len, { \"iax2.invalid_len\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "3193:     { &ei_iax_invalid_ts, { \"iax2.invalid_ts\", PI_PROTOCOL, PI_WARN, \"Invalid timestamp\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42f299be6abb302f32cec78b1c0812364c9f9285",
      "candidate_info": {
        "commit_hash": "42f299be6abb302f32cec78b1c0812364c9f9285",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/42f299be6abb302f32cec78b1c0812364c9f9285",
        "files": [
          "epan/dissectors/packet-iax2.c"
        ],
        "message": "IAX2: fix an infinite loop\n\nBug: 12260\nChange-Id: I29b23ff2d862027fd44c6dd4de3cbb304664fd05\nReviewed-on: https://code.wireshark.org/review/14473\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ],
          "candidate": [
            "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-iax2.c||epan/dissectors/packet-iax2.c": [
          "File: epan/dissectors/packet-iax2.c -> epan/dissectors/packet-iax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:   if (iax_packet->abstime.secs == -1) {",
          "1581:     time_t start_secs = iax_packet->call_data->start_time.secs;",
          "1586:     while(abs_secs < pinfo->abs_ts.secs - 16) {",
          "1587:       longts += 32768;",
          "1589:     }",
          "1591:     iax_packet->abstime.secs=abs_secs;",
          "",
          "[Removed Lines]",
          "1582:     gint32 abs_secs = (gint32)(start_secs + longts/1000);",
          "1588:       abs_secs = (gint32)(start_secs + longts/1000);",
          "",
          "[Added Lines]",
          "1582:     time_t abs_secs = start_secs + longts/1000;",
          "1588:       abs_secs = start_secs + longts/1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fddc4551b99445519c93f1036ee5cbc862ff47a6",
      "candidate_info": {
        "commit_hash": "fddc4551b99445519c93f1036ee5cbc862ff47a6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/fddc4551b99445519c93f1036ee5cbc862ff47a6",
        "files": [
          "epan/dissectors/packet-ieee80211-radiotap.c"
        ],
        "message": "Always display vht mcs data rate, but mark invalid assuming BCC encoding.\n\nBug: 12859\nChange-Id: Iaf2242b0dcf16f211d5a7565b96099cc44e8bf3d\nReviewed-on: https://code.wireshark.org/review/17899\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 27960cc6aba46a9d48923ee0d4c641201e44b590)\nReviewed-on: https://code.wireshark.org/review/19678\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ieee80211-radiotap.c||epan/dissectors/packet-ieee80211-radiotap.c": [
          "File: epan/dissectors/packet-ieee80211-radiotap.c -> epan/dissectors/packet-ieee80211-radiotap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: static expert_field ei_radiotap_data_past_header = EI_INIT;",
          "219: static expert_field ei_radiotap_present_reserved = EI_INIT;",
          "220: static expert_field ei_radiotap_present = EI_INIT;",
          "222: static dissector_handle_t ieee80211_radio_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: static expert_field ei_radiotap_invalid_data_rate = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1804:      }",
          "1806:      if (can_calculate_rate && mcs <= MAX_MCS_VHT_INDEX &&",
          "1809:       float rate = ieee80211_vhtinfo[mcs].rates[bandwidth][gi_length] * nss;",
          "1811:        rate_ti = proto_tree_add_float_format(user_tree,",
          "1812:          hf_radiotap_vht_datarate[i],",
          "1813:          tvb, offset, 12, rate,",
          "1814:          \"Data Rate: %.1f Mb/s\", rate);",
          "1815:        PROTO_ITEM_SET_GENERATED(rate_ti);",
          "1816:       }",
          "1817:      }",
          "1818:     }",
          "",
          "[Removed Lines]",
          "1807:          nss <= MAX_VHT_NSS &&",
          "1808:          ieee80211_vhtvalid[mcs].valid[bandwidth][nss]) {",
          "1810:       if (rate != 0.0f && user_tree) {",
          "",
          "[Added Lines]",
          "1808:          nss <= MAX_VHT_NSS ) {",
          "1810:       if (rate != 0.0f ) {",
          "1816:        if (ieee80211_vhtvalid[mcs].valid[bandwidth][nss] == FALSE)",
          "1817:         expert_add_info(pinfo, rate_ti, &ei_radiotap_invalid_data_rate);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2743:   { &ei_radiotap_present, { \"radiotap.present.radiotap_and_vendor\", PI_MALFORMED, PI_ERROR, \"Both radiotap and vendor namespace specified in bitmask word\", EXPFILL }},",
          "2744:   { &ei_radiotap_present_reserved, { \"radiotap.present.reserved.unknown\", PI_UNDECODED, PI_NOTE, \"Unknown Radiotap fields, code not implemented, Please check radiotap documentation, Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "2745:   { &ei_radiotap_data_past_header, { \"radiotap.data_past_header\", PI_MALFORMED, PI_ERROR, \"Radiotap data goes past the end of the radiotap header\", EXPFILL }},",
          "2746:  };",
          "2748:  module_t *radiotap_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2749:   { &ei_radiotap_invalid_data_rate, { \"radiotap.vht.datarate.invalid\", PI_PROTOCOL, PI_WARN, \"Data rate invalid\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}