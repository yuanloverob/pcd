{
  "cve_id": "CVE-2015-3159",
  "cve_desc": "The abrt-action-install-debuginfo-to-abrt-cache help program in Automatic Bug Reporting Tool (ABRT) does not properly handle the process environment before invoking abrt-action-install-debuginfo, which allows local users to gain privileges.",
  "repo": "abrt/abrt",
  "patch_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
  "patch_info": {
    "commit_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
    "files": [
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ],
    "message": "a-a-i-d-t-a-cache: sanitize umask\n\nWe cannot trust anything when running suided program.\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ]
  },
  "patch_diff": {
    "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
      "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:         if (u != 0)",
      "183:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
      "184:         putenv(path_env);",
      "185:     }",
      "187:     execvp(EXECUTABLE, (char **)args);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "187:         umask(0022);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4794b39efc62c9ba92b38b419de3babbbcd8cfb",
      "candidate_info": {
        "commit_hash": "a4794b39efc62c9ba92b38b419de3babbbcd8cfb",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/a4794b39efc62c9ba92b38b419de3babbbcd8cfb",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: postpone changing ownership of new dump directories\n\nFlorian Weimer <fweimer@redhat.com>:\n\n    Currently, dd_create changes ownership of the directory immediately,\n    when it is still empty. This means that any operations within the\n    directory (which happen as the root user) can race with changes to\n    the directory contents by the user. If you delay changing directory\n    ownership until all the files have created and written, this is no\n    longer a problem.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:     if (dd)",
          "678:     {",
          "679:         char *rootdir = get_rootdir(pid);",
          "",
          "[Removed Lines]",
          "676:     dd = dd_create(path, fsuid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "680:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:         }",
          "832: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:         dd_reset_ownership(dd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
      "candidate_info": {
        "commit_hash": "fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/fdf93685d4f3fc36fe50d34a11e24662c4cb2d8c",
        "files": [
          "src/daemon/abrt-action-save-package-data.c"
        ],
        "message": "a-a-save-package-data: turn off reading data from root directories\n\nMaking copies of files from arbitrary root directories is not secure.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-action-save-package-data.c||src/daemon/abrt-action-save-package-data.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-action-save-package-data.c||src/daemon/abrt-action-save-package-data.c": [
          "File: src/daemon/abrt-action-save-package-data.c -> src/daemon/abrt-action-save-package-data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     char *cmdline = NULL;",
          "225:     char *executable = NULL;",
          "227:     char *package_short_name = NULL;",
          "228:     struct pkg_envra *pkg_name = NULL;",
          "229:     char *component = NULL;",
          "",
          "[Removed Lines]",
          "226:     char *rootdir = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     cmdline = dd_load_text_ext(dd, FILENAME_CMDLINE, DD_FAIL_QUIETLY_ENOENT);",
          "235:     executable = dd_load_text(dd, FILENAME_EXECUTABLE);",
          "",
          "[Removed Lines]",
          "236:     rootdir = dd_load_text_ext(dd, FILENAME_ROOTDIR,",
          "237:                                DD_FAIL_QUIETLY_ENOENT | DD_LOAD_TEXT_RETURN_NULL_ON_FAILURE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:     }",
          "250:     if (!pkg_name)",
          "251:     {",
          "252:         if (settings_bProcessUnpackaged)",
          "",
          "[Removed Lines]",
          "249:     pkg_name = rpm_get_package_nvr(executable, rootdir);",
          "",
          "[Added Lines]",
          "246:     pkg_name = rpm_get_package_nvr(executable, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:     }",
          "334:     dd = dd_opendir(dump_dir_name, /*flags:*/ 0);",
          "335:     if (!dd)",
          "",
          "[Removed Lines]",
          "332:     component = rpm_get_component(executable, rootdir);",
          "",
          "[Added Lines]",
          "329:     component = rpm_get_component(executable, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:  ret:",
          "356:     free(cmdline);",
          "357:     free(executable);",
          "359:     free(package_short_name);",
          "360:     free_pkg_envra(pkg_name);",
          "361:     free(component);",
          "",
          "[Removed Lines]",
          "358:     free(rootdir);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d023c32a565e83306cddf34c894477b7aaf33d1",
      "candidate_info": {
        "commit_hash": "7d023c32a565e83306cddf34c894477b7aaf33d1",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/7d023c32a565e83306cddf34c894477b7aaf33d1",
        "files": [
          "configure.ac",
          "src/daemon/abrt.conf"
        ],
        "message": "configure: move the default dump location to /var/spool\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/daemon/abrt.conf||src/daemon/abrt.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: AC_ARG_WITH([defaultdumplocation],",
          "148:             AS_HELP_STRING([--with-defaultdumplocation=DIR],",
          "151: AC_SUBST([DEFAULT_DUMP_LOCATION], [$with_defaultdumplocation])",
          "153: AC_ARG_WITH(augeaslenslibdir,",
          "",
          "[Removed Lines]",
          "149:                            [Default dump location ('LOCALSTATEDIR/tmp/abrt')]),",
          "150:             [], [with_defaultdumplocation=${localstatedir}/tmp/abrt])",
          "",
          "[Added Lines]",
          "149:                            [Default dump location ('LOCALSTATEDIR/spool/abrt')]),",
          "150:             [], [with_defaultdumplocation=${localstatedir}/spool/abrt])",
          "",
          "---------------"
        ],
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: MaxCrashReportsSize = 1000",
          "12: # Specify where you want to store coredumps and all files which are needed for",
          "14: #",
          "15: # Changing dump location could cause problems with SELinux. See man abrt_selinux(8).",
          "16: #",
          "19: # If you want to automatically clean the upload directory you have to tweak the",
          "20: # selinux policy.",
          "",
          "[Removed Lines]",
          "13: # reporting. (default:/var/tmp/abrt)",
          "17: #DumpLocation = /var/tmp/abrt",
          "",
          "[Added Lines]",
          "13: # reporting. (default:/var/spool/abrt)",
          "17: #DumpLocation = /var/spool/abrt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6dc5900266663ed6c2d170f9c3ed3c9b033d1ba",
      "candidate_info": {
        "commit_hash": "e6dc5900266663ed6c2d170f9c3ed3c9b033d1ba",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/e6dc5900266663ed6c2d170f9c3ed3c9b033d1ba",
        "files": [
          "abrt.spec.in"
        ],
        "message": "spec: add libselinux-devel to BRs\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "abrt.spec.in||abrt.spec.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "abrt.spec.in||abrt.spec.in": [
          "File: abrt.spec.in -> abrt.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: BuildRequires: satyr-devel >= 0.11",
          "75: BuildRequires: systemd-python",
          "76: BuildRequires: augeas",
          "78: Requires: libreport >= %{libreport_ver}",
          "79: Requires: satyr >= 0.11",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: BuildRequires: libselinux-devel",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
      "candidate_info": {
        "commit_hash": "8939398b82006ba1fec4ed491339fc075f43fc7c",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c",
        "files": [
          "src/daemon/abrt-server.c",
          "src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h",
          "src/lib/abrt_conf.c",
          "src/lib/hooklib.c",
          "src/plugins/abrt-dump-oops.c",
          "src/plugins/abrt-dump-xorg.c"
        ],
        "message": "make the dump directories owned by root by default\n\nIt was discovered that the abrt event scripts create a user-readable\ncopy of a sosreport file in abrt problem directories, and include\nexcerpts of /var/log/messages selected by the user-controlled process\nname, leading to an information disclosure.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nRelated: #1212868\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/daemon/abrt-server.c||src/daemon/abrt-server.c",
          "src/daemon/abrt.conf||src/daemon/abrt.conf",
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c",
          "src/include/libabrt.h||src/include/libabrt.h",
          "src/lib/abrt_conf.c||src/lib/abrt_conf.c",
          "src/lib/hooklib.c||src/lib/hooklib.c",
          "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c",
          "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/daemon/abrt-server.c||src/daemon/abrt-server.c": [
          "File: src/daemon/abrt-server.c -> src/daemon/abrt-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   with this program; if not, write to the Free Software Foundation, Inc.,",
          "16:   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
          "18: #include \"libabrt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"problem_api.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dirname, g_settings_dump_location);",
          "155:     }",
          "157:     {",
          "158:         if (errno == ENOTDIR)",
          "159:         {",
          "",
          "[Removed Lines]",
          "156:     if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "",
          "[Added Lines]",
          "157:     if (g_settings_privatereports)",
          "158:     {",
          "159:         struct stat statbuf;",
          "160:         if (lstat(dirname, &statbuf) != 0 || !S_ISDIR(statbuf.st_mode))",
          "161:         {",
          "162:             error_msg(\"Path '%s' isn't directory\", dirname);",
          "164:         }",
          "166:         struct group *gr = getgrnam(\"abrt\");",
          "167:         if (!gr)",
          "168:         {",
          "169:             error_msg(\"Group 'abrt' does not exist\");",
          "170:             return 500;",
          "171:         }",
          "172:         if (statbuf.st_uid != 0 || !(statbuf.st_gid == 0 || statbuf.st_gid == gr->gr_gid) || statbuf.st_mode & 07)",
          "173:         {",
          "174:             error_msg(\"Problem directory '%s' isn't owned by root:abrt or others are not restricted from access\", dirname);",
          "175:             return 403;",
          "176:         }",
          "177:         struct dump_dir *dd = dd_opendir(dirname, DD_OPEN_READONLY);",
          "178:         const bool complete = dd && problem_dump_dir_is_complete(dd);",
          "179:         dd_close(dd);",
          "180:         if (complete)",
          "181:         {",
          "182:             error_msg(\"Problem directory '%s' has already been processed\", dirname);",
          "183:             return 403;",
          "184:         }",
          "185:     }",
          "186:     else if (!dump_dir_accessible_by_uid(dirname, client_uid))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:     if (!dd)",
          "382:     {",
          "383:         error_msg_and_die(\"Error creating problem directory '%s'\", path);",
          "",
          "[Removed Lines]",
          "380:     struct dump_dir *dd = dd_create(path, client_uid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "410:     struct dump_dir *dd = dd_create(path, g_settings_privatereports ? 0 : client_uid, DEFAULT_DUMP_DIR_MODE);",
          "",
          "---------------"
        ],
        "src/daemon/abrt.conf||src/daemon/abrt.conf": [
          "File: src/daemon/abrt.conf -> src/daemon/abrt.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #                session; otherwise No.",
          "44: #",
          "45: # ShortenedReporting = yes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: # Disable this if you want to regular users to own the problem data colleted by",
          "48: # abrt.",
          "49: #",
          "50: PrivateReports = yes",
          "",
          "---------------"
        ],
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:         }",
          "683:     }",
          "686:     if (setting_MakeCompatCore && ulimit_c != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:     const uid_t dduid = g_settings_privatereports ? 0 : fsuid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "773:         goto create_user_core;",
          "774:     }",
          "784:     if (dd)",
          "785:     {",
          "786:         char *rootdir = get_rootdir(pid);",
          "788:         dd_create_basic_files(dd, fsuid, NULL);",
          "790:         char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];",
          "",
          "[Removed Lines]",
          "783:     dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "[Added Lines]",
          "786:     dd = dd_create_skeleton(path, dduid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);",
          "",
          "---------------"
        ],
        "src/include/libabrt.h||src/include/libabrt.h": [
          "File: src/include/libabrt.h -> src/include/libabrt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: extern char *        g_settings_autoreporting_event;",
          "63: #define g_settings_shortenedreporting abrt_g_settings_shortenedreporting",
          "64: extern bool          g_settings_shortenedreporting;",
          "67: #define load_abrt_conf abrt_load_abrt_conf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: #define g_settings_privatereports abrt_g_settings_privatereports",
          "66: extern bool          g_settings_privatereports;",
          "",
          "---------------"
        ],
        "src/lib/abrt_conf.c||src/lib/abrt_conf.c": [
          "File: src/lib/abrt_conf.c -> src/lib/abrt_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: bool          g_settings_autoreporting = 0;",
          "28: char *        g_settings_autoreporting_event = NULL;",
          "29: bool          g_settings_shortenedreporting = 0;",
          "31: void free_abrt_conf_data()",
          "32: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: bool          g_settings_privatereports = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     else",
          "103:         g_settings_shortenedreporting = 0;",
          "105:     GHashTableIter iter;",
          "106:     const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     value = get_map_string_item_or_NULL(settings, \"PrivateReports\");",
          "107:     if (value)",
          "108:     {",
          "109:         g_settings_privatereports = string_to_bool(value);",
          "110:         remove_map_string_item(settings, \"PrivateReports\");",
          "111:     }",
          "",
          "---------------"
        ],
        "src/lib/hooklib.c||src/lib/hooklib.c": [
          "File: src/lib/hooklib.c -> src/lib/hooklib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: {",
          "411:     load_abrt_conf();",
          "415:     char *problem_id = NULL;",
          "416:     if (dd)",
          "",
          "[Removed Lines]",
          "413:     struct dump_dir *dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
          "",
          "[Added Lines]",
          "413:     struct dump_dir *dd = NULL;",
          "415:     if (g_settings_privatereports)",
          "416:         dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);",
          "417:     else",
          "418:         dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);",
          "",
          "---------------"
        ],
        "src/plugins/abrt-dump-oops.c||src/plugins/abrt-dump-oops.c": [
          "File: src/plugins/abrt-dump-oops.c -> src/plugins/abrt-dump-oops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         mode = DEFAULT_DUMP_DIR_MODE;",
          "190:         my_euid = geteuid();",
          "191:     }",
          "193:     pid_t my_pid = getpid();",
          "194:     unsigned idx = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     if (g_settings_privatereports)",
          "193:     {",
          "194:         if (world_readable_dump)",
          "195:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
          "197:         mode = DEFAULT_DUMP_DIR_MODE;",
          "198:         my_euid = 0;",
          "199:     }",
          "",
          "---------------"
        ],
        "src/plugins/abrt-dump-xorg.c||src/plugins/abrt-dump-xorg.c": [
          "File: src/plugins/abrt-dump-xorg.c -> src/plugins/abrt-dump-xorg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         mode = DEFAULT_DUMP_DIR_MODE;",
          "83:         my_euid = geteuid();",
          "84:     }",
          "86:     pid_t my_pid = getpid();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     if (g_settings_privatereports)",
          "86:     {",
          "87:         if ((g_opts & OPT_x))",
          "88:             log(\"Not going to make dump directories world readable because PrivateReports is on\");",
          "90:         mode = DEFAULT_DUMP_DIR_MODE;",
          "91:         my_euid = 0;",
          "92:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}