{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
      "candidate_info": {
        "commit_hash": "7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e35e81dcbf150df7e3c26d59c1c2dddf0f147ab",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow the json_set() function to overwrite the same element more than once.\n\nFossilOrigin-Name: f237f60e4fa9171dfe9a77c8637595c2701e971034d41bd6018944e8b2b27a6f",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1083:   const char *zKey;",
          "1084:   JsonNode *pRoot = &pParse->aNode[iRoot];",
          "1085:   if( zPath[0]==0 ) return pRoot;",
          "1086:   if( zPath[0]=='.' ){",
          "1087:     if( pRoot->eType!=JSON_OBJECT ) return 0;",
          "1088:     zPath++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:   if( pRoot->jnFlags & JNODE_REPLACE ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eda2249ab5cf523093e4849c317d9a4b1743f7e15d96bdd6bb6cc423302914",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
      "candidate_info": {
        "commit_hash": "27a037354c9bc67a65f84e45584dc67c24c15f58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27a037354c9bc67a65f84e45584dc67c24c15f58",
        "files": [
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a division-by-zero error in fts5 caused by a corrupt database.\n\nFossilOrigin-Name: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
        "before_after_code_files": [
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     if( rc==SQLITE_OK ) rc = pApi->xRowCount(pFts, &nRow);",
          "589:     if( rc==SQLITE_OK ) rc = pApi->xColumnTotalSize(pFts, -1, &nToken);",
          "590:     if( rc==SQLITE_OK ) p->avgdl = (double)nToken  / (double)nRow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     assert( rc!=SQLITE_OK || nRow>0 );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078: int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){",
          "1079:   int rc = fts5StorageLoadTotals(p, 0);",
          "1080:   if( rc==SQLITE_OK ){",
          "1082:   }",
          "1083:   return rc;",
          "1084: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:     if( p->nTotalRow<=0 ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "4657: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4655: #-------------------------------------------------------------------------",
          "4656: reset_db",
          "4657: do_execsql_test 38.0 {",
          "4658:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4659:   INSERT INTO t1 VALUES('a', 'b');",
          "4660:   INSERT INTO t1 VALUES('a', 'b');",
          "4661:   SELECT quote(block) FROM t1_data WHERE rowid=1;",
          "4662: } {X'020202'}",
          "4664: do_execsql_test 38.1 {",
          "4665:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4666: } {a b a b}",
          "4668: do_execsql_test 38.2 {",
          "4669:   UPDATE t1_data SET block = X'000202' WHERE rowid=1;",
          "4670: }",
          "4671: breakpoint",
          "4672: do_catchsql_test 38.3 {",
          "4673:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4674: } {1 {database disk image is malformed}}",
          "4676: db close",
          "4677: sqlite3 db test.db",
          "4678: do_catchsql_test 38.4 {",
          "4679:   SELECT * FROM t1('a b') ORDER BY rank;",
          "4680: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cd56cad5efead5097e9918c87313bb46e583fe62bae0df1be60e10117e2c3cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d23ea74d44f458f39b51ae39a9b0d617947a90d",
      "candidate_info": {
        "commit_hash": "9d23ea74d44f458f39b51ae39a9b0d617947a90d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d23ea74d44f458f39b51ae39a9b0d617947a90d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix other problems similar to ticket [c0390363].\n\nFossilOrigin-Name: 96ff2ba9c4bb71d5f7c6f359986a76a5364b7ac3e1a612441543a9eabecf31df",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 33da6092d3d04b6eb6ab396b8c4f668e3529e26bf11e26f5fcb9b61fe3470197",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:     case TK_GE:",
          "5015:     case TK_PLUS:",
          "5016:     case TK_MINUS:",
          "5020:     case TK_BITOR:",
          "5022:     case TK_LSHIFT:",
          "5023:     case TK_RSHIFT:",
          "5025:       if( exprImpliesNotNull(pParse, p->pRight, pNN, iTab, seenNot) ) return 1;",
          "5027:     }",
          "",
          "[Removed Lines]",
          "5017:     case TK_STAR:",
          "5018:     case TK_REM:",
          "5019:     case TK_BITAND:",
          "5021:     case TK_SLASH:",
          "5024:     case TK_CONCAT: {",
          "",
          "[Added Lines]",
          "5020:     case TK_CONCAT:",
          "5021:       seenNot = 1;",
          "5023:     case TK_STAR:",
          "5024:     case TK_REM:",
          "5025:     case TK_BITAND:",
          "5026:     case TK_SLASH: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5102:   if( ExprHasProperty(pExpr, EP_FromJoin) ) return WRC_Prune;",
          "5103:   switch( pExpr->op ){",
          "5104:     case TK_ISNOT:",
          "5107:     case TK_ISNULL:",
          "5108:     case TK_NOTNULL:",
          "5109:     case TK_IS:",
          "",
          "[Removed Lines]",
          "5105:     case TK_NOT:",
          "5106:     case TK_BITNOT:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5128:       }",
          "5129:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5131:     case TK_AND:",
          "5132:       if( sqlite3ExprImpliesNonNullRow(pExpr->pLeft, pWalker->u.iCur)",
          "5133:        && sqlite3ExprImpliesNonNullRow(pExpr->pRight, pWalker->u.iCur)",
          "5134:       ){",
          "5135:         pWalker->eCode = 1;",
          "5136:       }",
          "5137:       return WRC_Prune;",
          "5139:     case TK_BETWEEN:",
          "5140:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5141:       return WRC_Prune;",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   INSERT INTO t0(c0) VALUES (NULL);",
          "304: }",
          "308:   SELECT * FROM t0 WHERE ~('' BETWEEN t0.c0 AND TRUE);",
          "309: } {{}}",
          "312:   SELECT ~('' BETWEEN t0.c0 AND TRUE) FROM t0;",
          "313: } {-1}",
          "317: finish_test",
          "",
          "[Removed Lines]",
          "306: breakpoint",
          "307: do_execsql_test 8.1 {",
          "311: do_execsql_test 8.2 {",
          "",
          "[Added Lines]",
          "306: do_execsql_test 8.1.1 {",
          "309: do_execsql_test 8.1.2 {",
          "313: foreach {tn expr} {",
          "314:   1 \" 0  ==  (34 BETWEEN c0 AND 33)\"",
          "315:   2 \" 1  !=  (34 BETWEEN c0 AND 33)\"",
          "316:   3 \"-1   <  (34 BETWEEN c0 AND 33)\"",
          "317:   4 \"-1  <=  (34 BETWEEN c0 AND 33)\"",
          "318:   5 \" 1   >  (34 BETWEEN c0 AND 33)\"",
          "319:   6 \" 1  >=  (34 BETWEEN c0 AND 33)\"",
          "320:   7 \" 1   -  (34 BETWEEN c0 AND 33)\"",
          "321:   8 \"-1   +  (34 BETWEEN c0 AND 33)\"",
          "322:   9 \" 1   |  (34 BETWEEN c0 AND 33)\"",
          "323:  10 \" 1  <<  (34 BETWEEN c0 AND 33)\"",
          "324:  11 \" 1  >>  (34 BETWEEN c0 AND 33)\"",
          "325:  12 \" 1  ||  (34 BETWEEN c0 AND 33)\"",
          "326: } {",
          "327:   do_execsql_test 8.3.$tn.1 \"SELECT * FROM t0 WHERE $expr ORDER BY c0\" { {} }",
          "328:   do_execsql_test 8.3.$tn.2 \"SELECT ($expr) IS TRUE FROM t0\"           { 1 }",
          "329: }",
          "331: do_execsql_test 8.4 {",
          "332:   CREATE TABLE t1(a, b);",
          "333:   INSERT INTO t1 VALUES(1, 2), (3, 4);",
          "334:   CREATE TABLE t2(x, y);",
          "335: }",
          "337: foreach {tn expr} {",
          "338:   1 \" 0  ==  (a=0 AND y=1)\"",
          "339:   2 \" 1  !=  (a=0 AND y=1)\"",
          "340:   3 \"-1  <   (a=0 AND y=1)\"",
          "341:   4 \"-1  <=  (a=0 AND y=1)\"",
          "342:   5 \" 1   >  (a=0 AND y=1)\"",
          "343:   6 \" 1  >=  (a=0 AND y=1)\"",
          "344:   7 \" 1   -  (a=0 AND y=1)\"",
          "345:   8 \"-1   +  (a=0 AND y=1)\"",
          "346:   9 \" 1   |  (a=0 AND y=1)\"",
          "347:   10 \"1  <<  (a=0 AND y=1)\"",
          "348:   11 \"1  >>  (a=0 AND y=1)\"",
          "349:   12 \"1  ||  (a=0 AND y=1)\"",
          "351:   13 \" 0  ==  (10 BETWEEN y AND b)\"",
          "352:   14 \" 1  !=  (10 BETWEEN y AND b)\"",
          "353:   15 \"-1  <   (10 BETWEEN y AND b)\"",
          "354:   16 \"-1  <=  (10 BETWEEN y AND b)\"",
          "355:   17 \" 1   >  (10 BETWEEN y AND b)\"",
          "356:   18 \" 1  >=  (10 BETWEEN y AND b)\"",
          "357:   19 \" 1   -  (10 BETWEEN y AND b)\"",
          "358:   20 \"-1   +  (10 BETWEEN y AND b)\"",
          "359:   21 \" 1   |  (10 BETWEEN y AND b)\"",
          "360:   22 \" 1  <<  (10 BETWEEN y AND b)\"",
          "361:   23 \" 1  >>  (10 BETWEEN y AND b)\"",
          "362:   24 \" 1  ||  (10 BETWEEN y AND b)\"",
          "364:   25 \" 1  ||  (10 BETWEEN y AND b)\"",
          "365: } {",
          "366:   do_execsql_test 8.5.$tn.1 \"",
          "367:     SELECT * FROM t1 LEFT JOIN t2 WHERE $expr",
          "368:   \" {1 2 {} {} 3 4 {} {}}",
          "370:   do_execsql_test 8.5.$tn.2 \"",
          "371:     SELECT ($expr) IS TRUE FROM t1 LEFT JOIN t2",
          "372:   \" {1 1}",
          "373: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01996dae49cbf5928d44bf0b9c68965e17656f98",
      "candidate_info": {
        "commit_hash": "01996dae49cbf5928d44bf0b9c68965e17656f98",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01996dae49cbf5928d44bf0b9c68965e17656f98",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Back out check-in [008112bcef561a8], reenabling deprecated PRAGMAs when the SQLITE_OMIT_DEPRECATED compile-time option is used, because way too many TH3 tests depend on those deprecated PRAGMAs.\n\nFossilOrigin-Name: 9dbf512d1c4627a28d60f4e7238cb100d7a4e11f976139b07ad1c59e9b584c7d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d0a949fd92e19fbf243a2e3a1a7c2cdb111f9a6943949d2420dd846bc7d9285",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: #endif",
          "212: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "214:  {/* zName:     */ \"count_changes\",",
          "219: #endif",
          "221: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "222:  {/* zName:     */ \"data_store_directory\",",
          "",
          "[Removed Lines]",
          "213: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "220: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: #endif",
          "244:  {/* zName:     */ \"default_cache_size\",",
          "249: #endif",
          "251: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "252: #if !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "253:  {/* zName:     */ \"defer_foreign_keys\",",
          "",
          "[Removed Lines]",
          "242: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "243: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "250: #endif",
          "",
          "[Added Lines]",
          "240: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258: #endif",
          "259: #endif",
          "260: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "262:  {/* zName:     */ \"empty_result_callbacks\",",
          "267: #endif",
          "269: #if !defined(SQLITE_OMIT_UTF16)",
          "270:  {/* zName:     */ \"encoding\",",
          "",
          "[Removed Lines]",
          "261: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "268: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305: #endif",
          "306: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:  {/* zName:     */ \"full_column_names\",",
          "316:  {/* zName:     */ \"fullfsync\",",
          "",
          "[Removed Lines]",
          "307: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "313: #endif",
          "314: #endif",
          "315: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "542: #endif",
          "543: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "545:  {/* zName:     */ \"short_column_names\",",
          "551: #endif",
          "552:  {/* zName:     */ \"shrink_memory\",",
          "",
          "[Removed Lines]",
          "544: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "550: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   TYPE: FLAG",
          "26:   ARG:  SQLITE_FullColNames",
          "27:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "30:   NAME: short_column_names",
          "31:   TYPE: FLAG",
          "32:   ARG:  SQLITE_ShortColNames",
          "33:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "36:   NAME: count_changes",
          "37:   TYPE: FLAG",
          "38:   ARG:  SQLITE_CountRows",
          "39:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "42:   NAME: empty_result_callbacks",
          "43:   TYPE: FLAG",
          "44:   ARG:  SQLITE_NullCallback",
          "45:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "48:   NAME: legacy_file_format",
          "49:   TYPE: FLAG",
          "",
          "[Removed Lines]",
          "28:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "34:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "40:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "46:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   NAME: default_cache_size",
          "157:   FLAG: NeedSchema Result0 SchemaReq NoColumns1",
          "158:   COLS: cache_size",
          "163:   NAME: page_size",
          "164:   FLAG: Result0 SchemaReq NoColumns1",
          "",
          "[Removed Lines]",
          "159:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "160:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "155:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
      "candidate_info": {
        "commit_hash": "9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c014f8b0c63b3b8c8c2ae30dd9c9cbe1b883952",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Unless the \"--freelist-corrupt\" option is specified, do not have the .recover command attempt to recover data from pages that are on the database free-list.\n\nFossilOrigin-Name: 8d2f52bb640d6d0f84b18d746043e56f45a73ace93239be1d036701f7f4018fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3943: static void shellInt32(",
          "3944:   sqlite3_context *context,",
          "3945:   int argc,",
          "3946:   sqlite3_value **argv",
          "3947: ){",
          "3948:   const unsigned char *pBlob;",
          "3949:   int nBlob;",
          "3950:   int iInt;",
          "3952:   nBlob = sqlite3_value_bytes(argv[0]);",
          "3953:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);",
          "3954:   iInt = sqlite3_value_int(argv[1]);",
          "3956:   if( iInt>=0 && (iInt+1)*4<=nBlob ){",
          "3957:     const unsigned char *a = &pBlob[iInt*4];",
          "3958:     sqlite3_int64 iVal = ((sqlite3_int64)a[0]<<24)",
          "3959:                        + ((sqlite3_int64)a[1]<<16)",
          "3960:                        + ((sqlite3_int64)a[2]<< 8)",
          "3961:                        + ((sqlite3_int64)a[3]<< 0);",
          "3962:     sqlite3_result_int64(context, iVal);",
          "3963:   }",
          "3964: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4105:                             shellPutsFunc, 0, 0);",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "4108: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4109:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4110:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4137:     sqlite3_create_function(p->db, \"shell_int32\", 2, SQLITE_UTF8, 0,",
          "4138:                             shellInt32, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6378:   shellExec(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6408:   int i;",
          "6411:   for(i=1; i<nArg; i++){",
          "6412:     char *z = azArg[i];",
          "6413:     int n;",
          "6414:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6415:     n = strlen(z);",
          "6416:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6417:       bFreelist = 0;",
          "6418:     }",
          "6419:     else{",
          "6420:       raw_printf(stderr,",
          "6421:         \"unexpected option: %s - expected \\\"--freelist-corrupt\\\"\\n\",",
          "6422:         azArg[i]",
          "6423:       );",
          "6424:       return 1;",
          "6425:     }",
          "6426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6395:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6396:     \");\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6448:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\"",
          "6449:   );",
          "6451:   if( bFreelist ){",
          "6452:     shellExec(pState->db, &rc,",
          "6453:       \"WITH trunk(pgno) AS (\"",
          "6454:       \"  SELECT shell_int32(\"",
          "6455:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=1), 8) AS x \"",
          "6456:       \"      WHERE x>0\"",
          "6457:       \"    UNION\"",
          "6458:       \"  SELECT shell_int32(\"",
          "6459:       \"      (SELECT data FROM sqlite_dbpage WHERE pgno=trunk.pgno), 0) AS x \"",
          "6460:       \"      FROM trunk WHERE x>0\"",
          "6461:       \"),\"",
          "6462:       \"freelist(data, n, freepgno) AS (\"",
          "6463:       \"  SELECT data, shell_int32(data, 1)-1, t.pgno \"",
          "6464:       \"      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno\"",
          "6465:       \"    UNION ALL\"",
          "6466:       \"  SELECT data, n-1, shell_int32(data, 2+n) \"",
          "6467:       \"      FROM freelist WHERE n>=0\"",
          "6468:       \")\"",
          "6469:       \"REPLACE INTO recovery.freelist SELECT freepgno FROM freelist;\"",
          "6470:     );",
          "6471:   }",
          "6473:   shellExec(pState->db, &rc,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6424:     \"    )\"",
          "6425:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6426:     \") \"",
          "6428:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6429:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6430:     \");\"",
          "",
          "[Removed Lines]",
          "6427:     \"FROM pages WHERE maxlen > 0;\"",
          "",
          "[Added Lines]",
          "6503:     \"FROM pages WHERE maxlen > 0 AND i NOT IN freelist;\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}