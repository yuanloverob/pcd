{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c748633a9ac764766dca9c2e9872a2996414945",
      "candidate_info": {
        "commit_hash": "8c748633a9ac764766dca9c2e9872a2996414945",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c748633a9ac764766dca9c2e9872a2996414945",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to columnar output in the CLI.  Columns automatically expand to contain the largest row.\n\nFossilOrigin-Name: 4e1db8e9a9ee370a398f13fd8546a520111b8cfb84460389535b5bc5bd9f4f82",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 445ed5dab2c26e9f4a7fb5277abdba3359d23cf5318cfd0d8322162d9616ee7a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1945: ){",
          "1946:   int i;",
          "1947:   for(i=0; i<nArg; i++){",
          "1955:     fputs(zSep, p->out);",
          "1957:   }",
          "1958:   fputs(zSep, p->out);",
          "1959:   fputs(\"\\n\", p->out);",
          "",
          "[Removed Lines]",
          "1948:     int w;",
          "1949:     if( i<ArraySize(p->actualWidth) ){",
          "1950:       w = p->actualWidth[i];",
          "1951:       if( w<0 ) w = -w;",
          "1952:     }else{",
          "1953:        w = 10;",
          "1954:     }",
          "1956:     print_dashes(p->out, w+2);",
          "",
          "[Added Lines]",
          "1949:     print_dashes(p->out, p->actualWidth[i]+2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1989:       }",
          "1990:       break;",
          "1991:     }",
          "2015:       }",
          "2017:       if( p->cnt++==0 ){",
          "2033:         for(i=0; i<nArg; i++){",
          "2087:         }",
          "2088:       }",
          "2089:       if( azArg==0 ) break;",
          "2091:       for(i=0; i<nArg; i++){",
          "2097:         }",
          "2107:           }",
          "2108:         }",
          "2109:         utf8_width_print(p->out, w, azArg[i] ? azArg[i] : p->nullValue);",
          "2111:       }",
          "2112:       break;",
          "2113:     }",
          "",
          "[Removed Lines]",
          "1992:     case MODE_Table:",
          "1993:     case MODE_Markdown:",
          "1994:     case MODE_Explain:",
          "1995:     case MODE_Column: {",
          "1996:       int showHdr;",
          "1997:       char *rowSep;",
          "1998:       char *colSep;",
          "1999:       char *rowStart;",
          "2000:       if( p->cMode==MODE_Column ){",
          "2001:         showHdr = p->showHeader;",
          "2002:         rowSep = p->rowSeparator;",
          "2003:         colSep = \"  \";",
          "2004:         rowStart = \"\";",
          "2005:       }else if( p->cMode==MODE_Explain ){",
          "2006:         showHdr = 1;",
          "2007:         rowSep = SEP_Row;",
          "2008:         colSep = \"  \";",
          "2009:         rowStart = \"\";",
          "2010:       }else{",
          "2011:         showHdr = 1;",
          "2012:         rowSep = \" |\\n\";",
          "2013:         colSep = \" | \";",
          "2014:         rowStart = \"| \";",
          "2023:         static const int aExplainWidths[] = {4, 13, 4, 4, 4, 13, 2, 13};",
          "2024:         const int *colWidth;",
          "2025:         int nWidth;",
          "2026:         if( p->cMode==MODE_Explain ){",
          "2027:           colWidth = aExplainWidths;",
          "2028:           nWidth = ArraySize(aExplainWidths);",
          "2029:         }else{",
          "2030:           colWidth = p->colWidth;",
          "2031:           nWidth = p->nWidth;",
          "2032:         }",
          "2034:           int w, n;",
          "2035:           if( i<nWidth ){",
          "2036:             w = colWidth[i];",
          "2037:           }else{",
          "2038:             w = 0;",
          "2039:           }",
          "2040:           if( w==0 ){",
          "2041:             w = strlenChar(azCol[i] ? azCol[i] : \"\");",
          "2042:             if( w<10 ) w = 10;",
          "2043:             n = strlenChar(azArg && azArg[i] ? azArg[i] : p->nullValue);",
          "2044:             if( w<n ) w = n;",
          "2045:           }",
          "2046:           if( i<ArraySize(p->actualWidth) ){",
          "2047:             p->actualWidth[i] = w;",
          "2048:           }",
          "2049:         }",
          "2050:         if( p->cMode==MODE_Table ){",
          "2051:           print_row_separator(p, nArg, \"+\");",
          "2052:         }",
          "2053:         if( showHdr ){",
          "2054:           fputs(rowStart, p->out);",
          "2055:           for(i=0; i<nArg; i++){",
          "2056:             int w;",
          "2057:             if( i<ArraySize(p->actualWidth) ){",
          "2058:                w = p->actualWidth[i];",
          "2059:                if( w<0 ) w = -w;",
          "2060:             }else{",
          "2061:                w = 10;",
          "2062:             }",
          "2063:             utf8_width_print(p->out, w, azCol[i]);",
          "2064:             fputs(i==nArg-1 ? rowSep : colSep, p->out);",
          "2065:           }",
          "2066:           for(i=0; i<nArg; i++){",
          "2067:             int w;",
          "2068:             if( i<ArraySize(p->actualWidth) ){",
          "2069:                w = p->actualWidth[i];",
          "2070:                if( w<0 ) w = -w;",
          "2071:             }else{",
          "2072:                w = 10;",
          "2073:             }",
          "2074:             if( p->cMode==MODE_Table || p->cMode==MODE_Markdown ){",
          "2075:               char *zX = p->cMode==MODE_Markdown ? \"|\" : \"+\";",
          "2076:               fputs(zX, p->out);",
          "2077:               print_dashes(p->out, w+2);",
          "2078:               if( i==nArg-1 ){",
          "2079:                 fputs(zX, p->out);",
          "2080:                 fputs(\"\\n\", p->out);",
          "2081:               }",
          "2082:             }else{",
          "2083:               print_dashes(p->out, w);",
          "2084:               fputs(i==nArg-1 ? rowSep : colSep, p->out);",
          "2085:             }",
          "2086:           }",
          "2090:       fputs(rowStart, p->out);",
          "2092:         int w;",
          "2093:         if( i<ArraySize(p->actualWidth) ){",
          "2094:            w = p->actualWidth[i];",
          "2095:         }else{",
          "2096:            w = 10;",
          "2098:         if( p->cMode==MODE_Explain ){",
          "2099:           if( azArg[i] && strlenChar(azArg[i])>w ){",
          "2100:             w = strlenChar(azArg[i]);",
          "2101:           }",
          "2102:           if( i==1 && p->aiIndent && p->pStmt ){",
          "2103:             if( p->iIndent<p->nIndent ){",
          "2104:               utf8_printf(p->out, \"%*.s\", p->aiIndent[p->iIndent], \"\");",
          "2105:             }",
          "2106:             p->iIndent++;",
          "2110:         utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : colSep);",
          "",
          "[Added Lines]",
          "1985:     case MODE_Explain: {",
          "1986:       static const int aExplainWidth[] = {4, 13, 4, 4, 4, 13, 2, 13};",
          "1987:       if( nArg>ArraySize(aExplainWidth) ){",
          "1988:         nArg = ArraySize(aExplainWidth);",
          "1992:           int w = aExplainWidth[i];",
          "1993:           utf8_width_print(p->out, w, azCol[i]);",
          "1994:           fputs(i==nArg-1 ? \"\\n\" : \"  \", p->out);",
          "1999:         int w = aExplainWidth[i];",
          "2000:         if( azArg[i] && strlenChar(azArg[i])>w ){",
          "2001:           w = strlenChar(azArg[i]);",
          "2003:         if( i==1 && p->aiIndent && p->pStmt ){",
          "2004:           if( p->iIndent<p->nIndent ){",
          "2005:             utf8_printf(p->out, \"%*.s\", p->aiIndent[p->iIndent], \"\");",
          "2007:           p->iIndent++;",
          "2010:         fputs(i==nArg-1 ? \"\\n\" : \"  \", p->out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3042:   sqlite3_finalize(pQ);",
          "3043: }",
          "3058: ){",
          "3060: }",
          "",
          "[Removed Lines]",
          "3045: #if 0",
          "3055: static void exec_prepared_stmt_tablemode(",
          "3061: #endif",
          "",
          "[Added Lines]",
          "2954: static void exec_prepared_stmt_columnar(",
          "2958:   int nRow = 0;",
          "2959:   int nColumn = 0;",
          "2960:   char **azData = 0;",
          "2961:   char *zMsg = 0;",
          "2962:   const char *z;",
          "2963:   int rc;",
          "2964:   int i, j, nTotal, w, n;",
          "2965:   const char *colSep;",
          "2966:   const char *rowSep;",
          "2968:   rc = sqlite3_get_table(p->db, sqlite3_sql(pStmt),",
          "2969:                          &azData, &nRow, &nColumn, &zMsg);",
          "2970:   if( rc ){",
          "2971:     utf8_printf(p->out, \"ERROR: %s\\n\", zMsg);",
          "2972:     sqlite3_free(zMsg);",
          "2973:     sqlite3_free_table(azData);",
          "2974:     return;",
          "2975:   }",
          "2976:   if( nColumn>p->nWidth ){",
          "2977:     p->colWidth = realloc(p->colWidth, nColumn*2*sizeof(int));",
          "2978:     if( p->colWidth==0 ) shell_out_of_memory();",
          "2979:     for(i=p->nWidth; i<nColumn; i++) p->colWidth[i] = 0;",
          "2980:     p->nWidth = nColumn;",
          "2981:     p->actualWidth = &p->colWidth[nColumn];",
          "2982:   }",
          "2983:   memset(p->actualWidth, 0, nColumn*sizeof(int));",
          "2984:   for(i=0; i<nColumn; i++){",
          "2985:     w = p->colWidth[i];",
          "2986:     if( w<0 ) w = -w;",
          "2987:     p->actualWidth[i] = w;",
          "2988:   }",
          "2989:   nTotal = nColumn*(nRow+1);",
          "2990:   for(i=0; i<nTotal; i++){",
          "2991:     z = azData[i];",
          "2992:     if( z==0 ) z = p->nullValue;",
          "2993:     n = strlenChar(z);",
          "2994:     j = i%nColumn;",
          "2995:     if( n>p->actualWidth[j] ) p->actualWidth[j] = n;",
          "2996:   }",
          "2997:   if( p->cMode==MODE_Column ){",
          "2998:     colSep = \"  \";",
          "2999:     rowSep = \"\\n\";",
          "3000:     if( p->showHeader ){",
          "3001:       for(i=0; i<nColumn; i++){",
          "3002:         w = p->actualWidth[i];",
          "3003:         if( p->colWidth[i]<0 ) w = -w;",
          "3004:         utf8_width_print(p->out, w, azData[i]);",
          "3005:         fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3006:       }",
          "3007:       for(i=0; i<nColumn; i++){",
          "3008:         print_dashes(p->out, p->actualWidth[i]);",
          "3009:         fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3010:       }",
          "3011:     }",
          "3012:   }else{",
          "3013:     colSep = \" | \";",
          "3014:     rowSep = \" |\\n\";",
          "3015:     if( p->cMode==MODE_Table ) print_row_separator(p, nColumn, \"+\");",
          "3016:     fputs(\"| \", p->out);",
          "3017:     for(i=0; i<nColumn; i++){",
          "3018:       w = p->actualWidth[i];",
          "3019:       n = strlenChar(azData[i]);",
          "3020:       utf8_printf(p->out, \"%*s%s%*s\", (w-n)/2, \"\", azData[i], (w-n+1)/2, \"\");",
          "3021:       fputs(i==nColumn-1?\" |\\n\":\" | \", p->out);",
          "3022:     }",
          "3023:     print_row_separator(p, nColumn, p->cMode==MODE_Table ? \"+\" : \"|\");",
          "3024:   }",
          "3025:   for(i=nColumn, j=0; i<nTotal; i++, j++){",
          "3026:     if( j==0 && p->cMode!=MODE_Column ) fputs(\"| \", p->out);",
          "3027:     z = azData[i];",
          "3028:     if( z==0 ) z = p->nullValue;",
          "3029:     w = p->actualWidth[j];",
          "3030:     if( p->colWidth[j]<0 ) w = -w;",
          "3031:     utf8_width_print(p->out, w, z);",
          "3032:     if( j==nColumn-1 ){",
          "3033:       fputs(rowSep, p->out);",
          "3034:       j = -1;",
          "3035:     }else{",
          "3036:       fputs(colSep, p->out);",
          "3037:     }",
          "3038:   }",
          "3039:   if( p->cMode==MODE_Table ){",
          "3040:     print_row_separator(p, nColumn, \"+\");",
          "3041:   }",
          "3042:   sqlite3_free_table(azData);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3069: ){",
          "3070:   int rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3054:   if( pArg->cMode==MODE_Column",
          "3055:    || pArg->cMode==MODE_Table",
          "3056:    || pArg->cMode==MODE_Markdown",
          "3057:   ){",
          "3058:     exec_prepared_stmt_columnar(pArg, pStmt);",
          "3059:     return;",
          "3060:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e99cb2da5fc664c2e40304868e3d0815b18f7614",
      "candidate_info": {
        "commit_hash": "e99cb2da5fc664c2e40304868e3d0815b18f7614",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e99cb2da5fc664c2e40304868e3d0815b18f7614",
        "files": [
          "Makefile.msc",
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid",
          "tool/mkmsvcmin.tcl"
        ],
        "message": "Export the public RBU entry points from the Win32 DLL.\n\nFossilOrigin-Name: e62d1791f428b7a9bb14a59483f12d8ee08afbf4061a5e3be8f64787444301e7",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "tool/mkmsvcmin.tcl||tool/mkmsvcmin.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: SESSION = 0",
          "249: !ENDIF",
          "251: # Set the source code file to be used by executables and libraries when",
          "252: # they need the amalgamation.",
          "253: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # Set this to non-0 to enable support for the rbu extension.",
          "252: #",
          "253: !IFNDEF RBU",
          "254: RBU = 0",
          "255: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_PREUPDATE_HOOK=1",
          "365: !ENDIF",
          "367: # These are the \"extended\" SQLite compilation options used when compiling for",
          "368: # the Windows 10 platform.",
          "369: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: # Should the rbu extension be enabled?  If so, add compilation options",
          "374: # to enable it.",
          "375: #",
          "376: !IF $(RBU)!=0",
          "377: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_RBU=1",
          "378: !ENDIF",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1742: sqlite3.def: libsqlite3.lib",
          "1743:  echo EXPORTS > sqlite3.def",
          "1744:  dumpbin /all libsqlite3.lib \\",
          "1746:   | sort >> sqlite3.def",
          "1747: # <</block2>>",
          "",
          "[Removed Lines]",
          "1745:   | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+1 _?(sqlite3(?:session|changeset|changegroup|rebaser)?_[^@]*)(?:@\\d+)?$$\" \\1 \\",
          "",
          "[Added Lines]",
          "1758:   | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+1 _?(sqlite3(?:session|changeset|changegroup|rebaser|rbu)?_[^@]*)(?:@\\d+)?$$\" \\1 \\",
          "",
          "---------------"
        ],
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: SESSION = 0",
          "211: !ENDIF",
          "213: # Set the source code file to be used by executables and libraries when",
          "214: # they need the amalgamation.",
          "215: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: # Set this to non-0 to enable support for the rbu extension.",
          "214: #",
          "215: !IFNDEF RBU",
          "216: RBU = 0",
          "217: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_PREUPDATE_HOOK=1",
          "296: !ENDIF",
          "298: # These are the \"extended\" SQLite compilation options used when compiling for",
          "299: # the Windows 10 platform.",
          "300: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: # Should the rbu extension be enabled?  If so, add compilation options",
          "305: # to enable it.",
          "306: #",
          "307: !IF $(RBU)!=0",
          "308: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_RBU=1",
          "309: !ENDIF",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977: sqlite3.def: Replace.exe $(LIBOBJ)",
          "978:  echo EXPORTS > sqlite3.def",
          "979:  dumpbin /all $(LIBOBJ) \\",
          "981:   | sort >> sqlite3.def",
          "983: $(SQLITE3EXE): shell.c $(SHELL_CORE_DEP) $(LIBRESOBJS) $(SHELL_CORE_SRC) $(SQLITE3H)",
          "",
          "[Removed Lines]",
          "980:   | .\\Replace.exe \"^\\s+/EXPORT:_?(sqlite3(?:session|changeset|changegroup|rebaser)?_[^@,]*)(?:@\\d+|,DATA)?$$\" $$1 true \\",
          "",
          "[Added Lines]",
          "993:   | .\\Replace.exe \"^\\s+/EXPORT:_?(sqlite3(?:session|changeset|changegroup|rebaser|rbu)?_[^@,]*)(?:@\\d+|,DATA)?$$\" $$1 true \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dc5f1d282d1e75f8a3791b0c95cb8f143b2a956323cb6c889d76d20db7f89257",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkmsvcmin.tcl||tool/mkmsvcmin.tcl": [
          "File: tool/mkmsvcmin.tcl -> tool/mkmsvcmin.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: sqlite3.def: Replace.exe $(LIBOBJ)",
          "84:  echo EXPORTS > sqlite3.def",
          "85:  dumpbin /all $(LIBOBJ) \\\\",
          "87:   | sort >> sqlite3.def",
          "88: }]]",
          "",
          "[Removed Lines]",
          "86:   | .\\Replace.exe \"^\\s+/EXPORT:_?(sqlite3(?:session|changeset|changegroup|rebaser)?_[^@,]*)(?:@\\d+|,DATA)?$$\" $$1 true \\\\",
          "",
          "[Added Lines]",
          "86:   | .\\Replace.exe \"^\\s+/EXPORT:_?(sqlite3(?:session|changeset|changegroup|rebaser|rbu)?_[^@,]*)(?:@\\d+|,DATA)?$$\" $$1 true \\\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99670abb82c4c67d528a554ef994a0d4e47b7199",
      "candidate_info": {
        "commit_hash": "99670abb82c4c67d528a554ef994a0d4e47b7199",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99670abb82c4c67d528a554ef994a0d4e47b7199",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Do not set OP_Column flags on the instructions generated by sqlite3ExprCodeGetColumn() if the opcode generated is not really an OP_Column, which might happen if the column is virtual. Fix for ticket [b439bfcfb7deedc6]\n\nFossilOrigin-Name: 2401e04730a156aa48787b91af4e516406cb7635145e430be62fd16481816237",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8e876c82a246ceed32b166f64e05dfe5ce4ab4c6820be60404109b43d36bb80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3487:   assert( pParse->pVdbe!=0 );",
          "3488:   sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pTab, iTable, iColumn, iReg);",
          "3489:   if( p5 ){",
          "3491:   }",
          "3492:   return iReg;",
          "3493: }",
          "",
          "[Removed Lines]",
          "3490:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "",
          "[Added Lines]",
          "3490:     VdbeOp *pOp = sqlite3VdbeGetOp(pParse->pVdbe,-1);",
          "3491:     if( pOp->opcode==OP_Column ) pOp->p5 = p5;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:   PRAGMA integrity_check;",
          "343: } {ok}",
          "346: # Ensure that the SrcList_item.colUsed field is set correctly when a",
          "347: # generated column appears in the USING clause of a join.",
          "348: #",
          "",
          "[Removed Lines]",
          "345: # 2019-12-09 but report from Yongheng Chen",
          "",
          "[Added Lines]",
          "345: # 2019-12-09 bug report from Yongheng Chen",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "370: } {456}",
          "373: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: # 2019-12-14 ticket b439bfcfb7deedc6",
          "373: #",
          "374: sqlite3 db :memory:",
          "375: do_execsql_test gencol1-14.10 {",
          "376:   CREATE TABLE t0(c0 AS(1 >= 1), c1 UNIQUE AS(TYPEOF(c0)), c2);",
          "377:   INSERT INTO t0 VALUES(0);",
          "378:   REINDEX;",
          "379:   SELECT * FROM t0;",
          "380: } {1 integer 0}",
          "381: do_catchsql_test gencol1-14.10 {",
          "382:   INSERT INTO t0 VALUES(2);",
          "383: } {1 {UNIQUE constraint failed: t0.c1}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a83c100728451558b8b3e07e4d172bf9ef9f7fb",
      "candidate_info": {
        "commit_hash": "2a83c100728451558b8b3e07e4d172bf9ef9f7fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a83c100728451558b8b3e07e4d172bf9ef9f7fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/shell.c.in"
        ],
        "message": "Provide the -DSQLITE_ENABLE_INTERNAL_FUNCTIONS=1 compile-time option.  Fix the \".testctrl internal_function\" command in the CLI so that it does not signal an error on a valid input.\n\nFossilOrigin-Name: 8ee2ce92c082771675d0e8be597043cf9f0fd4f8a73d6a1498bf8743d6b3904a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4edddcc0bc8d71e9b8abac67bc3766f1d9143dddd1f59264859ce65e5aa9b8c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3312:   }",
          "3313: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3315: #ifdef SQLITE_ENABLE_INTERNAL_FUNCTIONS",
          "3319:   db->mDbFlags |= DBFLAG_InternalFunc;",
          "3320: #endif",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9356:         case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:",
          "9357:           rc2 = sqlite3_test_control(testctrl, p->db);",
          "9358:           break;",
          "9360:         case SQLITE_TESTCTRL_IMPOSTER:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9358:           isOk = 3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d575e46f329d9268f7f32002d711c0f7b35d3bb",
      "candidate_info": {
        "commit_hash": "9d575e46f329d9268f7f32002d711c0f7b35d3bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d575e46f329d9268f7f32002d711c0f7b35d3bb",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/corruptL.test",
          "test/fts3corrupt4.test",
          "test/fuzzdata8.db",
          "test/window1.test"
        ],
        "message": "Merge latest changes from trunk.  This branch still does not work.\n\nFossilOrigin-Name: 6144387238c03b8b33ae98d624f7ffa44a7829d3e0d4a0a01b5528e71ab4f08b",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/corruptL.test||test/corruptL.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2070: ){",
          "2074: }",
          "",
          "[Removed Lines]",
          "2071:   assert( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );",
          "",
          "[Added Lines]",
          "2071:   assert_fts3_nc( iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2321:   }",
          "2323:  search_success:",
          "2326:     p->rc = FTS5_CORRUPT;",
          "2327:     return;",
          "2328:   }",
          "2329:   pIter->iTermLeafOffset = pIter->iLeafOffset;",
          "2330:   pIter->iTermLeafPgno = pIter->iLeafPgno;",
          "",
          "[Removed Lines]",
          "2324:   pIter->iLeafOffset = iOff + nNew;",
          "2325:   if( pIter->iLeafOffset>n || nNew<1 ){",
          "",
          "[Added Lines]",
          "2324:   if( (i64)iOff+nNew>n || nNew<1 ){",
          "2328:   pIter->iLeafOffset = iOff + nNew;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "10108:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "10109: } {1 {database disk image is malformed}}",
          "10112: sqlite3_fts5_may_be_corrupt 0",
          "10113: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10111: #-------------------------------------------------------------------------",
          "10112: reset_db",
          "10113: do_test 69.0 {",
          "10114:   sqlite3 db {}",
          "10115:   db deserialize [decode_hexdb {",
          "10116: .open --hexdb",
          "10117: | size 32768 pagesize 4096 filename crash-31c462b8b665d0.db",
          "10118: | page 1 offset 0",
          "10119: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "10120: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 08   .....@  ........",
          "10121: |     32: 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "10122: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "10123: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 00 00 00 00 00 00   ...k............",
          "10124: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "10125: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "10126: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "10127: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "10128: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "10129: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "10130: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "10131: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "10132: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "10133: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "10134: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "10135: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "10136: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "10137: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "10138: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "10139: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "10140: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "10141: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "10142: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "10143: |   3776: 63 39 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c9, c1, c2)i....",
          "10144: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "10145: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "10146: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "10147: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "10148: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "10149: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "10150: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "10151: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "10152: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "10153: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "10154: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "10155: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "10156: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "10157: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "10158: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "10159: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "10160: | page 3 offset 8192",
          "10161: |      0: 0d 00 00 00 03 0c 94 00 0f e6 0f ef 0c 94 00 00   ................",
          "10162: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "10163: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "10164: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 30 31 36 30   ...........20160",
          "10165: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 01 01 34 01   609...........4.",
          "10166: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 04 01 02   ..........5.....",
          "10167: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 04   ......0000000...",
          "10168: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "10169: |   3328: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "10170: |   3344: 02 02 03 06 00 02 02 03 06 01 02 02 03 06 01 02   ................",
          "10171: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "10172: |   3376: 03 06 01 02 02 03 06 01 02 02 01 08 63 6f 6d 70   ............comp",
          "10173: |   3392: 69 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64   iler...........d",
          "10174: |   3408: 62 73 74 61 74 07 02 03 01 02 03 01 02 03 02 04   bstat...........",
          "10175: |   3424: 65 62 75 67 04 02 02 01 02 02 01 02 02 01 06 65   ebug...........e",
          "10176: |   3440: 6e 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02   nable...........",
          "10177: |   3456: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "10178: |   3472: 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01   ................",
          "10179: |   3488: 01 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "10180: |   3504: 02 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02   ......xtension..",
          "10181: |   3520: 04 01 02 04 01 02 04 01 04 66 74 73 34 1a 02 03   .........fts4...",
          "10182: |   3536: 01 02 03 01 02 03 04 01 35 0d 02 03 01 02 03 01   ........5.......",
          "10183: |   3552: 02 03 01 03 67 63 63 01 aa 03 01 02 03 01 02 03   ....gcc.........",
          "10184: |   3568: 02 06 65 6f 70 6f 6c 79 10 02 03 02 02 03 01 02   ..eopoly........",
          "10185: |   3584: 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03 01 02   ...json1........",
          "10186: |   3600: 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01 02 03   ...load.........",
          "10187: |   3616: 01 03 6d 61 78 1c 02 02 01 02 02 01 02 02 02 05   ..max...........",
          "10188: |   3632: 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03 04 04   emory...........",
          "10189: |   3648: 73 79 73 35 16 02 03 01 02 03 01 02 03 01 06 6e   sys5...........n",
          "10190: |   3664: 6f 63 61 73 65 02 06 01 02 02 03 06 01 02 02 03   ocase...........",
          "10191: |   3680: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06   ................",
          "10192: |   3696: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "10193: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "10194: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 01   ...omit.........",
          "10195: |   3744: ff ff ff ff ff ff ff ff f0 00 00 00 00 00 01 02   ................",
          "10196: |   3760: 58 81 96 4d 01 06 01 02 02 03 06 01 02 02 03 06   X..M............",
          "10197: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "10198: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "10199: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "10200: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "10201: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "10202: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "10203: |   3872: 02 01 06 01 1e 02 01 06 01 01 02 01 06 01 01 02   ................",
          "10204: |   3888: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "10205: |   3904: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "10206: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "10207: |   3936: 00 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "10208: |   3952: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "10209: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "10210: |   3984: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "10211: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "10212: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "10213: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "10214: |   4048: 12 44 13 11 0f 47 13 0f 0b 0e 11 10 0f 0e 10 0f   .D...G..........",
          "10215: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "10216: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "10217: | page 4 offset 12288",
          "10218: |      0: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "10219: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "10220: | page 5 offset 16384",
          "10221: |      0: 0d 00 00 00 24 0c 0a 00 0f d8 0f af 0f 86 0f 74   ....$..........t",
          "10222: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "10223: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "10224: |     48: 0d bb 0d a0 0d 84 0d 68 0d 4f 0d 00 00 00 00 00   .......h.O......",
          "10225: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "10226: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "10227: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "10228: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 22   DSAFE=0XNOCASE..",
          "10229: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "10230: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "10231: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f   IT LOAD EXTENSIO",
          "10232: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 d3 19 4f   NXBINARY. ..3..O",
          "10233: |   3200: 4d 49 54 28 2c 4f 41 44 b2 04 55 85 44 54 e5 34   MIT(,OAD..U.DT.4",
          "10234: |   3216: 94 f4 e5 84 e4 f4 34 15 34 51 e1 f0 50 03 30 f1   ......4.4Q..P.0.",
          "10235: |   3232: 74 f4 d4 95 42 04 c4 f4 14 42 04 55 85 44 54 e5   t...B....B.U.DT.",
          "10236: |   3248: 34 94 f4 e5 85 25 45 24 94 d1 f1 e0 50 03 30 f1   4....%E$....P.0.",
          "10237: |   3264: 94 d4 15 82 04 d4 54 d4 f5 25 93 d3 53 03 03 03   ......T..%..S...",
          "10238: |   3280: 03 03 03 05 84 24 94 e4 15 25 91 f1 d0 50 03 30   .....$...%...P.0",
          "10239: |   3296: f1 94 d4 15 82 04 d4 54 d4 f5 25 93 d3 53 03 03   .......T..%..S..",
          "10240: |   3312: 03 03 03 03 05 84 e4 f4 34 15 34 51 e1 c0 50 03   ........4.4Q..P.",
          "10241: |   3328: 30 f1 74 d4 15 82 04 d4 54 d4 f5 25 93 d3 53 03   0.t.....T..%..S.",
          "10242: |   3344: 03 03 03 03 03 05 85 25 45 24 94 d1 81 b0 50 02   .......%E$....P.",
          "10243: |   3360: 50 f1 94 54 e4 14 24 c4 52 05 25 45 24 54 55 84   P..T..$.R.%E$TU.",
          "10244: |   3376: 24 94 e4 15 25 91 81 a0 50 02 50 f1 94 54 e4 14   $...%...P.P..T..",
          "10245: |   3392: 24 c4 52 05 25 45 24 54 55 84 e4 f4 34 15 34 51   $.R.%E$TU...4.4Q",
          "10246: |   3408: 71 90 50 02 50 f1 74 54 e4 14 24 c4 52 05 25 45   q.P.P.tT..$.R.%E",
          "10247: |   3424: 24 54 55 85 25 45 24 94 d1 a1 80 50 02 90 f1 94   $TU.%E$....P....",
          "10248: |   3440: 54 e4 14 24 c4 52 04 d4 54 d5 35 95 33 55 84 24   T..$.R..T.5.3U.$",
          "10249: |   3456: 94 e4 15 25 91 a1 70 50 02 90 f1 94 54 e4 14 24   ...%..pP....T..$",
          "10250: |   3472: c4 52 04 d4 54 d5 35 95 33 55 84 e4 f4 34 15 34   .R..T.5.3U...4.4",
          "10251: |   3488: 51 91 60 50 02 90 f1 74 54 e4 14 24 c4 52 04 d4   Q.`P...tT..$.R..",
          "10252: |   3504: 54 d5 35 95 33 55 85 25 45 24 94 d1 81 50 50 02   T.5.3U.%E$...PP.",
          "10253: |   3520: 50 f1 94 54 e4 14 24 c4 52 04 a5 34 f4 e3 15 84   P..T..$.R..4....",
          "10254: |   3536: 24 94 e4 15 25 91 81 40 50 02 50 f1 94 54 e4 14   $...%..@P.P..T..",
          "10255: |   3552: 24 c4 52 04 a5 34 f4 e3 15 84 e4 f4 34 15 34 51   $.R..4......4.4Q",
          "10256: |   3568: 71 30 50 02 4f f1 74 54 e4 14 24 c4 52 04 a5 34   q0P.O.tT..$.R..4",
          "10257: |   3584: f4 e3 15 85 25 45 24 94 d1 a1 20 50 02 90 f1 94   ....%E$... P....",
          "10258: |   3600: 54 e4 14 24 c4 52 04 74 54 f5 04 f4 c5 95 84 24   T..$.R.tT......$",
          "10259: |   3616: 94 e4 15 25 91 a1 10 50 02 90 f1 94 54 e4 14 24   ...%...P....T..$",
          "10260: |   3632: c4 52 04 74 54 f5 04 f4 c5 95 84 e4 f4 34 15 34   .R.tT........4.4",
          "10261: |   3648: 51 91 00 50 02 90 f1 74 54 e4 14 24 c4 51 f4 74   Q..P...tT..$.Q.t",
          "10262: |   3664: 54 f5 04 f4 c5 95 85 25 45 24 94 d1 70 f0 50 02   T......%E$..p.P.",
          "10263: |   3680: 30 f1 94 54 e4 14 24 c5 20 46 54 53 35 58 42 49   0..T..$. FTS5XBI",
          "10264: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "10265: |   3712: 45 20 46 54 53 35 58 4f 4f 43 41 53 45 16 0d 05   E FTS5XOOCASE...",
          "10266: |   3728: 00 23 0f 17 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "10267: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "10268: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 97 0b   LE FTS4XBINARY..",
          "10269: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "10270: |   3792: 58 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   XNOCASE....#..EN",
          "10271: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "10272: |   3824: 09 05 00 3e 5f 19 45 4e 41 42 4c 45 20 44 42 53   ...>_.ENABLE DBS",
          "10273: |   3840: 44 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   DAT VTABXBINARY.",
          "10274: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "10275: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 4d e3 45 1d   TAT VTABXNOCM.E.",
          "10276: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "10277: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 49 4d 11 06   TAT VTABXRTRIM..",
          "10278: |   3920: 05 00 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "10279: |   3936: 59 11 05 05 00 17 0f 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "10280: |   3952: 43 41 53 45 10 02 02 50 08 5f 17 44 45 42 55 47   CASE...P._.DEBUG",
          "10281: |   3968: 58 52 54 52 49 4d 27 03 05 00 44 0f 19 43 4f 4d   XRTRIM'...D..COM",
          "10282: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "10283: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "10284: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "10285: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "10286: |   4048: 39 58 4e 4f 43 41 53 45 26 01 05 00 43 c9 17 43   9XNOCASE&...C..C",
          "10287: |   4064: 4f 4d 50 49 4c 47 02 3d 67 63 63 2d 35 2e 34 2e   OMPILG.=gcc-5.4.",
          "10288: |   4080: 30 20 32 30 31 36 30 36 30 39 58 52 54 52 49 4d   0 20160609XRTRIM",
          "10289: | page 6 offset 20480",
          "10290: |      0: 0d 00 00 00 24 0e e0 00 0f f8 0f f0 0f e8 0f e0   ....$...........",
          "10291: |     16: 0f d8 0f d0 0f c8 0f c0 0f b8 0f b0 0f a8 0f a0   ................",
          "10292: |     32: 0f 98 0f 90 0f 88 0f 80 0f 78 0f 70 0f 68 0f 60   .........x.p.h.`",
          "10293: |     48: 0f 58 0f 50 0f 48 0f 40 0f 38 00 00 00 00 00 00   .X.P.H.@.8......",
          "10294: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "10295: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "10296: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "10297: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "10298: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "10299: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "10300: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "10301: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "10302: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "10303: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "10304: |   3968: 06 10 03 00 12 02 01 01 06 1f 03 00 12 02 01 01   ................",
          "10305: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "10306: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "10307: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "10308: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "10309: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "10310: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 06 01 01   ................",
          "10311: |   4080: 06 02 03 00 12 06 01 01 06 01 03 00 12 06 01 01   ................",
          "10312: | page 7 offset 24576",
          "10313: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "10314: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "10315: | page 8 offset 28672",
          "10316: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "10317: |   4048: 00 00 00 00 00 00 11 03 02 2b 69 6e 74 65 67 72   .........+integr",
          "10318: |   4064: 69 74 79 2d 63 68 65 63 6b 09 00 00 00 00 00 00   ity-check.......",
          "10319: | end crash-31c462b8b665d0.db",
          "10320: }]} {}",
          "10323: do_catchsql_test 69.2 {",
          "10324:   SELECT * FROM t1 WHERE a MATCH 'fx*'",
          "10325: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a64c16fb7a07431e534fb9bbcf778646be8a1c718d5d10873fbccb0c867aac7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8772:   assert( pPage->intKey || pX->nKey>=0 );",
          "8773:   assert( pPage->leaf || !pPage->intKey );",
          "8774:   if( pPage->nFree<0 ){",
          "8776:     if( rc ) return rc;",
          "8777:   }",
          "",
          "[Removed Lines]",
          "8775:     rc = btreeComputeFreeSpace(pPage);",
          "",
          "[Added Lines]",
          "8775:     if( pCur->eState>CURSOR_INVALID ){",
          "8776:       rc = SQLITE_CORRUPT_BKPT;",
          "8777:     }else{",
          "8778:       rc = btreeComputeFreeSpace(pPage);",
          "8779:     }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   op = pExpr->op;",
          "53:   if( op==TK_SELECT ){",
          "54:     assert( pExpr->flags&EP_xIsSelect );",
          "61:   }",
          "62:   if( op==TK_REGISTER ) op = pExpr->op2;",
          "63: #ifndef SQLITE_OMIT_CAST",
          "",
          "[Removed Lines]",
          "55:     if( ALWAYS(pExpr->x.pSelect)",
          "56:      && pExpr->x.pSelect->pEList",
          "57:      && ALWAYS(pExpr->x.pSelect->pEList->a[0].pExpr)",
          "58:     ){",
          "59:       return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "60:     }",
          "",
          "[Added Lines]",
          "55:     assert( pExpr->x.pSelect!=0 );",
          "56:     assert( pExpr->x.pSelect->pEList!=0 );",
          "57:     assert( pExpr->x.pSelect->pEList->a[0].pExpr!=0 );",
          "58:     return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "201:         ){",
          "202:           int i;",
          "204:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "205:               pNext = p->x.pList->a[i].pExpr;",
          "206:               break;",
          "",
          "[Removed Lines]",
          "203:           for(i=0; i<p->x.pList->nExpr; i++){",
          "",
          "[Added Lines]",
          "201:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   if( OK_IF_ALWAYS_TRUE(p) ) clearSelect(db, p, 1);",
          "176: }",
          "",
          "[Removed Lines]",
          "183: void sqlite3SelectReset(Parse *pParse, Select *p){",
          "184:   if( ALWAYS(p) ){",
          "185:     clearSelect(pParse->db, p, 0);",
          "186:     memset(&p->iLimit, 0, sizeof(Select) - offsetof(Select,iLimit));",
          "187:     p->pEList = sqlite3ExprListAppend(pParse, 0,",
          "188:                      sqlite3ExprAlloc(pParse->db,TK_NULL,0,0));",
          "189:     p->pSrc = sqlite3DbMallocZero(pParse->db, sizeof(SrcList));",
          "190:   }",
          "191: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4248: Select *sqlite3SelectNew(Parse*,ExprList*,SrcList*,Expr*,ExprList*,",
          "4249:                          Expr*,ExprList*,u32,Expr*);",
          "4250: void sqlite3SelectDelete(sqlite3*, Select*);",
          "4252: Table *sqlite3SrcListLookup(Parse*, SrcList*);",
          "4253: int sqlite3IsReadOnly(Parse*, Table*, int);",
          "4254: void sqlite3OpenTable(Parse*, int iCur, int iDb, Table*, int);",
          "",
          "[Removed Lines]",
          "4251: void sqlite3SelectReset(Parse*, Select*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "804:       }",
          "805:       if( p->pSub ){",
          "806:         assert( ExprHasProperty(pExpr, EP_Static)==0 );",
          "807:         ExprSetProperty(pExpr, EP_Static);",
          "808:         sqlite3ExprDelete(pParse->db, pExpr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:         int f = pExpr->flags & EP_Collate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "813:         pExpr->iColumn = (iCol<0 ? p->pSub->nExpr-1: iCol);",
          "814:         pExpr->iTable = p->pWin->iEphCsr;",
          "815:         pExpr->y.pTab = p->pTab;",
          "816:       }",
          "817:       if( pParse->db->mallocFailed ) return WRC_Abort;",
          "818:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:         pExpr->flags = f;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1082:       assert( pParse->db->mallocFailed );",
          "1083:       sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
          "1084:     }",
          "1086:   }",
          "1087:   return rc;",
          "1088: }",
          "",
          "[Removed Lines]",
          "1085:     sqlite3SelectReset(pParse, p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266: do_execsql_test 15.1 {",
          "1267:   UPDATE c1 SET c= NOT EXISTS(SELECT 1 FROM c1 ORDER BY (SELECT 1 FROM c1 ORDER BY a)) +10 WHERE d BETWEEN 4 AND 7;",
          "1268: } {}",
          "1269: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270: #-------------------------------------------------------------------------",
          "1271: reset_db",
          "1272: do_execsql_test 16.0 {",
          "1273:   CREATE TABLE t1(w, x, y, z, UNIQUE(w, x), UNIQUE(y, z));",
          "1274:   INSERT INTO t1 VALUES(1, 1, 1, 1);",
          "1276:   CREATE TABLE t1idx(x, y, i INTEGER, PRIMARY KEY(x)) WITHOUT ROWID;",
          "1277:   INSERT INTO t1idx VALUES(10, NULL, 5);",
          "1279:   PRAGMA writable_schema = 1;",
          "1280:   UPDATE sqlite_master SET rootpage = (",
          "1281:     SELECT rootpage FROM sqlite_master WHERE name='t1idx'",
          "1282:   ) WHERE type = 'index';",
          "1283: }",
          "1285: db close",
          "1286: sqlite3 db test.db",
          "1288: do_catchsql_test 16.1 {",
          "1289:   PRAGMA writable_schema = ON;",
          "1290:   INSERT INTO t1(rowid, w, x, y, z) VALUES(5, 10, 11, 10, NULL);",
          "1291: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6266:   INSERT INTO x1(x1) VALUES( 'merge=1' )",
          "6267: } {1 {database disk image is malformed}}",
          "6270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6269: #-------------------------------------------------------------------------",
          "6270: reset_db",
          "6271: set saved $sqlite_fts3_enable_parentheses",
          "6272: set sqlite_fts3_enable_parentheses 1",
          "6273: do_execsql_test 46.1 {",
          "6274:   CREATE VIRTUAL TABLE t0 USING fts3(a INTEGER PRIMARY KEY,b,c,d);",
          "6275:   INSERT INTO t0_segdir VALUES(0,0,0,0,'0 42',X'0001310301c9000103323334050d8000f200000461616161050101020200000462626262050101030200');",
          "6276: } {}",
          "6278: do_catchsql_test 46.2 {",
          "6279:   SELECT * FROM t0",
          "6280:     WHERE t0 MATCH x'2b0a312b0a312a312a2a0b5d0a0b0b0a312a0a0b0b0a312a0b310a392a0b0a27312a2a0b5d0a312a0b310a31315d0b310a312a316d2a0b313b15bceaa50a312a0b0a27312a2a0b5d0a312a0b310a312b0b2a310a312a0b2a0b2a0b2e5d0a0bff313336e34a2a312a0b0a3c310b0a0b4b4b0b4b2a4bec40322b2a0b310a0a312a0a0a0a0a0a0a0a0a0b310a312a2a2a0b5d0a0b0b0a312a0b310a312a0b0a4e4541530b310a5df5ced70a0a0a0a0a4f520a0a0a0a0a0a0a312a0b0a4e4541520b310a5d616161610a0a0a0a4f520a0a0a0a0a0a312b0a312a312a0a0a0a0a0a0a004a0b0a310b220a0b0a310a4a22310a0b0a7e6fe0e0e030e0e0e0e0e01176e02000e0e0e0e0e01131320226310a0b0a310a4a22310a0b0a310a766f8b8b4ee0e0300ae0090909090909090909090909090909090909090909090909090909090909090947aaaa540b09090909090909090909090909090909090909090909090909090909090909fae0e0f2f22164e0e0f273e07fefefef7d6dfafafafa6d6d6d6d';",
          "6281: } {1 {database disk image is malformed}}",
          "6283: set sqlite_fts3_enable_parentheses $saved",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947:   FROM t1;",
          "1948: } {{}}",
          "1950: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1950: #-------------------------------------------------------------------------",
          "1951: reset_db",
          "1952: do_execsql_test 64.1 {",
          "1953:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "1954:   INSERT INTO t1 VALUES(1, 'abcd');",
          "1955:   INSERT INTO t1 VALUES(2, 'BCDE');",
          "1956:   INSERT INTO t1 VALUES(3, 'cdef');",
          "1957:   INSERT INTO t1 VALUES(4, 'DEFG');",
          "1958: }",
          "1960: do_execsql_test 64.2 {",
          "1961:   SELECT rowid, max(b COLLATE nocase)||''",
          "1962:   FROM t1",
          "1963:   GROUP BY rowid",
          "1964:   ORDER BY max(b COLLATE nocase)||'';",
          "1965: } {1 abcd 2 BCDE 3 cdef 4 DEFG}",
          "1967: do_execsql_test 64.3 {",
          "1968:   SELECT count() OVER (), rowid, max(b COLLATE nocase)||''",
          "1969:   FROM t1",
          "1970:   GROUP BY rowid",
          "1971:   ORDER BY max(b COLLATE nocase)||'';",
          "1972: } {4 1 abcd   4 2 BCDE   4 3 cdef   4 4 DEFG}",
          "1974: do_execsql_test 64.4 {",
          "1975:   SELECT count() OVER (), rowid, max(b COLLATE nocase)",
          "1976:   FROM t1",
          "1977:   GROUP BY rowid",
          "1978:   ORDER BY max(b COLLATE nocase);",
          "1979: } {4 1 abcd   4 2 BCDE   4 3 cdef   4 4 DEFG}",
          "1981: #-------------------------------------------------------------------------",
          "1982: reset_db",
          "1983: do_execsql_test 65.1 {",
          "1984:   CREATE TABLE t1(c1);",
          "1985:   INSERT INTO t1 VALUES('abcd');",
          "1986: }",
          "1987: do_execsql_test 65.2 {",
          "1988:   SELECT max(c1 COLLATE nocase) IN (SELECT 'aBCd') FROM t1;",
          "1989: } {1}",
          "1991: do_execsql_test 65.3 {",
          "1992:   SELECT",
          "1993:      count() OVER (),",
          "1994:      group_concat(c1 COLLATE nocase) IN (SELECT 'aBCd') FROM t1;",
          "1995: } {1 1}",
          "1997: do_execsql_test 65.4 {",
          "1998:   SELECT COUNT() OVER () LIKE lead(102030) OVER(",
          "1999:       ORDER BY sum('abcdef' COLLATE nocase) IN (SELECT 54321)",
          "2000:   )",
          "2001:   FROM t1;",
          "2002: } {{}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}