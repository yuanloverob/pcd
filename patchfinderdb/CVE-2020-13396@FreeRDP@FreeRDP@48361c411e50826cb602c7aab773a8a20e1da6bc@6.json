{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fba85da6733f2a7038a4cb0cb21ddedce7e667ce",
      "candidate_info": {
        "commit_hash": "fba85da6733f2a7038a4cb0cb21ddedce7e667ce",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/fba85da6733f2a7038a4cb0cb21ddedce7e667ce",
        "files": [
          "libfreerdp/core/nla.c"
        ],
        "message": "Ensure buffers are NULL before reuse in NLA\n\n(cherry picked from commit 5f53b2b7c7109016b7127d595e13bd333ac77613)",
        "before_after_code_files": [
          "libfreerdp/core/nla.c||libfreerdp/core/nla.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/nla.c||libfreerdp/core/nla.c": [
          "File: libfreerdp/core/nla.c -> libfreerdp/core/nla.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212:  const size_t hashSize =",
          "1213:      nla->server ? sizeof(ServerClientHashMagic) : sizeof(ClientServerHashMagic);",
          "1215:  if (!sspi_SecBufferAlloc(&nla->pubKeyAuth, auth_data_length))",
          "1216:  {",
          "1217:   status = SEC_E_INSUFFICIENT_MEMORY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1215:  sspi_SecBufferFree(&nla->pubKeyAuth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2069:    return -1;",
          "2070:   }",
          "2072:   if (!sspi_SecBufferAlloc(&nla->negoToken, length))",
          "2073:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2073:   sspi_SecBufferFree(&nla->negoToken);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2097:       Stream_GetRemainingLength(s) < length)",
          "2098:    return -1;",
          "2100:   if (!sspi_SecBufferAlloc(&nla->pubKeyAuth, length))",
          "2101:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2102:   sspi_SecBufferFree(&nla->pubKeyAuth);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2121:         Stream_GetRemainingLength(s) < length)",
          "2122:      return -1;",
          "2124:     if (!sspi_SecBufferAlloc(&nla->ClientNonce, length))",
          "2125:      return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2127:     sspi_SecBufferFree(&nla->ClientNonce);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2357:  nla->sendSeqNum = 0;",
          "2358:  nla->recvSeqNum = 0;",
          "2359:  nla->version = 6;",
          "2364:  SecInvalidateHandle(&nla->context);",
          "2366:  if (settings->NtlmSamFile)",
          "",
          "[Removed Lines]",
          "2360:  ZeroMemory(&nla->ClientNonce, sizeof(SecBuffer));",
          "2361:  ZeroMemory(&nla->negoToken, sizeof(SecBuffer));",
          "2362:  ZeroMemory(&nla->pubKeyAuth, sizeof(SecBuffer));",
          "2363:  ZeroMemory(&nla->authInfo, sizeof(SecBuffer));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a84d2783f918fc85787801566827b639ced6b8b8",
      "candidate_info": {
        "commit_hash": "a84d2783f918fc85787801566827b639ced6b8b8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a84d2783f918fc85787801566827b639ced6b8b8",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed drdynvc_send stream release\n\n(cherry picked from commit a497e78d37b63f8f342be56e1732c5a891b5ba0d)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:    Stream_Write_UINT8(s, (CLOSE_REQUEST_PDU << 4) | 0x02);",
          "616:    Stream_Write_UINT32(s, ChannelId);",
          "617:    error = drdynvc_send(drdynvc, s);",
          "619:   }",
          "620:  }",
          "",
          "[Removed Lines]",
          "618:    Stream_Release(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "758:  switch (status)",
          "759:  {",
          "760:   case CHANNEL_RC_OK:",
          "762:    return CHANNEL_RC_OK;",
          "764:   case CHANNEL_RC_NOT_CONNECTED:",
          "765:    return CHANNEL_RC_OK;",
          "767:   case CHANNEL_RC_BAD_CHANNEL_HANDLE:",
          "768:    WLog_ERR(TAG, \"VirtualChannelWriteEx failed with CHANNEL_RC_BAD_CHANNEL_HANDLE\");",
          "769:    return status;",
          "771:   default:",
          "772:    WLog_Print(drdynvc->log, WLOG_ERROR,",
          "773:               \"VirtualChannelWriteEx failed with %s [%08\" PRIX32 \"]\",",
          "774:               WTSErrorToString(status), status);",
          "",
          "[Removed Lines]",
          "761:    Stream_AddRef(s);",
          "",
          "[Added Lines]",
          "763:    Stream_Release(s);",
          "767:    Stream_Release(s);",
          "772:    Stream_Release(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:  if (dataSize == 0)",
          "815:  {",
          "816:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "817:  }",
          "818:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "819:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "818:   Stream_Release(data_out);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fae7b99a8444be526e601467dd974140aee7c81e",
      "candidate_info": {
        "commit_hash": "fae7b99a8444be526e601467dd974140aee7c81e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/fae7b99a8444be526e601467dd974140aee7c81e",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/server/cliprdr_main.c"
        ],
        "message": "Fixed #6162: Clipboard temporary path length limit\n\nThe limit of clipboard temporary paths is 260 '\\0' terminated\nwide characters. Fix the checks to enforce that properly.\n\n(cherry picked from commit 06bfcfad672522598a39522830449b444d50a9e4)",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:  wStream* s;",
          "595:  WCHAR* wszTempDir = NULL;",
          "596:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "599:  if (!s)",
          "600:  {",
          "",
          "[Removed Lines]",
          "597:  s = cliprdr_packet_new(CB_TEMP_DIRECTORY, 0, 520 * 2);",
          "",
          "[Added Lines]",
          "597:  s = cliprdr_packet_new(CB_TEMP_DIRECTORY, 0, 260 * sizeof(WCHAR));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:  if (length < 0)",
          "608:   return ERROR_INTERNAL_ERROR;",
          "615:  free(wszTempDir);",
          "616:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"TempDirectory: %s\", tempDirectory->szTempDir);",
          "617:  return cliprdr_packet_send(cliprdr, s);",
          "",
          "[Removed Lines]",
          "610:  if (length > 520)",
          "611:   length = 520;",
          "613:  Stream_Write(s, wszTempDir, (size_t)length * 2);",
          "614:  Stream_Zero(s, (520 - (size_t)length) * 2);",
          "",
          "[Added Lines]",
          "612:  if (length >= 260)",
          "613:   length = 259;",
          "615:  Stream_Write_UTF16_String(s, wszTempDir, length);",
          "616:  Stream_Zero(s, 520 - (length * sizeof(WCHAR)));",
          "",
          "---------------"
        ],
        "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c": [
          "File: channels/cliprdr/server/cliprdr_main.c -> channels/cliprdr/server/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:  UINT error = CHANNEL_RC_OK;",
          "555:  WINPR_UNUSED(header);",
          "557:  {",
          "558:   WLog_ERR(TAG, \"Stream_GetRemainingLength returned %\" PRIuz \" but should at least be 520\",",
          "559:            slength);",
          "",
          "[Removed Lines]",
          "556:  if ((slength = Stream_GetRemainingLength(s)) < 520)",
          "",
          "[Added Lines]",
          "556:  if ((slength = Stream_GetRemainingLength(s)) < 260 * sizeof(WCHAR))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:  wszTempDir = (WCHAR*)Stream_Pointer(s);",
          "566:  {",
          "568:   return ERROR_INVALID_DATA;",
          "569:  }",
          "",
          "[Removed Lines]",
          "565:  if (wszTempDir[260] != 0)",
          "567:   WLog_ERR(TAG, \"wszTempDir[260] was not 0\");",
          "",
          "[Added Lines]",
          "565:  if (wszTempDir[259] != 0)",
          "567:   WLog_ERR(TAG, \"wszTempDir[259] was not 0\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:   return ERROR_INVALID_DATA;",
          "579:  }",
          "586:  CopyMemory(tempDirectory.szTempDir, cliprdr->temporaryDirectory, length);",
          "587:  tempDirectory.szTempDir[length] = '\\0';",
          "",
          "[Removed Lines]",
          "581:  length = strnlen(cliprdr->temporaryDirectory, 520);",
          "583:  if (length > 519)",
          "584:   length = 519;",
          "",
          "[Added Lines]",
          "581:  length = strnlen(cliprdr->temporaryDirectory, 260);",
          "583:  if (length >= 260)",
          "584:   length = 259;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
      "candidate_info": {
        "commit_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed #6148: multiple ceritificate purposes\n\nOpenSSL certificate verification can only check a single purpose.\nRun the checks with all allowed purposes and accept any.\n\n(cherry picked from commit f3063a589d908a087a295b9217bc5fa34a80fb36)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: BOOL x509_verify_certificate(CryptoCert cert, const char* certificate_store_path)",
          "799: {",
          "800:  X509_STORE_CTX* csc;",
          "801:  BOOL status = FALSE;",
          "802:  X509_STORE* cert_ctx = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:  size_t i;",
          "801:  const int purposes[3] = { X509_PURPOSE_SSL_SERVER, X509_PURPOSE_SSL_CLIENT, X509_PURPOSE_ANY };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:   X509_LOOKUP_add_dir(lookup, certificate_store_path, X509_FILETYPE_PEM);",
          "832:  }",
          "839:  X509_STORE_set_flags(cert_ctx, 0);",
          "851:  X509_STORE_free(cert_ctx);",
          "852: end:",
          "853:  return status;",
          "",
          "[Removed Lines]",
          "834:  csc = X509_STORE_CTX_new();",
          "836:  if (csc == NULL)",
          "837:   goto end;",
          "841:  if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "842:   goto end;",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_ANY);",
          "845:  X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "847:  if (X509_verify_cert(csc) == 1)",
          "848:   status = TRUE;",
          "850:  X509_STORE_CTX_free(csc);",
          "",
          "[Added Lines]",
          "838:  for (i = 0; i < ARRAYSIZE(purposes); i++)",
          "839:  {",
          "840:   int rc = -1;",
          "841:   int purpose = purposes[i];",
          "842:   csc = X509_STORE_CTX_new();",
          "844:   if (csc == NULL)",
          "845:    goto skip;",
          "846:   if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "847:    goto skip;",
          "849:   X509_STORE_CTX_set_purpose(csc, purpose);",
          "850:   X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "852:   rc = X509_verify_cert(csc);",
          "853:  skip:",
          "854:   X509_STORE_CTX_free(csc);",
          "855:   if (rc == 1)",
          "856:   {",
          "857:    status = TRUE;",
          "858:    break;",
          "859:   }",
          "860:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c060089a2b645cb1366d611766adce1919170d72",
      "candidate_info": {
        "commit_hash": "c060089a2b645cb1366d611766adce1919170d72",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c060089a2b645cb1366d611766adce1919170d72",
        "files": [
          "libfreerdp/common/settings_getters.c",
          "libfreerdp/common/settings_str.c",
          "libfreerdp/core/settings.c",
          "libfreerdp/core/settings.h",
          "libfreerdp/core/test/TestSettings.c",
          "scripts/update-settings-tests"
        ],
        "message": "Refactored settings clone/free, extended tests\n\n(cherry picked from commit 773ad6e9791844ca3ccdc40d378a37fc0238ef0a)",
        "before_after_code_files": [
          "libfreerdp/common/settings_getters.c||libfreerdp/common/settings_getters.c",
          "libfreerdp/common/settings_str.c||libfreerdp/common/settings_str.c",
          "libfreerdp/core/settings.c||libfreerdp/core/settings.c",
          "libfreerdp/core/settings.h||libfreerdp/core/settings.h",
          "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/common/settings_getters.c||libfreerdp/common/settings_getters.c": [
          "File: libfreerdp/common/settings_getters.c -> libfreerdp/common/settings_getters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2358:  }",
          "2359: }",
          "2362: {",
          "2363:  if (!settings)",
          "2364:   return FALSE;",
          "",
          "[Removed Lines]",
          "2361: BOOL freerdp_settings_set_string(rdpSettings* settings, size_t id, const char* val)",
          "",
          "[Added Lines]",
          "2361: BOOL freerdp_settings_set_string_(rdpSettings* settings, size_t id, const char* val, BOOL cleanup)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2366:  switch (id)",
          "2367:  {",
          "2368:   case FreeRDP_AcceptedCert:",
          "2370:    settings->AcceptedCert = (val ? _strdup(val) : NULL);",
          "2371:    return (!val || settings->AcceptedCert != NULL);",
          "2373:   case FreeRDP_AllowedTlsCiphers:",
          "2375:    settings->AllowedTlsCiphers = (val ? _strdup(val) : NULL);",
          "2376:    return (!val || settings->AllowedTlsCiphers != NULL);",
          "2378:   case FreeRDP_AlternateShell:",
          "2380:    settings->AlternateShell = (val ? _strdup(val) : NULL);",
          "2381:    return (!val || settings->AlternateShell != NULL);",
          "2383:   case FreeRDP_AssistanceFile:",
          "2385:    settings->AssistanceFile = (val ? _strdup(val) : NULL);",
          "2386:    return (!val || settings->AssistanceFile != NULL);",
          "2388:   case FreeRDP_AuthenticationServiceClass:",
          "2390:    settings->AuthenticationServiceClass = (val ? _strdup(val) : NULL);",
          "2391:    return (!val || settings->AuthenticationServiceClass != NULL);",
          "2393:   case FreeRDP_CertificateAcceptedFingerprints:",
          "2395:    settings->CertificateAcceptedFingerprints = (val ? _strdup(val) : NULL);",
          "2396:    return (!val || settings->CertificateAcceptedFingerprints != NULL);",
          "2398:   case FreeRDP_CertificateContent:",
          "2400:    settings->CertificateContent = (val ? _strdup(val) : NULL);",
          "2401:    return (!val || settings->CertificateContent != NULL);",
          "2403:   case FreeRDP_CertificateFile:",
          "2405:    settings->CertificateFile = (val ? _strdup(val) : NULL);",
          "2406:    return (!val || settings->CertificateFile != NULL);",
          "2408:   case FreeRDP_CertificateName:",
          "2410:    settings->CertificateName = (val ? _strdup(val) : NULL);",
          "2411:    return (!val || settings->CertificateName != NULL);",
          "2413:   case FreeRDP_ClientAddress:",
          "2415:    settings->ClientAddress = (val ? _strdup(val) : NULL);",
          "2416:    return (!val || settings->ClientAddress != NULL);",
          "2418:   case FreeRDP_ClientDir:",
          "2420:    settings->ClientDir = (val ? _strdup(val) : NULL);",
          "2421:    return (!val || settings->ClientDir != NULL);",
          "2423:   case FreeRDP_ClientHostname:",
          "2425:    settings->ClientHostname = (val ? _strdup(val) : NULL);",
          "2426:    return (!val || settings->ClientHostname != NULL);",
          "2428:   case FreeRDP_ClientProductId:",
          "2430:    settings->ClientProductId = (val ? _strdup(val) : NULL);",
          "2431:    return (!val || settings->ClientProductId != NULL);",
          "2433:   case FreeRDP_ComputerName:",
          "2435:    settings->ComputerName = (val ? _strdup(val) : NULL);",
          "2436:    return (!val || settings->ComputerName != NULL);",
          "2438:   case FreeRDP_ConfigPath:",
          "2440:    settings->ConfigPath = (val ? _strdup(val) : NULL);",
          "2441:    return (!val || settings->ConfigPath != NULL);",
          "2443:   case FreeRDP_ConnectionFile:",
          "2445:    settings->ConnectionFile = (val ? _strdup(val) : NULL);",
          "2446:    return (!val || settings->ConnectionFile != NULL);",
          "2448:   case FreeRDP_CurrentPath:",
          "2450:    settings->CurrentPath = (val ? _strdup(val) : NULL);",
          "2451:    return (!val || settings->CurrentPath != NULL);",
          "2453:   case FreeRDP_Domain:",
          "2455:    settings->Domain = (val ? _strdup(val) : NULL);",
          "2456:    return (!val || settings->Domain != NULL);",
          "2458:   case FreeRDP_DrivesToRedirect:",
          "2460:    settings->DrivesToRedirect = (val ? _strdup(val) : NULL);",
          "2461:    return (!val || settings->DrivesToRedirect != NULL);",
          "2463:   case FreeRDP_DumpRemoteFxFile:",
          "2465:    settings->DumpRemoteFxFile = (val ? _strdup(val) : NULL);",
          "2466:    return (!val || settings->DumpRemoteFxFile != NULL);",
          "2468:   case FreeRDP_DynamicDSTTimeZoneKeyName:",
          "2470:    settings->DynamicDSTTimeZoneKeyName = (val ? _strdup(val) : NULL);",
          "2471:    return (!val || settings->DynamicDSTTimeZoneKeyName != NULL);",
          "2473:   case FreeRDP_GatewayAcceptedCert:",
          "2475:    settings->GatewayAcceptedCert = (val ? _strdup(val) : NULL);",
          "2476:    return (!val || settings->GatewayAcceptedCert != NULL);",
          "2478:   case FreeRDP_GatewayAccessToken:",
          "2480:    settings->GatewayAccessToken = (val ? _strdup(val) : NULL);",
          "2481:    return (!val || settings->GatewayAccessToken != NULL);",
          "2483:   case FreeRDP_GatewayDomain:",
          "2485:    settings->GatewayDomain = (val ? _strdup(val) : NULL);",
          "2486:    return (!val || settings->GatewayDomain != NULL);",
          "2488:   case FreeRDP_GatewayHostname:",
          "2490:    settings->GatewayHostname = (val ? _strdup(val) : NULL);",
          "2491:    return (!val || settings->GatewayHostname != NULL);",
          "2493:   case FreeRDP_GatewayPassword:",
          "2495:    settings->GatewayPassword = (val ? _strdup(val) : NULL);",
          "2496:    return (!val || settings->GatewayPassword != NULL);",
          "2498:   case FreeRDP_GatewayUsername:",
          "2500:    settings->GatewayUsername = (val ? _strdup(val) : NULL);",
          "2501:    return (!val || settings->GatewayUsername != NULL);",
          "2503:   case FreeRDP_HomePath:",
          "2505:    settings->HomePath = (val ? _strdup(val) : NULL);",
          "2506:    return (!val || settings->HomePath != NULL);",
          "2508:   case FreeRDP_ImeFileName:",
          "2510:    settings->ImeFileName = (val ? _strdup(val) : NULL);",
          "2511:    return (!val || settings->ImeFileName != NULL);",
          "2513:   case FreeRDP_KerberosKdc:",
          "2515:    settings->KerberosKdc = (val ? _strdup(val) : NULL);",
          "2516:    return (!val || settings->KerberosKdc != NULL);",
          "2518:   case FreeRDP_KerberosRealm:",
          "2520:    settings->KerberosRealm = (val ? _strdup(val) : NULL);",
          "2521:    return (!val || settings->KerberosRealm != NULL);",
          "2523:   case FreeRDP_NtlmSamFile:",
          "2525:    settings->NtlmSamFile = (val ? _strdup(val) : NULL);",
          "2526:    return (!val || settings->NtlmSamFile != NULL);",
          "2528:   case FreeRDP_Password:",
          "2530:    settings->Password = (val ? _strdup(val) : NULL);",
          "2531:    return (!val || settings->Password != NULL);",
          "2533:   case FreeRDP_PasswordHash:",
          "2535:    settings->PasswordHash = (val ? _strdup(val) : NULL);",
          "2536:    return (!val || settings->PasswordHash != NULL);",
          "2538:   case FreeRDP_PlayRemoteFxFile:",
          "2540:    settings->PlayRemoteFxFile = (val ? _strdup(val) : NULL);",
          "2541:    return (!val || settings->PlayRemoteFxFile != NULL);",
          "2543:   case FreeRDP_PreconnectionBlob:",
          "2545:    settings->PreconnectionBlob = (val ? _strdup(val) : NULL);",
          "2546:    return (!val || settings->PreconnectionBlob != NULL);",
          "2548:   case FreeRDP_PrivateKeyContent:",
          "2550:    settings->PrivateKeyContent = (val ? _strdup(val) : NULL);",
          "2551:    return (!val || settings->PrivateKeyContent != NULL);",
          "2553:   case FreeRDP_PrivateKeyFile:",
          "2555:    settings->PrivateKeyFile = (val ? _strdup(val) : NULL);",
          "2556:    return (!val || settings->PrivateKeyFile != NULL);",
          "2558:   case FreeRDP_ProxyHostname:",
          "2560:    settings->ProxyHostname = (val ? _strdup(val) : NULL);",
          "2561:    return (!val || settings->ProxyHostname != NULL);",
          "2563:   case FreeRDP_ProxyPassword:",
          "2565:    settings->ProxyPassword = (val ? _strdup(val) : NULL);",
          "2566:    return (!val || settings->ProxyPassword != NULL);",
          "2568:   case FreeRDP_ProxyUsername:",
          "2570:    settings->ProxyUsername = (val ? _strdup(val) : NULL);",
          "2571:    return (!val || settings->ProxyUsername != NULL);",
          "2573:   case FreeRDP_RDP2TCPArgs:",
          "2575:    settings->RDP2TCPArgs = (val ? _strdup(val) : NULL);",
          "2576:    return (!val || settings->RDP2TCPArgs != NULL);",
          "2578:   case FreeRDP_RdpKeyContent:",
          "2580:    settings->RdpKeyContent = (val ? _strdup(val) : NULL);",
          "2581:    return (!val || settings->RdpKeyContent != NULL);",
          "2583:   case FreeRDP_RdpKeyFile:",
          "2585:    settings->RdpKeyFile = (val ? _strdup(val) : NULL);",
          "2586:    return (!val || settings->RdpKeyFile != NULL);",
          "2588:   case FreeRDP_RedirectionAcceptedCert:",
          "2590:    settings->RedirectionAcceptedCert = (val ? _strdup(val) : NULL);",
          "2591:    return (!val || settings->RedirectionAcceptedCert != NULL);",
          "2593:   case FreeRDP_RedirectionDomain:",
          "2595:    settings->RedirectionDomain = (val ? _strdup(val) : NULL);",
          "2596:    return (!val || settings->RedirectionDomain != NULL);",
          "2598:   case FreeRDP_RedirectionTargetFQDN:",
          "2600:    settings->RedirectionTargetFQDN = (val ? _strdup(val) : NULL);",
          "2601:    return (!val || settings->RedirectionTargetFQDN != NULL);",
          "2603:   case FreeRDP_RedirectionTargetNetBiosName:",
          "2605:    settings->RedirectionTargetNetBiosName = (val ? _strdup(val) : NULL);",
          "2606:    return (!val || settings->RedirectionTargetNetBiosName != NULL);",
          "2608:   case FreeRDP_RedirectionUsername:",
          "2610:    settings->RedirectionUsername = (val ? _strdup(val) : NULL);",
          "2611:    return (!val || settings->RedirectionUsername != NULL);",
          "2613:   case FreeRDP_RemoteApplicationCmdLine:",
          "2615:    settings->RemoteApplicationCmdLine = (val ? _strdup(val) : NULL);",
          "2616:    return (!val || settings->RemoteApplicationCmdLine != NULL);",
          "2618:   case FreeRDP_RemoteApplicationFile:",
          "2620:    settings->RemoteApplicationFile = (val ? _strdup(val) : NULL);",
          "2621:    return (!val || settings->RemoteApplicationFile != NULL);",
          "2623:   case FreeRDP_RemoteApplicationGuid:",
          "2625:    settings->RemoteApplicationGuid = (val ? _strdup(val) : NULL);",
          "2626:    return (!val || settings->RemoteApplicationGuid != NULL);",
          "2628:   case FreeRDP_RemoteApplicationIcon:",
          "2630:    settings->RemoteApplicationIcon = (val ? _strdup(val) : NULL);",
          "2631:    return (!val || settings->RemoteApplicationIcon != NULL);",
          "2633:   case FreeRDP_RemoteApplicationName:",
          "2635:    settings->RemoteApplicationName = (val ? _strdup(val) : NULL);",
          "2636:    return (!val || settings->RemoteApplicationName != NULL);",
          "2638:   case FreeRDP_RemoteApplicationProgram:",
          "2640:    settings->RemoteApplicationProgram = (val ? _strdup(val) : NULL);",
          "2641:    return (!val || settings->RemoteApplicationProgram != NULL);",
          "2643:   case FreeRDP_RemoteApplicationWorkingDir:",
          "2645:    settings->RemoteApplicationWorkingDir = (val ? _strdup(val) : NULL);",
          "2646:    return (!val || settings->RemoteApplicationWorkingDir != NULL);",
          "2648:   case FreeRDP_RemoteAssistancePassStub:",
          "2650:    settings->RemoteAssistancePassStub = (val ? _strdup(val) : NULL);",
          "2651:    return (!val || settings->RemoteAssistancePassStub != NULL);",
          "2653:   case FreeRDP_RemoteAssistancePassword:",
          "2655:    settings->RemoteAssistancePassword = (val ? _strdup(val) : NULL);",
          "2656:    return (!val || settings->RemoteAssistancePassword != NULL);",
          "2658:   case FreeRDP_RemoteAssistanceRCTicket:",
          "2660:    settings->RemoteAssistanceRCTicket = (val ? _strdup(val) : NULL);",
          "2661:    return (!val || settings->RemoteAssistanceRCTicket != NULL);",
          "2663:   case FreeRDP_RemoteAssistanceSessionId:",
          "2665:    settings->RemoteAssistanceSessionId = (val ? _strdup(val) : NULL);",
          "2666:    return (!val || settings->RemoteAssistanceSessionId != NULL);",
          "2668:   case FreeRDP_ServerHostname:",
          "2670:    settings->ServerHostname = (val ? _strdup(val) : NULL);",
          "2671:    return (!val || settings->ServerHostname != NULL);",
          "2673:   case FreeRDP_ShellWorkingDirectory:",
          "2675:    settings->ShellWorkingDirectory = (val ? _strdup(val) : NULL);",
          "2676:    return (!val || settings->ShellWorkingDirectory != NULL);",
          "2678:   case FreeRDP_TargetNetAddress:",
          "2680:    settings->TargetNetAddress = (val ? _strdup(val) : NULL);",
          "2681:    return (!val || settings->TargetNetAddress != NULL);",
          "2683:   case FreeRDP_Username:",
          "2685:    settings->Username = (val ? _strdup(val) : NULL);",
          "2686:    return (!val || settings->Username != NULL);",
          "2688:   case FreeRDP_WindowTitle:",
          "2690:    settings->WindowTitle = (val ? _strdup(val) : NULL);",
          "2691:    return (!val || settings->WindowTitle != NULL);",
          "2693:   case FreeRDP_WmClass:",
          "2695:    settings->WmClass = (val ? _strdup(val) : NULL);",
          "2696:    return (!val || settings->WmClass != NULL);",
          "",
          "[Removed Lines]",
          "2369:    free(settings->AcceptedCert);",
          "2374:    free(settings->AllowedTlsCiphers);",
          "2379:    free(settings->AlternateShell);",
          "2384:    free(settings->AssistanceFile);",
          "2389:    free(settings->AuthenticationServiceClass);",
          "2394:    free(settings->CertificateAcceptedFingerprints);",
          "2399:    free(settings->CertificateContent);",
          "2404:    free(settings->CertificateFile);",
          "2409:    free(settings->CertificateName);",
          "2414:    free(settings->ClientAddress);",
          "2419:    free(settings->ClientDir);",
          "2424:    free(settings->ClientHostname);",
          "2429:    free(settings->ClientProductId);",
          "2434:    free(settings->ComputerName);",
          "2439:    free(settings->ConfigPath);",
          "2444:    free(settings->ConnectionFile);",
          "2449:    free(settings->CurrentPath);",
          "2454:    free(settings->Domain);",
          "2459:    free(settings->DrivesToRedirect);",
          "2464:    free(settings->DumpRemoteFxFile);",
          "2469:    free(settings->DynamicDSTTimeZoneKeyName);",
          "2474:    free(settings->GatewayAcceptedCert);",
          "2479:    free(settings->GatewayAccessToken);",
          "2484:    free(settings->GatewayDomain);",
          "2489:    free(settings->GatewayHostname);",
          "2494:    free(settings->GatewayPassword);",
          "2499:    free(settings->GatewayUsername);",
          "2504:    free(settings->HomePath);",
          "2509:    free(settings->ImeFileName);",
          "2514:    free(settings->KerberosKdc);",
          "2519:    free(settings->KerberosRealm);",
          "2524:    free(settings->NtlmSamFile);",
          "2529:    free(settings->Password);",
          "2534:    free(settings->PasswordHash);",
          "2539:    free(settings->PlayRemoteFxFile);",
          "2544:    free(settings->PreconnectionBlob);",
          "2549:    free(settings->PrivateKeyContent);",
          "2554:    free(settings->PrivateKeyFile);",
          "2559:    free(settings->ProxyHostname);",
          "2564:    free(settings->ProxyPassword);",
          "2569:    free(settings->ProxyUsername);",
          "2574:    free(settings->RDP2TCPArgs);",
          "2579:    free(settings->RdpKeyContent);",
          "2584:    free(settings->RdpKeyFile);",
          "2589:    free(settings->RedirectionAcceptedCert);",
          "2594:    free(settings->RedirectionDomain);",
          "2599:    free(settings->RedirectionTargetFQDN);",
          "2604:    free(settings->RedirectionTargetNetBiosName);",
          "2609:    free(settings->RedirectionUsername);",
          "2614:    free(settings->RemoteApplicationCmdLine);",
          "2619:    free(settings->RemoteApplicationFile);",
          "2624:    free(settings->RemoteApplicationGuid);",
          "2629:    free(settings->RemoteApplicationIcon);",
          "2634:    free(settings->RemoteApplicationName);",
          "2639:    free(settings->RemoteApplicationProgram);",
          "2644:    free(settings->RemoteApplicationWorkingDir);",
          "2649:    free(settings->RemoteAssistancePassStub);",
          "2654:    free(settings->RemoteAssistancePassword);",
          "2659:    free(settings->RemoteAssistanceRCTicket);",
          "2664:    free(settings->RemoteAssistanceSessionId);",
          "2669:    free(settings->ServerHostname);",
          "2674:    free(settings->ShellWorkingDirectory);",
          "2679:    free(settings->TargetNetAddress);",
          "2684:    free(settings->Username);",
          "2689:    free(settings->WindowTitle);",
          "2694:    free(settings->WmClass);",
          "",
          "[Added Lines]",
          "2369:    if (cleanup)",
          "2370:     free(settings->AcceptedCert);",
          "2375:    if (cleanup)",
          "2376:     free(settings->AllowedTlsCiphers);",
          "2381:    if (cleanup)",
          "2382:     free(settings->AlternateShell);",
          "2387:    if (cleanup)",
          "2388:     free(settings->AssistanceFile);",
          "2393:    if (cleanup)",
          "2394:     free(settings->AuthenticationServiceClass);",
          "2399:    if (cleanup)",
          "2400:     free(settings->CertificateAcceptedFingerprints);",
          "2405:    if (cleanup)",
          "2406:     free(settings->CertificateContent);",
          "2411:    if (cleanup)",
          "2412:     free(settings->CertificateFile);",
          "2417:    if (cleanup)",
          "2418:     free(settings->CertificateName);",
          "2423:    if (cleanup)",
          "2424:     free(settings->ClientAddress);",
          "2429:    if (cleanup)",
          "2430:     free(settings->ClientDir);",
          "2435:    if (cleanup)",
          "2436:     free(settings->ClientHostname);",
          "2441:    if (cleanup)",
          "2442:     free(settings->ClientProductId);",
          "2447:    if (cleanup)",
          "2448:     free(settings->ComputerName);",
          "2453:    if (cleanup)",
          "2454:     free(settings->ConfigPath);",
          "2459:    if (cleanup)",
          "2460:     free(settings->ConnectionFile);",
          "2465:    if (cleanup)",
          "2466:     free(settings->CurrentPath);",
          "2471:    if (cleanup)",
          "2472:     free(settings->Domain);",
          "2477:    if (cleanup)",
          "2478:     free(settings->DrivesToRedirect);",
          "2483:    if (cleanup)",
          "2484:     free(settings->DumpRemoteFxFile);",
          "2489:    if (cleanup)",
          "2490:     free(settings->DynamicDSTTimeZoneKeyName);",
          "2495:    if (cleanup)",
          "2496:     free(settings->GatewayAcceptedCert);",
          "2501:    if (cleanup)",
          "2502:     free(settings->GatewayAccessToken);",
          "2507:    if (cleanup)",
          "2508:     free(settings->GatewayDomain);",
          "2513:    if (cleanup)",
          "2514:     free(settings->GatewayHostname);",
          "2519:    if (cleanup)",
          "2520:     free(settings->GatewayPassword);",
          "2525:    if (cleanup)",
          "2526:     free(settings->GatewayUsername);",
          "2531:    if (cleanup)",
          "2532:     free(settings->HomePath);",
          "2537:    if (cleanup)",
          "2538:     free(settings->ImeFileName);",
          "2543:    if (cleanup)",
          "2544:     free(settings->KerberosKdc);",
          "2549:    if (cleanup)",
          "2550:     free(settings->KerberosRealm);",
          "2555:    if (cleanup)",
          "2556:     free(settings->NtlmSamFile);",
          "2561:    if (cleanup)",
          "2562:     free(settings->Password);",
          "2567:    if (cleanup)",
          "2568:     free(settings->PasswordHash);",
          "2573:    if (cleanup)",
          "2574:     free(settings->PlayRemoteFxFile);",
          "2579:    if (cleanup)",
          "2580:     free(settings->PreconnectionBlob);",
          "2585:    if (cleanup)",
          "2586:     free(settings->PrivateKeyContent);",
          "2591:    if (cleanup)",
          "2592:     free(settings->PrivateKeyFile);",
          "2597:    if (cleanup)",
          "2598:     free(settings->ProxyHostname);",
          "2603:    if (cleanup)",
          "2604:     free(settings->ProxyPassword);",
          "2609:    if (cleanup)",
          "2610:     free(settings->ProxyUsername);",
          "2615:    if (cleanup)",
          "2616:     free(settings->RDP2TCPArgs);",
          "2621:    if (cleanup)",
          "2622:     free(settings->RdpKeyContent);",
          "2627:    if (cleanup)",
          "2628:     free(settings->RdpKeyFile);",
          "2633:    if (cleanup)",
          "2634:     free(settings->RedirectionAcceptedCert);",
          "2639:    if (cleanup)",
          "2640:     free(settings->RedirectionDomain);",
          "2645:    if (cleanup)",
          "2646:     free(settings->RedirectionTargetFQDN);",
          "2651:    if (cleanup)",
          "2652:     free(settings->RedirectionTargetNetBiosName);",
          "2657:    if (cleanup)",
          "2658:     free(settings->RedirectionUsername);",
          "2663:    if (cleanup)",
          "2664:     free(settings->RemoteApplicationCmdLine);",
          "2669:    if (cleanup)",
          "2670:     free(settings->RemoteApplicationFile);",
          "2675:    if (cleanup)",
          "2676:     free(settings->RemoteApplicationGuid);",
          "2681:    if (cleanup)",
          "2682:     free(settings->RemoteApplicationIcon);",
          "2687:    if (cleanup)",
          "2688:     free(settings->RemoteApplicationName);",
          "2693:    if (cleanup)",
          "2694:     free(settings->RemoteApplicationProgram);",
          "2699:    if (cleanup)",
          "2700:     free(settings->RemoteApplicationWorkingDir);",
          "2705:    if (cleanup)",
          "2706:     free(settings->RemoteAssistancePassStub);",
          "2711:    if (cleanup)",
          "2712:     free(settings->RemoteAssistancePassword);",
          "2717:    if (cleanup)",
          "2718:     free(settings->RemoteAssistanceRCTicket);",
          "2723:    if (cleanup)",
          "2724:     free(settings->RemoteAssistanceSessionId);",
          "2729:    if (cleanup)",
          "2730:     free(settings->ServerHostname);",
          "2735:    if (cleanup)",
          "2736:     free(settings->ShellWorkingDirectory);",
          "2741:    if (cleanup)",
          "2742:     free(settings->TargetNetAddress);",
          "2747:    if (cleanup)",
          "2748:     free(settings->Username);",
          "2753:    if (cleanup)",
          "2754:     free(settings->WindowTitle);",
          "2759:    if (cleanup)",
          "2760:     free(settings->WmClass);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2702:  return TRUE;",
          "2703: }",
          "2705: const void* freerdp_settings_get_pointer(const rdpSettings* settings, size_t id)",
          "2706: {",
          "2707:  if (!settings)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2771: BOOL freerdp_settings_set_string(rdpSettings* settings, size_t id, const char* val)",
          "2772: {",
          "2773:  return freerdp_settings_set_string_(settings, id, val, TRUE);",
          "2774: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2792:    return FALSE;",
          "2793:  }",
          "2794: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2867: BOOL freerdp_settings_set_pointer(rdpSettings* settings, size_t id, const void* val)",
          "2868: {",
          "2869:  if (!settings)",
          "2870:   return FALSE;",
          "2872:  switch (id)",
          "2873:  {",
          "2874:   case FreeRDP_BitmapCacheV2CellInfo:",
          "2875:    settings->BitmapCacheV2CellInfo = (void*)val;",
          "2876:    break;",
          "2878:   case FreeRDP_ChannelDefArray:",
          "2879:    settings->ChannelDefArray = (void*)val;",
          "2880:    break;",
          "2882:   case FreeRDP_ClientAutoReconnectCookie:",
          "2883:    settings->ClientAutoReconnectCookie = (void*)val;",
          "2884:    break;",
          "2886:   case FreeRDP_ClientRandom:",
          "2887:    settings->ClientRandom = (void*)val;",
          "2888:    break;",
          "2890:   case FreeRDP_ClientTimeZone:",
          "2891:    settings->ClientTimeZone = (void*)val;",
          "2892:    break;",
          "2894:   case FreeRDP_DeviceArray:",
          "2895:    settings->DeviceArray = (void*)val;",
          "2896:    break;",
          "2898:   case FreeRDP_DynamicChannelArray:",
          "2899:    settings->DynamicChannelArray = (void*)val;",
          "2900:    break;",
          "2902:   case FreeRDP_FragCache:",
          "2903:    settings->FragCache = (void*)val;",
          "2904:    break;",
          "2906:   case FreeRDP_GlyphCache:",
          "2907:    settings->GlyphCache = (void*)val;",
          "2908:    break;",
          "2910:   case FreeRDP_LoadBalanceInfo:",
          "2911:    settings->LoadBalanceInfo = (void*)val;",
          "2912:    break;",
          "2914:   case FreeRDP_MonitorDefArray:",
          "2915:    settings->MonitorDefArray = (void*)val;",
          "2916:    break;",
          "2918:   case FreeRDP_MonitorIds:",
          "2919:    settings->MonitorIds = (void*)val;",
          "2920:    break;",
          "2922:   case FreeRDP_OrderSupport:",
          "2923:    settings->OrderSupport = (void*)val;",
          "2924:    break;",
          "2926:   case FreeRDP_Password51:",
          "2927:    settings->Password51 = (void*)val;",
          "2928:    break;",
          "2930:   case FreeRDP_RdpServerCertificate:",
          "2931:    settings->RdpServerCertificate = (void*)val;",
          "2932:    break;",
          "2934:   case FreeRDP_RdpServerRsaKey:",
          "2935:    settings->RdpServerRsaKey = (void*)val;",
          "2936:    break;",
          "2938:   case FreeRDP_ReceivedCapabilities:",
          "2939:    settings->ReceivedCapabilities = (void*)val;",
          "2940:    break;",
          "2942:   case FreeRDP_RedirectionPassword:",
          "2943:    settings->RedirectionPassword = (void*)val;",
          "2944:    break;",
          "2946:   case FreeRDP_RedirectionTsvUrl:",
          "2947:    settings->RedirectionTsvUrl = (void*)val;",
          "2948:    break;",
          "2950:   case FreeRDP_ServerAutoReconnectCookie:",
          "2951:    settings->ServerAutoReconnectCookie = (void*)val;",
          "2952:    break;",
          "2954:   case FreeRDP_ServerCertificate:",
          "2955:    settings->ServerCertificate = (void*)val;",
          "2956:    break;",
          "2958:   case FreeRDP_ServerRandom:",
          "2959:    settings->ServerRandom = (void*)val;",
          "2960:    break;",
          "2962:   case FreeRDP_StaticChannelArray:",
          "2963:    settings->StaticChannelArray = (void*)val;",
          "2964:    break;",
          "2966:   case FreeRDP_TargetNetAddresses:",
          "2967:    settings->TargetNetAddresses = (void*)val;",
          "2968:    break;",
          "2970:   case FreeRDP_TargetNetPorts:",
          "2971:    settings->TargetNetPorts = (void*)val;",
          "2972:    break;",
          "2974:   case FreeRDP_instance:",
          "2975:    settings->instance = (void*)val;",
          "2976:    break;",
          "2978:   default:",
          "2979:    WLog_ERR(TAG, \"[%s] Invalid key index %\" PRIuz, __FUNCTION__, id);",
          "2980:    return FALSE;",
          "2981:  }",
          "2982:  return TRUE;",
          "2983: }",
          "",
          "---------------"
        ],
        "libfreerdp/common/settings_str.c||libfreerdp/common/settings_str.c": [
          "File: libfreerdp/common/settings_str.c -> libfreerdp/common/settings_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <freerdp/settings.h>",
          "4: #include <freerdp/log.h>",
          "6: #define TAG FREERDP_TAG(\"common.settings\")",
          "8: struct settings_str_entry",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"../core/settings.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:  { FreeRDP_instance, 8, \"FreeRDP_instance\" },",
          "386: };",
          "388: SSIZE_T freerdp_settings_get_key_for_name(const char* value)",
          "389: {",
          "390:  size_t x;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: BOOL freerdp_settings_clone_keys(rdpSettings* dst, const rdpSettings* src)",
          "391: {",
          "392:  size_t x;",
          "393:  for (x = 0; x < ARRAYSIZE(settings_map); x++)",
          "394:  {",
          "395:   const struct settings_str_entry* cur = &settings_map[x];",
          "396:   switch (cur->type)",
          "397:   {",
          "399:    {",
          "400:     BOOL sval = freerdp_settings_get_bool(src, cur->id);",
          "401:     if (!freerdp_settings_set_bool(dst, cur->id, sval))",
          "402:      return FALSE;",
          "403:    }",
          "404:    break;",
          "406:    {",
          "407:     UINT16 sval = freerdp_settings_get_uint16(src, cur->id);",
          "408:     if (!freerdp_settings_set_uint16(dst, cur->id, sval))",
          "409:      return FALSE;",
          "410:    }",
          "411:    break;",
          "413:    {",
          "414:     INT16 sval = freerdp_settings_get_int16(src, cur->id);",
          "415:     if (!freerdp_settings_set_int16(dst, cur->id, sval))",
          "416:      return FALSE;",
          "417:    }",
          "418:    break;",
          "420:    {",
          "421:     UINT32 sval = freerdp_settings_get_uint32(src, cur->id);",
          "422:     if (!freerdp_settings_set_uint32(dst, cur->id, sval))",
          "423:      return FALSE;",
          "424:    }",
          "425:    break;",
          "427:    {",
          "428:     INT32 sval = freerdp_settings_get_int32(src, cur->id);",
          "429:     if (!freerdp_settings_set_int32(dst, cur->id, sval))",
          "430:      return FALSE;",
          "431:    }",
          "432:    break;",
          "434:    {",
          "435:     UINT64 sval = freerdp_settings_get_uint64(src, cur->id);",
          "436:     if (!freerdp_settings_set_uint64(dst, cur->id, sval))",
          "437:      return FALSE;",
          "438:    }",
          "439:    break;",
          "441:    {",
          "442:     INT64 sval = freerdp_settings_get_int64(src, cur->id);",
          "443:     if (!freerdp_settings_set_int64(dst, cur->id, sval))",
          "444:      return FALSE;",
          "445:    }",
          "446:    break;",
          "448:    {",
          "449:     const char* sval = freerdp_settings_get_string(src, cur->id);",
          "450:     if (!freerdp_settings_set_string_(dst, cur->id, sval, FALSE))",
          "451:      return FALSE;",
          "452:    }",
          "453:    break;",
          "455:    {",
          "456:     const void* sval = freerdp_settings_get_pointer(src, cur->id);",
          "457:     if (!freerdp_settings_set_pointer(dst, cur->id, sval))",
          "458:      return FALSE;",
          "459:    }",
          "460:    break;",
          "461:   }",
          "462:  }",
          "463:  return TRUE;",
          "464: }",
          "466: void freerdp_settings_free_keys(rdpSettings* dst, BOOL cleanup)",
          "467: {",
          "468:  size_t x;",
          "469:  for (x = 0; x < ARRAYSIZE(settings_map); x++)",
          "470:  {",
          "471:   const struct settings_str_entry* cur = &settings_map[x];",
          "472:   switch (cur->type)",
          "473:   {",
          "475:     freerdp_settings_set_string_(dst, cur->id, NULL, cleanup);",
          "476:     break;",
          "478:     freerdp_settings_set_pointer(dst, cur->id, NULL);",
          "479:     break;",
          "480:   }",
          "481:  }",
          "482: }",
          "",
          "---------------"
        ],
        "libfreerdp/core/settings.c||libfreerdp/core/settings.c": [
          "File: libfreerdp/core/settings.c -> libfreerdp/core/settings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <freerdp/build-config.h>",
          "41: #include <ctype.h>",
          "43: #ifdef _WIN32",
          "44: #pragma warning(push)",
          "45: #pragma warning(disable : 4244)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"settings.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: static void freerdp_settings_free_internal(rdpSettings* settings)",
          "628: {",
          "638:  free(settings->ChannelDefArray);",
          "639:  free(settings->MonitorDefArray);",
          "640:  free(settings->MonitorIds);",
          "649:  free(settings->ReceivedCapabilities);",
          "650:  free(settings->OrderSupport);",
          "653:  free(settings->ServerRandom);",
          "654:  free(settings->ClientRandom);",
          "655:  free(settings->ServerCertificate);",
          "657:  certificate_free(settings->RdpServerCertificate);",
          "662:  free(settings->ClientAutoReconnectCookie);",
          "663:  free(settings->ServerAutoReconnectCookie);",
          "664:  free(settings->ClientTimeZone);",
          "",
          "[Removed Lines]",
          "629:  free(settings->ServerHostname);",
          "630:  free(settings->Username);",
          "631:  free(settings->Password);",
          "632:  free(settings->Domain);",
          "633:  free(settings->PasswordHash);",
          "634:  free(settings->AcceptedCert);",
          "635:  free(settings->AlternateShell);",
          "636:  free(settings->ShellWorkingDirectory);",
          "637:  free(settings->ComputerName);",
          "641:  free(settings->ClientAddress);",
          "642:  free(settings->ClientDir);",
          "643:  free(settings->AllowedTlsCiphers);",
          "644:  free(settings->NtlmSamFile);",
          "645:  free(settings->CertificateFile);",
          "646:  free(settings->PrivateKeyFile);",
          "647:  free(settings->ConnectionFile);",
          "648:  free(settings->AssistanceFile);",
          "651:  free(settings->ClientHostname);",
          "652:  free(settings->ClientProductId);",
          "656:  free(settings->RdpKeyFile);",
          "658:  free(settings->CertificateContent);",
          "659:  free(settings->PrivateKeyContent);",
          "660:  free(settings->RdpKeyContent);",
          "661:  free(settings->CertificateAcceptedFingerprints);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "666:  free(settings->GlyphCache);",
          "667:  free(settings->FragCache);",
          "668:  key_free(settings->RdpServerRsaKey);",
          "672:  free(settings->LoadBalanceInfo);",
          "678:  free(settings->RedirectionPassword);",
          "679:  free(settings->RedirectionTsvUrl);",
          "710:  freerdp_target_net_addresses_free(settings);",
          "711:  freerdp_device_collection_free(settings);",
          "712:  freerdp_static_channel_collection_free(settings);",
          "713:  freerdp_dynamic_channel_collection_free(settings);",
          "715: }",
          "717: void freerdp_settings_free(rdpSettings* settings)",
          "",
          "[Removed Lines]",
          "669:  free(settings->ConfigPath);",
          "670:  free(settings->CurrentPath);",
          "671:  free(settings->HomePath);",
          "673:  free(settings->TargetNetAddress);",
          "674:  free(settings->RedirectionTargetFQDN);",
          "675:  free(settings->RedirectionTargetNetBiosName);",
          "676:  free(settings->RedirectionUsername);",
          "677:  free(settings->RedirectionDomain);",
          "680:  free(settings->RedirectionAcceptedCert);",
          "681:  free(settings->RemoteAssistanceSessionId);",
          "682:  free(settings->RemoteAssistancePassword);",
          "683:  free(settings->RemoteAssistancePassStub);",
          "684:  free(settings->RemoteAssistanceRCTicket);",
          "685:  free(settings->AuthenticationServiceClass);",
          "686:  free(settings->GatewayHostname);",
          "687:  free(settings->GatewayUsername);",
          "688:  free(settings->GatewayPassword);",
          "689:  free(settings->GatewayDomain);",
          "690:  free(settings->GatewayAccessToken);",
          "691:  free(settings->GatewayAcceptedCert);",
          "692:  free(settings->CertificateName);",
          "693:  free(settings->DynamicDSTTimeZoneKeyName);",
          "694:  free(settings->PreconnectionBlob);",
          "695:  free(settings->KerberosKdc);",
          "696:  free(settings->KerberosRealm);",
          "697:  free(settings->DumpRemoteFxFile);",
          "698:  free(settings->PlayRemoteFxFile);",
          "699:  free(settings->RemoteApplicationName);",
          "700:  free(settings->RemoteApplicationIcon);",
          "701:  free(settings->RemoteApplicationProgram);",
          "702:  free(settings->RemoteApplicationFile);",
          "703:  free(settings->RemoteApplicationGuid);",
          "704:  free(settings->RemoteApplicationCmdLine);",
          "705:  free(settings->ImeFileName);",
          "706:  free(settings->DrivesToRedirect);",
          "707:  free(settings->WindowTitle);",
          "708:  free(settings->WmClass);",
          "709:  free(settings->ActionScript);",
          "714:  memset(settings, 0, sizeof(rdpSettings));",
          "",
          "[Added Lines]",
          "657:  free(settings->ActionScript);",
          "658:  settings->ActionScript = NULL;",
          "661:  freerdp_settings_free_keys(settings, TRUE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "723:  free(settings);",
          "724: }",
          "727: {",
          "728:  UINT32 index;",
          "731:   return FALSE;",
          "800:  if (settings->LoadBalanceInfo && settings->LoadBalanceInfoLength)",
          "801:  {",
          "",
          "[Removed Lines]",
          "726: BOOL freerdp_settings_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "730:  if (!settings || !_settings)",
          "732:  freerdp_settings_free_internal(_settings);",
          "736: #define CHECKED_STRDUP(name)                                            \\",
          "737:  if (settings->name && !(_settings->name = _strdup(settings->name))) \\",
          "738:  goto out_fail",
          "798:  CHECKED_STRDUP(ActionScript);",
          "",
          "[Added Lines]",
          "673: static BOOL freerdp_settings_int_buffer_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "675:  BOOL rc = FALSE;",
          "678:  if (!_settings || !settings)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "903:  CopyMemory(_settings->ReceivedCapabilities, settings->ReceivedCapabilities, 32);",
          "904:  CopyMemory(_settings->OrderSupport, settings->OrderSupport, 32);",
          "915:  _settings->BitmapCacheV2CellInfo =",
          "916:      (BITMAP_CACHE_V2_CELL_INFO*)malloc(sizeof(BITMAP_CACHE_V2_CELL_INFO) * 6);",
          "",
          "[Removed Lines]",
          "905:  _settings->ClientHostname = _strdup(settings->ClientHostname);",
          "907:  if (!_settings->ClientHostname)",
          "908:   goto out_fail;",
          "910:  _settings->ClientProductId = _strdup(settings->ClientProductId);",
          "912:  if (!_settings->ClientProductId)",
          "913:   goto out_fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:  CopyMemory(_settings->GlyphCache, settings->GlyphCache, sizeof(GLYPH_CACHE_DEFINITION) * 10);",
          "934:  CopyMemory(_settings->FragCache, settings->FragCache, sizeof(GLYPH_CACHE_DEFINITION));",
          "946:  _settings->ClientAutoReconnectCookie =",
          "947:      (ARC_CS_PRIVATE_PACKET*)malloc(sizeof(ARC_CS_PRIVATE_PACKET));",
          "",
          "[Removed Lines]",
          "936:  if (settings->CertificateContent)",
          "937:   _settings->CertificateContent = _strdup(settings->CertificateContent);",
          "938:  if (settings->PrivateKeyContent)",
          "939:   _settings->PrivateKeyContent = _strdup(settings->PrivateKeyContent);",
          "940:  if (settings->RdpKeyContent)",
          "941:   _settings->RdpKeyContent = _strdup(settings->RdpKeyContent);",
          "942:  if (settings->CertificateAcceptedFingerprints)",
          "943:   _settings->CertificateAcceptedFingerprints =",
          "944:       _strdup(settings->CertificateAcceptedFingerprints);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1119:    goto out_fail;",
          "1120:  }",
          "1122:  return TRUE;",
          "1123: out_fail:",
          "1124:  freerdp_settings_free_internal(_settings);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:  if (settings->ActionScript)",
          "985:   _settings->ActionScript = _strdup(settings->ActionScript);",
          "986:  rc = TRUE;",
          "987: out_fail:",
          "988:  return rc;",
          "989: }",
          "991: BOOL freerdp_settings_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "992: {",
          "993:  BOOL rc;",
          "995:  if (!settings || !_settings)",
          "996:   return FALSE;",
          "999:  freerdp_settings_free_internal(_settings);",
          "1002:  rc = freerdp_settings_clone_keys(_settings, settings);",
          "1004:  _settings->LoadBalanceInfo = NULL;",
          "1005:  _settings->ServerRandom = NULL;",
          "1006:  _settings->ClientRandom = NULL;",
          "1007:  _settings->RdpServerCertificate = NULL;",
          "1008:  _settings->RdpServerRsaKey = NULL;",
          "1009:  _settings->ChannelDefArray = NULL;",
          "1010:  _settings->MonitorDefArray = NULL;",
          "1011:  _settings->MonitorIds = NULL;",
          "1012:  _settings->ReceivedCapabilities = NULL;",
          "1013:  _settings->OrderSupport = NULL;",
          "1014:  _settings->BitmapCacheV2CellInfo = NULL;",
          "1015:  _settings->GlyphCache = NULL;",
          "1016:  _settings->FragCache = NULL;",
          "1017:  _settings->ClientAutoReconnectCookie = NULL;",
          "1018:  _settings->ServerAutoReconnectCookie = NULL;",
          "1019:  _settings->ClientTimeZone = NULL;",
          "1020:  _settings->RedirectionPassword = NULL;",
          "1021:  _settings->RedirectionTsvUrl = NULL;",
          "1022:  _settings->TargetNetAddresses = NULL;",
          "1023:  _settings->DeviceArray = NULL;",
          "1024:  _settings->StaticChannelArray = NULL;",
          "1025:  _settings->DynamicChannelArray = NULL;",
          "1026:  _settings->ActionScript = NULL;",
          "1027:  if (!rc)",
          "1028:   goto out_fail;",
          "1031:  if (!freerdp_settings_int_buffer_copy(_settings, settings))",
          "1032:   goto out_fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1135:  return _settings;",
          "1136: out_fail:",
          "1144:  return NULL;",
          "1145: }",
          "1146: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "1143:  free(_settings);",
          "",
          "[Added Lines]",
          "1048:  freerdp_settings_free(_settings);",
          "",
          "---------------"
        ],
        "libfreerdp/core/settings.h||libfreerdp/core/settings.h": [
          "File: libfreerdp/core/settings.h -> libfreerdp/core/settings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <freerdp/api.h>",
          "28: FREERDP_LOCAL BOOL freerdp_settings_set_default_order_support(rdpSettings* settings);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: FREERDP_LOCAL BOOL freerdp_settings_set_pointer(rdpSettings* dst, size_t index, const void* ptr);",
          "30: FREERDP_LOCAL BOOL freerdp_settings_clone_keys(rdpSettings* dst, const rdpSettings* src);",
          "31: FREERDP_LOCAL void freerdp_settings_free_keys(rdpSettings* dst, BOOL cleanup);",
          "32: FREERDP_LOCAL BOOL freerdp_settings_set_string_(rdpSettings* settings, size_t id, const char* val,",
          "33:                                                 BOOL cleanup);",
          "",
          "---------------"
        ],
        "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c": [
          "File: libfreerdp/core/test/TestSettings.c -> libfreerdp/core/test/TestSettings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  int rc = -1;",
          "7:  size_t x;",
          "8:  rdpSettings* settings = NULL;",
          "10:  WINPR_UNUSED(argc);",
          "11:  WINPR_UNUSED(argv);",
          "12:  settings = freerdp_settings_new(0);",
          "",
          "[Removed Lines]",
          "9:  rdpSettings* cloned;",
          "",
          "[Added Lines]",
          "9:  rdpSettings* cloned = NULL;",
          "10:  rdpSettings* cloned2 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   return -1;",
          "18:  }",
          "22:  cloned = freerdp_settings_clone(settings);",
          "24:  if (!cloned)",
          "31: #if defined(have_bool_list_indices)",
          "33:  for (x = 0; x < ARRAYSIZE(bool_list_indices); x++)",
          "34:  {",
          "35:   const size_t key = bool_list_indices[x];",
          "36:   const BOOL val = freerdp_settings_get_bool(settings, key);",
          "38:   if (!freerdp_settings_set_bool(settings, key, val))",
          "39:    goto fail;",
          "40:  }",
          "",
          "[Removed Lines]",
          "20:  settings->Username = _strdup(\"abcdefg\");",
          "21:  settings->Password = _strdup(\"xyz\");",
          "25:  {",
          "26:   printf(\"Problem cloning settings\\n\");",
          "27:   freerdp_settings_free(settings);",
          "28:   return -1;",
          "29:  }",
          "",
          "[Added Lines]",
          "21:  if (!freerdp_settings_set_string(settings, FreeRDP_Username, \"abcdefg\"))",
          "22:   goto fail;",
          "23:  if (!freerdp_settings_set_string(settings, FreeRDP_Password, \"xyz\"))",
          "24:   goto fail;",
          "29:   goto fail;",
          "36:   const char* name = freerdp_settings_get_name_for_key(key);",
          "38:   const BOOL cval = freerdp_settings_get_bool(cloned, key);",
          "39:   if (val != cval)",
          "40:   {",
          "41:    printf(\"mismatch for key %s: %u -> copy %u\\n\", name, val, cval);",
          "42:    goto fail;",
          "43:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:  for (x = 0; x < ARRAYSIZE(int16_list_indices); x++)",
          "46:  {",
          "47:   const size_t key = int16_list_indices[x];",
          "48:   const INT16 val = freerdp_settings_get_int16(settings, key);",
          "50:   if (!freerdp_settings_set_int16(settings, key, val))",
          "51:    goto fail;",
          "52:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   const char* name = freerdp_settings_get_name_for_key(key);",
          "56:   const INT16 cval = freerdp_settings_get_int16(cloned, key);",
          "57:   if (val != cval)",
          "58:   {",
          "59:    printf(\"mismatch for key %s: %\" PRId16 \" -> copy %\" PRId16 \"\\n\", name, val, cval);",
          "60:    goto fail;",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:  for (x = 0; x < ARRAYSIZE(uint16_list_indices); x++)",
          "58:  {",
          "59:   const size_t key = uint16_list_indices[x];",
          "60:   const UINT16 val = freerdp_settings_get_uint16(settings, key);",
          "62:   if (!freerdp_settings_set_uint16(settings, key, val))",
          "63:    goto fail;",
          "64:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   const char* name = freerdp_settings_get_name_for_key(key);",
          "74:   const UINT16 cval = freerdp_settings_get_uint16(cloned, key);",
          "75:   if (val != cval)",
          "76:   {",
          "77:    printf(\"mismatch for key %s: %\" PRIu16 \" -> copy %\" PRIu16 \"\\n\", name, val, cval);",
          "78:    goto fail;",
          "79:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:  for (x = 0; x < ARRAYSIZE(uint32_list_indices); x++)",
          "70:  {",
          "71:   const size_t key = uint32_list_indices[x];",
          "72:   const UINT32 val = freerdp_settings_get_uint32(settings, key);",
          "74:   if (!freerdp_settings_set_uint32(settings, key, val))",
          "75:    goto fail;",
          "76:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   const char* name = freerdp_settings_get_name_for_key(key);",
          "92:   const UINT32 cval = freerdp_settings_get_uint32(cloned, key);",
          "93:   if (val != cval)",
          "94:   {",
          "95:    printf(\"mismatch for key %s: %\" PRIu32 \" -> copy %\" PRIu32 \"\\n\", name, val, cval);",
          "96:    goto fail;",
          "97:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "81:  for (x = 0; x < ARRAYSIZE(int32_list_indices); x++)",
          "82:  {",
          "83:   const size_t key = int32_list_indices[x];",
          "84:   const INT32 val = freerdp_settings_get_int32(settings, key);",
          "86:   if (!freerdp_settings_set_int32(settings, key, val))",
          "87:    goto fail;",
          "88:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   const char* name = freerdp_settings_get_name_for_key(key);",
          "110:   const INT32 cval = freerdp_settings_get_int32(cloned, key);",
          "111:   if (val != cval)",
          "112:   {",
          "113:    printf(\"mismatch for key %s: %\" PRId32 \" -> copy %\" PRId32 \"\\n\", name, val, cval);",
          "114:    goto fail;",
          "115:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "93:  for (x = 0; x < ARRAYSIZE(uint64_list_indices); x++)",
          "94:  {",
          "95:   const size_t key = uint64_list_indices[x];",
          "96:   const UINT64 val = freerdp_settings_get_uint64(settings, key);",
          "98:   if (!freerdp_settings_set_uint64(settings, key, val))",
          "99:    goto fail;",
          "100:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   const char* name = freerdp_settings_get_name_for_key(key);",
          "128:   const UINT64 cval = freerdp_settings_get_uint64(cloned, key);",
          "129:   if (val != cval)",
          "130:   {",
          "131:    printf(\"mismatch for key %s: %\" PRIu64 \" -> copy %\" PRIu64 \"\\n\", name, val, cval);",
          "132:    goto fail;",
          "133:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "105:  for (x = 0; x < ARRAYSIZE(int64_list_indices); x++)",
          "106:  {",
          "107:   const size_t key = int64_list_indices[x];",
          "108:   const INT64 val = freerdp_settings_get_int64(settings, key);",
          "110:   if (!freerdp_settings_set_int64(settings, key, val))",
          "111:    goto fail;",
          "112:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:   const char* name = freerdp_settings_get_name_for_key(key);",
          "146:   const INT64 cval = freerdp_settings_get_int64(cloned, key);",
          "147:   if (val != cval)",
          "148:   {",
          "149:    printf(\"mismatch for key %s: %\" PRId64 \" -> copy %\" PRId64 \"\\n\", name, val, cval);",
          "150:    goto fail;",
          "151:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "119:   const size_t key = string_list_indices[x];",
          "120:   const char val[] = \"test-string\";",
          "121:   const char* res;",
          "123:   if (!freerdp_settings_set_string(settings, key, val))",
          "124:    goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   const char* name = freerdp_settings_get_name_for_key(key);",
          "165:   const char* oval = freerdp_settings_get_string(settings, key);",
          "166:   const char* cval = freerdp_settings_get_string(cloned, key);",
          "167:   if ((oval != cval) && (strcmp(oval, cval) != 0))",
          "168:   {",
          "169:    printf(\"mismatch for key %s: %s -> copy %s\\n\", name, oval, cval);",
          "170:    goto fail;",
          "171:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "139:  }",
          "141: #endif",
          "142:  rc = 0;",
          "143: fail:",
          "144:  freerdp_settings_free(cloned);",
          "145:  freerdp_settings_free(settings);",
          "146:  return rc;",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:  cloned2 = freerdp_settings_clone(settings);",
          "192:  if (!cloned2)",
          "193:   goto fail;",
          "194:  if (!freerdp_settings_copy(cloned2, cloned))",
          "195:   goto fail;",
          "200:  freerdp_settings_free(cloned2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}