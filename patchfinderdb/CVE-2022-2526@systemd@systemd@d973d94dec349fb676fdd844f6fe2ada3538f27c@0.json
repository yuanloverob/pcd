{
  "cve_id": "CVE-2022-2526",
  "cve_desc": "A use-after-free vulnerability was found in systemd. This issue occurs due to the on_stream_io() function and dns_stream_complete() function in 'resolved-dns-stream.c' not incrementing the reference counting for the DnsStream object. Therefore, other functions and callbacks called can dereference the DNSStream object, causing the use-after-free when the reference is still used later.",
  "repo": "systemd/systemd",
  "patch_hash": "d973d94dec349fb676fdd844f6fe2ada3538f27c",
  "patch_info": {
    "commit_hash": "d973d94dec349fb676fdd844f6fe2ada3538f27c",
    "repo": "systemd/systemd",
    "commit_url": "https://github.com/systemd/systemd/commit/d973d94dec349fb676fdd844f6fe2ada3538f27c",
    "files": [
      "src/resolve/resolved-dns-stream.c"
    ],
    "message": "resolved: pin stream while calling callbacks for it\n\nThese callbacks might unref the stream, but we still have to access it,\nlet's hence ref it explicitly.\n\nMaybe fixes: #10725",
    "before_after_code_files": [
      "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
    ]
  },
  "patch_diff": {
    "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c": [
      "File: src/resolve/resolved-dns-stream.c -> src/resolve/resolved-dns-stream.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "273: }",
      "275: static int on_stream_io(sd_event_source *es, int fd, uint32_t revents, void *userdata) {",
      "277:         int r;",
      "279:         assert(s);",
      "",
      "[Removed Lines]",
      "276:         DnsStream *s = userdata;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b27a32a0def7dfd32aa9c311cdf14fd90b8d1297",
      "candidate_info": {
        "commit_hash": "b27a32a0def7dfd32aa9c311cdf14fd90b8d1297",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/b27a32a0def7dfd32aa9c311cdf14fd90b8d1297",
        "files": [
          "src/resolve/resolved-dns-stream.c"
        ],
        "message": "resolved: line split dns_stream_new() function signature",
        "before_after_code_files": [
          "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/11055"
        ],
        "olp_code_files": {
          "patch": [
            "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
          ],
          "candidate": [
            "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c": [
          "File: src/resolve/resolved-dns-stream.c -> src/resolve/resolved-dns-stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456: DEFINE_TRIVIAL_REF_UNREF_FUNC(DnsStream, dns_stream, dns_stream_free);",
          "459:         _cleanup_(dns_stream_unrefp) DnsStream *s = NULL;",
          "460:         int r;",
          "",
          "[Removed Lines]",
          "458: int dns_stream_new(Manager *m, DnsStream **ret, DnsProtocol protocol, int fd, const union sockaddr_union *tfo_address) {",
          "",
          "[Added Lines]",
          "458: int dns_stream_new(",
          "459:                 Manager *m,",
          "460:                 DnsStream **ret,",
          "461:                 DnsProtocol protocol,",
          "462:                 int fd,",
          "463:                 const union sockaddr_union *tfo_address) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "904dcaf9d4933499f8334859f52ea8497f2d24ff",
      "candidate_info": {
        "commit_hash": "904dcaf9d4933499f8334859f52ea8497f2d24ff",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/904dcaf9d4933499f8334859f52ea8497f2d24ff",
        "files": [
          "src/resolve/resolved-dns-server.c",
          "src/resolve/resolved-dns-server.h",
          "src/resolve/resolved-dns-transaction.c"
        ],
        "message": "resolved: take particular care when detaching DnsServer from its default stream\n\nDnsStream and DnsServer have a symbiotic relationship: one DnsStream is\nthe current \"default\" stream of the server (and thus reffed by it), but\neach stream also refs the server it is connected to. This cyclic\ndependency can result in weird situations: when one is\ndestroyed/unlinked/stopped it needs to unregister itself from the other,\nbut doing this will trigger unregistration of the other. Hence, let's\nmake sure we unregister the stream from the server before destroying it,\nto break this cycle.\n\nMost likely fixes: #10725",
        "before_after_code_files": [
          "src/resolve/resolved-dns-server.c||src/resolve/resolved-dns-server.c",
          "src/resolve/resolved-dns-server.h||src/resolve/resolved-dns-server.h",
          "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/11055"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resolve/resolved-dns-server.c||src/resolve/resolved-dns-server.c": [
          "File: src/resolve/resolved-dns-server.c -> src/resolve/resolved-dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static DnsServer* dns_server_free(DnsServer *s)  {",
          "104:         assert(s);",
          "108: #if ENABLE_DNS_OVER_TLS",
          "109:         dnstls_server_free(s);",
          "",
          "[Removed Lines]",
          "106:         dns_stream_unref(s->stream);",
          "",
          "[Added Lines]",
          "106:         dns_server_unref_stream(s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:         if (s->manager->current_dns_server == s)",
          "159:                 manager_set_dns_server(s->manager, NULL);",
          "161:         dns_server_unref(s);",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         dns_server_unref_stream(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "826:         s->warned_downgrade = false;",
          "828:         dns_server_reset_counters(s);",
          "829: }",
          "831: void dns_server_reset_features_all(DnsServer *s) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:         dns_server_unref_stream(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "886:                 yes_no(s->packet_rrsig_missing));",
          "887: }",
          "889: static const char* const dns_server_type_table[_DNS_SERVER_TYPE_MAX] = {",
          "890:         [DNS_SERVER_SYSTEM] = \"system\",",
          "891:         [DNS_SERVER_FALLBACK] = \"fallback\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "895: void dns_server_unref_stream(DnsServer *s) {",
          "896:         DnsStream *ref;",
          "898:         assert(s);",
          "903:         ref = TAKE_PTR(s->stream);",
          "906:         dns_stream_unref(ref);",
          "907: }",
          "",
          "---------------"
        ],
        "src/resolve/resolved-dns-server.h||src/resolve/resolved-dns-server.h": [
          "File: src/resolve/resolved-dns-server.h -> src/resolve/resolved-dns-server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: void dns_server_reset_features_all(DnsServer *s);",
          "153: void dns_server_dump(DnsServer *s, FILE *f);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: void dns_server_unref_stream(DnsServer *s);",
          "",
          "---------------"
        ],
        "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c": [
          "File: src/resolve/resolved-dns-transaction.c -> src/resolve/resolved-dns-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "639: #endif",
          "641:                 if (t->server) {",
          "643:                         t->server->stream = dns_stream_ref(s);",
          "644:                         s->server = dns_server_ref(t->server);",
          "645:                 }",
          "",
          "[Removed Lines]",
          "642:                         dns_stream_unref(t->server->stream);",
          "",
          "[Added Lines]",
          "642:                         dns_server_unref_stream(t->server);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56e267dee20fbd4565d27870f2903d4d31881818",
      "candidate_info": {
        "commit_hash": "56e267dee20fbd4565d27870f2903d4d31881818",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/56e267dee20fbd4565d27870f2903d4d31881818",
        "files": [
          "src/resolve/resolved-dns-transaction.c"
        ],
        "message": "resolved: remove redundant code",
        "before_after_code_files": [
          "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/11055"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c": [
          "File: src/resolve/resolved-dns-transaction.c -> src/resolve/resolved-dns-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:                 p = TAKE_PTR(s->server->stream);",
          "514:         if (ERRNO_IS_DISCONNECT(error) && s->protocol != DNS_PROTOCOL_LLMNR) {",
          "517:                 log_debug_errno(error, \"Connection failure for DNS TCP stream: %m\");",
          "519:                 if (s->transactions) {",
          "520:                         t = s->transactions;",
          "522:                         dns_server_packet_lost(t->server, IPPROTO_TCP, t->current_feature_level);",
          "523:                 }",
          "524:         }",
          "",
          "[Removed Lines]",
          "515:                 usec_t usec;",
          "521:                         assert_se(sd_event_now(t->scope->manager->event, clock_boottime_or_monotonic(), &usec) >= 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6dc55566bb3633dcb959167aef4eb13e24c3204",
      "candidate_info": {
        "commit_hash": "e6dc55566bb3633dcb959167aef4eb13e24c3204",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/e6dc55566bb3633dcb959167aef4eb13e24c3204",
        "files": [
          "src/resolve/resolved-dns-stream.c"
        ],
        "message": "resolved: be more careful with types in dns_stream_writev()\n\nLet's not name a variable of type ssize_t \"r\". We usually use \"r\" for\nreturn values of API calls that return some kind of error as in int.\nThis creates a lot of confusion if used differently here, which actually\nresulted in connect()'s return value being assigned to this mistyped \"r\"\nby accident.\n\nLet's rename the variable \"m\" hence, and not use it for connect() return\nvalues.",
        "before_after_code_files": [
          "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/11055"
        ],
        "olp_code_files": {
          "patch": [
            "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
          ],
          "candidate": [
            "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/resolve/resolved-dns-stream.c||src/resolve/resolved-dns-stream.c": [
          "File: src/resolve/resolved-dns-stream.c -> src/resolve/resolved-dns-stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: }",
          "195: ssize_t dns_stream_writev(DnsStream *s, const struct iovec *iov, size_t iovcnt, int flags) {",
          "198:         assert(s);",
          "199:         assert(iov);",
          "",
          "[Removed Lines]",
          "196:         ssize_t r;",
          "",
          "[Added Lines]",
          "196:         ssize_t m;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:                 ssize_t ss;",
          "204:                 size_t i;",
          "207:                 for (i = 0; i < iovcnt; i++) {",
          "208:                         ss = dnstls_stream_write(s, iov[i].iov_base, iov[i].iov_len);",
          "209:                         if (ss < 0)",
          "210:                                 return ss;",
          "213:                         if (ss != (ssize_t) iov[i].iov_len)",
          "214:                                 continue;",
          "215:                 }",
          "",
          "[Removed Lines]",
          "206:                 r = 0;",
          "212:                         r += ss;",
          "",
          "[Added Lines]",
          "206:                 m = 0;",
          "212:                         m += ss;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:                         .msg_namelen = s->tfo_salen",
          "224:                 };",
          "228:                         if (errno == EOPNOTSUPP) {",
          "229:                                 s->tfo_salen = 0;",
          "232:                                         return -errno;",
          "239:                 } else",
          "241:         } else {",
          "245:         }",
          "248: }",
          "250: static ssize_t dns_stream_read(DnsStream *s, void *buf, size_t count) {",
          "",
          "[Removed Lines]",
          "226:                 r = sendmsg(s->fd, &hdr, MSG_FASTOPEN);",
          "227:                 if (r < 0) {",
          "230:                                 r = connect(s->fd, &s->tfo_address.sa, s->tfo_salen);",
          "231:                                 if (r < 0)",
          "234:                                 r = -EAGAIN;",
          "235:                         } else if (errno == EINPROGRESS)",
          "236:                                 r = -EAGAIN;",
          "237:                         else",
          "238:                                 r = -errno;",
          "242:                 r = writev(s->fd, iov, iovcnt);",
          "243:                 if (r < 0)",
          "244:                         r = -errno;",
          "247:         return r;",
          "",
          "[Added Lines]",
          "226:                 m = sendmsg(s->fd, &hdr, MSG_FASTOPEN);",
          "227:                 if (m < 0) {",
          "230:                                 if (connect(s->fd, &s->tfo_address.sa, s->tfo_salen) < 0)",
          "233:                                 return -EAGAIN;",
          "234:                         }",
          "235:                         if (errno == EINPROGRESS)",
          "236:                                 return -EAGAIN;",
          "238:                         return -errno;",
          "242:                 m = writev(s->fd, iov, iovcnt);",
          "243:                 if (m < 0)",
          "244:                         return -errno;",
          "247:         return m;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec962fba62f6741683c954a5f6391e193e86d4ee",
      "candidate_info": {
        "commit_hash": "ec962fba62f6741683c954a5f6391e193e86d4ee",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/ec962fba62f6741683c954a5f6391e193e86d4ee",
        "files": [
          "src/resolve/resolved-dns-transaction.c"
        ],
        "message": "resolved: add small helper to pick DNS port number\n\nThis shouldn't be hidden in some function argument expression. Let's\nmake this more explicit by turning this into its own helper function.",
        "before_after_code_files": [
          "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/11055"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resolve/resolved-dns-transaction.c||src/resolve/resolved-dns-transaction.c": [
          "File: src/resolve/resolved-dns-transaction.c -> src/resolve/resolved-dns-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:         return 0;",
          "554: }",
          "556: static int dns_transaction_emit_tcp(DnsTransaction *t) {",
          "557:         _cleanup_close_ int fd = -1;",
          "558:         _cleanup_(dns_stream_unrefp) DnsStream *s = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556: static uint16_t dns_port_for_feature_level(DnsServerFeatureLevel level) {",
          "557:         return DNS_SERVER_FEATURE_LEVEL_IS_TLS(level) ? 853 : 53;",
          "558: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "580:                 if (t->server->stream && (DNS_SERVER_FEATURE_LEVEL_IS_TLS(t->current_feature_level) == t->server->stream->encrypted))",
          "581:                         s = dns_stream_ref(t->server->stream);",
          "582:                 else",
          "585:                 break;",
          "",
          "[Removed Lines]",
          "583:                         fd = dns_scope_socket_tcp(t->scope, AF_UNSPEC, NULL, t->server, DNS_SERVER_FEATURE_LEVEL_IS_TLS(t->current_feature_level) ? 853 : 53, &sa);",
          "",
          "[Added Lines]",
          "587:                         fd = dns_scope_socket_tcp(t->scope, AF_UNSPEC, NULL, t->server, dns_port_for_feature_level(t->current_feature_level), &sa);",
          "",
          "---------------"
        ]
      }
    }
  ]
}