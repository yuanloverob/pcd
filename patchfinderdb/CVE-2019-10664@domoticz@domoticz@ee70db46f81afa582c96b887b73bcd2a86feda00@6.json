{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f9807c8a31df932e82031c1f0583adc152817d7",
      "candidate_info": {
        "commit_hash": "4f9807c8a31df932e82031c1f0583adc152817d7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4f9807c8a31df932e82031c1f0583adc152817d7",
        "files": [
          "hardware/Wunderground.cpp",
          "hardware/Wunderground.h",
          "www/app/hardware/Hardware.html"
        ],
        "message": "Updated Weather Underground for use with the new API, option to specify Lat/Long as location",
        "before_after_code_files": [
          "hardware/Wunderground.cpp||hardware/Wunderground.cpp",
          "hardware/Wunderground.h||hardware/Wunderground.h",
          "www/app/hardware/Hardware.html||www/app/hardware/Hardware.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Wunderground.cpp||hardware/Wunderground.cpp": [
          "File: hardware/Wunderground.cpp -> hardware/Wunderground.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"../json/json.h\"",
          "10: #include \"../main/RFXtrx.h\"",
          "11: #include \"../main/mainworker.h\"",
          "13: #define round(a) ( int ) ( a + .5 )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"../main/SQLHelper.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: void CWunderground::Do_Work()",
          "97: {",
          "98:  int sec_counter = 590;",
          "99:  _log.Log(LOG_STATUS, \"Wunderground: Worker started...\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: #ifdef DEBUG_WUNDERGROUNDR",
          "100:  GetMeterDetails();",
          "101: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125: {",
          "126:  std::stringstream sURL;",
          "127:  std::string szLoc = CURLEncode::URLEncode(m_Location);",
          "128:  sURL << \"http://www.wunderground.com/cgi-bin/findweather/getForecast?query=\" << szLoc;",
          "129:  return sURL.str();",
          "130: }",
          "132: void CWunderground::GetMeterDetails()",
          "133: {",
          "134:  std::string sResult;",
          "135: #ifdef DEBUG_WUNDERGROUNDR",
          "136:  sResult= ReadFile(\"E:\\\\wu.json\");",
          "137: #else",
          "138:  std::stringstream sURL;",
          "139:  std::string szLoc = CURLEncode::URLEncode(m_Location);",
          "141:  bool bret;",
          "142:  std::string szURL=sURL.str();",
          "143:  bret=HTTPClient::GET(szURL,sResult);",
          "144:  if (!bret)",
          "145:  {",
          "147:   return;",
          "148:  }",
          "149: #ifdef DEBUG_WUNDERGROUNDW",
          "",
          "[Removed Lines]",
          "140:  sURL << \"http://api.wunderground.com/api/\" << m_APIKey << \"/conditions/q/\" << szLoc << \".json\";",
          "146:   _log.Log(LOG_ERROR,\"Wunderground: Error getting http data!\");",
          "",
          "[Added Lines]",
          "132:  sURL << \"https://api.weather.com/v3/location/point?geocode=\" << szLoc << \"&language=en-US&format=json&apiKey=\" << m_APIKey;",
          "137: std::string CWunderground::GetWeatherStationFromGeo()",
          "138: {",
          "139:  std::string sValue;",
          "140:  int nValue;",
          "141:  if (m_sql.GetPreferencesVar(\"Location\", nValue, sValue))",
          "142:  {",
          "143:   std::vector<std::string> strarray;",
          "144:   StringSplit(sValue, \";\", strarray);",
          "146:   if (strarray.size() == 2)",
          "147:   {",
          "148:    std::string Latitude = strarray[0];",
          "149:    std::string Longitude = strarray[1];",
          "151:    std::string sResult;",
          "152: #ifdef DEBUG_WUNDERGROUNDR",
          "153:    sResult = ReadFile(\"E:\\\\wu_location.json\");",
          "154: #else",
          "155:    std::stringstream sURL;",
          "156:    sURL << \"https://api.weather.com/v3/location/near?geocode=\" << Latitude << \",\" << Longitude << \"&product=pws&format=json&apiKey=\" << m_APIKey;",
          "157:    bool bret;",
          "158:    std::string szURL = sURL.str();",
          "159:    bret = HTTPClient::GET(szURL, sResult);",
          "160:    if (!bret)",
          "161:    {",
          "162:     _log.Log(LOG_ERROR, \"Wunderground: Error getting location/near result! (Check API key!)\");",
          "163:     return \"\";",
          "164:    }",
          "165: #ifdef DEBUG_WUNDERGROUNDW",
          "166:    SaveString2Disk(sResult, \"E:\\\\wu_location.json\");",
          "167: #endif",
          "168: #endif",
          "169:    Json::Value root;",
          "171:    Json::Reader jReader;",
          "172:    bool ret = jReader.parse(sResult, root);",
          "173:    if ((!ret) || (!root.isObject()))",
          "174:    {",
          "175:     _log.Log(LOG_ERROR, \"WUnderground: Problem getting location/near result. Invalid data received! (Check Station ID!)\");",
          "176:     return \"\";",
          "177:    }",
          "179:    bool bValid = true;",
          "180:    if (root[\"location\"].empty() == true)",
          "181:    {",
          "182:     bValid = false;",
          "183:    }",
          "184:    else if (root[\"location\"][\"stationId\"].empty())",
          "185:    {",
          "186:     bValid = false;",
          "187:    }",
          "188:    if (!bValid)",
          "189:    {",
          "190:     _log.Log(LOG_ERROR, \"WUnderground: Problem getting location/near result.Invalid data received, or no data returned!\");",
          "191:     return \"\";",
          "192:    }",
          "193:    if (root[\"location\"][\"stationId\"].size() > 0)",
          "194:    {",
          "195:     std::string szFirstStation = root[\"location\"][\"stationId\"][0].asString();",
          "196:     return szFirstStation;",
          "197:    }",
          "198:    else",
          "199:     _log.Log(LOG_ERROR, \"WUnderground: Problem getting location/near result. No stations returned!\");",
          "200:   }",
          "201:  }",
          "202:  return \"\";",
          "203: }",
          "207:  if (m_Location.find(\",\") != std::string::npos)",
          "208:  {",
          "209:   std::string newLocation = GetWeatherStationFromGeo();",
          "210:   if (newLocation.empty())",
          "211:    return;",
          "212:   m_Location = newLocation;",
          "213:  }",
          "214:  if (m_Location.empty())",
          "215:   return;",
          "223:  sURL << \"https://api.weather.com/v2/pws/observations/current?stationId=\" << szLoc << \"&format=json&units=m&apiKey=\" << m_APIKey;",
          "229:   _log.Log(LOG_ERROR,\"Wunderground: Error getting http data! (Check API key!)\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:  bool ret=jReader.parse(sResult,root);",
          "157:  if ((!ret) || (!root.isObject()))",
          "158:  {",
          "160:   return;",
          "161:  }",
          "163:  bool bValid = true;",
          "165:  {",
          "166:   bValid = false;",
          "167:  }",
          "169:  {",
          "170:   bValid = false;",
          "181:  }",
          "183:  {",
          "184:   bValid = false;",
          "185:  }",
          "199:  {",
          "201:  }",
          "203:  {",
          "205:   {",
          "214:   }",
          "221:  }",
          "223:  std::string tmpstr;",
          "224:  float temp;",
          "",
          "[Removed Lines]",
          "159:   _log.Log(LOG_ERROR,\"WUnderground: Invalid data received!\");",
          "164:  if (root[\"response\"].empty() == true)",
          "168:  else if (!root[\"response\"][\"error\"].empty())",
          "171:   if (!root[\"response\"][\"error\"][\"description\"].empty())",
          "172:   {",
          "173:    _log.Log(LOG_ERROR, \"WUnderground: Error: %s\", root[\"response\"][\"error\"][\"description\"].asString().c_str());",
          "174:    return;",
          "175:   }",
          "176:  }",
          "177:  else if (root[\"current_observation\"].empty()==true)",
          "178:  {",
          "179:   bValid = false;",
          "180:   return;",
          "182:  else if (root[\"current_observation\"][\"temp_c\"].empty() == true)",
          "186:  else if (m_bForceSingleStation && root[\"current_observation\"][\"station_id\"].empty())",
          "187:  {",
          "188:   bValid = false;",
          "189:  }",
          "190:  else if (m_bForceSingleStation && m_Location.find(root[\"current_observation\"][\"station_id\"].asString()) == std::string::npos)",
          "191:  {",
          "192:   bValid = false;",
          "193:  }",
          "194:  else if (root[\"current_observation\"][\"observation_epoch\"].empty() == true)",
          "195:  {",
          "196:   bValid = false;",
          "197:  }",
          "198:  else if (root[\"current_observation\"][\"local_epoch\"].empty() == true)",
          "200:   bValid = false;",
          "202:  else",
          "204:   if (!m_bFirstTime)",
          "206:    time_t tlocal = static_cast<time_t>(atoll(root[\"current_observation\"][\"local_epoch\"].asString().c_str()));",
          "207:    time_t tobserver = static_cast<time_t>(atoll(root[\"current_observation\"][\"observation_epoch\"].asString().c_str()));",
          "208:    if (difftime(tlocal, tobserver) >= 1800)",
          "209:    {",
          "211:     _log.Log(LOG_ERROR, \"WUnderground: Receiving old data from WU! (No new data return for more than 30 minutes)\");",
          "212:     return;",
          "213:    }",
          "215:   m_bFirstTime = false;",
          "216:  }",
          "217:  if (!bValid)",
          "218:  {",
          "219:   _log.Log(LOG_ERROR, \"WUnderground: Invalid data received, or no data returned!\");",
          "220:   return;",
          "",
          "[Added Lines]",
          "242:   _log.Log(LOG_ERROR,\"WUnderground: Invalid data received! (Check Station ID!)\");",
          "247:  if (root[\"observations\"].empty() == true)",
          "251:  else if (root[\"observations\"][0][\"country\"].empty())",
          "255:  else if (m_Location.find(root[\"observations\"][0][\"stationID\"].asString()) == std::string::npos)",
          "259:  if (!bValid)",
          "261:   _log.Log(LOG_ERROR, \"WUnderground: Invalid data received, or no data returned!\");",
          "262:   return;",
          "265:  root = root[\"observations\"][0];",
          "267:  if (!m_bFirstTime)",
          "269:   time_t tlocal = time(NULL);",
          "270:   time_t tobserver = (time_t)root[\"epoch\"].asInt();",
          "271:   if (difftime(tlocal, tobserver) >= 1800)",
          "274:    _log.Log(LOG_ERROR, \"WUnderground: Receiving old data from WU! (No new data return for more than 30 minutes)\");",
          "275:    return;",
          "278:  m_bFirstTime = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:  int barometric=0;",
          "227:  int barometric_forcast=baroForecastNoInfo;",
          "233:  {",
          "242:  }",
          "244:  {",
          "246:   if (barometric<1000)",
          "247:    barometric_forcast=baroForecastRain;",
          "248:   else if (barometric<1020)",
          "",
          "[Removed Lines]",
          "230:  temp=root[\"current_observation\"][\"temp_c\"].asFloat();",
          "232:  if (root[\"current_observation\"][\"relative_humidity\"].empty()==false)",
          "234:   tmpstr=root[\"current_observation\"][\"relative_humidity\"].asString();",
          "235:   size_t pos=tmpstr.find(\"%\");",
          "236:   if (pos==std::string::npos)",
          "237:   {",
          "238:    _log.Log(LOG_ERROR,\"WUnderground: Invalid data received!\");",
          "239:    return;",
          "240:   }",
          "241:   humidity=atoi(tmpstr.substr(0,pos).c_str());",
          "243:  if (root[\"current_observation\"][\"pressure_mb\"].empty()==false)",
          "245:   barometric=atoi(root[\"current_observation\"][\"pressure_mb\"].asString().c_str());",
          "",
          "[Added Lines]",
          "286:  temp=root[\"metric\"][\"temp\"].asFloat();",
          "288:  if (root[\"humidity\"].empty()==false)",
          "290:   humidity = root[\"humidity\"].asInt();",
          "292:  if (root[\"metric\"][\"pressure\"].empty()==false)",
          "294:   barometric=atoi(root[\"metric\"][\"pressure\"].asString().c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:    barometric_forcast=baroForecastPartlyCloudy;",
          "252:   else",
          "253:    barometric_forcast=baroForecastSunny;",
          "279:  }",
          "281:  if (barometric!=0)",
          "",
          "[Removed Lines]",
          "255:   if (root[\"current_observation\"][\"icon\"].empty()==false)",
          "256:   {",
          "257:    std::string forcasticon=root[\"current_observation\"][\"icon\"].asString();",
          "258:    if (forcasticon==\"partlycloudy\")",
          "259:    {",
          "260:     barometric_forcast=baroForecastPartlyCloudy;",
          "261:    }",
          "262:    else if (forcasticon==\"cloudy\")",
          "263:    {",
          "264:     barometric_forcast=baroForecastCloudy;",
          "265:    }",
          "266:    else if (forcasticon==\"sunny\")",
          "267:    {",
          "268:     barometric_forcast=baroForecastSunny;",
          "269:    }",
          "270:    else if (forcasticon==\"clear\")",
          "271:    {",
          "272:     barometric_forcast=baroForecastSunny;",
          "273:    }",
          "274:    else if (forcasticon==\"rain\")",
          "275:    {",
          "276:     barometric_forcast=baroForecastRain;",
          "277:    }",
          "278:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "303:  int windgust=1;",
          "304:  float windchill=-1;",
          "307:  {",
          "309:  }",
          "311:  {",
          "313:   {",
          "320:   }",
          "321:  }",
          "323:  {",
          "325:   {",
          "332:   }",
          "333:  }",
          "335:  {",
          "337:   {",
          "339:   }",
          "340:  }",
          "341:  if (wind_degrees!=-1)",
          "",
          "[Removed Lines]",
          "306:  if (root[\"current_observation\"][\"wind_degrees\"].empty()==false)",
          "308:   wind_degrees=atoi(root[\"current_observation\"][\"wind_degrees\"].asString().c_str());",
          "310:  if (root[\"current_observation\"][\"wind_mph\"].empty()==false)",
          "312:   if ((root[\"current_observation\"][\"wind_mph\"] != \"N/A\") && (root[\"current_observation\"][\"wind_mph\"] != \"--\"))",
          "314:    float temp_wind_mph = static_cast<float>(atof(root[\"current_observation\"][\"wind_mph\"].asString().c_str()));",
          "315:    if (temp_wind_mph!=-9999.00f)",
          "316:    {",
          "318:     windspeed_ms=temp_wind_mph*0.44704f;",
          "319:    }",
          "322:  if (root[\"current_observation\"][\"wind_gust_mph\"].empty()==false)",
          "324:   if ((root[\"current_observation\"][\"wind_gust_mph\"] != \"N/A\") && (root[\"current_observation\"][\"wind_gust_mph\"] != \"--\"))",
          "326:    float temp_wind_gust_mph = static_cast<float>(atof(root[\"current_observation\"][\"wind_gust_mph\"].asString().c_str()));",
          "327:    if (temp_wind_gust_mph!=-9999.00f)",
          "328:    {",
          "330:     windgust_ms=temp_wind_gust_mph*0.44704f;",
          "331:    }",
          "334:  if (root[\"current_observation\"][\"feelslike_c\"].empty()==false)",
          "336:   if ((root[\"current_observation\"][\"feelslike_c\"] != \"N/A\") && (root[\"current_observation\"][\"feelslike_c\"] != \"--\"))",
          "338:    wind_chill = static_cast<float>(atof(root[\"current_observation\"][\"feelslike_c\"].asString().c_str()));",
          "",
          "[Added Lines]",
          "330:  if (root[\"winddir\"].empty()==false)",
          "332:   wind_degrees=atoi(root[\"winddir\"].asString().c_str());",
          "334:  if (root[\"metric\"][\"windSpeed\"].empty()==false)",
          "336:   if ((root[\"metric\"][\"windSpeed\"] != \"N/A\") && (root[\"metric\"][\"windSpeed\"] != \"--\"))",
          "338:    windspeed_ms = static_cast<float>(atof(root[\"metric\"][\"windSpeed\"].asString().c_str()));",
          "341:  if (root[\"metric\"][\"windGust\"].empty()==false)",
          "343:   if ((root[\"metric\"][\"windGust\"] != \"N/A\") && (root[\"metric\"][\"windGust\"] != \"--\"))",
          "345:    windgust_ms = static_cast<float>(atof(root[\"metric\"][\"windGust\"].asString().c_str()));",
          "348:  if (root[\"metric\"][\"windChill\"].empty()==false)",
          "350:   if ((root[\"metric\"][\"windChill\"] != \"N/A\") && (root[\"metric\"][\"windChill\"] != \"--\"))",
          "352:    wind_chill = static_cast<float>(atof(root[\"metric\"][\"windChill\"].asString().c_str()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "392:  }",
          "396:  {",
          "398:   {",
          "400:    {",
          "406:    }",
          "407:   }",
          "408:  }",
          "412:  {",
          "414:   {",
          "416:    if ((RainCount != -9999.00f) && (RainCount >= 0.00f))",
          "417:    {",
          "418:     RBUF tsen;",
          "",
          "[Removed Lines]",
          "395:  if (root[\"current_observation\"].empty() == false)",
          "397:   if (root[\"current_observation\"][\"UV\"].empty() == false)",
          "399:    if ((root[\"current_observation\"][\"UV\"] != \"N/A\") && (root[\"current_observation\"][\"UV\"] != \"--\"))",
          "401:     float UV = static_cast<float>(atof(root[\"current_observation\"][\"UV\"].asString().c_str()));",
          "402:     if ((UV < 16) && (UV >= 0))",
          "403:     {",
          "404:      SendUVSensor(0, 1, 255, UV, \"UV\");",
          "405:     }",
          "411:  if (root[\"current_observation\"][\"precip_today_metric\"].empty() == false)",
          "413:   if ((root[\"current_observation\"][\"precip_today_metric\"] != \"N/A\") && (root[\"current_observation\"][\"precip_today_metric\"] != \"--\"))",
          "415:    float RainCount = static_cast<float>(atof(root[\"current_observation\"][\"precip_today_metric\"].asString().c_str()));",
          "",
          "[Added Lines]",
          "409:  if (root[\"uv\"].empty() == false)",
          "411:   if ((root[\"uv\"] != \"N/A\") && (root[\"uv\"] != \"--\"))",
          "413:    float UV = static_cast<float>(atof(root[\"uv\"].asString().c_str()));",
          "414:    if ((UV < 16) && (UV >= 0))",
          "416:     SendUVSensor(0, 1, 255, UV, \"UV\");",
          "422:  if (root[\"metric\"][\"precipTotal\"].empty() == false)",
          "424:   if ((root[\"metric\"][\"precipTotal\"] != \"N/A\") && (root[\"metric\"][\"precipTotal\"] != \"--\"))",
          "426:    float RainCount = static_cast<float>(atof(root[\"metric\"][\"precipTotal\"].asString().c_str()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:     tsen.RAIN.rainrateh = 0;",
          "429:     tsen.RAIN.rainratel = 0;",
          "432:     {",
          "434:      {",
          "436:       if (rainrateph != -9999.00f)",
          "437:       {",
          "438:        int at10 = round(std::abs(rainrateph*100.0f));",
          "",
          "[Removed Lines]",
          "431:     if (root[\"current_observation\"][\"precip_1hr_metric\"].empty() == false)",
          "433:      if ((root[\"current_observation\"][\"precip_1hr_metric\"] != \"N/A\") && (root[\"current_observation\"][\"precip_1hr_metric\"] != \"--\"))",
          "435:       float rainrateph = static_cast<float>(atof(root[\"current_observation\"][\"precip_1hr_metric\"].asString().c_str()));",
          "",
          "[Added Lines]",
          "442:     if (root[\"metric\"][\"precipRate\"].empty() == false)",
          "444:      if ((root[\"metric\"][\"precipRate\"] != \"N/A\") && (root[\"metric\"][\"precipRate\"] != \"--\"))",
          "446:       float rainrateph = static_cast<float>(atof(root[\"metric\"][\"precipRate\"].asString().c_str()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "454:   }",
          "455:  }",
          "459:  {",
          "461:   {",
          "463:    if (visibility >= 0)",
          "464:    {",
          "465:     _tGeneralDevice gdevice;",
          "",
          "[Removed Lines]",
          "458:  if (root[\"current_observation\"][\"visibility_km\"].empty() == false)",
          "460:   if ((root[\"current_observation\"][\"visibility_km\"] != \"N/A\") && (root[\"current_observation\"][\"visibility_km\"] != \"--\"))",
          "462:    float visibility = static_cast<float>(atof(root[\"current_observation\"][\"visibility_km\"].asString().c_str()));",
          "",
          "[Added Lines]",
          "469:  if (root[\"visibility\"].empty() == false)",
          "471:   if ((root[\"visibility\"] != \"N/A\") && (root[\"visibility\"] != \"--\"))",
          "473:    float visibility = static_cast<float>(atof(root[\"visibility\"].asString().c_str()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "471:  }",
          "475:  {",
          "477:   {",
          "486:   }",
          "487:  }",
          "488: }",
          "",
          "[Removed Lines]",
          "474:  if (root[\"current_observation\"][\"solarradiation\"].empty() == false)",
          "476:   if ((root[\"current_observation\"][\"solarradiation\"] != \"N/A\") && (root[\"current_observation\"][\"solarradiation\"] != \"--\"))",
          "478:    float radiation = static_cast<float>(atof(root[\"current_observation\"][\"solarradiation\"].asString().c_str()));",
          "479:    if (radiation >= 0.0f)",
          "480:    {",
          "481:     _tGeneralDevice gdevice;",
          "482:     gdevice.subtype = sTypeSolarRadiation;",
          "483:     gdevice.floatval1 = radiation;",
          "484:     sDecodeRXMessage(this, (const unsigned char *)&gdevice, NULL, 255);",
          "485:    }",
          "",
          "[Added Lines]",
          "485:  if (root[\"solarRadiation\"].empty() == false)",
          "487:   float radiation = static_cast<float>(atof(root[\"solarRadiation\"].asString().c_str()));",
          "488:   if (radiation >= 0.0f)",
          "490:    _tGeneralDevice gdevice;",
          "491:    gdevice.subtype = sTypeSolarRadiation;",
          "492:    gdevice.floatval1 = radiation;",
          "493:    sDecodeRXMessage(this, (const unsigned char *)&gdevice, NULL, 255);",
          "",
          "---------------"
        ],
        "hardware/Wunderground.h||hardware/Wunderground.h": [
          "File: hardware/Wunderground.h -> hardware/Wunderground.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  bool StopHardware() override;",
          "16:  void Do_Work();",
          "17:  void GetMeterDetails();",
          "18: private:",
          "19:  bool m_bForceSingleStation;",
          "20:  bool m_bFirstTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  std::string GetWeatherStationFromGeo();",
          "",
          "---------------"
        ],
        "www/app/hardware/Hardware.html||www/app/hardware/Hardware.html": [
          "File: www/app/hardware/Hardware.html -> www/app/hardware/Hardware.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:     </tr>",
          "919:     <tr>",
          "920:      <td align=\"right\" style=\"width:110px\"><label><span data-i18n=\"Location\"></span>:</label></td>",
          "922:     </tr>",
          "923:    </table>",
          "924:   </div>",
          "",
          "[Removed Lines]",
          "921:      <td><input type=\"text\" id=\"location\" style=\"width: 250px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" /></td>",
          "",
          "[Added Lines]",
          "921:      <td><input type=\"text\" id=\"location\" style=\"width: 250px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" /><br />",
          "922:      <span data-i18n=\"StationLatLong\"></span>",
          "923:      </td>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93b71fb5adef035149a166546b33720fcae0a6c2",
      "candidate_info": {
        "commit_hash": "93b71fb5adef035149a166546b33720fcae0a6c2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/93b71fb5adef035149a166546b33720fcae0a6c2",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Setting maximum precision to 12 for shortest presentation of %g (meter values)",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9342:         total_real *= AddjMulti;",
          "9343:         rate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);",
          "9346:         root[\"result\"][ii][\"Rain\"] = szTmp;",
          "9348:         root[\"result\"][ii][\"RainRate\"] = szTmp;",
          "9349:         root[\"result\"][ii][\"Data\"] = sValue;",
          "9350:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "9345:         sprintf(szTmp, \"%g\", total_real);",
          "9347:         sprintf(szTmp, \"%g\", rate);",
          "",
          "[Added Lines]",
          "9345:         sprintf(szTmp, \"%.12g\", total_real);",
          "9347:         sprintf(szTmp, \"%.12g\", rate);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9396:        case MTYPE_ENERGY:",
          "9397:        case MTYPE_ENERGY_GENERATED:",
          "9398:         musage = float(total_real) / divider;",
          "9400:         break;",
          "9401:        case MTYPE_GAS:",
          "9402:         musage = float(total_real) / divider;",
          "9404:         break;",
          "9405:        case MTYPE_WATER:",
          "9406:         musage = float(total_real) / (divider / 1000.0f);",
          "",
          "[Removed Lines]",
          "9399:         sprintf(szTmp, \"%g kWh\", musage);",
          "9403:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9399:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9403:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9435:       {",
          "9436:       case MTYPE_ENERGY:",
          "9437:       case MTYPE_ENERGY_GENERATED:",
          "9439:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9440:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9441:        break;",
          "9442:       case MTYPE_GAS:",
          "9444:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9445:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9446:        break;",
          "9447:       case MTYPE_WATER:",
          "9449:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9450:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9451:        break;",
          "9452:       case MTYPE_COUNTER:",
          "9454:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9455:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9456:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9438:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9453:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9438:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9443:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9448:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9453:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9501:        case MTYPE_ENERGY:",
          "9502:        case MTYPE_ENERGY_GENERATED:",
          "9503:         musage = float(total_real) / divider;",
          "9505:         break;",
          "9506:        case MTYPE_GAS:",
          "9507:         musage = float(total_real) / divider;",
          "9509:         break;",
          "9510:        case MTYPE_WATER:",
          "9511:         musage = float(total_real) / divider;",
          "9513:         break;",
          "9514:        case MTYPE_COUNTER:",
          "9515:         sprintf(szTmp, \"%\" PRIu64, total_real);",
          "",
          "[Removed Lines]",
          "9504:         sprintf(szTmp, \"%g kWh\", musage);",
          "9508:         sprintf(szTmp, \"%g m3\", musage);",
          "9512:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9504:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9508:         sprintf(szTmp, \"%.12g m3\", musage);",
          "9512:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9538:       {",
          "9539:       case MTYPE_ENERGY:",
          "9540:       case MTYPE_ENERGY_GENERATED:",
          "9542:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9543:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9544:        break;",
          "9545:       case MTYPE_GAS:",
          "9547:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9548:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9549:        break;",
          "9550:       case MTYPE_WATER:",
          "9552:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9553:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9554:        break;",
          "9555:       case MTYPE_COUNTER:",
          "9557:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9558:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9559:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9541:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9556:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9541:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9546:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9551:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9556:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9605:       {",
          "9606:       case MTYPE_ENERGY:",
          "9607:       case MTYPE_ENERGY_GENERATED:",
          "9609:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9610:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9611:        break;",
          "9612:       case MTYPE_GAS:",
          "9614:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9615:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9616:        break;",
          "9617:       case MTYPE_WATER:",
          "9619:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9620:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9621:        break;",
          "9622:       case MTYPE_COUNTER:",
          "9624:        root[\"result\"][ii][\"Data\"] = szTmp;",
          "9625:        root[\"result\"][ii][\"Counter\"] = szTmp;",
          "9626:        root[\"result\"][ii][\"ValueQuantity\"] = ValueQuantity;",
          "",
          "[Removed Lines]",
          "9608:        sprintf(szTmp, \"%g kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%gm3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%g m3\", meteroffset + (dvalue / divider));",
          "9623:        sprintf(szTmp, \"%g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "[Added Lines]",
          "9608:        sprintf(szTmp, \"%.12g kWh\", meteroffset + (dvalue / divider));",
          "9613:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9618:        sprintf(szTmp, \"%.12g m3\", meteroffset + (dvalue / divider));",
          "9623:        sprintf(szTmp, \"%.12g %s\", meteroffset + dvalue, ValueUnits.c_str());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9674:        case MTYPE_ENERGY:",
          "9675:        case MTYPE_ENERGY_GENERATED:",
          "9676:         musage = float(total_real) / divider;",
          "9678:         break;",
          "9679:        case MTYPE_GAS:",
          "9680:         musage = float(total_real) / divider;",
          "9682:         break;",
          "9683:        case MTYPE_WATER:",
          "9684:         musage = float(total_real) / divider;",
          "9686:         break;",
          "9687:        case MTYPE_COUNTER:",
          "9688:         sprintf(szTmp, \"%llu %s\", total_real, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9677:         sprintf(szTmp, \"%g kWh\", musage);",
          "9681:         sprintf(szTmp, \"%g m3\", musage);",
          "9685:         sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9677:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9681:         sprintf(szTmp, \"%.12g m3\", musage);",
          "9685:         sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9732:       case MTYPE_ENERGY:",
          "9733:       case MTYPE_ENERGY_GENERATED:",
          "9734:        musage = float(acounter) / divider;",
          "9736:        break;",
          "9737:       case MTYPE_GAS:",
          "9738:        musage = float(acounter) / divider;",
          "9740:        break;",
          "9741:       case MTYPE_WATER:",
          "9742:        musage = float(acounter) / divider;",
          "9744:        break;",
          "9745:       case MTYPE_COUNTER:",
          "9746:        sprintf(szTmp, \"%llu %s\", acounter, ValueUnits.c_str());",
          "",
          "[Removed Lines]",
          "9735:        sprintf(szTmp, \"%g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%g m3\", musage);",
          "9743:        sprintf(szTmp, \"%g m3\", musage);",
          "",
          "[Added Lines]",
          "9735:        sprintf(szTmp, \"%.12g kWh %s Watt\", musage, splitresults[1].c_str());",
          "9739:        sprintf(szTmp, \"%.12g m3\", musage);",
          "9743:        sprintf(szTmp, \"%.12g m3\", musage);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9864:         total_real_deliv = powerdeliv - (total_min_deliv_1 + total_min_deliv_2);",
          "9866:         musage = double(total_real_usage) / EnergyDivider;",
          "9868:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9869:         musage = double(total_real_deliv) / EnergyDivider;",
          "9871:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9872:        }",
          "9873:        else",
          "9874:        {",
          "9876:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "9877:         root[\"result\"][ii][\"CounterDelivToday\"] = szTmp;",
          "9878:        }",
          "",
          "[Removed Lines]",
          "9867:         sprintf(szTmp, \"%g kWh\", musage);",
          "9870:         sprintf(szTmp, \"%g kWh\", musage);",
          "9875:         sprintf(szTmp, \"%g kWh\", 0.0f);",
          "",
          "[Added Lines]",
          "9867:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9870:         sprintf(szTmp, \"%.12g kWh\", musage);",
          "9875:         sprintf(szTmp, \"%.12g kWh\", 0.0f);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9983:        }",
          "9984:        if (total > 0)",
          "9985:        {",
          "9987:         strcat(szData, szTmp);",
          "9988:        }",
          "9989:        root[\"result\"][ii][\"Data\"] = szData;",
          "",
          "[Removed Lines]",
          "9986:         sprintf(szTmp, \", Total: %g kWh\", total / 1000.0f);",
          "",
          "[Added Lines]",
          "9986:         sprintf(szTmp, \", Total: %.12g kWh\", total / 1000.0f);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10019:         std::vector<std::string> sd2 = result2[0];",
          "10020:         double minimum = atof(sd2[0].c_str()) / divider;",
          "10023:         root[\"result\"][ii][\"Data\"] = szData;",
          "10024:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10025:         {",
          "",
          "[Removed Lines]",
          "10022:         sprintf(szData, \"%g kWh\", total);",
          "",
          "[Added Lines]",
          "10022:         sprintf(szData, \"%.12g kWh\", total);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10027:         }",
          "10028:         else",
          "10029:         {",
          "10031:         }",
          "10032:         root[\"result\"][ii][\"Usage\"] = szData;",
          "10033:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10035:         root[\"result\"][ii][\"CounterToday\"] = szTmp;",
          "10036:        }",
          "10037:        else",
          "10038:        {",
          "10040:         root[\"result\"][ii][\"Data\"] = szData;",
          "10041:         if ((dType == pTypeENERGY) || (dType == pTypePOWER))",
          "10042:         {",
          "",
          "[Removed Lines]",
          "10030:          sprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));",
          "10034:         sprintf(szTmp, \"%g kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%g kWh\", total);",
          "",
          "[Added Lines]",
          "10030:          sprintf(szData, \"%.12g Watt\", atof(strarray[0].c_str()));",
          "10034:         sprintf(szTmp, \"%.12g kWh\", total - minimum);",
          "10039:         sprintf(szData, \"%.12g kWh\", total);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10044:         }",
          "10045:         else",
          "10046:         {",
          "10048:         }",
          "10049:         root[\"result\"][ii][\"Usage\"] = szData;",
          "10050:         root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10047:          sprintf(szData, \"%g Watt\", atof(strarray[0].c_str()));",
          "",
          "[Added Lines]",
          "10047:          sprintf(szData, \"%.12g Watt\", atof(strarray[0].c_str()));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "10186:       }",
          "10187:       else if (dSubType == sTypePercentage)",
          "10188:       {",
          "10190:        root[\"result\"][ii][\"Data\"] = szData;",
          "10191:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10192:        root[\"result\"][ii][\"Image\"] = \"Computer\";",
          "",
          "[Removed Lines]",
          "10189:        sprintf(szData, \"%g%%\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10189:        sprintf(szData, \"%.12g%%\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10194:       }",
          "10195:       else if (dSubType == sTypeWaterflow)",
          "10196:       {",
          "10198:        root[\"result\"][ii][\"Data\"] = szData;",
          "10199:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "10200:        root[\"result\"][ii][\"Image\"] = \"Moisture\";",
          "",
          "[Removed Lines]",
          "10197:        sprintf(szData, \"%g l/min\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10197:        sprintf(szData, \"%.12g l/min\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "10212:         SensorType = atoi(sResults[0].c_str());",
          "10213:         szAxesLabel = sResults[1];",
          "10214:        }",
          "10216:        root[\"result\"][ii][\"Data\"] = szData;",
          "10217:        root[\"result\"][ii][\"SensorType\"] = SensorType;",
          "10218:        root[\"result\"][ii][\"SensorUnit\"] = szAxesLabel;",
          "",
          "[Removed Lines]",
          "10215:        sprintf(szData, \"%g %s\", atof(sValue.c_str()), szAxesLabel.c_str());",
          "",
          "[Added Lines]",
          "10215:        sprintf(szData, \"%.12g %s\", atof(sValue.c_str()), szAxesLabel.c_str());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10247:       }",
          "10248:       else if (dSubType == sTypeVoltage)",
          "10249:       {",
          "10251:        root[\"result\"][ii][\"Data\"] = szData;",
          "10252:        root[\"result\"][ii][\"TypeImg\"] = \"current\";",
          "10253:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10250:        sprintf(szData, \"%g V\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10250:        sprintf(szData, \"%.12g V\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "10255:       }",
          "10256:       else if (dSubType == sTypeCurrent)",
          "10257:       {",
          "10259:        root[\"result\"][ii][\"Data\"] = szData;",
          "10260:        root[\"result\"][ii][\"TypeImg\"] = \"current\";",
          "10261:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10258:        sprintf(szData, \"%g A\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10258:        sprintf(szData, \"%.12g A\", atof(sValue.c_str()));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10296:        StringSplit(sValue, \";\", tstrarray);",
          "10297:        if (tstrarray.empty())",
          "10298:         continue;",
          "10300:        root[\"result\"][ii][\"Data\"] = szData;",
          "10301:        root[\"result\"][ii][\"TypeImg\"] = \"gauge\";",
          "10302:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "10299:        sprintf(szData, \"%g hPa\", atof(tstrarray[0].c_str()));",
          "",
          "[Added Lines]",
          "10299:        sprintf(szData, \"%.12g hPa\", atof(tstrarray[0].c_str()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10424:      }",
          "10425:      else if (dType == pTypeWEIGHT)",
          "10426:      {",
          "10428:       root[\"result\"][ii][\"Data\"] = szTmp;",
          "10429:       root[\"result\"][ii][\"HaveTimeout\"] = false;",
          "10430:      }",
          "",
          "[Removed Lines]",
          "10427:       sprintf(szTmp, \"%g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());",
          "",
          "[Added Lines]",
          "10427:       sprintf(szTmp, \"%.12g %s\", m_sql.m_weightscale * atof(sValue.c_str()), m_sql.m_weightsign.c_str());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10432:      {",
          "10433:       if (dSubType == sTypeElectric)",
          "10434:       {",
          "10436:        root[\"result\"][ii][\"Data\"] = szData;",
          "10437:       }",
          "10438:       else",
          "",
          "[Removed Lines]",
          "10435:        sprintf(szData, \"%g Watt\", atof(sValue.c_str()));",
          "",
          "[Added Lines]",
          "10435:        sprintf(szData, \"%.12g Watt\", atof(sValue.c_str()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "075523a51dd1f6a0f00c4ee62c47781d2a602b04",
      "candidate_info": {
        "commit_hash": "075523a51dd1f6a0f00c4ee62c47781d2a602b04",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/075523a51dd1f6a0f00c4ee62c47781d2a602b04",
        "files": [
          "hardware/DarkSky.cpp"
        ],
        "message": "DarkSky fixed possible wind-chill callsign issue",
        "before_after_code_files": [
          "hardware/DarkSky.cpp||hardware/DarkSky.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/DarkSky.cpp||hardware/DarkSky.cpp": [
          "File: hardware/DarkSky.cpp -> hardware/DarkSky.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:   at10-=(tsen.WIND.temperatureh*256);",
          "326:   tsen.WIND.temperaturel=(BYTE)(at10);",
          "329:   at10=round(std::abs(wind_chill*10.0f));",
          "330:   tsen.WIND.chillh=(BYTE)(at10/256);",
          "331:   at10-=(tsen.WIND.chillh*256);",
          "",
          "[Removed Lines]",
          "328:   tsen.WIND.chillsign=(wind_temp>=0)?0:1;",
          "",
          "[Added Lines]",
          "328:   tsen.WIND.chillsign=(wind_chill>=0)?0:1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4a90cacebac3dbb5d3dbe5721a08022ff252d4c",
      "candidate_info": {
        "commit_hash": "b4a90cacebac3dbb5d3dbe5721a08022ff252d4c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/b4a90cacebac3dbb5d3dbe5721a08022ff252d4c",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Plugin Framework now pre-loads site module and adds sitepackages to Python path prior to plugin load. This mimics standard python behaviour better.",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008:      break;",
          "1009:     }",
          "1010:    }",
          "1011:    std::wstring sPath = ssPath.str() + sSeparator;",
          "1012:    sPath += Py_GetPath();",
          "1013:    PySys_SetPath((wchar_t*)sPath.c_str());",
          "1015:    try",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1015:    try",
          "1016:    {",
          "1021:     void* pSiteModule = PyImport_ImportModule(\"site\");",
          "1022:     if (!pSiteModule)",
          "1023:     {",
          "1024:      _log.Log(LOG_ERROR, \"(%s) failed to load 'site' module, continuing.\", m_PluginKey.c_str());",
          "1025:     }",
          "1026:     else",
          "1027:     {",
          "1028:      PyObject* pFunc = PyObject_GetAttrString((PyObject*)pSiteModule, \"getsitepackages\");",
          "1029:      if (pFunc && PyCallable_Check(pFunc))",
          "1030:      {",
          "1031:       PyObject* pSites = PyObject_CallObject(pFunc, NULL);",
          "1032:       if (!pSites)",
          "1033:       {",
          "1034:        LogPythonException(\"getsitepackages\");",
          "1035:       }",
          "1036:       else",
          "1037:        for (Py_ssize_t i = 0; i < PyList_Size(pSites); i++)",
          "1038:        {",
          "1039:         PyObject* pSite = PyList_GetItem(pSites, i);",
          "1040:         if (pSite && PyUnicode_Check(pSite))",
          "1041:         {",
          "1042:          std::wstringstream ssPath;",
          "1043:          ssPath << PyUnicode_AsUTF8(pSite);",
          "1044:          sPath += sSeparator + ssPath.str();",
          "1045:         }",
          "1046:        }",
          "1047:       Py_XDECREF(pSites);",
          "1048:      }",
          "1049:     }",
          "1050:    }",
          "1051:    catch (...)",
          "1052:    {",
          "1053:     _log.Log(LOG_ERROR, \"(%s) exception loading 'site' module, continuing.\", m_PluginKey.c_str());",
          "1054:     PyErr_Clear();",
          "1055:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1025:    catch (...)",
          "1026:    {",
          "1027:     _log.Log(LOG_ERROR, \"(%s) exception loading 'plugin.py', Python Path used was '%S'.\", m_PluginKey.c_str(), sPath.c_str());",
          "1028:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1073:     PyErr_Clear();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc0401a0dd039e2896d76bfa2d892b72d0d9245a",
      "candidate_info": {
        "commit_hash": "dc0401a0dd039e2896d76bfa2d892b72d0d9245a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/dc0401a0dd039e2896d76bfa2d892b72d0d9245a",
        "files": [
          "CMakeLists.txt",
          "hardware/Razberry.cpp",
          "hardware/Razberry.h",
          "main/RFXNames.cpp",
          "main/RFXNames.h",
          "main/WebServer.cpp",
          "main/mainworker.cpp",
          "msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters"
        ],
        "message": "Removed obsolete razberry code",
        "before_after_code_files": [
          "hardware/Razberry.cpp||hardware/Razberry.cpp",
          "hardware/Razberry.h||hardware/Razberry.h",
          "main/RFXNames.cpp||main/RFXNames.cpp",
          "main/RFXNames.h||main/RFXNames.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hardware/Razberry.cpp||hardware/Razberry.cpp": [
          "File: hardware/Razberry.cpp -> hardware/Razberry.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/Razberry.h||hardware/Razberry.h": [
          "File: hardware/Razberry.h -> hardware/Razberry.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   { HTYPE_WINDDELEN, \"Winddelen\" },",
          "172:   { HTYPE_TE923, \"TE923 USB Compatible Weather Station\" },",
          "173:   { HTYPE_Rego6XX, \"Rego 6XX USB/serial interface\" },",
          "175:   { HTYPE_DavisVantage, \"Davis Vantage Weather Station USB\" },",
          "176:   { HTYPE_VOLCRAFTCO20, \"Volcraft CO-20 USB air quality sensor\" },",
          "177:   { HTYPE_1WIRE, \"1-Wire (System)\" },",
          "",
          "[Removed Lines]",
          "174:   { HTYPE_RazberryZWave, \"Razberry Z-Wave via LAN interface (Deprecated)\" },",
          "",
          "[Added Lines]",
          "174:   { HTYPE_FreeToUse, \"Can be used for a feature hardware class\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3578:  case HTYPE_RFXLAN:",
          "3579:  case HTYPE_P1SmartMeterLAN:",
          "3580:  case HTYPE_YouLess:",
          "3582:  case HTYPE_OpenThermGatewayTCP:",
          "3583:  case HTYPE_LimitlessLights:",
          "3584:  case HTYPE_SolarEdgeTCP:",
          "",
          "[Removed Lines]",
          "3581:  case HTYPE_RazberryZWave:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/RFXNames.h||main/RFXNames.h": [
          "File: main/RFXNames.h -> main/RFXNames.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: };",
          "99: enum _eHardwareTypes {",
          "101:  HTYPE_RFXtrx433,   //1",
          "102:  HTYPE_RFXLAN,    //2",
          "103:  HTYPE_Domoticz,    //3",
          "",
          "[Removed Lines]",
          "100:  HTYPE_RFXtrx315 = 0,   //0",
          "",
          "[Added Lines]",
          "100:  HTYPE_RFXtrx315 = 0,  //0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:  HTYPE_YouLess,    //6",
          "107:  HTYPE_TE923,    //7",
          "108:  HTYPE_Rego6XX,    //8",
          "110:  HTYPE_DavisVantage,   //10",
          "111:  HTYPE_VOLCRAFTCO20,   //11",
          "112:  HTYPE_1WIRE,    //12",
          "",
          "[Removed Lines]",
          "109:  HTYPE_RazberryZWave,  //9",
          "",
          "[Added Lines]",
          "109:  HTYPE_FreeToUse,   //9",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018: #endif",
          "1019:     if (ii == HTYPE_PythonPlugin)",
          "1020:      bDoAdd = false;",
          "1021:     if (bDoAdd)",
          "1022:      _htypes[Hardware_Type_Desc(ii)] = ii;",
          "1023:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:     else if (ii == HTYPE_FreeToUse) //Safe to remove when you changed this type for a new hardware class!",
          "1022:      bDoAdd = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1484:    }",
          "1485:    else if (",
          "1486:     (htype == HTYPE_RFXLAN) || (htype == HTYPE_P1SmartMeterLAN) ||",
          "1488:     (htype == HTYPE_SolarEdgeTCP) || (htype == HTYPE_WOL) || (htype == HTYPE_S0SmartMeterTCP) || (htype == HTYPE_ECODEVICES) || (htype == HTYPE_Mochad) ||",
          "1489:     (htype == HTYPE_MySensorsTCP) || (htype == HTYPE_MySensorsMQTT) || (htype == HTYPE_MQTT) || (htype == HTYPE_FRITZBOX) || (htype == HTYPE_ETH8020) || (htype == HTYPE_Sterbox) ||",
          "1490:     (htype == HTYPE_KMTronicTCP) || (htype == HTYPE_KMTronicUDP) || (htype == HTYPE_SOLARMAXTCP) || (htype == HTYPE_RelayNet) || (htype == HTYPE_SatelIntegra) || (htype == HTYPE_eHouseTCP) || (htype == HTYPE_RFLINKTCP) ||",
          "",
          "[Removed Lines]",
          "1487:     (htype == HTYPE_YouLess) || (htype == HTYPE_RazberryZWave) || (htype == HTYPE_OpenThermGatewayTCP) || (htype == HTYPE_LimitlessLights) ||",
          "",
          "[Added Lines]",
          "1489:     (htype == HTYPE_YouLess) || (htype == HTYPE_OpenThermGatewayTCP) || (htype == HTYPE_LimitlessLights) ||",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"../hardware/VolcraftCO20.h\"",
          "35: #endif",
          "36: #include \"../hardware/Rego6XXSerial.h\"",
          "38: #ifdef WITH_OPENZWAVE",
          "39: #include \"../hardware/OpenZWave.h\"",
          "40: #endif",
          "",
          "[Removed Lines]",
          "37: #include \"../hardware/Razberry.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:   pHardware = new DomoticzTCP(ID, Address, Port, Username, Password);",
          "746:   break;",
          "751:  case HTYPE_P1SmartMeterLAN:",
          "753:   pHardware = new P1MeterTCP(ID, Address, Port, (Mode2 != 0), Mode3);",
          "",
          "[Removed Lines]",
          "747:  case HTYPE_RazberryZWave:",
          "748:   _log.Log(LOG_ERROR, \"Razberry: Deprecated, support is removed! Use OpenZWave (see wiki)...\");",
          "749:   return false;",
          "750:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:     <ClInclude Include=\"..\\hardware\\plugins\\PythonObjects.h\" />",
          "511:     <ClInclude Include=\"..\\hardware\\PVOutput_Input.h\" />",
          "512:     <ClInclude Include=\"..\\hardware\\RAVEn.h\" />",
          "514:     <ClInclude Include=\"..\\hardware\\Rego6XXSerial.h\" />",
          "515:     <ClInclude Include=\"..\\hardware\\RelayNet.h\" />",
          "516:     <ClInclude Include=\"..\\hardware\\RFLinkBase.h\" />",
          "",
          "[Removed Lines]",
          "513:     <ClInclude Include=\"..\\hardware\\Razberry.h\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "802:     <ClCompile Include=\"..\\hardware\\plugins\\PythonObjects.cpp\" />",
          "803:     <ClCompile Include=\"..\\hardware\\PVOutput_Input.cpp\" />",
          "804:     <ClCompile Include=\"..\\hardware\\RAVEn.cpp\" />",
          "806:     <ClCompile Include=\"..\\hardware\\RelayNet.cpp\" />",
          "807:     <ClCompile Include=\"..\\hardware\\RFLinkBase.cpp\" />",
          "808:     <ClCompile Include=\"..\\hardware\\RFLinkSerial.cpp\" />",
          "",
          "[Removed Lines]",
          "805:     <ClCompile Include=\"..\\hardware\\Razberry.cpp\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     <Filter Include=\"Devices\\ZWave\">",
          "79:       <UniqueIdentifier>{8541fa16-1ca3-4b1c-8658-7075b91f73a8}</UniqueIdentifier>",
          "80:     </Filter>",
          "84:     <Filter Include=\"Devices\\LimitlessLed\">",
          "85:       <UniqueIdentifier>{80714ac8-8783-4ef2-8836-3bb5b15adbb0}</UniqueIdentifier>",
          "86:     </Filter>",
          "",
          "[Removed Lines]",
          "81:     <Filter Include=\"Devices\\ZWave\\Razberry-ZWave\">",
          "82:       <UniqueIdentifier>{3d63876c-62b2-4fbf-a50c-5132dcfbcb3b}</UniqueIdentifier>",
          "83:     </Filter>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1465:     <ClInclude Include=\"..\\smtpclient\\SMTPClient.h\">",
          "1466:       <Filter>SMTP</Filter>",
          "1467:     </ClInclude>",
          "1471:     <ClInclude Include=\"..\\hardware\\DavisLoggerSerial.h\">",
          "1472:       <Filter>Devices\\Davis</Filter>",
          "1473:     </ClInclude>",
          "",
          "[Removed Lines]",
          "1468:     <ClInclude Include=\"..\\hardware\\Razberry.h\">",
          "1469:       <Filter>Devices\\ZWave\\Razberry-ZWave</Filter>",
          "1470:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2229:     <ClCompile Include=\"..\\smtpclient\\SMTPClient.cpp\">",
          "2230:       <Filter>SMTP</Filter>",
          "2231:     </ClCompile>",
          "2235:     <ClCompile Include=\"..\\hardware\\DavisLoggerSerial.cpp\">",
          "2236:       <Filter>Devices\\Davis</Filter>",
          "2237:     </ClCompile>",
          "",
          "[Removed Lines]",
          "2232:     <ClCompile Include=\"..\\hardware\\Razberry.cpp\">",
          "2233:       <Filter>Devices\\ZWave\\Razberry-ZWave</Filter>",
          "2234:     </ClCompile>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}