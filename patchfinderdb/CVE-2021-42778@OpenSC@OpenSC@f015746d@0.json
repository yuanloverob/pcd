{
  "cve_id": "CVE-2021-42778",
  "cve_desc": "A heap double free issue was found in Opensc before version 0.22.0 in sc_pkcs15_free_tokeninfo.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "f015746d22d249642c19674298a18ad824db0ed7",
  "patch_info": {
    "commit_hash": "f015746d22d249642c19674298a18ad824db0ed7",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/f015746d22d249642c19674298a18ad824db0ed7",
    "files": [
      "src/libopensc/card-idprime.c"
    ],
    "message": "idprime: Use temporary variable instead of messing up the passed one\n\nThanks oss-fuzz\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28185",
    "before_after_code_files": [
      "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c": [
      "File: src/libopensc/card-idprime.c -> src/libopensc/card-idprime.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:  sc_path_t tinfo_path = {\"\\x00\\x00\", 2, 0, 0, SC_PATH_TYPE_PATH, {\"\", 0}};",
      "419:  sc_file_t *file = NULL;",
      "420:  u8 buf[2];",
      "421:  int r;",
      "423:  LOG_FUNC_CALLED(card->ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:  char *name;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:  }",
      "446:  sc_file_free(file);",
      "450:   LOG_FUNC_RETURN(card->ctx, SC_ERROR_OUT_OF_MEMORY);",
      "451:  }",
      "454:  if (r < 1) {",
      "456:   LOG_FUNC_RETURN(card->ctx, r);",
      "457:  }",
      "461:  }",
      "462:  LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);",
      "463: }",
      "",
      "[Removed Lines]",
      "449:  if (*tname == NULL) {",
      "453:  r = iso_ops->read_binary(card, 2, (unsigned char *)*tname, buf[1], 0);",
      "455:   free(*tname);",
      "459:  if ((*tname)[r-1] != '\\0') {",
      "460:   (*tname)[r-1] = '\\0';",
      "",
      "[Added Lines]",
      "449:  name = malloc(buf[1]);",
      "450:  if (name == NULL) {",
      "454:  r = iso_ops->read_binary(card, 2, (unsigned char *)name, buf[1], 0);",
      "456:   free(name);",
      "460:  if (name[r-1] != '\\0') {",
      "461:   name[r-1] = '\\0';",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb83cd04396403f93051f485b4f840b32e3b3137",
      "candidate_info": {
        "commit_hash": "fb83cd04396403f93051f485b4f840b32e3b3137",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/fb83cd04396403f93051f485b4f840b32e3b3137",
        "files": [
          "src/libopensc/asn1.c"
        ],
        "message": "asn1: Improve logging",
        "before_after_code_files": [
          "src/libopensc/asn1.c||src/libopensc/asn1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/2169"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/asn1.c||src/libopensc/asn1.c": [
          "File: src/libopensc/asn1.c -> src/libopensc/asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235:  size_t idx, ptrlen = objlen;",
          "1236:  int ret;",
          "1238:  ses = calloc(SC_MAX_SE_NUM, sizeof(sc_pkcs15_sec_env_info_t *));",
          "1242:  for (idx=0; idx < SC_MAX_SE_NUM && ptrlen; )   {",
          "1243:   struct sc_asn1_entry asn1_se[2];",
          "",
          "[Removed Lines]",
          "1239:  if (ses == NULL)",
          "1240:   return SC_ERROR_OUT_OF_MEMORY;",
          "",
          "[Added Lines]",
          "1238:  LOG_FUNC_CALLED(ctx);",
          "1241:  if (ses == NULL) {",
          "1242:   SC_FUNC_RETURN(ctx, SC_LOG_DEBUG_ASN1, SC_ERROR_OUT_OF_MEMORY);",
          "1243:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1281:   free(ses);",
          "1282:  }",
          "1285: }",
          "",
          "[Removed Lines]",
          "1284:  return ret;",
          "",
          "[Added Lines]",
          "1287:  SC_FUNC_RETURN(ctx, SC_LOG_DEBUG_ASN1, ret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61eb4e487e00ed6758a62f07222488c5ec5fdb42",
      "candidate_info": {
        "commit_hash": "61eb4e487e00ed6758a62f07222488c5ec5fdb42",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/61eb4e487e00ed6758a62f07222488c5ec5fdb42",
        "files": [
          "src/libopensc/card.c"
        ],
        "message": "card: Correctly free pointers durint cache invalidation\n\nAs the whole structure is memset(0) on the following line,\nwe need to clean the pointers before doing so.\n\nThanks oss-fuzz\n\nRelated to:\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27797",
        "before_after_code_files": [
          "src/libopensc/card.c||src/libopensc/card.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/2169"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/card.c||src/libopensc/card.c": [
          "File: src/libopensc/card.c -> src/libopensc/card.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367: void sc_invalidate_cache(struct sc_card *card)",
          "1368: {",
          "1369:  if (card) {",
          "1370:   memset(&card->cache, 0, sizeof(card->cache));",
          "1371:   card->cache.valid = 0;",
          "1372:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1370:   sc_file_free(card->cache.current_ef);",
          "1371:   sc_file_free(card->cache.current_df);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78cdab949f098ad7e593d853229fccf57d749d0c",
      "candidate_info": {
        "commit_hash": "78cdab949f098ad7e593d853229fccf57d749d0c",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/78cdab949f098ad7e593d853229fccf57d749d0c",
        "files": [
          "src/libopensc/pkcs15-tcos.c"
        ],
        "message": "tcos: prevent out of bounds read\n\nThanks oss-fuzz\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27719",
        "before_after_code_files": [
          "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/2169"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/pkcs15-tcos.c||src/libopensc/pkcs15-tcos.c": [
          "File: src/libopensc/pkcs15-tcos.c -> src/libopensc/pkcs15-tcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:    sc_log(ctx, \"No EF_KEYD-Record found\\n\");",
          "153:    return 1;",
          "154:   }",
          "156:    if (buf[i] == 0xB6)",
          "157:     can_sign++;",
          "158:    if (buf[i] == 0xB8)",
          "",
          "[Removed Lines]",
          "155:   for (i = 0; i < r; i += 2 + buf[i + 1]) {",
          "",
          "[Added Lines]",
          "155:   for (i = 0; i + 1 < r; i += 2 + buf[i + 1]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ffe24cfb63062ad8734e1bd0b6009204a15851b",
      "candidate_info": {
        "commit_hash": "3ffe24cfb63062ad8734e1bd0b6009204a15851b",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/3ffe24cfb63062ad8734e1bd0b6009204a15851b",
        "files": [
          "src/libopensc/pkcs15.c"
        ],
        "message": "pkcs15: Clean tokeninfo on parse errors to avoid memory leaks\n\nThanks oss-fuzz\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27779",
        "before_after_code_files": [
          "src/libopensc/pkcs15.c||src/libopensc/pkcs15.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenSC/OpenSC/pull/2169"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/libopensc/pkcs15.c||src/libopensc/pkcs15.c": [
          "File: src/libopensc/pkcs15.c -> src/libopensc/pkcs15.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: static void sc_pkcs15_remove_objects(struct sc_pkcs15_card *);",
          "131: static int sc_pkcs15_aux_get_md_guid(struct sc_pkcs15_card *, const struct sc_pkcs15_object *,",
          "132:   unsigned, unsigned char *, size_t *);",
          "134: int sc_pkcs15_parse_tokeninfo(sc_context_t *ctx,",
          "135:  sc_pkcs15_tokeninfo_t *ti, const u8 *buf, size_t blen)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: static void sc_pkcs15_clear_tokeninfo(struct sc_pkcs15_tokeninfo *tokeninfo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  sc_format_asn1_entry(asn1_tokeninfo, asn1_toki_attrs, NULL, 0);",
          "219:  r = sc_asn1_decode(ctx, asn1_tokeninfo, buf, blen, NULL, NULL);",
          "222:  if (asn1_toki_attrs[1].flags & SC_ASN1_PRESENT && serial_len > 0)   {",
          "223:   free(ti->serial_number);",
          "",
          "[Removed Lines]",
          "220:  LOG_TEST_RET(ctx, r, \"ASN.1 parsing of EF(TokenInfo) failed\");",
          "",
          "[Added Lines]",
          "221:  if (r != SC_SUCCESS) {",
          "223:   sc_pkcs15_clear_tokeninfo(ti);",
          "224:   LOG_TEST_RET(ctx, r, \"ASN.1 parsing of EF(TokenInfo) failed\");",
          "225:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:  return tokeninfo;",
          "727: }",
          "732: {",
          "733:  if (!tokeninfo)",
          "734:   return;",
          "736:  free(tokeninfo->label);",
          "737:  free(tokeninfo->serial_number);",
          "738:  free(tokeninfo->manufacturer_id);",
          "739:  free(tokeninfo->last_update.gtime);",
          "740:  free(tokeninfo->preferred_language);",
          "741:  free(tokeninfo->profile_indication.name);",
          "742:  if (tokeninfo->seInfo != NULL) {",
          "743:   unsigned i;",
          "744:   for (i = 0; i < tokeninfo->num_seInfo; i++)",
          "745:    free(tokeninfo->seInfo[i]);",
          "746:   free(tokeninfo->seInfo);",
          "747:  }",
          "749: }",
          "752: void",
          "753: sc_pkcs15_free_app(struct sc_pkcs15_card *p15card)",
          "",
          "[Removed Lines]",
          "730: void",
          "731: sc_pkcs15_free_tokeninfo(struct sc_pkcs15_tokeninfo *tokeninfo)",
          "748:  free(tokeninfo);",
          "",
          "[Added Lines]",
          "734: static void",
          "735: sc_pkcs15_clear_tokeninfo(struct sc_pkcs15_tokeninfo *tokeninfo)",
          "741:  tokeninfo->label = NULL;",
          "743:  tokeninfo->serial_number = NULL;",
          "745:  tokeninfo->manufacturer_id = NULL;",
          "747:  tokeninfo->last_update.gtime = NULL;",
          "749:  tokeninfo->preferred_language = NULL;",
          "751:  tokeninfo->profile_indication.name = NULL;",
          "757:   tokeninfo->seInfo = NULL;",
          "761: void",
          "762: sc_pkcs15_free_tokeninfo(struct sc_pkcs15_tokeninfo *tokeninfo)",
          "763: {",
          "764:  if (!tokeninfo)",
          "765:   return;",
          "767:  sc_pkcs15_clear_tokeninfo(tokeninfo);",
          "768:  free(tokeninfo);",
          "769: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdcc843e786a0a19e8bccfe769e5e94641e1c15e",
      "candidate_info": {
        "commit_hash": "fdcc843e786a0a19e8bccfe769e5e94641e1c15e",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/fdcc843e786a0a19e8bccfe769e5e94641e1c15e",
        "files": [
          "src/libopensc/card-idprime.c",
          "src/libopensc/cardctl.h",
          "src/libopensc/pkcs15-idprime.c"
        ],
        "message": "idprime: Implement a way of getting token label from special card structure",
        "before_after_code_files": [
          "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c",
          "src/libopensc/cardctl.h||src/libopensc/cardctl.h",
          "src/libopensc/pkcs15-idprime.c||src/libopensc/pkcs15-idprime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c"
          ],
          "candidate": [
            "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-idprime.c||src/libopensc/card-idprime.c": [
          "File: src/libopensc/card-idprime.c -> src/libopensc/card-idprime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:    sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE, \"Found certificate with fd=%d\",",
          "193:     new_object.fd);",
          "194:    idprime_add_object_to_list(&priv->pki_list, &new_object);",
          "195:   }",
          "196:  }",
          "197:  r = SC_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   } else if ((memcmp(&start[4], \"tinfo\", 6) == 0) && (memcmp(&start[12], \"p11\", 4) == 0)) {",
          "200:    memcpy(priv->tinfo_df, new_object.df, sizeof(priv->tinfo_df));",
          "201:    priv->tinfo_present = 1;",
          "202:    sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE, \"Found p11/tinfo object\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:  LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);",
          "344: }",
          "346: static int idprime_card_ctl(sc_card_t *card, unsigned long cmd, void *ptr)",
          "347: {",
          "348:  idprime_private_data_t * priv = card->drv_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354: static int idprime_get_token_name(sc_card_t* card, char** tname)",
          "355: {",
          "356:  idprime_private_data_t * priv = card->drv_data;",
          "357:  sc_path_t tinfo_path = {\"\\x00\\x00\", 2, 0, 0, SC_PATH_TYPE_PATH, {\"\", 0}};",
          "358:  sc_file_t *file = NULL;",
          "359:  u8 buf[2];",
          "360:  int r;",
          "362:  LOG_FUNC_CALLED(card->ctx);",
          "364:  if (tname == NULL) {",
          "365:   LOG_FUNC_RETURN(card->ctx, SC_ERROR_INVALID_ARGUMENTS);",
          "366:  }",
          "368:  if (!priv->tinfo_present) {",
          "369:   LOG_FUNC_RETURN(card->ctx, SC_ERROR_NOT_SUPPORTED);",
          "370:  }",
          "372:  memcpy(tinfo_path.value, priv->tinfo_df, 2);",
          "373:  r = iso_ops->select_file(card, &tinfo_path, &file);",
          "374:  if (r != SC_SUCCESS || file->size == 0) {",
          "375:   sc_file_free(file);",
          "376:   LOG_FUNC_RETURN(card->ctx, SC_ERROR_NOT_SUPPORTED);",
          "377:  }",
          "380:  r = iso_ops->read_binary(card, 0, buf, 2, 0);",
          "382:   sc_file_free(file);",
          "383:   LOG_FUNC_RETURN(card->ctx, r);",
          "384:  }",
          "385:  sc_file_free(file);",
          "388:  if (*tname == NULL) {",
          "389:   LOG_FUNC_RETURN(card->ctx, SC_ERROR_OUT_OF_MEMORY);",
          "390:  }",
          "392:  r = iso_ops->read_binary(card, 2, (unsigned char *)*tname, buf[1], 0);",
          "393:  if (r < 1) {",
          "394:   free(*tname);",
          "395:   LOG_FUNC_RETURN(card->ctx, r);",
          "396:  }",
          "398:  if ((*tname)[r-1] != '\\0') {",
          "399:   (*tname)[r-1] = '\\0';",
          "400:  }",
          "401:  LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);",
          "402: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:  switch (cmd) {",
          "357:   case SC_CARDCTL_GET_SERIALNR:",
          "358:    return idprime_get_serial(card, (sc_serial_number_t *) ptr);",
          "359:   case SC_CARDCTL_IDPRIME_INIT_GET_OBJECTS:",
          "360:    return idprime_get_init_and_get_count(&priv->pki_list, &priv->pki_current,",
          "361:     (int *)ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:   case SC_CARDCTL_IDPRIME_GET_TOKEN_NAME:",
          "418:    return idprime_get_token_name(card, (char **) ptr);",
          "",
          "---------------"
        ],
        "src/libopensc/cardctl.h||src/libopensc/cardctl.h": [
          "File: src/libopensc/cardctl.h -> src/libopensc/cardctl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:  SC_CARDCTL_IDPRIME_INIT_GET_OBJECTS,",
          "312:  SC_CARDCTL_IDPRIME_GET_NEXT_OBJECT,",
          "313:  SC_CARDCTL_IDPRIME_FINAL_GET_OBJECTS,",
          "315: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  SC_CARDCTL_IDPRIME_GET_TOKEN_NAME,",
          "",
          "---------------"
        ],
        "src/libopensc/pkcs15-idprime.c||src/libopensc/pkcs15-idprime.c": [
          "File: src/libopensc/pkcs15-idprime.c -> src/libopensc/pkcs15-idprime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  if (r < 0)",
          "107:   LOG_FUNC_RETURN(card->ctx, r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  r = sc_card_ctl(card, SC_CARDCTL_IDPRIME_GET_TOKEN_NAME, &token_name);",
          "113:  if (r < 0) {",
          "115:   sc_log(card->ctx, \"sc_card_ctl rc=%d\", r);",
          "116:  } else {",
          "117:   free(p15card->tokeninfo->label);",
          "118:   p15card->tokeninfo->label = token_name;",
          "119:   sc_log(card->ctx,  \"IDPrime setting token label = %s\", token_name);",
          "120:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}