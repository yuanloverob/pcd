{
  "cve_id": "CVE-2021-40153",
  "cve_desc": "squashfs_opendir in unsquash-1.c in Squashfs-Tools 4.5 stores the filename in the directory entry; this is then used by unsquashfs to create the new file during the unsquash. The filename is not validated for traversal outside of the destination directory, and thus allows writing to locations outside of the destination.",
  "repo": "plougher/squashfs-tools",
  "patch_hash": "79b5a555058eef4e1e7ff220c344d39f8cd09646",
  "patch_info": {
    "commit_hash": "79b5a555058eef4e1e7ff220c344d39f8cd09646",
    "repo": "plougher/squashfs-tools",
    "commit_url": "https://github.com/plougher/squashfs-tools/commit/79b5a555058eef4e1e7ff220c344d39f8cd09646",
    "files": [
      "squashfs-tools/Makefile",
      "squashfs-tools/unsquash-1.c",
      "squashfs-tools/unsquash-1234.c",
      "squashfs-tools/unsquash-2.c",
      "squashfs-tools/unsquash-3.c",
      "squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c",
      "squashfs-tools/unsquashfs.h"
    ],
    "message": "Unsquashfs: fix write outside destination directory exploit\n\nAn issue on Github (https://github.com/plougher/squashfs-tools/issues/72)\nshows how some specially crafted Squashfs filesystems containing\ninvalid file names (with '/' and ..) can cause Unsquashfs to write\nfiles outside of the destination directory.\n\nThis commit fixes this exploit by checking all names for\nvalidity.\n\nIn doing so I have also added checks for '.' and for names that\nare shorter than they should be (names in the file system should\nnot have '\\0' terminators).\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "before_after_code_files": [
      "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
      "squashfs-tools/unsquash-1234.c||squashfs-tools/unsquash-1234.c",
      "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
      "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
      "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c",
      "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h"
    ]
  },
  "patch_diff": {
    "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
      "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:    memcpy(dire->name, directory_table + bytes,",
      "286:     dire->size + 1);",
      "287:    dire->name[dire->size + 1] = '\\0';",
      "288:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "289:     \"%d:%d, type %d\\n\", dire->name,",
      "290:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "290:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "291:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "292:     goto corrupted;",
      "293:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-1234.c||squashfs-tools/unsquash-1234.c": [
      "File: squashfs-tools/unsquash-1234.c -> squashfs-tools/unsquash-1234.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #define TRUE 1",
      "29: #define FALSE 0",
      "37: int check_name(char *name, int size)",
      "38: {",
      "39:  char *start = name;",
      "41:  if(name[0] == '.') {",
      "42:   if(name[1] == '.')",
      "43:    name++;",
      "44:   if(name[1] == '/' || name[1] == '\\0')",
      "45:    return FALSE;",
      "46:  }",
      "48:  while(name[0] != '/' && name[0] != '\\0')",
      "49:   name ++;",
      "51:  if(name[0] == '/')",
      "52:   return FALSE;",
      "54:  if((name - start) != size)",
      "55:   return FALSE;",
      "57:  return TRUE;",
      "58: }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
      "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "386:    memcpy(dire->name, directory_table + bytes,",
      "387:     dire->size + 1);",
      "388:    dire->name[dire->size + 1] = '\\0';",
      "389:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "390:     \"%d:%d, type %d\\n\", dire->name,",
      "391:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "391:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "392:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "393:     goto corrupted;",
      "394:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
      "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413:    memcpy(dire->name, directory_table + bytes,",
      "414:     dire->size + 1);",
      "415:    dire->name[dire->size + 1] = '\\0';",
      "416:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "417:     \"%d:%d, type %d\\n\", dire->name,",
      "418:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "418:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "419:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "420:     goto corrupted;",
      "421:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
      "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "349:    memcpy(dire->name, directory_table + bytes,",
      "350:     dire->size + 1);",
      "351:    dire->name[dire->size + 1] = '\\0';",
      "352:    TRACE(\"squashfs_opendir: directory entry %s, inode \"",
      "353:     \"%d:%d, type %d\\n\", dire->name,",
      "354:     dirh.start_block, dire->offset, dire->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "354:    if(check_name(dire->name, dire->size + 1) == FALSE) {",
      "355:     ERROR(\"File system corrupted: invalid characters in name\\n\");",
      "356:     goto corrupted;",
      "357:    }",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
      "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2672: #define VERSION() \\",
      "2674:  printf(\"copyright (C) 2021 Phillip Lougher \"\\",
      "2675:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
      "2676:      printf(\"This program is free software; you can redistribute it and/or\"\\",
      "",
      "[Removed Lines]",
      "2673:  printf(\"unsquashfs version 4.4-git (2021/01/09)\\n\");\\",
      "",
      "[Added Lines]",
      "2673:  printf(\"unsquashfs version 4.4-git (2021/01/17)\\n\");\\",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.h||squashfs-tools/unsquashfs.h": [
      "File: squashfs-tools/unsquashfs.h -> squashfs-tools/unsquashfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "263: extern long long *alloc_index_table(int);",
      "264: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "266: extern int check_name(char *, int);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b23ad257f0426dc0f99b5fa6f84bedd0a8270c58",
      "candidate_info": {
        "commit_hash": "b23ad257f0426dc0f99b5fa6f84bedd0a8270c58",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/b23ad257f0426dc0f99b5fa6f84bedd0a8270c58",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: move options display into a separate function\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2993: }",
          "2997:  printf(\"unsquashfs version \" VERSION \" (\" DATE \")\\n\");",
          "2998:  printf(\"copyright (C) 2021 Phillip Lougher \");",
          "2999:  printf(\"<phillip@squashfs.org.uk>\\n\\n\");",
          "",
          "[Removed Lines]",
          "2996: void print_version() {",
          "",
          "[Added Lines]",
          "2996: static void print_options(char *name)",
          "2997: {",
          "2998:  ERROR(\"SYNTAX: %s [options] filesystem [directories or files \", name);",
          "2999:  ERROR(\"to extract or exclude (with -excludes)]\\n\");",
          "3000:  ERROR(\"\\t-v[ersion]\\t\\tprint version, licence and copyright \");",
          "3001:  ERROR(\"information\\n\");",
          "3002:  ERROR(\"\\t-d[est] <pathname>\\tunsquash to <pathname>, default \");",
          "3003:  ERROR(\"\\\"squashfs-root\\\"\\n\");",
          "3004:  ERROR(\"\\t-max[-depth] <levels>\\tdescend at most <levels> of \");",
          "3005:  ERROR(\"directories when\\n\\t\\t\\t\\tunsquashing or listing\\n\");",
          "3006:  ERROR(\"\\t-excludes\\t\\ttreat files on command line as exclude files\\n\");",
          "3007:  ERROR(\"\\t-ex[clude-list]\\t\\tlist of files/dirs to be excluded, \");",
          "3008:  ERROR(\"terminated with ';'\\n\");",
          "3009:  ERROR(\"\\t-follow[-symlinks]\\tfollow symlinks in extract files, and \");",
          "3010:  ERROR(\"add all\\n\\t\\t\\t\\tfiles/symlinks needed to resolve extract \");",
          "3011:  ERROR(\"file.\\n\\t\\t\\t\\tImplies -no-wildcards\\n\");",
          "3012:  ERROR(\"\\t-missing[-symlinks]\\tUnsquashfs will abort if any symlink \");",
          "3013:  ERROR(\"can't be\\n\\t\\t\\t\\tresolved in -follow-symlinks\\n\");",
          "3014:  ERROR(\"\\t-q[uiet]\\t\\tno verbose output\\n\");",
          "3015:  ERROR(\"\\t-n[o-progress]\\t\\tdon't display the progress bar\\n\");",
          "3016:  ERROR(\"\\t-no[-xattrs]\\t\\tdon't extract xattrs in file system\");",
          "3017:  ERROR(NOXOPT_STR\"\\n\");",
          "3018:  ERROR(\"\\t-x[attrs]\\t\\textract xattrs in file system\" XOPT_STR \"\\n\");",
          "3019:  ERROR(\"\\t-u[ser-xattrs]\\t\\tonly extract user xattrs in file \");",
          "3020:  ERROR(\"system.\\n\\t\\t\\t\\tEnables extracting xattrs\\n\");",
          "3021:  ERROR(\"\\t-p[rocessors] <number>\\tuse <number> processors.  \");",
          "3022:  ERROR(\"By default will use\\n\");",
          "3023:  ERROR(\"\\t\\t\\t\\tnumber of processors available\\n\");",
          "3024:  ERROR(\"\\t-i[nfo]\\t\\t\\tprint files as they are unsquashed\\n\");",
          "3025:  ERROR(\"\\t-li[nfo]\\t\\tprint files as they are unsquashed with file\\n\");",
          "3026:  ERROR(\"\\t\\t\\t\\tattributes (like ls -l output)\\n\");",
          "3027:  ERROR(\"\\t-l[s]\\t\\t\\tlist filesystem, but don't unsquash\\n\");",
          "3028:  ERROR(\"\\t-ll[s]\\t\\t\\tlist filesystem with file attributes (like\\n\");",
          "3029:  ERROR(\"\\t\\t\\t\\tls -l output), but don't unsquash\\n\");",
          "3030:  ERROR(\"\\t-lln[umeric]\\t\\t-lls but with numeric uids and gids\\n\");",
          "3031:  ERROR(\"\\t-lc\\t\\t\\tlist filesystem concisely, displaying only \");",
          "3032:  ERROR(\"files\\n\\t\\t\\t\\tand empty directories.  Don't unsquash\\n\");",
          "3033:  ERROR(\"\\t-llc\\t\\t\\tlist filesystem concisely with file \");",
          "3034:  ERROR(\"attributes,\\n\\t\\t\\t\\tdisplaying only files and empty \");",
          "3035:  ERROR(\"directories.\\n\\t\\t\\t\\tDon't unsquash\\n\");",
          "3036:  ERROR(\"\\t-o[ffset] <bytes>\\tskip <bytes> at start of <dest>.  \");",
          "3037:  ERROR(\"Optionally a\\n\\t\\t\\t\\tsuffix of K, M or G can be given to \");",
          "3038:  ERROR(\"specify\\n\\t\\t\\t\\tKbytes, Mbytes or Gbytes respectively \");",
          "3039:  ERROR(\"(default\\n\\t\\t\\t\\t0 bytes).\\n\");",
          "3040:  ERROR(\"\\t-f[orce]\\t\\tif file already exists then overwrite\\n\");",
          "3041:  ERROR(\"\\t-ig[nore-errors]\\ttreat errors writing files to output \");",
          "3042:  ERROR(\"as\\n\\t\\t\\t\\tnon-fatal\\n\");",
          "3043:  ERROR(\"\\t-st[rict-errors]\\ttreat all errors as fatal\\n\");",
          "3044:  ERROR(\"\\t-no-exit[-code]\\t\\tdon't set exit code (to nonzero) on \");",
          "3045:  ERROR(\"non-fatal\\n\\t\\t\\t\\terrors\\n\");",
          "3046:  ERROR(\"\\t-s[tat]\\t\\t\\tdisplay filesystem superblock information\\n\");",
          "3047:  ERROR(\"\\t-UTC\\t\\t\\tuse UTC rather than local time zone \");",
          "3048:  ERROR(\"when\\n\\t\\t\\t\\tdisplaying time\\n\");",
          "3049:  ERROR(\"\\t-mkfs-time\\t\\tdisplay filesystem superblock time\\n\");",
          "3050:  ERROR(\"\\t-fstime\\t\\t\\tsynonym for -mkfs-time\\n\");",
          "3051:  ERROR(\"\\t-extract-file <file>\\tlist of directories or files to \");",
          "3052:  ERROR(\"extract.\\n\\t\\t\\t\\tOne per line\\n\");",
          "3053:  ERROR(\"\\t-exclude-file <file>\\tlist of directories or files to \");",
          "3054:  ERROR(\"exclude.\\n\\t\\t\\t\\tOne per line\\n\");",
          "3055:  ERROR(\"\\t-e[f] <extract file>\\tsynonym for -extract-file\\n\");",
          "3056:  ERROR(\"\\t-exc[f] <exclude file>\\tsynonym for -exclude-file\\n\");",
          "3057:  ERROR(\"\\t-da[ta-queue] <size>\\tset data queue to <size> Mbytes.  \");",
          "3058:  ERROR(\"Default %d\\n\\t\\t\\t\\tMbytes\\n\", DATA_BUFFER_DEFAULT);",
          "3059:  ERROR(\"\\t-fr[ag-queue] <size>\\tset fragment queue to <size> Mbytes.  \");",
          "3060:  ERROR(\"Default\\n\\t\\t\\t\\t%d Mbytes\\n\", FRAGMENT_BUFFER_DEFAULT);",
          "3061:  ERROR(\"\\t-no-wild[cards]\\t\\tdo not use wildcard matching in extract \");",
          "3062:  ERROR(\"names\\n\");",
          "3063:  ERROR(\"\\t-r[egex]\\t\\ttreat extract names as POSIX regular \");",
          "3064:  ERROR(\"expressions\\n\");",
          "3065:  ERROR(\"\\t\\t\\t\\trather than use the default shell \");",
          "3066:  ERROR(\"wildcard\\n\\t\\t\\t\\texpansion (globbing)\\n\");",
          "3067:  ERROR(\"\\t-L\\t\\t\\tsynonym for -follow-symlinks\\n\");",
          "3068:  ERROR(\"\\nDecompressors available:\\n\");",
          "3069:  display_compressors(\"\", \"\");",
          "3070: }",
          "3073: void print_version()",
          "3074: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3207:        argv[0], argv[i - 1]);",
          "3208:     exit(1);",
          "3209:    }",
          "3212:  }",
          "3214:  if(lsonly || info)",
          "",
          "[Removed Lines]",
          "3210:   } else",
          "3211:    goto options;",
          "",
          "[Added Lines]",
          "3288:   } else {",
          "3289:    print_options(argv[0]);",
          "3290:    exit(1);",
          "3291:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3240: #endif",
          "3242:  if(i == argc) {",
          "3337:   exit(1);",
          "3338:  }",
          "",
          "[Removed Lines]",
          "3243:   if(!version) {",
          "3244: options:",
          "3245:    ERROR(\"SYNTAX: %s [options] filesystem [directories or \"",
          "3246:     \"files to extract or exclude (with -excludes)]\\n\", argv[0]);",
          "3247:    ERROR(\"\\t-v[ersion]\\t\\tprint version, licence and \"",
          "3248:     \"copyright information\\n\");",
          "3249:    ERROR(\"\\t-d[est] <pathname>\\tunsquash to <pathname>, \"",
          "3250:     \"default \\\"squashfs-root\\\"\\n\");",
          "3251:    ERROR(\"\\t-max[-depth] <levels>\\tdescend at most \"",
          "3252:     \"<levels> of directories when\"",
          "3253:     \"\\n\\t\\t\\t\\tunsquashing or listing\\n\");",
          "3254:    ERROR(\"\\t-excludes\\t\\ttreat files on command line as exclude files\\n\");",
          "3255:    ERROR(\"\\t-ex[clude-list]\\t\\tlist of files/dirs to be \"",
          "3256:     \"excluded, terminated with ';'\\n\");",
          "3257:    ERROR(\"\\t-follow[-symlinks]\\tfollow symlinks in extract\"",
          "3258:     \" files, and add all\\n\\t\\t\\t\\tfiles/symlinks \"",
          "3259:     \"needed to resolve extract file.\\n\\t\\t\\t\\t\"",
          "3260:     \"Implies -no-wildcards\\n\");",
          "3261:    ERROR(\"\\t-missing[-symlinks]\\tUnsquashfs will abort \"",
          "3262:     \"if any symlink can't be\\n\\t\\t\\t\\tresolved in\"",
          "3263:     \"-follow-symlinks\\n\");",
          "3264:    ERROR(\"\\t-q[uiet]\\t\\tno verbose output\\n\");",
          "3265:    ERROR(\"\\t-n[o-progress]\\t\\tdon't display the progress \"",
          "3266:     \"bar\\n\");",
          "3267:    ERROR(\"\\t-no[-xattrs]\\t\\tdon't extract xattrs in file \"",
          "3268:     \"system\" NOXOPT_STR\"\\n\");",
          "3269:    ERROR(\"\\t-x[attrs]\\t\\textract xattrs in file system\"",
          "3270:     XOPT_STR \"\\n\");",
          "3271:    ERROR(\"\\t-u[ser-xattrs]\\t\\tonly extract user xattrs in \"",
          "3272:     \"file system.\\n\\t\\t\\t\\tEnables extracting \"",
          "3273:     \"xattrs\\n\");",
          "3274:    ERROR(\"\\t-p[rocessors] <number>\\tuse <number> \"",
          "3275:     \"processors.  By default will use\\n\");",
          "3276:    ERROR(\"\\t\\t\\t\\tnumber of processors available\\n\");",
          "3277:    ERROR(\"\\t-i[nfo]\\t\\t\\tprint files as they are \"",
          "3278:     \"unsquashed\\n\");",
          "3279:    ERROR(\"\\t-li[nfo]\\t\\tprint files as they are \"",
          "3280:     \"unsquashed with file\\n\");",
          "3281:    ERROR(\"\\t\\t\\t\\tattributes (like ls -l output)\\n\");",
          "3282:    ERROR(\"\\t-l[s]\\t\\t\\tlist filesystem, but don't unsquash\"",
          "3283:     \"\\n\");",
          "3284:    ERROR(\"\\t-ll[s]\\t\\t\\tlist filesystem with file \"",
          "3285:     \"attributes (like\\n\");",
          "3286:    ERROR(\"\\t\\t\\t\\tls -l output), but don't unsquash\\n\");",
          "3287:    ERROR(\"\\t-lln[umeric]\\t\\t-lls but with numeric uids \"",
          "3288:     \"and gids\\n\");",
          "3289:    ERROR(\"\\t-lc\\t\\t\\tlist filesystem concisely, displaying\"",
          "3290:     \" only files\\n\\t\\t\\t\\tand empty directories.  \"",
          "3291:     \"Don't unsquash\\n\");",
          "3292:    ERROR(\"\\t-llc\\t\\t\\tlist filesystem concisely with file\"",
          "3293:     \" attributes,\\n\\t\\t\\t\\tdisplaying only files \"",
          "3294:     \"and empty directories.\\n\\t\\t\\t\\tDon't\"",
          "3295:     \" unsquash\\n\");",
          "3296:    ERROR(\"\\t-o[ffset] <bytes>\\tskip <bytes> at start of \"",
          "3297:     \"<dest>.  Optionally a\\n\\t\\t\\t\\tsuffix of \"",
          "3298:     \"K, M or G can be given to specify \"",
          "3299:     \"\\n\\t\\t\\t\\tKbytes, Mbytes or Gbytes \"",
          "3300:     \"respectively (default\\n\\t\\t\\t\\t0 bytes).\\n\");",
          "3301:    ERROR(\"\\t-f[orce]\\t\\tif file already exists then \"",
          "3302:     \"overwrite\\n\");",
          "3303:    ERROR(\"\\t-ig[nore-errors]\\ttreat errors writing files \"",
          "3304:     \"to output as\\n\\t\\t\\t\\tnon-fatal\\n\");",
          "3305:    ERROR(\"\\t-st[rict-errors]\\ttreat all errors as fatal\\n\");",
          "3306:    ERROR(\"\\t-no-exit[-code]\\t\\tdon't set exit code \"",
          "3307:     \"(to nonzero) on non-fatal\\n\\t\\t\\t\\terrors\\n\");",
          "3308:    ERROR(\"\\t-s[tat]\\t\\t\\tdisplay filesystem superblock \"",
          "3309:     \"information\\n\");",
          "3310:    ERROR(\"\\t-UTC\\t\\t\\tuse UTC rather than local time \"",
          "3311:     \"zone when\\n\\t\\t\\t\\tdisplaying time\\n\");",
          "3312:    ERROR(\"\\t-mkfs-time\\t\\tdisplay filesystem superblock \"",
          "3313:     \"time\\n\");",
          "3314:    ERROR(\"\\t-fstime\\t\\t\\tsynonym for -mkfs-time\\n\");",
          "3315:    ERROR(\"\\t-extract-file <file>\\tlist of directories or \"",
          "3316:     \"files to extract.\\n\\t\\t\\t\\tOne per line\\n\");",
          "3317:    ERROR(\"\\t-exclude-file <file>\\tlist of directories or \"",
          "3318:     \"files to exclude.\\n\\t\\t\\t\\tOne per line\\n\");",
          "3319:    ERROR(\"\\t-e[f] <extract file>\\tsynonym for -extract-file\\n\");",
          "3320:    ERROR(\"\\t-exc[f] <exclude file>\\tsynonym for -exclude-file\\n\");",
          "3321:    ERROR(\"\\t-da[ta-queue] <size>\\tset data queue to \"",
          "3322:     \"<size> Mbytes.  Default %d\\n\\t\\t\\t\\tMbytes\\n\",",
          "3323:     DATA_BUFFER_DEFAULT);",
          "3324:    ERROR(\"\\t-fr[ag-queue] <size>\\tset fragment queue to \"",
          "3325:     \"<size> Mbytes.  Default\\n\\t\\t\\t\\t%d Mbytes\\n\",",
          "3326:     FRAGMENT_BUFFER_DEFAULT);",
          "3327:    ERROR(\"\\t-no-wild[cards]\\t\\tdo not use wildcard \"",
          "3328:     \"matching in extract names\\n\");",
          "3329:    ERROR(\"\\t-r[egex]\\t\\ttreat extract names as POSIX \"",
          "3330:     \"regular expressions\\n\");",
          "3331:    ERROR(\"\\t\\t\\t\\trather than use the default shell \"",
          "3332:     \"wildcard\\n\\t\\t\\t\\texpansion (globbing)\\n\");",
          "3333:    ERROR(\"\\t-L\\t\\t\\tsynonym for -follow-symlinks\\n\");",
          "3334:    ERROR(\"\\nDecompressors available:\\n\");",
          "3335:    display_compressors(\"\", \"\");",
          "3336:   }",
          "",
          "[Added Lines]",
          "3323:   if(!version)",
          "3324:    print_options(argv[0]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b48d0e70c97be392c5cb9fbab9551a9ca1c631c",
      "candidate_info": {
        "commit_hash": "0b48d0e70c97be392c5cb9fbab9551a9ca1c631c",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/0b48d0e70c97be392c5cb9fbab9551a9ca1c631c",
        "files": [
          "squashfs-tools/compressor.c",
          "squashfs-tools/compressor.h",
          "squashfs-tools/mksquashfs.c",
          "squashfs-tools/read_fs.c",
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "compressors: Add stream argument to display_compressors()\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/compressor.c||squashfs-tools/compressor.c",
          "squashfs-tools/compressor.h||squashfs-tools/compressor.h",
          "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c",
          "squashfs-tools/read_fs.c||squashfs-tools/read_fs.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/compressor.c||squashfs-tools/compressor.c": [
          "File: squashfs-tools/compressor.c -> squashfs-tools/compressor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: }",
          "117: {",
          "118:  int i;",
          "120:  for(i = 0; compressor[i]->id; i++)",
          "121:   if(compressor[i]->supported)",
          "123:     compressor[i]->name,",
          "124:     strcmp(compressor[i]->name, def_comp) == 0 ?",
          "125:     \" (default)\" : \"\");",
          "",
          "[Removed Lines]",
          "116: void display_compressors(char *indent, char *def_comp)",
          "122:    fprintf(stderr, \"%s\\t%s%s\\n\", indent,",
          "",
          "[Added Lines]",
          "116: void display_compressors(FILE *stream, char *indent, char *def_comp)",
          "122:    fprintf(stream, \"%s\\t%s%s\\n\", indent,",
          "",
          "---------------"
        ],
        "squashfs-tools/compressor.h||squashfs-tools/compressor.h": [
          "File: squashfs-tools/compressor.h -> squashfs-tools/compressor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: extern struct compressor *lookup_compressor(char *);",
          "42: extern struct compressor *lookup_compressor_id(int);",
          "44: extern void display_compressor_usage(char *);",
          "46: static inline int compressor_init(struct compressor *comp, void **stream,",
          "",
          "[Removed Lines]",
          "43: extern void display_compressors(char *, char *);",
          "",
          "[Added Lines]",
          "43: extern void display_compressors(FILE *stream, char *, char *);",
          "",
          "---------------"
        ],
        "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c": [
          "File: squashfs-tools/mksquashfs.c -> squashfs-tools/mksquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5470:  ERROR(\"-tarstyle\\t\\talternative name for -no-strip\\n\");",
          "5471:  ERROR(\"-comp <comp>\\t\\tselect <comp> compression\\n\");",
          "5472:  ERROR(\"\\t\\t\\tCompressors available:\\n\");",
          "5474:  ERROR(\"-b <block_size>\\t\\tset data block to <block_size>.  Default \");",
          "5475:  ERROR(\"128 Kbytes\\n\");",
          "5476:  ERROR(\"\\t\\t\\tOptionally a suffix of K or M can be given to \");",
          "",
          "[Removed Lines]",
          "5473:  display_compressors(\"\\t\\t\\t\", COMP_DEFAULT);",
          "",
          "[Added Lines]",
          "5473:  display_compressors(stderr, \"\\t\\t\\t\", COMP_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5665:     ERROR(\"%s: Compressor \\\"%s\\\" is not supported!\"",
          "5666:      \"\\n\", argv[0], argv[i]);",
          "5667:     ERROR(\"%s: Compressors available:\\n\", argv[0]);",
          "5669:     exit(1);",
          "5670:    }",
          "5671:    if(prev_comp != NULL && prev_comp != comp) {",
          "",
          "[Removed Lines]",
          "5668:     display_compressors(\"\", COMP_DEFAULT);",
          "",
          "[Added Lines]",
          "5668:     display_compressors(stderr, \"\", COMP_DEFAULT);",
          "",
          "---------------"
        ],
        "squashfs-tools/read_fs.c||squashfs-tools/read_fs.c": [
          "File: squashfs-tools/read_fs.c -> squashfs-tools/read_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:   ERROR(\"Filesystem on %s uses %s compression, this is \"",
          "620:    \"unsupported by this version\\n\", source, comp->name);",
          "621:   ERROR(\"Compressors available:\\n\");",
          "623:   goto failed_mount;",
          "624:  }",
          "",
          "[Removed Lines]",
          "622:   display_compressors(\"\", \"\");",
          "",
          "[Added Lines]",
          "622:   display_compressors(stderr, \"\", \"\");",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2199:   ERROR(\"Filesystem uses %s compression, this is \"",
          "2200:    \"unsupported by this version\\n\", comp->name);",
          "2201:   ERROR(\"Decompressors available:\\n\");",
          "2203:   return FALSE;",
          "2204:  }",
          "",
          "[Removed Lines]",
          "2202:   display_compressors(\"\", \"\");",
          "",
          "[Added Lines]",
          "2202:   display_compressors(stderr, \"\", \"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3768:  ERROR(\"\\t\\t\\t\\trather than use the default shell \");",
          "3769:  ERROR(\"wildcard\\n\\t\\t\\t\\texpansion (globbing)\\n\");",
          "3770:  ERROR(\"\\nDecompressors available:\\n\");",
          "3772: }",
          "",
          "[Removed Lines]",
          "3771:  display_compressors(\"\", \"\");",
          "",
          "[Added Lines]",
          "3771:  display_compressors(stderr, \"\", \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3846:  ERROR(\"wildcard\\n\\t\\t\\t\\texpansion (globbing)\\n\");",
          "3847:  ERROR(\"\\t-L\\t\\t\\tsynonym for -follow-symlinks\\n\");",
          "3848:  ERROR(\"\\nDecompressors available:\\n\");",
          "3850: }",
          "",
          "[Removed Lines]",
          "3849:  display_compressors(\"\", \"\");",
          "",
          "[Added Lines]",
          "3849:  display_compressors(stderr, \"\", \"\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca7f12c64e462d62979a56def5155eae8bdd11ed",
      "candidate_info": {
        "commit_hash": "ca7f12c64e462d62979a56def5155eae8bdd11ed",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/ca7f12c64e462d62979a56def5155eae8bdd11ed",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: make PRINT_VERSION() a function\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3197: }",
          "3217:  printf(\"GNU General Public License for more details.\\n\");",
          "3218: int main(int argc, char *argv[])",
          "3219: {",
          "3220:  char *dest = \"squashfs-root\";",
          "",
          "[Removed Lines]",
          "3200: #define PRINT_VERSION() \\",
          "3201:  printf(\"unsquashfs version \" VERSION \" (\" DATE \")\\n\");\\",
          "3202:  printf(\"copyright (C) 2021 Phillip Lougher \"\\",
          "3203:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "3204:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "3205:   \"\\n\");\\",
          "3206:  printf(\"modify it under the terms of the GNU General Public License\"\\",
          "3207:   \"\\n\");\\",
          "3208:  printf(\"as published by the Free Software Foundation; either version \"\\",
          "3209:   \"2,\\n\");\\",
          "3210:  printf(\"or (at your option) any later version.\\n\\n\");\\",
          "3211:  printf(\"This program is distributed in the hope that it will be \"\\",
          "3212:   \"useful,\\n\");\\",
          "3213:  printf(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\",
          "3214:   \"\\n\");\\",
          "3215:  printf(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\",
          "3216:   \"\\n\");\\",
          "",
          "[Added Lines]",
          "3200: void print_version() {",
          "3201:  printf(\"unsquashfs version \" VERSION \" (\" DATE \")\\n\");",
          "3202:  printf(\"copyright (C) 2021 Phillip Lougher \");",
          "3203:  printf(\"<phillip@squashfs.org.uk>\\n\\n\");",
          "3204:  printf(\"This program is free software; you can redistribute it and/or\\n\");",
          "3205:  printf(\"modify it under the terms of the GNU General Public License\\n\");",
          "3206:  printf(\"as published by the Free Software Foundation; either version \");",
          "3207:  printf(\"2,\\n\");",
          "3208:  printf(\"or (at your option) any later version.\\n\\n\");",
          "3209:  printf(\"This program is distributed in the hope that it will be \");",
          "3210:  printf(\"useful,\\n\");",
          "3211:  printf(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");",
          "3212:  printf(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\");",
          "3214: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3273:    quiet = TRUE;",
          "3274:   else if(strcmp(argv[i], \"-version\") == 0 ||",
          "3275:     strcmp(argv[i], \"-v\") == 0) {",
          "3277:    version = TRUE;",
          "3278:   } else if(strcmp(argv[i], \"-info\") == 0 ||",
          "3279:     strcmp(argv[i], \"-i\") == 0)",
          "",
          "[Removed Lines]",
          "3276:    PRINT_VERSION();",
          "",
          "[Added Lines]",
          "3275:    print_version();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddfb69d50971710502c9818a1fd1be42497e9808",
      "candidate_info": {
        "commit_hash": "ddfb69d50971710502c9818a1fd1be42497e9808",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/ddfb69d50971710502c9818a1fd1be42497e9808",
        "files": [
          "squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Update version strings for tagged \"point\" release\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/mksquashfs.c||squashfs-tools/mksquashfs.c": [
          "File: squashfs-tools/mksquashfs.c -> squashfs-tools/mksquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5352: #define VERSION() \\",
          "5355:   \"<phillip@squashfs.org.uk>\\n\\n\"); \\",
          "5356:  printf(\"This program is free software; you can redistribute it and/or\"\\",
          "5357:   \"\\n\");\\",
          "",
          "[Removed Lines]",
          "5353:  printf(\"mksquashfs version 4.4 (2019/08/29)\\n\");\\",
          "5354:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "",
          "[Added Lines]",
          "5353:  printf(\"mksquashfs version 4.4-git.1 (2020/10/30)\\n\");\\",
          "5354:  printf(\"copyright (C) 2020 Phillip Lougher \"\\",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2622: #define VERSION() \\",
          "2625:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2626:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "2627:   \"\\n\");\\",
          "",
          "[Removed Lines]",
          "2623:  printf(\"unsquashfs version 4.4 (2019/08/29)\\n\");\\",
          "2624:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "",
          "[Added Lines]",
          "2623:  printf(\"unsquashfs version 4.4-git.1 (2020/10/30)\\n\");\\",
          "2624:  printf(\"copyright (C) 2020 Phillip Lougher \"\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3051a91b9b44c47f1ca895a697c06cddd18f97a9",
      "candidate_info": {
        "commit_hash": "3051a91b9b44c47f1ca895a697c06cddd18f97a9",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/3051a91b9b44c47f1ca895a697c06cddd18f97a9",
        "files": [
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "Unsquashfs: fix error handling in writer thread\n\nThe writer thread error handling was not updated correctly\nwhen the new finer grained error handling was added\nto Unsquashfs in the 4.4 release.\n\nDue to this, a failure will cause the writer thread\nto cease to output the filesystem.\n\nThis commit fixes the issue.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2060: void *writer(void *arg)",
          "2061: {",
          "2062:  int i;",
          "2065:  while(1) {",
          "2066:   struct squashfs_file *file = queue_get(to_writer);",
          "2067:   int file_fd;",
          "2068:   long long hole = 0;",
          "2069:   int res;",
          "2071:   if(file == NULL) {",
          "2073:    continue;",
          "2074:   } else if(file->fd == -1) {",
          "2076:    res = set_attributes(file->pathname, file->mode, file->uid,",
          "2077:     file->gid, file->time, file->xattr, TRUE);",
          "2078:    if(res == FALSE)",
          "2080:    free(file->pathname);",
          "2081:    free(file);",
          "2082:    continue;",
          "",
          "[Removed Lines]",
          "2063:  long failed = FALSE;",
          "2072:    queue_put(from_writer, (void *) failed);",
          "2079:     failed = TRUE;",
          "",
          "[Added Lines]",
          "2063:  long exit_code = FALSE;",
          "2069:   int local_fail = FALSE;",
          "2073:    queue_put(from_writer, (void *) exit_code);",
          "2080:     exit_code = TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2100:    if(block->buffer->error) {",
          "2101:     EXIT_UNSQUASH_IGNORE(\"writer: failed to read/uncompress file %s\\n\", file->pathname);",
          "2103:    }",
          "2114:    }",
          "2116:    hole = 0;",
          "",
          "[Removed Lines]",
          "2102:     failed = TRUE;",
          "2105:    if(failed)",
          "2106:     continue;",
          "2108:    res = write_block(file_fd, block->buffer->data +",
          "2109:     block->offset, block->size, hole, file->sparse);",
          "2111:    if(res == FALSE) {",
          "2112:     EXIT_UNSQUASH_IGNORE(\"writer: failed to write file %s\\n\", file->pathname);",
          "2113:     failed = TRUE;",
          "",
          "[Added Lines]",
          "2103:     exit_code = local_fail = TRUE;",
          "2106:    if(local_fail == FALSE) {",
          "2107:     res = write_block(file_fd, block->buffer->data +",
          "2108:      block->offset, block->size, hole, file->sparse);",
          "2110:     if(res == FALSE) {",
          "2111:      EXIT_UNSQUASH_IGNORE(\"writer: failed to write file %s\\n\", file->pathname);",
          "2112:      exit_code = local_fail = TRUE;",
          "2113:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2118:    free(block);",
          "2119:   }",
          "",
          "[Removed Lines]",
          "2121:   if(hole && failed == FALSE) {",
          "",
          "[Added Lines]",
          "2121:   if(hole && local_fail == FALSE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2135:       file->sparse) == FALSE) {",
          "2136:      EXIT_UNSQUASH_IGNORE(\"writer: failed to write sparse \"",
          "2137:       \"data block for file %s\\n\", file->pathname);",
          "2139:     }",
          "2140:    } else if(ftruncate(file_fd, file->file_size) == -1) {",
          "2141:     EXIT_UNSQUASH_IGNORE(\"writer: failed to write sparse data \"",
          "2142:      \"block for file %s\\n\", file->pathname);",
          "2144:    }",
          "2145:   }",
          "2147:   close_wake(file_fd);",
          "2149:    res = set_attributes(file->pathname, file->mode, file->uid,",
          "2150:     file->gid, file->time, file->xattr, force);",
          "2151:    if(res == FALSE)",
          "2153:   } else",
          "2154:    unlink(file->pathname);",
          "2155:   free(file->pathname);",
          "",
          "[Removed Lines]",
          "2138:      failed = TRUE;",
          "2143:     failed = TRUE;",
          "2148:   if(failed == FALSE) {",
          "2152:     failed = TRUE;",
          "",
          "[Added Lines]",
          "2138:      exit_code = local_fail = TRUE;",
          "2143:     exit_code = local_fail = TRUE;",
          "2148:   if(local_fail == FALSE) {",
          "2152:     exit_code = TRUE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2622: #define VERSION() \\",
          "2625:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2626:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "2627:   \"\\n\");\\",
          "",
          "[Removed Lines]",
          "2623:  printf(\"unsquashfs version 4.4-git.1 (2020/10/30)\\n\");\\",
          "2624:  printf(\"copyright (C) 2020 Phillip Lougher \"\\",
          "",
          "[Added Lines]",
          "2623:  printf(\"unsquashfs version 4.4-git (2021/01/07)\\n\");\\",
          "2624:  printf(\"copyright (C) 2021 Phillip Lougher \"\\",
          "",
          "---------------"
        ]
      }
    }
  ]
}