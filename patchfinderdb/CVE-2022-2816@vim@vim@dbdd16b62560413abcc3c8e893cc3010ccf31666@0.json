{
  "cve_id": "CVE-2022-2816",
  "cve_desc": "Out-of-bounds Read in GitHub repository vim/vim prior to 9.0.0212.",
  "repo": "vim/vim",
  "patch_hash": "dbdd16b62560413abcc3c8e893cc3010ccf31666",
  "patch_info": {
    "commit_hash": "dbdd16b62560413abcc3c8e893cc3010ccf31666",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/dbdd16b62560413abcc3c8e893cc3010ccf31666",
    "files": [
      "src/testdir/test_vim9_cmd.vim",
      "src/version.c",
      "src/vim9cmds.c"
    ],
    "message": "patch 9.0.0212: invalid memory access when compiling :unlet\n\nProblem:    Invalid memory access when compiling :unlet.\nSolution:   Don't read past the end of the line.",
    "before_after_code_files": [
      "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
      "src/version.c||src/version.c",
      "src/vim9cmds.c||src/vim9cmds.c"
    ]
  },
  "patch_diff": {
    "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim": [
      "File: src/testdir/test_vim9_cmd.vim -> src/testdir/test_vim9_cmd.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1741:   lines =<< trim END",
      "1742:       def _()",
      "1744:         lockv",
      "1745:       enddef",
      "1746:       defcomp",
      "1747:   END",
      "1749: enddef",
      "1751: def Test_substitute_expr()",
      "",
      "[Removed Lines]",
      "1743:         s:0([], s:0)",
      "1748:   v9.CheckScriptFailure(lines, 'E179', 2)",
      "",
      "[Added Lines]",
      "1747:   v9.CheckScriptFailure(lines, 'E179', 1)",
      "1749:   lines =<< trim END",
      "1750:       def T()",
      "1751:         unlet",
      "1752:       enddef",
      "1753:       defcomp",
      "1754:   END",
      "1755:   v9.CheckScriptFailure(lines, 'E179', 1)",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     211,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     212,",
      "",
      "---------------"
    ],
    "src/vim9cmds.c||src/vim9cmds.c": [
      "File: src/vim9cmds.c -> src/vim9cmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:     int",
      "93: check_vim9_unlet(char_u *name)",
      "94: {",
      "95:     if (name[1] != ':' || vim_strchr((char_u *)\"gwtb\", *name) == NULL)",
      "96:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "95:     if (*name == NUL)",
      "96:     {",
      "97:  semsg(_(e_argument_required_for_str), \"unlet\");",
      "98:  return FAIL;",
      "99:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1d8f6bacb489036d0fd479c9dd3c0102c988889",
      "candidate_info": {
        "commit_hash": "d1d8f6bacb489036d0fd479c9dd3c0102c988889",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/d1d8f6bacb489036d0fd479c9dd3c0102c988889",
        "files": [
          "src/testdir/test_vim9_cmd.vim",
          "src/version.c",
          "src/vim9cmds.c"
        ],
        "message": "patch 9.0.0211: invalid memory access when compiling :lockvar\n\nProblem:    Invalid memory access when compiling :lockvar.\nSolution:   Don't read past the end of the line.",
        "before_after_code_files": [
          "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
          "src/version.c||src/version.c",
          "src/vim9cmds.c||src/vim9cmds.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
            "src/version.c||src/version.c",
            "src/vim9cmds.c||src/vim9cmds.c"
          ],
          "candidate": [
            "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
            "src/version.c||src/version.c",
            "src/vim9cmds.c||src/vim9cmds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim": [
          "File: src/testdir/test_vim9_cmd.vim -> src/testdir/test_vim9_cmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1737:       UnLockIt()",
          "1738:   END",
          "1739:   v9.CheckScriptFailure(lines, 'E46', 1)",
          "1740: enddef",
          "1742: def Test_substitute_expr()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1741:   lines =<< trim END",
          "1742:       def _()",
          "1743:         s:0([], s:0)",
          "1744:         lockv",
          "1745:       enddef",
          "1746:       defcomp",
          "1747:   END",
          "1748:   v9.CheckScriptFailure(lines, 'E179', 2)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     210,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     211,",
          "",
          "---------------"
        ],
        "src/vim9cmds.c||src/vim9cmds.c": [
          "File: src/vim9cmds.c -> src/vim9cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:     size_t len;",
          "189:     char_u *buf;",
          "190:     isntype_T isn = ISN_EXEC;",
          "192:     if (cctx->ctx_skip == SKIP_YES)",
          "193:  return OK;",
          "196:     if (p[1] != ':')",
          "197:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:     char *cmd = eap->cmdidx == CMD_lockvar ? \"lockvar\" : \"unlockvar\";",
          "196:     if (*p == NUL)",
          "197:     {",
          "198:  semsg(_(e_argument_required_for_str), cmd);",
          "199:  return FAIL;",
          "200:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:  ret = FAIL;",
          "224:     else",
          "225:     {",
          "228:  if (deep < 0)",
          "229:      vim_snprintf((char *)buf, len, \"%s! %s\", cmd, p);",
          "230:  else",
          "",
          "[Removed Lines]",
          "226:  char *cmd = eap->cmdidx == CMD_lockvar ? \"lockvar\" : \"unlockvar\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}