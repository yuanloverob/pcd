{
  "cve_id": "CVE-2016-9120",
  "cve_desc": "Race condition in the ion_ioctl function in drivers/staging/android/ion/ion.c in the Linux kernel before 4.6 allows local users to gain privileges or cause a denial of service (use-after-free) by calling ION_IOC_FREE on two CPUs at the same time.",
  "repo": "torvalds/linux",
  "patch_hash": "9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
  "patch_info": {
    "commit_hash": "9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
    "files": [
      "drivers/staging/android/ion/ion.c"
    ],
    "message": "staging/android/ion : fix a race condition in the ion driver\n\nThere is a use-after-free problem in the ion driver.\nThis is caused by a race condition in the ion_ioctl()\nfunction.\n\nA handle has ref count of 1 and two tasks on different\ncpus calls ION_IOC_FREE simultaneously.\n\ncpu 0                                   cpu 1\n-------------------------------------------------------\nion_handle_get_by_id()\n(ref == 2)\n                            ion_handle_get_by_id()\n                            (ref == 3)\n\nion_free()\n(ref == 2)\n\nion_handle_put()\n(ref == 1)\n\n                            ion_free()\n                            (ref == 0 so ion_handle_destroy() is\n                            called\n                            and the handle is freed.)\n\n                            ion_handle_put() is called and it\n                            decreases the slub's next free pointer\n\nThe problem is detected as an unaligned access in the\nspin lock functions since it uses load exclusive\n instruction. In some cases it corrupts the slub's\nfree pointer which causes a mis-aligned access to the\nnext free pointer.(kmalloc returns a pointer like\nffffc0745b4580aa). And it causes lots of other\nhard-to-debug problems.\n\nThis symptom is caused since the first member in the\nion_handle structure is the reference count and the\nion driver decrements the reference after it has been\nfreed.\n\nTo fix this problem client->lock mutex is extended\nto protect all the codes that uses the handle.\n\nSigned-off-by: Eun Taik Lee <eun.taik.lee@samsung.com>\nReviewed-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
    ]
  },
  "patch_diff": {
    "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
      "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:  kref_get(&handle->ref);",
      "388: }",
      "391: {",
      "392:  struct ion_client *client = handle->client;",
      "393:  int ret;",
      "395:  mutex_lock(&client->lock);",
      "397:  mutex_unlock(&client->lock);",
      "399:  return ret;",
      "",
      "[Removed Lines]",
      "390: static int ion_handle_put(struct ion_handle *handle)",
      "396:  ret = kref_put(&handle->ref, ion_handle_destroy);",
      "",
      "[Added Lines]",
      "390: static int ion_handle_put_nolock(struct ion_handle *handle)",
      "391: {",
      "392:  int ret;",
      "394:  ret = kref_put(&handle->ref, ion_handle_destroy);",
      "396:  return ret;",
      "397: }",
      "399: int ion_handle_put(struct ion_handle *handle)",
      "405:  ret = ion_handle_put_nolock(handle);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:  return ERR_PTR(-EINVAL);",
      "418: }",
      "421:       int id)",
      "422: {",
      "423:  struct ion_handle *handle;",
      "426:  handle = idr_find(&client->idr, id);",
      "427:  if (handle)",
      "428:   ion_handle_get(handle);",
      "431:  return handle ? handle : ERR_PTR(-EINVAL);",
      "432: }",
      "434: static bool ion_handle_validate(struct ion_client *client,",
      "435:     struct ion_handle *handle)",
      "436: {",
      "",
      "[Removed Lines]",
      "420: static struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
      "425:  mutex_lock(&client->lock);",
      "429:  mutex_unlock(&client->lock);",
      "",
      "[Added Lines]",
      "429: static struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
      "441: struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
      "442:       int id)",
      "443: {",
      "444:  struct ion_handle *handle;",
      "446:  mutex_lock(&client->lock);",
      "447:  handle = ion_handle_get_by_id_nolock(client, id);",
      "448:  mutex_unlock(&client->lock);",
      "450:  return handle;",
      "451: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "532: }",
      "533: EXPORT_SYMBOL(ion_alloc);",
      "536: {",
      "537:  bool valid_handle;",
      "539:  BUG_ON(client != handle->client);",
      "542:  valid_handle = ion_handle_validate(client, handle);",
      "544:  if (!valid_handle) {",
      "545:   WARN(1, \"%s: invalid handle passed to free.\\n\", __func__);",
      "547:   return;",
      "548:  }",
      "549:  mutex_unlock(&client->lock);",
      "551: }",
      "552: EXPORT_SYMBOL(ion_free);",
      "",
      "[Removed Lines]",
      "535: void ion_free(struct ion_client *client, struct ion_handle *handle)",
      "541:  mutex_lock(&client->lock);",
      "546:   mutex_unlock(&client->lock);",
      "550:  ion_handle_put(handle);",
      "",
      "[Added Lines]",
      "554: static void ion_free_nolock(struct ion_client *client, struct ion_handle *handle)",
      "566:  ion_handle_put_nolock(handle);",
      "567: }",
      "569: void ion_free(struct ion_client *client, struct ion_handle *handle)",
      "570: {",
      "571:  BUG_ON(client != handle->client);",
      "573:  mutex_lock(&client->lock);",
      "574:  ion_free_nolock(client, handle);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1332:  {",
      "1333:   struct ion_handle *handle;",
      "1337:    return PTR_ERR(handle);",
      "1340:   break;",
      "1341:  }",
      "1342:  case ION_IOC_SHARE:",
      "",
      "[Removed Lines]",
      "1335:   handle = ion_handle_get_by_id(client, data.handle.handle);",
      "1336:   if (IS_ERR(handle))",
      "1338:   ion_free(client, handle);",
      "1339:   ion_handle_put(handle);",
      "",
      "[Added Lines]",
      "1360:   mutex_lock(&client->lock);",
      "1361:   handle = ion_handle_get_by_id_nolock(client, data.handle.handle);",
      "1362:   if (IS_ERR(handle)) {",
      "1363:    mutex_unlock(&client->lock);",
      "1365:   }",
      "1366:   ion_free_nolock(client, handle);",
      "1367:   ion_handle_put_nolock(handle);",
      "1368:   mutex_unlock(&client->lock);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0210737c85860756efa7d936156e8a94412f5d5c",
      "candidate_info": {
        "commit_hash": "0210737c85860756efa7d936156e8a94412f5d5c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0210737c85860756efa7d936156e8a94412f5d5c",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: Do not BUG on handle client mismatch\n\nThe ion_free_nolock() function should not BUG on a handle client mismatch.\n\nSigned-off-by: Johanna Abrahamsson <johanna@mjao.org>\nAcked-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "550: {",
          "551:  bool valid_handle;",
          "555:  valid_handle = ion_handle_validate(client, handle);",
          "557:  if (!valid_handle) {",
          "",
          "[Removed Lines]",
          "553:  BUG_ON(client != handle->client);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0045c8ddd6965e15f638788e7180abe8765f6cbb",
      "candidate_info": {
        "commit_hash": "0045c8ddd6965e15f638788e7180abe8765f6cbb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0045c8ddd6965e15f638788e7180abe8765f6cbb",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: make locally used functions static\n\nFunctions ion_handle_put and ion_handle_get_by_id are only used locally\nin ion.c, so they should be made static as they used to be before\n9590232b (\"staging/android/ion : fix a race condition in the ion driver\").\n\nSigned-off-by: Markus B\u00f6hme <markus.boehme@mailbox.org>\nReviewed-by: Sumit Semwal <sumit.semwal@linaro.org>\nReviewed-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:  return ret;",
          "397: }",
          "400: {",
          "401:  struct ion_client *client = handle->client;",
          "402:  int ret;",
          "",
          "[Removed Lines]",
          "399: int ion_handle_put(struct ion_handle *handle)",
          "",
          "[Added Lines]",
          "399: static int ion_handle_put(struct ion_handle *handle)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:  return handle ? handle : ERR_PTR(-EINVAL);",
          "439: }",
          "443: {",
          "444:  struct ion_handle *handle;",
          "",
          "[Removed Lines]",
          "441: struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
          "442:       int id)",
          "",
          "[Added Lines]",
          "441: static struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
          "442:             int id)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a9aabb107c65ecb6f08b010853f5571d781ba5a",
      "candidate_info": {
        "commit_hash": "6a9aabb107c65ecb6f08b010853f5571d781ba5a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6a9aabb107c65ecb6f08b010853f5571d781ba5a",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: fix 'line over 80 characters'\n\nfix checkpatch.pl warning about 'line over 80 characters'.\n\nSigned-off-by: Didik Setiawan <didik.swn@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545: }",
          "546: EXPORT_SYMBOL(ion_alloc);",
          "549: {",
          "550:  bool valid_handle;",
          "",
          "[Removed Lines]",
          "548: static void ion_free_nolock(struct ion_client *client, struct ion_handle *handle)",
          "",
          "[Added Lines]",
          "548: static void ion_free_nolock(struct ion_client *client,",
          "549:        struct ion_handle *handle)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1306:   struct ion_handle *handle;",
          "1308:   mutex_lock(&client->lock);",
          "1310:   if (IS_ERR(handle)) {",
          "1311:    mutex_unlock(&client->lock);",
          "1312:    return PTR_ERR(handle);",
          "",
          "[Removed Lines]",
          "1309:   handle = ion_handle_get_by_id_nolock(client, data.handle.handle);",
          "",
          "[Added Lines]",
          "1310:   handle = ion_handle_get_by_id_nolock(client,",
          "1311:            data.handle.handle);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "121ca0c64f69d552a9aa27d2bce49f835030ec8b",
      "candidate_info": {
        "commit_hash": "121ca0c64f69d552a9aa27d2bce49f835030ec8b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/121ca0c64f69d552a9aa27d2bce49f835030ec8b",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: Fix alignment\n\nAlignment should match open parenthesis as per checkpatch.pl.\n\nSigned-off-by: Johanna Abrahamsson <johanna@mjao.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: static struct ion_buffer *ion_buffer_create(struct ion_heap *heap,",
          "181: {",
          "182:  struct ion_buffer *buffer;",
          "183:  struct sg_table *table;",
          "",
          "[Removed Lines]",
          "177:          struct ion_device *dev,",
          "178:          unsigned long len,",
          "179:          unsigned long align,",
          "180:          unsigned long flags)",
          "",
          "[Added Lines]",
          "177:          struct ion_device *dev,",
          "178:          unsigned long len,",
          "179:          unsigned long align,",
          "180:          unsigned long flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331: }",
          "333: static struct ion_handle *ion_handle_create(struct ion_client *client,",
          "335: {",
          "336:  struct ion_handle *handle;",
          "",
          "[Removed Lines]",
          "334:          struct ion_buffer *buffer)",
          "",
          "[Added Lines]",
          "334:          struct ion_buffer *buffer)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421: }",
          "423: static struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
          "425: {",
          "426:  struct ion_handle *handle;",
          "",
          "[Removed Lines]",
          "424:       int id)",
          "",
          "[Added Lines]",
          "424:             int id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "575:  }",
          "576:  vaddr = buffer->heap->ops->map_kernel(buffer->heap, buffer);",
          "577:  if (WARN_ONCE(vaddr == NULL,",
          "579:   return ERR_PTR(-EINVAL);",
          "580:  if (IS_ERR(vaddr))",
          "581:   return vaddr;",
          "",
          "[Removed Lines]",
          "578:    \"heap->ops->map_kernel should return ERR_PTR on error\"))",
          "",
          "[Added Lines]",
          "578:         \"heap->ops->map_kernel should return ERR_PTR on error\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "744: };",
          "746: static int ion_get_client_serial(const struct rb_root *root,",
          "748: {",
          "749:  int serial = -1;",
          "750:  struct rb_node *node;",
          "",
          "[Removed Lines]",
          "747:      const unsigned char *name)",
          "",
          "[Added Lines]",
          "747:      const unsigned char *name)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "834:   path = dentry_path(dev->clients_debug_root, buf, 256);",
          "835:   pr_err(\"Failed to create client debugfs at %s/%s\\n\",",
          "837:  }",
          "839:  up_write(&dev->lock);",
          "",
          "[Removed Lines]",
          "836:    path, client->display_name);",
          "",
          "[Added Lines]",
          "836:          path, client->display_name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "901: }",
          "903: void ion_pages_sync_for_device(struct device *dev, struct page *page,",
          "905: {",
          "906:  struct scatterlist sg;",
          "",
          "[Removed Lines]",
          "904:   size_t size, enum dma_data_direction dir)",
          "",
          "[Added Lines]",
          "904:           size_t size, enum dma_data_direction dir)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "942:   if (ion_buffer_page_is_dirty(page))",
          "943:    ion_pages_sync_for_device(dev, ion_buffer_page(page),",
          "946:   ion_buffer_page_clean(buffer->pages + i);",
          "947:  }",
          "",
          "[Removed Lines]",
          "944:        PAGE_SIZE, dir);",
          "",
          "[Added Lines]",
          "944:         PAGE_SIZE, dir);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1020:  if (!buffer->heap->ops->map_user) {",
          "1021:   pr_err(\"%s: this heap does not define a method for mapping to userspace\\n\",",
          "1023:   return -EINVAL;",
          "1024:  }",
          "",
          "[Removed Lines]",
          "1022:    __func__);",
          "",
          "[Added Lines]",
          "1022:          __func__);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1110: };",
          "1112: struct dma_buf *ion_share_dma_buf(struct ion_client *client,",
          "1114: {",
          "1115:  DEFINE_DMA_BUF_EXPORT_INFO(exp_info);",
          "1116:  struct ion_buffer *buffer;",
          "",
          "[Removed Lines]",
          "1113:       struct ion_handle *handle)",
          "",
          "[Added Lines]",
          "1113:       struct ion_handle *handle)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1285:   struct ion_handle *handle;",
          "1287:   handle = ion_alloc(client, data.allocation.len,",
          "1291:   if (IS_ERR(handle))",
          "1292:    return PTR_ERR(handle);",
          "",
          "[Removed Lines]",
          "1288:       data.allocation.align,",
          "1289:       data.allocation.heap_id_mask,",
          "1290:       data.allocation.flags);",
          "",
          "[Added Lines]",
          "1288:        data.allocation.align,",
          "1289:        data.allocation.heap_id_mask,",
          "1290:        data.allocation.flags);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1472:  seq_printf(s, \"%16s %16zu\\n\", \"total \", total_size);",
          "1473:  if (heap->flags & ION_HEAP_FLAG_DEFER_FREE)",
          "1474:   seq_printf(s, \"%16s %16zu\\n\", \"deferred free\",",
          "1476:  seq_puts(s, \"----------------------------------------------------\\n\");",
          "1478:  if (heap->debug_show)",
          "",
          "[Removed Lines]",
          "1475:     heap->free_list_size);",
          "",
          "[Added Lines]",
          "1475:       heap->free_list_size);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1554:  plist_node_init(&heap->node, -heap->id);",
          "1555:  plist_add(&heap->node, &dev->heaps);",
          "1556:  debug_file = debugfs_create_file(heap->name, 0664,",
          "1560:  if (!debug_file) {",
          "1561:   char buf[256], *path;",
          "1563:   path = dentry_path(dev->heaps_debug_root, buf, 256);",
          "1564:   pr_err(\"Failed to create heap debugfs at %s/%s\\n\",",
          "1566:  }",
          "1568:  if (heap->shrinker.count_objects && heap->shrinker.scan_objects) {",
          "",
          "[Removed Lines]",
          "1557:      dev->heaps_debug_root, heap,",
          "1558:      &debug_heap_fops);",
          "1565:    path, heap->name);",
          "",
          "[Added Lines]",
          "1557:       dev->heaps_debug_root, heap,",
          "1558:       &debug_heap_fops);",
          "1565:          path, heap->name);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1578:    path = dentry_path(dev->heaps_debug_root, buf, 256);",
          "1579:    pr_err(\"Failed to create heap shrinker debugfs at %s/%s\\n\",",
          "1581:   }",
          "1582:  }",
          "",
          "[Removed Lines]",
          "1580:     path, debug_name);",
          "",
          "[Added Lines]",
          "1580:           path, debug_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2bbedf01fe7a9901828911c7a2d8c27f48a5f16",
      "candidate_info": {
        "commit_hash": "c2bbedf01fe7a9901828911c7a2d8c27f48a5f16",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c2bbedf01fe7a9901828911c7a2d8c27f48a5f16",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: Remove valid_handle variable in ion_free_nolock\n\nIt is not neccessary to save the value of ion_handle_validate since it\nis only used once.\n\nSigned-off-by: Johanna Abrahamsson <johanna@mjao.org>\nAcked-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548: static void ion_free_nolock(struct ion_client *client,",
          "549:        struct ion_handle *handle)",
          "550: {",
          "556:   WARN(1, \"%s: invalid handle passed to free.\\n\", __func__);",
          "557:   return;",
          "558:  }",
          "",
          "[Removed Lines]",
          "551:  bool valid_handle;",
          "553:  valid_handle = ion_handle_validate(client, handle);",
          "555:  if (!valid_handle) {",
          "",
          "[Added Lines]",
          "551:  if (!ion_handle_validate(client, handle)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}