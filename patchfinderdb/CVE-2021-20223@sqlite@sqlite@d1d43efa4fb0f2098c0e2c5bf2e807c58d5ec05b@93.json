{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e113844fc1e0cf88ca1967bc7b9581d773ec187",
      "candidate_info": {
        "commit_hash": "1e113844fc1e0cf88ca1967bc7b9581d773ec187",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e113844fc1e0cf88ca1967bc7b9581d773ec187",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/upfrom2.test"
        ],
        "message": "Report an error if an UPDATE...FROM statement has an ORDER BY but no LIMIT clause. Add tests for multi-column primary keys.\n\nFossilOrigin-Name: ffcdb6689123bb871c9bd8f977197f86f37c42e9094e2d4bb187ff479f74cf65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/upfrom2.test||test/upfrom2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b717dc3c5fafb9b86a141e7ecffc030fd9b36aa57a0b3e5200d64ad23a0aa13d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   Expr *pLimit",
          "170: ){",
          "171:   int i;",
          "173:   SelectDest dest;",
          "174:   Select *pSelect = 0;",
          "175:   ExprList *pList = 0;",
          "181:   ExprList *pGroupBy = 0;",
          "182:   int eDest;",
          "184:   assert( pTabList->nSrc>1 );",
          "185:   if( pSrc ){",
          "186:     pSrc->a[0].iCursor = -1;",
          "",
          "[Removed Lines]",
          "172:   sqlite3 *db = pParse->db;",
          "176:   Table *pTab = pTabList->a[0].pTab;",
          "177:   SrcList *pSrc = sqlite3SrcListDup(db, pTabList, 0);",
          "178:   Expr *pWhere2 = sqlite3ExprDup(db, pWhere, 0);",
          "179:   Expr *pLimit2 = sqlite3ExprDup(db, pLimit, 0);",
          "180:   ExprList *pOrderBy2 = sqlite3ExprListDup(db, pOrderBy, 0);",
          "",
          "[Added Lines]",
          "176:   sqlite3 *db = pParse->db;",
          "177:   Table *pTab = pTabList->a[0].pTab;",
          "178:   SrcList *pSrc;",
          "179:   Expr *pWhere2;",
          "180:   Expr *pLimit2;",
          "181:   ExprList *pOrderBy2;",
          "184:   if( pOrderBy && pLimit==0 ) {",
          "185:     sqlite3ErrorMsg(pParse, \"ORDER BY without LIMIT on UPDATE\");",
          "186:     return;",
          "187:   }",
          "189:   pSrc = sqlite3SrcListDup(db, pTabList, 0);",
          "190:   pWhere2 = sqlite3ExprDup(db, pWhere, 0);",
          "191:   pLimit2 = sqlite3ExprDup(db, pLimit, 0);",
          "192:   pOrderBy2 = sqlite3ExprListDup(db, pOrderBy, 0);",
          "",
          "---------------"
        ],
        "test/upfrom2.test||test/upfrom2.test": [
          "File: test/upfrom2.test -> test/upfrom2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     fifteen->sixteen  iv->iv",
          "126:   }",
          "128: }]",
          "129: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   #--------------------------------------------------------------",
          "130:   do_execsql_test 1.%TN%.7 {",
          "131:     CREATE TABLE o1(w, x, y, z UNIQUE, PRIMARY KEY(w, x)) %WO%;",
          "132:     CREATE INDEX o1y ON t1(y);",
          "134:     INSERT INTO o1 VALUES(0, 0, 'i', 'one');",
          "135:     INSERT INTO o1 VALUES(0, 1, 'ii', 'two');",
          "136:     INSERT INTO o1 VALUES(1, 0, 'iii', 'three');",
          "137:     INSERT INTO o1 VALUES(1, 1, 'iv', 'four');",
          "139:     CREATE TRIGGER tro1 BEFORE UPDATE ON o1 BEGIN",
          "140:       INSERT INTO log VALUES(old.z || '->' || new.z);",
          "141:     END;",
          "142:     CREATE TRIGGER tro2 AFTER UPDATE ON o1 BEGIN",
          "143:       INSERT INTO log VALUES(old.y || '->' || new.y);",
          "144:     END;",
          "145:   }",
          "147:   do_execsql_test 1.%TN%.8 {",
          "148:     DELETE FROM log;",
          "149:     WITH data(k, v) AS (",
          "150:       VALUES(3, 'thirty'), (1, 'ten')",
          "151:     )",
          "152:     UPDATE o1 SET z=v FROM data WHERE (1+x+w*2)=k;",
          "154:     SELECT * FROM o1;",
          "155:     SELECT * FROM log;",
          "156:   } {",
          "157:     0 0 i ten   0 1 ii two   1 0 iii thirty   1 1 iv four",
          "158:     one->ten        i->i",
          "159:     three->thirty   iii->iii",
          "160:   }",
          "162:   do_execsql_test 1.%TN%.9 {",
          "163:     DELETE FROM log;",
          "164:     UPDATE o1 SET y=v FROM t2, t3 WHERE (1+o1.w*2+o1.x)=t2.a AND t3.k=t2.b;",
          "166:     SELECT * FROM o1;",
          "167:     SELECT * FROM log;",
          "168:   } {",
          "169:     0 0 i ten   0 1 xii two   1 0 v thirty   1 1 iv four",
          "170:     two->two         ii->xii",
          "171:     thirty->thirty   iii->v",
          "172:   }",
          "174:   do_execsql_test 1.%TN%.10 {",
          "175:     DELETE FROM log;",
          "176:     WITH data(k, v) AS (",
          "177:       VALUES(1, 'seven'), (1, 'eight'), (2, 'eleven'), (2, 'twelve')",
          "178:     )",
          "179:     UPDATE o1 SET z=v FROM data WHERE (1+w*2+x)=k;",
          "181:     SELECT * FROM o1;",
          "182:     SELECT * FROM log;",
          "183:   } {",
          "184:     0 0 i eight   0 1 xii twelve   1 0 v thirty   1 1 iv four",
          "185:     ten->eight        i->i",
          "186:     two->twelve       xii->xii",
          "187:   }",
          "189:   do_test 1.%TN%.11 { db changes } {2}",
          "191:   do_execsql_test 1.%TN%.12 {",
          "192:     CREATE VIEW w1 AS SELECT * FROM o1;",
          "193:     CREATE TRIGGER w1tr INSTEAD OF UPDATE ON w1 BEGIN",
          "194:       UPDATE o1 SET y=new.y, z=new.z WHERE w=new.w AND x=new.x;",
          "195:     END;",
          "197:     DELETE FROM log;",
          "198:     WITH data(k, v) AS (",
          "199:       VALUES(3, 'thirteen'), (3, 'fourteen'), (4, 'fifteen'), (4, 'sixteen')",
          "200:     )",
          "201:     UPDATE w1 SET z=v FROM data WHERE (1+w*2+x)=k;",
          "202:   }",
          "204:   do_execsql_test 1.%TN%.13 {",
          "205:     SELECT * FROM w1;",
          "206:     SELECT * FROM log;",
          "207:   } {",
          "208:     0 0 i eight   0 1 xii twelve   1 0 v fourteen   1 1 iv sixteen",
          "209:     thirty->thirteen  v->v",
          "210:     thirteen->fourteen  v->v",
          "211:     four->fifteen  iv->iv",
          "212:     fifteen->sixteen  iv->iv",
          "213:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     5 five 6 six 7 seven 8 eight",
          "166:   }",
          "168: }]",
          "169: }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:   do_catchsql_test 2.%TN%.5 {",
          "256:     UPDATE x1 SET b=b||b ORDER BY b;",
          "257:   } {1 {ORDER BY without LIMIT on UPDATE}}",
          "258:   do_catchsql_test 2.%TN%.6 {",
          "259:     UPDATE x1 SET b=b||y FROM data1 WHERE a=x ORDER BY b;",
          "260:   } {1 {ORDER BY without LIMIT on UPDATE}}",
          "262:   #-----------------------------------------------------------------------",
          "264:   do_execsql_test 2.%TN%.6 {",
          "265:     DROP TABLE x1;",
          "266:     CREATE TABLE x1(u, v, b, PRIMARY KEY(u, v)) %WO%;",
          "267:     INSERT INTO x1 VALUES",
          "268:         (0, 1, 'one'), (1, 0, 'two'), (1, 1, 'three'), (2, 0, 'four'),",
          "269:         (2, 1, 'five'), (3, 0, 'six'), (3, 1, 'seven'), (4, 0, 'eight');",
          "270:   }",
          "272:   do_execsql_test 2.%TN%.7 {",
          "273:     UPDATE x1 SET b=y FROM data1 WHERE (u*2+v)=x ORDER BY u, v LIMIT 3;",
          "274:     SELECT * FROM x1;",
          "275:   } {",
          "276:     0 1 eleven 1 0 twelve 1 1 thirteen 2 0 four",
          "277:     2 1 five 3 0 six 3 1 seven 4 0 eight",
          "278:   }",
          "280:   do_execsql_test 2.%TN%.8 {",
          "281:     UPDATE x1 SET b=b||y FROM data1 WHERE (u*2+v)=x ORDER BY b LIMIT 3;",
          "282:     SELECT * FROM x1;",
          "283:   } {",
          "284:     0 1 eleveneleven 1 0 twelve 1 1 thirteenthirteen 2 0 fourfourteen",
          "285:     2 1 five  3 0 six 3 1 seven 4 0 eight",
          "286:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "070ae3beeabde3cb0538dad323d15a9b0411e6a0",
      "candidate_info": {
        "commit_hash": "070ae3beeabde3cb0538dad323d15a9b0411e6a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/070ae3beeabde3cb0538dad323d15a9b0411e6a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/delete.c",
          "src/sqliteInt.h"
        ],
        "message": "Break out the test for writable shadow tables into a separate subroutine.\n\nFossilOrigin-Name: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "",
          "[Removed Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "",
          "[Added Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)!=0",
          "35:         && sqlite3ReadOnlyShadowTables(pParse->db)",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "[Removed Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "",
          "[Added Lines]",
          "2901: int sqlite3ReadOnlyShadowTables(sqlite3 *db){",
          "2902: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2903:   if( (db->flags & SQLITE_Defensive)!=0",
          "2904:    && db->pVtabCtx==0",
          "2905:    && db->nVdbeExec==0",
          "2906:   ){",
          "2907:     return 1;",
          "2908:   }",
          "2909: #endif",
          "2910:   return 0;",
          "2911: }",
          "2916: static int tableMayNotBeDropped(sqlite3 *db, Table *pTab){",
          "2922:   if( (pTab->tabFlags & TF_Shadow)!=0 && sqlite3ReadOnlyShadowTables(db) ){",
          "2923:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2979:     }",
          "2980:   }",
          "2981: #endif",
          "2983:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2984:     goto exit_drop_table;",
          "2985:   }",
          "",
          "[Removed Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "[Added Lines]",
          "2997:   if( tableMayNotBeDropped(db, pTab) ){",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "78: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "[Added Lines]",
          "73:   return sqlite3ReadOnlyShadowTables(db);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4547:    );",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4551: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4552: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e52a9c611d6db4b1436bb42886ceebe3d5de7ec",
      "candidate_info": {
        "commit_hash": "2e52a9c611d6db4b1436bb42886ceebe3d5de7ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e52a9c611d6db4b1436bb42886ceebe3d5de7ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/fuzzdata8.db",
          "test/select4.test"
        ],
        "message": "In the push-down optimization, do not substitute columns that have previously been identified as being constant by the propagate-constants optimization. Fix for ticket [51166be0159fd2ce]\n\nFossilOrigin-Name: 70c44811d12f540d4ec1c29dedbe999cf79b82e326a8712ae2fa0725d6bd8a65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select4.test||test/select4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98d56b4a34fddcbaecd953a045ae0270b4d78c1edf34cc73522fb4e12743af80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:   ){",
          "3477:     pExpr->iRightJoinTable = pSubst->iNewTable;",
          "3478:   }",
          "3480:     if( pExpr->iColumn<0 ){",
          "3481:       pExpr->op = TK_NULL;",
          "3482:     }else{",
          "",
          "[Removed Lines]",
          "3479:   if( pExpr->op==TK_COLUMN && pExpr->iTable==pSubst->iTable ){",
          "",
          "[Added Lines]",
          "3479:   if( pExpr->op==TK_COLUMN",
          "3480:    && pExpr->iTable==pSubst->iTable",
          "3481:    && !ExprHasProperty(pExpr, EP_FixedCol)",
          "3482:   ){",
          "",
          "---------------"
        ],
        "test/select4.test||test/select4.test": [
          "File: test/select4.test -> test/select4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:   ORDER BY +x;",
          "1006: } {1 {LIMIT clause should come after UNION not before}}",
          "1010: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008: # 2020-04-03 ticket 51166be0159fd2ce from Yong Heng.",
          "1009: # Adverse interaction between the constant propagation and push-down",
          "1010: # optimizations.",
          "1011: #",
          "1012: reset_db",
          "1013: do_execsql_test select4-18.1 {",
          "1014:   CREATE VIEW v0(v0) AS WITH v0 AS(SELECT 0 v0) SELECT(SELECT min(v0) OVER()) FROM v0 GROUP BY v0;",
          "1015:   SELECT *FROM v0 v1 JOIN v0 USING(v0) WHERE datetime(v0) = (v0.v0)AND v0 = 10;",
          "1016: } {}",
          "1017: do_execsql_test select4-18.2 {",
          "1018:   CREATE VIEW t1(aa) AS",
          "1019:      WITH t2(bb) AS (SELECT 123)",
          "1020:      SELECT (SELECT min(bb) OVER()) FROM t2 GROUP BY bb;",
          "1021:   SELECT * FROM t1;",
          "1022: } {123}",
          "1023: do_execsql_test select4-18.3 {",
          "1024:   SELECT * FROM t1 AS z1 JOIN t1 AS z2 USING(aa)",
          "1025:    WHERE abs(z1.aa)=z2.aa AND z1.aa=123;",
          "1026: } {123}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
      "candidate_info": {
        "commit_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the rtree extension, actively suppress extra tokens on the column names, and be pedantic about column affinities.  Ticket [367a86e28859f1ff]\n\nFossilOrigin-Name: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test||ext/rtree/rtree2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3661:   return rc;",
          "3662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668: static int rtreeTokenLength(const char *z){",
          "3669:   int dummy = 0;",
          "3670:   return sqlite3GetToken((const unsigned char*)z,&dummy);",
          "3671: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3732:       pRtree->nAux++;",
          "3734:     }else if( pRtree->nAux>0 ){",
          "3735:       break;",
          "3736:     }else{",
          "3737:       pRtree->nDim2++;",
          "3739:     }",
          "3740:   }",
          "3741:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "3731:     if( argv[ii][0]=='+' ){",
          "3733:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]+1);",
          "3738:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]);",
          "",
          "[Added Lines]",
          "3738:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%.*s INT\",",
          "3739:                       rtreeTokenLength(argv[3]), argv[3]);",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "3749:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   REINDEX;",
          "706: } {}",
          "708: expand_all_sql db",
          "709: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: reset_db",
          "709: do_execsql_test 18.0 {",
          "710:   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
          "711:   INSERT INTO rt0(c0,c1,c2) VALUES(9,2,3);",
          "712:   SELECT c0 FROM rt0 WHERE rt0.c1 > '-1';",
          "713:   SELECT rt0.c1 > '-1' FROM rt0;",
          "714: } {9 1}",
          "",
          "---------------"
        ],
        "ext/rtree/rtree2.test||ext/rtree/rtree2.test": [
          "File: ext/rtree/rtree2.test -> ext/rtree/rtree2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: }",
          "35: foreach module {rtree_i32 rtree} {",
          "36:   for {set nDim 1} {$nDim <= 5} {incr nDim} {",
          "38:     do_test rtree2-$module.$nDim.1 {",
          "39:       set cols [list]",
          "40:       foreach c [list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9] {",
          "42:       }",
          "43:       set cols [join [lrange $cols 0 [expr {$nDim*2-1}]] \", \"]",
          "44:       execsql \"",
          "",
          "[Removed Lines]",
          "41:         lappend cols \"$c REAL\"",
          "",
          "[Added Lines]",
          "36:   if {$module==\"rtree_i32\"} {set etype INT} {set etype REAL}",
          "42:         lappend cols \"$c $etype\"",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdfd45aef3c8ed91278f4bddff6b421472e49f10",
      "candidate_info": {
        "commit_hash": "fdfd45aef3c8ed91278f4bddff6b421472e49f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fdfd45aef3c8ed91278f4bddff6b421472e49f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/whereL.test"
        ],
        "message": "Fix problems in the constant propagation optimization that were introduced by check-in [1c3e5c20a9e6f501].  Fix for ticket [1dcb4d44964846ad]\n\nFossilOrigin-Name: c9a8defcef35a1fee6bcbb88252a2d0076dabe8381b0128b2257b5b5cc494e0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/whereL.test||test/whereL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0c6b8bdb76fcd4f08c89ff20dce6a33ef3c11752e1e919fec5c4e7d423c4b93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4166:   assert( pColumn->op==TK_COLUMN );",
          "4167:   assert( sqlite3ExprIsConstant(pValue) );",
          "4172:   if( !sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr)) ){",
          "4173:     return;",
          "4174:   }",
          "",
          "[Removed Lines]",
          "4169:   if( !ExprHasProperty(pValue, EP_FixedCol) && sqlite3ExprAffinity(pValue)!=0 ){",
          "4170:     return;",
          "4171:   }",
          "",
          "[Added Lines]",
          "4169:   if( ExprHasProperty(pColumn, EP_FixedCol) ) return;",
          "4170:   if( sqlite3ExprAffinity(pValue)!=0 ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4191:   if( pConst->apExpr==0 ){",
          "4192:     pConst->nConst = 0;",
          "4193:   }else{",
          "4197:     pConst->apExpr[pConst->nConst*2-2] = pColumn;",
          "4198:     pConst->apExpr[pConst->nConst*2-1] = pValue;",
          "4199:   }",
          "",
          "[Removed Lines]",
          "4194:     if( ExprHasProperty(pValue, EP_FixedCol) ){",
          "4195:       pValue = pValue->pLeft;",
          "4196:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/whereL.test||test/whereL.test": [
          "File: test/whereL.test -> test/whereL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   SELECT 200, * FROM t0, v0 WHERE t0.c0 = 0 AND v0.c0 = t0.c0;",
          "145: } {}",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: # 2020-02-13: ticket 1dcb4d44964846ad",
          "148: # A problem introduced while making optimizations on the fixes above.",
          "149: #",
          "150: reset_db",
          "151: do_execsql_test 600 {",
          "152:   CREATE TABLE t1(x TEXT);",
          "153:   CREATE TABLE t2(y TEXT);",
          "154:   INSERT INTO t1 VALUES('good'),('bad');",
          "155:   INSERT INTO t2 VALUES('good'),('bad');",
          "156:   SELECT * FROM t1 JOIN t2 ON x=y",
          "157:    WHERE x='good' AND y='good';",
          "158: } {good good}",
          "",
          "---------------"
        ]
      }
    }
  ]
}