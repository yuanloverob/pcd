{
  "cve_id": "CVE-2014-3534",
  "cve_desc": "arch/s390/kernel/ptrace.c in the Linux kernel before 3.15.8 on the s390 platform does not properly restrict address-space control operations in PTRACE_POKEUSR_AREA requests, which allows local users to obtain read and write access to kernel memory locations, and consequently gain privileges, via a crafted application that makes a ptrace system call.",
  "repo": "torvalds/linux",
  "patch_hash": "dab6cf55f81a6e16b8147aed9a843e1691dcd318",
  "patch_info": {
    "commit_hash": "dab6cf55f81a6e16b8147aed9a843e1691dcd318",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/dab6cf55f81a6e16b8147aed9a843e1691dcd318",
    "files": [
      "arch/s390/kernel/ptrace.c"
    ],
    "message": "s390/ptrace: fix PSW mask check\n\nThe PSW mask check of the PTRACE_POKEUSR_AREA command is incorrect.\nThe PSW_MASK_USER define contains the PSW_MASK_ASC bits, the ptrace\ninterface accepts all combinations for the address-space-control\nbits. To protect the kernel space the PSW mask check in ptrace needs\nto reject the address-space-control bit combination for home space.\n\nFixes CVE-2014-3534\n\nCc: stable@vger.kernel.org\nSigned-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>",
    "before_after_code_files": [
      "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c"
    ]
  },
  "patch_diff": {
    "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c": [
      "File: arch/s390/kernel/ptrace.c -> arch/s390/kernel/ptrace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "334:    unsigned long mask = PSW_MASK_USER;",
      "336:    mask |= is_ri_task(child) ? PSW_MASK_RI : 0;",
      "338:     return -EINVAL;",
      "339:    if ((data & PSW_MASK_EA) && !(data & PSW_MASK_BA))",
      "340:     return -EINVAL;",
      "341:   }",
      "",
      "[Removed Lines]",
      "337:    if ((data & ~mask) != PSW_USER_BITS)",
      "",
      "[Added Lines]",
      "337:    if ((data ^ PSW_USER_BITS) & ~mask)",
      "339:     return -EINVAL;",
      "340:    if ((data & PSW_MASK_ASC) == PSW_ASC_HOME)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "673:    mask |= is_ri_task(child) ? PSW32_MASK_RI : 0;",
      "677:     return -EINVAL;",
      "678:    regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |",
      "679:     (regs->psw.mask & PSW_MASK_BA) |",
      "680:     (__u64)(tmp & mask) << 32;",
      "",
      "[Removed Lines]",
      "675:    if ((tmp & ~mask) != PSW32_USER_BITS)",
      "",
      "[Added Lines]",
      "680:    if ((tmp ^ PSW32_USER_BITS) & ~mask)",
      "683:    if ((data & PSW32_MASK_ASC) == PSW32_ASC_HOME)",
      "685:     return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ebf250dabbae83ad875f0dda5a108503cf78f3b",
      "candidate_info": {
        "commit_hash": "5ebf250dabbae83ad875f0dda5a108503cf78f3b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5ebf250dabbae83ad875f0dda5a108503cf78f3b",
        "files": [
          "arch/s390/include/asm/compat.h",
          "arch/s390/include/asm/processor.h",
          "arch/s390/include/uapi/asm/ptrace.h",
          "arch/s390/kernel/compat_signal.c",
          "arch/s390/kernel/ptrace.c",
          "arch/s390/kernel/signal.c"
        ],
        "message": "s390: fix handling of runtime instrumentation psw bit\n\nFix the following bugs:\n- When returning from a signal the signal handler copies the saved psw mask\n  from user space and uses parts of it. Especially it restores the RI bit\n  unconditionally. If however the machine doesn't support RI, or RI is\n  disabled for the task, the last lpswe instruction which returns to user\n  space will generate a specification exception.\n  To fix this check if the RI bit is allowed to be set and kill the task\n  if not.\n- In the compat mode signal handler code the RI bit of the psw mask gets\n  propagated to the mask of the return psw: if user space enables RI in the\n  signal handler, RI will also be enabled after the signal handler is\n  finished.\n  This is a different behaviour than with 64 bit tasks. So change this to\n  match the 64 bit semantics, which restores the original RI bit value.\n- Fix similar oddities within the ptrace code as well.\n\nReviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>\nSigned-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>\nSigned-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>",
        "before_after_code_files": [
          "arch/s390/include/asm/compat.h||arch/s390/include/asm/compat.h",
          "arch/s390/include/asm/processor.h||arch/s390/include/asm/processor.h",
          "arch/s390/include/uapi/asm/ptrace.h||arch/s390/include/uapi/asm/ptrace.h",
          "arch/s390/kernel/compat_signal.c||arch/s390/kernel/compat_signal.c",
          "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c",
          "arch/s390/kernel/signal.c||arch/s390/kernel/signal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c"
          ],
          "candidate": [
            "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/s390/include/asm/compat.h||arch/s390/include/asm/compat.h": [
          "File: arch/s390/include/asm/compat.h -> arch/s390/include/asm/compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #define PSW32_MASK_ASC  0x0000C000UL",
          "23: #define PSW32_MASK_CC  0x00003000UL",
          "24: #define PSW32_MASK_PM  0x00000f00UL",
          "26: #define PSW32_MASK_USER  0x0000FF00UL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #define PSW32_MASK_RI  0x00000080UL",
          "",
          "---------------"
        ],
        "arch/s390/include/asm/processor.h||arch/s390/include/asm/processor.h": [
          "File: arch/s390/include/asm/processor.h -> arch/s390/include/asm/processor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: #define KSTK_EIP(tsk) (task_pt_regs(tsk)->psw.addr)",
          "176: #define KSTK_ESP(tsk) (task_pt_regs(tsk)->gprs[15])",
          "178: static inline unsigned short stap(void)",
          "179: {",
          "180:  unsigned short cpu_address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: #define is_ri_task(tsk) (!!(tsk)->thread.ri_cb)",
          "",
          "---------------"
        ],
        "arch/s390/include/uapi/asm/ptrace.h||arch/s390/include/uapi/asm/ptrace.h": [
          "File: arch/s390/include/uapi/asm/ptrace.h -> arch/s390/include/uapi/asm/ptrace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: #define PSW_MASK_EA  0x0000000100000000UL",
          "264: #define PSW_MASK_BA  0x0000000080000000UL",
          "268: #define PSW_ADDR_AMODE  0x0000000000000000UL",
          "269: #define PSW_ADDR_INSN  0xFFFFFFFFFFFFFFFFUL",
          "",
          "[Removed Lines]",
          "266: #define PSW_MASK_USER  0x0000FF8180000000UL",
          "",
          "[Added Lines]",
          "266: #define PSW_MASK_USER  0x0000FF0180000000UL",
          "",
          "---------------"
        ],
        "arch/s390/kernel/compat_signal.c||arch/s390/kernel/compat_signal.c": [
          "File: arch/s390/kernel/compat_signal.c -> arch/s390/kernel/compat_signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:  _sigregs32 user_sregs;",
          "157:  int i;",
          "161:  user_sregs.regs.psw.addr = (__u32) regs->psw.addr |",
          "162:   (__u32)(regs->psw.mask & PSW_MASK_BA);",
          "163:  for (i = 0; i < NUM_GPRS; i++)",
          "",
          "[Removed Lines]",
          "159:  user_sregs.regs.psw.mask = psw32_user_bits |",
          "160:   ((__u32)(regs->psw.mask >> 32) & PSW32_MASK_USER);",
          "",
          "[Added Lines]",
          "159:  user_sregs.regs.psw.mask = (__u32)(regs->psw.mask >> 32);",
          "160:  user_sregs.regs.psw.mask &= PSW32_MASK_USER | PSW32_MASK_RI;",
          "161:  user_sregs.regs.psw.mask |= psw32_user_bits;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:  if (__copy_from_user(&user_sregs, &sregs->regs, sizeof(user_sregs)))",
          "186:   return -EFAULT;",
          "189:  if (restore_fp_ctl(&user_sregs.fpregs.fpc))",
          "190:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:  if (!is_ri_task(current) && (user_sregs.regs.psw.mask & PSW32_MASK_RI))",
          "190:   return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:  regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |",
          "194:   (__u64)(user_sregs.regs.psw.mask & PSW32_MASK_USER) << 32 |",
          "195:   (__u64)(user_sregs.regs.psw.addr & PSW32_ADDR_AMODE);",
          "197:  if ((regs->psw.mask & PSW_MASK_ASC) == PSW_ASC_HOME)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   (__u64)(user_sregs.regs.psw.mask & PSW32_MASK_RI) << 32 |",
          "",
          "---------------"
        ],
        "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c": [
          "File: arch/s390/kernel/ptrace.c -> arch/s390/kernel/ptrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   tmp = *(addr_t *)((addr_t) &task_pt_regs(child)->psw + addr);",
          "205:  } else if (addr < (addr_t) &dummy->regs.orig_gpr2) {",
          "",
          "[Removed Lines]",
          "201:   if (addr == (addr_t) &dummy->regs.psw.mask)",
          "203:    tmp = PSW_USER_BITS | (tmp & PSW_MASK_USER);",
          "",
          "[Added Lines]",
          "201:   if (addr == (addr_t) &dummy->regs.psw.mask) {",
          "203:    tmp &= PSW_MASK_USER | PSW_MASK_RI;",
          "204:    tmp |= PSW_USER_BITS;",
          "205:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:  } else if (addr < (addr_t) (&dummy->regs.orig_gpr2)) {",
          "",
          "[Removed Lines]",
          "323:   if (addr == (addr_t) &dummy->regs.psw.mask &&",
          "324:       ((data & ~PSW_MASK_USER) != PSW_USER_BITS ||",
          "325:        ((data & PSW_MASK_EA) && !(data & PSW_MASK_BA))))",
          "327:    return -EINVAL;",
          "",
          "[Added Lines]",
          "325:   if (addr == (addr_t) &dummy->regs.psw.mask) {",
          "326:    unsigned long mask = PSW_MASK_USER;",
          "328:    mask |= is_ri_task(child) ? PSW_MASK_RI : 0;",
          "329:    if ((data & ~mask) != PSW_USER_BITS)",
          "330:     return -EINVAL;",
          "331:    if ((data & PSW_MASK_EA) && !(data & PSW_MASK_BA))",
          "332:     return -EINVAL;",
          "333:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "556:   if (addr == (addr_t) &dummy32->regs.psw.mask) {",
          "558:    tmp = (__u32)(regs->psw.mask >> 32);",
          "560:   } else if (addr == (addr_t) &dummy32->regs.psw.addr) {",
          "562:    tmp = (__u32) regs->psw.addr |",
          "",
          "[Removed Lines]",
          "559:    tmp = psw32_user_bits | (tmp & PSW32_MASK_USER);",
          "",
          "[Added Lines]",
          "565:    tmp &= PSW32_MASK_USER | PSW32_MASK_RI;",
          "566:    tmp |= psw32_user_bits;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "655:   if (addr == (addr_t) &dummy32->regs.psw.mask) {",
          "659:     return -EINVAL;",
          "660:    regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |",
          "661:     (regs->psw.mask & PSW_MASK_BA) |",
          "663:   } else if (addr == (addr_t) &dummy32->regs.psw.addr) {",
          "665:    regs->psw.addr = (__u64) tmp & PSW32_ADDR_INSN;",
          "",
          "[Removed Lines]",
          "657:    if ((tmp & ~PSW32_MASK_USER) != psw32_user_bits)",
          "662:     (__u64)(tmp & PSW32_MASK_USER) << 32;",
          "",
          "[Added Lines]",
          "663:    __u32 mask = PSW32_MASK_USER;",
          "665:    mask |= is_ri_task(child) ? PSW32_MASK_RI : 0;",
          "667:    if ((tmp & ~mask) != psw32_user_bits)",
          "672:     (__u64)(tmp & mask) << 32;",
          "",
          "---------------"
        ],
        "arch/s390/kernel/signal.c||arch/s390/kernel/signal.c": [
          "File: arch/s390/kernel/signal.c -> arch/s390/kernel/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  user_sregs.regs.psw.mask = PSW_USER_BITS |",
          "62:  user_sregs.regs.psw.addr = regs->psw.addr;",
          "63:  memcpy(&user_sregs.regs.gprs, &regs->gprs, sizeof(sregs->regs.gprs));",
          "64:  memcpy(&user_sregs.regs.acrs, current->thread.acrs,",
          "",
          "[Removed Lines]",
          "61:   (regs->psw.mask & PSW_MASK_USER);",
          "",
          "[Added Lines]",
          "61:   (regs->psw.mask & (PSW_MASK_USER | PSW_MASK_RI));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  if (__copy_from_user(&user_sregs, sregs, sizeof(user_sregs)))",
          "87:   return -EFAULT;",
          "90:  if (restore_fp_ctl(&user_sregs.fpregs.fpc))",
          "91:   return -EINVAL;",
          "94:  regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |",
          "97:  if ((regs->psw.mask & PSW_MASK_ASC) == PSW_ASC_HOME)",
          "98:   regs->psw.mask = PSW_ASC_PRIMARY |",
          "",
          "[Removed Lines]",
          "95:   (user_sregs.regs.psw.mask & PSW_MASK_USER);",
          "",
          "[Added Lines]",
          "89:  if (!is_ri_task(current) && (user_sregs.regs.psw.mask & PSW_MASK_RI))",
          "90:   return -EINVAL;",
          "98:   (user_sregs.regs.psw.mask & (PSW_MASK_USER | PSW_MASK_RI));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e258d719ff28ecc7a048eb8f78380e68c4b3a3f0",
      "candidate_info": {
        "commit_hash": "e258d719ff28ecc7a048eb8f78380e68c4b3a3f0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e258d719ff28ecc7a048eb8f78380e68c4b3a3f0",
        "files": [
          "arch/s390/include/asm/mmu_context.h",
          "arch/s390/include/asm/processor.h",
          "arch/s390/include/asm/ptrace.h",
          "arch/s390/include/asm/setup.h",
          "arch/s390/include/asm/uaccess.h",
          "arch/s390/kernel/compat_signal.c",
          "arch/s390/kernel/ipl.c",
          "arch/s390/kernel/process.c",
          "arch/s390/kernel/ptrace.c",
          "arch/s390/kernel/runtime_instr.c",
          "arch/s390/kernel/setup.c",
          "arch/s390/kernel/signal.c",
          "arch/s390/kernel/smp.c",
          "arch/s390/kernel/vdso.c",
          "arch/s390/kernel/vtime.c",
          "arch/s390/lib/Makefile",
          "arch/s390/lib/uaccess_mvcos.c",
          "arch/s390/lib/uaccess_pt.c",
          "arch/s390/lib/uaccess_std.c",
          "arch/s390/mm/fault.c",
          "arch/s390/mm/pgtable.c"
        ],
        "message": "s390/uaccess: always run the kernel in home space\n\nSimplify the uaccess code by removing the user_mode=home option.\nThe kernel will now always run in the home space mode.\n\nSigned-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>",
        "before_after_code_files": [
          "arch/s390/include/asm/mmu_context.h||arch/s390/include/asm/mmu_context.h",
          "arch/s390/include/asm/processor.h||arch/s390/include/asm/processor.h",
          "arch/s390/include/asm/ptrace.h||arch/s390/include/asm/ptrace.h",
          "arch/s390/include/asm/setup.h||arch/s390/include/asm/setup.h",
          "arch/s390/include/asm/uaccess.h||arch/s390/include/asm/uaccess.h",
          "arch/s390/kernel/compat_signal.c||arch/s390/kernel/compat_signal.c",
          "arch/s390/kernel/ipl.c||arch/s390/kernel/ipl.c",
          "arch/s390/kernel/process.c||arch/s390/kernel/process.c",
          "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c",
          "arch/s390/kernel/runtime_instr.c||arch/s390/kernel/runtime_instr.c",
          "arch/s390/kernel/setup.c||arch/s390/kernel/setup.c",
          "arch/s390/kernel/signal.c||arch/s390/kernel/signal.c",
          "arch/s390/kernel/smp.c||arch/s390/kernel/smp.c",
          "arch/s390/kernel/vdso.c||arch/s390/kernel/vdso.c",
          "arch/s390/kernel/vtime.c||arch/s390/kernel/vtime.c",
          "arch/s390/lib/uaccess_mvcos.c||arch/s390/lib/uaccess_mvcos.c",
          "arch/s390/lib/uaccess_pt.c||arch/s390/lib/uaccess_pt.c",
          "arch/s390/lib/uaccess_std.c||arch/s390/lib/uaccess_std.c",
          "arch/s390/mm/fault.c||arch/s390/mm/fault.c",
          "arch/s390/mm/pgtable.c||arch/s390/mm/pgtable.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c"
          ],
          "candidate": [
            "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/s390/include/asm/mmu_context.h||arch/s390/include/asm/mmu_context.h": [
          "File: arch/s390/include/asm/mmu_context.h -> arch/s390/include/asm/mmu_context.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  pgd_t *pgd = mm->pgd;",
          "42:  S390_lowcore.user_asce = mm->context.asce_bits | __pa(pgd);",
          "51:  set_fs(current->thread.mm_segment);",
          "52: }",
          "",
          "[Removed Lines]",
          "43:  if (s390_user_mode != HOME_SPACE_MODE) {",
          "45:   asm volatile(LCTL_OPCODE\" 1,1,%0\\n\"",
          "46:         : : \"m\" (S390_lowcore.user_asce) );",
          "47:  } else",
          "49:   asm volatile(LCTL_OPCODE\" 13,13,%0\"",
          "50:         : : \"m\" (S390_lowcore.user_asce) );",
          "",
          "[Added Lines]",
          "44:  asm volatile(LCTL_OPCODE\" 1,1,%0\\n\" : : \"m\" (S390_lowcore.user_asce));",
          "",
          "---------------"
        ],
        "arch/s390/include/asm/processor.h||arch/s390/include/asm/processor.h": [
          "File: arch/s390/include/asm/processor.h -> arch/s390/include/asm/processor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: #define start_thread(regs, new_psw, new_stackp) do {   \\",
          "138:  regs->psw.addr = new_psw | PSW_ADDR_AMODE;   \\",
          "139:  regs->gprs[15] = new_stackp;     \\",
          "140:  execve_tail();       \\",
          "141: } while (0)",
          "143: #define start_thread31(regs, new_psw, new_stackp) do {   \\",
          "145:  regs->psw.addr = new_psw | PSW_ADDR_AMODE;   \\",
          "146:  regs->gprs[15] = new_stackp;     \\",
          "147:  __tlb_flush_mm(current->mm);     \\",
          "",
          "[Removed Lines]",
          "137:  regs->psw.mask = psw_user_bits | PSW_MASK_EA | PSW_MASK_BA; \\",
          "144:  regs->psw.mask = psw_user_bits | PSW_MASK_BA;   \\",
          "",
          "[Added Lines]",
          "137:  regs->psw.mask = PSW_USER_BITS | PSW_MASK_EA | PSW_MASK_BA; \\",
          "144:  regs->psw.mask = PSW_USER_BITS | PSW_MASK_BA;   \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343: }",
          "345: #define local_mcck_enable() \\",
          "347: #define local_mcck_disable() \\",
          "",
          "[Removed Lines]",
          "346:  __set_psw_mask(psw_kernel_bits | PSW_MASK_DAT | PSW_MASK_MCHECK)",
          "348:  __set_psw_mask(psw_kernel_bits | PSW_MASK_DAT)",
          "",
          "[Added Lines]",
          "346:  __set_psw_mask(PSW_KERNEL_BITS | PSW_MASK_DAT | PSW_MASK_MCHECK)",
          "348:  __set_psw_mask(PSW_KERNEL_BITS | PSW_MASK_DAT)",
          "",
          "---------------"
        ],
        "arch/s390/include/asm/ptrace.h||arch/s390/include/asm/ptrace.h": [
          "File: arch/s390/include/asm/ptrace.h -> arch/s390/include/asm/ptrace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #ifndef __ASSEMBLY__",
          "",
          "[Removed Lines]",
          "13: extern long psw_kernel_bits;",
          "14: extern long psw_user_bits;",
          "",
          "[Added Lines]",
          "13: #define PSW_KERNEL_BITS (PSW_DEFAULT_KEY | PSW_MASK_BASE | PSW_ASC_HOME | \\",
          "14:     PSW_MASK_EA | PSW_MASK_BA)",
          "15: #define PSW_USER_BITS (PSW_MASK_DAT | PSW_MASK_IO | PSW_MASK_EXT | \\",
          "16:     PSW_DEFAULT_KEY | PSW_MASK_BASE | PSW_MASK_MCHECK | \\",
          "17:     PSW_MASK_PSTATE | PSW_ASC_PRIMARY)",
          "",
          "---------------"
        ],
        "arch/s390/include/asm/setup.h||arch/s390/include/asm/setup.h": [
          "File: arch/s390/include/asm/setup.h -> arch/s390/include/asm/setup.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: void create_mem_hole(struct mem_chunk mem_chunk[], unsigned long addr,",
          "49:        unsigned long size);",
          "",
          "[Removed Lines]",
          "51: #define PRIMARY_SPACE_MODE 0",
          "52: #define ACCESS_REGISTER_MODE 1",
          "53: #define SECONDARY_SPACE_MODE 2",
          "54: #define HOME_SPACE_MODE  3",
          "56: extern unsigned int s390_user_mode;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/include/asm/uaccess.h||arch/s390/include/asm/uaccess.h": [
          "File: arch/s390/include/asm/uaccess.h -> arch/s390/include/asm/uaccess.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: struct uaccess_ops {",
          "96:  size_t (*copy_from_user)(size_t, const void __user *, void *);",
          "98:  size_t (*copy_to_user)(size_t, void __user *, const void *);",
          "100:  size_t (*copy_in_user)(size_t, void __user *, const void __user *);",
          "101:  size_t (*clear_user)(size_t, void __user *);",
          "102:  size_t (*strnlen_user)(size_t, const char __user *);",
          "",
          "[Removed Lines]",
          "97:  size_t (*copy_from_user_small)(size_t, const void __user *, void *);",
          "99:  size_t (*copy_to_user_small)(size_t, void __user *, const void *);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106: };",
          "108: extern struct uaccess_ops uaccess;",
          "110: extern struct uaccess_ops uaccess_mvcos;",
          "112: extern struct uaccess_ops uaccess_pt;",
          "114: extern int __handle_fault(unsigned long, unsigned long, int);",
          "116: static inline int __put_user_fn(size_t size, void __user *ptr, void *x)",
          "117: {",
          "119:  return size ? -EFAULT : size;",
          "120: }",
          "122: static inline int __get_user_fn(size_t size, const void __user *ptr, void *x)",
          "123: {",
          "125:  return size ? -EFAULT : size;",
          "126: }",
          "",
          "[Removed Lines]",
          "109: extern struct uaccess_ops uaccess_std;",
          "111: extern struct uaccess_ops uaccess_mvcos_switch;",
          "118:  size = uaccess.copy_to_user_small(size, ptr, x);",
          "124:  size = uaccess.copy_from_user_small(size, ptr, x);",
          "",
          "[Added Lines]",
          "114:  size = uaccess.copy_to_user(size, ptr, x);",
          "120:  size = uaccess.copy_from_user(size, ptr, x);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226: static inline unsigned long __must_check",
          "227: __copy_to_user(void __user *to, const void *from, unsigned long n)",
          "228: {",
          "233: }",
          "235: #define __copy_to_user_inatomic __copy_to_user",
          "",
          "[Removed Lines]",
          "229:  if (__builtin_constant_p(n) && (n <= 256))",
          "230:   return uaccess.copy_to_user_small(n, to, from);",
          "231:  else",
          "232:   return uaccess.copy_to_user(n, to, from);",
          "",
          "[Added Lines]",
          "225:  return uaccess.copy_to_user(n, to, from);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275: static inline unsigned long __must_check",
          "276: __copy_from_user(void *to, const void __user *from, unsigned long n)",
          "277: {",
          "282: }",
          "284: extern void copy_from_user_overflow(void)",
          "",
          "[Removed Lines]",
          "278:  if (__builtin_constant_p(n) && (n <= 256))",
          "279:   return uaccess.copy_from_user_small(n, from, to);",
          "280:  else",
          "281:   return uaccess.copy_from_user(n, from, to);",
          "",
          "[Added Lines]",
          "271:  return uaccess.copy_from_user(n, from, to);",
          "",
          "---------------"
        ],
        "arch/s390/kernel/compat_signal.c||arch/s390/kernel/compat_signal.c": [
          "File: arch/s390/kernel/compat_signal.c -> arch/s390/kernel/compat_signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   (__u64)(regs32.psw.mask & PSW32_MASK_USER) << 32 |",
          "189:   (__u64)(regs32.psw.addr & PSW32_ADDR_AMODE);",
          "193:    (regs->psw.mask & ~PSW_MASK_ASC);",
          "194:  regs->psw.addr = (__u64)(regs32.psw.addr & PSW32_ADDR_INSN);",
          "195:  for (i = 0; i < NUM_GPRS; i++)",
          "",
          "[Removed Lines]",
          "191:  if ((regs->psw.mask & PSW_MASK_ASC) >= (psw_kernel_bits & PSW_MASK_ASC))",
          "192:   regs->psw.mask = (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "191:  if ((regs->psw.mask & PSW_MASK_ASC) == PSW_ASC_HOME)",
          "192:   regs->psw.mask = PSW_ASC_PRIMARY |",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:  regs->gprs[15] = (__force __u64) frame;",
          "350:  regs->psw.mask = PSW_MASK_BA |",
          "352:   (regs->psw.mask & ~PSW_MASK_ASC);",
          "353:  regs->psw.addr = (__force __u64) ka->sa.sa_handler;",
          "",
          "[Removed Lines]",
          "351:   (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "351:   (PSW_USER_BITS & PSW_MASK_ASC) |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:  regs->gprs[15] = (__force __u64) frame;",
          "417:  regs->psw.mask = PSW_MASK_BA |",
          "419:   (regs->psw.mask & ~PSW_MASK_ASC);",
          "420:  regs->psw.addr = (__u64 __force) ka->sa.sa_handler;",
          "",
          "[Removed Lines]",
          "418:   (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "418:   (PSW_USER_BITS & PSW_MASK_ASC) |",
          "",
          "---------------"
        ],
        "arch/s390/kernel/ipl.c||arch/s390/kernel/ipl.c": [
          "File: arch/s390/kernel/ipl.c -> arch/s390/kernel/ipl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2051:  __ctl_clear_bit(0,28);",
          "2055:  S390_lowcore.mcck_new_psw.addr =",
          "2056:   PSW_ADDR_AMODE | (unsigned long) s390_base_mcck_handler;",
          "2060:  S390_lowcore.program_new_psw.addr =",
          "2061:   PSW_ADDR_AMODE | (unsigned long) s390_base_pgm_handler;",
          "",
          "[Removed Lines]",
          "2054:  S390_lowcore.mcck_new_psw.mask = psw_kernel_bits | PSW_MASK_DAT;",
          "2059:  S390_lowcore.program_new_psw.mask = psw_kernel_bits | PSW_MASK_DAT;",
          "",
          "[Added Lines]",
          "2054:  S390_lowcore.mcck_new_psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT;",
          "2059:  S390_lowcore.program_new_psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT;",
          "",
          "---------------"
        ],
        "arch/s390/kernel/process.c||arch/s390/kernel/process.c": [
          "File: arch/s390/kernel/process.c -> arch/s390/kernel/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  if (unlikely(p->flags & PF_KTHREAD)) {",
          "141:   memset(&frame->childregs, 0, sizeof(struct pt_regs));",
          "143:     PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;",
          "144:   frame->childregs.psw.addr = PSW_ADDR_AMODE |",
          "145:     (unsigned long) kernel_thread_starter;",
          "",
          "[Removed Lines]",
          "142:   frame->childregs.psw.mask = psw_kernel_bits | PSW_MASK_DAT |",
          "",
          "[Added Lines]",
          "142:   frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |",
          "",
          "---------------"
        ],
        "arch/s390/kernel/ptrace.c||arch/s390/kernel/ptrace.c": [
          "File: arch/s390/kernel/ptrace.c -> arch/s390/kernel/ptrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   tmp = *(addr_t *)((addr_t) &task_pt_regs(child)->psw + addr);",
          "201:   if (addr == (addr_t) &dummy->regs.psw.mask)",
          "205:  } else if (addr < (addr_t) &dummy->regs.orig_gpr2) {",
          "",
          "[Removed Lines]",
          "203:    tmp = psw_user_bits | (tmp & PSW_MASK_USER);",
          "",
          "[Added Lines]",
          "203:    tmp = PSW_USER_BITS | (tmp & PSW_MASK_USER);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   if (addr == (addr_t) &dummy->regs.psw.mask &&",
          "326:        ((data & PSW_MASK_EA) && !(data & PSW_MASK_BA))))",
          "328:    return -EINVAL;",
          "",
          "[Removed Lines]",
          "325:       ((data & ~PSW_MASK_USER) != psw_user_bits ||",
          "",
          "[Added Lines]",
          "325:       ((data & ~PSW_MASK_USER) != PSW_USER_BITS ||",
          "",
          "---------------"
        ],
        "arch/s390/kernel/runtime_instr.c||arch/s390/kernel/runtime_instr.c": [
          "File: arch/s390/kernel/runtime_instr.c -> arch/s390/kernel/runtime_instr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: static void init_runtime_instr_cb(struct runtime_instr_cb *cb)",
          "41: {",
          "42:  cb->buf_limit = 0xfff;",
          "45:  cb->int_requested = 1;",
          "46:  cb->pstate = 1;",
          "47:  cb->pstate_set_buf = 1;",
          "",
          "[Removed Lines]",
          "43:  if (s390_user_mode == HOME_SPACE_MODE)",
          "44:   cb->home_space = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/kernel/setup.c||arch/s390/kernel/setup.c": [
          "File: arch/s390/kernel/setup.c -> arch/s390/kernel/setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <asm/sclp.h>",
          "65: #include \"entry.h\"",
          "",
          "[Removed Lines]",
          "67: long psw_kernel_bits = PSW_DEFAULT_KEY | PSW_MASK_BASE | PSW_ASC_PRIMARY |",
          "68:      PSW_MASK_EA | PSW_MASK_BA;",
          "69: long psw_user_bits = PSW_MASK_DAT | PSW_MASK_IO | PSW_MASK_EXT |",
          "70:      PSW_DEFAULT_KEY | PSW_MASK_BASE | PSW_MASK_MCHECK |",
          "71:      PSW_MASK_PSTATE | PSW_ASC_HOME;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300: }",
          "301: early_param(\"vmalloc\", parse_vmalloc);",
          "317: static int __init early_parse_user_mode(char *p)",
          "318: {",
          "326: }",
          "327: early_param(\"user_mode\", early_parse_user_mode);",
          "340: void *restart_stack __attribute__((__section__(\".data\")));",
          "342: static void __init setup_lowcore(void)",
          "",
          "[Removed Lines]",
          "303: unsigned int s390_user_mode = PRIMARY_SPACE_MODE;",
          "304: EXPORT_SYMBOL_GPL(s390_user_mode);",
          "306: static void __init set_user_mode_primary(void)",
          "307: {",
          "308:  psw_kernel_bits = (psw_kernel_bits & ~PSW_MASK_ASC) | PSW_ASC_HOME;",
          "309:  psw_user_bits = (psw_user_bits & ~PSW_MASK_ASC) | PSW_ASC_PRIMARY;",
          "310: #ifdef CONFIG_COMPAT",
          "311:  psw32_user_bits =",
          "312:   (psw32_user_bits & ~PSW32_MASK_ASC) | PSW32_ASC_PRIMARY;",
          "313: #endif",
          "314:  uaccess = MACHINE_HAS_MVCOS ? uaccess_mvcos_switch : uaccess_pt;",
          "315: }",
          "319:  if (p && strcmp(p, \"primary\") == 0)",
          "320:   s390_user_mode = PRIMARY_SPACE_MODE;",
          "321:  else if (!p || strcmp(p, \"home\") == 0)",
          "322:   s390_user_mode = HOME_SPACE_MODE;",
          "323:  else",
          "324:   return 1;",
          "325:  return 0;",
          "329: static void __init setup_addressing_mode(void)",
          "330: {",
          "331:  if (s390_user_mode != PRIMARY_SPACE_MODE)",
          "332:   return;",
          "333:  set_user_mode_primary();",
          "334:  if (MACHINE_HAS_MVCOS)",
          "335:   pr_info(\"Address spaces switched, mvcos available\\n\");",
          "336:  else",
          "337:   pr_info(\"Address spaces switched, mvcos not available\\n\");",
          "338: }",
          "",
          "[Added Lines]",
          "299:  if (!p || strcmp(p, \"primary\") == 0)",
          "300:   return 0;",
          "301:  return 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:  BUILD_BUG_ON(sizeof(struct _lowcore) != LC_PAGES * 4096);",
          "350:  lc = __alloc_bootmem_low(LC_PAGES * PAGE_SIZE, LC_PAGES * PAGE_SIZE, 0);",
          "352:  lc->restart_psw.addr =",
          "353:   PSW_ADDR_AMODE | (unsigned long) restart_int_handler;",
          "355:   PSW_MASK_DAT | PSW_MASK_MCHECK;",
          "356:  lc->external_new_psw.addr =",
          "357:   PSW_ADDR_AMODE | (unsigned long) ext_int_handler;",
          "359:   PSW_MASK_DAT | PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;",
          "360:  lc->svc_new_psw.addr = PSW_ADDR_AMODE | (unsigned long) system_call;",
          "362:   PSW_MASK_DAT | PSW_MASK_MCHECK;",
          "363:  lc->program_new_psw.addr =",
          "364:   PSW_ADDR_AMODE | (unsigned long) pgm_check_handler;",
          "366:  lc->mcck_new_psw.addr =",
          "367:   PSW_ADDR_AMODE | (unsigned long) mcck_int_handler;",
          "369:   PSW_MASK_DAT | PSW_MASK_MCHECK;",
          "370:  lc->io_new_psw.addr = PSW_ADDR_AMODE | (unsigned long) io_int_handler;",
          "371:  lc->clock_comparator = -1ULL;",
          "",
          "[Removed Lines]",
          "351:  lc->restart_psw.mask = psw_kernel_bits;",
          "354:  lc->external_new_psw.mask = psw_kernel_bits |",
          "358:  lc->svc_new_psw.mask = psw_kernel_bits |",
          "361:  lc->program_new_psw.mask = psw_kernel_bits |",
          "365:  lc->mcck_new_psw.mask = psw_kernel_bits;",
          "368:  lc->io_new_psw.mask = psw_kernel_bits |",
          "",
          "[Added Lines]",
          "316:  lc->restart_psw.mask = PSW_KERNEL_BITS;",
          "319:  lc->external_new_psw.mask = PSW_KERNEL_BITS |",
          "323:  lc->svc_new_psw.mask = PSW_KERNEL_BITS |",
          "326:  lc->program_new_psw.mask = PSW_KERNEL_BITS |",
          "330:  lc->mcck_new_psw.mask = PSW_KERNEL_BITS;",
          "333:  lc->io_new_psw.mask = PSW_KERNEL_BITS |",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1043:  init_mm.end_data = (unsigned long) &_edata;",
          "1044:  init_mm.brk = (unsigned long) &_end;",
          "1051:  parse_early_param();",
          "1052:  detect_memory_layout(memory_chunk, memory_end);",
          "",
          "[Removed Lines]",
          "1046:  if (MACHINE_HAS_MVCOS)",
          "1047:   memcpy(&uaccess, &uaccess_mvcos, sizeof(uaccess));",
          "1048:  else",
          "1049:   memcpy(&uaccess, &uaccess_std, sizeof(uaccess));",
          "",
          "[Added Lines]",
          "1011:  uaccess = MACHINE_HAS_MVCOS ? uaccess_mvcos : uaccess_pt;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1054:  setup_ipl();",
          "1055:  reserve_oldmem();",
          "1056:  setup_memory_end();",
          "1058:  reserve_crashkernel();",
          "1059:  setup_memory();",
          "1060:  setup_resources();",
          "",
          "[Removed Lines]",
          "1057:  setup_addressing_mode();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/kernel/signal.c||arch/s390/kernel/signal.c": [
          "File: arch/s390/kernel/signal.c -> arch/s390/kernel/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   (regs->psw.mask & PSW_MASK_USER);",
          "62:  user_sregs.regs.psw.addr = regs->psw.addr;",
          "63:  memcpy(&user_sregs.regs.gprs, &regs->gprs, sizeof(sregs->regs.gprs));",
          "",
          "[Removed Lines]",
          "60:  user_sregs.regs.psw.mask = psw_user_bits |",
          "",
          "[Added Lines]",
          "60:  user_sregs.regs.psw.mask = PSW_USER_BITS |",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  err = __copy_from_user(&user_sregs, sregs, sizeof(_sigregs));",
          "86:  if (err)",
          "87:   return err;",
          "89:  regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |",
          "90:   (user_sregs.regs.psw.mask & PSW_MASK_USER);",
          "94:    (regs->psw.mask & ~PSW_MASK_ASC);",
          "96:  if (regs->psw.mask & PSW_MASK_EA)",
          "",
          "[Removed Lines]",
          "92:  if ((regs->psw.mask & PSW_MASK_ASC) >= (psw_kernel_bits & PSW_MASK_ASC))",
          "93:   regs->psw.mask = (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "92:  if ((regs->psw.mask & PSW_MASK_ASC) == PSW_ASC_HOME)",
          "93:   regs->psw.mask = PSW_ASC_PRIMARY |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:  regs->gprs[15] = (unsigned long) frame;",
          "226:  regs->psw.mask = PSW_MASK_EA | PSW_MASK_BA |",
          "228:   (regs->psw.mask & ~PSW_MASK_ASC);",
          "229:  regs->psw.addr = (unsigned long) ka->sa.sa_handler | PSW_ADDR_AMODE;",
          "",
          "[Removed Lines]",
          "227:   (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "227:   (PSW_USER_BITS & PSW_MASK_ASC) |",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:  regs->gprs[15] = (unsigned long) frame;",
          "297:  regs->psw.mask = PSW_MASK_EA | PSW_MASK_BA |",
          "299:   (regs->psw.mask & ~PSW_MASK_ASC);",
          "300:  regs->psw.addr = (unsigned long) ka->sa.sa_handler | PSW_ADDR_AMODE;",
          "",
          "[Removed Lines]",
          "298:   (psw_user_bits & PSW_MASK_ASC) |",
          "",
          "[Added Lines]",
          "298:   (PSW_USER_BITS & PSW_MASK_ASC) |",
          "",
          "---------------"
        ],
        "arch/s390/kernel/smp.c||arch/s390/kernel/smp.c": [
          "File: arch/s390/kernel/smp.c -> arch/s390/kernel/smp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  struct _lowcore *lc = lowcore_ptr[pcpu - pcpu_devices];",
          "284:  unsigned long source_cpu = stap();",
          "287:  if (pcpu->address == source_cpu)",
          "",
          "[Removed Lines]",
          "286:  __load_psw_mask(psw_kernel_bits);",
          "",
          "[Added Lines]",
          "286:  __load_psw_mask(PSW_KERNEL_BITS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:  int cpu;",
          "399:  trace_hardirqs_off();",
          "401:  debug_set_critical();",
          "",
          "[Removed Lines]",
          "398:  __load_psw_mask(psw_kernel_bits | PSW_MASK_DAT);",
          "",
          "[Added Lines]",
          "398:  __load_psw_mask(PSW_KERNEL_BITS | PSW_MASK_DAT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "693:  S390_lowcore.restart_source = -1UL;",
          "694:  restore_access_regs(S390_lowcore.access_regs_save_area);",
          "695:  __ctl_load(S390_lowcore.cregs_save_area, 0, 15);",
          "697:  cpu_init();",
          "698:  preempt_disable();",
          "699:  init_cpu_timer();",
          "",
          "[Removed Lines]",
          "696:  __load_psw_mask(psw_kernel_bits | PSW_MASK_DAT);",
          "",
          "[Added Lines]",
          "696:  __load_psw_mask(PSW_KERNEL_BITS | PSW_MASK_DAT);",
          "",
          "---------------"
        ],
        "arch/s390/kernel/vdso.c||arch/s390/kernel/vdso.c": [
          "File: arch/s390/kernel/vdso.c -> arch/s390/kernel/vdso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: static void vdso_init_data(struct vdso_data *vd)",
          "86: {",
          "89: }",
          "91: #ifdef CONFIG_64BIT",
          "",
          "[Removed Lines]",
          "87:  vd->ectg_available =",
          "88:   s390_user_mode != HOME_SPACE_MODE && test_facility(31);",
          "",
          "[Added Lines]",
          "87:  vd->ectg_available = test_facility(31);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:  lowcore->vdso_per_cpu_data = __LC_PASTE;",
          "106:   return 0;",
          "108:  segment_table = __get_free_pages(GFP_KERNEL, SEGMENT_ORDER);",
          "",
          "[Removed Lines]",
          "105:  if (s390_user_mode == HOME_SPACE_MODE || !vdso_enabled)",
          "",
          "[Added Lines]",
          "104:  if (!vdso_enabled)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:  unsigned long segment_table, page_table, page_frame;",
          "148:  u32 *psal, *aste;",
          "151:   return;",
          "153:  psal = (u32 *)(addr_t) lowcore->paste[4];",
          "",
          "[Removed Lines]",
          "150:  if (s390_user_mode == HOME_SPACE_MODE || !vdso_enabled)",
          "",
          "[Added Lines]",
          "149:  if (!vdso_enabled)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165: {",
          "166:  unsigned long cr5;",
          "169:   return;",
          "170:  cr5 = offsetof(struct _lowcore, paste);",
          "171:  __ctl_load(cr5, 5, 5);",
          "",
          "[Removed Lines]",
          "168:  if (s390_user_mode == HOME_SPACE_MODE || !vdso_enabled)",
          "",
          "[Added Lines]",
          "167:  if (!vdso_enabled)",
          "",
          "---------------"
        ],
        "arch/s390/kernel/vtime.c||arch/s390/kernel/vtime.c": [
          "File: arch/s390/kernel/vtime.c -> arch/s390/kernel/vtime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:  trace_hardirqs_on();",
          "165:   PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;",
          "166:  idle->nohz_delay = 0;",
          "",
          "[Removed Lines]",
          "164:  psw_mask = psw_kernel_bits | PSW_MASK_WAIT | PSW_MASK_DAT |",
          "",
          "[Added Lines]",
          "164:  psw_mask = PSW_KERNEL_BITS | PSW_MASK_WAIT | PSW_MASK_DAT |",
          "",
          "---------------"
        ],
        "arch/s390/lib/uaccess_mvcos.c||arch/s390/lib/uaccess_mvcos.c": [
          "File: arch/s390/lib/uaccess_mvcos.c -> arch/s390/lib/uaccess_mvcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  return size;",
          "66: }",
          "75: static size_t copy_to_user_mvcos(size_t size, void __user *ptr, const void *x)",
          "76: {",
          "77:  register unsigned long reg0 asm(\"0\") = 0x810000UL;",
          "",
          "[Removed Lines]",
          "68: static size_t copy_from_user_mvcos_check(size_t size, const void __user *ptr, void *x)",
          "69: {",
          "70:  if (size <= 256)",
          "71:   return copy_from_user_std(size, ptr, x);",
          "72:  return copy_from_user_mvcos(size, ptr, x);",
          "73: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:  return size;",
          "102: }",
          "112: static size_t copy_in_user_mvcos(size_t size, void __user *to,",
          "113:      const void __user *from)",
          "114: {",
          "",
          "[Removed Lines]",
          "104: static size_t copy_to_user_mvcos_check(size_t size, void __user *ptr,",
          "105:            const void *x)",
          "106: {",
          "107:  if (size <= 256)",
          "108:   return copy_to_user_std(size, ptr, x);",
          "109:  return copy_to_user_mvcos(size, ptr, x);",
          "110: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201: }",
          "203: struct uaccess_ops uaccess_mvcos = {",
          "217:  .copy_from_user = copy_from_user_mvcos,",
          "219:  .copy_to_user = copy_to_user_mvcos,",
          "221:  .copy_in_user = copy_in_user_mvcos,",
          "222:  .clear_user = clear_user_mvcos,",
          "223:  .strnlen_user = strnlen_user_mvcos,",
          "",
          "[Removed Lines]",
          "204:  .copy_from_user = copy_from_user_mvcos_check,",
          "205:  .copy_from_user_small = copy_from_user_std,",
          "206:  .copy_to_user = copy_to_user_mvcos_check,",
          "207:  .copy_to_user_small = copy_to_user_std,",
          "208:  .copy_in_user = copy_in_user_mvcos,",
          "209:  .clear_user = clear_user_mvcos,",
          "210:  .strnlen_user = strnlen_user_std,",
          "211:  .strncpy_from_user = strncpy_from_user_std,",
          "212:  .futex_atomic_op = futex_atomic_op_std,",
          "213:  .futex_atomic_cmpxchg = futex_atomic_cmpxchg_std,",
          "214: };",
          "216: struct uaccess_ops uaccess_mvcos_switch = {",
          "218:  .copy_from_user_small = copy_from_user_mvcos,",
          "220:  .copy_to_user_small = copy_to_user_mvcos,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/lib/uaccess_pt.c||arch/s390/lib/uaccess_pt.c": [
          "File: arch/s390/lib/uaccess_pt.c -> arch/s390/lib/uaccess_pt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462: struct uaccess_ops uaccess_pt = {",
          "463:  .copy_from_user  = copy_from_user_pt,",
          "465:  .copy_to_user  = copy_to_user_pt,",
          "467:  .copy_in_user  = copy_in_user_pt,",
          "468:  .clear_user  = clear_user_pt,",
          "469:  .strnlen_user  = strnlen_user_pt,",
          "",
          "[Removed Lines]",
          "464:  .copy_from_user_small = copy_from_user_pt,",
          "466:  .copy_to_user_small = copy_to_user_pt,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/lib/uaccess_std.c||arch/s390/lib/uaccess_std.c": [
          "File: arch/s390/lib/uaccess_std.c -> arch/s390/lib/uaccess_std.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/s390/mm/fault.c||arch/s390/mm/fault.c": [
          "File: arch/s390/mm/fault.c -> arch/s390/mm/fault.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  if (trans_exc_code == 2)",
          "117:   return current->thread.mm_segment.ar4;",
          "127:  return trans_exc_code != 3;",
          "",
          "[Removed Lines]",
          "118:  if (s390_user_mode == HOME_SPACE_MODE)",
          "120:   return trans_exc_code == 3;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:  int access, fault;",
          "475:  if (!irqs_disabled())",
          "476:   regs.psw.mask |= PSW_MASK_IO | PSW_MASK_EXT;",
          "477:  regs.psw.addr = (unsigned long) __builtin_return_address(0);",
          "",
          "[Removed Lines]",
          "474:  regs.psw.mask = psw_kernel_bits | PSW_MASK_DAT | PSW_MASK_MCHECK;",
          "",
          "[Added Lines]",
          "469:  regs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT | PSW_MASK_MCHECK;",
          "",
          "---------------"
        ],
        "arch/s390/mm/pgtable.c||arch/s390/mm/pgtable.c": [
          "File: arch/s390/mm/pgtable.c -> arch/s390/mm/pgtable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:  struct mm_struct *mm = tsk->mm;",
          "1158:  struct mmu_gather tlb;",
          "1165:  if (mm_has_pgste(tsk->mm))",
          "1166:   return 0;",
          "",
          "[Removed Lines]",
          "1161:  if (s390_user_mode == HOME_SPACE_MODE)",
          "1162:   return -EINVAL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}