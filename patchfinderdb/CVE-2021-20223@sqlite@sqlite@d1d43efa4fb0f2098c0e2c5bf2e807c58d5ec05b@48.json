{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fad4dd0fd1826c08f3f04c81b77d51dcb7f1c661",
      "candidate_info": {
        "commit_hash": "fad4dd0fd1826c08f3f04c81b77d51dcb7f1c661",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fad4dd0fd1826c08f3f04c81b77d51dcb7f1c661",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/vdbe.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Improved query optimization for multi-column indexes where the second or later columns are constrained by an IN operator and the earlier index columns limit the search to a small number of rows.  Use the new OP_SeekScan opcode which does scanning of the relevant range of the index but gives up and falls back to doing a seek if the number of rows scanned grows to large, in order to guard against pathological cases where the estimated number of rows to be scanned is far too small.\n\nFossilOrigin-Name: 4a43430fd23f88352c33b29c4c105b72f6dc821f94bf362040c41a1648c402e5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7395e96b8cc370c8ac2657fb805915b0992a15d80f8bf256d277b423fec64675",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5751:   pPage = pCur->pPage;",
          "5752:   idx = ++pCur->ix;",
          "",
          "[Removed Lines]",
          "5753:   if( !pPage->isInit ){",
          "",
          "[Added Lines]",
          "5753:   if( !pPage->isInit || sqlite3FaultSim(412) ){",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4383:   break;",
          "4384: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4433: case OP_SeekScan: {",
          "4434:   VdbeCursor *pC;",
          "4435:   int res;",
          "4436:   int n;",
          "4437:   UnpackedRecord r;",
          "4439:   assert( pOp[1].opcode==OP_SeekGE );",
          "4440:   assert( pOp[2].opcode==OP_IdxGT );",
          "4441:   assert( pOp[1].p1==pOp[2].p1 );",
          "4442:   assert( pOp[1].p2==pOp[2].p2 );",
          "4443:   assert( pOp[1].p3==pOp[2].p3 );",
          "4444:   assert( pOp[1].p4.i==pOp[2].p4.i );",
          "4445:   assert( pOp->p1>0 );",
          "4446:   pC = p->apCsr[pOp[1].p1];",
          "4447:   assert( pC!=0 );",
          "4448:   assert( pC->eCurType==CURTYPE_BTREE );",
          "4449:   assert( !pC->isTable );",
          "4450:   if( !sqlite3BtreeCursorIsValidNN(pC->uc.pCursor) ){",
          "4451: #ifdef SQLITE_DEBUG",
          "4452:      if( db->flags&SQLITE_VdbeTrace ){",
          "4453:        printf(\"... cursor not valid - fall through\\n\");",
          "4454:      }",
          "4455: #endif",
          "4456:     break;",
          "4457:   }",
          "4458:   n = pOp->p1;",
          "4459:   assert( n>=1 );",
          "4460:   r.pKeyInfo = pC->pKeyInfo;",
          "4461:   r.nField = (u16)pOp[1].p4.i;",
          "4462:   r.default_rc = 0;",
          "4463:   r.aMem = &aMem[pOp[1].p3];",
          "4464: #ifdef SQLITE_DEBUG",
          "4465:   {",
          "4466:     int i;",
          "4467:     for(i=0; i<r.nField; i++){",
          "4468:       assert( memIsValid(&r.aMem[i]) );",
          "4469:       REGISTER_TRACE(pOp[1].p3+i, &aMem[pOp[1].p3+i]);",
          "4470:     }",
          "4471:   }",
          "4472: #endif",
          "4474:   while(1){",
          "4475:     rc = sqlite3VdbeIdxKeyCompare(db, pC, &r, &res);",
          "4476:     if( rc ) goto abort_due_to_error;",
          "4477:     if( res>0 ){",
          "4478:       seekscan_search_fail:",
          "4479: #ifdef SQLITE_DEBUG",
          "4480:       if( db->flags&SQLITE_VdbeTrace ){",
          "4481:         printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "4482:       }",
          "4483: #endif",
          "4484:       VdbeBranchTaken(1,3);",
          "4485:       pOp++;",
          "4486:       goto jump_to_p2;",
          "4487:     }",
          "4488:     if( res==0 ){",
          "4489: #ifdef SQLITE_DEBUG",
          "4490:       if( db->flags&SQLITE_VdbeTrace ){",
          "4491:         printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4492:       }",
          "4493: #endif",
          "4494:       VdbeBranchTaken(2,3);",
          "4495:       pOp += 2;",
          "4496:       break;",
          "4497:     }",
          "4498:     if( n<=0 ){",
          "4499: #ifdef SQLITE_DEBUG",
          "4500:       if( db->flags&SQLITE_VdbeTrace ){",
          "4501:         printf(\"... fall through after %d steps\\n\", pOp->p1);",
          "4502:       }",
          "4503: #endif",
          "4504:       VdbeBranchTaken(0,3);",
          "4505:       break;",
          "4506:     }",
          "4507:     n--;",
          "4508:     rc = sqlite3BtreeNext(pC->uc.pCursor, 0);",
          "4509:     if( rc ){",
          "4510:       if( rc==SQLITE_DONE ){",
          "4511:         rc = SQLITE_OK;",
          "4512:         goto seekscan_search_fail;",
          "4513:       }else{",
          "4514:         goto abort_due_to_error;",
          "4515:       }",
          "4516:     }",
          "4517:   }",
          "4519:   break;",
          "4520: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5914:     }",
          "5915:   }",
          "5916: #endif",
          "5919:   assert( (OP_IdxLE&1)==(OP_IdxLT&1) && (OP_IdxGE&1)==(OP_IdxGT&1) );",
          "5920:   if( (pOp->opcode&1)==(OP_IdxLT&1) ){",
          "5921:     assert( pOp->opcode==OP_IdxLE || pOp->opcode==OP_IdxLT );",
          "",
          "[Removed Lines]",
          "5918:   rc = sqlite3VdbeIdxKeyCompare(db, pC, &r, &res);",
          "",
          "[Added Lines]",
          "6056:   {",
          "6057:     i64 nCellKey = 0;",
          "6058:     BtCursor *pCur;",
          "6059:     Mem m;",
          "6061:     assert( pC->eCurType==CURTYPE_BTREE );",
          "6062:     pCur = pC->uc.pCursor;",
          "6063:     assert( sqlite3BtreeCursorIsValid(pCur) );",
          "6064:     nCellKey = sqlite3BtreePayloadSize(pCur);",
          "6067:     if( nCellKey<=0 || nCellKey>0x7fffffff ){",
          "6068:       rc = SQLITE_CORRUPT_BKPT;",
          "6069:       goto abort_due_to_error;",
          "6070:     }",
          "6071:     sqlite3VdbeMemInit(&m, db, 0);",
          "6072:     rc = sqlite3VdbeMemFromBtreeZeroOffset(pCur, (u32)nCellKey, &m);",
          "6073:     if( rc ) goto abort_due_to_error;",
          "6074:     res = sqlite3VdbeRecordCompareWithSkip(m.n, m.z, &r, 0);",
          "6075:     sqlite3VdbeMemRelease(&m);",
          "6076:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5925:     res++;",
          "5926:   }",
          "5927:   VdbeBranchTaken(res>0,2);",
          "5929:   if( res>0 ) goto jump_to_p2;",
          "5930:   break;",
          "5931: }",
          "",
          "[Removed Lines]",
          "5928:   if( rc ) goto abort_due_to_error;",
          "",
          "[Added Lines]",
          "6088:   assert( rc==SQLITE_OK );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2564:           WHERETRACE(0x40,",
          "2565:             (\"Scan preferred over IN operator on column %d of \\\"%s\\\" (%d<%d)\\n\",",
          "2566:              saved_nEq, pProbe->zName, M+logK+10, nIn+rLogSize));",
          "2568:         }else{",
          "2569:           WHERETRACE(0x40,",
          "2570:             (\"IN operator preferred on column %d of \\\"%s\\\" (%d>=%d)\\n\",",
          "",
          "[Removed Lines]",
          "2567:           continue;",
          "",
          "[Added Lines]",
          "2567:           pNew->wsFlags |= WHERE_IN_SEEKSCAN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5197:         if( (pLoop->wsFlags & WHERE_CONSTRAINT)!=0",
          "5198:          && (pLoop->wsFlags & (WHERE_COLUMN_RANGE|WHERE_SKIPSCAN))==0",
          "5199:          && (pLoop->wsFlags & WHERE_BIGNULL_SORT)==0",
          "5200:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5201:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5202:         ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5200:          && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5359:         sqlite3VdbeJumpHere(v, pIn->addrInTop+1);",
          "5360:         if( pIn->eEndLoopOp!=OP_Noop ){",
          "5361:           if( pIn->nPrefix ){",
          "5363:             if( pLevel->iLeftJoin ){",
          "",
          "[Removed Lines]",
          "5362:             assert( pLoop->wsFlags & WHERE_IN_EARLYOUT );",
          "",
          "[Added Lines]",
          "5363:             int bEarlyOut =",
          "5364:                 (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0",
          "5365:                  && (pLoop->wsFlags & WHERE_IN_EARLYOUT)!=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5372:               sqlite3VdbeAddOp2(v, OP_IfNotOpen, pIn->iCur,",
          "5376:               VdbeCoverage(v);",
          "5377:             }",
          "5379:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5380:                   sqlite3VdbeCurrentAddr(v)+2,",
          "5381:                   pIn->iBase, pIn->nPrefix);",
          "",
          "[Removed Lines]",
          "5373:                   sqlite3VdbeCurrentAddr(v) + 2 +",
          "5374:                      ((pLoop->wsFlags & WHERE_VIRTUALTABLE)==0)",
          "5375:               );",
          "5378:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "",
          "[Added Lines]",
          "5376:                   sqlite3VdbeCurrentAddr(v) + 2 + bEarlyOut);",
          "5379:             if( bEarlyOut ){",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:     if( pLevel->u.in.nIn==0 ){",
          "571:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "572:     }",
          "574:       pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "575:     }",
          "",
          "[Removed Lines]",
          "573:     if( iEq>0 ){",
          "",
          "[Added Lines]",
          "573:     if( iEq>0 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:           pIn++;",
          "609:         }",
          "610:       }",
          "612:         sqlite3VdbeAddOp3(v, OP_SeekHit, pLevel->iIdxCur, 0, iEq);",
          "613:       }",
          "614:     }else{",
          "",
          "[Removed Lines]",
          "611:       if( iEq>0 ){",
          "",
          "[Added Lines]",
          "611:       if( iEq>0 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1804:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1805:       assert( op!=0 );",
          "1806:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1807:       VdbeCoverage(v);",
          "1808:       VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1806:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0 ){",
          "1807:         assert( op==OP_SeekGE );",
          "1808:         assert( regBignull==0 );",
          "1817:         sqlite3VdbeAddOp1(v, OP_SeekScan, (pIdx->aiRowLogEst[0]+9)/10);",
          "1818:         VdbeCoverage(v);",
          "1819:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1904:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1905:     }",
          "1908:       sqlite3VdbeAddOp3(v, OP_SeekHit, iIdxCur, nEq, nEq);",
          "1909:     }",
          "",
          "[Removed Lines]",
          "1907:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "",
          "[Added Lines]",
          "1921:     if( (pLoop->wsFlags & WHERE_IN_EARLYOUT)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0b41745c5142a4c1c8ad311a4b15330284264c8",
      "candidate_info": {
        "commit_hash": "f0b41745c5142a4c1c8ad311a4b15330284264c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f0b41745c5142a4c1c8ad311a4b15330284264c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Avoid unnecessary calls to the sqlite3GetVdbe() routine.  Add assert() statements to prove each call is unnecessary.\n\nFossilOrigin-Name: 86d3790caf92e9cb7a9aaaa110f309b4b6945ac30cfd53fc3e5aa1ec3075ada5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e51ecadcbdef5ce6e41d68412aee70aa4a1416c850358a6fa7e9a1ab443e719d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static void codeTableLocks(Parse *pParse){",
          "92:   int i;",
          "98:   for(i=0; i<pParse->nTableLock; i++){",
          "",
          "[Removed Lines]",
          "93:   Vdbe *pVdbe;",
          "95:   pVdbe = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "93:   Vdbe *pVdbe = pParse->pVdbe;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532:   isUpdate = regOldData!=0;",
          "1533:   db = pParse->db;",
          "1535:   assert( v!=0 );",
          "1537:   nCol = pTab->nCol;",
          "",
          "[Removed Lines]",
          "1534:   v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "1534:   v = pParse->pVdbe;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2304:        || update_flags==(OPFLAG_ISUPDATE|OPFLAG_SAVEPOSITION)",
          "2305:   );",
          "2308:   assert( v!=0 );",
          "2310:   for(i=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, i++){",
          "",
          "[Removed Lines]",
          "2307:   v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2307:   v = pParse->pVdbe;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2405:     return 0;",
          "2406:   }",
          "2407:   iDb = sqlite3SchemaToIndex(pParse->db, pTab->pSchema);",
          "2409:   assert( v!=0 );",
          "2410:   if( iBase<0 ) iBase = pParse->nTab;",
          "2411:   iDataCur = iBase++;",
          "",
          "[Removed Lines]",
          "2408:   v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2408:   v = pParse->pVdbe;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48bf2d72b90c218f47352c8c6f68316fff86808e",
      "candidate_info": {
        "commit_hash": "48bf2d72b90c218f47352c8c6f68316fff86808e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48bf2d72b90c218f47352c8c6f68316fff86808e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/build.c",
          "src/prepare.c",
          "src/util.c"
        ],
        "message": "Fix unreachable branches.\n\nFossilOrigin-Name: 905752da9815ff8242b3cb9a77b1ffdc5cfc76143f47c774890f617a542457a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d69eee8b085d514f442840346f001b4785f8ec64f5ba66943e9577b26e2e29c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5948: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "5949:     if( eMode==BTALLOC_EXACT ){",
          "5951:         u8 eType;",
          "5952:         assert( nearby>0 );",
          "5953:         assert( pBt->autoVacuum );",
          "",
          "[Removed Lines]",
          "5950:       if( nearby<=mxPage ){",
          "",
          "[Added Lines]",
          "5950:       if( ALWAYS(nearby<=mxPage) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6243:   assert( CORRUPT_DB || iPage>1 );",
          "6244:   assert( !pMemPage || pMemPage->pgno==iPage );",
          "6247:     return SQLITE_CORRUPT_BKPT;",
          "6248:   }",
          "6249:   if( pMemPage ){",
          "",
          "[Removed Lines]",
          "6246:   if( iPage<2 || iPage>pBt->nPage ){",
          "",
          "[Added Lines]",
          "6246:   if( iPage<2 || NEVER(iPage>pBt->nPage) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9143:         pgnoRoot==PENDING_BYTE_PAGE(pBt) ){",
          "9144:       pgnoRoot++;",
          "9145:     }",
          "",
          "[Removed Lines]",
          "9146:     assert( pgnoRoot>=3 || CORRUPT_DB );",
          "9147:     testcase( pgnoRoot<3 );",
          "",
          "[Added Lines]",
          "9146:     assert( pgnoRoot>=3 );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2844: static void destroyRootPage(Parse *pParse, int iTable, int iDb){",
          "2845:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "2846:   int r1 = sqlite3GetTempReg(pParse);",
          "2848:   sqlite3VdbeAddOp3(v, OP_Destroy, iTable, r1, iDb);",
          "2849:   sqlite3MayAbort(pParse);",
          "2850: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "",
          "[Removed Lines]",
          "2847:   if( iTable<2 ) sqlite3ErrorMsg(pParse, \"corrupt schema\");",
          "",
          "[Added Lines]",
          "2847:   if( NEVER(iTable<2) ) return;",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:     }else",
          "160:     if( sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "161:      || pIndex->tnum<2",
          "163:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "164:     ){",
          "165:       if( sqlite3Config.bExtraSchemaChecks ){",
          "",
          "[Removed Lines]",
          "162:      || (pIndex->tnum>pData->mxPage && pData->mxPage!=0)",
          "",
          "[Added Lines]",
          "162:      || pIndex->tnum>pData->mxPage",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "860: int sqlite3Atoi(const char *z){",
          "861:   int x = 0;",
          "863:   return x;",
          "864: }",
          "",
          "[Removed Lines]",
          "862:   if( z ) sqlite3GetInt32(z, &x);",
          "",
          "[Added Lines]",
          "862:   sqlite3GetInt32(z, &x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
      "candidate_info": {
        "commit_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/vtab.c"
        ],
        "message": "Use a statement journal on a CREATE VIRTUAL TABLE statement in case the VCreate opcode fails.\n\nFossilOrigin-Name: aa3b0eb8c3438ddd3b660bc6bce4b1f4a0e3b5ec897079445231ee1b61210d6a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 707a058a22bd00ef14431cee0d02048cf1be745c0ef5254eda76c325435738ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:     int opcode = pOp->opcode;",
          "695:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "696:      || opcode==OP_VDestroy",
          "697:      || (opcode==OP_ParseSchema && pOp->p4.z==0)",
          "698:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "699:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698:      || opcode==OP_VCreate",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:     int iReg;",
          "458:     Vdbe *v;",
          "461:     if( pEnd ){",
          "462:       pParse->sNameToken.n = (int)(pEnd->z - pParse->sNameToken.z) + pEnd->n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77c9b3ccb36505e059587b35de15e48e53702501",
      "candidate_info": {
        "commit_hash": "77c9b3ccb36505e059587b35de15e48e53702501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/77c9b3ccb36505e059587b35de15e48e53702501",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/orderby5.test"
        ],
        "message": "Fix an incorrect assert() statement that was added yesterday. Tickets [41c1456a6e61c0e7] and [fb8c538a8f57ae2a].\n\nFossilOrigin-Name: abfb043ebb0c55fdc2be58255bc852b13865d81fa4c2e0dbe8c375810557aafe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/orderby5.test||test/orderby5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2def75693a8ae002375aff80db0e6c970c75f75e8b6ba64f2c518712badb0ae8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3755:         Parse *pParse = pWInfo->pParse;",
          "3756:         CollSeq *pColl1 = sqlite3ExprNNCollSeq(pParse, pOrderBy->a[i].pExpr);",
          "3757:         CollSeq *pColl2 = sqlite3ExprCompareCollSeq(pParse, pTerm->pExpr);",
          "3759:         if( pColl2==0 || sqlite3StrICmp(pColl1->zName, pColl2->zName) ){",
          "3760:           continue;",
          "3761:         }",
          "",
          "[Removed Lines]",
          "3758:         assert( pColl1 && (pParse->nErr || pColl2) );",
          "",
          "[Added Lines]",
          "3758:         assert( pColl1 );",
          "",
          "---------------"
        ],
        "test/orderby5.test||test/orderby5.test": [
          "File: test/orderby5.test -> test/orderby5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   SELECT a FROM t5 WHERE b='def' ORDER BY b;",
          "174: } {1 {no such collation sequence: hello}}",
          "176: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176: # 2020-02-13 ticket 41c1456a6e61c0e7",
          "177: do_execsql_test 4.4.0 {",
          "178:   DROP TABLE t1;",
          "179:   CREATE TABLE t1(a);",
          "180:   DROP TABLE t2;",
          "181:   CREATE TABLE t2(b INTEGER PRIMARY KEY, c INT);",
          "182:   SELECT DISTINCT *",
          "183:     FROM t1 LEFT JOIN t2 ON b=c AND b=(SELECT a FROM t1)",
          "184:    WHERE c>10;",
          "185: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}