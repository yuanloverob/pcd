{
  "cve_id": "CVE-2018-14343",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.1, 2.4.0 to 2.4.7, and 2.2.0 to 2.2.15, the ASN.1 BER dissector could crash. This was addressed in epan/dissectors/packet-ber.c by ensuring that length values do not exceed the maximum signed integer.",
  "repo": "wireshark/wireshark",
  "patch_hash": "67c642047362b5e2546259dd012622ff3dd6c9d9",
  "patch_info": {
    "commit_hash": "67c642047362b5e2546259dd012622ff3dd6c9d9",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/67c642047362b5e2546259dd012622ff3dd6c9d9",
    "files": [
      "epan/dissectors/packet-ber.c"
    ],
    "message": "ber: clamp BER lengths to avoid integer overflow\n\nMany callers treat the length as signed integer, so ensure that the\nlength fits in such a number. Failure to do so can have unintended\nconsequences (such as calling \"tvb_memdup(tvb, 0, -1)\" and assuming that\nthe length is actually 2^32-1).\n\nAlthough an exception could be thrown as well, let's give the caller a\nchance to handle this themselves.\n\nChange-Id: If92545f7d3603250f75741040435000ba879b7e3\nPing-Bug: 14682\nReviewed-on: https://code.wireshark.org/review/27563\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
      "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1346:         }",
      "1347:     }",
      "1349:     if (length)",
      "1351:     if (ind)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1351:     if (tmp_length > (guint32)G_MAXINT32)",
      "1352:         tmp_length = (guint32)G_MAXINT32;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c23abe395230e894c49ede95d8506be4e24f7c1",
      "candidate_info": {
        "commit_hash": "8c23abe395230e894c49ede95d8506be4e24f7c1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8c23abe395230e894c49ede95d8506be4e24f7c1",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "ber: clamp BER lengths to avoid integer overflow\n\nMany callers treat the length as signed integer, so ensure that the\nlength fits in such a number. Failure to do so can have unintended\nconsequences (such as calling \"tvb_memdup(tvb, 0, -1)\" and assuming that\nthe length is actually 2^32-1).\n\nAlthough an exception could be thrown as well, let's give the caller a\nchance to handle this themselves.\n\nChange-Id: If92545f7d3603250f75741040435000ba879b7e3\nPing-Bug: 14682\nReviewed-on: https://code.wireshark.org/review/27563\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 67c642047362b5e2546259dd012622ff3dd6c9d9)\nReviewed-on: https://code.wireshark.org/review/27965\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1346:         }",
          "1347:     }",
          "1349:     if (length)",
          "1351:     if (ind)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1351:     if (tmp_length > (guint32)G_MAXINT32)",
          "1352:         tmp_length = (guint32)G_MAXINT32;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9402f2f80c6bc7d25178a0875c5a1f5ee36361db",
      "candidate_info": {
        "commit_hash": "9402f2f80c6bc7d25178a0875c5a1f5ee36361db",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9402f2f80c6bc7d25178a0875c5a1f5ee36361db",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "ber: clamp BER lengths to avoid integer overflow\n\nMany callers treat the length as signed integer, so ensure that the\nlength fits in such a number. Failure to do so can have unintended\nconsequences (such as calling \"tvb_memdup(tvb, 0, -1)\" and assuming that\nthe length is actually 2^32-1).\n\nAlthough an exception could be thrown as well, let's give the caller a\nchance to handle this themselves.\n\nChange-Id: If92545f7d3603250f75741040435000ba879b7e3\nPing-Bug: 14682\nReviewed-on: https://code.wireshark.org/review/27563\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 67c642047362b5e2546259dd012622ff3dd6c9d9)\nReviewed-on: https://code.wireshark.org/review/27967\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1360:         }",
          "1361:     }",
          "1363:     if (length)",
          "1365:     if (ind)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1365:     if (tmp_length > (guint32)G_MAXINT32)",
          "1366:         tmp_length = (guint32)G_MAXINT32;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed9ecccaa493b97186ad64c02430117ff678a2b0",
      "candidate_info": {
        "commit_hash": "ed9ecccaa493b97186ad64c02430117ff678a2b0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ed9ecccaa493b97186ad64c02430117ff678a2b0",
        "files": [
          "epan/dissectors/packet-ber.c"
        ],
        "message": "ber: clamp BER lengths to avoid integer overflow\n\nMany callers treat the length as signed integer, so ensure that the\nlength fits in such a number. Failure to do so can have unintended\nconsequences (such as calling \"tvb_memdup(tvb, 0, -1)\" and assuming that\nthe length is actually 2^32-1).\n\nAlthough an exception could be thrown as well, let's give the caller a\nchance to handle this themselves.\n\nChange-Id: If92545f7d3603250f75741040435000ba879b7e3\nPing-Bug: 14682\nReviewed-on: https://code.wireshark.org/review/27563\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 67c642047362b5e2546259dd012622ff3dd6c9d9)\nReviewed-on: https://code.wireshark.org/review/27966\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:         }",
          "1364:     }",
          "1366:     if (length)",
          "1368:     if (ind)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1368:     if (tmp_length > (guint32)G_MAXINT32)",
          "1369:         tmp_length = (guint32)G_MAXINT32;",
          "",
          "---------------"
        ]
      }
    }
  ]
}