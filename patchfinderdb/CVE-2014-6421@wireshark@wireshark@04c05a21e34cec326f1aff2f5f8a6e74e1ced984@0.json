{
  "cve_id": "CVE-2014-6421",
  "cve_desc": "Use-after-free vulnerability in the SDP dissector in Wireshark 1.10.x before 1.10.10 allows remote attackers to cause a denial of service (application crash) via a crafted packet that leverages split memory ownership between the SDP and RTP dissectors.",
  "repo": "wireshark/wireshark",
  "patch_hash": "04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
  "patch_info": {
    "commit_hash": "04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/04c05a21e34cec326f1aff2f5f8a6e74e1ced984",
    "files": [
      "asn1/h245/packet-h245-template.c",
      "epan/dissectors/packet-ansi_a.c",
      "epan/dissectors/packet-applemidi.c",
      "epan/dissectors/packet-h245.c",
      "epan/dissectors/packet-rtp.c",
      "epan/dissectors/packet-rtp.h",
      "epan/dissectors/packet-sdp.c",
      "ui/gtk/voip_calls.c"
    ],
    "message": "Fix Bug 9920 Buildbot crash due to SDP/RTP mismatch\n\nFor details see comments in Bug 9920.\n\nThe executive summary:\nBug 9920 is a crash caused by a couple of issues:\n\n1) The memory ownership model for the rtp_dyn_payload hashtable is split: SDP\ncreates the rtp_dyn_payload hashtable, but RTP can free it. Since there isn't\n*one* pointer to the hashtable, RTP freeing it means SDP has a dangling\npointer.\n\n2) Either the SDP dissector shouldn't be creating two separate, unique\nhashtables for multiple media channels of the same addr:port, or RTP shouldn't\nbe free'ing the previous one.\n\nChange-Id: I436e67de6882f84aa82dcbdfe60bf313fe4fd99c\nReviewed-on: https://code.wireshark.org/review/918\nReviewed-by: Hadriel Kaplan <hadrielk@yahoo.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
      "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
      "epan/dissectors/packet-applemidi.c||epan/dissectors/packet-applemidi.c",
      "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c",
      "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
      "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h",
      "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c",
      "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c"
    ]
  },
  "patch_diff": {
    "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c": [
      "File: asn1/h245/packet-h245-template.c -> asn1/h245/packet-h245-template.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "342: static void h245_setup_channels(packet_info *pinfo, channel_info_t *upcoming_channel_lcl)",
      "343: {",
      "346:  struct srtp_info *dummy_srtp_info = NULL;",
      "348:  if (!upcoming_channel_lcl) return;",
      "",
      "[Removed Lines]",
      "344:  gint *key;",
      "345:  GHashTable *rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "344:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:  if (upcoming_channel_lcl->rfc2198 > 0) {",
      "369:  }",
      "371:  if (upcoming_channel_lcl->srtp_flag) {",
      "",
      "[Removed Lines]",
      "362:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "363:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "364:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
      "365:   encoding_name_and_rate->sample_rate = 8000;",
      "366:   key = wmem_new(wmem_file_scope(), gint);",
      "368:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "361:   rtp_dyn_payload = rtp_dyn_payload_new();",
      "362:   rtp_dyn_payload_insert(rtp_dyn_payload, upcoming_channel_lcl->rfc2198, \"red\", 8000);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c": [
      "File: epan/dissectors/packet-ansi_a.c -> epan/dissectors/packet-ansi_a.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6905:     gboolean                            first_assigned_found;",
      "6906:     gboolean                            rtp_dyn_payload_used;",
      "6907:     guint8                              rtp_payload_type;",
      "6913:     rtp_dyn_payload_used = FALSE;",
      "6915:     first_assigned_found = FALSE;",
      "",
      "[Removed Lines]",
      "6908:     GHashTable                          *rtp_dyn_payload;",
      "6909:     gint                                *key;",
      "6910:     encoding_name_and_rate_t            *encoding_name_and_rate;",
      "6912:     rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "6908:     rtp_dyn_payload_t                  *rtp_dyn_payload;",
      "6910:     rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7066:         if (format_assigned &&",
      "7067:             (first_assigned_found == FALSE))",
      "7068:         {",
      "7077:             rtp_dyn_payload_used = TRUE;",
      "7079:             first_assigned_found = TRUE;",
      "",
      "[Removed Lines]",
      "7069:             key  = wmem_new(wmem_file_scope(), gint);",
      "7072:             encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "7073:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), mime_type);",
      "7074:             encoding_name_and_rate->sample_rate = sample_rate;",
      "7076:             g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "7067:             rtp_dyn_payload_insert(rtp_dyn_payload, rtp_payload_type, mime_type, sample_rate);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7084:         if (in_band_format_assigned)",
      "7085:         {",
      "7094:             rtp_dyn_payload_used = TRUE;",
      "7095:         }",
      "",
      "[Removed Lines]",
      "7086:             key  = (gint *) wmem_alloc(wmem_file_scope(), sizeof(gint));",
      "7089:             encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "7090:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"telephone-event\");",
      "7091:             encoding_name_and_rate->sample_rate = sample_rate;",
      "7093:             g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "7077:             rtp_dyn_payload_insert(rtp_dyn_payload, rtp_payload_type, \"telephone-event\", sample_rate);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7100:     if (rtp_dyn_payload_used == FALSE)",
      "7101:     {",
      "7103:     }",
      "7105:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
      "",
      "[Removed Lines]",
      "7102:         rtp_free_hash_dyn_payload(rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "7086:         rtp_dyn_payload_free(rtp_dyn_payload);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-applemidi.c||epan/dissectors/packet-applemidi.c": [
      "File: epan/dissectors/packet-applemidi.c -> epan/dissectors/packet-applemidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:  guint16   command;",
      "286:  conversation_t *p_conv;",
      "292:  if ( tvb_length( tvb ) < 4)",
      "",
      "[Removed Lines]",
      "288:  encoding_name_and_rate_t *encoding_name_and_rate = NULL;",
      "289:  GHashTable *rtp_dyn_payload = NULL;",
      "290:  gint *key;",
      "",
      "[Added Lines]",
      "288:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:         rtp_add_address( pinfo, &pinfo->src, pinfo->srcport, 0, APPLEMIDI_DISSECTOR_SHORTNAME,",
      "310:     pinfo->fd->num, FALSE, rtp_dyn_payload);",
      "",
      "[Removed Lines]",
      "302:  encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "303:  rtp_dyn_payload = g_hash_table_new( g_int_hash, g_int_equal );",
      "304:  encoding_name_and_rate->encoding_name = wmem_strdup( wmem_file_scope(), \"rtp-midi\" );",
      "305:  encoding_name_and_rate->sample_rate = 10000;",
      "306:  key = wmem_new(wmem_file_scope(), gint);",
      "308:  g_hash_table_insert( rtp_dyn_payload, key, encoding_name_and_rate );",
      "",
      "[Added Lines]",
      "300:  rtp_dyn_payload = rtp_dyn_payload_new();",
      "301:  rtp_dyn_payload_insert(rtp_dyn_payload, 97, \"rtp-midi\", 10000);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c": [
      "File: epan/dissectors/packet-h245.c -> epan/dissectors/packet-h245.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "473: static void h245_setup_channels(packet_info *pinfo, channel_info_t *upcoming_channel_lcl)",
      "474: {",
      "477:  struct srtp_info *dummy_srtp_info = NULL;",
      "479:  if (!upcoming_channel_lcl) return;",
      "",
      "[Removed Lines]",
      "475:  gint *key;",
      "476:  GHashTable *rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "475:  rtp_dyn_payload_t *rtp_dyn_payload = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "492:  if (upcoming_channel_lcl->rfc2198 > 0) {",
      "500:  }",
      "502:  if (upcoming_channel_lcl->srtp_flag) {",
      "",
      "[Removed Lines]",
      "493:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "494:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "495:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
      "496:   encoding_name_and_rate->sample_rate = 8000;",
      "497:   key = wmem_new(wmem_file_scope(), gint);",
      "499:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "492:   rtp_dyn_payload = rtp_dyn_payload_new();",
      "493:   rtp_dyn_payload_insert(rtp_dyn_payload, upcoming_channel_lcl->rfc2198, \"red\", 8000);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1932: static int ett_h245 = -1;",
      "",
      "[Removed Lines]",
      "1929: #line 392 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "1923: #line 386 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2427: static gint ett_h245_MobileMultilinkReconfigurationIndication = -1;",
      "2433: static int dissect_h245_MultimediaSystemControlMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);",
      "",
      "[Removed Lines]",
      "2430: #line 397 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "2424: #line 391 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "14499: static void",
      "14500: dissect_h245(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree)",
      "",
      "[Removed Lines]",
      "14497: #line 406 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "14491: #line 400 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "20188:         NULL, HFILL }},",
      "20192:   };",
      "",
      "[Removed Lines]",
      "20191: #line 487 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "20185: #line 481 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "20691:     &ett_h245_MobileMultilinkReconfigurationIndication,",
      "20695:   };",
      "20696:   module_t *h245_module;",
      "",
      "[Removed Lines]",
      "20694: #line 494 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "[Added Lines]",
      "20688: #line 488 \"../../asn1/h245/packet-h245-template.c\"",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
      "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102:     wmem_tree_t *multisegment_pdus;",
      "103: } rtp_private_conv_info;",
      "105: static reassembly_table rtp_reassembly_table;",
      "107: static int hf_rtp_fragments = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105: typedef struct {",
      "106:     char *encoding_name;",
      "107:     int   sample_rate;",
      "108: } encoding_name_and_rate_t;",
      "110: struct _rtp_dyn_payload_t",
      "111: {",
      "112:     GHashTable *table;",
      "113:     size_t ref_count;",
      "114: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "809: #ifdef DEBUG_CONVERSATION",
      "811: static void",
      "814:     encoding_name_and_rate_t *encoding = (encoding_name_and_rate_t*) value;",
      "817:     if (encoding) {",
      "818:         DPRINT2((\"encoding_name=%s\",",
      "819:                 encoding->encoding_name ? encoding->encoding_name : \"NULL\"));",
      "",
      "[Removed Lines]",
      "812: rtp_dyn_payload_table_foreach_func (gpointer key, gpointer value, gpointer user_data _U_) {",
      "813:     gint* pt = (gint*) key;",
      "816:     DPRINT2((\"pt=%d\",*pt));",
      "",
      "[Added Lines]",
      "823: rtp_dyn_payload_table_foreach_func(gpointer key, gpointer value, gpointer user_data _U_) {",
      "824:     guint pt = GPOINTER_TO_UINT(key);",
      "827:     DPRINT2((\"pt=%d\",pt));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "822:         DPRINT2((\"encoding=NULL\"));",
      "823:     }",
      "824: }",
      "826:     DPRINT2((\"rtp_dyn_payload hash table contents:\"));",
      "827:     DINDENT();",
      "838:     DENDENT();",
      "839: }",
      "",
      "[Removed Lines]",
      "825: static void rtp_dump_dyn_payload(GHashTable *rtp_dyn_payload) {",
      "828:     if (!rtp_dyn_payload) {",
      "829:         DPRINT2((\"null rtp_dyn_payload\"));",
      "830:         DENDENT();",
      "831:         return;",
      "832:     }",
      "833:     if (g_hash_table_size(rtp_dyn_payload) == 0) {",
      "834:         DPRINT2((\"rtp_dyn_payload is empty\"));",
      "835:     } else {",
      "836:         g_hash_table_foreach(rtp_dyn_payload, rtp_dyn_payload_table_foreach_func, NULL);",
      "837:     }",
      "",
      "[Added Lines]",
      "837: void",
      "838: rtp_dump_dyn_payload(rtp_dyn_payload_t *rtp_dyn_payload) {",
      "841:         if (!rtp_dyn_payload) {",
      "842:             DPRINT2((\"null pointer to rtp_dyn_payload\"));",
      "843:             DENDENT();",
      "844:             return;",
      "845:         }",
      "846:         DPRINT2((\"ref_count=%\" G_GSIZE_FORMAT, rtp_dyn_payload->ref_count));",
      "847:         if (!rtp_dyn_payload->table) {",
      "848:             DPRINT2((\"null rtp_dyn_payload table\"));",
      "849:             DENDENT();",
      "850:             return;",
      "851:         }",
      "852:         if (g_hash_table_size(rtp_dyn_payload->table) == 0) {",
      "853:             DPRINT2((\"rtp_dyn_payload has no entries\"));",
      "854:         } else {",
      "855:             g_hash_table_foreach(rtp_dyn_payload->table, rtp_dyn_payload_table_foreach_func, NULL);",
      "856:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "847:                   &addresses_reassembly_table_functions);",
      "848: }",
      "850: void",
      "852: {",
      "856: }",
      "859: void",
      "860: bluetooth_add_address(packet_info *pinfo, address *addr,",
      "",
      "[Removed Lines]",
      "851: rtp_free_hash_dyn_payload(GHashTable *rtp_dyn_payload)",
      "853:     if (rtp_dyn_payload == NULL) return;",
      "854:     g_hash_table_destroy(rtp_dyn_payload);",
      "855:     rtp_dyn_payload = NULL;",
      "",
      "[Added Lines]",
      "870:    This is necessary because we need to g_hash_table_destroy() them, either individually or",
      "871:    all at once at the end of the wmem file scope. Since rtp_dyn_payload_free() removes them",
      "872:    individually, we need to remove those then; and when the file scope is over, we have a",
      "873:    single registered callback walk this GHashTable and destroy each member as well as this",
      "874:    GHashTable.",
      "876: static GHashTable *rtp_dyn_payloads = NULL;",
      "880: static void",
      "881: rtp_dyn_payload_value_destroy(gpointer data)",
      "882: {",
      "883:     encoding_name_and_rate_t *encoding_name_and_rate_pt = (encoding_name_and_rate_t*) data;",
      "884:     wmem_free(wmem_file_scope(), encoding_name_and_rate_pt->encoding_name);",
      "885:     wmem_free(wmem_file_scope(), encoding_name_and_rate_pt);",
      "886: }",
      "889: static gboolean",
      "890: rtp_dyn_payloads_table_steal_func(gpointer key _U_, gpointer value, gpointer user_data _U_)",
      "891: {",
      "892:     rtp_dyn_payload_t *rtp_dyn_payload = (rtp_dyn_payload_t *)value;",
      "894: #ifdef DEBUG_CONVERSATION",
      "895:     DPRINT((\"about to steal_all and destroy the following:\"));",
      "896:     DINDENT();",
      "897:     rtp_dump_dyn_payload(rtp_dyn_payload);",
      "898:     DENDENT();",
      "899: #endif",
      "901:     if (rtp_dyn_payload->ref_count == 0) {",
      "903:         g_error(\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\");",
      "904:     }",
      "905:     else if (rtp_dyn_payload->table) {",
      "908:         g_hash_table_steal_all(rtp_dyn_payload->table);",
      "909:         g_hash_table_destroy(rtp_dyn_payload->table);",
      "910:     }",
      "912:     return TRUE;",
      "913: }",
      "916:    which are pointed to by the single rtp_dyn_payloads GHashTable above.",
      "918: static gboolean",
      "919: wmem_rtp_dyn_payload_destroy_cb(wmem_allocator_t *allocator _U_, wmem_cb_event_t event _U_,",
      "920:         void *user_data _U_)",
      "921: {",
      "922:     g_assert(rtp_dyn_payloads);",
      "924:     DPRINT((\"destroying %u remaining rtp_dyn_payload_t's\", g_hash_table_size(rtp_dyn_payloads)));",
      "928:     g_hash_table_foreach_steal(rtp_dyn_payloads, rtp_dyn_payloads_table_steal_func, NULL);",
      "929:     g_hash_table_destroy(rtp_dyn_payloads);",
      "930:     rtp_dyn_payloads = NULL;",
      "933:     return FALSE;",
      "934: }",
      "937:    but those are called both at init and cleanup times, and the cleanup time is before",
      "938:    wmem scope is exited, so we ignore this if rtp_dyn_payloads is not NULL.",
      "940: static void",
      "941: rtp_dyn_payloads_init(void)",
      "942: {",
      "943:     if (rtp_dyn_payloads == NULL) {",
      "944:         rtp_dyn_payloads = g_hash_table_new(NULL, NULL);",
      "945:         wmem_register_callback(wmem_file_scope(), wmem_rtp_dyn_payload_destroy_cb, NULL);",
      "946:     }",
      "947: }",
      "950: rtp_dyn_payload_t* rtp_dyn_payload_new(void)",
      "951: {",
      "953:     rtp_dyn_payload_t * rtp_dyn_payload = wmem_new(wmem_file_scope(), rtp_dyn_payload_t);",
      "954:     rtp_dyn_payload->table = g_hash_table_new_full(NULL, NULL, NULL, rtp_dyn_payload_value_destroy);",
      "955:     rtp_dyn_payload->ref_count = 1;",
      "958:     g_hash_table_insert(rtp_dyn_payloads, rtp_dyn_payload, rtp_dyn_payload);",
      "960:     return rtp_dyn_payload;",
      "961: }",
      "963: static rtp_dyn_payload_t*",
      "964: rtp_dyn_payload_ref(rtp_dyn_payload_t *rtp_dyn_payload)",
      "965: {",
      "966:     if (rtp_dyn_payload) {",
      "967:         rtp_dyn_payload->ref_count++;",
      "968:     }",
      "969:     return rtp_dyn_payload;",
      "970: }",
      "973:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "976: rtp_dyn_payload_insert(rtp_dyn_payload_t *rtp_dyn_payload,",
      "977:                        const guint8 pt,",
      "978:                        const gchar* encoding_name,",
      "979:                        const int sample_rate)",
      "980: {",
      "981:     if (rtp_dyn_payload && rtp_dyn_payload->table) {",
      "982:         encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "983:                     wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "984:         encoding_name_and_rate_pt->encoding_name = wmem_strdup(wmem_file_scope(), encoding_name);",
      "985:         encoding_name_and_rate_pt->sample_rate = sample_rate;",
      "986:         g_hash_table_insert(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);",
      "987:     }",
      "988: }",
      "991:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "993: void",
      "994: rtp_dyn_payload_replace(rtp_dyn_payload_t *rtp_dyn_payload,",
      "995:                         const guint8 pt,",
      "996:                         const gchar* encoding_name,",
      "997:                         const int sample_rate)",
      "998: {",
      "999:     if (rtp_dyn_payload && rtp_dyn_payload->table) {",
      "1000:         encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "1001:                     wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1002:         encoding_name_and_rate_pt->encoding_name = wmem_strdup(wmem_file_scope(), encoding_name);",
      "1003:         encoding_name_and_rate_pt->sample_rate = sample_rate;",
      "1004:         g_hash_table_replace(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);",
      "1005:     }",
      "1006: }",
      "1009: gboolean",
      "1010: rtp_dyn_payload_remove(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt)",
      "1012:     return (rtp_dyn_payload && rtp_dyn_payload->table &&",
      "1013:             g_hash_table_remove(rtp_dyn_payload->table, GUINT_TO_POINTER(pt)));",
      "1014: }",
      "1017: const gchar*",
      "1018: rtp_dyn_payload_get_name(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt)",
      "1019: {",
      "1020:     encoding_name_and_rate_t *encoding_name_and_rate_pt;",
      "1022:     if (!rtp_dyn_payload || !rtp_dyn_payload->table) return NULL;",
      "1024:     encoding_name_and_rate_pt = (encoding_name_and_rate_t*)g_hash_table_lookup(rtp_dyn_payload->table,",
      "1025:                                                                                GUINT_TO_POINTER(pt));",
      "1027:     return (encoding_name_and_rate_pt ? encoding_name_and_rate_pt->encoding_name : NULL);",
      "1028: }",
      "1031:    successful, else FALSE. The encoding string pointed to is only valid until the entry is",
      "1033: gboolean",
      "1034: rtp_dyn_payload_get_full(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt,",
      "1035:                          const gchar **encoding_name, int *sample_rate)",
      "1036: {",
      "1037:     encoding_name_and_rate_t *encoding_name_and_rate_pt;",
      "1041:     if (!rtp_dyn_payload || !rtp_dyn_payload->table) return FALSE;",
      "1043:     encoding_name_and_rate_pt = (encoding_name_and_rate_t*)g_hash_table_lookup(rtp_dyn_payload->table,",
      "1044:                                                                                GUINT_TO_POINTER(pt));",
      "1046:     if (encoding_name_and_rate_pt) {",
      "1049:     }",
      "1051:     return (encoding_name_and_rate_pt != NULL);",
      "1056: void",
      "1057: rtp_dyn_payload_free(rtp_dyn_payload_t *rtp_dyn_payload)",
      "1058: {",
      "1059:     if (!rtp_dyn_payload) return;",
      "1061:     if (rtp_dyn_payload->ref_count > 0)",
      "1062:         --(rtp_dyn_payload->ref_count);",
      "1064:     if (rtp_dyn_payload->ref_count == 0) {",
      "1066: #ifdef DEBUG_CONVERSATION",
      "1067:         DPRINT((\"free'ing the following rtp_dyn_payload:\"));",
      "1068:         DINDENT();",
      "1069:         rtp_dump_dyn_payload(rtp_dyn_payload);",
      "1070:         DENDENT();",
      "1071: #endif",
      "1074:         g_assert(rtp_dyn_payloads);",
      "1075:         if (!g_hash_table_remove(rtp_dyn_payloads, rtp_dyn_payload)) {",
      "1076:             g_error(\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\");",
      "1077:         }",
      "1081:         if (rtp_dyn_payload->table)",
      "1082:             g_hash_table_destroy(rtp_dyn_payload->table);",
      "1085:         wmem_free(wmem_file_scope(), rtp_dyn_payload);",
      "1086:     }",
      "1087: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "933:     g_strlcpy(p_conv_data->method, setup_method, MAX_RTP_SETUP_METHOD_SIZE+1);",
      "934:     p_conv_data->frame_number = setup_frame_number;",
      "",
      "[Removed Lines]",
      "931:     rtp_free_hash_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "1161:     rtp_dyn_payload_free(p_conv_data->rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "941: void",
      "942: srtp_add_address(packet_info *pinfo, address *addr, int port, int other_port,",
      "943:          const gchar *setup_method, guint32 setup_frame_number,",
      "945:          struct srtp_info *srtp_info)",
      "946: {",
      "947:     address null_addr;",
      "",
      "[Removed Lines]",
      "944:          gboolean is_video _U_, GHashTable *rtp_dyn_payload,",
      "",
      "[Added Lines]",
      "1174:          gboolean is_video _U_, rtp_dyn_payload_t *rtp_dyn_payload,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1028:     g_strlcpy(p_conv_data->method, setup_method, MAX_RTP_SETUP_METHOD_SIZE+1);",
      "1029:     p_conv_data->frame_number = setup_frame_number;",
      "1030:     p_conv_data->is_video = is_video;",
      "1032:     p_conv_data->srtp_info = srtp_info;",
      "1033:     p_conv_data->bta2dp_info = NULL;",
      "1034:     p_conv_data->btvdp_info = NULL;",
      "",
      "[Removed Lines]",
      "1025:     if (p_conv_data->rtp_dyn_payload != rtp_dyn_payload)",
      "1026:         rtp_free_hash_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "1031:     p_conv_data->rtp_dyn_payload = rtp_dyn_payload;",
      "",
      "[Added Lines]",
      "1255:     if (p_conv_data->rtp_dyn_payload != rtp_dyn_payload) {",
      "1256:         rtp_dyn_payload_free(p_conv_data->rtp_dyn_payload);",
      "1257:         p_conv_data->rtp_dyn_payload = rtp_dyn_payload_ref(rtp_dyn_payload);",
      "1258:     } else {",
      "1259:         DPRINT((\"passed-in rtp_dyn_payload is the same as in the conversation\"));",
      "1260:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1038: void",
      "1039: rtp_add_address(packet_info *pinfo, address *addr, int port, int other_port,",
      "1040:         const gchar *setup_method, guint32 setup_frame_number,",
      "1042: {",
      "1043:     srtp_add_address(pinfo, addr, port, other_port, setup_method, setup_frame_number, is_video, rtp_dyn_payload, NULL);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:         gboolean is_video , GHashTable *rtp_dyn_payload)",
      "",
      "[Added Lines]",
      "1274:         gboolean is_video , rtp_dyn_payload_t *rtp_dyn_payload)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1163:             payload_type >= PT_UNDF_96 && payload_type <= PT_UNDF_127) {",
      "1165:         if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "1173:                 found_match = dissector_try_string(rtp_dyn_pt_dissector_table,",
      "1174:                                    payload_type_str, newtvb, pinfo, tree, NULL);",
      "",
      "[Removed Lines]",
      "1166:             gchar *payload_type_str = NULL;",
      "1167:             encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1168:             encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &payload_type);",
      "1169:             if (encoding_name_and_rate_pt) {",
      "1170:                 payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1171:             }",
      "1172:             if (payload_type_str){",
      "",
      "[Added Lines]",
      "1399:             const gchar *payload_type_str = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, payload_type);",
      "1400:             if (payload_type_str) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1452:     rfc2198_hdr *hdr_last, *hdr_new;",
      "1453:     rfc2198_hdr *hdr_chain = NULL;",
      "1454:     struct _rtp_conversation_info *p_conv_data= NULL;",
      "1458:     p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);",
      "",
      "[Removed Lines]",
      "1455:     gchar *payload_type_str;",
      "",
      "[Added Lines]",
      "1683:     const gchar *payload_type_str;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1478:         if ((hdr_new->pt > 95) && (hdr_new->pt < 128)) {",
      "1479:             if (p_conv_data && p_conv_data->rtp_dyn_payload){",
      "1485:             }",
      "1486:         }",
      "",
      "[Removed Lines]",
      "1480:                 encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1481:                 encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &hdr_new->pt);",
      "1482:                 if (encoding_name_and_rate_pt) {",
      "1483:                     payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1484:                 }",
      "",
      "[Added Lines]",
      "1708:                 payload_type_str = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, hdr_new->pt);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1645:     unsigned int csrc_count;",
      "1646:     gboolean    marker_set;",
      "1647:     unsigned int payload_type;",
      "1649:     gboolean    is_srtp = FALSE;",
      "1650:     unsigned int i            = 0;",
      "1651:     unsigned int hdr_extension_len= 0;",
      "",
      "[Removed Lines]",
      "1648:     gchar *payload_type_str = NULL;",
      "",
      "[Added Lines]",
      "1872:     const gchar *payload_type_str = NULL;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1828:     if ( (payload_type>95) && (payload_type<128) ) {",
      "1832: #ifdef DEBUG_CONVERSATION",
      "1833:             rtp_dump_dyn_payload(p_conv_data->rtp_dyn_payload);",
      "1834: #endif",
      "1835:             DPRINT((\"looking up conversation data for dyn_pt=%d\", payload_type));",
      "1843:                 DPRINT((\"found conversation data for dyn_pt=%d, enc_name=%s\",",
      "1847:             }",
      "1848:         }",
      "1849:     }",
      "",
      "[Removed Lines]",
      "1829:         if (p_conv_data && p_conv_data->rtp_dyn_payload){",
      "1830:             encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "1837:             encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &payload_type);",
      "1839:             DPRINT((\"did %sfind conversation data for dyn_pt=%d\",",
      "1840:                     encoding_name_and_rate_pt?\"\":\"not \", payload_type));",
      "1842:             if (encoding_name_and_rate_pt) {",
      "1844:                         payload_type,encoding_name_and_rate_pt->encoding_name));",
      "1845:                 rtp_info->info_payload_type_str = payload_type_str = encoding_name_and_rate_pt->encoding_name;",
      "1846:                 rtp_info->info_payload_rate = encoding_name_and_rate_pt->sample_rate;",
      "",
      "[Added Lines]",
      "2053:         if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "2054:             int sample_rate = 0;",
      "2061:             if (rtp_dyn_payload_get_full(p_conv_data->rtp_dyn_payload, payload_type,",
      "2062:                                         &payload_type_str, &sample_rate)) {",
      "2064:                         payload_type, payload_type_str));",
      "2065:                 rtp_info->info_payload_type_str = payload_type_str;",
      "2066:                 rtp_info->info_payload_rate     = sample_rate;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3338:                                     &rtp_rfc2198_pt);",
      "3340:     register_init_routine(rtp_fragment_init);",
      "3341: }",
      "3343: void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3564:     register_init_routine(rtp_dyn_payloads_init);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h": [
      "File: epan/dissectors/packet-rtp.h -> epan/dissectors/packet-rtp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: #endif",
      "101: };",
      "104: #define MAX_RTP_SETUP_METHOD_SIZE 7",
      "105: struct _rtp_conversation_info",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104: typedef struct _rtp_dyn_payload_t rtp_dyn_payload_t;",
      "107:    dynamic payload information. Internally, RTP creates the GHashTable with a wmem file scope",
      "108:    and increments the ref_count when it saves the info to conversations later. The calling",
      "109:    dissector (SDP, H.245, etc.) uses these functions as an interface. If the calling dissector",
      "110:    is done with the rtp_dyn_payload_t* for good, it should call rtp_dyn_payload_free() which",
      "111:    will decrement the ref_count and free's it if the ref_count is 0. In the worst case, it",
      "112:    will get free'd when the wmem file scope is over.",
      "114:    This was changed because there were too many bugs with SDP's handling of memory ownership",
      "115:    of the GHashTable, with RTP freeing things SDP didn't think were free'ed. And also because",
      "116:    the GHashTables never got free'd in many cases by several dissectors.",
      "120: WS_DLL_PUBLIC",
      "121: rtp_dyn_payload_t* rtp_dyn_payload_new(void);",
      "124:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "126: WS_DLL_PUBLIC",
      "127: void rtp_dyn_payload_insert(rtp_dyn_payload_t *rtp_dyn_payload,",
      "128:        const guint8 pt,",
      "129:        const gchar* encoding_name,",
      "130:        const int sample_rate);",
      "133:    This makes copies of the encoding name, scoped to the life of the capture file or sooner if",
      "135: WS_DLL_PUBLIC",
      "136: void rtp_dyn_payload_replace(rtp_dyn_payload_t *rtp_dyn_payload,",
      "137:        const guint8 pt,",
      "138:        const gchar* encoding_name,",
      "139:        const int sample_rate);",
      "142: WS_DLL_PUBLIC",
      "143: gboolean rtp_dyn_payload_remove(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt);",
      "146:    until the entry is replaced, removed, or the hash table is destroyed, so duplicate it if",
      "148: WS_DLL_PUBLIC",
      "149: const gchar* rtp_dyn_payload_get_name(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt);",
      "152:    successful, else FALSE. The encoding string pointed to is only valid until the entry is",
      "154: WS_DLL_PUBLIC",
      "155: gboolean rtp_dyn_payload_get_full(rtp_dyn_payload_t *rtp_dyn_payload, const guint8 pt,",
      "156:           const gchar **encoding_name, int *sample_rate);",
      "160: WS_DLL_PUBLIC",
      "161: void rtp_dyn_payload_free(rtp_dyn_payload_t *rtp_dyn_payload);",
      "164: #ifdef DEBUG_CONVERSATION",
      "166: void rtp_dump_dyn_payload(rtp_dyn_payload_t *rtp_dyn_payload);",
      "167: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121:  btvdp_codec_info_t *btvdp_info;",
      "122: };",
      "130: WS_DLL_PUBLIC",
      "131: void rtp_add_address(packet_info *pinfo,",
      "",
      "[Removed Lines]",
      "124: typedef struct {",
      "125:  char *encoding_name;",
      "126:  int   sample_rate;",
      "127: } encoding_name_and_rate_t;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:                      const gchar *setup_method,",
      "135:                      guint32 setup_frame_number,",
      "136:       gboolean is_video,",
      "140: WS_DLL_PUBLIC",
      "",
      "[Removed Lines]",
      "137:                      GHashTable *rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "198:                      rtp_dyn_payload_t *rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "144:                      const gchar *setup_method,",
      "145:                      guint32 setup_frame_number,",
      "146:       gboolean is_video,",
      "148:                      struct srtp_info *srtp_info);",
      "",
      "[Removed Lines]",
      "147:                      GHashTable *rtp_dyn_payload,",
      "",
      "[Added Lines]",
      "208:                      rtp_dyn_payload_t *rtp_dyn_payload,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "152: bluetooth_add_address(packet_info *pinfo, address *addr,",
      "153:          const gchar *setup_method, guint32 setup_frame_number,",
      "154:          gboolean is_video, void *data);",
      "",
      "[Removed Lines]",
      "157: WS_DLL_PUBLIC",
      "158: void rtp_free_hash_dyn_payload(GHashTable *rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c": [
      "File: epan/dissectors/packet-sdp.c -> epan/dissectors/packet-sdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #include <epan/addr_resolv.h>",
      "43: #include \"packet-sdp.h\"",
      "44: #include \"packet-rtp.h\"",
      "46: #include \"packet-rtcp.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: #include \"conversation_debug.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52: #include \"packet-h264.h\"",
      "53: #include \"packet-mp4ves.h\"",
      "59: void proto_register_sdp(void);",
      "60: void proto_reg_handoff_sdp(void);",
      "",
      "[Removed Lines]",
      "57: #include \"conversation_debug.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208: typedef struct {",
      "209:     gint32 pt[SDP_MAX_RTP_PAYLOAD_TYPES];",
      "210:     gint8 pt_count;",
      "212:     gboolean set_rtp;",
      "213: } transport_media_pt_t;",
      "",
      "[Removed Lines]",
      "211:     GHashTable *rtp_dyn_payload;",
      "",
      "[Added Lines]",
      "212:     rtp_dyn_payload_t *rtp_dyn_payload;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "256: #ifdef DEBUG_CONVERSATION",
      "275: static void sdp_dump_transport_media(const transport_media_pt_t* media) {",
      "276:     int i;",
      "277:     int count;",
      "",
      "[Removed Lines]",
      "258: static void",
      "259: rtp_dyn_payload_table_foreach_func (gpointer key, gpointer value, gpointer user_data _U_) {",
      "260:     gint* pt = (gint*) key;",
      "261:     encoding_name_and_rate_t *encoding = (encoding_name_and_rate_t*) value;",
      "263:     DPRINT2((\"pt=%d\",*pt));",
      "264:     DINDENT();",
      "265:         if (encoding) {",
      "266:             DPRINT2((\"encoding_name=%s\",",
      "267:                     encoding->encoding_name ? encoding->encoding_name : \"NULL\"));",
      "268:             DPRINT2((\"sample_rate=%d\", encoding->sample_rate));",
      "269:         } else {",
      "270:             DPRINT2((\"encoding=NULL\"));",
      "271:         }",
      "272:     DENDENT();",
      "273: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "291:         DENDENT();",
      "292:         DPRINT2((\"rtp_dyn_payload hashtable=%s\", media->rtp_dyn_payload ? \"YES\" : \"NO\"));",
      "293:         if (media->rtp_dyn_payload) {",
      "302:         }",
      "303:         DPRINT2((\"set_rtp=%s\", media->set_rtp ? \"TRUE\" : \"FALSE\"));",
      "304:     DENDENT();",
      "",
      "[Removed Lines]",
      "294:             DPRINT2((\"rtp_dyn_payload hash table contents:\"));",
      "295:             DINDENT();",
      "296:                 if (g_hash_table_size(media->rtp_dyn_payload) == 0) {",
      "297:                     DPRINT2((\"rtp_dyn_payload is empty\"));",
      "298:                 } else {",
      "299:                     g_hash_table_foreach(media->rtp_dyn_payload, rtp_dyn_payload_table_foreach_func, NULL);",
      "300:                 }",
      "301:             DENDENT();",
      "",
      "[Added Lines]",
      "277:             rtp_dump_dyn_payload(media->rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1290:     guint8     *payload_type;",
      "1291:     guint8     *attribute_value;",
      "1293:     guint8      pt;",
      "1294:     gint        sdp_media_attrbute_code;",
      "1295:     const char *msrp_res           = \"msrp://\";",
      "",
      "[Removed Lines]",
      "1292:     gint       *key;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1297:     gboolean    has_more_pars      = TRUE;",
      "1298:     tvbuff_t   *h245_tvb;",
      "1299:     guint8      master_key_length  = 0, master_salt_length = 0;",
      "1302:     offset = 0;",
      "",
      "[Removed Lines]",
      "1300:     encoding_name_and_rate_t *encoding_name_and_rate;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1365:             }",
      "1370:             transport_info->encoding_name[pt] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
      "1372:             next_offset =  next_offset + 1;",
      "",
      "[Removed Lines]",
      "1367:             key  = wmem_new(wmem_file_scope(), gint);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1400:             if (transport_info->media_count < 0) {",
      "1401:                 for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1415:                 }",
      "1416:                 return;",
      "1426:             break;",
      "1427:         case SDP_FMTP:",
      "1428:             if (sdp_media_attribute_tree) {",
      "",
      "[Removed Lines]",
      "1402:                     encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1403:                     encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
      "1404:                     encoding_name_and_rate->sample_rate = transport_info->sample_rate[pt];",
      "1405:                     if (n == 0) {",
      "1406:                         g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
      "1407:                                             key, encoding_name_and_rate);",
      "1409:                         gint *key2;",
      "1410:                         key2  = wmem_new(wmem_file_scope(), gint);",
      "1412:                         g_hash_table_insert(transport_info->media[n].rtp_dyn_payload,",
      "1413:                                             key2, encoding_name_and_rate);",
      "1414:                     }",
      "1418:             } else",
      "1420:                 encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
      "1422:             encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), transport_info->encoding_name[pt]);",
      "1423:             encoding_name_and_rate->sample_rate   = transport_info->sample_rate[pt];",
      "1424:             g_hash_table_insert(transport_info->media[ transport_info->media_count ].rtp_dyn_payload,",
      "1425:                                   key, encoding_name_and_rate);",
      "",
      "[Added Lines]",
      "1373:                     rtp_dyn_payload_insert(transport_info->media[n].rtp_dyn_payload,",
      "1374:                                            pt,",
      "1375:                                            transport_info->encoding_name[pt],",
      "1376:                                            transport_info->sample_rate[pt]);",
      "1380:             }",
      "1382:             rtp_dyn_payload_insert(transport_info->media[ transport_info->media_count ].rtp_dyn_payload,",
      "1383:                                   pt, transport_info->encoding_name[pt], transport_info->sample_rate[pt]);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1917:             transport_info->encoding_name[n] = (char*)UNKNOWN_ENCODING;",
      "1918:         }",
      "1919:         for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1922:             transport_info->media[n].set_rtp = FALSE;",
      "1923:         }",
      "",
      "[Removed Lines]",
      "1920:             transport_info->media[n].rtp_dyn_payload =",
      "1921:                 g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "1878:             transport_info->media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1955:         (transport_info->sdp_status == SDP_EXCHANGE_OFFER)) {",
      "1956:         for (n = start_transport_info_count; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "1957:             if (!transport_info->media[n].rtp_dyn_payload)",
      "1959:         }",
      "1960:     }",
      "",
      "[Removed Lines]",
      "1958:                 transport_info->media[n].rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "1915:                 transport_info->media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2161:             if (!transport_info->media[n].set_rtp)",
      "2162:             {",
      "2164:                         \"channel=%d, media_port=%d\",",
      "2165:                         n, transport_info->media_port[n]));",
      "2167:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2168:             }",
      "",
      "[Removed Lines]",
      "2163:                 DPRINT((\"set_rtp is not set, calling rtp_free_hash_dyn_payload, \"",
      "2166:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2120:                 DPRINT((\"set_rtp is not set, calling rtp_dyn_payload_free, \"",
      "2123:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2176:             {",
      "2177:                 if (!transport_info->media[n].set_rtp)",
      "2178:                 {",
      "2180:                             \"channel=%d, media_port=%d\",",
      "2181:                             n, transport_info->media_port[n]));",
      "2183:                     transport_info->media[n].rtp_dyn_payload = NULL;",
      "2184:                 }",
      "2185:             }",
      "",
      "[Removed Lines]",
      "2179:                     DPRINT((\"media_count == -1, calling rtp_free_hash_dyn_payload, \"",
      "2182:                     rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2136:                     DPRINT((\"media_count == -1, calling rtp_dyn_payload_free, \"",
      "2139:                     rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2190:             {",
      "2191:                 if (!transport_info->media[n].set_rtp)",
      "2192:                 {",
      "2194:                             \"channel=%d, media_port=%d\",",
      "2195:                             n, transport_info->media_port[n]));",
      "2197:                     transport_info->media[n].rtp_dyn_payload = NULL;",
      "2198:                 }",
      "2199:             }",
      "",
      "[Removed Lines]",
      "2193:                     DPRINT((\"media_count != -1, calling rtp_free_hash_dyn_payload, \"",
      "2196:                     rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2150:                     DPRINT((\"media_count != -1, calling rtp_dyn_payload_free, \"",
      "2153:                     rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2208:         {",
      "2209:             if (!transport_info->media[n].set_rtp)",
      "2210:             {",
      "2212:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2213:             }",
      "2214:         }",
      "",
      "[Removed Lines]",
      "2211:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2168:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2281:         local_transport_info.encoding_name[n] = (char*)UNKNOWN_ENCODING;",
      "2282:     }",
      "2283:     for (n = 0; n < SDP_MAX_RTP_CHANNELS; n++) {",
      "2286:         local_transport_info.media[n].set_rtp = FALSE;",
      "2287:     }",
      "",
      "[Removed Lines]",
      "2284:         local_transport_info.media[n].rtp_dyn_payload =",
      "2285:             g_hash_table_new(g_int_hash, g_int_equal);",
      "",
      "[Added Lines]",
      "2241:         local_transport_info.media[n].rtp_dyn_payload = rtp_dyn_payload_new();",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2559:                         i, local_transport_info.media[n].pt[i]));",
      "2561:                 if ((local_transport_info.media[n].pt[i] >= 96) && (local_transport_info.media[n].pt[i] <= 127)) {",
      "2564:                         local_transport_info.media[n].rtp_dyn_payload,",
      "2567:                         if (strlen(sdp_pi->summary_str))",
      "2568:                             g_strlcat(sdp_pi->summary_str, \" \", 50);",
      "2570:                     } else {",
      "2571:                         char num_pt[10];",
      "2572:                         g_snprintf(num_pt, 10, \"%u\", local_transport_info.media[n].pt[i]);",
      "",
      "[Removed Lines]",
      "2562:                     encoding_name_and_rate_t *encoding_name_and_rate_pt =",
      "2563:                         (encoding_name_and_rate_t *)g_hash_table_lookup(",
      "2565:                         &local_transport_info.media[n].pt[i]);",
      "2566:                     if (encoding_name_and_rate_pt) {",
      "2569:                         g_strlcat(sdp_pi->summary_str, encoding_name_and_rate_pt->encoding_name, 50);",
      "",
      "[Added Lines]",
      "2518:                     const gchar *payload_type_str = rtp_dyn_payload_get_name(",
      "2520:                         local_transport_info.media[n].pt[i]);",
      "2521:                     if (payload_type_str) {",
      "2524:                         g_strlcat(sdp_pi->summary_str, payload_type_str, 50);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2589:         if ((transport_info == &local_transport_info) &&",
      "2590:             !transport_info->media[n].set_rtp)",
      "2591:         {",
      "2593:             transport_info->media[n].rtp_dyn_payload = NULL;",
      "2594:         }",
      "",
      "[Removed Lines]",
      "2592:             rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2547:             rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2611:         {",
      "2612:             if (!transport_info->media[n].set_rtp)",
      "2613:             {",
      "2615:                 transport_info->media[n].rtp_dyn_payload = NULL;",
      "2616:             }",
      "2617:         }",
      "",
      "[Removed Lines]",
      "2614:                 rtp_free_hash_dyn_payload(transport_info->media[n].rtp_dyn_payload);",
      "",
      "[Added Lines]",
      "2569:                 rtp_dyn_payload_free(transport_info->media[n].rtp_dyn_payload);",
      "",
      "---------------"
    ],
    "ui/gtk/voip_calls.c||ui/gtk/voip_calls.c": [
      "File: ui/gtk/voip_calls.c -> ui/gtk/voip_calls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:    p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_get_id_by_filter_name(\"rtp\"), 0);",
      "565:    if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
      "570:     }",
      "571:    }",
      "572:   }",
      "",
      "[Removed Lines]",
      "566:     encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
      "567:     encoding_name_and_rate_pt = (encoding_name_and_rate_t *)g_hash_table_lookup(p_conv_data->rtp_dyn_payload, &strinfo->pt);",
      "568:     if (encoding_name_and_rate_pt) {",
      "569:      strinfo->pt_str = g_strdup(encoding_name_and_rate_pt->encoding_name);",
      "",
      "[Added Lines]",
      "566:     const gchar *encoding_name = rtp_dyn_payload_get_name(p_conv_data->rtp_dyn_payload, strinfo->pt);",
      "567:     if (encoding_name) {",
      "568:      strinfo->pt_str = g_strdup(encoding_name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2284f0bdfa981da85d3b215beab6535efadbf5e3",
      "candidate_info": {
        "commit_hash": "2284f0bdfa981da85d3b215beab6535efadbf5e3",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2284f0bdfa981da85d3b215beab6535efadbf5e3",
        "files": [
          "epan/dissectors/packet-sdp.c"
        ],
        "message": "For now use UTF-8 for all strings for performance reasons.\n\nChange-Id: If47ffbee58d534ce3d44f00e1e5b966bc42a2ea8\nReviewed-on: https://code.wireshark.org/review/906\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-sdp.c||epan/dissectors/packet-sdp.c": [
          "File: epan/dissectors/packet-sdp.c -> epan/dissectors/packet-sdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     tokenlen = next_offset - offset;",
          "429:     proto_tree_add_item(sdp_owner_tree, hf_owner_username, tvb, offset, tokenlen,",
          "431:     offset = next_offset  + 1;",
          "",
          "[Removed Lines]",
          "430:                         ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "430:                         ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:     tokenlen = next_offset - offset;",
          "439:     proto_tree_add_item(sdp_owner_tree, hf_owner_sessionid, tvb, offset,",
          "441:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "440:                         tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "440:                         tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:     tokenlen = next_offset - offset;",
          "449:     proto_tree_add_item(sdp_owner_tree, hf_owner_version, tvb, offset, tokenlen,",
          "451:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "450:                         ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "450:                         ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:     tokenlen = next_offset - offset;",
          "459:     proto_tree_add_item(sdp_owner_tree, hf_owner_network_type, tvb, offset,",
          "461:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "460:                         tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "460:                         tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:     tokenlen = next_offset - offset;",
          "469:     proto_tree_add_item(sdp_owner_tree, hf_owner_address_type, tvb, offset,",
          "471:     offset = next_offset + 1;",
          "475: }",
          "",
          "[Removed Lines]",
          "470:                         tokenlen, ENC_ASCII|ENC_NA);",
          "474:     proto_tree_add_item(sdp_owner_tree, hf_owner_address, tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "470:                         tokenlen, ENC_UTF_8|ENC_NA);",
          "474:     proto_tree_add_item(sdp_owner_tree, hf_owner_address, tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:     proto_tree_add_item(sdp_connection_info_tree,",
          "499:                         hf_connection_info_network_type, tvb, offset, tokenlen,",
          "501:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "500:                         ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "500:                         ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506:         return;",
          "507:     tokenlen = next_offset - offset;",
          "511:     DPRINT((\"parsed connection line type=%s\", media_info->connection_type));",
          "513:     proto_tree_add_item(sdp_connection_info_tree,",
          "514:                         hf_connection_info_address_type, tvb, offset, tokenlen,",
          "516:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "509:     media_info->connection_type = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "515:                         ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "509:     media_info->connection_type = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "515:                         ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "524:         media_info->connection_address =",
          "526:     } else {",
          "527:         tokenlen = next_offset - offset;",
          "530:     }",
          "532:     DPRINT((\"parsed connection line address=%s\", media_info->connection_address));",
          "534:     proto_tree_add_item(sdp_connection_info_tree,",
          "535:                         hf_connection_info_connection_address, tvb, offset,",
          "537:     if (next_offset != -1) {",
          "538:         offset = next_offset + 1;",
          "539:         next_offset = tvb_find_guint8(tvb, offset, -1, '/');",
          "",
          "[Removed Lines]",
          "525:             (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tvb_length_remaining(tvb, offset), ENC_UTF_8);",
          "529:         media_info->connection_address = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "536:                         tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "525:             (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tvb_length_remaining(tvb, offset), ENC_UTF_8|ENC_NA);",
          "529:         media_info->connection_address = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "536:                         tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "543:             tokenlen = next_offset - offset;",
          "544:         }",
          "545:         proto_tree_add_item(sdp_connection_info_tree,",
          "547:         if (next_offset != -1) {",
          "548:             offset = next_offset + 1;",
          "549:             proto_tree_add_item(sdp_connection_info_tree,",
          "551:         }",
          "552:     }",
          "553: }",
          "",
          "[Removed Lines]",
          "546:                             hf_connection_info_ttl, tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "550:                                 hf_connection_info_num_addr, tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "546:                             hf_connection_info_ttl, tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "550:                                 hf_connection_info_num_addr, tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "573:     tokenlen = next_offset - offset;",
          "575:     item = proto_tree_add_item(sdp_bandwidth_tree, hf_bandwidth_modifier, tvb, offset,",
          "577:     if (tvb_strneql(tvb, offset, \"CT\", 2) == 0) {",
          "578:         proto_item_append_text(item, \" [Conference Total(total bandwidth of all RTP sessions)]\");",
          "579:         unit_is_kbs = TRUE;",
          "",
          "[Removed Lines]",
          "576:                                tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "576:                                tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "589:     offset = next_offset + 1;",
          "591:     item = proto_tree_add_item(sdp_bandwidth_tree, hf_bandwidth_value, tvb, offset, -1,",
          "593:     if (unit_is_kbs == TRUE)",
          "594:         proto_item_append_text(item, \" kb/s\");",
          "595:     if (unit_is_bps == TRUE)",
          "",
          "[Removed Lines]",
          "592:                                ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "592:                                ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "612:     tokenlen = next_offset - offset;",
          "613:     proto_tree_add_item(sdp_time_tree, hf_time_start, tvb, offset, tokenlen,",
          "617:     offset = next_offset + 1;",
          "619: }",
          "621: static void dissect_sdp_repeat_time(tvbuff_t *tvb, proto_item* ti) {",
          "",
          "[Removed Lines]",
          "614:                         ENC_ASCII|ENC_NA);",
          "618:     proto_tree_add_item(sdp_time_tree, hf_time_stop, tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "614:                         ENC_UTF_8|ENC_NA);",
          "618:     proto_tree_add_item(sdp_time_tree, hf_time_stop, tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "634:     tokenlen = next_offset - offset;",
          "635:     proto_tree_add_item(sdp_repeat_time_tree, hf_repeat_time_interval, tvb,",
          "639:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "636:                         offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "636:                         offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "644:     tokenlen = next_offset - offset;",
          "645:     proto_tree_add_item(sdp_repeat_time_tree, hf_repeat_time_duration, tvb,",
          "649:     do {",
          "",
          "[Removed Lines]",
          "646:                         offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "646:                         offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "656:         }",
          "657:         proto_tree_add_item(sdp_repeat_time_tree, hf_repeat_time_offset,",
          "659:     } while (next_offset != -1);",
          "661: }",
          "",
          "[Removed Lines]",
          "658:                             tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "658:                             tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "676:         tokenlen = next_offset - offset;",
          "678:         proto_tree_add_item(sdp_timezone_tree, hf_timezone_time, tvb, offset,",
          "680:         offset = next_offset + 1;",
          "681:         next_offset = tvb_find_guint8(tvb, offset, -1, ' ');",
          "682:         if (next_offset != -1) {",
          "",
          "[Removed Lines]",
          "679:                             tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "679:                             tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "686:         }",
          "687:         proto_tree_add_item(sdp_timezone_tree, hf_timezone_offset, tvb, offset,",
          "689:         offset = next_offset + 1;",
          "690:     } while (next_offset != -1);",
          "",
          "[Removed Lines]",
          "688:                             tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "688:                             tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "708:     tokenlen = next_offset - offset;",
          "710:     proto_tree_add_item(sdp_encryption_key_tree, hf_encryption_key_type,",
          "713:     offset = next_offset + 1;",
          "714:     proto_tree_add_item(sdp_encryption_key_tree, hf_encryption_key_data,",
          "716: }",
          "718: static void dissect_key_mgmt(tvbuff_t *tvb, packet_info * pinfo, proto_item * ti) {",
          "",
          "[Removed Lines]",
          "711:                         tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "715:                         tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "711:                         tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "715:                         tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "734:         return;",
          "736:     tokenlen = next_offset - offset;",
          "741:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "737:     prtcl_id = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "739:     proto_tree_add_item(key_tree, hf_key_mgmt_prtcl_id, tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "737:     prtcl_id = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "739:     proto_tree_add_item(key_tree, hf_key_mgmt_prtcl_id, tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "744:     if (len < 0)",
          "745:         return;",
          "748:     keymgmt_tvb = base64_to_tvb(tvb, data_p);",
          "749:     add_new_data_source(pinfo, keymgmt_tvb, \"Key Management Data\");",
          "",
          "[Removed Lines]",
          "747:     data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "747:     data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, len, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "785:     tokenlen = next_offset - offset;",
          "787:     proto_tree_add_item(sdp_session_attribute_tree, hf_session_attribute_field,",
          "792:     offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "788:                         tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "790:     field_name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "788:                         tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "790:     field_name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "805:         tokenlen = next_offset - offset;",
          "809:         offset = tvb_pbrk_guint8(tvb, offset, -1,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", NULL);",
          "",
          "[Removed Lines]",
          "807:         proto_tree_add_item(sdp_session_attribute_tree, hf_ipbcp_version, tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "807:         proto_tree_add_item(sdp_session_attribute_tree, hf_ipbcp_version, tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "816:         if (tokenlen == -1)",
          "817:             return;",
          "820:     } else if (strcmp((char*)field_name, \"key-mgmt\") == 0) {",
          "821:         tvbuff_t   *key_tvb;",
          "822:         proto_item *key_ti;",
          "824:         key_tvb = tvb_new_subset_remaining(tvb, offset);",
          "827:         dissect_key_mgmt(key_tvb, pinfo, key_ti);",
          "828:     } else {",
          "829:         proto_tree_add_item(sdp_session_attribute_tree, hf_session_attribute_value,",
          "831:     }",
          "832: }",
          "",
          "[Removed Lines]",
          "819:         proto_tree_add_item(sdp_session_attribute_tree, hf_ipbcp_type, tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "825:         key_ti = proto_tree_add_item(sdp_session_attribute_tree, hf_key_mgmt_att_value, key_tvb, 0, -1, ENC_ASCII|ENC_NA);",
          "830:                             tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "819:         proto_tree_add_item(sdp_session_attribute_tree, hf_ipbcp_type, tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "825:         key_ti = proto_tree_add_item(sdp_session_attribute_tree, hf_key_mgmt_att_value, key_tvb, 0, -1, ENC_UTF_8|ENC_NA);",
          "830:                             tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "856:     proto_tree_add_item(sdp_media_tree, hf_media_media, tvb, offset, tokenlen,",
          "861:     DPRINT((\"parsed media_type=%s, for media_count=%d\",",
          "862:             media_info->media_type[media_info->media_count],",
          "",
          "[Removed Lines]",
          "857:                         ENC_ASCII|ENC_NA);",
          "859:     media_info->media_type[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "857:                         ENC_UTF_8|ENC_NA);",
          "859:     media_info->media_type[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "873:     if (next_offset != -1) {",
          "874:         tokenlen = next_offset - offset;",
          "878:         DPRINT((\"parsed media_port=%s, for media_count=%d\",",
          "879:                 media_info->media_port[media_info->media_count],",
          "880:                 media_info->media_count));",
          "882:         proto_tree_add_uint(sdp_media_tree, hf_media_port, tvb, offset, tokenlen,",
          "884:         offset = next_offset + 1;",
          "885:         next_offset = tvb_find_guint8(tvb, offset, -1, ' ');",
          "886:         if (next_offset == -1)",
          "887:             return;",
          "888:         tokenlen = next_offset - offset;",
          "889:         proto_tree_add_item(sdp_media_tree, hf_media_portcount, tvb, offset,",
          "891:         offset = next_offset + 1;",
          "892:     } else {",
          "893:         next_offset = tvb_find_guint8(tvb, offset, -1, ' ');",
          "",
          "[Removed Lines]",
          "876:         media_info->media_port[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "883:                             atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8)));",
          "890:                             tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "876:         media_info->media_port[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "883:                             atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA)));",
          "890:                             tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "896:             return;",
          "897:         tokenlen = next_offset - offset;",
          "900:         DPRINT((\"parsed media_port=%s, for media_count=%d\",",
          "901:                 media_info->media_port[media_info->media_count],",
          "902:                 media_info->media_count));",
          "904:         proto_tree_add_uint(sdp_media_tree, hf_media_port, tvb, offset, tokenlen,",
          "906:         offset = next_offset + 1;",
          "907:     }",
          "",
          "[Removed Lines]",
          "899:         media_info->media_port[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "905:                             atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8)));",
          "",
          "[Added Lines]",
          "899:         media_info->media_port[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "905:                             atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA)));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "914:     tokenlen = next_offset - offset;",
          "918:     DPRINT((\"parsed media_proto=%s, for media_count=%d\",",
          "919:             media_info->media_proto[media_info->media_count],",
          "",
          "[Removed Lines]",
          "916:     media_info->media_proto[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "916:     media_info->media_proto[media_info->media_count] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "923:     proto_tree_add_item(sdp_media_tree, hf_media_proto, tvb, offset, tokenlen,",
          "926:     do {",
          "927:         offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "924:                         ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "924:                         ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "936:         }",
          "938:         if (!strcmp(media_info->media_proto[media_info->media_count], \"RTP/AVP\")) {",
          "940:             proto_tree_add_string(sdp_media_tree, hf_media_format, tvb, offset,",
          "941:                                   tokenlen, val_to_str_ext((guint32)strtoul((char*)media_format, NULL, 10), &rtp_payload_type_vals_ext, \"%u\"));",
          "942:             idx = transport_info->media[transport_info->media_count].pt_count;",
          "",
          "[Removed Lines]",
          "939:             media_format = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "939:             media_format = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "948:                 transport_info->media[transport_info->media_count].pt_count++;",
          "949:         } else {",
          "950:             proto_tree_add_item(sdp_media_tree, hf_media_format, tvb, offset,",
          "952:         }",
          "953:     } while (next_offset != -1);",
          "",
          "[Removed Lines]",
          "951:                                 tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "951:                                 tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1106:     tokenlen = next_offset - offset;",
          "1108: #if 0",
          "1110: #endif",
          "",
          "[Removed Lines]",
          "1107:     field_name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1107:     field_name = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1115:         if (strcmp((char*)field_name, \"profile-level-id\") == 0) {",
          "1116:             offset++;",
          "1117:             tokenlen = end_offset - offset;",
          "1119:             item = proto_tree_add_uint(tree, hf_sdp_fmtp_mpeg4_profile_level_id, tvb, offset, tokenlen,",
          "1120:                                        (guint32)strtol((char*)format_specific_parameter, NULL, 10));",
          "1121:             PROTO_ITEM_SET_GENERATED(item);",
          "1122:         } else if (strcmp((char*)field_name, \"config\") == 0) {",
          "1124:             tokenlen = end_offset - offset;",
          "1127:             data_tvb = ascii_bytes_to_tvb(tvb, pinfo, tokenlen, format_specific_parameter);",
          "1128:             if (mp4ves_handle && data_tvb) {",
          "",
          "[Removed Lines]",
          "1118:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "1125:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1118:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "1125:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1137:         if (strcmp((char*)field_name, \"profile\") == 0) {",
          "1138:             offset++;",
          "1139:             tokenlen = end_offset - offset;",
          "1141:             item = proto_tree_add_uint(tree, hf_sdp_fmtp_h263_profile, tvb, offset, tokenlen,",
          "1142:                                        (guint32)strtol((char*)format_specific_parameter, NULL, 10));",
          "1143:             PROTO_ITEM_SET_GENERATED(item);",
          "1144:         } else if (strcmp((char*)field_name, \"level\") == 0) {",
          "1145:             offset++;",
          "1146:             tokenlen = end_offset - offset;",
          "1148:             item = proto_tree_add_uint(tree, hf_sdp_fmtp_h263_level, tvb, offset, tokenlen,",
          "1149:                                        (guint32)strtol((char*)format_specific_parameter, NULL, 10));",
          "1150:             PROTO_ITEM_SET_GENERATED(item);",
          "",
          "[Removed Lines]",
          "1140:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "1147:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1140:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "1147:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1172:             tokenlen = end_offset - offset;",
          "1174:             data_tvb = ascii_bytes_to_tvb(tvb, pinfo, tokenlen, format_specific_parameter);",
          "1175:             if (!data_tvb) {",
          "1176:                 proto_tree_add_text(tree, tvb, offset, tokenlen, \"Could not convert '%s' to 3 bytes\", format_specific_parameter);",
          "",
          "[Removed Lines]",
          "1173:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1173:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1188:         } else if (strcmp(field_name, \"packetization-mode\") == 0) {",
          "1189:             offset++;",
          "1190:             tokenlen = end_offset - offset;",
          "1192:             item = proto_tree_add_uint(tree, hf_sdp_h264_packetization_mode, tvb, offset, tokenlen,",
          "1193:                                        (guint32)strtol((char*)format_specific_parameter, NULL, 10));",
          "1194:             PROTO_ITEM_SET_GENERATED(item);",
          "",
          "[Removed Lines]",
          "1191:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1191:             format_specific_parameter = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1215:                 tokenlen = end_offset - offset;",
          "1216:             }",
          "1219:             proto_tree_add_text(tree, tvb, offset, tokenlen, \"NAL unit 1 string: %s\", data_p);",
          "",
          "[Removed Lines]",
          "1218:             data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1218:             data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1235:                     offset   = comma_offset +1;",
          "1236:                     tokenlen = end_offset - offset;",
          "1238:                     proto_tree_add_text(tree, tvb, offset, tokenlen, \"NAL unit 2 string: %s\", data_p);",
          "1239:                     data_tvb = base64_to_tvb(tvb, data_p);",
          "1240:                     add_new_data_source(pinfo, data_tvb, \"h264 prop-parameter-sets 2\");",
          "",
          "[Removed Lines]",
          "1237:                     data_p   = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1237:                     data_p   = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1314:     tokenlen = colon_offset - offset;",
          "1315:     proto_tree_add_item(sdp_media_attribute_tree,",
          "1316:                         hf_media_attribute_field,",
          "1319:     sdp_media_attrbute_code = find_sdp_media_attribute_names(tvb, offset, tokenlen);",
          "",
          "[Removed Lines]",
          "1317:                         tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1317:                         tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1324:     offset = tvb_skip_wsp(tvb, offset, tvb_length_remaining(tvb, offset));",
          "",
          "[Removed Lines]",
          "1327:     attribute_value = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tvb_length_remaining(tvb, offset), ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1327:     attribute_value = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tvb_length_remaining(tvb, offset), ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1342:             tokenlen = next_offset - offset;",
          "1344:             proto_tree_add_item(sdp_media_attribute_tree, hf_media_format, tvb,",
          "1349:             offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "1345:                                 offset, tokenlen, ENC_ASCII|ENC_NA);",
          "1347:             payload_type = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1345:                                 offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "1347:             payload_type = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1357:             tokenlen = next_offset - offset;",
          "1359:             proto_tree_add_item(sdp_media_attribute_tree, hf_media_encoding_name, tvb,",
          "1362:             pt = atoi((char*)payload_type);",
          "1363:             if (pt >= SDP_NO_OF_PT) {",
          "",
          "[Removed Lines]",
          "1360:                                 offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1360:                                 offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1367:             key  = wmem_new(wmem_file_scope(), gint);",
          "1372:             next_offset =  next_offset + 1;",
          "1373:             offset = next_offset;",
          "",
          "[Removed Lines]",
          "1370:             transport_info->encoding_name[pt] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "1370:             transport_info->encoding_name[pt] = (char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1378:             }",
          "1379:             tokenlen = next_offset - offset;",
          "1380:             proto_tree_add_item(sdp_media_attribute_tree, hf_media_sample_rate, tvb,",
          "1384:                For example:",
          "",
          "[Removed Lines]",
          "1381:                                 offset, tokenlen, ENC_ASCII|ENC_NA);",
          "1382:             transport_info->sample_rate[pt] = atoi(tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8));",
          "",
          "[Added Lines]",
          "1381:                                 offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "1382:             transport_info->sample_rate[pt] = atoi(tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1442:                 media_format_item = proto_tree_add_item(sdp_media_attribute_tree,",
          "1443:                                                         hf_media_format, tvb, offset,",
          "1446:                 if (media_format >= SDP_NO_OF_PT) {",
          "1448:                 }",
          "",
          "[Removed Lines]",
          "1444:                                                         tokenlen, ENC_ASCII|ENC_NA);",
          "1445:                 media_format = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8));",
          "",
          "[Added Lines]",
          "1444:                                                         tokenlen, ENC_UTF_8|ENC_NA);",
          "1445:                 media_format = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1470:                     tokenlen = next_offset - offset;",
          "1471:                     fmtp_item = proto_tree_add_item(sdp_media_attribute_tree,",
          "1472:                                                     hf_media_format_specific_parameter, tvb,",
          "1475:                     fmtp_tree = proto_item_add_subtree(fmtp_item, ett_sdp_fmtp);",
          "",
          "[Removed Lines]",
          "1473:                                                     offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1473:                                                     offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1517:                         port_end_offset = tvb_find_guint8(tvb, port_offset, -1, ';');",
          "1518:                     }",
          "1521:                                    &media_info->msrp_ipaddr)) {",
          "1525:                         media_info->msrp_transport_address_set = TRUE;",
          "1526:                     }",
          "",
          "[Removed Lines]",
          "1520:                     if (str_to_ip((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, address_offset, port_offset-address_offset, ENC_UTF_8),",
          "1523:                         media_info->msrp_port_number = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, port_offset + 1, port_end_offset - port_offset - 1, ENC_UTF_8));",
          "",
          "[Added Lines]",
          "1520:                     if (str_to_ip((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, address_offset, port_offset-address_offset, ENC_UTF_8|ENC_NA),",
          "1523:                         media_info->msrp_port_number = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, port_offset + 1, port_end_offset - port_offset - 1, ENC_UTF_8|ENC_NA));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1586:             }",
          "1587:             tokenlen    = next_offset - offset;",
          "1588:             proto_tree_add_uint(sdp_media_attribute_tree, hf_sdp_crypto_tag, tvb, offset, tokenlen,",
          "1590:             offset = next_offset + 1;",
          "",
          "[Removed Lines]",
          "1589:                 atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8)));",
          "",
          "[Added Lines]",
          "1589:                 atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA)));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1597:             }",
          "1598:             tokenlen    = next_offset - offset;",
          "1599:             parameter_item = proto_tree_add_item(sdp_media_attribute_tree, hf_sdp_crypto_crypto_suite,",
          "1601:             if (tvb_strncaseeql(tvb, offset, \"AES_CM_128_HMAC_SHA1_80\", tokenlen) == 0) {",
          "",
          "[Removed Lines]",
          "1600:                 tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1600:                 tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1663:                     } else {",
          "1664:                         tokenlen = next_offset - offset;",
          "1665:                     }",
          "1667:                     key_salt_tvb = base64_to_tvb(tvb, data_p);",
          "1668:                     add_new_data_source(pinfo, key_salt_tvb, \"Key_Salt_tvb\");",
          "1669:                     if (master_key_length != 0) {",
          "1670:                         proto_tree_add_text(parameter_tree, tvb, offset, tokenlen, \"Key and Salt\");",
          "1671:                         proto_tree_add_item(parameter_tree, hf_sdp_crypto_master_key,",
          "1673:                         proto_tree_add_item(parameter_tree, hf_sdp_crypto_master_salt,",
          "1675:                     } else {",
          "1676:                         proto_tree_add_text(parameter_tree, key_salt_tvb, 0, -1, \"Key and Salt\");",
          "1677:                     }",
          "",
          "[Removed Lines]",
          "1666:                     data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8);",
          "1672:                             key_salt_tvb, 0, master_key_length, ENC_ASCII|ENC_NA);",
          "1674:                             key_salt_tvb, master_key_length, master_salt_length, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1666:                     data_p = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "1672:                             key_salt_tvb, 0, master_key_length, ENC_UTF_8|ENC_NA);",
          "1674:                             key_salt_tvb, master_key_length, master_salt_length, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1690:                             tokenlen = next_offset - offset;",
          "1691:                             proto_tree_add_item(parameter_tree, hf_sdp_crypto_lifetime,",
          "1693:                             offset   = next_offset + 1;",
          "1694:                         }",
          "",
          "[Removed Lines]",
          "1692:                                 tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1692:                                 tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1703:                         }",
          "1704:                         if (next_offset != -1) {",
          "1705:                             tokenlen    = next_offset - offset;",
          "1707:                             offset      = next_offset + 1;",
          "",
          "[Removed Lines]",
          "1706:                             proto_tree_add_item(parameter_tree, hf_sdp_crypto_mki, tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1706:                             proto_tree_add_item(parameter_tree, hf_sdp_crypto_mki, tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1716:                             proto_tree_add_item(parameter_tree, hf_sdp_crypto_mki_length,",
          "1718:                         }",
          "1719:                     }",
          "1720:                     offset = param_end_offset;",
          "",
          "[Removed Lines]",
          "1715:                             transport_info->mki_len = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8));",
          "1717:                                 tvb, offset, tokenlen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1715:                             transport_info->mki_len = atoi((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tokenlen, ENC_UTF_8|ENC_NA));",
          "1717:                                 tvb, offset, tokenlen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1727:         default:",
          "1729:             proto_tree_add_item(sdp_media_attribute_tree, hf_media_attribute_value,",
          "1731:             break;",
          "1732:     }",
          "1733: }",
          "",
          "[Removed Lines]",
          "1730:                                 tvb, offset, -1, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "1730:                                 tvb, offset, -1, ENC_UTF_8|ENC_NA);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2334:         type  = tvb_get_guint8(tvb, offset);",
          "2335:         delim = tvb_get_guint8(tvb, offset + 1);",
          "2336:         if (delim != '=') {",
          "2338:             expert_add_info(pinfo, ti2, &ei_sdp_invalid_line);",
          "2339:             offset = next_offset;",
          "2340:             continue;",
          "",
          "[Removed Lines]",
          "2337:             proto_item *ti2 = proto_tree_add_item(sdp_tree, hf_invalid, tvb, offset, linelen, ENC_ASCII|ENC_NA);",
          "",
          "[Added Lines]",
          "2337:             proto_item *ti2 = proto_tree_add_item(sdp_tree, hf_invalid, tvb, offset, linelen, ENC_UTF_8|ENC_NA);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fa4a8e6b6b91d5f834586edadd2fefcb2f16642",
      "candidate_info": {
        "commit_hash": "9fa4a8e6b6b91d5f834586edadd2fefcb2f16642",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9fa4a8e6b6b91d5f834586edadd2fefcb2f16642",
        "files": [
          "asn1/acse/packet-acse-template.c",
          "asn1/ansi_tcap/packet-ansi_tcap-template.c",
          "asn1/gsm_map/packet-gsm_map-template.c",
          "asn1/h245/packet-h245-template.c",
          "asn1/kerberos/packet-kerberos-template.c",
          "epan/dissectors/packet-acse.c",
          "epan/dissectors/packet-ansi_tcap.c",
          "epan/dissectors/packet-gsm_map.c",
          "epan/dissectors/packet-h245.c"
        ],
        "message": "Convert a batch of asn1 dissectors from emem to wmem.\n\nsvn path=/trunk/; revision=50057",
        "before_after_code_files": [
          "asn1/acse/packet-acse-template.c||asn1/acse/packet-acse-template.c",
          "asn1/ansi_tcap/packet-ansi_tcap-template.c||asn1/ansi_tcap/packet-ansi_tcap-template.c",
          "asn1/gsm_map/packet-gsm_map-template.c||asn1/gsm_map/packet-gsm_map-template.c",
          "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
          "asn1/kerberos/packet-kerberos-template.c||asn1/kerberos/packet-kerberos-template.c",
          "epan/dissectors/packet-acse.c||epan/dissectors/packet-acse.c",
          "epan/dissectors/packet-ansi_tcap.c||epan/dissectors/packet-ansi_tcap.c",
          "epan/dissectors/packet-gsm_map.c||epan/dissectors/packet-gsm_map.c",
          "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
            "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c"
          ],
          "candidate": [
            "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c",
            "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/acse/packet-acse-template.c||asn1/acse/packet-acse-template.c": [
          "File: asn1/acse/packet-acse-template.c -> asn1/acse/packet-acse-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <glib.h>",
          "40: #include <epan/packet.h>",
          "42: #include <epan/expert.h>",
          "43: #include <epan/oids.h>",
          "44: #include <epan/asn1.h>",
          "",
          "[Removed Lines]",
          "41: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "41: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: register_ctx_id_and_oid(packet_info *pinfo _U_, guint32 idx, char *oid)",
          "126: {",
          "127:  acse_ctx_oid_t *aco, *tmpaco;",
          "129:  aco->ctx_id=idx;",
          "133:  tmpaco=(acse_ctx_oid_t *)g_hash_table_lookup(acse_ctx_oid_table, aco);",
          "",
          "[Removed Lines]",
          "128:  aco=se_alloc(sizeof(acse_ctx_oid_t));",
          "130:  aco->oid=se_strdup(oid);",
          "",
          "[Added Lines]",
          "128:  aco=wmem_new(wmem_file_scope(), acse_ctx_oid_t);",
          "130:  aco->oid=wmem_strdup(wmem_file_scope(), oid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:   if(session->spdu_type == 0 ) {",
          "187:    if(parent_tree){",
          "188:     REPORT_DISSECTOR_BUG(",
          "190:     return  ;",
          "191:    }",
          "192:   }",
          "",
          "[Removed Lines]",
          "189:      ep_strdup_printf(\"Wrong spdu type %x from session dissector.\",session->spdu_type));",
          "",
          "[Added Lines]",
          "189:      wmem_strdup_printf(wmem_packet_scope(), \"Wrong spdu type %x from session dissector.\",session->spdu_type));",
          "",
          "---------------"
        ],
        "asn1/ansi_tcap/packet-ansi_tcap-template.c||asn1/ansi_tcap/packet-ansi_tcap-template.c": [
          "File: asn1/ansi_tcap/packet-ansi_tcap-template.c -> asn1/ansi_tcap/packet-ansi_tcap-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <epan/packet.h>",
          "31: #include <epan/prefs.h>",
          "32: #include <epan/oids.h>",
          "34: #include <epan/asn1.h>",
          "35: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "33: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "33: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:           switch(ansi_tcap_response_matching_type){",
          "199:                         case 0:",
          "201:                                 break;",
          "202:                         case 1:",
          "204:                                 break;",
          "205:                         default:",
          "207:                                 break;",
          "208:                 }",
          "",
          "[Removed Lines]",
          "200:                                 buf = ep_strdup(ansi_tcap_private.TransactionID_str);",
          "203:                                 buf = ep_strdup_printf(\"%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src));",
          "206:                                 buf = ep_strdup_printf(\"%s%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src),ep_address_to_str(dst));",
          "",
          "[Added Lines]",
          "200:                                 buf = wmem_strdup(wmem_packet_scope(), ansi_tcap_private.TransactionID_str);",
          "203:                                 buf = wmem_strdup_printf(wmem_packet_scope(), \"%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src));",
          "206:                                 buf = wmem_strdup_printf(wmem_packet_scope(), \"%s%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src),ep_address_to_str(dst));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:           if(ansi_tcap_saved_invokedata)",
          "213:                   return;",
          "216:           ansi_tcap_saved_invokedata->OperationCode = ansi_tcap_private.d.OperationCode;",
          "217:           ansi_tcap_saved_invokedata->OperationCode_national = ansi_tcap_private.d.OperationCode_national;",
          "218:           ansi_tcap_saved_invokedata->OperationCode_private = ansi_tcap_private.d.OperationCode_private;",
          "220:           g_hash_table_insert(TransactionId_table,",
          "222:                         ansi_tcap_saved_invokedata);",
          "224:           g_warning(\"Tcap Invoke Hash string %s\",buf);",
          "",
          "[Removed Lines]",
          "215:           ansi_tcap_saved_invokedata = se_new(struct ansi_tcap_invokedata_t);",
          "221:                         se_strdup(buf),",
          "",
          "[Added Lines]",
          "215:           ansi_tcap_saved_invokedata = wmem_new(wmem_file_scope(), struct ansi_tcap_invokedata_t);",
          "221:                         wmem_strdup(wmem_file_scope(), buf),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   }",
          "242:   buf[0] = '\\0';",
          "244:   g_snprintf(buf, MAX_TID_STR_LEN, \"%s%s%s\",",
          "",
          "[Removed Lines]",
          "241:   buf = (char *)ep_alloc(MAX_TID_STR_LEN);",
          "",
          "[Added Lines]",
          "241:   buf = (char *)wmem_alloc(wmem_packet_scope(), MAX_TID_STR_LEN);",
          "",
          "---------------"
        ],
        "asn1/gsm_map/packet-gsm_map-template.c||asn1/gsm_map/packet-gsm_map-template.c": [
          "File: asn1/gsm_map/packet-gsm_map-template.c -> asn1/gsm_map/packet-gsm_map-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include <epan/packet.h>",
          "51: #include <epan/prefs.h>",
          "52: #include <epan/tap.h>",
          "54: #include <epan/oids.h>",
          "55: #include <epan/expert.h>",
          "",
          "[Removed Lines]",
          "53: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "53: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:  length = tvb_length(tvb);",
          "327:  if (length < offset)",
          "328:   return \"\";",
          "331:  while ( offset < length ){",
          "",
          "[Removed Lines]",
          "329:  digit_str = (char *)ep_alloc((length - offset)*2+1);",
          "",
          "[Added Lines]",
          "329:  digit_str = (char *)wmem_alloc(wmem_packet_scope(), (length - offset)*2+1);",
          "",
          "---------------"
        ],
        "asn1/h245/packet-h245-template.c||asn1/h245/packet-h245-template.c": [
          "File: asn1/h245/packet-h245-template.c -> asn1/h245/packet-h245-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <epan/prefs.h>",
          "44: #include <epan/t35.h>",
          "46: #include <epan/oids.h>",
          "47: #include <epan/asn1.h>",
          "48: #include <epan/tap.h>",
          "",
          "[Removed Lines]",
          "45: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "45: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323: static const gchar *gen_olc_key(guint16 lc_num, address *dst_addr, address *src_addr)",
          "324: {",
          "326: }",
          "328: static void update_unicast_addr(unicast_addr_t *req_addr, unicast_addr_t *ack_addr)",
          "",
          "[Removed Lines]",
          "325:   return ep_strdup_printf(\"%s/%s/%u\", ep_address_to_str(dst_addr), ep_address_to_str(src_addr), lc_num);",
          "",
          "[Added Lines]",
          "325:   return wmem_strdup_printf(wmem_packet_scope(), \"%s/%s/%u\", ep_address_to_str(dst_addr), ep_address_to_str(src_addr), lc_num);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:  if (upcoming_channel_lcl->rfc2198 > 0) {",
          "358:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
          "360:   encoding_name_and_rate->sample_rate = 8000;",
          "363:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
          "364:  }",
          "366:  if (upcoming_channel_lcl->srtp_flag) {",
          "368:  }",
          "",
          "[Removed Lines]",
          "357:   encoding_name_and_rate_t *encoding_name_and_rate = se_new(encoding_name_and_rate_t);",
          "359:   encoding_name_and_rate->encoding_name = se_strdup(\"red\");",
          "361:   key = se_new(gint);",
          "367:   dummy_srtp_info = se_new0(struct srtp_info);",
          "",
          "[Added Lines]",
          "357:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
          "359:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
          "361:   key = wmem_new(wmem_file_scope(), gint);",
          "367:   dummy_srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "433:  while ( tvb_length_remaining( tvb, offset>>3 )>0 ){",
          "434:   CLEANUP_PUSH(reset_h245_pi, NULL);",
          "436:   init_h245_packet_info(h245_pi);",
          "437:   asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, pinfo);",
          "438:   offset = dissect_h245_MultimediaSystemControlMessage(tvb, offset, &asn1_ctx, tr, hf_h245_pdu_type);",
          "",
          "[Removed Lines]",
          "435:   h245_pi=ep_new(h245_packet_info);",
          "",
          "[Added Lines]",
          "435:   h245_pi=wmem_new(wmem_packet_scope(), h245_packet_info);",
          "",
          "---------------"
        ],
        "asn1/kerberos/packet-kerberos-template.c||asn1/kerberos/packet-kerberos-template.c": [
          "File: asn1/kerberos/packet-kerberos-template.c -> asn1/kerberos/packet-kerberos-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #include <epan/strutil.h>",
          "80: #include <epan/conversation.h>",
          "82: #include <epan/asn1.h>",
          "83: #include <epan/expert.h>",
          "84: #include <epan/prefs.h>",
          "",
          "[Removed Lines]",
          "81: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-acse.c||epan/dissectors/packet-acse.c": [
          "File: epan/dissectors/packet-acse.c -> epan/dissectors/packet-acse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #include <glib.h>",
          "48: #include <epan/packet.h>",
          "50: #include <epan/expert.h>",
          "51: #include <epan/oids.h>",
          "52: #include <epan/asn1.h>",
          "",
          "[Removed Lines]",
          "49: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "49: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286: register_ctx_id_and_oid(packet_info *pinfo _U_, guint32 idx, char *oid)",
          "287: {",
          "288:  acse_ctx_oid_t *aco, *tmpaco;",
          "290:  aco->ctx_id=idx;",
          "294:  tmpaco=(acse_ctx_oid_t *)g_hash_table_lookup(acse_ctx_oid_table, aco);",
          "",
          "[Removed Lines]",
          "289:  aco=se_alloc(sizeof(acse_ctx_oid_t));",
          "291:  aco->oid=se_strdup(oid);",
          "",
          "[Added Lines]",
          "289:  aco=wmem_new(wmem_file_scope(), acse_ctx_oid_t);",
          "291:  aco->oid=wmem_strdup(wmem_file_scope(), oid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1726:   if(session->spdu_type == 0 ) {",
          "1727:    if(parent_tree){",
          "1728:     REPORT_DISSECTOR_BUG(",
          "1730:     return  ;",
          "1731:    }",
          "1732:   }",
          "",
          "[Removed Lines]",
          "1729:      ep_strdup_printf(\"Wrong spdu type %x from session dissector.\",session->spdu_type));",
          "",
          "[Added Lines]",
          "1729:      wmem_strdup_printf(wmem_packet_scope(), \"Wrong spdu type %x from session dissector.\",session->spdu_type));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ansi_tcap.c||epan/dissectors/packet-ansi_tcap.c": [
          "File: epan/dissectors/packet-ansi_tcap.c -> epan/dissectors/packet-ansi_tcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <epan/packet.h>",
          "39: #include <epan/prefs.h>",
          "40: #include <epan/oids.h>",
          "42: #include <epan/asn1.h>",
          "43: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "41: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "41: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:           switch(ansi_tcap_response_matching_type){",
          "290:                         case 0:",
          "292:                                 break;",
          "293:                         case 1:",
          "295:                                 break;",
          "296:                         default:",
          "298:                                 break;",
          "299:                 }",
          "",
          "[Removed Lines]",
          "291:                                 buf = ep_strdup(ansi_tcap_private.TransactionID_str);",
          "294:                                 buf = ep_strdup_printf(\"%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src));",
          "297:                                 buf = ep_strdup_printf(\"%s%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src),ep_address_to_str(dst));",
          "",
          "[Added Lines]",
          "291:                                 buf = wmem_strdup(wmem_packet_scope(), ansi_tcap_private.TransactionID_str);",
          "294:                                 buf = wmem_strdup_printf(wmem_packet_scope(), \"%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src));",
          "297:                                 buf = wmem_strdup_printf(wmem_packet_scope(), \"%s%s%s\",ansi_tcap_private.TransactionID_str,ep_address_to_str(src),ep_address_to_str(dst));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:           if(ansi_tcap_saved_invokedata)",
          "304:                   return;",
          "307:           ansi_tcap_saved_invokedata->OperationCode = ansi_tcap_private.d.OperationCode;",
          "308:           ansi_tcap_saved_invokedata->OperationCode_national = ansi_tcap_private.d.OperationCode_national;",
          "309:           ansi_tcap_saved_invokedata->OperationCode_private = ansi_tcap_private.d.OperationCode_private;",
          "311:           g_hash_table_insert(TransactionId_table,",
          "313:                         ansi_tcap_saved_invokedata);",
          "315:           g_warning(\"Tcap Invoke Hash string %s\",buf);",
          "",
          "[Removed Lines]",
          "306:           ansi_tcap_saved_invokedata = se_new(struct ansi_tcap_invokedata_t);",
          "312:                         se_strdup(buf),",
          "",
          "[Added Lines]",
          "306:           ansi_tcap_saved_invokedata = wmem_new(wmem_file_scope(), struct ansi_tcap_invokedata_t);",
          "312:                         wmem_strdup(wmem_file_scope(), buf),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:   }",
          "333:   buf[0] = '\\0';",
          "335:   g_snprintf(buf, MAX_TID_STR_LEN, \"%s%s%s\",",
          "",
          "[Removed Lines]",
          "332:   buf = (char *)ep_alloc(MAX_TID_STR_LEN);",
          "",
          "[Added Lines]",
          "332:   buf = (char *)wmem_alloc(wmem_packet_scope(), MAX_TID_STR_LEN);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_map.c||epan/dissectors/packet-gsm_map.c": [
          "File: epan/dissectors/packet-gsm_map.c -> epan/dissectors/packet-gsm_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #include <epan/packet.h>",
          "59: #include <epan/prefs.h>",
          "60: #include <epan/tap.h>",
          "62: #include <epan/oids.h>",
          "63: #include <epan/expert.h>",
          "",
          "[Removed Lines]",
          "61: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "61: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2522:  length = tvb_length(tvb);",
          "2523:  if (length < offset)",
          "2524:   return \"\";",
          "2527:  while ( offset < length ){",
          "",
          "[Removed Lines]",
          "2525:  digit_str = (char *)ep_alloc((length - offset)*2+1);",
          "",
          "[Added Lines]",
          "2525:  digit_str = (char *)wmem_alloc(wmem_packet_scope(), (length - offset)*2+1);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c": [
          "File: epan/dissectors/packet-h245.c -> epan/dissectors/packet-h245.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include <epan/prefs.h>",
          "52: #include <epan/t35.h>",
          "54: #include <epan/oids.h>",
          "55: #include <epan/asn1.h>",
          "56: #include <epan/tap.h>",
          "",
          "[Removed Lines]",
          "53: #include <epan/emem.h>",
          "",
          "[Added Lines]",
          "53: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454: static const gchar *gen_olc_key(guint16 lc_num, address *dst_addr, address *src_addr)",
          "455: {",
          "457: }",
          "459: static void update_unicast_addr(unicast_addr_t *req_addr, unicast_addr_t *ack_addr)",
          "",
          "[Removed Lines]",
          "456:   return ep_strdup_printf(\"%s/%s/%u\", ep_address_to_str(dst_addr), ep_address_to_str(src_addr), lc_num);",
          "",
          "[Added Lines]",
          "456:   return wmem_strdup_printf(wmem_packet_scope(), \"%s/%s/%u\", ep_address_to_str(dst_addr), ep_address_to_str(src_addr), lc_num);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:  if (upcoming_channel_lcl->rfc2198 > 0) {",
          "489:   rtp_dyn_payload = g_hash_table_new(g_int_hash, g_int_equal);",
          "491:   encoding_name_and_rate->sample_rate = 8000;",
          "494:   g_hash_table_insert(rtp_dyn_payload, key, encoding_name_and_rate);",
          "495:  }",
          "497:  if (upcoming_channel_lcl->srtp_flag) {",
          "499:  }",
          "",
          "[Removed Lines]",
          "488:   encoding_name_and_rate_t *encoding_name_and_rate = se_new(encoding_name_and_rate_t);",
          "490:   encoding_name_and_rate->encoding_name = se_strdup(\"red\");",
          "492:   key = se_new(gint);",
          "498:   dummy_srtp_info = se_new0(struct srtp_info);",
          "",
          "[Added Lines]",
          "488:   encoding_name_and_rate_t *encoding_name_and_rate = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);",
          "490:   encoding_name_and_rate->encoding_name = wmem_strdup(wmem_file_scope(), \"red\");",
          "492:   key = wmem_new(wmem_file_scope(), gint);",
          "498:   dummy_srtp_info = wmem_new0(wmem_file_scope(), struct srtp_info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "14528:  while ( tvb_length_remaining( tvb, offset>>3 )>0 ){",
          "14529:   CLEANUP_PUSH(reset_h245_pi, NULL);",
          "14531:   init_h245_packet_info(h245_pi);",
          "14532:   asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, pinfo);",
          "14533:   offset = dissect_h245_MultimediaSystemControlMessage(tvb, offset, &asn1_ctx, tr, hf_h245_pdu_type);",
          "",
          "[Removed Lines]",
          "14530:   h245_pi=ep_new(h245_packet_info);",
          "",
          "[Added Lines]",
          "14530:   h245_pi=wmem_new(wmem_packet_scope(), h245_packet_info);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ff31ef33d11697c773a2f21126f0fe4d26ebf62",
      "candidate_info": {
        "commit_hash": "5ff31ef33d11697c773a2f21126f0fe4d26ebf62",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5ff31ef33d11697c773a2f21126f0fe4d26ebf62",
        "files": [
          "epan/dissectors/packet-ansi_a.c"
        ],
        "message": "Remove some global variables.  Bug 9471 (https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=9471)\n\nFrom Michael Lum\nFrom me: Remove a few proto_item* NULL checks because it's done by the underlying function.\n\nsvn path=/trunk/; revision=54676",
        "before_after_code_files": [
          "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c"
          ],
          "candidate": [
            "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c": [
          "File: epan/dissectors/packet-ansi_a.c -> epan/dissectors/packet-ansi_a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "946: static int proto_a_bsmap = -1;",
          "947: static int proto_a_dtap = -1;",
          "952: const ext_value_string_t *ansi_a_bsmap_strings = NULL;",
          "953: const ext_value_string_t *ansi_a_dtap_strings = NULL;",
          "954: const ext_value_string_t *ansi_a_elem_1_strings = NULL;",
          "",
          "[Removed Lines]",
          "950: static proto_item *ansi_a_message_item = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388: typedef struct ansi_a_dgt_set_t",
          "1389: {",
          "",
          "[Removed Lines]",
          "1380: static proto_tree *g_tree;",
          "1381: static address rtp_src_addr;",
          "1382: static guint32 rtp_ipv4_addr;",
          "1383: static struct e_in6_addr rtp_ipv6_addr;",
          "1384: static guint16 rtp_port;",
          "1385: static gboolean a_meid_configured = FALSE;",
          "",
          "[Added Lines]",
          "1378: typedef struct ansi_a_shared_data_t",
          "1379: {",
          "1383:     proto_tree          *g_tree;",
          "1389:     proto_item          *message_item;",
          "1390:     proto_item          *elem_item;",
          "1396:     gboolean            is_reverse;",
          "1401:     gboolean            from_sip;",
          "1403:     address             rtp_src_addr;",
          "1404:     guint32             rtp_ipv4_addr;",
          "1405:     struct e_in6_addr   rtp_ipv6_addr;",
          "1406:     guint16             rtp_port;",
          "1408:     gboolean            meid_configured;",
          "1409: }",
          "1410: ansi_a_shared_data_t;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1441: static int",
          "1442: my_dgt_tbcd_unpack(",
          "1447:     )",
          "1448: {",
          "1452:     while (num_octs)",
          "1453:     {",
          "",
          "[Removed Lines]",
          "1449:     int cnt = 0;",
          "1450:     unsigned char i;",
          "",
          "[Added Lines]",
          "1473:     int                 cnt = 0;",
          "1474:     unsigned char       i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1690: static void",
          "1691: content_fill_aux(",
          "1703:     proto_tree_add_item(tree, hf_content, tvb, offset, content_len, ENC_NA);",
          "",
          "[Removed Lines]",
          "1692:     tvbuff_t    *tvb,",
          "1693:     proto_tree  *tree,",
          "1694:     guint32     offset,",
          "1695:     guint8      content_len,",
          "1696:     guint8      fill_bits,",
          "1697:     int         hf_content,",
          "1698:     int         hf_content_fill_bits)",
          "1699: {",
          "1700:     static guint8   lo_masks[8] = { 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff };",
          "1701:     guint8      oct;",
          "",
          "[Added Lines]",
          "1716:     tvbuff_t            *tvb,",
          "1717:     proto_tree          *tree,",
          "1718:     guint32             offset,",
          "1719:     guint8              content_len,",
          "1720:     guint8              fill_bits,",
          "1721:     int                 hf_content,",
          "1722:     int                 hf_content_fill_bits)",
          "1723: {",
          "1724:     static guint8       lo_masks[8] = { 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff };",
          "1725:     guint8              oct;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1736:         return(curr_offset - offset); \\",
          "1737:     }",
          "1748: #define NO_MORE_DATA_CHECK(nmdc_len) \\",
          "1749:     if ((nmdc_len) == (curr_offset - offset)) return(nmdc_len);",
          "",
          "[Removed Lines]",
          "1739: #define EXACT_DATA_CHECK(edc_len, edc_eq_len) \\",
          "1740:     if ((edc_len) != (edc_eq_len)) \\",
          "1741:     { \\",
          "1742:         proto_tree_add_text(tree, tvb, \\",
          "1743:             asn1->offset, (edc_len), \"Unexpected Data Length\"); \\",
          "1744:         asn1->offset += (edc_len); \\",
          "1745:         return; \\",
          "1746:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1755: static guint8",
          "1757: {",
          "1758:     guint32     value;",
          "1759:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1756: elem_chan_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "1771: elem_chan_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1767:     case A_VARIANT_IOS401:",
          "1768:         proto_tree_add_item(tree, hf_ansi_a_channel_number, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "1771:         break;",
          "1773:     case A_VARIANT_IOS501:",
          "1774:         proto_tree_add_item(tree, hf_ansi_a_reserved_bits_16_f800, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "1775:         proto_tree_add_item(tree, hf_ansi_a_IOS5_channel_number, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "1778:         break;",
          "1779:     }",
          "",
          "[Removed Lines]",
          "1770:         g_snprintf(add_string, string_len, \" - (%u)\", value);",
          "1777:         g_snprintf(add_string, string_len, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "[Added Lines]",
          "1785:         proto_item_append_text(data_p->elem_item, \" - (%u)\", value);",
          "1792:         proto_item_append_text(data_p->elem_item, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1818: };",
          "1820: static guint8",
          "1822: {",
          "1823:     guint8      oct;",
          "1824:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1821: elem_chan_type(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "1836: elem_chan_type(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1830:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1833:         val_to_str_const(oct, ansi_a_speech_or_data_indicator_vals, \"Unknown\"));",
          "1835:     curr_offset++;",
          "",
          "[Removed Lines]",
          "1832:     g_snprintf(add_string, string_len, \" - (%s)\",",
          "",
          "[Added Lines]",
          "1847:     proto_item_append_text(data_p->elem_item, \" - (%s)\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1875: };",
          "1877: static guint8",
          "1879: {",
          "1880:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1878: elem_return_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "1893: elem_return_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1904: };",
          "1906: static guint8",
          "1908: {",
          "1909:     guint32     value;",
          "1910:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1907: elem_rf_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "1922: elem_rf_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1932:     value = tvb_get_ntohs(tvb, curr_offset);",
          "1936:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "1934:     g_snprintf(add_string, string_len, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "[Added Lines]",
          "1949:     proto_item_append_text(data_p->elem_item, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1946: static guint8",
          "1948: {",
          "1949:     guint8      oct;",
          "1950:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1947: elem_sr_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "1962: elem_sr_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1957:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1961:     curr_offset++;",
          "",
          "[Removed Lines]",
          "1959:     g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "",
          "[Added Lines]",
          "1974:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1971: static guint8",
          "1973: {",
          "1974:     guint32     value;",
          "1975:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "1972: elem_sid(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "1987: elem_sid(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1982:     value = tvb_get_ntohs(tvb, curr_offset);",
          "1986:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "1984:     g_snprintf(add_string, string_len, \" - (SID: %u)\", value & 0x7fff);",
          "",
          "[Added Lines]",
          "1999:     proto_item_append_text(data_p->elem_item, \" - (SID: %u)\", value & 0x7fff);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1996: static guint8",
          "1998: {",
          "1999:     guint8      oct;",
          "2000:     guint8      num_chans;",
          "",
          "[Removed Lines]",
          "1997: elem_is95_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2012: elem_is95_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2051:             {",
          "2052:                 value = tvb_get_ntohs(tvb, curr_offset + 1);",
          "2055:             }",
          "2057:             curr_offset += 3;",
          "",
          "[Removed Lines]",
          "2050:             if (add_string[0] == '\\0')",
          "2054:                 g_snprintf(add_string, string_len, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "[Added Lines]",
          "2065:             if (chan_num == 0)",
          "2069:                 proto_item_append_text(data_p->elem_item, \" - (ARFCN: %u)\", value & 0x07ff);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2100: };",
          "2102: static guint8",
          "2104: {",
          "2105:     guint8      oct;",
          "2106:     guint32     curr_offset, saved_offset;",
          "",
          "[Removed Lines]",
          "2103: elem_enc_info(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2118: elem_enc_info(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2160:         num_recs++;",
          "2161:     }",
          "2166:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "2163:     g_snprintf(add_string, string_len, \" - %u record%s\",",
          "2164:         num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "2178:     proto_item_append_text(data_p->elem_item, \" - %u record%s\", num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2235: };",
          "2237: static guint8",
          "2239: {",
          "2240:     guint8      oct;",
          "2241:     guint8      num_bands, band_class_count, band_class_entry_len, p_rev;",
          "",
          "[Removed Lines]",
          "2238: elem_cm_info_type_2(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2252: elem_cm_info_type_2(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2254:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2258:     curr_offset++;",
          "",
          "[Removed Lines]",
          "2256:     g_snprintf(add_string, string_len, \" - P_REV (%u)\", (oct & 0xe0) >> 5);",
          "",
          "[Added Lines]",
          "2270:     proto_item_append_text(data_p->elem_item, \" - P_REV (%u)\", (oct & 0xe0) >> 5);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2314:     if (oct & 0x10)",
          "2315:     {",
          "2318:     }",
          "2320:     curr_offset++;",
          "",
          "[Removed Lines]",
          "2316:         g_strlcat(add_string, \" (MEID configured)\", string_len);",
          "2317:         a_meid_configured = TRUE;",
          "",
          "[Added Lines]",
          "2330:         proto_item_append_text(data_p->elem_item, \" (MEID configured)\");",
          "2331:         data_p->meid_configured = TRUE;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2435: };",
          "2437: static guint8",
          "2439: {",
          "2440:     guint8      oct;",
          "2441:     guint8      *poctets;",
          "",
          "[Removed Lines]",
          "2438: elem_mid(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2452: elem_mid(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2469:             \"%s\",",
          "2470:             a_bigbuf);",
          "2474:         break;",
          "",
          "[Removed Lines]",
          "2472:         g_snprintf(add_string, string_len, \" - MEID (%s)\",",
          "2473:             a_bigbuf);",
          "",
          "[Added Lines]",
          "2486:         proto_item_append_text(data_p->elem_item, \" - MEID (%s)\", a_bigbuf);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2489:         oct = tvb_get_guint8(tvb, curr_offset);",
          "2493:         curr_offset++;",
          "",
          "[Removed Lines]",
          "2491:         g_snprintf(add_string, string_len, \" - Broadcast (Zone ID: %u)\", oct);",
          "",
          "[Added Lines]",
          "2504:         proto_item_append_text(data_p->elem_item, \" - Broadcast (Zone ID: %u)\", oct);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2530:             tvb, curr_offset, 4,",
          "2531:             value);",
          "2535:             value);",
          "2537:         curr_offset += 4;",
          "",
          "[Removed Lines]",
          "2533:         g_snprintf(add_string, string_len, \" - %sESN (0x%04x)\",",
          "2534:             a_meid_configured ? \"p\" : \"\",",
          "",
          "[Added Lines]",
          "2546:         proto_item_append_text(data_p->elem_item, \" - %sESN (0x%04x)\",",
          "2547:             data_p->meid_configured ? \"p\" : \"\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2557:             \"BCD Digits: %s\",",
          "2558:             a_bigbuf);",
          "2562:         if (global_a_info_display)",
          "2563:         {",
          "2564:             col_append_fstr(pinfo->cinfo, COL_INFO, \"MID=%s \", a_bigbuf);",
          "",
          "[Removed Lines]",
          "2560:         g_snprintf(add_string, string_len, \" - IMSI (%s)\", a_bigbuf);",
          "2561:         proto_item_append_text(ansi_a_message_item, \" MID=%s\", a_bigbuf);",
          "",
          "[Added Lines]",
          "2573:         proto_item_append_text(data_p->elem_item, \" - IMSI (%s)\", a_bigbuf);",
          "2574:         proto_item_append_text(data_p->message_item, \" MID=%s\", a_bigbuf);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2572:             \"Mobile Identity ID type, %u, unknown/unsupported\",",
          "2573:             (oct & 0x07));",
          "2577:         curr_offset += len;",
          "2578:         break;",
          "",
          "[Removed Lines]",
          "2575:         g_snprintf(add_string, string_len, \" - Format Unknown/Unsupported\");",
          "",
          "[Added Lines]",
          "2589:         proto_item_append_text(data_p->elem_item, \" - Format Unknown/Unsupported\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2591: static guint8",
          "2593: {",
          "2594:     guint8      oct;",
          "2595:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2592: elem_sci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2606: elem_sci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2604:     proto_tree_add_uint_format_value(tree, hf_ansi_a_sci, tvb, curr_offset, 1,",
          "2605:         oct, \"%s%u\", (oct & 0x08) ? \"-\" : \"\", oct & 0x07);",
          "2608:         (oct & 0x08) ? \"-\" : \"\", oct & 0x07);",
          "2610:     curr_offset++;",
          "",
          "[Removed Lines]",
          "2607:     g_snprintf(add_string, string_len, \" - (%s%u)\",",
          "",
          "[Added Lines]",
          "2621:     proto_item_append_text(data_p->elem_item, \" - (%s%u)\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2622: static guint8",
          "2624: {",
          "2625:     guint8      oct;",
          "2626:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2623: elem_prio(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2637: elem_prio(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2637:     proto_tree_add_item(tree, hf_ansi_a_prio_queue_allowed, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2638:     proto_tree_add_item(tree, hf_ansi_a_prio_preempt_allowed, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2642:     curr_offset++;",
          "",
          "[Removed Lines]",
          "2640:     g_snprintf(add_string, string_len, \" - (%u)\", (oct & 0x3c) >> 2);",
          "",
          "[Added Lines]",
          "2654:     proto_item_append_text(data_p->elem_item, \" - (%u)\", (oct & 0x3c) >> 2);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2652: static guint8",
          "2654: {",
          "2655:     guint8      oct;",
          "2656:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2653: elem_p_rev(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2667: elem_p_rev(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2662:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2666:     curr_offset++;",
          "",
          "[Removed Lines]",
          "2664:     g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "",
          "[Added Lines]",
          "2678:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2776: static value_string_ext ansi_a_elem_cause_vals_ext = VALUE_STRING_EXT_INIT(ansi_a_elem_cause_vals);",
          "2778: static guint8",
          "2780: {",
          "2781:     guint8      oct;",
          "2782:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2779: elem_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2793: elem_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2804:         proto_tree_add_uint_format_value(tree, hf_ansi_a_cause_1, tvb, curr_offset, 1, oct,",
          "2805:             \"%s (%u)\", str, oct & 0x7f);",
          "2809:         curr_offset++;",
          "2810:     }",
          "",
          "[Removed Lines]",
          "2807:         g_snprintf(add_string, string_len, \" - (%u) %s\", oct & 0x7f, str);",
          "",
          "[Added Lines]",
          "2821:         proto_item_append_text(data_p->elem_item, \" - (%u) %s\", oct & 0x7f, str);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2821: static guint8",
          "2823: {",
          "2824:     guint32     value;",
          "2825:     guint32     market_id;",
          "",
          "[Removed Lines]",
          "2822: elem_cell_id_aux(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len, guint8 disc)",
          "",
          "[Added Lines]",
          "2836: elem_cell_id_aux(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, guint8 disc, proto_item *parent_item_p)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2833:     case 0x02:",
          "2834:         value = tvb_get_ntohs(tvb, curr_offset);",
          "2839:         curr_offset += 2;",
          "2842:         break;",
          "2844:     case 0x05:",
          "2845:         value = tvb_get_ntohs(tvb, curr_offset);",
          "2850:         curr_offset += 2;",
          "2853:         break;",
          "2855:     case 0x07:",
          "",
          "[Removed Lines]",
          "2836:         proto_tree_add_uint(tree, hf_ansi_a_cell_ci, tvb,",
          "2837:             curr_offset, 2, value);",
          "2841:         g_snprintf(add_string, string_len, \" - CI (%u)\", value);",
          "2847:         proto_tree_add_uint(tree, hf_ansi_a_cell_lac, tvb,",
          "2848:             curr_offset, 2, value);",
          "2852:         g_snprintf(add_string, string_len, \" - LAC (%u)\", value);",
          "",
          "[Added Lines]",
          "2850:         proto_tree_add_uint(tree, hf_ansi_a_cell_ci, tvb, curr_offset, 2, value);",
          "2854:         proto_item_append_text(parent_item_p, \" - CI (%u)\", value);",
          "2860:         proto_tree_add_uint(tree, hf_ansi_a_cell_lac, tvb, curr_offset, 2, value);",
          "2864:         proto_item_append_text(parent_item_p, \" - LAC (%u)\", value);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2859:         value = tvb_get_ntoh24(tvb, curr_offset);",
          "2863:             \"Market ID %u  Switch Number %u\",",
          "2864:             market_id, switch_num);",
          "",
          "[Removed Lines]",
          "2861:         proto_tree_add_uint_format(tree, hf_ansi_a_cell_mscid, tvb,",
          "2862:             curr_offset, 3, value,",
          "",
          "[Added Lines]",
          "2873:         proto_tree_add_uint_format(tree, hf_ansi_a_cell_mscid, tvb, curr_offset, 3,",
          "2874:             value,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2868:         value = tvb_get_ntohs(tvb, curr_offset);",
          "2873:         curr_offset += 2;",
          "2879:         break;",
          "2881:     default:",
          "",
          "[Removed Lines]",
          "2870:         proto_tree_add_uint(tree, hf_ansi_a_cell_ci, tvb,",
          "2871:             curr_offset, 2, value);",
          "2875:         g_snprintf(add_string, string_len, \" - Market ID (%u) Switch Number (%u) CI (%u)\",",
          "2876:             market_id,",
          "2877:             switch_num,",
          "2878:             value);",
          "",
          "[Added Lines]",
          "2882:         proto_tree_add_uint(tree, hf_ansi_a_cell_ci, tvb, curr_offset, 2, value);",
          "2886:         proto_item_append_text(parent_item_p, \" - Market ID (%u) Switch Number (%u) CI (%u)\",",
          "2887:                 market_id, switch_num, value);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2890: }",
          "2892: static guint8",
          "2894: {",
          "2895:     guint8      oct;",
          "2896:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2893: elem_cell_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2902: elem_cell_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2902:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2906:     curr_offset +=",
          "",
          "[Removed Lines]",
          "2904:     curr_offset++;",
          "2907:         elem_cell_id_aux(tvb, pinfo, tree, curr_offset, len - (curr_offset - offset), add_string, string_len, oct);",
          "",
          "[Added Lines]",
          "2913:     curr_offset += 1;",
          "2916:         elem_cell_id_aux(tvb, pinfo, tree, curr_offset, len - (curr_offset - offset), oct, data_p->elem_item);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2917: static guint8",
          "2919: {",
          "2920:     guint8      oct;",
          "2921:     guint16     consumed;",
          "",
          "[Removed Lines]",
          "2918: elem_cell_id_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2927: elem_cell_id_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2946:         subtree = proto_item_add_subtree(item, ett_cell_list);",
          "2949:         consumed =",
          "2957:         proto_item_set_len(item, consumed);",
          "",
          "[Removed Lines]",
          "2948:         add_string[0] = '\\0';",
          "2950:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), add_string, string_len, oct);",
          "2952:         if (add_string[0] != '\\0')",
          "2953:         {",
          "2954:             proto_item_append_text(item, \"%s\", add_string);",
          "2955:         }",
          "",
          "[Added Lines]",
          "2958:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), oct, item);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2962:     }",
          "2963:     while ((len - (curr_offset - offset)) > 0);",
          "2968:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "2965:     g_snprintf(add_string, string_len, \" - %u cell%s\",",
          "2966:         num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "2968:     proto_item_append_text(data_p->elem_item, \" - %u cell%s\", num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2976: static guint8",
          "2978: {",
          "2979:     guint32     value;",
          "2980:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "2977: elem_cic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "2979: elem_cic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2994:     value = tvb_get_ntohs(tvb, curr_offset);",
          "2998:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "2996:     g_snprintf(add_string, string_len, \" - (%u) (0x%04x)\", value, value);",
          "",
          "[Added Lines]",
          "2998:     proto_item_append_text(data_p->elem_item, \" - (%u) (0x%04x)\", value, value);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3008: static guint8",
          "3010: {",
          "3011:     guint8      oct;",
          "3012:     guint32     value;",
          "",
          "[Removed Lines]",
          "3009: elem_cic_ext(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3011: elem_cic_ext(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3028:     value = tvb_get_ntohs(tvb, curr_offset);",
          "3032:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "3030:     g_snprintf(add_string, string_len, \" - (%u) (0x%04x)\", value, value);",
          "",
          "[Added Lines]",
          "3032:     proto_item_append_text(data_p->elem_item, \" - (%u) (0x%04x)\", value, value);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3059: static guint8",
          "3061: {",
          "3062:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3060: elem_ssci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3062: elem_ssci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3088: static guint8",
          "3090: {",
          "3091:     guint8      disc;",
          "3092:     guint16     consumed;",
          "",
          "[Removed Lines]",
          "3089: elem_downlink_re_aux(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3091: elem_downlink_re_aux(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, proto_item *parent_item_p)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3103:     num_cells = tvb_get_guint8(tvb, curr_offset);",
          "3107:     NO_MORE_DATA_CHECK(len);",
          "",
          "[Removed Lines]",
          "3105:     curr_offset++;",
          "",
          "[Added Lines]",
          "3107:     curr_offset += 1;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3111:     disc = tvb_get_guint8(tvb, curr_offset);",
          "3115:     NO_MORE_DATA_CHECK(len);",
          "",
          "[Removed Lines]",
          "3113:     curr_offset++;",
          "",
          "[Added Lines]",
          "3115:     curr_offset += 1;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3128:         subtree = proto_item_add_subtree(item, ett_cell_list);",
          "3131:         consumed =",
          "3140:         proto_item_set_len(item, consumed);",
          "",
          "[Removed Lines]",
          "3130:         add_string[0] = '\\0';",
          "3132:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset,",
          "3133:                 len - (curr_offset - offset), add_string, string_len, disc);",
          "3135:         if (add_string[0] != '\\0')",
          "3136:         {",
          "3137:             proto_item_append_text(item, \"%s\", add_string);",
          "3138:         }",
          "",
          "[Added Lines]",
          "3133:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), disc, item);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3144:         proto_tree_add_item(tree, hf_ansi_a_reserved_bits_8_c0, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3145:         proto_tree_add_item(tree, hf_ansi_a_downlink_re_sig_str_raw, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3149:         proto_tree_add_item(tree, hf_ansi_a_downlink_re_cdma_towd, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "3147:         curr_offset++;",
          "",
          "[Added Lines]",
          "3142:         curr_offset += 1;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3154:     }",
          "3155:     while (curr_cell < num_cells);",
          "3160:     return(curr_offset - offset);",
          "3161: }",
          "",
          "[Removed Lines]",
          "3157:     g_snprintf(add_string, string_len, \" - %u cell%s\",",
          "3158:         num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "3152:     proto_item_append_text(parent_item_p, \" - %u cell%s\", num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3166: static guint8",
          "3168: {",
          "3169:     guint32     curr_offset;",
          "3171:     curr_offset = offset;",
          "3173:     curr_offset +=",
          "3176:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "3167: elem_downlink_re(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "3174:         elem_downlink_re_aux(tvb, pinfo, tree, offset, len, add_string, string_len);",
          "",
          "[Added Lines]",
          "3161: elem_downlink_re(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "3168:         elem_downlink_re_aux(tvb, pinfo, tree, offset, len, data_p->elem_item);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3184: static guint8",
          "3186: {",
          "3187:     guint16     consumed;",
          "3188:     guint8      num_envs;",
          "",
          "[Removed Lines]",
          "3185: elem_downlink_re_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3179: elem_downlink_re_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3208:         curr_offset++;",
          "3211:         consumed =",
          "",
          "[Removed Lines]",
          "3210:         add_string[0] = '\\0';",
          "3212:             elem_downlink_re_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), add_string, string_len);",
          "3214:         if (add_string[0] != '\\0')",
          "3215:         {",
          "3216:             proto_item_append_text(item, \"%s\", add_string);",
          "3217:         }",
          "",
          "[Added Lines]",
          "3205:             elem_downlink_re_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), item);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3226:         num_envs++;",
          "3227:     }",
          "3232:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "3229:     g_snprintf(add_string, string_len, \" - %u environment%s\",",
          "3230:         num_envs, plurality(num_envs, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "3217:     proto_item_append_text(data_p->elem_item, \" - %u environment%s\", num_envs, plurality(num_envs, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3260: static guint8",
          "3262: {",
          "3263:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3261: elem_pdsn_ip_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3248: elem_pdsn_ip_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3279: static guint8",
          "3281: {",
          "3282:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3280: elem_s_pdsn_ip_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3267: elem_s_pdsn_ip_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3300: static guint8",
          "3302: {",
          "3303:     guint16     consumed;",
          "3304:     guint8      num_cells;",
          "",
          "[Removed Lines]",
          "3301: elem_ho_pow_lev(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3288: elem_ho_pow_lev(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3327:     subtree = proto_item_add_subtree(item, ett_cell_list);",
          "3330:     consumed =",
          "3339:     proto_item_set_len(item, consumed);",
          "",
          "[Removed Lines]",
          "3329:     add_string[0] = '\\0';",
          "3331:         elem_cell_id_aux(tvb, pinfo, subtree, curr_offset,",
          "3332:             len - (curr_offset - offset), add_string, string_len, 0x7);",
          "3334:     if (add_string[0] != '\\0')",
          "3335:     {",
          "3336:         proto_item_append_text(item, \"%s\", add_string);",
          "3337:     }",
          "",
          "[Added Lines]",
          "3317:         elem_cell_id_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), 0x7, item);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3357:         subtree = proto_item_add_subtree(item, ett_cell_list);",
          "3360:         consumed =",
          "3369:         proto_item_set_len(item, consumed);",
          "",
          "[Removed Lines]",
          "3359:         add_string[0] = '\\0';",
          "3361:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset,",
          "3362:                 len - (curr_offset - offset), add_string, string_len, 0x2);",
          "3364:         if (add_string[0] != '\\0')",
          "3365:         {",
          "3366:             proto_item_append_text(item, \"%s\", add_string);",
          "3367:         }",
          "",
          "[Added Lines]",
          "3340:             elem_cell_id_aux(tvb, pinfo, subtree, curr_offset, len - (curr_offset - offset), 0x2, item);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3373:         num_cells++;",
          "3374:     }",
          "3379:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "3376:     g_snprintf(add_string, string_len, \" - %u cell%s\",",
          "3377:         num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "3349:     proto_item_append_text(data_p->elem_item, \" - %u cell%s\", num_cells, plurality(num_cells, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3387: static guint8",
          "3389: {",
          "3390:     guint32     value;",
          "3391:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3388: elem_uz_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3360: elem_uz_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3397:     value = tvb_get_ntohs(tvb, curr_offset);",
          "3401:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "3399:     g_snprintf(add_string, string_len, \" - (%u)\", value);",
          "",
          "[Added Lines]",
          "3371:     proto_item_append_text(data_p->elem_item, \" - (%u)\", value);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3416: static guint8",
          "3418: {",
          "3419:     guint8      oct;",
          "3420:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3417: elem_info_rec_req(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3389: elem_info_rec_req(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3434:         proto_tree_add_uint_format(tree, hf_ansi_a_info_rec_req, tvb, curr_offset, 1,",
          "3435:             oct,",
          "3436:             \"Information Record Type - %u: %s (%u)\",",
          "3441:         curr_offset++;",
          "3443:         num_recs++;",
          "3444:     }",
          "3449:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "3437:             num_recs + 1,",
          "3438:             str,",
          "3439:             oct);",
          "3446:     g_snprintf(add_string, string_len, \" - %u request%s\",",
          "3447:         num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "3409:             num_recs + 1, str, oct);",
          "3416:     proto_item_append_text(data_p->elem_item, \" - %u request%s\", num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3463: };",
          "3465: static guint8",
          "3467: {",
          "3468:     guint8      oct;",
          "3469:     guint8      num_chans;",
          "",
          "[Removed Lines]",
          "3466: elem_is2000_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3435: elem_is2000_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3611: static guint8",
          "3613: {",
          "3614:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3612: elem_is95_ms_meas_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3581: elem_is95_ms_meas_chan_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3618:     proto_tree_add_item(tree, hf_ansi_a_is95_ms_meas_chan_id_band_class, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "3619:     proto_tree_add_item(tree, hf_ansi_a_is95_ms_meas_chan_id_channel_number, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "3623:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "3621:     g_snprintf(add_string, string_len, \" - (ARFCN: %u)\", tvb_get_ntohs(tvb, curr_offset) & 0x07ff);",
          "",
          "[Added Lines]",
          "3590:     proto_item_append_text(data_p->elem_item, \" - (ARFCN: %u)\", tvb_get_ntohs(tvb, curr_offset) & 0x07ff);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3633: static guint8",
          "3635: {",
          "3636:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3634: elem_auth_conf_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3603: elem_auth_conf_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3682: };",
          "3684: static guint8",
          "3686: {",
          "3687:     guint8      oct;",
          "3688:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3685: elem_clg_party_ascii_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3654: elem_clg_party_ascii_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3717:         \"Digits: %s\",",
          "3718:         (gchar *) format_text(poctets, len - (curr_offset - offset)));",
          "3722:     curr_offset += len - (curr_offset - offset);",
          "",
          "[Removed Lines]",
          "3720:     g_snprintf(add_string, string_len, \" - (%s)\", poctets);",
          "",
          "[Added Lines]",
          "3689:     proto_item_append_text(data_p->elem_item, \" - (%s)\", poctets);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3732: static guint8",
          "3734: {",
          "3735:     guint32     curr_offset;",
          "3736:     tvbuff_t    *l3_tvb;",
          "",
          "[Removed Lines]",
          "3733: elem_l3_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3702: elem_l3_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3746:     l3_tvb = tvb_new_subset(tvb, curr_offset, len, len);",
          "3750:     curr_offset += len;",
          "",
          "[Removed Lines]",
          "3748:     call_dissector(dtap_handle, l3_tvb, pinfo, g_tree);",
          "",
          "[Added Lines]",
          "3717:     call_dissector(dtap_handle, l3_tvb, pinfo, data_p->g_tree);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3781: static guint8",
          "3783: {",
          "3784:     guint8      oct;",
          "3785:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3782: elem_lai(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3751: elem_lai(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3849: };",
          "3851: static guint8",
          "3853: {",
          "3854:     guint8      oct;",
          "3855:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3852: elem_rej_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3821: elem_rej_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3863:     proto_tree_add_uint_format_value(tree, hf_ansi_a_rej_cause, tvb, curr_offset, 1,",
          "3864:         oct, \"%s (%u)\", str, oct);",
          "3868:     curr_offset++;",
          "",
          "[Removed Lines]",
          "3866:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "3835:     proto_item_append_text(data_p->message_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3878: static guint8",
          "3880: {",
          "3881:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3879: elem_anchor_pdsn_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3848: elem_anchor_pdsn_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3897: static guint8",
          "3899: {",
          "3900:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3898: elem_anchor_pp_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "3867: elem_anchor_pp_addr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3922: };",
          "3924: static guint8",
          "3926: {",
          "3927:     guint8      oct;",
          "3928:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3925: elem_auth_chlg_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3894: elem_auth_chlg_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3938:     proto_tree_add_uint_format_value(tree, hf_ansi_a_auth_chlg_param_rand_num_type, tvb, curr_offset, 1,",
          "3939:         oct, \"%s (%u)\", str, oct & 0x0f);",
          "3943:     curr_offset++;",
          "",
          "[Removed Lines]",
          "3941:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "3910:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3962: };",
          "3964: static guint8",
          "3966: {",
          "3967:     guint8      oct;",
          "3968:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3965: elem_auth_resp_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3934: elem_auth_resp_param(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3978:     proto_tree_add_uint_format_value(tree, hf_ansi_a_auth_resp_param_sig_type, tvb, curr_offset, 1,",
          "3979:         oct, \"%s (%u)\", str, oct & 0x0f);",
          "3983:     curr_offset++;",
          "",
          "[Removed Lines]",
          "3981:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "3950:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3997: static guint8",
          "3999: {",
          "4000:     guint8      oct;",
          "4001:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "3998: elem_auth_param_count(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3967: elem_auth_param_count(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4008:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4012:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4010:     g_snprintf(add_string, string_len, \" - (%u)\", oct & 0x3f);",
          "",
          "[Added Lines]",
          "3979:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct & 0x3f);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4022: static guint8",
          "4024: {",
          "4025:     guint8      oct;",
          "4026:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4023: elem_mwi(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "3992: elem_mwi(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4032:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4036:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4034:     g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "",
          "[Added Lines]",
          "4003:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4089: };",
          "4091: static guint8",
          "4093: {",
          "4094:     guint8      oct;",
          "4095:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4092: elem_signal(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4061: elem_signal(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4102:     str = val_to_str_const(oct, ansi_a_signal_signal_vals, \"Unknown\");",
          "4103:     proto_tree_add_item(tree, hf_ansi_a_signal_signal_value, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "4107:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4105:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "4074:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4167: };",
          "4169: static guint8",
          "4171: {",
          "4172:     guint8      *poctets;",
          "4173:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4170: elem_cld_party_bcd_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4139: elem_cld_party_bcd_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4185:     my_dgt_tbcd_unpack(a_bigbuf, poctets, len - (curr_offset - offset), &Dgt_tbcd);",
          "4186:     proto_tree_add_string(tree, hf_ansi_a_cld_party_bcd_num, tvb, curr_offset, len - (curr_offset - offset), a_bigbuf);",
          "4190:     curr_offset += len - (curr_offset - offset);",
          "",
          "[Removed Lines]",
          "4188:     g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "",
          "[Added Lines]",
          "4157:     proto_item_append_text(data_p->elem_item, \" - (%s)\", a_bigbuf);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4200: static guint8",
          "4202: {",
          "4203:     guint8      oct;",
          "4204:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4201: elem_qos_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4170: elem_qos_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4211:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4215:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4213:     g_snprintf(add_string, string_len, \" - (%u)\", oct & 0x0f);",
          "",
          "[Added Lines]",
          "4182:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct & 0x0f);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4313: static value_string_ext ansi_a_cause_l3_value_vals_ext = VALUE_STRING_EXT_INIT(ansi_a_cause_l3_value_vals);",
          "4315: static guint8",
          "4317: {",
          "4318:     guint8      oct;",
          "4319:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4316: elem_cause_l3(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4285: elem_cause_l3(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4339:     proto_tree_add_uint_format_value(tree, hf_ansi_a_cause_l3_value, tvb, curr_offset, 1,",
          "4340:         oct & 0x7f, \"%s (%u)\", str, oct & 0x7f);",
          "4344:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4342:     g_snprintf(add_string, string_len, \" - (%u) %s\", oct & 0x7f, str);",
          "",
          "[Added Lines]",
          "4311:     proto_item_append_text(data_p->elem_item, \" - (%u) %s\", oct & 0x7f, str);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4364: static guint8",
          "4366: {",
          "4367:     guint8      oct;",
          "4368:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4365: elem_xmode(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4334: elem_xmode(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4376:     proto_tree_add_item(tree, hf_ansi_a_xmode_tfo_mode, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "4379:         (oct & 0x01) ? tfs_ansi_a_xmode_tfo_mode.true_string : tfs_ansi_a_xmode_tfo_mode.false_string);",
          "4381:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4378:     g_snprintf(add_string, string_len, \" - (%s)\",",
          "",
          "[Added Lines]",
          "4347:     proto_item_append_text(data_p->elem_item, \" - (%s)\",",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "4414: };",
          "4416: static guint8",
          "4418: {",
          "4419:     guint8      oct;",
          "4420:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4417: elem_reg_type(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4386: elem_reg_type(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "4428:     proto_tree_add_uint_format_value(tree, hf_ansi_a_reg_type_type, tvb, curr_offset, 1,",
          "4429:         oct, \"%s\", str);",
          "4433:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4431:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "4400:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "4445: static guint8",
          "4447: {",
          "4448:     guint32     value;",
          "4449:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4446: elem_tag(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4415: elem_tag(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "4455:     value = tvb_get_ntohl(tvb, curr_offset);",
          "4459:     curr_offset += 4;",
          "",
          "[Removed Lines]",
          "4457:     g_snprintf(add_string, string_len, \" - (%u)\", value);",
          "",
          "[Added Lines]",
          "4426:     proto_item_append_text(data_p->elem_item, \" - (%u)\", value);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "4471: static guint8",
          "4473: {",
          "4474:     guint8      oct;",
          "4475:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4472: elem_hho_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4441: elem_hho_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "4485:     str = val_to_str_const(oct & 0x1f, ansi_a_band_class_vals, \"Reserved\");",
          "4489:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4487:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "4456:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "4541: static guint8",
          "4543: {",
          "4544:     guint8      major, minor, point;",
          "4545:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4542: elem_sw_ver(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4511: elem_sw_ver(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "4563:     point = tvb_get_guint8(tvb, curr_offset);",
          "4567:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4565:     g_snprintf(add_string, string_len, \" - (IOS %u.%u.%u)\", major, minor, point);",
          "",
          "[Added Lines]",
          "4534:     proto_item_append_text(data_p->elem_item, \" - (IOS %u.%u.%u)\", major, minor, point);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "4585: static guint8",
          "4587: {",
          "4601:     if (global_a_info_display)",
          "4602:     {",
          "4604:     }",
          "4616:     return(curr_offset - offset);",
          "",
          "[Removed Lines]",
          "4586: elem_so(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "4588:     guint16     value;",
          "4589:     guint32     curr_offset;",
          "4591:     curr_offset = offset;",
          "4593:     proto_tree_add_item(tree, hf_ansi_a_so_proprietary_ind, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "4594:     proto_tree_add_item(tree, hf_ansi_a_so_revision, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "4595:     proto_tree_add_item(tree, hf_ansi_a_so_base_so_num, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "4597:     value = tvb_get_ntohs(tvb, curr_offset);",
          "4599:     g_snprintf(add_string, string_len, \" - (%u) (0x%04x)\", value, value);",
          "4600:     proto_item_append_text(ansi_a_message_item, \"%s\", add_string);",
          "4603:         col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", &add_string[1]);",
          "4606:     proto_tree_add_uint_format(tree, hf_ansi_a_so, tvb, curr_offset, 2,",
          "4607:         value,",
          "4608:         \"%s %s\",",
          "4609:         &add_string[3],",
          "4610:         ansi_a_so_int_to_str(value));",
          "4612:     curr_offset += 2;",
          "",
          "[Added Lines]",
          "4555: elem_so_aux(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, guint16 *value_p)",
          "4557:     proto_tree_add_item(tree, hf_ansi_a_so_proprietary_ind, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4558:     proto_tree_add_item(tree, hf_ansi_a_so_revision, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4559:     proto_tree_add_item(tree, hf_ansi_a_so_base_so_num, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4563:     proto_tree_add_uint_format(tree, hf_ansi_a_so, tvb, offset, 2,",
          "4565:         \"%s\",",
          "4566:         ansi_a_so_int_to_str(*value_p));",
          "4570:     return(2);",
          "4571: }",
          "4573: static guint8",
          "4574: elem_so(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "4575: {",
          "4576:     guint16     value;",
          "4577:     guint32     curr_offset;",
          "4579:     curr_offset = offset + elem_so_aux(tvb, pinfo, tree, offset, len, &value);",
          "4581:     proto_item_append_text(data_p->elem_item, \" - (%u) %s\", value, ansi_a_so_int_to_str(value));",
          "4582:     proto_item_append_text(data_p->message_item, \" - SO (%u)\", value);",
          "4585:         col_append_fstr(pinfo->cinfo, COL_INFO, \"- SO (%u)\", value);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "4622: static guint8",
          "4624: {",
          "4625:     guint8      oct;",
          "4626:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4623: elem_soci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4597: elem_soci(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "4633:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4637:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4635:     g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "",
          "[Added Lines]",
          "4609:     proto_item_append_text(data_p->elem_item, \" - (%u)\", oct);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "4647: static guint8",
          "4649: {",
          "4650:     guint8      num_so;",
          "4651:     guint8      inst;",
          "",
          "[Removed Lines]",
          "4648: elem_so_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4622: elem_so_list(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4660:     num_so = tvb_get_guint8(tvb, curr_offset);",
          "4670:     NO_MORE_DATA_CHECK(len);",
          "",
          "[Removed Lines]",
          "4666:     g_snprintf(add_string, string_len, \" - %u service options\", num_so);",
          "4668:     curr_offset++;",
          "",
          "[Added Lines]",
          "4636:     proto_item_append_text(data_p->elem_item, \" - %u service options\", num_so);",
          "4638:     curr_offset += 1;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4676:     do",
          "4677:     {",
          "4678:         item =",
          "4679:             proto_tree_add_text(tree, tvb, curr_offset, 3,",
          "4681:                 inst + 1);",
          "4683:         subtree = proto_item_add_subtree(item, ett_so_list);",
          "",
          "[Removed Lines]",
          "4680:                 \"Service Option Instance [%u]\",",
          "",
          "[Added Lines]",
          "4648:         guint16         value;",
          "4652:                 \"Service Option [%u]\",",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4686:         proto_tree_add_item(tree, hf_ansi_a_so_list_sr_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "4687:         proto_tree_add_item(tree, hf_ansi_a_so_list_soci, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "4694:         inst++;",
          "4695:     }",
          "4696:     while (((len - (curr_offset - offset)) >= 3) &&",
          "4697:         (inst < num_so));",
          "4704:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "4706:     return(curr_offset - offset);",
          "",
          "[Removed Lines]",
          "4689:         curr_offset++;",
          "4691:         curr_offset += elem_so(tvb, pinfo, subtree, curr_offset, len, add_string, string_len);",
          "4692:         add_string[0] = '\\0';",
          "4702:     g_snprintf(add_string, string_len, \" - %u service options\", num_so);",
          "",
          "[Added Lines]",
          "4661:         curr_offset += 1;",
          "4663:         curr_offset += elem_so_aux(tvb, pinfo, subtree, curr_offset, len, &value);",
          "4665:         proto_item_append_text(item, \" - (%u) %s\", value, ansi_a_so_int_to_str(value));",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4712: static guint8",
          "4714: {",
          "4715:     guint32     sid, nid, pzid;",
          "4716:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4713: elem_acc_net_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "4681: elem_acc_net_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4733:     pzid = tvb_get_guint8(tvb, curr_offset);",
          "4737:     curr_offset += 1;",
          "",
          "[Removed Lines]",
          "4735:     g_snprintf(add_string, string_len, \" - (SID/NID/PZID: %u/%u/%u)\", sid, nid, pzid);",
          "",
          "[Added Lines]",
          "4703:     proto_item_append_text(data_p->elem_item, \" - (SID/NID/PZID: %u/%u/%u)\", sid, nid, pzid);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4773: static guint8",
          "4775: {",
          "4776:     guint8      oct;",
          "4777:     guint32     curr_offset;",
          "4779:     tvbuff_t    *adds_tvb;",
          "4780:     proto_item  *item;",
          "4781:     proto_tree  *subtree;",
          "",
          "[Removed Lines]",
          "4774: elem_adds_user_part(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "4778:     const gchar *str;",
          "",
          "[Added Lines]",
          "4742: elem_adds_user_part(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4788:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4793:     curr_offset++;",
          "",
          "[Removed Lines]",
          "4790:     str = val_to_str_const(oct & 0x3f, ansi_a_adds_vals, \"Reserved\");",
          "4791:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "4757:     proto_item_append_text(data_p->elem_item, \" - (%s)\",",
          "4758:         val_to_str_const(oct & 0x3f, ansi_a_adds_vals, \"Reserved\"));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4800:     case ADDS_APP_SMS:",
          "4801:         adds_tvb = tvb_new_subset(tvb, curr_offset, len - 1, len - 1);",
          "4804:         curr_offset += (len - 1);",
          "4805:         break;",
          "4807:     case ADDS_APP_OTA:",
          "4808:         adds_tvb = tvb_new_subset(tvb, curr_offset, len - 1, len - 1);",
          "4813:         curr_offset += (len - 1);",
          "4814:         break;",
          "",
          "[Removed Lines]",
          "4803:         dissector_try_uint(is637_dissector_table, 0, adds_tvb, pinfo, g_tree);",
          "4810:         dissector_try_uint(is683_dissector_table,",
          "4811:             (pinfo->p2p_dir == P2P_DIR_RECV), adds_tvb, pinfo, g_tree);",
          "",
          "[Added Lines]",
          "4770:         dissector_try_uint(is637_dissector_table, 0, adds_tvb, pinfo, data_p->g_tree);",
          "4777:         dissector_try_uint(is683_dissector_table, data_p->is_reverse, adds_tvb, pinfo, data_p->g_tree);",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4816:     case ADDS_APP_PDS:",
          "4817:         adds_tvb = tvb_new_subset(tvb, curr_offset, len - 1, len - 1);",
          "4822:         curr_offset += (len - 1);",
          "4823:         break;",
          "",
          "[Removed Lines]",
          "4819:         dissector_try_uint(is801_dissector_table,",
          "4820:             (pinfo->p2p_dir == P2P_DIR_RECV), adds_tvb, pinfo, g_tree);",
          "",
          "[Added Lines]",
          "4785:         dissector_try_uint(is801_dissector_table, data_p->is_reverse, adds_tvb, pinfo, data_p->g_tree);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4868: static guint8",
          "4870: {",
          "4871:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "4869: elem_amps_hho_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "4834: elem_amps_hho_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4900: };",
          "4902: static guint8",
          "4904: {",
          "4905:     guint8      oct, num_con_rec, ii;",
          "4906:     guint8      bit_mask, bit_offset;",
          "",
          "[Removed Lines]",
          "4903: elem_is2000_scr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "4868: elem_is2000_scr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4964:         proto_tree_add_uint_format_value(subtree, hf_ansi_a_is2000_scr_socr_so, tvb, curr_offset, 2,",
          "4965:             value,",
          "4971:         curr_offset += 2;",
          "",
          "[Removed Lines]",
          "4966:             \"%s (%u) (0x%04x)\",",
          "4967:             ansi_a_so_int_to_str(value),",
          "4968:             value,",
          "4969:             value);",
          "",
          "[Added Lines]",
          "4931:             \"%s (%u)\",",
          "4932:             ansi_a_so_int_to_str(value), value);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "5155: static guint8",
          "5157: {",
          "5158:     guint32     curr_offset;",
          "5159:     guint       is2000_portion_len;",
          "",
          "[Removed Lines]",
          "5156: elem_is2000_nn_scr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "5119: elem_is2000_nn_scr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "5208: };",
          "5210: static guint8",
          "5212: {",
          "5213:     guint8      oct;",
          "5214:     guint8      oct_len;",
          "",
          "[Removed Lines]",
          "5211: elem_is2000_mob_cap(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "5174: elem_is2000_mob_cap(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "5406: static guint8",
          "5408: {",
          "5409:     guint32     value;",
          "5410:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "5407: elem_ptype(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "5370: elem_ptype(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "5426:     proto_tree_add_uint_format(tree, hf_ansi_a_protocol_type, tvb, curr_offset, 2,",
          "5427:         value,",
          "5428:         \"%s (%u)\",",
          "5434:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "5429:         str,",
          "5430:         value);",
          "5432:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "5392:         str, value);",
          "5394:     proto_item_append_text(data_p->elem_item, \" - (%s)\", str);",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "5564: };",
          "5566: static guint8",
          "5568: {",
          "5569:     guint8      oct;",
          "5570:     guint8      oct_len;",
          "",
          "[Removed Lines]",
          "5567: elem_fwd_ms_info_recs(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "5529: elem_fwd_ms_info_recs(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "5761:         num_recs++;",
          "5762:     }",
          "5767:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "5764:     g_snprintf(add_string, string_len, \" - %u record%s\",",
          "5765:         num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "5726:     proto_item_append_text(data_p->elem_item, \" - %u record%s\", num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "5775: static guint8",
          "5777: {",
          "5778:     guint8      oct;",
          "5779:     guint8      oct_len;",
          "",
          "[Removed Lines]",
          "5776: elem_rev_ms_info_recs(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "5737: elem_rev_ms_info_recs(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "5975:         num_recs++;",
          "5976:     }",
          "5981:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "",
          "[Removed Lines]",
          "5978:     g_snprintf(add_string, string_len, \" - %u record%s\",",
          "5979:         num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "5939:     proto_item_append_text(data_p->elem_item, \" - %u record%s\", num_recs, plurality(num_recs, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "5997: };",
          "5999: static guint8",
          "6001: {",
          "6002:     guint8      oct;",
          "6003:     guint32     value;",
          "",
          "[Removed Lines]",
          "6000: elem_ext_ho_dir_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "5960: elem_ext_ho_dir_params(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "6127: };",
          "6129: static guint8",
          "6131: {",
          "6132:     guint32     curr_offset;",
          "6134:     curr_offset = offset;",
          "6139:     proto_tree_add_item(tree, hf_ansi_a_cdma_sowd_sowd, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "6140:     curr_offset += 2;",
          "",
          "[Removed Lines]",
          "6130: elem_cdma_sowd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "6136:     curr_offset += elem_cell_id(tvb, pinfo, tree, offset, len, add_string, string_len);",
          "6137:     add_string[0] = '\\0';",
          "",
          "[Added Lines]",
          "6090: elem_cdma_sowd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "6092:     guint8      disc;",
          "6097:     proto_tree_add_item(tree, hf_ansi_a_cell_id_disc, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "6099:     disc = tvb_get_guint8(tvb, curr_offset);",
          "6101:     curr_offset += 1;",
          "6103:     curr_offset +=",
          "6104:         elem_cell_id_aux(tvb, pinfo, tree, curr_offset, len - (curr_offset - offset), disc, NULL);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "6177: };",
          "6179: static guint8",
          "6181: {",
          "6182:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6180: elem_re_res(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6147: elem_re_res(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len _U_, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "6315: static guint8",
          "6317: {",
          "6318:     guint32     curr_offset;",
          "6319:     guint8      *poctets;",
          "",
          "[Removed Lines]",
          "6316: elem_cld_party_ascii_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "6283: elem_cld_party_ascii_num(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "6333:         \"Digits: %s\",",
          "6334:         (gchar *) format_text(poctets, len - (curr_offset - offset)));",
          "6338:     curr_offset += len - (curr_offset - offset);",
          "",
          "[Removed Lines]",
          "6336:     g_snprintf(add_string, string_len, \" - (%s)\", poctets);",
          "",
          "[Added Lines]",
          "6303:     proto_item_append_text(data_p->elem_item, \" - (%s)\", poctets);",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "6348: static guint8",
          "6350: {",
          "6351:     guint8      oct;",
          "6352:     guint32     curr_offset;",
          "6355:     curr_offset = offset;",
          "",
          "[Removed Lines]",
          "6349: elem_band_class(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "6353:     const gchar *str;",
          "",
          "[Added Lines]",
          "6316: elem_band_class(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "6360:     oct = tvb_get_guint8(tvb, curr_offset);",
          "6366:     curr_offset++;",
          "",
          "[Removed Lines]",
          "6362:     str = val_to_str_const(oct & 0x1f, ansi_a_band_class_vals, \"Reserved\");",
          "6364:     g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "",
          "[Added Lines]",
          "6328:     proto_item_append_text(data_p->elem_item, \" - (%s)\",",
          "6329:         val_to_str_const(oct & 0x1f, ansi_a_band_class_vals, \"Reserved\"));",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "6393: static guint8",
          "6395: {",
          "6396:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6394: elem_is2000_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6359: elem_is2000_cause(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "6427: static guint8",
          "6429: {",
          "6430:     const guint8        *bytes_p;",
          "6431:     guint8              oct;",
          "",
          "[Removed Lines]",
          "6428: elem_auth_event(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6393: elem_auth_event(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "6590: static guint8",
          "6592: {",
          "6593:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6591: elem_psmm_count(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6556: elem_psmm_count(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "6610: static guint8",
          "6612: {",
          "6613:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6611: elem_geo_loc(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6576: elem_geo_loc(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "6669: static guint8",
          "6671: {",
          "6672:     guint8      oct;",
          "6673:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6670: elem_cct_group(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "6635: elem_cct_group(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "6692:         oct,",
          "6693:         plurality(oct, \"\", \"s\"));",
          "6698:     curr_offset++;",
          "",
          "[Removed Lines]",
          "6695:     g_snprintf(add_string, string_len, \" - %u circuit%s\",",
          "6696:         oct, plurality(oct, \"\", \"s\"));",
          "",
          "[Added Lines]",
          "6660:     proto_item_append_text(data_p->elem_item, \" - %u circuit%s\", oct, plurality(oct, \"\", \"s\"));",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "6723: static guint8",
          "6725: {",
          "6726:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6724: elem_paca_ts(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6688: elem_paca_ts(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "6752: };",
          "6754: static guint8",
          "6756: {",
          "6757:     guint8      oct;",
          "6758:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6755: elem_paca_order(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "6719: elem_paca_order(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "6765:     oct = tvb_get_guint8(tvb, curr_offset);",
          "6768:         val_to_str_const(oct & 0x07, ansi_a_paca_order_action_reqd_vals, \"Reserved\"));",
          "6770:     curr_offset++;",
          "",
          "[Removed Lines]",
          "6767:     g_snprintf(add_string, string_len, \" - (%s)\",",
          "",
          "[Added Lines]",
          "6731:     proto_item_append_text(data_p->elem_item, \" - (%s)\",",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "6780: static guint8",
          "6782: {",
          "6783:     guint8      oct;",
          "6784:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6781: elem_paca_reoi(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "",
          "[Added Lines]",
          "6745: elem_paca_reoi(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "6791:     oct = tvb_get_guint8(tvb, curr_offset);",
          "6795:     curr_offset++;",
          "",
          "[Removed Lines]",
          "6793:     g_snprintf(add_string, string_len, \" - (%sReorigination)\", (oct & 0x01) ? \"\" : \"Not \");",
          "",
          "[Added Lines]",
          "6757:     proto_item_append_text(data_p->elem_item, \" - (%sReorigination)\", (oct & 0x01) ? \"\" : \"Not \");",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "6805: static guint8",
          "6807: {",
          "6808:     guint8      oct;",
          "6809:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "6806: elem_a2p_bearer_session(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6770: elem_a2p_bearer_session(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "6830:             proto_tree_add_item(tree, hf_ansi_a_a2p_bearer_sess_ipv6_addr, tvb, curr_offset, 16, ENC_NA);",
          "6838:             curr_offset += 16;",
          "6839:         }",
          "",
          "[Removed Lines]",
          "6832:             rtp_src_addr.type = AT_IPv6;",
          "6833:             rtp_src_addr.len = 16;",
          "6834:             rtp_src_addr.data = (guint8 *) &rtp_ipv6_addr;",
          "6836:             tvb_get_ipv6(tvb, curr_offset, &rtp_ipv6_addr);",
          "",
          "[Added Lines]",
          "6796:             data_p->rtp_src_addr.type = AT_IPv6;",
          "6797:             data_p->rtp_src_addr.len = 16;",
          "6798:             data_p->rtp_src_addr.data = (guint8 *) &data_p->rtp_ipv6_addr;",
          "6800:             tvb_get_ipv6(tvb, curr_offset, &data_p->rtp_ipv6_addr);",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "6844:             proto_tree_add_item(tree, hf_ansi_a_a2p_bearer_sess_ipv4_addr, tvb, curr_offset, 4, ENC_BIG_ENDIAN);",
          "6852:             curr_offset += 4;",
          "6853:         }",
          "6855:         proto_tree_add_item(tree, hf_ansi_a_a2p_bearer_sess_udp_port, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "6859:         curr_offset += 2;",
          "6860:     }",
          "",
          "[Removed Lines]",
          "6846:             rtp_src_addr.type = AT_IPv4;",
          "6847:             rtp_src_addr.len = 4;",
          "6848:             rtp_src_addr.data = (guint8 *) &rtp_ipv4_addr;",
          "6850:             rtp_ipv4_addr = tvb_get_ipv4(tvb, curr_offset);",
          "6857:         rtp_port = tvb_get_ntohs(tvb, curr_offset);",
          "",
          "[Added Lines]",
          "6810:             data_p->rtp_src_addr.type = AT_IPv4;",
          "6811:             data_p->rtp_src_addr.len = 4;",
          "6812:             data_p->rtp_src_addr.data = (guint8 *) &data_p->rtp_ipv4_addr;",
          "6814:             data_p->rtp_ipv4_addr = tvb_get_ipv4(tvb, curr_offset);",
          "6821:         data_p->rtp_port = tvb_get_ntohs(tvb, curr_offset);",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "6909: };",
          "6911: static guint8",
          "6913: {",
          "6914:     guint8                              oct;",
          "6915:     proto_item                          *item;",
          "",
          "[Removed Lines]",
          "6912: elem_a2p_bearer_format(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "6876: elem_a2p_bearer_format(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "7023:                 if (format_assigned)",
          "7024:                 {",
          "7030:                 }",
          "7032:                 curr_offset += 16;",
          "",
          "[Removed Lines]",
          "7025:                     rtp_src_addr.type = AT_IPv6;",
          "7026:                     rtp_src_addr.len = 16;",
          "7027:                     rtp_src_addr.data = (guint8 *) &rtp_ipv6_addr;",
          "7029:                     tvb_get_ipv6(tvb, curr_offset, &rtp_ipv6_addr);",
          "",
          "[Added Lines]",
          "6989:                     data_p->rtp_src_addr.type = AT_IPv6;",
          "6990:                     data_p->rtp_src_addr.len = 16;",
          "6991:                     data_p->rtp_src_addr.data = (guint8 *) &data_p->rtp_ipv6_addr;",
          "6993:                     tvb_get_ipv6(tvb, curr_offset, &data_p->rtp_ipv6_addr);",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "7040:                 if (format_assigned)",
          "7041:                 {",
          "7047:                 }",
          "7049:                 curr_offset += 4;",
          "",
          "[Removed Lines]",
          "7042:                     rtp_src_addr.type = AT_IPv4;",
          "7043:                     rtp_src_addr.len = 4;",
          "7044:                     rtp_src_addr.data = (guint8 *) &rtp_ipv4_addr;",
          "7046:                     rtp_ipv4_addr = tvb_get_ipv4(tvb, curr_offset);",
          "",
          "[Added Lines]",
          "7006:                     data_p->rtp_src_addr.type = AT_IPv4;",
          "7007:                     data_p->rtp_src_addr.len = 4;",
          "7008:                     data_p->rtp_src_addr.data = (guint8 *) &data_p->rtp_ipv4_addr;",
          "7010:                     data_p->rtp_ipv4_addr = tvb_get_ipv4(tvb, curr_offset);",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "7054:             if (format_assigned)",
          "7055:             {",
          "7057:             }",
          "7059:             curr_offset += 2;",
          "",
          "[Removed Lines]",
          "7056:                 rtp_port = tvb_get_ntohs(tvb, curr_offset);",
          "",
          "[Added Lines]",
          "7020:                 data_p->rtp_port = tvb_get_ntohs(tvb, curr_offset);",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "7098:             rtp_dyn_payload_used = TRUE;",
          "7100:             first_assigned_found = TRUE;",
          "7102:                 pinfo->fd->num, FALSE, rtp_dyn_payload);",
          "7103:         }",
          "",
          "[Removed Lines]",
          "7101:             rtp_add_address(pinfo, &rtp_src_addr, rtp_port, 0, \"IOS5\",",
          "",
          "[Added Lines]",
          "7065:             rtp_add_address(pinfo, &data_p->rtp_src_addr, data_p->rtp_port, 0, \"IOS5\",",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "7134: static guint8",
          "7136: {",
          "7138:     guint32     curr_offset;",
          "7140:     curr_offset = offset;",
          "",
          "[Removed Lines]",
          "7135: elem_ms_des_freq(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len)",
          "7137:     guint32     value;",
          "",
          "[Added Lines]",
          "7099: elem_ms_des_freq(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "7142:     proto_tree_add_item(tree, hf_ansi_a_ms_des_freq_band_class, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "7143:     proto_tree_add_item(tree, hf_ansi_a_ms_des_freq_cdma_channel, tvb, curr_offset, 2, ENC_BIG_ENDIAN);",
          "7149:     curr_offset++;",
          "",
          "[Removed Lines]",
          "7145:     value = tvb_get_ntohs(tvb, curr_offset) & 0x07ff;",
          "7147:     g_snprintf(add_string, string_len, \" - (CDMA Channel: %u)\", value);",
          "",
          "[Added Lines]",
          "7108:     proto_item_append_text(data_p->elem_item, \" - (CDMA Channel: %u)\",",
          "7109:         tvb_get_ntohs(tvb, curr_offset) & 0x07ff);",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "7165: };",
          "7167: static guint8",
          "7169: {",
          "7170:     guint8      oct;",
          "7171:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "7168: elem_plcm_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "7130: elem_plcm_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "7238: };",
          "7240: static guint8",
          "7242: {",
          "7243:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "7241: elem_bdtmf_trans_info(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "7203: elem_bdtmf_trans_info(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "7260: static guint8",
          "7262: {",
          "7263:     guint8      oct;",
          "7264:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "7261: elem_dtmf_chars(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "",
          "[Added Lines]",
          "7223: elem_dtmf_chars(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "7292:     proto_tree_add_string(tree, hf_ansi_a_bdtmf_chars_digits, tvb, curr_offset, packed_len,",
          "7293:         a_bigbuf);",
          "7297:     curr_offset += packed_len;",
          "",
          "[Removed Lines]",
          "7295:     g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "",
          "[Added Lines]",
          "7257:     proto_item_append_text(data_p->elem_item, \" - (%s)\", a_bigbuf);",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "7409: #define MAX_IOS401_NUM_ELEM_1 (sizeof(ansi_a_ios401_elem_1_strings)/sizeof(ext_value_string_t))",
          "7410: #define MAX_IOS501_NUM_ELEM_1 (sizeof(ansi_a_ios501_elem_1_strings)/sizeof(ext_value_string_t))",
          "7411: static gint ett_ansi_elem_1[MAX(MAX_IOS401_NUM_ELEM_1, MAX_IOS501_NUM_ELEM_1)];",
          "7413: {",
          "",
          "[Removed Lines]",
          "7412: static guint8 (*elem_1_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gchar *add_string, int string_len) =",
          "",
          "[Added Lines]",
          "7374: static guint8 (*elem_1_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p) =",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "7513: static guint16",
          "7515: {",
          "7516:     guint8      oct, parm_len;",
          "7517:     guint16     consumed;",
          "7518:     guint32     curr_offset;",
          "7519:     proto_tree  *subtree;",
          "7521:     gint        dec_idx;",
          "7523:     curr_offset = offset;",
          "",
          "[Removed Lines]",
          "7514: elem_tlv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, guint len _U_, const gchar *name_add)",
          "7520:     proto_item  *item;",
          "",
          "[Added Lines]",
          "7476: elem_tlv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, guint len _U_, const gchar *name_add, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "7538:         parm_len = tvb_get_guint8(tvb, curr_offset + 1);",
          "7541:             proto_tree_add_text(tree, tvb, curr_offset, parm_len + 2,",
          "7542:                 \"%s%s\",",
          "7543:                 ansi_a_elem_1_strings[idx].strptr,",
          "7544:                 (name_add == NULL) || (name_add[0] == '\\0') ? \"\" : name_add);",
          "7548:         proto_tree_add_uint(subtree, hf_ansi_a_elem_id, tvb, curr_offset, 1, oct);",
          "",
          "[Removed Lines]",
          "7540:         item =",
          "7546:         subtree = proto_item_add_subtree(item, ett_ansi_elem_1[idx]);",
          "",
          "[Added Lines]",
          "7501:         data_p->elem_item =",
          "7507:         subtree = proto_item_add_subtree(data_p->elem_item, ett_ansi_elem_1[idx]);",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "7560:             }",
          "7561:             else",
          "7562:             {",
          "7575:             }",
          "7576:         }",
          "",
          "[Removed Lines]",
          "7563:                 gchar *a_add_string;",
          "7565:                 a_add_string = (gchar *) wmem_alloc(wmem_packet_scope(), 1024);",
          "7566:                 a_add_string[0] = '\\0';",
          "7567:                 consumed =",
          "7568:                     (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 2,",
          "7569:                         parm_len, a_add_string, 1024);",
          "7571:                 if (a_add_string[0] != '\\0')",
          "7572:                 {",
          "7573:                     proto_item_append_text(item, \"%s\", a_add_string);",
          "7574:                 }",
          "",
          "[Added Lines]",
          "7524:                 consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 2, parm_len, data_p);",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "7590: static guint16",
          "7592: {",
          "7593:     guint8      oct;",
          "7594:     guint16     consumed;",
          "7595:     guint32     curr_offset;",
          "7596:     proto_tree  *subtree;",
          "7598:     gint        dec_idx;",
          "",
          "[Removed Lines]",
          "7591: elem_tv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, const gchar *name_add)",
          "7597:     proto_item  *item;",
          "",
          "[Added Lines]",
          "7541: elem_tv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, const gchar *name_add, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "7613:     {",
          "7614:         dec_idx = ansi_a_elem_1_strings[idx].dec_index;",
          "7617:             proto_tree_add_text(tree,",
          "7618:                 tvb, curr_offset, -1,",
          "7619:                 \"%s%s\",",
          "7620:                 ansi_a_elem_1_strings[idx].strptr,",
          "7621:                 (name_add == NULL) || (name_add[0] == '\\0') ? \"\" : name_add);",
          "7625:         proto_tree_add_uint(subtree, hf_ansi_a_elem_id, tvb, curr_offset, 1, oct);",
          "",
          "[Removed Lines]",
          "7616:         item =",
          "7623:         subtree = proto_item_add_subtree(item, ett_ansi_elem_1[idx]);",
          "",
          "[Added Lines]",
          "7565:         data_p->elem_item =",
          "7572:         subtree = proto_item_add_subtree(data_p->elem_item, ett_ansi_elem_1[idx]);",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "7635:         }",
          "7636:         else",
          "7637:         {",
          "7648:         }",
          "7650:         consumed++;",
          "7653:     }",
          "7655:     return(consumed);",
          "",
          "[Removed Lines]",
          "7638:             gchar *a_add_string;",
          "7640:             a_add_string = (gchar *) wmem_alloc(wmem_packet_scope(), 1024);",
          "7641:             a_add_string[0] = '\\0';",
          "7642:             consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 1, -1, a_add_string, 1024);",
          "7644:             if (a_add_string[0] != '\\0')",
          "7645:             {",
          "7646:                 proto_item_append_text(item, \"%s\", a_add_string);",
          "7647:             }",
          "7652:         proto_item_set_len(item, consumed);",
          "",
          "[Added Lines]",
          "7587:             consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 1, -1, data_p);",
          "7592:         proto_item_set_len(data_p->elem_item, consumed);",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "7664: static guint16",
          "7666: {",
          "7667:     guint8      oct;",
          "7668:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "7665: elem_t(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, elem_idx_t idx, guint32 offset, const gchar *name_add)",
          "",
          "[Added Lines]",
          "7605: elem_t(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, elem_idx_t idx, guint32 offset, const gchar *name_add, ansi_a_shared_data_t *data_p _U_)",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "7699: static guint16",
          "7701: {",
          "7702:     guint8      parm_len;",
          "7703:     guint16     consumed;",
          "7704:     guint32     curr_offset;",
          "7705:     proto_tree  *subtree;",
          "7707:     gint        dec_idx;",
          "",
          "[Removed Lines]",
          "7700: elem_lv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, guint len _U_, const gchar *name_add)",
          "7706:     proto_item  *item;",
          "",
          "[Added Lines]",
          "7640: elem_lv(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, guint len _U_, const gchar *name_add, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "7721:     parm_len = tvb_get_guint8(tvb, curr_offset);",
          "7724:         proto_tree_add_text(tree, tvb, curr_offset, parm_len + 1,",
          "7725:             \"%s%s\",",
          "7726:             ansi_a_elem_1_strings[idx].strptr,",
          "7727:             (name_add == NULL) || (name_add[0] == '\\0') ? \"\" : name_add);",
          "7731:     proto_tree_add_uint(subtree, hf_ansi_a_length, tvb,",
          "7732:         curr_offset, 1, parm_len);",
          "",
          "[Removed Lines]",
          "7723:     item =",
          "7729:     subtree = proto_item_add_subtree(item, ett_ansi_elem_1[idx]);",
          "",
          "[Added Lines]",
          "7662:     data_p->elem_item =",
          "7668:     subtree = proto_item_add_subtree(data_p->elem_item, ett_ansi_elem_1[idx]);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "7742:         }",
          "7743:         else",
          "7744:         {",
          "7757:         }",
          "7758:     }",
          "",
          "[Removed Lines]",
          "7745:             gchar *a_add_string;",
          "7747:             a_add_string = (gchar *) wmem_alloc(wmem_packet_scope(), 1024);",
          "7748:             a_add_string[0] = '\\0';",
          "7749:             consumed =",
          "7750:                 (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 1,",
          "7751:                     parm_len, a_add_string, 1024);",
          "7753:             if (a_add_string[0] != '\\0')",
          "7754:             {",
          "7755:                 proto_item_append_text(item, \"%s\", a_add_string);",
          "7756:             }",
          "",
          "[Added Lines]",
          "7684:             consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, subtree, curr_offset + 1, parm_len, data_p);",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "7769: static guint16",
          "7771: {",
          "7772:     guint16     consumed;",
          "7773:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "7770: elem_v(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset)",
          "",
          "[Added Lines]",
          "7698: elem_v(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, elem_idx_t idx, guint32 offset, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "7784:     dec_idx = ansi_a_elem_1_strings[idx].dec_index;",
          "7786:     if (elem_1_fcn[dec_idx] == NULL)",
          "7787:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7714:     data_p->elem_item = NULL;",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "7794:     }",
          "7795:     else",
          "7796:     {",
          "7802:     }",
          "7804:     return(consumed);",
          "",
          "[Removed Lines]",
          "7797:         gchar *a_add_string;",
          "7799:         a_add_string = (gchar *) wmem_alloc(wmem_packet_scope(), 1024);",
          "7800:         a_add_string[0] = '\\0';",
          "7801:         consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, tree, curr_offset, -1, a_add_string, 1024);",
          "",
          "[Added Lines]",
          "7727:         consumed = (*elem_1_fcn[dec_idx])(tvb, pinfo, tree, curr_offset, -1, data_p);",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "7808: #define ELEM_MAND_TLV(elem_idx, elem_name_addition) \\",
          "7809: {\\",
          "7811:     { \\",
          "7812:         curr_offset += consumed; \\",
          "7813:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7810:     if ((consumed = elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition)) > 0) \\",
          "",
          "[Added Lines]",
          "7736:     if ((consumed = elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition, data_p)) > 0) \\",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "7828: #define ELEM_OPT_TLV(elem_idx, elem_name_addition) \\",
          "7829: {\\",
          "7831:     { \\",
          "7832:         curr_offset += consumed; \\",
          "7833:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7830:     if ((consumed = elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition)) > 0) \\",
          "",
          "[Added Lines]",
          "7756:     if ((consumed = elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition, data_p)) > 0) \\",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "7838: #define ELEM_MAND_TV(elem_idx, elem_name_addition) \\",
          "7839: {\\",
          "7841:     { \\",
          "7842:         curr_offset += consumed; \\",
          "7843:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7840:     if ((consumed = elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition)) > 0) \\",
          "",
          "[Added Lines]",
          "7766:     if ((consumed = elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition, data_p)) > 0) \\",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "7858: #define ELEM_OPT_TV(elem_idx, elem_name_addition) \\",
          "7859: {\\",
          "7861:     { \\",
          "7862:         curr_offset += consumed; \\",
          "7863:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7860:     if ((consumed = elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition)) > 0) \\",
          "",
          "[Added Lines]",
          "7786:     if ((consumed = elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition, data_p)) > 0) \\",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "7868: #define ELEM_OPT_T(elem_idx, elem_name_addition) \\",
          "7869: {\\",
          "7871:     { \\",
          "7872:         curr_offset += consumed; \\",
          "7873:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7870:     if ((consumed = elem_t(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition)) > 0) \\",
          "",
          "[Added Lines]",
          "7796:     if ((consumed = elem_t(tvb, pinfo, tree, elem_idx, curr_offset, elem_name_addition, data_p)) > 0) \\",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "7875:     if (curr_len <= 0) return; \\",
          "7876: }",
          "7879: {\\",
          "7883:     { \\",
          "7884:         curr_offset += consumed; \\",
          "7885:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7878: #define ELEM_MAND_LV(elem_idx, elem_name_addition, from_sip) \\",
          "7880:     if ((consumed = (from_sip ? \\",
          "7881:                          elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition) : \\",
          "7882:                          elem_lv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition))) > 0) \\",
          "",
          "[Added Lines]",
          "7804: #define ELEM_MAND_LV(elem_idx, elem_name_addition) \\",
          "7806:     if ((consumed = (data_p->from_sip ? \\",
          "7807:                          elem_tlv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition, data_p) : \\",
          "7808:                          elem_lv(tvb, pinfo, tree, elem_idx, curr_offset, curr_len, elem_name_addition, data_p))) > 0) \\",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "7891:     if (curr_len <= 0) return; \\",
          "7892: }",
          "7895: {\\",
          "7899:     { \\",
          "7900:         curr_offset += consumed; \\",
          "7901:         curr_len -= consumed; \\",
          "",
          "[Removed Lines]",
          "7894: #define ELEM_MAND_V(elem_idx, from_sip) \\",
          "7896:     if ((consumed = (from_sip ? \\",
          "7897:                          elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, \"\") : \\",
          "7898:                          elem_v(tvb, pinfo, tree, elem_idx, curr_offset))) > 0) \\",
          "",
          "[Added Lines]",
          "7820: #define ELEM_MAND_V(elem_idx) \\",
          "7822:     if ((consumed = (data_p->from_sip ? \\",
          "7823:                          elem_tv(tvb, pinfo, tree, elem_idx, curr_offset, \"\", data_p) : \\",
          "7824:                          elem_v(tvb, pinfo, tree, elem_idx, curr_offset, data_p))) > 0) \\",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "7914: static void",
          "7916: {",
          "7917:     guint32     curr_offset;",
          "7918:     guint16     consumed;",
          "",
          "[Removed Lines]",
          "7915: bsmap_cl3_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "7841: bsmap_cl3_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "7921:     curr_offset = offset;",
          "7922:     curr_len = len;",
          "7925:     {",
          "",
          "[Removed Lines]",
          "7924:     if (!from_sip)",
          "",
          "[Added Lines]",
          "7850:     if (!data_p->from_sip)",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "7947: };",
          "7949: static void",
          "7951: {",
          "7952:     guint32     curr_offset;",
          "7953:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "7950: dtap_cm_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "7876: dtap_cm_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "7973:     curr_offset++;",
          "7974:     curr_len--;",
          "7980:     ELEM_OPT_TLV(ANSI_A_E_CLD_PARTY_BCD_NUM, \"\");",
          "",
          "[Removed Lines]",
          "7976:     ELEM_MAND_LV(ANSI_A_E_CM_INFO_TYPE_2, \"\", from_sip);",
          "7978:     ELEM_MAND_LV(ANSI_A_E_MID, \"\", from_sip);",
          "",
          "[Added Lines]",
          "7902:     ELEM_MAND_LV(ANSI_A_E_CM_INFO_TYPE_2, \"\");",
          "7904:     ELEM_MAND_LV(ANSI_A_E_MID, \"\");",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "8043: static void",
          "8045: {",
          "8046:     guint32     curr_offset;",
          "8047:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8044: dtap_cm_srvc_req_cont(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "7970: dtap_cm_srvc_req_cont(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "8065: static void",
          "8067: {",
          "8068:     guint32     curr_offset;",
          "8069:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8066: bsmap_page_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "7992: bsmap_page_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "8108: static void",
          "8110: {",
          "8111:     guint32     curr_offset;",
          "8112:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8109: dtap_page_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "8035: dtap_page_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "8115:     curr_offset = offset;",
          "8116:     curr_len = len;",
          "8122:     ELEM_OPT_TV(ANSI_A_E_TAG, \"\");",
          "",
          "[Removed Lines]",
          "8118:     ELEM_MAND_LV(ANSI_A_E_CM_INFO_TYPE_2, \"\", from_sip);",
          "8120:     ELEM_MAND_LV(ANSI_A_E_MID, \"\", from_sip);",
          "",
          "[Added Lines]",
          "8044:     ELEM_MAND_LV(ANSI_A_E_CM_INFO_TYPE_2, \"\");",
          "8046:     ELEM_MAND_LV(ANSI_A_E_MID, \"\");",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "8171: static void",
          "8173: {",
          "8174:     guint32     curr_offset;",
          "8175:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8172: dtap_progress(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8098: dtap_progress(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "8193: static void",
          "8195: {",
          "8196:     guint32     curr_offset;",
          "8197:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8194: dtap_srvc_redirection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8120: dtap_srvc_redirection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "8221: static void",
          "8223: {",
          "8224:     guint32     curr_offset;",
          "8225:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8222: dtap_srvc_release(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8148: dtap_srvc_release(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "8243: static void",
          "8245: {",
          "8246:     guint32     curr_offset;",
          "8247:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8244: dtap_srvc_release_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8170: dtap_srvc_release_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "8261: static void",
          "8263: {",
          "8264:     guint16     consumed;",
          "8265:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8262: bsmap_ass_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8188: bsmap_ass_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "8314: static void",
          "8316: {",
          "8317:     guint16     consumed;",
          "8318:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8315: bsmap_ass_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8241: bsmap_ass_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "8349: static void",
          "8351: {",
          "8352:     guint16     consumed;",
          "8353:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8350: bsmap_ass_failure(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8276: bsmap_ass_failure(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "8369: static void",
          "8371: {",
          "8372:     guint16     consumed;",
          "8373:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8370: bsmap_clr_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8296: bsmap_clr_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "8389: static void",
          "8391: {",
          "8392:     guint16     consumed;",
          "8393:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8390: bsmap_clr_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8316: bsmap_clr_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "8409: static void",
          "8411: {",
          "8412:     guint16     consumed;",
          "8413:     guint32     curr_offset;",
          "",
          "[Removed Lines]",
          "8410: bsmap_clr_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8336: bsmap_clr_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "8429: static void",
          "8431: {",
          "8432:     guint32     curr_offset;",
          "8433:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8430: dtap_alert_with_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8356: dtap_alert_with_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "8449: static void",
          "8451: {",
          "8452:     guint32     curr_offset;",
          "8453:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8450: bsmap_bs_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8376: bsmap_bs_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "8479: static void",
          "8481: {",
          "8482:     guint32     curr_offset;",
          "8483:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8480: bsmap_bs_srvc_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8406: bsmap_bs_srvc_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "8505: static void",
          "8507: {",
          "8508:     guint32     curr_offset;",
          "8509:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8506: bsmap_add_srvc_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8432: bsmap_add_srvc_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "8527: static void",
          "8529: {",
          "8530:     guint32     curr_offset;",
          "8531:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8528: dtap_add_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8454: dtap_add_srvc_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "8561: static void",
          "8563: {",
          "8564:     guint32     curr_offset;",
          "8565:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8562: dtap_connect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8488: dtap_connect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "8579: static void",
          "8581: {",
          "8582:     guint32     curr_offset;",
          "8583:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8580: dtap_flash_with_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8506: dtap_flash_with_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "8597:     ELEM_OPT_TV(ANSI_A_E_TAG, \"\");",
          "8600:     {",
          "8601:         ELEM_OPT_TLV(ANSI_A_E_REV_MS_INFO_RECS, \"\");",
          "8602:     }",
          "",
          "[Removed Lines]",
          "8599:     if (pinfo->p2p_dir == P2P_DIR_RECV)",
          "",
          "[Added Lines]",
          "8525:     if (data_p->is_reverse)",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "8618: static void",
          "8620: {",
          "8621:     guint32     curr_offset;",
          "8622:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8619: dtap_flash_with_info_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8545: dtap_flash_with_info_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "8638: static void",
          "8640: {",
          "8641:     guint32     curr_offset;",
          "8642:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8639: bsmap_feat_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8565: bsmap_feat_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "8678: static void",
          "8680: {",
          "8681:     guint32     curr_offset;",
          "8682:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8679: bsmap_feat_noti_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8605: bsmap_feat_noti_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "8698: static void",
          "8700: {",
          "8701:     guint32     curr_offset;",
          "8702:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8699: bsmap_paca_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8625: bsmap_paca_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "8718: static void",
          "8720: {",
          "8721:     guint32     curr_offset;",
          "8722:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8719: bsmap_paca_command_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8645: bsmap_paca_command_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "8736: static void",
          "8738: {",
          "8739:     guint32     curr_offset;",
          "8740:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8737: bsmap_paca_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8663: bsmap_paca_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "8774: static void",
          "8776: {",
          "8777:     guint32     curr_offset;",
          "8778:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8775: bsmap_paca_update_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8701: bsmap_paca_update_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "8796: static void",
          "8798: {",
          "8799:     guint32     curr_offset;",
          "8800:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8797: bsmap_rm_pos_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8723: bsmap_rm_pos_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "8814: static void",
          "8816: {",
          "8817:     guint32     curr_offset;",
          "8818:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8815: bsmap_rm_pos_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8741: bsmap_rm_pos_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "8838: static void",
          "8840: {",
          "8841:     guint32     curr_offset;",
          "8842:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8839: bsmap_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8765: bsmap_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "8867: }",
          "8869: static void",
          "8871: {",
          "8872:     guint32     curr_offset;",
          "8873:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8870: dtap_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "8796: dtap_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "8876:     curr_offset = offset;",
          "8877:     curr_len = len;",
          "8881:     ELEM_OPT_TLV(ANSI_A_E_IS2000_MOB_CAP, \"\");",
          "",
          "[Removed Lines]",
          "8879:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\", from_sip);",
          "",
          "[Added Lines]",
          "8805:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\");",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "8889: static void",
          "8891: {",
          "8892:     guint32     curr_offset;",
          "8893:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8890: bsmap_auth_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8816: bsmap_auth_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "8916: static void",
          "8918: {",
          "8919:     guint32     curr_offset;",
          "8920:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8917: bsmap_bearer_upd_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8843: bsmap_bearer_upd_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "8937: static void",
          "8939: {",
          "8940:     guint32     curr_offset;",
          "8941:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8938: bsmap_bearer_upd_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8864: bsmap_bearer_upd_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "8960: static void",
          "8962: {",
          "8963:     guint32     curr_offset;",
          "8964:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8961: bsmap_bearer_upd_reqd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8887: bsmap_bearer_upd_reqd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "8977: }",
          "8979: static void",
          "8981: {",
          "8982:     guint32     curr_offset;",
          "8983:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8980: dtap_auth_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "8906: dtap_auth_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "8986:     curr_offset = offset;",
          "8987:     curr_len = len;",
          "8991:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "8992: }",
          "",
          "[Removed Lines]",
          "8989:     ELEM_MAND_LV(ANSI_A_E_AUTH_RESP_PARAM, \"\", from_sip);",
          "",
          "[Added Lines]",
          "8915:     ELEM_MAND_LV(ANSI_A_E_AUTH_RESP_PARAM, \"\");",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "8997: static void",
          "8999: {",
          "9000:     guint32     curr_offset;",
          "9001:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "8998: bsmap_user_zone_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8924: bsmap_user_zone_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "9015: static void",
          "9017: {",
          "9018:     guint32     curr_offset;",
          "9019:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9016: dtap_user_zone_update_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8942: dtap_user_zone_update_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 234 ---",
          "[Context before]",
          "9033: static void",
          "9035: {",
          "9036:     guint32     curr_offset;",
          "9037:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9034: dtap_user_zone_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8960: dtap_user_zone_update(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 235 ---",
          "[Context before]",
          "9051: static void",
          "9053: {",
          "9054:     guint32     curr_offset;",
          "9055:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9052: dtap_send_burst_dtmf(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8978: dtap_send_burst_dtmf(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 236 ---",
          "[Context before]",
          "9058:     curr_offset = offset;",
          "9059:     curr_len = len;",
          "9065:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9066: }",
          "",
          "[Removed Lines]",
          "9061:     ELEM_MAND_LV(ANSI_A_E_BDTMF_TRANS_INFO, \"\", from_sip);",
          "9063:     ELEM_MAND_LV(ANSI_A_E_DTMF_CHARS, \"\", from_sip);",
          "",
          "[Added Lines]",
          "8987:     ELEM_MAND_LV(ANSI_A_E_BDTMF_TRANS_INFO, \"\");",
          "8989:     ELEM_MAND_LV(ANSI_A_E_DTMF_CHARS, \"\");",
          "",
          "---------------",
          "--- Hunk 237 ---",
          "[Context before]",
          "9071: static void",
          "9073: {",
          "9074:     guint32     curr_offset;",
          "9075:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9072: dtap_send_burst_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "8998: dtap_send_burst_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 238 ---",
          "[Context before]",
          "9089: static void",
          "9091: {",
          "9092:     guint32     curr_offset;",
          "9093:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9090: dtap_start_dtmf(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9016: dtap_start_dtmf(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 239 ---",
          "[Context before]",
          "9096:     curr_offset = offset;",
          "9097:     curr_len = len;",
          "9101:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9102: }",
          "",
          "[Removed Lines]",
          "9099:     ELEM_MAND_LV(ANSI_A_E_DTMF_CHARS, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9025:     ELEM_MAND_LV(ANSI_A_E_DTMF_CHARS, \"\");",
          "",
          "---------------",
          "--- Hunk 240 ---",
          "[Context before]",
          "9107: static void",
          "9109: {",
          "9110:     guint32     curr_offset;",
          "9111:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9108: dtap_start_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9034: dtap_start_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 241 ---",
          "[Context before]",
          "9125: static void",
          "9127: {",
          "9128:     guint32     curr_offset;",
          "9129:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9126: dtap_stop_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9052: dtap_stop_dtmf_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 242 ---",
          "[Context before]",
          "9143: static void",
          "9145: {",
          "9146:     guint32     curr_offset;",
          "9147:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9144: bsmap_user_zone_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9070: bsmap_user_zone_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 243 ---",
          "[Context before]",
          "9175: static void",
          "9177: {",
          "9178:     guint32     curr_offset;",
          "9179:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9176: dtap_user_zone_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9102: dtap_user_zone_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 244 ---",
          "[Context before]",
          "9193: static void",
          "9195: {",
          "9196:     guint32     curr_offset;",
          "9197:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9194: bsmap_reg_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9120: bsmap_reg_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 245 ---",
          "[Context before]",
          "9223: static void",
          "9225: {",
          "9226:     guint32     curr_offset;",
          "9227:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9224: bsmap_ms_reg_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9150: bsmap_ms_reg_noti(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 246 ---",
          "[Context before]",
          "9241: static void",
          "9243: {",
          "9244:     guint32     curr_offset;",
          "9245:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9242: bsmap_bs_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9168: bsmap_bs_auth_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 247 ---",
          "[Context before]",
          "9259: static void",
          "9261: {",
          "9262:     guint32     curr_offset;",
          "9263:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9260: bsmap_bs_auth_req_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9186: bsmap_bs_auth_req_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 248 ---",
          "[Context before]",
          "9277: static void",
          "9279: {",
          "9280:     guint32     curr_offset;",
          "9281:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9278: dtap_ssd_update_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9204: dtap_ssd_update_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 249 ---",
          "[Context before]",
          "9284:     curr_offset = offset;",
          "9285:     curr_len = len;",
          "9289:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9290: }",
          "",
          "[Removed Lines]",
          "9287:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9213:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\");",
          "",
          "---------------",
          "--- Hunk 250 ---",
          "[Context before]",
          "9295: static void",
          "9297: {",
          "9298:     guint32     curr_offset;",
          "9299:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9296: dtap_bs_challenge(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9222: dtap_bs_challenge(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 251 ---",
          "[Context before]",
          "9302:     curr_offset = offset;",
          "9303:     curr_len = len;",
          "9307:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9308: }",
          "",
          "[Removed Lines]",
          "9305:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9231:     ELEM_MAND_LV(ANSI_A_E_AUTH_CHLG_PARAM, \"\");",
          "",
          "---------------",
          "--- Hunk 252 ---",
          "[Context before]",
          "9313: static void",
          "9315: {",
          "9316:     guint32     curr_offset;",
          "9317:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9314: dtap_bs_challenge_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9240: dtap_bs_challenge_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 253 ---",
          "[Context before]",
          "9320:     curr_offset = offset;",
          "9321:     curr_len = len;",
          "9325:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9326: }",
          "",
          "[Removed Lines]",
          "9323:     ELEM_MAND_LV(ANSI_A_E_AUTH_RESP_PARAM, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9249:     ELEM_MAND_LV(ANSI_A_E_AUTH_RESP_PARAM, \"\");",
          "",
          "---------------",
          "--- Hunk 254 ---",
          "[Context before]",
          "9331: static void",
          "9333: {",
          "9334:     guint32     curr_offset;",
          "9335:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9332: dtap_ssd_update_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9258: dtap_ssd_update_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 255 ---",
          "[Context before]",
          "9349: static void",
          "9351: {",
          "9352:     guint32     curr_offset;",
          "9353:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9350: dtap_lu_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9276: dtap_lu_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 256 ---",
          "[Context before]",
          "9356:     curr_offset = offset;",
          "9357:     curr_len = len;",
          "9361:     ELEM_OPT_TV(ANSI_A_E_LAI, \"\");",
          "",
          "[Removed Lines]",
          "9359:     ELEM_MAND_LV(ANSI_A_E_MID, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9285:     ELEM_MAND_LV(ANSI_A_E_MID, \"\");",
          "",
          "---------------",
          "--- Hunk 257 ---",
          "[Context before]",
          "9399: static void",
          "9401: {",
          "9402:     guint32     curr_offset;",
          "9403:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9400: dtap_lu_accept(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9326: dtap_lu_accept(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 258 ---",
          "[Context before]",
          "9430: static void",
          "9432: {",
          "9433:     guint32     curr_offset;",
          "9434:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9431: dtap_lu_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9357: dtap_lu_reject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 259 ---",
          "[Context before]",
          "9437:     curr_offset = offset;",
          "9438:     curr_len = len;",
          "9442:     switch (global_a_variant)",
          "9443:     {",
          "",
          "[Removed Lines]",
          "9440:     ELEM_MAND_V(ANSI_A_E_REJ_CAUSE, from_sip);",
          "",
          "[Added Lines]",
          "9366:     ELEM_MAND_V(ANSI_A_E_REJ_CAUSE);",
          "",
          "---------------",
          "--- Hunk 260 ---",
          "[Context before]",
          "9457: static void",
          "9459: {",
          "9460:     guint32     curr_offset;",
          "9461:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9458: bsmap_priv_mode_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9384: bsmap_priv_mode_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 261 ---",
          "[Context before]",
          "9475: static void",
          "9477: {",
          "9478:     guint32     curr_offset;",
          "9479:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9476: bsmap_priv_mode_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9402: bsmap_priv_mode_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 262 ---",
          "[Context before]",
          "9495: static void",
          "9497: {",
          "9498:     guint32     curr_offset;",
          "9499:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9496: bsmap_status_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9422: bsmap_status_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 263 ---",
          "[Context before]",
          "9533: static void",
          "9535: {",
          "9536:     guint32     curr_offset;",
          "9537:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9534: dtap_status_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9460: dtap_status_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 264 ---",
          "[Context before]",
          "9540:     curr_offset = offset;",
          "9541:     curr_len = len;",
          "9545:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9546: }",
          "",
          "[Removed Lines]",
          "9543:     ELEM_MAND_LV(ANSI_A_E_IE_REQD, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9469:     ELEM_MAND_LV(ANSI_A_E_IE_REQD, \"\");",
          "",
          "---------------",
          "--- Hunk 265 ---",
          "[Context before]",
          "9552: static void",
          "9554: {",
          "9555:     guint32     curr_offset;",
          "9556:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9553: bsmap_status_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9479: bsmap_status_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 266 ---",
          "[Context before]",
          "9578: static void",
          "9580: {",
          "9581:     guint32     curr_offset;",
          "9582:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9579: dtap_status_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "9505: dtap_status_resp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 267 ---",
          "[Context before]",
          "9585:     curr_offset = offset;",
          "9586:     curr_len = len;",
          "9590:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "9591: }",
          "",
          "[Removed Lines]",
          "9588:     ELEM_MAND_LV(ANSI_A_E_REV_MS_INFO_RECS, \"\", from_sip);",
          "",
          "[Added Lines]",
          "9514:     ELEM_MAND_LV(ANSI_A_E_REV_MS_INFO_RECS, \"\");",
          "",
          "---------------",
          "--- Hunk 268 ---",
          "[Context before]",
          "9596: static void",
          "9598: {",
          "9599:     guint32     curr_offset;",
          "9600:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9597: bsmap_ho_reqd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9523: bsmap_ho_reqd(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 269 ---",
          "[Context before]",
          "9679: static void",
          "9681: {",
          "9682:     guint32     curr_offset;",
          "9683:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9680: bsmap_ho_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9606: bsmap_ho_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 270 ---",
          "[Context before]",
          "9773: static void",
          "9775: {",
          "9776:     guint32     curr_offset;",
          "9777:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9774: bsmap_ho_req_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9700: bsmap_ho_req_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 271 ---",
          "[Context before]",
          "9822: static void",
          "9824: {",
          "9825:     guint32     curr_offset;",
          "9826:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9823: bsmap_ho_failure(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9749: bsmap_ho_failure(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 272 ---",
          "[Context before]",
          "9840: static void",
          "9842: {",
          "9843:     guint32     curr_offset;",
          "9844:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9841: bsmap_ho_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9767: bsmap_ho_command(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 273 ---",
          "[Context before]",
          "9893: static void",
          "9895: {",
          "9896:     guint32     curr_offset;",
          "9897:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9894: bsmap_ho_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9820: bsmap_ho_complete(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 274 ---",
          "[Context before]",
          "9911: static void",
          "9913: {",
          "9914:     guint32     curr_offset;",
          "9915:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9912: bsmap_ho_reqd_rej(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9838: bsmap_ho_reqd_rej(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 275 ---",
          "[Context before]",
          "9929: static void",
          "9931: {",
          "9932:     guint32     curr_offset;",
          "9933:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9930: bsmap_ho_performed(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9856: bsmap_ho_performed(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 276 ---",
          "[Context before]",
          "9955: static void",
          "9957: {",
          "9958:     guint32     curr_offset;",
          "9959:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9956: bsmap_block(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9882: bsmap_block(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 277 ---",
          "[Context before]",
          "9977: static void",
          "9979: {",
          "9980:     guint32     curr_offset;",
          "9981:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9978: bsmap_block_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9904: bsmap_block_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 278 ---",
          "[Context before]",
          "9995: static void",
          "9997: {",
          "9998:     guint32     curr_offset;",
          "9999:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "9996: bsmap_unblock(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9922: bsmap_unblock(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 279 ---",
          "[Context before]",
          "10015: static void",
          "10017: {",
          "10018:     guint32     curr_offset;",
          "10019:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10016: bsmap_unblock_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9942: bsmap_unblock_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 280 ---",
          "[Context before]",
          "10033: static void",
          "10035: {",
          "10036:     guint32     curr_offset;",
          "10037:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10034: bsmap_reset(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9960: bsmap_reset(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 281 ---",
          "[Context before]",
          "10053: static void",
          "10055: {",
          "10056:     guint32     curr_offset;",
          "10057:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10054: bsmap_reset_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9980: bsmap_reset_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 282 ---",
          "[Context before]",
          "10071: static void",
          "10073: {",
          "10074:     guint32     curr_offset;",
          "10075:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10072: bsmap_reset_cct(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "9998: bsmap_reset_cct(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 283 ---",
          "[Context before]",
          "10093: static void",
          "10095: {",
          "10096:     guint32     curr_offset;",
          "10097:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10094: bsmap_reset_cct_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10020: bsmap_reset_cct_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 284 ---",
          "[Context before]",
          "10111: static void",
          "10113: {",
          "10114:     guint32     curr_offset;",
          "10115:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10112: bsmap_xmode_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10038: bsmap_xmode_req(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 285 ---",
          "[Context before]",
          "10129: static void",
          "10131: {",
          "10132:     guint32     curr_offset;",
          "10133:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10130: bsmap_xmode_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10056: bsmap_xmode_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 286 ---",
          "[Context before]",
          "10147: static void",
          "10149: {",
          "10150:     guint32     curr_offset;",
          "10151:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10148: bsmap_adds_page(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10074: bsmap_adds_page(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 287 ---",
          "[Context before]",
          "10181: static void",
          "10183: {",
          "10184:     guint32     curr_offset;",
          "10185:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10182: bsmap_adds_transfer(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10108: bsmap_adds_transfer(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 288 ---",
          "[Context before]",
          "10235: static void",
          "10237: {",
          "10238:     guint32     curr_offset;",
          "10239:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10236: bsmap_adds_transfer_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10162: bsmap_adds_transfer_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 289 ---",
          "[Context before]",
          "10257: static void",
          "10259: {",
          "10260:     guint32     curr_offset;",
          "10261:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10258: dtap_adds_deliver(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip)",
          "",
          "[Added Lines]",
          "10184: dtap_adds_deliver(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 290 ---",
          "[Context before]",
          "10264:     curr_offset = offset;",
          "10265:     curr_len = len;",
          "10269:     ELEM_OPT_TV(ANSI_A_E_TAG, \"\");",
          "",
          "[Removed Lines]",
          "10267:     ELEM_MAND_LV(ANSI_A_E_ADDS_USER_PART, \"\", from_sip);",
          "",
          "[Added Lines]",
          "10193:     ELEM_MAND_LV(ANSI_A_E_ADDS_USER_PART, \"\");",
          "",
          "---------------",
          "--- Hunk 291 ---",
          "[Context before]",
          "10279: static void",
          "10281: {",
          "10282:     guint32     curr_offset;",
          "10283:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10280: bsmap_adds_page_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10206: bsmap_adds_page_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 292 ---",
          "[Context before]",
          "10307: static void",
          "10309: {",
          "10310:     guint32     curr_offset;",
          "10311:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10308: dtap_adds_deliver_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10234: dtap_adds_deliver_ack(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 293 ---",
          "[Context before]",
          "10327: static void",
          "10329: {",
          "10330:     guint32     curr_offset;",
          "10331:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10328: bsmap_rejection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10254: bsmap_rejection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 294 ---",
          "[Context before]",
          "10346: }",
          "10348: static void",
          "10350: {",
          "10351:     guint32     curr_offset;",
          "10352:     guint32     consumed;",
          "",
          "[Removed Lines]",
          "10349: dtap_rejection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip _U_)",
          "",
          "[Added Lines]",
          "10275: dtap_rejection(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)",
          "",
          "---------------",
          "--- Hunk 295 ---",
          "[Context before]",
          "10369: #define ANSI_A_IOS401_BSMAP_NUM_MSG (sizeof(ansi_a_ios401_bsmap_strings)/sizeof(ext_value_string_t))",
          "10370: #define ANSI_A_IOS501_BSMAP_NUM_MSG (sizeof(ansi_a_ios501_bsmap_strings)/sizeof(ext_value_string_t))",
          "10371: static gint ett_bsmap_msg[MAX(ANSI_A_IOS401_BSMAP_NUM_MSG, ANSI_A_IOS501_BSMAP_NUM_MSG)];",
          "10373: {",
          "",
          "[Removed Lines]",
          "10372: static void (*bsmap_msg_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip) =",
          "",
          "[Added Lines]",
          "10298: static void (*bsmap_msg_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p) =",
          "",
          "---------------",
          "--- Hunk 296 ---",
          "[Context before]",
          "10439: #define ANSI_A_IOS401_DTAP_NUM_MSG (sizeof(ansi_a_ios401_dtap_strings)/sizeof(ext_value_string_t))",
          "10440: #define ANSI_A_IOS501_DTAP_NUM_MSG (sizeof(ansi_a_ios501_dtap_strings)/sizeof(ext_value_string_t))",
          "10441: static gint ett_dtap_msg[MAX(ANSI_A_IOS401_DTAP_NUM_MSG, ANSI_A_IOS501_DTAP_NUM_MSG)];",
          "10443: {",
          "",
          "[Removed Lines]",
          "10442: static void (*dtap_msg_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, gboolean from_sip) =",
          "",
          "[Added Lines]",
          "10368: static void (*dtap_msg_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p) =",
          "",
          "---------------",
          "--- Hunk 297 ---",
          "[Context before]",
          "10485: void",
          "10487: {",
          "10494:     curr_offset = offset;",
          "10495:     curr_len = len;",
          "",
          "[Removed Lines]",
          "10486: dissect_cdma2000_a1_elements(tvbuff_t *tvb, _U_ packet_info *pinfo, proto_tree *tree, guint32 offset, guint len)",
          "10488:     guint32     curr_offset;",
          "10489:     guint32     consumed;",
          "10490:     guint       curr_len;",
          "10491:     unsigned    idx;",
          "10492:     guint8      oct;",
          "",
          "[Added Lines]",
          "10412: dissect_cdma2000_a1_elements(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset, guint len)",
          "10414:     guint32                     curr_offset;",
          "10415:     guint32                     consumed;",
          "10416:     guint                       curr_len;",
          "10417:     unsigned                    idx;",
          "10418:     guint8                      oct;",
          "10419:     ansi_a_shared_data_t        shared_data;",
          "10420:     ansi_a_shared_data_t        *data_p;",
          "10422:     memset((void *) &shared_data, 0, sizeof(shared_data));",
          "10423:     data_p = &shared_data;",
          "10425:     shared_data.g_tree = tree;",
          "",
          "---------------",
          "--- Hunk 298 ---",
          "[Context before]",
          "10508:         {",
          "10509:             if (oct == (guint8) ansi_a_elem_1_strings[idx].value)",
          "10510:             {",
          "10512:                 break;",
          "10513:             }",
          "10514:         }",
          "",
          "[Removed Lines]",
          "10511:                 ELEM_OPT_TLV((elem_idx_t)idx, \"\");",
          "",
          "[Added Lines]",
          "10444:                 ELEM_OPT_TLV((elem_idx_t) idx, \"\");",
          "",
          "---------------",
          "--- Hunk 299 ---",
          "[Context before]",
          "10537:     static ansi_a_tap_rec_t     *tap_p;",
          "10538:     static int                  tap_current = 0;",
          "10539:     guint8                      oct;",
          "10541:     guint32                     len;",
          "10542:     gint                        dec_idx;",
          "10543:     proto_item                  *bsmap_item = NULL;",
          "10544:     proto_tree                  *bsmap_tree = NULL;",
          "10545:     const gchar                 *msg_str;",
          "10548:     col_append_str(pinfo->cinfo, COL_INFO, \"(BSMAP) \");",
          "",
          "[Removed Lines]",
          "10540:     guint32                     offset, saved_offset;",
          "",
          "[Added Lines]",
          "10473:     guint32                     offset;",
          "10479:     ansi_a_shared_data_t        shared_data;",
          "10481:     memset((void *) &shared_data, 0, sizeof(shared_data));",
          "10483:     shared_data.g_tree = tree;",
          "10484:     shared_data.from_sip = from_sip;",
          "10489:     shared_data.is_reverse = (pinfo->p2p_dir == P2P_DIR_RECV);",
          "",
          "---------------",
          "--- Hunk 300 ---",
          "[Context before]",
          "10557:     }",
          "10558:     tap_p = &tap_rec[tap_current];",
          "10566:     len = tvb_length(tvb);",
          "10573:     msg_str = my_try_val_to_str_idx((guint32) oct, ansi_a_bsmap_strings, &dec_idx);",
          "",
          "[Removed Lines]",
          "10561:     offset = 0;",
          "10562:     saved_offset = offset;",
          "10564:     g_tree = tree;",
          "10571:     oct = tvb_get_guint8(tvb, offset++);",
          "",
          "[Added Lines]",
          "10504:     offset = 0;",
          "10509:     oct = tvb_get_guint8(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 301 ---",
          "[Context before]",
          "10596:         col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", msg_str);",
          "10597:     }",
          "10606:     tap_p->pdu_type = BSSAP_PDU_TYPE_BSMAP;",
          "10607:     tap_p->message_type = oct;",
          "",
          "[Removed Lines]",
          "10599:     ansi_a_message_item = bsmap_item;",
          "10604:     proto_tree_add_item(bsmap_tree, hf_ansi_a_bsmap_msgtype, tvb, saved_offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "10537:     shared_data.message_item = bsmap_item;",
          "10539:     proto_tree_add_item(bsmap_tree, hf_ansi_a_bsmap_msgtype, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "10541:     offset++;",
          "",
          "---------------",
          "--- Hunk 302 ---",
          "[Context before]",
          "10613:     if ((len - offset) <= 0) return;",
          "",
          "[Removed Lines]",
          "10615:     a_meid_configured = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 303 ---",
          "[Context before]",
          "10624:     }",
          "10625:     else",
          "10626:     {",
          "10628:     }",
          "10629: }",
          "",
          "[Removed Lines]",
          "10627:         (*bsmap_msg_fcn[dec_idx])(tvb, pinfo, bsmap_tree, offset, len - offset, from_sip);",
          "",
          "[Added Lines]",
          "10562:         (*bsmap_msg_fcn[dec_idx])(tvb, pinfo, bsmap_tree, offset, len - offset, &shared_data);",
          "",
          "---------------",
          "--- Hunk 304 ---",
          "[Context before]",
          "10641:     static ansi_a_tap_rec_t     *tap_p;",
          "10642:     static int                  tap_current = 0;",
          "10643:     guint8                      oct, oct_1 = 0;",
          "10645:     guint32                     len;",
          "10646:     gint                        dec_idx;",
          "10647:     proto_item                  *dtap_item = NULL;",
          "",
          "[Removed Lines]",
          "10644:     guint32                     offset, saved_offset;",
          "",
          "[Added Lines]",
          "10579:     guint32                     offset;",
          "",
          "---------------",
          "--- Hunk 305 ---",
          "[Context before]",
          "10650:     proto_tree                  *oct_1_tree = NULL;",
          "10651:     const gchar                 *msg_str;",
          "10652:     const gchar                 *str;",
          "10654:     len = tvb_length(tvb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10588:     ansi_a_shared_data_t        shared_data;",
          "",
          "---------------",
          "--- Hunk 306 ---",
          "[Context before]",
          "10662:         return;",
          "10663:     }",
          "10665:     col_append_str(pinfo->cinfo, COL_INFO, \"(DTAP) \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10601:     memset((void *) &shared_data, 0, sizeof(shared_data));",
          "10603:     shared_data.g_tree = tree;",
          "10604:     shared_data.from_sip = from_sip;",
          "10609:     shared_data.is_reverse = (pinfo->p2p_dir == P2P_DIR_RECV);",
          "",
          "---------------",
          "--- Hunk 307 ---",
          "[Context before]",
          "10674:     }",
          "10675:     tap_p = &tap_rec[tap_current];",
          "10678:     offset = 0;",
          "10685:     if (!from_sip)",
          "10686:     {",
          "10689:     }",
          "10697:     msg_str = my_try_val_to_str_idx((guint32) oct, ansi_a_dtap_strings, &dec_idx);",
          "",
          "[Removed Lines]",
          "10680:     g_tree = tree;",
          "10687:         oct_1 = tvb_get_guint8(tvb, offset++);",
          "10694:     saved_offset = offset;",
          "10695:     oct = tvb_get_guint8(tvb, offset++);",
          "",
          "[Added Lines]",
          "10630:         oct_1 = tvb_get_guint8(tvb, offset);",
          "10631:         offset++;",
          "10638:     oct = tvb_get_guint8(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 308 ---",
          "[Context before]",
          "10720:         col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", msg_str);",
          "10721:     }",
          "10725:     if (!from_sip)",
          "10726:     {",
          "",
          "[Removed Lines]",
          "10723:     ansi_a_message_item = dtap_item;",
          "",
          "[Added Lines]",
          "10666:     shared_data.message_item = dtap_item;",
          "",
          "---------------",
          "--- Hunk 309 ---",
          "[Context before]",
          "10768:         }",
          "10769:     }",
          "10776:     tap_p->pdu_type = BSSAP_PDU_TYPE_DTAP;",
          "10777:     tap_p->message_type = oct;",
          "",
          "[Removed Lines]",
          "10774:     proto_tree_add_item(dtap_tree, hf_ansi_a_dtap_msgtype, tvb, saved_offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "10714:     proto_tree_add_item(dtap_tree, hf_ansi_a_dtap_msgtype, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "10716:     offset++;",
          "",
          "---------------",
          "--- Hunk 310 ---",
          "[Context before]",
          "10783:     if ((len - offset) <= 0) return;",
          "",
          "[Removed Lines]",
          "10785:     a_meid_configured = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 311 ---",
          "[Context before]",
          "10794:     }",
          "10795:     else",
          "10796:     {",
          "10798:     }",
          "10799: }",
          "",
          "[Removed Lines]",
          "10797:         (*dtap_msg_fcn[dec_idx])(tvb, pinfo, dtap_tree, offset, len - offset, from_sip);",
          "",
          "[Added Lines]",
          "10737:         (*dtap_msg_fcn[dec_idx])(tvb, pinfo, dtap_tree, offset, len - offset, &shared_data);",
          "",
          "---------------",
          "--- Hunk 312 ---",
          "[Context before]",
          "12825:         },",
          "12826:         { &ei_ansi_a_unknown_bsmap_msg,",
          "12827:             { \"ansi_a.unknown_bsmap_msg\", PI_PROTOCOL, PI_WARN,",
          "12829:             EXPFILL }",
          "12830:         }",
          "12831:     };",
          "",
          "[Removed Lines]",
          "12828:             \"DTAP Message Unknown/Unsupported - try checking decoder variant preference or dissector bug/later version spec (report to wireshark.org)\",",
          "",
          "[Added Lines]",
          "12768:             \"BSMAP Message Unknown/Unsupported - try checking decoder variant preference or dissector bug/later version spec (report to wireshark.org)\",",
          "",
          "---------------",
          "--- Hunk 313 ---",
          "[Context before]",
          "12943:         register_dissector_table(\"ansi_a.pld\", \"IS-801 (PLD)\",",
          "12944:         FT_UINT8, BASE_DEC);",
          "12948:     ansi_a_tap = register_tap(\"ansi_a\");",
          "",
          "[Removed Lines]",
          "12946:     proto_register_subtree_array(ett, ett_len / (int)sizeof(gint *));",
          "",
          "[Added Lines]",
          "12886:     proto_register_subtree_array(ett, ett_len / (int) sizeof(gint *));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65b6a98b4a18a941a3c56ef3e961cc77fc33b575",
      "candidate_info": {
        "commit_hash": "65b6a98b4a18a941a3c56ef3e961cc77fc33b575",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/65b6a98b4a18a941a3c56ef3e961cc77fc33b575",
        "files": [
          "epan/dissectors/packet-btavdtp.c",
          "epan/dissectors/packet-btavdtp.h",
          "epan/dissectors/packet-hci_h1.c",
          "epan/dissectors/packet-hci_h4.c",
          "epan/dissectors/packet-rtp.c",
          "epan/dissectors/packet-rtp.h",
          "ui/rtp_stream.h",
          "ui/tap-rtp-common.c"
        ],
        "message": "Bluetooth: AVDTP: Add support for Content Protection type SCMS-T (and some minor cleanup).  Bug 7893 (https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=7893)\n\nFrom Michal Labedzki\n\nsvn path=/trunk/; revision=53065",
        "before_after_code_files": [
          "epan/dissectors/packet-btavdtp.c||epan/dissectors/packet-btavdtp.c",
          "epan/dissectors/packet-btavdtp.h||epan/dissectors/packet-btavdtp.h",
          "epan/dissectors/packet-hci_h1.c||epan/dissectors/packet-hci_h1.c",
          "epan/dissectors/packet-hci_h4.c||epan/dissectors/packet-hci_h4.c",
          "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
          "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h",
          "ui/rtp_stream.h||ui/rtp_stream.h",
          "ui/tap-rtp-common.c||ui/tap-rtp-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
            "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h"
          ],
          "candidate": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c",
            "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btavdtp.c||epan/dissectors/packet-btavdtp.c": [
          "File: epan/dissectors/packet-btavdtp.c -> epan/dissectors/packet-btavdtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"packet-btl2cap.h\"",
          "35: #include \"packet-btsdp.h\"",
          "36: #include \"packet-btavdtp.h\"",
          "38: #define AVDTP_MESSAGE_TYPE_MASK  0x03",
          "39: #define AVDTP_PACKET_TYPE_MASK   0x0C",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"packet-rtp.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250: static wmem_tree_t *cid_to_type_table = NULL;",
          "256: static dissector_handle_t sbc_handle;",
          "257: static dissector_handle_t mp2t_handle;",
          "258: static dissector_handle_t mpeg_audio_handle;",
          "259: static dissector_handle_t atrac_handle;",
          "265: static dissector_handle_t h263_handle;",
          "266: static dissector_handle_t mp4v_es_handle;",
          "269: static const value_string message_type_vals[] = {",
          "270:     { 0x00,  \"Command\" },",
          "",
          "[Removed Lines]",
          "253: static int proto_bta2dp                        = -1;",
          "254: static gint ett_bta2dp                         = -1;",
          "262: static int proto_btvdp                         = -1;",
          "263: static gint ett_btvdp                          = -1;",
          "",
          "[Added Lines]",
          "254: static gint proto_bta2dp                        = -1;",
          "255: static gint ett_bta2dp                          = -1;",
          "256: static gint proto_bta2dp_cph_scms_t             = -1;",
          "257: static gint ett_bta2dp_cph_scms_t               = -1;",
          "259: static int hf_bta2dp_codec                              = -1;",
          "260: static int hf_bta2dp_content_protection                 = -1;",
          "261: static int hf_bta2dp_l_bit                              = -1;",
          "262: static int hf_bta2dp_cp_bit                             = -1;",
          "263: static int hf_bta2dp_reserved                           = -1;",
          "270: static gboolean  force_a2dp_scms_t = FALSE;",
          "271: static gint      force_a2dp_codec = CODEC_SBC;",
          "273: static const enum_val_t pref_a2dp_codec[] = {",
          "274:     { \"sbc\",         \"SBC\",          CODEC_SBC },",
          "275:     { \"mp2t\",        \"MPEG12 AUDIO\", CODEC_MPEG12_AUDIO },",
          "276:     { \"mpeg-audio\",  \"MPEG24 AAC\",   CODEC_MPEG24_AAC },",
          "278:     { NULL, NULL, 0 }",
          "279: };",
          "283: static gint proto_btvdp                         = -1;",
          "284: static gint ett_btvdp                           = -1;",
          "285: static gint proto_btvdp_cph_scms_t              = -1;",
          "286: static gint ett_btvdp_cph_scms_t                = -1;",
          "288: static int hf_btvdp_codec                              = -1;",
          "289: static int hf_btvdp_content_protection                 = -1;",
          "290: static int hf_btvdp_l_bit                              = -1;",
          "291: static int hf_btvdp_cp_bit                             = -1;",
          "292: static int hf_btvdp_reserved                           = -1;",
          "297: static gboolean  force_vdp_scms_t = FALSE;",
          "298: static gint      force_vdp_codec = CODEC_H263_BASELINE;",
          "300: static const enum_val_t pref_vdp_codec[] = {",
          "301:     { \"h263\",    \"H263\",      CODEC_H263_BASELINE },",
          "302:     { \"mp4v-es\", \"MPEG4 VSP\", CODEC_MPEG4_VSP },",
          "303:     { NULL, NULL, 0 }",
          "304: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:     { 0, NULL }",
          "393: };",
          "395: extern value_string_ext bthci_evt_comp_id_ext;",
          "397: enum sep_state {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: static const value_string content_protection_type_vals[] = {",
          "434:     { 0x01,  \"DTCP\" },",
          "435:     { 0x02,  \"SCMS-T\" },",
          "436:     { 0, NULL }",
          "437: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     guint8 type;",
          "406:     guint8 media_type;",
          "407:     gint   codec;",
          "408:     enum sep_state state;",
          "409: } sep_entry_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     gint   content_protection_type;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "414:     sep_entry_t  *sep;",
          "415: } cid_type_data_t;",
          "417: void proto_register_btavdtp(void);",
          "418: void proto_reg_handoff_btavdtp(void);",
          "419: void proto_register_bta2dp(void);",
          "420: void proto_reg_handoff_bta2dp(void);",
          "421: void proto_register_btvdp(void);",
          "422: void proto_reg_handoff_btvdp(void);",
          "424: static const char *",
          "425: get_sep_type(guint32 frame_number, guint seid)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: typedef struct _sep_data_t {",
          "464:     gint   codec;",
          "465:     gint   content_protection_type;",
          "466: } sep_data_t;",
          "472: void proto_register_bta2dp_content_protection_header_scms_t(void);",
          "475: void proto_register_btvdp_content_protection_header_scms_t(void);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "527:             sep_data->seid = seid;",
          "528:             sep_data->type = type;",
          "529:             sep_data->codec = -1;",
          "530:             sep_data->media_type = media_type;",
          "531:             if (in_use) {",
          "532:                 sep_data->state = SEP_STATE_IN_USE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:             sep_data->content_protection_type = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "701: static gint",
          "702: dissect_capabilities(tvbuff_t *tvb, packet_info *pinfo,",
          "704: {",
          "705:     proto_item  *pitem                                        = NULL;",
          "706:     proto_item  *ptree                                        = NULL;",
          "",
          "[Removed Lines]",
          "703:                                          proto_tree *tree, gint offset, gint *codec)",
          "",
          "[Added Lines]",
          "757:         proto_tree *tree, gint offset, gint *codec,",
          "758:         gint *content_protection_type)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "805:                 losc = 0;",
          "806:                 break;",
          "807:             case SERVICE_CATEGORY_CONTENT_PROTECTION:",
          "808:                 proto_tree_add_item(service_tree, hf_btavdtp_content_protection_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "809:                 offset += 2;",
          "810:                 losc -= 2;",
          "815:                 break;",
          "816:             case SERVICE_CATEGORY_HEADER_COMPRESSION:",
          "817:                 proto_tree_add_item(service_tree, hf_btavdtp_header_compression_backch,   tvb, offset, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "812:                 proto_tree_add_item(service_tree, hf_btavdtp_data, tvb, offset, losc, ENC_NA);",
          "813:                 offset += losc;",
          "814:                 losc = 0;",
          "",
          "[Added Lines]",
          "865:                 if (content_protection_type) {",
          "867:                 }",
          "871:                 if (losc > 0) {",
          "872:                     proto_tree_add_item(service_tree, hf_btavdtp_data, tvb, offset, losc, ENC_NA);",
          "873:                     offset += losc;",
          "874:                     losc = 0;",
          "875:                 }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "950:     tvbuff_t         *next_tvb;",
          "951:     guint32          seid;",
          "952:     guint32          t_seid;",
          "955:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"AVDTP\");",
          "",
          "[Removed Lines]",
          "953:     gint             codec;",
          "",
          "[Added Lines]",
          "1014:     gint             codec = -1;",
          "1015:     gint             content_protection_type = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1047:                         get_sep_type(pinfo->fd->num, cid_type_data->sep->seid));",
          "1049:                 if (cid_type_data->sep->media_type == MEDIA_TYPE_AUDIO) {",
          "1050:                     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "1052:                 } else if (cid_type_data->sep->media_type == MEDIA_TYPE_VIDEO) {",
          "1053:                     next_tvb = tvb_new_subset_remaining(tvb, offset);",
          "1055:                 } else {",
          "1056:                     ti = proto_tree_add_item(tree, proto_btavdtp, tvb, offset, -1, ENC_NA);",
          "1057:                     btavdtp_tree = proto_item_add_subtree(ti, ett_btavdtp);",
          "",
          "[Removed Lines]",
          "1051:                     call_dissector_with_data(bta2dp_handle, next_tvb, pinfo, tree, &cid_type_data->sep->codec);",
          "1054:                     call_dissector_with_data(btvdp_handle, next_tvb, pinfo, tree, &cid_type_data->sep->codec);",
          "",
          "[Added Lines]",
          "1112:                     sep_data_t  sep_data;",
          "1114:                     sep_data.codec = cid_type_data->sep->codec;",
          "1115:                     sep_data.content_protection_type = cid_type_data->sep->content_protection_type;",
          "1118:                     call_dissector_with_data(bta2dp_handle, next_tvb, pinfo, tree, &sep_data);",
          "1120:                     sep_data_t  sep_data;",
          "1122:                     sep_data.codec = cid_type_data->sep->codec;",
          "1123:                     sep_data.content_protection_type = cid_type_data->sep->content_protection_type;",
          "1126:                     call_dissector_with_data(btvdp_handle, next_tvb, pinfo, tree, &sep_data);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1129:                 proto_tree_add_item(btavdtp_tree, hf_btavdtp_error_code, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1130:                 break;",
          "1131:             }",
          "1133:             break;",
          "1134:         case SIGNAL_ID_SET_CONFIGURATION:",
          "1135:             if (message_type == MESSAGE_TYPE_COMMAND) {",
          "1136:                 offset = dissect_seid(tvb, pinfo, btavdtp_tree, offset, SEID_ACP, 0, &seid);",
          "1137:                 offset = dissect_seid(tvb, pinfo, btavdtp_tree, offset, SEID_INT, 0, NULL);",
          "1140:                 t_frame_number = pinfo->fd->num;",
          "1141:                 t_seid = seid;",
          "",
          "[Removed Lines]",
          "1132:             offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, NULL);",
          "1138:                 offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, &codec);",
          "",
          "[Added Lines]",
          "1204:             offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, NULL, NULL);",
          "1210:                 offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, &codec, &content_protection_type);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1150:                 sep = (sep_entry_t *)wmem_tree_lookup32_array_le(sep_list, key);",
          "1151:                 if (sep && sep->seid == seid) {",
          "1152:                     sep->codec = codec;",
          "1153:                 }",
          "1155:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1225:                     sep->content_protection_type = content_protection_type;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1170:                 proto_tree_add_item(btavdtp_tree, hf_btavdtp_error_code, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1171:                 break;",
          "1172:             }",
          "1174:             break;",
          "1175:         case SIGNAL_ID_RECONFIGURE:",
          "1176:             if (message_type == MESSAGE_TYPE_COMMAND) {",
          "1177:                 offset = dissect_seid(tvb, pinfo, btavdtp_tree, offset, SEID_ACP, 0, &seid);",
          "1180:                 t_frame_number = pinfo->fd->num;",
          "1181:                 t_seid = seid;",
          "",
          "[Removed Lines]",
          "1173:             offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, NULL);",
          "1178:                 offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, &codec);",
          "",
          "[Added Lines]",
          "1246:             offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, NULL, NULL);",
          "1251:                 offset = dissect_capabilities(tvb, pinfo, btavdtp_tree, offset, &codec, &content_protection_type);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1190:                 sep = (sep_entry_t *)wmem_tree_lookup32_array_le(sep_list, key);",
          "1191:                 if (sep && sep->seid == seid) {",
          "1192:                     sep->codec = codec;",
          "1193:                 }",
          "1195:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1266:                     sep->content_protection_type = content_protection_type;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1504:         },",
          "1505:         { &hf_btavdtp_content_protection_type,",
          "1506:             { \"Type\",                           \"btavdtp.content_protection_type\",",
          "1508:             NULL, HFILL }",
          "1509:         },",
          "1510:         { &hf_btavdtp_media_codec_media_type,",
          "",
          "[Removed Lines]",
          "1507:             FT_UINT16, BASE_HEX, NULL, 0x0000,",
          "",
          "[Added Lines]",
          "1581:             FT_UINT16, BASE_HEX, VALS(content_protection_type_vals), 0x0000,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2013:     proto_item          *ti;",
          "2014:     proto_tree          *bta2dp_tree;",
          "2015:     proto_item          *pitem;",
          "2025:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"A2DP\");",
          "",
          "[Removed Lines]",
          "2016:     gint                offset = 0;",
          "2017:     gint                codec = -1;",
          "2018:     void                *save_private_data;",
          "2019:     dissector_handle_t  codec_dissector = NULL;",
          "2020:     btavdtp_data_t      *btavdtp_data;",
          "2022:     if (data)",
          "2023:         codec = *((gint *) data);",
          "",
          "[Added Lines]",
          "2090:     gint                 offset = 0;",
          "2091:     dissector_handle_t   codec_dissector = NULL;",
          "2092:     bta2dp_codec_info_t  bta2dp_codec_info;",
          "2093:     sep_data_t           sep_data;",
          "2095:     sep_data.codec = CODEC_SBC;",
          "2096:     sep_data.content_protection_type = 0;",
          "2098:     if (force_a2dp_scms_t || force_a2dp_codec) {",
          "2099:         if (force_a2dp_scms_t)",
          "2100:             sep_data.content_protection_type = 2;",
          "2101:         else if (data)",
          "2102:             sep_data.content_protection_type = ((sep_data_t *) data)->content_protection_type;",
          "2104:         if (force_a2dp_codec)",
          "2105:             sep_data.codec = force_a2dp_codec;",
          "2106:         else if (data)",
          "2107:             sep_data.codec = ((sep_data_t *) data)->codec;",
          "2108:     } else {",
          "2109:         if (data)",
          "2110:             sep_data = *((sep_data_t *) data);",
          "2111:     }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2047:     ti = proto_tree_add_item(tree, proto_bta2dp, tvb, offset, -1, ENC_NA);",
          "2048:     col_append_fstr(pinfo->cinfo, COL_INFO, \"Audio stream - %s\",",
          "2051:     bta2dp_tree = proto_item_add_subtree(ti, ett_bta2dp);",
          "2055:     PROTO_ITEM_SET_GENERATED(pitem);",
          "2058:         case CODEC_SBC:",
          "2059:             codec_dissector = sbc_handle;",
          "2060:             break;",
          "",
          "[Removed Lines]",
          "2049:             val_to_str_const(codec, media_codec_audio_type_vals, \"unknown codec\"));",
          "2053:     pitem = proto_tree_add_text(bta2dp_tree, tvb, offset, tvb_length_remaining(tvb, offset), \"Codec: %s\",",
          "2054:             val_to_str_const(codec, media_codec_audio_type_vals, \"unknown codec\"));",
          "2057:     switch (codec) {",
          "",
          "[Added Lines]",
          "2137:             val_to_str_const(sep_data.codec, media_codec_audio_type_vals, \"unknown codec\"));",
          "2141:     pitem = proto_tree_add_uint(bta2dp_tree, hf_bta2dp_codec, tvb, offset, 0, sep_data.codec);",
          "2144:     if (sep_data.content_protection_type > 0) {",
          "2145:         pitem = proto_tree_add_uint(bta2dp_tree, hf_bta2dp_content_protection, tvb, offset, 0, sep_data.content_protection_type);",
          "2146:         PROTO_ITEM_SET_GENERATED(pitem);",
          "2147:     }",
          "2149:     switch (sep_data.codec) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2069:             break;",
          "2070:     }",
          "2079:     call_dissector(rtp_handle, tvb, pinfo, tree);",
          "2080:     offset += tvb_length_remaining(tvb, offset);",
          "2084:     return offset;",
          "2085: }",
          "",
          "[Removed Lines]",
          "2072:     save_private_data = pinfo->private_data;",
          "2074:     btavdtp_data = wmem_new(wmem_packet_scope(), btavdtp_data_t);",
          "2075:     btavdtp_data->codec_dissector = codec_dissector;",
          "2077:     pinfo->private_data = btavdtp_data;",
          "2082:     pinfo->private_data = save_private_data;",
          "",
          "[Added Lines]",
          "2164:     bta2dp_codec_info.codec_dissector = codec_dissector;",
          "2165:     bta2dp_codec_info.content_protection_type = sep_data.content_protection_type;",
          "2167:     bluetooth_add_address(pinfo, &pinfo->net_dst, \"BT A2DP\", pinfo->fd->num, FALSE, &bta2dp_codec_info);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2088: proto_register_bta2dp(void)",
          "2089: {",
          "2090:     module_t *module;",
          "2092:     static hf_register_info hf[] = {",
          "2093:         { &hf_bta2dp_codec,",
          "2094:             { \"Codec\",                           \"bta2dp.codec\",",
          "",
          "[Removed Lines]",
          "2091: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2101:             NULL, HFILL }",
          "2102:         }",
          "2103:     };",
          "2106:     static gint *ett[] = {",
          "2107:         &ett_bta2dp",
          "2108:     };",
          "2110:     proto_bta2dp = proto_register_protocol(\"Bluetooth A2DP Profile\", \"BT A2DP\", \"bta2dp\");",
          "2112:     proto_register_field_array(proto_bta2dp, hf, array_length(hf));",
          "2114:     proto_register_subtree_array(ett, array_length(ett));",
          "2116:     new_register_dissector(\"bta2dp\", dissect_bta2dp, proto_bta2dp);",
          "",
          "[Removed Lines]",
          "2104: #endif",
          "2111: #if 0",
          "2113: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2119:     prefs_register_static_text_preference(module, \"a2dp.version\",",
          "2120:             \"Bluetooth Profile A2DP version: 1.3\",",
          "2121:             \"Version of profile supported by this dissector.\");",
          "2122: }",
          "2124: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2207:     prefs_register_bool_preference(module, \"a2dp.content_protection.scms_t\",",
          "2208:             \"Force SCMS-T decoding\",",
          "2209:             \"Force decoding stream as A2DP with Content Protection SCMS-T \",",
          "2210:             &force_a2dp_scms_t);",
          "2212:     prefs_register_enum_preference(module, \"a2dp.codec\",",
          "2213:             \"Force codec\",",
          "2214:             \"Force decoding stream as A2DP with specified codec\",",
          "2215:             &force_a2dp_codec, pref_a2dp_codec, FALSE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2139:     dissector_add_handle(\"btl2cap.cid\", bta2dp_handle);",
          "2140: }",
          "2143: static gint",
          "2144: dissect_btvdp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2145: {",
          "2146:     proto_item          *ti;",
          "2147:     proto_tree          *btvdp_tree;",
          "2148:     proto_item          *pitem;",
          "2158:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"VDP\");",
          "",
          "[Removed Lines]",
          "2149:     gint                offset = 0;",
          "2150:     gint                codec = -1;",
          "2151:     void                *save_private_data;",
          "2152:     dissector_handle_t  codec_dissector = NULL;",
          "2153:     btavdtp_data_t      *btavdtp_data;",
          "2155:     if (data)",
          "2156:         codec = *((gint *) data);",
          "",
          "[Added Lines]",
          "2242:     gint                 offset = 0;",
          "2243:     dissector_handle_t   codec_dissector = NULL;",
          "2244:     btvdp_codec_info_t   btvdp_codec_info;",
          "2245:     sep_data_t           sep_data;",
          "2247:     sep_data.codec = CODEC_H263_BASELINE;",
          "2248:     sep_data.content_protection_type = 0;",
          "2250:     if (force_vdp_scms_t || force_vdp_codec) {",
          "2251:         if (force_vdp_scms_t)",
          "2252:             sep_data.content_protection_type = 2;",
          "2253:         else if (data)",
          "2254:             sep_data.content_protection_type = ((sep_data_t *) data)->content_protection_type;",
          "2256:         if (force_vdp_codec)",
          "2257:             sep_data.codec = force_vdp_codec;",
          "2258:         else if (data)",
          "2259:             sep_data.codec = ((sep_data_t *) data)->codec;",
          "2260:     } else {",
          "2261:         if (data)",
          "2262:             sep_data = *((sep_data_t *) data);",
          "2263:     }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2180:     ti = proto_tree_add_item(tree, proto_btvdp, tvb, offset, -1, ENC_NA);",
          "2181:     col_append_fstr(pinfo->cinfo, COL_INFO, \"Video stream - %s\",",
          "2184:     btvdp_tree = proto_item_add_subtree(ti, ett_btvdp);",
          "2188:     PROTO_ITEM_SET_GENERATED(pitem);",
          "2191:         case CODEC_H263_BASELINE:",
          "2192:         case CODEC_H263_PROFILE_3:",
          "2193:         case CODEC_H263_PROFILE_8:",
          "",
          "[Removed Lines]",
          "2182:             val_to_str_const(codec, media_codec_video_type_vals, \"unknown codec\"));",
          "2186:     pitem = proto_tree_add_text(btvdp_tree, tvb, offset, tvb_length_remaining(tvb, offset), \"Codec: %s\",",
          "2187:             val_to_str_const(codec, media_codec_video_type_vals, \"unknown codec\"));",
          "2190:     switch (codec) {",
          "",
          "[Added Lines]",
          "2289:             val_to_str_const(sep_data.codec, media_codec_video_type_vals, \"unknown codec\"));",
          "2293:     pitem = proto_tree_add_uint(btvdp_tree, hf_btvdp_codec, tvb, offset, 0, sep_data.codec);",
          "2296:     if (sep_data.content_protection_type > 0) {",
          "2297:         pitem = proto_tree_add_uint(btvdp_tree, hf_btvdp_content_protection, tvb, offset, 0, sep_data.content_protection_type);",
          "2298:         PROTO_ITEM_SET_GENERATED(pitem);",
          "2299:     }",
          "2301:     switch (sep_data.codec) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2198:             break;",
          "2199:     }",
          "2208:     call_dissector(rtp_handle, tvb, pinfo, tree);",
          "2209:     offset += tvb_length_remaining(tvb, offset);",
          "2213:     return offset;",
          "2214: }",
          "",
          "[Removed Lines]",
          "2201:     save_private_data = pinfo->private_data;",
          "2203:     btavdtp_data = wmem_new(wmem_packet_scope(), btavdtp_data_t);",
          "2204:     btavdtp_data->codec_dissector = codec_dissector;",
          "2206:     pinfo->private_data = btavdtp_data;",
          "2211:     pinfo->private_data = save_private_data;",
          "",
          "[Added Lines]",
          "2312:     btvdp_codec_info.codec_dissector = codec_dissector;",
          "2313:     btvdp_codec_info.content_protection_type = sep_data.content_protection_type;",
          "2315:     bluetooth_add_address(pinfo, &pinfo->net_dst, \"BT VDP\", pinfo->fd->num, TRUE, &btvdp_codec_info);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2219:     module_t *module;",
          "2220:     expert_module_t* expert_btavdtp;",
          "2223:     static hf_register_info hf[] = {",
          "2224:         { &hf_btvdp_codec,",
          "2225:             { \"Codec\",                           \"btvdp.codec\",",
          "",
          "[Removed Lines]",
          "2222: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2232:             NULL, HFILL }",
          "2233:         }",
          "2234:     };",
          "2237:     static gint *ett[] = {",
          "2238:         &ett_btvdp",
          "",
          "[Removed Lines]",
          "2235: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2247:     proto_btvdp = proto_register_protocol(\"Bluetooth VDP Profile\", \"BT VDP\", \"btvdp\");",
          "2248:     new_register_dissector(\"btvdp\", dissect_btvdp, proto_btvdp);",
          "2250:     proto_register_field_array(proto_bta2dp, hf, array_length(hf));",
          "2252:     proto_register_subtree_array(ett, array_length(ett));",
          "2253:     expert_btavdtp = expert_register_protocol(proto_btvdp);",
          "2254:     expert_register_field_array(expert_btavdtp, ei, array_length(ei));",
          "",
          "[Removed Lines]",
          "2249: #if 0",
          "2251: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2257:     prefs_register_static_text_preference(module, \"vdp.version\",",
          "2258:             \"Bluetooth Profile VDP version: 1.1\",",
          "2259:             \"Version of profile supported by this dissector.\");",
          "2260: }",
          "2262: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2363:     prefs_register_bool_preference(module, \"vdp.content_protection.scms_t\",",
          "2364:             \"Force SCMS-T decoding\",",
          "2365:             \"Force decoding stream as VDP with Content Protection SCMS-T \",",
          "2366:             &force_vdp_scms_t);",
          "2368:     prefs_register_enum_preference(module, \"vdp.codec\",",
          "2369:             \"Force codec\",",
          "2370:             \"Force decoding stream as VDP with specified codec\",",
          "2371:             &force_vdp_codec, pref_vdp_codec, FALSE);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2275: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2391: static gint",
          "2392: dissect_a2dp_cp_scms_t(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "2393: {",
          "2394:     proto_item  *main_item;",
          "2395:     proto_tree  *main_tree;",
          "2396:     gint         offset = 0;",
          "2398:     main_item = proto_tree_add_item(tree, proto_bta2dp_cph_scms_t, tvb, offset, 1, ENC_NA);",
          "2399:     main_tree = proto_item_add_subtree(main_item, ett_bta2dp_cph_scms_t);",
          "2401:     proto_tree_add_item(main_tree, hf_bta2dp_reserved , tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2402:     proto_tree_add_item(main_tree, hf_bta2dp_cp_bit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2403:     proto_tree_add_item(main_tree, hf_bta2dp_l_bit , tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2404:     offset += 1;",
          "2406:     return offset;",
          "2407: }",
          "2409: void",
          "2410: proto_register_bta2dp_content_protection_header_scms_t(void)",
          "2411: {",
          "2412:     static hf_register_info hf[] = {",
          "2413:         { &hf_bta2dp_l_bit,",
          "2414:             { \"L-bit\",                           \"bta2dp.content_protection_header.scms_t.l_bit\",",
          "2415:             FT_BOOLEAN, 8, NULL, 0x01,",
          "2416:             NULL, HFILL }",
          "2417:         },",
          "2418:         { &hf_bta2dp_cp_bit,",
          "2419:             { \"Cp-bit\",                          \"bta2dp.content_protection_header.scms_t.cp_bit\",",
          "2420:             FT_BOOLEAN, 8, NULL, 0x02,",
          "2421:             NULL, HFILL }",
          "2422:         },",
          "2423:         { &hf_bta2dp_reserved,",
          "2424:             { \"Reserved\",                        \"bta2dp.content_protection_header.scms_t.reserved\",",
          "2425:             FT_BOOLEAN, 8, NULL, 0xFC,",
          "2426:             NULL, HFILL }",
          "2427:         }",
          "2428:     };",
          "2430:     static gint *ett[] = {",
          "2431:         &ett_bta2dp_cph_scms_t",
          "2432:     };",
          "2434:     proto_bta2dp_cph_scms_t = proto_register_protocol(\"Bluetooth A2DP Content Protection Header SCMS-T\", \"BT A2DP Content Protection Header SCMS-T\", \"bta2dp_content_protection_header_scms_t\");",
          "2435:     proto_register_field_array(proto_bta2dp_cph_scms_t, hf, array_length(hf));",
          "2436:     proto_register_subtree_array(ett, array_length(ett));",
          "2438:     new_register_dissector(\"bta2dp_content_protection_header_scms_t\", dissect_a2dp_cp_scms_t, proto_bta2dp_cph_scms_t);",
          "2439: }",
          "2441: static gint",
          "2442: dissect_vdp_cp_scms_t(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "2443: {",
          "2444:     proto_item  *main_item;",
          "2445:     proto_tree  *main_tree;",
          "2446:     gint         offset = 0;",
          "2448:     main_item = proto_tree_add_item(tree, proto_btvdp_cph_scms_t, tvb, offset, 1, ENC_NA);",
          "2449:     main_tree = proto_item_add_subtree(main_item, ett_btvdp_cph_scms_t);",
          "2451:     proto_tree_add_item(main_tree, hf_btvdp_reserved , tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2452:     proto_tree_add_item(main_tree, hf_btvdp_cp_bit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2453:     proto_tree_add_item(main_tree, hf_btvdp_l_bit , tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2454:     offset += 1;",
          "2456:     return offset;",
          "2457: }",
          "2459: void",
          "2460: proto_register_btvdp_content_protection_header_scms_t(void)",
          "2461: {",
          "2462:     static hf_register_info hf[] = {",
          "2463:         { &hf_btvdp_l_bit,",
          "2464:             { \"L-bit\",                           \"btvdp.content_protection_header.scms_t.l_bit\",",
          "2465:             FT_BOOLEAN, 8, NULL, 0x01,",
          "2466:             NULL, HFILL }",
          "2467:         },",
          "2468:         { &hf_btvdp_cp_bit,",
          "2469:             { \"Cp-bit\",                          \"btvdp.content_protection_header.scms_t.cp_bit\",",
          "2470:             FT_BOOLEAN, 8, NULL, 0x02,",
          "2471:             NULL, HFILL }",
          "2472:         },",
          "2473:         { &hf_btvdp_reserved,",
          "2474:             { \"Reserved\",                        \"btvdp.content_protection_header.scms_t.reserved\",",
          "2475:             FT_BOOLEAN, 8, NULL, 0xFC,",
          "2476:             NULL, HFILL }",
          "2477:         }",
          "2478:     };",
          "2480:     static gint *ett[] = {",
          "2481:         &ett_btvdp_cph_scms_t",
          "2482:     };",
          "2484:     proto_btvdp_cph_scms_t = proto_register_protocol(\"Bluetooth VDP Content Protection Header SCMS-T\", \"BT VDP Content Protection Header SCMS-T\", \"btvdp_content_protection_header_scms_t\");",
          "2485:     proto_register_field_array(proto_btvdp_cph_scms_t, hf, array_length(hf));",
          "2486:     proto_register_subtree_array(ett, array_length(ett));",
          "2488:     new_register_dissector(\"btvdp_content_protection_header_scms_t\", dissect_vdp_cp_scms_t, proto_btvdp_cph_scms_t);",
          "2489: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btavdtp.h||epan/dissectors/packet-btavdtp.h": [
          "File: epan/dissectors/packet-btavdtp.h -> epan/dissectors/packet-btavdtp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #ifndef __PACKET_BTAVDTP_H__",
          "28: #define __PACKET_BTAVDTP_H__",
          "31:     dissector_handle_t  codec_dissector;",
          "34: #endif",
          "",
          "[Removed Lines]",
          "30: typedef struct _btavdtp_data_t {",
          "32: } btavdtp_data_t;",
          "",
          "[Added Lines]",
          "30: #define BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T  0x02",
          "32: typedef struct _bta2dp_codec_info_t {",
          "33:     dissector_handle_t  codec_dissector;",
          "34:     gint                content_protection_type;",
          "35: } bta2dp_codec_info_t;",
          "37: typedef struct _btvdp_codec_info_t {",
          "39:     gint                content_protection_type;",
          "40: } btvdp_codec_info_t;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-hci_h1.c||epan/dissectors/packet-hci_h1.c": [
          "File: epan/dissectors/packet-hci_h1.c -> epan/dissectors/packet-hci_h1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     hci_data->localhost_bdaddr = localhost_bdaddr;",
          "115:     hci_data->localhost_name = localhost_name;",
          "117:     ti = proto_tree_add_int(hci_h1_tree, hf_hci_h1_direction, tvb, 0, 0, pinfo->p2p_dir);",
          "118:     PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     pinfo->ptype = PT_BLUETOOTH;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-hci_h4.c||epan/dissectors/packet-hci_h4.c": [
          "File: epan/dissectors/packet-hci_h4.c -> epan/dissectors/packet-hci_h4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     hci_data->localhost_bdaddr = localhost_bdaddr;",
          "111:     hci_data->localhost_name = localhost_name;",
          "113:     ti = proto_tree_add_uint(hci_h4_tree, hf_hci_h4_direction, tvb, 0, 0, pinfo->p2p_dir);",
          "114:     PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     pinfo->ptype = PT_BLUETOOTH;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
          "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #include <epan/packet.h>",
          "63: #include \"packet-rtp.h\"",
          "64: #include <epan/rtp_pt.h>",
          "65: #include <epan/conversation.h>",
          "66: #include <epan/reassemble.h>",
          "67: #include <epan/tap.h>",
          "69: #include <epan/prefs.h>",
          "70: #include <epan/wmem/wmem.h>",
          "71: #include <epan/strutil.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #include <epan/epan_dissect.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: static dissector_handle_t sprt_handle;",
          "143: static dissector_handle_t v150fw_handle;",
          "145: static int rtp_tap = -1;",
          "147: static dissector_table_t rtp_pt_dissector_table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: static dissector_handle_t bta2dp_content_protection_header_scms_t;",
          "147: static dissector_handle_t btvdp_content_protection_header_scms_t;",
          "148: static dissector_handle_t bta2dp_handle;",
          "149: static dissector_handle_t btvdp_handle;",
          "150: static dissector_handle_t sbc_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266: static dissector_handle_t data_handle;",
          "269: void proto_reg_handoff_rtp(void);",
          "270: void proto_reg_handoff_pkt_ccc(void);",
          "274: static void show_setup_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);",
          "275: static void get_conv_info(packet_info *pinfo, struct _rtp_info *rtp_info);",
          "",
          "[Removed Lines]",
          "272: static void dissect_rtp( tvbuff_t *tvb, packet_info *pinfo,",
          "273:     proto_tree *tree );",
          "",
          "[Added Lines]",
          "276: void proto_register_rtp(void);",
          "278: void proto_register_pkt_ccc(void);",
          "281: static gint dissect_rtp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "806:  rtp_dyn_payload = NULL;",
          "807: }",
          "810: void",
          "811: srtp_add_address(packet_info *pinfo, address *addr, int port, int other_port,",
          "812:    const gchar *setup_method, guint32 setup_frame_number,",
          "813:    gboolean is_video _U_, GHashTable *rtp_dyn_payload,",
          "815: {",
          "816:  address null_addr;",
          "817:  conversation_t* p_conv;",
          "",
          "[Removed Lines]",
          "814:                  struct srtp_info *srtp_info)",
          "",
          "[Added Lines]",
          "818: void",
          "819: bluetooth_add_address(packet_info *pinfo, address *addr,",
          "820:    const gchar *setup_method, guint32 setup_frame_number,",
          "821:    gboolean is_video, void *data)",
          "822: {",
          "823:  address null_addr;",
          "824:  conversation_t* p_conv;",
          "825:  struct _rtp_conversation_info *p_conv_data = NULL;",
          "831:  if (pinfo->fd->flags.visited)",
          "832:  {",
          "833:   return;",
          "834:  }",
          "836:  SET_ADDRESS(&null_addr, AT_NONE, 0, NULL);",
          "842:  p_conv = find_conversation(setup_frame_number, addr, &null_addr, PT_BLUETOOTH, 0, 0,",
          "843:        NO_ADDR_B | NO_PORT_B);",
          "848:  if (!p_conv || p_conv->setup_frame != setup_frame_number) {",
          "849:   p_conv = conversation_new(setup_frame_number, addr, &null_addr, PT_BLUETOOTH, 0, 0,",
          "850:        NO_ADDR2 | NO_PORT2);",
          "851:  }",
          "854:  conversation_set_dissector(p_conv, rtp_handle);",
          "859:  p_conv_data = (struct _rtp_conversation_info *)conversation_get_proto_data(p_conv, proto_rtp);",
          "864:  if (! p_conv_data) {",
          "866:   p_conv_data = wmem_new(wmem_file_scope(), struct _rtp_conversation_info);",
          "867:   p_conv_data->rtp_dyn_payload = NULL;",
          "872:   p_conv_data->extended_seqno = 0x10000;",
          "873:   p_conv_data->rtp_conv_info = wmem_new(wmem_file_scope(), rtp_private_conv_info);",
          "874:   p_conv_data->rtp_conv_info->multisegment_pdus = wmem_tree_new(wmem_file_scope());",
          "875:   conversation_add_proto_data(p_conv, proto_rtp, p_conv_data);",
          "877:   if (is_video) {",
          "878:    p_conv_data->bta2dp_info = NULL;",
          "879:    p_conv_data->btvdp_info = (btvdp_codec_info_t *) wmem_memdup(wmem_file_scope(), data, sizeof(btvdp_codec_info_t));",
          "880:   } else {",
          "881:    p_conv_data->bta2dp_info = (bta2dp_codec_info_t *) wmem_memdup(wmem_file_scope(), data, sizeof(bta2dp_codec_info_t));",
          "882:    p_conv_data->btvdp_info = NULL;",
          "883:   }",
          "884:  }",
          "890:  rtp_free_hash_dyn_payload(p_conv_data->rtp_dyn_payload);",
          "892:  g_strlcpy(p_conv_data->method, setup_method, MAX_RTP_SETUP_METHOD_SIZE+1);",
          "893:  p_conv_data->frame_number = setup_frame_number;",
          "894:  p_conv_data->is_video = is_video;",
          "895:  p_conv_data->rtp_dyn_payload = NULL;",
          "896:  p_conv_data->srtp_info = NULL;",
          "897: }",
          "904:    struct srtp_info *srtp_info)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "887:  p_conv_data->is_video = is_video;",
          "888:  p_conv_data->rtp_dyn_payload = rtp_dyn_payload;",
          "889:  p_conv_data->srtp_info = srtp_info;",
          "890: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "980:  p_conv_data->bta2dp_info = NULL;",
          "981:  p_conv_data->btvdp_info = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "899: }",
          "901: static gboolean",
          "903: {",
          "904:  guint8       octet1;",
          "905:  unsigned int version;",
          "",
          "[Removed Lines]",
          "902: dissect_rtp_heur_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, gboolean check_destport)",
          "",
          "[Added Lines]",
          "994: dissect_rtp_heur_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data, gboolean check_destport)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "954:   return FALSE;",
          "955:  }",
          "958:  return TRUE;",
          "959: }",
          "961: static gboolean",
          "963: {",
          "965: }",
          "967: static gboolean",
          "969: {",
          "971: }",
          "",
          "[Removed Lines]",
          "957:  dissect_rtp( tvb, pinfo, tree );",
          "962: dissect_rtp_heur_udp( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_ )",
          "964:  return dissect_rtp_heur_common(tvb, pinfo, tree, TRUE);",
          "968: dissect_rtp_heur_stun( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_ )",
          "970:  return dissect_rtp_heur_common(tvb, pinfo, tree, FALSE);",
          "",
          "[Added Lines]",
          "1049:  dissect_rtp( tvb, pinfo, tree, data );",
          "1054: dissect_rtp_heur_udp( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data )",
          "1056:  return dissect_rtp_heur_common(tvb, pinfo, tree, data, TRUE);",
          "1060: dissect_rtp_heur_stun( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data )",
          "1062:  return dissect_rtp_heur_common(tvb, pinfo, tree, data, FALSE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "976: static void",
          "977: process_rtp_payload(tvbuff_t *newtvb, packet_info *pinfo, proto_tree *tree,",
          "980: {",
          "981:  struct _rtp_conversation_info *p_conv_data = NULL;",
          "982:  gboolean found_match = FALSE;",
          "983:  int payload_len;",
          "984:  struct srtp_info *srtp_info;",
          "987:  payload_len = tvb_length_remaining(newtvb, offset);",
          "",
          "[Removed Lines]",
          "978:       proto_tree *rtp_tree,",
          "979:       unsigned int payload_type)",
          "985:  int offset=0;",
          "",
          "[Added Lines]",
          "1070:       proto_tree *rtp_tree, unsigned int payload_type)",
          "1076:  int offset = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1015:    proto_tree_add_item(rtp_tree, hf_srtp_auth_tag, newtvb, offset, srtp_info->auth_tag_len, ENC_NA);",
          "1017:   }",
          "1022:   if (p_conv_data && p_conv_data->rtp_dyn_payload) {",
          "1023:    gchar *payload_type_str = NULL;",
          "1024:    encoding_name_and_rate_t *encoding_name_and_rate_pt = NULL;",
          "",
          "[Removed Lines]",
          "1018:  }",
          "1021:  else if ( (payload_type >= PT_UNDF_96 && payload_type <= PT_UNDF_127) ) {",
          "",
          "[Added Lines]",
          "1109:  } else if (p_conv_data && !p_conv_data->bta2dp_info && !p_conv_data->btvdp_info &&",
          "1110:    payload_type >= PT_UNDF_96 && payload_type <= PT_UNDF_127) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1041:    }",
          "1043:   }",
          "1044:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134:  } else if (p_conv_data && p_conv_data->bta2dp_info) {",
          "1135:   tvbuff_t  *nexttvb;",
          "1136:   gint       suboffset = 0;",
          "1138:   found_match = TRUE;",
          "1140:   if (p_conv_data->bta2dp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "1141:    nexttvb = tvb_new_subset(newtvb, 0, 1, 1);",
          "1142:     call_dissector(bta2dp_content_protection_header_scms_t, nexttvb, pinfo, tree);",
          "1143:    suboffset = 1;",
          "1144:   }",
          "1146:   nexttvb = tvb_new_subset_remaining(newtvb, suboffset);",
          "1147:   call_dissector(p_conv_data->bta2dp_info->codec_dissector, nexttvb, pinfo, tree);",
          "1148:  } else if (p_conv_data && p_conv_data->btvdp_info) {",
          "1149:   tvbuff_t  *nexttvb;",
          "1150:   gint       suboffset = 0;",
          "1152:   found_match = TRUE;",
          "1154:   if (p_conv_data->btvdp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "1155:    nexttvb = tvb_new_subset(newtvb, 0, 1, 1);",
          "1156:    call_dissector(bta2dp_content_protection_header_scms_t, nexttvb, pinfo, tree);",
          "1157:    suboffset = 1;",
          "1158:   }",
          "1160:   nexttvb = tvb_new_subset_remaining(newtvb, suboffset);",
          "1161:   call_dissector(p_conv_data->btvdp_info->codec_dissector, nexttvb, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1265: static void",
          "1266: dissect_rtp_rfc2198(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "1267: {",
          "1269:  guint8 octet1;",
          "1270:  int cnt;",
          "1271:  gboolean hdr_follow = TRUE;",
          "",
          "[Removed Lines]",
          "1268:  int offset = 0;",
          "",
          "[Added Lines]",
          "1386:  gint offset = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1356: static void",
          "1357: dissect_rtp_hext_rfc5215_onebyte( tvbuff_t *tvb, packet_info *pinfo,",
          "1359: {",
          "1360:  proto_item *ti = NULL;",
          "1361:  proto_tree *rtp_hext_rfc5285_tree = NULL;",
          "",
          "[Removed Lines]",
          "1358:     proto_tree *rtp_hext_tree )",
          "",
          "[Added Lines]",
          "1476:   proto_tree *rtp_hext_tree )",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1410: static void",
          "1411: dissect_rtp_hext_rfc5215_twobytes(tvbuff_t *parent_tvb, guint id_offset,",
          "1413: {",
          "1414:  proto_item *ti = NULL;",
          "1415:  proto_tree *rtp_hext_rfc5285_tree = NULL;",
          "",
          "[Removed Lines]",
          "1412:     guint8 id, tvbuff_t *tvb, packet_info *pinfo, proto_tree *rtp_hext_tree)",
          "",
          "[Added Lines]",
          "1530:   guint8 id, tvbuff_t *tvb, packet_info *pinfo, proto_tree *rtp_hext_tree)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1454:  }",
          "1455: }",
          "1459: {",
          "1460:  proto_item *ti            = NULL;",
          "1461:  proto_tree *volatile rtp_tree = NULL;",
          "",
          "[Removed Lines]",
          "1457: static void",
          "1458: dissect_rtp( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree )",
          "",
          "[Added Lines]",
          "1575: static gint",
          "1576: dissect_rtp( tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1487:  unsigned int hdrext_offset = 0;",
          "1491:  static struct _rtp_info rtp_info_arr[4];",
          "1492:  static int rtp_info_current=0;",
          "",
          "[Removed Lines]",
          "1488:  tvbuff_t *newtvb = NULL;",
          "",
          "[Added Lines]",
          "1606:  tvbuff_t     *newtvb = NULL;",
          "1607:  const char   *pt = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1506:   switch (global_rtp_version0_type) {",
          "1507:   case RTP0_STUN:",
          "1508:    call_dissector(stun_handle, tvb, pinfo, tree);",
          "1510:   case RTP0_CLASSICSTUN:",
          "1511:    call_dissector(classicstun_handle, tvb, pinfo, tree);",
          "1514:   case RTP0_T38:",
          "1515:    call_dissector(t38_handle, tvb, pinfo, tree);",
          "1518:   case RTP0_SPRT:",
          "1519:    call_dissector(sprt_handle, tvb, pinfo, tree);",
          "1522:   case RTP0_INVALID:",
          "1523:    if (!(tvb_memeql(tvb, 4, \"ZRTP\", 4)))",
          "1524:    {",
          "1525:     call_dissector(zrtp_handle,tvb,pinfo,tree);",
          "1527:    }",
          "1528:   default:",
          "",
          "[Removed Lines]",
          "1509:    return;",
          "1512:    return;",
          "1516:    return;",
          "1520:    return;",
          "1526:     return;",
          "",
          "[Added Lines]",
          "1627:    return tvb_length(tvb);",
          "1630:    return tvb_length(tvb);",
          "1634:    return tvb_length(tvb);",
          "1638:    return tvb_length(tvb);",
          "1644:     return tvb_length(tvb);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1548:    proto_tree_add_uint( rtp_tree, hf_rtp_version, tvb,",
          "1549:        offset, 1, octet1);",
          "1550:   }",
          "1552:  }",
          "1554:  padding_set = RTP_PADDING( octet1 );",
          "",
          "[Removed Lines]",
          "1551:   return;",
          "",
          "[Added Lines]",
          "1669:   return offset;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1636:  }",
          "1637: #endif",
          "1640:  if ( (payload_type>95) && (payload_type<128) ) {",
          "1641:   if (p_conv_data && p_conv_data->rtp_dyn_payload){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1757:  if (p_conv_data && p_conv_data->bta2dp_info && p_conv_data->bta2dp_info->codec_dissector) {",
          "1758:   rtp_info->info_payload_type_str = (const char *) dissector_handle_get_short_name(p_conv_data->bta2dp_info->codec_dissector);",
          "1759:  } else if (p_conv_data && p_conv_data->btvdp_info && p_conv_data->btvdp_info->codec_dissector) {",
          "1760:   rtp_info->info_payload_type_str = (const char *) dissector_handle_get_short_name(p_conv_data->btvdp_info->codec_dissector);",
          "1761:  }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1648:   }",
          "1649:  }",
          "1651:  col_add_fstr( pinfo->cinfo, COL_INFO,",
          "1652:      \"PT=%s, SSRC=0x%X, Seq=%u, Time=%u%s\",",
          "1654:      sync_src,",
          "1655:      seq_num,",
          "1656:      timestamp,",
          "1657:      marker_set ? \", Mark\" : \"\");",
          "1660:  if ( tree ) {",
          "1661:   proto_tree *item;",
          "",
          "[Removed Lines]",
          "1653:   payload_type_str ? payload_type_str : val_to_str_ext( payload_type, &rtp_payload_type_vals_ext,\"Unknown (%u)\" ),",
          "",
          "[Added Lines]",
          "1775:  if (p_conv_data && p_conv_data->bta2dp_info) {",
          "1776:   pt = (p_conv_data->bta2dp_info->codec_dissector) ? dissector_handle_get_short_name(p_conv_data->bta2dp_info->codec_dissector) : \"Unknown\";",
          "1777:  } else if (p_conv_data && p_conv_data->btvdp_info) {",
          "1778:   pt = (p_conv_data->btvdp_info->codec_dissector) ? dissector_handle_get_short_name(p_conv_data->btvdp_info->codec_dissector) : \"Unknown\";",
          "1779:  } else {",
          "1780:   pt = (payload_type_str ? payload_type_str : val_to_str_ext(payload_type, &rtp_payload_type_vals_ext,\"Unknown (%u)\"));",
          "1781:  }",
          "1785:   pt,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1682:   proto_tree_add_boolean( rtp_tree, hf_rtp_marker, tvb, offset,",
          "1683:       1, octet2 );",
          "1690:   offset++;",
          "",
          "[Removed Lines]",
          "1685:   proto_tree_add_uint_format_value( rtp_tree, hf_rtp_payload_type, tvb,",
          "1686:       offset, 1, octet2, \"%s (%u)\",",
          "1687:    payload_type_str ? payload_type_str : val_to_str_ext_const( payload_type, &rtp_payload_type_vals_ext,\"Unknown\"),",
          "1688:    payload_type);",
          "",
          "[Added Lines]",
          "1816:   proto_tree_add_uint_format( rtp_tree, hf_rtp_payload_type, tvb,",
          "1817:       offset, 1, octet2, \"Payload type: %s (%u)\", pt, payload_type);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1714:   proto_item_append_text(ti, \" (%u items)\", csrc_count);",
          "1715:   rtp_csrc_tree = proto_item_add_subtree( ti, ett_csrc_list );",
          "1718:    csrc_item = tvb_get_ntohl( tvb, offset );",
          "1719:    proto_tree_add_uint_format( rtp_csrc_tree,",
          "1720:        hf_rtp_csrc_item, tvb, offset, 4,",
          "",
          "[Removed Lines]",
          "1717:         for (i = 0; i < csrc_count; i++ ) {",
          "",
          "[Added Lines]",
          "1846:   for (i = 0; i < csrc_count; i++ ) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1788:    call_dissector(data_handle,",
          "1789:        tvb_new_subset_remaining(tvb, offset),",
          "1790:        pinfo, rtp_tree);",
          "1792:   }",
          "1794:   padding_count = tvb_get_guint8( tvb,",
          "",
          "[Removed Lines]",
          "1791:    return;",
          "",
          "[Added Lines]",
          "1920:    return tvb_length(tvb);;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1800:   rtp_info->info_payload_len = tvb_length_remaining(tvb, offset);",
          "1801:   rtp_info->info_padding_count = padding_count;",
          "1803:   if (data_len > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1932:   if (p_conv_data && p_conv_data->bta2dp_info) {",
          "1933:    if (p_conv_data->bta2dp_info->codec_dissector == sbc_handle) {",
          "1934:     rtp_info->info_payload_offset += 1;",
          "1935:     rtp_info->info_payload_len -= 1;",
          "1936:    }",
          "1938:    if (p_conv_data->bta2dp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "1939:     rtp_info->info_payload_offset += 1;",
          "1940:     rtp_info->info_payload_len -= 1;",
          "1941:    }",
          "1942:   }",
          "1944:   if (p_conv_data && p_conv_data->btvdp_info &&",
          "1945:     p_conv_data->bta2dp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "1946:    rtp_info->info_payload_offset += 1;",
          "1947:    rtp_info->info_payload_len -= 1;",
          "1948:   }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1811:         offset,",
          "1812:         data_len,",
          "1813:         data_len,",
          "1815:    } CATCH_ALL {",
          "1816:     if (!pinfo->flags.in_error_pkt)",
          "1817:      tap_queue_packet(rtp_tap, pinfo, rtp_info);",
          "",
          "[Removed Lines]",
          "1814:         payload_type );",
          "",
          "[Added Lines]",
          "1961:         payload_type);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1855:   if (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "1857:    TRY {",
          "1858:     dissect_rtp_data( tvb, pinfo, tree, rtp_tree, offset,",
          "1859:         tvb_length_remaining( tvb, offset ),",
          "1860:         tvb_reported_length_remaining( tvb, offset ),",
          "1862:    } CATCH_ALL {",
          "1863:     if (!pinfo->flags.in_error_pkt)",
          "1864:      tap_queue_packet(rtp_tap, pinfo, rtp_info);",
          "",
          "[Removed Lines]",
          "1861:         payload_type );",
          "",
          "[Added Lines]",
          "2002:   rtp_info->info_payload_offset = offset;",
          "2003:   rtp_info->info_payload_len = tvb_length_remaining(tvb, offset);",
          "2005:   if (p_conv_data && p_conv_data->bta2dp_info) {",
          "2006:    if (p_conv_data->bta2dp_info->codec_dissector == sbc_handle) {",
          "2007:     rtp_info->info_payload_offset += 1;",
          "2008:     rtp_info->info_payload_len -= 1;",
          "2009:    }",
          "2011:    if (p_conv_data->bta2dp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "2012:     rtp_info->info_payload_offset += 1;",
          "2013:     rtp_info->info_payload_len -= 1;",
          "2014:    }",
          "2015:   }",
          "2017:   if (p_conv_data && p_conv_data->btvdp_info &&",
          "2018:     p_conv_data->bta2dp_info->content_protection_type == BTAVDTP_CONTENT_PROTECTION_TYPE_SCMS_T) {",
          "2019:    rtp_info->info_payload_offset += 1;",
          "2020:    rtp_info->info_payload_len -= 1;",
          "2021:   }",
          "2029:         payload_type);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1866:    }",
          "1867:    ENDTRY;",
          "1868:   }",
          "1871:  }",
          "1872:  if (!pinfo->flags.in_error_pkt)",
          "1873:   tap_queue_packet(rtp_tap, pinfo, rtp_info);",
          "1874: }",
          "1876: static void",
          "",
          "[Removed Lines]",
          "1869:   rtp_info->info_payload_offset = offset;",
          "1870:   rtp_info->info_payload_len = tvb_length_remaining(tvb, offset);",
          "",
          "[Added Lines]",
          "2041:  return offset;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2079:     p_conv_packet_data->rtp_dyn_payload = p_conv_data->rtp_dyn_payload;",
          "2080:     p_conv_packet_data->rtp_conv_info = p_conv_data->rtp_conv_info;",
          "2081:     p_conv_packet_data->srtp_info = p_conv_data->srtp_info;",
          "2082:     p_add_proto_data(pinfo->fd, proto_rtp, 0, p_conv_packet_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2250:     p_conv_packet_data->bta2dp_info = p_conv_data->bta2dp_info;",
          "2251:     p_conv_packet_data->btvdp_info = p_conv_data->btvdp_info;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2134: {",
          "2135:  proto_item *ti            = NULL;",
          "2136:  proto_tree *pkt_ccc_tree      = NULL;",
          "",
          "[Removed Lines]",
          "2132: static void",
          "2133: dissect_pkt_ccc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "2302: static int",
          "2303: dissect_pkt_ccc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2144:         ENC_TIME_NTP|ENC_BIG_ENDIAN);",
          "2145:  }",
          "2148: }",
          "",
          "[Removed Lines]",
          "2147:  dissect_rtp(tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "2317:  return dissect_rtp(tvb, pinfo, tree, data);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2194:  proto_register_field_array(proto_pkt_ccc, hf, array_length(hf));",
          "2195:  proto_register_subtree_array(ett, array_length(ett));",
          "2199:  pkt_ccc_module = prefs_register_protocol(proto_pkt_ccc, proto_reg_handoff_pkt_ccc);",
          "",
          "[Removed Lines]",
          "2197:  register_dissector(\"pkt_ccc\", dissect_pkt_ccc, proto_pkt_ccc);",
          "",
          "[Added Lines]",
          "2367:  new_register_dissector(\"pkt_ccc\", dissect_pkt_ccc, proto_pkt_ccc);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3041:  proto_register_field_array(proto_rtp, hf, array_length(hf));",
          "3042:  proto_register_subtree_array(ett, array_length(ett));",
          "3045:  register_dissector(\"rtp.rfc2198\", dissect_rtp_rfc2198, proto_rtp);",
          "3047:  rtp_tap = register_tap(\"rtp\");",
          "",
          "[Removed Lines]",
          "3044:  register_dissector(\"rtp\", dissect_rtp, proto_rtp);",
          "",
          "[Added Lines]",
          "3214:  new_register_dissector(\"rtp\", dissect_rtp, proto_rtp);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3128:   sprt_handle = find_dissector(\"sprt\");",
          "3129:   v150fw_handle = find_dissector(\"v150fw\");",
          "3131:   dissector_add_string(\"rtp_dyn_payload_type\", \"v150fw\", v150fw_handle);",
          "3133:   rtp_prefs_initialized = TRUE;",
          "3134:  } else {",
          "3135:   dissector_delete_uint(\"rtp.pt\", rtp_saved_rfc2198_pt, rtp_rfc2198_handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3301:   bta2dp_content_protection_header_scms_t = find_dissector(\"bta2dp_content_protection_header_scms_t\");",
          "3302:   btvdp_content_protection_header_scms_t = find_dissector(\"btvdp_content_protection_header_scms_t\");",
          "3303:   bta2dp_handle = find_dissector(\"bta2dp\");",
          "3304:   btvdp_handle = find_dissector(\"btvdp\");",
          "3305:   sbc_handle = find_dissector(\"sbc\");",
          "3309:   dissector_add_handle(\"btl2cap.cid\", rtp_handle);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtp.h||epan/dissectors/packet-rtp.h": [
          "File: epan/dissectors/packet-rtp.h -> epan/dissectors/packet-rtp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"ws_symbol_export.h\"",
          "32: struct _rtp_info {",
          "33:  unsigned int  info_version;",
          "34:  gboolean      info_padding_set;",
          "35:  gboolean      info_marker_set;",
          "37:  unsigned int  info_payload_type;",
          "38:  unsigned int  info_padding_count;",
          "39:  guint16       info_seq_num;",
          "",
          "[Removed Lines]",
          "36:  gboolean   info_is_video;",
          "",
          "[Added Lines]",
          "30: #include \"epan/packet.h\"",
          "33: #include \"packet-btavdtp.h\"",
          "39:  gboolean      info_is_video;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  gboolean      info_is_srtp;",
          "",
          "[Removed Lines]",
          "49:  gchar    *info_payload_type_str;",
          "50:  gint    info_payload_rate;",
          "",
          "[Added Lines]",
          "52:  const gchar   *info_payload_type_str;",
          "53:  gint          info_payload_rate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: };",
          "121: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  bta2dp_codec_info_t *bta2dp_info;",
          "123:  btvdp_codec_info_t *btvdp_info;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:                      GHashTable *rtp_dyn_payload,",
          "145:                      struct srtp_info *srtp_info);",
          "148: WS_DLL_PUBLIC",
          "149: void rtp_free_hash_dyn_payload(GHashTable *rtp_dyn_payload);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: void",
          "154: bluetooth_add_address(packet_info *pinfo, address *addr,",
          "155:          const gchar *setup_method, guint32 setup_frame_number,",
          "156:          gboolean is_video, void *data);",
          "",
          "---------------"
        ],
        "ui/rtp_stream.h||ui/rtp_stream.h": [
          "File: ui/rtp_stream.h -> ui/rtp_stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     guint32 dest_port;",
          "59:     guint32 ssrc;",
          "60:     guint8  pt;",
          "62:     guint32 npackets;",
          "",
          "[Removed Lines]",
          "61:     gchar *info_payload_type_str;",
          "",
          "[Added Lines]",
          "61:     const gchar *info_payload_type_str;",
          "",
          "---------------"
        ],
        "ui/tap-rtp-common.c||ui/tap-rtp-common.c": [
          "File: ui/tap-rtp-common.c -> ui/tap-rtp-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: #define NUM_DYN_CLOCK_VALUES (sizeof mimetype_and_clock_map / sizeof mimetype_and_clock_map[0])",
          "419: static guint32",
          "421: {",
          "422:  int i;",
          "",
          "[Removed Lines]",
          "420: get_dyn_pt_clock_rate(gchar *payload_type_str)",
          "",
          "[Added Lines]",
          "420: get_dyn_pt_clock_rate(const gchar *payload_type_str)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b929e2ff78c5196e5ab7c4413b0eae1b542e445",
      "candidate_info": {
        "commit_hash": "7b929e2ff78c5196e5ab7c4413b0eae1b542e445",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7b929e2ff78c5196e5ab7c4413b0eae1b542e445",
        "files": [
          "epan/dissectors/packet-rtp.c"
        ],
        "message": "rtp: cleanup\n\n- Remove dead initializers;\n- Localize some vars;\n- Whitespace\n\nChange-Id: Ie98667de736f2928ce1a2e4986917e4b0457866f\nReviewed-on: https://code.wireshark.org/review/6861\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtp.c||epan/dissectors/packet-rtp.c": [
          "File: epan/dissectors/packet-rtp.c -> epan/dissectors/packet-rtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:     guint pt = GPOINTER_TO_UINT(key);",
          "874:     encoding_name_and_rate_t *encoding = (encoding_name_and_rate_t*) value;",
          "877:     if (encoding) {",
          "878:         DPRINT2((\"encoding_name=%s\",",
          "879:                 encoding->encoding_name ? encoding->encoding_name : \"NULL\"));",
          "",
          "[Removed Lines]",
          "876:     DPRINT2((\"pt=%d\",pt));",
          "",
          "[Added Lines]",
          "876:     DPRINT2((\"pt=%d\", pt));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1222: {",
          "1223:     address null_addr;",
          "1224:     conversation_t* p_conv;",
          "",
          "[Removed Lines]",
          "1225:     struct _rtp_conversation_info *p_conv_data = NULL;",
          "",
          "[Added Lines]",
          "1225:     struct _rtp_conversation_info *p_conv_data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1401: process_rtp_payload(tvbuff_t *newtvb, packet_info *pinfo, proto_tree *tree,",
          "1402:             proto_tree *rtp_tree, unsigned int payload_type)",
          "1403: {",
          "1405:     gboolean found_match = FALSE;",
          "1406:     int payload_len;",
          "1407:     struct srtp_info *srtp_info;",
          "",
          "[Removed Lines]",
          "1404:     struct _rtp_conversation_info *p_conv_data = NULL;",
          "",
          "[Added Lines]",
          "1404:     struct _rtp_conversation_info *p_conv_data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1416:         payload_len -= srtp_info->mki_len + srtp_info->auth_tag_len;",
          "1417: #if 0",
          "1418: #error Currently the srtp_info structure contains no cipher data, see packet-sdp.c adding dummy_srtp_info structure",
          "1420:             if (rtp_tree)",
          "1421:                 proto_tree_add_item(rtp_tree, hf_srtp_null_encrypted_payload, newtvb, offset, payload_len, ENC_NA);",
          "1422:         }",
          "",
          "[Removed Lines]",
          "1419:         if (p_conv_data->srtp_info->encryption_algorithm==SRTP_ENC_ALG_NULL) {",
          "",
          "[Added Lines]",
          "1419:         if (p_conv_data->srtp_info->encryption_algorithm == SRTP_ENC_ALG_NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1457:                     proto_tree_add_item( rtp_tree, hf_rtp_data, newtvb, 0, -1, ENC_NA );",
          "1458:                 return;",
          "1459:             }",
          "",
          "[Removed Lines]",
          "1456:                 if(len==0)",
          "",
          "[Added Lines]",
          "1456:                 if(len == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1521:          unsigned int payload_type)",
          "1522: {",
          "1523:     tvbuff_t *newtvb;",
          "1525:     gboolean must_desegment = FALSE;",
          "1526:     rtp_private_conv_info *finfo = NULL;",
          "1528:     guint32 seqno;",
          "",
          "[Removed Lines]",
          "1524:     struct _rtp_conversation_info *p_conv_data= NULL;",
          "1527:     rtp_multisegment_pdu *msp = NULL;",
          "",
          "[Added Lines]",
          "1524:     struct _rtp_conversation_info *p_conv_data;",
          "1527:     rtp_multisegment_pdu *msp;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1536:     if(finfo == NULL || !desegment_rtp) {",
          "1539:         process_rtp_payload(newtvb, pinfo, tree, rtp_tree, payload_type);",
          "1540:         return;",
          "1541:     }",
          "",
          "[Removed Lines]",
          "1538:         newtvb=tvb_new_subset(tvb,offset,data_len,data_reported_len);",
          "",
          "[Added Lines]",
          "1538:         newtvb = tvb_new_subset(tvb, offset, data_len, data_reported_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1555: #endif",
          "1560:     if(msp && msp->startseq < seqno && msp->endseq >= seqno) {",
          "1561:         guint32 fid = msp->startseq;",
          "",
          "[Removed Lines]",
          "1558:     msp = (rtp_multisegment_pdu *)wmem_tree_lookup32_le(finfo->multisegment_pdus,seqno-1);",
          "",
          "[Added Lines]",
          "1558:     msp = (rtp_multisegment_pdu *)wmem_tree_lookup32_le(finfo->multisegment_pdus, seqno-1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1574:                        seqno-msp->startseq, data_len,",
          "1575:                        FALSE, 0);",
          "1578:                           &rtp_fragment_items, NULL, tree);",
          "1580: #ifdef DEBUG_FRAGMENTS",
          "1582:             newtvb?tvb_reported_length(newtvb):0);",
          "1583: #endif",
          "",
          "[Removed Lines]",
          "1577:         newtvb = process_reassembled_data(tvb,offset, pinfo, \"Reassembled RTP\", fd_head,",
          "1581:         g_debug(\"\\tFragment Coalesced; fd_head=%p, newtvb=%p (len %d)\",fd_head, newtvb,",
          "",
          "[Added Lines]",
          "1577:         newtvb = process_reassembled_data(tvb, offset, pinfo, \"Reassembled RTP\", fd_head,",
          "1581:         g_debug(\"\\tFragment Coalesced; fd_head=%p, newtvb=%p (len %d)\", fd_head, newtvb,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1599:                                 pinfo, fid, NULL);",
          "1603:             }",
          "1604:             else",
          "1605:             {",
          "",
          "[Removed Lines]",
          "1602:                 msp->endseq = MIN(msp->endseq,seqno) + 1;",
          "",
          "[Added Lines]",
          "1602:                 msp->endseq = MIN(msp->endseq, seqno) + 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1644:     {",
          "1645:         guint32 deseg_offset = pinfo->desegment_offset;",
          "1646:         guint32 frag_len = tvb_reported_length_remaining(newtvb, deseg_offset);",
          "1649: #ifdef DEBUG_FRAGMENTS",
          "1650:         g_debug(\"\\tRTP Must Desegment: tvb_len=%d ds_len=%d %d frag_len=%d ds_off=%d\",",
          "",
          "[Removed Lines]",
          "1647:         fragment_head *fd_head = NULL;",
          "",
          "[Added Lines]",
          "1647:         fragment_head *fd_head;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1658:         msp = wmem_new(wmem_file_scope(), rtp_multisegment_pdu);",
          "1659:         msp->startseq = seqno;",
          "1660:         msp->endseq = seqno+1;",
          "",
          "[Removed Lines]",
          "1661:         wmem_tree_insert32(finfo->multisegment_pdus,seqno,msp);",
          "",
          "[Added Lines]",
          "1661:         wmem_tree_insert32(finfo->multisegment_pdus, seqno, msp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1673:             {",
          "1674:                 proto_item *rtp_tree_item;",
          "1675:                 rtp_tree_item = proto_tree_add_uint( tree, hf_rtp_reassembled_in,",
          "1677:                                      fd_head->reassembled_in);",
          "1678:                 PROTO_ITEM_SET_GENERATED(rtp_tree_item);",
          "1679: #ifdef DEBUG_FRAGMENTS",
          "",
          "[Removed Lines]",
          "1676:                                      newtvb, deseg_offset, tvb_reported_length_remaining(newtvb,deseg_offset),",
          "",
          "[Added Lines]",
          "1676:                                      newtvb, deseg_offset, tvb_reported_length_remaining(newtvb, deseg_offset),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1718: dissect_rtp_rfc2198(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "1719: {",
          "1720:     gint offset = 0;",
          "1722:     int cnt;",
          "1723:     gboolean hdr_follow = TRUE;",
          "1725:     proto_tree *rfc2198_tree;",
          "1728:     rfc2198_hdr *hdr_chain = NULL;",
          "1733:     p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);",
          "",
          "[Removed Lines]",
          "1721:     guint8 octet1;",
          "1724:     proto_item *ti;",
          "1726:     proto_tree *rfc2198_hdr_tree = NULL;",
          "1727:     rfc2198_hdr *hdr_last, *hdr_new;",
          "1729:     struct _rtp_conversation_info *p_conv_data= NULL;",
          "1730:     const gchar *payload_type_str;",
          "",
          "[Added Lines]",
          "1724:     rfc2198_hdr *hdr_last;",
          "1726:     struct _rtp_conversation_info *p_conv_data;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1738:     hdr_last = NULL;",
          "1739:     cnt = 0;",
          "1740:     while (hdr_follow) {",
          "1741:         cnt++;",
          "1742:         payload_type_str = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1737:         proto_item *ti;",
          "1738:         proto_tree *rfc2198_hdr_tree;",
          "1739:         const gchar *payload_type_str;",
          "1740:         rfc2198_hdr *hdr_new;",
          "1741:         guint8 octet1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1805:         proto_tree *rtp_hext_tree )",
          "1806: {",
          "1807:     proto_tree *rtp_hext_rfc5285_tree = NULL;",
          "1810:     while (ext_offset < tvb_captured_length (tvb)) {",
          "1817:         start_ext_offset = ext_offset;",
          "",
          "[Removed Lines]",
          "1808:     guint ext_offset = 0, start_ext_offset;",
          "1811:         guint8 ext_hdr_hdr;",
          "1812:         guint8 ext_id;",
          "1813:         guint8 ext_length;",
          "1814:         tvbuff_t *subtvb = NULL;",
          "",
          "[Added Lines]",
          "1810:     guint ext_offset = 0;",
          "1813:         guint8    ext_hdr_hdr;",
          "1814:         guint8    ext_id;",
          "1815:         guint8    ext_length;",
          "1816:         guint     start_ext_offset;",
          "1817:         tvbuff_t *subtvb;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1867:     guint ext_offset = 0, start_ext_offset;",
          "1869:     while (ext_offset + 2 < tvb_captured_length (tvb)) {",
          "1875:         start_ext_offset = ext_offset;",
          "",
          "[Removed Lines]",
          "1870:         guint8 ext_id;",
          "1871:         guint8 ext_length;",
          "1872:         tvbuff_t *subtvb = NULL;",
          "",
          "[Added Lines]",
          "1873:         guint8    ext_id;",
          "1874:         guint8    ext_length;",
          "1875:         tvbuff_t *subtvb;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1910: {",
          "1911:     proto_item *ti            = NULL;",
          "1912:     proto_tree *volatile rtp_tree = NULL;",
          "1915:     guint8      octet1, octet2;",
          "1916:     unsigned int version;",
          "1917:     gboolean    padding_set;",
          "",
          "[Removed Lines]",
          "1913:     proto_tree *rtp_csrc_tree = NULL;",
          "1914:     proto_tree *rtp_hext_tree = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1921:     unsigned int payload_type;",
          "1922:     const gchar *payload_type_str = NULL;",
          "1923:     gboolean    is_srtp = FALSE;",
          "1928:     gint        length, reported_length;",
          "1929:     int         data_len;",
          "1930:     volatile unsigned int offset = 0;",
          "1931:     guint16     seq_num;",
          "1932:     guint32     timestamp;",
          "1933:     guint32     sync_src;",
          "1940:     const char   *pt = NULL;",
          "1942:     static struct _rtp_info rtp_info_arr[4];",
          "1944:     struct _rtp_info *rtp_info;",
          "1946:     rtp_info_current++;",
          "1949:     }",
          "1950:     rtp_info = &rtp_info_arr[rtp_info_current];",
          "",
          "[Removed Lines]",
          "1924:     unsigned int i            = 0;",
          "1925:     unsigned int hdr_extension_len= 0;",
          "1926:     unsigned int hdr_extension_id = 0;",
          "1927:     volatile unsigned int padding_count;",
          "1934:     guint32     csrc_item;",
          "1935:     struct _rtp_conversation_info *p_conv_data = NULL;",
          "1938:     unsigned int hdrext_offset = 0;",
          "1939:     tvbuff_t     *newtvb = NULL;",
          "1943:     static int rtp_info_current=0;",
          "1947:     if (rtp_info_current==4) {",
          "1948:         rtp_info_current=0;",
          "",
          "[Added Lines]",
          "1925:     unsigned int i;",
          "1932:     struct _rtp_conversation_info *p_conv_data;",
          "1938:     static int rtp_info_current = 0;",
          "1942:     if (rtp_info_current == 4) {",
          "1943:         rtp_info_current = 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1973:         case RTP0_INVALID:",
          "1974:             if (!(tvb_memeql(tvb, 4, \"ZRTP\", 4)))",
          "1975:             {",
          "1977:                 return tvb_captured_length(tvb);",
          "1978:             }",
          "1979:         default:",
          "",
          "[Removed Lines]",
          "1976:                 call_dissector(zrtp_handle,tvb,pinfo,tree);",
          "",
          "[Added Lines]",
          "1971:                 call_dissector(zrtp_handle, tvb,pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2123:     } else if (p_conv_data && p_conv_data->btvdp_info) {",
          "2124:         pt = (p_conv_data->btvdp_info->codec_dissector) ? dissector_handle_get_short_name(p_conv_data->btvdp_info->codec_dissector) : \"Unknown\";",
          "2125:     } else {",
          "2127:     }",
          "2129:     col_add_fstr( pinfo->cinfo, COL_INFO,",
          "",
          "[Removed Lines]",
          "2126:         pt = (payload_type_str ? payload_type_str : val_to_str_ext(payload_type, &rtp_payload_type_vals_ext,\"Unknown (%u)\"));",
          "",
          "[Added Lines]",
          "2121:         pt = (payload_type_str ? payload_type_str : val_to_str_ext(payload_type, &rtp_payload_type_vals_ext, \"Unknown (%u)\"));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2184:     }",
          "2186:     if ( csrc_count > 0 ) {",
          "2187:         ti = proto_tree_add_item(rtp_tree, hf_rtp_csrc_items, tvb, offset,",
          "2188:                                      csrc_count * 4, ENC_NA);",
          "2189:         proto_item_append_text(ti, \" (%u items)\", csrc_count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2182:         proto_tree *rtp_csrc_tree;",
          "2183:         guint32 csrc_item;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2204:     if ( extension_set ) {",
          "2206:         hdr_extension_id = tvb_get_ntohs( tvb, offset );",
          "2207:         if ( tree ) proto_tree_add_uint( rtp_tree, hf_rtp_prof_define, tvb, offset, 2, hdr_extension_id );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2202:         unsigned int hdr_extension_len;",
          "2203:         unsigned int hdr_extension_id;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2211:         if ( tree ) proto_tree_add_uint( rtp_tree, hf_rtp_length, tvb, offset, 2, hdr_extension_len);",
          "2212:         offset += 2;",
          "2213:         if ( hdr_extension_len > 0 ) {",
          "2214:             if ( tree ) {",
          "2215:                 ti = proto_tree_add_item(rtp_tree, hf_rtp_hdr_exts, tvb, offset, hdr_extension_len * 4, ENC_NA);",
          "2216:                 rtp_hext_tree = proto_item_add_subtree( ti, ett_hdr_ext );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2214:             proto_tree *rtp_hext_tree = NULL;",
          "2215:             tvbuff_t   *newtvb;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2229:             }",
          "2230:             else {",
          "2231:                 if ( !(dissector_try_uint(rtp_hdr_ext_dissector_table, hdr_extension_id, newtvb, pinfo, rtp_hext_tree)) ) {",
          "2236:                     }",
          "2237:                 }",
          "2238:             }",
          "",
          "[Removed Lines]",
          "2232:                     hdrext_offset = offset;",
          "2233:                     for ( i = 0; i < hdr_extension_len; i++ ) {",
          "2234:                         if ( tree ) proto_tree_add_uint( rtp_hext_tree, hf_rtp_hdr_ext, tvb, hdrext_offset, 4, tvb_get_ntohl( tvb, hdrext_offset ) );",
          "2235:                         hdrext_offset += 4;",
          "",
          "[Added Lines]",
          "2235:                     if ( tree ) {",
          "2236:                         unsigned int hdrext_offset;",
          "2238:                         hdrext_offset = offset;",
          "2239:                         for ( i = 0; i < hdr_extension_len; i++ ) {",
          "2240:                             proto_tree_add_uint( rtp_hext_tree, hf_rtp_hdr_ext, tvb, hdrext_offset, 4, tvb_get_ntohl( tvb, hdrext_offset ) );",
          "2241:                             hdrext_offset += 4;",
          "2242:                         }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2251:         if (tvb_captured_length(tvb) < tvb_reported_length(tvb)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2258:         volatile unsigned int padding_count;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2389: static void",
          "2390: dissect_rtp_hdr_ext_ed137(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree )",
          "2391: {",
          "2404:     hdr_extension_len = tvb_reported_length(tvb)/4;",
          "2406:     if ( hdr_extension_len > 0 ) {",
          "2409:         if ( tree ) {",
          "2412:         }",
          "2413:         for(i=0; i<hdr_extension_len; i++) {",
          "2416:             if (RTP_ED137_ptt_mask(ext_value)) {",
          "2417:                 col_append_str(pinfo->cinfo, COL_INFO, \", PTT\");",
          "",
          "[Removed Lines]",
          "2392:     unsigned int offset = 0;",
          "2393:     unsigned int hdr_extension_len = 0;",
          "2394:     proto_item *ti            = NULL;",
          "2395:     proto_item *ti2           = NULL;",
          "2396:     proto_tree *rtp_hext_tree = NULL;",
          "2397:     proto_tree *rtp_hext_tree2 = NULL;",
          "2398:     unsigned int i;",
          "2399:     guint32 ext_value;",
          "2400:     unsigned int ft_type = 0;",
          "2401:     unsigned int bss_qidx = 0;",
          "2402:     unsigned int bss_qidx_ml = 0;",
          "2407:         unsigned int hdrext_offset = 0;",
          "2410:           ti = proto_tree_add_item(tree, hf_rtp_hdr_ed137s, tvb, offset, hdr_extension_len * 4, ENC_NA);",
          "2411:           rtp_hext_tree = proto_item_add_subtree( ti, ett_hdr_ext_ed137s );",
          "2414:             ext_value=tvb_get_ntohl( tvb, hdrext_offset );",
          "",
          "[Added Lines]",
          "2400:     unsigned int hdr_extension_len;",
          "2405:         proto_tree   *rtp_hext_tree = NULL;",
          "2406:         unsigned int  offset = 0;",
          "2407:         unsigned int  hdrext_offset = 0;",
          "2408:         unsigned int  i;",
          "2411:             proto_item *ti;",
          "2412:             ti = proto_tree_add_item(tree, hf_rtp_hdr_ed137s, tvb, offset, hdr_extension_len * 4, ENC_NA);",
          "2413:             rtp_hext_tree = proto_item_add_subtree( ti, ett_hdr_ext_ed137s );",
          "2416:             guint32 ext_value = tvb_get_ntohl( tvb, hdrext_offset );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2420:                 col_append_str(pinfo->cinfo, COL_INFO, \", SQU\");",
          "2421:             }",
          "2422:             if ( tree ) {",
          "2423:                 ti2 = proto_tree_add_item(rtp_hext_tree, hf_rtp_hdr_ed137, tvb, hdrext_offset, 4, ENC_NA);",
          "2424:                 rtp_hext_tree2 = proto_item_add_subtree( ti2, ett_hdr_ext_ed137 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2425:                 proto_item *ti2;",
          "2426:                 proto_tree *rtp_hext_tree2;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2433:                 if (RTP_ED137_extended_information(ext_value)) {",
          "2435:                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_type, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2436:                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_len, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2439:                     switch (ft_type) {",
          "2440:                         case RTP_ED137_feature_bss_type:",
          "2447:                                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_bss_rssi_qidx, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2448:                                 }",
          "",
          "[Removed Lines]",
          "2438:                     ft_type=RTP_ED137_feature_type(ext_value);",
          "2441:                             bss_qidx=RTP_ED137_feature_bss_qidx(ext_value);",
          "2442:                             bss_qidx_ml=RTP_ED137_feature_bss_qidx_ml(ext_value);",
          "2443:                             if (RTP_ED137_feature_bss_qidx_ml_rssi==bss_qidx_ml) {",
          "2445:                                 if (bss_qidx<=RTP_ED137_feature_bss_qidx_rssi_max) {",
          "",
          "[Added Lines]",
          "2440:                     unsigned int ft_type;",
          "2444:                     ft_type = RTP_ED137_feature_type(ext_value);",
          "2447:                         {",
          "2448:                             unsigned int bss_qidx    = RTP_ED137_feature_bss_qidx(ext_value);",
          "2449:                             unsigned int bss_qidx_ml = RTP_ED137_feature_bss_qidx_ml(ext_value);",
          "2450:                             if (RTP_ED137_feature_bss_qidx_ml_rssi == bss_qidx_ml) {",
          "2452:                                 if (bss_qidx <= RTP_ED137_feature_bss_qidx_rssi_max) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2458:                             proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_bss_qidx_ml, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2459:                             proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_bss_nu, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2460:                             break;",
          "2461:                         default:",
          "2462:                             proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137_ft_value, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2463:                             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2468:                         }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2478: static void",
          "2479: dissect_rtp_hdr_ext_ed137a(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree )",
          "2480: {",
          "2493:     hdr_extension_len = tvb_reported_length(tvb)/4;",
          "2495:     if ( hdr_extension_len > 0 ) {",
          "2496:         unsigned int hdrext_offset = 0;",
          "2498:         if ( tree ) {",
          "2499:             ti = proto_tree_add_item(tree, hf_rtp_hdr_ed137s, tvb, offset, hdr_extension_len * 4, ENC_NA);",
          "2500:             rtp_hext_tree = proto_item_add_subtree( ti, ett_hdr_ext_ed137s );",
          "2501:         }",
          "2502:         for(i=0; i<hdr_extension_len; i++) {",
          "2505:             if (RTP_ED137A_ptt_mask(ext_value)) {",
          "2506:                 col_append_str(pinfo->cinfo, COL_INFO, \", PTT\");",
          "",
          "[Removed Lines]",
          "2481:     unsigned int offset = 0;",
          "2482:     unsigned int hdr_extension_len = 0;",
          "2483:     proto_item *ti            = NULL;",
          "2484:     proto_item *ti2           = NULL;",
          "2485:     proto_tree *rtp_hext_tree = NULL;",
          "2486:     proto_tree *rtp_hext_tree2 = NULL;",
          "2487:     unsigned int i;",
          "2488:     guint32 ext_value;",
          "2489:     unsigned int ft_type = 0;",
          "2490:     unsigned int sqi_qidx = 0;",
          "2491:     unsigned int sqi_qidx_ml = 0;",
          "2503:             ext_value=tvb_get_ntohl( tvb, hdrext_offset );",
          "",
          "[Added Lines]",
          "2489:     unsigned int hdr_extension_len;",
          "2494:         proto_tree *rtp_hext_tree = NULL;",
          "2495:         unsigned int offset = 0;",
          "2497:         unsigned int i;",
          "2500:             proto_item *ti;",
          "2505:             guint32 ext_value = tvb_get_ntohl( tvb, hdrext_offset );",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2509:                 col_append_str(pinfo->cinfo, COL_INFO, \", SQU\");",
          "2510:             }",
          "2511:             if ( tree ) {",
          "2512:                 ti2 = proto_tree_add_item(rtp_hext_tree, hf_rtp_hdr_ed137a, tvb, hdrext_offset, 4, ENC_NA);",
          "2513:                 rtp_hext_tree2 = proto_item_add_subtree( ti2, ett_hdr_ext_ed137a );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2514:                 proto_item *ti2;",
          "2515:                 proto_tree *rtp_hext_tree2;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2525:                 if (RTP_ED137A_extended_information(ext_value)) {",
          "2527:                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137a_ft_type, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2528:                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137a_ft_len, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2531:                     switch (ft_type) {",
          "2532:                         case RTP_ED137A_feature_sqi_type:",
          "2539:                                     proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137a_ft_sqi_rssi_qidx, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2540:                                 }",
          "",
          "[Removed Lines]",
          "2530:                     ft_type=RTP_ED137A_feature_type(ext_value);",
          "2533:                             sqi_qidx=RTP_ED137A_feature_sqi_qidx(ext_value);",
          "2534:                             sqi_qidx_ml=RTP_ED137A_feature_sqi_qidx_ml(ext_value);",
          "2535:                             if (RTP_ED137A_feature_sqi_qidx_ml_rssi==sqi_qidx_ml) {",
          "2537:                                 if (sqi_qidx<=RTP_ED137A_feature_sqi_qidx_rssi_max) {",
          "",
          "[Added Lines]",
          "2532:                     unsigned int ft_type;",
          "2536:                     ft_type = RTP_ED137A_feature_type(ext_value);",
          "2539:                         {",
          "2540:                             unsigned int sqi_qidx;",
          "2541:                             unsigned int sqi_qidx_ml;",
          "2543:                             sqi_qidx    = RTP_ED137A_feature_sqi_qidx(ext_value);",
          "2544:                             sqi_qidx_ml = RTP_ED137A_feature_sqi_qidx_ml(ext_value);",
          "2545:                             if (RTP_ED137A_feature_sqi_qidx_ml_rssi == sqi_qidx_ml) {",
          "2547:                                 if (sqi_qidx <= RTP_ED137A_feature_sqi_qidx_rssi_max) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2549:                             }",
          "2550:                             proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137a_ft_sqi_qidx_ml, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2551:                             break;",
          "2552:                         default:",
          "2553:                             proto_tree_add_item( rtp_hext_tree2, hf_rtp_hdr_ed137a_ft_value, tvb, hdrext_offset, 4, ENC_BIG_ENDIAN);",
          "2554:                             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2562:                         }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2585: get_conv_info(packet_info *pinfo, struct _rtp_info *rtp_info)",
          "2586: {",
          "2592:     p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);",
          "2594:     if (!p_conv_data)",
          "2595:     {",
          "2597:         p_conv = find_conversation(pinfo->fd->num, &pinfo->net_dst, &pinfo->net_src,",
          "2598:                                    pinfo->ptype,",
          "",
          "[Removed Lines]",
          "2588:     conversation_t *p_conv = NULL;",
          "2589:     struct _rtp_conversation_info *p_conv_data = NULL;",
          "",
          "[Added Lines]",
          "2599:     struct _rtp_conversation_info *p_conv_data;",
          "2606:         conversation_t *p_conv;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2639: show_setup_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "2640: {",
          "2643:     proto_tree *rtp_setup_tree;",
          "2644:     proto_item *ti;",
          "",
          "[Removed Lines]",
          "2642:     struct _rtp_conversation_info *p_conv_data = NULL;",
          "",
          "[Added Lines]",
          "2654:     struct _rtp_conversation_info *p_conv_data;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2672: static int",
          "2673: dissect_pkt_ccc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)",
          "2674: {",
          "2678:     if ( tree ) {",
          "2679:         ti = proto_tree_add_item(tree, proto_pkt_ccc, tvb, 0, 12, ENC_NA);",
          "2680:         pkt_ccc_tree = proto_item_add_subtree(ti, ett_pkt_ccc);",
          "",
          "[Removed Lines]",
          "2675:     proto_item *ti            = NULL;",
          "2676:     proto_tree *pkt_ccc_tree      = NULL;",
          "",
          "[Added Lines]",
          "2689:         proto_item *ti;",
          "2690:         proto_tree *pkt_ccc_tree;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3690: {",
          "3691:     static gboolean rtp_prefs_initialized = FALSE;",
          "3692:     static dissector_handle_t rtp_rfc2198_handle;",
          "3695:     static guint rtp_saved_rfc2198_pt;",
          "3697:     if (!rtp_prefs_initialized) {",
          "3698:         rtp_handle = find_dissector(\"rtp\");",
          "3699:         rtp_rfc2198_handle = find_dissector(\"rtp.rfc2198\");",
          "",
          "[Removed Lines]",
          "3693:     static dissector_handle_t rtp_hdr_ext_ed137_handle;",
          "3694:     static dissector_handle_t rtp_hdr_ext_ed137a_handle;",
          "",
          "[Added Lines]",
          "3709:         dissector_handle_t rtp_hdr_ext_ed137_handle;",
          "3710:         dissector_handle_t rtp_hdr_ext_ed137a_handle;",
          "",
          "---------------"
        ]
      }
    }
  ]
}